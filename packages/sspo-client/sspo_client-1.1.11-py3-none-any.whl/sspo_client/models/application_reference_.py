# coding: utf-8

"""
    SSPO Service

    The Scrum Software Process Ontology (SSPO) aims at establishing a common conceptualization on the Scrum domain, including roles, teams and projects.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ApplicationReference_(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'external_id': 'str',
        'url': 'str',
        'type_entity': 'str',
        'application': 'str'
    }

    attribute_map = {
        'id': 'id',
        'external_id': 'external_id',
        'url': 'url',
        'type_entity': 'type_entity',
        'application': 'application'
    }

    def __init__(self, id=None, external_id=None, url=None, type_entity=None, application=None):  # noqa: E501
        """ApplicationReference_ - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._external_id = None
        self._url = None
        self._type_entity = None
        self._application = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.external_id = external_id
        if url is not None:
            self.url = url
        self.type_entity = type_entity
        self.application = application

    @property
    def id(self):
        """Gets the id of this ApplicationReference_.  # noqa: E501


        :return: The id of this ApplicationReference_.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApplicationReference_.


        :param id: The id of this ApplicationReference_.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def external_id(self):
        """Gets the external_id of this ApplicationReference_.  # noqa: E501


        :return: The external_id of this ApplicationReference_.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this ApplicationReference_.


        :param external_id: The external_id of this ApplicationReference_.  # noqa: E501
        :type: str
        """
        if external_id is None:
            raise ValueError("Invalid value for `external_id`, must not be `None`")  # noqa: E501
        if external_id is not None and len(external_id) > 200:
            raise ValueError("Invalid value for `external_id`, length must be less than or equal to `200`")  # noqa: E501
        if external_id is not None and len(external_id) < 1:
            raise ValueError("Invalid value for `external_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._external_id = external_id

    @property
    def url(self):
        """Gets the url of this ApplicationReference_.  # noqa: E501


        :return: The url of this ApplicationReference_.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ApplicationReference_.


        :param url: The url of this ApplicationReference_.  # noqa: E501
        :type: str
        """
        if url is not None and len(url) > 200:
            raise ValueError("Invalid value for `url`, length must be less than or equal to `200`")  # noqa: E501

        self._url = url

    @property
    def type_entity(self):
        """Gets the type_entity of this ApplicationReference_.  # noqa: E501


        :return: The type_entity of this ApplicationReference_.  # noqa: E501
        :rtype: str
        """
        return self._type_entity

    @type_entity.setter
    def type_entity(self, type_entity):
        """Sets the type_entity of this ApplicationReference_.


        :param type_entity: The type_entity of this ApplicationReference_.  # noqa: E501
        :type: str
        """
        if type_entity is None:
            raise ValueError("Invalid value for `type_entity`, must not be `None`")  # noqa: E501
        if type_entity is not None and len(type_entity) > 200:
            raise ValueError("Invalid value for `type_entity`, length must be less than or equal to `200`")  # noqa: E501
        if type_entity is not None and len(type_entity) < 1:
            raise ValueError("Invalid value for `type_entity`, length must be greater than or equal to `1`")  # noqa: E501

        self._type_entity = type_entity

    @property
    def application(self):
        """Gets the application of this ApplicationReference_.  # noqa: E501


        :return: The application of this ApplicationReference_.  # noqa: E501
        :rtype: str
        """
        return self._application

    @application.setter
    def application(self, application):
        """Sets the application of this ApplicationReference_.


        :param application: The application of this ApplicationReference_.  # noqa: E501
        :type: str
        """
        if application is None:
            raise ValueError("Invalid value for `application`, must not be `None`")  # noqa: E501

        self._application = application

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApplicationReference_, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicationReference_):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
