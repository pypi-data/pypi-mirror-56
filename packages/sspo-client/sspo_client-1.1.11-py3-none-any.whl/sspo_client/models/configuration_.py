# coding: utf-8

"""
    SSPO Service

    The Scrum Software Process Ontology (SSPO) aims at establishing a common conceptualization on the Scrum domain, including roles, teams and projects.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Configuration_(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'secret': 'str',
        'tool_url': 'str',
        'tool': 'str',
        'organization': 'str'
    }

    attribute_map = {
        'id': 'id',
        'secret': 'secret',
        'tool_url': 'tool_url',
        'tool': 'tool',
        'organization': 'organization'
    }

    def __init__(self, id=None, secret=None, tool_url=None, tool=None, organization=None):  # noqa: E501
        """Configuration_ - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._secret = None
        self._tool_url = None
        self._tool = None
        self._organization = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.secret = secret
        if tool_url is not None:
            self.tool_url = tool_url
        self.tool = tool
        self.organization = organization

    @property
    def id(self):
        """Gets the id of this Configuration_.  # noqa: E501


        :return: The id of this Configuration_.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Configuration_.


        :param id: The id of this Configuration_.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def secret(self):
        """Gets the secret of this Configuration_.  # noqa: E501


        :return: The secret of this Configuration_.  # noqa: E501
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this Configuration_.


        :param secret: The secret of this Configuration_.  # noqa: E501
        :type: str
        """
        if secret is None:
            raise ValueError("Invalid value for `secret`, must not be `None`")  # noqa: E501
        if secret is not None and len(secret) > 200:
            raise ValueError("Invalid value for `secret`, length must be less than or equal to `200`")  # noqa: E501
        if secret is not None and len(secret) < 1:
            raise ValueError("Invalid value for `secret`, length must be greater than or equal to `1`")  # noqa: E501

        self._secret = secret

    @property
    def tool_url(self):
        """Gets the tool_url of this Configuration_.  # noqa: E501


        :return: The tool_url of this Configuration_.  # noqa: E501
        :rtype: str
        """
        return self._tool_url

    @tool_url.setter
    def tool_url(self, tool_url):
        """Sets the tool_url of this Configuration_.


        :param tool_url: The tool_url of this Configuration_.  # noqa: E501
        :type: str
        """
        if tool_url is not None and len(tool_url) > 200:
            raise ValueError("Invalid value for `tool_url`, length must be less than or equal to `200`")  # noqa: E501

        self._tool_url = tool_url

    @property
    def tool(self):
        """Gets the tool of this Configuration_.  # noqa: E501


        :return: The tool of this Configuration_.  # noqa: E501
        :rtype: str
        """
        return self._tool

    @tool.setter
    def tool(self, tool):
        """Sets the tool of this Configuration_.


        :param tool: The tool of this Configuration_.  # noqa: E501
        :type: str
        """
        if tool is None:
            raise ValueError("Invalid value for `tool`, must not be `None`")  # noqa: E501

        self._tool = tool

    @property
    def organization(self):
        """Gets the organization of this Configuration_.  # noqa: E501


        :return: The organization of this Configuration_.  # noqa: E501
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this Configuration_.


        :param organization: The organization of this Configuration_.  # noqa: E501
        :type: str
        """
        if organization is None:
            raise ValueError("Invalid value for `organization`, must not be `None`")  # noqa: E501

        self._organization = organization

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Configuration_, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Configuration_):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
