# coding: utf-8

"""
    SSPO Service

    The Scrum Software Process Ontology (SSPO) aims at establishing a common conceptualization on the Scrum domain, including roles, teams and projects.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DevelopmentTeam_(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'application_reference': 'str',
        'scrum_team': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'application_reference': 'application_reference',
        'scrum_team': 'scrum_team'
    }

    def __init__(self, id=None, name=None, description=None, application_reference=None, scrum_team=None):  # noqa: E501
        """DevelopmentTeam_ - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._description = None
        self._application_reference = None
        self._scrum_team = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        if description is not None:
            self.description = description
        if application_reference is not None:
            self.application_reference = application_reference
        if scrum_team is not None:
            self.scrum_team = scrum_team

    @property
    def id(self):
        """Gets the id of this DevelopmentTeam_.  # noqa: E501


        :return: The id of this DevelopmentTeam_.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DevelopmentTeam_.


        :param id: The id of this DevelopmentTeam_.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this DevelopmentTeam_.  # noqa: E501


        :return: The name of this DevelopmentTeam_.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DevelopmentTeam_.


        :param name: The name of this DevelopmentTeam_.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 200:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `200`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this DevelopmentTeam_.  # noqa: E501


        :return: The description of this DevelopmentTeam_.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DevelopmentTeam_.


        :param description: The description of this DevelopmentTeam_.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def application_reference(self):
        """Gets the application_reference of this DevelopmentTeam_.  # noqa: E501


        :return: The application_reference of this DevelopmentTeam_.  # noqa: E501
        :rtype: str
        """
        return self._application_reference

    @application_reference.setter
    def application_reference(self, application_reference):
        """Sets the application_reference of this DevelopmentTeam_.


        :param application_reference: The application_reference of this DevelopmentTeam_.  # noqa: E501
        :type: str
        """

        self._application_reference = application_reference

    @property
    def scrum_team(self):
        """Gets the scrum_team of this DevelopmentTeam_.  # noqa: E501


        :return: The scrum_team of this DevelopmentTeam_.  # noqa: E501
        :rtype: str
        """
        return self._scrum_team

    @scrum_team.setter
    def scrum_team(self, scrum_team):
        """Sets the scrum_team of this DevelopmentTeam_.


        :param scrum_team: The scrum_team of this DevelopmentTeam_.  # noqa: E501
        :type: str
        """

        self._scrum_team = scrum_team

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DevelopmentTeam_, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DevelopmentTeam_):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
