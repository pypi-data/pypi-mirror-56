# -*- coding: utf-8 -*-
from distutils.core import setup

packages = \
['pyrate_limiter']

package_data = \
{'': ['*'], 'pyrate_limiter': ['engines/*']}

entry_points = \
{'console_scripts': ['lint = scripts:lint', 'test = scripts:test']}

setup_kwargs = {
    'name': 'pyrate-limiter',
    'version': '1.0.0',
    'description': 'Python Rate-Limiter using Leaky-Bucket Algorimth Family',
    'long_description': '<img align="left" width="90" height="100" src="https://github.com/vutran1710/PyrateLimiter/blob/master/img/log.png">\n\n# PyrateLimiter\nThe request rate limiter using Leaky-bucket algorimth\n\n[![PyPI version](https://badge.fury.io/py/pyrate-limiter.svg)](https://badge.fury.io/py/pyrate-limiter)\n[![Python 3.7](https://img.shields.io/badge/python-3.7-blue.svg)](https://www.python.org/downloads/release/python-370/)\n[![Maintenance](https://img.shields.io/badge/Maintained%3F-yes-green.svg)](https://github.com/vutran1710/PyrateLimiter/graphs/commit-activity)\n[![PyPI license](https://img.shields.io/pypi/l/ansicolortags.svg)](https://pypi.python.org/pypi/pyrate-limiter/)\n[![HitCount](http://hits.dwyl.io/vutran1710/PyrateLimiter.svg)](http://hits.dwyl.io/vutran1710/PyrateLimiter)\n\n<br>\n\n## Introduction\nThis module can be used to apply rate-limit for API request, using `leaky-bucket` algorimth. User defines `window`\nduration and the limit of function calls within such interval.\n\n- To hold the state of the Bucket, you can use `LocalBucket` as internal bucket.\n- To use PyrateLimiter with `Redis`,  `redis-py` is required to be installed.\n- It is also possible to use your own Bucket implementation, by extending `AbstractBucket` from `pyrate_limiter.core`\n\n\n## Installation\nUsing pip/pipenv/poetry, whatever that works for your\n\n``` shell\n$ pip install pyrate-limiter\n```\n\n\n## API\nOne of the most pleasing features of this lib is that it is meant to be very extensible. People\'s efforts to solve rate-limiting\nproblem has so far led to the introductions of few variations of the **leaky-bucket** algorimth. The idea behind this is\nyou can extend the main core data-structure that power every member of this algorimth family.\n\n#### AbstractBucket\n```python\nfrom pyrate_limiter.core import AbstractBucket\n```\nAbstractBucket is a python abstract class that provide the Interface for, well, a `queue`. The algorimths provided in\n`pyrate_limiter.core` all make use of this data-structure. A solid implementation of this abstract class must includes 4\nmethods of the *bucket* instance.\n\n``` python\nclass AbstractBucket(ABC):\n    """An abstract class for Bucket as Queue"""\n\n    __values__ = []\n\n    @abstractmethod\n    def append(self, item) -> None:\n        """Add single item to the queue\n        """\n    @abstractmethod\n    def values(self) -> List:\n        """Return queue values\n        """\n    @abstractmethod\n    def update(self, new_list: List) -> None:\n        """Completely replace the existing queue with a new one\n        """\n    def getlen(self) -> int:\n        """Return the current queue\'s length\n        """\n        return len(self.__values__)\n```\n\nDue to personal needs, 2 ready-use implementations with [Redis](https://github.com/vutran1710/PyrateLimiter/blob/master/pyrate_limiter/engines/redis.py) and [Application Local State](https://github.com/vutran1710/PyrateLimiter/blob/master/pyrate_limiter/engines/local.py) are provided.\n\nWhen designing a rate-limiting service that depends on different type of data-store, like `Postgres` or `Mysql`,\nuser can write his own AbstractBucket implementation that fits their needs.\n\n## Usage\n\n``` python\nfrom pyrate_limiter.core import TokenBucketLimiter, LeakyBucketLimiter\nfrom pyrate_limiter.engines.redis import RedisBucket\nfrom pyrate_limiter.engines.local import LocalBucket\nfrom pyrate_limiter.exceptions import BucketFullException\n\n# Init redis bucket\nbucket = RedisBucket(\'redis-url\', hash=\'some-hash\', key=\'some-key\')\n\n# Create Limiter using Token-Bucket Algorimth\n# Maximum 10 items over 60 seconds\nlimiter = TokenBucketLimiter(bucket, capacity=10, window=60)\nlimiter.queue.config(key=\'change-key\')\n# Process an item\ntry:\n    limiter.process(\'some-json-serializable-value\')\n    print(\'Item allowed to pass through\')\nexcept BucketFullException:\n    print(\'Bucket is full\')\n    # do something\n\n\n\n# Similarly, using Leaky-Bucket Algorimth\nlimiter = LeakyBucketLimiter(bucket, capacity=5, window=6)\nlimiter.queue.config(key=\'change-key\')\n# Process an item\ntry:\n    # For LeakyBucketLimiter using the similar process method, only\n    # different in naming...\n    limiter.append(\'some-json-serializable-value\')\n    print(\'Item allowed to pass through\')\nexcept BucketFullException:\n    print(\'Bucket is full\')\n    # do something\n\n\n# If using LocalBucket, the instantiation is even simpler\nbucket = LocalBucket(initial_values=some_list_type_value)\n```\n\n\n## Understanding the Algorimths\nView `tests/test_leaky_bucket.py` and `tests/test_token_bucket.py` for explaination. Documents are on the way.\n#### LeakyBucket with Sliding-Window Algorimth\nLeakyBucket with Sliding-Window Algorimth is a capped bucket of items. Every item expires after {window} time, making room for later items to go in.\n\nItem\'s expiring-rate is {window} time.\nUsing a simple timeline model, we can describe it as follow\n```\nTIME <<----------[===========WINDOW===========]--------------------------------<<\nREQS >>--- <req> ---- <req> ---- <req> ---- <req> ---- <req> ---- <req> ------->>\n```\n\n#### TokenBucket\nTokenBucket with Fixed-Window Algorimth can be described as multiple groups of Going-In-Items that does not exceed the Bucket Capacity running into the Bucket at fixed-interval between groups.\n\nBucket\'s queue reset if interval between 2 items is larger or equal {window} time.\n\n```\n>>-- [x items] ----- (window) ------ [y items] ------ (window) ------ [z items] --->>\neg:  3reqs/3s         <5sec>          2reqs/1s         <5sec>          3reqs/3s\n```\n\n## Testing\nSimple as it should be, given you have [poetry](https://poetry.eustace.io/) installed...\n\n``` shell\n$ poetry run test\n```\n\nCICD flow is not currently setup since I dont have much time, but FYI, the `coverage` is decent enought IMO...\n\n``` shell\ntests/test_leaky_bucket.py::test_bucket_overloaded PASSED\ntests/test_leaky_bucket.py::test_bucket_cooldown PASSED\ntests/test_local_engine.py::test_invalid_initials PASSED\ntests/test_local_engine.py::test_leaky_bucket_overloaded PASSED\ntests/test_local_engine.py::test_leaky_bucket_cooldown PASSED\ntests/test_local_engine.py::test_token_bucket_overloaded PASSED\ntests/test_local_engine.py::test_token_bucket_cooldown PASSED\ntests/test_redis_engine.py::test_bucket_overloaded PASSED\ntests/test_redis_engine.py::test_bucket_cooldown PASSED\ntests/test_redis_engine.py::test_normalize_redis_value PASSED\ntests/test_redis_engine.py::test_token_bucket_overloaded PASSED\ntests/test_redis_engine.py::test_token_bucket_cooldown PASSED\ntests/test_token_bucket.py::test_bucket_overloaded PASSED\ntests/test_token_bucket.py::test_bucket_cooldown PASSED\n\n---------- coverage: platform darwin, python 3.7.5-final-0 -----------\nName                                Stmts   Miss  Cover\n-------------------------------------------------------\npyrate_limiter/__init__.py              1      0   100%\npyrate_limiter/basic_algorimth.py      45      0   100%\npyrate_limiter/core.py                 63      3    95%\npyrate_limiter/engines/local.py        14      0   100%\npyrate_limiter/engines/redis.py        33      1    97%\npyrate_limiter/exceptions.py            5      0   100%\n-------------------------------------------------------\nTOTAL                                 161      4    98%\n```\n\n## License\nCopyright *2019* **vutr**\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n',
    'author': 'vutr',
    'author_email': 'me@vutr.io',
    'url': 'https://github.com/vutran1710/PyrateLimiter',
    'packages': packages,
    'package_data': package_data,
    'entry_points': entry_points,
    'python_requires': '>=3.7,<4.0',
}


setup(**setup_kwargs)
