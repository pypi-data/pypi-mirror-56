# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import cxtgeo
else:
    import cxtgeo

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def new_intpointer():
    return cxtgeo.new_intpointer()

def copy_intpointer(value):
    return cxtgeo.copy_intpointer(value)

def delete_intpointer(obj):
    return cxtgeo.delete_intpointer(obj)

def intpointer_assign(obj, value):
    return cxtgeo.intpointer_assign(obj, value)

def intpointer_value(obj):
    return cxtgeo.intpointer_value(obj)

def new_longpointer():
    return cxtgeo.new_longpointer()

def copy_longpointer(value):
    return cxtgeo.copy_longpointer(value)

def delete_longpointer(obj):
    return cxtgeo.delete_longpointer(obj)

def longpointer_assign(obj, value):
    return cxtgeo.longpointer_assign(obj, value)

def longpointer_value(obj):
    return cxtgeo.longpointer_value(obj)

def new_floatpointer():
    return cxtgeo.new_floatpointer()

def copy_floatpointer(value):
    return cxtgeo.copy_floatpointer(value)

def delete_floatpointer(obj):
    return cxtgeo.delete_floatpointer(obj)

def floatpointer_assign(obj, value):
    return cxtgeo.floatpointer_assign(obj, value)

def floatpointer_value(obj):
    return cxtgeo.floatpointer_value(obj)

def new_doublepointer():
    return cxtgeo.new_doublepointer()

def copy_doublepointer(value):
    return cxtgeo.copy_doublepointer(value)

def delete_doublepointer(obj):
    return cxtgeo.delete_doublepointer(obj)

def doublepointer_assign(obj, value):
    return cxtgeo.doublepointer_assign(obj, value)

def doublepointer_value(obj):
    return cxtgeo.doublepointer_value(obj)

def new_charpointer():
    return cxtgeo.new_charpointer()

def copy_charpointer(value):
    return cxtgeo.copy_charpointer(value)

def delete_charpointer(obj):
    return cxtgeo.delete_charpointer(obj)

def charpointer_assign(obj, value):
    return cxtgeo.charpointer_assign(obj, value)

def charpointer_value(obj):
    return cxtgeo.charpointer_value(obj)

def new_intarray(nelements):
    return cxtgeo.new_intarray(nelements)

def delete_intarray(ary):
    return cxtgeo.delete_intarray(ary)

def intarray_getitem(ary, index):
    return cxtgeo.intarray_getitem(ary, index)

def intarray_setitem(ary, index, value):
    return cxtgeo.intarray_setitem(ary, index, value)

def new_longarray(nelements):
    return cxtgeo.new_longarray(nelements)

def delete_longarray(ary):
    return cxtgeo.delete_longarray(ary)

def longarray_getitem(ary, index):
    return cxtgeo.longarray_getitem(ary, index)

def longarray_setitem(ary, index, value):
    return cxtgeo.longarray_setitem(ary, index, value)

def new_floatarray(nelements):
    return cxtgeo.new_floatarray(nelements)

def delete_floatarray(ary):
    return cxtgeo.delete_floatarray(ary)

def floatarray_getitem(ary, index):
    return cxtgeo.floatarray_getitem(ary, index)

def floatarray_setitem(ary, index, value):
    return cxtgeo.floatarray_setitem(ary, index, value)

def new_doublearray(nelements):
    return cxtgeo.new_doublearray(nelements)

def delete_doublearray(ary):
    return cxtgeo.delete_doublearray(ary)

def doublearray_getitem(ary, index):
    return cxtgeo.doublearray_getitem(ary, index)

def doublearray_setitem(ary, index, value):
    return cxtgeo.doublearray_setitem(ary, index, value)

def new_chararray(nelements):
    return cxtgeo.new_chararray(nelements)

def delete_chararray(ary):
    return cxtgeo.delete_chararray(ary)

def chararray_getitem(ary, index):
    return cxtgeo.chararray_getitem(ary, index)

def chararray_setitem(ary, index, value):
    return cxtgeo.chararray_setitem(ary, index, value)

def swig_carr_to_numpy_1d(np, carr):
    return cxtgeo.swig_carr_to_numpy_1d(np, carr)

def swig_carr_to_numpy_f1d(npf, carrf):
    return cxtgeo.swig_carr_to_numpy_f1d(npf, carrf)

def swig_carr_to_numpy_i1d(npi, carri):
    return cxtgeo.swig_carr_to_numpy_i1d(npi, carri)

def swig_numpy_to_carr_1d(npinput, cxarr):
    return cxtgeo.swig_numpy_to_carr_1d(npinput, cxarr)

def swig_numpy_to_carr_f1d(npinputf, cxarrf):
    return cxtgeo.swig_numpy_to_carr_f1d(npinputf, cxarrf)

def swig_numpy_to_carr_i1d(npinputi, cxarri):
    return cxtgeo.swig_numpy_to_carr_i1d(npinputi, cxarri)
_GNU_SOURCE = cxtgeo._GNU_SOURCE
PI = cxtgeo.PI
M_PI = cxtgeo.M_PI
PIHALF = cxtgeo.PIHALF
FLOATEPS = cxtgeo.FLOATEPS
VERYLARGEFLOAT = cxtgeo.VERYLARGEFLOAT
VERYSMALLFLOAT = cxtgeo.VERYSMALLFLOAT
VERYLARGEPOSITIVE = cxtgeo.VERYLARGEPOSITIVE
VERYLARGENEGATIVE = cxtgeo.VERYLARGENEGATIVE
UNDEF = cxtgeo.UNDEF
UNDEF_LIMIT = cxtgeo.UNDEF_LIMIT
UNDEF_INT = cxtgeo.UNDEF_INT
UNDEF_INT_LIMIT = cxtgeo.UNDEF_INT_LIMIT
UNDEF_MAP = cxtgeo.UNDEF_MAP
UNDEF_INT_MAP = cxtgeo.UNDEF_INT_MAP
UNDEF_MAP_LIMIT = cxtgeo.UNDEF_MAP_LIMIT
UNDEF_INT_MAP_LIMIT = cxtgeo.UNDEF_INT_MAP_LIMIT
UNDEF_MAP_STORM = cxtgeo.UNDEF_MAP_STORM
UNDEF_MAP_IRAP = cxtgeo.UNDEF_MAP_IRAP
UNDEF_MAP_IRAPB = cxtgeo.UNDEF_MAP_IRAPB
UNDEF_MAP_ZMAP = cxtgeo.UNDEF_MAP_ZMAP
UNDEF_MAP_IRAPB_LIMIT = cxtgeo.UNDEF_MAP_IRAPB_LIMIT
UNDEF_CUBE_RMS = cxtgeo.UNDEF_CUBE_RMS
UNDEF_POINT = cxtgeo.UNDEF_POINT
UNDEF_POINT_LIMIT = cxtgeo.UNDEF_POINT_LIMIT
UNDEF_POINT_RMS = cxtgeo.UNDEF_POINT_RMS
UNDEF_POINT_IRAP = cxtgeo.UNDEF_POINT_IRAP
LAST_POINT = cxtgeo.LAST_POINT
LAST_POINT_LIMIT = cxtgeo.LAST_POINT_LIMIT
MAXPSTACK = cxtgeo.MAXPSTACK
ROFFSTRLEN = cxtgeo.ROFFSTRLEN
ECLNAMELEN = cxtgeo.ECLNAMELEN
ECLTYPELEN = cxtgeo.ECLTYPELEN
ECLINTEHEADLEN = cxtgeo.ECLINTEHEADLEN
ECLDOUBHEADLEN = cxtgeo.ECLDOUBHEADLEN
ECLLOGIHEADLEN = cxtgeo.ECLLOGIHEADLEN
ECLNUMBLOCKLEN = cxtgeo.ECLNUMBLOCKLEN
ECLCHABLOCKLEN = cxtgeo.ECLCHABLOCKLEN
UNDEF_ROFFBYTE = cxtgeo.UNDEF_ROFFBYTE
UNDEF_ROFFINT = cxtgeo.UNDEF_ROFFINT
UNDEF_ROFFFLOAT = cxtgeo.UNDEF_ROFFFLOAT
UNDEF_ECLINT = cxtgeo.UNDEF_ECLINT
UNDEF_ECLFLOAT = cxtgeo.UNDEF_ECLFLOAT

def xtgverbose(arg1):
    return cxtgeo.xtgverbose(arg1)

def xtg_silent(value):
    return cxtgeo.xtg_silent(value)

def xtg_verbose_file(filename):
    return cxtgeo.xtg_verbose_file(filename)

def xtg_speak(*args):
    return cxtgeo.xtg_speak(*args)

def xtg_warn(*args):
    return cxtgeo.xtg_warn(*args)

def xtg_error(*args):
    return cxtgeo.xtg_error(*args)

def xtg_shout(*args):
    return cxtgeo.xtg_shout(*args)

def xtg_fopen(filename, mode):
    return cxtgeo.xtg_fopen(filename, mode)

def xtg_fopen_bytestream(swig_bytes, mode):
    return cxtgeo.xtg_fopen_bytestream(swig_bytes, mode)

def xtg_fclose(fhandle):
    return cxtgeo.xtg_fclose(fhandle)

def x_interp_map_nodes(x_v, y_v, z_v, x, y, method, debug):
    return cxtgeo.x_interp_map_nodes(x_v, y_v, z_v, x, y, method, debug)

def x_ijk2ib(i, j, k, nx, ny, nz, ia_start):
    return cxtgeo.x_ijk2ib(i, j, k, nx, ny, nz, ia_start)

def x_ijk2ic(i, j, k, nx, ny, nz, ia_start):
    return cxtgeo.x_ijk2ic(i, j, k, nx, ny, nz, ia_start)

def x_ib2ijk(ib, i, j, k, nx, ny, nz, ia_start):
    return cxtgeo.x_ib2ijk(ib, i, j, k, nx, ny, nz, ia_start)

def x_ic2ijk(ic, i, j, k, nx, ny, nz, ia_start):
    return cxtgeo.x_ic2ijk(ic, i, j, k, nx, ny, nz, ia_start)

def x_vector_info2(x1, x2, y1, y2, vlen, xangle_radian, xangle_degrees, option, debug):
    return cxtgeo.x_vector_info2(x1, x2, y1, y2, vlen, xangle_radian, xangle_degrees, option, debug)

def x_vector_linint2(x0, y0, z0, x1, y1, z1, dist, option, debug):
    return cxtgeo.x_vector_linint2(x0, y0, z0, x1, y1, z1, dist, option, debug)

def x_diff_angle(ang1, ang2, option, debug):
    return cxtgeo.x_diff_angle(ang1, ang2, option, debug)

def x_avg_angles(angles, nsize):
    return cxtgeo.x_avg_angles(angles, nsize)

def x_conv_int2float(n, v1, v2, debug):
    return cxtgeo.x_conv_int2float(n, v1, v2, debug)

def x_conv_int2double(n, v1, v2, debug):
    return cxtgeo.x_conv_int2double(n, v1, v2, debug)

def x_conv_double2float(n, v1, v2, debug):
    return cxtgeo.x_conv_double2float(n, v1, v2, debug)

def x_rotation_conv(ain, aimode, mode, option, debug):
    return cxtgeo.x_rotation_conv(ain, aimode, mode, option, debug)

def surf_import_irap_bin(fhandle, mode, swig_np_dbl_aout_v1, option):
    return cxtgeo.surf_import_irap_bin(fhandle, mode, swig_np_dbl_aout_v1, option)

def surf_import_irap_ascii(fc, mode, swig_np_dbl_aout_v1, option):
    return cxtgeo.surf_import_irap_ascii(fc, mode, swig_np_dbl_aout_v1, option)

def surf_import_ijxyz(fc, mode, swig_np_int_aout_v1, swig_np_int_aout_v2, swig_np_dbl_aout_v1, option):
    return cxtgeo.surf_import_ijxyz(fc, mode, swig_np_int_aout_v1, swig_np_int_aout_v2, swig_np_dbl_aout_v1, option)

def surf_import_ijxyz_tmpl(fc, swig_np_int_in_v1, swig_np_int_in_v2, swig_np_dbl_aout_v1, option):
    return cxtgeo.surf_import_ijxyz_tmpl(fc, swig_np_int_in_v1, swig_np_int_in_v2, swig_np_dbl_aout_v1, option)

def surf_export_irap_bin(fc, mx, my, xori, yori, xinc, yinc, rot, swig_np_dbl_in_v1, option):
    return cxtgeo.surf_export_irap_bin(fc, mx, my, xori, yori, xinc, yinc, rot, swig_np_dbl_in_v1, option)

def surf_export_irap_ascii(fc, mx, my, xori, yori, xinc, yinc, rot, swig_np_dbl_in_v1, zmin, zmax, option):
    return cxtgeo.surf_export_irap_ascii(fc, mx, my, xori, yori, xinc, yinc, rot, swig_np_dbl_in_v1, zmin, zmax, option)

def surf_export_zmap_ascii(fc, mx, my, xori, yori, xinc, yinc, swig_np_dbl_in_v1, zmin, zmax, option):
    return cxtgeo.surf_export_zmap_ascii(fc, mx, my, xori, yori, xinc, yinc, swig_np_dbl_in_v1, zmin, zmax, option)

def surf_export_storm_bin(fc, mx, my, xori, yori, xinc, yinc, swig_np_dbl_in_v1, zmin, zmax, option):
    return cxtgeo.surf_export_storm_bin(fc, mx, my, xori, yori, xinc, yinc, swig_np_dbl_in_v1, zmin, zmax, option)

def surf_export_ijxyz(fc, mx, my, xori, yori, xinc, yinc, rot, yflip, swig_np_int_in_v1, swig_np_int_in_v2, swig_np_dbl_in_v1, option):
    return cxtgeo.surf_export_ijxyz(fc, mx, my, xori, yori, xinc, yinc, rot, yflip, swig_np_int_in_v1, swig_np_int_in_v2, swig_np_dbl_in_v1, option)

def surf_swapaxes(nx, ny, yflip, xori, xinc, yori, yinc, rotation, swig_np_dbl_inplace_v1, option, debug):
    return cxtgeo.surf_swapaxes(nx, ny, yflip, xori, xinc, yori, yinc, rotation, swig_np_dbl_inplace_v1, option, debug)

def surf_zminmax(nx, ny, p_map_v, zmin, zmax, debug):
    return cxtgeo.surf_zminmax(nx, ny, p_map_v, zmin, zmax, debug)

def surf_xyz_from_ij(i, j, xori, xinc, yori, yinc, nx, ny, yflip, rot_deg, swig_np_dbl_in_v1, flag):
    return cxtgeo.surf_xyz_from_ij(i, j, xori, xinc, yori, yinc, nx, ny, yflip, rot_deg, swig_np_dbl_in_v1, flag)

def surf_xyori_from_ij(i, j, x, y, xori, xinc, yori, yinc, nx, ny, yflip, rot_deg, flag, debug):
    return cxtgeo.surf_xyori_from_ij(i, j, x, y, xori, xinc, yori, yinc, nx, ny, yflip, rot_deg, flag, debug)

def surf_get_z_from_ij(ic, jc, x, y, nx, ny, xinc, yinc, xori, yori, p_map_v):
    return cxtgeo.surf_get_z_from_ij(ic, jc, x, y, nx, ny, xinc, yinc, xori, yori, p_map_v)

def surf_get_z_from_xy(x, y, nx, ny, xori, yori, xinc, yinc, yflip, rot_deg, swig_np_dbl_in_v1):
    return cxtgeo.surf_get_z_from_xy(x, y, nx, ny, xori, yori, xinc, yinc, yflip, rot_deg, swig_np_dbl_in_v1)

def surf_get_zv_from_xyv(swig_np_dbl_in_v1, swig_np_dbl_in_v2, swig_np_dbl_inplace_v1, nx, ny, xori, yori, xinc, yinc, yflip, rot_deg, swig_np_dbl_in_v3):
    return cxtgeo.surf_get_zv_from_xyv(swig_np_dbl_in_v1, swig_np_dbl_in_v2, swig_np_dbl_inplace_v1, nx, ny, xori, yori, xinc, yinc, yflip, rot_deg, swig_np_dbl_in_v3)

def surf_xy_as_values(xori, xinc, yori, yinc, nx, ny, rot_deg, swig_np_dbl_aout_v1, swig_np_dbl_aout_v2, flag, debug):
    return cxtgeo.surf_xy_as_values(xori, xinc, yori, yinc, nx, ny, rot_deg, swig_np_dbl_aout_v1, swig_np_dbl_aout_v2, flag, debug)

def surf_slice_grd3d(mcol, mrow, xori, xinc, yori, yinc, rotation, yflip, swig_np_dbl_in_v1, swig_np_dbl_aout_v1, ncol, nrow, nlay, p_coord_v, p_zcorn_v, p_actnum_v, p_prop_v, buffer, option, debug):
    return cxtgeo.surf_slice_grd3d(mcol, mrow, xori, xinc, yori, yinc, rotation, yflip, swig_np_dbl_in_v1, swig_np_dbl_aout_v1, ncol, nrow, nlay, p_coord_v, p_zcorn_v, p_actnum_v, p_prop_v, buffer, option, debug)

def surf_resample(nx1, ny1, xori1, xinc1, yori1, yinc1, yflip1, rota1, swig_np_dbl_in_v1, nx2, ny2, xori2, xinc2, yori2, yinc2, yflip2, rota2, swig_np_dbl_inplace_v1, option):
    return cxtgeo.surf_resample(nx1, ny1, xori1, xinc1, yori1, yinc1, yflip1, rota1, swig_np_dbl_in_v1, nx2, ny2, xori2, xinc2, yori2, yinc2, yflip2, rota2, swig_np_dbl_inplace_v1, option)

def surf_get_dist_values(xori, xinc, yori, yinc, nx, ny, rot_deg, x0, y0, azimuth, swig_np_dbl_inplace_v1, flag):
    return cxtgeo.surf_get_dist_values(xori, xinc, yori, yinc, nx, ny, rot_deg, x0, y0, azimuth, swig_np_dbl_inplace_v1, flag)

def surf_slice_cube(ncx, ncy, ncz, cxori, cxinc, cyori, cyinc, czori, czinc, crotation, yflip, swig_np_flt_in_v1, mx, my, xori, xinc, yori, yinc, mapflip, mrotation, swig_np_dbl_in_v1, swig_np_dbl_aout_v1, option1, option2, debug):
    return cxtgeo.surf_slice_cube(ncx, ncy, ncz, cxori, cxinc, cyori, cyinc, czori, czinc, crotation, yflip, swig_np_flt_in_v1, mx, my, xori, xinc, yori, yinc, mapflip, mrotation, swig_np_dbl_in_v1, swig_np_dbl_aout_v1, option1, option2, debug)

def surf_slice_cube_window(ncx, ncy, ncz, cxori, cxinc, cyori, cyinc, czori, czinc, crotation, yflip, swig_np_flt_in_v1, mx, my, xori, xinc, yori, yinc, mapflip, mrotation, swig_np_dbl_in_v1, zincr, nzincr, swig_np_dbl_aout_v1, nattr, option1, option2, debug):
    return cxtgeo.surf_slice_cube_window(ncx, ncy, ncz, cxori, cxinc, cyori, cyinc, czori, czinc, crotation, yflip, swig_np_flt_in_v1, mx, my, xori, xinc, yori, yinc, mapflip, mrotation, swig_np_dbl_in_v1, zincr, nzincr, swig_np_dbl_aout_v1, nattr, option1, option2, debug)

def surf_sample_grd3d_lay(nx, ny, nz, p_coord_v, p_zcorn_v, p_actnum_v, klayer, mx, my, xori, xstep, yori, ystep, rotation, swig_np_dbl_inplace_v1, swig_np_dbl_inplace_v2, swig_np_dbl_inplace_v3, option):
    return cxtgeo.surf_sample_grd3d_lay(nx, ny, nz, p_coord_v, p_zcorn_v, p_actnum_v, klayer, mx, my, xori, xstep, yori, ystep, rotation, swig_np_dbl_inplace_v1, swig_np_dbl_inplace_v2, swig_np_dbl_inplace_v3, option)

def surf_setval_poly(xori, xinc, yori, yinc, ncol, nrow, yflip, rot_deg, swig_np_dbl_inplace_v1, swig_np_dbl_in_v1, swig_np_dbl_in_v2, value, flag, debug):
    return cxtgeo.surf_setval_poly(xori, xinc, yori, yinc, ncol, nrow, yflip, rot_deg, swig_np_dbl_inplace_v1, swig_np_dbl_in_v1, swig_np_dbl_in_v2, value, flag, debug)

def pol_import_irap(i1, i2, p_xp_v, p_yp_v, p_zp_v, file, debug):
    return cxtgeo.pol_import_irap(i1, i2, p_xp_v, p_yp_v, p_zp_v, file, debug)

def pol_chk_point_inside(x, y, p_xp_v, p_yp_v, np, debug):
    return cxtgeo.pol_chk_point_inside(x, y, p_xp_v, p_yp_v, np, debug)

def pol_do_points_inside(swig_np_dbl_in_v1, swig_np_dbl_in_v2, swig_np_dbl_inplace_v1, swig_np_dbl_in_v3, swig_np_dbl_in_v4, new_value, option, inside, debug):
    return cxtgeo.pol_do_points_inside(swig_np_dbl_in_v1, swig_np_dbl_in_v2, swig_np_dbl_inplace_v1, swig_np_dbl_in_v3, swig_np_dbl_in_v4, new_value, option, inside, debug)

def polys_chk_point_inside(x, y, p_xp_v, p_yp_v, np1, np2, debug):
    return cxtgeo.polys_chk_point_inside(x, y, p_xp_v, p_yp_v, np1, np2, debug)

def pol_close(np, p_x_v, p_y_v, p_z_v, dist, option, debug):
    return cxtgeo.pol_close(np, p_x_v, p_y_v, p_z_v, dist, option, debug)

def pol_set_entry(i, x, y, z, npmax, p_x_v, p_y_v, p_z_v, option, debug):
    return cxtgeo.pol_set_entry(i, x, y, z, npmax, p_x_v, p_y_v, p_z_v, option, debug)

def pol_geometrics(swig_np_dbl_in_v1, swig_np_dbl_in_v2, swig_np_dbl_in_v3, swig_np_dbl_aout_v1, swig_np_dbl_aout_v2, swig_np_dbl_aout_v3, swig_np_dbl_aout_v4, debug):
    return cxtgeo.pol_geometrics(swig_np_dbl_in_v1, swig_np_dbl_in_v2, swig_np_dbl_in_v3, swig_np_dbl_aout_v1, swig_np_dbl_aout_v2, swig_np_dbl_aout_v3, swig_np_dbl_aout_v4, debug)

def pol_info(nlen, xv, yv, zv, xmin, xmax, ymin, ymax, closed, debug):
    return cxtgeo.pol_info(nlen, xv, yv, zv, xmin, xmax, ymin, ymax, closed, debug)

def pol_refine(np, npmax, p_x_v, p_y_v, p_z_v, dist, option, debug):
    return cxtgeo.pol_refine(np, npmax, p_x_v, p_y_v, p_z_v, dist, option, debug)

def pol_extend(np, p_x_v, p_y_v, p_z_v, dist, mode, xang, option, debug):
    return cxtgeo.pol_extend(np, p_x_v, p_y_v, p_z_v, dist, mode, xang, option, debug)

def pol_resample(nlen, xv, yv, zv, smpl, next, nbuf, nolen, xov, yov, zov, hlen, option, debug):
    return cxtgeo.pol_resample(nlen, xv, yv, zv, smpl, next, nbuf, nolen, xov, yov, zov, hlen, option, debug)

def pol_resampling(swig_np_dbl_in_v1, swig_np_dbl_in_v2, swig_np_dbl_in_v3, smpl, hext, swig_np_dbl_aout_v1, swig_np_dbl_aout_v2, swig_np_dbl_aout_v3, swig_np_dbl_aout_v4, option, debug):
    return cxtgeo.pol_resampling(swig_np_dbl_in_v1, swig_np_dbl_in_v2, swig_np_dbl_in_v3, smpl, hext, swig_np_dbl_aout_v1, swig_np_dbl_aout_v2, swig_np_dbl_aout_v3, swig_np_dbl_aout_v4, option, debug)

def sucu_ij_from_xy(i, j, rx, ry, x, y, xori, xinc, yori, yinc, nx, ny, yflip, rot_azi_deg, flag):
    return cxtgeo.sucu_ij_from_xy(i, j, rx, ry, x, y, xori, xinc, yori, yinc, nx, ny, yflip, rot_azi_deg, flag)

def cube_scan_segy_hdr(file, gn_bitsheader, gn_formatcode, gf_segyformat, gn_samplespertrace, gn_measuresystem, option, outfile):
    return cxtgeo.cube_scan_segy_hdr(file, gn_bitsheader, gn_formatcode, gf_segyformat, gn_samplespertrace, gn_measuresystem, option, outfile)

def cube_import_storm(nx, ny, nz, file, lstart, swig_np_flt_aout_v1, option):
    return cxtgeo.cube_import_storm(nx, ny, nz, file, lstart, swig_np_flt_aout_v1, option)

def cube_import_segy(file, hbitoffset, formatcode, segyformat, samplespertrace, nx, ny, nz, p_val_v, xori, xinc, yori, yinc, zori, zinc, rotation, yflip, zflip, minval, maxval, optscan, option, outfile):
    return cxtgeo.cube_import_segy(file, hbitoffset, formatcode, segyformat, samplespertrace, nx, ny, nz, p_val_v, xori, xinc, yori, yinc, zori, zinc, rotation, yflip, zflip, minval, maxval, optscan, option, outfile)

def cube_import_rmsregular(iline, ndef, ndefsum, nx, ny, nz, val_v, vmin, vmax, file, ierr):
    return cxtgeo.cube_import_rmsregular(iline, ndef, ndefsum, nx, ny, nz, val_v, vmin, vmax, file, ierr)

def cube_export_segy(sfile, nx, ny, nz, swig_np_flt_in_v1, xori, xinc, yori, yinc, zori, zinc, rotation, yflip, zflip, ilinesp, xlinesp, tracidp, option):
    return cxtgeo.cube_export_segy(sfile, nx, ny, nz, swig_np_flt_in_v1, xori, xinc, yori, yinc, zori, zinc, rotation, yflip, zflip, ilinesp, xlinesp, tracidp, option)

def cube_export_rmsregular(nx, ny, nz, xmin, ymin, zmin, xinc, yinc, zinc, rotation, yflip, swig_np_flt_in_v1, file):
    return cxtgeo.cube_export_rmsregular(nx, ny, nz, xmin, ymin, zmin, xinc, yinc, zinc, rotation, yflip, swig_np_flt_in_v1, file)

def cube_swapaxes(nx, ny, nz, yflip, xori, xinc, yori, yinc, rotation, swig_np_flt_inplace_v1, swig_np_int_inplace_v1, option):
    return cxtgeo.cube_swapaxes(nx, ny, nz, yflip, xori, xinc, yori, yinc, rotation, swig_np_flt_inplace_v1, swig_np_int_inplace_v1, option)

def cube_coord_val_ijk(i, j, k, nx, ny, nz, xori, xinc, yori, yinc, zori, zinc, rot_deg, yflip, p_val_v, x, y, z, value, option):
    return cxtgeo.cube_coord_val_ijk(i, j, k, nx, ny, nz, xori, xinc, yori, yinc, zori, zinc, rot_deg, yflip, p_val_v, x, y, z, value, option)

def cube_xy_from_ij(i, j, xori, xinc, yori, yinc, nx, ny, yflip, rot_azi_deg, flag):
    return cxtgeo.cube_xy_from_ij(i, j, xori, xinc, yori, yinc, nx, ny, yflip, rot_azi_deg, flag)

def cube_ijk_from_xyz(i, j, k, rx, ry, rz, x, y, z, xori, xinc, yori, yinc, zori, zinc, nx, ny, nz, rot_deg, yflip, flag):
    return cxtgeo.cube_ijk_from_xyz(i, j, k, rx, ry, rz, x, y, z, xori, xinc, yori, yinc, zori, zinc, nx, ny, nz, rot_deg, yflip, flag)

def cube_value_ijk(i, j, k, nx, ny, nz, p_val_v, value):
    return cxtgeo.cube_value_ijk(i, j, k, nx, ny, nz, p_val_v, value)

def cube_value_xyz_cell(x, y, z, xori, xinc, yori, yinc, zori, zinc, rot_deg, yflip, nx, ny, nz, p_val_v, value, option):
    return cxtgeo.cube_value_xyz_cell(x, y, z, xori, xinc, yori, yinc, zori, zinc, rot_deg, yflip, nx, ny, nz, p_val_v, value, option)

def cube_value_xyz_interp(x, y, z, xori, xinc, yori, yinc, zori, zinc, rot_deg, yflip, nx, ny, nz, p_val_v, value, option):
    return cxtgeo.cube_value_xyz_interp(x, y, z, xori, xinc, yori, yinc, zori, zinc, rot_deg, yflip, nx, ny, nz, p_val_v, value, option)

def cube_vertical_val_list(i, j, nx, ny, nz, p_val_v, p_vertical_v):
    return cxtgeo.cube_vertical_val_list(i, j, nx, ny, nz, p_val_v, p_vertical_v)

def cube_resample_cube(ncx1, ncy1, ncz1, cxori1, cxinc1, cyori1, cyinc1, czori1, czinc1, crotation1, yflip1, swig_np_flt_inplace_v1, ncx2, ncy2, ncz2, cxori2, cxinc2, cyori2, cyinc2, czori2, czinc2, crotation2, yflip2, swig_np_flt_in_v1, option1, option2, ovalue):
    return cxtgeo.cube_resample_cube(ncx1, ncy1, ncz1, cxori1, cxinc1, cyori1, cyinc1, czori1, czinc1, crotation1, yflip1, swig_np_flt_inplace_v1, ncx2, ncy2, ncz2, cxori2, cxinc2, cyori2, cyinc2, czori2, czinc2, crotation2, yflip2, swig_np_flt_in_v1, option1, option2, ovalue)

def cube_get_randomline(swig_np_dbl_in_v1, swig_np_dbl_in_v2, zmin, zmax, nzsam, xori, xinc, yori, yinc, zori, zinc, rot_deg, yflip, nx, ny, nz, swig_np_flt_in_v1, swig_np_dbl_aout_v1, option):
    return cxtgeo.cube_get_randomline(swig_np_dbl_in_v1, swig_np_dbl_in_v2, zmin, zmax, nzsam, xori, xinc, yori, yinc, zori, zinc, rot_deg, yflip, nx, ny, nz, swig_np_flt_in_v1, swig_np_dbl_aout_v1, option)

def grd3d_from_cube(ncol, nrow, nlay, p_coord_v, p_zcorn_v, p_actnum_v, xori, yori, zori, xinc, yinc, zinc, rotation, yflip, option, debug):
    return cxtgeo.grd3d_from_cube(ncol, nrow, nlay, p_coord_v, p_zcorn_v, p_actnum_v, xori, yori, zori, xinc, yinc, zinc, rotation, yflip, option, debug)

def grd3d_calc_dxdy(nx, ny, nz, p_coord_v, p_zcorn_v, p_actnum_v, dx, dy, option1, option2, debug):
    return cxtgeo.grd3d_calc_dxdy(nx, ny, nz, p_coord_v, p_zcorn_v, p_actnum_v, dx, dy, option1, option2, debug)

def grd3d_calc_dz(nx, ny, nz, p_zcorn_v, p_actnum_v, p_dz_v, flip, option, debug):
    return cxtgeo.grd3d_calc_dz(nx, ny, nz, p_zcorn_v, p_actnum_v, p_dz_v, flip, option, debug)

def grd3d_calc_xyz(nx, ny, nz, p_coord_v, p_zcorn_v, p_actnum_v, p_x_v, p_y_v, p_z_v, option, debug):
    return cxtgeo.grd3d_calc_xyz(nx, ny, nz, p_coord_v, p_zcorn_v, p_actnum_v, p_x_v, p_y_v, p_z_v, option, debug)

def grd3d_scan_roffbinary(fc, rectypes, reclengths, recstarts, maxkw, debug):
    return cxtgeo.grd3d_scan_roffbinary(fc, rectypes, reclengths, recstarts, maxkw, debug)

def grd3d_conv_roxapi_grid(nx, ny, nz, nxyz, cact, crds, p_coord_v, p_zcorn_v, p_actnum_v, debug):
    return cxtgeo.grd3d_conv_roxapi_grid(nx, ny, nz, nxyz, cact, crds, p_coord_v, p_zcorn_v, p_actnum_v, debug)

def grd3d_imp_roffbin_arr(fc, swap, nx, ny, nz, bytepos, dtype, swig_np_flt_inplace_v1, swig_np_int_inplace_v1, debug):
    return cxtgeo.grd3d_imp_roffbin_arr(fc, swap, nx, ny, nz, bytepos, dtype, swig_np_flt_inplace_v1, swig_np_int_inplace_v1, debug)

def grd3d_imp_roffbin_ilist(fc, swap, bytepos, swig_np_int_inplace_v1, debug):
    return cxtgeo.grd3d_imp_roffbin_ilist(fc, swap, bytepos, swig_np_int_inplace_v1, debug)

def grd3d_imp_roffbin_fvec(fc, swp, bpos, fvc, nv):
    return cxtgeo.grd3d_imp_roffbin_fvec(fc, swp, bpos, fvc, nv)

def grd3d_imp_roffbin_ivec(fc, swp, bpos, ivc, nv):
    return cxtgeo.grd3d_imp_roffbin_ivec(fc, swp, bpos, ivc, nv)

def grd3d_imp_roffbin_bvec(fc, swp, bpos, bvc, nv):
    return cxtgeo.grd3d_imp_roffbin_bvec(fc, swp, bpos, bvc, nv)

def grd3d_imp_roffbin_data(fc, swap, dtype, bytepos, pidata, pfdata, debug):
    return cxtgeo.grd3d_imp_roffbin_data(fc, swap, dtype, bytepos, pidata, pfdata, debug)

def grd3d_import_roff_grid(num_act, num_subgrds, p_coord_v, p_zcorn_v, p_actnum_v, p_subgrd_v, nnsub, filename, debug):
    return cxtgeo.grd3d_import_roff_grid(num_act, num_subgrds, p_coord_v, p_zcorn_v, p_actnum_v, p_subgrd_v, nnsub, filename, debug)

def grd3d_imp_prop_roffbin(filename, scanmode, p_type, p_nx, p_ny, p_nz, p_ncodes, prop_name, p_int_v, p_double_v, p_codevalues_v, option, debug):
    return cxtgeo.grd3d_imp_prop_roffbin(filename, scanmode, p_type, p_nx, p_ny, p_nz, p_ncodes, prop_name, p_int_v, p_double_v, p_codevalues_v, option, debug)

def grd3d_export_roff_grid(mode, nx, ny, nz, num_subgrds, isubgrd_to_export, xoffset, yoffset, zoffset, p_coord_v, p_zcorn_v, p_actnum_v, p_subgrd_v, filename, debug):
    return cxtgeo.grd3d_export_roff_grid(mode, nx, ny, nz, num_subgrds, isubgrd_to_export, xoffset, yoffset, zoffset, p_coord_v, p_zcorn_v, p_actnum_v, p_subgrd_v, filename, debug)

def grd3d_export_roff_end(mode, filename, debug):
    return cxtgeo.grd3d_export_roff_end(mode, filename, debug)

def grd3d_scan_roff_bingrid(nx, ny, nz, nsubs, filename):
    return cxtgeo.grd3d_scan_roff_bingrid(nx, ny, nz, nsubs, filename)

def grd3d_scan_roff_binpar(parname, filename, ndcodes, debug):
    return cxtgeo.grd3d_scan_roff_binpar(parname, filename, ndcodes, debug)

def grd3d_export_roff_pstart(mode, nx, ny, nz, filename, debug):
    return cxtgeo.grd3d_export_roff_pstart(mode, nx, ny, nz, filename, debug)

def grd3d_export_roff_prop(mode, nx, ny, nz, num_subgrds, isubgrd_to_export, p_subgrd_v, pname, ptype, p_int_v, p_double_v, ncodes, codenames, codevalues, filename, debug):
    return cxtgeo.grd3d_export_roff_prop(mode, nx, ny, nz, num_subgrds, isubgrd_to_export, p_subgrd_v, pname, ptype, p_int_v, p_double_v, ncodes, codenames, codevalues, filename, debug)

def grd3d_scan_eclbinary(fc, rectype, reclengths, recstarts, maxkw, debug):
    return cxtgeo.grd3d_scan_eclbinary(fc, rectype, reclengths, recstarts, maxkw, debug)

def grd3d_read_eclrecord(fc, recstart, rectype, swig_np_int_inplace_v1, swig_np_flt_inplace_v1, swig_np_dbl_inplace_v1):
    return cxtgeo.grd3d_read_eclrecord(fc, recstart, rectype, swig_np_int_inplace_v1, swig_np_flt_inplace_v1, swig_np_dbl_inplace_v1)

def grd3d_roff2xtgeo_coord(nx, ny, nz, xoffset, yoffset, zoffset, xscale, yscale, zscale, p_cornerlines_v, p_coord_v):
    return cxtgeo.grd3d_roff2xtgeo_coord(nx, ny, nz, xoffset, yoffset, zoffset, xscale, yscale, zscale, p_cornerlines_v, p_coord_v)

def grd3d_roff2xtgeo_zcorn(nx, ny, nz, xoffset, yoffset, zoffset, xscale, yscale, zscale, p_splitenz_v, p_zdata_v, p_zcorn_v):
    return cxtgeo.grd3d_roff2xtgeo_zcorn(nx, ny, nz, xoffset, yoffset, zoffset, xscale, yscale, zscale, p_splitenz_v, p_zdata_v, p_zcorn_v)

def grd3d_roff2xtgeo_actnum(nx, ny, nz, iact, p_actnum_v, option):
    return cxtgeo.grd3d_roff2xtgeo_actnum(nx, ny, nz, iact, p_actnum_v, option)

def grd3d_write_eclrecord(fc, recname, rectype, intv, floatv, doublev, nrecs, debug):
    return cxtgeo.grd3d_write_eclrecord(fc, recname, rectype, intv, floatv, doublev, nrecs, debug)

def grd3d_write_eclinput(fc, recname, rectype, intv, floatv, doublev, nrecs, fmt, ncolumns, debug):
    return cxtgeo.grd3d_write_eclinput(fc, recname, rectype, intv, floatv, doublev, nrecs, fmt, ncolumns, debug)

def grd3d_zcorn_convert(nx, ny, nz, zcorn, p_zcorn_v, option):
    return cxtgeo.grd3d_zcorn_convert(nx, ny, nz, zcorn, p_zcorn_v, option)

def grd3d_ecl_tsteps(fc, seqnums, day, mon, year, nmax, debug):
    return cxtgeo.grd3d_ecl_tsteps(fc, seqnums, day, mon, year, nmax, debug)

def grd3d_imp_ecl_egrid(fc, nx, ny, nz, bpos_mapaxes, bpos_coord, bpos_zcorn, bpos_actnum, p_coord_v, p_zcorn_v, actnum_v, nact, option):
    return cxtgeo.grd3d_imp_ecl_egrid(fc, nx, ny, nz, bpos_mapaxes, bpos_coord, bpos_zcorn, bpos_actnum, p_coord_v, p_zcorn_v, actnum_v, nact, option)

def grd3d_import_grdecl(nx, ny, nz, p_coord_v, p_zcorn_v, p_actnum_v, nact, filename, debug):
    return cxtgeo.grd3d_import_grdecl(nx, ny, nz, p_coord_v, p_zcorn_v, p_actnum_v, nact, filename, debug)

def grd3d_import_grdecl_prop(filename, nx, ny, nz, pname, swig_np_dbl_aout_v1, option, debug):
    return cxtgeo.grd3d_import_grdecl_prop(filename, nx, ny, nz, pname, swig_np_dbl_aout_v1, option, debug)

def grd3d_export_grdecl(nx, ny, nz, p_coord_v, p_zcorn_v, p_actnum_v, filename, mode, debug):
    return cxtgeo.grd3d_export_grdecl(nx, ny, nz, p_coord_v, p_zcorn_v, p_actnum_v, filename, mode, debug)

def grd3d_export_egrid(nx, ny, nz, p_coord_v, p_zcorn_v, p_actnum_v, filename, mode, debug):
    return cxtgeo.grd3d_export_egrid(nx, ny, nz, p_coord_v, p_zcorn_v, p_actnum_v, filename, mode, debug)

def grd3d_export_grdeclprop(nx, ny, nz, formatspec, propname, p_fprop_v, filename, filemode, debug):
    return cxtgeo.grd3d_export_grdeclprop(nx, ny, nz, formatspec, propname, p_fprop_v, filename, filemode, debug)

def grd3d_export_grdeclprop2(nx, ny, nz, ptype, p_iprop_v, p_fprop_v, p_dprop_v, pname, filename, mode, flag, debug):
    return cxtgeo.grd3d_export_grdeclprop2(nx, ny, nz, ptype, p_iprop_v, p_fprop_v, p_dprop_v, pname, filename, mode, flag, debug)

def grd3d_conv_grid_roxapi(ncol, nrow, nlay, p_coord_v, p_zcorn_v, p_actnum_v, swig_np_dbl_aout_v1, swig_np_dbl_aout_v2, swig_np_dbl_aout_v3, debug):
    return cxtgeo.grd3d_conv_grid_roxapi(ncol, nrow, nlay, p_coord_v, p_zcorn_v, p_actnum_v, swig_np_dbl_aout_v1, swig_np_dbl_aout_v2, swig_np_dbl_aout_v3, debug)

def grd3d_copy(ncol, nrow, nlay, p_coord1_v, p_zcorn1_v, p_actnum1_v, p_coord2_v, p_zcorn2_v, p_actnum2_v, iflag, debug):
    return cxtgeo.grd3d_copy(ncol, nrow, nlay, p_coord1_v, p_zcorn1_v, p_actnum1_v, p_coord2_v, p_zcorn2_v, p_actnum2_v, iflag, debug)

def grd3d_crop_geometry(nx, ny, nz, p_coord1_v, p_zcorn1_v, p_actnum1_v, p_coord2_v, p_zcorn2_v, p_actnum2_v, ic1, ic2, jc1, jc2, kc1, kc2, nactive, iflag, debug):
    return cxtgeo.grd3d_crop_geometry(nx, ny, nz, p_coord1_v, p_zcorn1_v, p_actnum1_v, p_coord2_v, p_zcorn2_v, p_actnum2_v, ic1, ic2, jc1, jc2, kc1, kc2, nactive, iflag, debug)

def grd3d_reduce_onelayer(nx, ny, nz, p_zcorn1_v, p_zcorn2_v, p_actnum1_v, p_actnum2_v, nactive, iflag, debug):
    return cxtgeo.grd3d_reduce_onelayer(nx, ny, nz, p_zcorn1_v, p_zcorn2_v, p_actnum1_v, p_actnum2_v, nactive, iflag, debug)

def grd3d_refine_vert(nx, ny, nz, p_coord_v, p_zcorn_v, p_actnum_v, nzref, p_zcornhyb_v, p_actnumhyb_v, p_num_act, rfac, option, debug):
    return cxtgeo.grd3d_refine_vert(nx, ny, nz, p_coord_v, p_zcorn_v, p_actnum_v, nzref, p_zcornhyb_v, p_actnumhyb_v, p_num_act, rfac, option, debug)

def grd3d_convert_hybrid(nx, ny, nz, p_coord_v, p_zcorn_v, p_actnum_v, nzhyb, p_zcornhyb_v, p_actnumhyb_v, p_num_act, toplevel, botlevel, ndiv, debug):
    return cxtgeo.grd3d_convert_hybrid(nx, ny, nz, p_coord_v, p_zcorn_v, p_actnum_v, nzhyb, p_zcornhyb_v, p_actnumhyb_v, p_num_act, toplevel, botlevel, ndiv, debug)

def grd3d_convert_hybrid2(nx, ny, nz, p_coord_v, p_zcorn_v, p_actnum_v, nzhyb, p_zcornhyb_v, p_actnumhyb_v, p_num_act, toplevel, botlevel, ndiv, p_region_v, region, debug):
    return cxtgeo.grd3d_convert_hybrid2(nx, ny, nz, p_coord_v, p_zcorn_v, p_actnum_v, nzhyb, p_zcornhyb_v, p_actnumhyb_v, p_num_act, toplevel, botlevel, ndiv, p_region_v, region, debug)

def grd3d_make_z_consistent(nx, ny, nz, p_zcorn_v, p_actnum_v, zsep, debug):
    return cxtgeo.grd3d_make_z_consistent(nx, ny, nz, p_zcorn_v, p_actnum_v, zsep, debug)

def grd3d_translate(nx, ny, nz, xflip, yflip, zflip, xshift, yshift, zshift, p_coord_v, p_zcorn_v, debug):
    return cxtgeo.grd3d_translate(nx, ny, nz, xflip, yflip, zflip, xshift, yshift, zshift, p_coord_v, p_zcorn_v, debug)

def grd3d_point_val_crange(x, y, z, nx, ny, nz, p_coor_v, p_zcorn_v, p_actnum_v, p_val_v, value, imin, imax, jmin, jmax, kmin, kmax, ibs, option, debug):
    return cxtgeo.grd3d_point_val_crange(x, y, z, nx, ny, nz, p_coor_v, p_zcorn_v, p_actnum_v, p_val_v, value, imin, imax, jmin, jmax, kmin, kmax, ibs, option, debug)

def grd3d_point_in_cell(ibstart, kzonly, x, y, z, nx, ny, nz, p_coor_v, p_zcorn_v, p_actnum_v, maxrad, sflag, nradsearch, option, debug):
    return cxtgeo.grd3d_point_in_cell(ibstart, kzonly, x, y, z, nx, ny, nz, p_coor_v, p_zcorn_v, p_actnum_v, maxrad, sflag, nradsearch, option, debug)

def grd3d_get_randomline(swig_np_dbl_in_v1, swig_np_dbl_in_v2, zmin, zmax, nzsam, mcol, mrow, xori, yori, xinc, yinc, rotation, yflip, maptopi, maptopj, mapbasi, mapbasj, nx, ny, nz, p_coor_v, p_zcorn_v, p_actnum_v, p_val_v, p_zcornone_v, p_actnumone_v, swig_np_dbl_aout_v1, option, debug):
    return cxtgeo.grd3d_get_randomline(swig_np_dbl_in_v1, swig_np_dbl_in_v2, zmin, zmax, nzsam, mcol, mrow, xori, yori, xinc, yinc, rotation, yflip, maptopi, maptopj, mapbasi, mapbasj, nx, ny, nz, p_coor_v, p_zcorn_v, p_actnum_v, p_val_v, p_zcornone_v, p_actnumone_v, swig_np_dbl_aout_v1, option, debug)

def grd3d_collapse_inact(nx, ny, nz, p_zcorn_v, p_actnum_v, debug):
    return cxtgeo.grd3d_collapse_inact(nx, ny, nz, p_zcorn_v, p_actnum_v, debug)

def grd3d_midpoint(i, j, k, nx, ny, nz, p_coord_v, p_zcorn_v, x, y, z, debug):
    return cxtgeo.grd3d_midpoint(i, j, k, nx, ny, nz, p_coord_v, p_zcorn_v, x, y, z, debug)

def grd3d_inact_outside_pol(swig_np_dbl_in_v1, swig_np_dbl_in_v2, nx, ny, nz, p_coord_v, p_zcorn_v, p_actnum_v, k1, k2, force_close, option, debug):
    return cxtgeo.grd3d_inact_outside_pol(swig_np_dbl_in_v1, swig_np_dbl_in_v2, nx, ny, nz, p_coord_v, p_zcorn_v, p_actnum_v, k1, k2, force_close, option, debug)

def grd3d_setval_poly(swig_np_dbl_in_v1, swig_np_dbl_in_v2, nx, ny, nz, p_coord_v, p_zcorn_v, p_actnum_v, p_val_v, value, option, debug):
    return cxtgeo.grd3d_setval_poly(swig_np_dbl_in_v1, swig_np_dbl_in_v2, nx, ny, nz, p_coord_v, p_zcorn_v, p_actnum_v, p_val_v, value, option, debug)

def grd3d_geometrics(nx, ny, nz, p_coord_v, p_zcorn_v, p_actnum_v, xori, yori, zori, xmin, xmax, ymin, ymax, zmin, zmax, rotation, dx, dy, dz, option1, option2, debug):
    return cxtgeo.grd3d_geometrics(nx, ny, nz, p_coord_v, p_zcorn_v, p_actnum_v, xori, yori, zori, xmin, xmax, ymin, ymax, zmin, zmax, rotation, dx, dy, dz, option1, option2, debug)

def grd3d_inact_by_dz(nx, ny, nz, p_zcorn_v, p_actnum_v, threshold, flip, debug):
    return cxtgeo.grd3d_inact_by_dz(nx, ny, nz, p_zcorn_v, p_actnum_v, threshold, flip, debug)

def grd3d_check_cell_splits(ncol, nrow, nlay, p_coord_v, p_zcorn_v, ib1, ib2, debug):
    return cxtgeo.grd3d_check_cell_splits(ncol, nrow, nlay, p_coord_v, p_zcorn_v, ib1, ib2, debug)

def grd3d_adj_cells(ncol, nrow, nlay, p_coord_v, p_zcorn_v, p_actnum_v, p_prop1, nprop1, val1, val2, p_prop2, nprop2, iflag1, iflag2, debug):
    return cxtgeo.grd3d_adj_cells(ncol, nrow, nlay, p_coord_v, p_zcorn_v, p_actnum_v, p_prop1, nprop1, val1, val2, p_prop2, nprop2, iflag1, iflag2, debug)

def grd3d_corners(i, j, k, nx, ny, nz, p_coord_v, p_zcorn_v, corners, debug):
    return cxtgeo.grd3d_corners(i, j, k, nx, ny, nz, p_coord_v, p_zcorn_v, corners, debug)

def grd3d_zminmax(i, j, k, nx, ny, nz, p_zcorn_v, option, debug):
    return cxtgeo.grd3d_zminmax(i, j, k, nx, ny, nz, p_zcorn_v, option, debug)

def grd3d_get_all_corners(nx, ny, nz, p_coord_v, p_zcorn_v, p_actnum_v, x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4, x5, y5, z5, x6, y6, z6, x7, y7, z7, x8, y8, z8, option, debug):
    return cxtgeo.grd3d_get_all_corners(nx, ny, nz, p_coord_v, p_zcorn_v, p_actnum_v, x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4, x5, y5, z5, x6, y6, z6, x7, y7, z7, x8, y8, z8, option, debug)

def grd3d_rpt_zlog_vs_zon(nx, ny, nz, p_coord_v, p_zcorn_v, p_actnum_v, p_zon_v, nval, p_utme_v, p_utmn_v, p_tvds_v, p_zlog_v, zlmin, zlmax, p_zcorn_onelay_v, p_actnum_onelay_v, results, iflag, debug):
    return cxtgeo.grd3d_rpt_zlog_vs_zon(nx, ny, nz, p_coord_v, p_zcorn_v, p_actnum_v, p_zon_v, nval, p_utme_v, p_utmn_v, p_tvds_v, p_zlog_v, zlmin, zlmax, p_zcorn_onelay_v, p_actnum_onelay_v, results, iflag, debug)

def grd3d_well_ijk(nx, ny, nz, p_coord_v, p_zcorn_v, p_actnum_v, p_zcorn_onelay_v, p_actnum_onelay_v, nval, p_utme_v, p_utmn_v, p_tvds_v, ivector, jvector, kvector, iflag, debug):
    return cxtgeo.grd3d_well_ijk(nx, ny, nz, p_coord_v, p_zcorn_v, p_actnum_v, p_zcorn_onelay_v, p_actnum_onelay_v, nval, p_utme_v, p_utmn_v, p_tvds_v, ivector, jvector, kvector, iflag, debug)

def well_geometrics(np, xv, yv, zv, md, incl, az, option):
    return cxtgeo.well_geometrics(np, xv, yv, zv, md, incl, az, option)

def well_trunc_parallel(swig_np_dbl_inplace_v1, swig_np_dbl_inplace_v2, swig_np_dbl_inplace_v3, swig_np_dbl_in_v1, swig_np_dbl_in_v2, swig_np_dbl_in_v3, xtol, ytol, ztol, itol, atol, option):
    return cxtgeo.well_trunc_parallel(swig_np_dbl_inplace_v1, swig_np_dbl_inplace_v2, swig_np_dbl_inplace_v3, swig_np_dbl_in_v1, swig_np_dbl_in_v2, swig_np_dbl_in_v3, xtol, ytol, ztol, itol, atol, option)


