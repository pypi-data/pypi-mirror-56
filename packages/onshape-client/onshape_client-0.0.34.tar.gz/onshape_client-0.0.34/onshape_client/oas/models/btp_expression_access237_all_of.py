# coding: utf-8

"""
    Onshape REST API

    The Onshape REST API consumed by all clients.  # noqa: E501

    The version of the OpenAPI document: 1.106
    Contact: api-support@onshape.zendesk.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class BTPExpressionAccess237AllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'space_in_accessor': 'BTPSpace10',
        'accessor': 'BTPPropertyAccessor23',
        'base': 'BTPExpression9'
    }

    attribute_map = {
        'space_in_accessor': 'spaceInAccessor',
        'accessor': 'accessor',
        'base': 'base'
    }

    def __init__(self, space_in_accessor=None, accessor=None, base=None):  # noqa: E501
        """BTPExpressionAccess237AllOf - a model defined in OpenAPI"""  # noqa: E501

        self._space_in_accessor = None
        self._accessor = None
        self._base = None
        self.discriminator = None

        if space_in_accessor is not None:
            self.space_in_accessor = space_in_accessor
        if accessor is not None:
            self.accessor = accessor
        if base is not None:
            self.base = base

    @property
    def space_in_accessor(self):
        """Gets the space_in_accessor of this BTPExpressionAccess237AllOf.  # noqa: E501


        :return: The space_in_accessor of this BTPExpressionAccess237AllOf.  # noqa: E501
        :rtype: BTPSpace10
        """
        return self._space_in_accessor

    @space_in_accessor.setter
    def space_in_accessor(self, space_in_accessor):
        """Sets the space_in_accessor of this BTPExpressionAccess237AllOf.


        :param space_in_accessor: The space_in_accessor of this BTPExpressionAccess237AllOf.  # noqa: E501
        :type: BTPSpace10
        """

        self._space_in_accessor = space_in_accessor

    @property
    def accessor(self):
        """Gets the accessor of this BTPExpressionAccess237AllOf.  # noqa: E501


        :return: The accessor of this BTPExpressionAccess237AllOf.  # noqa: E501
        :rtype: BTPPropertyAccessor23
        """
        return self._accessor

    @accessor.setter
    def accessor(self, accessor):
        """Sets the accessor of this BTPExpressionAccess237AllOf.


        :param accessor: The accessor of this BTPExpressionAccess237AllOf.  # noqa: E501
        :type: BTPPropertyAccessor23
        """

        self._accessor = accessor

    @property
    def base(self):
        """Gets the base of this BTPExpressionAccess237AllOf.  # noqa: E501


        :return: The base of this BTPExpressionAccess237AllOf.  # noqa: E501
        :rtype: BTPExpression9
        """
        return self._base

    @base.setter
    def base(self, base):
        """Sets the base of this BTPExpressionAccess237AllOf.


        :param base: The base of this BTPExpressionAccess237AllOf.  # noqa: E501
        :type: BTPExpression9
        """

        self._base = base

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BTPExpressionAccess237AllOf):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
