# coding: utf-8

"""
    Onshape REST API

    The Onshape REST API consumed by all clients.  # noqa: E501

    The version of the OpenAPI document: 1.106
    Contact: api-support@onshape.zendesk.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class BTAssemblyTransformDefinitionParams(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'transform': 'list[float]',
        'occurrences': 'list[BTOccurrence]',
        'is_relative': 'bool'
    }

    attribute_map = {
        'transform': 'transform',
        'occurrences': 'occurrences',
        'is_relative': 'isRelative'
    }

    def __init__(self, transform=None, occurrences=None, is_relative=None):  # noqa: E501
        """BTAssemblyTransformDefinitionParams - a model defined in OpenAPI"""  # noqa: E501

        self._transform = None
        self._occurrences = None
        self._is_relative = None
        self.discriminator = None

        if transform is not None:
            self.transform = transform
        if occurrences is not None:
            self.occurrences = occurrences
        if is_relative is not None:
            self.is_relative = is_relative

    @property
    def transform(self):
        """Gets the transform of this BTAssemblyTransformDefinitionParams.  # noqa: E501


        :return: The transform of this BTAssemblyTransformDefinitionParams.  # noqa: E501
        :rtype: list[float]
        """
        return self._transform

    @transform.setter
    def transform(self, transform):
        """Sets the transform of this BTAssemblyTransformDefinitionParams.


        :param transform: The transform of this BTAssemblyTransformDefinitionParams.  # noqa: E501
        :type: list[float]
        """

        self._transform = transform

    @property
    def occurrences(self):
        """Gets the occurrences of this BTAssemblyTransformDefinitionParams.  # noqa: E501


        :return: The occurrences of this BTAssemblyTransformDefinitionParams.  # noqa: E501
        :rtype: list[BTOccurrence]
        """
        return self._occurrences

    @occurrences.setter
    def occurrences(self, occurrences):
        """Sets the occurrences of this BTAssemblyTransformDefinitionParams.


        :param occurrences: The occurrences of this BTAssemblyTransformDefinitionParams.  # noqa: E501
        :type: list[BTOccurrence]
        """

        self._occurrences = occurrences

    @property
    def is_relative(self):
        """Gets the is_relative of this BTAssemblyTransformDefinitionParams.  # noqa: E501


        :return: The is_relative of this BTAssemblyTransformDefinitionParams.  # noqa: E501
        :rtype: bool
        """
        return self._is_relative

    @is_relative.setter
    def is_relative(self, is_relative):
        """Sets the is_relative of this BTAssemblyTransformDefinitionParams.


        :param is_relative: The is_relative of this BTAssemblyTransformDefinitionParams.  # noqa: E501
        :type: bool
        """

        self._is_relative = is_relative

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BTAssemblyTransformDefinitionParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
