# coding: utf-8

"""
    Onshape REST API

    The Onshape REST API consumed by all clients.  # noqa: E501

    The version of the OpenAPI document: 1.106
    Contact: api-support@onshape.zendesk.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class BTUpdateFeaturesResponse1333(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'feature_states': 'dict(str, BTFeatureState1688)',
        'features': 'list[BTMFeature134]'
    }

    attribute_map = {
        'feature_states': 'featureStates',
        'features': 'features'
    }

    def __init__(self, feature_states=None, features=None):  # noqa: E501
        """BTUpdateFeaturesResponse1333 - a model defined in OpenAPI"""  # noqa: E501

        self._feature_states = None
        self._features = None
        self.discriminator = None

        if feature_states is not None:
            self.feature_states = feature_states
        if features is not None:
            self.features = features

    @property
    def feature_states(self):
        """Gets the feature_states of this BTUpdateFeaturesResponse1333.  # noqa: E501


        :return: The feature_states of this BTUpdateFeaturesResponse1333.  # noqa: E501
        :rtype: dict(str, BTFeatureState1688)
        """
        return self._feature_states

    @feature_states.setter
    def feature_states(self, feature_states):
        """Sets the feature_states of this BTUpdateFeaturesResponse1333.


        :param feature_states: The feature_states of this BTUpdateFeaturesResponse1333.  # noqa: E501
        :type: dict(str, BTFeatureState1688)
        """

        self._feature_states = feature_states

    @property
    def features(self):
        """Gets the features of this BTUpdateFeaturesResponse1333.  # noqa: E501


        :return: The features of this BTUpdateFeaturesResponse1333.  # noqa: E501
        :rtype: list[BTMFeature134]
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this BTUpdateFeaturesResponse1333.


        :param features: The features of this BTUpdateFeaturesResponse1333.  # noqa: E501
        :type: list[BTMFeature134]
        """

        self._features = features

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BTUpdateFeaturesResponse1333):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
