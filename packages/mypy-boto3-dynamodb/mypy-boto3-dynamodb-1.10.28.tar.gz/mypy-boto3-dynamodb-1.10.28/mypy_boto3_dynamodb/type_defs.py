"Main interface for dynamodb type defs"
from __future__ import annotations

from datetime import datetime
from typing import Dict, List
from typing_extensions import TypedDict


__all__ = (
    "ClientBatchGetItemRequestItemsKeysTypeDef",
    "ClientBatchGetItemRequestItemsTypeDef",
    "ClientBatchGetItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef",
    "ClientBatchGetItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef",
    "ClientBatchGetItemResponseConsumedCapacityTableTypeDef",
    "ClientBatchGetItemResponseConsumedCapacityTypeDef",
    "ClientBatchGetItemResponseResponsesTypeDef",
    "ClientBatchGetItemResponseUnprocessedKeysKeysTypeDef",
    "ClientBatchGetItemResponseUnprocessedKeysTypeDef",
    "ClientBatchGetItemResponseTypeDef",
    "ClientBatchWriteItemRequestItemsDeleteRequestKeyTypeDef",
    "ClientBatchWriteItemRequestItemsDeleteRequestTypeDef",
    "ClientBatchWriteItemRequestItemsPutRequestItemTypeDef",
    "ClientBatchWriteItemRequestItemsPutRequestTypeDef",
    "ClientBatchWriteItemRequestItemsTypeDef",
    "ClientBatchWriteItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef",
    "ClientBatchWriteItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef",
    "ClientBatchWriteItemResponseConsumedCapacityTableTypeDef",
    "ClientBatchWriteItemResponseConsumedCapacityTypeDef",
    "ClientBatchWriteItemResponseItemCollectionMetricsItemCollectionKeyTypeDef",
    "ClientBatchWriteItemResponseItemCollectionMetricsTypeDef",
    "ClientBatchWriteItemResponseUnprocessedItemsDeleteRequestKeyTypeDef",
    "ClientBatchWriteItemResponseUnprocessedItemsDeleteRequestTypeDef",
    "ClientBatchWriteItemResponseUnprocessedItemsPutRequestItemTypeDef",
    "ClientBatchWriteItemResponseUnprocessedItemsPutRequestTypeDef",
    "ClientBatchWriteItemResponseUnprocessedItemsTypeDef",
    "ClientBatchWriteItemResponseTypeDef",
    "ClientCreateBackupResponseBackupDetailsTypeDef",
    "ClientCreateBackupResponseTypeDef",
    "ClientCreateGlobalTableReplicationGroupTypeDef",
    "ClientCreateGlobalTableResponseGlobalTableDescriptionReplicationGroupGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef",
    "ClientCreateGlobalTableResponseGlobalTableDescriptionReplicationGroupGlobalSecondaryIndexesTypeDef",
    "ClientCreateGlobalTableResponseGlobalTableDescriptionReplicationGroupProvisionedThroughputOverrideTypeDef",
    "ClientCreateGlobalTableResponseGlobalTableDescriptionReplicationGroupTypeDef",
    "ClientCreateGlobalTableResponseGlobalTableDescriptionTypeDef",
    "ClientCreateGlobalTableResponseTypeDef",
    "ClientCreateTableAttributeDefinitionsTypeDef",
    "ClientCreateTableGlobalSecondaryIndexesKeySchemaTypeDef",
    "ClientCreateTableGlobalSecondaryIndexesProjectionTypeDef",
    "ClientCreateTableGlobalSecondaryIndexesProvisionedThroughputTypeDef",
    "ClientCreateTableGlobalSecondaryIndexesTypeDef",
    "ClientCreateTableKeySchemaTypeDef",
    "ClientCreateTableLocalSecondaryIndexesKeySchemaTypeDef",
    "ClientCreateTableLocalSecondaryIndexesProjectionTypeDef",
    "ClientCreateTableLocalSecondaryIndexesTypeDef",
    "ClientCreateTableProvisionedThroughputTypeDef",
    "ClientCreateTableResponseTableDescriptionArchivalSummaryTypeDef",
    "ClientCreateTableResponseTableDescriptionAttributeDefinitionsTypeDef",
    "ClientCreateTableResponseTableDescriptionBillingModeSummaryTypeDef",
    "ClientCreateTableResponseTableDescriptionGlobalSecondaryIndexesKeySchemaTypeDef",
    "ClientCreateTableResponseTableDescriptionGlobalSecondaryIndexesProjectionTypeDef",
    "ClientCreateTableResponseTableDescriptionGlobalSecondaryIndexesProvisionedThroughputTypeDef",
    "ClientCreateTableResponseTableDescriptionGlobalSecondaryIndexesTypeDef",
    "ClientCreateTableResponseTableDescriptionKeySchemaTypeDef",
    "ClientCreateTableResponseTableDescriptionLocalSecondaryIndexesKeySchemaTypeDef",
    "ClientCreateTableResponseTableDescriptionLocalSecondaryIndexesProjectionTypeDef",
    "ClientCreateTableResponseTableDescriptionLocalSecondaryIndexesTypeDef",
    "ClientCreateTableResponseTableDescriptionProvisionedThroughputTypeDef",
    "ClientCreateTableResponseTableDescriptionReplicasGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef",
    "ClientCreateTableResponseTableDescriptionReplicasGlobalSecondaryIndexesTypeDef",
    "ClientCreateTableResponseTableDescriptionReplicasProvisionedThroughputOverrideTypeDef",
    "ClientCreateTableResponseTableDescriptionReplicasTypeDef",
    "ClientCreateTableResponseTableDescriptionRestoreSummaryTypeDef",
    "ClientCreateTableResponseTableDescriptionSSEDescriptionTypeDef",
    "ClientCreateTableResponseTableDescriptionStreamSpecificationTypeDef",
    "ClientCreateTableResponseTableDescriptionTypeDef",
    "ClientCreateTableResponseTypeDef",
    "ClientCreateTableSSESpecificationTypeDef",
    "ClientCreateTableStreamSpecificationTypeDef",
    "ClientCreateTableTagsTypeDef",
    "ClientDeleteBackupResponseBackupDescriptionBackupDetailsTypeDef",
    "ClientDeleteBackupResponseBackupDescriptionSourceTableDetailsKeySchemaTypeDef",
    "ClientDeleteBackupResponseBackupDescriptionSourceTableDetailsProvisionedThroughputTypeDef",
    "ClientDeleteBackupResponseBackupDescriptionSourceTableDetailsTypeDef",
    "ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsGlobalSecondaryIndexesKeySchemaTypeDef",
    "ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsGlobalSecondaryIndexesProjectionTypeDef",
    "ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsGlobalSecondaryIndexesProvisionedThroughputTypeDef",
    "ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsGlobalSecondaryIndexesTypeDef",
    "ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsLocalSecondaryIndexesKeySchemaTypeDef",
    "ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsLocalSecondaryIndexesProjectionTypeDef",
    "ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsLocalSecondaryIndexesTypeDef",
    "ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsSSEDescriptionTypeDef",
    "ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsStreamDescriptionTypeDef",
    "ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsTimeToLiveDescriptionTypeDef",
    "ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsTypeDef",
    "ClientDeleteBackupResponseBackupDescriptionTypeDef",
    "ClientDeleteBackupResponseTypeDef",
    "ClientDeleteItemExpectedAttributeValueListTypeDef",
    "ClientDeleteItemExpectedValueTypeDef",
    "ClientDeleteItemExpectedTypeDef",
    "ClientDeleteItemExpressionAttributeValuesTypeDef",
    "ClientDeleteItemKeyTypeDef",
    "ClientDeleteItemResponseAttributesTypeDef",
    "ClientDeleteItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef",
    "ClientDeleteItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef",
    "ClientDeleteItemResponseConsumedCapacityTableTypeDef",
    "ClientDeleteItemResponseConsumedCapacityTypeDef",
    "ClientDeleteItemResponseItemCollectionMetricsItemCollectionKeyTypeDef",
    "ClientDeleteItemResponseItemCollectionMetricsTypeDef",
    "ClientDeleteItemResponseTypeDef",
    "ClientDeleteTableResponseTableDescriptionArchivalSummaryTypeDef",
    "ClientDeleteTableResponseTableDescriptionAttributeDefinitionsTypeDef",
    "ClientDeleteTableResponseTableDescriptionBillingModeSummaryTypeDef",
    "ClientDeleteTableResponseTableDescriptionGlobalSecondaryIndexesKeySchemaTypeDef",
    "ClientDeleteTableResponseTableDescriptionGlobalSecondaryIndexesProjectionTypeDef",
    "ClientDeleteTableResponseTableDescriptionGlobalSecondaryIndexesProvisionedThroughputTypeDef",
    "ClientDeleteTableResponseTableDescriptionGlobalSecondaryIndexesTypeDef",
    "ClientDeleteTableResponseTableDescriptionKeySchemaTypeDef",
    "ClientDeleteTableResponseTableDescriptionLocalSecondaryIndexesKeySchemaTypeDef",
    "ClientDeleteTableResponseTableDescriptionLocalSecondaryIndexesProjectionTypeDef",
    "ClientDeleteTableResponseTableDescriptionLocalSecondaryIndexesTypeDef",
    "ClientDeleteTableResponseTableDescriptionProvisionedThroughputTypeDef",
    "ClientDeleteTableResponseTableDescriptionReplicasGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef",
    "ClientDeleteTableResponseTableDescriptionReplicasGlobalSecondaryIndexesTypeDef",
    "ClientDeleteTableResponseTableDescriptionReplicasProvisionedThroughputOverrideTypeDef",
    "ClientDeleteTableResponseTableDescriptionReplicasTypeDef",
    "ClientDeleteTableResponseTableDescriptionRestoreSummaryTypeDef",
    "ClientDeleteTableResponseTableDescriptionSSEDescriptionTypeDef",
    "ClientDeleteTableResponseTableDescriptionStreamSpecificationTypeDef",
    "ClientDeleteTableResponseTableDescriptionTypeDef",
    "ClientDeleteTableResponseTypeDef",
    "ClientDescribeBackupResponseBackupDescriptionBackupDetailsTypeDef",
    "ClientDescribeBackupResponseBackupDescriptionSourceTableDetailsKeySchemaTypeDef",
    "ClientDescribeBackupResponseBackupDescriptionSourceTableDetailsProvisionedThroughputTypeDef",
    "ClientDescribeBackupResponseBackupDescriptionSourceTableDetailsTypeDef",
    "ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsGlobalSecondaryIndexesKeySchemaTypeDef",
    "ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsGlobalSecondaryIndexesProjectionTypeDef",
    "ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsGlobalSecondaryIndexesProvisionedThroughputTypeDef",
    "ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsGlobalSecondaryIndexesTypeDef",
    "ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsLocalSecondaryIndexesKeySchemaTypeDef",
    "ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsLocalSecondaryIndexesProjectionTypeDef",
    "ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsLocalSecondaryIndexesTypeDef",
    "ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsSSEDescriptionTypeDef",
    "ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsStreamDescriptionTypeDef",
    "ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsTimeToLiveDescriptionTypeDef",
    "ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsTypeDef",
    "ClientDescribeBackupResponseBackupDescriptionTypeDef",
    "ClientDescribeBackupResponseTypeDef",
    "ClientDescribeContinuousBackupsResponseContinuousBackupsDescriptionPointInTimeRecoveryDescriptionTypeDef",
    "ClientDescribeContinuousBackupsResponseContinuousBackupsDescriptionTypeDef",
    "ClientDescribeContinuousBackupsResponseTypeDef",
    "ClientDescribeContributorInsightsResponseFailureExceptionTypeDef",
    "ClientDescribeContributorInsightsResponseTypeDef",
    "ClientDescribeEndpointsResponseEndpointsTypeDef",
    "ClientDescribeEndpointsResponseTypeDef",
    "ClientDescribeGlobalTableResponseGlobalTableDescriptionReplicationGroupGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef",
    "ClientDescribeGlobalTableResponseGlobalTableDescriptionReplicationGroupGlobalSecondaryIndexesTypeDef",
    "ClientDescribeGlobalTableResponseGlobalTableDescriptionReplicationGroupProvisionedThroughputOverrideTypeDef",
    "ClientDescribeGlobalTableResponseGlobalTableDescriptionReplicationGroupTypeDef",
    "ClientDescribeGlobalTableResponseGlobalTableDescriptionTypeDef",
    "ClientDescribeGlobalTableResponseTypeDef",
    "ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaBillingModeSummaryTypeDef",
    "ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef",
    "ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTypeDef",
    "ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedReadCapacityAutoScalingSettingsTypeDef",
    "ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef",
    "ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTypeDef",
    "ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedWriteCapacityAutoScalingSettingsTypeDef",
    "ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsTypeDef",
    "ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef",
    "ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTypeDef",
    "ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedReadCapacityAutoScalingSettingsTypeDef",
    "ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef",
    "ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTypeDef",
    "ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedWriteCapacityAutoScalingSettingsTypeDef",
    "ClientDescribeGlobalTableSettingsResponseReplicaSettingsTypeDef",
    "ClientDescribeGlobalTableSettingsResponseTypeDef",
    "ClientDescribeLimitsResponseTypeDef",
    "ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef",
    "ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTypeDef",
    "ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedReadCapacityAutoScalingSettingsTypeDef",
    "ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef",
    "ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTypeDef",
    "ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedWriteCapacityAutoScalingSettingsTypeDef",
    "ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesTypeDef",
    "ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef",
    "ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTypeDef",
    "ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedReadCapacityAutoScalingSettingsTypeDef",
    "ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef",
    "ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTypeDef",
    "ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedWriteCapacityAutoScalingSettingsTypeDef",
    "ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasTypeDef",
    "ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionTypeDef",
    "ClientDescribeTableReplicaAutoScalingResponseTypeDef",
    "ClientDescribeTableResponseTableArchivalSummaryTypeDef",
    "ClientDescribeTableResponseTableAttributeDefinitionsTypeDef",
    "ClientDescribeTableResponseTableBillingModeSummaryTypeDef",
    "ClientDescribeTableResponseTableGlobalSecondaryIndexesKeySchemaTypeDef",
    "ClientDescribeTableResponseTableGlobalSecondaryIndexesProjectionTypeDef",
    "ClientDescribeTableResponseTableGlobalSecondaryIndexesProvisionedThroughputTypeDef",
    "ClientDescribeTableResponseTableGlobalSecondaryIndexesTypeDef",
    "ClientDescribeTableResponseTableKeySchemaTypeDef",
    "ClientDescribeTableResponseTableLocalSecondaryIndexesKeySchemaTypeDef",
    "ClientDescribeTableResponseTableLocalSecondaryIndexesProjectionTypeDef",
    "ClientDescribeTableResponseTableLocalSecondaryIndexesTypeDef",
    "ClientDescribeTableResponseTableProvisionedThroughputTypeDef",
    "ClientDescribeTableResponseTableReplicasGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef",
    "ClientDescribeTableResponseTableReplicasGlobalSecondaryIndexesTypeDef",
    "ClientDescribeTableResponseTableReplicasProvisionedThroughputOverrideTypeDef",
    "ClientDescribeTableResponseTableReplicasTypeDef",
    "ClientDescribeTableResponseTableRestoreSummaryTypeDef",
    "ClientDescribeTableResponseTableSSEDescriptionTypeDef",
    "ClientDescribeTableResponseTableStreamSpecificationTypeDef",
    "ClientDescribeTableResponseTableTypeDef",
    "ClientDescribeTableResponseTypeDef",
    "ClientDescribeTimeToLiveResponseTimeToLiveDescriptionTypeDef",
    "ClientDescribeTimeToLiveResponseTypeDef",
    "ClientGetItemKeyTypeDef",
    "ClientGetItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef",
    "ClientGetItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef",
    "ClientGetItemResponseConsumedCapacityTableTypeDef",
    "ClientGetItemResponseConsumedCapacityTypeDef",
    "ClientGetItemResponseItemTypeDef",
    "ClientGetItemResponseTypeDef",
    "ClientListBackupsResponseBackupSummariesTypeDef",
    "ClientListBackupsResponseTypeDef",
    "ClientListContributorInsightsResponseContributorInsightsSummariesTypeDef",
    "ClientListContributorInsightsResponseTypeDef",
    "ClientListGlobalTablesResponseGlobalTablesReplicationGroupTypeDef",
    "ClientListGlobalTablesResponseGlobalTablesTypeDef",
    "ClientListGlobalTablesResponseTypeDef",
    "ClientListTablesResponseTypeDef",
    "ClientListTagsOfResourceResponseTagsTypeDef",
    "ClientListTagsOfResourceResponseTypeDef",
    "ClientPutItemExpectedAttributeValueListTypeDef",
    "ClientPutItemExpectedValueTypeDef",
    "ClientPutItemExpectedTypeDef",
    "ClientPutItemExpressionAttributeValuesTypeDef",
    "ClientPutItemItemTypeDef",
    "ClientPutItemResponseAttributesTypeDef",
    "ClientPutItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef",
    "ClientPutItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef",
    "ClientPutItemResponseConsumedCapacityTableTypeDef",
    "ClientPutItemResponseConsumedCapacityTypeDef",
    "ClientPutItemResponseItemCollectionMetricsItemCollectionKeyTypeDef",
    "ClientPutItemResponseItemCollectionMetricsTypeDef",
    "ClientPutItemResponseTypeDef",
    "ClientQueryExclusiveStartKeyTypeDef",
    "ClientQueryExpressionAttributeValuesTypeDef",
    "ClientQueryKeyConditionsAttributeValueListTypeDef",
    "ClientQueryKeyConditionsTypeDef",
    "ClientQueryQueryFilterAttributeValueListTypeDef",
    "ClientQueryQueryFilterTypeDef",
    "ClientQueryResponseConsumedCapacityGlobalSecondaryIndexesTypeDef",
    "ClientQueryResponseConsumedCapacityLocalSecondaryIndexesTypeDef",
    "ClientQueryResponseConsumedCapacityTableTypeDef",
    "ClientQueryResponseConsumedCapacityTypeDef",
    "ClientQueryResponseItemsTypeDef",
    "ClientQueryResponseLastEvaluatedKeyTypeDef",
    "ClientQueryResponseTypeDef",
    "ClientRestoreTableFromBackupGlobalSecondaryIndexOverrideKeySchemaTypeDef",
    "ClientRestoreTableFromBackupGlobalSecondaryIndexOverrideProjectionTypeDef",
    "ClientRestoreTableFromBackupGlobalSecondaryIndexOverrideProvisionedThroughputTypeDef",
    "ClientRestoreTableFromBackupGlobalSecondaryIndexOverrideTypeDef",
    "ClientRestoreTableFromBackupLocalSecondaryIndexOverrideKeySchemaTypeDef",
    "ClientRestoreTableFromBackupLocalSecondaryIndexOverrideProjectionTypeDef",
    "ClientRestoreTableFromBackupLocalSecondaryIndexOverrideTypeDef",
    "ClientRestoreTableFromBackupProvisionedThroughputOverrideTypeDef",
    "ClientRestoreTableFromBackupResponseTableDescriptionArchivalSummaryTypeDef",
    "ClientRestoreTableFromBackupResponseTableDescriptionAttributeDefinitionsTypeDef",
    "ClientRestoreTableFromBackupResponseTableDescriptionBillingModeSummaryTypeDef",
    "ClientRestoreTableFromBackupResponseTableDescriptionGlobalSecondaryIndexesKeySchemaTypeDef",
    "ClientRestoreTableFromBackupResponseTableDescriptionGlobalSecondaryIndexesProjectionTypeDef",
    "ClientRestoreTableFromBackupResponseTableDescriptionGlobalSecondaryIndexesProvisionedThroughputTypeDef",
    "ClientRestoreTableFromBackupResponseTableDescriptionGlobalSecondaryIndexesTypeDef",
    "ClientRestoreTableFromBackupResponseTableDescriptionKeySchemaTypeDef",
    "ClientRestoreTableFromBackupResponseTableDescriptionLocalSecondaryIndexesKeySchemaTypeDef",
    "ClientRestoreTableFromBackupResponseTableDescriptionLocalSecondaryIndexesProjectionTypeDef",
    "ClientRestoreTableFromBackupResponseTableDescriptionLocalSecondaryIndexesTypeDef",
    "ClientRestoreTableFromBackupResponseTableDescriptionProvisionedThroughputTypeDef",
    "ClientRestoreTableFromBackupResponseTableDescriptionReplicasGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef",
    "ClientRestoreTableFromBackupResponseTableDescriptionReplicasGlobalSecondaryIndexesTypeDef",
    "ClientRestoreTableFromBackupResponseTableDescriptionReplicasProvisionedThroughputOverrideTypeDef",
    "ClientRestoreTableFromBackupResponseTableDescriptionReplicasTypeDef",
    "ClientRestoreTableFromBackupResponseTableDescriptionRestoreSummaryTypeDef",
    "ClientRestoreTableFromBackupResponseTableDescriptionSSEDescriptionTypeDef",
    "ClientRestoreTableFromBackupResponseTableDescriptionStreamSpecificationTypeDef",
    "ClientRestoreTableFromBackupResponseTableDescriptionTypeDef",
    "ClientRestoreTableFromBackupResponseTypeDef",
    "ClientRestoreTableToPointInTimeGlobalSecondaryIndexOverrideKeySchemaTypeDef",
    "ClientRestoreTableToPointInTimeGlobalSecondaryIndexOverrideProjectionTypeDef",
    "ClientRestoreTableToPointInTimeGlobalSecondaryIndexOverrideProvisionedThroughputTypeDef",
    "ClientRestoreTableToPointInTimeGlobalSecondaryIndexOverrideTypeDef",
    "ClientRestoreTableToPointInTimeLocalSecondaryIndexOverrideKeySchemaTypeDef",
    "ClientRestoreTableToPointInTimeLocalSecondaryIndexOverrideProjectionTypeDef",
    "ClientRestoreTableToPointInTimeLocalSecondaryIndexOverrideTypeDef",
    "ClientRestoreTableToPointInTimeProvisionedThroughputOverrideTypeDef",
    "ClientRestoreTableToPointInTimeResponseTableDescriptionArchivalSummaryTypeDef",
    "ClientRestoreTableToPointInTimeResponseTableDescriptionAttributeDefinitionsTypeDef",
    "ClientRestoreTableToPointInTimeResponseTableDescriptionBillingModeSummaryTypeDef",
    "ClientRestoreTableToPointInTimeResponseTableDescriptionGlobalSecondaryIndexesKeySchemaTypeDef",
    "ClientRestoreTableToPointInTimeResponseTableDescriptionGlobalSecondaryIndexesProjectionTypeDef",
    "ClientRestoreTableToPointInTimeResponseTableDescriptionGlobalSecondaryIndexesProvisionedThroughputTypeDef",
    "ClientRestoreTableToPointInTimeResponseTableDescriptionGlobalSecondaryIndexesTypeDef",
    "ClientRestoreTableToPointInTimeResponseTableDescriptionKeySchemaTypeDef",
    "ClientRestoreTableToPointInTimeResponseTableDescriptionLocalSecondaryIndexesKeySchemaTypeDef",
    "ClientRestoreTableToPointInTimeResponseTableDescriptionLocalSecondaryIndexesProjectionTypeDef",
    "ClientRestoreTableToPointInTimeResponseTableDescriptionLocalSecondaryIndexesTypeDef",
    "ClientRestoreTableToPointInTimeResponseTableDescriptionProvisionedThroughputTypeDef",
    "ClientRestoreTableToPointInTimeResponseTableDescriptionReplicasGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef",
    "ClientRestoreTableToPointInTimeResponseTableDescriptionReplicasGlobalSecondaryIndexesTypeDef",
    "ClientRestoreTableToPointInTimeResponseTableDescriptionReplicasProvisionedThroughputOverrideTypeDef",
    "ClientRestoreTableToPointInTimeResponseTableDescriptionReplicasTypeDef",
    "ClientRestoreTableToPointInTimeResponseTableDescriptionRestoreSummaryTypeDef",
    "ClientRestoreTableToPointInTimeResponseTableDescriptionSSEDescriptionTypeDef",
    "ClientRestoreTableToPointInTimeResponseTableDescriptionStreamSpecificationTypeDef",
    "ClientRestoreTableToPointInTimeResponseTableDescriptionTypeDef",
    "ClientRestoreTableToPointInTimeResponseTypeDef",
    "ClientScanExclusiveStartKeyTypeDef",
    "ClientScanExpressionAttributeValuesTypeDef",
    "ClientScanResponseConsumedCapacityGlobalSecondaryIndexesTypeDef",
    "ClientScanResponseConsumedCapacityLocalSecondaryIndexesTypeDef",
    "ClientScanResponseConsumedCapacityTableTypeDef",
    "ClientScanResponseConsumedCapacityTypeDef",
    "ClientScanResponseItemsTypeDef",
    "ClientScanResponseLastEvaluatedKeyTypeDef",
    "ClientScanResponseTypeDef",
    "ClientScanScanFilterAttributeValueListTypeDef",
    "ClientScanScanFilterTypeDef",
    "ClientTagResourceTagsTypeDef",
    "ClientTransactGetItemsResponseConsumedCapacityGlobalSecondaryIndexesTypeDef",
    "ClientTransactGetItemsResponseConsumedCapacityLocalSecondaryIndexesTypeDef",
    "ClientTransactGetItemsResponseConsumedCapacityTableTypeDef",
    "ClientTransactGetItemsResponseConsumedCapacityTypeDef",
    "ClientTransactGetItemsResponseResponsesItemTypeDef",
    "ClientTransactGetItemsResponseResponsesTypeDef",
    "ClientTransactGetItemsResponseTypeDef",
    "ClientTransactGetItemsTransactItemsGetKeyTypeDef",
    "ClientTransactGetItemsTransactItemsGetTypeDef",
    "ClientTransactGetItemsTransactItemsTypeDef",
    "ClientTransactWriteItemsResponseConsumedCapacityGlobalSecondaryIndexesTypeDef",
    "ClientTransactWriteItemsResponseConsumedCapacityLocalSecondaryIndexesTypeDef",
    "ClientTransactWriteItemsResponseConsumedCapacityTableTypeDef",
    "ClientTransactWriteItemsResponseConsumedCapacityTypeDef",
    "ClientTransactWriteItemsResponseItemCollectionMetricsItemCollectionKeyTypeDef",
    "ClientTransactWriteItemsResponseItemCollectionMetricsTypeDef",
    "ClientTransactWriteItemsResponseTypeDef",
    "ClientTransactWriteItemsTransactItemsConditionCheckExpressionAttributeValuesTypeDef",
    "ClientTransactWriteItemsTransactItemsConditionCheckKeyTypeDef",
    "ClientTransactWriteItemsTransactItemsConditionCheckTypeDef",
    "ClientTransactWriteItemsTransactItemsDeleteExpressionAttributeValuesTypeDef",
    "ClientTransactWriteItemsTransactItemsDeleteKeyTypeDef",
    "ClientTransactWriteItemsTransactItemsDeleteTypeDef",
    "ClientTransactWriteItemsTransactItemsPutExpressionAttributeValuesTypeDef",
    "ClientTransactWriteItemsTransactItemsPutItemTypeDef",
    "ClientTransactWriteItemsTransactItemsPutTypeDef",
    "ClientTransactWriteItemsTransactItemsUpdateExpressionAttributeValuesTypeDef",
    "ClientTransactWriteItemsTransactItemsUpdateKeyTypeDef",
    "ClientTransactWriteItemsTransactItemsUpdateTypeDef",
    "ClientTransactWriteItemsTransactItemsTypeDef",
    "ClientUpdateContinuousBackupsPointInTimeRecoverySpecificationTypeDef",
    "ClientUpdateContinuousBackupsResponseContinuousBackupsDescriptionPointInTimeRecoveryDescriptionTypeDef",
    "ClientUpdateContinuousBackupsResponseContinuousBackupsDescriptionTypeDef",
    "ClientUpdateContinuousBackupsResponseTypeDef",
    "ClientUpdateContributorInsightsResponseTypeDef",
    "ClientUpdateGlobalTableReplicaUpdatesCreateTypeDef",
    "ClientUpdateGlobalTableReplicaUpdatesDeleteTypeDef",
    "ClientUpdateGlobalTableReplicaUpdatesTypeDef",
    "ClientUpdateGlobalTableResponseGlobalTableDescriptionReplicationGroupGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef",
    "ClientUpdateGlobalTableResponseGlobalTableDescriptionReplicationGroupGlobalSecondaryIndexesTypeDef",
    "ClientUpdateGlobalTableResponseGlobalTableDescriptionReplicationGroupProvisionedThroughputOverrideTypeDef",
    "ClientUpdateGlobalTableResponseGlobalTableDescriptionReplicationGroupTypeDef",
    "ClientUpdateGlobalTableResponseGlobalTableDescriptionTypeDef",
    "ClientUpdateGlobalTableResponseTypeDef",
    "ClientUpdateGlobalTableSettingsGlobalTableGlobalSecondaryIndexSettingsUpdateProvisionedWriteCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef",
    "ClientUpdateGlobalTableSettingsGlobalTableGlobalSecondaryIndexSettingsUpdateProvisionedWriteCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTypeDef",
    "ClientUpdateGlobalTableSettingsGlobalTableGlobalSecondaryIndexSettingsUpdateProvisionedWriteCapacityAutoScalingSettingsUpdateTypeDef",
    "ClientUpdateGlobalTableSettingsGlobalTableGlobalSecondaryIndexSettingsUpdateTypeDef",
    "ClientUpdateGlobalTableSettingsGlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef",
    "ClientUpdateGlobalTableSettingsGlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTypeDef",
    "ClientUpdateGlobalTableSettingsGlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdateTypeDef",
    "ClientUpdateGlobalTableSettingsReplicaSettingsUpdateReplicaGlobalSecondaryIndexSettingsUpdateProvisionedReadCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef",
    "ClientUpdateGlobalTableSettingsReplicaSettingsUpdateReplicaGlobalSecondaryIndexSettingsUpdateProvisionedReadCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTypeDef",
    "ClientUpdateGlobalTableSettingsReplicaSettingsUpdateReplicaGlobalSecondaryIndexSettingsUpdateProvisionedReadCapacityAutoScalingSettingsUpdateTypeDef",
    "ClientUpdateGlobalTableSettingsReplicaSettingsUpdateReplicaGlobalSecondaryIndexSettingsUpdateTypeDef",
    "ClientUpdateGlobalTableSettingsReplicaSettingsUpdateReplicaProvisionedReadCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef",
    "ClientUpdateGlobalTableSettingsReplicaSettingsUpdateReplicaProvisionedReadCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTypeDef",
    "ClientUpdateGlobalTableSettingsReplicaSettingsUpdateReplicaProvisionedReadCapacityAutoScalingSettingsUpdateTypeDef",
    "ClientUpdateGlobalTableSettingsReplicaSettingsUpdateTypeDef",
    "ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaBillingModeSummaryTypeDef",
    "ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef",
    "ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTypeDef",
    "ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedReadCapacityAutoScalingSettingsTypeDef",
    "ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef",
    "ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTypeDef",
    "ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedWriteCapacityAutoScalingSettingsTypeDef",
    "ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsTypeDef",
    "ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef",
    "ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTypeDef",
    "ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedReadCapacityAutoScalingSettingsTypeDef",
    "ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef",
    "ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTypeDef",
    "ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedWriteCapacityAutoScalingSettingsTypeDef",
    "ClientUpdateGlobalTableSettingsResponseReplicaSettingsTypeDef",
    "ClientUpdateGlobalTableSettingsResponseTypeDef",
    "ClientUpdateItemAttributeUpdatesValueTypeDef",
    "ClientUpdateItemAttributeUpdatesTypeDef",
    "ClientUpdateItemExpectedAttributeValueListTypeDef",
    "ClientUpdateItemExpectedValueTypeDef",
    "ClientUpdateItemExpectedTypeDef",
    "ClientUpdateItemExpressionAttributeValuesTypeDef",
    "ClientUpdateItemKeyTypeDef",
    "ClientUpdateItemResponseAttributesTypeDef",
    "ClientUpdateItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef",
    "ClientUpdateItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef",
    "ClientUpdateItemResponseConsumedCapacityTableTypeDef",
    "ClientUpdateItemResponseConsumedCapacityTypeDef",
    "ClientUpdateItemResponseItemCollectionMetricsItemCollectionKeyTypeDef",
    "ClientUpdateItemResponseItemCollectionMetricsTypeDef",
    "ClientUpdateItemResponseTypeDef",
    "ClientUpdateTableAttributeDefinitionsTypeDef",
    "ClientUpdateTableGlobalSecondaryIndexUpdatesCreateKeySchemaTypeDef",
    "ClientUpdateTableGlobalSecondaryIndexUpdatesCreateProjectionTypeDef",
    "ClientUpdateTableGlobalSecondaryIndexUpdatesCreateProvisionedThroughputTypeDef",
    "ClientUpdateTableGlobalSecondaryIndexUpdatesCreateTypeDef",
    "ClientUpdateTableGlobalSecondaryIndexUpdatesDeleteTypeDef",
    "ClientUpdateTableGlobalSecondaryIndexUpdatesUpdateProvisionedThroughputTypeDef",
    "ClientUpdateTableGlobalSecondaryIndexUpdatesUpdateTypeDef",
    "ClientUpdateTableGlobalSecondaryIndexUpdatesTypeDef",
    "ClientUpdateTableProvisionedThroughputTypeDef",
    "ClientUpdateTableReplicaAutoScalingGlobalSecondaryIndexUpdatesProvisionedWriteCapacityAutoScalingUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef",
    "ClientUpdateTableReplicaAutoScalingGlobalSecondaryIndexUpdatesProvisionedWriteCapacityAutoScalingUpdateScalingPolicyUpdateTypeDef",
    "ClientUpdateTableReplicaAutoScalingGlobalSecondaryIndexUpdatesProvisionedWriteCapacityAutoScalingUpdateTypeDef",
    "ClientUpdateTableReplicaAutoScalingGlobalSecondaryIndexUpdatesTypeDef",
    "ClientUpdateTableReplicaAutoScalingProvisionedWriteCapacityAutoScalingUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef",
    "ClientUpdateTableReplicaAutoScalingProvisionedWriteCapacityAutoScalingUpdateScalingPolicyUpdateTypeDef",
    "ClientUpdateTableReplicaAutoScalingProvisionedWriteCapacityAutoScalingUpdateTypeDef",
    "ClientUpdateTableReplicaAutoScalingReplicaUpdatesReplicaGlobalSecondaryIndexUpdatesProvisionedReadCapacityAutoScalingUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef",
    "ClientUpdateTableReplicaAutoScalingReplicaUpdatesReplicaGlobalSecondaryIndexUpdatesProvisionedReadCapacityAutoScalingUpdateScalingPolicyUpdateTypeDef",
    "ClientUpdateTableReplicaAutoScalingReplicaUpdatesReplicaGlobalSecondaryIndexUpdatesProvisionedReadCapacityAutoScalingUpdateTypeDef",
    "ClientUpdateTableReplicaAutoScalingReplicaUpdatesReplicaGlobalSecondaryIndexUpdatesTypeDef",
    "ClientUpdateTableReplicaAutoScalingReplicaUpdatesReplicaProvisionedReadCapacityAutoScalingUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef",
    "ClientUpdateTableReplicaAutoScalingReplicaUpdatesReplicaProvisionedReadCapacityAutoScalingUpdateScalingPolicyUpdateTypeDef",
    "ClientUpdateTableReplicaAutoScalingReplicaUpdatesReplicaProvisionedReadCapacityAutoScalingUpdateTypeDef",
    "ClientUpdateTableReplicaAutoScalingReplicaUpdatesTypeDef",
    "ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef",
    "ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTypeDef",
    "ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedReadCapacityAutoScalingSettingsTypeDef",
    "ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef",
    "ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTypeDef",
    "ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedWriteCapacityAutoScalingSettingsTypeDef",
    "ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesTypeDef",
    "ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef",
    "ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTypeDef",
    "ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedReadCapacityAutoScalingSettingsTypeDef",
    "ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef",
    "ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTypeDef",
    "ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedWriteCapacityAutoScalingSettingsTypeDef",
    "ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasTypeDef",
    "ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionTypeDef",
    "ClientUpdateTableReplicaAutoScalingResponseTypeDef",
    "ClientUpdateTableReplicaUpdatesCreateGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef",
    "ClientUpdateTableReplicaUpdatesCreateGlobalSecondaryIndexesTypeDef",
    "ClientUpdateTableReplicaUpdatesCreateProvisionedThroughputOverrideTypeDef",
    "ClientUpdateTableReplicaUpdatesCreateTypeDef",
    "ClientUpdateTableReplicaUpdatesDeleteTypeDef",
    "ClientUpdateTableReplicaUpdatesUpdateGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef",
    "ClientUpdateTableReplicaUpdatesUpdateGlobalSecondaryIndexesTypeDef",
    "ClientUpdateTableReplicaUpdatesUpdateProvisionedThroughputOverrideTypeDef",
    "ClientUpdateTableReplicaUpdatesUpdateTypeDef",
    "ClientUpdateTableReplicaUpdatesTypeDef",
    "ClientUpdateTableResponseTableDescriptionArchivalSummaryTypeDef",
    "ClientUpdateTableResponseTableDescriptionAttributeDefinitionsTypeDef",
    "ClientUpdateTableResponseTableDescriptionBillingModeSummaryTypeDef",
    "ClientUpdateTableResponseTableDescriptionGlobalSecondaryIndexesKeySchemaTypeDef",
    "ClientUpdateTableResponseTableDescriptionGlobalSecondaryIndexesProjectionTypeDef",
    "ClientUpdateTableResponseTableDescriptionGlobalSecondaryIndexesProvisionedThroughputTypeDef",
    "ClientUpdateTableResponseTableDescriptionGlobalSecondaryIndexesTypeDef",
    "ClientUpdateTableResponseTableDescriptionKeySchemaTypeDef",
    "ClientUpdateTableResponseTableDescriptionLocalSecondaryIndexesKeySchemaTypeDef",
    "ClientUpdateTableResponseTableDescriptionLocalSecondaryIndexesProjectionTypeDef",
    "ClientUpdateTableResponseTableDescriptionLocalSecondaryIndexesTypeDef",
    "ClientUpdateTableResponseTableDescriptionProvisionedThroughputTypeDef",
    "ClientUpdateTableResponseTableDescriptionReplicasGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef",
    "ClientUpdateTableResponseTableDescriptionReplicasGlobalSecondaryIndexesTypeDef",
    "ClientUpdateTableResponseTableDescriptionReplicasProvisionedThroughputOverrideTypeDef",
    "ClientUpdateTableResponseTableDescriptionReplicasTypeDef",
    "ClientUpdateTableResponseTableDescriptionRestoreSummaryTypeDef",
    "ClientUpdateTableResponseTableDescriptionSSEDescriptionTypeDef",
    "ClientUpdateTableResponseTableDescriptionStreamSpecificationTypeDef",
    "ClientUpdateTableResponseTableDescriptionTypeDef",
    "ClientUpdateTableResponseTypeDef",
    "ClientUpdateTableSSESpecificationTypeDef",
    "ClientUpdateTableStreamSpecificationTypeDef",
    "ClientUpdateTimeToLiveResponseTimeToLiveSpecificationTypeDef",
    "ClientUpdateTimeToLiveResponseTypeDef",
    "ClientUpdateTimeToLiveTimeToLiveSpecificationTypeDef",
    "ListBackupsPaginatePaginationConfigTypeDef",
    "ListBackupsPaginateResponseBackupSummariesTypeDef",
    "ListBackupsPaginateResponseTypeDef",
    "ListTablesPaginatePaginationConfigTypeDef",
    "ListTablesPaginateResponseTypeDef",
    "ListTagsOfResourcePaginatePaginationConfigTypeDef",
    "ListTagsOfResourcePaginateResponseTagsTypeDef",
    "ListTagsOfResourcePaginateResponseTypeDef",
    "QueryPaginateExpressionAttributeValuesTypeDef",
    "QueryPaginateKeyConditionsAttributeValueListTypeDef",
    "QueryPaginateKeyConditionsTypeDef",
    "QueryPaginatePaginationConfigTypeDef",
    "QueryPaginateQueryFilterAttributeValueListTypeDef",
    "QueryPaginateQueryFilterTypeDef",
    "QueryPaginateResponseConsumedCapacityGlobalSecondaryIndexesTypeDef",
    "QueryPaginateResponseConsumedCapacityLocalSecondaryIndexesTypeDef",
    "QueryPaginateResponseConsumedCapacityTableTypeDef",
    "QueryPaginateResponseConsumedCapacityTypeDef",
    "QueryPaginateResponseItemsTypeDef",
    "QueryPaginateResponseTypeDef",
    "ScanPaginateExpressionAttributeValuesTypeDef",
    "ScanPaginatePaginationConfigTypeDef",
    "ScanPaginateResponseConsumedCapacityGlobalSecondaryIndexesTypeDef",
    "ScanPaginateResponseConsumedCapacityLocalSecondaryIndexesTypeDef",
    "ScanPaginateResponseConsumedCapacityTableTypeDef",
    "ScanPaginateResponseConsumedCapacityTypeDef",
    "ScanPaginateResponseItemsTypeDef",
    "ScanPaginateResponseTypeDef",
    "ScanPaginateScanFilterAttributeValueListTypeDef",
    "ScanPaginateScanFilterTypeDef",
    "ServiceResourceBatchGetItemRequestItemsKeysTypeDef",
    "ServiceResourceBatchGetItemRequestItemsTypeDef",
    "ServiceResourceBatchGetItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef",
    "ServiceResourceBatchGetItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef",
    "ServiceResourceBatchGetItemResponseConsumedCapacityTableTypeDef",
    "ServiceResourceBatchGetItemResponseConsumedCapacityTypeDef",
    "ServiceResourceBatchGetItemResponseResponsesTypeDef",
    "ServiceResourceBatchGetItemResponseUnprocessedKeysKeysTypeDef",
    "ServiceResourceBatchGetItemResponseUnprocessedKeysTypeDef",
    "ServiceResourceBatchGetItemResponseTypeDef",
    "ServiceResourceBatchWriteItemRequestItemsDeleteRequestKeyTypeDef",
    "ServiceResourceBatchWriteItemRequestItemsDeleteRequestTypeDef",
    "ServiceResourceBatchWriteItemRequestItemsPutRequestItemTypeDef",
    "ServiceResourceBatchWriteItemRequestItemsPutRequestTypeDef",
    "ServiceResourceBatchWriteItemRequestItemsTypeDef",
    "ServiceResourceBatchWriteItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef",
    "ServiceResourceBatchWriteItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef",
    "ServiceResourceBatchWriteItemResponseConsumedCapacityTableTypeDef",
    "ServiceResourceBatchWriteItemResponseConsumedCapacityTypeDef",
    "ServiceResourceBatchWriteItemResponseItemCollectionMetricsItemCollectionKeyTypeDef",
    "ServiceResourceBatchWriteItemResponseItemCollectionMetricsTypeDef",
    "ServiceResourceBatchWriteItemResponseUnprocessedItemsDeleteRequestKeyTypeDef",
    "ServiceResourceBatchWriteItemResponseUnprocessedItemsDeleteRequestTypeDef",
    "ServiceResourceBatchWriteItemResponseUnprocessedItemsPutRequestItemTypeDef",
    "ServiceResourceBatchWriteItemResponseUnprocessedItemsPutRequestTypeDef",
    "ServiceResourceBatchWriteItemResponseUnprocessedItemsTypeDef",
    "ServiceResourceBatchWriteItemResponseTypeDef",
    "ServiceResourceCreateTableAttributeDefinitionsTypeDef",
    "ServiceResourceCreateTableGlobalSecondaryIndexesKeySchemaTypeDef",
    "ServiceResourceCreateTableGlobalSecondaryIndexesProjectionTypeDef",
    "ServiceResourceCreateTableGlobalSecondaryIndexesProvisionedThroughputTypeDef",
    "ServiceResourceCreateTableGlobalSecondaryIndexesTypeDef",
    "ServiceResourceCreateTableKeySchemaTypeDef",
    "ServiceResourceCreateTableLocalSecondaryIndexesKeySchemaTypeDef",
    "ServiceResourceCreateTableLocalSecondaryIndexesProjectionTypeDef",
    "ServiceResourceCreateTableLocalSecondaryIndexesTypeDef",
    "ServiceResourceCreateTableProvisionedThroughputTypeDef",
    "ServiceResourceCreateTableSSESpecificationTypeDef",
    "ServiceResourceCreateTableStreamSpecificationTypeDef",
    "ServiceResourceCreateTableTagsTypeDef",
    "TableDeleteItemExpectedAttributeValueListTypeDef",
    "TableDeleteItemExpectedValueTypeDef",
    "TableDeleteItemExpectedTypeDef",
    "TableDeleteItemExpressionAttributeValuesTypeDef",
    "TableDeleteItemKeyTypeDef",
    "TableDeleteItemResponseAttributesTypeDef",
    "TableDeleteItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef",
    "TableDeleteItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef",
    "TableDeleteItemResponseConsumedCapacityTableTypeDef",
    "TableDeleteItemResponseConsumedCapacityTypeDef",
    "TableDeleteItemResponseItemCollectionMetricsItemCollectionKeyTypeDef",
    "TableDeleteItemResponseItemCollectionMetricsTypeDef",
    "TableDeleteItemResponseTypeDef",
    "TableDeleteResponseTableDescriptionArchivalSummaryTypeDef",
    "TableDeleteResponseTableDescriptionAttributeDefinitionsTypeDef",
    "TableDeleteResponseTableDescriptionBillingModeSummaryTypeDef",
    "TableDeleteResponseTableDescriptionGlobalSecondaryIndexesKeySchemaTypeDef",
    "TableDeleteResponseTableDescriptionGlobalSecondaryIndexesProjectionTypeDef",
    "TableDeleteResponseTableDescriptionGlobalSecondaryIndexesProvisionedThroughputTypeDef",
    "TableDeleteResponseTableDescriptionGlobalSecondaryIndexesTypeDef",
    "TableDeleteResponseTableDescriptionKeySchemaTypeDef",
    "TableDeleteResponseTableDescriptionLocalSecondaryIndexesKeySchemaTypeDef",
    "TableDeleteResponseTableDescriptionLocalSecondaryIndexesProjectionTypeDef",
    "TableDeleteResponseTableDescriptionLocalSecondaryIndexesTypeDef",
    "TableDeleteResponseTableDescriptionProvisionedThroughputTypeDef",
    "TableDeleteResponseTableDescriptionReplicasGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef",
    "TableDeleteResponseTableDescriptionReplicasGlobalSecondaryIndexesTypeDef",
    "TableDeleteResponseTableDescriptionReplicasProvisionedThroughputOverrideTypeDef",
    "TableDeleteResponseTableDescriptionReplicasTypeDef",
    "TableDeleteResponseTableDescriptionRestoreSummaryTypeDef",
    "TableDeleteResponseTableDescriptionSSEDescriptionTypeDef",
    "TableDeleteResponseTableDescriptionStreamSpecificationTypeDef",
    "TableDeleteResponseTableDescriptionTypeDef",
    "TableDeleteResponseTypeDef",
    "TableExistsWaitWaiterConfigTypeDef",
    "TableGetItemKeyTypeDef",
    "TableGetItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef",
    "TableGetItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef",
    "TableGetItemResponseConsumedCapacityTableTypeDef",
    "TableGetItemResponseConsumedCapacityTypeDef",
    "TableGetItemResponseItemTypeDef",
    "TableGetItemResponseTypeDef",
    "TableNotExistsWaitWaiterConfigTypeDef",
    "TablePutItemExpectedAttributeValueListTypeDef",
    "TablePutItemExpectedValueTypeDef",
    "TablePutItemExpectedTypeDef",
    "TablePutItemExpressionAttributeValuesTypeDef",
    "TablePutItemItemTypeDef",
    "TablePutItemResponseAttributesTypeDef",
    "TablePutItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef",
    "TablePutItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef",
    "TablePutItemResponseConsumedCapacityTableTypeDef",
    "TablePutItemResponseConsumedCapacityTypeDef",
    "TablePutItemResponseItemCollectionMetricsItemCollectionKeyTypeDef",
    "TablePutItemResponseItemCollectionMetricsTypeDef",
    "TablePutItemResponseTypeDef",
    "TableQueryExclusiveStartKeyTypeDef",
    "TableQueryExpressionAttributeValuesTypeDef",
    "TableQueryKeyConditionsAttributeValueListTypeDef",
    "TableQueryKeyConditionsTypeDef",
    "TableQueryQueryFilterAttributeValueListTypeDef",
    "TableQueryQueryFilterTypeDef",
    "TableQueryResponseConsumedCapacityGlobalSecondaryIndexesTypeDef",
    "TableQueryResponseConsumedCapacityLocalSecondaryIndexesTypeDef",
    "TableQueryResponseConsumedCapacityTableTypeDef",
    "TableQueryResponseConsumedCapacityTypeDef",
    "TableQueryResponseItemsTypeDef",
    "TableQueryResponseLastEvaluatedKeyTypeDef",
    "TableQueryResponseTypeDef",
    "TableScanExclusiveStartKeyTypeDef",
    "TableScanExpressionAttributeValuesTypeDef",
    "TableScanResponseConsumedCapacityGlobalSecondaryIndexesTypeDef",
    "TableScanResponseConsumedCapacityLocalSecondaryIndexesTypeDef",
    "TableScanResponseConsumedCapacityTableTypeDef",
    "TableScanResponseConsumedCapacityTypeDef",
    "TableScanResponseItemsTypeDef",
    "TableScanResponseLastEvaluatedKeyTypeDef",
    "TableScanResponseTypeDef",
    "TableScanScanFilterAttributeValueListTypeDef",
    "TableScanScanFilterTypeDef",
    "TableUpdateAttributeDefinitionsTypeDef",
    "TableUpdateGlobalSecondaryIndexUpdatesCreateKeySchemaTypeDef",
    "TableUpdateGlobalSecondaryIndexUpdatesCreateProjectionTypeDef",
    "TableUpdateGlobalSecondaryIndexUpdatesCreateProvisionedThroughputTypeDef",
    "TableUpdateGlobalSecondaryIndexUpdatesCreateTypeDef",
    "TableUpdateGlobalSecondaryIndexUpdatesDeleteTypeDef",
    "TableUpdateGlobalSecondaryIndexUpdatesUpdateProvisionedThroughputTypeDef",
    "TableUpdateGlobalSecondaryIndexUpdatesUpdateTypeDef",
    "TableUpdateGlobalSecondaryIndexUpdatesTypeDef",
    "TableUpdateItemAttributeUpdatesValueTypeDef",
    "TableUpdateItemAttributeUpdatesTypeDef",
    "TableUpdateItemExpectedAttributeValueListTypeDef",
    "TableUpdateItemExpectedValueTypeDef",
    "TableUpdateItemExpectedTypeDef",
    "TableUpdateItemExpressionAttributeValuesTypeDef",
    "TableUpdateItemKeyTypeDef",
    "TableUpdateItemResponseAttributesTypeDef",
    "TableUpdateItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef",
    "TableUpdateItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef",
    "TableUpdateItemResponseConsumedCapacityTableTypeDef",
    "TableUpdateItemResponseConsumedCapacityTypeDef",
    "TableUpdateItemResponseItemCollectionMetricsItemCollectionKeyTypeDef",
    "TableUpdateItemResponseItemCollectionMetricsTypeDef",
    "TableUpdateItemResponseTypeDef",
    "TableUpdateProvisionedThroughputTypeDef",
    "TableUpdateReplicaUpdatesCreateGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef",
    "TableUpdateReplicaUpdatesCreateGlobalSecondaryIndexesTypeDef",
    "TableUpdateReplicaUpdatesCreateProvisionedThroughputOverrideTypeDef",
    "TableUpdateReplicaUpdatesCreateTypeDef",
    "TableUpdateReplicaUpdatesDeleteTypeDef",
    "TableUpdateReplicaUpdatesUpdateGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef",
    "TableUpdateReplicaUpdatesUpdateGlobalSecondaryIndexesTypeDef",
    "TableUpdateReplicaUpdatesUpdateProvisionedThroughputOverrideTypeDef",
    "TableUpdateReplicaUpdatesUpdateTypeDef",
    "TableUpdateReplicaUpdatesTypeDef",
    "TableUpdateSSESpecificationTypeDef",
    "TableUpdateStreamSpecificationTypeDef",
)


_ClientBatchGetItemRequestItemsKeysTypeDef = TypedDict(
    "_ClientBatchGetItemRequestItemsKeysTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class ClientBatchGetItemRequestItemsKeysTypeDef(_ClientBatchGetItemRequestItemsKeysTypeDef):
    """
    Type definition for `ClientBatchGetItemRequestItems` `Keys`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_RequiredClientBatchGetItemRequestItemsTypeDef = TypedDict(
    "_RequiredClientBatchGetItemRequestItemsTypeDef",
    {"Keys": List[Dict[str, ClientBatchGetItemRequestItemsKeysTypeDef]]},
)
_OptionalClientBatchGetItemRequestItemsTypeDef = TypedDict(
    "_OptionalClientBatchGetItemRequestItemsTypeDef",
    {
        "AttributesToGet": List[str],
        "ConsistentRead": bool,
        "ProjectionExpression": str,
        "ExpressionAttributeNames": Dict[str, str],
    },
    total=False,
)


class ClientBatchGetItemRequestItemsTypeDef(
    _RequiredClientBatchGetItemRequestItemsTypeDef, _OptionalClientBatchGetItemRequestItemsTypeDef
):
    """
    Type definition for `ClientBatchGetItem` `RequestItems`

    Represents a set of primary keys and, for each key, the attributes to retrieve from the table.

    For each primary key, you must provide *all* of the key attributes. For example, with a simple
    primary key, you only need to provide the partition key. For a composite primary key, you must
    provide *both* the partition key and the sort key.

    - **Keys** *(list) --* **[REQUIRED]**

      The primary key attribute values that define the items and the attributes associated with the
      items.

      - *(dict) --*

        - *(string) --*

          - *(dict) --*

            Represents the data for an attribute.

            Each attribute value is described as a name-value pair. The name is the data type, and
            the value is the data itself.

            For more information, see `Data Types
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
            in the *Amazon DynamoDB Developer Guide* .

            - **S** *(string) --*

              An attribute of type String. For example:

               ``"S": "Hello"``

            - **N** *(string) --*

              An attribute of type Number. For example:

               ``"N": "123.45"``

              Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
              across languages and libraries. However, DynamoDB treats them as number type
              attributes for mathematical operations.

            - **B** *(bytes) --*

              An attribute of type Binary. For example:

               ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

            - **SS** *(list) --*

              An attribute of type String Set. For example:

               ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

              - *(string) --*

            - **NS** *(list) --*

              An attribute of type Number Set. For example:

               ``"NS": ["42.2", "-19", "7.5", "3.14"]``

              Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
              across languages and libraries. However, DynamoDB treats them as number type
              attributes for mathematical operations.

              - *(string) --*

            - **BS** *(list) --*

              An attribute of type Binary Set. For example:

               ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

              - *(bytes) --*

            - **M** *(dict) --*

              An attribute of type Map. For example:

               ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

              - *(string) --*

                - *(dict) --*

                  Represents the data for an attribute.

                  Each attribute value is described as a name-value pair. The name is the data type,
                  and the value is the data itself.

                  For more information, see `Data Types
                  <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                  in the *Amazon DynamoDB Developer Guide* .

            - **L** *(list) --*

              An attribute of type List. For example:

               ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

            - **NULL** *(boolean) --*

              An attribute of type Null. For example:

               ``"NULL": true``

            - **BOOL** *(boolean) --*

              An attribute of type Boolean. For example:

               ``"BOOL": true``

    - **AttributesToGet** *(list) --*

      This is a legacy parameter. Use ``ProjectionExpression`` instead. For more information, see
      `Legacy Conditional Parameters
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html>`__
      in the *Amazon DynamoDB Developer Guide* .

      - *(string) --*

    - **ConsistentRead** *(boolean) --*

      The consistency of a read operation. If set to ``true`` , then a strongly consistent read is
      used; otherwise, an eventually consistent read is used.

    - **ProjectionExpression** *(string) --*

      A string that identifies one or more attributes to retrieve from the table. These attributes
      can include scalars, sets, or elements of a JSON document. The attributes in the
      ``ProjectionExpression`` must be separated by commas.

      If no attribute names are specified, then all attributes will be returned. If any of the
      requested attributes are not found, they will not appear in the result.

      For more information, see `Accessing Item Attributes
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html>`__
      in the *Amazon DynamoDB Developer Guide* .

    - **ExpressionAttributeNames** *(dict) --*

      One or more substitution tokens for attribute names in an expression. The following are some
      use cases for using ``ExpressionAttributeNames`` :

      * To access an attribute whose name conflicts with a DynamoDB reserved word.

      * To create a placeholder for repeating occurrences of an attribute name in an expression.

      * To prevent special characters in an attribute name from being misinterpreted in an
      expression.

      Use the **#** character in an expression to dereference an attribute name. For example,
      consider the following attribute name:

      * ``Percentile``

      The name of this attribute conflicts with a reserved word, so it cannot be used directly in an
      expression. (For the complete list of reserved words, see `Reserved Words
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html>`__ in
      the *Amazon DynamoDB Developer Guide* ). To work around this, you could specify the following
      for ``ExpressionAttributeNames`` :

      * ``{"#P":"Percentile"}``

      You could then use this substitution in an expression, as in this example:

      * ``#P = :val``

      .. note::

        Tokens that begin with the **:** character are *expression attribute values* , which are
        placeholders for the actual value at runtime.

      For more information on expression attribute names, see `Accessing Item Attributes
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html>`__
      in the *Amazon DynamoDB Developer Guide* .

      - *(string) --*

        - *(string) --*
    """


_ClientBatchGetItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef = TypedDict(
    "_ClientBatchGetItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef",
    {"ReadCapacityUnits": float, "WriteCapacityUnits": float, "CapacityUnits": float},
    total=False,
)


class ClientBatchGetItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef(
    _ClientBatchGetItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef
):
    """
    Type definition for `ClientBatchGetItemResponseConsumedCapacity` `GlobalSecondaryIndexes`

    Represents the amount of provisioned throughput capacity consumed on a table or an index.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed on a table or an index.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed on a table or an index.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed on a table or an index.
    """


_ClientBatchGetItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef = TypedDict(
    "_ClientBatchGetItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef",
    {"ReadCapacityUnits": float, "WriteCapacityUnits": float, "CapacityUnits": float},
    total=False,
)


class ClientBatchGetItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef(
    _ClientBatchGetItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef
):
    """
    Type definition for `ClientBatchGetItemResponseConsumedCapacity` `LocalSecondaryIndexes`

    Represents the amount of provisioned throughput capacity consumed on a table or an index.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed on a table or an index.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed on a table or an index.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed on a table or an index.
    """


_ClientBatchGetItemResponseConsumedCapacityTableTypeDef = TypedDict(
    "_ClientBatchGetItemResponseConsumedCapacityTableTypeDef",
    {"ReadCapacityUnits": float, "WriteCapacityUnits": float, "CapacityUnits": float},
    total=False,
)


class ClientBatchGetItemResponseConsumedCapacityTableTypeDef(
    _ClientBatchGetItemResponseConsumedCapacityTableTypeDef
):
    """
    Type definition for `ClientBatchGetItemResponseConsumedCapacity` `Table`

    The amount of throughput consumed on the table affected by the operation.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed on a table or an index.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed on a table or an index.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed on a table or an index.
    """


_ClientBatchGetItemResponseConsumedCapacityTypeDef = TypedDict(
    "_ClientBatchGetItemResponseConsumedCapacityTypeDef",
    {
        "TableName": str,
        "CapacityUnits": float,
        "ReadCapacityUnits": float,
        "WriteCapacityUnits": float,
        "Table": ClientBatchGetItemResponseConsumedCapacityTableTypeDef,
        "LocalSecondaryIndexes": Dict[
            str, ClientBatchGetItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef
        ],
        "GlobalSecondaryIndexes": Dict[
            str, ClientBatchGetItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef
        ],
    },
    total=False,
)


class ClientBatchGetItemResponseConsumedCapacityTypeDef(
    _ClientBatchGetItemResponseConsumedCapacityTypeDef
):
    """
    Type definition for `ClientBatchGetItemResponse` `ConsumedCapacity`

    The capacity units consumed by an operation. The data returned includes the total provisioned
    throughput consumed, along with statistics for the table and any indexes involved in the
    operation. ``ConsumedCapacity`` is only returned if the request asked for it. For more
    information, see `Provisioned Throughput
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **TableName** *(string) --*

      The name of the table that was affected by the operation.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed by the operation.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed by the operation.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed by the operation.

    - **Table** *(dict) --*

      The amount of throughput consumed on the table affected by the operation.

      - **ReadCapacityUnits** *(float) --*

        The total number of read capacity units consumed on a table or an index.

      - **WriteCapacityUnits** *(float) --*

        The total number of write capacity units consumed on a table or an index.

      - **CapacityUnits** *(float) --*

        The total number of capacity units consumed on a table or an index.

    - **LocalSecondaryIndexes** *(dict) --*

      The amount of throughput consumed on each local index affected by the operation.

      - *(string) --*

        - *(dict) --*

          Represents the amount of provisioned throughput capacity consumed on a table or an index.

          - **ReadCapacityUnits** *(float) --*

            The total number of read capacity units consumed on a table or an index.

          - **WriteCapacityUnits** *(float) --*

            The total number of write capacity units consumed on a table or an index.

          - **CapacityUnits** *(float) --*

            The total number of capacity units consumed on a table or an index.

    - **GlobalSecondaryIndexes** *(dict) --*

      The amount of throughput consumed on each global index affected by the operation.

      - *(string) --*

        - *(dict) --*

          Represents the amount of provisioned throughput capacity consumed on a table or an index.

          - **ReadCapacityUnits** *(float) --*

            The total number of read capacity units consumed on a table or an index.

          - **WriteCapacityUnits** *(float) --*

            The total number of write capacity units consumed on a table or an index.

          - **CapacityUnits** *(float) --*

            The total number of capacity units consumed on a table or an index.
    """


_ClientBatchGetItemResponseResponsesTypeDef = TypedDict(
    "_ClientBatchGetItemResponseResponsesTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class ClientBatchGetItemResponseResponsesTypeDef(_ClientBatchGetItemResponseResponsesTypeDef):
    """
    Type definition for `ClientBatchGetItemResponse` `Responses`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_ClientBatchGetItemResponseUnprocessedKeysKeysTypeDef = TypedDict(
    "_ClientBatchGetItemResponseUnprocessedKeysKeysTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class ClientBatchGetItemResponseUnprocessedKeysKeysTypeDef(
    _ClientBatchGetItemResponseUnprocessedKeysKeysTypeDef
):
    """
    Type definition for `ClientBatchGetItemResponseUnprocessedKeys` `Keys`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_ClientBatchGetItemResponseUnprocessedKeysTypeDef = TypedDict(
    "_ClientBatchGetItemResponseUnprocessedKeysTypeDef",
    {
        "Keys": List[Dict[str, ClientBatchGetItemResponseUnprocessedKeysKeysTypeDef]],
        "AttributesToGet": List[str],
        "ConsistentRead": bool,
        "ProjectionExpression": str,
        "ExpressionAttributeNames": Dict[str, str],
    },
    total=False,
)


class ClientBatchGetItemResponseUnprocessedKeysTypeDef(
    _ClientBatchGetItemResponseUnprocessedKeysTypeDef
):
    """
    Type definition for `ClientBatchGetItemResponse` `UnprocessedKeys`

    Represents a set of primary keys and, for each key, the attributes to retrieve from the table.

    For each primary key, you must provide *all* of the key attributes. For example, with a simple
    primary key, you only need to provide the partition key. For a composite primary key, you must
    provide *both* the partition key and the sort key.

    - **Keys** *(list) --*

      The primary key attribute values that define the items and the attributes associated with the
      items.

      - *(dict) --*

        - *(string) --*

          - *(dict) --*

            Represents the data for an attribute.

            Each attribute value is described as a name-value pair. The name is the data type, and
            the value is the data itself.

            For more information, see `Data Types
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
            in the *Amazon DynamoDB Developer Guide* .

            - **S** *(string) --*

              An attribute of type String. For example:

               ``"S": "Hello"``

            - **N** *(string) --*

              An attribute of type Number. For example:

               ``"N": "123.45"``

              Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
              across languages and libraries. However, DynamoDB treats them as number type
              attributes for mathematical operations.

            - **B** *(bytes) --*

              An attribute of type Binary. For example:

               ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

            - **SS** *(list) --*

              An attribute of type String Set. For example:

               ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

              - *(string) --*

            - **NS** *(list) --*

              An attribute of type Number Set. For example:

               ``"NS": ["42.2", "-19", "7.5", "3.14"]``

              Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
              across languages and libraries. However, DynamoDB treats them as number type
              attributes for mathematical operations.

              - *(string) --*

            - **BS** *(list) --*

              An attribute of type Binary Set. For example:

               ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

              - *(bytes) --*

            - **M** *(dict) --*

              An attribute of type Map. For example:

               ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

              - *(string) --*

                - *(dict) --*

                  Represents the data for an attribute.

                  Each attribute value is described as a name-value pair. The name is the data type,
                  and the value is the data itself.

                  For more information, see `Data Types
                  <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                  in the *Amazon DynamoDB Developer Guide* .

            - **L** *(list) --*

              An attribute of type List. For example:

               ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

            - **NULL** *(boolean) --*

              An attribute of type Null. For example:

               ``"NULL": true``

            - **BOOL** *(boolean) --*

              An attribute of type Boolean. For example:

               ``"BOOL": true``

    - **AttributesToGet** *(list) --*

      This is a legacy parameter. Use ``ProjectionExpression`` instead. For more information, see
      `Legacy Conditional Parameters
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html>`__
      in the *Amazon DynamoDB Developer Guide* .

      - *(string) --*

    - **ConsistentRead** *(boolean) --*

      The consistency of a read operation. If set to ``true`` , then a strongly consistent read is
      used; otherwise, an eventually consistent read is used.

    - **ProjectionExpression** *(string) --*

      A string that identifies one or more attributes to retrieve from the table. These attributes
      can include scalars, sets, or elements of a JSON document. The attributes in the
      ``ProjectionExpression`` must be separated by commas.

      If no attribute names are specified, then all attributes will be returned. If any of the
      requested attributes are not found, they will not appear in the result.

      For more information, see `Accessing Item Attributes
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html>`__
      in the *Amazon DynamoDB Developer Guide* .

    - **ExpressionAttributeNames** *(dict) --*

      One or more substitution tokens for attribute names in an expression. The following are some
      use cases for using ``ExpressionAttributeNames`` :

      * To access an attribute whose name conflicts with a DynamoDB reserved word.

      * To create a placeholder for repeating occurrences of an attribute name in an expression.

      * To prevent special characters in an attribute name from being misinterpreted in an
      expression.

      Use the **#** character in an expression to dereference an attribute name. For example,
      consider the following attribute name:

      * ``Percentile``

      The name of this attribute conflicts with a reserved word, so it cannot be used directly in an
      expression. (For the complete list of reserved words, see `Reserved Words
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html>`__ in
      the *Amazon DynamoDB Developer Guide* ). To work around this, you could specify the following
      for ``ExpressionAttributeNames`` :

      * ``{"#P":"Percentile"}``

      You could then use this substitution in an expression, as in this example:

      * ``#P = :val``

      .. note::

        Tokens that begin with the **:** character are *expression attribute values* , which are
        placeholders for the actual value at runtime.

      For more information on expression attribute names, see `Accessing Item Attributes
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html>`__
      in the *Amazon DynamoDB Developer Guide* .

      - *(string) --*

        - *(string) --*
    """


_ClientBatchGetItemResponseTypeDef = TypedDict(
    "_ClientBatchGetItemResponseTypeDef",
    {
        "Responses": Dict[str, List[Dict[str, ClientBatchGetItemResponseResponsesTypeDef]]],
        "UnprocessedKeys": Dict[str, ClientBatchGetItemResponseUnprocessedKeysTypeDef],
        "ConsumedCapacity": List[ClientBatchGetItemResponseConsumedCapacityTypeDef],
    },
    total=False,
)


class ClientBatchGetItemResponseTypeDef(_ClientBatchGetItemResponseTypeDef):
    """
    Type definition for `ClientBatchGetItem` `Response`

    Represents the output of a ``BatchGetItem`` operation.

    - **Responses** *(dict) --*

      A map of table name to a list of items. Each object in ``Responses`` consists of a table name,
      along with a map of attribute data consisting of the data type and attribute value.

      - *(string) --*

        - *(list) --*

          - *(dict) --*

            - *(string) --*

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

                - **S** *(string) --*

                  An attribute of type String. For example:

                   ``"S": "Hello"``

                - **N** *(string) --*

                  An attribute of type Number. For example:

                   ``"N": "123.45"``

                  Numbers are sent across the network to DynamoDB as strings, to maximize
                  compatibility across languages and libraries. However, DynamoDB treats them as
                  number type attributes for mathematical operations.

                - **B** *(bytes) --*

                  An attribute of type Binary. For example:

                   ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

                - **SS** *(list) --*

                  An attribute of type String Set. For example:

                   ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

                  - *(string) --*

                - **NS** *(list) --*

                  An attribute of type Number Set. For example:

                   ``"NS": ["42.2", "-19", "7.5", "3.14"]``

                  Numbers are sent across the network to DynamoDB as strings, to maximize
                  compatibility across languages and libraries. However, DynamoDB treats them as
                  number type attributes for mathematical operations.

                  - *(string) --*

                - **BS** *(list) --*

                  An attribute of type Binary Set. For example:

                   ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

                  - *(bytes) --*

                - **M** *(dict) --*

                  An attribute of type Map. For example:

                   ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

                  - *(string) --*

                    - *(dict) --*

                      Represents the data for an attribute.

                      Each attribute value is described as a name-value pair. The name is the data
                      type, and the value is the data itself.

                      For more information, see `Data Types
                      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                      in the *Amazon DynamoDB Developer Guide* .

                - **L** *(list) --*

                  An attribute of type List. For example:

                   ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

                  - *(dict) --*

                    Represents the data for an attribute.

                    Each attribute value is described as a name-value pair. The name is the data
                    type, and the value is the data itself.

                    For more information, see `Data Types
                    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                    in the *Amazon DynamoDB Developer Guide* .

                - **NULL** *(boolean) --*

                  An attribute of type Null. For example:

                   ``"NULL": true``

                - **BOOL** *(boolean) --*

                  An attribute of type Boolean. For example:

                   ``"BOOL": true``

    - **UnprocessedKeys** *(dict) --*

      A map of tables and their respective keys that were not processed with the current response.
      The ``UnprocessedKeys`` value is in the same form as ``RequestItems`` , so the value can be
      provided directly to a subsequent ``BatchGetItem`` operation. For more information, see
      ``RequestItems`` in the Request Parameters section.

      Each element consists of:

      * ``Keys`` - An array of primary key attribute values that define specific items in the table.

      * ``ProjectionExpression`` - One or more attributes to be retrieved from the table or index.
      By default, all attributes are returned. If a requested attribute is not found, it does not
      appear in the result.

      * ``ConsistentRead`` - The consistency of a read operation. If set to ``true`` , then a
      strongly consistent read is used; otherwise, an eventually consistent read is used.

      If there are no unprocessed keys remaining, the response contains an empty ``UnprocessedKeys``
      map.

      - *(string) --*

        - *(dict) --*

          Represents a set of primary keys and, for each key, the attributes to retrieve from the
          table.

          For each primary key, you must provide *all* of the key attributes. For example, with a
          simple primary key, you only need to provide the partition key. For a composite primary
          key, you must provide *both* the partition key and the sort key.

          - **Keys** *(list) --*

            The primary key attribute values that define the items and the attributes associated
            with the items.

            - *(dict) --*

              - *(string) --*

                - *(dict) --*

                  Represents the data for an attribute.

                  Each attribute value is described as a name-value pair. The name is the data type,
                  and the value is the data itself.

                  For more information, see `Data Types
                  <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                  in the *Amazon DynamoDB Developer Guide* .

                  - **S** *(string) --*

                    An attribute of type String. For example:

                     ``"S": "Hello"``

                  - **N** *(string) --*

                    An attribute of type Number. For example:

                     ``"N": "123.45"``

                    Numbers are sent across the network to DynamoDB as strings, to maximize
                    compatibility across languages and libraries. However, DynamoDB treats them as
                    number type attributes for mathematical operations.

                  - **B** *(bytes) --*

                    An attribute of type Binary. For example:

                     ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

                  - **SS** *(list) --*

                    An attribute of type String Set. For example:

                     ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

                    - *(string) --*

                  - **NS** *(list) --*

                    An attribute of type Number Set. For example:

                     ``"NS": ["42.2", "-19", "7.5", "3.14"]``

                    Numbers are sent across the network to DynamoDB as strings, to maximize
                    compatibility across languages and libraries. However, DynamoDB treats them as
                    number type attributes for mathematical operations.

                    - *(string) --*

                  - **BS** *(list) --*

                    An attribute of type Binary Set. For example:

                     ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

                    - *(bytes) --*

                  - **M** *(dict) --*

                    An attribute of type Map. For example:

                     ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

                    - *(string) --*

                      - *(dict) --*

                        Represents the data for an attribute.

                        Each attribute value is described as a name-value pair. The name is the data
                        type, and the value is the data itself.

                        For more information, see `Data Types
                        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                        in the *Amazon DynamoDB Developer Guide* .

                  - **L** *(list) --*

                    An attribute of type List. For example:

                     ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

                    - *(dict) --*

                      Represents the data for an attribute.

                      Each attribute value is described as a name-value pair. The name is the data
                      type, and the value is the data itself.

                      For more information, see `Data Types
                      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                      in the *Amazon DynamoDB Developer Guide* .

                  - **NULL** *(boolean) --*

                    An attribute of type Null. For example:

                     ``"NULL": true``

                  - **BOOL** *(boolean) --*

                    An attribute of type Boolean. For example:

                     ``"BOOL": true``

          - **AttributesToGet** *(list) --*

            This is a legacy parameter. Use ``ProjectionExpression`` instead. For more information,
            see `Legacy Conditional Parameters
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html>`__
            in the *Amazon DynamoDB Developer Guide* .

            - *(string) --*

          - **ConsistentRead** *(boolean) --*

            The consistency of a read operation. If set to ``true`` , then a strongly consistent
            read is used; otherwise, an eventually consistent read is used.

          - **ProjectionExpression** *(string) --*

            A string that identifies one or more attributes to retrieve from the table. These
            attributes can include scalars, sets, or elements of a JSON document. The attributes in
            the ``ProjectionExpression`` must be separated by commas.

            If no attribute names are specified, then all attributes will be returned. If any of the
            requested attributes are not found, they will not appear in the result.

            For more information, see `Accessing Item Attributes
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html>`__
            in the *Amazon DynamoDB Developer Guide* .

          - **ExpressionAttributeNames** *(dict) --*

            One or more substitution tokens for attribute names in an expression. The following are
            some use cases for using ``ExpressionAttributeNames`` :

            * To access an attribute whose name conflicts with a DynamoDB reserved word.

            * To create a placeholder for repeating occurrences of an attribute name in an
            expression.

            * To prevent special characters in an attribute name from being misinterpreted in an
            expression.

            Use the **#** character in an expression to dereference an attribute name. For example,
            consider the following attribute name:

            * ``Percentile``

            The name of this attribute conflicts with a reserved word, so it cannot be used directly
            in an expression. (For the complete list of reserved words, see `Reserved Words
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html>`__
            in the *Amazon DynamoDB Developer Guide* ). To work around this, you could specify the
            following for ``ExpressionAttributeNames`` :

            * ``{"#P":"Percentile"}``

            You could then use this substitution in an expression, as in this example:

            * ``#P = :val``

            .. note::

              Tokens that begin with the **:** character are *expression attribute values* , which
              are placeholders for the actual value at runtime.

            For more information on expression attribute names, see `Accessing Item Attributes
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html>`__
            in the *Amazon DynamoDB Developer Guide* .

            - *(string) --*

              - *(string) --*

    - **ConsumedCapacity** *(list) --*

      The read capacity units consumed by the entire ``BatchGetItem`` operation.

      Each element consists of:

      * ``TableName`` - The table that consumed the provisioned throughput.

      * ``CapacityUnits`` - The total number of capacity units consumed.

      - *(dict) --*

        The capacity units consumed by an operation. The data returned includes the total
        provisioned throughput consumed, along with statistics for the table and any indexes
        involved in the operation. ``ConsumedCapacity`` is only returned if the request asked for
        it. For more information, see `Provisioned Throughput
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html>`__
        in the *Amazon DynamoDB Developer Guide* .

        - **TableName** *(string) --*

          The name of the table that was affected by the operation.

        - **CapacityUnits** *(float) --*

          The total number of capacity units consumed by the operation.

        - **ReadCapacityUnits** *(float) --*

          The total number of read capacity units consumed by the operation.

        - **WriteCapacityUnits** *(float) --*

          The total number of write capacity units consumed by the operation.

        - **Table** *(dict) --*

          The amount of throughput consumed on the table affected by the operation.

          - **ReadCapacityUnits** *(float) --*

            The total number of read capacity units consumed on a table or an index.

          - **WriteCapacityUnits** *(float) --*

            The total number of write capacity units consumed on a table or an index.

          - **CapacityUnits** *(float) --*

            The total number of capacity units consumed on a table or an index.

        - **LocalSecondaryIndexes** *(dict) --*

          The amount of throughput consumed on each local index affected by the operation.

          - *(string) --*

            - *(dict) --*

              Represents the amount of provisioned throughput capacity consumed on a table or an
              index.

              - **ReadCapacityUnits** *(float) --*

                The total number of read capacity units consumed on a table or an index.

              - **WriteCapacityUnits** *(float) --*

                The total number of write capacity units consumed on a table or an index.

              - **CapacityUnits** *(float) --*

                The total number of capacity units consumed on a table or an index.

        - **GlobalSecondaryIndexes** *(dict) --*

          The amount of throughput consumed on each global index affected by the operation.

          - *(string) --*

            - *(dict) --*

              Represents the amount of provisioned throughput capacity consumed on a table or an
              index.

              - **ReadCapacityUnits** *(float) --*

                The total number of read capacity units consumed on a table or an index.

              - **WriteCapacityUnits** *(float) --*

                The total number of write capacity units consumed on a table or an index.

              - **CapacityUnits** *(float) --*

                The total number of capacity units consumed on a table or an index.
    """


_ClientBatchWriteItemRequestItemsDeleteRequestKeyTypeDef = TypedDict(
    "_ClientBatchWriteItemRequestItemsDeleteRequestKeyTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class ClientBatchWriteItemRequestItemsDeleteRequestKeyTypeDef(
    _ClientBatchWriteItemRequestItemsDeleteRequestKeyTypeDef
):
    """
    Type definition for `ClientBatchWriteItemRequestItemsDeleteRequest` `Key`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_ClientBatchWriteItemRequestItemsDeleteRequestTypeDef = TypedDict(
    "_ClientBatchWriteItemRequestItemsDeleteRequestTypeDef",
    {"Key": Dict[str, ClientBatchWriteItemRequestItemsDeleteRequestKeyTypeDef]},
)


class ClientBatchWriteItemRequestItemsDeleteRequestTypeDef(
    _ClientBatchWriteItemRequestItemsDeleteRequestTypeDef
):
    """
    Type definition for `ClientBatchWriteItemRequestItems` `DeleteRequest`

    A request to perform a ``DeleteItem`` operation.

    - **Key** *(dict) --* **[REQUIRED]**

      A map of attribute name to attribute values, representing the primary key of the item to
      delete. All of the table's primary key attributes must be specified, and their data types must
      match those of the table's key schema.

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

          - **S** *(string) --*

            An attribute of type String. For example:

             ``"S": "Hello"``

          - **N** *(string) --*

            An attribute of type Number. For example:

             ``"N": "123.45"``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

          - **B** *(bytes) --*

            An attribute of type Binary. For example:

             ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

          - **SS** *(list) --*

            An attribute of type String Set. For example:

             ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

            - *(string) --*

          - **NS** *(list) --*

            An attribute of type Number Set. For example:

             ``"NS": ["42.2", "-19", "7.5", "3.14"]``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

            - *(string) --*

          - **BS** *(list) --*

            An attribute of type Binary Set. For example:

             ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

            - *(bytes) --*

          - **M** *(dict) --*

            An attribute of type Map. For example:

             ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

            - *(string) --*

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

          - **L** *(list) --*

            An attribute of type List. For example:

             ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

            - *(dict) --*

              Represents the data for an attribute.

              Each attribute value is described as a name-value pair. The name is the data type, and
              the value is the data itself.

              For more information, see `Data Types
              <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
              in the *Amazon DynamoDB Developer Guide* .

          - **NULL** *(boolean) --*

            An attribute of type Null. For example:

             ``"NULL": true``

          - **BOOL** *(boolean) --*

            An attribute of type Boolean. For example:

             ``"BOOL": true``
    """


_ClientBatchWriteItemRequestItemsPutRequestItemTypeDef = TypedDict(
    "_ClientBatchWriteItemRequestItemsPutRequestItemTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class ClientBatchWriteItemRequestItemsPutRequestItemTypeDef(
    _ClientBatchWriteItemRequestItemsPutRequestItemTypeDef
):
    """
    Type definition for `ClientBatchWriteItemRequestItemsPutRequest` `Item`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_ClientBatchWriteItemRequestItemsPutRequestTypeDef = TypedDict(
    "_ClientBatchWriteItemRequestItemsPutRequestTypeDef",
    {"Item": Dict[str, ClientBatchWriteItemRequestItemsPutRequestItemTypeDef]},
)


class ClientBatchWriteItemRequestItemsPutRequestTypeDef(
    _ClientBatchWriteItemRequestItemsPutRequestTypeDef
):
    """
    Type definition for `ClientBatchWriteItemRequestItems` `PutRequest`

    A request to perform a ``PutItem`` operation.

    - **Item** *(dict) --* **[REQUIRED]**

      A map of attribute name to attribute values, representing the primary key of an item to be
      processed by ``PutItem`` . All of the table's primary key attributes must be specified, and
      their data types must match those of the table's key schema. If any attributes are present in
      the item that are part of an index key schema for the table, their types must match the index
      key schema.

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

          - **S** *(string) --*

            An attribute of type String. For example:

             ``"S": "Hello"``

          - **N** *(string) --*

            An attribute of type Number. For example:

             ``"N": "123.45"``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

          - **B** *(bytes) --*

            An attribute of type Binary. For example:

             ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

          - **SS** *(list) --*

            An attribute of type String Set. For example:

             ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

            - *(string) --*

          - **NS** *(list) --*

            An attribute of type Number Set. For example:

             ``"NS": ["42.2", "-19", "7.5", "3.14"]``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

            - *(string) --*

          - **BS** *(list) --*

            An attribute of type Binary Set. For example:

             ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

            - *(bytes) --*

          - **M** *(dict) --*

            An attribute of type Map. For example:

             ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

            - *(string) --*

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

          - **L** *(list) --*

            An attribute of type List. For example:

             ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

            - *(dict) --*

              Represents the data for an attribute.

              Each attribute value is described as a name-value pair. The name is the data type, and
              the value is the data itself.

              For more information, see `Data Types
              <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
              in the *Amazon DynamoDB Developer Guide* .

          - **NULL** *(boolean) --*

            An attribute of type Null. For example:

             ``"NULL": true``

          - **BOOL** *(boolean) --*

            An attribute of type Boolean. For example:

             ``"BOOL": true``
    """


_ClientBatchWriteItemRequestItemsTypeDef = TypedDict(
    "_ClientBatchWriteItemRequestItemsTypeDef",
    {
        "PutRequest": ClientBatchWriteItemRequestItemsPutRequestTypeDef,
        "DeleteRequest": ClientBatchWriteItemRequestItemsDeleteRequestTypeDef,
    },
    total=False,
)


class ClientBatchWriteItemRequestItemsTypeDef(_ClientBatchWriteItemRequestItemsTypeDef):
    """
    Type definition for `ClientBatchWriteItem` `RequestItems`

    Represents an operation to perform - either ``DeleteItem`` or ``PutItem`` . You can only request
    one of these operations, not both, in a single ``WriteRequest`` . If you do need to perform both
    of these operations, you need to provide two separate ``WriteRequest`` objects.

    - **PutRequest** *(dict) --*

      A request to perform a ``PutItem`` operation.

      - **Item** *(dict) --* **[REQUIRED]**

        A map of attribute name to attribute values, representing the primary key of an item to be
        processed by ``PutItem`` . All of the table's primary key attributes must be specified, and
        their data types must match those of the table's key schema. If any attributes are present
        in the item that are part of an index key schema for the table, their types must match the
        index key schema.

        - *(string) --*

          - *(dict) --*

            Represents the data for an attribute.

            Each attribute value is described as a name-value pair. The name is the data type, and
            the value is the data itself.

            For more information, see `Data Types
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
            in the *Amazon DynamoDB Developer Guide* .

            - **S** *(string) --*

              An attribute of type String. For example:

               ``"S": "Hello"``

            - **N** *(string) --*

              An attribute of type Number. For example:

               ``"N": "123.45"``

              Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
              across languages and libraries. However, DynamoDB treats them as number type
              attributes for mathematical operations.

            - **B** *(bytes) --*

              An attribute of type Binary. For example:

               ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

            - **SS** *(list) --*

              An attribute of type String Set. For example:

               ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

              - *(string) --*

            - **NS** *(list) --*

              An attribute of type Number Set. For example:

               ``"NS": ["42.2", "-19", "7.5", "3.14"]``

              Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
              across languages and libraries. However, DynamoDB treats them as number type
              attributes for mathematical operations.

              - *(string) --*

            - **BS** *(list) --*

              An attribute of type Binary Set. For example:

               ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

              - *(bytes) --*

            - **M** *(dict) --*

              An attribute of type Map. For example:

               ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

              - *(string) --*

                - *(dict) --*

                  Represents the data for an attribute.

                  Each attribute value is described as a name-value pair. The name is the data type,
                  and the value is the data itself.

                  For more information, see `Data Types
                  <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                  in the *Amazon DynamoDB Developer Guide* .

            - **L** *(list) --*

              An attribute of type List. For example:

               ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

            - **NULL** *(boolean) --*

              An attribute of type Null. For example:

               ``"NULL": true``

            - **BOOL** *(boolean) --*

              An attribute of type Boolean. For example:

               ``"BOOL": true``

    - **DeleteRequest** *(dict) --*

      A request to perform a ``DeleteItem`` operation.

      - **Key** *(dict) --* **[REQUIRED]**

        A map of attribute name to attribute values, representing the primary key of the item to
        delete. All of the table's primary key attributes must be specified, and their data types
        must match those of the table's key schema.

        - *(string) --*

          - *(dict) --*

            Represents the data for an attribute.

            Each attribute value is described as a name-value pair. The name is the data type, and
            the value is the data itself.

            For more information, see `Data Types
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
            in the *Amazon DynamoDB Developer Guide* .

            - **S** *(string) --*

              An attribute of type String. For example:

               ``"S": "Hello"``

            - **N** *(string) --*

              An attribute of type Number. For example:

               ``"N": "123.45"``

              Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
              across languages and libraries. However, DynamoDB treats them as number type
              attributes for mathematical operations.

            - **B** *(bytes) --*

              An attribute of type Binary. For example:

               ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

            - **SS** *(list) --*

              An attribute of type String Set. For example:

               ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

              - *(string) --*

            - **NS** *(list) --*

              An attribute of type Number Set. For example:

               ``"NS": ["42.2", "-19", "7.5", "3.14"]``

              Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
              across languages and libraries. However, DynamoDB treats them as number type
              attributes for mathematical operations.

              - *(string) --*

            - **BS** *(list) --*

              An attribute of type Binary Set. For example:

               ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

              - *(bytes) --*

            - **M** *(dict) --*

              An attribute of type Map. For example:

               ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

              - *(string) --*

                - *(dict) --*

                  Represents the data for an attribute.

                  Each attribute value is described as a name-value pair. The name is the data type,
                  and the value is the data itself.

                  For more information, see `Data Types
                  <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                  in the *Amazon DynamoDB Developer Guide* .

            - **L** *(list) --*

              An attribute of type List. For example:

               ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

            - **NULL** *(boolean) --*

              An attribute of type Null. For example:

               ``"NULL": true``

            - **BOOL** *(boolean) --*

              An attribute of type Boolean. For example:

               ``"BOOL": true``
    """


_ClientBatchWriteItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef = TypedDict(
    "_ClientBatchWriteItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef",
    {"ReadCapacityUnits": float, "WriteCapacityUnits": float, "CapacityUnits": float},
    total=False,
)


class ClientBatchWriteItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef(
    _ClientBatchWriteItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef
):
    """
    Type definition for `ClientBatchWriteItemResponseConsumedCapacity` `GlobalSecondaryIndexes`

    Represents the amount of provisioned throughput capacity consumed on a table or an index.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed on a table or an index.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed on a table or an index.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed on a table or an index.
    """


_ClientBatchWriteItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef = TypedDict(
    "_ClientBatchWriteItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef",
    {"ReadCapacityUnits": float, "WriteCapacityUnits": float, "CapacityUnits": float},
    total=False,
)


class ClientBatchWriteItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef(
    _ClientBatchWriteItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef
):
    """
    Type definition for `ClientBatchWriteItemResponseConsumedCapacity` `LocalSecondaryIndexes`

    Represents the amount of provisioned throughput capacity consumed on a table or an index.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed on a table or an index.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed on a table or an index.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed on a table or an index.
    """


_ClientBatchWriteItemResponseConsumedCapacityTableTypeDef = TypedDict(
    "_ClientBatchWriteItemResponseConsumedCapacityTableTypeDef",
    {"ReadCapacityUnits": float, "WriteCapacityUnits": float, "CapacityUnits": float},
    total=False,
)


class ClientBatchWriteItemResponseConsumedCapacityTableTypeDef(
    _ClientBatchWriteItemResponseConsumedCapacityTableTypeDef
):
    """
    Type definition for `ClientBatchWriteItemResponseConsumedCapacity` `Table`

    The amount of throughput consumed on the table affected by the operation.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed on a table or an index.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed on a table or an index.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed on a table or an index.
    """


_ClientBatchWriteItemResponseConsumedCapacityTypeDef = TypedDict(
    "_ClientBatchWriteItemResponseConsumedCapacityTypeDef",
    {
        "TableName": str,
        "CapacityUnits": float,
        "ReadCapacityUnits": float,
        "WriteCapacityUnits": float,
        "Table": ClientBatchWriteItemResponseConsumedCapacityTableTypeDef,
        "LocalSecondaryIndexes": Dict[
            str, ClientBatchWriteItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef
        ],
        "GlobalSecondaryIndexes": Dict[
            str, ClientBatchWriteItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef
        ],
    },
    total=False,
)


class ClientBatchWriteItemResponseConsumedCapacityTypeDef(
    _ClientBatchWriteItemResponseConsumedCapacityTypeDef
):
    """
    Type definition for `ClientBatchWriteItemResponse` `ConsumedCapacity`

    The capacity units consumed by an operation. The data returned includes the total provisioned
    throughput consumed, along with statistics for the table and any indexes involved in the
    operation. ``ConsumedCapacity`` is only returned if the request asked for it. For more
    information, see `Provisioned Throughput
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **TableName** *(string) --*

      The name of the table that was affected by the operation.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed by the operation.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed by the operation.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed by the operation.

    - **Table** *(dict) --*

      The amount of throughput consumed on the table affected by the operation.

      - **ReadCapacityUnits** *(float) --*

        The total number of read capacity units consumed on a table or an index.

      - **WriteCapacityUnits** *(float) --*

        The total number of write capacity units consumed on a table or an index.

      - **CapacityUnits** *(float) --*

        The total number of capacity units consumed on a table or an index.

    - **LocalSecondaryIndexes** *(dict) --*

      The amount of throughput consumed on each local index affected by the operation.

      - *(string) --*

        - *(dict) --*

          Represents the amount of provisioned throughput capacity consumed on a table or an index.

          - **ReadCapacityUnits** *(float) --*

            The total number of read capacity units consumed on a table or an index.

          - **WriteCapacityUnits** *(float) --*

            The total number of write capacity units consumed on a table or an index.

          - **CapacityUnits** *(float) --*

            The total number of capacity units consumed on a table or an index.

    - **GlobalSecondaryIndexes** *(dict) --*

      The amount of throughput consumed on each global index affected by the operation.

      - *(string) --*

        - *(dict) --*

          Represents the amount of provisioned throughput capacity consumed on a table or an index.

          - **ReadCapacityUnits** *(float) --*

            The total number of read capacity units consumed on a table or an index.

          - **WriteCapacityUnits** *(float) --*

            The total number of write capacity units consumed on a table or an index.

          - **CapacityUnits** *(float) --*

            The total number of capacity units consumed on a table or an index.
    """


_ClientBatchWriteItemResponseItemCollectionMetricsItemCollectionKeyTypeDef = TypedDict(
    "_ClientBatchWriteItemResponseItemCollectionMetricsItemCollectionKeyTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class ClientBatchWriteItemResponseItemCollectionMetricsItemCollectionKeyTypeDef(
    _ClientBatchWriteItemResponseItemCollectionMetricsItemCollectionKeyTypeDef
):
    """
    Type definition for `ClientBatchWriteItemResponseItemCollectionMetrics` `ItemCollectionKey`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_ClientBatchWriteItemResponseItemCollectionMetricsTypeDef = TypedDict(
    "_ClientBatchWriteItemResponseItemCollectionMetricsTypeDef",
    {
        "ItemCollectionKey": Dict[
            str, ClientBatchWriteItemResponseItemCollectionMetricsItemCollectionKeyTypeDef
        ],
        "SizeEstimateRangeGB": List[float],
    },
    total=False,
)


class ClientBatchWriteItemResponseItemCollectionMetricsTypeDef(
    _ClientBatchWriteItemResponseItemCollectionMetricsTypeDef
):
    """
    Type definition for `ClientBatchWriteItemResponse` `ItemCollectionMetrics`

    Information about item collections, if any, that were affected by the operation.
    ``ItemCollectionMetrics`` is only returned if the request asked for it. If the table does not
    have any local secondary indexes, this information is not returned in the response.

    - **ItemCollectionKey** *(dict) --*

      The partition key value of the item collection. This value is the same as the partition key
      value of the item.

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

          - **S** *(string) --*

            An attribute of type String. For example:

             ``"S": "Hello"``

          - **N** *(string) --*

            An attribute of type Number. For example:

             ``"N": "123.45"``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

          - **B** *(bytes) --*

            An attribute of type Binary. For example:

             ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

          - **SS** *(list) --*

            An attribute of type String Set. For example:

             ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

            - *(string) --*

          - **NS** *(list) --*

            An attribute of type Number Set. For example:

             ``"NS": ["42.2", "-19", "7.5", "3.14"]``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

            - *(string) --*

          - **BS** *(list) --*

            An attribute of type Binary Set. For example:

             ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

            - *(bytes) --*

          - **M** *(dict) --*

            An attribute of type Map. For example:

             ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

            - *(string) --*

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

          - **L** *(list) --*

            An attribute of type List. For example:

             ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

            - *(dict) --*

              Represents the data for an attribute.

              Each attribute value is described as a name-value pair. The name is the data type, and
              the value is the data itself.

              For more information, see `Data Types
              <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
              in the *Amazon DynamoDB Developer Guide* .

          - **NULL** *(boolean) --*

            An attribute of type Null. For example:

             ``"NULL": true``

          - **BOOL** *(boolean) --*

            An attribute of type Boolean. For example:

             ``"BOOL": true``

    - **SizeEstimateRangeGB** *(list) --*

      An estimate of item collection size, in gigabytes. This value is a two-element array
      containing a lower bound and an upper bound for the estimate. The estimate includes the size
      of all the items in the table, plus the size of all attributes projected into all of the local
      secondary indexes on that table. Use this estimate to measure whether a local secondary index
      is approaching its size limit.

      The estimate is subject to change over time; therefore, do not rely on the precision or
      accuracy of the estimate.

      - *(float) --*
    """


_ClientBatchWriteItemResponseUnprocessedItemsDeleteRequestKeyTypeDef = TypedDict(
    "_ClientBatchWriteItemResponseUnprocessedItemsDeleteRequestKeyTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class ClientBatchWriteItemResponseUnprocessedItemsDeleteRequestKeyTypeDef(
    _ClientBatchWriteItemResponseUnprocessedItemsDeleteRequestKeyTypeDef
):
    """
    Type definition for `ClientBatchWriteItemResponseUnprocessedItemsDeleteRequest` `Key`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_ClientBatchWriteItemResponseUnprocessedItemsDeleteRequestTypeDef = TypedDict(
    "_ClientBatchWriteItemResponseUnprocessedItemsDeleteRequestTypeDef",
    {"Key": Dict[str, ClientBatchWriteItemResponseUnprocessedItemsDeleteRequestKeyTypeDef]},
    total=False,
)


class ClientBatchWriteItemResponseUnprocessedItemsDeleteRequestTypeDef(
    _ClientBatchWriteItemResponseUnprocessedItemsDeleteRequestTypeDef
):
    """
    Type definition for `ClientBatchWriteItemResponseUnprocessedItems` `DeleteRequest`

    A request to perform a ``DeleteItem`` operation.

    - **Key** *(dict) --*

      A map of attribute name to attribute values, representing the primary key of the item to
      delete. All of the table's primary key attributes must be specified, and their data types must
      match those of the table's key schema.

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

          - **S** *(string) --*

            An attribute of type String. For example:

             ``"S": "Hello"``

          - **N** *(string) --*

            An attribute of type Number. For example:

             ``"N": "123.45"``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

          - **B** *(bytes) --*

            An attribute of type Binary. For example:

             ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

          - **SS** *(list) --*

            An attribute of type String Set. For example:

             ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

            - *(string) --*

          - **NS** *(list) --*

            An attribute of type Number Set. For example:

             ``"NS": ["42.2", "-19", "7.5", "3.14"]``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

            - *(string) --*

          - **BS** *(list) --*

            An attribute of type Binary Set. For example:

             ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

            - *(bytes) --*

          - **M** *(dict) --*

            An attribute of type Map. For example:

             ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

            - *(string) --*

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

          - **L** *(list) --*

            An attribute of type List. For example:

             ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

            - *(dict) --*

              Represents the data for an attribute.

              Each attribute value is described as a name-value pair. The name is the data type, and
              the value is the data itself.

              For more information, see `Data Types
              <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
              in the *Amazon DynamoDB Developer Guide* .

          - **NULL** *(boolean) --*

            An attribute of type Null. For example:

             ``"NULL": true``

          - **BOOL** *(boolean) --*

            An attribute of type Boolean. For example:

             ``"BOOL": true``
    """


_ClientBatchWriteItemResponseUnprocessedItemsPutRequestItemTypeDef = TypedDict(
    "_ClientBatchWriteItemResponseUnprocessedItemsPutRequestItemTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class ClientBatchWriteItemResponseUnprocessedItemsPutRequestItemTypeDef(
    _ClientBatchWriteItemResponseUnprocessedItemsPutRequestItemTypeDef
):
    """
    Type definition for `ClientBatchWriteItemResponseUnprocessedItemsPutRequest` `Item`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_ClientBatchWriteItemResponseUnprocessedItemsPutRequestTypeDef = TypedDict(
    "_ClientBatchWriteItemResponseUnprocessedItemsPutRequestTypeDef",
    {"Item": Dict[str, ClientBatchWriteItemResponseUnprocessedItemsPutRequestItemTypeDef]},
    total=False,
)


class ClientBatchWriteItemResponseUnprocessedItemsPutRequestTypeDef(
    _ClientBatchWriteItemResponseUnprocessedItemsPutRequestTypeDef
):
    """
    Type definition for `ClientBatchWriteItemResponseUnprocessedItems` `PutRequest`

    A request to perform a ``PutItem`` operation.

    - **Item** *(dict) --*

      A map of attribute name to attribute values, representing the primary key of an item to be
      processed by ``PutItem`` . All of the table's primary key attributes must be specified, and
      their data types must match those of the table's key schema. If any attributes are present in
      the item that are part of an index key schema for the table, their types must match the index
      key schema.

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

          - **S** *(string) --*

            An attribute of type String. For example:

             ``"S": "Hello"``

          - **N** *(string) --*

            An attribute of type Number. For example:

             ``"N": "123.45"``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

          - **B** *(bytes) --*

            An attribute of type Binary. For example:

             ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

          - **SS** *(list) --*

            An attribute of type String Set. For example:

             ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

            - *(string) --*

          - **NS** *(list) --*

            An attribute of type Number Set. For example:

             ``"NS": ["42.2", "-19", "7.5", "3.14"]``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

            - *(string) --*

          - **BS** *(list) --*

            An attribute of type Binary Set. For example:

             ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

            - *(bytes) --*

          - **M** *(dict) --*

            An attribute of type Map. For example:

             ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

            - *(string) --*

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

          - **L** *(list) --*

            An attribute of type List. For example:

             ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

            - *(dict) --*

              Represents the data for an attribute.

              Each attribute value is described as a name-value pair. The name is the data type, and
              the value is the data itself.

              For more information, see `Data Types
              <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
              in the *Amazon DynamoDB Developer Guide* .

          - **NULL** *(boolean) --*

            An attribute of type Null. For example:

             ``"NULL": true``

          - **BOOL** *(boolean) --*

            An attribute of type Boolean. For example:

             ``"BOOL": true``
    """


_ClientBatchWriteItemResponseUnprocessedItemsTypeDef = TypedDict(
    "_ClientBatchWriteItemResponseUnprocessedItemsTypeDef",
    {
        "PutRequest": ClientBatchWriteItemResponseUnprocessedItemsPutRequestTypeDef,
        "DeleteRequest": ClientBatchWriteItemResponseUnprocessedItemsDeleteRequestTypeDef,
    },
    total=False,
)


class ClientBatchWriteItemResponseUnprocessedItemsTypeDef(
    _ClientBatchWriteItemResponseUnprocessedItemsTypeDef
):
    """
    Type definition for `ClientBatchWriteItemResponse` `UnprocessedItems`

    Represents an operation to perform - either ``DeleteItem`` or ``PutItem`` . You can only request
    one of these operations, not both, in a single ``WriteRequest`` . If you do need to perform both
    of these operations, you need to provide two separate ``WriteRequest`` objects.

    - **PutRequest** *(dict) --*

      A request to perform a ``PutItem`` operation.

      - **Item** *(dict) --*

        A map of attribute name to attribute values, representing the primary key of an item to be
        processed by ``PutItem`` . All of the table's primary key attributes must be specified, and
        their data types must match those of the table's key schema. If any attributes are present
        in the item that are part of an index key schema for the table, their types must match the
        index key schema.

        - *(string) --*

          - *(dict) --*

            Represents the data for an attribute.

            Each attribute value is described as a name-value pair. The name is the data type, and
            the value is the data itself.

            For more information, see `Data Types
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
            in the *Amazon DynamoDB Developer Guide* .

            - **S** *(string) --*

              An attribute of type String. For example:

               ``"S": "Hello"``

            - **N** *(string) --*

              An attribute of type Number. For example:

               ``"N": "123.45"``

              Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
              across languages and libraries. However, DynamoDB treats them as number type
              attributes for mathematical operations.

            - **B** *(bytes) --*

              An attribute of type Binary. For example:

               ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

            - **SS** *(list) --*

              An attribute of type String Set. For example:

               ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

              - *(string) --*

            - **NS** *(list) --*

              An attribute of type Number Set. For example:

               ``"NS": ["42.2", "-19", "7.5", "3.14"]``

              Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
              across languages and libraries. However, DynamoDB treats them as number type
              attributes for mathematical operations.

              - *(string) --*

            - **BS** *(list) --*

              An attribute of type Binary Set. For example:

               ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

              - *(bytes) --*

            - **M** *(dict) --*

              An attribute of type Map. For example:

               ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

              - *(string) --*

                - *(dict) --*

                  Represents the data for an attribute.

                  Each attribute value is described as a name-value pair. The name is the data type,
                  and the value is the data itself.

                  For more information, see `Data Types
                  <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                  in the *Amazon DynamoDB Developer Guide* .

            - **L** *(list) --*

              An attribute of type List. For example:

               ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

            - **NULL** *(boolean) --*

              An attribute of type Null. For example:

               ``"NULL": true``

            - **BOOL** *(boolean) --*

              An attribute of type Boolean. For example:

               ``"BOOL": true``

    - **DeleteRequest** *(dict) --*

      A request to perform a ``DeleteItem`` operation.

      - **Key** *(dict) --*

        A map of attribute name to attribute values, representing the primary key of the item to
        delete. All of the table's primary key attributes must be specified, and their data types
        must match those of the table's key schema.

        - *(string) --*

          - *(dict) --*

            Represents the data for an attribute.

            Each attribute value is described as a name-value pair. The name is the data type, and
            the value is the data itself.

            For more information, see `Data Types
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
            in the *Amazon DynamoDB Developer Guide* .

            - **S** *(string) --*

              An attribute of type String. For example:

               ``"S": "Hello"``

            - **N** *(string) --*

              An attribute of type Number. For example:

               ``"N": "123.45"``

              Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
              across languages and libraries. However, DynamoDB treats them as number type
              attributes for mathematical operations.

            - **B** *(bytes) --*

              An attribute of type Binary. For example:

               ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

            - **SS** *(list) --*

              An attribute of type String Set. For example:

               ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

              - *(string) --*

            - **NS** *(list) --*

              An attribute of type Number Set. For example:

               ``"NS": ["42.2", "-19", "7.5", "3.14"]``

              Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
              across languages and libraries. However, DynamoDB treats them as number type
              attributes for mathematical operations.

              - *(string) --*

            - **BS** *(list) --*

              An attribute of type Binary Set. For example:

               ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

              - *(bytes) --*

            - **M** *(dict) --*

              An attribute of type Map. For example:

               ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

              - *(string) --*

                - *(dict) --*

                  Represents the data for an attribute.

                  Each attribute value is described as a name-value pair. The name is the data type,
                  and the value is the data itself.

                  For more information, see `Data Types
                  <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                  in the *Amazon DynamoDB Developer Guide* .

            - **L** *(list) --*

              An attribute of type List. For example:

               ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

            - **NULL** *(boolean) --*

              An attribute of type Null. For example:

               ``"NULL": true``

            - **BOOL** *(boolean) --*

              An attribute of type Boolean. For example:

               ``"BOOL": true``
    """


_ClientBatchWriteItemResponseTypeDef = TypedDict(
    "_ClientBatchWriteItemResponseTypeDef",
    {
        "UnprocessedItems": Dict[str, List[ClientBatchWriteItemResponseUnprocessedItemsTypeDef]],
        "ItemCollectionMetrics": Dict[
            str, List[ClientBatchWriteItemResponseItemCollectionMetricsTypeDef]
        ],
        "ConsumedCapacity": List[ClientBatchWriteItemResponseConsumedCapacityTypeDef],
    },
    total=False,
)


class ClientBatchWriteItemResponseTypeDef(_ClientBatchWriteItemResponseTypeDef):
    """
    Type definition for `ClientBatchWriteItem` `Response`

    Represents the output of a ``BatchWriteItem`` operation.

    - **UnprocessedItems** *(dict) --*

      A map of tables and requests against those tables that were not processed. The
      ``UnprocessedItems`` value is in the same form as ``RequestItems`` , so you can provide this
      value directly to a subsequent ``BatchGetItem`` operation. For more information, see
      ``RequestItems`` in the Request Parameters section.

      Each ``UnprocessedItems`` entry consists of a table name and, for that table, a list of
      operations to perform (``DeleteRequest`` or ``PutRequest`` ).

      * ``DeleteRequest`` - Perform a ``DeleteItem`` operation on the specified item. The item to be
      deleted is identified by a ``Key`` subelement:

        * ``Key`` - A map of primary key attribute values that uniquely identify the item. Each
        entry in this map consists of an attribute name and an attribute value.

      * ``PutRequest`` - Perform a ``PutItem`` operation on the specified item. The item to be put
      is identified by an ``Item`` subelement:

        * ``Item`` - A map of attributes and their values. Each entry in this map consists of an
        attribute name and an attribute value. Attribute values must not be null; string and binary
        type attributes must have lengths greater than zero; and set type attributes must not be
        empty. Requests that contain empty values will be rejected with a ``ValidationException``
        exception. If you specify any attributes that are part of an index key, then the data types
        for those attributes must match those of the schema in the table's attribute definition.

      If there are no unprocessed items remaining, the response contains an empty
      ``UnprocessedItems`` map.

      - *(string) --*

        - *(list) --*

          - *(dict) --*

            Represents an operation to perform - either ``DeleteItem`` or ``PutItem`` . You can only
            request one of these operations, not both, in a single ``WriteRequest`` . If you do need
            to perform both of these operations, you need to provide two separate ``WriteRequest``
            objects.

            - **PutRequest** *(dict) --*

              A request to perform a ``PutItem`` operation.

              - **Item** *(dict) --*

                A map of attribute name to attribute values, representing the primary key of an item
                to be processed by ``PutItem`` . All of the table's primary key attributes must be
                specified, and their data types must match those of the table's key schema. If any
                attributes are present in the item that are part of an index key schema for the
                table, their types must match the index key schema.

                - *(string) --*

                  - *(dict) --*

                    Represents the data for an attribute.

                    Each attribute value is described as a name-value pair. The name is the data
                    type, and the value is the data itself.

                    For more information, see `Data Types
                    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                    in the *Amazon DynamoDB Developer Guide* .

                    - **S** *(string) --*

                      An attribute of type String. For example:

                       ``"S": "Hello"``

                    - **N** *(string) --*

                      An attribute of type Number. For example:

                       ``"N": "123.45"``

                      Numbers are sent across the network to DynamoDB as strings, to maximize
                      compatibility across languages and libraries. However, DynamoDB treats them as
                      number type attributes for mathematical operations.

                    - **B** *(bytes) --*

                      An attribute of type Binary. For example:

                       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

                    - **SS** *(list) --*

                      An attribute of type String Set. For example:

                       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

                      - *(string) --*

                    - **NS** *(list) --*

                      An attribute of type Number Set. For example:

                       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

                      Numbers are sent across the network to DynamoDB as strings, to maximize
                      compatibility across languages and libraries. However, DynamoDB treats them as
                      number type attributes for mathematical operations.

                      - *(string) --*

                    - **BS** *(list) --*

                      An attribute of type Binary Set. For example:

                       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

                      - *(bytes) --*

                    - **M** *(dict) --*

                      An attribute of type Map. For example:

                       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

                      - *(string) --*

                        - *(dict) --*

                          Represents the data for an attribute.

                          Each attribute value is described as a name-value pair. The name is the
                          data type, and the value is the data itself.

                          For more information, see `Data Types
                          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                          in the *Amazon DynamoDB Developer Guide* .

                    - **L** *(list) --*

                      An attribute of type List. For example:

                       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

                      - *(dict) --*

                        Represents the data for an attribute.

                        Each attribute value is described as a name-value pair. The name is the data
                        type, and the value is the data itself.

                        For more information, see `Data Types
                        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                        in the *Amazon DynamoDB Developer Guide* .

                    - **NULL** *(boolean) --*

                      An attribute of type Null. For example:

                       ``"NULL": true``

                    - **BOOL** *(boolean) --*

                      An attribute of type Boolean. For example:

                       ``"BOOL": true``

            - **DeleteRequest** *(dict) --*

              A request to perform a ``DeleteItem`` operation.

              - **Key** *(dict) --*

                A map of attribute name to attribute values, representing the primary key of the
                item to delete. All of the table's primary key attributes must be specified, and
                their data types must match those of the table's key schema.

                - *(string) --*

                  - *(dict) --*

                    Represents the data for an attribute.

                    Each attribute value is described as a name-value pair. The name is the data
                    type, and the value is the data itself.

                    For more information, see `Data Types
                    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                    in the *Amazon DynamoDB Developer Guide* .

                    - **S** *(string) --*

                      An attribute of type String. For example:

                       ``"S": "Hello"``

                    - **N** *(string) --*

                      An attribute of type Number. For example:

                       ``"N": "123.45"``

                      Numbers are sent across the network to DynamoDB as strings, to maximize
                      compatibility across languages and libraries. However, DynamoDB treats them as
                      number type attributes for mathematical operations.

                    - **B** *(bytes) --*

                      An attribute of type Binary. For example:

                       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

                    - **SS** *(list) --*

                      An attribute of type String Set. For example:

                       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

                      - *(string) --*

                    - **NS** *(list) --*

                      An attribute of type Number Set. For example:

                       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

                      Numbers are sent across the network to DynamoDB as strings, to maximize
                      compatibility across languages and libraries. However, DynamoDB treats them as
                      number type attributes for mathematical operations.

                      - *(string) --*

                    - **BS** *(list) --*

                      An attribute of type Binary Set. For example:

                       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

                      - *(bytes) --*

                    - **M** *(dict) --*

                      An attribute of type Map. For example:

                       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

                      - *(string) --*

                        - *(dict) --*

                          Represents the data for an attribute.

                          Each attribute value is described as a name-value pair. The name is the
                          data type, and the value is the data itself.

                          For more information, see `Data Types
                          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                          in the *Amazon DynamoDB Developer Guide* .

                    - **L** *(list) --*

                      An attribute of type List. For example:

                       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

                      - *(dict) --*

                        Represents the data for an attribute.

                        Each attribute value is described as a name-value pair. The name is the data
                        type, and the value is the data itself.

                        For more information, see `Data Types
                        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                        in the *Amazon DynamoDB Developer Guide* .

                    - **NULL** *(boolean) --*

                      An attribute of type Null. For example:

                       ``"NULL": true``

                    - **BOOL** *(boolean) --*

                      An attribute of type Boolean. For example:

                       ``"BOOL": true``

    - **ItemCollectionMetrics** *(dict) --*

      A list of tables that were processed by ``BatchWriteItem`` and, for each table, information
      about any item collections that were affected by individual ``DeleteItem`` or ``PutItem``
      operations.

      Each entry consists of the following subelements:

      * ``ItemCollectionKey`` - The partition key value of the item collection. This is the same as
      the partition key value of the item.

      * ``SizeEstimateRangeGB`` - An estimate of item collection size, expressed in GB. This is a
      two-element array containing a lower bound and an upper bound for the estimate. The estimate
      includes the size of all the items in the table, plus the size of all attributes projected
      into all of the local secondary indexes on the table. Use this estimate to measure whether a
      local secondary index is approaching its size limit. The estimate is subject to change over
      time; therefore, do not rely on the precision or accuracy of the estimate.

      - *(string) --*

        - *(list) --*

          - *(dict) --*

            Information about item collections, if any, that were affected by the operation.
            ``ItemCollectionMetrics`` is only returned if the request asked for it. If the table
            does not have any local secondary indexes, this information is not returned in the
            response.

            - **ItemCollectionKey** *(dict) --*

              The partition key value of the item collection. This value is the same as the
              partition key value of the item.

              - *(string) --*

                - *(dict) --*

                  Represents the data for an attribute.

                  Each attribute value is described as a name-value pair. The name is the data type,
                  and the value is the data itself.

                  For more information, see `Data Types
                  <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                  in the *Amazon DynamoDB Developer Guide* .

                  - **S** *(string) --*

                    An attribute of type String. For example:

                     ``"S": "Hello"``

                  - **N** *(string) --*

                    An attribute of type Number. For example:

                     ``"N": "123.45"``

                    Numbers are sent across the network to DynamoDB as strings, to maximize
                    compatibility across languages and libraries. However, DynamoDB treats them as
                    number type attributes for mathematical operations.

                  - **B** *(bytes) --*

                    An attribute of type Binary. For example:

                     ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

                  - **SS** *(list) --*

                    An attribute of type String Set. For example:

                     ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

                    - *(string) --*

                  - **NS** *(list) --*

                    An attribute of type Number Set. For example:

                     ``"NS": ["42.2", "-19", "7.5", "3.14"]``

                    Numbers are sent across the network to DynamoDB as strings, to maximize
                    compatibility across languages and libraries. However, DynamoDB treats them as
                    number type attributes for mathematical operations.

                    - *(string) --*

                  - **BS** *(list) --*

                    An attribute of type Binary Set. For example:

                     ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

                    - *(bytes) --*

                  - **M** *(dict) --*

                    An attribute of type Map. For example:

                     ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

                    - *(string) --*

                      - *(dict) --*

                        Represents the data for an attribute.

                        Each attribute value is described as a name-value pair. The name is the data
                        type, and the value is the data itself.

                        For more information, see `Data Types
                        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                        in the *Amazon DynamoDB Developer Guide* .

                  - **L** *(list) --*

                    An attribute of type List. For example:

                     ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

                    - *(dict) --*

                      Represents the data for an attribute.

                      Each attribute value is described as a name-value pair. The name is the data
                      type, and the value is the data itself.

                      For more information, see `Data Types
                      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                      in the *Amazon DynamoDB Developer Guide* .

                  - **NULL** *(boolean) --*

                    An attribute of type Null. For example:

                     ``"NULL": true``

                  - **BOOL** *(boolean) --*

                    An attribute of type Boolean. For example:

                     ``"BOOL": true``

            - **SizeEstimateRangeGB** *(list) --*

              An estimate of item collection size, in gigabytes. This value is a two-element array
              containing a lower bound and an upper bound for the estimate. The estimate includes
              the size of all the items in the table, plus the size of all attributes projected into
              all of the local secondary indexes on that table. Use this estimate to measure whether
              a local secondary index is approaching its size limit.

              The estimate is subject to change over time; therefore, do not rely on the precision
              or accuracy of the estimate.

              - *(float) --*

    - **ConsumedCapacity** *(list) --*

      The capacity units consumed by the entire ``BatchWriteItem`` operation.

      Each element consists of:

      * ``TableName`` - The table that consumed the provisioned throughput.

      * ``CapacityUnits`` - The total number of capacity units consumed.

      - *(dict) --*

        The capacity units consumed by an operation. The data returned includes the total
        provisioned throughput consumed, along with statistics for the table and any indexes
        involved in the operation. ``ConsumedCapacity`` is only returned if the request asked for
        it. For more information, see `Provisioned Throughput
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html>`__
        in the *Amazon DynamoDB Developer Guide* .

        - **TableName** *(string) --*

          The name of the table that was affected by the operation.

        - **CapacityUnits** *(float) --*

          The total number of capacity units consumed by the operation.

        - **ReadCapacityUnits** *(float) --*

          The total number of read capacity units consumed by the operation.

        - **WriteCapacityUnits** *(float) --*

          The total number of write capacity units consumed by the operation.

        - **Table** *(dict) --*

          The amount of throughput consumed on the table affected by the operation.

          - **ReadCapacityUnits** *(float) --*

            The total number of read capacity units consumed on a table or an index.

          - **WriteCapacityUnits** *(float) --*

            The total number of write capacity units consumed on a table or an index.

          - **CapacityUnits** *(float) --*

            The total number of capacity units consumed on a table or an index.

        - **LocalSecondaryIndexes** *(dict) --*

          The amount of throughput consumed on each local index affected by the operation.

          - *(string) --*

            - *(dict) --*

              Represents the amount of provisioned throughput capacity consumed on a table or an
              index.

              - **ReadCapacityUnits** *(float) --*

                The total number of read capacity units consumed on a table or an index.

              - **WriteCapacityUnits** *(float) --*

                The total number of write capacity units consumed on a table or an index.

              - **CapacityUnits** *(float) --*

                The total number of capacity units consumed on a table or an index.

        - **GlobalSecondaryIndexes** *(dict) --*

          The amount of throughput consumed on each global index affected by the operation.

          - *(string) --*

            - *(dict) --*

              Represents the amount of provisioned throughput capacity consumed on a table or an
              index.

              - **ReadCapacityUnits** *(float) --*

                The total number of read capacity units consumed on a table or an index.

              - **WriteCapacityUnits** *(float) --*

                The total number of write capacity units consumed on a table or an index.

              - **CapacityUnits** *(float) --*

                The total number of capacity units consumed on a table or an index.
    """


_ClientCreateBackupResponseBackupDetailsTypeDef = TypedDict(
    "_ClientCreateBackupResponseBackupDetailsTypeDef",
    {
        "BackupArn": str,
        "BackupName": str,
        "BackupSizeBytes": int,
        "BackupStatus": str,
        "BackupType": str,
        "BackupCreationDateTime": datetime,
        "BackupExpiryDateTime": datetime,
    },
    total=False,
)


class ClientCreateBackupResponseBackupDetailsTypeDef(
    _ClientCreateBackupResponseBackupDetailsTypeDef
):
    """
    Type definition for `ClientCreateBackupResponse` `BackupDetails`

    Contains the details of the backup created for the table.

    - **BackupArn** *(string) --*

      ARN associated with the backup.

    - **BackupName** *(string) --*

      Name of the requested backup.

    - **BackupSizeBytes** *(integer) --*

      Size of the backup in bytes.

    - **BackupStatus** *(string) --*

      Backup can be in one of the following states: CREATING, ACTIVE, DELETED.

    - **BackupType** *(string) --*

      BackupType:

      * ``USER`` - You create and manage these using the on-demand backup feature.

      * ``SYSTEM`` - If you delete a table with point-in-time recovery enabled, a ``SYSTEM`` backup
      is automatically created and is retained for 35 days (at no additional cost). System backups
      allow you to restore the deleted table to the state it was in just before the point of
      deletion.

      * ``AWS_BACKUP`` - On-demand backup created by you from AWS Backup service.

    - **BackupCreationDateTime** *(datetime) --*

      Time at which the backup was created. This is the request time of the backup.

    - **BackupExpiryDateTime** *(datetime) --*

      Time at which the automatic on-demand backup created by DynamoDB will expire. This ``SYSTEM``
      on-demand backup expires automatically 35 days after its creation.
    """


_ClientCreateBackupResponseTypeDef = TypedDict(
    "_ClientCreateBackupResponseTypeDef",
    {"BackupDetails": ClientCreateBackupResponseBackupDetailsTypeDef},
    total=False,
)


class ClientCreateBackupResponseTypeDef(_ClientCreateBackupResponseTypeDef):
    """
    Type definition for `ClientCreateBackup` `Response`

    - **BackupDetails** *(dict) --*

      Contains the details of the backup created for the table.

      - **BackupArn** *(string) --*

        ARN associated with the backup.

      - **BackupName** *(string) --*

        Name of the requested backup.

      - **BackupSizeBytes** *(integer) --*

        Size of the backup in bytes.

      - **BackupStatus** *(string) --*

        Backup can be in one of the following states: CREATING, ACTIVE, DELETED.

      - **BackupType** *(string) --*

        BackupType:

        * ``USER`` - You create and manage these using the on-demand backup feature.

        * ``SYSTEM`` - If you delete a table with point-in-time recovery enabled, a ``SYSTEM``
        backup is automatically created and is retained for 35 days (at no additional cost). System
        backups allow you to restore the deleted table to the state it was in just before the point
        of deletion.

        * ``AWS_BACKUP`` - On-demand backup created by you from AWS Backup service.

      - **BackupCreationDateTime** *(datetime) --*

        Time at which the backup was created. This is the request time of the backup.

      - **BackupExpiryDateTime** *(datetime) --*

        Time at which the automatic on-demand backup created by DynamoDB will expire. This
        ``SYSTEM`` on-demand backup expires automatically 35 days after its creation.
    """


_ClientCreateGlobalTableReplicationGroupTypeDef = TypedDict(
    "_ClientCreateGlobalTableReplicationGroupTypeDef", {"RegionName": str}, total=False
)


class ClientCreateGlobalTableReplicationGroupTypeDef(
    _ClientCreateGlobalTableReplicationGroupTypeDef
):
    """
    Type definition for `ClientCreateGlobalTable` `ReplicationGroup`

    Represents the properties of a replica.

    - **RegionName** *(string) --*

      The Region where the replica needs to be created.
    """


_ClientCreateGlobalTableResponseGlobalTableDescriptionReplicationGroupGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef = TypedDict(
    "_ClientCreateGlobalTableResponseGlobalTableDescriptionReplicationGroupGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef",
    {"ReadCapacityUnits": int},
    total=False,
)


class ClientCreateGlobalTableResponseGlobalTableDescriptionReplicationGroupGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef(
    _ClientCreateGlobalTableResponseGlobalTableDescriptionReplicationGroupGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef
):
    """
    Type definition for
    `ClientCreateGlobalTableResponseGlobalTableDescriptionReplicationGroupGlobalSecondaryIndexes`
    `ProvisionedThroughputOverride`

    If not described, uses the source table GSI's read capacity settings.

    - **ReadCapacityUnits** *(integer) --*

      Replica-specific read capacity units. If not specified, uses the source table's read capacity
      settings.
    """


_ClientCreateGlobalTableResponseGlobalTableDescriptionReplicationGroupGlobalSecondaryIndexesTypeDef = TypedDict(
    "_ClientCreateGlobalTableResponseGlobalTableDescriptionReplicationGroupGlobalSecondaryIndexesTypeDef",
    {
        "IndexName": str,
        "ProvisionedThroughputOverride": ClientCreateGlobalTableResponseGlobalTableDescriptionReplicationGroupGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef,
    },
    total=False,
)


class ClientCreateGlobalTableResponseGlobalTableDescriptionReplicationGroupGlobalSecondaryIndexesTypeDef(
    _ClientCreateGlobalTableResponseGlobalTableDescriptionReplicationGroupGlobalSecondaryIndexesTypeDef
):
    """
    Type definition for `ClientCreateGlobalTableResponseGlobalTableDescriptionReplicationGroup`
    `GlobalSecondaryIndexes`

    Represents the properties of a replica global secondary index.

    - **IndexName** *(string) --*

      The name of the global secondary index.

    - **ProvisionedThroughputOverride** *(dict) --*

      If not described, uses the source table GSI's read capacity settings.

      - **ReadCapacityUnits** *(integer) --*

        Replica-specific read capacity units. If not specified, uses the source table's read
        capacity settings.
    """


_ClientCreateGlobalTableResponseGlobalTableDescriptionReplicationGroupProvisionedThroughputOverrideTypeDef = TypedDict(
    "_ClientCreateGlobalTableResponseGlobalTableDescriptionReplicationGroupProvisionedThroughputOverrideTypeDef",
    {"ReadCapacityUnits": int},
    total=False,
)


class ClientCreateGlobalTableResponseGlobalTableDescriptionReplicationGroupProvisionedThroughputOverrideTypeDef(
    _ClientCreateGlobalTableResponseGlobalTableDescriptionReplicationGroupProvisionedThroughputOverrideTypeDef
):
    """
    Type definition for `ClientCreateGlobalTableResponseGlobalTableDescriptionReplicationGroup`
    `ProvisionedThroughputOverride`

    Replica-specific provisioned throughput. If not described, uses the source table's provisioned
    throughput settings.

    - **ReadCapacityUnits** *(integer) --*

      Replica-specific read capacity units. If not specified, uses the source table's read capacity
      settings.
    """


_ClientCreateGlobalTableResponseGlobalTableDescriptionReplicationGroupTypeDef = TypedDict(
    "_ClientCreateGlobalTableResponseGlobalTableDescriptionReplicationGroupTypeDef",
    {
        "RegionName": str,
        "ReplicaStatus": str,
        "ReplicaStatusDescription": str,
        "ReplicaStatusPercentProgress": str,
        "KMSMasterKeyId": str,
        "ProvisionedThroughputOverride": ClientCreateGlobalTableResponseGlobalTableDescriptionReplicationGroupProvisionedThroughputOverrideTypeDef,
        "GlobalSecondaryIndexes": List[
            ClientCreateGlobalTableResponseGlobalTableDescriptionReplicationGroupGlobalSecondaryIndexesTypeDef
        ],
    },
    total=False,
)


class ClientCreateGlobalTableResponseGlobalTableDescriptionReplicationGroupTypeDef(
    _ClientCreateGlobalTableResponseGlobalTableDescriptionReplicationGroupTypeDef
):
    """
    Type definition for `ClientCreateGlobalTableResponseGlobalTableDescription` `ReplicationGroup`

    Contains the details of the replica.

    - **RegionName** *(string) --*

      The name of the Region.

    - **ReplicaStatus** *(string) --*

      The current state of the replica:

      * ``CREATING`` - The replica is being created.

      * ``UPDATING`` - The replica is being updated.

      * ``DELETING`` - The replica is being deleted.

      * ``ACTIVE`` - The replica is ready for use.

    - **ReplicaStatusDescription** *(string) --*

      Detailed information about the replica status.

    - **ReplicaStatusPercentProgress** *(string) --*

      Specifies the progress of a Create, Update, or Delete action on the replica as a percentage.

    - **KMSMasterKeyId** *(string) --*

      The AWS KMS customer master key (CMK) of the replica that will be used for AWS KMS encryption.

    - **ProvisionedThroughputOverride** *(dict) --*

      Replica-specific provisioned throughput. If not described, uses the source table's provisioned
      throughput settings.

      - **ReadCapacityUnits** *(integer) --*

        Replica-specific read capacity units. If not specified, uses the source table's read
        capacity settings.

    - **GlobalSecondaryIndexes** *(list) --*

      Replica-specific global secondary index settings.

      - *(dict) --*

        Represents the properties of a replica global secondary index.

        - **IndexName** *(string) --*

          The name of the global secondary index.

        - **ProvisionedThroughputOverride** *(dict) --*

          If not described, uses the source table GSI's read capacity settings.

          - **ReadCapacityUnits** *(integer) --*

            Replica-specific read capacity units. If not specified, uses the source table's read
            capacity settings.
    """


_ClientCreateGlobalTableResponseGlobalTableDescriptionTypeDef = TypedDict(
    "_ClientCreateGlobalTableResponseGlobalTableDescriptionTypeDef",
    {
        "ReplicationGroup": List[
            ClientCreateGlobalTableResponseGlobalTableDescriptionReplicationGroupTypeDef
        ],
        "GlobalTableArn": str,
        "CreationDateTime": datetime,
        "GlobalTableStatus": str,
        "GlobalTableName": str,
    },
    total=False,
)


class ClientCreateGlobalTableResponseGlobalTableDescriptionTypeDef(
    _ClientCreateGlobalTableResponseGlobalTableDescriptionTypeDef
):
    """
    Type definition for `ClientCreateGlobalTableResponse` `GlobalTableDescription`

    Contains the details of the global table.

    - **ReplicationGroup** *(list) --*

      The Regions where the global table has replicas.

      - *(dict) --*

        Contains the details of the replica.

        - **RegionName** *(string) --*

          The name of the Region.

        - **ReplicaStatus** *(string) --*

          The current state of the replica:

          * ``CREATING`` - The replica is being created.

          * ``UPDATING`` - The replica is being updated.

          * ``DELETING`` - The replica is being deleted.

          * ``ACTIVE`` - The replica is ready for use.

        - **ReplicaStatusDescription** *(string) --*

          Detailed information about the replica status.

        - **ReplicaStatusPercentProgress** *(string) --*

          Specifies the progress of a Create, Update, or Delete action on the replica as a
          percentage.

        - **KMSMasterKeyId** *(string) --*

          The AWS KMS customer master key (CMK) of the replica that will be used for AWS KMS
          encryption.

        - **ProvisionedThroughputOverride** *(dict) --*

          Replica-specific provisioned throughput. If not described, uses the source table's
          provisioned throughput settings.

          - **ReadCapacityUnits** *(integer) --*

            Replica-specific read capacity units. If not specified, uses the source table's read
            capacity settings.

        - **GlobalSecondaryIndexes** *(list) --*

          Replica-specific global secondary index settings.

          - *(dict) --*

            Represents the properties of a replica global secondary index.

            - **IndexName** *(string) --*

              The name of the global secondary index.

            - **ProvisionedThroughputOverride** *(dict) --*

              If not described, uses the source table GSI's read capacity settings.

              - **ReadCapacityUnits** *(integer) --*

                Replica-specific read capacity units. If not specified, uses the source table's read
                capacity settings.

    - **GlobalTableArn** *(string) --*

      The unique identifier of the global table.

    - **CreationDateTime** *(datetime) --*

      The creation time of the global table.

    - **GlobalTableStatus** *(string) --*

      The current state of the global table:

      * ``CREATING`` - The global table is being created.

      * ``UPDATING`` - The global table is being updated.

      * ``DELETING`` - The global table is being deleted.

      * ``ACTIVE`` - The global table is ready for use.

    - **GlobalTableName** *(string) --*

      The global table name.
    """


_ClientCreateGlobalTableResponseTypeDef = TypedDict(
    "_ClientCreateGlobalTableResponseTypeDef",
    {"GlobalTableDescription": ClientCreateGlobalTableResponseGlobalTableDescriptionTypeDef},
    total=False,
)


class ClientCreateGlobalTableResponseTypeDef(_ClientCreateGlobalTableResponseTypeDef):
    """
    Type definition for `ClientCreateGlobalTable` `Response`

    - **GlobalTableDescription** *(dict) --*

      Contains the details of the global table.

      - **ReplicationGroup** *(list) --*

        The Regions where the global table has replicas.

        - *(dict) --*

          Contains the details of the replica.

          - **RegionName** *(string) --*

            The name of the Region.

          - **ReplicaStatus** *(string) --*

            The current state of the replica:

            * ``CREATING`` - The replica is being created.

            * ``UPDATING`` - The replica is being updated.

            * ``DELETING`` - The replica is being deleted.

            * ``ACTIVE`` - The replica is ready for use.

          - **ReplicaStatusDescription** *(string) --*

            Detailed information about the replica status.

          - **ReplicaStatusPercentProgress** *(string) --*

            Specifies the progress of a Create, Update, or Delete action on the replica as a
            percentage.

          - **KMSMasterKeyId** *(string) --*

            The AWS KMS customer master key (CMK) of the replica that will be used for AWS KMS
            encryption.

          - **ProvisionedThroughputOverride** *(dict) --*

            Replica-specific provisioned throughput. If not described, uses the source table's
            provisioned throughput settings.

            - **ReadCapacityUnits** *(integer) --*

              Replica-specific read capacity units. If not specified, uses the source table's read
              capacity settings.

          - **GlobalSecondaryIndexes** *(list) --*

            Replica-specific global secondary index settings.

            - *(dict) --*

              Represents the properties of a replica global secondary index.

              - **IndexName** *(string) --*

                The name of the global secondary index.

              - **ProvisionedThroughputOverride** *(dict) --*

                If not described, uses the source table GSI's read capacity settings.

                - **ReadCapacityUnits** *(integer) --*

                  Replica-specific read capacity units. If not specified, uses the source table's
                  read capacity settings.

      - **GlobalTableArn** *(string) --*

        The unique identifier of the global table.

      - **CreationDateTime** *(datetime) --*

        The creation time of the global table.

      - **GlobalTableStatus** *(string) --*

        The current state of the global table:

        * ``CREATING`` - The global table is being created.

        * ``UPDATING`` - The global table is being updated.

        * ``DELETING`` - The global table is being deleted.

        * ``ACTIVE`` - The global table is ready for use.

      - **GlobalTableName** *(string) --*

        The global table name.
    """


_ClientCreateTableAttributeDefinitionsTypeDef = TypedDict(
    "_ClientCreateTableAttributeDefinitionsTypeDef", {"AttributeName": str, "AttributeType": str}
)


class ClientCreateTableAttributeDefinitionsTypeDef(_ClientCreateTableAttributeDefinitionsTypeDef):
    """
    Type definition for `ClientCreateTable` `AttributeDefinitions`

    Represents an attribute for describing the key schema for the table and indexes.

    - **AttributeName** *(string) --* **[REQUIRED]**

      A name for the attribute.

    - **AttributeType** *(string) --* **[REQUIRED]**

      The data type for the attribute, where:

      * ``S`` - the attribute is of type String

      * ``N`` - the attribute is of type Number

      * ``B`` - the attribute is of type Binary
    """


_ClientCreateTableGlobalSecondaryIndexesKeySchemaTypeDef = TypedDict(
    "_ClientCreateTableGlobalSecondaryIndexesKeySchemaTypeDef",
    {"AttributeName": str, "KeyType": str},
)


class ClientCreateTableGlobalSecondaryIndexesKeySchemaTypeDef(
    _ClientCreateTableGlobalSecondaryIndexesKeySchemaTypeDef
):
    """
    Type definition for `ClientCreateTableGlobalSecondaryIndexes` `KeySchema`

    Represents *a single element* of a key schema. A key schema specifies the attributes that make
    up the primary key of a table, or the key attributes of an index.

    A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
    simple primary key would be represented by one ``KeySchemaElement`` (for the partition key). A
    composite primary key would require one ``KeySchemaElement`` for the partition key, and another
    ``KeySchemaElement`` for the sort key.

    A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The data
    type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a
    Map.

    - **AttributeName** *(string) --* **[REQUIRED]**

      The name of a key attribute.

    - **KeyType** *(string) --* **[REQUIRED]**

      The role that this key attribute will assume:

      * ``HASH`` - partition key

      * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.
    """


_ClientCreateTableGlobalSecondaryIndexesProjectionTypeDef = TypedDict(
    "_ClientCreateTableGlobalSecondaryIndexesProjectionTypeDef",
    {"ProjectionType": str, "NonKeyAttributes": List[str]},
    total=False,
)


class ClientCreateTableGlobalSecondaryIndexesProjectionTypeDef(
    _ClientCreateTableGlobalSecondaryIndexesProjectionTypeDef
):
    """
    Type definition for `ClientCreateTableGlobalSecondaryIndexes` `Projection`

    Represents attributes that are copied (projected) from the table into the global secondary
    index. These are in addition to the primary key attributes and index key attributes, which are
    automatically projected.

    - **ProjectionType** *(string) --*

      The set of attributes that are projected into the index:

      * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

      * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list of
      projected attributes is in ``NonKeyAttributes`` .

      * ``ALL`` - All of the table attributes are projected into the index.

    - **NonKeyAttributes** *(list) --*

      Represents the non-key attribute names which will be projected into the index.

      For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all of the
      local secondary indexes, must not exceed 20. If you project the same attribute into two
      different indexes, this counts as two distinct attributes when determining the total.

      - *(string) --*
    """


_ClientCreateTableGlobalSecondaryIndexesProvisionedThroughputTypeDef = TypedDict(
    "_ClientCreateTableGlobalSecondaryIndexesProvisionedThroughputTypeDef",
    {"ReadCapacityUnits": int, "WriteCapacityUnits": int},
)


class ClientCreateTableGlobalSecondaryIndexesProvisionedThroughputTypeDef(
    _ClientCreateTableGlobalSecondaryIndexesProvisionedThroughputTypeDef
):
    """
    Type definition for `ClientCreateTableGlobalSecondaryIndexes` `ProvisionedThroughput`

    Represents the provisioned throughput settings for the specified global secondary index.

    For current minimum and maximum provisioned throughput values, see `Limits
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the *Amazon
    DynamoDB Developer Guide* .

    - **ReadCapacityUnits** *(integer) --* **[REQUIRED]**

      The maximum number of strongly consistent reads consumed per second before DynamoDB returns a
      ``ThrottlingException`` . For more information, see `Specifying Read and Write Requirements
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
      in the *Amazon DynamoDB Developer Guide* .

      If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.

    - **WriteCapacityUnits** *(integer) --* **[REQUIRED]**

      The maximum number of writes consumed per second before DynamoDB returns a
      ``ThrottlingException`` . For more information, see `Specifying Read and Write Requirements
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
      in the *Amazon DynamoDB Developer Guide* .

      If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.
    """


_RequiredClientCreateTableGlobalSecondaryIndexesTypeDef = TypedDict(
    "_RequiredClientCreateTableGlobalSecondaryIndexesTypeDef",
    {
        "IndexName": str,
        "KeySchema": List[ClientCreateTableGlobalSecondaryIndexesKeySchemaTypeDef],
        "Projection": ClientCreateTableGlobalSecondaryIndexesProjectionTypeDef,
    },
)
_OptionalClientCreateTableGlobalSecondaryIndexesTypeDef = TypedDict(
    "_OptionalClientCreateTableGlobalSecondaryIndexesTypeDef",
    {"ProvisionedThroughput": ClientCreateTableGlobalSecondaryIndexesProvisionedThroughputTypeDef},
    total=False,
)


class ClientCreateTableGlobalSecondaryIndexesTypeDef(
    _RequiredClientCreateTableGlobalSecondaryIndexesTypeDef,
    _OptionalClientCreateTableGlobalSecondaryIndexesTypeDef,
):
    """
    Type definition for `ClientCreateTable` `GlobalSecondaryIndexes`

    Represents the properties of a global secondary index.

    - **IndexName** *(string) --* **[REQUIRED]**

      The name of the global secondary index. The name must be unique among all other indexes on
      this table.

    - **KeySchema** *(list) --* **[REQUIRED]**

      The complete key schema for a global secondary index, which consists of one or more pairs of
      attribute names and key types:

      * ``HASH`` - partition key

      * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.

      - *(dict) --*

        Represents *a single element* of a key schema. A key schema specifies the attributes that
        make up the primary key of a table, or the key attributes of an index.

        A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
        simple primary key would be represented by one ``KeySchemaElement`` (for the partition key).
        A composite primary key would require one ``KeySchemaElement`` for the partition key, and
        another ``KeySchemaElement`` for the sort key.

        A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The
        data type must be one of String, Number, or Binary. The attribute cannot be nested within a
        List or a Map.

        - **AttributeName** *(string) --* **[REQUIRED]**

          The name of a key attribute.

        - **KeyType** *(string) --* **[REQUIRED]**

          The role that this key attribute will assume:

          * ``HASH`` - partition key

          * ``RANGE`` - sort key

          .. note::

            The partition key of an item is also known as its *hash attribute* . The term "hash
            attribute" derives from DynamoDB's usage of an internal hash function to evenly
            distribute data items across partitions, based on their partition key values.

            The sort key of an item is also known as its *range attribute* . The term "range
            attribute" derives from the way DynamoDB stores items with the same partition key
            physically close together, in sorted order by the sort key value.

    - **Projection** *(dict) --* **[REQUIRED]**

      Represents attributes that are copied (projected) from the table into the global secondary
      index. These are in addition to the primary key attributes and index key attributes, which are
      automatically projected.

      - **ProjectionType** *(string) --*

        The set of attributes that are projected into the index:

        * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

        * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list
        of projected attributes is in ``NonKeyAttributes`` .

        * ``ALL`` - All of the table attributes are projected into the index.

      - **NonKeyAttributes** *(list) --*

        Represents the non-key attribute names which will be projected into the index.

        For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all of
        the local secondary indexes, must not exceed 20. If you project the same attribute into two
        different indexes, this counts as two distinct attributes when determining the total.

        - *(string) --*

    - **ProvisionedThroughput** *(dict) --*

      Represents the provisioned throughput settings for the specified global secondary index.

      For current minimum and maximum provisioned throughput values, see `Limits
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
      *Amazon DynamoDB Developer Guide* .

      - **ReadCapacityUnits** *(integer) --* **[REQUIRED]**

        The maximum number of strongly consistent reads consumed per second before DynamoDB returns
        a ``ThrottlingException`` . For more information, see `Specifying Read and Write
        Requirements
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
        in the *Amazon DynamoDB Developer Guide* .

        If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.

      - **WriteCapacityUnits** *(integer) --* **[REQUIRED]**

        The maximum number of writes consumed per second before DynamoDB returns a
        ``ThrottlingException`` . For more information, see `Specifying Read and Write Requirements
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
        in the *Amazon DynamoDB Developer Guide* .

        If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.
    """


_ClientCreateTableKeySchemaTypeDef = TypedDict(
    "_ClientCreateTableKeySchemaTypeDef", {"AttributeName": str, "KeyType": str}
)


class ClientCreateTableKeySchemaTypeDef(_ClientCreateTableKeySchemaTypeDef):
    """
    Type definition for `ClientCreateTable` `KeySchema`

    Represents *a single element* of a key schema. A key schema specifies the attributes that make
    up the primary key of a table, or the key attributes of an index.

    A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
    simple primary key would be represented by one ``KeySchemaElement`` (for the partition key). A
    composite primary key would require one ``KeySchemaElement`` for the partition key, and another
    ``KeySchemaElement`` for the sort key.

    A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The data
    type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a
    Map.

    - **AttributeName** *(string) --* **[REQUIRED]**

      The name of a key attribute.

    - **KeyType** *(string) --* **[REQUIRED]**

      The role that this key attribute will assume:

      * ``HASH`` - partition key

      * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.
    """


_ClientCreateTableLocalSecondaryIndexesKeySchemaTypeDef = TypedDict(
    "_ClientCreateTableLocalSecondaryIndexesKeySchemaTypeDef",
    {"AttributeName": str, "KeyType": str},
)


class ClientCreateTableLocalSecondaryIndexesKeySchemaTypeDef(
    _ClientCreateTableLocalSecondaryIndexesKeySchemaTypeDef
):
    """
    Type definition for `ClientCreateTableLocalSecondaryIndexes` `KeySchema`

    Represents *a single element* of a key schema. A key schema specifies the attributes that make
    up the primary key of a table, or the key attributes of an index.

    A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
    simple primary key would be represented by one ``KeySchemaElement`` (for the partition key). A
    composite primary key would require one ``KeySchemaElement`` for the partition key, and another
    ``KeySchemaElement`` for the sort key.

    A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The data
    type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a
    Map.

    - **AttributeName** *(string) --* **[REQUIRED]**

      The name of a key attribute.

    - **KeyType** *(string) --* **[REQUIRED]**

      The role that this key attribute will assume:

      * ``HASH`` - partition key

      * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.
    """


_ClientCreateTableLocalSecondaryIndexesProjectionTypeDef = TypedDict(
    "_ClientCreateTableLocalSecondaryIndexesProjectionTypeDef",
    {"ProjectionType": str, "NonKeyAttributes": List[str]},
    total=False,
)


class ClientCreateTableLocalSecondaryIndexesProjectionTypeDef(
    _ClientCreateTableLocalSecondaryIndexesProjectionTypeDef
):
    """
    Type definition for `ClientCreateTableLocalSecondaryIndexes` `Projection`

    Represents attributes that are copied (projected) from the table into the local secondary index.
    These are in addition to the primary key attributes and index key attributes, which are
    automatically projected.

    - **ProjectionType** *(string) --*

      The set of attributes that are projected into the index:

      * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

      * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list of
      projected attributes is in ``NonKeyAttributes`` .

      * ``ALL`` - All of the table attributes are projected into the index.

    - **NonKeyAttributes** *(list) --*

      Represents the non-key attribute names which will be projected into the index.

      For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all of the
      local secondary indexes, must not exceed 20. If you project the same attribute into two
      different indexes, this counts as two distinct attributes when determining the total.

      - *(string) --*
    """


_ClientCreateTableLocalSecondaryIndexesTypeDef = TypedDict(
    "_ClientCreateTableLocalSecondaryIndexesTypeDef",
    {
        "IndexName": str,
        "KeySchema": List[ClientCreateTableLocalSecondaryIndexesKeySchemaTypeDef],
        "Projection": ClientCreateTableLocalSecondaryIndexesProjectionTypeDef,
    },
)


class ClientCreateTableLocalSecondaryIndexesTypeDef(_ClientCreateTableLocalSecondaryIndexesTypeDef):
    """
    Type definition for `ClientCreateTable` `LocalSecondaryIndexes`

    Represents the properties of a local secondary index.

    - **IndexName** *(string) --* **[REQUIRED]**

      The name of the local secondary index. The name must be unique among all other indexes on this
      table.

    - **KeySchema** *(list) --* **[REQUIRED]**

      The complete key schema for the local secondary index, consisting of one or more pairs of
      attribute names and key types:

      * ``HASH`` - partition key

      * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.

      - *(dict) --*

        Represents *a single element* of a key schema. A key schema specifies the attributes that
        make up the primary key of a table, or the key attributes of an index.

        A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
        simple primary key would be represented by one ``KeySchemaElement`` (for the partition key).
        A composite primary key would require one ``KeySchemaElement`` for the partition key, and
        another ``KeySchemaElement`` for the sort key.

        A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The
        data type must be one of String, Number, or Binary. The attribute cannot be nested within a
        List or a Map.

        - **AttributeName** *(string) --* **[REQUIRED]**

          The name of a key attribute.

        - **KeyType** *(string) --* **[REQUIRED]**

          The role that this key attribute will assume:

          * ``HASH`` - partition key

          * ``RANGE`` - sort key

          .. note::

            The partition key of an item is also known as its *hash attribute* . The term "hash
            attribute" derives from DynamoDB's usage of an internal hash function to evenly
            distribute data items across partitions, based on their partition key values.

            The sort key of an item is also known as its *range attribute* . The term "range
            attribute" derives from the way DynamoDB stores items with the same partition key
            physically close together, in sorted order by the sort key value.

    - **Projection** *(dict) --* **[REQUIRED]**

      Represents attributes that are copied (projected) from the table into the local secondary
      index. These are in addition to the primary key attributes and index key attributes, which are
      automatically projected.

      - **ProjectionType** *(string) --*

        The set of attributes that are projected into the index:

        * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

        * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list
        of projected attributes is in ``NonKeyAttributes`` .

        * ``ALL`` - All of the table attributes are projected into the index.

      - **NonKeyAttributes** *(list) --*

        Represents the non-key attribute names which will be projected into the index.

        For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all of
        the local secondary indexes, must not exceed 20. If you project the same attribute into two
        different indexes, this counts as two distinct attributes when determining the total.

        - *(string) --*
    """


_ClientCreateTableProvisionedThroughputTypeDef = TypedDict(
    "_ClientCreateTableProvisionedThroughputTypeDef",
    {"ReadCapacityUnits": int, "WriteCapacityUnits": int},
)


class ClientCreateTableProvisionedThroughputTypeDef(_ClientCreateTableProvisionedThroughputTypeDef):
    """
    Type definition for `ClientCreateTable` `ProvisionedThroughput`

    Represents the provisioned throughput settings for a specified table or index. The settings can
    be modified using the ``UpdateTable`` operation.

    If you set BillingMode as ``PROVISIONED`` , you must specify this property. If you set
    BillingMode as ``PAY_PER_REQUEST`` , you cannot specify this property.

    For current minimum and maximum provisioned throughput values, see `Limits
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the *Amazon
    DynamoDB Developer Guide* .

    - **ReadCapacityUnits** *(integer) --* **[REQUIRED]**

      The maximum number of strongly consistent reads consumed per second before DynamoDB returns a
      ``ThrottlingException`` . For more information, see `Specifying Read and Write Requirements
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
      in the *Amazon DynamoDB Developer Guide* .

      If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.

    - **WriteCapacityUnits** *(integer) --* **[REQUIRED]**

      The maximum number of writes consumed per second before DynamoDB returns a
      ``ThrottlingException`` . For more information, see `Specifying Read and Write Requirements
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
      in the *Amazon DynamoDB Developer Guide* .

      If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.
    """


_ClientCreateTableResponseTableDescriptionArchivalSummaryTypeDef = TypedDict(
    "_ClientCreateTableResponseTableDescriptionArchivalSummaryTypeDef",
    {"ArchivalDateTime": datetime, "ArchivalReason": str, "ArchivalBackupArn": str},
    total=False,
)


class ClientCreateTableResponseTableDescriptionArchivalSummaryTypeDef(
    _ClientCreateTableResponseTableDescriptionArchivalSummaryTypeDef
):
    """
    Type definition for `ClientCreateTableResponseTableDescription` `ArchivalSummary`

    Contains information about the table archive.

    - **ArchivalDateTime** *(datetime) --*

      The date and time when table archival was initiated by DynamoDB, in UNIX epoch time format.

    - **ArchivalReason** *(string) --*

      The reason DynamoDB archived the table. Currently, the only possible value is:

      * ``INACCESSIBLE_ENCRYPTION_CREDENTIALS`` - The table was archived due to the table's AWS KMS
      key being inaccessible for more than seven days. An On-Demand backup was created at the
      archival time.

    - **ArchivalBackupArn** *(string) --*

      The Amazon Resource Name (ARN) of the backup the table was archived to, when applicable in the
      archival reason. If you wish to restore this backup to the same table name, you will need to
      delete the original table.
    """


_ClientCreateTableResponseTableDescriptionAttributeDefinitionsTypeDef = TypedDict(
    "_ClientCreateTableResponseTableDescriptionAttributeDefinitionsTypeDef",
    {"AttributeName": str, "AttributeType": str},
    total=False,
)


class ClientCreateTableResponseTableDescriptionAttributeDefinitionsTypeDef(
    _ClientCreateTableResponseTableDescriptionAttributeDefinitionsTypeDef
):
    """
    Type definition for `ClientCreateTableResponseTableDescription` `AttributeDefinitions`

    Represents an attribute for describing the key schema for the table and indexes.

    - **AttributeName** *(string) --*

      A name for the attribute.

    - **AttributeType** *(string) --*

      The data type for the attribute, where:

      * ``S`` - the attribute is of type String

      * ``N`` - the attribute is of type Number

      * ``B`` - the attribute is of type Binary
    """


_ClientCreateTableResponseTableDescriptionBillingModeSummaryTypeDef = TypedDict(
    "_ClientCreateTableResponseTableDescriptionBillingModeSummaryTypeDef",
    {"BillingMode": str, "LastUpdateToPayPerRequestDateTime": datetime},
    total=False,
)


class ClientCreateTableResponseTableDescriptionBillingModeSummaryTypeDef(
    _ClientCreateTableResponseTableDescriptionBillingModeSummaryTypeDef
):
    """
    Type definition for `ClientCreateTableResponseTableDescription` `BillingModeSummary`

    Contains the details for the read/write capacity mode.

    - **BillingMode** *(string) --*

      Controls how you are charged for read and write throughput and how you manage capacity. This
      setting can be changed later.

      * ``PROVISIONED`` - Sets the read/write capacity mode to ``PROVISIONED`` . We recommend using
      ``PROVISIONED`` for predictable workloads.

      * ``PAY_PER_REQUEST`` - Sets the read/write capacity mode to ``PAY_PER_REQUEST`` . We
      recommend using ``PAY_PER_REQUEST`` for unpredictable workloads.

    - **LastUpdateToPayPerRequestDateTime** *(datetime) --*

      Represents the time when ``PAY_PER_REQUEST`` was last set as the read/write capacity mode.
    """


_ClientCreateTableResponseTableDescriptionGlobalSecondaryIndexesKeySchemaTypeDef = TypedDict(
    "_ClientCreateTableResponseTableDescriptionGlobalSecondaryIndexesKeySchemaTypeDef",
    {"AttributeName": str, "KeyType": str},
    total=False,
)


class ClientCreateTableResponseTableDescriptionGlobalSecondaryIndexesKeySchemaTypeDef(
    _ClientCreateTableResponseTableDescriptionGlobalSecondaryIndexesKeySchemaTypeDef
):
    """
    Type definition for `ClientCreateTableResponseTableDescriptionGlobalSecondaryIndexes`
    `KeySchema`

    Represents *a single element* of a key schema. A key schema specifies the attributes that make
    up the primary key of a table, or the key attributes of an index.

    A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
    simple primary key would be represented by one ``KeySchemaElement`` (for the partition key). A
    composite primary key would require one ``KeySchemaElement`` for the partition key, and another
    ``KeySchemaElement`` for the sort key.

    A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The data
    type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a
    Map.

    - **AttributeName** *(string) --*

      The name of a key attribute.

    - **KeyType** *(string) --*

      The role that this key attribute will assume:

      * ``HASH`` - partition key

      * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.
    """


_ClientCreateTableResponseTableDescriptionGlobalSecondaryIndexesProjectionTypeDef = TypedDict(
    "_ClientCreateTableResponseTableDescriptionGlobalSecondaryIndexesProjectionTypeDef",
    {"ProjectionType": str, "NonKeyAttributes": List[str]},
    total=False,
)


class ClientCreateTableResponseTableDescriptionGlobalSecondaryIndexesProjectionTypeDef(
    _ClientCreateTableResponseTableDescriptionGlobalSecondaryIndexesProjectionTypeDef
):
    """
    Type definition for `ClientCreateTableResponseTableDescriptionGlobalSecondaryIndexes`
    `Projection`

    Represents attributes that are copied (projected) from the table into the global secondary
    index. These are in addition to the primary key attributes and index key attributes, which are
    automatically projected.

    - **ProjectionType** *(string) --*

      The set of attributes that are projected into the index:

      * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

      * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list of
      projected attributes is in ``NonKeyAttributes`` .

      * ``ALL`` - All of the table attributes are projected into the index.

    - **NonKeyAttributes** *(list) --*

      Represents the non-key attribute names which will be projected into the index.

      For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all of the
      local secondary indexes, must not exceed 20. If you project the same attribute into two
      different indexes, this counts as two distinct attributes when determining the total.

      - *(string) --*
    """


_ClientCreateTableResponseTableDescriptionGlobalSecondaryIndexesProvisionedThroughputTypeDef = TypedDict(
    "_ClientCreateTableResponseTableDescriptionGlobalSecondaryIndexesProvisionedThroughputTypeDef",
    {
        "LastIncreaseDateTime": datetime,
        "LastDecreaseDateTime": datetime,
        "NumberOfDecreasesToday": int,
        "ReadCapacityUnits": int,
        "WriteCapacityUnits": int,
    },
    total=False,
)


class ClientCreateTableResponseTableDescriptionGlobalSecondaryIndexesProvisionedThroughputTypeDef(
    _ClientCreateTableResponseTableDescriptionGlobalSecondaryIndexesProvisionedThroughputTypeDef
):
    """
    Type definition for `ClientCreateTableResponseTableDescriptionGlobalSecondaryIndexes`
    `ProvisionedThroughput`

    Represents the provisioned throughput settings for the specified global secondary index.

    For current minimum and maximum provisioned throughput values, see `Limits
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the *Amazon
    DynamoDB Developer Guide* .

    - **LastIncreaseDateTime** *(datetime) --*

      The date and time of the last provisioned throughput increase for this table.

    - **LastDecreaseDateTime** *(datetime) --*

      The date and time of the last provisioned throughput decrease for this table.

    - **NumberOfDecreasesToday** *(integer) --*

      The number of provisioned throughput decreases for this table during this UTC calendar day.
      For current maximums on provisioned throughput decreases, see `Limits
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
      *Amazon DynamoDB Developer Guide* .

    - **ReadCapacityUnits** *(integer) --*

      The maximum number of strongly consistent reads consumed per second before DynamoDB returns a
      ``ThrottlingException`` . Eventually consistent reads require less effort than strongly
      consistent reads, so a setting of 50 ``ReadCapacityUnits`` per second provides 100 eventually
      consistent ``ReadCapacityUnits`` per second.

    - **WriteCapacityUnits** *(integer) --*

      The maximum number of writes consumed per second before DynamoDB returns a
      ``ThrottlingException`` .
    """


_ClientCreateTableResponseTableDescriptionGlobalSecondaryIndexesTypeDef = TypedDict(
    "_ClientCreateTableResponseTableDescriptionGlobalSecondaryIndexesTypeDef",
    {
        "IndexName": str,
        "KeySchema": List[
            ClientCreateTableResponseTableDescriptionGlobalSecondaryIndexesKeySchemaTypeDef
        ],
        "Projection": ClientCreateTableResponseTableDescriptionGlobalSecondaryIndexesProjectionTypeDef,
        "IndexStatus": str,
        "Backfilling": bool,
        "ProvisionedThroughput": ClientCreateTableResponseTableDescriptionGlobalSecondaryIndexesProvisionedThroughputTypeDef,
        "IndexSizeBytes": int,
        "ItemCount": int,
        "IndexArn": str,
    },
    total=False,
)


class ClientCreateTableResponseTableDescriptionGlobalSecondaryIndexesTypeDef(
    _ClientCreateTableResponseTableDescriptionGlobalSecondaryIndexesTypeDef
):
    """
    Type definition for `ClientCreateTableResponseTableDescription` `GlobalSecondaryIndexes`

    Represents the properties of a global secondary index.

    - **IndexName** *(string) --*

      The name of the global secondary index.

    - **KeySchema** *(list) --*

      The complete key schema for a global secondary index, which consists of one or more pairs of
      attribute names and key types:

      * ``HASH`` - partition key

      * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.

      - *(dict) --*

        Represents *a single element* of a key schema. A key schema specifies the attributes that
        make up the primary key of a table, or the key attributes of an index.

        A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
        simple primary key would be represented by one ``KeySchemaElement`` (for the partition key).
        A composite primary key would require one ``KeySchemaElement`` for the partition key, and
        another ``KeySchemaElement`` for the sort key.

        A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The
        data type must be one of String, Number, or Binary. The attribute cannot be nested within a
        List or a Map.

        - **AttributeName** *(string) --*

          The name of a key attribute.

        - **KeyType** *(string) --*

          The role that this key attribute will assume:

          * ``HASH`` - partition key

          * ``RANGE`` - sort key

          .. note::

            The partition key of an item is also known as its *hash attribute* . The term "hash
            attribute" derives from DynamoDB's usage of an internal hash function to evenly
            distribute data items across partitions, based on their partition key values.

            The sort key of an item is also known as its *range attribute* . The term "range
            attribute" derives from the way DynamoDB stores items with the same partition key
            physically close together, in sorted order by the sort key value.

    - **Projection** *(dict) --*

      Represents attributes that are copied (projected) from the table into the global secondary
      index. These are in addition to the primary key attributes and index key attributes, which are
      automatically projected.

      - **ProjectionType** *(string) --*

        The set of attributes that are projected into the index:

        * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

        * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list
        of projected attributes is in ``NonKeyAttributes`` .

        * ``ALL`` - All of the table attributes are projected into the index.

      - **NonKeyAttributes** *(list) --*

        Represents the non-key attribute names which will be projected into the index.

        For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all of
        the local secondary indexes, must not exceed 20. If you project the same attribute into two
        different indexes, this counts as two distinct attributes when determining the total.

        - *(string) --*

    - **IndexStatus** *(string) --*

      The current state of the global secondary index:

      * ``CREATING`` - The index is being created.

      * ``UPDATING`` - The index is being updated.

      * ``DELETING`` - The index is being deleted.

      * ``ACTIVE`` - The index is ready for use.

    - **Backfilling** *(boolean) --*

      Indicates whether the index is currently backfilling. *Backfilling* is the process of reading
      items from the table and determining whether they can be added to the index. (Not all items
      will qualify: For example, a partition key cannot have any duplicate values.) If an item can
      be added to the index, DynamoDB will do so. After all items have been processed, the
      backfilling operation is complete and ``Backfilling`` is false.

      You can delete an index that is being created during the ``Backfilling`` phase when
      ``IndexStatus`` is set to CREATING and ``Backfilling`` is true. You can't delete the index
      that is being created when ``IndexStatus`` is set to CREATING and ``Backfilling`` is false.

      .. note::

        For indexes that were created during a ``CreateTable`` operation, the ``Backfilling``
        attribute does not appear in the ``DescribeTable`` output.

    - **ProvisionedThroughput** *(dict) --*

      Represents the provisioned throughput settings for the specified global secondary index.

      For current minimum and maximum provisioned throughput values, see `Limits
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
      *Amazon DynamoDB Developer Guide* .

      - **LastIncreaseDateTime** *(datetime) --*

        The date and time of the last provisioned throughput increase for this table.

      - **LastDecreaseDateTime** *(datetime) --*

        The date and time of the last provisioned throughput decrease for this table.

      - **NumberOfDecreasesToday** *(integer) --*

        The number of provisioned throughput decreases for this table during this UTC calendar day.
        For current maximums on provisioned throughput decreases, see `Limits
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
        *Amazon DynamoDB Developer Guide* .

      - **ReadCapacityUnits** *(integer) --*

        The maximum number of strongly consistent reads consumed per second before DynamoDB returns
        a ``ThrottlingException`` . Eventually consistent reads require less effort than strongly
        consistent reads, so a setting of 50 ``ReadCapacityUnits`` per second provides 100
        eventually consistent ``ReadCapacityUnits`` per second.

      - **WriteCapacityUnits** *(integer) --*

        The maximum number of writes consumed per second before DynamoDB returns a
        ``ThrottlingException`` .

    - **IndexSizeBytes** *(integer) --*

      The total size of the specified index, in bytes. DynamoDB updates this value approximately
      every six hours. Recent changes might not be reflected in this value.

    - **ItemCount** *(integer) --*

      The number of items in the specified index. DynamoDB updates this value approximately every
      six hours. Recent changes might not be reflected in this value.

    - **IndexArn** *(string) --*

      The Amazon Resource Name (ARN) that uniquely identifies the index.
    """


_ClientCreateTableResponseTableDescriptionKeySchemaTypeDef = TypedDict(
    "_ClientCreateTableResponseTableDescriptionKeySchemaTypeDef",
    {"AttributeName": str, "KeyType": str},
    total=False,
)


class ClientCreateTableResponseTableDescriptionKeySchemaTypeDef(
    _ClientCreateTableResponseTableDescriptionKeySchemaTypeDef
):
    """
    Type definition for `ClientCreateTableResponseTableDescription` `KeySchema`

    Represents *a single element* of a key schema. A key schema specifies the attributes that make
    up the primary key of a table, or the key attributes of an index.

    A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
    simple primary key would be represented by one ``KeySchemaElement`` (for the partition key). A
    composite primary key would require one ``KeySchemaElement`` for the partition key, and another
    ``KeySchemaElement`` for the sort key.

    A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The data
    type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a
    Map.

    - **AttributeName** *(string) --*

      The name of a key attribute.

    - **KeyType** *(string) --*

      The role that this key attribute will assume:

      * ``HASH`` - partition key

      * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.
    """


_ClientCreateTableResponseTableDescriptionLocalSecondaryIndexesKeySchemaTypeDef = TypedDict(
    "_ClientCreateTableResponseTableDescriptionLocalSecondaryIndexesKeySchemaTypeDef",
    {"AttributeName": str, "KeyType": str},
    total=False,
)


class ClientCreateTableResponseTableDescriptionLocalSecondaryIndexesKeySchemaTypeDef(
    _ClientCreateTableResponseTableDescriptionLocalSecondaryIndexesKeySchemaTypeDef
):
    """
    Type definition for `ClientCreateTableResponseTableDescriptionLocalSecondaryIndexes` `KeySchema`

    Represents *a single element* of a key schema. A key schema specifies the attributes that make
    up the primary key of a table, or the key attributes of an index.

    A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
    simple primary key would be represented by one ``KeySchemaElement`` (for the partition key). A
    composite primary key would require one ``KeySchemaElement`` for the partition key, and another
    ``KeySchemaElement`` for the sort key.

    A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The data
    type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a
    Map.

    - **AttributeName** *(string) --*

      The name of a key attribute.

    - **KeyType** *(string) --*

      The role that this key attribute will assume:

      * ``HASH`` - partition key

      * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.
    """


_ClientCreateTableResponseTableDescriptionLocalSecondaryIndexesProjectionTypeDef = TypedDict(
    "_ClientCreateTableResponseTableDescriptionLocalSecondaryIndexesProjectionTypeDef",
    {"ProjectionType": str, "NonKeyAttributes": List[str]},
    total=False,
)


class ClientCreateTableResponseTableDescriptionLocalSecondaryIndexesProjectionTypeDef(
    _ClientCreateTableResponseTableDescriptionLocalSecondaryIndexesProjectionTypeDef
):
    """
    Type definition for `ClientCreateTableResponseTableDescriptionLocalSecondaryIndexes`
    `Projection`

    Represents attributes that are copied (projected) from the table into the global secondary
    index. These are in addition to the primary key attributes and index key attributes, which are
    automatically projected.

    - **ProjectionType** *(string) --*

      The set of attributes that are projected into the index:

      * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

      * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list of
      projected attributes is in ``NonKeyAttributes`` .

      * ``ALL`` - All of the table attributes are projected into the index.

    - **NonKeyAttributes** *(list) --*

      Represents the non-key attribute names which will be projected into the index.

      For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all of the
      local secondary indexes, must not exceed 20. If you project the same attribute into two
      different indexes, this counts as two distinct attributes when determining the total.

      - *(string) --*
    """


_ClientCreateTableResponseTableDescriptionLocalSecondaryIndexesTypeDef = TypedDict(
    "_ClientCreateTableResponseTableDescriptionLocalSecondaryIndexesTypeDef",
    {
        "IndexName": str,
        "KeySchema": List[
            ClientCreateTableResponseTableDescriptionLocalSecondaryIndexesKeySchemaTypeDef
        ],
        "Projection": ClientCreateTableResponseTableDescriptionLocalSecondaryIndexesProjectionTypeDef,
        "IndexSizeBytes": int,
        "ItemCount": int,
        "IndexArn": str,
    },
    total=False,
)


class ClientCreateTableResponseTableDescriptionLocalSecondaryIndexesTypeDef(
    _ClientCreateTableResponseTableDescriptionLocalSecondaryIndexesTypeDef
):
    """
    Type definition for `ClientCreateTableResponseTableDescription` `LocalSecondaryIndexes`

    Represents the properties of a local secondary index.

    - **IndexName** *(string) --*

      Represents the name of the local secondary index.

    - **KeySchema** *(list) --*

      The complete key schema for the local secondary index, consisting of one or more pairs of
      attribute names and key types:

      * ``HASH`` - partition key

      * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.

      - *(dict) --*

        Represents *a single element* of a key schema. A key schema specifies the attributes that
        make up the primary key of a table, or the key attributes of an index.

        A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
        simple primary key would be represented by one ``KeySchemaElement`` (for the partition key).
        A composite primary key would require one ``KeySchemaElement`` for the partition key, and
        another ``KeySchemaElement`` for the sort key.

        A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The
        data type must be one of String, Number, or Binary. The attribute cannot be nested within a
        List or a Map.

        - **AttributeName** *(string) --*

          The name of a key attribute.

        - **KeyType** *(string) --*

          The role that this key attribute will assume:

          * ``HASH`` - partition key

          * ``RANGE`` - sort key

          .. note::

            The partition key of an item is also known as its *hash attribute* . The term "hash
            attribute" derives from DynamoDB's usage of an internal hash function to evenly
            distribute data items across partitions, based on their partition key values.

            The sort key of an item is also known as its *range attribute* . The term "range
            attribute" derives from the way DynamoDB stores items with the same partition key
            physically close together, in sorted order by the sort key value.

    - **Projection** *(dict) --*

      Represents attributes that are copied (projected) from the table into the global secondary
      index. These are in addition to the primary key attributes and index key attributes, which are
      automatically projected.

      - **ProjectionType** *(string) --*

        The set of attributes that are projected into the index:

        * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

        * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list
        of projected attributes is in ``NonKeyAttributes`` .

        * ``ALL`` - All of the table attributes are projected into the index.

      - **NonKeyAttributes** *(list) --*

        Represents the non-key attribute names which will be projected into the index.

        For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all of
        the local secondary indexes, must not exceed 20. If you project the same attribute into two
        different indexes, this counts as two distinct attributes when determining the total.

        - *(string) --*

    - **IndexSizeBytes** *(integer) --*

      The total size of the specified index, in bytes. DynamoDB updates this value approximately
      every six hours. Recent changes might not be reflected in this value.

    - **ItemCount** *(integer) --*

      The number of items in the specified index. DynamoDB updates this value approximately every
      six hours. Recent changes might not be reflected in this value.

    - **IndexArn** *(string) --*

      The Amazon Resource Name (ARN) that uniquely identifies the index.
    """


_ClientCreateTableResponseTableDescriptionProvisionedThroughputTypeDef = TypedDict(
    "_ClientCreateTableResponseTableDescriptionProvisionedThroughputTypeDef",
    {
        "LastIncreaseDateTime": datetime,
        "LastDecreaseDateTime": datetime,
        "NumberOfDecreasesToday": int,
        "ReadCapacityUnits": int,
        "WriteCapacityUnits": int,
    },
    total=False,
)


class ClientCreateTableResponseTableDescriptionProvisionedThroughputTypeDef(
    _ClientCreateTableResponseTableDescriptionProvisionedThroughputTypeDef
):
    """
    Type definition for `ClientCreateTableResponseTableDescription` `ProvisionedThroughput`

    The provisioned throughput settings for the table, consisting of read and write capacity units,
    along with data about increases and decreases.

    - **LastIncreaseDateTime** *(datetime) --*

      The date and time of the last provisioned throughput increase for this table.

    - **LastDecreaseDateTime** *(datetime) --*

      The date and time of the last provisioned throughput decrease for this table.

    - **NumberOfDecreasesToday** *(integer) --*

      The number of provisioned throughput decreases for this table during this UTC calendar day.
      For current maximums on provisioned throughput decreases, see `Limits
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
      *Amazon DynamoDB Developer Guide* .

    - **ReadCapacityUnits** *(integer) --*

      The maximum number of strongly consistent reads consumed per second before DynamoDB returns a
      ``ThrottlingException`` . Eventually consistent reads require less effort than strongly
      consistent reads, so a setting of 50 ``ReadCapacityUnits`` per second provides 100 eventually
      consistent ``ReadCapacityUnits`` per second.

    - **WriteCapacityUnits** *(integer) --*

      The maximum number of writes consumed per second before DynamoDB returns a
      ``ThrottlingException`` .
    """


_ClientCreateTableResponseTableDescriptionReplicasGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef = TypedDict(
    "_ClientCreateTableResponseTableDescriptionReplicasGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef",
    {"ReadCapacityUnits": int},
    total=False,
)


class ClientCreateTableResponseTableDescriptionReplicasGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef(
    _ClientCreateTableResponseTableDescriptionReplicasGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef
):
    """
    Type definition for `ClientCreateTableResponseTableDescriptionReplicasGlobalSecondaryIndexes`
    `ProvisionedThroughputOverride`

    If not described, uses the source table GSI's read capacity settings.

    - **ReadCapacityUnits** *(integer) --*

      Replica-specific read capacity units. If not specified, uses the source table's read capacity
      settings.
    """


_ClientCreateTableResponseTableDescriptionReplicasGlobalSecondaryIndexesTypeDef = TypedDict(
    "_ClientCreateTableResponseTableDescriptionReplicasGlobalSecondaryIndexesTypeDef",
    {
        "IndexName": str,
        "ProvisionedThroughputOverride": ClientCreateTableResponseTableDescriptionReplicasGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef,
    },
    total=False,
)


class ClientCreateTableResponseTableDescriptionReplicasGlobalSecondaryIndexesTypeDef(
    _ClientCreateTableResponseTableDescriptionReplicasGlobalSecondaryIndexesTypeDef
):
    """
    Type definition for `ClientCreateTableResponseTableDescriptionReplicas` `GlobalSecondaryIndexes`

    Represents the properties of a replica global secondary index.

    - **IndexName** *(string) --*

      The name of the global secondary index.

    - **ProvisionedThroughputOverride** *(dict) --*

      If not described, uses the source table GSI's read capacity settings.

      - **ReadCapacityUnits** *(integer) --*

        Replica-specific read capacity units. If not specified, uses the source table's read
        capacity settings.
    """


_ClientCreateTableResponseTableDescriptionReplicasProvisionedThroughputOverrideTypeDef = TypedDict(
    "_ClientCreateTableResponseTableDescriptionReplicasProvisionedThroughputOverrideTypeDef",
    {"ReadCapacityUnits": int},
    total=False,
)


class ClientCreateTableResponseTableDescriptionReplicasProvisionedThroughputOverrideTypeDef(
    _ClientCreateTableResponseTableDescriptionReplicasProvisionedThroughputOverrideTypeDef
):
    """
    Type definition for `ClientCreateTableResponseTableDescriptionReplicas`
    `ProvisionedThroughputOverride`

    Replica-specific provisioned throughput. If not described, uses the source table's provisioned
    throughput settings.

    - **ReadCapacityUnits** *(integer) --*

      Replica-specific read capacity units. If not specified, uses the source table's read capacity
      settings.
    """


_ClientCreateTableResponseTableDescriptionReplicasTypeDef = TypedDict(
    "_ClientCreateTableResponseTableDescriptionReplicasTypeDef",
    {
        "RegionName": str,
        "ReplicaStatus": str,
        "ReplicaStatusDescription": str,
        "ReplicaStatusPercentProgress": str,
        "KMSMasterKeyId": str,
        "ProvisionedThroughputOverride": ClientCreateTableResponseTableDescriptionReplicasProvisionedThroughputOverrideTypeDef,
        "GlobalSecondaryIndexes": List[
            ClientCreateTableResponseTableDescriptionReplicasGlobalSecondaryIndexesTypeDef
        ],
    },
    total=False,
)


class ClientCreateTableResponseTableDescriptionReplicasTypeDef(
    _ClientCreateTableResponseTableDescriptionReplicasTypeDef
):
    """
    Type definition for `ClientCreateTableResponseTableDescription` `Replicas`

    Contains the details of the replica.

    - **RegionName** *(string) --*

      The name of the Region.

    - **ReplicaStatus** *(string) --*

      The current state of the replica:

      * ``CREATING`` - The replica is being created.

      * ``UPDATING`` - The replica is being updated.

      * ``DELETING`` - The replica is being deleted.

      * ``ACTIVE`` - The replica is ready for use.

    - **ReplicaStatusDescription** *(string) --*

      Detailed information about the replica status.

    - **ReplicaStatusPercentProgress** *(string) --*

      Specifies the progress of a Create, Update, or Delete action on the replica as a percentage.

    - **KMSMasterKeyId** *(string) --*

      The AWS KMS customer master key (CMK) of the replica that will be used for AWS KMS encryption.

    - **ProvisionedThroughputOverride** *(dict) --*

      Replica-specific provisioned throughput. If not described, uses the source table's provisioned
      throughput settings.

      - **ReadCapacityUnits** *(integer) --*

        Replica-specific read capacity units. If not specified, uses the source table's read
        capacity settings.

    - **GlobalSecondaryIndexes** *(list) --*

      Replica-specific global secondary index settings.

      - *(dict) --*

        Represents the properties of a replica global secondary index.

        - **IndexName** *(string) --*

          The name of the global secondary index.

        - **ProvisionedThroughputOverride** *(dict) --*

          If not described, uses the source table GSI's read capacity settings.

          - **ReadCapacityUnits** *(integer) --*

            Replica-specific read capacity units. If not specified, uses the source table's read
            capacity settings.
    """


_ClientCreateTableResponseTableDescriptionRestoreSummaryTypeDef = TypedDict(
    "_ClientCreateTableResponseTableDescriptionRestoreSummaryTypeDef",
    {
        "SourceBackupArn": str,
        "SourceTableArn": str,
        "RestoreDateTime": datetime,
        "RestoreInProgress": bool,
    },
    total=False,
)


class ClientCreateTableResponseTableDescriptionRestoreSummaryTypeDef(
    _ClientCreateTableResponseTableDescriptionRestoreSummaryTypeDef
):
    """
    Type definition for `ClientCreateTableResponseTableDescription` `RestoreSummary`

    Contains details for the restore.

    - **SourceBackupArn** *(string) --*

      The Amazon Resource Name (ARN) of the backup from which the table was restored.

    - **SourceTableArn** *(string) --*

      The ARN of the source table of the backup that is being restored.

    - **RestoreDateTime** *(datetime) --*

      Point in time or source backup time.

    - **RestoreInProgress** *(boolean) --*

      Indicates if a restore is in progress or not.
    """


_ClientCreateTableResponseTableDescriptionSSEDescriptionTypeDef = TypedDict(
    "_ClientCreateTableResponseTableDescriptionSSEDescriptionTypeDef",
    {
        "Status": str,
        "SSEType": str,
        "KMSMasterKeyArn": str,
        "InaccessibleEncryptionDateTime": datetime,
    },
    total=False,
)


class ClientCreateTableResponseTableDescriptionSSEDescriptionTypeDef(
    _ClientCreateTableResponseTableDescriptionSSEDescriptionTypeDef
):
    """
    Type definition for `ClientCreateTableResponseTableDescription` `SSEDescription`

    The description of the server-side encryption status on the specified table.

    - **Status** *(string) --*

      Represents the current state of server-side encryption. The only supported values are:

      * ``ENABLED`` - Server-side encryption is enabled.

      * ``UPDATING`` - Server-side encryption is being updated.

    - **SSEType** *(string) --*

      Server-side encryption type. The only supported value is:

      * ``KMS`` - Server-side encryption that uses AWS Key Management Service. The key is stored in
      your account and is managed by AWS KMS (AWS KMS charges apply).

    - **KMSMasterKeyArn** *(string) --*

      The AWS KMS customer master key (CMK) ARN used for the AWS KMS encryption.

    - **InaccessibleEncryptionDateTime** *(datetime) --*

      Indicates the time, in UNIX epoch date format, when DynamoDB detected that the table's AWS KMS
      key was inaccessible. This attribute will automatically be cleared when DynamoDB detects that
      the table's AWS KMS key is accessible again. DynamoDB will initiate the table archival process
      when table's AWS KMS key remains inaccessible for more than seven days from this date.
    """


_ClientCreateTableResponseTableDescriptionStreamSpecificationTypeDef = TypedDict(
    "_ClientCreateTableResponseTableDescriptionStreamSpecificationTypeDef",
    {"StreamEnabled": bool, "StreamViewType": str},
    total=False,
)


class ClientCreateTableResponseTableDescriptionStreamSpecificationTypeDef(
    _ClientCreateTableResponseTableDescriptionStreamSpecificationTypeDef
):
    """
    Type definition for `ClientCreateTableResponseTableDescription` `StreamSpecification`

    The current DynamoDB Streams configuration for the table.

    - **StreamEnabled** *(boolean) --*

      Indicates whether DynamoDB Streams is enabled (true) or disabled (false) on the table.

    - **StreamViewType** *(string) --*

      When an item in the table is modified, ``StreamViewType`` determines what information is
      written to the stream for this table. Valid values for ``StreamViewType`` are:

      * ``KEYS_ONLY`` - Only the key attributes of the modified item are written to the stream.

      * ``NEW_IMAGE`` - The entire item, as it appears after it was modified, is written to the
      stream.

      * ``OLD_IMAGE`` - The entire item, as it appeared before it was modified, is written to the
      stream.

      * ``NEW_AND_OLD_IMAGES`` - Both the new and the old item images of the item are written to the
      stream.
    """


_ClientCreateTableResponseTableDescriptionTypeDef = TypedDict(
    "_ClientCreateTableResponseTableDescriptionTypeDef",
    {
        "AttributeDefinitions": List[
            ClientCreateTableResponseTableDescriptionAttributeDefinitionsTypeDef
        ],
        "TableName": str,
        "KeySchema": List[ClientCreateTableResponseTableDescriptionKeySchemaTypeDef],
        "TableStatus": str,
        "CreationDateTime": datetime,
        "ProvisionedThroughput": ClientCreateTableResponseTableDescriptionProvisionedThroughputTypeDef,
        "TableSizeBytes": int,
        "ItemCount": int,
        "TableArn": str,
        "TableId": str,
        "BillingModeSummary": ClientCreateTableResponseTableDescriptionBillingModeSummaryTypeDef,
        "LocalSecondaryIndexes": List[
            ClientCreateTableResponseTableDescriptionLocalSecondaryIndexesTypeDef
        ],
        "GlobalSecondaryIndexes": List[
            ClientCreateTableResponseTableDescriptionGlobalSecondaryIndexesTypeDef
        ],
        "StreamSpecification": ClientCreateTableResponseTableDescriptionStreamSpecificationTypeDef,
        "LatestStreamLabel": str,
        "LatestStreamArn": str,
        "GlobalTableVersion": str,
        "Replicas": List[ClientCreateTableResponseTableDescriptionReplicasTypeDef],
        "RestoreSummary": ClientCreateTableResponseTableDescriptionRestoreSummaryTypeDef,
        "SSEDescription": ClientCreateTableResponseTableDescriptionSSEDescriptionTypeDef,
        "ArchivalSummary": ClientCreateTableResponseTableDescriptionArchivalSummaryTypeDef,
    },
    total=False,
)


class ClientCreateTableResponseTableDescriptionTypeDef(
    _ClientCreateTableResponseTableDescriptionTypeDef
):
    """
    Type definition for `ClientCreateTableResponse` `TableDescription`

    Represents the properties of the table.

    - **AttributeDefinitions** *(list) --*

      An array of ``AttributeDefinition`` objects. Each of these objects describes one attribute in
      the table and index key schema.

      Each ``AttributeDefinition`` object in this array is composed of:

      * ``AttributeName`` - The name of the attribute.

      * ``AttributeType`` - The data type for the attribute.

      - *(dict) --*

        Represents an attribute for describing the key schema for the table and indexes.

        - **AttributeName** *(string) --*

          A name for the attribute.

        - **AttributeType** *(string) --*

          The data type for the attribute, where:

          * ``S`` - the attribute is of type String

          * ``N`` - the attribute is of type Number

          * ``B`` - the attribute is of type Binary

    - **TableName** *(string) --*

      The name of the table.

    - **KeySchema** *(list) --*

      The primary key structure for the table. Each ``KeySchemaElement`` consists of:

      * ``AttributeName`` - The name of the attribute.

      * ``KeyType`` - The role of the attribute:

        * ``HASH`` - partition key

        * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.

      For more information about primary keys, see `Primary Key
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html#DataModelPrimaryKey>`__
      in the *Amazon DynamoDB Developer Guide* .

      - *(dict) --*

        Represents *a single element* of a key schema. A key schema specifies the attributes that
        make up the primary key of a table, or the key attributes of an index.

        A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
        simple primary key would be represented by one ``KeySchemaElement`` (for the partition key).
        A composite primary key would require one ``KeySchemaElement`` for the partition key, and
        another ``KeySchemaElement`` for the sort key.

        A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The
        data type must be one of String, Number, or Binary. The attribute cannot be nested within a
        List or a Map.

        - **AttributeName** *(string) --*

          The name of a key attribute.

        - **KeyType** *(string) --*

          The role that this key attribute will assume:

          * ``HASH`` - partition key

          * ``RANGE`` - sort key

          .. note::

            The partition key of an item is also known as its *hash attribute* . The term "hash
            attribute" derives from DynamoDB's usage of an internal hash function to evenly
            distribute data items across partitions, based on their partition key values.

            The sort key of an item is also known as its *range attribute* . The term "range
            attribute" derives from the way DynamoDB stores items with the same partition key
            physically close together, in sorted order by the sort key value.

    - **TableStatus** *(string) --*

      The current state of the table:

      * ``CREATING`` - The table is being created.

      * ``UPDATING`` - The table is being updated.

      * ``DELETING`` - The table is being deleted.

      * ``ACTIVE`` - The table is ready for use.

      * ``INACCESSIBLE_ENCRYPTION_CREDENTIALS`` - The AWS KMS key used to encrypt the table in
      inaccessible. Table operations may fail due to failure to use the AWS KMS key. DynamoDB will
      initiate the table archival process when a table's AWS KMS key remains inaccessible for more
      than seven days.

      * ``ARCHIVING`` - The table is being archived. Operations are not allowed until archival is
      complete.

      * ``ARCHIVED`` - The table has been archived. See the ArchivalReason for more information.

    - **CreationDateTime** *(datetime) --*

      The date and time when the table was created, in `UNIX epoch time
      <http://www.epochconverter.com/>`__ format.

    - **ProvisionedThroughput** *(dict) --*

      The provisioned throughput settings for the table, consisting of read and write capacity
      units, along with data about increases and decreases.

      - **LastIncreaseDateTime** *(datetime) --*

        The date and time of the last provisioned throughput increase for this table.

      - **LastDecreaseDateTime** *(datetime) --*

        The date and time of the last provisioned throughput decrease for this table.

      - **NumberOfDecreasesToday** *(integer) --*

        The number of provisioned throughput decreases for this table during this UTC calendar day.
        For current maximums on provisioned throughput decreases, see `Limits
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
        *Amazon DynamoDB Developer Guide* .

      - **ReadCapacityUnits** *(integer) --*

        The maximum number of strongly consistent reads consumed per second before DynamoDB returns
        a ``ThrottlingException`` . Eventually consistent reads require less effort than strongly
        consistent reads, so a setting of 50 ``ReadCapacityUnits`` per second provides 100
        eventually consistent ``ReadCapacityUnits`` per second.

      - **WriteCapacityUnits** *(integer) --*

        The maximum number of writes consumed per second before DynamoDB returns a
        ``ThrottlingException`` .

    - **TableSizeBytes** *(integer) --*

      The total size of the specified table, in bytes. DynamoDB updates this value approximately
      every six hours. Recent changes might not be reflected in this value.

    - **ItemCount** *(integer) --*

      The number of items in the specified table. DynamoDB updates this value approximately every
      six hours. Recent changes might not be reflected in this value.

    - **TableArn** *(string) --*

      The Amazon Resource Name (ARN) that uniquely identifies the table.

    - **TableId** *(string) --*

      Unique identifier for the table for which the backup was created.

    - **BillingModeSummary** *(dict) --*

      Contains the details for the read/write capacity mode.

      - **BillingMode** *(string) --*

        Controls how you are charged for read and write throughput and how you manage capacity. This
        setting can be changed later.

        * ``PROVISIONED`` - Sets the read/write capacity mode to ``PROVISIONED`` . We recommend
        using ``PROVISIONED`` for predictable workloads.

        * ``PAY_PER_REQUEST`` - Sets the read/write capacity mode to ``PAY_PER_REQUEST`` . We
        recommend using ``PAY_PER_REQUEST`` for unpredictable workloads.

      - **LastUpdateToPayPerRequestDateTime** *(datetime) --*

        Represents the time when ``PAY_PER_REQUEST`` was last set as the read/write capacity mode.

    - **LocalSecondaryIndexes** *(list) --*

      Represents one or more local secondary indexes on the table. Each index is scoped to a given
      partition key value. Tables with one or more local secondary indexes are subject to an item
      collection size limit, where the amount of data within a given item collection cannot exceed
      10 GB. Each element is composed of:

      * ``IndexName`` - The name of the local secondary index.

      * ``KeySchema`` - Specifies the complete index key schema. The attribute names in the key
      schema must be between 1 and 255 characters (inclusive). The key schema must begin with the
      same partition key as the table.

      * ``Projection`` - Specifies attributes that are copied (projected) from the table into the
      index. These are in addition to the primary key attributes and index key attributes, which are
      automatically projected. Each attribute specification is composed of:

        * ``ProjectionType`` - One of the following:

          * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

          * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list
          of projected attributes is in ``NonKeyAttributes`` .

          * ``ALL`` - All of the table attributes are projected into the index.

        * ``NonKeyAttributes`` - A list of one or more non-key attribute names that are projected
        into the secondary index. The total count of attributes provided in ``NonKeyAttributes`` ,
        summed across all of the secondary indexes, must not exceed 20. If you project the same
        attribute into two different indexes, this counts as two distinct attributes when
        determining the total.

      * ``IndexSizeBytes`` - Represents the total size of the index, in bytes. DynamoDB updates this
      value approximately every six hours. Recent changes might not be reflected in this value.

      * ``ItemCount`` - Represents the number of items in the index. DynamoDB updates this value
      approximately every six hours. Recent changes might not be reflected in this value.

      If the table is in the ``DELETING`` state, no information about indexes will be returned.

      - *(dict) --*

        Represents the properties of a local secondary index.

        - **IndexName** *(string) --*

          Represents the name of the local secondary index.

        - **KeySchema** *(list) --*

          The complete key schema for the local secondary index, consisting of one or more pairs of
          attribute names and key types:

          * ``HASH`` - partition key

          * ``RANGE`` - sort key

          .. note::

            The partition key of an item is also known as its *hash attribute* . The term "hash
            attribute" derives from DynamoDB's usage of an internal hash function to evenly
            distribute data items across partitions, based on their partition key values.

            The sort key of an item is also known as its *range attribute* . The term "range
            attribute" derives from the way DynamoDB stores items with the same partition key
            physically close together, in sorted order by the sort key value.

          - *(dict) --*

            Represents *a single element* of a key schema. A key schema specifies the attributes
            that make up the primary key of a table, or the key attributes of an index.

            A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example,
            a simple primary key would be represented by one ``KeySchemaElement`` (for the partition
            key). A composite primary key would require one ``KeySchemaElement`` for the partition
            key, and another ``KeySchemaElement`` for the sort key.

            A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute).
            The data type must be one of String, Number, or Binary. The attribute cannot be nested
            within a List or a Map.

            - **AttributeName** *(string) --*

              The name of a key attribute.

            - **KeyType** *(string) --*

              The role that this key attribute will assume:

              * ``HASH`` - partition key

              * ``RANGE`` - sort key

              .. note::

                The partition key of an item is also known as its *hash attribute* . The term "hash
                attribute" derives from DynamoDB's usage of an internal hash function to evenly
                distribute data items across partitions, based on their partition key values.

                The sort key of an item is also known as its *range attribute* . The term "range
                attribute" derives from the way DynamoDB stores items with the same partition key
                physically close together, in sorted order by the sort key value.

        - **Projection** *(dict) --*

          Represents attributes that are copied (projected) from the table into the global secondary
          index. These are in addition to the primary key attributes and index key attributes, which
          are automatically projected.

          - **ProjectionType** *(string) --*

            The set of attributes that are projected into the index:

            * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

            * ``INCLUDE`` - Only the specified table attributes are projected into the index. The
            list of projected attributes is in ``NonKeyAttributes`` .

            * ``ALL`` - All of the table attributes are projected into the index.

          - **NonKeyAttributes** *(list) --*

            Represents the non-key attribute names which will be projected into the index.

            For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all
            of the local secondary indexes, must not exceed 20. If you project the same attribute
            into two different indexes, this counts as two distinct attributes when determining the
            total.

            - *(string) --*

        - **IndexSizeBytes** *(integer) --*

          The total size of the specified index, in bytes. DynamoDB updates this value approximately
          every six hours. Recent changes might not be reflected in this value.

        - **ItemCount** *(integer) --*

          The number of items in the specified index. DynamoDB updates this value approximately
          every six hours. Recent changes might not be reflected in this value.

        - **IndexArn** *(string) --*

          The Amazon Resource Name (ARN) that uniquely identifies the index.

    - **GlobalSecondaryIndexes** *(list) --*

      The global secondary indexes, if any, on the table. Each index is scoped to a given partition
      key value. Each element is composed of:

      * ``Backfilling`` - If true, then the index is currently in the backfilling phase. Backfilling
      occurs only when a new global secondary index is added to the table. It is the process by
      which DynamoDB populates the new index with data from the table. (This attribute does not
      appear for indexes that were created during a ``CreateTable`` operation.)  You can delete an
      index that is being created during the ``Backfilling`` phase when ``IndexStatus`` is set to
      CREATING and ``Backfilling`` is true. You can't delete the index that is being created when
      ``IndexStatus`` is set to CREATING and ``Backfilling`` is false. (This attribute does not
      appear for indexes that were created during a ``CreateTable`` operation.)

      * ``IndexName`` - The name of the global secondary index.

      * ``IndexSizeBytes`` - The total size of the global secondary index, in bytes. DynamoDB
      updates this value approximately every six hours. Recent changes might not be reflected in
      this value.

      * ``IndexStatus`` - The current status of the global secondary index:

        * ``CREATING`` - The index is being created.

        * ``UPDATING`` - The index is being updated.

        * ``DELETING`` - The index is being deleted.

        * ``ACTIVE`` - The index is ready for use.

      * ``ItemCount`` - The number of items in the global secondary index. DynamoDB updates this
      value approximately every six hours. Recent changes might not be reflected in this value.

      * ``KeySchema`` - Specifies the complete index key schema. The attribute names in the key
      schema must be between 1 and 255 characters (inclusive). The key schema must begin with the
      same partition key as the table.

      * ``Projection`` - Specifies attributes that are copied (projected) from the table into the
      index. These are in addition to the primary key attributes and index key attributes, which are
      automatically projected. Each attribute specification is composed of:

        * ``ProjectionType`` - One of the following:

          * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

          * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list
          of projected attributes is in ``NonKeyAttributes`` .

          * ``ALL`` - All of the table attributes are projected into the index.

        * ``NonKeyAttributes`` - A list of one or more non-key attribute names that are projected
        into the secondary index. The total count of attributes provided in ``NonKeyAttributes`` ,
        summed across all of the secondary indexes, must not exceed 20. If you project the same
        attribute into two different indexes, this counts as two distinct attributes when
        determining the total.

      * ``ProvisionedThroughput`` - The provisioned throughput settings for the global secondary
      index, consisting of read and write capacity units, along with data about increases and
      decreases.

      If the table is in the ``DELETING`` state, no information about indexes will be returned.

      - *(dict) --*

        Represents the properties of a global secondary index.

        - **IndexName** *(string) --*

          The name of the global secondary index.

        - **KeySchema** *(list) --*

          The complete key schema for a global secondary index, which consists of one or more pairs
          of attribute names and key types:

          * ``HASH`` - partition key

          * ``RANGE`` - sort key

          .. note::

            The partition key of an item is also known as its *hash attribute* . The term "hash
            attribute" derives from DynamoDB's usage of an internal hash function to evenly
            distribute data items across partitions, based on their partition key values.

            The sort key of an item is also known as its *range attribute* . The term "range
            attribute" derives from the way DynamoDB stores items with the same partition key
            physically close together, in sorted order by the sort key value.

          - *(dict) --*

            Represents *a single element* of a key schema. A key schema specifies the attributes
            that make up the primary key of a table, or the key attributes of an index.

            A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example,
            a simple primary key would be represented by one ``KeySchemaElement`` (for the partition
            key). A composite primary key would require one ``KeySchemaElement`` for the partition
            key, and another ``KeySchemaElement`` for the sort key.

            A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute).
            The data type must be one of String, Number, or Binary. The attribute cannot be nested
            within a List or a Map.

            - **AttributeName** *(string) --*

              The name of a key attribute.

            - **KeyType** *(string) --*

              The role that this key attribute will assume:

              * ``HASH`` - partition key

              * ``RANGE`` - sort key

              .. note::

                The partition key of an item is also known as its *hash attribute* . The term "hash
                attribute" derives from DynamoDB's usage of an internal hash function to evenly
                distribute data items across partitions, based on their partition key values.

                The sort key of an item is also known as its *range attribute* . The term "range
                attribute" derives from the way DynamoDB stores items with the same partition key
                physically close together, in sorted order by the sort key value.

        - **Projection** *(dict) --*

          Represents attributes that are copied (projected) from the table into the global secondary
          index. These are in addition to the primary key attributes and index key attributes, which
          are automatically projected.

          - **ProjectionType** *(string) --*

            The set of attributes that are projected into the index:

            * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

            * ``INCLUDE`` - Only the specified table attributes are projected into the index. The
            list of projected attributes is in ``NonKeyAttributes`` .

            * ``ALL`` - All of the table attributes are projected into the index.

          - **NonKeyAttributes** *(list) --*

            Represents the non-key attribute names which will be projected into the index.

            For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all
            of the local secondary indexes, must not exceed 20. If you project the same attribute
            into two different indexes, this counts as two distinct attributes when determining the
            total.

            - *(string) --*

        - **IndexStatus** *(string) --*

          The current state of the global secondary index:

          * ``CREATING`` - The index is being created.

          * ``UPDATING`` - The index is being updated.

          * ``DELETING`` - The index is being deleted.

          * ``ACTIVE`` - The index is ready for use.

        - **Backfilling** *(boolean) --*

          Indicates whether the index is currently backfilling. *Backfilling* is the process of
          reading items from the table and determining whether they can be added to the index. (Not
          all items will qualify: For example, a partition key cannot have any duplicate values.) If
          an item can be added to the index, DynamoDB will do so. After all items have been
          processed, the backfilling operation is complete and ``Backfilling`` is false.

          You can delete an index that is being created during the ``Backfilling`` phase when
          ``IndexStatus`` is set to CREATING and ``Backfilling`` is true. You can't delete the index
          that is being created when ``IndexStatus`` is set to CREATING and ``Backfilling`` is
          false.

          .. note::

            For indexes that were created during a ``CreateTable`` operation, the ``Backfilling``
            attribute does not appear in the ``DescribeTable`` output.

        - **ProvisionedThroughput** *(dict) --*

          Represents the provisioned throughput settings for the specified global secondary index.

          For current minimum and maximum provisioned throughput values, see `Limits
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
          *Amazon DynamoDB Developer Guide* .

          - **LastIncreaseDateTime** *(datetime) --*

            The date and time of the last provisioned throughput increase for this table.

          - **LastDecreaseDateTime** *(datetime) --*

            The date and time of the last provisioned throughput decrease for this table.

          - **NumberOfDecreasesToday** *(integer) --*

            The number of provisioned throughput decreases for this table during this UTC calendar
            day. For current maximums on provisioned throughput decreases, see `Limits
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
            *Amazon DynamoDB Developer Guide* .

          - **ReadCapacityUnits** *(integer) --*

            The maximum number of strongly consistent reads consumed per second before DynamoDB
            returns a ``ThrottlingException`` . Eventually consistent reads require less effort than
            strongly consistent reads, so a setting of 50 ``ReadCapacityUnits`` per second provides
            100 eventually consistent ``ReadCapacityUnits`` per second.

          - **WriteCapacityUnits** *(integer) --*

            The maximum number of writes consumed per second before DynamoDB returns a
            ``ThrottlingException`` .

        - **IndexSizeBytes** *(integer) --*

          The total size of the specified index, in bytes. DynamoDB updates this value approximately
          every six hours. Recent changes might not be reflected in this value.

        - **ItemCount** *(integer) --*

          The number of items in the specified index. DynamoDB updates this value approximately
          every six hours. Recent changes might not be reflected in this value.

        - **IndexArn** *(string) --*

          The Amazon Resource Name (ARN) that uniquely identifies the index.

    - **StreamSpecification** *(dict) --*

      The current DynamoDB Streams configuration for the table.

      - **StreamEnabled** *(boolean) --*

        Indicates whether DynamoDB Streams is enabled (true) or disabled (false) on the table.

      - **StreamViewType** *(string) --*

        When an item in the table is modified, ``StreamViewType`` determines what information is
        written to the stream for this table. Valid values for ``StreamViewType`` are:

        * ``KEYS_ONLY`` - Only the key attributes of the modified item are written to the stream.

        * ``NEW_IMAGE`` - The entire item, as it appears after it was modified, is written to the
        stream.

        * ``OLD_IMAGE`` - The entire item, as it appeared before it was modified, is written to the
        stream.

        * ``NEW_AND_OLD_IMAGES`` - Both the new and the old item images of the item are written to
        the stream.

    - **LatestStreamLabel** *(string) --*

      A timestamp, in ISO 8601 format, for this stream.

      Note that ``LatestStreamLabel`` is not a unique identifier for the stream, because it is
      possible that a stream from another table might have the same timestamp. However, the
      combination of the following three elements is guaranteed to be unique:

      * AWS customer ID

      * Table name

      * ``StreamLabel``

    - **LatestStreamArn** *(string) --*

      The Amazon Resource Name (ARN) that uniquely identifies the latest stream for this table.

    - **GlobalTableVersion** *(string) --*

      Represents the version of `global tables
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GlobalTables.html>`__ in
      use, if the table is replicated across AWS Regions.

    - **Replicas** *(list) --*

      Represents replicas of the table.

      - *(dict) --*

        Contains the details of the replica.

        - **RegionName** *(string) --*

          The name of the Region.

        - **ReplicaStatus** *(string) --*

          The current state of the replica:

          * ``CREATING`` - The replica is being created.

          * ``UPDATING`` - The replica is being updated.

          * ``DELETING`` - The replica is being deleted.

          * ``ACTIVE`` - The replica is ready for use.

        - **ReplicaStatusDescription** *(string) --*

          Detailed information about the replica status.

        - **ReplicaStatusPercentProgress** *(string) --*

          Specifies the progress of a Create, Update, or Delete action on the replica as a
          percentage.

        - **KMSMasterKeyId** *(string) --*

          The AWS KMS customer master key (CMK) of the replica that will be used for AWS KMS
          encryption.

        - **ProvisionedThroughputOverride** *(dict) --*

          Replica-specific provisioned throughput. If not described, uses the source table's
          provisioned throughput settings.

          - **ReadCapacityUnits** *(integer) --*

            Replica-specific read capacity units. If not specified, uses the source table's read
            capacity settings.

        - **GlobalSecondaryIndexes** *(list) --*

          Replica-specific global secondary index settings.

          - *(dict) --*

            Represents the properties of a replica global secondary index.

            - **IndexName** *(string) --*

              The name of the global secondary index.

            - **ProvisionedThroughputOverride** *(dict) --*

              If not described, uses the source table GSI's read capacity settings.

              - **ReadCapacityUnits** *(integer) --*

                Replica-specific read capacity units. If not specified, uses the source table's read
                capacity settings.

    - **RestoreSummary** *(dict) --*

      Contains details for the restore.

      - **SourceBackupArn** *(string) --*

        The Amazon Resource Name (ARN) of the backup from which the table was restored.

      - **SourceTableArn** *(string) --*

        The ARN of the source table of the backup that is being restored.

      - **RestoreDateTime** *(datetime) --*

        Point in time or source backup time.

      - **RestoreInProgress** *(boolean) --*

        Indicates if a restore is in progress or not.

    - **SSEDescription** *(dict) --*

      The description of the server-side encryption status on the specified table.

      - **Status** *(string) --*

        Represents the current state of server-side encryption. The only supported values are:

        * ``ENABLED`` - Server-side encryption is enabled.

        * ``UPDATING`` - Server-side encryption is being updated.

      - **SSEType** *(string) --*

        Server-side encryption type. The only supported value is:

        * ``KMS`` - Server-side encryption that uses AWS Key Management Service. The key is stored
        in your account and is managed by AWS KMS (AWS KMS charges apply).

      - **KMSMasterKeyArn** *(string) --*

        The AWS KMS customer master key (CMK) ARN used for the AWS KMS encryption.

      - **InaccessibleEncryptionDateTime** *(datetime) --*

        Indicates the time, in UNIX epoch date format, when DynamoDB detected that the table's AWS
        KMS key was inaccessible. This attribute will automatically be cleared when DynamoDB detects
        that the table's AWS KMS key is accessible again. DynamoDB will initiate the table archival
        process when table's AWS KMS key remains inaccessible for more than seven days from this
        date.

    - **ArchivalSummary** *(dict) --*

      Contains information about the table archive.

      - **ArchivalDateTime** *(datetime) --*

        The date and time when table archival was initiated by DynamoDB, in UNIX epoch time format.

      - **ArchivalReason** *(string) --*

        The reason DynamoDB archived the table. Currently, the only possible value is:

        * ``INACCESSIBLE_ENCRYPTION_CREDENTIALS`` - The table was archived due to the table's AWS
        KMS key being inaccessible for more than seven days. An On-Demand backup was created at the
        archival time.

      - **ArchivalBackupArn** *(string) --*

        The Amazon Resource Name (ARN) of the backup the table was archived to, when applicable in
        the archival reason. If you wish to restore this backup to the same table name, you will
        need to delete the original table.
    """


_ClientCreateTableResponseTypeDef = TypedDict(
    "_ClientCreateTableResponseTypeDef",
    {"TableDescription": ClientCreateTableResponseTableDescriptionTypeDef},
    total=False,
)


class ClientCreateTableResponseTypeDef(_ClientCreateTableResponseTypeDef):
    """
    Type definition for `ClientCreateTable` `Response`

    Represents the output of a ``CreateTable`` operation.

    - **TableDescription** *(dict) --*

      Represents the properties of the table.

      - **AttributeDefinitions** *(list) --*

        An array of ``AttributeDefinition`` objects. Each of these objects describes one attribute
        in the table and index key schema.

        Each ``AttributeDefinition`` object in this array is composed of:

        * ``AttributeName`` - The name of the attribute.

        * ``AttributeType`` - The data type for the attribute.

        - *(dict) --*

          Represents an attribute for describing the key schema for the table and indexes.

          - **AttributeName** *(string) --*

            A name for the attribute.

          - **AttributeType** *(string) --*

            The data type for the attribute, where:

            * ``S`` - the attribute is of type String

            * ``N`` - the attribute is of type Number

            * ``B`` - the attribute is of type Binary

      - **TableName** *(string) --*

        The name of the table.

      - **KeySchema** *(list) --*

        The primary key structure for the table. Each ``KeySchemaElement`` consists of:

        * ``AttributeName`` - The name of the attribute.

        * ``KeyType`` - The role of the attribute:

          * ``HASH`` - partition key

          * ``RANGE`` - sort key

        .. note::

          The partition key of an item is also known as its *hash attribute* . The term "hash
          attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
          data items across partitions, based on their partition key values.

          The sort key of an item is also known as its *range attribute* . The term "range
          attribute" derives from the way DynamoDB stores items with the same partition key
          physically close together, in sorted order by the sort key value.

        For more information about primary keys, see `Primary Key
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html#DataModelPrimaryKey>`__
        in the *Amazon DynamoDB Developer Guide* .

        - *(dict) --*

          Represents *a single element* of a key schema. A key schema specifies the attributes that
          make up the primary key of a table, or the key attributes of an index.

          A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
          simple primary key would be represented by one ``KeySchemaElement`` (for the partition
          key). A composite primary key would require one ``KeySchemaElement`` for the partition
          key, and another ``KeySchemaElement`` for the sort key.

          A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The
          data type must be one of String, Number, or Binary. The attribute cannot be nested within
          a List or a Map.

          - **AttributeName** *(string) --*

            The name of a key attribute.

          - **KeyType** *(string) --*

            The role that this key attribute will assume:

            * ``HASH`` - partition key

            * ``RANGE`` - sort key

            .. note::

              The partition key of an item is also known as its *hash attribute* . The term "hash
              attribute" derives from DynamoDB's usage of an internal hash function to evenly
              distribute data items across partitions, based on their partition key values.

              The sort key of an item is also known as its *range attribute* . The term "range
              attribute" derives from the way DynamoDB stores items with the same partition key
              physically close together, in sorted order by the sort key value.

      - **TableStatus** *(string) --*

        The current state of the table:

        * ``CREATING`` - The table is being created.

        * ``UPDATING`` - The table is being updated.

        * ``DELETING`` - The table is being deleted.

        * ``ACTIVE`` - The table is ready for use.

        * ``INACCESSIBLE_ENCRYPTION_CREDENTIALS`` - The AWS KMS key used to encrypt the table in
        inaccessible. Table operations may fail due to failure to use the AWS KMS key. DynamoDB will
        initiate the table archival process when a table's AWS KMS key remains inaccessible for more
        than seven days.

        * ``ARCHIVING`` - The table is being archived. Operations are not allowed until archival is
        complete.

        * ``ARCHIVED`` - The table has been archived. See the ArchivalReason for more information.

      - **CreationDateTime** *(datetime) --*

        The date and time when the table was created, in `UNIX epoch time
        <http://www.epochconverter.com/>`__ format.

      - **ProvisionedThroughput** *(dict) --*

        The provisioned throughput settings for the table, consisting of read and write capacity
        units, along with data about increases and decreases.

        - **LastIncreaseDateTime** *(datetime) --*

          The date and time of the last provisioned throughput increase for this table.

        - **LastDecreaseDateTime** *(datetime) --*

          The date and time of the last provisioned throughput decrease for this table.

        - **NumberOfDecreasesToday** *(integer) --*

          The number of provisioned throughput decreases for this table during this UTC calendar
          day. For current maximums on provisioned throughput decreases, see `Limits
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
          *Amazon DynamoDB Developer Guide* .

        - **ReadCapacityUnits** *(integer) --*

          The maximum number of strongly consistent reads consumed per second before DynamoDB
          returns a ``ThrottlingException`` . Eventually consistent reads require less effort than
          strongly consistent reads, so a setting of 50 ``ReadCapacityUnits`` per second provides
          100 eventually consistent ``ReadCapacityUnits`` per second.

        - **WriteCapacityUnits** *(integer) --*

          The maximum number of writes consumed per second before DynamoDB returns a
          ``ThrottlingException`` .

      - **TableSizeBytes** *(integer) --*

        The total size of the specified table, in bytes. DynamoDB updates this value approximately
        every six hours. Recent changes might not be reflected in this value.

      - **ItemCount** *(integer) --*

        The number of items in the specified table. DynamoDB updates this value approximately every
        six hours. Recent changes might not be reflected in this value.

      - **TableArn** *(string) --*

        The Amazon Resource Name (ARN) that uniquely identifies the table.

      - **TableId** *(string) --*

        Unique identifier for the table for which the backup was created.

      - **BillingModeSummary** *(dict) --*

        Contains the details for the read/write capacity mode.

        - **BillingMode** *(string) --*

          Controls how you are charged for read and write throughput and how you manage capacity.
          This setting can be changed later.

          * ``PROVISIONED`` - Sets the read/write capacity mode to ``PROVISIONED`` . We recommend
          using ``PROVISIONED`` for predictable workloads.

          * ``PAY_PER_REQUEST`` - Sets the read/write capacity mode to ``PAY_PER_REQUEST`` . We
          recommend using ``PAY_PER_REQUEST`` for unpredictable workloads.

        - **LastUpdateToPayPerRequestDateTime** *(datetime) --*

          Represents the time when ``PAY_PER_REQUEST`` was last set as the read/write capacity mode.

      - **LocalSecondaryIndexes** *(list) --*

        Represents one or more local secondary indexes on the table. Each index is scoped to a given
        partition key value. Tables with one or more local secondary indexes are subject to an item
        collection size limit, where the amount of data within a given item collection cannot exceed
        10 GB. Each element is composed of:

        * ``IndexName`` - The name of the local secondary index.

        * ``KeySchema`` - Specifies the complete index key schema. The attribute names in the key
        schema must be between 1 and 255 characters (inclusive). The key schema must begin with the
        same partition key as the table.

        * ``Projection`` - Specifies attributes that are copied (projected) from the table into the
        index. These are in addition to the primary key attributes and index key attributes, which
        are automatically projected. Each attribute specification is composed of:

          * ``ProjectionType`` - One of the following:

            * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

            * ``INCLUDE`` - Only the specified table attributes are projected into the index. The
            list of projected attributes is in ``NonKeyAttributes`` .

            * ``ALL`` - All of the table attributes are projected into the index.

          * ``NonKeyAttributes`` - A list of one or more non-key attribute names that are projected
          into the secondary index. The total count of attributes provided in ``NonKeyAttributes`` ,
          summed across all of the secondary indexes, must not exceed 20. If you project the same
          attribute into two different indexes, this counts as two distinct attributes when
          determining the total.

        * ``IndexSizeBytes`` - Represents the total size of the index, in bytes. DynamoDB updates
        this value approximately every six hours. Recent changes might not be reflected in this
        value.

        * ``ItemCount`` - Represents the number of items in the index. DynamoDB updates this value
        approximately every six hours. Recent changes might not be reflected in this value.

        If the table is in the ``DELETING`` state, no information about indexes will be returned.

        - *(dict) --*

          Represents the properties of a local secondary index.

          - **IndexName** *(string) --*

            Represents the name of the local secondary index.

          - **KeySchema** *(list) --*

            The complete key schema for the local secondary index, consisting of one or more pairs
            of attribute names and key types:

            * ``HASH`` - partition key

            * ``RANGE`` - sort key

            .. note::

              The partition key of an item is also known as its *hash attribute* . The term "hash
              attribute" derives from DynamoDB's usage of an internal hash function to evenly
              distribute data items across partitions, based on their partition key values.

              The sort key of an item is also known as its *range attribute* . The term "range
              attribute" derives from the way DynamoDB stores items with the same partition key
              physically close together, in sorted order by the sort key value.

            - *(dict) --*

              Represents *a single element* of a key schema. A key schema specifies the attributes
              that make up the primary key of a table, or the key attributes of an index.

              A ``KeySchemaElement`` represents exactly one attribute of the primary key. For
              example, a simple primary key would be represented by one ``KeySchemaElement`` (for
              the partition key). A composite primary key would require one ``KeySchemaElement`` for
              the partition key, and another ``KeySchemaElement`` for the sort key.

              A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute).
              The data type must be one of String, Number, or Binary. The attribute cannot be nested
              within a List or a Map.

              - **AttributeName** *(string) --*

                The name of a key attribute.

              - **KeyType** *(string) --*

                The role that this key attribute will assume:

                * ``HASH`` - partition key

                * ``RANGE`` - sort key

                .. note::

                  The partition key of an item is also known as its *hash attribute* . The term
                  "hash attribute" derives from DynamoDB's usage of an internal hash function to
                  evenly distribute data items across partitions, based on their partition key
                  values.

                  The sort key of an item is also known as its *range attribute* . The term "range
                  attribute" derives from the way DynamoDB stores items with the same partition key
                  physically close together, in sorted order by the sort key value.

          - **Projection** *(dict) --*

            Represents attributes that are copied (projected) from the table into the global
            secondary index. These are in addition to the primary key attributes and index key
            attributes, which are automatically projected.

            - **ProjectionType** *(string) --*

              The set of attributes that are projected into the index:

              * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

              * ``INCLUDE`` - Only the specified table attributes are projected into the index. The
              list of projected attributes is in ``NonKeyAttributes`` .

              * ``ALL`` - All of the table attributes are projected into the index.

            - **NonKeyAttributes** *(list) --*

              Represents the non-key attribute names which will be projected into the index.

              For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all
              of the local secondary indexes, must not exceed 20. If you project the same attribute
              into two different indexes, this counts as two distinct attributes when determining
              the total.

              - *(string) --*

          - **IndexSizeBytes** *(integer) --*

            The total size of the specified index, in bytes. DynamoDB updates this value
            approximately every six hours. Recent changes might not be reflected in this value.

          - **ItemCount** *(integer) --*

            The number of items in the specified index. DynamoDB updates this value approximately
            every six hours. Recent changes might not be reflected in this value.

          - **IndexArn** *(string) --*

            The Amazon Resource Name (ARN) that uniquely identifies the index.

      - **GlobalSecondaryIndexes** *(list) --*

        The global secondary indexes, if any, on the table. Each index is scoped to a given
        partition key value. Each element is composed of:

        * ``Backfilling`` - If true, then the index is currently in the backfilling phase.
        Backfilling occurs only when a new global secondary index is added to the table. It is the
        process by which DynamoDB populates the new index with data from the table. (This attribute
        does not appear for indexes that were created during a ``CreateTable`` operation.)  You can
        delete an index that is being created during the ``Backfilling`` phase when ``IndexStatus``
        is set to CREATING and ``Backfilling`` is true. You can't delete the index that is being
        created when ``IndexStatus`` is set to CREATING and ``Backfilling`` is false. (This
        attribute does not appear for indexes that were created during a ``CreateTable`` operation.)

        * ``IndexName`` - The name of the global secondary index.

        * ``IndexSizeBytes`` - The total size of the global secondary index, in bytes. DynamoDB
        updates this value approximately every six hours. Recent changes might not be reflected in
        this value.

        * ``IndexStatus`` - The current status of the global secondary index:

          * ``CREATING`` - The index is being created.

          * ``UPDATING`` - The index is being updated.

          * ``DELETING`` - The index is being deleted.

          * ``ACTIVE`` - The index is ready for use.

        * ``ItemCount`` - The number of items in the global secondary index. DynamoDB updates this
        value approximately every six hours. Recent changes might not be reflected in this value.

        * ``KeySchema`` - Specifies the complete index key schema. The attribute names in the key
        schema must be between 1 and 255 characters (inclusive). The key schema must begin with the
        same partition key as the table.

        * ``Projection`` - Specifies attributes that are copied (projected) from the table into the
        index. These are in addition to the primary key attributes and index key attributes, which
        are automatically projected. Each attribute specification is composed of:

          * ``ProjectionType`` - One of the following:

            * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

            * ``INCLUDE`` - Only the specified table attributes are projected into the index. The
            list of projected attributes is in ``NonKeyAttributes`` .

            * ``ALL`` - All of the table attributes are projected into the index.

          * ``NonKeyAttributes`` - A list of one or more non-key attribute names that are projected
          into the secondary index. The total count of attributes provided in ``NonKeyAttributes`` ,
          summed across all of the secondary indexes, must not exceed 20. If you project the same
          attribute into two different indexes, this counts as two distinct attributes when
          determining the total.

        * ``ProvisionedThroughput`` - The provisioned throughput settings for the global secondary
        index, consisting of read and write capacity units, along with data about increases and
        decreases.

        If the table is in the ``DELETING`` state, no information about indexes will be returned.

        - *(dict) --*

          Represents the properties of a global secondary index.

          - **IndexName** *(string) --*

            The name of the global secondary index.

          - **KeySchema** *(list) --*

            The complete key schema for a global secondary index, which consists of one or more
            pairs of attribute names and key types:

            * ``HASH`` - partition key

            * ``RANGE`` - sort key

            .. note::

              The partition key of an item is also known as its *hash attribute* . The term "hash
              attribute" derives from DynamoDB's usage of an internal hash function to evenly
              distribute data items across partitions, based on their partition key values.

              The sort key of an item is also known as its *range attribute* . The term "range
              attribute" derives from the way DynamoDB stores items with the same partition key
              physically close together, in sorted order by the sort key value.

            - *(dict) --*

              Represents *a single element* of a key schema. A key schema specifies the attributes
              that make up the primary key of a table, or the key attributes of an index.

              A ``KeySchemaElement`` represents exactly one attribute of the primary key. For
              example, a simple primary key would be represented by one ``KeySchemaElement`` (for
              the partition key). A composite primary key would require one ``KeySchemaElement`` for
              the partition key, and another ``KeySchemaElement`` for the sort key.

              A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute).
              The data type must be one of String, Number, or Binary. The attribute cannot be nested
              within a List or a Map.

              - **AttributeName** *(string) --*

                The name of a key attribute.

              - **KeyType** *(string) --*

                The role that this key attribute will assume:

                * ``HASH`` - partition key

                * ``RANGE`` - sort key

                .. note::

                  The partition key of an item is also known as its *hash attribute* . The term
                  "hash attribute" derives from DynamoDB's usage of an internal hash function to
                  evenly distribute data items across partitions, based on their partition key
                  values.

                  The sort key of an item is also known as its *range attribute* . The term "range
                  attribute" derives from the way DynamoDB stores items with the same partition key
                  physically close together, in sorted order by the sort key value.

          - **Projection** *(dict) --*

            Represents attributes that are copied (projected) from the table into the global
            secondary index. These are in addition to the primary key attributes and index key
            attributes, which are automatically projected.

            - **ProjectionType** *(string) --*

              The set of attributes that are projected into the index:

              * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

              * ``INCLUDE`` - Only the specified table attributes are projected into the index. The
              list of projected attributes is in ``NonKeyAttributes`` .

              * ``ALL`` - All of the table attributes are projected into the index.

            - **NonKeyAttributes** *(list) --*

              Represents the non-key attribute names which will be projected into the index.

              For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all
              of the local secondary indexes, must not exceed 20. If you project the same attribute
              into two different indexes, this counts as two distinct attributes when determining
              the total.

              - *(string) --*

          - **IndexStatus** *(string) --*

            The current state of the global secondary index:

            * ``CREATING`` - The index is being created.

            * ``UPDATING`` - The index is being updated.

            * ``DELETING`` - The index is being deleted.

            * ``ACTIVE`` - The index is ready for use.

          - **Backfilling** *(boolean) --*

            Indicates whether the index is currently backfilling. *Backfilling* is the process of
            reading items from the table and determining whether they can be added to the index.
            (Not all items will qualify: For example, a partition key cannot have any duplicate
            values.) If an item can be added to the index, DynamoDB will do so. After all items have
            been processed, the backfilling operation is complete and ``Backfilling`` is false.

            You can delete an index that is being created during the ``Backfilling`` phase when
            ``IndexStatus`` is set to CREATING and ``Backfilling`` is true. You can't delete the
            index that is being created when ``IndexStatus`` is set to CREATING and ``Backfilling``
            is false.

            .. note::

              For indexes that were created during a ``CreateTable`` operation, the ``Backfilling``
              attribute does not appear in the ``DescribeTable`` output.

          - **ProvisionedThroughput** *(dict) --*

            Represents the provisioned throughput settings for the specified global secondary index.

            For current minimum and maximum provisioned throughput values, see `Limits
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
            *Amazon DynamoDB Developer Guide* .

            - **LastIncreaseDateTime** *(datetime) --*

              The date and time of the last provisioned throughput increase for this table.

            - **LastDecreaseDateTime** *(datetime) --*

              The date and time of the last provisioned throughput decrease for this table.

            - **NumberOfDecreasesToday** *(integer) --*

              The number of provisioned throughput decreases for this table during this UTC calendar
              day. For current maximums on provisioned throughput decreases, see `Limits
              <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in
              the *Amazon DynamoDB Developer Guide* .

            - **ReadCapacityUnits** *(integer) --*

              The maximum number of strongly consistent reads consumed per second before DynamoDB
              returns a ``ThrottlingException`` . Eventually consistent reads require less effort
              than strongly consistent reads, so a setting of 50 ``ReadCapacityUnits`` per second
              provides 100 eventually consistent ``ReadCapacityUnits`` per second.

            - **WriteCapacityUnits** *(integer) --*

              The maximum number of writes consumed per second before DynamoDB returns a
              ``ThrottlingException`` .

          - **IndexSizeBytes** *(integer) --*

            The total size of the specified index, in bytes. DynamoDB updates this value
            approximately every six hours. Recent changes might not be reflected in this value.

          - **ItemCount** *(integer) --*

            The number of items in the specified index. DynamoDB updates this value approximately
            every six hours. Recent changes might not be reflected in this value.

          - **IndexArn** *(string) --*

            The Amazon Resource Name (ARN) that uniquely identifies the index.

      - **StreamSpecification** *(dict) --*

        The current DynamoDB Streams configuration for the table.

        - **StreamEnabled** *(boolean) --*

          Indicates whether DynamoDB Streams is enabled (true) or disabled (false) on the table.

        - **StreamViewType** *(string) --*

          When an item in the table is modified, ``StreamViewType`` determines what information is
          written to the stream for this table. Valid values for ``StreamViewType`` are:

          * ``KEYS_ONLY`` - Only the key attributes of the modified item are written to the stream.

          * ``NEW_IMAGE`` - The entire item, as it appears after it was modified, is written to the
          stream.

          * ``OLD_IMAGE`` - The entire item, as it appeared before it was modified, is written to
          the stream.

          * ``NEW_AND_OLD_IMAGES`` - Both the new and the old item images of the item are written to
          the stream.

      - **LatestStreamLabel** *(string) --*

        A timestamp, in ISO 8601 format, for this stream.

        Note that ``LatestStreamLabel`` is not a unique identifier for the stream, because it is
        possible that a stream from another table might have the same timestamp. However, the
        combination of the following three elements is guaranteed to be unique:

        * AWS customer ID

        * Table name

        * ``StreamLabel``

      - **LatestStreamArn** *(string) --*

        The Amazon Resource Name (ARN) that uniquely identifies the latest stream for this table.

      - **GlobalTableVersion** *(string) --*

        Represents the version of `global tables
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GlobalTables.html>`__ in
        use, if the table is replicated across AWS Regions.

      - **Replicas** *(list) --*

        Represents replicas of the table.

        - *(dict) --*

          Contains the details of the replica.

          - **RegionName** *(string) --*

            The name of the Region.

          - **ReplicaStatus** *(string) --*

            The current state of the replica:

            * ``CREATING`` - The replica is being created.

            * ``UPDATING`` - The replica is being updated.

            * ``DELETING`` - The replica is being deleted.

            * ``ACTIVE`` - The replica is ready for use.

          - **ReplicaStatusDescription** *(string) --*

            Detailed information about the replica status.

          - **ReplicaStatusPercentProgress** *(string) --*

            Specifies the progress of a Create, Update, or Delete action on the replica as a
            percentage.

          - **KMSMasterKeyId** *(string) --*

            The AWS KMS customer master key (CMK) of the replica that will be used for AWS KMS
            encryption.

          - **ProvisionedThroughputOverride** *(dict) --*

            Replica-specific provisioned throughput. If not described, uses the source table's
            provisioned throughput settings.

            - **ReadCapacityUnits** *(integer) --*

              Replica-specific read capacity units. If not specified, uses the source table's read
              capacity settings.

          - **GlobalSecondaryIndexes** *(list) --*

            Replica-specific global secondary index settings.

            - *(dict) --*

              Represents the properties of a replica global secondary index.

              - **IndexName** *(string) --*

                The name of the global secondary index.

              - **ProvisionedThroughputOverride** *(dict) --*

                If not described, uses the source table GSI's read capacity settings.

                - **ReadCapacityUnits** *(integer) --*

                  Replica-specific read capacity units. If not specified, uses the source table's
                  read capacity settings.

      - **RestoreSummary** *(dict) --*

        Contains details for the restore.

        - **SourceBackupArn** *(string) --*

          The Amazon Resource Name (ARN) of the backup from which the table was restored.

        - **SourceTableArn** *(string) --*

          The ARN of the source table of the backup that is being restored.

        - **RestoreDateTime** *(datetime) --*

          Point in time or source backup time.

        - **RestoreInProgress** *(boolean) --*

          Indicates if a restore is in progress or not.

      - **SSEDescription** *(dict) --*

        The description of the server-side encryption status on the specified table.

        - **Status** *(string) --*

          Represents the current state of server-side encryption. The only supported values are:

          * ``ENABLED`` - Server-side encryption is enabled.

          * ``UPDATING`` - Server-side encryption is being updated.

        - **SSEType** *(string) --*

          Server-side encryption type. The only supported value is:

          * ``KMS`` - Server-side encryption that uses AWS Key Management Service. The key is stored
          in your account and is managed by AWS KMS (AWS KMS charges apply).

        - **KMSMasterKeyArn** *(string) --*

          The AWS KMS customer master key (CMK) ARN used for the AWS KMS encryption.

        - **InaccessibleEncryptionDateTime** *(datetime) --*

          Indicates the time, in UNIX epoch date format, when DynamoDB detected that the table's AWS
          KMS key was inaccessible. This attribute will automatically be cleared when DynamoDB
          detects that the table's AWS KMS key is accessible again. DynamoDB will initiate the table
          archival process when table's AWS KMS key remains inaccessible for more than seven days
          from this date.

      - **ArchivalSummary** *(dict) --*

        Contains information about the table archive.

        - **ArchivalDateTime** *(datetime) --*

          The date and time when table archival was initiated by DynamoDB, in UNIX epoch time
          format.

        - **ArchivalReason** *(string) --*

          The reason DynamoDB archived the table. Currently, the only possible value is:

          * ``INACCESSIBLE_ENCRYPTION_CREDENTIALS`` - The table was archived due to the table's AWS
          KMS key being inaccessible for more than seven days. An On-Demand backup was created at
          the archival time.

        - **ArchivalBackupArn** *(string) --*

          The Amazon Resource Name (ARN) of the backup the table was archived to, when applicable in
          the archival reason. If you wish to restore this backup to the same table name, you will
          need to delete the original table.
    """


_ClientCreateTableSSESpecificationTypeDef = TypedDict(
    "_ClientCreateTableSSESpecificationTypeDef",
    {"Enabled": bool, "SSEType": str, "KMSMasterKeyId": str},
    total=False,
)


class ClientCreateTableSSESpecificationTypeDef(_ClientCreateTableSSESpecificationTypeDef):
    """
    Type definition for `ClientCreateTable` `SSESpecification`

    Represents the settings used to enable server-side encryption.

    - **Enabled** *(boolean) --*

      Indicates whether server-side encryption is done using an AWS managed CMK or an AWS owned CMK.
      If enabled (true), server-side encryption type is set to ``KMS`` and an AWS managed CMK is
      used (AWS KMS charges apply). If disabled (false) or not specified, server-side encryption is
      set to AWS owned CMK.

    - **SSEType** *(string) --*

      Server-side encryption type. The only supported value is:

      * ``KMS`` - Server-side encryption that uses AWS Key Management Service. The key is stored in
      your account and is managed by AWS KMS (AWS KMS charges apply).

    - **KMSMasterKeyId** *(string) --*

      The AWS KMS customer master key (CMK) that should be used for the AWS KMS encryption. To
      specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. Note that
      you should only provide this parameter if the key is different from the default DynamoDB
      customer master key alias/aws/dynamodb.
    """


_RequiredClientCreateTableStreamSpecificationTypeDef = TypedDict(
    "_RequiredClientCreateTableStreamSpecificationTypeDef", {"StreamEnabled": bool}
)
_OptionalClientCreateTableStreamSpecificationTypeDef = TypedDict(
    "_OptionalClientCreateTableStreamSpecificationTypeDef", {"StreamViewType": str}, total=False
)


class ClientCreateTableStreamSpecificationTypeDef(
    _RequiredClientCreateTableStreamSpecificationTypeDef,
    _OptionalClientCreateTableStreamSpecificationTypeDef,
):
    """
    Type definition for `ClientCreateTable` `StreamSpecification`

    The settings for DynamoDB Streams on the table. These settings consist of:

    * ``StreamEnabled`` - Indicates whether DynamoDB Streams is to be enabled (true) or disabled
    (false).

    * ``StreamViewType`` - When an item in the table is modified, ``StreamViewType`` determines what
    information is written to the table's stream. Valid values for ``StreamViewType`` are:

      * ``KEYS_ONLY`` - Only the key attributes of the modified item are written to the stream.

      * ``NEW_IMAGE`` - The entire item, as it appears after it was modified, is written to the
      stream.

      * ``OLD_IMAGE`` - The entire item, as it appeared before it was modified, is written to the
      stream.

      * ``NEW_AND_OLD_IMAGES`` - Both the new and the old item images of the item are written to the
      stream.

    - **StreamEnabled** *(boolean) --* **[REQUIRED]**

      Indicates whether DynamoDB Streams is enabled (true) or disabled (false) on the table.

    - **StreamViewType** *(string) --*

      When an item in the table is modified, ``StreamViewType`` determines what information is
      written to the stream for this table. Valid values for ``StreamViewType`` are:

      * ``KEYS_ONLY`` - Only the key attributes of the modified item are written to the stream.

      * ``NEW_IMAGE`` - The entire item, as it appears after it was modified, is written to the
      stream.

      * ``OLD_IMAGE`` - The entire item, as it appeared before it was modified, is written to the
      stream.

      * ``NEW_AND_OLD_IMAGES`` - Both the new and the old item images of the item are written to the
      stream.
    """


_ClientCreateTableTagsTypeDef = TypedDict(
    "_ClientCreateTableTagsTypeDef", {"Key": str, "Value": str}
)


class ClientCreateTableTagsTypeDef(_ClientCreateTableTagsTypeDef):
    """
    Type definition for `ClientCreateTable` `Tags`

    Describes a tag. A tag is a key-value pair. You can add up to 50 tags to a single DynamoDB
    table.

    AWS-assigned tag names and values are automatically assigned the ``aws:`` prefix, which the user
    cannot assign. AWS-assigned tag names do not count towards the tag limit of 50. User-assigned
    tag names have the prefix ``user:`` in the Cost Allocation Report. You cannot backdate the
    application of a tag.

    For an overview on tagging DynamoDB resources, see `Tagging for DynamoDB
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tagging.html>`__ in the
    *Amazon DynamoDB Developer Guide* .

    - **Key** *(string) --* **[REQUIRED]**

      The key of the tag. Tag keys are case sensitive. Each DynamoDB table can only have up to one
      tag with the same key. If you try to add an existing tag (same key), the existing tag value
      will be updated to the new value.

    - **Value** *(string) --* **[REQUIRED]**

      The value of the tag. Tag values are case-sensitive and can be null.
    """


_ClientDeleteBackupResponseBackupDescriptionBackupDetailsTypeDef = TypedDict(
    "_ClientDeleteBackupResponseBackupDescriptionBackupDetailsTypeDef",
    {
        "BackupArn": str,
        "BackupName": str,
        "BackupSizeBytes": int,
        "BackupStatus": str,
        "BackupType": str,
        "BackupCreationDateTime": datetime,
        "BackupExpiryDateTime": datetime,
    },
    total=False,
)


class ClientDeleteBackupResponseBackupDescriptionBackupDetailsTypeDef(
    _ClientDeleteBackupResponseBackupDescriptionBackupDetailsTypeDef
):
    """
    Type definition for `ClientDeleteBackupResponseBackupDescription` `BackupDetails`

    Contains the details of the backup created for the table.

    - **BackupArn** *(string) --*

      ARN associated with the backup.

    - **BackupName** *(string) --*

      Name of the requested backup.

    - **BackupSizeBytes** *(integer) --*

      Size of the backup in bytes.

    - **BackupStatus** *(string) --*

      Backup can be in one of the following states: CREATING, ACTIVE, DELETED.

    - **BackupType** *(string) --*

      BackupType:

      * ``USER`` - You create and manage these using the on-demand backup feature.

      * ``SYSTEM`` - If you delete a table with point-in-time recovery enabled, a ``SYSTEM`` backup
      is automatically created and is retained for 35 days (at no additional cost). System backups
      allow you to restore the deleted table to the state it was in just before the point of
      deletion.

      * ``AWS_BACKUP`` - On-demand backup created by you from AWS Backup service.

    - **BackupCreationDateTime** *(datetime) --*

      Time at which the backup was created. This is the request time of the backup.

    - **BackupExpiryDateTime** *(datetime) --*

      Time at which the automatic on-demand backup created by DynamoDB will expire. This ``SYSTEM``
      on-demand backup expires automatically 35 days after its creation.
    """


_ClientDeleteBackupResponseBackupDescriptionSourceTableDetailsKeySchemaTypeDef = TypedDict(
    "_ClientDeleteBackupResponseBackupDescriptionSourceTableDetailsKeySchemaTypeDef",
    {"AttributeName": str, "KeyType": str},
    total=False,
)


class ClientDeleteBackupResponseBackupDescriptionSourceTableDetailsKeySchemaTypeDef(
    _ClientDeleteBackupResponseBackupDescriptionSourceTableDetailsKeySchemaTypeDef
):
    """
    Type definition for `ClientDeleteBackupResponseBackupDescriptionSourceTableDetails` `KeySchema`

    Represents *a single element* of a key schema. A key schema specifies the attributes that make
    up the primary key of a table, or the key attributes of an index.

    A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
    simple primary key would be represented by one ``KeySchemaElement`` (for the partition key). A
    composite primary key would require one ``KeySchemaElement`` for the partition key, and another
    ``KeySchemaElement`` for the sort key.

    A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The data
    type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a
    Map.

    - **AttributeName** *(string) --*

      The name of a key attribute.

    - **KeyType** *(string) --*

      The role that this key attribute will assume:

      * ``HASH`` - partition key

      * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.
    """


_ClientDeleteBackupResponseBackupDescriptionSourceTableDetailsProvisionedThroughputTypeDef = TypedDict(
    "_ClientDeleteBackupResponseBackupDescriptionSourceTableDetailsProvisionedThroughputTypeDef",
    {"ReadCapacityUnits": int, "WriteCapacityUnits": int},
    total=False,
)


class ClientDeleteBackupResponseBackupDescriptionSourceTableDetailsProvisionedThroughputTypeDef(
    _ClientDeleteBackupResponseBackupDescriptionSourceTableDetailsProvisionedThroughputTypeDef
):
    """
    Type definition for `ClientDeleteBackupResponseBackupDescriptionSourceTableDetails`
    `ProvisionedThroughput`

    Read IOPs and Write IOPS on the table when the backup was created.

    - **ReadCapacityUnits** *(integer) --*

      The maximum number of strongly consistent reads consumed per second before DynamoDB returns a
      ``ThrottlingException`` . For more information, see `Specifying Read and Write Requirements
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
      in the *Amazon DynamoDB Developer Guide* .

      If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.

    - **WriteCapacityUnits** *(integer) --*

      The maximum number of writes consumed per second before DynamoDB returns a
      ``ThrottlingException`` . For more information, see `Specifying Read and Write Requirements
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
      in the *Amazon DynamoDB Developer Guide* .

      If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.
    """


_ClientDeleteBackupResponseBackupDescriptionSourceTableDetailsTypeDef = TypedDict(
    "_ClientDeleteBackupResponseBackupDescriptionSourceTableDetailsTypeDef",
    {
        "TableName": str,
        "TableId": str,
        "TableArn": str,
        "TableSizeBytes": int,
        "KeySchema": List[
            ClientDeleteBackupResponseBackupDescriptionSourceTableDetailsKeySchemaTypeDef
        ],
        "TableCreationDateTime": datetime,
        "ProvisionedThroughput": ClientDeleteBackupResponseBackupDescriptionSourceTableDetailsProvisionedThroughputTypeDef,
        "ItemCount": int,
        "BillingMode": str,
    },
    total=False,
)


class ClientDeleteBackupResponseBackupDescriptionSourceTableDetailsTypeDef(
    _ClientDeleteBackupResponseBackupDescriptionSourceTableDetailsTypeDef
):
    """
    Type definition for `ClientDeleteBackupResponseBackupDescription` `SourceTableDetails`

    Contains the details of the table when the backup was created.

    - **TableName** *(string) --*

      The name of the table for which the backup was created.

    - **TableId** *(string) --*

      Unique identifier for the table for which the backup was created.

    - **TableArn** *(string) --*

      ARN of the table for which backup was created.

    - **TableSizeBytes** *(integer) --*

      Size of the table in bytes. Note that this is an approximate value.

    - **KeySchema** *(list) --*

      Schema of the table.

      - *(dict) --*

        Represents *a single element* of a key schema. A key schema specifies the attributes that
        make up the primary key of a table, or the key attributes of an index.

        A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
        simple primary key would be represented by one ``KeySchemaElement`` (for the partition key).
        A composite primary key would require one ``KeySchemaElement`` for the partition key, and
        another ``KeySchemaElement`` for the sort key.

        A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The
        data type must be one of String, Number, or Binary. The attribute cannot be nested within a
        List or a Map.

        - **AttributeName** *(string) --*

          The name of a key attribute.

        - **KeyType** *(string) --*

          The role that this key attribute will assume:

          * ``HASH`` - partition key

          * ``RANGE`` - sort key

          .. note::

            The partition key of an item is also known as its *hash attribute* . The term "hash
            attribute" derives from DynamoDB's usage of an internal hash function to evenly
            distribute data items across partitions, based on their partition key values.

            The sort key of an item is also known as its *range attribute* . The term "range
            attribute" derives from the way DynamoDB stores items with the same partition key
            physically close together, in sorted order by the sort key value.

    - **TableCreationDateTime** *(datetime) --*

      Time when the source table was created.

    - **ProvisionedThroughput** *(dict) --*

      Read IOPs and Write IOPS on the table when the backup was created.

      - **ReadCapacityUnits** *(integer) --*

        The maximum number of strongly consistent reads consumed per second before DynamoDB returns
        a ``ThrottlingException`` . For more information, see `Specifying Read and Write
        Requirements
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
        in the *Amazon DynamoDB Developer Guide* .

        If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.

      - **WriteCapacityUnits** *(integer) --*

        The maximum number of writes consumed per second before DynamoDB returns a
        ``ThrottlingException`` . For more information, see `Specifying Read and Write Requirements
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
        in the *Amazon DynamoDB Developer Guide* .

        If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.

    - **ItemCount** *(integer) --*

      Number of items in the table. Note that this is an approximate value.

    - **BillingMode** *(string) --*

      Controls how you are charged for read and write throughput and how you manage capacity. This
      setting can be changed later.

      * ``PROVISIONED`` - Sets the read/write capacity mode to ``PROVISIONED`` . We recommend using
      ``PROVISIONED`` for predictable workloads.

      * ``PAY_PER_REQUEST`` - Sets the read/write capacity mode to ``PAY_PER_REQUEST`` . We
      recommend using ``PAY_PER_REQUEST`` for unpredictable workloads.
    """


_ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsGlobalSecondaryIndexesKeySchemaTypeDef = TypedDict(
    "_ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsGlobalSecondaryIndexesKeySchemaTypeDef",
    {"AttributeName": str, "KeyType": str},
    total=False,
)


class ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsGlobalSecondaryIndexesKeySchemaTypeDef(
    _ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsGlobalSecondaryIndexesKeySchemaTypeDef
):
    """
    Type definition for
    `ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsGlobalSecondaryIndexes`
    `KeySchema`

    Represents *a single element* of a key schema. A key schema specifies the attributes that make
    up the primary key of a table, or the key attributes of an index.

    A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
    simple primary key would be represented by one ``KeySchemaElement`` (for the partition key). A
    composite primary key would require one ``KeySchemaElement`` for the partition key, and another
    ``KeySchemaElement`` for the sort key.

    A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The data
    type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a
    Map.

    - **AttributeName** *(string) --*

      The name of a key attribute.

    - **KeyType** *(string) --*

      The role that this key attribute will assume:

      * ``HASH`` - partition key

      * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.
    """


_ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsGlobalSecondaryIndexesProjectionTypeDef = TypedDict(
    "_ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsGlobalSecondaryIndexesProjectionTypeDef",
    {"ProjectionType": str, "NonKeyAttributes": List[str]},
    total=False,
)


class ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsGlobalSecondaryIndexesProjectionTypeDef(
    _ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsGlobalSecondaryIndexesProjectionTypeDef
):
    """
    Type definition for
    `ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsGlobalSecondaryIndexes`
    `Projection`

    Represents attributes that are copied (projected) from the table into the global secondary
    index. These are in addition to the primary key attributes and index key attributes, which are
    automatically projected.

    - **ProjectionType** *(string) --*

      The set of attributes that are projected into the index:

      * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

      * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list of
      projected attributes is in ``NonKeyAttributes`` .

      * ``ALL`` - All of the table attributes are projected into the index.

    - **NonKeyAttributes** *(list) --*

      Represents the non-key attribute names which will be projected into the index.

      For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all of the
      local secondary indexes, must not exceed 20. If you project the same attribute into two
      different indexes, this counts as two distinct attributes when determining the total.

      - *(string) --*
    """


_ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsGlobalSecondaryIndexesProvisionedThroughputTypeDef = TypedDict(
    "_ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsGlobalSecondaryIndexesProvisionedThroughputTypeDef",
    {"ReadCapacityUnits": int, "WriteCapacityUnits": int},
    total=False,
)


class ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsGlobalSecondaryIndexesProvisionedThroughputTypeDef(
    _ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsGlobalSecondaryIndexesProvisionedThroughputTypeDef
):
    """
    Type definition for
    `ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsGlobalSecondaryIndexes`
    `ProvisionedThroughput`

    Represents the provisioned throughput settings for the specified global secondary index.

    - **ReadCapacityUnits** *(integer) --*

      The maximum number of strongly consistent reads consumed per second before DynamoDB returns a
      ``ThrottlingException`` . For more information, see `Specifying Read and Write Requirements
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
      in the *Amazon DynamoDB Developer Guide* .

      If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.

    - **WriteCapacityUnits** *(integer) --*

      The maximum number of writes consumed per second before DynamoDB returns a
      ``ThrottlingException`` . For more information, see `Specifying Read and Write Requirements
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
      in the *Amazon DynamoDB Developer Guide* .

      If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.
    """


_ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsGlobalSecondaryIndexesTypeDef = TypedDict(
    "_ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsGlobalSecondaryIndexesTypeDef",
    {
        "IndexName": str,
        "KeySchema": List[
            ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsGlobalSecondaryIndexesKeySchemaTypeDef
        ],
        "Projection": ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsGlobalSecondaryIndexesProjectionTypeDef,
        "ProvisionedThroughput": ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsGlobalSecondaryIndexesProvisionedThroughputTypeDef,
    },
    total=False,
)


class ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsGlobalSecondaryIndexesTypeDef(
    _ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsGlobalSecondaryIndexesTypeDef
):
    """
    Type definition for `ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetails`
    `GlobalSecondaryIndexes`

    Represents the properties of a global secondary index for the table when the backup was created.

    - **IndexName** *(string) --*

      The name of the global secondary index.

    - **KeySchema** *(list) --*

      The complete key schema for a global secondary index, which consists of one or more pairs of
      attribute names and key types:

      * ``HASH`` - partition key

      * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.

      - *(dict) --*

        Represents *a single element* of a key schema. A key schema specifies the attributes that
        make up the primary key of a table, or the key attributes of an index.

        A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
        simple primary key would be represented by one ``KeySchemaElement`` (for the partition key).
        A composite primary key would require one ``KeySchemaElement`` for the partition key, and
        another ``KeySchemaElement`` for the sort key.

        A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The
        data type must be one of String, Number, or Binary. The attribute cannot be nested within a
        List or a Map.

        - **AttributeName** *(string) --*

          The name of a key attribute.

        - **KeyType** *(string) --*

          The role that this key attribute will assume:

          * ``HASH`` - partition key

          * ``RANGE`` - sort key

          .. note::

            The partition key of an item is also known as its *hash attribute* . The term "hash
            attribute" derives from DynamoDB's usage of an internal hash function to evenly
            distribute data items across partitions, based on their partition key values.

            The sort key of an item is also known as its *range attribute* . The term "range
            attribute" derives from the way DynamoDB stores items with the same partition key
            physically close together, in sorted order by the sort key value.

    - **Projection** *(dict) --*

      Represents attributes that are copied (projected) from the table into the global secondary
      index. These are in addition to the primary key attributes and index key attributes, which are
      automatically projected.

      - **ProjectionType** *(string) --*

        The set of attributes that are projected into the index:

        * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

        * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list
        of projected attributes is in ``NonKeyAttributes`` .

        * ``ALL`` - All of the table attributes are projected into the index.

      - **NonKeyAttributes** *(list) --*

        Represents the non-key attribute names which will be projected into the index.

        For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all of
        the local secondary indexes, must not exceed 20. If you project the same attribute into two
        different indexes, this counts as two distinct attributes when determining the total.

        - *(string) --*

    - **ProvisionedThroughput** *(dict) --*

      Represents the provisioned throughput settings for the specified global secondary index.

      - **ReadCapacityUnits** *(integer) --*

        The maximum number of strongly consistent reads consumed per second before DynamoDB returns
        a ``ThrottlingException`` . For more information, see `Specifying Read and Write
        Requirements
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
        in the *Amazon DynamoDB Developer Guide* .

        If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.

      - **WriteCapacityUnits** *(integer) --*

        The maximum number of writes consumed per second before DynamoDB returns a
        ``ThrottlingException`` . For more information, see `Specifying Read and Write Requirements
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
        in the *Amazon DynamoDB Developer Guide* .

        If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.
    """


_ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsLocalSecondaryIndexesKeySchemaTypeDef = TypedDict(
    "_ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsLocalSecondaryIndexesKeySchemaTypeDef",
    {"AttributeName": str, "KeyType": str},
    total=False,
)


class ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsLocalSecondaryIndexesKeySchemaTypeDef(
    _ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsLocalSecondaryIndexesKeySchemaTypeDef
):
    """
    Type definition for
    `ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsLocalSecondaryIndexes`
    `KeySchema`

    Represents *a single element* of a key schema. A key schema specifies the attributes that make
    up the primary key of a table, or the key attributes of an index.

    A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
    simple primary key would be represented by one ``KeySchemaElement`` (for the partition key). A
    composite primary key would require one ``KeySchemaElement`` for the partition key, and another
    ``KeySchemaElement`` for the sort key.

    A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The data
    type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a
    Map.

    - **AttributeName** *(string) --*

      The name of a key attribute.

    - **KeyType** *(string) --*

      The role that this key attribute will assume:

      * ``HASH`` - partition key

      * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.
    """


_ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsLocalSecondaryIndexesProjectionTypeDef = TypedDict(
    "_ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsLocalSecondaryIndexesProjectionTypeDef",
    {"ProjectionType": str, "NonKeyAttributes": List[str]},
    total=False,
)


class ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsLocalSecondaryIndexesProjectionTypeDef(
    _ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsLocalSecondaryIndexesProjectionTypeDef
):
    """
    Type definition for
    `ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsLocalSecondaryIndexes`
    `Projection`

    Represents attributes that are copied (projected) from the table into the global secondary
    index. These are in addition to the primary key attributes and index key attributes, which are
    automatically projected.

    - **ProjectionType** *(string) --*

      The set of attributes that are projected into the index:

      * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

      * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list of
      projected attributes is in ``NonKeyAttributes`` .

      * ``ALL`` - All of the table attributes are projected into the index.

    - **NonKeyAttributes** *(list) --*

      Represents the non-key attribute names which will be projected into the index.

      For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all of the
      local secondary indexes, must not exceed 20. If you project the same attribute into two
      different indexes, this counts as two distinct attributes when determining the total.

      - *(string) --*
    """


_ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsLocalSecondaryIndexesTypeDef = TypedDict(
    "_ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsLocalSecondaryIndexesTypeDef",
    {
        "IndexName": str,
        "KeySchema": List[
            ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsLocalSecondaryIndexesKeySchemaTypeDef
        ],
        "Projection": ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsLocalSecondaryIndexesProjectionTypeDef,
    },
    total=False,
)


class ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsLocalSecondaryIndexesTypeDef(
    _ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsLocalSecondaryIndexesTypeDef
):
    """
    Type definition for `ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetails`
    `LocalSecondaryIndexes`

    Represents the properties of a local secondary index for the table when the backup was created.

    - **IndexName** *(string) --*

      Represents the name of the local secondary index.

    - **KeySchema** *(list) --*

      The complete key schema for a local secondary index, which consists of one or more pairs of
      attribute names and key types:

      * ``HASH`` - partition key

      * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.

      - *(dict) --*

        Represents *a single element* of a key schema. A key schema specifies the attributes that
        make up the primary key of a table, or the key attributes of an index.

        A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
        simple primary key would be represented by one ``KeySchemaElement`` (for the partition key).
        A composite primary key would require one ``KeySchemaElement`` for the partition key, and
        another ``KeySchemaElement`` for the sort key.

        A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The
        data type must be one of String, Number, or Binary. The attribute cannot be nested within a
        List or a Map.

        - **AttributeName** *(string) --*

          The name of a key attribute.

        - **KeyType** *(string) --*

          The role that this key attribute will assume:

          * ``HASH`` - partition key

          * ``RANGE`` - sort key

          .. note::

            The partition key of an item is also known as its *hash attribute* . The term "hash
            attribute" derives from DynamoDB's usage of an internal hash function to evenly
            distribute data items across partitions, based on their partition key values.

            The sort key of an item is also known as its *range attribute* . The term "range
            attribute" derives from the way DynamoDB stores items with the same partition key
            physically close together, in sorted order by the sort key value.

    - **Projection** *(dict) --*

      Represents attributes that are copied (projected) from the table into the global secondary
      index. These are in addition to the primary key attributes and index key attributes, which are
      automatically projected.

      - **ProjectionType** *(string) --*

        The set of attributes that are projected into the index:

        * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

        * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list
        of projected attributes is in ``NonKeyAttributes`` .

        * ``ALL`` - All of the table attributes are projected into the index.

      - **NonKeyAttributes** *(list) --*

        Represents the non-key attribute names which will be projected into the index.

        For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all of
        the local secondary indexes, must not exceed 20. If you project the same attribute into two
        different indexes, this counts as two distinct attributes when determining the total.

        - *(string) --*
    """


_ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsSSEDescriptionTypeDef = TypedDict(
    "_ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsSSEDescriptionTypeDef",
    {
        "Status": str,
        "SSEType": str,
        "KMSMasterKeyArn": str,
        "InaccessibleEncryptionDateTime": datetime,
    },
    total=False,
)


class ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsSSEDescriptionTypeDef(
    _ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsSSEDescriptionTypeDef
):
    """
    Type definition for `ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetails`
    `SSEDescription`

    The description of the server-side encryption status on the table when the backup was created.

    - **Status** *(string) --*

      Represents the current state of server-side encryption. The only supported values are:

      * ``ENABLED`` - Server-side encryption is enabled.

      * ``UPDATING`` - Server-side encryption is being updated.

    - **SSEType** *(string) --*

      Server-side encryption type. The only supported value is:

      * ``KMS`` - Server-side encryption that uses AWS Key Management Service. The key is stored in
      your account and is managed by AWS KMS (AWS KMS charges apply).

    - **KMSMasterKeyArn** *(string) --*

      The AWS KMS customer master key (CMK) ARN used for the AWS KMS encryption.

    - **InaccessibleEncryptionDateTime** *(datetime) --*

      Indicates the time, in UNIX epoch date format, when DynamoDB detected that the table's AWS KMS
      key was inaccessible. This attribute will automatically be cleared when DynamoDB detects that
      the table's AWS KMS key is accessible again. DynamoDB will initiate the table archival process
      when table's AWS KMS key remains inaccessible for more than seven days from this date.
    """


_ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsStreamDescriptionTypeDef = TypedDict(
    "_ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsStreamDescriptionTypeDef",
    {"StreamEnabled": bool, "StreamViewType": str},
    total=False,
)


class ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsStreamDescriptionTypeDef(
    _ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsStreamDescriptionTypeDef
):
    """
    Type definition for `ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetails`
    `StreamDescription`

    Stream settings on the table when the backup was created.

    - **StreamEnabled** *(boolean) --*

      Indicates whether DynamoDB Streams is enabled (true) or disabled (false) on the table.

    - **StreamViewType** *(string) --*

      When an item in the table is modified, ``StreamViewType`` determines what information is
      written to the stream for this table. Valid values for ``StreamViewType`` are:

      * ``KEYS_ONLY`` - Only the key attributes of the modified item are written to the stream.

      * ``NEW_IMAGE`` - The entire item, as it appears after it was modified, is written to the
      stream.

      * ``OLD_IMAGE`` - The entire item, as it appeared before it was modified, is written to the
      stream.

      * ``NEW_AND_OLD_IMAGES`` - Both the new and the old item images of the item are written to the
      stream.
    """


_ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsTimeToLiveDescriptionTypeDef = TypedDict(
    "_ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsTimeToLiveDescriptionTypeDef",
    {"TimeToLiveStatus": str, "AttributeName": str},
    total=False,
)


class ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsTimeToLiveDescriptionTypeDef(
    _ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsTimeToLiveDescriptionTypeDef
):
    """
    Type definition for `ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetails`
    `TimeToLiveDescription`

    Time to Live settings on the table when the backup was created.

    - **TimeToLiveStatus** *(string) --*

      The TTL status for the table.

    - **AttributeName** *(string) --*

      The name of the TTL attribute for items in the table.
    """


_ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsTypeDef = TypedDict(
    "_ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsTypeDef",
    {
        "LocalSecondaryIndexes": List[
            ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsLocalSecondaryIndexesTypeDef
        ],
        "GlobalSecondaryIndexes": List[
            ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsGlobalSecondaryIndexesTypeDef
        ],
        "StreamDescription": ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsStreamDescriptionTypeDef,
        "TimeToLiveDescription": ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsTimeToLiveDescriptionTypeDef,
        "SSEDescription": ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsSSEDescriptionTypeDef,
    },
    total=False,
)


class ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsTypeDef(
    _ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsTypeDef
):
    """
    Type definition for `ClientDeleteBackupResponseBackupDescription` `SourceTableFeatureDetails`

    Contains the details of the features enabled on the table when the backup was created. For
    example, LSIs, GSIs, streams, TTL.

    - **LocalSecondaryIndexes** *(list) --*

      Represents the LSI properties for the table when the backup was created. It includes the
      IndexName, KeySchema and Projection for the LSIs on the table at the time of backup.

      - *(dict) --*

        Represents the properties of a local secondary index for the table when the backup was
        created.

        - **IndexName** *(string) --*

          Represents the name of the local secondary index.

        - **KeySchema** *(list) --*

          The complete key schema for a local secondary index, which consists of one or more pairs
          of attribute names and key types:

          * ``HASH`` - partition key

          * ``RANGE`` - sort key

          .. note::

            The partition key of an item is also known as its *hash attribute* . The term "hash
            attribute" derives from DynamoDB's usage of an internal hash function to evenly
            distribute data items across partitions, based on their partition key values.

            The sort key of an item is also known as its *range attribute* . The term "range
            attribute" derives from the way DynamoDB stores items with the same partition key
            physically close together, in sorted order by the sort key value.

          - *(dict) --*

            Represents *a single element* of a key schema. A key schema specifies the attributes
            that make up the primary key of a table, or the key attributes of an index.

            A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example,
            a simple primary key would be represented by one ``KeySchemaElement`` (for the partition
            key). A composite primary key would require one ``KeySchemaElement`` for the partition
            key, and another ``KeySchemaElement`` for the sort key.

            A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute).
            The data type must be one of String, Number, or Binary. The attribute cannot be nested
            within a List or a Map.

            - **AttributeName** *(string) --*

              The name of a key attribute.

            - **KeyType** *(string) --*

              The role that this key attribute will assume:

              * ``HASH`` - partition key

              * ``RANGE`` - sort key

              .. note::

                The partition key of an item is also known as its *hash attribute* . The term "hash
                attribute" derives from DynamoDB's usage of an internal hash function to evenly
                distribute data items across partitions, based on their partition key values.

                The sort key of an item is also known as its *range attribute* . The term "range
                attribute" derives from the way DynamoDB stores items with the same partition key
                physically close together, in sorted order by the sort key value.

        - **Projection** *(dict) --*

          Represents attributes that are copied (projected) from the table into the global secondary
          index. These are in addition to the primary key attributes and index key attributes, which
          are automatically projected.

          - **ProjectionType** *(string) --*

            The set of attributes that are projected into the index:

            * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

            * ``INCLUDE`` - Only the specified table attributes are projected into the index. The
            list of projected attributes is in ``NonKeyAttributes`` .

            * ``ALL`` - All of the table attributes are projected into the index.

          - **NonKeyAttributes** *(list) --*

            Represents the non-key attribute names which will be projected into the index.

            For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all
            of the local secondary indexes, must not exceed 20. If you project the same attribute
            into two different indexes, this counts as two distinct attributes when determining the
            total.

            - *(string) --*

    - **GlobalSecondaryIndexes** *(list) --*

      Represents the GSI properties for the table when the backup was created. It includes the
      IndexName, KeySchema, Projection, and ProvisionedThroughput for the GSIs on the table at the
      time of backup.

      - *(dict) --*

        Represents the properties of a global secondary index for the table when the backup was
        created.

        - **IndexName** *(string) --*

          The name of the global secondary index.

        - **KeySchema** *(list) --*

          The complete key schema for a global secondary index, which consists of one or more pairs
          of attribute names and key types:

          * ``HASH`` - partition key

          * ``RANGE`` - sort key

          .. note::

            The partition key of an item is also known as its *hash attribute* . The term "hash
            attribute" derives from DynamoDB's usage of an internal hash function to evenly
            distribute data items across partitions, based on their partition key values.

            The sort key of an item is also known as its *range attribute* . The term "range
            attribute" derives from the way DynamoDB stores items with the same partition key
            physically close together, in sorted order by the sort key value.

          - *(dict) --*

            Represents *a single element* of a key schema. A key schema specifies the attributes
            that make up the primary key of a table, or the key attributes of an index.

            A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example,
            a simple primary key would be represented by one ``KeySchemaElement`` (for the partition
            key). A composite primary key would require one ``KeySchemaElement`` for the partition
            key, and another ``KeySchemaElement`` for the sort key.

            A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute).
            The data type must be one of String, Number, or Binary. The attribute cannot be nested
            within a List or a Map.

            - **AttributeName** *(string) --*

              The name of a key attribute.

            - **KeyType** *(string) --*

              The role that this key attribute will assume:

              * ``HASH`` - partition key

              * ``RANGE`` - sort key

              .. note::

                The partition key of an item is also known as its *hash attribute* . The term "hash
                attribute" derives from DynamoDB's usage of an internal hash function to evenly
                distribute data items across partitions, based on their partition key values.

                The sort key of an item is also known as its *range attribute* . The term "range
                attribute" derives from the way DynamoDB stores items with the same partition key
                physically close together, in sorted order by the sort key value.

        - **Projection** *(dict) --*

          Represents attributes that are copied (projected) from the table into the global secondary
          index. These are in addition to the primary key attributes and index key attributes, which
          are automatically projected.

          - **ProjectionType** *(string) --*

            The set of attributes that are projected into the index:

            * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

            * ``INCLUDE`` - Only the specified table attributes are projected into the index. The
            list of projected attributes is in ``NonKeyAttributes`` .

            * ``ALL`` - All of the table attributes are projected into the index.

          - **NonKeyAttributes** *(list) --*

            Represents the non-key attribute names which will be projected into the index.

            For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all
            of the local secondary indexes, must not exceed 20. If you project the same attribute
            into two different indexes, this counts as two distinct attributes when determining the
            total.

            - *(string) --*

        - **ProvisionedThroughput** *(dict) --*

          Represents the provisioned throughput settings for the specified global secondary index.

          - **ReadCapacityUnits** *(integer) --*

            The maximum number of strongly consistent reads consumed per second before DynamoDB
            returns a ``ThrottlingException`` . For more information, see `Specifying Read and Write
            Requirements
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
            in the *Amazon DynamoDB Developer Guide* .

            If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.

          - **WriteCapacityUnits** *(integer) --*

            The maximum number of writes consumed per second before DynamoDB returns a
            ``ThrottlingException`` . For more information, see `Specifying Read and Write
            Requirements
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
            in the *Amazon DynamoDB Developer Guide* .

            If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.

    - **StreamDescription** *(dict) --*

      Stream settings on the table when the backup was created.

      - **StreamEnabled** *(boolean) --*

        Indicates whether DynamoDB Streams is enabled (true) or disabled (false) on the table.

      - **StreamViewType** *(string) --*

        When an item in the table is modified, ``StreamViewType`` determines what information is
        written to the stream for this table. Valid values for ``StreamViewType`` are:

        * ``KEYS_ONLY`` - Only the key attributes of the modified item are written to the stream.

        * ``NEW_IMAGE`` - The entire item, as it appears after it was modified, is written to the
        stream.

        * ``OLD_IMAGE`` - The entire item, as it appeared before it was modified, is written to the
        stream.

        * ``NEW_AND_OLD_IMAGES`` - Both the new and the old item images of the item are written to
        the stream.

    - **TimeToLiveDescription** *(dict) --*

      Time to Live settings on the table when the backup was created.

      - **TimeToLiveStatus** *(string) --*

        The TTL status for the table.

      - **AttributeName** *(string) --*

        The name of the TTL attribute for items in the table.

    - **SSEDescription** *(dict) --*

      The description of the server-side encryption status on the table when the backup was created.

      - **Status** *(string) --*

        Represents the current state of server-side encryption. The only supported values are:

        * ``ENABLED`` - Server-side encryption is enabled.

        * ``UPDATING`` - Server-side encryption is being updated.

      - **SSEType** *(string) --*

        Server-side encryption type. The only supported value is:

        * ``KMS`` - Server-side encryption that uses AWS Key Management Service. The key is stored
        in your account and is managed by AWS KMS (AWS KMS charges apply).

      - **KMSMasterKeyArn** *(string) --*

        The AWS KMS customer master key (CMK) ARN used for the AWS KMS encryption.

      - **InaccessibleEncryptionDateTime** *(datetime) --*

        Indicates the time, in UNIX epoch date format, when DynamoDB detected that the table's AWS
        KMS key was inaccessible. This attribute will automatically be cleared when DynamoDB detects
        that the table's AWS KMS key is accessible again. DynamoDB will initiate the table archival
        process when table's AWS KMS key remains inaccessible for more than seven days from this
        date.
    """


_ClientDeleteBackupResponseBackupDescriptionTypeDef = TypedDict(
    "_ClientDeleteBackupResponseBackupDescriptionTypeDef",
    {
        "BackupDetails": ClientDeleteBackupResponseBackupDescriptionBackupDetailsTypeDef,
        "SourceTableDetails": ClientDeleteBackupResponseBackupDescriptionSourceTableDetailsTypeDef,
        "SourceTableFeatureDetails": ClientDeleteBackupResponseBackupDescriptionSourceTableFeatureDetailsTypeDef,
    },
    total=False,
)


class ClientDeleteBackupResponseBackupDescriptionTypeDef(
    _ClientDeleteBackupResponseBackupDescriptionTypeDef
):
    """
    Type definition for `ClientDeleteBackupResponse` `BackupDescription`

    Contains the description of the backup created for the table.

    - **BackupDetails** *(dict) --*

      Contains the details of the backup created for the table.

      - **BackupArn** *(string) --*

        ARN associated with the backup.

      - **BackupName** *(string) --*

        Name of the requested backup.

      - **BackupSizeBytes** *(integer) --*

        Size of the backup in bytes.

      - **BackupStatus** *(string) --*

        Backup can be in one of the following states: CREATING, ACTIVE, DELETED.

      - **BackupType** *(string) --*

        BackupType:

        * ``USER`` - You create and manage these using the on-demand backup feature.

        * ``SYSTEM`` - If you delete a table with point-in-time recovery enabled, a ``SYSTEM``
        backup is automatically created and is retained for 35 days (at no additional cost). System
        backups allow you to restore the deleted table to the state it was in just before the point
        of deletion.

        * ``AWS_BACKUP`` - On-demand backup created by you from AWS Backup service.

      - **BackupCreationDateTime** *(datetime) --*

        Time at which the backup was created. This is the request time of the backup.

      - **BackupExpiryDateTime** *(datetime) --*

        Time at which the automatic on-demand backup created by DynamoDB will expire. This
        ``SYSTEM`` on-demand backup expires automatically 35 days after its creation.

    - **SourceTableDetails** *(dict) --*

      Contains the details of the table when the backup was created.

      - **TableName** *(string) --*

        The name of the table for which the backup was created.

      - **TableId** *(string) --*

        Unique identifier for the table for which the backup was created.

      - **TableArn** *(string) --*

        ARN of the table for which backup was created.

      - **TableSizeBytes** *(integer) --*

        Size of the table in bytes. Note that this is an approximate value.

      - **KeySchema** *(list) --*

        Schema of the table.

        - *(dict) --*

          Represents *a single element* of a key schema. A key schema specifies the attributes that
          make up the primary key of a table, or the key attributes of an index.

          A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
          simple primary key would be represented by one ``KeySchemaElement`` (for the partition
          key). A composite primary key would require one ``KeySchemaElement`` for the partition
          key, and another ``KeySchemaElement`` for the sort key.

          A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The
          data type must be one of String, Number, or Binary. The attribute cannot be nested within
          a List or a Map.

          - **AttributeName** *(string) --*

            The name of a key attribute.

          - **KeyType** *(string) --*

            The role that this key attribute will assume:

            * ``HASH`` - partition key

            * ``RANGE`` - sort key

            .. note::

              The partition key of an item is also known as its *hash attribute* . The term "hash
              attribute" derives from DynamoDB's usage of an internal hash function to evenly
              distribute data items across partitions, based on their partition key values.

              The sort key of an item is also known as its *range attribute* . The term "range
              attribute" derives from the way DynamoDB stores items with the same partition key
              physically close together, in sorted order by the sort key value.

      - **TableCreationDateTime** *(datetime) --*

        Time when the source table was created.

      - **ProvisionedThroughput** *(dict) --*

        Read IOPs and Write IOPS on the table when the backup was created.

        - **ReadCapacityUnits** *(integer) --*

          The maximum number of strongly consistent reads consumed per second before DynamoDB
          returns a ``ThrottlingException`` . For more information, see `Specifying Read and Write
          Requirements
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
          in the *Amazon DynamoDB Developer Guide* .

          If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.

        - **WriteCapacityUnits** *(integer) --*

          The maximum number of writes consumed per second before DynamoDB returns a
          ``ThrottlingException`` . For more information, see `Specifying Read and Write
          Requirements
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
          in the *Amazon DynamoDB Developer Guide* .

          If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.

      - **ItemCount** *(integer) --*

        Number of items in the table. Note that this is an approximate value.

      - **BillingMode** *(string) --*

        Controls how you are charged for read and write throughput and how you manage capacity. This
        setting can be changed later.

        * ``PROVISIONED`` - Sets the read/write capacity mode to ``PROVISIONED`` . We recommend
        using ``PROVISIONED`` for predictable workloads.

        * ``PAY_PER_REQUEST`` - Sets the read/write capacity mode to ``PAY_PER_REQUEST`` . We
        recommend using ``PAY_PER_REQUEST`` for unpredictable workloads.

    - **SourceTableFeatureDetails** *(dict) --*

      Contains the details of the features enabled on the table when the backup was created. For
      example, LSIs, GSIs, streams, TTL.

      - **LocalSecondaryIndexes** *(list) --*

        Represents the LSI properties for the table when the backup was created. It includes the
        IndexName, KeySchema and Projection for the LSIs on the table at the time of backup.

        - *(dict) --*

          Represents the properties of a local secondary index for the table when the backup was
          created.

          - **IndexName** *(string) --*

            Represents the name of the local secondary index.

          - **KeySchema** *(list) --*

            The complete key schema for a local secondary index, which consists of one or more pairs
            of attribute names and key types:

            * ``HASH`` - partition key

            * ``RANGE`` - sort key

            .. note::

              The partition key of an item is also known as its *hash attribute* . The term "hash
              attribute" derives from DynamoDB's usage of an internal hash function to evenly
              distribute data items across partitions, based on their partition key values.

              The sort key of an item is also known as its *range attribute* . The term "range
              attribute" derives from the way DynamoDB stores items with the same partition key
              physically close together, in sorted order by the sort key value.

            - *(dict) --*

              Represents *a single element* of a key schema. A key schema specifies the attributes
              that make up the primary key of a table, or the key attributes of an index.

              A ``KeySchemaElement`` represents exactly one attribute of the primary key. For
              example, a simple primary key would be represented by one ``KeySchemaElement`` (for
              the partition key). A composite primary key would require one ``KeySchemaElement`` for
              the partition key, and another ``KeySchemaElement`` for the sort key.

              A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute).
              The data type must be one of String, Number, or Binary. The attribute cannot be nested
              within a List or a Map.

              - **AttributeName** *(string) --*

                The name of a key attribute.

              - **KeyType** *(string) --*

                The role that this key attribute will assume:

                * ``HASH`` - partition key

                * ``RANGE`` - sort key

                .. note::

                  The partition key of an item is also known as its *hash attribute* . The term
                  "hash attribute" derives from DynamoDB's usage of an internal hash function to
                  evenly distribute data items across partitions, based on their partition key
                  values.

                  The sort key of an item is also known as its *range attribute* . The term "range
                  attribute" derives from the way DynamoDB stores items with the same partition key
                  physically close together, in sorted order by the sort key value.

          - **Projection** *(dict) --*

            Represents attributes that are copied (projected) from the table into the global
            secondary index. These are in addition to the primary key attributes and index key
            attributes, which are automatically projected.

            - **ProjectionType** *(string) --*

              The set of attributes that are projected into the index:

              * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

              * ``INCLUDE`` - Only the specified table attributes are projected into the index. The
              list of projected attributes is in ``NonKeyAttributes`` .

              * ``ALL`` - All of the table attributes are projected into the index.

            - **NonKeyAttributes** *(list) --*

              Represents the non-key attribute names which will be projected into the index.

              For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all
              of the local secondary indexes, must not exceed 20. If you project the same attribute
              into two different indexes, this counts as two distinct attributes when determining
              the total.

              - *(string) --*

      - **GlobalSecondaryIndexes** *(list) --*

        Represents the GSI properties for the table when the backup was created. It includes the
        IndexName, KeySchema, Projection, and ProvisionedThroughput for the GSIs on the table at the
        time of backup.

        - *(dict) --*

          Represents the properties of a global secondary index for the table when the backup was
          created.

          - **IndexName** *(string) --*

            The name of the global secondary index.

          - **KeySchema** *(list) --*

            The complete key schema for a global secondary index, which consists of one or more
            pairs of attribute names and key types:

            * ``HASH`` - partition key

            * ``RANGE`` - sort key

            .. note::

              The partition key of an item is also known as its *hash attribute* . The term "hash
              attribute" derives from DynamoDB's usage of an internal hash function to evenly
              distribute data items across partitions, based on their partition key values.

              The sort key of an item is also known as its *range attribute* . The term "range
              attribute" derives from the way DynamoDB stores items with the same partition key
              physically close together, in sorted order by the sort key value.

            - *(dict) --*

              Represents *a single element* of a key schema. A key schema specifies the attributes
              that make up the primary key of a table, or the key attributes of an index.

              A ``KeySchemaElement`` represents exactly one attribute of the primary key. For
              example, a simple primary key would be represented by one ``KeySchemaElement`` (for
              the partition key). A composite primary key would require one ``KeySchemaElement`` for
              the partition key, and another ``KeySchemaElement`` for the sort key.

              A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute).
              The data type must be one of String, Number, or Binary. The attribute cannot be nested
              within a List or a Map.

              - **AttributeName** *(string) --*

                The name of a key attribute.

              - **KeyType** *(string) --*

                The role that this key attribute will assume:

                * ``HASH`` - partition key

                * ``RANGE`` - sort key

                .. note::

                  The partition key of an item is also known as its *hash attribute* . The term
                  "hash attribute" derives from DynamoDB's usage of an internal hash function to
                  evenly distribute data items across partitions, based on their partition key
                  values.

                  The sort key of an item is also known as its *range attribute* . The term "range
                  attribute" derives from the way DynamoDB stores items with the same partition key
                  physically close together, in sorted order by the sort key value.

          - **Projection** *(dict) --*

            Represents attributes that are copied (projected) from the table into the global
            secondary index. These are in addition to the primary key attributes and index key
            attributes, which are automatically projected.

            - **ProjectionType** *(string) --*

              The set of attributes that are projected into the index:

              * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

              * ``INCLUDE`` - Only the specified table attributes are projected into the index. The
              list of projected attributes is in ``NonKeyAttributes`` .

              * ``ALL`` - All of the table attributes are projected into the index.

            - **NonKeyAttributes** *(list) --*

              Represents the non-key attribute names which will be projected into the index.

              For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all
              of the local secondary indexes, must not exceed 20. If you project the same attribute
              into two different indexes, this counts as two distinct attributes when determining
              the total.

              - *(string) --*

          - **ProvisionedThroughput** *(dict) --*

            Represents the provisioned throughput settings for the specified global secondary index.

            - **ReadCapacityUnits** *(integer) --*

              The maximum number of strongly consistent reads consumed per second before DynamoDB
              returns a ``ThrottlingException`` . For more information, see `Specifying Read and
              Write Requirements
              <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
              in the *Amazon DynamoDB Developer Guide* .

              If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.

            - **WriteCapacityUnits** *(integer) --*

              The maximum number of writes consumed per second before DynamoDB returns a
              ``ThrottlingException`` . For more information, see `Specifying Read and Write
              Requirements
              <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
              in the *Amazon DynamoDB Developer Guide* .

              If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.

      - **StreamDescription** *(dict) --*

        Stream settings on the table when the backup was created.

        - **StreamEnabled** *(boolean) --*

          Indicates whether DynamoDB Streams is enabled (true) or disabled (false) on the table.

        - **StreamViewType** *(string) --*

          When an item in the table is modified, ``StreamViewType`` determines what information is
          written to the stream for this table. Valid values for ``StreamViewType`` are:

          * ``KEYS_ONLY`` - Only the key attributes of the modified item are written to the stream.

          * ``NEW_IMAGE`` - The entire item, as it appears after it was modified, is written to the
          stream.

          * ``OLD_IMAGE`` - The entire item, as it appeared before it was modified, is written to
          the stream.

          * ``NEW_AND_OLD_IMAGES`` - Both the new and the old item images of the item are written to
          the stream.

      - **TimeToLiveDescription** *(dict) --*

        Time to Live settings on the table when the backup was created.

        - **TimeToLiveStatus** *(string) --*

          The TTL status for the table.

        - **AttributeName** *(string) --*

          The name of the TTL attribute for items in the table.

      - **SSEDescription** *(dict) --*

        The description of the server-side encryption status on the table when the backup was
        created.

        - **Status** *(string) --*

          Represents the current state of server-side encryption. The only supported values are:

          * ``ENABLED`` - Server-side encryption is enabled.

          * ``UPDATING`` - Server-side encryption is being updated.

        - **SSEType** *(string) --*

          Server-side encryption type. The only supported value is:

          * ``KMS`` - Server-side encryption that uses AWS Key Management Service. The key is stored
          in your account and is managed by AWS KMS (AWS KMS charges apply).

        - **KMSMasterKeyArn** *(string) --*

          The AWS KMS customer master key (CMK) ARN used for the AWS KMS encryption.

        - **InaccessibleEncryptionDateTime** *(datetime) --*

          Indicates the time, in UNIX epoch date format, when DynamoDB detected that the table's AWS
          KMS key was inaccessible. This attribute will automatically be cleared when DynamoDB
          detects that the table's AWS KMS key is accessible again. DynamoDB will initiate the table
          archival process when table's AWS KMS key remains inaccessible for more than seven days
          from this date.
    """


_ClientDeleteBackupResponseTypeDef = TypedDict(
    "_ClientDeleteBackupResponseTypeDef",
    {"BackupDescription": ClientDeleteBackupResponseBackupDescriptionTypeDef},
    total=False,
)


class ClientDeleteBackupResponseTypeDef(_ClientDeleteBackupResponseTypeDef):
    """
    Type definition for `ClientDeleteBackup` `Response`

    - **BackupDescription** *(dict) --*

      Contains the description of the backup created for the table.

      - **BackupDetails** *(dict) --*

        Contains the details of the backup created for the table.

        - **BackupArn** *(string) --*

          ARN associated with the backup.

        - **BackupName** *(string) --*

          Name of the requested backup.

        - **BackupSizeBytes** *(integer) --*

          Size of the backup in bytes.

        - **BackupStatus** *(string) --*

          Backup can be in one of the following states: CREATING, ACTIVE, DELETED.

        - **BackupType** *(string) --*

          BackupType:

          * ``USER`` - You create and manage these using the on-demand backup feature.

          * ``SYSTEM`` - If you delete a table with point-in-time recovery enabled, a ``SYSTEM``
          backup is automatically created and is retained for 35 days (at no additional cost).
          System backups allow you to restore the deleted table to the state it was in just before
          the point of deletion.

          * ``AWS_BACKUP`` - On-demand backup created by you from AWS Backup service.

        - **BackupCreationDateTime** *(datetime) --*

          Time at which the backup was created. This is the request time of the backup.

        - **BackupExpiryDateTime** *(datetime) --*

          Time at which the automatic on-demand backup created by DynamoDB will expire. This
          ``SYSTEM`` on-demand backup expires automatically 35 days after its creation.

      - **SourceTableDetails** *(dict) --*

        Contains the details of the table when the backup was created.

        - **TableName** *(string) --*

          The name of the table for which the backup was created.

        - **TableId** *(string) --*

          Unique identifier for the table for which the backup was created.

        - **TableArn** *(string) --*

          ARN of the table for which backup was created.

        - **TableSizeBytes** *(integer) --*

          Size of the table in bytes. Note that this is an approximate value.

        - **KeySchema** *(list) --*

          Schema of the table.

          - *(dict) --*

            Represents *a single element* of a key schema. A key schema specifies the attributes
            that make up the primary key of a table, or the key attributes of an index.

            A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example,
            a simple primary key would be represented by one ``KeySchemaElement`` (for the partition
            key). A composite primary key would require one ``KeySchemaElement`` for the partition
            key, and another ``KeySchemaElement`` for the sort key.

            A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute).
            The data type must be one of String, Number, or Binary. The attribute cannot be nested
            within a List or a Map.

            - **AttributeName** *(string) --*

              The name of a key attribute.

            - **KeyType** *(string) --*

              The role that this key attribute will assume:

              * ``HASH`` - partition key

              * ``RANGE`` - sort key

              .. note::

                The partition key of an item is also known as its *hash attribute* . The term "hash
                attribute" derives from DynamoDB's usage of an internal hash function to evenly
                distribute data items across partitions, based on their partition key values.

                The sort key of an item is also known as its *range attribute* . The term "range
                attribute" derives from the way DynamoDB stores items with the same partition key
                physically close together, in sorted order by the sort key value.

        - **TableCreationDateTime** *(datetime) --*

          Time when the source table was created.

        - **ProvisionedThroughput** *(dict) --*

          Read IOPs and Write IOPS on the table when the backup was created.

          - **ReadCapacityUnits** *(integer) --*

            The maximum number of strongly consistent reads consumed per second before DynamoDB
            returns a ``ThrottlingException`` . For more information, see `Specifying Read and Write
            Requirements
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
            in the *Amazon DynamoDB Developer Guide* .

            If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.

          - **WriteCapacityUnits** *(integer) --*

            The maximum number of writes consumed per second before DynamoDB returns a
            ``ThrottlingException`` . For more information, see `Specifying Read and Write
            Requirements
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
            in the *Amazon DynamoDB Developer Guide* .

            If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.

        - **ItemCount** *(integer) --*

          Number of items in the table. Note that this is an approximate value.

        - **BillingMode** *(string) --*

          Controls how you are charged for read and write throughput and how you manage capacity.
          This setting can be changed later.

          * ``PROVISIONED`` - Sets the read/write capacity mode to ``PROVISIONED`` . We recommend
          using ``PROVISIONED`` for predictable workloads.

          * ``PAY_PER_REQUEST`` - Sets the read/write capacity mode to ``PAY_PER_REQUEST`` . We
          recommend using ``PAY_PER_REQUEST`` for unpredictable workloads.

      - **SourceTableFeatureDetails** *(dict) --*

        Contains the details of the features enabled on the table when the backup was created. For
        example, LSIs, GSIs, streams, TTL.

        - **LocalSecondaryIndexes** *(list) --*

          Represents the LSI properties for the table when the backup was created. It includes the
          IndexName, KeySchema and Projection for the LSIs on the table at the time of backup.

          - *(dict) --*

            Represents the properties of a local secondary index for the table when the backup was
            created.

            - **IndexName** *(string) --*

              Represents the name of the local secondary index.

            - **KeySchema** *(list) --*

              The complete key schema for a local secondary index, which consists of one or more
              pairs of attribute names and key types:

              * ``HASH`` - partition key

              * ``RANGE`` - sort key

              .. note::

                The partition key of an item is also known as its *hash attribute* . The term "hash
                attribute" derives from DynamoDB's usage of an internal hash function to evenly
                distribute data items across partitions, based on their partition key values.

                The sort key of an item is also known as its *range attribute* . The term "range
                attribute" derives from the way DynamoDB stores items with the same partition key
                physically close together, in sorted order by the sort key value.

              - *(dict) --*

                Represents *a single element* of a key schema. A key schema specifies the attributes
                that make up the primary key of a table, or the key attributes of an index.

                A ``KeySchemaElement`` represents exactly one attribute of the primary key. For
                example, a simple primary key would be represented by one ``KeySchemaElement`` (for
                the partition key). A composite primary key would require one ``KeySchemaElement``
                for the partition key, and another ``KeySchemaElement`` for the sort key.

                A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested
                attribute). The data type must be one of String, Number, or Binary. The attribute
                cannot be nested within a List or a Map.

                - **AttributeName** *(string) --*

                  The name of a key attribute.

                - **KeyType** *(string) --*

                  The role that this key attribute will assume:

                  * ``HASH`` - partition key

                  * ``RANGE`` - sort key

                  .. note::

                    The partition key of an item is also known as its *hash attribute* . The term
                    "hash attribute" derives from DynamoDB's usage of an internal hash function to
                    evenly distribute data items across partitions, based on their partition key
                    values.

                    The sort key of an item is also known as its *range attribute* . The term "range
                    attribute" derives from the way DynamoDB stores items with the same partition
                    key physically close together, in sorted order by the sort key value.

            - **Projection** *(dict) --*

              Represents attributes that are copied (projected) from the table into the global
              secondary index. These are in addition to the primary key attributes and index key
              attributes, which are automatically projected.

              - **ProjectionType** *(string) --*

                The set of attributes that are projected into the index:

                * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

                * ``INCLUDE`` - Only the specified table attributes are projected into the index.
                The list of projected attributes is in ``NonKeyAttributes`` .

                * ``ALL`` - All of the table attributes are projected into the index.

              - **NonKeyAttributes** *(list) --*

                Represents the non-key attribute names which will be projected into the index.

                For local secondary indexes, the total count of ``NonKeyAttributes`` summed across
                all of the local secondary indexes, must not exceed 20. If you project the same
                attribute into two different indexes, this counts as two distinct attributes when
                determining the total.

                - *(string) --*

        - **GlobalSecondaryIndexes** *(list) --*

          Represents the GSI properties for the table when the backup was created. It includes the
          IndexName, KeySchema, Projection, and ProvisionedThroughput for the GSIs on the table at
          the time of backup.

          - *(dict) --*

            Represents the properties of a global secondary index for the table when the backup was
            created.

            - **IndexName** *(string) --*

              The name of the global secondary index.

            - **KeySchema** *(list) --*

              The complete key schema for a global secondary index, which consists of one or more
              pairs of attribute names and key types:

              * ``HASH`` - partition key

              * ``RANGE`` - sort key

              .. note::

                The partition key of an item is also known as its *hash attribute* . The term "hash
                attribute" derives from DynamoDB's usage of an internal hash function to evenly
                distribute data items across partitions, based on their partition key values.

                The sort key of an item is also known as its *range attribute* . The term "range
                attribute" derives from the way DynamoDB stores items with the same partition key
                physically close together, in sorted order by the sort key value.

              - *(dict) --*

                Represents *a single element* of a key schema. A key schema specifies the attributes
                that make up the primary key of a table, or the key attributes of an index.

                A ``KeySchemaElement`` represents exactly one attribute of the primary key. For
                example, a simple primary key would be represented by one ``KeySchemaElement`` (for
                the partition key). A composite primary key would require one ``KeySchemaElement``
                for the partition key, and another ``KeySchemaElement`` for the sort key.

                A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested
                attribute). The data type must be one of String, Number, or Binary. The attribute
                cannot be nested within a List or a Map.

                - **AttributeName** *(string) --*

                  The name of a key attribute.

                - **KeyType** *(string) --*

                  The role that this key attribute will assume:

                  * ``HASH`` - partition key

                  * ``RANGE`` - sort key

                  .. note::

                    The partition key of an item is also known as its *hash attribute* . The term
                    "hash attribute" derives from DynamoDB's usage of an internal hash function to
                    evenly distribute data items across partitions, based on their partition key
                    values.

                    The sort key of an item is also known as its *range attribute* . The term "range
                    attribute" derives from the way DynamoDB stores items with the same partition
                    key physically close together, in sorted order by the sort key value.

            - **Projection** *(dict) --*

              Represents attributes that are copied (projected) from the table into the global
              secondary index. These are in addition to the primary key attributes and index key
              attributes, which are automatically projected.

              - **ProjectionType** *(string) --*

                The set of attributes that are projected into the index:

                * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

                * ``INCLUDE`` - Only the specified table attributes are projected into the index.
                The list of projected attributes is in ``NonKeyAttributes`` .

                * ``ALL`` - All of the table attributes are projected into the index.

              - **NonKeyAttributes** *(list) --*

                Represents the non-key attribute names which will be projected into the index.

                For local secondary indexes, the total count of ``NonKeyAttributes`` summed across
                all of the local secondary indexes, must not exceed 20. If you project the same
                attribute into two different indexes, this counts as two distinct attributes when
                determining the total.

                - *(string) --*

            - **ProvisionedThroughput** *(dict) --*

              Represents the provisioned throughput settings for the specified global secondary
              index.

              - **ReadCapacityUnits** *(integer) --*

                The maximum number of strongly consistent reads consumed per second before DynamoDB
                returns a ``ThrottlingException`` . For more information, see `Specifying Read and
                Write Requirements
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
                in the *Amazon DynamoDB Developer Guide* .

                If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.

              - **WriteCapacityUnits** *(integer) --*

                The maximum number of writes consumed per second before DynamoDB returns a
                ``ThrottlingException`` . For more information, see `Specifying Read and Write
                Requirements
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
                in the *Amazon DynamoDB Developer Guide* .

                If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.

        - **StreamDescription** *(dict) --*

          Stream settings on the table when the backup was created.

          - **StreamEnabled** *(boolean) --*

            Indicates whether DynamoDB Streams is enabled (true) or disabled (false) on the table.

          - **StreamViewType** *(string) --*

            When an item in the table is modified, ``StreamViewType`` determines what information is
            written to the stream for this table. Valid values for ``StreamViewType`` are:

            * ``KEYS_ONLY`` - Only the key attributes of the modified item are written to the
            stream.

            * ``NEW_IMAGE`` - The entire item, as it appears after it was modified, is written to
            the stream.

            * ``OLD_IMAGE`` - The entire item, as it appeared before it was modified, is written to
            the stream.

            * ``NEW_AND_OLD_IMAGES`` - Both the new and the old item images of the item are written
            to the stream.

        - **TimeToLiveDescription** *(dict) --*

          Time to Live settings on the table when the backup was created.

          - **TimeToLiveStatus** *(string) --*

            The TTL status for the table.

          - **AttributeName** *(string) --*

            The name of the TTL attribute for items in the table.

        - **SSEDescription** *(dict) --*

          The description of the server-side encryption status on the table when the backup was
          created.

          - **Status** *(string) --*

            Represents the current state of server-side encryption. The only supported values are:

            * ``ENABLED`` - Server-side encryption is enabled.

            * ``UPDATING`` - Server-side encryption is being updated.

          - **SSEType** *(string) --*

            Server-side encryption type. The only supported value is:

            * ``KMS`` - Server-side encryption that uses AWS Key Management Service. The key is
            stored in your account and is managed by AWS KMS (AWS KMS charges apply).

          - **KMSMasterKeyArn** *(string) --*

            The AWS KMS customer master key (CMK) ARN used for the AWS KMS encryption.

          - **InaccessibleEncryptionDateTime** *(datetime) --*

            Indicates the time, in UNIX epoch date format, when DynamoDB detected that the table's
            AWS KMS key was inaccessible. This attribute will automatically be cleared when DynamoDB
            detects that the table's AWS KMS key is accessible again. DynamoDB will initiate the
            table archival process when table's AWS KMS key remains inaccessible for more than seven
            days from this date.
    """


_ClientDeleteItemExpectedAttributeValueListTypeDef = TypedDict(
    "_ClientDeleteItemExpectedAttributeValueListTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class ClientDeleteItemExpectedAttributeValueListTypeDef(
    _ClientDeleteItemExpectedAttributeValueListTypeDef
):
    """
    Type definition for `ClientDeleteItemExpected` `AttributeValueList`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_ClientDeleteItemExpectedValueTypeDef = TypedDict(
    "_ClientDeleteItemExpectedValueTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class ClientDeleteItemExpectedValueTypeDef(_ClientDeleteItemExpectedValueTypeDef):
    """
    Type definition for `ClientDeleteItemExpected` `Value`

    Represents the data for the expected attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_ClientDeleteItemExpectedTypeDef = TypedDict(
    "_ClientDeleteItemExpectedTypeDef",
    {
        "Value": ClientDeleteItemExpectedValueTypeDef,
        "Exists": bool,
        "ComparisonOperator": str,
        "AttributeValueList": List[ClientDeleteItemExpectedAttributeValueListTypeDef],
    },
    total=False,
)


class ClientDeleteItemExpectedTypeDef(_ClientDeleteItemExpectedTypeDef):
    """
    Type definition for `ClientDeleteItem` `Expected`

    Represents a condition to be compared with an attribute value. This condition can be used with
    ``DeleteItem`` , ``PutItem`` , or ``UpdateItem`` operations; if the comparison evaluates to
    true, the operation succeeds; if not, the operation fails. You can use
    ``ExpectedAttributeValue`` in one of two different ways:

    * Use ``AttributeValueList`` to specify one or more values to compare against an attribute. Use
    ``ComparisonOperator`` to specify how you want to perform the comparison. If the comparison
    evaluates to true, then the conditional operation succeeds.

    * Use ``Value`` to specify a value that DynamoDB will compare against an attribute. If the
    values match, then ``ExpectedAttributeValue`` evaluates to true and the conditional operation
    succeeds. Optionally, you can also set ``Exists`` to false, indicating that you *do not* expect
    to find the attribute value in the table. In this case, the conditional operation succeeds only
    if the comparison evaluates to false.

     ``Value`` and ``Exists`` are incompatible with ``AttributeValueList`` and
     ``ComparisonOperator`` . Note that if you use both sets of parameters at once, DynamoDB will
     return a ``ValidationException`` exception.

    - **Value** *(dict) --*

      Represents the data for the expected attribute.

      Each attribute value is described as a name-value pair. The name is the data type, and the
      value is the data itself.

      For more information, see `Data Types
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
      in the *Amazon DynamoDB Developer Guide* .

      - **S** *(string) --*

        An attribute of type String. For example:

         ``"S": "Hello"``

      - **N** *(string) --*

        An attribute of type Number. For example:

         ``"N": "123.45"``

        Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
        languages and libraries. However, DynamoDB treats them as number type attributes for
        mathematical operations.

      - **B** *(bytes) --*

        An attribute of type Binary. For example:

         ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

      - **SS** *(list) --*

        An attribute of type String Set. For example:

         ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

        - *(string) --*

      - **NS** *(list) --*

        An attribute of type Number Set. For example:

         ``"NS": ["42.2", "-19", "7.5", "3.14"]``

        Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
        languages and libraries. However, DynamoDB treats them as number type attributes for
        mathematical operations.

        - *(string) --*

      - **BS** *(list) --*

        An attribute of type Binary Set. For example:

         ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

        - *(bytes) --*

      - **M** *(dict) --*

        An attribute of type Map. For example:

         ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

        - *(string) --*

          - *(dict) --*

            Represents the data for an attribute.

            Each attribute value is described as a name-value pair. The name is the data type, and
            the value is the data itself.

            For more information, see `Data Types
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
            in the *Amazon DynamoDB Developer Guide* .

      - **L** *(list) --*

        An attribute of type List. For example:

         ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

      - **NULL** *(boolean) --*

        An attribute of type Null. For example:

         ``"NULL": true``

      - **BOOL** *(boolean) --*

        An attribute of type Boolean. For example:

         ``"BOOL": true``

    - **Exists** *(boolean) --*

      Causes DynamoDB to evaluate the value before attempting a conditional operation:

      * If ``Exists`` is ``true`` , DynamoDB will check to see if that attribute value already
      exists in the table. If it is found, then the operation succeeds. If it is not found, the
      operation fails with a ``ConditionCheckFailedException`` .

      * If ``Exists`` is ``false`` , DynamoDB assumes that the attribute value does not exist in the
      table. If in fact the value does not exist, then the assumption is valid and the operation
      succeeds. If the value is found, despite the assumption that it does not exist, the operation
      fails with a ``ConditionCheckFailedException`` .

      The default setting for ``Exists`` is ``true`` . If you supply a ``Value`` all by itself,
      DynamoDB assumes the attribute exists: You don't have to set ``Exists`` to ``true`` , because
      it is implied.

      DynamoDB returns a ``ValidationException`` if:

      * ``Exists`` is ``true`` but there is no ``Value`` to check. (You expect a value to exist, but
      don't specify what that value is.)

      * ``Exists`` is ``false`` but you also provide a ``Value`` . (You cannot expect an attribute
      to have a value, while also expecting it not to exist.)

    - **ComparisonOperator** *(string) --*

      A comparator for evaluating attributes in the ``AttributeValueList`` . For example, equals,
      greater than, less than, etc.

      The following comparison operators are available:

       ``EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH
       | IN
       | BETWEEN``

      The following are descriptions of each comparison operator.

      * ``EQ`` : Equal. ``EQ`` is supported for all data types, including lists and maps.
      ``AttributeValueList`` can contain only one ``AttributeValue`` element of type String, Number,
      Binary, String Set, Number Set, or Binary Set. If an item contains an ``AttributeValue``
      element of a different type than the one provided in the request, the value does not match.
      For example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` . Also, ``{"N":"6"}`` does not equal
      ``{"NS":["6", "2", "1"]}`` .

      * ``NE`` : Not equal. ``NE`` is supported for all data types, including lists and maps.
      ``AttributeValueList`` can contain only one ``AttributeValue`` of type String, Number, Binary,
      String Set, Number Set, or Binary Set. If an item contains an ``AttributeValue`` of a
      different type than the one provided in the request, the value does not match. For example,
      ``{"S":"6"}`` does not equal ``{"N":"6"}`` . Also, ``{"N":"6"}`` does not equal ``{"NS":["6",
      "2", "1"]}`` .

      * ``LE`` : Less than or equal.   ``AttributeValueList`` can contain only one
      ``AttributeValue`` element of type String, Number, or Binary (not a set type). If an item
      contains an ``AttributeValue`` element of a different type than the one provided in the
      request, the value does not match. For example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` .
      Also, ``{"N":"6"}`` does not compare to ``{"NS":["6", "2", "1"]}`` .

      * ``LT`` : Less than.   ``AttributeValueList`` can contain only one ``AttributeValue`` of type
      String, Number, or Binary (not a set type). If an item contains an ``AttributeValue`` element
      of a different type than the one provided in the request, the value does not match. For
      example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` . Also, ``{"N":"6"}`` does not compare to
      ``{"NS":["6", "2", "1"]}`` .

      * ``GE`` : Greater than or equal.   ``AttributeValueList`` can contain only one
      ``AttributeValue`` element of type String, Number, or Binary (not a set type). If an item
      contains an ``AttributeValue`` element of a different type than the one provided in the
      request, the value does not match. For example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` .
      Also, ``{"N":"6"}`` does not compare to ``{"NS":["6", "2", "1"]}`` .

      * ``GT`` : Greater than.   ``AttributeValueList`` can contain only one ``AttributeValue``
      element of type String, Number, or Binary (not a set type). If an item contains an
      ``AttributeValue`` element of a different type than the one provided in the request, the value
      does not match. For example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` . Also, ``{"N":"6"}``
      does not compare to ``{"NS":["6", "2", "1"]}`` .

      * ``NOT_NULL`` : The attribute exists. ``NOT_NULL`` is supported for all data types, including
      lists and maps.

      .. note::

         This operator tests for the existence of an attribute, not its data type. If the data type
         of attribute "``a`` " is null, and you evaluate it using ``NOT_NULL`` , the result is a
         Boolean ``true`` . This result is because the attribute "``a`` " exists; its data type is
         not relevant to the ``NOT_NULL`` comparison operator.

      * ``NULL`` : The attribute does not exist. ``NULL`` is supported for all data types, including
      lists and maps.

      .. note::

         This operator tests for the nonexistence of an attribute, not its data type. If the data
         type of attribute "``a`` " is null, and you evaluate it using ``NULL`` , the result is a
         Boolean ``false`` . This is because the attribute "``a`` " exists; its data type is not
         relevant to the ``NULL`` comparison operator.

      * ``CONTAINS`` : Checks for a subsequence, or value in a set.  ``AttributeValueList`` can
      contain only one ``AttributeValue`` element of type String, Number, or Binary (not a set
      type). If the target attribute of the comparison is of type String, then the operator checks
      for a substring match. If the target attribute of the comparison is of type Binary, then the
      operator looks for a subsequence of the target that matches the input. If the target attribute
      of the comparison is a set ("``SS`` ", "``NS`` ", or "``BS`` "), then the operator evaluates
      to true if it finds an exact match with any member of the set. CONTAINS is supported for
      lists: When evaluating "``a CONTAINS b`` ", "``a`` " can be a list; however, "``b`` " cannot
      be a set, a map, or a list.

      * ``NOT_CONTAINS`` : Checks for absence of a subsequence, or absence of a value in a set.
      ``AttributeValueList`` can contain only one ``AttributeValue`` element of type String, Number,
      or Binary (not a set type). If the target attribute of the comparison is a String, then the
      operator checks for the absence of a substring match. If the target attribute of the
      comparison is Binary, then the operator checks for the absence of a subsequence of the target
      that matches the input. If the target attribute of the comparison is a set ("``SS`` ", "``NS``
      ", or "``BS`` "), then the operator evaluates to true if it *does not* find an exact match
      with any member of the set. NOT_CONTAINS is supported for lists: When evaluating "``a NOT
      CONTAINS b`` ", "``a`` " can be a list; however, "``b`` " cannot be a set, a map, or a list.

      * ``BEGINS_WITH`` : Checks for a prefix.   ``AttributeValueList`` can contain only one
      ``AttributeValue`` of type String or Binary (not a Number or a set type). The target attribute
      of the comparison must be of type String or Binary (not a Number or a set type).

      * ``IN`` : Checks for matching elements in a list.  ``AttributeValueList`` can contain one or
      more ``AttributeValue`` elements of type String, Number, or Binary. These attributes are
      compared against an existing attribute of an item. If any elements of the input are equal to
      the item attribute, the expression evaluates to true.

      * ``BETWEEN`` : Greater than or equal to the first value, and less than or equal to the second
      value.   ``AttributeValueList`` must contain two ``AttributeValue`` elements of the same type,
      either String, Number, or Binary (not a set type). A target attribute matches if the target
      value is greater than, or equal to, the first element and less than, or equal to, the second
      element. If an item contains an ``AttributeValue`` element of a different type than the one
      provided in the request, the value does not match. For example, ``{"S":"6"}`` does not compare
      to ``{"N":"6"}`` . Also, ``{"N":"6"}`` does not compare to ``{"NS":["6", "2", "1"]}``

    - **AttributeValueList** *(list) --*

      One or more values to evaluate against the supplied attribute. The number of values in the
      list depends on the ``ComparisonOperator`` being used.

      For type Number, value comparisons are numeric.

      String value comparisons for greater than, equals, or less than are based on ASCII character
      code values. For example, ``a`` is greater than ``A`` , and ``a`` is greater than ``B`` . For
      a list of code values, see `http\\://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters
      <http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters>`__ .

      For Binary, DynamoDB treats each byte of the binary data as unsigned when it compares binary
      values.

      For information on specifying data types in JSON, see `JSON Data Format
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataFormat.html>`__ in the
      *Amazon DynamoDB Developer Guide* .

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

        - **S** *(string) --*

          An attribute of type String. For example:

           ``"S": "Hello"``

        - **N** *(string) --*

          An attribute of type Number. For example:

           ``"N": "123.45"``

          Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
          across languages and libraries. However, DynamoDB treats them as number type attributes
          for mathematical operations.

        - **B** *(bytes) --*

          An attribute of type Binary. For example:

           ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

        - **SS** *(list) --*

          An attribute of type String Set. For example:

           ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

          - *(string) --*

        - **NS** *(list) --*

          An attribute of type Number Set. For example:

           ``"NS": ["42.2", "-19", "7.5", "3.14"]``

          Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
          across languages and libraries. However, DynamoDB treats them as number type attributes
          for mathematical operations.

          - *(string) --*

        - **BS** *(list) --*

          An attribute of type Binary Set. For example:

           ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

          - *(bytes) --*

        - **M** *(dict) --*

          An attribute of type Map. For example:

           ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

          - *(string) --*

            - *(dict) --*

              Represents the data for an attribute.

              Each attribute value is described as a name-value pair. The name is the data type, and
              the value is the data itself.

              For more information, see `Data Types
              <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
              in the *Amazon DynamoDB Developer Guide* .

        - **L** *(list) --*

          An attribute of type List. For example:

           ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

          - *(dict) --*

            Represents the data for an attribute.

            Each attribute value is described as a name-value pair. The name is the data type, and
            the value is the data itself.

            For more information, see `Data Types
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
            in the *Amazon DynamoDB Developer Guide* .

        - **NULL** *(boolean) --*

          An attribute of type Null. For example:

           ``"NULL": true``

        - **BOOL** *(boolean) --*

          An attribute of type Boolean. For example:

           ``"BOOL": true``
    """


_ClientDeleteItemExpressionAttributeValuesTypeDef = TypedDict(
    "_ClientDeleteItemExpressionAttributeValuesTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class ClientDeleteItemExpressionAttributeValuesTypeDef(
    _ClientDeleteItemExpressionAttributeValuesTypeDef
):
    """
    Type definition for `ClientDeleteItem` `ExpressionAttributeValues`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_ClientDeleteItemKeyTypeDef = TypedDict(
    "_ClientDeleteItemKeyTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class ClientDeleteItemKeyTypeDef(_ClientDeleteItemKeyTypeDef):
    """
    Type definition for `ClientDeleteItem` `Key`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_ClientDeleteItemResponseAttributesTypeDef = TypedDict(
    "_ClientDeleteItemResponseAttributesTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class ClientDeleteItemResponseAttributesTypeDef(_ClientDeleteItemResponseAttributesTypeDef):
    """
    Type definition for `ClientDeleteItemResponse` `Attributes`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_ClientDeleteItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef = TypedDict(
    "_ClientDeleteItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef",
    {"ReadCapacityUnits": float, "WriteCapacityUnits": float, "CapacityUnits": float},
    total=False,
)


class ClientDeleteItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef(
    _ClientDeleteItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef
):
    """
    Type definition for `ClientDeleteItemResponseConsumedCapacity` `GlobalSecondaryIndexes`

    Represents the amount of provisioned throughput capacity consumed on a table or an index.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed on a table or an index.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed on a table or an index.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed on a table or an index.
    """


_ClientDeleteItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef = TypedDict(
    "_ClientDeleteItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef",
    {"ReadCapacityUnits": float, "WriteCapacityUnits": float, "CapacityUnits": float},
    total=False,
)


class ClientDeleteItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef(
    _ClientDeleteItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef
):
    """
    Type definition for `ClientDeleteItemResponseConsumedCapacity` `LocalSecondaryIndexes`

    Represents the amount of provisioned throughput capacity consumed on a table or an index.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed on a table or an index.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed on a table or an index.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed on a table or an index.
    """


_ClientDeleteItemResponseConsumedCapacityTableTypeDef = TypedDict(
    "_ClientDeleteItemResponseConsumedCapacityTableTypeDef",
    {"ReadCapacityUnits": float, "WriteCapacityUnits": float, "CapacityUnits": float},
    total=False,
)


class ClientDeleteItemResponseConsumedCapacityTableTypeDef(
    _ClientDeleteItemResponseConsumedCapacityTableTypeDef
):
    """
    Type definition for `ClientDeleteItemResponseConsumedCapacity` `Table`

    The amount of throughput consumed on the table affected by the operation.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed on a table or an index.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed on a table or an index.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed on a table or an index.
    """


_ClientDeleteItemResponseConsumedCapacityTypeDef = TypedDict(
    "_ClientDeleteItemResponseConsumedCapacityTypeDef",
    {
        "TableName": str,
        "CapacityUnits": float,
        "ReadCapacityUnits": float,
        "WriteCapacityUnits": float,
        "Table": ClientDeleteItemResponseConsumedCapacityTableTypeDef,
        "LocalSecondaryIndexes": Dict[
            str, ClientDeleteItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef
        ],
        "GlobalSecondaryIndexes": Dict[
            str, ClientDeleteItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef
        ],
    },
    total=False,
)


class ClientDeleteItemResponseConsumedCapacityTypeDef(
    _ClientDeleteItemResponseConsumedCapacityTypeDef
):
    """
    Type definition for `ClientDeleteItemResponse` `ConsumedCapacity`

    The capacity units consumed by the ``DeleteItem`` operation. The data returned includes the
    total provisioned throughput consumed, along with statistics for the table and any indexes
    involved in the operation. ``ConsumedCapacity`` is only returned if the
    ``ReturnConsumedCapacity`` parameter was specified. For more information, see `Provisioned Mode
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **TableName** *(string) --*

      The name of the table that was affected by the operation.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed by the operation.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed by the operation.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed by the operation.

    - **Table** *(dict) --*

      The amount of throughput consumed on the table affected by the operation.

      - **ReadCapacityUnits** *(float) --*

        The total number of read capacity units consumed on a table or an index.

      - **WriteCapacityUnits** *(float) --*

        The total number of write capacity units consumed on a table or an index.

      - **CapacityUnits** *(float) --*

        The total number of capacity units consumed on a table or an index.

    - **LocalSecondaryIndexes** *(dict) --*

      The amount of throughput consumed on each local index affected by the operation.

      - *(string) --*

        - *(dict) --*

          Represents the amount of provisioned throughput capacity consumed on a table or an index.

          - **ReadCapacityUnits** *(float) --*

            The total number of read capacity units consumed on a table or an index.

          - **WriteCapacityUnits** *(float) --*

            The total number of write capacity units consumed on a table or an index.

          - **CapacityUnits** *(float) --*

            The total number of capacity units consumed on a table or an index.

    - **GlobalSecondaryIndexes** *(dict) --*

      The amount of throughput consumed on each global index affected by the operation.

      - *(string) --*

        - *(dict) --*

          Represents the amount of provisioned throughput capacity consumed on a table or an index.

          - **ReadCapacityUnits** *(float) --*

            The total number of read capacity units consumed on a table or an index.

          - **WriteCapacityUnits** *(float) --*

            The total number of write capacity units consumed on a table or an index.

          - **CapacityUnits** *(float) --*

            The total number of capacity units consumed on a table or an index.
    """


_ClientDeleteItemResponseItemCollectionMetricsItemCollectionKeyTypeDef = TypedDict(
    "_ClientDeleteItemResponseItemCollectionMetricsItemCollectionKeyTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class ClientDeleteItemResponseItemCollectionMetricsItemCollectionKeyTypeDef(
    _ClientDeleteItemResponseItemCollectionMetricsItemCollectionKeyTypeDef
):
    """
    Type definition for `ClientDeleteItemResponseItemCollectionMetrics` `ItemCollectionKey`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_ClientDeleteItemResponseItemCollectionMetricsTypeDef = TypedDict(
    "_ClientDeleteItemResponseItemCollectionMetricsTypeDef",
    {
        "ItemCollectionKey": Dict[
            str, ClientDeleteItemResponseItemCollectionMetricsItemCollectionKeyTypeDef
        ],
        "SizeEstimateRangeGB": List[float],
    },
    total=False,
)


class ClientDeleteItemResponseItemCollectionMetricsTypeDef(
    _ClientDeleteItemResponseItemCollectionMetricsTypeDef
):
    """
    Type definition for `ClientDeleteItemResponse` `ItemCollectionMetrics`

    Information about item collections, if any, that were affected by the ``DeleteItem`` operation.
    ``ItemCollectionMetrics`` is only returned if the ``ReturnItemCollectionMetrics`` parameter was
    specified. If the table does not have any local secondary indexes, this information is not
    returned in the response.

    Each ``ItemCollectionMetrics`` element consists of:

    * ``ItemCollectionKey`` - The partition key value of the item collection. This is the same as
    the partition key value of the item itself.

    * ``SizeEstimateRangeGB`` - An estimate of item collection size, in gigabytes. This value is a
    two-element array containing a lower bound and an upper bound for the estimate. The estimate
    includes the size of all the items in the table, plus the size of all attributes projected into
    all of the local secondary indexes on that table. Use this estimate to measure whether a local
    secondary index is approaching its size limit. The estimate is subject to change over time;
    therefore, do not rely on the precision or accuracy of the estimate.

    - **ItemCollectionKey** *(dict) --*

      The partition key value of the item collection. This value is the same as the partition key
      value of the item.

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

          - **S** *(string) --*

            An attribute of type String. For example:

             ``"S": "Hello"``

          - **N** *(string) --*

            An attribute of type Number. For example:

             ``"N": "123.45"``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

          - **B** *(bytes) --*

            An attribute of type Binary. For example:

             ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

          - **SS** *(list) --*

            An attribute of type String Set. For example:

             ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

            - *(string) --*

          - **NS** *(list) --*

            An attribute of type Number Set. For example:

             ``"NS": ["42.2", "-19", "7.5", "3.14"]``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

            - *(string) --*

          - **BS** *(list) --*

            An attribute of type Binary Set. For example:

             ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

            - *(bytes) --*

          - **M** *(dict) --*

            An attribute of type Map. For example:

             ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

            - *(string) --*

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

          - **L** *(list) --*

            An attribute of type List. For example:

             ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

            - *(dict) --*

              Represents the data for an attribute.

              Each attribute value is described as a name-value pair. The name is the data type, and
              the value is the data itself.

              For more information, see `Data Types
              <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
              in the *Amazon DynamoDB Developer Guide* .

          - **NULL** *(boolean) --*

            An attribute of type Null. For example:

             ``"NULL": true``

          - **BOOL** *(boolean) --*

            An attribute of type Boolean. For example:

             ``"BOOL": true``

    - **SizeEstimateRangeGB** *(list) --*

      An estimate of item collection size, in gigabytes. This value is a two-element array
      containing a lower bound and an upper bound for the estimate. The estimate includes the size
      of all the items in the table, plus the size of all attributes projected into all of the local
      secondary indexes on that table. Use this estimate to measure whether a local secondary index
      is approaching its size limit.

      The estimate is subject to change over time; therefore, do not rely on the precision or
      accuracy of the estimate.

      - *(float) --*
    """


_ClientDeleteItemResponseTypeDef = TypedDict(
    "_ClientDeleteItemResponseTypeDef",
    {
        "Attributes": Dict[str, ClientDeleteItemResponseAttributesTypeDef],
        "ConsumedCapacity": ClientDeleteItemResponseConsumedCapacityTypeDef,
        "ItemCollectionMetrics": ClientDeleteItemResponseItemCollectionMetricsTypeDef,
    },
    total=False,
)


class ClientDeleteItemResponseTypeDef(_ClientDeleteItemResponseTypeDef):
    """
    Type definition for `ClientDeleteItem` `Response`

    Represents the output of a ``DeleteItem`` operation.

    - **Attributes** *(dict) --*

      A map of attribute names to ``AttributeValue`` objects, representing the item as it appeared
      before the ``DeleteItem`` operation. This map appears in the response only if ``ReturnValues``
      was specified as ``ALL_OLD`` in the request.

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

          - **S** *(string) --*

            An attribute of type String. For example:

             ``"S": "Hello"``

          - **N** *(string) --*

            An attribute of type Number. For example:

             ``"N": "123.45"``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

          - **B** *(bytes) --*

            An attribute of type Binary. For example:

             ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

          - **SS** *(list) --*

            An attribute of type String Set. For example:

             ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

            - *(string) --*

          - **NS** *(list) --*

            An attribute of type Number Set. For example:

             ``"NS": ["42.2", "-19", "7.5", "3.14"]``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

            - *(string) --*

          - **BS** *(list) --*

            An attribute of type Binary Set. For example:

             ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

            - *(bytes) --*

          - **M** *(dict) --*

            An attribute of type Map. For example:

             ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

            - *(string) --*

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

          - **L** *(list) --*

            An attribute of type List. For example:

             ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

            - *(dict) --*

              Represents the data for an attribute.

              Each attribute value is described as a name-value pair. The name is the data type, and
              the value is the data itself.

              For more information, see `Data Types
              <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
              in the *Amazon DynamoDB Developer Guide* .

          - **NULL** *(boolean) --*

            An attribute of type Null. For example:

             ``"NULL": true``

          - **BOOL** *(boolean) --*

            An attribute of type Boolean. For example:

             ``"BOOL": true``

    - **ConsumedCapacity** *(dict) --*

      The capacity units consumed by the ``DeleteItem`` operation. The data returned includes the
      total provisioned throughput consumed, along with statistics for the table and any indexes
      involved in the operation. ``ConsumedCapacity`` is only returned if the
      ``ReturnConsumedCapacity`` parameter was specified. For more information, see `Provisioned
      Mode
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html>`__
      in the *Amazon DynamoDB Developer Guide* .

      - **TableName** *(string) --*

        The name of the table that was affected by the operation.

      - **CapacityUnits** *(float) --*

        The total number of capacity units consumed by the operation.

      - **ReadCapacityUnits** *(float) --*

        The total number of read capacity units consumed by the operation.

      - **WriteCapacityUnits** *(float) --*

        The total number of write capacity units consumed by the operation.

      - **Table** *(dict) --*

        The amount of throughput consumed on the table affected by the operation.

        - **ReadCapacityUnits** *(float) --*

          The total number of read capacity units consumed on a table or an index.

        - **WriteCapacityUnits** *(float) --*

          The total number of write capacity units consumed on a table or an index.

        - **CapacityUnits** *(float) --*

          The total number of capacity units consumed on a table or an index.

      - **LocalSecondaryIndexes** *(dict) --*

        The amount of throughput consumed on each local index affected by the operation.

        - *(string) --*

          - *(dict) --*

            Represents the amount of provisioned throughput capacity consumed on a table or an
            index.

            - **ReadCapacityUnits** *(float) --*

              The total number of read capacity units consumed on a table or an index.

            - **WriteCapacityUnits** *(float) --*

              The total number of write capacity units consumed on a table or an index.

            - **CapacityUnits** *(float) --*

              The total number of capacity units consumed on a table or an index.

      - **GlobalSecondaryIndexes** *(dict) --*

        The amount of throughput consumed on each global index affected by the operation.

        - *(string) --*

          - *(dict) --*

            Represents the amount of provisioned throughput capacity consumed on a table or an
            index.

            - **ReadCapacityUnits** *(float) --*

              The total number of read capacity units consumed on a table or an index.

            - **WriteCapacityUnits** *(float) --*

              The total number of write capacity units consumed on a table or an index.

            - **CapacityUnits** *(float) --*

              The total number of capacity units consumed on a table or an index.

    - **ItemCollectionMetrics** *(dict) --*

      Information about item collections, if any, that were affected by the ``DeleteItem``
      operation. ``ItemCollectionMetrics`` is only returned if the ``ReturnItemCollectionMetrics``
      parameter was specified. If the table does not have any local secondary indexes, this
      information is not returned in the response.

      Each ``ItemCollectionMetrics`` element consists of:

      * ``ItemCollectionKey`` - The partition key value of the item collection. This is the same as
      the partition key value of the item itself.

      * ``SizeEstimateRangeGB`` - An estimate of item collection size, in gigabytes. This value is a
      two-element array containing a lower bound and an upper bound for the estimate. The estimate
      includes the size of all the items in the table, plus the size of all attributes projected
      into all of the local secondary indexes on that table. Use this estimate to measure whether a
      local secondary index is approaching its size limit. The estimate is subject to change over
      time; therefore, do not rely on the precision or accuracy of the estimate.

      - **ItemCollectionKey** *(dict) --*

        The partition key value of the item collection. This value is the same as the partition key
        value of the item.

        - *(string) --*

          - *(dict) --*

            Represents the data for an attribute.

            Each attribute value is described as a name-value pair. The name is the data type, and
            the value is the data itself.

            For more information, see `Data Types
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
            in the *Amazon DynamoDB Developer Guide* .

            - **S** *(string) --*

              An attribute of type String. For example:

               ``"S": "Hello"``

            - **N** *(string) --*

              An attribute of type Number. For example:

               ``"N": "123.45"``

              Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
              across languages and libraries. However, DynamoDB treats them as number type
              attributes for mathematical operations.

            - **B** *(bytes) --*

              An attribute of type Binary. For example:

               ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

            - **SS** *(list) --*

              An attribute of type String Set. For example:

               ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

              - *(string) --*

            - **NS** *(list) --*

              An attribute of type Number Set. For example:

               ``"NS": ["42.2", "-19", "7.5", "3.14"]``

              Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
              across languages and libraries. However, DynamoDB treats them as number type
              attributes for mathematical operations.

              - *(string) --*

            - **BS** *(list) --*

              An attribute of type Binary Set. For example:

               ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

              - *(bytes) --*

            - **M** *(dict) --*

              An attribute of type Map. For example:

               ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

              - *(string) --*

                - *(dict) --*

                  Represents the data for an attribute.

                  Each attribute value is described as a name-value pair. The name is the data type,
                  and the value is the data itself.

                  For more information, see `Data Types
                  <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                  in the *Amazon DynamoDB Developer Guide* .

            - **L** *(list) --*

              An attribute of type List. For example:

               ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

            - **NULL** *(boolean) --*

              An attribute of type Null. For example:

               ``"NULL": true``

            - **BOOL** *(boolean) --*

              An attribute of type Boolean. For example:

               ``"BOOL": true``

      - **SizeEstimateRangeGB** *(list) --*

        An estimate of item collection size, in gigabytes. This value is a two-element array
        containing a lower bound and an upper bound for the estimate. The estimate includes the size
        of all the items in the table, plus the size of all attributes projected into all of the
        local secondary indexes on that table. Use this estimate to measure whether a local
        secondary index is approaching its size limit.

        The estimate is subject to change over time; therefore, do not rely on the precision or
        accuracy of the estimate.

        - *(float) --*
    """


_ClientDeleteTableResponseTableDescriptionArchivalSummaryTypeDef = TypedDict(
    "_ClientDeleteTableResponseTableDescriptionArchivalSummaryTypeDef",
    {"ArchivalDateTime": datetime, "ArchivalReason": str, "ArchivalBackupArn": str},
    total=False,
)


class ClientDeleteTableResponseTableDescriptionArchivalSummaryTypeDef(
    _ClientDeleteTableResponseTableDescriptionArchivalSummaryTypeDef
):
    """
    Type definition for `ClientDeleteTableResponseTableDescription` `ArchivalSummary`

    Contains information about the table archive.

    - **ArchivalDateTime** *(datetime) --*

      The date and time when table archival was initiated by DynamoDB, in UNIX epoch time format.

    - **ArchivalReason** *(string) --*

      The reason DynamoDB archived the table. Currently, the only possible value is:

      * ``INACCESSIBLE_ENCRYPTION_CREDENTIALS`` - The table was archived due to the table's AWS KMS
      key being inaccessible for more than seven days. An On-Demand backup was created at the
      archival time.

    - **ArchivalBackupArn** *(string) --*

      The Amazon Resource Name (ARN) of the backup the table was archived to, when applicable in the
      archival reason. If you wish to restore this backup to the same table name, you will need to
      delete the original table.
    """


_ClientDeleteTableResponseTableDescriptionAttributeDefinitionsTypeDef = TypedDict(
    "_ClientDeleteTableResponseTableDescriptionAttributeDefinitionsTypeDef",
    {"AttributeName": str, "AttributeType": str},
    total=False,
)


class ClientDeleteTableResponseTableDescriptionAttributeDefinitionsTypeDef(
    _ClientDeleteTableResponseTableDescriptionAttributeDefinitionsTypeDef
):
    """
    Type definition for `ClientDeleteTableResponseTableDescription` `AttributeDefinitions`

    Represents an attribute for describing the key schema for the table and indexes.

    - **AttributeName** *(string) --*

      A name for the attribute.

    - **AttributeType** *(string) --*

      The data type for the attribute, where:

      * ``S`` - the attribute is of type String

      * ``N`` - the attribute is of type Number

      * ``B`` - the attribute is of type Binary
    """


_ClientDeleteTableResponseTableDescriptionBillingModeSummaryTypeDef = TypedDict(
    "_ClientDeleteTableResponseTableDescriptionBillingModeSummaryTypeDef",
    {"BillingMode": str, "LastUpdateToPayPerRequestDateTime": datetime},
    total=False,
)


class ClientDeleteTableResponseTableDescriptionBillingModeSummaryTypeDef(
    _ClientDeleteTableResponseTableDescriptionBillingModeSummaryTypeDef
):
    """
    Type definition for `ClientDeleteTableResponseTableDescription` `BillingModeSummary`

    Contains the details for the read/write capacity mode.

    - **BillingMode** *(string) --*

      Controls how you are charged for read and write throughput and how you manage capacity. This
      setting can be changed later.

      * ``PROVISIONED`` - Sets the read/write capacity mode to ``PROVISIONED`` . We recommend using
      ``PROVISIONED`` for predictable workloads.

      * ``PAY_PER_REQUEST`` - Sets the read/write capacity mode to ``PAY_PER_REQUEST`` . We
      recommend using ``PAY_PER_REQUEST`` for unpredictable workloads.

    - **LastUpdateToPayPerRequestDateTime** *(datetime) --*

      Represents the time when ``PAY_PER_REQUEST`` was last set as the read/write capacity mode.
    """


_ClientDeleteTableResponseTableDescriptionGlobalSecondaryIndexesKeySchemaTypeDef = TypedDict(
    "_ClientDeleteTableResponseTableDescriptionGlobalSecondaryIndexesKeySchemaTypeDef",
    {"AttributeName": str, "KeyType": str},
    total=False,
)


class ClientDeleteTableResponseTableDescriptionGlobalSecondaryIndexesKeySchemaTypeDef(
    _ClientDeleteTableResponseTableDescriptionGlobalSecondaryIndexesKeySchemaTypeDef
):
    """
    Type definition for `ClientDeleteTableResponseTableDescriptionGlobalSecondaryIndexes`
    `KeySchema`

    Represents *a single element* of a key schema. A key schema specifies the attributes that make
    up the primary key of a table, or the key attributes of an index.

    A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
    simple primary key would be represented by one ``KeySchemaElement`` (for the partition key). A
    composite primary key would require one ``KeySchemaElement`` for the partition key, and another
    ``KeySchemaElement`` for the sort key.

    A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The data
    type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a
    Map.

    - **AttributeName** *(string) --*

      The name of a key attribute.

    - **KeyType** *(string) --*

      The role that this key attribute will assume:

      * ``HASH`` - partition key

      * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.
    """


_ClientDeleteTableResponseTableDescriptionGlobalSecondaryIndexesProjectionTypeDef = TypedDict(
    "_ClientDeleteTableResponseTableDescriptionGlobalSecondaryIndexesProjectionTypeDef",
    {"ProjectionType": str, "NonKeyAttributes": List[str]},
    total=False,
)


class ClientDeleteTableResponseTableDescriptionGlobalSecondaryIndexesProjectionTypeDef(
    _ClientDeleteTableResponseTableDescriptionGlobalSecondaryIndexesProjectionTypeDef
):
    """
    Type definition for `ClientDeleteTableResponseTableDescriptionGlobalSecondaryIndexes`
    `Projection`

    Represents attributes that are copied (projected) from the table into the global secondary
    index. These are in addition to the primary key attributes and index key attributes, which are
    automatically projected.

    - **ProjectionType** *(string) --*

      The set of attributes that are projected into the index:

      * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

      * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list of
      projected attributes is in ``NonKeyAttributes`` .

      * ``ALL`` - All of the table attributes are projected into the index.

    - **NonKeyAttributes** *(list) --*

      Represents the non-key attribute names which will be projected into the index.

      For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all of the
      local secondary indexes, must not exceed 20. If you project the same attribute into two
      different indexes, this counts as two distinct attributes when determining the total.

      - *(string) --*
    """


_ClientDeleteTableResponseTableDescriptionGlobalSecondaryIndexesProvisionedThroughputTypeDef = TypedDict(
    "_ClientDeleteTableResponseTableDescriptionGlobalSecondaryIndexesProvisionedThroughputTypeDef",
    {
        "LastIncreaseDateTime": datetime,
        "LastDecreaseDateTime": datetime,
        "NumberOfDecreasesToday": int,
        "ReadCapacityUnits": int,
        "WriteCapacityUnits": int,
    },
    total=False,
)


class ClientDeleteTableResponseTableDescriptionGlobalSecondaryIndexesProvisionedThroughputTypeDef(
    _ClientDeleteTableResponseTableDescriptionGlobalSecondaryIndexesProvisionedThroughputTypeDef
):
    """
    Type definition for `ClientDeleteTableResponseTableDescriptionGlobalSecondaryIndexes`
    `ProvisionedThroughput`

    Represents the provisioned throughput settings for the specified global secondary index.

    For current minimum and maximum provisioned throughput values, see `Limits
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the *Amazon
    DynamoDB Developer Guide* .

    - **LastIncreaseDateTime** *(datetime) --*

      The date and time of the last provisioned throughput increase for this table.

    - **LastDecreaseDateTime** *(datetime) --*

      The date and time of the last provisioned throughput decrease for this table.

    - **NumberOfDecreasesToday** *(integer) --*

      The number of provisioned throughput decreases for this table during this UTC calendar day.
      For current maximums on provisioned throughput decreases, see `Limits
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
      *Amazon DynamoDB Developer Guide* .

    - **ReadCapacityUnits** *(integer) --*

      The maximum number of strongly consistent reads consumed per second before DynamoDB returns a
      ``ThrottlingException`` . Eventually consistent reads require less effort than strongly
      consistent reads, so a setting of 50 ``ReadCapacityUnits`` per second provides 100 eventually
      consistent ``ReadCapacityUnits`` per second.

    - **WriteCapacityUnits** *(integer) --*

      The maximum number of writes consumed per second before DynamoDB returns a
      ``ThrottlingException`` .
    """


_ClientDeleteTableResponseTableDescriptionGlobalSecondaryIndexesTypeDef = TypedDict(
    "_ClientDeleteTableResponseTableDescriptionGlobalSecondaryIndexesTypeDef",
    {
        "IndexName": str,
        "KeySchema": List[
            ClientDeleteTableResponseTableDescriptionGlobalSecondaryIndexesKeySchemaTypeDef
        ],
        "Projection": ClientDeleteTableResponseTableDescriptionGlobalSecondaryIndexesProjectionTypeDef,
        "IndexStatus": str,
        "Backfilling": bool,
        "ProvisionedThroughput": ClientDeleteTableResponseTableDescriptionGlobalSecondaryIndexesProvisionedThroughputTypeDef,
        "IndexSizeBytes": int,
        "ItemCount": int,
        "IndexArn": str,
    },
    total=False,
)


class ClientDeleteTableResponseTableDescriptionGlobalSecondaryIndexesTypeDef(
    _ClientDeleteTableResponseTableDescriptionGlobalSecondaryIndexesTypeDef
):
    """
    Type definition for `ClientDeleteTableResponseTableDescription` `GlobalSecondaryIndexes`

    Represents the properties of a global secondary index.

    - **IndexName** *(string) --*

      The name of the global secondary index.

    - **KeySchema** *(list) --*

      The complete key schema for a global secondary index, which consists of one or more pairs of
      attribute names and key types:

      * ``HASH`` - partition key

      * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.

      - *(dict) --*

        Represents *a single element* of a key schema. A key schema specifies the attributes that
        make up the primary key of a table, or the key attributes of an index.

        A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
        simple primary key would be represented by one ``KeySchemaElement`` (for the partition key).
        A composite primary key would require one ``KeySchemaElement`` for the partition key, and
        another ``KeySchemaElement`` for the sort key.

        A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The
        data type must be one of String, Number, or Binary. The attribute cannot be nested within a
        List or a Map.

        - **AttributeName** *(string) --*

          The name of a key attribute.

        - **KeyType** *(string) --*

          The role that this key attribute will assume:

          * ``HASH`` - partition key

          * ``RANGE`` - sort key

          .. note::

            The partition key of an item is also known as its *hash attribute* . The term "hash
            attribute" derives from DynamoDB's usage of an internal hash function to evenly
            distribute data items across partitions, based on their partition key values.

            The sort key of an item is also known as its *range attribute* . The term "range
            attribute" derives from the way DynamoDB stores items with the same partition key
            physically close together, in sorted order by the sort key value.

    - **Projection** *(dict) --*

      Represents attributes that are copied (projected) from the table into the global secondary
      index. These are in addition to the primary key attributes and index key attributes, which are
      automatically projected.

      - **ProjectionType** *(string) --*

        The set of attributes that are projected into the index:

        * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

        * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list
        of projected attributes is in ``NonKeyAttributes`` .

        * ``ALL`` - All of the table attributes are projected into the index.

      - **NonKeyAttributes** *(list) --*

        Represents the non-key attribute names which will be projected into the index.

        For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all of
        the local secondary indexes, must not exceed 20. If you project the same attribute into two
        different indexes, this counts as two distinct attributes when determining the total.

        - *(string) --*

    - **IndexStatus** *(string) --*

      The current state of the global secondary index:

      * ``CREATING`` - The index is being created.

      * ``UPDATING`` - The index is being updated.

      * ``DELETING`` - The index is being deleted.

      * ``ACTIVE`` - The index is ready for use.

    - **Backfilling** *(boolean) --*

      Indicates whether the index is currently backfilling. *Backfilling* is the process of reading
      items from the table and determining whether they can be added to the index. (Not all items
      will qualify: For example, a partition key cannot have any duplicate values.) If an item can
      be added to the index, DynamoDB will do so. After all items have been processed, the
      backfilling operation is complete and ``Backfilling`` is false.

      You can delete an index that is being created during the ``Backfilling`` phase when
      ``IndexStatus`` is set to CREATING and ``Backfilling`` is true. You can't delete the index
      that is being created when ``IndexStatus`` is set to CREATING and ``Backfilling`` is false.

      .. note::

        For indexes that were created during a ``CreateTable`` operation, the ``Backfilling``
        attribute does not appear in the ``DescribeTable`` output.

    - **ProvisionedThroughput** *(dict) --*

      Represents the provisioned throughput settings for the specified global secondary index.

      For current minimum and maximum provisioned throughput values, see `Limits
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
      *Amazon DynamoDB Developer Guide* .

      - **LastIncreaseDateTime** *(datetime) --*

        The date and time of the last provisioned throughput increase for this table.

      - **LastDecreaseDateTime** *(datetime) --*

        The date and time of the last provisioned throughput decrease for this table.

      - **NumberOfDecreasesToday** *(integer) --*

        The number of provisioned throughput decreases for this table during this UTC calendar day.
        For current maximums on provisioned throughput decreases, see `Limits
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
        *Amazon DynamoDB Developer Guide* .

      - **ReadCapacityUnits** *(integer) --*

        The maximum number of strongly consistent reads consumed per second before DynamoDB returns
        a ``ThrottlingException`` . Eventually consistent reads require less effort than strongly
        consistent reads, so a setting of 50 ``ReadCapacityUnits`` per second provides 100
        eventually consistent ``ReadCapacityUnits`` per second.

      - **WriteCapacityUnits** *(integer) --*

        The maximum number of writes consumed per second before DynamoDB returns a
        ``ThrottlingException`` .

    - **IndexSizeBytes** *(integer) --*

      The total size of the specified index, in bytes. DynamoDB updates this value approximately
      every six hours. Recent changes might not be reflected in this value.

    - **ItemCount** *(integer) --*

      The number of items in the specified index. DynamoDB updates this value approximately every
      six hours. Recent changes might not be reflected in this value.

    - **IndexArn** *(string) --*

      The Amazon Resource Name (ARN) that uniquely identifies the index.
    """


_ClientDeleteTableResponseTableDescriptionKeySchemaTypeDef = TypedDict(
    "_ClientDeleteTableResponseTableDescriptionKeySchemaTypeDef",
    {"AttributeName": str, "KeyType": str},
    total=False,
)


class ClientDeleteTableResponseTableDescriptionKeySchemaTypeDef(
    _ClientDeleteTableResponseTableDescriptionKeySchemaTypeDef
):
    """
    Type definition for `ClientDeleteTableResponseTableDescription` `KeySchema`

    Represents *a single element* of a key schema. A key schema specifies the attributes that make
    up the primary key of a table, or the key attributes of an index.

    A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
    simple primary key would be represented by one ``KeySchemaElement`` (for the partition key). A
    composite primary key would require one ``KeySchemaElement`` for the partition key, and another
    ``KeySchemaElement`` for the sort key.

    A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The data
    type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a
    Map.

    - **AttributeName** *(string) --*

      The name of a key attribute.

    - **KeyType** *(string) --*

      The role that this key attribute will assume:

      * ``HASH`` - partition key

      * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.
    """


_ClientDeleteTableResponseTableDescriptionLocalSecondaryIndexesKeySchemaTypeDef = TypedDict(
    "_ClientDeleteTableResponseTableDescriptionLocalSecondaryIndexesKeySchemaTypeDef",
    {"AttributeName": str, "KeyType": str},
    total=False,
)


class ClientDeleteTableResponseTableDescriptionLocalSecondaryIndexesKeySchemaTypeDef(
    _ClientDeleteTableResponseTableDescriptionLocalSecondaryIndexesKeySchemaTypeDef
):
    """
    Type definition for `ClientDeleteTableResponseTableDescriptionLocalSecondaryIndexes` `KeySchema`

    Represents *a single element* of a key schema. A key schema specifies the attributes that make
    up the primary key of a table, or the key attributes of an index.

    A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
    simple primary key would be represented by one ``KeySchemaElement`` (for the partition key). A
    composite primary key would require one ``KeySchemaElement`` for the partition key, and another
    ``KeySchemaElement`` for the sort key.

    A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The data
    type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a
    Map.

    - **AttributeName** *(string) --*

      The name of a key attribute.

    - **KeyType** *(string) --*

      The role that this key attribute will assume:

      * ``HASH`` - partition key

      * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.
    """


_ClientDeleteTableResponseTableDescriptionLocalSecondaryIndexesProjectionTypeDef = TypedDict(
    "_ClientDeleteTableResponseTableDescriptionLocalSecondaryIndexesProjectionTypeDef",
    {"ProjectionType": str, "NonKeyAttributes": List[str]},
    total=False,
)


class ClientDeleteTableResponseTableDescriptionLocalSecondaryIndexesProjectionTypeDef(
    _ClientDeleteTableResponseTableDescriptionLocalSecondaryIndexesProjectionTypeDef
):
    """
    Type definition for `ClientDeleteTableResponseTableDescriptionLocalSecondaryIndexes`
    `Projection`

    Represents attributes that are copied (projected) from the table into the global secondary
    index. These are in addition to the primary key attributes and index key attributes, which are
    automatically projected.

    - **ProjectionType** *(string) --*

      The set of attributes that are projected into the index:

      * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

      * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list of
      projected attributes is in ``NonKeyAttributes`` .

      * ``ALL`` - All of the table attributes are projected into the index.

    - **NonKeyAttributes** *(list) --*

      Represents the non-key attribute names which will be projected into the index.

      For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all of the
      local secondary indexes, must not exceed 20. If you project the same attribute into two
      different indexes, this counts as two distinct attributes when determining the total.

      - *(string) --*
    """


_ClientDeleteTableResponseTableDescriptionLocalSecondaryIndexesTypeDef = TypedDict(
    "_ClientDeleteTableResponseTableDescriptionLocalSecondaryIndexesTypeDef",
    {
        "IndexName": str,
        "KeySchema": List[
            ClientDeleteTableResponseTableDescriptionLocalSecondaryIndexesKeySchemaTypeDef
        ],
        "Projection": ClientDeleteTableResponseTableDescriptionLocalSecondaryIndexesProjectionTypeDef,
        "IndexSizeBytes": int,
        "ItemCount": int,
        "IndexArn": str,
    },
    total=False,
)


class ClientDeleteTableResponseTableDescriptionLocalSecondaryIndexesTypeDef(
    _ClientDeleteTableResponseTableDescriptionLocalSecondaryIndexesTypeDef
):
    """
    Type definition for `ClientDeleteTableResponseTableDescription` `LocalSecondaryIndexes`

    Represents the properties of a local secondary index.

    - **IndexName** *(string) --*

      Represents the name of the local secondary index.

    - **KeySchema** *(list) --*

      The complete key schema for the local secondary index, consisting of one or more pairs of
      attribute names and key types:

      * ``HASH`` - partition key

      * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.

      - *(dict) --*

        Represents *a single element* of a key schema. A key schema specifies the attributes that
        make up the primary key of a table, or the key attributes of an index.

        A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
        simple primary key would be represented by one ``KeySchemaElement`` (for the partition key).
        A composite primary key would require one ``KeySchemaElement`` for the partition key, and
        another ``KeySchemaElement`` for the sort key.

        A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The
        data type must be one of String, Number, or Binary. The attribute cannot be nested within a
        List or a Map.

        - **AttributeName** *(string) --*

          The name of a key attribute.

        - **KeyType** *(string) --*

          The role that this key attribute will assume:

          * ``HASH`` - partition key

          * ``RANGE`` - sort key

          .. note::

            The partition key of an item is also known as its *hash attribute* . The term "hash
            attribute" derives from DynamoDB's usage of an internal hash function to evenly
            distribute data items across partitions, based on their partition key values.

            The sort key of an item is also known as its *range attribute* . The term "range
            attribute" derives from the way DynamoDB stores items with the same partition key
            physically close together, in sorted order by the sort key value.

    - **Projection** *(dict) --*

      Represents attributes that are copied (projected) from the table into the global secondary
      index. These are in addition to the primary key attributes and index key attributes, which are
      automatically projected.

      - **ProjectionType** *(string) --*

        The set of attributes that are projected into the index:

        * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

        * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list
        of projected attributes is in ``NonKeyAttributes`` .

        * ``ALL`` - All of the table attributes are projected into the index.

      - **NonKeyAttributes** *(list) --*

        Represents the non-key attribute names which will be projected into the index.

        For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all of
        the local secondary indexes, must not exceed 20. If you project the same attribute into two
        different indexes, this counts as two distinct attributes when determining the total.

        - *(string) --*

    - **IndexSizeBytes** *(integer) --*

      The total size of the specified index, in bytes. DynamoDB updates this value approximately
      every six hours. Recent changes might not be reflected in this value.

    - **ItemCount** *(integer) --*

      The number of items in the specified index. DynamoDB updates this value approximately every
      six hours. Recent changes might not be reflected in this value.

    - **IndexArn** *(string) --*

      The Amazon Resource Name (ARN) that uniquely identifies the index.
    """


_ClientDeleteTableResponseTableDescriptionProvisionedThroughputTypeDef = TypedDict(
    "_ClientDeleteTableResponseTableDescriptionProvisionedThroughputTypeDef",
    {
        "LastIncreaseDateTime": datetime,
        "LastDecreaseDateTime": datetime,
        "NumberOfDecreasesToday": int,
        "ReadCapacityUnits": int,
        "WriteCapacityUnits": int,
    },
    total=False,
)


class ClientDeleteTableResponseTableDescriptionProvisionedThroughputTypeDef(
    _ClientDeleteTableResponseTableDescriptionProvisionedThroughputTypeDef
):
    """
    Type definition for `ClientDeleteTableResponseTableDescription` `ProvisionedThroughput`

    The provisioned throughput settings for the table, consisting of read and write capacity units,
    along with data about increases and decreases.

    - **LastIncreaseDateTime** *(datetime) --*

      The date and time of the last provisioned throughput increase for this table.

    - **LastDecreaseDateTime** *(datetime) --*

      The date and time of the last provisioned throughput decrease for this table.

    - **NumberOfDecreasesToday** *(integer) --*

      The number of provisioned throughput decreases for this table during this UTC calendar day.
      For current maximums on provisioned throughput decreases, see `Limits
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
      *Amazon DynamoDB Developer Guide* .

    - **ReadCapacityUnits** *(integer) --*

      The maximum number of strongly consistent reads consumed per second before DynamoDB returns a
      ``ThrottlingException`` . Eventually consistent reads require less effort than strongly
      consistent reads, so a setting of 50 ``ReadCapacityUnits`` per second provides 100 eventually
      consistent ``ReadCapacityUnits`` per second.

    - **WriteCapacityUnits** *(integer) --*

      The maximum number of writes consumed per second before DynamoDB returns a
      ``ThrottlingException`` .
    """


_ClientDeleteTableResponseTableDescriptionReplicasGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef = TypedDict(
    "_ClientDeleteTableResponseTableDescriptionReplicasGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef",
    {"ReadCapacityUnits": int},
    total=False,
)


class ClientDeleteTableResponseTableDescriptionReplicasGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef(
    _ClientDeleteTableResponseTableDescriptionReplicasGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef
):
    """
    Type definition for `ClientDeleteTableResponseTableDescriptionReplicasGlobalSecondaryIndexes`
    `ProvisionedThroughputOverride`

    If not described, uses the source table GSI's read capacity settings.

    - **ReadCapacityUnits** *(integer) --*

      Replica-specific read capacity units. If not specified, uses the source table's read capacity
      settings.
    """


_ClientDeleteTableResponseTableDescriptionReplicasGlobalSecondaryIndexesTypeDef = TypedDict(
    "_ClientDeleteTableResponseTableDescriptionReplicasGlobalSecondaryIndexesTypeDef",
    {
        "IndexName": str,
        "ProvisionedThroughputOverride": ClientDeleteTableResponseTableDescriptionReplicasGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef,
    },
    total=False,
)


class ClientDeleteTableResponseTableDescriptionReplicasGlobalSecondaryIndexesTypeDef(
    _ClientDeleteTableResponseTableDescriptionReplicasGlobalSecondaryIndexesTypeDef
):
    """
    Type definition for `ClientDeleteTableResponseTableDescriptionReplicas` `GlobalSecondaryIndexes`

    Represents the properties of a replica global secondary index.

    - **IndexName** *(string) --*

      The name of the global secondary index.

    - **ProvisionedThroughputOverride** *(dict) --*

      If not described, uses the source table GSI's read capacity settings.

      - **ReadCapacityUnits** *(integer) --*

        Replica-specific read capacity units. If not specified, uses the source table's read
        capacity settings.
    """


_ClientDeleteTableResponseTableDescriptionReplicasProvisionedThroughputOverrideTypeDef = TypedDict(
    "_ClientDeleteTableResponseTableDescriptionReplicasProvisionedThroughputOverrideTypeDef",
    {"ReadCapacityUnits": int},
    total=False,
)


class ClientDeleteTableResponseTableDescriptionReplicasProvisionedThroughputOverrideTypeDef(
    _ClientDeleteTableResponseTableDescriptionReplicasProvisionedThroughputOverrideTypeDef
):
    """
    Type definition for `ClientDeleteTableResponseTableDescriptionReplicas`
    `ProvisionedThroughputOverride`

    Replica-specific provisioned throughput. If not described, uses the source table's provisioned
    throughput settings.

    - **ReadCapacityUnits** *(integer) --*

      Replica-specific read capacity units. If not specified, uses the source table's read capacity
      settings.
    """


_ClientDeleteTableResponseTableDescriptionReplicasTypeDef = TypedDict(
    "_ClientDeleteTableResponseTableDescriptionReplicasTypeDef",
    {
        "RegionName": str,
        "ReplicaStatus": str,
        "ReplicaStatusDescription": str,
        "ReplicaStatusPercentProgress": str,
        "KMSMasterKeyId": str,
        "ProvisionedThroughputOverride": ClientDeleteTableResponseTableDescriptionReplicasProvisionedThroughputOverrideTypeDef,
        "GlobalSecondaryIndexes": List[
            ClientDeleteTableResponseTableDescriptionReplicasGlobalSecondaryIndexesTypeDef
        ],
    },
    total=False,
)


class ClientDeleteTableResponseTableDescriptionReplicasTypeDef(
    _ClientDeleteTableResponseTableDescriptionReplicasTypeDef
):
    """
    Type definition for `ClientDeleteTableResponseTableDescription` `Replicas`

    Contains the details of the replica.

    - **RegionName** *(string) --*

      The name of the Region.

    - **ReplicaStatus** *(string) --*

      The current state of the replica:

      * ``CREATING`` - The replica is being created.

      * ``UPDATING`` - The replica is being updated.

      * ``DELETING`` - The replica is being deleted.

      * ``ACTIVE`` - The replica is ready for use.

    - **ReplicaStatusDescription** *(string) --*

      Detailed information about the replica status.

    - **ReplicaStatusPercentProgress** *(string) --*

      Specifies the progress of a Create, Update, or Delete action on the replica as a percentage.

    - **KMSMasterKeyId** *(string) --*

      The AWS KMS customer master key (CMK) of the replica that will be used for AWS KMS encryption.

    - **ProvisionedThroughputOverride** *(dict) --*

      Replica-specific provisioned throughput. If not described, uses the source table's provisioned
      throughput settings.

      - **ReadCapacityUnits** *(integer) --*

        Replica-specific read capacity units. If not specified, uses the source table's read
        capacity settings.

    - **GlobalSecondaryIndexes** *(list) --*

      Replica-specific global secondary index settings.

      - *(dict) --*

        Represents the properties of a replica global secondary index.

        - **IndexName** *(string) --*

          The name of the global secondary index.

        - **ProvisionedThroughputOverride** *(dict) --*

          If not described, uses the source table GSI's read capacity settings.

          - **ReadCapacityUnits** *(integer) --*

            Replica-specific read capacity units. If not specified, uses the source table's read
            capacity settings.
    """


_ClientDeleteTableResponseTableDescriptionRestoreSummaryTypeDef = TypedDict(
    "_ClientDeleteTableResponseTableDescriptionRestoreSummaryTypeDef",
    {
        "SourceBackupArn": str,
        "SourceTableArn": str,
        "RestoreDateTime": datetime,
        "RestoreInProgress": bool,
    },
    total=False,
)


class ClientDeleteTableResponseTableDescriptionRestoreSummaryTypeDef(
    _ClientDeleteTableResponseTableDescriptionRestoreSummaryTypeDef
):
    """
    Type definition for `ClientDeleteTableResponseTableDescription` `RestoreSummary`

    Contains details for the restore.

    - **SourceBackupArn** *(string) --*

      The Amazon Resource Name (ARN) of the backup from which the table was restored.

    - **SourceTableArn** *(string) --*

      The ARN of the source table of the backup that is being restored.

    - **RestoreDateTime** *(datetime) --*

      Point in time or source backup time.

    - **RestoreInProgress** *(boolean) --*

      Indicates if a restore is in progress or not.
    """


_ClientDeleteTableResponseTableDescriptionSSEDescriptionTypeDef = TypedDict(
    "_ClientDeleteTableResponseTableDescriptionSSEDescriptionTypeDef",
    {
        "Status": str,
        "SSEType": str,
        "KMSMasterKeyArn": str,
        "InaccessibleEncryptionDateTime": datetime,
    },
    total=False,
)


class ClientDeleteTableResponseTableDescriptionSSEDescriptionTypeDef(
    _ClientDeleteTableResponseTableDescriptionSSEDescriptionTypeDef
):
    """
    Type definition for `ClientDeleteTableResponseTableDescription` `SSEDescription`

    The description of the server-side encryption status on the specified table.

    - **Status** *(string) --*

      Represents the current state of server-side encryption. The only supported values are:

      * ``ENABLED`` - Server-side encryption is enabled.

      * ``UPDATING`` - Server-side encryption is being updated.

    - **SSEType** *(string) --*

      Server-side encryption type. The only supported value is:

      * ``KMS`` - Server-side encryption that uses AWS Key Management Service. The key is stored in
      your account and is managed by AWS KMS (AWS KMS charges apply).

    - **KMSMasterKeyArn** *(string) --*

      The AWS KMS customer master key (CMK) ARN used for the AWS KMS encryption.

    - **InaccessibleEncryptionDateTime** *(datetime) --*

      Indicates the time, in UNIX epoch date format, when DynamoDB detected that the table's AWS KMS
      key was inaccessible. This attribute will automatically be cleared when DynamoDB detects that
      the table's AWS KMS key is accessible again. DynamoDB will initiate the table archival process
      when table's AWS KMS key remains inaccessible for more than seven days from this date.
    """


_ClientDeleteTableResponseTableDescriptionStreamSpecificationTypeDef = TypedDict(
    "_ClientDeleteTableResponseTableDescriptionStreamSpecificationTypeDef",
    {"StreamEnabled": bool, "StreamViewType": str},
    total=False,
)


class ClientDeleteTableResponseTableDescriptionStreamSpecificationTypeDef(
    _ClientDeleteTableResponseTableDescriptionStreamSpecificationTypeDef
):
    """
    Type definition for `ClientDeleteTableResponseTableDescription` `StreamSpecification`

    The current DynamoDB Streams configuration for the table.

    - **StreamEnabled** *(boolean) --*

      Indicates whether DynamoDB Streams is enabled (true) or disabled (false) on the table.

    - **StreamViewType** *(string) --*

      When an item in the table is modified, ``StreamViewType`` determines what information is
      written to the stream for this table. Valid values for ``StreamViewType`` are:

      * ``KEYS_ONLY`` - Only the key attributes of the modified item are written to the stream.

      * ``NEW_IMAGE`` - The entire item, as it appears after it was modified, is written to the
      stream.

      * ``OLD_IMAGE`` - The entire item, as it appeared before it was modified, is written to the
      stream.

      * ``NEW_AND_OLD_IMAGES`` - Both the new and the old item images of the item are written to the
      stream.
    """


_ClientDeleteTableResponseTableDescriptionTypeDef = TypedDict(
    "_ClientDeleteTableResponseTableDescriptionTypeDef",
    {
        "AttributeDefinitions": List[
            ClientDeleteTableResponseTableDescriptionAttributeDefinitionsTypeDef
        ],
        "TableName": str,
        "KeySchema": List[ClientDeleteTableResponseTableDescriptionKeySchemaTypeDef],
        "TableStatus": str,
        "CreationDateTime": datetime,
        "ProvisionedThroughput": ClientDeleteTableResponseTableDescriptionProvisionedThroughputTypeDef,
        "TableSizeBytes": int,
        "ItemCount": int,
        "TableArn": str,
        "TableId": str,
        "BillingModeSummary": ClientDeleteTableResponseTableDescriptionBillingModeSummaryTypeDef,
        "LocalSecondaryIndexes": List[
            ClientDeleteTableResponseTableDescriptionLocalSecondaryIndexesTypeDef
        ],
        "GlobalSecondaryIndexes": List[
            ClientDeleteTableResponseTableDescriptionGlobalSecondaryIndexesTypeDef
        ],
        "StreamSpecification": ClientDeleteTableResponseTableDescriptionStreamSpecificationTypeDef,
        "LatestStreamLabel": str,
        "LatestStreamArn": str,
        "GlobalTableVersion": str,
        "Replicas": List[ClientDeleteTableResponseTableDescriptionReplicasTypeDef],
        "RestoreSummary": ClientDeleteTableResponseTableDescriptionRestoreSummaryTypeDef,
        "SSEDescription": ClientDeleteTableResponseTableDescriptionSSEDescriptionTypeDef,
        "ArchivalSummary": ClientDeleteTableResponseTableDescriptionArchivalSummaryTypeDef,
    },
    total=False,
)


class ClientDeleteTableResponseTableDescriptionTypeDef(
    _ClientDeleteTableResponseTableDescriptionTypeDef
):
    """
    Type definition for `ClientDeleteTableResponse` `TableDescription`

    Represents the properties of a table.

    - **AttributeDefinitions** *(list) --*

      An array of ``AttributeDefinition`` objects. Each of these objects describes one attribute in
      the table and index key schema.

      Each ``AttributeDefinition`` object in this array is composed of:

      * ``AttributeName`` - The name of the attribute.

      * ``AttributeType`` - The data type for the attribute.

      - *(dict) --*

        Represents an attribute for describing the key schema for the table and indexes.

        - **AttributeName** *(string) --*

          A name for the attribute.

        - **AttributeType** *(string) --*

          The data type for the attribute, where:

          * ``S`` - the attribute is of type String

          * ``N`` - the attribute is of type Number

          * ``B`` - the attribute is of type Binary

    - **TableName** *(string) --*

      The name of the table.

    - **KeySchema** *(list) --*

      The primary key structure for the table. Each ``KeySchemaElement`` consists of:

      * ``AttributeName`` - The name of the attribute.

      * ``KeyType`` - The role of the attribute:

        * ``HASH`` - partition key

        * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.

      For more information about primary keys, see `Primary Key
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html#DataModelPrimaryKey>`__
      in the *Amazon DynamoDB Developer Guide* .

      - *(dict) --*

        Represents *a single element* of a key schema. A key schema specifies the attributes that
        make up the primary key of a table, or the key attributes of an index.

        A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
        simple primary key would be represented by one ``KeySchemaElement`` (for the partition key).
        A composite primary key would require one ``KeySchemaElement`` for the partition key, and
        another ``KeySchemaElement`` for the sort key.

        A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The
        data type must be one of String, Number, or Binary. The attribute cannot be nested within a
        List or a Map.

        - **AttributeName** *(string) --*

          The name of a key attribute.

        - **KeyType** *(string) --*

          The role that this key attribute will assume:

          * ``HASH`` - partition key

          * ``RANGE`` - sort key

          .. note::

            The partition key of an item is also known as its *hash attribute* . The term "hash
            attribute" derives from DynamoDB's usage of an internal hash function to evenly
            distribute data items across partitions, based on their partition key values.

            The sort key of an item is also known as its *range attribute* . The term "range
            attribute" derives from the way DynamoDB stores items with the same partition key
            physically close together, in sorted order by the sort key value.

    - **TableStatus** *(string) --*

      The current state of the table:

      * ``CREATING`` - The table is being created.

      * ``UPDATING`` - The table is being updated.

      * ``DELETING`` - The table is being deleted.

      * ``ACTIVE`` - The table is ready for use.

      * ``INACCESSIBLE_ENCRYPTION_CREDENTIALS`` - The AWS KMS key used to encrypt the table in
      inaccessible. Table operations may fail due to failure to use the AWS KMS key. DynamoDB will
      initiate the table archival process when a table's AWS KMS key remains inaccessible for more
      than seven days.

      * ``ARCHIVING`` - The table is being archived. Operations are not allowed until archival is
      complete.

      * ``ARCHIVED`` - The table has been archived. See the ArchivalReason for more information.

    - **CreationDateTime** *(datetime) --*

      The date and time when the table was created, in `UNIX epoch time
      <http://www.epochconverter.com/>`__ format.

    - **ProvisionedThroughput** *(dict) --*

      The provisioned throughput settings for the table, consisting of read and write capacity
      units, along with data about increases and decreases.

      - **LastIncreaseDateTime** *(datetime) --*

        The date and time of the last provisioned throughput increase for this table.

      - **LastDecreaseDateTime** *(datetime) --*

        The date and time of the last provisioned throughput decrease for this table.

      - **NumberOfDecreasesToday** *(integer) --*

        The number of provisioned throughput decreases for this table during this UTC calendar day.
        For current maximums on provisioned throughput decreases, see `Limits
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
        *Amazon DynamoDB Developer Guide* .

      - **ReadCapacityUnits** *(integer) --*

        The maximum number of strongly consistent reads consumed per second before DynamoDB returns
        a ``ThrottlingException`` . Eventually consistent reads require less effort than strongly
        consistent reads, so a setting of 50 ``ReadCapacityUnits`` per second provides 100
        eventually consistent ``ReadCapacityUnits`` per second.

      - **WriteCapacityUnits** *(integer) --*

        The maximum number of writes consumed per second before DynamoDB returns a
        ``ThrottlingException`` .

    - **TableSizeBytes** *(integer) --*

      The total size of the specified table, in bytes. DynamoDB updates this value approximately
      every six hours. Recent changes might not be reflected in this value.

    - **ItemCount** *(integer) --*

      The number of items in the specified table. DynamoDB updates this value approximately every
      six hours. Recent changes might not be reflected in this value.

    - **TableArn** *(string) --*

      The Amazon Resource Name (ARN) that uniquely identifies the table.

    - **TableId** *(string) --*

      Unique identifier for the table for which the backup was created.

    - **BillingModeSummary** *(dict) --*

      Contains the details for the read/write capacity mode.

      - **BillingMode** *(string) --*

        Controls how you are charged for read and write throughput and how you manage capacity. This
        setting can be changed later.

        * ``PROVISIONED`` - Sets the read/write capacity mode to ``PROVISIONED`` . We recommend
        using ``PROVISIONED`` for predictable workloads.

        * ``PAY_PER_REQUEST`` - Sets the read/write capacity mode to ``PAY_PER_REQUEST`` . We
        recommend using ``PAY_PER_REQUEST`` for unpredictable workloads.

      - **LastUpdateToPayPerRequestDateTime** *(datetime) --*

        Represents the time when ``PAY_PER_REQUEST`` was last set as the read/write capacity mode.

    - **LocalSecondaryIndexes** *(list) --*

      Represents one or more local secondary indexes on the table. Each index is scoped to a given
      partition key value. Tables with one or more local secondary indexes are subject to an item
      collection size limit, where the amount of data within a given item collection cannot exceed
      10 GB. Each element is composed of:

      * ``IndexName`` - The name of the local secondary index.

      * ``KeySchema`` - Specifies the complete index key schema. The attribute names in the key
      schema must be between 1 and 255 characters (inclusive). The key schema must begin with the
      same partition key as the table.

      * ``Projection`` - Specifies attributes that are copied (projected) from the table into the
      index. These are in addition to the primary key attributes and index key attributes, which are
      automatically projected. Each attribute specification is composed of:

        * ``ProjectionType`` - One of the following:

          * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

          * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list
          of projected attributes is in ``NonKeyAttributes`` .

          * ``ALL`` - All of the table attributes are projected into the index.

        * ``NonKeyAttributes`` - A list of one or more non-key attribute names that are projected
        into the secondary index. The total count of attributes provided in ``NonKeyAttributes`` ,
        summed across all of the secondary indexes, must not exceed 20. If you project the same
        attribute into two different indexes, this counts as two distinct attributes when
        determining the total.

      * ``IndexSizeBytes`` - Represents the total size of the index, in bytes. DynamoDB updates this
      value approximately every six hours. Recent changes might not be reflected in this value.

      * ``ItemCount`` - Represents the number of items in the index. DynamoDB updates this value
      approximately every six hours. Recent changes might not be reflected in this value.

      If the table is in the ``DELETING`` state, no information about indexes will be returned.

      - *(dict) --*

        Represents the properties of a local secondary index.

        - **IndexName** *(string) --*

          Represents the name of the local secondary index.

        - **KeySchema** *(list) --*

          The complete key schema for the local secondary index, consisting of one or more pairs of
          attribute names and key types:

          * ``HASH`` - partition key

          * ``RANGE`` - sort key

          .. note::

            The partition key of an item is also known as its *hash attribute* . The term "hash
            attribute" derives from DynamoDB's usage of an internal hash function to evenly
            distribute data items across partitions, based on their partition key values.

            The sort key of an item is also known as its *range attribute* . The term "range
            attribute" derives from the way DynamoDB stores items with the same partition key
            physically close together, in sorted order by the sort key value.

          - *(dict) --*

            Represents *a single element* of a key schema. A key schema specifies the attributes
            that make up the primary key of a table, or the key attributes of an index.

            A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example,
            a simple primary key would be represented by one ``KeySchemaElement`` (for the partition
            key). A composite primary key would require one ``KeySchemaElement`` for the partition
            key, and another ``KeySchemaElement`` for the sort key.

            A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute).
            The data type must be one of String, Number, or Binary. The attribute cannot be nested
            within a List or a Map.

            - **AttributeName** *(string) --*

              The name of a key attribute.

            - **KeyType** *(string) --*

              The role that this key attribute will assume:

              * ``HASH`` - partition key

              * ``RANGE`` - sort key

              .. note::

                The partition key of an item is also known as its *hash attribute* . The term "hash
                attribute" derives from DynamoDB's usage of an internal hash function to evenly
                distribute data items across partitions, based on their partition key values.

                The sort key of an item is also known as its *range attribute* . The term "range
                attribute" derives from the way DynamoDB stores items with the same partition key
                physically close together, in sorted order by the sort key value.

        - **Projection** *(dict) --*

          Represents attributes that are copied (projected) from the table into the global secondary
          index. These are in addition to the primary key attributes and index key attributes, which
          are automatically projected.

          - **ProjectionType** *(string) --*

            The set of attributes that are projected into the index:

            * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

            * ``INCLUDE`` - Only the specified table attributes are projected into the index. The
            list of projected attributes is in ``NonKeyAttributes`` .

            * ``ALL`` - All of the table attributes are projected into the index.

          - **NonKeyAttributes** *(list) --*

            Represents the non-key attribute names which will be projected into the index.

            For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all
            of the local secondary indexes, must not exceed 20. If you project the same attribute
            into two different indexes, this counts as two distinct attributes when determining the
            total.

            - *(string) --*

        - **IndexSizeBytes** *(integer) --*

          The total size of the specified index, in bytes. DynamoDB updates this value approximately
          every six hours. Recent changes might not be reflected in this value.

        - **ItemCount** *(integer) --*

          The number of items in the specified index. DynamoDB updates this value approximately
          every six hours. Recent changes might not be reflected in this value.

        - **IndexArn** *(string) --*

          The Amazon Resource Name (ARN) that uniquely identifies the index.

    - **GlobalSecondaryIndexes** *(list) --*

      The global secondary indexes, if any, on the table. Each index is scoped to a given partition
      key value. Each element is composed of:

      * ``Backfilling`` - If true, then the index is currently in the backfilling phase. Backfilling
      occurs only when a new global secondary index is added to the table. It is the process by
      which DynamoDB populates the new index with data from the table. (This attribute does not
      appear for indexes that were created during a ``CreateTable`` operation.)  You can delete an
      index that is being created during the ``Backfilling`` phase when ``IndexStatus`` is set to
      CREATING and ``Backfilling`` is true. You can't delete the index that is being created when
      ``IndexStatus`` is set to CREATING and ``Backfilling`` is false. (This attribute does not
      appear for indexes that were created during a ``CreateTable`` operation.)

      * ``IndexName`` - The name of the global secondary index.

      * ``IndexSizeBytes`` - The total size of the global secondary index, in bytes. DynamoDB
      updates this value approximately every six hours. Recent changes might not be reflected in
      this value.

      * ``IndexStatus`` - The current status of the global secondary index:

        * ``CREATING`` - The index is being created.

        * ``UPDATING`` - The index is being updated.

        * ``DELETING`` - The index is being deleted.

        * ``ACTIVE`` - The index is ready for use.

      * ``ItemCount`` - The number of items in the global secondary index. DynamoDB updates this
      value approximately every six hours. Recent changes might not be reflected in this value.

      * ``KeySchema`` - Specifies the complete index key schema. The attribute names in the key
      schema must be between 1 and 255 characters (inclusive). The key schema must begin with the
      same partition key as the table.

      * ``Projection`` - Specifies attributes that are copied (projected) from the table into the
      index. These are in addition to the primary key attributes and index key attributes, which are
      automatically projected. Each attribute specification is composed of:

        * ``ProjectionType`` - One of the following:

          * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

          * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list
          of projected attributes is in ``NonKeyAttributes`` .

          * ``ALL`` - All of the table attributes are projected into the index.

        * ``NonKeyAttributes`` - A list of one or more non-key attribute names that are projected
        into the secondary index. The total count of attributes provided in ``NonKeyAttributes`` ,
        summed across all of the secondary indexes, must not exceed 20. If you project the same
        attribute into two different indexes, this counts as two distinct attributes when
        determining the total.

      * ``ProvisionedThroughput`` - The provisioned throughput settings for the global secondary
      index, consisting of read and write capacity units, along with data about increases and
      decreases.

      If the table is in the ``DELETING`` state, no information about indexes will be returned.

      - *(dict) --*

        Represents the properties of a global secondary index.

        - **IndexName** *(string) --*

          The name of the global secondary index.

        - **KeySchema** *(list) --*

          The complete key schema for a global secondary index, which consists of one or more pairs
          of attribute names and key types:

          * ``HASH`` - partition key

          * ``RANGE`` - sort key

          .. note::

            The partition key of an item is also known as its *hash attribute* . The term "hash
            attribute" derives from DynamoDB's usage of an internal hash function to evenly
            distribute data items across partitions, based on their partition key values.

            The sort key of an item is also known as its *range attribute* . The term "range
            attribute" derives from the way DynamoDB stores items with the same partition key
            physically close together, in sorted order by the sort key value.

          - *(dict) --*

            Represents *a single element* of a key schema. A key schema specifies the attributes
            that make up the primary key of a table, or the key attributes of an index.

            A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example,
            a simple primary key would be represented by one ``KeySchemaElement`` (for the partition
            key). A composite primary key would require one ``KeySchemaElement`` for the partition
            key, and another ``KeySchemaElement`` for the sort key.

            A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute).
            The data type must be one of String, Number, or Binary. The attribute cannot be nested
            within a List or a Map.

            - **AttributeName** *(string) --*

              The name of a key attribute.

            - **KeyType** *(string) --*

              The role that this key attribute will assume:

              * ``HASH`` - partition key

              * ``RANGE`` - sort key

              .. note::

                The partition key of an item is also known as its *hash attribute* . The term "hash
                attribute" derives from DynamoDB's usage of an internal hash function to evenly
                distribute data items across partitions, based on their partition key values.

                The sort key of an item is also known as its *range attribute* . The term "range
                attribute" derives from the way DynamoDB stores items with the same partition key
                physically close together, in sorted order by the sort key value.

        - **Projection** *(dict) --*

          Represents attributes that are copied (projected) from the table into the global secondary
          index. These are in addition to the primary key attributes and index key attributes, which
          are automatically projected.

          - **ProjectionType** *(string) --*

            The set of attributes that are projected into the index:

            * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

            * ``INCLUDE`` - Only the specified table attributes are projected into the index. The
            list of projected attributes is in ``NonKeyAttributes`` .

            * ``ALL`` - All of the table attributes are projected into the index.

          - **NonKeyAttributes** *(list) --*

            Represents the non-key attribute names which will be projected into the index.

            For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all
            of the local secondary indexes, must not exceed 20. If you project the same attribute
            into two different indexes, this counts as two distinct attributes when determining the
            total.

            - *(string) --*

        - **IndexStatus** *(string) --*

          The current state of the global secondary index:

          * ``CREATING`` - The index is being created.

          * ``UPDATING`` - The index is being updated.

          * ``DELETING`` - The index is being deleted.

          * ``ACTIVE`` - The index is ready for use.

        - **Backfilling** *(boolean) --*

          Indicates whether the index is currently backfilling. *Backfilling* is the process of
          reading items from the table and determining whether they can be added to the index. (Not
          all items will qualify: For example, a partition key cannot have any duplicate values.) If
          an item can be added to the index, DynamoDB will do so. After all items have been
          processed, the backfilling operation is complete and ``Backfilling`` is false.

          You can delete an index that is being created during the ``Backfilling`` phase when
          ``IndexStatus`` is set to CREATING and ``Backfilling`` is true. You can't delete the index
          that is being created when ``IndexStatus`` is set to CREATING and ``Backfilling`` is
          false.

          .. note::

            For indexes that were created during a ``CreateTable`` operation, the ``Backfilling``
            attribute does not appear in the ``DescribeTable`` output.

        - **ProvisionedThroughput** *(dict) --*

          Represents the provisioned throughput settings for the specified global secondary index.

          For current minimum and maximum provisioned throughput values, see `Limits
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
          *Amazon DynamoDB Developer Guide* .

          - **LastIncreaseDateTime** *(datetime) --*

            The date and time of the last provisioned throughput increase for this table.

          - **LastDecreaseDateTime** *(datetime) --*

            The date and time of the last provisioned throughput decrease for this table.

          - **NumberOfDecreasesToday** *(integer) --*

            The number of provisioned throughput decreases for this table during this UTC calendar
            day. For current maximums on provisioned throughput decreases, see `Limits
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
            *Amazon DynamoDB Developer Guide* .

          - **ReadCapacityUnits** *(integer) --*

            The maximum number of strongly consistent reads consumed per second before DynamoDB
            returns a ``ThrottlingException`` . Eventually consistent reads require less effort than
            strongly consistent reads, so a setting of 50 ``ReadCapacityUnits`` per second provides
            100 eventually consistent ``ReadCapacityUnits`` per second.

          - **WriteCapacityUnits** *(integer) --*

            The maximum number of writes consumed per second before DynamoDB returns a
            ``ThrottlingException`` .

        - **IndexSizeBytes** *(integer) --*

          The total size of the specified index, in bytes. DynamoDB updates this value approximately
          every six hours. Recent changes might not be reflected in this value.

        - **ItemCount** *(integer) --*

          The number of items in the specified index. DynamoDB updates this value approximately
          every six hours. Recent changes might not be reflected in this value.

        - **IndexArn** *(string) --*

          The Amazon Resource Name (ARN) that uniquely identifies the index.

    - **StreamSpecification** *(dict) --*

      The current DynamoDB Streams configuration for the table.

      - **StreamEnabled** *(boolean) --*

        Indicates whether DynamoDB Streams is enabled (true) or disabled (false) on the table.

      - **StreamViewType** *(string) --*

        When an item in the table is modified, ``StreamViewType`` determines what information is
        written to the stream for this table. Valid values for ``StreamViewType`` are:

        * ``KEYS_ONLY`` - Only the key attributes of the modified item are written to the stream.

        * ``NEW_IMAGE`` - The entire item, as it appears after it was modified, is written to the
        stream.

        * ``OLD_IMAGE`` - The entire item, as it appeared before it was modified, is written to the
        stream.

        * ``NEW_AND_OLD_IMAGES`` - Both the new and the old item images of the item are written to
        the stream.

    - **LatestStreamLabel** *(string) --*

      A timestamp, in ISO 8601 format, for this stream.

      Note that ``LatestStreamLabel`` is not a unique identifier for the stream, because it is
      possible that a stream from another table might have the same timestamp. However, the
      combination of the following three elements is guaranteed to be unique:

      * AWS customer ID

      * Table name

      * ``StreamLabel``

    - **LatestStreamArn** *(string) --*

      The Amazon Resource Name (ARN) that uniquely identifies the latest stream for this table.

    - **GlobalTableVersion** *(string) --*

      Represents the version of `global tables
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GlobalTables.html>`__ in
      use, if the table is replicated across AWS Regions.

    - **Replicas** *(list) --*

      Represents replicas of the table.

      - *(dict) --*

        Contains the details of the replica.

        - **RegionName** *(string) --*

          The name of the Region.

        - **ReplicaStatus** *(string) --*

          The current state of the replica:

          * ``CREATING`` - The replica is being created.

          * ``UPDATING`` - The replica is being updated.

          * ``DELETING`` - The replica is being deleted.

          * ``ACTIVE`` - The replica is ready for use.

        - **ReplicaStatusDescription** *(string) --*

          Detailed information about the replica status.

        - **ReplicaStatusPercentProgress** *(string) --*

          Specifies the progress of a Create, Update, or Delete action on the replica as a
          percentage.

        - **KMSMasterKeyId** *(string) --*

          The AWS KMS customer master key (CMK) of the replica that will be used for AWS KMS
          encryption.

        - **ProvisionedThroughputOverride** *(dict) --*

          Replica-specific provisioned throughput. If not described, uses the source table's
          provisioned throughput settings.

          - **ReadCapacityUnits** *(integer) --*

            Replica-specific read capacity units. If not specified, uses the source table's read
            capacity settings.

        - **GlobalSecondaryIndexes** *(list) --*

          Replica-specific global secondary index settings.

          - *(dict) --*

            Represents the properties of a replica global secondary index.

            - **IndexName** *(string) --*

              The name of the global secondary index.

            - **ProvisionedThroughputOverride** *(dict) --*

              If not described, uses the source table GSI's read capacity settings.

              - **ReadCapacityUnits** *(integer) --*

                Replica-specific read capacity units. If not specified, uses the source table's read
                capacity settings.

    - **RestoreSummary** *(dict) --*

      Contains details for the restore.

      - **SourceBackupArn** *(string) --*

        The Amazon Resource Name (ARN) of the backup from which the table was restored.

      - **SourceTableArn** *(string) --*

        The ARN of the source table of the backup that is being restored.

      - **RestoreDateTime** *(datetime) --*

        Point in time or source backup time.

      - **RestoreInProgress** *(boolean) --*

        Indicates if a restore is in progress or not.

    - **SSEDescription** *(dict) --*

      The description of the server-side encryption status on the specified table.

      - **Status** *(string) --*

        Represents the current state of server-side encryption. The only supported values are:

        * ``ENABLED`` - Server-side encryption is enabled.

        * ``UPDATING`` - Server-side encryption is being updated.

      - **SSEType** *(string) --*

        Server-side encryption type. The only supported value is:

        * ``KMS`` - Server-side encryption that uses AWS Key Management Service. The key is stored
        in your account and is managed by AWS KMS (AWS KMS charges apply).

      - **KMSMasterKeyArn** *(string) --*

        The AWS KMS customer master key (CMK) ARN used for the AWS KMS encryption.

      - **InaccessibleEncryptionDateTime** *(datetime) --*

        Indicates the time, in UNIX epoch date format, when DynamoDB detected that the table's AWS
        KMS key was inaccessible. This attribute will automatically be cleared when DynamoDB detects
        that the table's AWS KMS key is accessible again. DynamoDB will initiate the table archival
        process when table's AWS KMS key remains inaccessible for more than seven days from this
        date.

    - **ArchivalSummary** *(dict) --*

      Contains information about the table archive.

      - **ArchivalDateTime** *(datetime) --*

        The date and time when table archival was initiated by DynamoDB, in UNIX epoch time format.

      - **ArchivalReason** *(string) --*

        The reason DynamoDB archived the table. Currently, the only possible value is:

        * ``INACCESSIBLE_ENCRYPTION_CREDENTIALS`` - The table was archived due to the table's AWS
        KMS key being inaccessible for more than seven days. An On-Demand backup was created at the
        archival time.

      - **ArchivalBackupArn** *(string) --*

        The Amazon Resource Name (ARN) of the backup the table was archived to, when applicable in
        the archival reason. If you wish to restore this backup to the same table name, you will
        need to delete the original table.
    """


_ClientDeleteTableResponseTypeDef = TypedDict(
    "_ClientDeleteTableResponseTypeDef",
    {"TableDescription": ClientDeleteTableResponseTableDescriptionTypeDef},
    total=False,
)


class ClientDeleteTableResponseTypeDef(_ClientDeleteTableResponseTypeDef):
    """
    Type definition for `ClientDeleteTable` `Response`

    Represents the output of a ``DeleteTable`` operation.

    - **TableDescription** *(dict) --*

      Represents the properties of a table.

      - **AttributeDefinitions** *(list) --*

        An array of ``AttributeDefinition`` objects. Each of these objects describes one attribute
        in the table and index key schema.

        Each ``AttributeDefinition`` object in this array is composed of:

        * ``AttributeName`` - The name of the attribute.

        * ``AttributeType`` - The data type for the attribute.

        - *(dict) --*

          Represents an attribute for describing the key schema for the table and indexes.

          - **AttributeName** *(string) --*

            A name for the attribute.

          - **AttributeType** *(string) --*

            The data type for the attribute, where:

            * ``S`` - the attribute is of type String

            * ``N`` - the attribute is of type Number

            * ``B`` - the attribute is of type Binary

      - **TableName** *(string) --*

        The name of the table.

      - **KeySchema** *(list) --*

        The primary key structure for the table. Each ``KeySchemaElement`` consists of:

        * ``AttributeName`` - The name of the attribute.

        * ``KeyType`` - The role of the attribute:

          * ``HASH`` - partition key

          * ``RANGE`` - sort key

        .. note::

          The partition key of an item is also known as its *hash attribute* . The term "hash
          attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
          data items across partitions, based on their partition key values.

          The sort key of an item is also known as its *range attribute* . The term "range
          attribute" derives from the way DynamoDB stores items with the same partition key
          physically close together, in sorted order by the sort key value.

        For more information about primary keys, see `Primary Key
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html#DataModelPrimaryKey>`__
        in the *Amazon DynamoDB Developer Guide* .

        - *(dict) --*

          Represents *a single element* of a key schema. A key schema specifies the attributes that
          make up the primary key of a table, or the key attributes of an index.

          A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
          simple primary key would be represented by one ``KeySchemaElement`` (for the partition
          key). A composite primary key would require one ``KeySchemaElement`` for the partition
          key, and another ``KeySchemaElement`` for the sort key.

          A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The
          data type must be one of String, Number, or Binary. The attribute cannot be nested within
          a List or a Map.

          - **AttributeName** *(string) --*

            The name of a key attribute.

          - **KeyType** *(string) --*

            The role that this key attribute will assume:

            * ``HASH`` - partition key

            * ``RANGE`` - sort key

            .. note::

              The partition key of an item is also known as its *hash attribute* . The term "hash
              attribute" derives from DynamoDB's usage of an internal hash function to evenly
              distribute data items across partitions, based on their partition key values.

              The sort key of an item is also known as its *range attribute* . The term "range
              attribute" derives from the way DynamoDB stores items with the same partition key
              physically close together, in sorted order by the sort key value.

      - **TableStatus** *(string) --*

        The current state of the table:

        * ``CREATING`` - The table is being created.

        * ``UPDATING`` - The table is being updated.

        * ``DELETING`` - The table is being deleted.

        * ``ACTIVE`` - The table is ready for use.

        * ``INACCESSIBLE_ENCRYPTION_CREDENTIALS`` - The AWS KMS key used to encrypt the table in
        inaccessible. Table operations may fail due to failure to use the AWS KMS key. DynamoDB will
        initiate the table archival process when a table's AWS KMS key remains inaccessible for more
        than seven days.

        * ``ARCHIVING`` - The table is being archived. Operations are not allowed until archival is
        complete.

        * ``ARCHIVED`` - The table has been archived. See the ArchivalReason for more information.

      - **CreationDateTime** *(datetime) --*

        The date and time when the table was created, in `UNIX epoch time
        <http://www.epochconverter.com/>`__ format.

      - **ProvisionedThroughput** *(dict) --*

        The provisioned throughput settings for the table, consisting of read and write capacity
        units, along with data about increases and decreases.

        - **LastIncreaseDateTime** *(datetime) --*

          The date and time of the last provisioned throughput increase for this table.

        - **LastDecreaseDateTime** *(datetime) --*

          The date and time of the last provisioned throughput decrease for this table.

        - **NumberOfDecreasesToday** *(integer) --*

          The number of provisioned throughput decreases for this table during this UTC calendar
          day. For current maximums on provisioned throughput decreases, see `Limits
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
          *Amazon DynamoDB Developer Guide* .

        - **ReadCapacityUnits** *(integer) --*

          The maximum number of strongly consistent reads consumed per second before DynamoDB
          returns a ``ThrottlingException`` . Eventually consistent reads require less effort than
          strongly consistent reads, so a setting of 50 ``ReadCapacityUnits`` per second provides
          100 eventually consistent ``ReadCapacityUnits`` per second.

        - **WriteCapacityUnits** *(integer) --*

          The maximum number of writes consumed per second before DynamoDB returns a
          ``ThrottlingException`` .

      - **TableSizeBytes** *(integer) --*

        The total size of the specified table, in bytes. DynamoDB updates this value approximately
        every six hours. Recent changes might not be reflected in this value.

      - **ItemCount** *(integer) --*

        The number of items in the specified table. DynamoDB updates this value approximately every
        six hours. Recent changes might not be reflected in this value.

      - **TableArn** *(string) --*

        The Amazon Resource Name (ARN) that uniquely identifies the table.

      - **TableId** *(string) --*

        Unique identifier for the table for which the backup was created.

      - **BillingModeSummary** *(dict) --*

        Contains the details for the read/write capacity mode.

        - **BillingMode** *(string) --*

          Controls how you are charged for read and write throughput and how you manage capacity.
          This setting can be changed later.

          * ``PROVISIONED`` - Sets the read/write capacity mode to ``PROVISIONED`` . We recommend
          using ``PROVISIONED`` for predictable workloads.

          * ``PAY_PER_REQUEST`` - Sets the read/write capacity mode to ``PAY_PER_REQUEST`` . We
          recommend using ``PAY_PER_REQUEST`` for unpredictable workloads.

        - **LastUpdateToPayPerRequestDateTime** *(datetime) --*

          Represents the time when ``PAY_PER_REQUEST`` was last set as the read/write capacity mode.

      - **LocalSecondaryIndexes** *(list) --*

        Represents one or more local secondary indexes on the table. Each index is scoped to a given
        partition key value. Tables with one or more local secondary indexes are subject to an item
        collection size limit, where the amount of data within a given item collection cannot exceed
        10 GB. Each element is composed of:

        * ``IndexName`` - The name of the local secondary index.

        * ``KeySchema`` - Specifies the complete index key schema. The attribute names in the key
        schema must be between 1 and 255 characters (inclusive). The key schema must begin with the
        same partition key as the table.

        * ``Projection`` - Specifies attributes that are copied (projected) from the table into the
        index. These are in addition to the primary key attributes and index key attributes, which
        are automatically projected. Each attribute specification is composed of:

          * ``ProjectionType`` - One of the following:

            * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

            * ``INCLUDE`` - Only the specified table attributes are projected into the index. The
            list of projected attributes is in ``NonKeyAttributes`` .

            * ``ALL`` - All of the table attributes are projected into the index.

          * ``NonKeyAttributes`` - A list of one or more non-key attribute names that are projected
          into the secondary index. The total count of attributes provided in ``NonKeyAttributes`` ,
          summed across all of the secondary indexes, must not exceed 20. If you project the same
          attribute into two different indexes, this counts as two distinct attributes when
          determining the total.

        * ``IndexSizeBytes`` - Represents the total size of the index, in bytes. DynamoDB updates
        this value approximately every six hours. Recent changes might not be reflected in this
        value.

        * ``ItemCount`` - Represents the number of items in the index. DynamoDB updates this value
        approximately every six hours. Recent changes might not be reflected in this value.

        If the table is in the ``DELETING`` state, no information about indexes will be returned.

        - *(dict) --*

          Represents the properties of a local secondary index.

          - **IndexName** *(string) --*

            Represents the name of the local secondary index.

          - **KeySchema** *(list) --*

            The complete key schema for the local secondary index, consisting of one or more pairs
            of attribute names and key types:

            * ``HASH`` - partition key

            * ``RANGE`` - sort key

            .. note::

              The partition key of an item is also known as its *hash attribute* . The term "hash
              attribute" derives from DynamoDB's usage of an internal hash function to evenly
              distribute data items across partitions, based on their partition key values.

              The sort key of an item is also known as its *range attribute* . The term "range
              attribute" derives from the way DynamoDB stores items with the same partition key
              physically close together, in sorted order by the sort key value.

            - *(dict) --*

              Represents *a single element* of a key schema. A key schema specifies the attributes
              that make up the primary key of a table, or the key attributes of an index.

              A ``KeySchemaElement`` represents exactly one attribute of the primary key. For
              example, a simple primary key would be represented by one ``KeySchemaElement`` (for
              the partition key). A composite primary key would require one ``KeySchemaElement`` for
              the partition key, and another ``KeySchemaElement`` for the sort key.

              A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute).
              The data type must be one of String, Number, or Binary. The attribute cannot be nested
              within a List or a Map.

              - **AttributeName** *(string) --*

                The name of a key attribute.

              - **KeyType** *(string) --*

                The role that this key attribute will assume:

                * ``HASH`` - partition key

                * ``RANGE`` - sort key

                .. note::

                  The partition key of an item is also known as its *hash attribute* . The term
                  "hash attribute" derives from DynamoDB's usage of an internal hash function to
                  evenly distribute data items across partitions, based on their partition key
                  values.

                  The sort key of an item is also known as its *range attribute* . The term "range
                  attribute" derives from the way DynamoDB stores items with the same partition key
                  physically close together, in sorted order by the sort key value.

          - **Projection** *(dict) --*

            Represents attributes that are copied (projected) from the table into the global
            secondary index. These are in addition to the primary key attributes and index key
            attributes, which are automatically projected.

            - **ProjectionType** *(string) --*

              The set of attributes that are projected into the index:

              * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

              * ``INCLUDE`` - Only the specified table attributes are projected into the index. The
              list of projected attributes is in ``NonKeyAttributes`` .

              * ``ALL`` - All of the table attributes are projected into the index.

            - **NonKeyAttributes** *(list) --*

              Represents the non-key attribute names which will be projected into the index.

              For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all
              of the local secondary indexes, must not exceed 20. If you project the same attribute
              into two different indexes, this counts as two distinct attributes when determining
              the total.

              - *(string) --*

          - **IndexSizeBytes** *(integer) --*

            The total size of the specified index, in bytes. DynamoDB updates this value
            approximately every six hours. Recent changes might not be reflected in this value.

          - **ItemCount** *(integer) --*

            The number of items in the specified index. DynamoDB updates this value approximately
            every six hours. Recent changes might not be reflected in this value.

          - **IndexArn** *(string) --*

            The Amazon Resource Name (ARN) that uniquely identifies the index.

      - **GlobalSecondaryIndexes** *(list) --*

        The global secondary indexes, if any, on the table. Each index is scoped to a given
        partition key value. Each element is composed of:

        * ``Backfilling`` - If true, then the index is currently in the backfilling phase.
        Backfilling occurs only when a new global secondary index is added to the table. It is the
        process by which DynamoDB populates the new index with data from the table. (This attribute
        does not appear for indexes that were created during a ``CreateTable`` operation.)  You can
        delete an index that is being created during the ``Backfilling`` phase when ``IndexStatus``
        is set to CREATING and ``Backfilling`` is true. You can't delete the index that is being
        created when ``IndexStatus`` is set to CREATING and ``Backfilling`` is false. (This
        attribute does not appear for indexes that were created during a ``CreateTable`` operation.)

        * ``IndexName`` - The name of the global secondary index.

        * ``IndexSizeBytes`` - The total size of the global secondary index, in bytes. DynamoDB
        updates this value approximately every six hours. Recent changes might not be reflected in
        this value.

        * ``IndexStatus`` - The current status of the global secondary index:

          * ``CREATING`` - The index is being created.

          * ``UPDATING`` - The index is being updated.

          * ``DELETING`` - The index is being deleted.

          * ``ACTIVE`` - The index is ready for use.

        * ``ItemCount`` - The number of items in the global secondary index. DynamoDB updates this
        value approximately every six hours. Recent changes might not be reflected in this value.

        * ``KeySchema`` - Specifies the complete index key schema. The attribute names in the key
        schema must be between 1 and 255 characters (inclusive). The key schema must begin with the
        same partition key as the table.

        * ``Projection`` - Specifies attributes that are copied (projected) from the table into the
        index. These are in addition to the primary key attributes and index key attributes, which
        are automatically projected. Each attribute specification is composed of:

          * ``ProjectionType`` - One of the following:

            * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

            * ``INCLUDE`` - Only the specified table attributes are projected into the index. The
            list of projected attributes is in ``NonKeyAttributes`` .

            * ``ALL`` - All of the table attributes are projected into the index.

          * ``NonKeyAttributes`` - A list of one or more non-key attribute names that are projected
          into the secondary index. The total count of attributes provided in ``NonKeyAttributes`` ,
          summed across all of the secondary indexes, must not exceed 20. If you project the same
          attribute into two different indexes, this counts as two distinct attributes when
          determining the total.

        * ``ProvisionedThroughput`` - The provisioned throughput settings for the global secondary
        index, consisting of read and write capacity units, along with data about increases and
        decreases.

        If the table is in the ``DELETING`` state, no information about indexes will be returned.

        - *(dict) --*

          Represents the properties of a global secondary index.

          - **IndexName** *(string) --*

            The name of the global secondary index.

          - **KeySchema** *(list) --*

            The complete key schema for a global secondary index, which consists of one or more
            pairs of attribute names and key types:

            * ``HASH`` - partition key

            * ``RANGE`` - sort key

            .. note::

              The partition key of an item is also known as its *hash attribute* . The term "hash
              attribute" derives from DynamoDB's usage of an internal hash function to evenly
              distribute data items across partitions, based on their partition key values.

              The sort key of an item is also known as its *range attribute* . The term "range
              attribute" derives from the way DynamoDB stores items with the same partition key
              physically close together, in sorted order by the sort key value.

            - *(dict) --*

              Represents *a single element* of a key schema. A key schema specifies the attributes
              that make up the primary key of a table, or the key attributes of an index.

              A ``KeySchemaElement`` represents exactly one attribute of the primary key. For
              example, a simple primary key would be represented by one ``KeySchemaElement`` (for
              the partition key). A composite primary key would require one ``KeySchemaElement`` for
              the partition key, and another ``KeySchemaElement`` for the sort key.

              A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute).
              The data type must be one of String, Number, or Binary. The attribute cannot be nested
              within a List or a Map.

              - **AttributeName** *(string) --*

                The name of a key attribute.

              - **KeyType** *(string) --*

                The role that this key attribute will assume:

                * ``HASH`` - partition key

                * ``RANGE`` - sort key

                .. note::

                  The partition key of an item is also known as its *hash attribute* . The term
                  "hash attribute" derives from DynamoDB's usage of an internal hash function to
                  evenly distribute data items across partitions, based on their partition key
                  values.

                  The sort key of an item is also known as its *range attribute* . The term "range
                  attribute" derives from the way DynamoDB stores items with the same partition key
                  physically close together, in sorted order by the sort key value.

          - **Projection** *(dict) --*

            Represents attributes that are copied (projected) from the table into the global
            secondary index. These are in addition to the primary key attributes and index key
            attributes, which are automatically projected.

            - **ProjectionType** *(string) --*

              The set of attributes that are projected into the index:

              * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

              * ``INCLUDE`` - Only the specified table attributes are projected into the index. The
              list of projected attributes is in ``NonKeyAttributes`` .

              * ``ALL`` - All of the table attributes are projected into the index.

            - **NonKeyAttributes** *(list) --*

              Represents the non-key attribute names which will be projected into the index.

              For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all
              of the local secondary indexes, must not exceed 20. If you project the same attribute
              into two different indexes, this counts as two distinct attributes when determining
              the total.

              - *(string) --*

          - **IndexStatus** *(string) --*

            The current state of the global secondary index:

            * ``CREATING`` - The index is being created.

            * ``UPDATING`` - The index is being updated.

            * ``DELETING`` - The index is being deleted.

            * ``ACTIVE`` - The index is ready for use.

          - **Backfilling** *(boolean) --*

            Indicates whether the index is currently backfilling. *Backfilling* is the process of
            reading items from the table and determining whether they can be added to the index.
            (Not all items will qualify: For example, a partition key cannot have any duplicate
            values.) If an item can be added to the index, DynamoDB will do so. After all items have
            been processed, the backfilling operation is complete and ``Backfilling`` is false.

            You can delete an index that is being created during the ``Backfilling`` phase when
            ``IndexStatus`` is set to CREATING and ``Backfilling`` is true. You can't delete the
            index that is being created when ``IndexStatus`` is set to CREATING and ``Backfilling``
            is false.

            .. note::

              For indexes that were created during a ``CreateTable`` operation, the ``Backfilling``
              attribute does not appear in the ``DescribeTable`` output.

          - **ProvisionedThroughput** *(dict) --*

            Represents the provisioned throughput settings for the specified global secondary index.

            For current minimum and maximum provisioned throughput values, see `Limits
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
            *Amazon DynamoDB Developer Guide* .

            - **LastIncreaseDateTime** *(datetime) --*

              The date and time of the last provisioned throughput increase for this table.

            - **LastDecreaseDateTime** *(datetime) --*

              The date and time of the last provisioned throughput decrease for this table.

            - **NumberOfDecreasesToday** *(integer) --*

              The number of provisioned throughput decreases for this table during this UTC calendar
              day. For current maximums on provisioned throughput decreases, see `Limits
              <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in
              the *Amazon DynamoDB Developer Guide* .

            - **ReadCapacityUnits** *(integer) --*

              The maximum number of strongly consistent reads consumed per second before DynamoDB
              returns a ``ThrottlingException`` . Eventually consistent reads require less effort
              than strongly consistent reads, so a setting of 50 ``ReadCapacityUnits`` per second
              provides 100 eventually consistent ``ReadCapacityUnits`` per second.

            - **WriteCapacityUnits** *(integer) --*

              The maximum number of writes consumed per second before DynamoDB returns a
              ``ThrottlingException`` .

          - **IndexSizeBytes** *(integer) --*

            The total size of the specified index, in bytes. DynamoDB updates this value
            approximately every six hours. Recent changes might not be reflected in this value.

          - **ItemCount** *(integer) --*

            The number of items in the specified index. DynamoDB updates this value approximately
            every six hours. Recent changes might not be reflected in this value.

          - **IndexArn** *(string) --*

            The Amazon Resource Name (ARN) that uniquely identifies the index.

      - **StreamSpecification** *(dict) --*

        The current DynamoDB Streams configuration for the table.

        - **StreamEnabled** *(boolean) --*

          Indicates whether DynamoDB Streams is enabled (true) or disabled (false) on the table.

        - **StreamViewType** *(string) --*

          When an item in the table is modified, ``StreamViewType`` determines what information is
          written to the stream for this table. Valid values for ``StreamViewType`` are:

          * ``KEYS_ONLY`` - Only the key attributes of the modified item are written to the stream.

          * ``NEW_IMAGE`` - The entire item, as it appears after it was modified, is written to the
          stream.

          * ``OLD_IMAGE`` - The entire item, as it appeared before it was modified, is written to
          the stream.

          * ``NEW_AND_OLD_IMAGES`` - Both the new and the old item images of the item are written to
          the stream.

      - **LatestStreamLabel** *(string) --*

        A timestamp, in ISO 8601 format, for this stream.

        Note that ``LatestStreamLabel`` is not a unique identifier for the stream, because it is
        possible that a stream from another table might have the same timestamp. However, the
        combination of the following three elements is guaranteed to be unique:

        * AWS customer ID

        * Table name

        * ``StreamLabel``

      - **LatestStreamArn** *(string) --*

        The Amazon Resource Name (ARN) that uniquely identifies the latest stream for this table.

      - **GlobalTableVersion** *(string) --*

        Represents the version of `global tables
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GlobalTables.html>`__ in
        use, if the table is replicated across AWS Regions.

      - **Replicas** *(list) --*

        Represents replicas of the table.

        - *(dict) --*

          Contains the details of the replica.

          - **RegionName** *(string) --*

            The name of the Region.

          - **ReplicaStatus** *(string) --*

            The current state of the replica:

            * ``CREATING`` - The replica is being created.

            * ``UPDATING`` - The replica is being updated.

            * ``DELETING`` - The replica is being deleted.

            * ``ACTIVE`` - The replica is ready for use.

          - **ReplicaStatusDescription** *(string) --*

            Detailed information about the replica status.

          - **ReplicaStatusPercentProgress** *(string) --*

            Specifies the progress of a Create, Update, or Delete action on the replica as a
            percentage.

          - **KMSMasterKeyId** *(string) --*

            The AWS KMS customer master key (CMK) of the replica that will be used for AWS KMS
            encryption.

          - **ProvisionedThroughputOverride** *(dict) --*

            Replica-specific provisioned throughput. If not described, uses the source table's
            provisioned throughput settings.

            - **ReadCapacityUnits** *(integer) --*

              Replica-specific read capacity units. If not specified, uses the source table's read
              capacity settings.

          - **GlobalSecondaryIndexes** *(list) --*

            Replica-specific global secondary index settings.

            - *(dict) --*

              Represents the properties of a replica global secondary index.

              - **IndexName** *(string) --*

                The name of the global secondary index.

              - **ProvisionedThroughputOverride** *(dict) --*

                If not described, uses the source table GSI's read capacity settings.

                - **ReadCapacityUnits** *(integer) --*

                  Replica-specific read capacity units. If not specified, uses the source table's
                  read capacity settings.

      - **RestoreSummary** *(dict) --*

        Contains details for the restore.

        - **SourceBackupArn** *(string) --*

          The Amazon Resource Name (ARN) of the backup from which the table was restored.

        - **SourceTableArn** *(string) --*

          The ARN of the source table of the backup that is being restored.

        - **RestoreDateTime** *(datetime) --*

          Point in time or source backup time.

        - **RestoreInProgress** *(boolean) --*

          Indicates if a restore is in progress or not.

      - **SSEDescription** *(dict) --*

        The description of the server-side encryption status on the specified table.

        - **Status** *(string) --*

          Represents the current state of server-side encryption. The only supported values are:

          * ``ENABLED`` - Server-side encryption is enabled.

          * ``UPDATING`` - Server-side encryption is being updated.

        - **SSEType** *(string) --*

          Server-side encryption type. The only supported value is:

          * ``KMS`` - Server-side encryption that uses AWS Key Management Service. The key is stored
          in your account and is managed by AWS KMS (AWS KMS charges apply).

        - **KMSMasterKeyArn** *(string) --*

          The AWS KMS customer master key (CMK) ARN used for the AWS KMS encryption.

        - **InaccessibleEncryptionDateTime** *(datetime) --*

          Indicates the time, in UNIX epoch date format, when DynamoDB detected that the table's AWS
          KMS key was inaccessible. This attribute will automatically be cleared when DynamoDB
          detects that the table's AWS KMS key is accessible again. DynamoDB will initiate the table
          archival process when table's AWS KMS key remains inaccessible for more than seven days
          from this date.

      - **ArchivalSummary** *(dict) --*

        Contains information about the table archive.

        - **ArchivalDateTime** *(datetime) --*

          The date and time when table archival was initiated by DynamoDB, in UNIX epoch time
          format.

        - **ArchivalReason** *(string) --*

          The reason DynamoDB archived the table. Currently, the only possible value is:

          * ``INACCESSIBLE_ENCRYPTION_CREDENTIALS`` - The table was archived due to the table's AWS
          KMS key being inaccessible for more than seven days. An On-Demand backup was created at
          the archival time.

        - **ArchivalBackupArn** *(string) --*

          The Amazon Resource Name (ARN) of the backup the table was archived to, when applicable in
          the archival reason. If you wish to restore this backup to the same table name, you will
          need to delete the original table.
    """


_ClientDescribeBackupResponseBackupDescriptionBackupDetailsTypeDef = TypedDict(
    "_ClientDescribeBackupResponseBackupDescriptionBackupDetailsTypeDef",
    {
        "BackupArn": str,
        "BackupName": str,
        "BackupSizeBytes": int,
        "BackupStatus": str,
        "BackupType": str,
        "BackupCreationDateTime": datetime,
        "BackupExpiryDateTime": datetime,
    },
    total=False,
)


class ClientDescribeBackupResponseBackupDescriptionBackupDetailsTypeDef(
    _ClientDescribeBackupResponseBackupDescriptionBackupDetailsTypeDef
):
    """
    Type definition for `ClientDescribeBackupResponseBackupDescription` `BackupDetails`

    Contains the details of the backup created for the table.

    - **BackupArn** *(string) --*

      ARN associated with the backup.

    - **BackupName** *(string) --*

      Name of the requested backup.

    - **BackupSizeBytes** *(integer) --*

      Size of the backup in bytes.

    - **BackupStatus** *(string) --*

      Backup can be in one of the following states: CREATING, ACTIVE, DELETED.

    - **BackupType** *(string) --*

      BackupType:

      * ``USER`` - You create and manage these using the on-demand backup feature.

      * ``SYSTEM`` - If you delete a table with point-in-time recovery enabled, a ``SYSTEM`` backup
      is automatically created and is retained for 35 days (at no additional cost). System backups
      allow you to restore the deleted table to the state it was in just before the point of
      deletion.

      * ``AWS_BACKUP`` - On-demand backup created by you from AWS Backup service.

    - **BackupCreationDateTime** *(datetime) --*

      Time at which the backup was created. This is the request time of the backup.

    - **BackupExpiryDateTime** *(datetime) --*

      Time at which the automatic on-demand backup created by DynamoDB will expire. This ``SYSTEM``
      on-demand backup expires automatically 35 days after its creation.
    """


_ClientDescribeBackupResponseBackupDescriptionSourceTableDetailsKeySchemaTypeDef = TypedDict(
    "_ClientDescribeBackupResponseBackupDescriptionSourceTableDetailsKeySchemaTypeDef",
    {"AttributeName": str, "KeyType": str},
    total=False,
)


class ClientDescribeBackupResponseBackupDescriptionSourceTableDetailsKeySchemaTypeDef(
    _ClientDescribeBackupResponseBackupDescriptionSourceTableDetailsKeySchemaTypeDef
):
    """
    Type definition for `ClientDescribeBackupResponseBackupDescriptionSourceTableDetails`
    `KeySchema`

    Represents *a single element* of a key schema. A key schema specifies the attributes that make
    up the primary key of a table, or the key attributes of an index.

    A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
    simple primary key would be represented by one ``KeySchemaElement`` (for the partition key). A
    composite primary key would require one ``KeySchemaElement`` for the partition key, and another
    ``KeySchemaElement`` for the sort key.

    A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The data
    type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a
    Map.

    - **AttributeName** *(string) --*

      The name of a key attribute.

    - **KeyType** *(string) --*

      The role that this key attribute will assume:

      * ``HASH`` - partition key

      * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.
    """


_ClientDescribeBackupResponseBackupDescriptionSourceTableDetailsProvisionedThroughputTypeDef = TypedDict(
    "_ClientDescribeBackupResponseBackupDescriptionSourceTableDetailsProvisionedThroughputTypeDef",
    {"ReadCapacityUnits": int, "WriteCapacityUnits": int},
    total=False,
)


class ClientDescribeBackupResponseBackupDescriptionSourceTableDetailsProvisionedThroughputTypeDef(
    _ClientDescribeBackupResponseBackupDescriptionSourceTableDetailsProvisionedThroughputTypeDef
):
    """
    Type definition for `ClientDescribeBackupResponseBackupDescriptionSourceTableDetails`
    `ProvisionedThroughput`

    Read IOPs and Write IOPS on the table when the backup was created.

    - **ReadCapacityUnits** *(integer) --*

      The maximum number of strongly consistent reads consumed per second before DynamoDB returns a
      ``ThrottlingException`` . For more information, see `Specifying Read and Write Requirements
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
      in the *Amazon DynamoDB Developer Guide* .

      If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.

    - **WriteCapacityUnits** *(integer) --*

      The maximum number of writes consumed per second before DynamoDB returns a
      ``ThrottlingException`` . For more information, see `Specifying Read and Write Requirements
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
      in the *Amazon DynamoDB Developer Guide* .

      If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.
    """


_ClientDescribeBackupResponseBackupDescriptionSourceTableDetailsTypeDef = TypedDict(
    "_ClientDescribeBackupResponseBackupDescriptionSourceTableDetailsTypeDef",
    {
        "TableName": str,
        "TableId": str,
        "TableArn": str,
        "TableSizeBytes": int,
        "KeySchema": List[
            ClientDescribeBackupResponseBackupDescriptionSourceTableDetailsKeySchemaTypeDef
        ],
        "TableCreationDateTime": datetime,
        "ProvisionedThroughput": ClientDescribeBackupResponseBackupDescriptionSourceTableDetailsProvisionedThroughputTypeDef,
        "ItemCount": int,
        "BillingMode": str,
    },
    total=False,
)


class ClientDescribeBackupResponseBackupDescriptionSourceTableDetailsTypeDef(
    _ClientDescribeBackupResponseBackupDescriptionSourceTableDetailsTypeDef
):
    """
    Type definition for `ClientDescribeBackupResponseBackupDescription` `SourceTableDetails`

    Contains the details of the table when the backup was created.

    - **TableName** *(string) --*

      The name of the table for which the backup was created.

    - **TableId** *(string) --*

      Unique identifier for the table for which the backup was created.

    - **TableArn** *(string) --*

      ARN of the table for which backup was created.

    - **TableSizeBytes** *(integer) --*

      Size of the table in bytes. Note that this is an approximate value.

    - **KeySchema** *(list) --*

      Schema of the table.

      - *(dict) --*

        Represents *a single element* of a key schema. A key schema specifies the attributes that
        make up the primary key of a table, or the key attributes of an index.

        A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
        simple primary key would be represented by one ``KeySchemaElement`` (for the partition key).
        A composite primary key would require one ``KeySchemaElement`` for the partition key, and
        another ``KeySchemaElement`` for the sort key.

        A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The
        data type must be one of String, Number, or Binary. The attribute cannot be nested within a
        List or a Map.

        - **AttributeName** *(string) --*

          The name of a key attribute.

        - **KeyType** *(string) --*

          The role that this key attribute will assume:

          * ``HASH`` - partition key

          * ``RANGE`` - sort key

          .. note::

            The partition key of an item is also known as its *hash attribute* . The term "hash
            attribute" derives from DynamoDB's usage of an internal hash function to evenly
            distribute data items across partitions, based on their partition key values.

            The sort key of an item is also known as its *range attribute* . The term "range
            attribute" derives from the way DynamoDB stores items with the same partition key
            physically close together, in sorted order by the sort key value.

    - **TableCreationDateTime** *(datetime) --*

      Time when the source table was created.

    - **ProvisionedThroughput** *(dict) --*

      Read IOPs and Write IOPS on the table when the backup was created.

      - **ReadCapacityUnits** *(integer) --*

        The maximum number of strongly consistent reads consumed per second before DynamoDB returns
        a ``ThrottlingException`` . For more information, see `Specifying Read and Write
        Requirements
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
        in the *Amazon DynamoDB Developer Guide* .

        If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.

      - **WriteCapacityUnits** *(integer) --*

        The maximum number of writes consumed per second before DynamoDB returns a
        ``ThrottlingException`` . For more information, see `Specifying Read and Write Requirements
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
        in the *Amazon DynamoDB Developer Guide* .

        If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.

    - **ItemCount** *(integer) --*

      Number of items in the table. Note that this is an approximate value.

    - **BillingMode** *(string) --*

      Controls how you are charged for read and write throughput and how you manage capacity. This
      setting can be changed later.

      * ``PROVISIONED`` - Sets the read/write capacity mode to ``PROVISIONED`` . We recommend using
      ``PROVISIONED`` for predictable workloads.

      * ``PAY_PER_REQUEST`` - Sets the read/write capacity mode to ``PAY_PER_REQUEST`` . We
      recommend using ``PAY_PER_REQUEST`` for unpredictable workloads.
    """


_ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsGlobalSecondaryIndexesKeySchemaTypeDef = TypedDict(
    "_ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsGlobalSecondaryIndexesKeySchemaTypeDef",
    {"AttributeName": str, "KeyType": str},
    total=False,
)


class ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsGlobalSecondaryIndexesKeySchemaTypeDef(
    _ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsGlobalSecondaryIndexesKeySchemaTypeDef
):
    """
    Type definition for
    `ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsGlobalSecondaryIndexes`
    `KeySchema`

    Represents *a single element* of a key schema. A key schema specifies the attributes that make
    up the primary key of a table, or the key attributes of an index.

    A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
    simple primary key would be represented by one ``KeySchemaElement`` (for the partition key). A
    composite primary key would require one ``KeySchemaElement`` for the partition key, and another
    ``KeySchemaElement`` for the sort key.

    A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The data
    type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a
    Map.

    - **AttributeName** *(string) --*

      The name of a key attribute.

    - **KeyType** *(string) --*

      The role that this key attribute will assume:

      * ``HASH`` - partition key

      * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.
    """


_ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsGlobalSecondaryIndexesProjectionTypeDef = TypedDict(
    "_ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsGlobalSecondaryIndexesProjectionTypeDef",
    {"ProjectionType": str, "NonKeyAttributes": List[str]},
    total=False,
)


class ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsGlobalSecondaryIndexesProjectionTypeDef(
    _ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsGlobalSecondaryIndexesProjectionTypeDef
):
    """
    Type definition for
    `ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsGlobalSecondaryIndexes`
    `Projection`

    Represents attributes that are copied (projected) from the table into the global secondary
    index. These are in addition to the primary key attributes and index key attributes, which are
    automatically projected.

    - **ProjectionType** *(string) --*

      The set of attributes that are projected into the index:

      * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

      * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list of
      projected attributes is in ``NonKeyAttributes`` .

      * ``ALL`` - All of the table attributes are projected into the index.

    - **NonKeyAttributes** *(list) --*

      Represents the non-key attribute names which will be projected into the index.

      For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all of the
      local secondary indexes, must not exceed 20. If you project the same attribute into two
      different indexes, this counts as two distinct attributes when determining the total.

      - *(string) --*
    """


_ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsGlobalSecondaryIndexesProvisionedThroughputTypeDef = TypedDict(
    "_ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsGlobalSecondaryIndexesProvisionedThroughputTypeDef",
    {"ReadCapacityUnits": int, "WriteCapacityUnits": int},
    total=False,
)


class ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsGlobalSecondaryIndexesProvisionedThroughputTypeDef(
    _ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsGlobalSecondaryIndexesProvisionedThroughputTypeDef
):
    """
    Type definition for
    `ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsGlobalSecondaryIndexes`
    `ProvisionedThroughput`

    Represents the provisioned throughput settings for the specified global secondary index.

    - **ReadCapacityUnits** *(integer) --*

      The maximum number of strongly consistent reads consumed per second before DynamoDB returns a
      ``ThrottlingException`` . For more information, see `Specifying Read and Write Requirements
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
      in the *Amazon DynamoDB Developer Guide* .

      If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.

    - **WriteCapacityUnits** *(integer) --*

      The maximum number of writes consumed per second before DynamoDB returns a
      ``ThrottlingException`` . For more information, see `Specifying Read and Write Requirements
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
      in the *Amazon DynamoDB Developer Guide* .

      If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.
    """


_ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsGlobalSecondaryIndexesTypeDef = TypedDict(
    "_ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsGlobalSecondaryIndexesTypeDef",
    {
        "IndexName": str,
        "KeySchema": List[
            ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsGlobalSecondaryIndexesKeySchemaTypeDef
        ],
        "Projection": ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsGlobalSecondaryIndexesProjectionTypeDef,
        "ProvisionedThroughput": ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsGlobalSecondaryIndexesProvisionedThroughputTypeDef,
    },
    total=False,
)


class ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsGlobalSecondaryIndexesTypeDef(
    _ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsGlobalSecondaryIndexesTypeDef
):
    """
    Type definition for `ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetails`
    `GlobalSecondaryIndexes`

    Represents the properties of a global secondary index for the table when the backup was created.

    - **IndexName** *(string) --*

      The name of the global secondary index.

    - **KeySchema** *(list) --*

      The complete key schema for a global secondary index, which consists of one or more pairs of
      attribute names and key types:

      * ``HASH`` - partition key

      * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.

      - *(dict) --*

        Represents *a single element* of a key schema. A key schema specifies the attributes that
        make up the primary key of a table, or the key attributes of an index.

        A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
        simple primary key would be represented by one ``KeySchemaElement`` (for the partition key).
        A composite primary key would require one ``KeySchemaElement`` for the partition key, and
        another ``KeySchemaElement`` for the sort key.

        A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The
        data type must be one of String, Number, or Binary. The attribute cannot be nested within a
        List or a Map.

        - **AttributeName** *(string) --*

          The name of a key attribute.

        - **KeyType** *(string) --*

          The role that this key attribute will assume:

          * ``HASH`` - partition key

          * ``RANGE`` - sort key

          .. note::

            The partition key of an item is also known as its *hash attribute* . The term "hash
            attribute" derives from DynamoDB's usage of an internal hash function to evenly
            distribute data items across partitions, based on their partition key values.

            The sort key of an item is also known as its *range attribute* . The term "range
            attribute" derives from the way DynamoDB stores items with the same partition key
            physically close together, in sorted order by the sort key value.

    - **Projection** *(dict) --*

      Represents attributes that are copied (projected) from the table into the global secondary
      index. These are in addition to the primary key attributes and index key attributes, which are
      automatically projected.

      - **ProjectionType** *(string) --*

        The set of attributes that are projected into the index:

        * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

        * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list
        of projected attributes is in ``NonKeyAttributes`` .

        * ``ALL`` - All of the table attributes are projected into the index.

      - **NonKeyAttributes** *(list) --*

        Represents the non-key attribute names which will be projected into the index.

        For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all of
        the local secondary indexes, must not exceed 20. If you project the same attribute into two
        different indexes, this counts as two distinct attributes when determining the total.

        - *(string) --*

    - **ProvisionedThroughput** *(dict) --*

      Represents the provisioned throughput settings for the specified global secondary index.

      - **ReadCapacityUnits** *(integer) --*

        The maximum number of strongly consistent reads consumed per second before DynamoDB returns
        a ``ThrottlingException`` . For more information, see `Specifying Read and Write
        Requirements
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
        in the *Amazon DynamoDB Developer Guide* .

        If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.

      - **WriteCapacityUnits** *(integer) --*

        The maximum number of writes consumed per second before DynamoDB returns a
        ``ThrottlingException`` . For more information, see `Specifying Read and Write Requirements
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
        in the *Amazon DynamoDB Developer Guide* .

        If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.
    """


_ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsLocalSecondaryIndexesKeySchemaTypeDef = TypedDict(
    "_ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsLocalSecondaryIndexesKeySchemaTypeDef",
    {"AttributeName": str, "KeyType": str},
    total=False,
)


class ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsLocalSecondaryIndexesKeySchemaTypeDef(
    _ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsLocalSecondaryIndexesKeySchemaTypeDef
):
    """
    Type definition for
    `ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsLocalSecondaryIndexes`
    `KeySchema`

    Represents *a single element* of a key schema. A key schema specifies the attributes that make
    up the primary key of a table, or the key attributes of an index.

    A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
    simple primary key would be represented by one ``KeySchemaElement`` (for the partition key). A
    composite primary key would require one ``KeySchemaElement`` for the partition key, and another
    ``KeySchemaElement`` for the sort key.

    A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The data
    type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a
    Map.

    - **AttributeName** *(string) --*

      The name of a key attribute.

    - **KeyType** *(string) --*

      The role that this key attribute will assume:

      * ``HASH`` - partition key

      * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.
    """


_ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsLocalSecondaryIndexesProjectionTypeDef = TypedDict(
    "_ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsLocalSecondaryIndexesProjectionTypeDef",
    {"ProjectionType": str, "NonKeyAttributes": List[str]},
    total=False,
)


class ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsLocalSecondaryIndexesProjectionTypeDef(
    _ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsLocalSecondaryIndexesProjectionTypeDef
):
    """
    Type definition for
    `ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsLocalSecondaryIndexes`
    `Projection`

    Represents attributes that are copied (projected) from the table into the global secondary
    index. These are in addition to the primary key attributes and index key attributes, which are
    automatically projected.

    - **ProjectionType** *(string) --*

      The set of attributes that are projected into the index:

      * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

      * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list of
      projected attributes is in ``NonKeyAttributes`` .

      * ``ALL`` - All of the table attributes are projected into the index.

    - **NonKeyAttributes** *(list) --*

      Represents the non-key attribute names which will be projected into the index.

      For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all of the
      local secondary indexes, must not exceed 20. If you project the same attribute into two
      different indexes, this counts as two distinct attributes when determining the total.

      - *(string) --*
    """


_ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsLocalSecondaryIndexesTypeDef = TypedDict(
    "_ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsLocalSecondaryIndexesTypeDef",
    {
        "IndexName": str,
        "KeySchema": List[
            ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsLocalSecondaryIndexesKeySchemaTypeDef
        ],
        "Projection": ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsLocalSecondaryIndexesProjectionTypeDef,
    },
    total=False,
)


class ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsLocalSecondaryIndexesTypeDef(
    _ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsLocalSecondaryIndexesTypeDef
):
    """
    Type definition for `ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetails`
    `LocalSecondaryIndexes`

    Represents the properties of a local secondary index for the table when the backup was created.

    - **IndexName** *(string) --*

      Represents the name of the local secondary index.

    - **KeySchema** *(list) --*

      The complete key schema for a local secondary index, which consists of one or more pairs of
      attribute names and key types:

      * ``HASH`` - partition key

      * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.

      - *(dict) --*

        Represents *a single element* of a key schema. A key schema specifies the attributes that
        make up the primary key of a table, or the key attributes of an index.

        A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
        simple primary key would be represented by one ``KeySchemaElement`` (for the partition key).
        A composite primary key would require one ``KeySchemaElement`` for the partition key, and
        another ``KeySchemaElement`` for the sort key.

        A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The
        data type must be one of String, Number, or Binary. The attribute cannot be nested within a
        List or a Map.

        - **AttributeName** *(string) --*

          The name of a key attribute.

        - **KeyType** *(string) --*

          The role that this key attribute will assume:

          * ``HASH`` - partition key

          * ``RANGE`` - sort key

          .. note::

            The partition key of an item is also known as its *hash attribute* . The term "hash
            attribute" derives from DynamoDB's usage of an internal hash function to evenly
            distribute data items across partitions, based on their partition key values.

            The sort key of an item is also known as its *range attribute* . The term "range
            attribute" derives from the way DynamoDB stores items with the same partition key
            physically close together, in sorted order by the sort key value.

    - **Projection** *(dict) --*

      Represents attributes that are copied (projected) from the table into the global secondary
      index. These are in addition to the primary key attributes and index key attributes, which are
      automatically projected.

      - **ProjectionType** *(string) --*

        The set of attributes that are projected into the index:

        * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

        * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list
        of projected attributes is in ``NonKeyAttributes`` .

        * ``ALL`` - All of the table attributes are projected into the index.

      - **NonKeyAttributes** *(list) --*

        Represents the non-key attribute names which will be projected into the index.

        For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all of
        the local secondary indexes, must not exceed 20. If you project the same attribute into two
        different indexes, this counts as two distinct attributes when determining the total.

        - *(string) --*
    """


_ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsSSEDescriptionTypeDef = TypedDict(
    "_ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsSSEDescriptionTypeDef",
    {
        "Status": str,
        "SSEType": str,
        "KMSMasterKeyArn": str,
        "InaccessibleEncryptionDateTime": datetime,
    },
    total=False,
)


class ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsSSEDescriptionTypeDef(
    _ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsSSEDescriptionTypeDef
):
    """
    Type definition for `ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetails`
    `SSEDescription`

    The description of the server-side encryption status on the table when the backup was created.

    - **Status** *(string) --*

      Represents the current state of server-side encryption. The only supported values are:

      * ``ENABLED`` - Server-side encryption is enabled.

      * ``UPDATING`` - Server-side encryption is being updated.

    - **SSEType** *(string) --*

      Server-side encryption type. The only supported value is:

      * ``KMS`` - Server-side encryption that uses AWS Key Management Service. The key is stored in
      your account and is managed by AWS KMS (AWS KMS charges apply).

    - **KMSMasterKeyArn** *(string) --*

      The AWS KMS customer master key (CMK) ARN used for the AWS KMS encryption.

    - **InaccessibleEncryptionDateTime** *(datetime) --*

      Indicates the time, in UNIX epoch date format, when DynamoDB detected that the table's AWS KMS
      key was inaccessible. This attribute will automatically be cleared when DynamoDB detects that
      the table's AWS KMS key is accessible again. DynamoDB will initiate the table archival process
      when table's AWS KMS key remains inaccessible for more than seven days from this date.
    """


_ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsStreamDescriptionTypeDef = TypedDict(
    "_ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsStreamDescriptionTypeDef",
    {"StreamEnabled": bool, "StreamViewType": str},
    total=False,
)


class ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsStreamDescriptionTypeDef(
    _ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsStreamDescriptionTypeDef
):
    """
    Type definition for `ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetails`
    `StreamDescription`

    Stream settings on the table when the backup was created.

    - **StreamEnabled** *(boolean) --*

      Indicates whether DynamoDB Streams is enabled (true) or disabled (false) on the table.

    - **StreamViewType** *(string) --*

      When an item in the table is modified, ``StreamViewType`` determines what information is
      written to the stream for this table. Valid values for ``StreamViewType`` are:

      * ``KEYS_ONLY`` - Only the key attributes of the modified item are written to the stream.

      * ``NEW_IMAGE`` - The entire item, as it appears after it was modified, is written to the
      stream.

      * ``OLD_IMAGE`` - The entire item, as it appeared before it was modified, is written to the
      stream.

      * ``NEW_AND_OLD_IMAGES`` - Both the new and the old item images of the item are written to the
      stream.
    """


_ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsTimeToLiveDescriptionTypeDef = TypedDict(
    "_ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsTimeToLiveDescriptionTypeDef",
    {"TimeToLiveStatus": str, "AttributeName": str},
    total=False,
)


class ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsTimeToLiveDescriptionTypeDef(
    _ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsTimeToLiveDescriptionTypeDef
):
    """
    Type definition for `ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetails`
    `TimeToLiveDescription`

    Time to Live settings on the table when the backup was created.

    - **TimeToLiveStatus** *(string) --*

      The TTL status for the table.

    - **AttributeName** *(string) --*

      The name of the TTL attribute for items in the table.
    """


_ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsTypeDef = TypedDict(
    "_ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsTypeDef",
    {
        "LocalSecondaryIndexes": List[
            ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsLocalSecondaryIndexesTypeDef
        ],
        "GlobalSecondaryIndexes": List[
            ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsGlobalSecondaryIndexesTypeDef
        ],
        "StreamDescription": ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsStreamDescriptionTypeDef,
        "TimeToLiveDescription": ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsTimeToLiveDescriptionTypeDef,
        "SSEDescription": ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsSSEDescriptionTypeDef,
    },
    total=False,
)


class ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsTypeDef(
    _ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsTypeDef
):
    """
    Type definition for `ClientDescribeBackupResponseBackupDescription` `SourceTableFeatureDetails`

    Contains the details of the features enabled on the table when the backup was created. For
    example, LSIs, GSIs, streams, TTL.

    - **LocalSecondaryIndexes** *(list) --*

      Represents the LSI properties for the table when the backup was created. It includes the
      IndexName, KeySchema and Projection for the LSIs on the table at the time of backup.

      - *(dict) --*

        Represents the properties of a local secondary index for the table when the backup was
        created.

        - **IndexName** *(string) --*

          Represents the name of the local secondary index.

        - **KeySchema** *(list) --*

          The complete key schema for a local secondary index, which consists of one or more pairs
          of attribute names and key types:

          * ``HASH`` - partition key

          * ``RANGE`` - sort key

          .. note::

            The partition key of an item is also known as its *hash attribute* . The term "hash
            attribute" derives from DynamoDB's usage of an internal hash function to evenly
            distribute data items across partitions, based on their partition key values.

            The sort key of an item is also known as its *range attribute* . The term "range
            attribute" derives from the way DynamoDB stores items with the same partition key
            physically close together, in sorted order by the sort key value.

          - *(dict) --*

            Represents *a single element* of a key schema. A key schema specifies the attributes
            that make up the primary key of a table, or the key attributes of an index.

            A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example,
            a simple primary key would be represented by one ``KeySchemaElement`` (for the partition
            key). A composite primary key would require one ``KeySchemaElement`` for the partition
            key, and another ``KeySchemaElement`` for the sort key.

            A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute).
            The data type must be one of String, Number, or Binary. The attribute cannot be nested
            within a List or a Map.

            - **AttributeName** *(string) --*

              The name of a key attribute.

            - **KeyType** *(string) --*

              The role that this key attribute will assume:

              * ``HASH`` - partition key

              * ``RANGE`` - sort key

              .. note::

                The partition key of an item is also known as its *hash attribute* . The term "hash
                attribute" derives from DynamoDB's usage of an internal hash function to evenly
                distribute data items across partitions, based on their partition key values.

                The sort key of an item is also known as its *range attribute* . The term "range
                attribute" derives from the way DynamoDB stores items with the same partition key
                physically close together, in sorted order by the sort key value.

        - **Projection** *(dict) --*

          Represents attributes that are copied (projected) from the table into the global secondary
          index. These are in addition to the primary key attributes and index key attributes, which
          are automatically projected.

          - **ProjectionType** *(string) --*

            The set of attributes that are projected into the index:

            * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

            * ``INCLUDE`` - Only the specified table attributes are projected into the index. The
            list of projected attributes is in ``NonKeyAttributes`` .

            * ``ALL`` - All of the table attributes are projected into the index.

          - **NonKeyAttributes** *(list) --*

            Represents the non-key attribute names which will be projected into the index.

            For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all
            of the local secondary indexes, must not exceed 20. If you project the same attribute
            into two different indexes, this counts as two distinct attributes when determining the
            total.

            - *(string) --*

    - **GlobalSecondaryIndexes** *(list) --*

      Represents the GSI properties for the table when the backup was created. It includes the
      IndexName, KeySchema, Projection, and ProvisionedThroughput for the GSIs on the table at the
      time of backup.

      - *(dict) --*

        Represents the properties of a global secondary index for the table when the backup was
        created.

        - **IndexName** *(string) --*

          The name of the global secondary index.

        - **KeySchema** *(list) --*

          The complete key schema for a global secondary index, which consists of one or more pairs
          of attribute names and key types:

          * ``HASH`` - partition key

          * ``RANGE`` - sort key

          .. note::

            The partition key of an item is also known as its *hash attribute* . The term "hash
            attribute" derives from DynamoDB's usage of an internal hash function to evenly
            distribute data items across partitions, based on their partition key values.

            The sort key of an item is also known as its *range attribute* . The term "range
            attribute" derives from the way DynamoDB stores items with the same partition key
            physically close together, in sorted order by the sort key value.

          - *(dict) --*

            Represents *a single element* of a key schema. A key schema specifies the attributes
            that make up the primary key of a table, or the key attributes of an index.

            A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example,
            a simple primary key would be represented by one ``KeySchemaElement`` (for the partition
            key). A composite primary key would require one ``KeySchemaElement`` for the partition
            key, and another ``KeySchemaElement`` for the sort key.

            A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute).
            The data type must be one of String, Number, or Binary. The attribute cannot be nested
            within a List or a Map.

            - **AttributeName** *(string) --*

              The name of a key attribute.

            - **KeyType** *(string) --*

              The role that this key attribute will assume:

              * ``HASH`` - partition key

              * ``RANGE`` - sort key

              .. note::

                The partition key of an item is also known as its *hash attribute* . The term "hash
                attribute" derives from DynamoDB's usage of an internal hash function to evenly
                distribute data items across partitions, based on their partition key values.

                The sort key of an item is also known as its *range attribute* . The term "range
                attribute" derives from the way DynamoDB stores items with the same partition key
                physically close together, in sorted order by the sort key value.

        - **Projection** *(dict) --*

          Represents attributes that are copied (projected) from the table into the global secondary
          index. These are in addition to the primary key attributes and index key attributes, which
          are automatically projected.

          - **ProjectionType** *(string) --*

            The set of attributes that are projected into the index:

            * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

            * ``INCLUDE`` - Only the specified table attributes are projected into the index. The
            list of projected attributes is in ``NonKeyAttributes`` .

            * ``ALL`` - All of the table attributes are projected into the index.

          - **NonKeyAttributes** *(list) --*

            Represents the non-key attribute names which will be projected into the index.

            For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all
            of the local secondary indexes, must not exceed 20. If you project the same attribute
            into two different indexes, this counts as two distinct attributes when determining the
            total.

            - *(string) --*

        - **ProvisionedThroughput** *(dict) --*

          Represents the provisioned throughput settings for the specified global secondary index.

          - **ReadCapacityUnits** *(integer) --*

            The maximum number of strongly consistent reads consumed per second before DynamoDB
            returns a ``ThrottlingException`` . For more information, see `Specifying Read and Write
            Requirements
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
            in the *Amazon DynamoDB Developer Guide* .

            If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.

          - **WriteCapacityUnits** *(integer) --*

            The maximum number of writes consumed per second before DynamoDB returns a
            ``ThrottlingException`` . For more information, see `Specifying Read and Write
            Requirements
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
            in the *Amazon DynamoDB Developer Guide* .

            If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.

    - **StreamDescription** *(dict) --*

      Stream settings on the table when the backup was created.

      - **StreamEnabled** *(boolean) --*

        Indicates whether DynamoDB Streams is enabled (true) or disabled (false) on the table.

      - **StreamViewType** *(string) --*

        When an item in the table is modified, ``StreamViewType`` determines what information is
        written to the stream for this table. Valid values for ``StreamViewType`` are:

        * ``KEYS_ONLY`` - Only the key attributes of the modified item are written to the stream.

        * ``NEW_IMAGE`` - The entire item, as it appears after it was modified, is written to the
        stream.

        * ``OLD_IMAGE`` - The entire item, as it appeared before it was modified, is written to the
        stream.

        * ``NEW_AND_OLD_IMAGES`` - Both the new and the old item images of the item are written to
        the stream.

    - **TimeToLiveDescription** *(dict) --*

      Time to Live settings on the table when the backup was created.

      - **TimeToLiveStatus** *(string) --*

        The TTL status for the table.

      - **AttributeName** *(string) --*

        The name of the TTL attribute for items in the table.

    - **SSEDescription** *(dict) --*

      The description of the server-side encryption status on the table when the backup was created.

      - **Status** *(string) --*

        Represents the current state of server-side encryption. The only supported values are:

        * ``ENABLED`` - Server-side encryption is enabled.

        * ``UPDATING`` - Server-side encryption is being updated.

      - **SSEType** *(string) --*

        Server-side encryption type. The only supported value is:

        * ``KMS`` - Server-side encryption that uses AWS Key Management Service. The key is stored
        in your account and is managed by AWS KMS (AWS KMS charges apply).

      - **KMSMasterKeyArn** *(string) --*

        The AWS KMS customer master key (CMK) ARN used for the AWS KMS encryption.

      - **InaccessibleEncryptionDateTime** *(datetime) --*

        Indicates the time, in UNIX epoch date format, when DynamoDB detected that the table's AWS
        KMS key was inaccessible. This attribute will automatically be cleared when DynamoDB detects
        that the table's AWS KMS key is accessible again. DynamoDB will initiate the table archival
        process when table's AWS KMS key remains inaccessible for more than seven days from this
        date.
    """


_ClientDescribeBackupResponseBackupDescriptionTypeDef = TypedDict(
    "_ClientDescribeBackupResponseBackupDescriptionTypeDef",
    {
        "BackupDetails": ClientDescribeBackupResponseBackupDescriptionBackupDetailsTypeDef,
        "SourceTableDetails": ClientDescribeBackupResponseBackupDescriptionSourceTableDetailsTypeDef,
        "SourceTableFeatureDetails": ClientDescribeBackupResponseBackupDescriptionSourceTableFeatureDetailsTypeDef,
    },
    total=False,
)


class ClientDescribeBackupResponseBackupDescriptionTypeDef(
    _ClientDescribeBackupResponseBackupDescriptionTypeDef
):
    """
    Type definition for `ClientDescribeBackupResponse` `BackupDescription`

    Contains the description of the backup created for the table.

    - **BackupDetails** *(dict) --*

      Contains the details of the backup created for the table.

      - **BackupArn** *(string) --*

        ARN associated with the backup.

      - **BackupName** *(string) --*

        Name of the requested backup.

      - **BackupSizeBytes** *(integer) --*

        Size of the backup in bytes.

      - **BackupStatus** *(string) --*

        Backup can be in one of the following states: CREATING, ACTIVE, DELETED.

      - **BackupType** *(string) --*

        BackupType:

        * ``USER`` - You create and manage these using the on-demand backup feature.

        * ``SYSTEM`` - If you delete a table with point-in-time recovery enabled, a ``SYSTEM``
        backup is automatically created and is retained for 35 days (at no additional cost). System
        backups allow you to restore the deleted table to the state it was in just before the point
        of deletion.

        * ``AWS_BACKUP`` - On-demand backup created by you from AWS Backup service.

      - **BackupCreationDateTime** *(datetime) --*

        Time at which the backup was created. This is the request time of the backup.

      - **BackupExpiryDateTime** *(datetime) --*

        Time at which the automatic on-demand backup created by DynamoDB will expire. This
        ``SYSTEM`` on-demand backup expires automatically 35 days after its creation.

    - **SourceTableDetails** *(dict) --*

      Contains the details of the table when the backup was created.

      - **TableName** *(string) --*

        The name of the table for which the backup was created.

      - **TableId** *(string) --*

        Unique identifier for the table for which the backup was created.

      - **TableArn** *(string) --*

        ARN of the table for which backup was created.

      - **TableSizeBytes** *(integer) --*

        Size of the table in bytes. Note that this is an approximate value.

      - **KeySchema** *(list) --*

        Schema of the table.

        - *(dict) --*

          Represents *a single element* of a key schema. A key schema specifies the attributes that
          make up the primary key of a table, or the key attributes of an index.

          A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
          simple primary key would be represented by one ``KeySchemaElement`` (for the partition
          key). A composite primary key would require one ``KeySchemaElement`` for the partition
          key, and another ``KeySchemaElement`` for the sort key.

          A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The
          data type must be one of String, Number, or Binary. The attribute cannot be nested within
          a List or a Map.

          - **AttributeName** *(string) --*

            The name of a key attribute.

          - **KeyType** *(string) --*

            The role that this key attribute will assume:

            * ``HASH`` - partition key

            * ``RANGE`` - sort key

            .. note::

              The partition key of an item is also known as its *hash attribute* . The term "hash
              attribute" derives from DynamoDB's usage of an internal hash function to evenly
              distribute data items across partitions, based on their partition key values.

              The sort key of an item is also known as its *range attribute* . The term "range
              attribute" derives from the way DynamoDB stores items with the same partition key
              physically close together, in sorted order by the sort key value.

      - **TableCreationDateTime** *(datetime) --*

        Time when the source table was created.

      - **ProvisionedThroughput** *(dict) --*

        Read IOPs and Write IOPS on the table when the backup was created.

        - **ReadCapacityUnits** *(integer) --*

          The maximum number of strongly consistent reads consumed per second before DynamoDB
          returns a ``ThrottlingException`` . For more information, see `Specifying Read and Write
          Requirements
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
          in the *Amazon DynamoDB Developer Guide* .

          If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.

        - **WriteCapacityUnits** *(integer) --*

          The maximum number of writes consumed per second before DynamoDB returns a
          ``ThrottlingException`` . For more information, see `Specifying Read and Write
          Requirements
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
          in the *Amazon DynamoDB Developer Guide* .

          If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.

      - **ItemCount** *(integer) --*

        Number of items in the table. Note that this is an approximate value.

      - **BillingMode** *(string) --*

        Controls how you are charged for read and write throughput and how you manage capacity. This
        setting can be changed later.

        * ``PROVISIONED`` - Sets the read/write capacity mode to ``PROVISIONED`` . We recommend
        using ``PROVISIONED`` for predictable workloads.

        * ``PAY_PER_REQUEST`` - Sets the read/write capacity mode to ``PAY_PER_REQUEST`` . We
        recommend using ``PAY_PER_REQUEST`` for unpredictable workloads.

    - **SourceTableFeatureDetails** *(dict) --*

      Contains the details of the features enabled on the table when the backup was created. For
      example, LSIs, GSIs, streams, TTL.

      - **LocalSecondaryIndexes** *(list) --*

        Represents the LSI properties for the table when the backup was created. It includes the
        IndexName, KeySchema and Projection for the LSIs on the table at the time of backup.

        - *(dict) --*

          Represents the properties of a local secondary index for the table when the backup was
          created.

          - **IndexName** *(string) --*

            Represents the name of the local secondary index.

          - **KeySchema** *(list) --*

            The complete key schema for a local secondary index, which consists of one or more pairs
            of attribute names and key types:

            * ``HASH`` - partition key

            * ``RANGE`` - sort key

            .. note::

              The partition key of an item is also known as its *hash attribute* . The term "hash
              attribute" derives from DynamoDB's usage of an internal hash function to evenly
              distribute data items across partitions, based on their partition key values.

              The sort key of an item is also known as its *range attribute* . The term "range
              attribute" derives from the way DynamoDB stores items with the same partition key
              physically close together, in sorted order by the sort key value.

            - *(dict) --*

              Represents *a single element* of a key schema. A key schema specifies the attributes
              that make up the primary key of a table, or the key attributes of an index.

              A ``KeySchemaElement`` represents exactly one attribute of the primary key. For
              example, a simple primary key would be represented by one ``KeySchemaElement`` (for
              the partition key). A composite primary key would require one ``KeySchemaElement`` for
              the partition key, and another ``KeySchemaElement`` for the sort key.

              A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute).
              The data type must be one of String, Number, or Binary. The attribute cannot be nested
              within a List or a Map.

              - **AttributeName** *(string) --*

                The name of a key attribute.

              - **KeyType** *(string) --*

                The role that this key attribute will assume:

                * ``HASH`` - partition key

                * ``RANGE`` - sort key

                .. note::

                  The partition key of an item is also known as its *hash attribute* . The term
                  "hash attribute" derives from DynamoDB's usage of an internal hash function to
                  evenly distribute data items across partitions, based on their partition key
                  values.

                  The sort key of an item is also known as its *range attribute* . The term "range
                  attribute" derives from the way DynamoDB stores items with the same partition key
                  physically close together, in sorted order by the sort key value.

          - **Projection** *(dict) --*

            Represents attributes that are copied (projected) from the table into the global
            secondary index. These are in addition to the primary key attributes and index key
            attributes, which are automatically projected.

            - **ProjectionType** *(string) --*

              The set of attributes that are projected into the index:

              * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

              * ``INCLUDE`` - Only the specified table attributes are projected into the index. The
              list of projected attributes is in ``NonKeyAttributes`` .

              * ``ALL`` - All of the table attributes are projected into the index.

            - **NonKeyAttributes** *(list) --*

              Represents the non-key attribute names which will be projected into the index.

              For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all
              of the local secondary indexes, must not exceed 20. If you project the same attribute
              into two different indexes, this counts as two distinct attributes when determining
              the total.

              - *(string) --*

      - **GlobalSecondaryIndexes** *(list) --*

        Represents the GSI properties for the table when the backup was created. It includes the
        IndexName, KeySchema, Projection, and ProvisionedThroughput for the GSIs on the table at the
        time of backup.

        - *(dict) --*

          Represents the properties of a global secondary index for the table when the backup was
          created.

          - **IndexName** *(string) --*

            The name of the global secondary index.

          - **KeySchema** *(list) --*

            The complete key schema for a global secondary index, which consists of one or more
            pairs of attribute names and key types:

            * ``HASH`` - partition key

            * ``RANGE`` - sort key

            .. note::

              The partition key of an item is also known as its *hash attribute* . The term "hash
              attribute" derives from DynamoDB's usage of an internal hash function to evenly
              distribute data items across partitions, based on their partition key values.

              The sort key of an item is also known as its *range attribute* . The term "range
              attribute" derives from the way DynamoDB stores items with the same partition key
              physically close together, in sorted order by the sort key value.

            - *(dict) --*

              Represents *a single element* of a key schema. A key schema specifies the attributes
              that make up the primary key of a table, or the key attributes of an index.

              A ``KeySchemaElement`` represents exactly one attribute of the primary key. For
              example, a simple primary key would be represented by one ``KeySchemaElement`` (for
              the partition key). A composite primary key would require one ``KeySchemaElement`` for
              the partition key, and another ``KeySchemaElement`` for the sort key.

              A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute).
              The data type must be one of String, Number, or Binary. The attribute cannot be nested
              within a List or a Map.

              - **AttributeName** *(string) --*

                The name of a key attribute.

              - **KeyType** *(string) --*

                The role that this key attribute will assume:

                * ``HASH`` - partition key

                * ``RANGE`` - sort key

                .. note::

                  The partition key of an item is also known as its *hash attribute* . The term
                  "hash attribute" derives from DynamoDB's usage of an internal hash function to
                  evenly distribute data items across partitions, based on their partition key
                  values.

                  The sort key of an item is also known as its *range attribute* . The term "range
                  attribute" derives from the way DynamoDB stores items with the same partition key
                  physically close together, in sorted order by the sort key value.

          - **Projection** *(dict) --*

            Represents attributes that are copied (projected) from the table into the global
            secondary index. These are in addition to the primary key attributes and index key
            attributes, which are automatically projected.

            - **ProjectionType** *(string) --*

              The set of attributes that are projected into the index:

              * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

              * ``INCLUDE`` - Only the specified table attributes are projected into the index. The
              list of projected attributes is in ``NonKeyAttributes`` .

              * ``ALL`` - All of the table attributes are projected into the index.

            - **NonKeyAttributes** *(list) --*

              Represents the non-key attribute names which will be projected into the index.

              For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all
              of the local secondary indexes, must not exceed 20. If you project the same attribute
              into two different indexes, this counts as two distinct attributes when determining
              the total.

              - *(string) --*

          - **ProvisionedThroughput** *(dict) --*

            Represents the provisioned throughput settings for the specified global secondary index.

            - **ReadCapacityUnits** *(integer) --*

              The maximum number of strongly consistent reads consumed per second before DynamoDB
              returns a ``ThrottlingException`` . For more information, see `Specifying Read and
              Write Requirements
              <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
              in the *Amazon DynamoDB Developer Guide* .

              If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.

            - **WriteCapacityUnits** *(integer) --*

              The maximum number of writes consumed per second before DynamoDB returns a
              ``ThrottlingException`` . For more information, see `Specifying Read and Write
              Requirements
              <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
              in the *Amazon DynamoDB Developer Guide* .

              If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.

      - **StreamDescription** *(dict) --*

        Stream settings on the table when the backup was created.

        - **StreamEnabled** *(boolean) --*

          Indicates whether DynamoDB Streams is enabled (true) or disabled (false) on the table.

        - **StreamViewType** *(string) --*

          When an item in the table is modified, ``StreamViewType`` determines what information is
          written to the stream for this table. Valid values for ``StreamViewType`` are:

          * ``KEYS_ONLY`` - Only the key attributes of the modified item are written to the stream.

          * ``NEW_IMAGE`` - The entire item, as it appears after it was modified, is written to the
          stream.

          * ``OLD_IMAGE`` - The entire item, as it appeared before it was modified, is written to
          the stream.

          * ``NEW_AND_OLD_IMAGES`` - Both the new and the old item images of the item are written to
          the stream.

      - **TimeToLiveDescription** *(dict) --*

        Time to Live settings on the table when the backup was created.

        - **TimeToLiveStatus** *(string) --*

          The TTL status for the table.

        - **AttributeName** *(string) --*

          The name of the TTL attribute for items in the table.

      - **SSEDescription** *(dict) --*

        The description of the server-side encryption status on the table when the backup was
        created.

        - **Status** *(string) --*

          Represents the current state of server-side encryption. The only supported values are:

          * ``ENABLED`` - Server-side encryption is enabled.

          * ``UPDATING`` - Server-side encryption is being updated.

        - **SSEType** *(string) --*

          Server-side encryption type. The only supported value is:

          * ``KMS`` - Server-side encryption that uses AWS Key Management Service. The key is stored
          in your account and is managed by AWS KMS (AWS KMS charges apply).

        - **KMSMasterKeyArn** *(string) --*

          The AWS KMS customer master key (CMK) ARN used for the AWS KMS encryption.

        - **InaccessibleEncryptionDateTime** *(datetime) --*

          Indicates the time, in UNIX epoch date format, when DynamoDB detected that the table's AWS
          KMS key was inaccessible. This attribute will automatically be cleared when DynamoDB
          detects that the table's AWS KMS key is accessible again. DynamoDB will initiate the table
          archival process when table's AWS KMS key remains inaccessible for more than seven days
          from this date.
    """


_ClientDescribeBackupResponseTypeDef = TypedDict(
    "_ClientDescribeBackupResponseTypeDef",
    {"BackupDescription": ClientDescribeBackupResponseBackupDescriptionTypeDef},
    total=False,
)


class ClientDescribeBackupResponseTypeDef(_ClientDescribeBackupResponseTypeDef):
    """
    Type definition for `ClientDescribeBackup` `Response`

    - **BackupDescription** *(dict) --*

      Contains the description of the backup created for the table.

      - **BackupDetails** *(dict) --*

        Contains the details of the backup created for the table.

        - **BackupArn** *(string) --*

          ARN associated with the backup.

        - **BackupName** *(string) --*

          Name of the requested backup.

        - **BackupSizeBytes** *(integer) --*

          Size of the backup in bytes.

        - **BackupStatus** *(string) --*

          Backup can be in one of the following states: CREATING, ACTIVE, DELETED.

        - **BackupType** *(string) --*

          BackupType:

          * ``USER`` - You create and manage these using the on-demand backup feature.

          * ``SYSTEM`` - If you delete a table with point-in-time recovery enabled, a ``SYSTEM``
          backup is automatically created and is retained for 35 days (at no additional cost).
          System backups allow you to restore the deleted table to the state it was in just before
          the point of deletion.

          * ``AWS_BACKUP`` - On-demand backup created by you from AWS Backup service.

        - **BackupCreationDateTime** *(datetime) --*

          Time at which the backup was created. This is the request time of the backup.

        - **BackupExpiryDateTime** *(datetime) --*

          Time at which the automatic on-demand backup created by DynamoDB will expire. This
          ``SYSTEM`` on-demand backup expires automatically 35 days after its creation.

      - **SourceTableDetails** *(dict) --*

        Contains the details of the table when the backup was created.

        - **TableName** *(string) --*

          The name of the table for which the backup was created.

        - **TableId** *(string) --*

          Unique identifier for the table for which the backup was created.

        - **TableArn** *(string) --*

          ARN of the table for which backup was created.

        - **TableSizeBytes** *(integer) --*

          Size of the table in bytes. Note that this is an approximate value.

        - **KeySchema** *(list) --*

          Schema of the table.

          - *(dict) --*

            Represents *a single element* of a key schema. A key schema specifies the attributes
            that make up the primary key of a table, or the key attributes of an index.

            A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example,
            a simple primary key would be represented by one ``KeySchemaElement`` (for the partition
            key). A composite primary key would require one ``KeySchemaElement`` for the partition
            key, and another ``KeySchemaElement`` for the sort key.

            A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute).
            The data type must be one of String, Number, or Binary. The attribute cannot be nested
            within a List or a Map.

            - **AttributeName** *(string) --*

              The name of a key attribute.

            - **KeyType** *(string) --*

              The role that this key attribute will assume:

              * ``HASH`` - partition key

              * ``RANGE`` - sort key

              .. note::

                The partition key of an item is also known as its *hash attribute* . The term "hash
                attribute" derives from DynamoDB's usage of an internal hash function to evenly
                distribute data items across partitions, based on their partition key values.

                The sort key of an item is also known as its *range attribute* . The term "range
                attribute" derives from the way DynamoDB stores items with the same partition key
                physically close together, in sorted order by the sort key value.

        - **TableCreationDateTime** *(datetime) --*

          Time when the source table was created.

        - **ProvisionedThroughput** *(dict) --*

          Read IOPs and Write IOPS on the table when the backup was created.

          - **ReadCapacityUnits** *(integer) --*

            The maximum number of strongly consistent reads consumed per second before DynamoDB
            returns a ``ThrottlingException`` . For more information, see `Specifying Read and Write
            Requirements
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
            in the *Amazon DynamoDB Developer Guide* .

            If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.

          - **WriteCapacityUnits** *(integer) --*

            The maximum number of writes consumed per second before DynamoDB returns a
            ``ThrottlingException`` . For more information, see `Specifying Read and Write
            Requirements
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
            in the *Amazon DynamoDB Developer Guide* .

            If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.

        - **ItemCount** *(integer) --*

          Number of items in the table. Note that this is an approximate value.

        - **BillingMode** *(string) --*

          Controls how you are charged for read and write throughput and how you manage capacity.
          This setting can be changed later.

          * ``PROVISIONED`` - Sets the read/write capacity mode to ``PROVISIONED`` . We recommend
          using ``PROVISIONED`` for predictable workloads.

          * ``PAY_PER_REQUEST`` - Sets the read/write capacity mode to ``PAY_PER_REQUEST`` . We
          recommend using ``PAY_PER_REQUEST`` for unpredictable workloads.

      - **SourceTableFeatureDetails** *(dict) --*

        Contains the details of the features enabled on the table when the backup was created. For
        example, LSIs, GSIs, streams, TTL.

        - **LocalSecondaryIndexes** *(list) --*

          Represents the LSI properties for the table when the backup was created. It includes the
          IndexName, KeySchema and Projection for the LSIs on the table at the time of backup.

          - *(dict) --*

            Represents the properties of a local secondary index for the table when the backup was
            created.

            - **IndexName** *(string) --*

              Represents the name of the local secondary index.

            - **KeySchema** *(list) --*

              The complete key schema for a local secondary index, which consists of one or more
              pairs of attribute names and key types:

              * ``HASH`` - partition key

              * ``RANGE`` - sort key

              .. note::

                The partition key of an item is also known as its *hash attribute* . The term "hash
                attribute" derives from DynamoDB's usage of an internal hash function to evenly
                distribute data items across partitions, based on their partition key values.

                The sort key of an item is also known as its *range attribute* . The term "range
                attribute" derives from the way DynamoDB stores items with the same partition key
                physically close together, in sorted order by the sort key value.

              - *(dict) --*

                Represents *a single element* of a key schema. A key schema specifies the attributes
                that make up the primary key of a table, or the key attributes of an index.

                A ``KeySchemaElement`` represents exactly one attribute of the primary key. For
                example, a simple primary key would be represented by one ``KeySchemaElement`` (for
                the partition key). A composite primary key would require one ``KeySchemaElement``
                for the partition key, and another ``KeySchemaElement`` for the sort key.

                A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested
                attribute). The data type must be one of String, Number, or Binary. The attribute
                cannot be nested within a List or a Map.

                - **AttributeName** *(string) --*

                  The name of a key attribute.

                - **KeyType** *(string) --*

                  The role that this key attribute will assume:

                  * ``HASH`` - partition key

                  * ``RANGE`` - sort key

                  .. note::

                    The partition key of an item is also known as its *hash attribute* . The term
                    "hash attribute" derives from DynamoDB's usage of an internal hash function to
                    evenly distribute data items across partitions, based on their partition key
                    values.

                    The sort key of an item is also known as its *range attribute* . The term "range
                    attribute" derives from the way DynamoDB stores items with the same partition
                    key physically close together, in sorted order by the sort key value.

            - **Projection** *(dict) --*

              Represents attributes that are copied (projected) from the table into the global
              secondary index. These are in addition to the primary key attributes and index key
              attributes, which are automatically projected.

              - **ProjectionType** *(string) --*

                The set of attributes that are projected into the index:

                * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

                * ``INCLUDE`` - Only the specified table attributes are projected into the index.
                The list of projected attributes is in ``NonKeyAttributes`` .

                * ``ALL`` - All of the table attributes are projected into the index.

              - **NonKeyAttributes** *(list) --*

                Represents the non-key attribute names which will be projected into the index.

                For local secondary indexes, the total count of ``NonKeyAttributes`` summed across
                all of the local secondary indexes, must not exceed 20. If you project the same
                attribute into two different indexes, this counts as two distinct attributes when
                determining the total.

                - *(string) --*

        - **GlobalSecondaryIndexes** *(list) --*

          Represents the GSI properties for the table when the backup was created. It includes the
          IndexName, KeySchema, Projection, and ProvisionedThroughput for the GSIs on the table at
          the time of backup.

          - *(dict) --*

            Represents the properties of a global secondary index for the table when the backup was
            created.

            - **IndexName** *(string) --*

              The name of the global secondary index.

            - **KeySchema** *(list) --*

              The complete key schema for a global secondary index, which consists of one or more
              pairs of attribute names and key types:

              * ``HASH`` - partition key

              * ``RANGE`` - sort key

              .. note::

                The partition key of an item is also known as its *hash attribute* . The term "hash
                attribute" derives from DynamoDB's usage of an internal hash function to evenly
                distribute data items across partitions, based on their partition key values.

                The sort key of an item is also known as its *range attribute* . The term "range
                attribute" derives from the way DynamoDB stores items with the same partition key
                physically close together, in sorted order by the sort key value.

              - *(dict) --*

                Represents *a single element* of a key schema. A key schema specifies the attributes
                that make up the primary key of a table, or the key attributes of an index.

                A ``KeySchemaElement`` represents exactly one attribute of the primary key. For
                example, a simple primary key would be represented by one ``KeySchemaElement`` (for
                the partition key). A composite primary key would require one ``KeySchemaElement``
                for the partition key, and another ``KeySchemaElement`` for the sort key.

                A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested
                attribute). The data type must be one of String, Number, or Binary. The attribute
                cannot be nested within a List or a Map.

                - **AttributeName** *(string) --*

                  The name of a key attribute.

                - **KeyType** *(string) --*

                  The role that this key attribute will assume:

                  * ``HASH`` - partition key

                  * ``RANGE`` - sort key

                  .. note::

                    The partition key of an item is also known as its *hash attribute* . The term
                    "hash attribute" derives from DynamoDB's usage of an internal hash function to
                    evenly distribute data items across partitions, based on their partition key
                    values.

                    The sort key of an item is also known as its *range attribute* . The term "range
                    attribute" derives from the way DynamoDB stores items with the same partition
                    key physically close together, in sorted order by the sort key value.

            - **Projection** *(dict) --*

              Represents attributes that are copied (projected) from the table into the global
              secondary index. These are in addition to the primary key attributes and index key
              attributes, which are automatically projected.

              - **ProjectionType** *(string) --*

                The set of attributes that are projected into the index:

                * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

                * ``INCLUDE`` - Only the specified table attributes are projected into the index.
                The list of projected attributes is in ``NonKeyAttributes`` .

                * ``ALL`` - All of the table attributes are projected into the index.

              - **NonKeyAttributes** *(list) --*

                Represents the non-key attribute names which will be projected into the index.

                For local secondary indexes, the total count of ``NonKeyAttributes`` summed across
                all of the local secondary indexes, must not exceed 20. If you project the same
                attribute into two different indexes, this counts as two distinct attributes when
                determining the total.

                - *(string) --*

            - **ProvisionedThroughput** *(dict) --*

              Represents the provisioned throughput settings for the specified global secondary
              index.

              - **ReadCapacityUnits** *(integer) --*

                The maximum number of strongly consistent reads consumed per second before DynamoDB
                returns a ``ThrottlingException`` . For more information, see `Specifying Read and
                Write Requirements
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
                in the *Amazon DynamoDB Developer Guide* .

                If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.

              - **WriteCapacityUnits** *(integer) --*

                The maximum number of writes consumed per second before DynamoDB returns a
                ``ThrottlingException`` . For more information, see `Specifying Read and Write
                Requirements
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
                in the *Amazon DynamoDB Developer Guide* .

                If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.

        - **StreamDescription** *(dict) --*

          Stream settings on the table when the backup was created.

          - **StreamEnabled** *(boolean) --*

            Indicates whether DynamoDB Streams is enabled (true) or disabled (false) on the table.

          - **StreamViewType** *(string) --*

            When an item in the table is modified, ``StreamViewType`` determines what information is
            written to the stream for this table. Valid values for ``StreamViewType`` are:

            * ``KEYS_ONLY`` - Only the key attributes of the modified item are written to the
            stream.

            * ``NEW_IMAGE`` - The entire item, as it appears after it was modified, is written to
            the stream.

            * ``OLD_IMAGE`` - The entire item, as it appeared before it was modified, is written to
            the stream.

            * ``NEW_AND_OLD_IMAGES`` - Both the new and the old item images of the item are written
            to the stream.

        - **TimeToLiveDescription** *(dict) --*

          Time to Live settings on the table when the backup was created.

          - **TimeToLiveStatus** *(string) --*

            The TTL status for the table.

          - **AttributeName** *(string) --*

            The name of the TTL attribute for items in the table.

        - **SSEDescription** *(dict) --*

          The description of the server-side encryption status on the table when the backup was
          created.

          - **Status** *(string) --*

            Represents the current state of server-side encryption. The only supported values are:

            * ``ENABLED`` - Server-side encryption is enabled.

            * ``UPDATING`` - Server-side encryption is being updated.

          - **SSEType** *(string) --*

            Server-side encryption type. The only supported value is:

            * ``KMS`` - Server-side encryption that uses AWS Key Management Service. The key is
            stored in your account and is managed by AWS KMS (AWS KMS charges apply).

          - **KMSMasterKeyArn** *(string) --*

            The AWS KMS customer master key (CMK) ARN used for the AWS KMS encryption.

          - **InaccessibleEncryptionDateTime** *(datetime) --*

            Indicates the time, in UNIX epoch date format, when DynamoDB detected that the table's
            AWS KMS key was inaccessible. This attribute will automatically be cleared when DynamoDB
            detects that the table's AWS KMS key is accessible again. DynamoDB will initiate the
            table archival process when table's AWS KMS key remains inaccessible for more than seven
            days from this date.
    """


_ClientDescribeContinuousBackupsResponseContinuousBackupsDescriptionPointInTimeRecoveryDescriptionTypeDef = TypedDict(
    "_ClientDescribeContinuousBackupsResponseContinuousBackupsDescriptionPointInTimeRecoveryDescriptionTypeDef",
    {
        "PointInTimeRecoveryStatus": str,
        "EarliestRestorableDateTime": datetime,
        "LatestRestorableDateTime": datetime,
    },
    total=False,
)


class ClientDescribeContinuousBackupsResponseContinuousBackupsDescriptionPointInTimeRecoveryDescriptionTypeDef(
    _ClientDescribeContinuousBackupsResponseContinuousBackupsDescriptionPointInTimeRecoveryDescriptionTypeDef
):
    """
    Type definition for `ClientDescribeContinuousBackupsResponseContinuousBackupsDescription`
    `PointInTimeRecoveryDescription`

    The description of the point in time recovery settings applied to the table.

    - **PointInTimeRecoveryStatus** *(string) --*

      The current state of point in time recovery:

      * ``ENABLING`` - Point in time recovery is being enabled.

      * ``ENABLED`` - Point in time recovery is enabled.

      * ``DISABLED`` - Point in time recovery is disabled.

    - **EarliestRestorableDateTime** *(datetime) --*

      Specifies the earliest point in time you can restore your table to. You can restore your table
      to any point in time during the last 35 days.

    - **LatestRestorableDateTime** *(datetime) --*

       ``LatestRestorableDateTime`` is typically 5 minutes before the current time.
    """


_ClientDescribeContinuousBackupsResponseContinuousBackupsDescriptionTypeDef = TypedDict(
    "_ClientDescribeContinuousBackupsResponseContinuousBackupsDescriptionTypeDef",
    {
        "ContinuousBackupsStatus": str,
        "PointInTimeRecoveryDescription": ClientDescribeContinuousBackupsResponseContinuousBackupsDescriptionPointInTimeRecoveryDescriptionTypeDef,
    },
    total=False,
)


class ClientDescribeContinuousBackupsResponseContinuousBackupsDescriptionTypeDef(
    _ClientDescribeContinuousBackupsResponseContinuousBackupsDescriptionTypeDef
):
    """
    Type definition for `ClientDescribeContinuousBackupsResponse` `ContinuousBackupsDescription`

    Represents the continuous backups and point in time recovery settings on the table.

    - **ContinuousBackupsStatus** *(string) --*

       ``ContinuousBackupsStatus`` can be one of the following states: ENABLED, DISABLED

    - **PointInTimeRecoveryDescription** *(dict) --*

      The description of the point in time recovery settings applied to the table.

      - **PointInTimeRecoveryStatus** *(string) --*

        The current state of point in time recovery:

        * ``ENABLING`` - Point in time recovery is being enabled.

        * ``ENABLED`` - Point in time recovery is enabled.

        * ``DISABLED`` - Point in time recovery is disabled.

      - **EarliestRestorableDateTime** *(datetime) --*

        Specifies the earliest point in time you can restore your table to. You can restore your
        table to any point in time during the last 35 days.

      - **LatestRestorableDateTime** *(datetime) --*

         ``LatestRestorableDateTime`` is typically 5 minutes before the current time.
    """


_ClientDescribeContinuousBackupsResponseTypeDef = TypedDict(
    "_ClientDescribeContinuousBackupsResponseTypeDef",
    {
        "ContinuousBackupsDescription": ClientDescribeContinuousBackupsResponseContinuousBackupsDescriptionTypeDef
    },
    total=False,
)


class ClientDescribeContinuousBackupsResponseTypeDef(
    _ClientDescribeContinuousBackupsResponseTypeDef
):
    """
    Type definition for `ClientDescribeContinuousBackups` `Response`

    - **ContinuousBackupsDescription** *(dict) --*

      Represents the continuous backups and point in time recovery settings on the table.

      - **ContinuousBackupsStatus** *(string) --*

         ``ContinuousBackupsStatus`` can be one of the following states: ENABLED, DISABLED

      - **PointInTimeRecoveryDescription** *(dict) --*

        The description of the point in time recovery settings applied to the table.

        - **PointInTimeRecoveryStatus** *(string) --*

          The current state of point in time recovery:

          * ``ENABLING`` - Point in time recovery is being enabled.

          * ``ENABLED`` - Point in time recovery is enabled.

          * ``DISABLED`` - Point in time recovery is disabled.

        - **EarliestRestorableDateTime** *(datetime) --*

          Specifies the earliest point in time you can restore your table to. You can restore your
          table to any point in time during the last 35 days.

        - **LatestRestorableDateTime** *(datetime) --*

           ``LatestRestorableDateTime`` is typically 5 minutes before the current time.
    """


_ClientDescribeContributorInsightsResponseFailureExceptionTypeDef = TypedDict(
    "_ClientDescribeContributorInsightsResponseFailureExceptionTypeDef",
    {"ExceptionName": str, "ExceptionDescription": str},
    total=False,
)


class ClientDescribeContributorInsightsResponseFailureExceptionTypeDef(
    _ClientDescribeContributorInsightsResponseFailureExceptionTypeDef
):
    """
    Type definition for `ClientDescribeContributorInsightsResponse` `FailureException`

    Returns information about the last failure that encountered.

    The most common exceptions for a FAILED status are:

    * LimitExceededException - Per-account Amazon CloudWatch Contributor Insights rule limit
    reached. Please disable Contributor Insights for other tables/indexes OR disable Contributor
    Insights rules before retrying.

    * AccessDeniedException - Amazon CloudWatch Contributor Insights rules cannot be modified due to
    insufficient permissions.

    * AccessDeniedException - Failed to create service-linked role for Contributor Insights due to
    insufficient permissions.

    * InternalServerError - Failed to create Amazon CloudWatch Contributor Insights rules. Please
    retry request.

    - **ExceptionName** *(string) --*

      Exception name.

    - **ExceptionDescription** *(string) --*

      Description of the failure.
    """


_ClientDescribeContributorInsightsResponseTypeDef = TypedDict(
    "_ClientDescribeContributorInsightsResponseTypeDef",
    {
        "TableName": str,
        "IndexName": str,
        "ContributorInsightsRuleList": List[str],
        "ContributorInsightsStatus": str,
        "LastUpdateDateTime": datetime,
        "FailureException": ClientDescribeContributorInsightsResponseFailureExceptionTypeDef,
    },
    total=False,
)


class ClientDescribeContributorInsightsResponseTypeDef(
    _ClientDescribeContributorInsightsResponseTypeDef
):
    """
    Type definition for `ClientDescribeContributorInsights` `Response`

    - **TableName** *(string) --*

      The name of the table being described.

    - **IndexName** *(string) --*

      The name of the global secondary index being described.

    - **ContributorInsightsRuleList** *(list) --*

      List of names of the associated Alpine rules.

      - *(string) --*

    - **ContributorInsightsStatus** *(string) --*

      Current Status contributor insights.

    - **LastUpdateDateTime** *(datetime) --*

      Timestamp of the last time the status was changed.

    - **FailureException** *(dict) --*

      Returns information about the last failure that encountered.

      The most common exceptions for a FAILED status are:

      * LimitExceededException - Per-account Amazon CloudWatch Contributor Insights rule limit
      reached. Please disable Contributor Insights for other tables/indexes OR disable Contributor
      Insights rules before retrying.

      * AccessDeniedException - Amazon CloudWatch Contributor Insights rules cannot be modified due
      to insufficient permissions.

      * AccessDeniedException - Failed to create service-linked role for Contributor Insights due to
      insufficient permissions.

      * InternalServerError - Failed to create Amazon CloudWatch Contributor Insights rules. Please
      retry request.

      - **ExceptionName** *(string) --*

        Exception name.

      - **ExceptionDescription** *(string) --*

        Description of the failure.
    """


_ClientDescribeEndpointsResponseEndpointsTypeDef = TypedDict(
    "_ClientDescribeEndpointsResponseEndpointsTypeDef",
    {"Address": str, "CachePeriodInMinutes": int},
    total=False,
)


class ClientDescribeEndpointsResponseEndpointsTypeDef(
    _ClientDescribeEndpointsResponseEndpointsTypeDef
):
    """
    Type definition for `ClientDescribeEndpointsResponse` `Endpoints`

    An endpoint information details.

    - **Address** *(string) --*

      IP address of the endpoint.

    - **CachePeriodInMinutes** *(integer) --*

      Endpoint cache time to live (TTL) value.
    """


_ClientDescribeEndpointsResponseTypeDef = TypedDict(
    "_ClientDescribeEndpointsResponseTypeDef",
    {"Endpoints": List[ClientDescribeEndpointsResponseEndpointsTypeDef]},
    total=False,
)


class ClientDescribeEndpointsResponseTypeDef(_ClientDescribeEndpointsResponseTypeDef):
    """
    Type definition for `ClientDescribeEndpoints` `Response`

    - **Endpoints** *(list) --*

      List of endpoints.

      - *(dict) --*

        An endpoint information details.

        - **Address** *(string) --*

          IP address of the endpoint.

        - **CachePeriodInMinutes** *(integer) --*

          Endpoint cache time to live (TTL) value.
    """


_ClientDescribeGlobalTableResponseGlobalTableDescriptionReplicationGroupGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef = TypedDict(
    "_ClientDescribeGlobalTableResponseGlobalTableDescriptionReplicationGroupGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef",
    {"ReadCapacityUnits": int},
    total=False,
)


class ClientDescribeGlobalTableResponseGlobalTableDescriptionReplicationGroupGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef(
    _ClientDescribeGlobalTableResponseGlobalTableDescriptionReplicationGroupGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef
):
    """
    Type definition for
    `ClientDescribeGlobalTableResponseGlobalTableDescriptionReplicationGroupGlobalSecondaryIndexes`
    `ProvisionedThroughputOverride`

    If not described, uses the source table GSI's read capacity settings.

    - **ReadCapacityUnits** *(integer) --*

      Replica-specific read capacity units. If not specified, uses the source table's read capacity
      settings.
    """


_ClientDescribeGlobalTableResponseGlobalTableDescriptionReplicationGroupGlobalSecondaryIndexesTypeDef = TypedDict(
    "_ClientDescribeGlobalTableResponseGlobalTableDescriptionReplicationGroupGlobalSecondaryIndexesTypeDef",
    {
        "IndexName": str,
        "ProvisionedThroughputOverride": ClientDescribeGlobalTableResponseGlobalTableDescriptionReplicationGroupGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef,
    },
    total=False,
)


class ClientDescribeGlobalTableResponseGlobalTableDescriptionReplicationGroupGlobalSecondaryIndexesTypeDef(
    _ClientDescribeGlobalTableResponseGlobalTableDescriptionReplicationGroupGlobalSecondaryIndexesTypeDef
):
    """
    Type definition for `ClientDescribeGlobalTableResponseGlobalTableDescriptionReplicationGroup`
    `GlobalSecondaryIndexes`

    Represents the properties of a replica global secondary index.

    - **IndexName** *(string) --*

      The name of the global secondary index.

    - **ProvisionedThroughputOverride** *(dict) --*

      If not described, uses the source table GSI's read capacity settings.

      - **ReadCapacityUnits** *(integer) --*

        Replica-specific read capacity units. If not specified, uses the source table's read
        capacity settings.
    """


_ClientDescribeGlobalTableResponseGlobalTableDescriptionReplicationGroupProvisionedThroughputOverrideTypeDef = TypedDict(
    "_ClientDescribeGlobalTableResponseGlobalTableDescriptionReplicationGroupProvisionedThroughputOverrideTypeDef",
    {"ReadCapacityUnits": int},
    total=False,
)


class ClientDescribeGlobalTableResponseGlobalTableDescriptionReplicationGroupProvisionedThroughputOverrideTypeDef(
    _ClientDescribeGlobalTableResponseGlobalTableDescriptionReplicationGroupProvisionedThroughputOverrideTypeDef
):
    """
    Type definition for `ClientDescribeGlobalTableResponseGlobalTableDescriptionReplicationGroup`
    `ProvisionedThroughputOverride`

    Replica-specific provisioned throughput. If not described, uses the source table's provisioned
    throughput settings.

    - **ReadCapacityUnits** *(integer) --*

      Replica-specific read capacity units. If not specified, uses the source table's read capacity
      settings.
    """


_ClientDescribeGlobalTableResponseGlobalTableDescriptionReplicationGroupTypeDef = TypedDict(
    "_ClientDescribeGlobalTableResponseGlobalTableDescriptionReplicationGroupTypeDef",
    {
        "RegionName": str,
        "ReplicaStatus": str,
        "ReplicaStatusDescription": str,
        "ReplicaStatusPercentProgress": str,
        "KMSMasterKeyId": str,
        "ProvisionedThroughputOverride": ClientDescribeGlobalTableResponseGlobalTableDescriptionReplicationGroupProvisionedThroughputOverrideTypeDef,
        "GlobalSecondaryIndexes": List[
            ClientDescribeGlobalTableResponseGlobalTableDescriptionReplicationGroupGlobalSecondaryIndexesTypeDef
        ],
    },
    total=False,
)


class ClientDescribeGlobalTableResponseGlobalTableDescriptionReplicationGroupTypeDef(
    _ClientDescribeGlobalTableResponseGlobalTableDescriptionReplicationGroupTypeDef
):
    """
    Type definition for `ClientDescribeGlobalTableResponseGlobalTableDescription` `ReplicationGroup`

    Contains the details of the replica.

    - **RegionName** *(string) --*

      The name of the Region.

    - **ReplicaStatus** *(string) --*

      The current state of the replica:

      * ``CREATING`` - The replica is being created.

      * ``UPDATING`` - The replica is being updated.

      * ``DELETING`` - The replica is being deleted.

      * ``ACTIVE`` - The replica is ready for use.

    - **ReplicaStatusDescription** *(string) --*

      Detailed information about the replica status.

    - **ReplicaStatusPercentProgress** *(string) --*

      Specifies the progress of a Create, Update, or Delete action on the replica as a percentage.

    - **KMSMasterKeyId** *(string) --*

      The AWS KMS customer master key (CMK) of the replica that will be used for AWS KMS encryption.

    - **ProvisionedThroughputOverride** *(dict) --*

      Replica-specific provisioned throughput. If not described, uses the source table's provisioned
      throughput settings.

      - **ReadCapacityUnits** *(integer) --*

        Replica-specific read capacity units. If not specified, uses the source table's read
        capacity settings.

    - **GlobalSecondaryIndexes** *(list) --*

      Replica-specific global secondary index settings.

      - *(dict) --*

        Represents the properties of a replica global secondary index.

        - **IndexName** *(string) --*

          The name of the global secondary index.

        - **ProvisionedThroughputOverride** *(dict) --*

          If not described, uses the source table GSI's read capacity settings.

          - **ReadCapacityUnits** *(integer) --*

            Replica-specific read capacity units. If not specified, uses the source table's read
            capacity settings.
    """


_ClientDescribeGlobalTableResponseGlobalTableDescriptionTypeDef = TypedDict(
    "_ClientDescribeGlobalTableResponseGlobalTableDescriptionTypeDef",
    {
        "ReplicationGroup": List[
            ClientDescribeGlobalTableResponseGlobalTableDescriptionReplicationGroupTypeDef
        ],
        "GlobalTableArn": str,
        "CreationDateTime": datetime,
        "GlobalTableStatus": str,
        "GlobalTableName": str,
    },
    total=False,
)


class ClientDescribeGlobalTableResponseGlobalTableDescriptionTypeDef(
    _ClientDescribeGlobalTableResponseGlobalTableDescriptionTypeDef
):
    """
    Type definition for `ClientDescribeGlobalTableResponse` `GlobalTableDescription`

    Contains the details of the global table.

    - **ReplicationGroup** *(list) --*

      The Regions where the global table has replicas.

      - *(dict) --*

        Contains the details of the replica.

        - **RegionName** *(string) --*

          The name of the Region.

        - **ReplicaStatus** *(string) --*

          The current state of the replica:

          * ``CREATING`` - The replica is being created.

          * ``UPDATING`` - The replica is being updated.

          * ``DELETING`` - The replica is being deleted.

          * ``ACTIVE`` - The replica is ready for use.

        - **ReplicaStatusDescription** *(string) --*

          Detailed information about the replica status.

        - **ReplicaStatusPercentProgress** *(string) --*

          Specifies the progress of a Create, Update, or Delete action on the replica as a
          percentage.

        - **KMSMasterKeyId** *(string) --*

          The AWS KMS customer master key (CMK) of the replica that will be used for AWS KMS
          encryption.

        - **ProvisionedThroughputOverride** *(dict) --*

          Replica-specific provisioned throughput. If not described, uses the source table's
          provisioned throughput settings.

          - **ReadCapacityUnits** *(integer) --*

            Replica-specific read capacity units. If not specified, uses the source table's read
            capacity settings.

        - **GlobalSecondaryIndexes** *(list) --*

          Replica-specific global secondary index settings.

          - *(dict) --*

            Represents the properties of a replica global secondary index.

            - **IndexName** *(string) --*

              The name of the global secondary index.

            - **ProvisionedThroughputOverride** *(dict) --*

              If not described, uses the source table GSI's read capacity settings.

              - **ReadCapacityUnits** *(integer) --*

                Replica-specific read capacity units. If not specified, uses the source table's read
                capacity settings.

    - **GlobalTableArn** *(string) --*

      The unique identifier of the global table.

    - **CreationDateTime** *(datetime) --*

      The creation time of the global table.

    - **GlobalTableStatus** *(string) --*

      The current state of the global table:

      * ``CREATING`` - The global table is being created.

      * ``UPDATING`` - The global table is being updated.

      * ``DELETING`` - The global table is being deleted.

      * ``ACTIVE`` - The global table is ready for use.

    - **GlobalTableName** *(string) --*

      The global table name.
    """


_ClientDescribeGlobalTableResponseTypeDef = TypedDict(
    "_ClientDescribeGlobalTableResponseTypeDef",
    {"GlobalTableDescription": ClientDescribeGlobalTableResponseGlobalTableDescriptionTypeDef},
    total=False,
)


class ClientDescribeGlobalTableResponseTypeDef(_ClientDescribeGlobalTableResponseTypeDef):
    """
    Type definition for `ClientDescribeGlobalTable` `Response`

    - **GlobalTableDescription** *(dict) --*

      Contains the details of the global table.

      - **ReplicationGroup** *(list) --*

        The Regions where the global table has replicas.

        - *(dict) --*

          Contains the details of the replica.

          - **RegionName** *(string) --*

            The name of the Region.

          - **ReplicaStatus** *(string) --*

            The current state of the replica:

            * ``CREATING`` - The replica is being created.

            * ``UPDATING`` - The replica is being updated.

            * ``DELETING`` - The replica is being deleted.

            * ``ACTIVE`` - The replica is ready for use.

          - **ReplicaStatusDescription** *(string) --*

            Detailed information about the replica status.

          - **ReplicaStatusPercentProgress** *(string) --*

            Specifies the progress of a Create, Update, or Delete action on the replica as a
            percentage.

          - **KMSMasterKeyId** *(string) --*

            The AWS KMS customer master key (CMK) of the replica that will be used for AWS KMS
            encryption.

          - **ProvisionedThroughputOverride** *(dict) --*

            Replica-specific provisioned throughput. If not described, uses the source table's
            provisioned throughput settings.

            - **ReadCapacityUnits** *(integer) --*

              Replica-specific read capacity units. If not specified, uses the source table's read
              capacity settings.

          - **GlobalSecondaryIndexes** *(list) --*

            Replica-specific global secondary index settings.

            - *(dict) --*

              Represents the properties of a replica global secondary index.

              - **IndexName** *(string) --*

                The name of the global secondary index.

              - **ProvisionedThroughputOverride** *(dict) --*

                If not described, uses the source table GSI's read capacity settings.

                - **ReadCapacityUnits** *(integer) --*

                  Replica-specific read capacity units. If not specified, uses the source table's
                  read capacity settings.

      - **GlobalTableArn** *(string) --*

        The unique identifier of the global table.

      - **CreationDateTime** *(datetime) --*

        The creation time of the global table.

      - **GlobalTableStatus** *(string) --*

        The current state of the global table:

        * ``CREATING`` - The global table is being created.

        * ``UPDATING`` - The global table is being updated.

        * ``DELETING`` - The global table is being deleted.

        * ``ACTIVE`` - The global table is ready for use.

      - **GlobalTableName** *(string) --*

        The global table name.
    """


_ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaBillingModeSummaryTypeDef = TypedDict(
    "_ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaBillingModeSummaryTypeDef",
    {"BillingMode": str, "LastUpdateToPayPerRequestDateTime": datetime},
    total=False,
)


class ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaBillingModeSummaryTypeDef(
    _ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaBillingModeSummaryTypeDef
):
    """
    Type definition for `ClientDescribeGlobalTableSettingsResponseReplicaSettings`
    `ReplicaBillingModeSummary`

    The read/write capacity mode of the replica.

    - **BillingMode** *(string) --*

      Controls how you are charged for read and write throughput and how you manage capacity. This
      setting can be changed later.

      * ``PROVISIONED`` - Sets the read/write capacity mode to ``PROVISIONED`` . We recommend using
      ``PROVISIONED`` for predictable workloads.

      * ``PAY_PER_REQUEST`` - Sets the read/write capacity mode to ``PAY_PER_REQUEST`` . We
      recommend using ``PAY_PER_REQUEST`` for unpredictable workloads.

    - **LastUpdateToPayPerRequestDateTime** *(datetime) --*

      Represents the time when ``PAY_PER_REQUEST`` was last set as the read/write capacity mode.
    """


_ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef = TypedDict(
    "_ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef",
    {"DisableScaleIn": bool, "ScaleInCooldown": int, "ScaleOutCooldown": int, "TargetValue": float},
    total=False,
)


class ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef(
    _ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef
):
    """
    Type definition for
    `ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedReadCapacityAutoScalingSettingsScalingPolicies`
    `TargetTrackingScalingPolicyConfiguration`

    Represents a target tracking scaling policy configuration.

    - **DisableScaleIn** *(boolean) --*

      Indicates whether scale in by the target tracking policy is disabled. If the value is true,
      scale in is disabled and the target tracking policy won't remove capacity from the scalable
      resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity
      from the scalable resource. The default value is false.

    - **ScaleInCooldown** *(integer) --*

      The amount of time, in seconds, after a scale in activity completes before another scale in
      activity can start. The cooldown period is used to block subsequent scale in requests until it
      has expired. You should scale in conservatively to protect your application's availability.
      However, if another alarm triggers a scale out policy during the cooldown period after a
      scale-in, application auto scaling scales out your scalable target immediately.

    - **ScaleOutCooldown** *(integer) --*

      The amount of time, in seconds, after a scale out activity completes before another scale out
      activity can start. While the cooldown period is in effect, the capacity that has been added
      by the previous scale out event that initiated the cooldown is calculated as part of the
      desired capacity for the next scale out. You should continuously (but not excessively) scale
      out.

    - **TargetValue** *(float) --*

      The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or
      2e-360 to 2e360 (Base 2).
    """


_ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTypeDef = TypedDict(
    "_ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTypeDef",
    {
        "PolicyName": str,
        "TargetTrackingScalingPolicyConfiguration": ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef,
    },
    total=False,
)


class ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTypeDef(
    _ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTypeDef
):
    """
    Type definition for
    `ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedReadCapacityAutoScalingSettings`
    `ScalingPolicies`

    Represents the properties of the scaling policy.

    - **PolicyName** *(string) --*

      The name of the scaling policy.

    - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

      Represents a target tracking scaling policy configuration.

      - **DisableScaleIn** *(boolean) --*

        Indicates whether scale in by the target tracking policy is disabled. If the value is true,
        scale in is disabled and the target tracking policy won't remove capacity from the scalable
        resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity
        from the scalable resource. The default value is false.

      - **ScaleInCooldown** *(integer) --*

        The amount of time, in seconds, after a scale in activity completes before another scale in
        activity can start. The cooldown period is used to block subsequent scale in requests until
        it has expired. You should scale in conservatively to protect your application's
        availability. However, if another alarm triggers a scale out policy during the cooldown
        period after a scale-in, application auto scaling scales out your scalable target
        immediately.

      - **ScaleOutCooldown** *(integer) --*

        The amount of time, in seconds, after a scale out activity completes before another scale
        out activity can start. While the cooldown period is in effect, the capacity that has been
        added by the previous scale out event that initiated the cooldown is calculated as part of
        the desired capacity for the next scale out. You should continuously (but not excessively)
        scale out.

      - **TargetValue** *(float) --*

        The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or
        2e-360 to 2e360 (Base 2).
    """


_ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedReadCapacityAutoScalingSettingsTypeDef = TypedDict(
    "_ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedReadCapacityAutoScalingSettingsTypeDef",
    {
        "MinimumUnits": int,
        "MaximumUnits": int,
        "AutoScalingDisabled": bool,
        "AutoScalingRoleArn": str,
        "ScalingPolicies": List[
            ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTypeDef
        ],
    },
    total=False,
)


class ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedReadCapacityAutoScalingSettingsTypeDef(
    _ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedReadCapacityAutoScalingSettingsTypeDef
):
    """
    Type definition for
    `ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettings`
    `ProvisionedReadCapacityAutoScalingSettings`

    Auto scaling settings for a global secondary index replica's read capacity units.

    - **MinimumUnits** *(integer) --*

      The minimum capacity units that a global table or global secondary index should be scaled down
      to.

    - **MaximumUnits** *(integer) --*

      The maximum capacity units that a global table or global secondary index should be scaled up
      to.

    - **AutoScalingDisabled** *(boolean) --*

      Disabled auto scaling for this global table or global secondary index.

    - **AutoScalingRoleArn** *(string) --*

      Role ARN used for configuring the auto scaling policy.

    - **ScalingPolicies** *(list) --*

      Information about the scaling policies.

      - *(dict) --*

        Represents the properties of the scaling policy.

        - **PolicyName** *(string) --*

          The name of the scaling policy.

        - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

          Represents a target tracking scaling policy configuration.

          - **DisableScaleIn** *(boolean) --*

            Indicates whether scale in by the target tracking policy is disabled. If the value is
            true, scale in is disabled and the target tracking policy won't remove capacity from the
            scalable resource. Otherwise, scale in is enabled and the target tracking policy can
            remove capacity from the scalable resource. The default value is false.

          - **ScaleInCooldown** *(integer) --*

            The amount of time, in seconds, after a scale in activity completes before another scale
            in activity can start. The cooldown period is used to block subsequent scale in requests
            until it has expired. You should scale in conservatively to protect your application's
            availability. However, if another alarm triggers a scale out policy during the cooldown
            period after a scale-in, application auto scaling scales out your scalable target
            immediately.

          - **ScaleOutCooldown** *(integer) --*

            The amount of time, in seconds, after a scale out activity completes before another
            scale out activity can start. While the cooldown period is in effect, the capacity that
            has been added by the previous scale out event that initiated the cooldown is calculated
            as part of the desired capacity for the next scale out. You should continuously (but not
            excessively) scale out.

          - **TargetValue** *(float) --*

            The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10)
            or 2e-360 to 2e360 (Base 2).
    """


_ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef = TypedDict(
    "_ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef",
    {"DisableScaleIn": bool, "ScaleInCooldown": int, "ScaleOutCooldown": int, "TargetValue": float},
    total=False,
)


class ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef(
    _ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef
):
    """
    Type definition for
    `ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedWriteCapacityAutoScalingSettingsScalingPolicies`
    `TargetTrackingScalingPolicyConfiguration`

    Represents a target tracking scaling policy configuration.

    - **DisableScaleIn** *(boolean) --*

      Indicates whether scale in by the target tracking policy is disabled. If the value is true,
      scale in is disabled and the target tracking policy won't remove capacity from the scalable
      resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity
      from the scalable resource. The default value is false.

    - **ScaleInCooldown** *(integer) --*

      The amount of time, in seconds, after a scale in activity completes before another scale in
      activity can start. The cooldown period is used to block subsequent scale in requests until it
      has expired. You should scale in conservatively to protect your application's availability.
      However, if another alarm triggers a scale out policy during the cooldown period after a
      scale-in, application auto scaling scales out your scalable target immediately.

    - **ScaleOutCooldown** *(integer) --*

      The amount of time, in seconds, after a scale out activity completes before another scale out
      activity can start. While the cooldown period is in effect, the capacity that has been added
      by the previous scale out event that initiated the cooldown is calculated as part of the
      desired capacity for the next scale out. You should continuously (but not excessively) scale
      out.

    - **TargetValue** *(float) --*

      The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or
      2e-360 to 2e360 (Base 2).
    """


_ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTypeDef = TypedDict(
    "_ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTypeDef",
    {
        "PolicyName": str,
        "TargetTrackingScalingPolicyConfiguration": ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef,
    },
    total=False,
)


class ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTypeDef(
    _ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTypeDef
):
    """
    Type definition for
    `ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedWriteCapacityAutoScalingSettings`
    `ScalingPolicies`

    Represents the properties of the scaling policy.

    - **PolicyName** *(string) --*

      The name of the scaling policy.

    - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

      Represents a target tracking scaling policy configuration.

      - **DisableScaleIn** *(boolean) --*

        Indicates whether scale in by the target tracking policy is disabled. If the value is true,
        scale in is disabled and the target tracking policy won't remove capacity from the scalable
        resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity
        from the scalable resource. The default value is false.

      - **ScaleInCooldown** *(integer) --*

        The amount of time, in seconds, after a scale in activity completes before another scale in
        activity can start. The cooldown period is used to block subsequent scale in requests until
        it has expired. You should scale in conservatively to protect your application's
        availability. However, if another alarm triggers a scale out policy during the cooldown
        period after a scale-in, application auto scaling scales out your scalable target
        immediately.

      - **ScaleOutCooldown** *(integer) --*

        The amount of time, in seconds, after a scale out activity completes before another scale
        out activity can start. While the cooldown period is in effect, the capacity that has been
        added by the previous scale out event that initiated the cooldown is calculated as part of
        the desired capacity for the next scale out. You should continuously (but not excessively)
        scale out.

      - **TargetValue** *(float) --*

        The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or
        2e-360 to 2e360 (Base 2).
    """


_ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedWriteCapacityAutoScalingSettingsTypeDef = TypedDict(
    "_ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedWriteCapacityAutoScalingSettingsTypeDef",
    {
        "MinimumUnits": int,
        "MaximumUnits": int,
        "AutoScalingDisabled": bool,
        "AutoScalingRoleArn": str,
        "ScalingPolicies": List[
            ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTypeDef
        ],
    },
    total=False,
)


class ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedWriteCapacityAutoScalingSettingsTypeDef(
    _ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedWriteCapacityAutoScalingSettingsTypeDef
):
    """
    Type definition for
    `ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettings`
    `ProvisionedWriteCapacityAutoScalingSettings`

    Auto scaling settings for a global secondary index replica's write capacity units.

    - **MinimumUnits** *(integer) --*

      The minimum capacity units that a global table or global secondary index should be scaled down
      to.

    - **MaximumUnits** *(integer) --*

      The maximum capacity units that a global table or global secondary index should be scaled up
      to.

    - **AutoScalingDisabled** *(boolean) --*

      Disabled auto scaling for this global table or global secondary index.

    - **AutoScalingRoleArn** *(string) --*

      Role ARN used for configuring the auto scaling policy.

    - **ScalingPolicies** *(list) --*

      Information about the scaling policies.

      - *(dict) --*

        Represents the properties of the scaling policy.

        - **PolicyName** *(string) --*

          The name of the scaling policy.

        - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

          Represents a target tracking scaling policy configuration.

          - **DisableScaleIn** *(boolean) --*

            Indicates whether scale in by the target tracking policy is disabled. If the value is
            true, scale in is disabled and the target tracking policy won't remove capacity from the
            scalable resource. Otherwise, scale in is enabled and the target tracking policy can
            remove capacity from the scalable resource. The default value is false.

          - **ScaleInCooldown** *(integer) --*

            The amount of time, in seconds, after a scale in activity completes before another scale
            in activity can start. The cooldown period is used to block subsequent scale in requests
            until it has expired. You should scale in conservatively to protect your application's
            availability. However, if another alarm triggers a scale out policy during the cooldown
            period after a scale-in, application auto scaling scales out your scalable target
            immediately.

          - **ScaleOutCooldown** *(integer) --*

            The amount of time, in seconds, after a scale out activity completes before another
            scale out activity can start. While the cooldown period is in effect, the capacity that
            has been added by the previous scale out event that initiated the cooldown is calculated
            as part of the desired capacity for the next scale out. You should continuously (but not
            excessively) scale out.

          - **TargetValue** *(float) --*

            The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10)
            or 2e-360 to 2e360 (Base 2).
    """


_ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsTypeDef = TypedDict(
    "_ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsTypeDef",
    {
        "IndexName": str,
        "IndexStatus": str,
        "ProvisionedReadCapacityUnits": int,
        "ProvisionedReadCapacityAutoScalingSettings": ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedReadCapacityAutoScalingSettingsTypeDef,
        "ProvisionedWriteCapacityUnits": int,
        "ProvisionedWriteCapacityAutoScalingSettings": ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedWriteCapacityAutoScalingSettingsTypeDef,
    },
    total=False,
)


class ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsTypeDef(
    _ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsTypeDef
):
    """
    Type definition for `ClientDescribeGlobalTableSettingsResponseReplicaSettings`
    `ReplicaGlobalSecondaryIndexSettings`

    Represents the properties of a global secondary index.

    - **IndexName** *(string) --*

      The name of the global secondary index. The name must be unique among all other indexes on
      this table.

    - **IndexStatus** *(string) --*

      The current status of the global secondary index:

      * ``CREATING`` - The global secondary index is being created.

      * ``UPDATING`` - The global secondary index is being updated.

      * ``DELETING`` - The global secondary index is being deleted.

      * ``ACTIVE`` - The global secondary index is ready for use.

    - **ProvisionedReadCapacityUnits** *(integer) --*

      The maximum number of strongly consistent reads consumed per second before DynamoDB returns a
      ``ThrottlingException`` .

    - **ProvisionedReadCapacityAutoScalingSettings** *(dict) --*

      Auto scaling settings for a global secondary index replica's read capacity units.

      - **MinimumUnits** *(integer) --*

        The minimum capacity units that a global table or global secondary index should be scaled
        down to.

      - **MaximumUnits** *(integer) --*

        The maximum capacity units that a global table or global secondary index should be scaled up
        to.

      - **AutoScalingDisabled** *(boolean) --*

        Disabled auto scaling for this global table or global secondary index.

      - **AutoScalingRoleArn** *(string) --*

        Role ARN used for configuring the auto scaling policy.

      - **ScalingPolicies** *(list) --*

        Information about the scaling policies.

        - *(dict) --*

          Represents the properties of the scaling policy.

          - **PolicyName** *(string) --*

            The name of the scaling policy.

          - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

            Represents a target tracking scaling policy configuration.

            - **DisableScaleIn** *(boolean) --*

              Indicates whether scale in by the target tracking policy is disabled. If the value is
              true, scale in is disabled and the target tracking policy won't remove capacity from
              the scalable resource. Otherwise, scale in is enabled and the target tracking policy
              can remove capacity from the scalable resource. The default value is false.

            - **ScaleInCooldown** *(integer) --*

              The amount of time, in seconds, after a scale in activity completes before another
              scale in activity can start. The cooldown period is used to block subsequent scale in
              requests until it has expired. You should scale in conservatively to protect your
              application's availability. However, if another alarm triggers a scale out policy
              during the cooldown period after a scale-in, application auto scaling scales out your
              scalable target immediately.

            - **ScaleOutCooldown** *(integer) --*

              The amount of time, in seconds, after a scale out activity completes before another
              scale out activity can start. While the cooldown period is in effect, the capacity
              that has been added by the previous scale out event that initiated the cooldown is
              calculated as part of the desired capacity for the next scale out. You should
              continuously (but not excessively) scale out.

            - **TargetValue** *(float) --*

              The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10)
              or 2e-360 to 2e360 (Base 2).

    - **ProvisionedWriteCapacityUnits** *(integer) --*

      The maximum number of writes consumed per second before DynamoDB returns a
      ``ThrottlingException`` .

    - **ProvisionedWriteCapacityAutoScalingSettings** *(dict) --*

      Auto scaling settings for a global secondary index replica's write capacity units.

      - **MinimumUnits** *(integer) --*

        The minimum capacity units that a global table or global secondary index should be scaled
        down to.

      - **MaximumUnits** *(integer) --*

        The maximum capacity units that a global table or global secondary index should be scaled up
        to.

      - **AutoScalingDisabled** *(boolean) --*

        Disabled auto scaling for this global table or global secondary index.

      - **AutoScalingRoleArn** *(string) --*

        Role ARN used for configuring the auto scaling policy.

      - **ScalingPolicies** *(list) --*

        Information about the scaling policies.

        - *(dict) --*

          Represents the properties of the scaling policy.

          - **PolicyName** *(string) --*

            The name of the scaling policy.

          - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

            Represents a target tracking scaling policy configuration.

            - **DisableScaleIn** *(boolean) --*

              Indicates whether scale in by the target tracking policy is disabled. If the value is
              true, scale in is disabled and the target tracking policy won't remove capacity from
              the scalable resource. Otherwise, scale in is enabled and the target tracking policy
              can remove capacity from the scalable resource. The default value is false.

            - **ScaleInCooldown** *(integer) --*

              The amount of time, in seconds, after a scale in activity completes before another
              scale in activity can start. The cooldown period is used to block subsequent scale in
              requests until it has expired. You should scale in conservatively to protect your
              application's availability. However, if another alarm triggers a scale out policy
              during the cooldown period after a scale-in, application auto scaling scales out your
              scalable target immediately.

            - **ScaleOutCooldown** *(integer) --*

              The amount of time, in seconds, after a scale out activity completes before another
              scale out activity can start. While the cooldown period is in effect, the capacity
              that has been added by the previous scale out event that initiated the cooldown is
              calculated as part of the desired capacity for the next scale out. You should
              continuously (but not excessively) scale out.

            - **TargetValue** *(float) --*

              The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10)
              or 2e-360 to 2e360 (Base 2).
    """


_ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef = TypedDict(
    "_ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef",
    {"DisableScaleIn": bool, "ScaleInCooldown": int, "ScaleOutCooldown": int, "TargetValue": float},
    total=False,
)


class ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef(
    _ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef
):
    """
    Type definition for
    `ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedReadCapacityAutoScalingSettingsScalingPolicies`
    `TargetTrackingScalingPolicyConfiguration`

    Represents a target tracking scaling policy configuration.

    - **DisableScaleIn** *(boolean) --*

      Indicates whether scale in by the target tracking policy is disabled. If the value is true,
      scale in is disabled and the target tracking policy won't remove capacity from the scalable
      resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity
      from the scalable resource. The default value is false.

    - **ScaleInCooldown** *(integer) --*

      The amount of time, in seconds, after a scale in activity completes before another scale in
      activity can start. The cooldown period is used to block subsequent scale in requests until it
      has expired. You should scale in conservatively to protect your application's availability.
      However, if another alarm triggers a scale out policy during the cooldown period after a
      scale-in, application auto scaling scales out your scalable target immediately.

    - **ScaleOutCooldown** *(integer) --*

      The amount of time, in seconds, after a scale out activity completes before another scale out
      activity can start. While the cooldown period is in effect, the capacity that has been added
      by the previous scale out event that initiated the cooldown is calculated as part of the
      desired capacity for the next scale out. You should continuously (but not excessively) scale
      out.

    - **TargetValue** *(float) --*

      The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or
      2e-360 to 2e360 (Base 2).
    """


_ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTypeDef = TypedDict(
    "_ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTypeDef",
    {
        "PolicyName": str,
        "TargetTrackingScalingPolicyConfiguration": ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef,
    },
    total=False,
)


class ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTypeDef(
    _ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTypeDef
):
    """
    Type definition for
    `ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedReadCapacityAutoScalingSettings`
    `ScalingPolicies`

    Represents the properties of the scaling policy.

    - **PolicyName** *(string) --*

      The name of the scaling policy.

    - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

      Represents a target tracking scaling policy configuration.

      - **DisableScaleIn** *(boolean) --*

        Indicates whether scale in by the target tracking policy is disabled. If the value is true,
        scale in is disabled and the target tracking policy won't remove capacity from the scalable
        resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity
        from the scalable resource. The default value is false.

      - **ScaleInCooldown** *(integer) --*

        The amount of time, in seconds, after a scale in activity completes before another scale in
        activity can start. The cooldown period is used to block subsequent scale in requests until
        it has expired. You should scale in conservatively to protect your application's
        availability. However, if another alarm triggers a scale out policy during the cooldown
        period after a scale-in, application auto scaling scales out your scalable target
        immediately.

      - **ScaleOutCooldown** *(integer) --*

        The amount of time, in seconds, after a scale out activity completes before another scale
        out activity can start. While the cooldown period is in effect, the capacity that has been
        added by the previous scale out event that initiated the cooldown is calculated as part of
        the desired capacity for the next scale out. You should continuously (but not excessively)
        scale out.

      - **TargetValue** *(float) --*

        The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or
        2e-360 to 2e360 (Base 2).
    """


_ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedReadCapacityAutoScalingSettingsTypeDef = TypedDict(
    "_ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedReadCapacityAutoScalingSettingsTypeDef",
    {
        "MinimumUnits": int,
        "MaximumUnits": int,
        "AutoScalingDisabled": bool,
        "AutoScalingRoleArn": str,
        "ScalingPolicies": List[
            ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTypeDef
        ],
    },
    total=False,
)


class ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedReadCapacityAutoScalingSettingsTypeDef(
    _ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedReadCapacityAutoScalingSettingsTypeDef
):
    """
    Type definition for `ClientDescribeGlobalTableSettingsResponseReplicaSettings`
    `ReplicaProvisionedReadCapacityAutoScalingSettings`

    Auto scaling settings for a global table replica's read capacity units.

    - **MinimumUnits** *(integer) --*

      The minimum capacity units that a global table or global secondary index should be scaled down
      to.

    - **MaximumUnits** *(integer) --*

      The maximum capacity units that a global table or global secondary index should be scaled up
      to.

    - **AutoScalingDisabled** *(boolean) --*

      Disabled auto scaling for this global table or global secondary index.

    - **AutoScalingRoleArn** *(string) --*

      Role ARN used for configuring the auto scaling policy.

    - **ScalingPolicies** *(list) --*

      Information about the scaling policies.

      - *(dict) --*

        Represents the properties of the scaling policy.

        - **PolicyName** *(string) --*

          The name of the scaling policy.

        - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

          Represents a target tracking scaling policy configuration.

          - **DisableScaleIn** *(boolean) --*

            Indicates whether scale in by the target tracking policy is disabled. If the value is
            true, scale in is disabled and the target tracking policy won't remove capacity from the
            scalable resource. Otherwise, scale in is enabled and the target tracking policy can
            remove capacity from the scalable resource. The default value is false.

          - **ScaleInCooldown** *(integer) --*

            The amount of time, in seconds, after a scale in activity completes before another scale
            in activity can start. The cooldown period is used to block subsequent scale in requests
            until it has expired. You should scale in conservatively to protect your application's
            availability. However, if another alarm triggers a scale out policy during the cooldown
            period after a scale-in, application auto scaling scales out your scalable target
            immediately.

          - **ScaleOutCooldown** *(integer) --*

            The amount of time, in seconds, after a scale out activity completes before another
            scale out activity can start. While the cooldown period is in effect, the capacity that
            has been added by the previous scale out event that initiated the cooldown is calculated
            as part of the desired capacity for the next scale out. You should continuously (but not
            excessively) scale out.

          - **TargetValue** *(float) --*

            The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10)
            or 2e-360 to 2e360 (Base 2).
    """


_ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef = TypedDict(
    "_ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef",
    {"DisableScaleIn": bool, "ScaleInCooldown": int, "ScaleOutCooldown": int, "TargetValue": float},
    total=False,
)


class ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef(
    _ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef
):
    """
    Type definition for
    `ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedWriteCapacityAutoScalingSettingsScalingPolicies`
    `TargetTrackingScalingPolicyConfiguration`

    Represents a target tracking scaling policy configuration.

    - **DisableScaleIn** *(boolean) --*

      Indicates whether scale in by the target tracking policy is disabled. If the value is true,
      scale in is disabled and the target tracking policy won't remove capacity from the scalable
      resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity
      from the scalable resource. The default value is false.

    - **ScaleInCooldown** *(integer) --*

      The amount of time, in seconds, after a scale in activity completes before another scale in
      activity can start. The cooldown period is used to block subsequent scale in requests until it
      has expired. You should scale in conservatively to protect your application's availability.
      However, if another alarm triggers a scale out policy during the cooldown period after a
      scale-in, application auto scaling scales out your scalable target immediately.

    - **ScaleOutCooldown** *(integer) --*

      The amount of time, in seconds, after a scale out activity completes before another scale out
      activity can start. While the cooldown period is in effect, the capacity that has been added
      by the previous scale out event that initiated the cooldown is calculated as part of the
      desired capacity for the next scale out. You should continuously (but not excessively) scale
      out.

    - **TargetValue** *(float) --*

      The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or
      2e-360 to 2e360 (Base 2).
    """


_ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTypeDef = TypedDict(
    "_ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTypeDef",
    {
        "PolicyName": str,
        "TargetTrackingScalingPolicyConfiguration": ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef,
    },
    total=False,
)


class ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTypeDef(
    _ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTypeDef
):
    """
    Type definition for
    `ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedWriteCapacityAutoScalingSettings`
    `ScalingPolicies`

    Represents the properties of the scaling policy.

    - **PolicyName** *(string) --*

      The name of the scaling policy.

    - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

      Represents a target tracking scaling policy configuration.

      - **DisableScaleIn** *(boolean) --*

        Indicates whether scale in by the target tracking policy is disabled. If the value is true,
        scale in is disabled and the target tracking policy won't remove capacity from the scalable
        resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity
        from the scalable resource. The default value is false.

      - **ScaleInCooldown** *(integer) --*

        The amount of time, in seconds, after a scale in activity completes before another scale in
        activity can start. The cooldown period is used to block subsequent scale in requests until
        it has expired. You should scale in conservatively to protect your application's
        availability. However, if another alarm triggers a scale out policy during the cooldown
        period after a scale-in, application auto scaling scales out your scalable target
        immediately.

      - **ScaleOutCooldown** *(integer) --*

        The amount of time, in seconds, after a scale out activity completes before another scale
        out activity can start. While the cooldown period is in effect, the capacity that has been
        added by the previous scale out event that initiated the cooldown is calculated as part of
        the desired capacity for the next scale out. You should continuously (but not excessively)
        scale out.

      - **TargetValue** *(float) --*

        The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or
        2e-360 to 2e360 (Base 2).
    """


_ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedWriteCapacityAutoScalingSettingsTypeDef = TypedDict(
    "_ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedWriteCapacityAutoScalingSettingsTypeDef",
    {
        "MinimumUnits": int,
        "MaximumUnits": int,
        "AutoScalingDisabled": bool,
        "AutoScalingRoleArn": str,
        "ScalingPolicies": List[
            ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTypeDef
        ],
    },
    total=False,
)


class ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedWriteCapacityAutoScalingSettingsTypeDef(
    _ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedWriteCapacityAutoScalingSettingsTypeDef
):
    """
    Type definition for `ClientDescribeGlobalTableSettingsResponseReplicaSettings`
    `ReplicaProvisionedWriteCapacityAutoScalingSettings`

    Auto scaling settings for a global table replica's write capacity units.

    - **MinimumUnits** *(integer) --*

      The minimum capacity units that a global table or global secondary index should be scaled down
      to.

    - **MaximumUnits** *(integer) --*

      The maximum capacity units that a global table or global secondary index should be scaled up
      to.

    - **AutoScalingDisabled** *(boolean) --*

      Disabled auto scaling for this global table or global secondary index.

    - **AutoScalingRoleArn** *(string) --*

      Role ARN used for configuring the auto scaling policy.

    - **ScalingPolicies** *(list) --*

      Information about the scaling policies.

      - *(dict) --*

        Represents the properties of the scaling policy.

        - **PolicyName** *(string) --*

          The name of the scaling policy.

        - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

          Represents a target tracking scaling policy configuration.

          - **DisableScaleIn** *(boolean) --*

            Indicates whether scale in by the target tracking policy is disabled. If the value is
            true, scale in is disabled and the target tracking policy won't remove capacity from the
            scalable resource. Otherwise, scale in is enabled and the target tracking policy can
            remove capacity from the scalable resource. The default value is false.

          - **ScaleInCooldown** *(integer) --*

            The amount of time, in seconds, after a scale in activity completes before another scale
            in activity can start. The cooldown period is used to block subsequent scale in requests
            until it has expired. You should scale in conservatively to protect your application's
            availability. However, if another alarm triggers a scale out policy during the cooldown
            period after a scale-in, application auto scaling scales out your scalable target
            immediately.

          - **ScaleOutCooldown** *(integer) --*

            The amount of time, in seconds, after a scale out activity completes before another
            scale out activity can start. While the cooldown period is in effect, the capacity that
            has been added by the previous scale out event that initiated the cooldown is calculated
            as part of the desired capacity for the next scale out. You should continuously (but not
            excessively) scale out.

          - **TargetValue** *(float) --*

            The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10)
            or 2e-360 to 2e360 (Base 2).
    """


_ClientDescribeGlobalTableSettingsResponseReplicaSettingsTypeDef = TypedDict(
    "_ClientDescribeGlobalTableSettingsResponseReplicaSettingsTypeDef",
    {
        "RegionName": str,
        "ReplicaStatus": str,
        "ReplicaBillingModeSummary": ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaBillingModeSummaryTypeDef,
        "ReplicaProvisionedReadCapacityUnits": int,
        "ReplicaProvisionedReadCapacityAutoScalingSettings": ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedReadCapacityAutoScalingSettingsTypeDef,
        "ReplicaProvisionedWriteCapacityUnits": int,
        "ReplicaProvisionedWriteCapacityAutoScalingSettings": ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedWriteCapacityAutoScalingSettingsTypeDef,
        "ReplicaGlobalSecondaryIndexSettings": List[
            ClientDescribeGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsTypeDef
        ],
    },
    total=False,
)


class ClientDescribeGlobalTableSettingsResponseReplicaSettingsTypeDef(
    _ClientDescribeGlobalTableSettingsResponseReplicaSettingsTypeDef
):
    """
    Type definition for `ClientDescribeGlobalTableSettingsResponse` `ReplicaSettings`

    Represents the properties of a replica.

    - **RegionName** *(string) --*

      The Region name of the replica.

    - **ReplicaStatus** *(string) --*

      The current state of the Region:

      * ``CREATING`` - The Region is being created.

      * ``UPDATING`` - The Region is being updated.

      * ``DELETING`` - The Region is being deleted.

      * ``ACTIVE`` - The Region is ready for use.

    - **ReplicaBillingModeSummary** *(dict) --*

      The read/write capacity mode of the replica.

      - **BillingMode** *(string) --*

        Controls how you are charged for read and write throughput and how you manage capacity. This
        setting can be changed later.

        * ``PROVISIONED`` - Sets the read/write capacity mode to ``PROVISIONED`` . We recommend
        using ``PROVISIONED`` for predictable workloads.

        * ``PAY_PER_REQUEST`` - Sets the read/write capacity mode to ``PAY_PER_REQUEST`` . We
        recommend using ``PAY_PER_REQUEST`` for unpredictable workloads.

      - **LastUpdateToPayPerRequestDateTime** *(datetime) --*

        Represents the time when ``PAY_PER_REQUEST`` was last set as the read/write capacity mode.

    - **ReplicaProvisionedReadCapacityUnits** *(integer) --*

      The maximum number of strongly consistent reads consumed per second before DynamoDB returns a
      ``ThrottlingException`` . For more information, see `Specifying Read and Write Requirements
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
      in the *Amazon DynamoDB Developer Guide* .

    - **ReplicaProvisionedReadCapacityAutoScalingSettings** *(dict) --*

      Auto scaling settings for a global table replica's read capacity units.

      - **MinimumUnits** *(integer) --*

        The minimum capacity units that a global table or global secondary index should be scaled
        down to.

      - **MaximumUnits** *(integer) --*

        The maximum capacity units that a global table or global secondary index should be scaled up
        to.

      - **AutoScalingDisabled** *(boolean) --*

        Disabled auto scaling for this global table or global secondary index.

      - **AutoScalingRoleArn** *(string) --*

        Role ARN used for configuring the auto scaling policy.

      - **ScalingPolicies** *(list) --*

        Information about the scaling policies.

        - *(dict) --*

          Represents the properties of the scaling policy.

          - **PolicyName** *(string) --*

            The name of the scaling policy.

          - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

            Represents a target tracking scaling policy configuration.

            - **DisableScaleIn** *(boolean) --*

              Indicates whether scale in by the target tracking policy is disabled. If the value is
              true, scale in is disabled and the target tracking policy won't remove capacity from
              the scalable resource. Otherwise, scale in is enabled and the target tracking policy
              can remove capacity from the scalable resource. The default value is false.

            - **ScaleInCooldown** *(integer) --*

              The amount of time, in seconds, after a scale in activity completes before another
              scale in activity can start. The cooldown period is used to block subsequent scale in
              requests until it has expired. You should scale in conservatively to protect your
              application's availability. However, if another alarm triggers a scale out policy
              during the cooldown period after a scale-in, application auto scaling scales out your
              scalable target immediately.

            - **ScaleOutCooldown** *(integer) --*

              The amount of time, in seconds, after a scale out activity completes before another
              scale out activity can start. While the cooldown period is in effect, the capacity
              that has been added by the previous scale out event that initiated the cooldown is
              calculated as part of the desired capacity for the next scale out. You should
              continuously (but not excessively) scale out.

            - **TargetValue** *(float) --*

              The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10)
              or 2e-360 to 2e360 (Base 2).

    - **ReplicaProvisionedWriteCapacityUnits** *(integer) --*

      The maximum number of writes consumed per second before DynamoDB returns a
      ``ThrottlingException`` . For more information, see `Specifying Read and Write Requirements
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
      in the *Amazon DynamoDB Developer Guide* .

    - **ReplicaProvisionedWriteCapacityAutoScalingSettings** *(dict) --*

      Auto scaling settings for a global table replica's write capacity units.

      - **MinimumUnits** *(integer) --*

        The minimum capacity units that a global table or global secondary index should be scaled
        down to.

      - **MaximumUnits** *(integer) --*

        The maximum capacity units that a global table or global secondary index should be scaled up
        to.

      - **AutoScalingDisabled** *(boolean) --*

        Disabled auto scaling for this global table or global secondary index.

      - **AutoScalingRoleArn** *(string) --*

        Role ARN used for configuring the auto scaling policy.

      - **ScalingPolicies** *(list) --*

        Information about the scaling policies.

        - *(dict) --*

          Represents the properties of the scaling policy.

          - **PolicyName** *(string) --*

            The name of the scaling policy.

          - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

            Represents a target tracking scaling policy configuration.

            - **DisableScaleIn** *(boolean) --*

              Indicates whether scale in by the target tracking policy is disabled. If the value is
              true, scale in is disabled and the target tracking policy won't remove capacity from
              the scalable resource. Otherwise, scale in is enabled and the target tracking policy
              can remove capacity from the scalable resource. The default value is false.

            - **ScaleInCooldown** *(integer) --*

              The amount of time, in seconds, after a scale in activity completes before another
              scale in activity can start. The cooldown period is used to block subsequent scale in
              requests until it has expired. You should scale in conservatively to protect your
              application's availability. However, if another alarm triggers a scale out policy
              during the cooldown period after a scale-in, application auto scaling scales out your
              scalable target immediately.

            - **ScaleOutCooldown** *(integer) --*

              The amount of time, in seconds, after a scale out activity completes before another
              scale out activity can start. While the cooldown period is in effect, the capacity
              that has been added by the previous scale out event that initiated the cooldown is
              calculated as part of the desired capacity for the next scale out. You should
              continuously (but not excessively) scale out.

            - **TargetValue** *(float) --*

              The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10)
              or 2e-360 to 2e360 (Base 2).

    - **ReplicaGlobalSecondaryIndexSettings** *(list) --*

      Replica global secondary index settings for the global table.

      - *(dict) --*

        Represents the properties of a global secondary index.

        - **IndexName** *(string) --*

          The name of the global secondary index. The name must be unique among all other indexes on
          this table.

        - **IndexStatus** *(string) --*

          The current status of the global secondary index:

          * ``CREATING`` - The global secondary index is being created.

          * ``UPDATING`` - The global secondary index is being updated.

          * ``DELETING`` - The global secondary index is being deleted.

          * ``ACTIVE`` - The global secondary index is ready for use.

        - **ProvisionedReadCapacityUnits** *(integer) --*

          The maximum number of strongly consistent reads consumed per second before DynamoDB
          returns a ``ThrottlingException`` .

        - **ProvisionedReadCapacityAutoScalingSettings** *(dict) --*

          Auto scaling settings for a global secondary index replica's read capacity units.

          - **MinimumUnits** *(integer) --*

            The minimum capacity units that a global table or global secondary index should be
            scaled down to.

          - **MaximumUnits** *(integer) --*

            The maximum capacity units that a global table or global secondary index should be
            scaled up to.

          - **AutoScalingDisabled** *(boolean) --*

            Disabled auto scaling for this global table or global secondary index.

          - **AutoScalingRoleArn** *(string) --*

            Role ARN used for configuring the auto scaling policy.

          - **ScalingPolicies** *(list) --*

            Information about the scaling policies.

            - *(dict) --*

              Represents the properties of the scaling policy.

              - **PolicyName** *(string) --*

                The name of the scaling policy.

              - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

                Represents a target tracking scaling policy configuration.

                - **DisableScaleIn** *(boolean) --*

                  Indicates whether scale in by the target tracking policy is disabled. If the value
                  is true, scale in is disabled and the target tracking policy won't remove capacity
                  from the scalable resource. Otherwise, scale in is enabled and the target tracking
                  policy can remove capacity from the scalable resource. The default value is false.

                - **ScaleInCooldown** *(integer) --*

                  The amount of time, in seconds, after a scale in activity completes before another
                  scale in activity can start. The cooldown period is used to block subsequent scale
                  in requests until it has expired. You should scale in conservatively to protect
                  your application's availability. However, if another alarm triggers a scale out
                  policy during the cooldown period after a scale-in, application auto scaling
                  scales out your scalable target immediately.

                - **ScaleOutCooldown** *(integer) --*

                  The amount of time, in seconds, after a scale out activity completes before
                  another scale out activity can start. While the cooldown period is in effect, the
                  capacity that has been added by the previous scale out event that initiated the
                  cooldown is calculated as part of the desired capacity for the next scale out. You
                  should continuously (but not excessively) scale out.

                - **TargetValue** *(float) --*

                  The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base
                  10) or 2e-360 to 2e360 (Base 2).

        - **ProvisionedWriteCapacityUnits** *(integer) --*

          The maximum number of writes consumed per second before DynamoDB returns a
          ``ThrottlingException`` .

        - **ProvisionedWriteCapacityAutoScalingSettings** *(dict) --*

          Auto scaling settings for a global secondary index replica's write capacity units.

          - **MinimumUnits** *(integer) --*

            The minimum capacity units that a global table or global secondary index should be
            scaled down to.

          - **MaximumUnits** *(integer) --*

            The maximum capacity units that a global table or global secondary index should be
            scaled up to.

          - **AutoScalingDisabled** *(boolean) --*

            Disabled auto scaling for this global table or global secondary index.

          - **AutoScalingRoleArn** *(string) --*

            Role ARN used for configuring the auto scaling policy.

          - **ScalingPolicies** *(list) --*

            Information about the scaling policies.

            - *(dict) --*

              Represents the properties of the scaling policy.

              - **PolicyName** *(string) --*

                The name of the scaling policy.

              - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

                Represents a target tracking scaling policy configuration.

                - **DisableScaleIn** *(boolean) --*

                  Indicates whether scale in by the target tracking policy is disabled. If the value
                  is true, scale in is disabled and the target tracking policy won't remove capacity
                  from the scalable resource. Otherwise, scale in is enabled and the target tracking
                  policy can remove capacity from the scalable resource. The default value is false.

                - **ScaleInCooldown** *(integer) --*

                  The amount of time, in seconds, after a scale in activity completes before another
                  scale in activity can start. The cooldown period is used to block subsequent scale
                  in requests until it has expired. You should scale in conservatively to protect
                  your application's availability. However, if another alarm triggers a scale out
                  policy during the cooldown period after a scale-in, application auto scaling
                  scales out your scalable target immediately.

                - **ScaleOutCooldown** *(integer) --*

                  The amount of time, in seconds, after a scale out activity completes before
                  another scale out activity can start. While the cooldown period is in effect, the
                  capacity that has been added by the previous scale out event that initiated the
                  cooldown is calculated as part of the desired capacity for the next scale out. You
                  should continuously (but not excessively) scale out.

                - **TargetValue** *(float) --*

                  The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base
                  10) or 2e-360 to 2e360 (Base 2).
    """


_ClientDescribeGlobalTableSettingsResponseTypeDef = TypedDict(
    "_ClientDescribeGlobalTableSettingsResponseTypeDef",
    {
        "GlobalTableName": str,
        "ReplicaSettings": List[ClientDescribeGlobalTableSettingsResponseReplicaSettingsTypeDef],
    },
    total=False,
)


class ClientDescribeGlobalTableSettingsResponseTypeDef(
    _ClientDescribeGlobalTableSettingsResponseTypeDef
):
    """
    Type definition for `ClientDescribeGlobalTableSettings` `Response`

    - **GlobalTableName** *(string) --*

      The name of the global table.

    - **ReplicaSettings** *(list) --*

      The Region-specific settings for the global table.

      - *(dict) --*

        Represents the properties of a replica.

        - **RegionName** *(string) --*

          The Region name of the replica.

        - **ReplicaStatus** *(string) --*

          The current state of the Region:

          * ``CREATING`` - The Region is being created.

          * ``UPDATING`` - The Region is being updated.

          * ``DELETING`` - The Region is being deleted.

          * ``ACTIVE`` - The Region is ready for use.

        - **ReplicaBillingModeSummary** *(dict) --*

          The read/write capacity mode of the replica.

          - **BillingMode** *(string) --*

            Controls how you are charged for read and write throughput and how you manage capacity.
            This setting can be changed later.

            * ``PROVISIONED`` - Sets the read/write capacity mode to ``PROVISIONED`` . We recommend
            using ``PROVISIONED`` for predictable workloads.

            * ``PAY_PER_REQUEST`` - Sets the read/write capacity mode to ``PAY_PER_REQUEST`` . We
            recommend using ``PAY_PER_REQUEST`` for unpredictable workloads.

          - **LastUpdateToPayPerRequestDateTime** *(datetime) --*

            Represents the time when ``PAY_PER_REQUEST`` was last set as the read/write capacity
            mode.

        - **ReplicaProvisionedReadCapacityUnits** *(integer) --*

          The maximum number of strongly consistent reads consumed per second before DynamoDB
          returns a ``ThrottlingException`` . For more information, see `Specifying Read and Write
          Requirements
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
          in the *Amazon DynamoDB Developer Guide* .

        - **ReplicaProvisionedReadCapacityAutoScalingSettings** *(dict) --*

          Auto scaling settings for a global table replica's read capacity units.

          - **MinimumUnits** *(integer) --*

            The minimum capacity units that a global table or global secondary index should be
            scaled down to.

          - **MaximumUnits** *(integer) --*

            The maximum capacity units that a global table or global secondary index should be
            scaled up to.

          - **AutoScalingDisabled** *(boolean) --*

            Disabled auto scaling for this global table or global secondary index.

          - **AutoScalingRoleArn** *(string) --*

            Role ARN used for configuring the auto scaling policy.

          - **ScalingPolicies** *(list) --*

            Information about the scaling policies.

            - *(dict) --*

              Represents the properties of the scaling policy.

              - **PolicyName** *(string) --*

                The name of the scaling policy.

              - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

                Represents a target tracking scaling policy configuration.

                - **DisableScaleIn** *(boolean) --*

                  Indicates whether scale in by the target tracking policy is disabled. If the value
                  is true, scale in is disabled and the target tracking policy won't remove capacity
                  from the scalable resource. Otherwise, scale in is enabled and the target tracking
                  policy can remove capacity from the scalable resource. The default value is false.

                - **ScaleInCooldown** *(integer) --*

                  The amount of time, in seconds, after a scale in activity completes before another
                  scale in activity can start. The cooldown period is used to block subsequent scale
                  in requests until it has expired. You should scale in conservatively to protect
                  your application's availability. However, if another alarm triggers a scale out
                  policy during the cooldown period after a scale-in, application auto scaling
                  scales out your scalable target immediately.

                - **ScaleOutCooldown** *(integer) --*

                  The amount of time, in seconds, after a scale out activity completes before
                  another scale out activity can start. While the cooldown period is in effect, the
                  capacity that has been added by the previous scale out event that initiated the
                  cooldown is calculated as part of the desired capacity for the next scale out. You
                  should continuously (but not excessively) scale out.

                - **TargetValue** *(float) --*

                  The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base
                  10) or 2e-360 to 2e360 (Base 2).

        - **ReplicaProvisionedWriteCapacityUnits** *(integer) --*

          The maximum number of writes consumed per second before DynamoDB returns a
          ``ThrottlingException`` . For more information, see `Specifying Read and Write
          Requirements
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
          in the *Amazon DynamoDB Developer Guide* .

        - **ReplicaProvisionedWriteCapacityAutoScalingSettings** *(dict) --*

          Auto scaling settings for a global table replica's write capacity units.

          - **MinimumUnits** *(integer) --*

            The minimum capacity units that a global table or global secondary index should be
            scaled down to.

          - **MaximumUnits** *(integer) --*

            The maximum capacity units that a global table or global secondary index should be
            scaled up to.

          - **AutoScalingDisabled** *(boolean) --*

            Disabled auto scaling for this global table or global secondary index.

          - **AutoScalingRoleArn** *(string) --*

            Role ARN used for configuring the auto scaling policy.

          - **ScalingPolicies** *(list) --*

            Information about the scaling policies.

            - *(dict) --*

              Represents the properties of the scaling policy.

              - **PolicyName** *(string) --*

                The name of the scaling policy.

              - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

                Represents a target tracking scaling policy configuration.

                - **DisableScaleIn** *(boolean) --*

                  Indicates whether scale in by the target tracking policy is disabled. If the value
                  is true, scale in is disabled and the target tracking policy won't remove capacity
                  from the scalable resource. Otherwise, scale in is enabled and the target tracking
                  policy can remove capacity from the scalable resource. The default value is false.

                - **ScaleInCooldown** *(integer) --*

                  The amount of time, in seconds, after a scale in activity completes before another
                  scale in activity can start. The cooldown period is used to block subsequent scale
                  in requests until it has expired. You should scale in conservatively to protect
                  your application's availability. However, if another alarm triggers a scale out
                  policy during the cooldown period after a scale-in, application auto scaling
                  scales out your scalable target immediately.

                - **ScaleOutCooldown** *(integer) --*

                  The amount of time, in seconds, after a scale out activity completes before
                  another scale out activity can start. While the cooldown period is in effect, the
                  capacity that has been added by the previous scale out event that initiated the
                  cooldown is calculated as part of the desired capacity for the next scale out. You
                  should continuously (but not excessively) scale out.

                - **TargetValue** *(float) --*

                  The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base
                  10) or 2e-360 to 2e360 (Base 2).

        - **ReplicaGlobalSecondaryIndexSettings** *(list) --*

          Replica global secondary index settings for the global table.

          - *(dict) --*

            Represents the properties of a global secondary index.

            - **IndexName** *(string) --*

              The name of the global secondary index. The name must be unique among all other
              indexes on this table.

            - **IndexStatus** *(string) --*

              The current status of the global secondary index:

              * ``CREATING`` - The global secondary index is being created.

              * ``UPDATING`` - The global secondary index is being updated.

              * ``DELETING`` - The global secondary index is being deleted.

              * ``ACTIVE`` - The global secondary index is ready for use.

            - **ProvisionedReadCapacityUnits** *(integer) --*

              The maximum number of strongly consistent reads consumed per second before DynamoDB
              returns a ``ThrottlingException`` .

            - **ProvisionedReadCapacityAutoScalingSettings** *(dict) --*

              Auto scaling settings for a global secondary index replica's read capacity units.

              - **MinimumUnits** *(integer) --*

                The minimum capacity units that a global table or global secondary index should be
                scaled down to.

              - **MaximumUnits** *(integer) --*

                The maximum capacity units that a global table or global secondary index should be
                scaled up to.

              - **AutoScalingDisabled** *(boolean) --*

                Disabled auto scaling for this global table or global secondary index.

              - **AutoScalingRoleArn** *(string) --*

                Role ARN used for configuring the auto scaling policy.

              - **ScalingPolicies** *(list) --*

                Information about the scaling policies.

                - *(dict) --*

                  Represents the properties of the scaling policy.

                  - **PolicyName** *(string) --*

                    The name of the scaling policy.

                  - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

                    Represents a target tracking scaling policy configuration.

                    - **DisableScaleIn** *(boolean) --*

                      Indicates whether scale in by the target tracking policy is disabled. If the
                      value is true, scale in is disabled and the target tracking policy won't
                      remove capacity from the scalable resource. Otherwise, scale in is enabled and
                      the target tracking policy can remove capacity from the scalable resource. The
                      default value is false.

                    - **ScaleInCooldown** *(integer) --*

                      The amount of time, in seconds, after a scale in activity completes before
                      another scale in activity can start. The cooldown period is used to block
                      subsequent scale in requests until it has expired. You should scale in
                      conservatively to protect your application's availability. However, if another
                      alarm triggers a scale out policy during the cooldown period after a scale-in,
                      application auto scaling scales out your scalable target immediately.

                    - **ScaleOutCooldown** *(integer) --*

                      The amount of time, in seconds, after a scale out activity completes before
                      another scale out activity can start. While the cooldown period is in effect,
                      the capacity that has been added by the previous scale out event that
                      initiated the cooldown is calculated as part of the desired capacity for the
                      next scale out. You should continuously (but not excessively) scale out.

                    - **TargetValue** *(float) --*

                      The target value for the metric. The range is 8.515920e-109 to 1.174271e+108
                      (Base 10) or 2e-360 to 2e360 (Base 2).

            - **ProvisionedWriteCapacityUnits** *(integer) --*

              The maximum number of writes consumed per second before DynamoDB returns a
              ``ThrottlingException`` .

            - **ProvisionedWriteCapacityAutoScalingSettings** *(dict) --*

              Auto scaling settings for a global secondary index replica's write capacity units.

              - **MinimumUnits** *(integer) --*

                The minimum capacity units that a global table or global secondary index should be
                scaled down to.

              - **MaximumUnits** *(integer) --*

                The maximum capacity units that a global table or global secondary index should be
                scaled up to.

              - **AutoScalingDisabled** *(boolean) --*

                Disabled auto scaling for this global table or global secondary index.

              - **AutoScalingRoleArn** *(string) --*

                Role ARN used for configuring the auto scaling policy.

              - **ScalingPolicies** *(list) --*

                Information about the scaling policies.

                - *(dict) --*

                  Represents the properties of the scaling policy.

                  - **PolicyName** *(string) --*

                    The name of the scaling policy.

                  - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

                    Represents a target tracking scaling policy configuration.

                    - **DisableScaleIn** *(boolean) --*

                      Indicates whether scale in by the target tracking policy is disabled. If the
                      value is true, scale in is disabled and the target tracking policy won't
                      remove capacity from the scalable resource. Otherwise, scale in is enabled and
                      the target tracking policy can remove capacity from the scalable resource. The
                      default value is false.

                    - **ScaleInCooldown** *(integer) --*

                      The amount of time, in seconds, after a scale in activity completes before
                      another scale in activity can start. The cooldown period is used to block
                      subsequent scale in requests until it has expired. You should scale in
                      conservatively to protect your application's availability. However, if another
                      alarm triggers a scale out policy during the cooldown period after a scale-in,
                      application auto scaling scales out your scalable target immediately.

                    - **ScaleOutCooldown** *(integer) --*

                      The amount of time, in seconds, after a scale out activity completes before
                      another scale out activity can start. While the cooldown period is in effect,
                      the capacity that has been added by the previous scale out event that
                      initiated the cooldown is calculated as part of the desired capacity for the
                      next scale out. You should continuously (but not excessively) scale out.

                    - **TargetValue** *(float) --*

                      The target value for the metric. The range is 8.515920e-109 to 1.174271e+108
                      (Base 10) or 2e-360 to 2e360 (Base 2).
    """


_ClientDescribeLimitsResponseTypeDef = TypedDict(
    "_ClientDescribeLimitsResponseTypeDef",
    {
        "AccountMaxReadCapacityUnits": int,
        "AccountMaxWriteCapacityUnits": int,
        "TableMaxReadCapacityUnits": int,
        "TableMaxWriteCapacityUnits": int,
    },
    total=False,
)


class ClientDescribeLimitsResponseTypeDef(_ClientDescribeLimitsResponseTypeDef):
    """
    Type definition for `ClientDescribeLimits` `Response`

    Represents the output of a ``DescribeLimits`` operation.

    - **AccountMaxReadCapacityUnits** *(integer) --*

      The maximum total read capacity units that your account allows you to provision across all of
      your tables in this Region.

    - **AccountMaxWriteCapacityUnits** *(integer) --*

      The maximum total write capacity units that your account allows you to provision across all of
      your tables in this Region.

    - **TableMaxReadCapacityUnits** *(integer) --*

      The maximum read capacity units that your account allows you to provision for a new table that
      you are creating in this Region, including the read capacity units provisioned for its global
      secondary indexes (GSIs).

    - **TableMaxWriteCapacityUnits** *(integer) --*

      The maximum write capacity units that your account allows you to provision for a new table
      that you are creating in this Region, including the write capacity units provisioned for its
      global secondary indexes (GSIs).
    """


_ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef = TypedDict(
    "_ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef",
    {"DisableScaleIn": bool, "ScaleInCooldown": int, "ScaleOutCooldown": int, "TargetValue": float},
    total=False,
)


class ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef(
    _ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef
):
    """
    Type definition for
    `ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedReadCapacityAutoScalingSettingsScalingPolicies`
    `TargetTrackingScalingPolicyConfiguration`

    Represents a target tracking scaling policy configuration.

    - **DisableScaleIn** *(boolean) --*

      Indicates whether scale in by the target tracking policy is disabled. If the value is true,
      scale in is disabled and the target tracking policy won't remove capacity from the scalable
      resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity
      from the scalable resource. The default value is false.

    - **ScaleInCooldown** *(integer) --*

      The amount of time, in seconds, after a scale in activity completes before another scale in
      activity can start. The cooldown period is used to block subsequent scale in requests until it
      has expired. You should scale in conservatively to protect your application's availability.
      However, if another alarm triggers a scale out policy during the cooldown period after a
      scale-in, application auto scaling scales out your scalable target immediately.

    - **ScaleOutCooldown** *(integer) --*

      The amount of time, in seconds, after a scale out activity completes before another scale out
      activity can start. While the cooldown period is in effect, the capacity that has been added
      by the previous scale out event that initiated the cooldown is calculated as part of the
      desired capacity for the next scale out. You should continuously (but not excessively) scale
      out.

    - **TargetValue** *(float) --*

      The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or
      2e-360 to 2e360 (Base 2).
    """


_ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTypeDef = TypedDict(
    "_ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTypeDef",
    {
        "PolicyName": str,
        "TargetTrackingScalingPolicyConfiguration": ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef,
    },
    total=False,
)


class ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTypeDef(
    _ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTypeDef
):
    """
    Type definition for
    `ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedReadCapacityAutoScalingSettings`
    `ScalingPolicies`

    Represents the properties of the scaling policy.

    - **PolicyName** *(string) --*

      The name of the scaling policy.

    - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

      Represents a target tracking scaling policy configuration.

      - **DisableScaleIn** *(boolean) --*

        Indicates whether scale in by the target tracking policy is disabled. If the value is true,
        scale in is disabled and the target tracking policy won't remove capacity from the scalable
        resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity
        from the scalable resource. The default value is false.

      - **ScaleInCooldown** *(integer) --*

        The amount of time, in seconds, after a scale in activity completes before another scale in
        activity can start. The cooldown period is used to block subsequent scale in requests until
        it has expired. You should scale in conservatively to protect your application's
        availability. However, if another alarm triggers a scale out policy during the cooldown
        period after a scale-in, application auto scaling scales out your scalable target
        immediately.

      - **ScaleOutCooldown** *(integer) --*

        The amount of time, in seconds, after a scale out activity completes before another scale
        out activity can start. While the cooldown period is in effect, the capacity that has been
        added by the previous scale out event that initiated the cooldown is calculated as part of
        the desired capacity for the next scale out. You should continuously (but not excessively)
        scale out.

      - **TargetValue** *(float) --*

        The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or
        2e-360 to 2e360 (Base 2).
    """


_ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedReadCapacityAutoScalingSettingsTypeDef = TypedDict(
    "_ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedReadCapacityAutoScalingSettingsTypeDef",
    {
        "MinimumUnits": int,
        "MaximumUnits": int,
        "AutoScalingDisabled": bool,
        "AutoScalingRoleArn": str,
        "ScalingPolicies": List[
            ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTypeDef
        ],
    },
    total=False,
)


class ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedReadCapacityAutoScalingSettingsTypeDef(
    _ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedReadCapacityAutoScalingSettingsTypeDef
):
    """
    Type definition for
    `ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexes`
    `ProvisionedReadCapacityAutoScalingSettings`

    Represents the auto scaling settings for a global table or global secondary index.

    - **MinimumUnits** *(integer) --*

      The minimum capacity units that a global table or global secondary index should be scaled down
      to.

    - **MaximumUnits** *(integer) --*

      The maximum capacity units that a global table or global secondary index should be scaled up
      to.

    - **AutoScalingDisabled** *(boolean) --*

      Disabled auto scaling for this global table or global secondary index.

    - **AutoScalingRoleArn** *(string) --*

      Role ARN used for configuring the auto scaling policy.

    - **ScalingPolicies** *(list) --*

      Information about the scaling policies.

      - *(dict) --*

        Represents the properties of the scaling policy.

        - **PolicyName** *(string) --*

          The name of the scaling policy.

        - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

          Represents a target tracking scaling policy configuration.

          - **DisableScaleIn** *(boolean) --*

            Indicates whether scale in by the target tracking policy is disabled. If the value is
            true, scale in is disabled and the target tracking policy won't remove capacity from the
            scalable resource. Otherwise, scale in is enabled and the target tracking policy can
            remove capacity from the scalable resource. The default value is false.

          - **ScaleInCooldown** *(integer) --*

            The amount of time, in seconds, after a scale in activity completes before another scale
            in activity can start. The cooldown period is used to block subsequent scale in requests
            until it has expired. You should scale in conservatively to protect your application's
            availability. However, if another alarm triggers a scale out policy during the cooldown
            period after a scale-in, application auto scaling scales out your scalable target
            immediately.

          - **ScaleOutCooldown** *(integer) --*

            The amount of time, in seconds, after a scale out activity completes before another
            scale out activity can start. While the cooldown period is in effect, the capacity that
            has been added by the previous scale out event that initiated the cooldown is calculated
            as part of the desired capacity for the next scale out. You should continuously (but not
            excessively) scale out.

          - **TargetValue** *(float) --*

            The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10)
            or 2e-360 to 2e360 (Base 2).
    """


_ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef = TypedDict(
    "_ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef",
    {"DisableScaleIn": bool, "ScaleInCooldown": int, "ScaleOutCooldown": int, "TargetValue": float},
    total=False,
)


class ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef(
    _ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef
):
    """
    Type definition for
    `ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedWriteCapacityAutoScalingSettingsScalingPolicies`
    `TargetTrackingScalingPolicyConfiguration`

    Represents a target tracking scaling policy configuration.

    - **DisableScaleIn** *(boolean) --*

      Indicates whether scale in by the target tracking policy is disabled. If the value is true,
      scale in is disabled and the target tracking policy won't remove capacity from the scalable
      resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity
      from the scalable resource. The default value is false.

    - **ScaleInCooldown** *(integer) --*

      The amount of time, in seconds, after a scale in activity completes before another scale in
      activity can start. The cooldown period is used to block subsequent scale in requests until it
      has expired. You should scale in conservatively to protect your application's availability.
      However, if another alarm triggers a scale out policy during the cooldown period after a
      scale-in, application auto scaling scales out your scalable target immediately.

    - **ScaleOutCooldown** *(integer) --*

      The amount of time, in seconds, after a scale out activity completes before another scale out
      activity can start. While the cooldown period is in effect, the capacity that has been added
      by the previous scale out event that initiated the cooldown is calculated as part of the
      desired capacity for the next scale out. You should continuously (but not excessively) scale
      out.

    - **TargetValue** *(float) --*

      The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or
      2e-360 to 2e360 (Base 2).
    """


_ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTypeDef = TypedDict(
    "_ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTypeDef",
    {
        "PolicyName": str,
        "TargetTrackingScalingPolicyConfiguration": ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef,
    },
    total=False,
)


class ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTypeDef(
    _ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTypeDef
):
    """
    Type definition for
    `ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedWriteCapacityAutoScalingSettings`
    `ScalingPolicies`

    Represents the properties of the scaling policy.

    - **PolicyName** *(string) --*

      The name of the scaling policy.

    - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

      Represents a target tracking scaling policy configuration.

      - **DisableScaleIn** *(boolean) --*

        Indicates whether scale in by the target tracking policy is disabled. If the value is true,
        scale in is disabled and the target tracking policy won't remove capacity from the scalable
        resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity
        from the scalable resource. The default value is false.

      - **ScaleInCooldown** *(integer) --*

        The amount of time, in seconds, after a scale in activity completes before another scale in
        activity can start. The cooldown period is used to block subsequent scale in requests until
        it has expired. You should scale in conservatively to protect your application's
        availability. However, if another alarm triggers a scale out policy during the cooldown
        period after a scale-in, application auto scaling scales out your scalable target
        immediately.

      - **ScaleOutCooldown** *(integer) --*

        The amount of time, in seconds, after a scale out activity completes before another scale
        out activity can start. While the cooldown period is in effect, the capacity that has been
        added by the previous scale out event that initiated the cooldown is calculated as part of
        the desired capacity for the next scale out. You should continuously (but not excessively)
        scale out.

      - **TargetValue** *(float) --*

        The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or
        2e-360 to 2e360 (Base 2).
    """


_ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedWriteCapacityAutoScalingSettingsTypeDef = TypedDict(
    "_ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedWriteCapacityAutoScalingSettingsTypeDef",
    {
        "MinimumUnits": int,
        "MaximumUnits": int,
        "AutoScalingDisabled": bool,
        "AutoScalingRoleArn": str,
        "ScalingPolicies": List[
            ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTypeDef
        ],
    },
    total=False,
)


class ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedWriteCapacityAutoScalingSettingsTypeDef(
    _ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedWriteCapacityAutoScalingSettingsTypeDef
):
    """
    Type definition for
    `ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexes`
    `ProvisionedWriteCapacityAutoScalingSettings`

    Represents the auto scaling settings for a global table or global secondary index.

    - **MinimumUnits** *(integer) --*

      The minimum capacity units that a global table or global secondary index should be scaled down
      to.

    - **MaximumUnits** *(integer) --*

      The maximum capacity units that a global table or global secondary index should be scaled up
      to.

    - **AutoScalingDisabled** *(boolean) --*

      Disabled auto scaling for this global table or global secondary index.

    - **AutoScalingRoleArn** *(string) --*

      Role ARN used for configuring the auto scaling policy.

    - **ScalingPolicies** *(list) --*

      Information about the scaling policies.

      - *(dict) --*

        Represents the properties of the scaling policy.

        - **PolicyName** *(string) --*

          The name of the scaling policy.

        - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

          Represents a target tracking scaling policy configuration.

          - **DisableScaleIn** *(boolean) --*

            Indicates whether scale in by the target tracking policy is disabled. If the value is
            true, scale in is disabled and the target tracking policy won't remove capacity from the
            scalable resource. Otherwise, scale in is enabled and the target tracking policy can
            remove capacity from the scalable resource. The default value is false.

          - **ScaleInCooldown** *(integer) --*

            The amount of time, in seconds, after a scale in activity completes before another scale
            in activity can start. The cooldown period is used to block subsequent scale in requests
            until it has expired. You should scale in conservatively to protect your application's
            availability. However, if another alarm triggers a scale out policy during the cooldown
            period after a scale-in, application auto scaling scales out your scalable target
            immediately.

          - **ScaleOutCooldown** *(integer) --*

            The amount of time, in seconds, after a scale out activity completes before another
            scale out activity can start. While the cooldown period is in effect, the capacity that
            has been added by the previous scale out event that initiated the cooldown is calculated
            as part of the desired capacity for the next scale out. You should continuously (but not
            excessively) scale out.

          - **TargetValue** *(float) --*

            The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10)
            or 2e-360 to 2e360 (Base 2).
    """


_ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesTypeDef = TypedDict(
    "_ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesTypeDef",
    {
        "IndexName": str,
        "IndexStatus": str,
        "ProvisionedReadCapacityAutoScalingSettings": ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedReadCapacityAutoScalingSettingsTypeDef,
        "ProvisionedWriteCapacityAutoScalingSettings": ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedWriteCapacityAutoScalingSettingsTypeDef,
    },
    total=False,
)


class ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesTypeDef(
    _ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesTypeDef
):
    """
    Type definition for
    `ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicas`
    `GlobalSecondaryIndexes`

    Represents the auto scaling configuration for a replica global secondary index.

    - **IndexName** *(string) --*

      The name of the global secondary index.

    - **IndexStatus** *(string) --*

      The current state of the replica global secondary index:

      * ``CREATING`` - The index is being created.

      * ``UPDATING`` - The index is being updated.

      * ``DELETING`` - The index is being deleted.

      * ``ACTIVE`` - The index is ready for use.

    - **ProvisionedReadCapacityAutoScalingSettings** *(dict) --*

      Represents the auto scaling settings for a global table or global secondary index.

      - **MinimumUnits** *(integer) --*

        The minimum capacity units that a global table or global secondary index should be scaled
        down to.

      - **MaximumUnits** *(integer) --*

        The maximum capacity units that a global table or global secondary index should be scaled up
        to.

      - **AutoScalingDisabled** *(boolean) --*

        Disabled auto scaling for this global table or global secondary index.

      - **AutoScalingRoleArn** *(string) --*

        Role ARN used for configuring the auto scaling policy.

      - **ScalingPolicies** *(list) --*

        Information about the scaling policies.

        - *(dict) --*

          Represents the properties of the scaling policy.

          - **PolicyName** *(string) --*

            The name of the scaling policy.

          - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

            Represents a target tracking scaling policy configuration.

            - **DisableScaleIn** *(boolean) --*

              Indicates whether scale in by the target tracking policy is disabled. If the value is
              true, scale in is disabled and the target tracking policy won't remove capacity from
              the scalable resource. Otherwise, scale in is enabled and the target tracking policy
              can remove capacity from the scalable resource. The default value is false.

            - **ScaleInCooldown** *(integer) --*

              The amount of time, in seconds, after a scale in activity completes before another
              scale in activity can start. The cooldown period is used to block subsequent scale in
              requests until it has expired. You should scale in conservatively to protect your
              application's availability. However, if another alarm triggers a scale out policy
              during the cooldown period after a scale-in, application auto scaling scales out your
              scalable target immediately.

            - **ScaleOutCooldown** *(integer) --*

              The amount of time, in seconds, after a scale out activity completes before another
              scale out activity can start. While the cooldown period is in effect, the capacity
              that has been added by the previous scale out event that initiated the cooldown is
              calculated as part of the desired capacity for the next scale out. You should
              continuously (but not excessively) scale out.

            - **TargetValue** *(float) --*

              The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10)
              or 2e-360 to 2e360 (Base 2).

    - **ProvisionedWriteCapacityAutoScalingSettings** *(dict) --*

      Represents the auto scaling settings for a global table or global secondary index.

      - **MinimumUnits** *(integer) --*

        The minimum capacity units that a global table or global secondary index should be scaled
        down to.

      - **MaximumUnits** *(integer) --*

        The maximum capacity units that a global table or global secondary index should be scaled up
        to.

      - **AutoScalingDisabled** *(boolean) --*

        Disabled auto scaling for this global table or global secondary index.

      - **AutoScalingRoleArn** *(string) --*

        Role ARN used for configuring the auto scaling policy.

      - **ScalingPolicies** *(list) --*

        Information about the scaling policies.

        - *(dict) --*

          Represents the properties of the scaling policy.

          - **PolicyName** *(string) --*

            The name of the scaling policy.

          - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

            Represents a target tracking scaling policy configuration.

            - **DisableScaleIn** *(boolean) --*

              Indicates whether scale in by the target tracking policy is disabled. If the value is
              true, scale in is disabled and the target tracking policy won't remove capacity from
              the scalable resource. Otherwise, scale in is enabled and the target tracking policy
              can remove capacity from the scalable resource. The default value is false.

            - **ScaleInCooldown** *(integer) --*

              The amount of time, in seconds, after a scale in activity completes before another
              scale in activity can start. The cooldown period is used to block subsequent scale in
              requests until it has expired. You should scale in conservatively to protect your
              application's availability. However, if another alarm triggers a scale out policy
              during the cooldown period after a scale-in, application auto scaling scales out your
              scalable target immediately.

            - **ScaleOutCooldown** *(integer) --*

              The amount of time, in seconds, after a scale out activity completes before another
              scale out activity can start. While the cooldown period is in effect, the capacity
              that has been added by the previous scale out event that initiated the cooldown is
              calculated as part of the desired capacity for the next scale out. You should
              continuously (but not excessively) scale out.

            - **TargetValue** *(float) --*

              The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10)
              or 2e-360 to 2e360 (Base 2).
    """


_ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef = TypedDict(
    "_ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef",
    {"DisableScaleIn": bool, "ScaleInCooldown": int, "ScaleOutCooldown": int, "TargetValue": float},
    total=False,
)


class ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef(
    _ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef
):
    """
    Type definition for
    `ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedReadCapacityAutoScalingSettingsScalingPolicies`
    `TargetTrackingScalingPolicyConfiguration`

    Represents a target tracking scaling policy configuration.

    - **DisableScaleIn** *(boolean) --*

      Indicates whether scale in by the target tracking policy is disabled. If the value is true,
      scale in is disabled and the target tracking policy won't remove capacity from the scalable
      resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity
      from the scalable resource. The default value is false.

    - **ScaleInCooldown** *(integer) --*

      The amount of time, in seconds, after a scale in activity completes before another scale in
      activity can start. The cooldown period is used to block subsequent scale in requests until it
      has expired. You should scale in conservatively to protect your application's availability.
      However, if another alarm triggers a scale out policy during the cooldown period after a
      scale-in, application auto scaling scales out your scalable target immediately.

    - **ScaleOutCooldown** *(integer) --*

      The amount of time, in seconds, after a scale out activity completes before another scale out
      activity can start. While the cooldown period is in effect, the capacity that has been added
      by the previous scale out event that initiated the cooldown is calculated as part of the
      desired capacity for the next scale out. You should continuously (but not excessively) scale
      out.

    - **TargetValue** *(float) --*

      The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or
      2e-360 to 2e360 (Base 2).
    """


_ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTypeDef = TypedDict(
    "_ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTypeDef",
    {
        "PolicyName": str,
        "TargetTrackingScalingPolicyConfiguration": ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef,
    },
    total=False,
)


class ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTypeDef(
    _ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTypeDef
):
    """
    Type definition for
    `ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedReadCapacityAutoScalingSettings`
    `ScalingPolicies`

    Represents the properties of the scaling policy.

    - **PolicyName** *(string) --*

      The name of the scaling policy.

    - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

      Represents a target tracking scaling policy configuration.

      - **DisableScaleIn** *(boolean) --*

        Indicates whether scale in by the target tracking policy is disabled. If the value is true,
        scale in is disabled and the target tracking policy won't remove capacity from the scalable
        resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity
        from the scalable resource. The default value is false.

      - **ScaleInCooldown** *(integer) --*

        The amount of time, in seconds, after a scale in activity completes before another scale in
        activity can start. The cooldown period is used to block subsequent scale in requests until
        it has expired. You should scale in conservatively to protect your application's
        availability. However, if another alarm triggers a scale out policy during the cooldown
        period after a scale-in, application auto scaling scales out your scalable target
        immediately.

      - **ScaleOutCooldown** *(integer) --*

        The amount of time, in seconds, after a scale out activity completes before another scale
        out activity can start. While the cooldown period is in effect, the capacity that has been
        added by the previous scale out event that initiated the cooldown is calculated as part of
        the desired capacity for the next scale out. You should continuously (but not excessively)
        scale out.

      - **TargetValue** *(float) --*

        The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or
        2e-360 to 2e360 (Base 2).
    """


_ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedReadCapacityAutoScalingSettingsTypeDef = TypedDict(
    "_ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedReadCapacityAutoScalingSettingsTypeDef",
    {
        "MinimumUnits": int,
        "MaximumUnits": int,
        "AutoScalingDisabled": bool,
        "AutoScalingRoleArn": str,
        "ScalingPolicies": List[
            ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTypeDef
        ],
    },
    total=False,
)


class ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedReadCapacityAutoScalingSettingsTypeDef(
    _ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedReadCapacityAutoScalingSettingsTypeDef
):
    """
    Type definition for
    `ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicas`
    `ReplicaProvisionedReadCapacityAutoScalingSettings`

    Represents the auto scaling settings for a global table or global secondary index.

    - **MinimumUnits** *(integer) --*

      The minimum capacity units that a global table or global secondary index should be scaled down
      to.

    - **MaximumUnits** *(integer) --*

      The maximum capacity units that a global table or global secondary index should be scaled up
      to.

    - **AutoScalingDisabled** *(boolean) --*

      Disabled auto scaling for this global table or global secondary index.

    - **AutoScalingRoleArn** *(string) --*

      Role ARN used for configuring the auto scaling policy.

    - **ScalingPolicies** *(list) --*

      Information about the scaling policies.

      - *(dict) --*

        Represents the properties of the scaling policy.

        - **PolicyName** *(string) --*

          The name of the scaling policy.

        - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

          Represents a target tracking scaling policy configuration.

          - **DisableScaleIn** *(boolean) --*

            Indicates whether scale in by the target tracking policy is disabled. If the value is
            true, scale in is disabled and the target tracking policy won't remove capacity from the
            scalable resource. Otherwise, scale in is enabled and the target tracking policy can
            remove capacity from the scalable resource. The default value is false.

          - **ScaleInCooldown** *(integer) --*

            The amount of time, in seconds, after a scale in activity completes before another scale
            in activity can start. The cooldown period is used to block subsequent scale in requests
            until it has expired. You should scale in conservatively to protect your application's
            availability. However, if another alarm triggers a scale out policy during the cooldown
            period after a scale-in, application auto scaling scales out your scalable target
            immediately.

          - **ScaleOutCooldown** *(integer) --*

            The amount of time, in seconds, after a scale out activity completes before another
            scale out activity can start. While the cooldown period is in effect, the capacity that
            has been added by the previous scale out event that initiated the cooldown is calculated
            as part of the desired capacity for the next scale out. You should continuously (but not
            excessively) scale out.

          - **TargetValue** *(float) --*

            The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10)
            or 2e-360 to 2e360 (Base 2).
    """


_ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef = TypedDict(
    "_ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef",
    {"DisableScaleIn": bool, "ScaleInCooldown": int, "ScaleOutCooldown": int, "TargetValue": float},
    total=False,
)


class ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef(
    _ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef
):
    """
    Type definition for
    `ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedWriteCapacityAutoScalingSettingsScalingPolicies`
    `TargetTrackingScalingPolicyConfiguration`

    Represents a target tracking scaling policy configuration.

    - **DisableScaleIn** *(boolean) --*

      Indicates whether scale in by the target tracking policy is disabled. If the value is true,
      scale in is disabled and the target tracking policy won't remove capacity from the scalable
      resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity
      from the scalable resource. The default value is false.

    - **ScaleInCooldown** *(integer) --*

      The amount of time, in seconds, after a scale in activity completes before another scale in
      activity can start. The cooldown period is used to block subsequent scale in requests until it
      has expired. You should scale in conservatively to protect your application's availability.
      However, if another alarm triggers a scale out policy during the cooldown period after a
      scale-in, application auto scaling scales out your scalable target immediately.

    - **ScaleOutCooldown** *(integer) --*

      The amount of time, in seconds, after a scale out activity completes before another scale out
      activity can start. While the cooldown period is in effect, the capacity that has been added
      by the previous scale out event that initiated the cooldown is calculated as part of the
      desired capacity for the next scale out. You should continuously (but not excessively) scale
      out.

    - **TargetValue** *(float) --*

      The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or
      2e-360 to 2e360 (Base 2).
    """


_ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTypeDef = TypedDict(
    "_ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTypeDef",
    {
        "PolicyName": str,
        "TargetTrackingScalingPolicyConfiguration": ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef,
    },
    total=False,
)


class ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTypeDef(
    _ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTypeDef
):
    """
    Type definition for
    `ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedWriteCapacityAutoScalingSettings`
    `ScalingPolicies`

    Represents the properties of the scaling policy.

    - **PolicyName** *(string) --*

      The name of the scaling policy.

    - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

      Represents a target tracking scaling policy configuration.

      - **DisableScaleIn** *(boolean) --*

        Indicates whether scale in by the target tracking policy is disabled. If the value is true,
        scale in is disabled and the target tracking policy won't remove capacity from the scalable
        resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity
        from the scalable resource. The default value is false.

      - **ScaleInCooldown** *(integer) --*

        The amount of time, in seconds, after a scale in activity completes before another scale in
        activity can start. The cooldown period is used to block subsequent scale in requests until
        it has expired. You should scale in conservatively to protect your application's
        availability. However, if another alarm triggers a scale out policy during the cooldown
        period after a scale-in, application auto scaling scales out your scalable target
        immediately.

      - **ScaleOutCooldown** *(integer) --*

        The amount of time, in seconds, after a scale out activity completes before another scale
        out activity can start. While the cooldown period is in effect, the capacity that has been
        added by the previous scale out event that initiated the cooldown is calculated as part of
        the desired capacity for the next scale out. You should continuously (but not excessively)
        scale out.

      - **TargetValue** *(float) --*

        The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or
        2e-360 to 2e360 (Base 2).
    """


_ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedWriteCapacityAutoScalingSettingsTypeDef = TypedDict(
    "_ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedWriteCapacityAutoScalingSettingsTypeDef",
    {
        "MinimumUnits": int,
        "MaximumUnits": int,
        "AutoScalingDisabled": bool,
        "AutoScalingRoleArn": str,
        "ScalingPolicies": List[
            ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTypeDef
        ],
    },
    total=False,
)


class ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedWriteCapacityAutoScalingSettingsTypeDef(
    _ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedWriteCapacityAutoScalingSettingsTypeDef
):
    """
    Type definition for
    `ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicas`
    `ReplicaProvisionedWriteCapacityAutoScalingSettings`

    Represents the auto scaling settings for a global table or global secondary index.

    - **MinimumUnits** *(integer) --*

      The minimum capacity units that a global table or global secondary index should be scaled down
      to.

    - **MaximumUnits** *(integer) --*

      The maximum capacity units that a global table or global secondary index should be scaled up
      to.

    - **AutoScalingDisabled** *(boolean) --*

      Disabled auto scaling for this global table or global secondary index.

    - **AutoScalingRoleArn** *(string) --*

      Role ARN used for configuring the auto scaling policy.

    - **ScalingPolicies** *(list) --*

      Information about the scaling policies.

      - *(dict) --*

        Represents the properties of the scaling policy.

        - **PolicyName** *(string) --*

          The name of the scaling policy.

        - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

          Represents a target tracking scaling policy configuration.

          - **DisableScaleIn** *(boolean) --*

            Indicates whether scale in by the target tracking policy is disabled. If the value is
            true, scale in is disabled and the target tracking policy won't remove capacity from the
            scalable resource. Otherwise, scale in is enabled and the target tracking policy can
            remove capacity from the scalable resource. The default value is false.

          - **ScaleInCooldown** *(integer) --*

            The amount of time, in seconds, after a scale in activity completes before another scale
            in activity can start. The cooldown period is used to block subsequent scale in requests
            until it has expired. You should scale in conservatively to protect your application's
            availability. However, if another alarm triggers a scale out policy during the cooldown
            period after a scale-in, application auto scaling scales out your scalable target
            immediately.

          - **ScaleOutCooldown** *(integer) --*

            The amount of time, in seconds, after a scale out activity completes before another
            scale out activity can start. While the cooldown period is in effect, the capacity that
            has been added by the previous scale out event that initiated the cooldown is calculated
            as part of the desired capacity for the next scale out. You should continuously (but not
            excessively) scale out.

          - **TargetValue** *(float) --*

            The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10)
            or 2e-360 to 2e360 (Base 2).
    """


_ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasTypeDef = TypedDict(
    "_ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasTypeDef",
    {
        "RegionName": str,
        "GlobalSecondaryIndexes": List[
            ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesTypeDef
        ],
        "ReplicaProvisionedReadCapacityAutoScalingSettings": ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedReadCapacityAutoScalingSettingsTypeDef,
        "ReplicaProvisionedWriteCapacityAutoScalingSettings": ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedWriteCapacityAutoScalingSettingsTypeDef,
        "ReplicaStatus": str,
    },
    total=False,
)


class ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasTypeDef(
    _ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasTypeDef
):
    """
    Type definition for `ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescription`
    `Replicas`

    Represents the auto scaling settings of the replica.

    - **RegionName** *(string) --*

      The Region where the replica exists.

    - **GlobalSecondaryIndexes** *(list) --*

      Replica-specific global secondary index auto scaling settings.

      - *(dict) --*

        Represents the auto scaling configuration for a replica global secondary index.

        - **IndexName** *(string) --*

          The name of the global secondary index.

        - **IndexStatus** *(string) --*

          The current state of the replica global secondary index:

          * ``CREATING`` - The index is being created.

          * ``UPDATING`` - The index is being updated.

          * ``DELETING`` - The index is being deleted.

          * ``ACTIVE`` - The index is ready for use.

        - **ProvisionedReadCapacityAutoScalingSettings** *(dict) --*

          Represents the auto scaling settings for a global table or global secondary index.

          - **MinimumUnits** *(integer) --*

            The minimum capacity units that a global table or global secondary index should be
            scaled down to.

          - **MaximumUnits** *(integer) --*

            The maximum capacity units that a global table or global secondary index should be
            scaled up to.

          - **AutoScalingDisabled** *(boolean) --*

            Disabled auto scaling for this global table or global secondary index.

          - **AutoScalingRoleArn** *(string) --*

            Role ARN used for configuring the auto scaling policy.

          - **ScalingPolicies** *(list) --*

            Information about the scaling policies.

            - *(dict) --*

              Represents the properties of the scaling policy.

              - **PolicyName** *(string) --*

                The name of the scaling policy.

              - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

                Represents a target tracking scaling policy configuration.

                - **DisableScaleIn** *(boolean) --*

                  Indicates whether scale in by the target tracking policy is disabled. If the value
                  is true, scale in is disabled and the target tracking policy won't remove capacity
                  from the scalable resource. Otherwise, scale in is enabled and the target tracking
                  policy can remove capacity from the scalable resource. The default value is false.

                - **ScaleInCooldown** *(integer) --*

                  The amount of time, in seconds, after a scale in activity completes before another
                  scale in activity can start. The cooldown period is used to block subsequent scale
                  in requests until it has expired. You should scale in conservatively to protect
                  your application's availability. However, if another alarm triggers a scale out
                  policy during the cooldown period after a scale-in, application auto scaling
                  scales out your scalable target immediately.

                - **ScaleOutCooldown** *(integer) --*

                  The amount of time, in seconds, after a scale out activity completes before
                  another scale out activity can start. While the cooldown period is in effect, the
                  capacity that has been added by the previous scale out event that initiated the
                  cooldown is calculated as part of the desired capacity for the next scale out. You
                  should continuously (but not excessively) scale out.

                - **TargetValue** *(float) --*

                  The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base
                  10) or 2e-360 to 2e360 (Base 2).

        - **ProvisionedWriteCapacityAutoScalingSettings** *(dict) --*

          Represents the auto scaling settings for a global table or global secondary index.

          - **MinimumUnits** *(integer) --*

            The minimum capacity units that a global table or global secondary index should be
            scaled down to.

          - **MaximumUnits** *(integer) --*

            The maximum capacity units that a global table or global secondary index should be
            scaled up to.

          - **AutoScalingDisabled** *(boolean) --*

            Disabled auto scaling for this global table or global secondary index.

          - **AutoScalingRoleArn** *(string) --*

            Role ARN used for configuring the auto scaling policy.

          - **ScalingPolicies** *(list) --*

            Information about the scaling policies.

            - *(dict) --*

              Represents the properties of the scaling policy.

              - **PolicyName** *(string) --*

                The name of the scaling policy.

              - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

                Represents a target tracking scaling policy configuration.

                - **DisableScaleIn** *(boolean) --*

                  Indicates whether scale in by the target tracking policy is disabled. If the value
                  is true, scale in is disabled and the target tracking policy won't remove capacity
                  from the scalable resource. Otherwise, scale in is enabled and the target tracking
                  policy can remove capacity from the scalable resource. The default value is false.

                - **ScaleInCooldown** *(integer) --*

                  The amount of time, in seconds, after a scale in activity completes before another
                  scale in activity can start. The cooldown period is used to block subsequent scale
                  in requests until it has expired. You should scale in conservatively to protect
                  your application's availability. However, if another alarm triggers a scale out
                  policy during the cooldown period after a scale-in, application auto scaling
                  scales out your scalable target immediately.

                - **ScaleOutCooldown** *(integer) --*

                  The amount of time, in seconds, after a scale out activity completes before
                  another scale out activity can start. While the cooldown period is in effect, the
                  capacity that has been added by the previous scale out event that initiated the
                  cooldown is calculated as part of the desired capacity for the next scale out. You
                  should continuously (but not excessively) scale out.

                - **TargetValue** *(float) --*

                  The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base
                  10) or 2e-360 to 2e360 (Base 2).

    - **ReplicaProvisionedReadCapacityAutoScalingSettings** *(dict) --*

      Represents the auto scaling settings for a global table or global secondary index.

      - **MinimumUnits** *(integer) --*

        The minimum capacity units that a global table or global secondary index should be scaled
        down to.

      - **MaximumUnits** *(integer) --*

        The maximum capacity units that a global table or global secondary index should be scaled up
        to.

      - **AutoScalingDisabled** *(boolean) --*

        Disabled auto scaling for this global table or global secondary index.

      - **AutoScalingRoleArn** *(string) --*

        Role ARN used for configuring the auto scaling policy.

      - **ScalingPolicies** *(list) --*

        Information about the scaling policies.

        - *(dict) --*

          Represents the properties of the scaling policy.

          - **PolicyName** *(string) --*

            The name of the scaling policy.

          - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

            Represents a target tracking scaling policy configuration.

            - **DisableScaleIn** *(boolean) --*

              Indicates whether scale in by the target tracking policy is disabled. If the value is
              true, scale in is disabled and the target tracking policy won't remove capacity from
              the scalable resource. Otherwise, scale in is enabled and the target tracking policy
              can remove capacity from the scalable resource. The default value is false.

            - **ScaleInCooldown** *(integer) --*

              The amount of time, in seconds, after a scale in activity completes before another
              scale in activity can start. The cooldown period is used to block subsequent scale in
              requests until it has expired. You should scale in conservatively to protect your
              application's availability. However, if another alarm triggers a scale out policy
              during the cooldown period after a scale-in, application auto scaling scales out your
              scalable target immediately.

            - **ScaleOutCooldown** *(integer) --*

              The amount of time, in seconds, after a scale out activity completes before another
              scale out activity can start. While the cooldown period is in effect, the capacity
              that has been added by the previous scale out event that initiated the cooldown is
              calculated as part of the desired capacity for the next scale out. You should
              continuously (but not excessively) scale out.

            - **TargetValue** *(float) --*

              The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10)
              or 2e-360 to 2e360 (Base 2).

    - **ReplicaProvisionedWriteCapacityAutoScalingSettings** *(dict) --*

      Represents the auto scaling settings for a global table or global secondary index.

      - **MinimumUnits** *(integer) --*

        The minimum capacity units that a global table or global secondary index should be scaled
        down to.

      - **MaximumUnits** *(integer) --*

        The maximum capacity units that a global table or global secondary index should be scaled up
        to.

      - **AutoScalingDisabled** *(boolean) --*

        Disabled auto scaling for this global table or global secondary index.

      - **AutoScalingRoleArn** *(string) --*

        Role ARN used for configuring the auto scaling policy.

      - **ScalingPolicies** *(list) --*

        Information about the scaling policies.

        - *(dict) --*

          Represents the properties of the scaling policy.

          - **PolicyName** *(string) --*

            The name of the scaling policy.

          - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

            Represents a target tracking scaling policy configuration.

            - **DisableScaleIn** *(boolean) --*

              Indicates whether scale in by the target tracking policy is disabled. If the value is
              true, scale in is disabled and the target tracking policy won't remove capacity from
              the scalable resource. Otherwise, scale in is enabled and the target tracking policy
              can remove capacity from the scalable resource. The default value is false.

            - **ScaleInCooldown** *(integer) --*

              The amount of time, in seconds, after a scale in activity completes before another
              scale in activity can start. The cooldown period is used to block subsequent scale in
              requests until it has expired. You should scale in conservatively to protect your
              application's availability. However, if another alarm triggers a scale out policy
              during the cooldown period after a scale-in, application auto scaling scales out your
              scalable target immediately.

            - **ScaleOutCooldown** *(integer) --*

              The amount of time, in seconds, after a scale out activity completes before another
              scale out activity can start. While the cooldown period is in effect, the capacity
              that has been added by the previous scale out event that initiated the cooldown is
              calculated as part of the desired capacity for the next scale out. You should
              continuously (but not excessively) scale out.

            - **TargetValue** *(float) --*

              The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10)
              or 2e-360 to 2e360 (Base 2).

    - **ReplicaStatus** *(string) --*

      The current state of the replica:

      * ``CREATING`` - The replica is being created.

      * ``UPDATING`` - The replica is being updated.

      * ``DELETING`` - The replica is being deleted.

      * ``ACTIVE`` - The replica is ready for use.
    """


_ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionTypeDef = TypedDict(
    "_ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionTypeDef",
    {
        "TableName": str,
        "TableStatus": str,
        "Replicas": List[
            ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasTypeDef
        ],
    },
    total=False,
)


class ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionTypeDef(
    _ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionTypeDef
):
    """
    Type definition for `ClientDescribeTableReplicaAutoScalingResponse`
    `TableAutoScalingDescription`

    Represents the auto scaling properties of the table.

    - **TableName** *(string) --*

      The name of the table.

    - **TableStatus** *(string) --*

      The current state of the table:

      * ``CREATING`` - The table is being created.

      * ``UPDATING`` - The table is being updated.

      * ``DELETING`` - The table is being deleted.

      * ``ACTIVE`` - The table is ready for use.

    - **Replicas** *(list) --*

      Represents replicas of the global table.

      - *(dict) --*

        Represents the auto scaling settings of the replica.

        - **RegionName** *(string) --*

          The Region where the replica exists.

        - **GlobalSecondaryIndexes** *(list) --*

          Replica-specific global secondary index auto scaling settings.

          - *(dict) --*

            Represents the auto scaling configuration for a replica global secondary index.

            - **IndexName** *(string) --*

              The name of the global secondary index.

            - **IndexStatus** *(string) --*

              The current state of the replica global secondary index:

              * ``CREATING`` - The index is being created.

              * ``UPDATING`` - The index is being updated.

              * ``DELETING`` - The index is being deleted.

              * ``ACTIVE`` - The index is ready for use.

            - **ProvisionedReadCapacityAutoScalingSettings** *(dict) --*

              Represents the auto scaling settings for a global table or global secondary index.

              - **MinimumUnits** *(integer) --*

                The minimum capacity units that a global table or global secondary index should be
                scaled down to.

              - **MaximumUnits** *(integer) --*

                The maximum capacity units that a global table or global secondary index should be
                scaled up to.

              - **AutoScalingDisabled** *(boolean) --*

                Disabled auto scaling for this global table or global secondary index.

              - **AutoScalingRoleArn** *(string) --*

                Role ARN used for configuring the auto scaling policy.

              - **ScalingPolicies** *(list) --*

                Information about the scaling policies.

                - *(dict) --*

                  Represents the properties of the scaling policy.

                  - **PolicyName** *(string) --*

                    The name of the scaling policy.

                  - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

                    Represents a target tracking scaling policy configuration.

                    - **DisableScaleIn** *(boolean) --*

                      Indicates whether scale in by the target tracking policy is disabled. If the
                      value is true, scale in is disabled and the target tracking policy won't
                      remove capacity from the scalable resource. Otherwise, scale in is enabled and
                      the target tracking policy can remove capacity from the scalable resource. The
                      default value is false.

                    - **ScaleInCooldown** *(integer) --*

                      The amount of time, in seconds, after a scale in activity completes before
                      another scale in activity can start. The cooldown period is used to block
                      subsequent scale in requests until it has expired. You should scale in
                      conservatively to protect your application's availability. However, if another
                      alarm triggers a scale out policy during the cooldown period after a scale-in,
                      application auto scaling scales out your scalable target immediately.

                    - **ScaleOutCooldown** *(integer) --*

                      The amount of time, in seconds, after a scale out activity completes before
                      another scale out activity can start. While the cooldown period is in effect,
                      the capacity that has been added by the previous scale out event that
                      initiated the cooldown is calculated as part of the desired capacity for the
                      next scale out. You should continuously (but not excessively) scale out.

                    - **TargetValue** *(float) --*

                      The target value for the metric. The range is 8.515920e-109 to 1.174271e+108
                      (Base 10) or 2e-360 to 2e360 (Base 2).

            - **ProvisionedWriteCapacityAutoScalingSettings** *(dict) --*

              Represents the auto scaling settings for a global table or global secondary index.

              - **MinimumUnits** *(integer) --*

                The minimum capacity units that a global table or global secondary index should be
                scaled down to.

              - **MaximumUnits** *(integer) --*

                The maximum capacity units that a global table or global secondary index should be
                scaled up to.

              - **AutoScalingDisabled** *(boolean) --*

                Disabled auto scaling for this global table or global secondary index.

              - **AutoScalingRoleArn** *(string) --*

                Role ARN used for configuring the auto scaling policy.

              - **ScalingPolicies** *(list) --*

                Information about the scaling policies.

                - *(dict) --*

                  Represents the properties of the scaling policy.

                  - **PolicyName** *(string) --*

                    The name of the scaling policy.

                  - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

                    Represents a target tracking scaling policy configuration.

                    - **DisableScaleIn** *(boolean) --*

                      Indicates whether scale in by the target tracking policy is disabled. If the
                      value is true, scale in is disabled and the target tracking policy won't
                      remove capacity from the scalable resource. Otherwise, scale in is enabled and
                      the target tracking policy can remove capacity from the scalable resource. The
                      default value is false.

                    - **ScaleInCooldown** *(integer) --*

                      The amount of time, in seconds, after a scale in activity completes before
                      another scale in activity can start. The cooldown period is used to block
                      subsequent scale in requests until it has expired. You should scale in
                      conservatively to protect your application's availability. However, if another
                      alarm triggers a scale out policy during the cooldown period after a scale-in,
                      application auto scaling scales out your scalable target immediately.

                    - **ScaleOutCooldown** *(integer) --*

                      The amount of time, in seconds, after a scale out activity completes before
                      another scale out activity can start. While the cooldown period is in effect,
                      the capacity that has been added by the previous scale out event that
                      initiated the cooldown is calculated as part of the desired capacity for the
                      next scale out. You should continuously (but not excessively) scale out.

                    - **TargetValue** *(float) --*

                      The target value for the metric. The range is 8.515920e-109 to 1.174271e+108
                      (Base 10) or 2e-360 to 2e360 (Base 2).

        - **ReplicaProvisionedReadCapacityAutoScalingSettings** *(dict) --*

          Represents the auto scaling settings for a global table or global secondary index.

          - **MinimumUnits** *(integer) --*

            The minimum capacity units that a global table or global secondary index should be
            scaled down to.

          - **MaximumUnits** *(integer) --*

            The maximum capacity units that a global table or global secondary index should be
            scaled up to.

          - **AutoScalingDisabled** *(boolean) --*

            Disabled auto scaling for this global table or global secondary index.

          - **AutoScalingRoleArn** *(string) --*

            Role ARN used for configuring the auto scaling policy.

          - **ScalingPolicies** *(list) --*

            Information about the scaling policies.

            - *(dict) --*

              Represents the properties of the scaling policy.

              - **PolicyName** *(string) --*

                The name of the scaling policy.

              - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

                Represents a target tracking scaling policy configuration.

                - **DisableScaleIn** *(boolean) --*

                  Indicates whether scale in by the target tracking policy is disabled. If the value
                  is true, scale in is disabled and the target tracking policy won't remove capacity
                  from the scalable resource. Otherwise, scale in is enabled and the target tracking
                  policy can remove capacity from the scalable resource. The default value is false.

                - **ScaleInCooldown** *(integer) --*

                  The amount of time, in seconds, after a scale in activity completes before another
                  scale in activity can start. The cooldown period is used to block subsequent scale
                  in requests until it has expired. You should scale in conservatively to protect
                  your application's availability. However, if another alarm triggers a scale out
                  policy during the cooldown period after a scale-in, application auto scaling
                  scales out your scalable target immediately.

                - **ScaleOutCooldown** *(integer) --*

                  The amount of time, in seconds, after a scale out activity completes before
                  another scale out activity can start. While the cooldown period is in effect, the
                  capacity that has been added by the previous scale out event that initiated the
                  cooldown is calculated as part of the desired capacity for the next scale out. You
                  should continuously (but not excessively) scale out.

                - **TargetValue** *(float) --*

                  The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base
                  10) or 2e-360 to 2e360 (Base 2).

        - **ReplicaProvisionedWriteCapacityAutoScalingSettings** *(dict) --*

          Represents the auto scaling settings for a global table or global secondary index.

          - **MinimumUnits** *(integer) --*

            The minimum capacity units that a global table or global secondary index should be
            scaled down to.

          - **MaximumUnits** *(integer) --*

            The maximum capacity units that a global table or global secondary index should be
            scaled up to.

          - **AutoScalingDisabled** *(boolean) --*

            Disabled auto scaling for this global table or global secondary index.

          - **AutoScalingRoleArn** *(string) --*

            Role ARN used for configuring the auto scaling policy.

          - **ScalingPolicies** *(list) --*

            Information about the scaling policies.

            - *(dict) --*

              Represents the properties of the scaling policy.

              - **PolicyName** *(string) --*

                The name of the scaling policy.

              - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

                Represents a target tracking scaling policy configuration.

                - **DisableScaleIn** *(boolean) --*

                  Indicates whether scale in by the target tracking policy is disabled. If the value
                  is true, scale in is disabled and the target tracking policy won't remove capacity
                  from the scalable resource. Otherwise, scale in is enabled and the target tracking
                  policy can remove capacity from the scalable resource. The default value is false.

                - **ScaleInCooldown** *(integer) --*

                  The amount of time, in seconds, after a scale in activity completes before another
                  scale in activity can start. The cooldown period is used to block subsequent scale
                  in requests until it has expired. You should scale in conservatively to protect
                  your application's availability. However, if another alarm triggers a scale out
                  policy during the cooldown period after a scale-in, application auto scaling
                  scales out your scalable target immediately.

                - **ScaleOutCooldown** *(integer) --*

                  The amount of time, in seconds, after a scale out activity completes before
                  another scale out activity can start. While the cooldown period is in effect, the
                  capacity that has been added by the previous scale out event that initiated the
                  cooldown is calculated as part of the desired capacity for the next scale out. You
                  should continuously (but not excessively) scale out.

                - **TargetValue** *(float) --*

                  The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base
                  10) or 2e-360 to 2e360 (Base 2).

        - **ReplicaStatus** *(string) --*

          The current state of the replica:

          * ``CREATING`` - The replica is being created.

          * ``UPDATING`` - The replica is being updated.

          * ``DELETING`` - The replica is being deleted.

          * ``ACTIVE`` - The replica is ready for use.
    """


_ClientDescribeTableReplicaAutoScalingResponseTypeDef = TypedDict(
    "_ClientDescribeTableReplicaAutoScalingResponseTypeDef",
    {
        "TableAutoScalingDescription": ClientDescribeTableReplicaAutoScalingResponseTableAutoScalingDescriptionTypeDef
    },
    total=False,
)


class ClientDescribeTableReplicaAutoScalingResponseTypeDef(
    _ClientDescribeTableReplicaAutoScalingResponseTypeDef
):
    """
    Type definition for `ClientDescribeTableReplicaAutoScaling` `Response`

    - **TableAutoScalingDescription** *(dict) --*

      Represents the auto scaling properties of the table.

      - **TableName** *(string) --*

        The name of the table.

      - **TableStatus** *(string) --*

        The current state of the table:

        * ``CREATING`` - The table is being created.

        * ``UPDATING`` - The table is being updated.

        * ``DELETING`` - The table is being deleted.

        * ``ACTIVE`` - The table is ready for use.

      - **Replicas** *(list) --*

        Represents replicas of the global table.

        - *(dict) --*

          Represents the auto scaling settings of the replica.

          - **RegionName** *(string) --*

            The Region where the replica exists.

          - **GlobalSecondaryIndexes** *(list) --*

            Replica-specific global secondary index auto scaling settings.

            - *(dict) --*

              Represents the auto scaling configuration for a replica global secondary index.

              - **IndexName** *(string) --*

                The name of the global secondary index.

              - **IndexStatus** *(string) --*

                The current state of the replica global secondary index:

                * ``CREATING`` - The index is being created.

                * ``UPDATING`` - The index is being updated.

                * ``DELETING`` - The index is being deleted.

                * ``ACTIVE`` - The index is ready for use.

              - **ProvisionedReadCapacityAutoScalingSettings** *(dict) --*

                Represents the auto scaling settings for a global table or global secondary index.

                - **MinimumUnits** *(integer) --*

                  The minimum capacity units that a global table or global secondary index should be
                  scaled down to.

                - **MaximumUnits** *(integer) --*

                  The maximum capacity units that a global table or global secondary index should be
                  scaled up to.

                - **AutoScalingDisabled** *(boolean) --*

                  Disabled auto scaling for this global table or global secondary index.

                - **AutoScalingRoleArn** *(string) --*

                  Role ARN used for configuring the auto scaling policy.

                - **ScalingPolicies** *(list) --*

                  Information about the scaling policies.

                  - *(dict) --*

                    Represents the properties of the scaling policy.

                    - **PolicyName** *(string) --*

                      The name of the scaling policy.

                    - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

                      Represents a target tracking scaling policy configuration.

                      - **DisableScaleIn** *(boolean) --*

                        Indicates whether scale in by the target tracking policy is disabled. If the
                        value is true, scale in is disabled and the target tracking policy won't
                        remove capacity from the scalable resource. Otherwise, scale in is enabled
                        and the target tracking policy can remove capacity from the scalable
                        resource. The default value is false.

                      - **ScaleInCooldown** *(integer) --*

                        The amount of time, in seconds, after a scale in activity completes before
                        another scale in activity can start. The cooldown period is used to block
                        subsequent scale in requests until it has expired. You should scale in
                        conservatively to protect your application's availability. However, if
                        another alarm triggers a scale out policy during the cooldown period after a
                        scale-in, application auto scaling scales out your scalable target
                        immediately.

                      - **ScaleOutCooldown** *(integer) --*

                        The amount of time, in seconds, after a scale out activity completes before
                        another scale out activity can start. While the cooldown period is in
                        effect, the capacity that has been added by the previous scale out event
                        that initiated the cooldown is calculated as part of the desired capacity
                        for the next scale out. You should continuously (but not excessively) scale
                        out.

                      - **TargetValue** *(float) --*

                        The target value for the metric. The range is 8.515920e-109 to 1.174271e+108
                        (Base 10) or 2e-360 to 2e360 (Base 2).

              - **ProvisionedWriteCapacityAutoScalingSettings** *(dict) --*

                Represents the auto scaling settings for a global table or global secondary index.

                - **MinimumUnits** *(integer) --*

                  The minimum capacity units that a global table or global secondary index should be
                  scaled down to.

                - **MaximumUnits** *(integer) --*

                  The maximum capacity units that a global table or global secondary index should be
                  scaled up to.

                - **AutoScalingDisabled** *(boolean) --*

                  Disabled auto scaling for this global table or global secondary index.

                - **AutoScalingRoleArn** *(string) --*

                  Role ARN used for configuring the auto scaling policy.

                - **ScalingPolicies** *(list) --*

                  Information about the scaling policies.

                  - *(dict) --*

                    Represents the properties of the scaling policy.

                    - **PolicyName** *(string) --*

                      The name of the scaling policy.

                    - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

                      Represents a target tracking scaling policy configuration.

                      - **DisableScaleIn** *(boolean) --*

                        Indicates whether scale in by the target tracking policy is disabled. If the
                        value is true, scale in is disabled and the target tracking policy won't
                        remove capacity from the scalable resource. Otherwise, scale in is enabled
                        and the target tracking policy can remove capacity from the scalable
                        resource. The default value is false.

                      - **ScaleInCooldown** *(integer) --*

                        The amount of time, in seconds, after a scale in activity completes before
                        another scale in activity can start. The cooldown period is used to block
                        subsequent scale in requests until it has expired. You should scale in
                        conservatively to protect your application's availability. However, if
                        another alarm triggers a scale out policy during the cooldown period after a
                        scale-in, application auto scaling scales out your scalable target
                        immediately.

                      - **ScaleOutCooldown** *(integer) --*

                        The amount of time, in seconds, after a scale out activity completes before
                        another scale out activity can start. While the cooldown period is in
                        effect, the capacity that has been added by the previous scale out event
                        that initiated the cooldown is calculated as part of the desired capacity
                        for the next scale out. You should continuously (but not excessively) scale
                        out.

                      - **TargetValue** *(float) --*

                        The target value for the metric. The range is 8.515920e-109 to 1.174271e+108
                        (Base 10) or 2e-360 to 2e360 (Base 2).

          - **ReplicaProvisionedReadCapacityAutoScalingSettings** *(dict) --*

            Represents the auto scaling settings for a global table or global secondary index.

            - **MinimumUnits** *(integer) --*

              The minimum capacity units that a global table or global secondary index should be
              scaled down to.

            - **MaximumUnits** *(integer) --*

              The maximum capacity units that a global table or global secondary index should be
              scaled up to.

            - **AutoScalingDisabled** *(boolean) --*

              Disabled auto scaling for this global table or global secondary index.

            - **AutoScalingRoleArn** *(string) --*

              Role ARN used for configuring the auto scaling policy.

            - **ScalingPolicies** *(list) --*

              Information about the scaling policies.

              - *(dict) --*

                Represents the properties of the scaling policy.

                - **PolicyName** *(string) --*

                  The name of the scaling policy.

                - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

                  Represents a target tracking scaling policy configuration.

                  - **DisableScaleIn** *(boolean) --*

                    Indicates whether scale in by the target tracking policy is disabled. If the
                    value is true, scale in is disabled and the target tracking policy won't remove
                    capacity from the scalable resource. Otherwise, scale in is enabled and the
                    target tracking policy can remove capacity from the scalable resource. The
                    default value is false.

                  - **ScaleInCooldown** *(integer) --*

                    The amount of time, in seconds, after a scale in activity completes before
                    another scale in activity can start. The cooldown period is used to block
                    subsequent scale in requests until it has expired. You should scale in
                    conservatively to protect your application's availability. However, if another
                    alarm triggers a scale out policy during the cooldown period after a scale-in,
                    application auto scaling scales out your scalable target immediately.

                  - **ScaleOutCooldown** *(integer) --*

                    The amount of time, in seconds, after a scale out activity completes before
                    another scale out activity can start. While the cooldown period is in effect,
                    the capacity that has been added by the previous scale out event that initiated
                    the cooldown is calculated as part of the desired capacity for the next scale
                    out. You should continuously (but not excessively) scale out.

                  - **TargetValue** *(float) --*

                    The target value for the metric. The range is 8.515920e-109 to 1.174271e+108
                    (Base 10) or 2e-360 to 2e360 (Base 2).

          - **ReplicaProvisionedWriteCapacityAutoScalingSettings** *(dict) --*

            Represents the auto scaling settings for a global table or global secondary index.

            - **MinimumUnits** *(integer) --*

              The minimum capacity units that a global table or global secondary index should be
              scaled down to.

            - **MaximumUnits** *(integer) --*

              The maximum capacity units that a global table or global secondary index should be
              scaled up to.

            - **AutoScalingDisabled** *(boolean) --*

              Disabled auto scaling for this global table or global secondary index.

            - **AutoScalingRoleArn** *(string) --*

              Role ARN used for configuring the auto scaling policy.

            - **ScalingPolicies** *(list) --*

              Information about the scaling policies.

              - *(dict) --*

                Represents the properties of the scaling policy.

                - **PolicyName** *(string) --*

                  The name of the scaling policy.

                - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

                  Represents a target tracking scaling policy configuration.

                  - **DisableScaleIn** *(boolean) --*

                    Indicates whether scale in by the target tracking policy is disabled. If the
                    value is true, scale in is disabled and the target tracking policy won't remove
                    capacity from the scalable resource. Otherwise, scale in is enabled and the
                    target tracking policy can remove capacity from the scalable resource. The
                    default value is false.

                  - **ScaleInCooldown** *(integer) --*

                    The amount of time, in seconds, after a scale in activity completes before
                    another scale in activity can start. The cooldown period is used to block
                    subsequent scale in requests until it has expired. You should scale in
                    conservatively to protect your application's availability. However, if another
                    alarm triggers a scale out policy during the cooldown period after a scale-in,
                    application auto scaling scales out your scalable target immediately.

                  - **ScaleOutCooldown** *(integer) --*

                    The amount of time, in seconds, after a scale out activity completes before
                    another scale out activity can start. While the cooldown period is in effect,
                    the capacity that has been added by the previous scale out event that initiated
                    the cooldown is calculated as part of the desired capacity for the next scale
                    out. You should continuously (but not excessively) scale out.

                  - **TargetValue** *(float) --*

                    The target value for the metric. The range is 8.515920e-109 to 1.174271e+108
                    (Base 10) or 2e-360 to 2e360 (Base 2).

          - **ReplicaStatus** *(string) --*

            The current state of the replica:

            * ``CREATING`` - The replica is being created.

            * ``UPDATING`` - The replica is being updated.

            * ``DELETING`` - The replica is being deleted.

            * ``ACTIVE`` - The replica is ready for use.
    """


_ClientDescribeTableResponseTableArchivalSummaryTypeDef = TypedDict(
    "_ClientDescribeTableResponseTableArchivalSummaryTypeDef",
    {"ArchivalDateTime": datetime, "ArchivalReason": str, "ArchivalBackupArn": str},
    total=False,
)


class ClientDescribeTableResponseTableArchivalSummaryTypeDef(
    _ClientDescribeTableResponseTableArchivalSummaryTypeDef
):
    """
    Type definition for `ClientDescribeTableResponseTable` `ArchivalSummary`

    Contains information about the table archive.

    - **ArchivalDateTime** *(datetime) --*

      The date and time when table archival was initiated by DynamoDB, in UNIX epoch time format.

    - **ArchivalReason** *(string) --*

      The reason DynamoDB archived the table. Currently, the only possible value is:

      * ``INACCESSIBLE_ENCRYPTION_CREDENTIALS`` - The table was archived due to the table's AWS KMS
      key being inaccessible for more than seven days. An On-Demand backup was created at the
      archival time.

    - **ArchivalBackupArn** *(string) --*

      The Amazon Resource Name (ARN) of the backup the table was archived to, when applicable in the
      archival reason. If you wish to restore this backup to the same table name, you will need to
      delete the original table.
    """


_ClientDescribeTableResponseTableAttributeDefinitionsTypeDef = TypedDict(
    "_ClientDescribeTableResponseTableAttributeDefinitionsTypeDef",
    {"AttributeName": str, "AttributeType": str},
    total=False,
)


class ClientDescribeTableResponseTableAttributeDefinitionsTypeDef(
    _ClientDescribeTableResponseTableAttributeDefinitionsTypeDef
):
    """
    Type definition for `ClientDescribeTableResponseTable` `AttributeDefinitions`

    Represents an attribute for describing the key schema for the table and indexes.

    - **AttributeName** *(string) --*

      A name for the attribute.

    - **AttributeType** *(string) --*

      The data type for the attribute, where:

      * ``S`` - the attribute is of type String

      * ``N`` - the attribute is of type Number

      * ``B`` - the attribute is of type Binary
    """


_ClientDescribeTableResponseTableBillingModeSummaryTypeDef = TypedDict(
    "_ClientDescribeTableResponseTableBillingModeSummaryTypeDef",
    {"BillingMode": str, "LastUpdateToPayPerRequestDateTime": datetime},
    total=False,
)


class ClientDescribeTableResponseTableBillingModeSummaryTypeDef(
    _ClientDescribeTableResponseTableBillingModeSummaryTypeDef
):
    """
    Type definition for `ClientDescribeTableResponseTable` `BillingModeSummary`

    Contains the details for the read/write capacity mode.

    - **BillingMode** *(string) --*

      Controls how you are charged for read and write throughput and how you manage capacity. This
      setting can be changed later.

      * ``PROVISIONED`` - Sets the read/write capacity mode to ``PROVISIONED`` . We recommend using
      ``PROVISIONED`` for predictable workloads.

      * ``PAY_PER_REQUEST`` - Sets the read/write capacity mode to ``PAY_PER_REQUEST`` . We
      recommend using ``PAY_PER_REQUEST`` for unpredictable workloads.

    - **LastUpdateToPayPerRequestDateTime** *(datetime) --*

      Represents the time when ``PAY_PER_REQUEST`` was last set as the read/write capacity mode.
    """


_ClientDescribeTableResponseTableGlobalSecondaryIndexesKeySchemaTypeDef = TypedDict(
    "_ClientDescribeTableResponseTableGlobalSecondaryIndexesKeySchemaTypeDef",
    {"AttributeName": str, "KeyType": str},
    total=False,
)


class ClientDescribeTableResponseTableGlobalSecondaryIndexesKeySchemaTypeDef(
    _ClientDescribeTableResponseTableGlobalSecondaryIndexesKeySchemaTypeDef
):
    """
    Type definition for `ClientDescribeTableResponseTableGlobalSecondaryIndexes` `KeySchema`

    Represents *a single element* of a key schema. A key schema specifies the attributes that make
    up the primary key of a table, or the key attributes of an index.

    A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
    simple primary key would be represented by one ``KeySchemaElement`` (for the partition key). A
    composite primary key would require one ``KeySchemaElement`` for the partition key, and another
    ``KeySchemaElement`` for the sort key.

    A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The data
    type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a
    Map.

    - **AttributeName** *(string) --*

      The name of a key attribute.

    - **KeyType** *(string) --*

      The role that this key attribute will assume:

      * ``HASH`` - partition key

      * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.
    """


_ClientDescribeTableResponseTableGlobalSecondaryIndexesProjectionTypeDef = TypedDict(
    "_ClientDescribeTableResponseTableGlobalSecondaryIndexesProjectionTypeDef",
    {"ProjectionType": str, "NonKeyAttributes": List[str]},
    total=False,
)


class ClientDescribeTableResponseTableGlobalSecondaryIndexesProjectionTypeDef(
    _ClientDescribeTableResponseTableGlobalSecondaryIndexesProjectionTypeDef
):
    """
    Type definition for `ClientDescribeTableResponseTableGlobalSecondaryIndexes` `Projection`

    Represents attributes that are copied (projected) from the table into the global secondary
    index. These are in addition to the primary key attributes and index key attributes, which are
    automatically projected.

    - **ProjectionType** *(string) --*

      The set of attributes that are projected into the index:

      * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

      * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list of
      projected attributes is in ``NonKeyAttributes`` .

      * ``ALL`` - All of the table attributes are projected into the index.

    - **NonKeyAttributes** *(list) --*

      Represents the non-key attribute names which will be projected into the index.

      For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all of the
      local secondary indexes, must not exceed 20. If you project the same attribute into two
      different indexes, this counts as two distinct attributes when determining the total.

      - *(string) --*
    """


_ClientDescribeTableResponseTableGlobalSecondaryIndexesProvisionedThroughputTypeDef = TypedDict(
    "_ClientDescribeTableResponseTableGlobalSecondaryIndexesProvisionedThroughputTypeDef",
    {
        "LastIncreaseDateTime": datetime,
        "LastDecreaseDateTime": datetime,
        "NumberOfDecreasesToday": int,
        "ReadCapacityUnits": int,
        "WriteCapacityUnits": int,
    },
    total=False,
)


class ClientDescribeTableResponseTableGlobalSecondaryIndexesProvisionedThroughputTypeDef(
    _ClientDescribeTableResponseTableGlobalSecondaryIndexesProvisionedThroughputTypeDef
):
    """
    Type definition for `ClientDescribeTableResponseTableGlobalSecondaryIndexes`
    `ProvisionedThroughput`

    Represents the provisioned throughput settings for the specified global secondary index.

    For current minimum and maximum provisioned throughput values, see `Limits
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the *Amazon
    DynamoDB Developer Guide* .

    - **LastIncreaseDateTime** *(datetime) --*

      The date and time of the last provisioned throughput increase for this table.

    - **LastDecreaseDateTime** *(datetime) --*

      The date and time of the last provisioned throughput decrease for this table.

    - **NumberOfDecreasesToday** *(integer) --*

      The number of provisioned throughput decreases for this table during this UTC calendar day.
      For current maximums on provisioned throughput decreases, see `Limits
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
      *Amazon DynamoDB Developer Guide* .

    - **ReadCapacityUnits** *(integer) --*

      The maximum number of strongly consistent reads consumed per second before DynamoDB returns a
      ``ThrottlingException`` . Eventually consistent reads require less effort than strongly
      consistent reads, so a setting of 50 ``ReadCapacityUnits`` per second provides 100 eventually
      consistent ``ReadCapacityUnits`` per second.

    - **WriteCapacityUnits** *(integer) --*

      The maximum number of writes consumed per second before DynamoDB returns a
      ``ThrottlingException`` .
    """


_ClientDescribeTableResponseTableGlobalSecondaryIndexesTypeDef = TypedDict(
    "_ClientDescribeTableResponseTableGlobalSecondaryIndexesTypeDef",
    {
        "IndexName": str,
        "KeySchema": List[ClientDescribeTableResponseTableGlobalSecondaryIndexesKeySchemaTypeDef],
        "Projection": ClientDescribeTableResponseTableGlobalSecondaryIndexesProjectionTypeDef,
        "IndexStatus": str,
        "Backfilling": bool,
        "ProvisionedThroughput": ClientDescribeTableResponseTableGlobalSecondaryIndexesProvisionedThroughputTypeDef,
        "IndexSizeBytes": int,
        "ItemCount": int,
        "IndexArn": str,
    },
    total=False,
)


class ClientDescribeTableResponseTableGlobalSecondaryIndexesTypeDef(
    _ClientDescribeTableResponseTableGlobalSecondaryIndexesTypeDef
):
    """
    Type definition for `ClientDescribeTableResponseTable` `GlobalSecondaryIndexes`

    Represents the properties of a global secondary index.

    - **IndexName** *(string) --*

      The name of the global secondary index.

    - **KeySchema** *(list) --*

      The complete key schema for a global secondary index, which consists of one or more pairs of
      attribute names and key types:

      * ``HASH`` - partition key

      * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.

      - *(dict) --*

        Represents *a single element* of a key schema. A key schema specifies the attributes that
        make up the primary key of a table, or the key attributes of an index.

        A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
        simple primary key would be represented by one ``KeySchemaElement`` (for the partition key).
        A composite primary key would require one ``KeySchemaElement`` for the partition key, and
        another ``KeySchemaElement`` for the sort key.

        A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The
        data type must be one of String, Number, or Binary. The attribute cannot be nested within a
        List or a Map.

        - **AttributeName** *(string) --*

          The name of a key attribute.

        - **KeyType** *(string) --*

          The role that this key attribute will assume:

          * ``HASH`` - partition key

          * ``RANGE`` - sort key

          .. note::

            The partition key of an item is also known as its *hash attribute* . The term "hash
            attribute" derives from DynamoDB's usage of an internal hash function to evenly
            distribute data items across partitions, based on their partition key values.

            The sort key of an item is also known as its *range attribute* . The term "range
            attribute" derives from the way DynamoDB stores items with the same partition key
            physically close together, in sorted order by the sort key value.

    - **Projection** *(dict) --*

      Represents attributes that are copied (projected) from the table into the global secondary
      index. These are in addition to the primary key attributes and index key attributes, which are
      automatically projected.

      - **ProjectionType** *(string) --*

        The set of attributes that are projected into the index:

        * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

        * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list
        of projected attributes is in ``NonKeyAttributes`` .

        * ``ALL`` - All of the table attributes are projected into the index.

      - **NonKeyAttributes** *(list) --*

        Represents the non-key attribute names which will be projected into the index.

        For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all of
        the local secondary indexes, must not exceed 20. If you project the same attribute into two
        different indexes, this counts as two distinct attributes when determining the total.

        - *(string) --*

    - **IndexStatus** *(string) --*

      The current state of the global secondary index:

      * ``CREATING`` - The index is being created.

      * ``UPDATING`` - The index is being updated.

      * ``DELETING`` - The index is being deleted.

      * ``ACTIVE`` - The index is ready for use.

    - **Backfilling** *(boolean) --*

      Indicates whether the index is currently backfilling. *Backfilling* is the process of reading
      items from the table and determining whether they can be added to the index. (Not all items
      will qualify: For example, a partition key cannot have any duplicate values.) If an item can
      be added to the index, DynamoDB will do so. After all items have been processed, the
      backfilling operation is complete and ``Backfilling`` is false.

      You can delete an index that is being created during the ``Backfilling`` phase when
      ``IndexStatus`` is set to CREATING and ``Backfilling`` is true. You can't delete the index
      that is being created when ``IndexStatus`` is set to CREATING and ``Backfilling`` is false.

      .. note::

        For indexes that were created during a ``CreateTable`` operation, the ``Backfilling``
        attribute does not appear in the ``DescribeTable`` output.

    - **ProvisionedThroughput** *(dict) --*

      Represents the provisioned throughput settings for the specified global secondary index.

      For current minimum and maximum provisioned throughput values, see `Limits
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
      *Amazon DynamoDB Developer Guide* .

      - **LastIncreaseDateTime** *(datetime) --*

        The date and time of the last provisioned throughput increase for this table.

      - **LastDecreaseDateTime** *(datetime) --*

        The date and time of the last provisioned throughput decrease for this table.

      - **NumberOfDecreasesToday** *(integer) --*

        The number of provisioned throughput decreases for this table during this UTC calendar day.
        For current maximums on provisioned throughput decreases, see `Limits
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
        *Amazon DynamoDB Developer Guide* .

      - **ReadCapacityUnits** *(integer) --*

        The maximum number of strongly consistent reads consumed per second before DynamoDB returns
        a ``ThrottlingException`` . Eventually consistent reads require less effort than strongly
        consistent reads, so a setting of 50 ``ReadCapacityUnits`` per second provides 100
        eventually consistent ``ReadCapacityUnits`` per second.

      - **WriteCapacityUnits** *(integer) --*

        The maximum number of writes consumed per second before DynamoDB returns a
        ``ThrottlingException`` .

    - **IndexSizeBytes** *(integer) --*

      The total size of the specified index, in bytes. DynamoDB updates this value approximately
      every six hours. Recent changes might not be reflected in this value.

    - **ItemCount** *(integer) --*

      The number of items in the specified index. DynamoDB updates this value approximately every
      six hours. Recent changes might not be reflected in this value.

    - **IndexArn** *(string) --*

      The Amazon Resource Name (ARN) that uniquely identifies the index.
    """


_ClientDescribeTableResponseTableKeySchemaTypeDef = TypedDict(
    "_ClientDescribeTableResponseTableKeySchemaTypeDef",
    {"AttributeName": str, "KeyType": str},
    total=False,
)


class ClientDescribeTableResponseTableKeySchemaTypeDef(
    _ClientDescribeTableResponseTableKeySchemaTypeDef
):
    """
    Type definition for `ClientDescribeTableResponseTable` `KeySchema`

    Represents *a single element* of a key schema. A key schema specifies the attributes that make
    up the primary key of a table, or the key attributes of an index.

    A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
    simple primary key would be represented by one ``KeySchemaElement`` (for the partition key). A
    composite primary key would require one ``KeySchemaElement`` for the partition key, and another
    ``KeySchemaElement`` for the sort key.

    A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The data
    type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a
    Map.

    - **AttributeName** *(string) --*

      The name of a key attribute.

    - **KeyType** *(string) --*

      The role that this key attribute will assume:

      * ``HASH`` - partition key

      * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.
    """


_ClientDescribeTableResponseTableLocalSecondaryIndexesKeySchemaTypeDef = TypedDict(
    "_ClientDescribeTableResponseTableLocalSecondaryIndexesKeySchemaTypeDef",
    {"AttributeName": str, "KeyType": str},
    total=False,
)


class ClientDescribeTableResponseTableLocalSecondaryIndexesKeySchemaTypeDef(
    _ClientDescribeTableResponseTableLocalSecondaryIndexesKeySchemaTypeDef
):
    """
    Type definition for `ClientDescribeTableResponseTableLocalSecondaryIndexes` `KeySchema`

    Represents *a single element* of a key schema. A key schema specifies the attributes that make
    up the primary key of a table, or the key attributes of an index.

    A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
    simple primary key would be represented by one ``KeySchemaElement`` (for the partition key). A
    composite primary key would require one ``KeySchemaElement`` for the partition key, and another
    ``KeySchemaElement`` for the sort key.

    A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The data
    type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a
    Map.

    - **AttributeName** *(string) --*

      The name of a key attribute.

    - **KeyType** *(string) --*

      The role that this key attribute will assume:

      * ``HASH`` - partition key

      * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.
    """


_ClientDescribeTableResponseTableLocalSecondaryIndexesProjectionTypeDef = TypedDict(
    "_ClientDescribeTableResponseTableLocalSecondaryIndexesProjectionTypeDef",
    {"ProjectionType": str, "NonKeyAttributes": List[str]},
    total=False,
)


class ClientDescribeTableResponseTableLocalSecondaryIndexesProjectionTypeDef(
    _ClientDescribeTableResponseTableLocalSecondaryIndexesProjectionTypeDef
):
    """
    Type definition for `ClientDescribeTableResponseTableLocalSecondaryIndexes` `Projection`

    Represents attributes that are copied (projected) from the table into the global secondary
    index. These are in addition to the primary key attributes and index key attributes, which are
    automatically projected.

    - **ProjectionType** *(string) --*

      The set of attributes that are projected into the index:

      * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

      * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list of
      projected attributes is in ``NonKeyAttributes`` .

      * ``ALL`` - All of the table attributes are projected into the index.

    - **NonKeyAttributes** *(list) --*

      Represents the non-key attribute names which will be projected into the index.

      For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all of the
      local secondary indexes, must not exceed 20. If you project the same attribute into two
      different indexes, this counts as two distinct attributes when determining the total.

      - *(string) --*
    """


_ClientDescribeTableResponseTableLocalSecondaryIndexesTypeDef = TypedDict(
    "_ClientDescribeTableResponseTableLocalSecondaryIndexesTypeDef",
    {
        "IndexName": str,
        "KeySchema": List[ClientDescribeTableResponseTableLocalSecondaryIndexesKeySchemaTypeDef],
        "Projection": ClientDescribeTableResponseTableLocalSecondaryIndexesProjectionTypeDef,
        "IndexSizeBytes": int,
        "ItemCount": int,
        "IndexArn": str,
    },
    total=False,
)


class ClientDescribeTableResponseTableLocalSecondaryIndexesTypeDef(
    _ClientDescribeTableResponseTableLocalSecondaryIndexesTypeDef
):
    """
    Type definition for `ClientDescribeTableResponseTable` `LocalSecondaryIndexes`

    Represents the properties of a local secondary index.

    - **IndexName** *(string) --*

      Represents the name of the local secondary index.

    - **KeySchema** *(list) --*

      The complete key schema for the local secondary index, consisting of one or more pairs of
      attribute names and key types:

      * ``HASH`` - partition key

      * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.

      - *(dict) --*

        Represents *a single element* of a key schema. A key schema specifies the attributes that
        make up the primary key of a table, or the key attributes of an index.

        A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
        simple primary key would be represented by one ``KeySchemaElement`` (for the partition key).
        A composite primary key would require one ``KeySchemaElement`` for the partition key, and
        another ``KeySchemaElement`` for the sort key.

        A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The
        data type must be one of String, Number, or Binary. The attribute cannot be nested within a
        List or a Map.

        - **AttributeName** *(string) --*

          The name of a key attribute.

        - **KeyType** *(string) --*

          The role that this key attribute will assume:

          * ``HASH`` - partition key

          * ``RANGE`` - sort key

          .. note::

            The partition key of an item is also known as its *hash attribute* . The term "hash
            attribute" derives from DynamoDB's usage of an internal hash function to evenly
            distribute data items across partitions, based on their partition key values.

            The sort key of an item is also known as its *range attribute* . The term "range
            attribute" derives from the way DynamoDB stores items with the same partition key
            physically close together, in sorted order by the sort key value.

    - **Projection** *(dict) --*

      Represents attributes that are copied (projected) from the table into the global secondary
      index. These are in addition to the primary key attributes and index key attributes, which are
      automatically projected.

      - **ProjectionType** *(string) --*

        The set of attributes that are projected into the index:

        * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

        * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list
        of projected attributes is in ``NonKeyAttributes`` .

        * ``ALL`` - All of the table attributes are projected into the index.

      - **NonKeyAttributes** *(list) --*

        Represents the non-key attribute names which will be projected into the index.

        For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all of
        the local secondary indexes, must not exceed 20. If you project the same attribute into two
        different indexes, this counts as two distinct attributes when determining the total.

        - *(string) --*

    - **IndexSizeBytes** *(integer) --*

      The total size of the specified index, in bytes. DynamoDB updates this value approximately
      every six hours. Recent changes might not be reflected in this value.

    - **ItemCount** *(integer) --*

      The number of items in the specified index. DynamoDB updates this value approximately every
      six hours. Recent changes might not be reflected in this value.

    - **IndexArn** *(string) --*

      The Amazon Resource Name (ARN) that uniquely identifies the index.
    """


_ClientDescribeTableResponseTableProvisionedThroughputTypeDef = TypedDict(
    "_ClientDescribeTableResponseTableProvisionedThroughputTypeDef",
    {
        "LastIncreaseDateTime": datetime,
        "LastDecreaseDateTime": datetime,
        "NumberOfDecreasesToday": int,
        "ReadCapacityUnits": int,
        "WriteCapacityUnits": int,
    },
    total=False,
)


class ClientDescribeTableResponseTableProvisionedThroughputTypeDef(
    _ClientDescribeTableResponseTableProvisionedThroughputTypeDef
):
    """
    Type definition for `ClientDescribeTableResponseTable` `ProvisionedThroughput`

    The provisioned throughput settings for the table, consisting of read and write capacity units,
    along with data about increases and decreases.

    - **LastIncreaseDateTime** *(datetime) --*

      The date and time of the last provisioned throughput increase for this table.

    - **LastDecreaseDateTime** *(datetime) --*

      The date and time of the last provisioned throughput decrease for this table.

    - **NumberOfDecreasesToday** *(integer) --*

      The number of provisioned throughput decreases for this table during this UTC calendar day.
      For current maximums on provisioned throughput decreases, see `Limits
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
      *Amazon DynamoDB Developer Guide* .

    - **ReadCapacityUnits** *(integer) --*

      The maximum number of strongly consistent reads consumed per second before DynamoDB returns a
      ``ThrottlingException`` . Eventually consistent reads require less effort than strongly
      consistent reads, so a setting of 50 ``ReadCapacityUnits`` per second provides 100 eventually
      consistent ``ReadCapacityUnits`` per second.

    - **WriteCapacityUnits** *(integer) --*

      The maximum number of writes consumed per second before DynamoDB returns a
      ``ThrottlingException`` .
    """


_ClientDescribeTableResponseTableReplicasGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef = TypedDict(
    "_ClientDescribeTableResponseTableReplicasGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef",
    {"ReadCapacityUnits": int},
    total=False,
)


class ClientDescribeTableResponseTableReplicasGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef(
    _ClientDescribeTableResponseTableReplicasGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef
):
    """
    Type definition for `ClientDescribeTableResponseTableReplicasGlobalSecondaryIndexes`
    `ProvisionedThroughputOverride`

    If not described, uses the source table GSI's read capacity settings.

    - **ReadCapacityUnits** *(integer) --*

      Replica-specific read capacity units. If not specified, uses the source table's read capacity
      settings.
    """


_ClientDescribeTableResponseTableReplicasGlobalSecondaryIndexesTypeDef = TypedDict(
    "_ClientDescribeTableResponseTableReplicasGlobalSecondaryIndexesTypeDef",
    {
        "IndexName": str,
        "ProvisionedThroughputOverride": ClientDescribeTableResponseTableReplicasGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef,
    },
    total=False,
)


class ClientDescribeTableResponseTableReplicasGlobalSecondaryIndexesTypeDef(
    _ClientDescribeTableResponseTableReplicasGlobalSecondaryIndexesTypeDef
):
    """
    Type definition for `ClientDescribeTableResponseTableReplicas` `GlobalSecondaryIndexes`

    Represents the properties of a replica global secondary index.

    - **IndexName** *(string) --*

      The name of the global secondary index.

    - **ProvisionedThroughputOverride** *(dict) --*

      If not described, uses the source table GSI's read capacity settings.

      - **ReadCapacityUnits** *(integer) --*

        Replica-specific read capacity units. If not specified, uses the source table's read
        capacity settings.
    """


_ClientDescribeTableResponseTableReplicasProvisionedThroughputOverrideTypeDef = TypedDict(
    "_ClientDescribeTableResponseTableReplicasProvisionedThroughputOverrideTypeDef",
    {"ReadCapacityUnits": int},
    total=False,
)


class ClientDescribeTableResponseTableReplicasProvisionedThroughputOverrideTypeDef(
    _ClientDescribeTableResponseTableReplicasProvisionedThroughputOverrideTypeDef
):
    """
    Type definition for `ClientDescribeTableResponseTableReplicas` `ProvisionedThroughputOverride`

    Replica-specific provisioned throughput. If not described, uses the source table's provisioned
    throughput settings.

    - **ReadCapacityUnits** *(integer) --*

      Replica-specific read capacity units. If not specified, uses the source table's read capacity
      settings.
    """


_ClientDescribeTableResponseTableReplicasTypeDef = TypedDict(
    "_ClientDescribeTableResponseTableReplicasTypeDef",
    {
        "RegionName": str,
        "ReplicaStatus": str,
        "ReplicaStatusDescription": str,
        "ReplicaStatusPercentProgress": str,
        "KMSMasterKeyId": str,
        "ProvisionedThroughputOverride": ClientDescribeTableResponseTableReplicasProvisionedThroughputOverrideTypeDef,
        "GlobalSecondaryIndexes": List[
            ClientDescribeTableResponseTableReplicasGlobalSecondaryIndexesTypeDef
        ],
    },
    total=False,
)


class ClientDescribeTableResponseTableReplicasTypeDef(
    _ClientDescribeTableResponseTableReplicasTypeDef
):
    """
    Type definition for `ClientDescribeTableResponseTable` `Replicas`

    Contains the details of the replica.

    - **RegionName** *(string) --*

      The name of the Region.

    - **ReplicaStatus** *(string) --*

      The current state of the replica:

      * ``CREATING`` - The replica is being created.

      * ``UPDATING`` - The replica is being updated.

      * ``DELETING`` - The replica is being deleted.

      * ``ACTIVE`` - The replica is ready for use.

    - **ReplicaStatusDescription** *(string) --*

      Detailed information about the replica status.

    - **ReplicaStatusPercentProgress** *(string) --*

      Specifies the progress of a Create, Update, or Delete action on the replica as a percentage.

    - **KMSMasterKeyId** *(string) --*

      The AWS KMS customer master key (CMK) of the replica that will be used for AWS KMS encryption.

    - **ProvisionedThroughputOverride** *(dict) --*

      Replica-specific provisioned throughput. If not described, uses the source table's provisioned
      throughput settings.

      - **ReadCapacityUnits** *(integer) --*

        Replica-specific read capacity units. If not specified, uses the source table's read
        capacity settings.

    - **GlobalSecondaryIndexes** *(list) --*

      Replica-specific global secondary index settings.

      - *(dict) --*

        Represents the properties of a replica global secondary index.

        - **IndexName** *(string) --*

          The name of the global secondary index.

        - **ProvisionedThroughputOverride** *(dict) --*

          If not described, uses the source table GSI's read capacity settings.

          - **ReadCapacityUnits** *(integer) --*

            Replica-specific read capacity units. If not specified, uses the source table's read
            capacity settings.
    """


_ClientDescribeTableResponseTableRestoreSummaryTypeDef = TypedDict(
    "_ClientDescribeTableResponseTableRestoreSummaryTypeDef",
    {
        "SourceBackupArn": str,
        "SourceTableArn": str,
        "RestoreDateTime": datetime,
        "RestoreInProgress": bool,
    },
    total=False,
)


class ClientDescribeTableResponseTableRestoreSummaryTypeDef(
    _ClientDescribeTableResponseTableRestoreSummaryTypeDef
):
    """
    Type definition for `ClientDescribeTableResponseTable` `RestoreSummary`

    Contains details for the restore.

    - **SourceBackupArn** *(string) --*

      The Amazon Resource Name (ARN) of the backup from which the table was restored.

    - **SourceTableArn** *(string) --*

      The ARN of the source table of the backup that is being restored.

    - **RestoreDateTime** *(datetime) --*

      Point in time or source backup time.

    - **RestoreInProgress** *(boolean) --*

      Indicates if a restore is in progress or not.
    """


_ClientDescribeTableResponseTableSSEDescriptionTypeDef = TypedDict(
    "_ClientDescribeTableResponseTableSSEDescriptionTypeDef",
    {
        "Status": str,
        "SSEType": str,
        "KMSMasterKeyArn": str,
        "InaccessibleEncryptionDateTime": datetime,
    },
    total=False,
)


class ClientDescribeTableResponseTableSSEDescriptionTypeDef(
    _ClientDescribeTableResponseTableSSEDescriptionTypeDef
):
    """
    Type definition for `ClientDescribeTableResponseTable` `SSEDescription`

    The description of the server-side encryption status on the specified table.

    - **Status** *(string) --*

      Represents the current state of server-side encryption. The only supported values are:

      * ``ENABLED`` - Server-side encryption is enabled.

      * ``UPDATING`` - Server-side encryption is being updated.

    - **SSEType** *(string) --*

      Server-side encryption type. The only supported value is:

      * ``KMS`` - Server-side encryption that uses AWS Key Management Service. The key is stored in
      your account and is managed by AWS KMS (AWS KMS charges apply).

    - **KMSMasterKeyArn** *(string) --*

      The AWS KMS customer master key (CMK) ARN used for the AWS KMS encryption.

    - **InaccessibleEncryptionDateTime** *(datetime) --*

      Indicates the time, in UNIX epoch date format, when DynamoDB detected that the table's AWS KMS
      key was inaccessible. This attribute will automatically be cleared when DynamoDB detects that
      the table's AWS KMS key is accessible again. DynamoDB will initiate the table archival process
      when table's AWS KMS key remains inaccessible for more than seven days from this date.
    """


_ClientDescribeTableResponseTableStreamSpecificationTypeDef = TypedDict(
    "_ClientDescribeTableResponseTableStreamSpecificationTypeDef",
    {"StreamEnabled": bool, "StreamViewType": str},
    total=False,
)


class ClientDescribeTableResponseTableStreamSpecificationTypeDef(
    _ClientDescribeTableResponseTableStreamSpecificationTypeDef
):
    """
    Type definition for `ClientDescribeTableResponseTable` `StreamSpecification`

    The current DynamoDB Streams configuration for the table.

    - **StreamEnabled** *(boolean) --*

      Indicates whether DynamoDB Streams is enabled (true) or disabled (false) on the table.

    - **StreamViewType** *(string) --*

      When an item in the table is modified, ``StreamViewType`` determines what information is
      written to the stream for this table. Valid values for ``StreamViewType`` are:

      * ``KEYS_ONLY`` - Only the key attributes of the modified item are written to the stream.

      * ``NEW_IMAGE`` - The entire item, as it appears after it was modified, is written to the
      stream.

      * ``OLD_IMAGE`` - The entire item, as it appeared before it was modified, is written to the
      stream.

      * ``NEW_AND_OLD_IMAGES`` - Both the new and the old item images of the item are written to the
      stream.
    """


_ClientDescribeTableResponseTableTypeDef = TypedDict(
    "_ClientDescribeTableResponseTableTypeDef",
    {
        "AttributeDefinitions": List[ClientDescribeTableResponseTableAttributeDefinitionsTypeDef],
        "TableName": str,
        "KeySchema": List[ClientDescribeTableResponseTableKeySchemaTypeDef],
        "TableStatus": str,
        "CreationDateTime": datetime,
        "ProvisionedThroughput": ClientDescribeTableResponseTableProvisionedThroughputTypeDef,
        "TableSizeBytes": int,
        "ItemCount": int,
        "TableArn": str,
        "TableId": str,
        "BillingModeSummary": ClientDescribeTableResponseTableBillingModeSummaryTypeDef,
        "LocalSecondaryIndexes": List[ClientDescribeTableResponseTableLocalSecondaryIndexesTypeDef],
        "GlobalSecondaryIndexes": List[
            ClientDescribeTableResponseTableGlobalSecondaryIndexesTypeDef
        ],
        "StreamSpecification": ClientDescribeTableResponseTableStreamSpecificationTypeDef,
        "LatestStreamLabel": str,
        "LatestStreamArn": str,
        "GlobalTableVersion": str,
        "Replicas": List[ClientDescribeTableResponseTableReplicasTypeDef],
        "RestoreSummary": ClientDescribeTableResponseTableRestoreSummaryTypeDef,
        "SSEDescription": ClientDescribeTableResponseTableSSEDescriptionTypeDef,
        "ArchivalSummary": ClientDescribeTableResponseTableArchivalSummaryTypeDef,
    },
    total=False,
)


class ClientDescribeTableResponseTableTypeDef(_ClientDescribeTableResponseTableTypeDef):
    """
    Type definition for `ClientDescribeTableResponse` `Table`

    The properties of the table.

    - **AttributeDefinitions** *(list) --*

      An array of ``AttributeDefinition`` objects. Each of these objects describes one attribute in
      the table and index key schema.

      Each ``AttributeDefinition`` object in this array is composed of:

      * ``AttributeName`` - The name of the attribute.

      * ``AttributeType`` - The data type for the attribute.

      - *(dict) --*

        Represents an attribute for describing the key schema for the table and indexes.

        - **AttributeName** *(string) --*

          A name for the attribute.

        - **AttributeType** *(string) --*

          The data type for the attribute, where:

          * ``S`` - the attribute is of type String

          * ``N`` - the attribute is of type Number

          * ``B`` - the attribute is of type Binary

    - **TableName** *(string) --*

      The name of the table.

    - **KeySchema** *(list) --*

      The primary key structure for the table. Each ``KeySchemaElement`` consists of:

      * ``AttributeName`` - The name of the attribute.

      * ``KeyType`` - The role of the attribute:

        * ``HASH`` - partition key

        * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.

      For more information about primary keys, see `Primary Key
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html#DataModelPrimaryKey>`__
      in the *Amazon DynamoDB Developer Guide* .

      - *(dict) --*

        Represents *a single element* of a key schema. A key schema specifies the attributes that
        make up the primary key of a table, or the key attributes of an index.

        A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
        simple primary key would be represented by one ``KeySchemaElement`` (for the partition key).
        A composite primary key would require one ``KeySchemaElement`` for the partition key, and
        another ``KeySchemaElement`` for the sort key.

        A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The
        data type must be one of String, Number, or Binary. The attribute cannot be nested within a
        List or a Map.

        - **AttributeName** *(string) --*

          The name of a key attribute.

        - **KeyType** *(string) --*

          The role that this key attribute will assume:

          * ``HASH`` - partition key

          * ``RANGE`` - sort key

          .. note::

            The partition key of an item is also known as its *hash attribute* . The term "hash
            attribute" derives from DynamoDB's usage of an internal hash function to evenly
            distribute data items across partitions, based on their partition key values.

            The sort key of an item is also known as its *range attribute* . The term "range
            attribute" derives from the way DynamoDB stores items with the same partition key
            physically close together, in sorted order by the sort key value.

    - **TableStatus** *(string) --*

      The current state of the table:

      * ``CREATING`` - The table is being created.

      * ``UPDATING`` - The table is being updated.

      * ``DELETING`` - The table is being deleted.

      * ``ACTIVE`` - The table is ready for use.

      * ``INACCESSIBLE_ENCRYPTION_CREDENTIALS`` - The AWS KMS key used to encrypt the table in
      inaccessible. Table operations may fail due to failure to use the AWS KMS key. DynamoDB will
      initiate the table archival process when a table's AWS KMS key remains inaccessible for more
      than seven days.

      * ``ARCHIVING`` - The table is being archived. Operations are not allowed until archival is
      complete.

      * ``ARCHIVED`` - The table has been archived. See the ArchivalReason for more information.

    - **CreationDateTime** *(datetime) --*

      The date and time when the table was created, in `UNIX epoch time
      <http://www.epochconverter.com/>`__ format.

    - **ProvisionedThroughput** *(dict) --*

      The provisioned throughput settings for the table, consisting of read and write capacity
      units, along with data about increases and decreases.

      - **LastIncreaseDateTime** *(datetime) --*

        The date and time of the last provisioned throughput increase for this table.

      - **LastDecreaseDateTime** *(datetime) --*

        The date and time of the last provisioned throughput decrease for this table.

      - **NumberOfDecreasesToday** *(integer) --*

        The number of provisioned throughput decreases for this table during this UTC calendar day.
        For current maximums on provisioned throughput decreases, see `Limits
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
        *Amazon DynamoDB Developer Guide* .

      - **ReadCapacityUnits** *(integer) --*

        The maximum number of strongly consistent reads consumed per second before DynamoDB returns
        a ``ThrottlingException`` . Eventually consistent reads require less effort than strongly
        consistent reads, so a setting of 50 ``ReadCapacityUnits`` per second provides 100
        eventually consistent ``ReadCapacityUnits`` per second.

      - **WriteCapacityUnits** *(integer) --*

        The maximum number of writes consumed per second before DynamoDB returns a
        ``ThrottlingException`` .

    - **TableSizeBytes** *(integer) --*

      The total size of the specified table, in bytes. DynamoDB updates this value approximately
      every six hours. Recent changes might not be reflected in this value.

    - **ItemCount** *(integer) --*

      The number of items in the specified table. DynamoDB updates this value approximately every
      six hours. Recent changes might not be reflected in this value.

    - **TableArn** *(string) --*

      The Amazon Resource Name (ARN) that uniquely identifies the table.

    - **TableId** *(string) --*

      Unique identifier for the table for which the backup was created.

    - **BillingModeSummary** *(dict) --*

      Contains the details for the read/write capacity mode.

      - **BillingMode** *(string) --*

        Controls how you are charged for read and write throughput and how you manage capacity. This
        setting can be changed later.

        * ``PROVISIONED`` - Sets the read/write capacity mode to ``PROVISIONED`` . We recommend
        using ``PROVISIONED`` for predictable workloads.

        * ``PAY_PER_REQUEST`` - Sets the read/write capacity mode to ``PAY_PER_REQUEST`` . We
        recommend using ``PAY_PER_REQUEST`` for unpredictable workloads.

      - **LastUpdateToPayPerRequestDateTime** *(datetime) --*

        Represents the time when ``PAY_PER_REQUEST`` was last set as the read/write capacity mode.

    - **LocalSecondaryIndexes** *(list) --*

      Represents one or more local secondary indexes on the table. Each index is scoped to a given
      partition key value. Tables with one or more local secondary indexes are subject to an item
      collection size limit, where the amount of data within a given item collection cannot exceed
      10 GB. Each element is composed of:

      * ``IndexName`` - The name of the local secondary index.

      * ``KeySchema`` - Specifies the complete index key schema. The attribute names in the key
      schema must be between 1 and 255 characters (inclusive). The key schema must begin with the
      same partition key as the table.

      * ``Projection`` - Specifies attributes that are copied (projected) from the table into the
      index. These are in addition to the primary key attributes and index key attributes, which are
      automatically projected. Each attribute specification is composed of:

        * ``ProjectionType`` - One of the following:

          * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

          * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list
          of projected attributes is in ``NonKeyAttributes`` .

          * ``ALL`` - All of the table attributes are projected into the index.

        * ``NonKeyAttributes`` - A list of one or more non-key attribute names that are projected
        into the secondary index. The total count of attributes provided in ``NonKeyAttributes`` ,
        summed across all of the secondary indexes, must not exceed 20. If you project the same
        attribute into two different indexes, this counts as two distinct attributes when
        determining the total.

      * ``IndexSizeBytes`` - Represents the total size of the index, in bytes. DynamoDB updates this
      value approximately every six hours. Recent changes might not be reflected in this value.

      * ``ItemCount`` - Represents the number of items in the index. DynamoDB updates this value
      approximately every six hours. Recent changes might not be reflected in this value.

      If the table is in the ``DELETING`` state, no information about indexes will be returned.

      - *(dict) --*

        Represents the properties of a local secondary index.

        - **IndexName** *(string) --*

          Represents the name of the local secondary index.

        - **KeySchema** *(list) --*

          The complete key schema for the local secondary index, consisting of one or more pairs of
          attribute names and key types:

          * ``HASH`` - partition key

          * ``RANGE`` - sort key

          .. note::

            The partition key of an item is also known as its *hash attribute* . The term "hash
            attribute" derives from DynamoDB's usage of an internal hash function to evenly
            distribute data items across partitions, based on their partition key values.

            The sort key of an item is also known as its *range attribute* . The term "range
            attribute" derives from the way DynamoDB stores items with the same partition key
            physically close together, in sorted order by the sort key value.

          - *(dict) --*

            Represents *a single element* of a key schema. A key schema specifies the attributes
            that make up the primary key of a table, or the key attributes of an index.

            A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example,
            a simple primary key would be represented by one ``KeySchemaElement`` (for the partition
            key). A composite primary key would require one ``KeySchemaElement`` for the partition
            key, and another ``KeySchemaElement`` for the sort key.

            A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute).
            The data type must be one of String, Number, or Binary. The attribute cannot be nested
            within a List or a Map.

            - **AttributeName** *(string) --*

              The name of a key attribute.

            - **KeyType** *(string) --*

              The role that this key attribute will assume:

              * ``HASH`` - partition key

              * ``RANGE`` - sort key

              .. note::

                The partition key of an item is also known as its *hash attribute* . The term "hash
                attribute" derives from DynamoDB's usage of an internal hash function to evenly
                distribute data items across partitions, based on their partition key values.

                The sort key of an item is also known as its *range attribute* . The term "range
                attribute" derives from the way DynamoDB stores items with the same partition key
                physically close together, in sorted order by the sort key value.

        - **Projection** *(dict) --*

          Represents attributes that are copied (projected) from the table into the global secondary
          index. These are in addition to the primary key attributes and index key attributes, which
          are automatically projected.

          - **ProjectionType** *(string) --*

            The set of attributes that are projected into the index:

            * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

            * ``INCLUDE`` - Only the specified table attributes are projected into the index. The
            list of projected attributes is in ``NonKeyAttributes`` .

            * ``ALL`` - All of the table attributes are projected into the index.

          - **NonKeyAttributes** *(list) --*

            Represents the non-key attribute names which will be projected into the index.

            For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all
            of the local secondary indexes, must not exceed 20. If you project the same attribute
            into two different indexes, this counts as two distinct attributes when determining the
            total.

            - *(string) --*

        - **IndexSizeBytes** *(integer) --*

          The total size of the specified index, in bytes. DynamoDB updates this value approximately
          every six hours. Recent changes might not be reflected in this value.

        - **ItemCount** *(integer) --*

          The number of items in the specified index. DynamoDB updates this value approximately
          every six hours. Recent changes might not be reflected in this value.

        - **IndexArn** *(string) --*

          The Amazon Resource Name (ARN) that uniquely identifies the index.

    - **GlobalSecondaryIndexes** *(list) --*

      The global secondary indexes, if any, on the table. Each index is scoped to a given partition
      key value. Each element is composed of:

      * ``Backfilling`` - If true, then the index is currently in the backfilling phase. Backfilling
      occurs only when a new global secondary index is added to the table. It is the process by
      which DynamoDB populates the new index with data from the table. (This attribute does not
      appear for indexes that were created during a ``CreateTable`` operation.)  You can delete an
      index that is being created during the ``Backfilling`` phase when ``IndexStatus`` is set to
      CREATING and ``Backfilling`` is true. You can't delete the index that is being created when
      ``IndexStatus`` is set to CREATING and ``Backfilling`` is false. (This attribute does not
      appear for indexes that were created during a ``CreateTable`` operation.)

      * ``IndexName`` - The name of the global secondary index.

      * ``IndexSizeBytes`` - The total size of the global secondary index, in bytes. DynamoDB
      updates this value approximately every six hours. Recent changes might not be reflected in
      this value.

      * ``IndexStatus`` - The current status of the global secondary index:

        * ``CREATING`` - The index is being created.

        * ``UPDATING`` - The index is being updated.

        * ``DELETING`` - The index is being deleted.

        * ``ACTIVE`` - The index is ready for use.

      * ``ItemCount`` - The number of items in the global secondary index. DynamoDB updates this
      value approximately every six hours. Recent changes might not be reflected in this value.

      * ``KeySchema`` - Specifies the complete index key schema. The attribute names in the key
      schema must be between 1 and 255 characters (inclusive). The key schema must begin with the
      same partition key as the table.

      * ``Projection`` - Specifies attributes that are copied (projected) from the table into the
      index. These are in addition to the primary key attributes and index key attributes, which are
      automatically projected. Each attribute specification is composed of:

        * ``ProjectionType`` - One of the following:

          * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

          * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list
          of projected attributes is in ``NonKeyAttributes`` .

          * ``ALL`` - All of the table attributes are projected into the index.

        * ``NonKeyAttributes`` - A list of one or more non-key attribute names that are projected
        into the secondary index. The total count of attributes provided in ``NonKeyAttributes`` ,
        summed across all of the secondary indexes, must not exceed 20. If you project the same
        attribute into two different indexes, this counts as two distinct attributes when
        determining the total.

      * ``ProvisionedThroughput`` - The provisioned throughput settings for the global secondary
      index, consisting of read and write capacity units, along with data about increases and
      decreases.

      If the table is in the ``DELETING`` state, no information about indexes will be returned.

      - *(dict) --*

        Represents the properties of a global secondary index.

        - **IndexName** *(string) --*

          The name of the global secondary index.

        - **KeySchema** *(list) --*

          The complete key schema for a global secondary index, which consists of one or more pairs
          of attribute names and key types:

          * ``HASH`` - partition key

          * ``RANGE`` - sort key

          .. note::

            The partition key of an item is also known as its *hash attribute* . The term "hash
            attribute" derives from DynamoDB's usage of an internal hash function to evenly
            distribute data items across partitions, based on their partition key values.

            The sort key of an item is also known as its *range attribute* . The term "range
            attribute" derives from the way DynamoDB stores items with the same partition key
            physically close together, in sorted order by the sort key value.

          - *(dict) --*

            Represents *a single element* of a key schema. A key schema specifies the attributes
            that make up the primary key of a table, or the key attributes of an index.

            A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example,
            a simple primary key would be represented by one ``KeySchemaElement`` (for the partition
            key). A composite primary key would require one ``KeySchemaElement`` for the partition
            key, and another ``KeySchemaElement`` for the sort key.

            A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute).
            The data type must be one of String, Number, or Binary. The attribute cannot be nested
            within a List or a Map.

            - **AttributeName** *(string) --*

              The name of a key attribute.

            - **KeyType** *(string) --*

              The role that this key attribute will assume:

              * ``HASH`` - partition key

              * ``RANGE`` - sort key

              .. note::

                The partition key of an item is also known as its *hash attribute* . The term "hash
                attribute" derives from DynamoDB's usage of an internal hash function to evenly
                distribute data items across partitions, based on their partition key values.

                The sort key of an item is also known as its *range attribute* . The term "range
                attribute" derives from the way DynamoDB stores items with the same partition key
                physically close together, in sorted order by the sort key value.

        - **Projection** *(dict) --*

          Represents attributes that are copied (projected) from the table into the global secondary
          index. These are in addition to the primary key attributes and index key attributes, which
          are automatically projected.

          - **ProjectionType** *(string) --*

            The set of attributes that are projected into the index:

            * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

            * ``INCLUDE`` - Only the specified table attributes are projected into the index. The
            list of projected attributes is in ``NonKeyAttributes`` .

            * ``ALL`` - All of the table attributes are projected into the index.

          - **NonKeyAttributes** *(list) --*

            Represents the non-key attribute names which will be projected into the index.

            For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all
            of the local secondary indexes, must not exceed 20. If you project the same attribute
            into two different indexes, this counts as two distinct attributes when determining the
            total.

            - *(string) --*

        - **IndexStatus** *(string) --*

          The current state of the global secondary index:

          * ``CREATING`` - The index is being created.

          * ``UPDATING`` - The index is being updated.

          * ``DELETING`` - The index is being deleted.

          * ``ACTIVE`` - The index is ready for use.

        - **Backfilling** *(boolean) --*

          Indicates whether the index is currently backfilling. *Backfilling* is the process of
          reading items from the table and determining whether they can be added to the index. (Not
          all items will qualify: For example, a partition key cannot have any duplicate values.) If
          an item can be added to the index, DynamoDB will do so. After all items have been
          processed, the backfilling operation is complete and ``Backfilling`` is false.

          You can delete an index that is being created during the ``Backfilling`` phase when
          ``IndexStatus`` is set to CREATING and ``Backfilling`` is true. You can't delete the index
          that is being created when ``IndexStatus`` is set to CREATING and ``Backfilling`` is
          false.

          .. note::

            For indexes that were created during a ``CreateTable`` operation, the ``Backfilling``
            attribute does not appear in the ``DescribeTable`` output.

        - **ProvisionedThroughput** *(dict) --*

          Represents the provisioned throughput settings for the specified global secondary index.

          For current minimum and maximum provisioned throughput values, see `Limits
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
          *Amazon DynamoDB Developer Guide* .

          - **LastIncreaseDateTime** *(datetime) --*

            The date and time of the last provisioned throughput increase for this table.

          - **LastDecreaseDateTime** *(datetime) --*

            The date and time of the last provisioned throughput decrease for this table.

          - **NumberOfDecreasesToday** *(integer) --*

            The number of provisioned throughput decreases for this table during this UTC calendar
            day. For current maximums on provisioned throughput decreases, see `Limits
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
            *Amazon DynamoDB Developer Guide* .

          - **ReadCapacityUnits** *(integer) --*

            The maximum number of strongly consistent reads consumed per second before DynamoDB
            returns a ``ThrottlingException`` . Eventually consistent reads require less effort than
            strongly consistent reads, so a setting of 50 ``ReadCapacityUnits`` per second provides
            100 eventually consistent ``ReadCapacityUnits`` per second.

          - **WriteCapacityUnits** *(integer) --*

            The maximum number of writes consumed per second before DynamoDB returns a
            ``ThrottlingException`` .

        - **IndexSizeBytes** *(integer) --*

          The total size of the specified index, in bytes. DynamoDB updates this value approximately
          every six hours. Recent changes might not be reflected in this value.

        - **ItemCount** *(integer) --*

          The number of items in the specified index. DynamoDB updates this value approximately
          every six hours. Recent changes might not be reflected in this value.

        - **IndexArn** *(string) --*

          The Amazon Resource Name (ARN) that uniquely identifies the index.

    - **StreamSpecification** *(dict) --*

      The current DynamoDB Streams configuration for the table.

      - **StreamEnabled** *(boolean) --*

        Indicates whether DynamoDB Streams is enabled (true) or disabled (false) on the table.

      - **StreamViewType** *(string) --*

        When an item in the table is modified, ``StreamViewType`` determines what information is
        written to the stream for this table. Valid values for ``StreamViewType`` are:

        * ``KEYS_ONLY`` - Only the key attributes of the modified item are written to the stream.

        * ``NEW_IMAGE`` - The entire item, as it appears after it was modified, is written to the
        stream.

        * ``OLD_IMAGE`` - The entire item, as it appeared before it was modified, is written to the
        stream.

        * ``NEW_AND_OLD_IMAGES`` - Both the new and the old item images of the item are written to
        the stream.

    - **LatestStreamLabel** *(string) --*

      A timestamp, in ISO 8601 format, for this stream.

      Note that ``LatestStreamLabel`` is not a unique identifier for the stream, because it is
      possible that a stream from another table might have the same timestamp. However, the
      combination of the following three elements is guaranteed to be unique:

      * AWS customer ID

      * Table name

      * ``StreamLabel``

    - **LatestStreamArn** *(string) --*

      The Amazon Resource Name (ARN) that uniquely identifies the latest stream for this table.

    - **GlobalTableVersion** *(string) --*

      Represents the version of `global tables
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GlobalTables.html>`__ in
      use, if the table is replicated across AWS Regions.

    - **Replicas** *(list) --*

      Represents replicas of the table.

      - *(dict) --*

        Contains the details of the replica.

        - **RegionName** *(string) --*

          The name of the Region.

        - **ReplicaStatus** *(string) --*

          The current state of the replica:

          * ``CREATING`` - The replica is being created.

          * ``UPDATING`` - The replica is being updated.

          * ``DELETING`` - The replica is being deleted.

          * ``ACTIVE`` - The replica is ready for use.

        - **ReplicaStatusDescription** *(string) --*

          Detailed information about the replica status.

        - **ReplicaStatusPercentProgress** *(string) --*

          Specifies the progress of a Create, Update, or Delete action on the replica as a
          percentage.

        - **KMSMasterKeyId** *(string) --*

          The AWS KMS customer master key (CMK) of the replica that will be used for AWS KMS
          encryption.

        - **ProvisionedThroughputOverride** *(dict) --*

          Replica-specific provisioned throughput. If not described, uses the source table's
          provisioned throughput settings.

          - **ReadCapacityUnits** *(integer) --*

            Replica-specific read capacity units. If not specified, uses the source table's read
            capacity settings.

        - **GlobalSecondaryIndexes** *(list) --*

          Replica-specific global secondary index settings.

          - *(dict) --*

            Represents the properties of a replica global secondary index.

            - **IndexName** *(string) --*

              The name of the global secondary index.

            - **ProvisionedThroughputOverride** *(dict) --*

              If not described, uses the source table GSI's read capacity settings.

              - **ReadCapacityUnits** *(integer) --*

                Replica-specific read capacity units. If not specified, uses the source table's read
                capacity settings.

    - **RestoreSummary** *(dict) --*

      Contains details for the restore.

      - **SourceBackupArn** *(string) --*

        The Amazon Resource Name (ARN) of the backup from which the table was restored.

      - **SourceTableArn** *(string) --*

        The ARN of the source table of the backup that is being restored.

      - **RestoreDateTime** *(datetime) --*

        Point in time or source backup time.

      - **RestoreInProgress** *(boolean) --*

        Indicates if a restore is in progress or not.

    - **SSEDescription** *(dict) --*

      The description of the server-side encryption status on the specified table.

      - **Status** *(string) --*

        Represents the current state of server-side encryption. The only supported values are:

        * ``ENABLED`` - Server-side encryption is enabled.

        * ``UPDATING`` - Server-side encryption is being updated.

      - **SSEType** *(string) --*

        Server-side encryption type. The only supported value is:

        * ``KMS`` - Server-side encryption that uses AWS Key Management Service. The key is stored
        in your account and is managed by AWS KMS (AWS KMS charges apply).

      - **KMSMasterKeyArn** *(string) --*

        The AWS KMS customer master key (CMK) ARN used for the AWS KMS encryption.

      - **InaccessibleEncryptionDateTime** *(datetime) --*

        Indicates the time, in UNIX epoch date format, when DynamoDB detected that the table's AWS
        KMS key was inaccessible. This attribute will automatically be cleared when DynamoDB detects
        that the table's AWS KMS key is accessible again. DynamoDB will initiate the table archival
        process when table's AWS KMS key remains inaccessible for more than seven days from this
        date.

    - **ArchivalSummary** *(dict) --*

      Contains information about the table archive.

      - **ArchivalDateTime** *(datetime) --*

        The date and time when table archival was initiated by DynamoDB, in UNIX epoch time format.

      - **ArchivalReason** *(string) --*

        The reason DynamoDB archived the table. Currently, the only possible value is:

        * ``INACCESSIBLE_ENCRYPTION_CREDENTIALS`` - The table was archived due to the table's AWS
        KMS key being inaccessible for more than seven days. An On-Demand backup was created at the
        archival time.

      - **ArchivalBackupArn** *(string) --*

        The Amazon Resource Name (ARN) of the backup the table was archived to, when applicable in
        the archival reason. If you wish to restore this backup to the same table name, you will
        need to delete the original table.
    """


_ClientDescribeTableResponseTypeDef = TypedDict(
    "_ClientDescribeTableResponseTypeDef",
    {"Table": ClientDescribeTableResponseTableTypeDef},
    total=False,
)


class ClientDescribeTableResponseTypeDef(_ClientDescribeTableResponseTypeDef):
    """
    Type definition for `ClientDescribeTable` `Response`

    Represents the output of a ``DescribeTable`` operation.

    - **Table** *(dict) --*

      The properties of the table.

      - **AttributeDefinitions** *(list) --*

        An array of ``AttributeDefinition`` objects. Each of these objects describes one attribute
        in the table and index key schema.

        Each ``AttributeDefinition`` object in this array is composed of:

        * ``AttributeName`` - The name of the attribute.

        * ``AttributeType`` - The data type for the attribute.

        - *(dict) --*

          Represents an attribute for describing the key schema for the table and indexes.

          - **AttributeName** *(string) --*

            A name for the attribute.

          - **AttributeType** *(string) --*

            The data type for the attribute, where:

            * ``S`` - the attribute is of type String

            * ``N`` - the attribute is of type Number

            * ``B`` - the attribute is of type Binary

      - **TableName** *(string) --*

        The name of the table.

      - **KeySchema** *(list) --*

        The primary key structure for the table. Each ``KeySchemaElement`` consists of:

        * ``AttributeName`` - The name of the attribute.

        * ``KeyType`` - The role of the attribute:

          * ``HASH`` - partition key

          * ``RANGE`` - sort key

        .. note::

          The partition key of an item is also known as its *hash attribute* . The term "hash
          attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
          data items across partitions, based on their partition key values.

          The sort key of an item is also known as its *range attribute* . The term "range
          attribute" derives from the way DynamoDB stores items with the same partition key
          physically close together, in sorted order by the sort key value.

        For more information about primary keys, see `Primary Key
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html#DataModelPrimaryKey>`__
        in the *Amazon DynamoDB Developer Guide* .

        - *(dict) --*

          Represents *a single element* of a key schema. A key schema specifies the attributes that
          make up the primary key of a table, or the key attributes of an index.

          A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
          simple primary key would be represented by one ``KeySchemaElement`` (for the partition
          key). A composite primary key would require one ``KeySchemaElement`` for the partition
          key, and another ``KeySchemaElement`` for the sort key.

          A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The
          data type must be one of String, Number, or Binary. The attribute cannot be nested within
          a List or a Map.

          - **AttributeName** *(string) --*

            The name of a key attribute.

          - **KeyType** *(string) --*

            The role that this key attribute will assume:

            * ``HASH`` - partition key

            * ``RANGE`` - sort key

            .. note::

              The partition key of an item is also known as its *hash attribute* . The term "hash
              attribute" derives from DynamoDB's usage of an internal hash function to evenly
              distribute data items across partitions, based on their partition key values.

              The sort key of an item is also known as its *range attribute* . The term "range
              attribute" derives from the way DynamoDB stores items with the same partition key
              physically close together, in sorted order by the sort key value.

      - **TableStatus** *(string) --*

        The current state of the table:

        * ``CREATING`` - The table is being created.

        * ``UPDATING`` - The table is being updated.

        * ``DELETING`` - The table is being deleted.

        * ``ACTIVE`` - The table is ready for use.

        * ``INACCESSIBLE_ENCRYPTION_CREDENTIALS`` - The AWS KMS key used to encrypt the table in
        inaccessible. Table operations may fail due to failure to use the AWS KMS key. DynamoDB will
        initiate the table archival process when a table's AWS KMS key remains inaccessible for more
        than seven days.

        * ``ARCHIVING`` - The table is being archived. Operations are not allowed until archival is
        complete.

        * ``ARCHIVED`` - The table has been archived. See the ArchivalReason for more information.

      - **CreationDateTime** *(datetime) --*

        The date and time when the table was created, in `UNIX epoch time
        <http://www.epochconverter.com/>`__ format.

      - **ProvisionedThroughput** *(dict) --*

        The provisioned throughput settings for the table, consisting of read and write capacity
        units, along with data about increases and decreases.

        - **LastIncreaseDateTime** *(datetime) --*

          The date and time of the last provisioned throughput increase for this table.

        - **LastDecreaseDateTime** *(datetime) --*

          The date and time of the last provisioned throughput decrease for this table.

        - **NumberOfDecreasesToday** *(integer) --*

          The number of provisioned throughput decreases for this table during this UTC calendar
          day. For current maximums on provisioned throughput decreases, see `Limits
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
          *Amazon DynamoDB Developer Guide* .

        - **ReadCapacityUnits** *(integer) --*

          The maximum number of strongly consistent reads consumed per second before DynamoDB
          returns a ``ThrottlingException`` . Eventually consistent reads require less effort than
          strongly consistent reads, so a setting of 50 ``ReadCapacityUnits`` per second provides
          100 eventually consistent ``ReadCapacityUnits`` per second.

        - **WriteCapacityUnits** *(integer) --*

          The maximum number of writes consumed per second before DynamoDB returns a
          ``ThrottlingException`` .

      - **TableSizeBytes** *(integer) --*

        The total size of the specified table, in bytes. DynamoDB updates this value approximately
        every six hours. Recent changes might not be reflected in this value.

      - **ItemCount** *(integer) --*

        The number of items in the specified table. DynamoDB updates this value approximately every
        six hours. Recent changes might not be reflected in this value.

      - **TableArn** *(string) --*

        The Amazon Resource Name (ARN) that uniquely identifies the table.

      - **TableId** *(string) --*

        Unique identifier for the table for which the backup was created.

      - **BillingModeSummary** *(dict) --*

        Contains the details for the read/write capacity mode.

        - **BillingMode** *(string) --*

          Controls how you are charged for read and write throughput and how you manage capacity.
          This setting can be changed later.

          * ``PROVISIONED`` - Sets the read/write capacity mode to ``PROVISIONED`` . We recommend
          using ``PROVISIONED`` for predictable workloads.

          * ``PAY_PER_REQUEST`` - Sets the read/write capacity mode to ``PAY_PER_REQUEST`` . We
          recommend using ``PAY_PER_REQUEST`` for unpredictable workloads.

        - **LastUpdateToPayPerRequestDateTime** *(datetime) --*

          Represents the time when ``PAY_PER_REQUEST`` was last set as the read/write capacity mode.

      - **LocalSecondaryIndexes** *(list) --*

        Represents one or more local secondary indexes on the table. Each index is scoped to a given
        partition key value. Tables with one or more local secondary indexes are subject to an item
        collection size limit, where the amount of data within a given item collection cannot exceed
        10 GB. Each element is composed of:

        * ``IndexName`` - The name of the local secondary index.

        * ``KeySchema`` - Specifies the complete index key schema. The attribute names in the key
        schema must be between 1 and 255 characters (inclusive). The key schema must begin with the
        same partition key as the table.

        * ``Projection`` - Specifies attributes that are copied (projected) from the table into the
        index. These are in addition to the primary key attributes and index key attributes, which
        are automatically projected. Each attribute specification is composed of:

          * ``ProjectionType`` - One of the following:

            * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

            * ``INCLUDE`` - Only the specified table attributes are projected into the index. The
            list of projected attributes is in ``NonKeyAttributes`` .

            * ``ALL`` - All of the table attributes are projected into the index.

          * ``NonKeyAttributes`` - A list of one or more non-key attribute names that are projected
          into the secondary index. The total count of attributes provided in ``NonKeyAttributes`` ,
          summed across all of the secondary indexes, must not exceed 20. If you project the same
          attribute into two different indexes, this counts as two distinct attributes when
          determining the total.

        * ``IndexSizeBytes`` - Represents the total size of the index, in bytes. DynamoDB updates
        this value approximately every six hours. Recent changes might not be reflected in this
        value.

        * ``ItemCount`` - Represents the number of items in the index. DynamoDB updates this value
        approximately every six hours. Recent changes might not be reflected in this value.

        If the table is in the ``DELETING`` state, no information about indexes will be returned.

        - *(dict) --*

          Represents the properties of a local secondary index.

          - **IndexName** *(string) --*

            Represents the name of the local secondary index.

          - **KeySchema** *(list) --*

            The complete key schema for the local secondary index, consisting of one or more pairs
            of attribute names and key types:

            * ``HASH`` - partition key

            * ``RANGE`` - sort key

            .. note::

              The partition key of an item is also known as its *hash attribute* . The term "hash
              attribute" derives from DynamoDB's usage of an internal hash function to evenly
              distribute data items across partitions, based on their partition key values.

              The sort key of an item is also known as its *range attribute* . The term "range
              attribute" derives from the way DynamoDB stores items with the same partition key
              physically close together, in sorted order by the sort key value.

            - *(dict) --*

              Represents *a single element* of a key schema. A key schema specifies the attributes
              that make up the primary key of a table, or the key attributes of an index.

              A ``KeySchemaElement`` represents exactly one attribute of the primary key. For
              example, a simple primary key would be represented by one ``KeySchemaElement`` (for
              the partition key). A composite primary key would require one ``KeySchemaElement`` for
              the partition key, and another ``KeySchemaElement`` for the sort key.

              A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute).
              The data type must be one of String, Number, or Binary. The attribute cannot be nested
              within a List or a Map.

              - **AttributeName** *(string) --*

                The name of a key attribute.

              - **KeyType** *(string) --*

                The role that this key attribute will assume:

                * ``HASH`` - partition key

                * ``RANGE`` - sort key

                .. note::

                  The partition key of an item is also known as its *hash attribute* . The term
                  "hash attribute" derives from DynamoDB's usage of an internal hash function to
                  evenly distribute data items across partitions, based on their partition key
                  values.

                  The sort key of an item is also known as its *range attribute* . The term "range
                  attribute" derives from the way DynamoDB stores items with the same partition key
                  physically close together, in sorted order by the sort key value.

          - **Projection** *(dict) --*

            Represents attributes that are copied (projected) from the table into the global
            secondary index. These are in addition to the primary key attributes and index key
            attributes, which are automatically projected.

            - **ProjectionType** *(string) --*

              The set of attributes that are projected into the index:

              * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

              * ``INCLUDE`` - Only the specified table attributes are projected into the index. The
              list of projected attributes is in ``NonKeyAttributes`` .

              * ``ALL`` - All of the table attributes are projected into the index.

            - **NonKeyAttributes** *(list) --*

              Represents the non-key attribute names which will be projected into the index.

              For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all
              of the local secondary indexes, must not exceed 20. If you project the same attribute
              into two different indexes, this counts as two distinct attributes when determining
              the total.

              - *(string) --*

          - **IndexSizeBytes** *(integer) --*

            The total size of the specified index, in bytes. DynamoDB updates this value
            approximately every six hours. Recent changes might not be reflected in this value.

          - **ItemCount** *(integer) --*

            The number of items in the specified index. DynamoDB updates this value approximately
            every six hours. Recent changes might not be reflected in this value.

          - **IndexArn** *(string) --*

            The Amazon Resource Name (ARN) that uniquely identifies the index.

      - **GlobalSecondaryIndexes** *(list) --*

        The global secondary indexes, if any, on the table. Each index is scoped to a given
        partition key value. Each element is composed of:

        * ``Backfilling`` - If true, then the index is currently in the backfilling phase.
        Backfilling occurs only when a new global secondary index is added to the table. It is the
        process by which DynamoDB populates the new index with data from the table. (This attribute
        does not appear for indexes that were created during a ``CreateTable`` operation.)  You can
        delete an index that is being created during the ``Backfilling`` phase when ``IndexStatus``
        is set to CREATING and ``Backfilling`` is true. You can't delete the index that is being
        created when ``IndexStatus`` is set to CREATING and ``Backfilling`` is false. (This
        attribute does not appear for indexes that were created during a ``CreateTable`` operation.)

        * ``IndexName`` - The name of the global secondary index.

        * ``IndexSizeBytes`` - The total size of the global secondary index, in bytes. DynamoDB
        updates this value approximately every six hours. Recent changes might not be reflected in
        this value.

        * ``IndexStatus`` - The current status of the global secondary index:

          * ``CREATING`` - The index is being created.

          * ``UPDATING`` - The index is being updated.

          * ``DELETING`` - The index is being deleted.

          * ``ACTIVE`` - The index is ready for use.

        * ``ItemCount`` - The number of items in the global secondary index. DynamoDB updates this
        value approximately every six hours. Recent changes might not be reflected in this value.

        * ``KeySchema`` - Specifies the complete index key schema. The attribute names in the key
        schema must be between 1 and 255 characters (inclusive). The key schema must begin with the
        same partition key as the table.

        * ``Projection`` - Specifies attributes that are copied (projected) from the table into the
        index. These are in addition to the primary key attributes and index key attributes, which
        are automatically projected. Each attribute specification is composed of:

          * ``ProjectionType`` - One of the following:

            * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

            * ``INCLUDE`` - Only the specified table attributes are projected into the index. The
            list of projected attributes is in ``NonKeyAttributes`` .

            * ``ALL`` - All of the table attributes are projected into the index.

          * ``NonKeyAttributes`` - A list of one or more non-key attribute names that are projected
          into the secondary index. The total count of attributes provided in ``NonKeyAttributes`` ,
          summed across all of the secondary indexes, must not exceed 20. If you project the same
          attribute into two different indexes, this counts as two distinct attributes when
          determining the total.

        * ``ProvisionedThroughput`` - The provisioned throughput settings for the global secondary
        index, consisting of read and write capacity units, along with data about increases and
        decreases.

        If the table is in the ``DELETING`` state, no information about indexes will be returned.

        - *(dict) --*

          Represents the properties of a global secondary index.

          - **IndexName** *(string) --*

            The name of the global secondary index.

          - **KeySchema** *(list) --*

            The complete key schema for a global secondary index, which consists of one or more
            pairs of attribute names and key types:

            * ``HASH`` - partition key

            * ``RANGE`` - sort key

            .. note::

              The partition key of an item is also known as its *hash attribute* . The term "hash
              attribute" derives from DynamoDB's usage of an internal hash function to evenly
              distribute data items across partitions, based on their partition key values.

              The sort key of an item is also known as its *range attribute* . The term "range
              attribute" derives from the way DynamoDB stores items with the same partition key
              physically close together, in sorted order by the sort key value.

            - *(dict) --*

              Represents *a single element* of a key schema. A key schema specifies the attributes
              that make up the primary key of a table, or the key attributes of an index.

              A ``KeySchemaElement`` represents exactly one attribute of the primary key. For
              example, a simple primary key would be represented by one ``KeySchemaElement`` (for
              the partition key). A composite primary key would require one ``KeySchemaElement`` for
              the partition key, and another ``KeySchemaElement`` for the sort key.

              A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute).
              The data type must be one of String, Number, or Binary. The attribute cannot be nested
              within a List or a Map.

              - **AttributeName** *(string) --*

                The name of a key attribute.

              - **KeyType** *(string) --*

                The role that this key attribute will assume:

                * ``HASH`` - partition key

                * ``RANGE`` - sort key

                .. note::

                  The partition key of an item is also known as its *hash attribute* . The term
                  "hash attribute" derives from DynamoDB's usage of an internal hash function to
                  evenly distribute data items across partitions, based on their partition key
                  values.

                  The sort key of an item is also known as its *range attribute* . The term "range
                  attribute" derives from the way DynamoDB stores items with the same partition key
                  physically close together, in sorted order by the sort key value.

          - **Projection** *(dict) --*

            Represents attributes that are copied (projected) from the table into the global
            secondary index. These are in addition to the primary key attributes and index key
            attributes, which are automatically projected.

            - **ProjectionType** *(string) --*

              The set of attributes that are projected into the index:

              * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

              * ``INCLUDE`` - Only the specified table attributes are projected into the index. The
              list of projected attributes is in ``NonKeyAttributes`` .

              * ``ALL`` - All of the table attributes are projected into the index.

            - **NonKeyAttributes** *(list) --*

              Represents the non-key attribute names which will be projected into the index.

              For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all
              of the local secondary indexes, must not exceed 20. If you project the same attribute
              into two different indexes, this counts as two distinct attributes when determining
              the total.

              - *(string) --*

          - **IndexStatus** *(string) --*

            The current state of the global secondary index:

            * ``CREATING`` - The index is being created.

            * ``UPDATING`` - The index is being updated.

            * ``DELETING`` - The index is being deleted.

            * ``ACTIVE`` - The index is ready for use.

          - **Backfilling** *(boolean) --*

            Indicates whether the index is currently backfilling. *Backfilling* is the process of
            reading items from the table and determining whether they can be added to the index.
            (Not all items will qualify: For example, a partition key cannot have any duplicate
            values.) If an item can be added to the index, DynamoDB will do so. After all items have
            been processed, the backfilling operation is complete and ``Backfilling`` is false.

            You can delete an index that is being created during the ``Backfilling`` phase when
            ``IndexStatus`` is set to CREATING and ``Backfilling`` is true. You can't delete the
            index that is being created when ``IndexStatus`` is set to CREATING and ``Backfilling``
            is false.

            .. note::

              For indexes that were created during a ``CreateTable`` operation, the ``Backfilling``
              attribute does not appear in the ``DescribeTable`` output.

          - **ProvisionedThroughput** *(dict) --*

            Represents the provisioned throughput settings for the specified global secondary index.

            For current minimum and maximum provisioned throughput values, see `Limits
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
            *Amazon DynamoDB Developer Guide* .

            - **LastIncreaseDateTime** *(datetime) --*

              The date and time of the last provisioned throughput increase for this table.

            - **LastDecreaseDateTime** *(datetime) --*

              The date and time of the last provisioned throughput decrease for this table.

            - **NumberOfDecreasesToday** *(integer) --*

              The number of provisioned throughput decreases for this table during this UTC calendar
              day. For current maximums on provisioned throughput decreases, see `Limits
              <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in
              the *Amazon DynamoDB Developer Guide* .

            - **ReadCapacityUnits** *(integer) --*

              The maximum number of strongly consistent reads consumed per second before DynamoDB
              returns a ``ThrottlingException`` . Eventually consistent reads require less effort
              than strongly consistent reads, so a setting of 50 ``ReadCapacityUnits`` per second
              provides 100 eventually consistent ``ReadCapacityUnits`` per second.

            - **WriteCapacityUnits** *(integer) --*

              The maximum number of writes consumed per second before DynamoDB returns a
              ``ThrottlingException`` .

          - **IndexSizeBytes** *(integer) --*

            The total size of the specified index, in bytes. DynamoDB updates this value
            approximately every six hours. Recent changes might not be reflected in this value.

          - **ItemCount** *(integer) --*

            The number of items in the specified index. DynamoDB updates this value approximately
            every six hours. Recent changes might not be reflected in this value.

          - **IndexArn** *(string) --*

            The Amazon Resource Name (ARN) that uniquely identifies the index.

      - **StreamSpecification** *(dict) --*

        The current DynamoDB Streams configuration for the table.

        - **StreamEnabled** *(boolean) --*

          Indicates whether DynamoDB Streams is enabled (true) or disabled (false) on the table.

        - **StreamViewType** *(string) --*

          When an item in the table is modified, ``StreamViewType`` determines what information is
          written to the stream for this table. Valid values for ``StreamViewType`` are:

          * ``KEYS_ONLY`` - Only the key attributes of the modified item are written to the stream.

          * ``NEW_IMAGE`` - The entire item, as it appears after it was modified, is written to the
          stream.

          * ``OLD_IMAGE`` - The entire item, as it appeared before it was modified, is written to
          the stream.

          * ``NEW_AND_OLD_IMAGES`` - Both the new and the old item images of the item are written to
          the stream.

      - **LatestStreamLabel** *(string) --*

        A timestamp, in ISO 8601 format, for this stream.

        Note that ``LatestStreamLabel`` is not a unique identifier for the stream, because it is
        possible that a stream from another table might have the same timestamp. However, the
        combination of the following three elements is guaranteed to be unique:

        * AWS customer ID

        * Table name

        * ``StreamLabel``

      - **LatestStreamArn** *(string) --*

        The Amazon Resource Name (ARN) that uniquely identifies the latest stream for this table.

      - **GlobalTableVersion** *(string) --*

        Represents the version of `global tables
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GlobalTables.html>`__ in
        use, if the table is replicated across AWS Regions.

      - **Replicas** *(list) --*

        Represents replicas of the table.

        - *(dict) --*

          Contains the details of the replica.

          - **RegionName** *(string) --*

            The name of the Region.

          - **ReplicaStatus** *(string) --*

            The current state of the replica:

            * ``CREATING`` - The replica is being created.

            * ``UPDATING`` - The replica is being updated.

            * ``DELETING`` - The replica is being deleted.

            * ``ACTIVE`` - The replica is ready for use.

          - **ReplicaStatusDescription** *(string) --*

            Detailed information about the replica status.

          - **ReplicaStatusPercentProgress** *(string) --*

            Specifies the progress of a Create, Update, or Delete action on the replica as a
            percentage.

          - **KMSMasterKeyId** *(string) --*

            The AWS KMS customer master key (CMK) of the replica that will be used for AWS KMS
            encryption.

          - **ProvisionedThroughputOverride** *(dict) --*

            Replica-specific provisioned throughput. If not described, uses the source table's
            provisioned throughput settings.

            - **ReadCapacityUnits** *(integer) --*

              Replica-specific read capacity units. If not specified, uses the source table's read
              capacity settings.

          - **GlobalSecondaryIndexes** *(list) --*

            Replica-specific global secondary index settings.

            - *(dict) --*

              Represents the properties of a replica global secondary index.

              - **IndexName** *(string) --*

                The name of the global secondary index.

              - **ProvisionedThroughputOverride** *(dict) --*

                If not described, uses the source table GSI's read capacity settings.

                - **ReadCapacityUnits** *(integer) --*

                  Replica-specific read capacity units. If not specified, uses the source table's
                  read capacity settings.

      - **RestoreSummary** *(dict) --*

        Contains details for the restore.

        - **SourceBackupArn** *(string) --*

          The Amazon Resource Name (ARN) of the backup from which the table was restored.

        - **SourceTableArn** *(string) --*

          The ARN of the source table of the backup that is being restored.

        - **RestoreDateTime** *(datetime) --*

          Point in time or source backup time.

        - **RestoreInProgress** *(boolean) --*

          Indicates if a restore is in progress or not.

      - **SSEDescription** *(dict) --*

        The description of the server-side encryption status on the specified table.

        - **Status** *(string) --*

          Represents the current state of server-side encryption. The only supported values are:

          * ``ENABLED`` - Server-side encryption is enabled.

          * ``UPDATING`` - Server-side encryption is being updated.

        - **SSEType** *(string) --*

          Server-side encryption type. The only supported value is:

          * ``KMS`` - Server-side encryption that uses AWS Key Management Service. The key is stored
          in your account and is managed by AWS KMS (AWS KMS charges apply).

        - **KMSMasterKeyArn** *(string) --*

          The AWS KMS customer master key (CMK) ARN used for the AWS KMS encryption.

        - **InaccessibleEncryptionDateTime** *(datetime) --*

          Indicates the time, in UNIX epoch date format, when DynamoDB detected that the table's AWS
          KMS key was inaccessible. This attribute will automatically be cleared when DynamoDB
          detects that the table's AWS KMS key is accessible again. DynamoDB will initiate the table
          archival process when table's AWS KMS key remains inaccessible for more than seven days
          from this date.

      - **ArchivalSummary** *(dict) --*

        Contains information about the table archive.

        - **ArchivalDateTime** *(datetime) --*

          The date and time when table archival was initiated by DynamoDB, in UNIX epoch time
          format.

        - **ArchivalReason** *(string) --*

          The reason DynamoDB archived the table. Currently, the only possible value is:

          * ``INACCESSIBLE_ENCRYPTION_CREDENTIALS`` - The table was archived due to the table's AWS
          KMS key being inaccessible for more than seven days. An On-Demand backup was created at
          the archival time.

        - **ArchivalBackupArn** *(string) --*

          The Amazon Resource Name (ARN) of the backup the table was archived to, when applicable in
          the archival reason. If you wish to restore this backup to the same table name, you will
          need to delete the original table.
    """


_ClientDescribeTimeToLiveResponseTimeToLiveDescriptionTypeDef = TypedDict(
    "_ClientDescribeTimeToLiveResponseTimeToLiveDescriptionTypeDef",
    {"TimeToLiveStatus": str, "AttributeName": str},
    total=False,
)


class ClientDescribeTimeToLiveResponseTimeToLiveDescriptionTypeDef(
    _ClientDescribeTimeToLiveResponseTimeToLiveDescriptionTypeDef
):
    """
    Type definition for `ClientDescribeTimeToLiveResponse` `TimeToLiveDescription`

    - **TimeToLiveStatus** *(string) --*

      The TTL status for the table.

    - **AttributeName** *(string) --*

      The name of the TTL attribute for items in the table.
    """


_ClientDescribeTimeToLiveResponseTypeDef = TypedDict(
    "_ClientDescribeTimeToLiveResponseTypeDef",
    {"TimeToLiveDescription": ClientDescribeTimeToLiveResponseTimeToLiveDescriptionTypeDef},
    total=False,
)


class ClientDescribeTimeToLiveResponseTypeDef(_ClientDescribeTimeToLiveResponseTypeDef):
    """
    Type definition for `ClientDescribeTimeToLive` `Response`

    - **TimeToLiveDescription** *(dict) --*

      - **TimeToLiveStatus** *(string) --*

        The TTL status for the table.

      - **AttributeName** *(string) --*

        The name of the TTL attribute for items in the table.
    """


_ClientGetItemKeyTypeDef = TypedDict(
    "_ClientGetItemKeyTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class ClientGetItemKeyTypeDef(_ClientGetItemKeyTypeDef):
    """
    Type definition for `ClientGetItem` `Key`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_ClientGetItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef = TypedDict(
    "_ClientGetItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef",
    {"ReadCapacityUnits": float, "WriteCapacityUnits": float, "CapacityUnits": float},
    total=False,
)


class ClientGetItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef(
    _ClientGetItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef
):
    """
    Type definition for `ClientGetItemResponseConsumedCapacity` `GlobalSecondaryIndexes`

    Represents the amount of provisioned throughput capacity consumed on a table or an index.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed on a table or an index.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed on a table or an index.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed on a table or an index.
    """


_ClientGetItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef = TypedDict(
    "_ClientGetItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef",
    {"ReadCapacityUnits": float, "WriteCapacityUnits": float, "CapacityUnits": float},
    total=False,
)


class ClientGetItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef(
    _ClientGetItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef
):
    """
    Type definition for `ClientGetItemResponseConsumedCapacity` `LocalSecondaryIndexes`

    Represents the amount of provisioned throughput capacity consumed on a table or an index.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed on a table or an index.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed on a table or an index.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed on a table or an index.
    """


_ClientGetItemResponseConsumedCapacityTableTypeDef = TypedDict(
    "_ClientGetItemResponseConsumedCapacityTableTypeDef",
    {"ReadCapacityUnits": float, "WriteCapacityUnits": float, "CapacityUnits": float},
    total=False,
)


class ClientGetItemResponseConsumedCapacityTableTypeDef(
    _ClientGetItemResponseConsumedCapacityTableTypeDef
):
    """
    Type definition for `ClientGetItemResponseConsumedCapacity` `Table`

    The amount of throughput consumed on the table affected by the operation.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed on a table or an index.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed on a table or an index.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed on a table or an index.
    """


_ClientGetItemResponseConsumedCapacityTypeDef = TypedDict(
    "_ClientGetItemResponseConsumedCapacityTypeDef",
    {
        "TableName": str,
        "CapacityUnits": float,
        "ReadCapacityUnits": float,
        "WriteCapacityUnits": float,
        "Table": ClientGetItemResponseConsumedCapacityTableTypeDef,
        "LocalSecondaryIndexes": Dict[
            str, ClientGetItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef
        ],
        "GlobalSecondaryIndexes": Dict[
            str, ClientGetItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef
        ],
    },
    total=False,
)


class ClientGetItemResponseConsumedCapacityTypeDef(_ClientGetItemResponseConsumedCapacityTypeDef):
    """
    Type definition for `ClientGetItemResponse` `ConsumedCapacity`

    The capacity units consumed by the ``GetItem`` operation. The data returned includes the total
    provisioned throughput consumed, along with statistics for the table and any indexes involved in
    the operation. ``ConsumedCapacity`` is only returned if the ``ReturnConsumedCapacity`` parameter
    was specified. For more information, see `Read/Write Capacity Mode
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **TableName** *(string) --*

      The name of the table that was affected by the operation.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed by the operation.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed by the operation.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed by the operation.

    - **Table** *(dict) --*

      The amount of throughput consumed on the table affected by the operation.

      - **ReadCapacityUnits** *(float) --*

        The total number of read capacity units consumed on a table or an index.

      - **WriteCapacityUnits** *(float) --*

        The total number of write capacity units consumed on a table or an index.

      - **CapacityUnits** *(float) --*

        The total number of capacity units consumed on a table or an index.

    - **LocalSecondaryIndexes** *(dict) --*

      The amount of throughput consumed on each local index affected by the operation.

      - *(string) --*

        - *(dict) --*

          Represents the amount of provisioned throughput capacity consumed on a table or an index.

          - **ReadCapacityUnits** *(float) --*

            The total number of read capacity units consumed on a table or an index.

          - **WriteCapacityUnits** *(float) --*

            The total number of write capacity units consumed on a table or an index.

          - **CapacityUnits** *(float) --*

            The total number of capacity units consumed on a table or an index.

    - **GlobalSecondaryIndexes** *(dict) --*

      The amount of throughput consumed on each global index affected by the operation.

      - *(string) --*

        - *(dict) --*

          Represents the amount of provisioned throughput capacity consumed on a table or an index.

          - **ReadCapacityUnits** *(float) --*

            The total number of read capacity units consumed on a table or an index.

          - **WriteCapacityUnits** *(float) --*

            The total number of write capacity units consumed on a table or an index.

          - **CapacityUnits** *(float) --*

            The total number of capacity units consumed on a table or an index.
    """


_ClientGetItemResponseItemTypeDef = TypedDict(
    "_ClientGetItemResponseItemTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class ClientGetItemResponseItemTypeDef(_ClientGetItemResponseItemTypeDef):
    """
    Type definition for `ClientGetItemResponse` `Item`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_ClientGetItemResponseTypeDef = TypedDict(
    "_ClientGetItemResponseTypeDef",
    {
        "Item": Dict[str, ClientGetItemResponseItemTypeDef],
        "ConsumedCapacity": ClientGetItemResponseConsumedCapacityTypeDef,
    },
    total=False,
)


class ClientGetItemResponseTypeDef(_ClientGetItemResponseTypeDef):
    """
    Type definition for `ClientGetItem` `Response`

    Represents the output of a ``GetItem`` operation.

    - **Item** *(dict) --*

      A map of attribute names to ``AttributeValue`` objects, as specified by
      ``ProjectionExpression`` .

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

          - **S** *(string) --*

            An attribute of type String. For example:

             ``"S": "Hello"``

          - **N** *(string) --*

            An attribute of type Number. For example:

             ``"N": "123.45"``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

          - **B** *(bytes) --*

            An attribute of type Binary. For example:

             ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

          - **SS** *(list) --*

            An attribute of type String Set. For example:

             ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

            - *(string) --*

          - **NS** *(list) --*

            An attribute of type Number Set. For example:

             ``"NS": ["42.2", "-19", "7.5", "3.14"]``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

            - *(string) --*

          - **BS** *(list) --*

            An attribute of type Binary Set. For example:

             ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

            - *(bytes) --*

          - **M** *(dict) --*

            An attribute of type Map. For example:

             ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

            - *(string) --*

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

          - **L** *(list) --*

            An attribute of type List. For example:

             ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

            - *(dict) --*

              Represents the data for an attribute.

              Each attribute value is described as a name-value pair. The name is the data type, and
              the value is the data itself.

              For more information, see `Data Types
              <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
              in the *Amazon DynamoDB Developer Guide* .

          - **NULL** *(boolean) --*

            An attribute of type Null. For example:

             ``"NULL": true``

          - **BOOL** *(boolean) --*

            An attribute of type Boolean. For example:

             ``"BOOL": true``

    - **ConsumedCapacity** *(dict) --*

      The capacity units consumed by the ``GetItem`` operation. The data returned includes the total
      provisioned throughput consumed, along with statistics for the table and any indexes involved
      in the operation. ``ConsumedCapacity`` is only returned if the ``ReturnConsumedCapacity``
      parameter was specified. For more information, see `Read/Write Capacity Mode
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html>`__
      in the *Amazon DynamoDB Developer Guide* .

      - **TableName** *(string) --*

        The name of the table that was affected by the operation.

      - **CapacityUnits** *(float) --*

        The total number of capacity units consumed by the operation.

      - **ReadCapacityUnits** *(float) --*

        The total number of read capacity units consumed by the operation.

      - **WriteCapacityUnits** *(float) --*

        The total number of write capacity units consumed by the operation.

      - **Table** *(dict) --*

        The amount of throughput consumed on the table affected by the operation.

        - **ReadCapacityUnits** *(float) --*

          The total number of read capacity units consumed on a table or an index.

        - **WriteCapacityUnits** *(float) --*

          The total number of write capacity units consumed on a table or an index.

        - **CapacityUnits** *(float) --*

          The total number of capacity units consumed on a table or an index.

      - **LocalSecondaryIndexes** *(dict) --*

        The amount of throughput consumed on each local index affected by the operation.

        - *(string) --*

          - *(dict) --*

            Represents the amount of provisioned throughput capacity consumed on a table or an
            index.

            - **ReadCapacityUnits** *(float) --*

              The total number of read capacity units consumed on a table or an index.

            - **WriteCapacityUnits** *(float) --*

              The total number of write capacity units consumed on a table or an index.

            - **CapacityUnits** *(float) --*

              The total number of capacity units consumed on a table or an index.

      - **GlobalSecondaryIndexes** *(dict) --*

        The amount of throughput consumed on each global index affected by the operation.

        - *(string) --*

          - *(dict) --*

            Represents the amount of provisioned throughput capacity consumed on a table or an
            index.

            - **ReadCapacityUnits** *(float) --*

              The total number of read capacity units consumed on a table or an index.

            - **WriteCapacityUnits** *(float) --*

              The total number of write capacity units consumed on a table or an index.

            - **CapacityUnits** *(float) --*

              The total number of capacity units consumed on a table or an index.
    """


_ClientListBackupsResponseBackupSummariesTypeDef = TypedDict(
    "_ClientListBackupsResponseBackupSummariesTypeDef",
    {
        "TableName": str,
        "TableId": str,
        "TableArn": str,
        "BackupArn": str,
        "BackupName": str,
        "BackupCreationDateTime": datetime,
        "BackupExpiryDateTime": datetime,
        "BackupStatus": str,
        "BackupType": str,
        "BackupSizeBytes": int,
    },
    total=False,
)


class ClientListBackupsResponseBackupSummariesTypeDef(
    _ClientListBackupsResponseBackupSummariesTypeDef
):
    """
    Type definition for `ClientListBackupsResponse` `BackupSummaries`

    Contains details for the backup.

    - **TableName** *(string) --*

      Name of the table.

    - **TableId** *(string) --*

      Unique identifier for the table.

    - **TableArn** *(string) --*

      ARN associated with the table.

    - **BackupArn** *(string) --*

      ARN associated with the backup.

    - **BackupName** *(string) --*

      Name of the specified backup.

    - **BackupCreationDateTime** *(datetime) --*

      Time at which the backup was created.

    - **BackupExpiryDateTime** *(datetime) --*

      Time at which the automatic on-demand backup created by DynamoDB will expire. This ``SYSTEM``
      on-demand backup expires automatically 35 days after its creation.

    - **BackupStatus** *(string) --*

      Backup can be in one of the following states: CREATING, ACTIVE, DELETED.

    - **BackupType** *(string) --*

      BackupType:

      * ``USER`` - You create and manage these using the on-demand backup feature.

      * ``SYSTEM`` - If you delete a table with point-in-time recovery enabled, a ``SYSTEM`` backup
      is automatically created and is retained for 35 days (at no additional cost). System backups
      allow you to restore the deleted table to the state it was in just before the point of
      deletion.

      * ``AWS_BACKUP`` - On-demand backup created by you from AWS Backup service.

    - **BackupSizeBytes** *(integer) --*

      Size of the backup in bytes.
    """


_ClientListBackupsResponseTypeDef = TypedDict(
    "_ClientListBackupsResponseTypeDef",
    {
        "BackupSummaries": List[ClientListBackupsResponseBackupSummariesTypeDef],
        "LastEvaluatedBackupArn": str,
    },
    total=False,
)


class ClientListBackupsResponseTypeDef(_ClientListBackupsResponseTypeDef):
    """
    Type definition for `ClientListBackups` `Response`

    - **BackupSummaries** *(list) --*

      List of ``BackupSummary`` objects.

      - *(dict) --*

        Contains details for the backup.

        - **TableName** *(string) --*

          Name of the table.

        - **TableId** *(string) --*

          Unique identifier for the table.

        - **TableArn** *(string) --*

          ARN associated with the table.

        - **BackupArn** *(string) --*

          ARN associated with the backup.

        - **BackupName** *(string) --*

          Name of the specified backup.

        - **BackupCreationDateTime** *(datetime) --*

          Time at which the backup was created.

        - **BackupExpiryDateTime** *(datetime) --*

          Time at which the automatic on-demand backup created by DynamoDB will expire. This
          ``SYSTEM`` on-demand backup expires automatically 35 days after its creation.

        - **BackupStatus** *(string) --*

          Backup can be in one of the following states: CREATING, ACTIVE, DELETED.

        - **BackupType** *(string) --*

          BackupType:

          * ``USER`` - You create and manage these using the on-demand backup feature.

          * ``SYSTEM`` - If you delete a table with point-in-time recovery enabled, a ``SYSTEM``
          backup is automatically created and is retained for 35 days (at no additional cost).
          System backups allow you to restore the deleted table to the state it was in just before
          the point of deletion.

          * ``AWS_BACKUP`` - On-demand backup created by you from AWS Backup service.

        - **BackupSizeBytes** *(integer) --*

          Size of the backup in bytes.

    - **LastEvaluatedBackupArn** *(string) --*

      The ARN of the backup last evaluated when the current page of results was returned, inclusive
      of the current page of results. This value may be specified as the ``ExclusiveStartBackupArn``
      of a new ``ListBackups`` operation in order to fetch the next page of results.

      If ``LastEvaluatedBackupArn`` is empty, then the last page of results has been processed and
      there are no more results to be retrieved.

      If ``LastEvaluatedBackupArn`` is not empty, this may or may not indicate that there is more
      data to be returned. All results are guaranteed to have been returned if and only if no value
      for ``LastEvaluatedBackupArn`` is returned.
    """


_ClientListContributorInsightsResponseContributorInsightsSummariesTypeDef = TypedDict(
    "_ClientListContributorInsightsResponseContributorInsightsSummariesTypeDef",
    {"TableName": str, "IndexName": str, "ContributorInsightsStatus": str},
    total=False,
)


class ClientListContributorInsightsResponseContributorInsightsSummariesTypeDef(
    _ClientListContributorInsightsResponseContributorInsightsSummariesTypeDef
):
    """
    Type definition for `ClientListContributorInsightsResponse` `ContributorInsightsSummaries`

    Represents a Contributor Insights summary entry..

    - **TableName** *(string) --*

      Name of the table associated with the summary.

    - **IndexName** *(string) --*

      Name of the index associated with the summary, if any.

    - **ContributorInsightsStatus** *(string) --*

      Describes the current status for contributor insights for the given table and index, if
      applicable.
    """


_ClientListContributorInsightsResponseTypeDef = TypedDict(
    "_ClientListContributorInsightsResponseTypeDef",
    {
        "ContributorInsightsSummaries": List[
            ClientListContributorInsightsResponseContributorInsightsSummariesTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)


class ClientListContributorInsightsResponseTypeDef(_ClientListContributorInsightsResponseTypeDef):
    """
    Type definition for `ClientListContributorInsights` `Response`

    - **ContributorInsightsSummaries** *(list) --*

      A list of ContributorInsightsSummary.

      - *(dict) --*

        Represents a Contributor Insights summary entry..

        - **TableName** *(string) --*

          Name of the table associated with the summary.

        - **IndexName** *(string) --*

          Name of the index associated with the summary, if any.

        - **ContributorInsightsStatus** *(string) --*

          Describes the current status for contributor insights for the given table and index, if
          applicable.

    - **NextToken** *(string) --*

      A token to go to the next page if there is one.
    """


_ClientListGlobalTablesResponseGlobalTablesReplicationGroupTypeDef = TypedDict(
    "_ClientListGlobalTablesResponseGlobalTablesReplicationGroupTypeDef",
    {"RegionName": str},
    total=False,
)


class ClientListGlobalTablesResponseGlobalTablesReplicationGroupTypeDef(
    _ClientListGlobalTablesResponseGlobalTablesReplicationGroupTypeDef
):
    """
    Type definition for `ClientListGlobalTablesResponseGlobalTables` `ReplicationGroup`

    Represents the properties of a replica.

    - **RegionName** *(string) --*

      The Region where the replica needs to be created.
    """


_ClientListGlobalTablesResponseGlobalTablesTypeDef = TypedDict(
    "_ClientListGlobalTablesResponseGlobalTablesTypeDef",
    {
        "GlobalTableName": str,
        "ReplicationGroup": List[ClientListGlobalTablesResponseGlobalTablesReplicationGroupTypeDef],
    },
    total=False,
)


class ClientListGlobalTablesResponseGlobalTablesTypeDef(
    _ClientListGlobalTablesResponseGlobalTablesTypeDef
):
    """
    Type definition for `ClientListGlobalTablesResponse` `GlobalTables`

    Represents the properties of a global table.

    - **GlobalTableName** *(string) --*

      The global table name.

    - **ReplicationGroup** *(list) --*

      The Regions where the global table has replicas.

      - *(dict) --*

        Represents the properties of a replica.

        - **RegionName** *(string) --*

          The Region where the replica needs to be created.
    """


_ClientListGlobalTablesResponseTypeDef = TypedDict(
    "_ClientListGlobalTablesResponseTypeDef",
    {
        "GlobalTables": List[ClientListGlobalTablesResponseGlobalTablesTypeDef],
        "LastEvaluatedGlobalTableName": str,
    },
    total=False,
)


class ClientListGlobalTablesResponseTypeDef(_ClientListGlobalTablesResponseTypeDef):
    """
    Type definition for `ClientListGlobalTables` `Response`

    - **GlobalTables** *(list) --*

      List of global table names.

      - *(dict) --*

        Represents the properties of a global table.

        - **GlobalTableName** *(string) --*

          The global table name.

        - **ReplicationGroup** *(list) --*

          The Regions where the global table has replicas.

          - *(dict) --*

            Represents the properties of a replica.

            - **RegionName** *(string) --*

              The Region where the replica needs to be created.

    - **LastEvaluatedGlobalTableName** *(string) --*

      Last evaluated global table name.
    """


_ClientListTablesResponseTypeDef = TypedDict(
    "_ClientListTablesResponseTypeDef",
    {"TableNames": List[str], "LastEvaluatedTableName": str},
    total=False,
)


class ClientListTablesResponseTypeDef(_ClientListTablesResponseTypeDef):
    """
    Type definition for `ClientListTables` `Response`

    Represents the output of a ``ListTables`` operation.

    - **TableNames** *(list) --*

      The names of the tables associated with the current account at the current endpoint. The
      maximum size of this array is 100.

      If ``LastEvaluatedTableName`` also appears in the output, you can use this value as the
      ``ExclusiveStartTableName`` parameter in a subsequent ``ListTables`` request and obtain the
      next page of results.

      - *(string) --*

    - **LastEvaluatedTableName** *(string) --*

      The name of the last table in the current page of results. Use this value as the
      ``ExclusiveStartTableName`` in a new request to obtain the next page of results, until all the
      table names are returned.

      If you do not receive a ``LastEvaluatedTableName`` value in the response, this means that
      there are no more table names to be retrieved.
    """


_ClientListTagsOfResourceResponseTagsTypeDef = TypedDict(
    "_ClientListTagsOfResourceResponseTagsTypeDef", {"Key": str, "Value": str}, total=False
)


class ClientListTagsOfResourceResponseTagsTypeDef(_ClientListTagsOfResourceResponseTagsTypeDef):
    """
    Type definition for `ClientListTagsOfResourceResponse` `Tags`

    Describes a tag. A tag is a key-value pair. You can add up to 50 tags to a single DynamoDB
    table.

    AWS-assigned tag names and values are automatically assigned the ``aws:`` prefix, which the user
    cannot assign. AWS-assigned tag names do not count towards the tag limit of 50. User-assigned
    tag names have the prefix ``user:`` in the Cost Allocation Report. You cannot backdate the
    application of a tag.

    For an overview on tagging DynamoDB resources, see `Tagging for DynamoDB
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tagging.html>`__ in the
    *Amazon DynamoDB Developer Guide* .

    - **Key** *(string) --*

      The key of the tag. Tag keys are case sensitive. Each DynamoDB table can only have up to one
      tag with the same key. If you try to add an existing tag (same key), the existing tag value
      will be updated to the new value.

    - **Value** *(string) --*

      The value of the tag. Tag values are case-sensitive and can be null.
    """


_ClientListTagsOfResourceResponseTypeDef = TypedDict(
    "_ClientListTagsOfResourceResponseTypeDef",
    {"Tags": List[ClientListTagsOfResourceResponseTagsTypeDef], "NextToken": str},
    total=False,
)


class ClientListTagsOfResourceResponseTypeDef(_ClientListTagsOfResourceResponseTypeDef):
    """
    Type definition for `ClientListTagsOfResource` `Response`

    - **Tags** *(list) --*

      The tags currently associated with the Amazon DynamoDB resource.

      - *(dict) --*

        Describes a tag. A tag is a key-value pair. You can add up to 50 tags to a single DynamoDB
        table.

        AWS-assigned tag names and values are automatically assigned the ``aws:`` prefix, which the
        user cannot assign. AWS-assigned tag names do not count towards the tag limit of 50.
        User-assigned tag names have the prefix ``user:`` in the Cost Allocation Report. You cannot
        backdate the application of a tag.

        For an overview on tagging DynamoDB resources, see `Tagging for DynamoDB
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tagging.html>`__ in the
        *Amazon DynamoDB Developer Guide* .

        - **Key** *(string) --*

          The key of the tag. Tag keys are case sensitive. Each DynamoDB table can only have up to
          one tag with the same key. If you try to add an existing tag (same key), the existing tag
          value will be updated to the new value.

        - **Value** *(string) --*

          The value of the tag. Tag values are case-sensitive and can be null.

    - **NextToken** *(string) --*

      If this value is returned, there are additional results to be displayed. To retrieve them,
      call ListTagsOfResource again, with NextToken set to this value.
    """


_ClientPutItemExpectedAttributeValueListTypeDef = TypedDict(
    "_ClientPutItemExpectedAttributeValueListTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class ClientPutItemExpectedAttributeValueListTypeDef(
    _ClientPutItemExpectedAttributeValueListTypeDef
):
    """
    Type definition for `ClientPutItemExpected` `AttributeValueList`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_ClientPutItemExpectedValueTypeDef = TypedDict(
    "_ClientPutItemExpectedValueTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class ClientPutItemExpectedValueTypeDef(_ClientPutItemExpectedValueTypeDef):
    """
    Type definition for `ClientPutItemExpected` `Value`

    Represents the data for the expected attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_ClientPutItemExpectedTypeDef = TypedDict(
    "_ClientPutItemExpectedTypeDef",
    {
        "Value": ClientPutItemExpectedValueTypeDef,
        "Exists": bool,
        "ComparisonOperator": str,
        "AttributeValueList": List[ClientPutItemExpectedAttributeValueListTypeDef],
    },
    total=False,
)


class ClientPutItemExpectedTypeDef(_ClientPutItemExpectedTypeDef):
    """
    Type definition for `ClientPutItem` `Expected`

    Represents a condition to be compared with an attribute value. This condition can be used with
    ``DeleteItem`` , ``PutItem`` , or ``UpdateItem`` operations; if the comparison evaluates to
    true, the operation succeeds; if not, the operation fails. You can use
    ``ExpectedAttributeValue`` in one of two different ways:

    * Use ``AttributeValueList`` to specify one or more values to compare against an attribute. Use
    ``ComparisonOperator`` to specify how you want to perform the comparison. If the comparison
    evaluates to true, then the conditional operation succeeds.

    * Use ``Value`` to specify a value that DynamoDB will compare against an attribute. If the
    values match, then ``ExpectedAttributeValue`` evaluates to true and the conditional operation
    succeeds. Optionally, you can also set ``Exists`` to false, indicating that you *do not* expect
    to find the attribute value in the table. In this case, the conditional operation succeeds only
    if the comparison evaluates to false.

     ``Value`` and ``Exists`` are incompatible with ``AttributeValueList`` and
     ``ComparisonOperator`` . Note that if you use both sets of parameters at once, DynamoDB will
     return a ``ValidationException`` exception.

    - **Value** *(dict) --*

      Represents the data for the expected attribute.

      Each attribute value is described as a name-value pair. The name is the data type, and the
      value is the data itself.

      For more information, see `Data Types
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
      in the *Amazon DynamoDB Developer Guide* .

      - **S** *(string) --*

        An attribute of type String. For example:

         ``"S": "Hello"``

      - **N** *(string) --*

        An attribute of type Number. For example:

         ``"N": "123.45"``

        Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
        languages and libraries. However, DynamoDB treats them as number type attributes for
        mathematical operations.

      - **B** *(bytes) --*

        An attribute of type Binary. For example:

         ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

      - **SS** *(list) --*

        An attribute of type String Set. For example:

         ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

        - *(string) --*

      - **NS** *(list) --*

        An attribute of type Number Set. For example:

         ``"NS": ["42.2", "-19", "7.5", "3.14"]``

        Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
        languages and libraries. However, DynamoDB treats them as number type attributes for
        mathematical operations.

        - *(string) --*

      - **BS** *(list) --*

        An attribute of type Binary Set. For example:

         ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

        - *(bytes) --*

      - **M** *(dict) --*

        An attribute of type Map. For example:

         ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

        - *(string) --*

          - *(dict) --*

            Represents the data for an attribute.

            Each attribute value is described as a name-value pair. The name is the data type, and
            the value is the data itself.

            For more information, see `Data Types
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
            in the *Amazon DynamoDB Developer Guide* .

      - **L** *(list) --*

        An attribute of type List. For example:

         ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

      - **NULL** *(boolean) --*

        An attribute of type Null. For example:

         ``"NULL": true``

      - **BOOL** *(boolean) --*

        An attribute of type Boolean. For example:

         ``"BOOL": true``

    - **Exists** *(boolean) --*

      Causes DynamoDB to evaluate the value before attempting a conditional operation:

      * If ``Exists`` is ``true`` , DynamoDB will check to see if that attribute value already
      exists in the table. If it is found, then the operation succeeds. If it is not found, the
      operation fails with a ``ConditionCheckFailedException`` .

      * If ``Exists`` is ``false`` , DynamoDB assumes that the attribute value does not exist in the
      table. If in fact the value does not exist, then the assumption is valid and the operation
      succeeds. If the value is found, despite the assumption that it does not exist, the operation
      fails with a ``ConditionCheckFailedException`` .

      The default setting for ``Exists`` is ``true`` . If you supply a ``Value`` all by itself,
      DynamoDB assumes the attribute exists: You don't have to set ``Exists`` to ``true`` , because
      it is implied.

      DynamoDB returns a ``ValidationException`` if:

      * ``Exists`` is ``true`` but there is no ``Value`` to check. (You expect a value to exist, but
      don't specify what that value is.)

      * ``Exists`` is ``false`` but you also provide a ``Value`` . (You cannot expect an attribute
      to have a value, while also expecting it not to exist.)

    - **ComparisonOperator** *(string) --*

      A comparator for evaluating attributes in the ``AttributeValueList`` . For example, equals,
      greater than, less than, etc.

      The following comparison operators are available:

       ``EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH
       | IN
       | BETWEEN``

      The following are descriptions of each comparison operator.

      * ``EQ`` : Equal. ``EQ`` is supported for all data types, including lists and maps.
      ``AttributeValueList`` can contain only one ``AttributeValue`` element of type String, Number,
      Binary, String Set, Number Set, or Binary Set. If an item contains an ``AttributeValue``
      element of a different type than the one provided in the request, the value does not match.
      For example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` . Also, ``{"N":"6"}`` does not equal
      ``{"NS":["6", "2", "1"]}`` .

      * ``NE`` : Not equal. ``NE`` is supported for all data types, including lists and maps.
      ``AttributeValueList`` can contain only one ``AttributeValue`` of type String, Number, Binary,
      String Set, Number Set, or Binary Set. If an item contains an ``AttributeValue`` of a
      different type than the one provided in the request, the value does not match. For example,
      ``{"S":"6"}`` does not equal ``{"N":"6"}`` . Also, ``{"N":"6"}`` does not equal ``{"NS":["6",
      "2", "1"]}`` .

      * ``LE`` : Less than or equal.   ``AttributeValueList`` can contain only one
      ``AttributeValue`` element of type String, Number, or Binary (not a set type). If an item
      contains an ``AttributeValue`` element of a different type than the one provided in the
      request, the value does not match. For example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` .
      Also, ``{"N":"6"}`` does not compare to ``{"NS":["6", "2", "1"]}`` .

      * ``LT`` : Less than.   ``AttributeValueList`` can contain only one ``AttributeValue`` of type
      String, Number, or Binary (not a set type). If an item contains an ``AttributeValue`` element
      of a different type than the one provided in the request, the value does not match. For
      example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` . Also, ``{"N":"6"}`` does not compare to
      ``{"NS":["6", "2", "1"]}`` .

      * ``GE`` : Greater than or equal.   ``AttributeValueList`` can contain only one
      ``AttributeValue`` element of type String, Number, or Binary (not a set type). If an item
      contains an ``AttributeValue`` element of a different type than the one provided in the
      request, the value does not match. For example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` .
      Also, ``{"N":"6"}`` does not compare to ``{"NS":["6", "2", "1"]}`` .

      * ``GT`` : Greater than.   ``AttributeValueList`` can contain only one ``AttributeValue``
      element of type String, Number, or Binary (not a set type). If an item contains an
      ``AttributeValue`` element of a different type than the one provided in the request, the value
      does not match. For example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` . Also, ``{"N":"6"}``
      does not compare to ``{"NS":["6", "2", "1"]}`` .

      * ``NOT_NULL`` : The attribute exists. ``NOT_NULL`` is supported for all data types, including
      lists and maps.

      .. note::

         This operator tests for the existence of an attribute, not its data type. If the data type
         of attribute "``a`` " is null, and you evaluate it using ``NOT_NULL`` , the result is a
         Boolean ``true`` . This result is because the attribute "``a`` " exists; its data type is
         not relevant to the ``NOT_NULL`` comparison operator.

      * ``NULL`` : The attribute does not exist. ``NULL`` is supported for all data types, including
      lists and maps.

      .. note::

         This operator tests for the nonexistence of an attribute, not its data type. If the data
         type of attribute "``a`` " is null, and you evaluate it using ``NULL`` , the result is a
         Boolean ``false`` . This is because the attribute "``a`` " exists; its data type is not
         relevant to the ``NULL`` comparison operator.

      * ``CONTAINS`` : Checks for a subsequence, or value in a set.  ``AttributeValueList`` can
      contain only one ``AttributeValue`` element of type String, Number, or Binary (not a set
      type). If the target attribute of the comparison is of type String, then the operator checks
      for a substring match. If the target attribute of the comparison is of type Binary, then the
      operator looks for a subsequence of the target that matches the input. If the target attribute
      of the comparison is a set ("``SS`` ", "``NS`` ", or "``BS`` "), then the operator evaluates
      to true if it finds an exact match with any member of the set. CONTAINS is supported for
      lists: When evaluating "``a CONTAINS b`` ", "``a`` " can be a list; however, "``b`` " cannot
      be a set, a map, or a list.

      * ``NOT_CONTAINS`` : Checks for absence of a subsequence, or absence of a value in a set.
      ``AttributeValueList`` can contain only one ``AttributeValue`` element of type String, Number,
      or Binary (not a set type). If the target attribute of the comparison is a String, then the
      operator checks for the absence of a substring match. If the target attribute of the
      comparison is Binary, then the operator checks for the absence of a subsequence of the target
      that matches the input. If the target attribute of the comparison is a set ("``SS`` ", "``NS``
      ", or "``BS`` "), then the operator evaluates to true if it *does not* find an exact match
      with any member of the set. NOT_CONTAINS is supported for lists: When evaluating "``a NOT
      CONTAINS b`` ", "``a`` " can be a list; however, "``b`` " cannot be a set, a map, or a list.

      * ``BEGINS_WITH`` : Checks for a prefix.   ``AttributeValueList`` can contain only one
      ``AttributeValue`` of type String or Binary (not a Number or a set type). The target attribute
      of the comparison must be of type String or Binary (not a Number or a set type).

      * ``IN`` : Checks for matching elements in a list.  ``AttributeValueList`` can contain one or
      more ``AttributeValue`` elements of type String, Number, or Binary. These attributes are
      compared against an existing attribute of an item. If any elements of the input are equal to
      the item attribute, the expression evaluates to true.

      * ``BETWEEN`` : Greater than or equal to the first value, and less than or equal to the second
      value.   ``AttributeValueList`` must contain two ``AttributeValue`` elements of the same type,
      either String, Number, or Binary (not a set type). A target attribute matches if the target
      value is greater than, or equal to, the first element and less than, or equal to, the second
      element. If an item contains an ``AttributeValue`` element of a different type than the one
      provided in the request, the value does not match. For example, ``{"S":"6"}`` does not compare
      to ``{"N":"6"}`` . Also, ``{"N":"6"}`` does not compare to ``{"NS":["6", "2", "1"]}``

    - **AttributeValueList** *(list) --*

      One or more values to evaluate against the supplied attribute. The number of values in the
      list depends on the ``ComparisonOperator`` being used.

      For type Number, value comparisons are numeric.

      String value comparisons for greater than, equals, or less than are based on ASCII character
      code values. For example, ``a`` is greater than ``A`` , and ``a`` is greater than ``B`` . For
      a list of code values, see `http\\://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters
      <http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters>`__ .

      For Binary, DynamoDB treats each byte of the binary data as unsigned when it compares binary
      values.

      For information on specifying data types in JSON, see `JSON Data Format
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataFormat.html>`__ in the
      *Amazon DynamoDB Developer Guide* .

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

        - **S** *(string) --*

          An attribute of type String. For example:

           ``"S": "Hello"``

        - **N** *(string) --*

          An attribute of type Number. For example:

           ``"N": "123.45"``

          Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
          across languages and libraries. However, DynamoDB treats them as number type attributes
          for mathematical operations.

        - **B** *(bytes) --*

          An attribute of type Binary. For example:

           ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

        - **SS** *(list) --*

          An attribute of type String Set. For example:

           ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

          - *(string) --*

        - **NS** *(list) --*

          An attribute of type Number Set. For example:

           ``"NS": ["42.2", "-19", "7.5", "3.14"]``

          Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
          across languages and libraries. However, DynamoDB treats them as number type attributes
          for mathematical operations.

          - *(string) --*

        - **BS** *(list) --*

          An attribute of type Binary Set. For example:

           ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

          - *(bytes) --*

        - **M** *(dict) --*

          An attribute of type Map. For example:

           ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

          - *(string) --*

            - *(dict) --*

              Represents the data for an attribute.

              Each attribute value is described as a name-value pair. The name is the data type, and
              the value is the data itself.

              For more information, see `Data Types
              <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
              in the *Amazon DynamoDB Developer Guide* .

        - **L** *(list) --*

          An attribute of type List. For example:

           ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

          - *(dict) --*

            Represents the data for an attribute.

            Each attribute value is described as a name-value pair. The name is the data type, and
            the value is the data itself.

            For more information, see `Data Types
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
            in the *Amazon DynamoDB Developer Guide* .

        - **NULL** *(boolean) --*

          An attribute of type Null. For example:

           ``"NULL": true``

        - **BOOL** *(boolean) --*

          An attribute of type Boolean. For example:

           ``"BOOL": true``
    """


_ClientPutItemExpressionAttributeValuesTypeDef = TypedDict(
    "_ClientPutItemExpressionAttributeValuesTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class ClientPutItemExpressionAttributeValuesTypeDef(_ClientPutItemExpressionAttributeValuesTypeDef):
    """
    Type definition for `ClientPutItem` `ExpressionAttributeValues`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_ClientPutItemItemTypeDef = TypedDict(
    "_ClientPutItemItemTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class ClientPutItemItemTypeDef(_ClientPutItemItemTypeDef):
    """
    Type definition for `ClientPutItem` `Item`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_ClientPutItemResponseAttributesTypeDef = TypedDict(
    "_ClientPutItemResponseAttributesTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class ClientPutItemResponseAttributesTypeDef(_ClientPutItemResponseAttributesTypeDef):
    """
    Type definition for `ClientPutItemResponse` `Attributes`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_ClientPutItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef = TypedDict(
    "_ClientPutItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef",
    {"ReadCapacityUnits": float, "WriteCapacityUnits": float, "CapacityUnits": float},
    total=False,
)


class ClientPutItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef(
    _ClientPutItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef
):
    """
    Type definition for `ClientPutItemResponseConsumedCapacity` `GlobalSecondaryIndexes`

    Represents the amount of provisioned throughput capacity consumed on a table or an index.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed on a table or an index.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed on a table or an index.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed on a table or an index.
    """


_ClientPutItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef = TypedDict(
    "_ClientPutItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef",
    {"ReadCapacityUnits": float, "WriteCapacityUnits": float, "CapacityUnits": float},
    total=False,
)


class ClientPutItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef(
    _ClientPutItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef
):
    """
    Type definition for `ClientPutItemResponseConsumedCapacity` `LocalSecondaryIndexes`

    Represents the amount of provisioned throughput capacity consumed on a table or an index.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed on a table or an index.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed on a table or an index.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed on a table or an index.
    """


_ClientPutItemResponseConsumedCapacityTableTypeDef = TypedDict(
    "_ClientPutItemResponseConsumedCapacityTableTypeDef",
    {"ReadCapacityUnits": float, "WriteCapacityUnits": float, "CapacityUnits": float},
    total=False,
)


class ClientPutItemResponseConsumedCapacityTableTypeDef(
    _ClientPutItemResponseConsumedCapacityTableTypeDef
):
    """
    Type definition for `ClientPutItemResponseConsumedCapacity` `Table`

    The amount of throughput consumed on the table affected by the operation.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed on a table or an index.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed on a table or an index.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed on a table or an index.
    """


_ClientPutItemResponseConsumedCapacityTypeDef = TypedDict(
    "_ClientPutItemResponseConsumedCapacityTypeDef",
    {
        "TableName": str,
        "CapacityUnits": float,
        "ReadCapacityUnits": float,
        "WriteCapacityUnits": float,
        "Table": ClientPutItemResponseConsumedCapacityTableTypeDef,
        "LocalSecondaryIndexes": Dict[
            str, ClientPutItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef
        ],
        "GlobalSecondaryIndexes": Dict[
            str, ClientPutItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef
        ],
    },
    total=False,
)


class ClientPutItemResponseConsumedCapacityTypeDef(_ClientPutItemResponseConsumedCapacityTypeDef):
    """
    Type definition for `ClientPutItemResponse` `ConsumedCapacity`

    The capacity units consumed by the ``PutItem`` operation. The data returned includes the total
    provisioned throughput consumed, along with statistics for the table and any indexes involved in
    the operation. ``ConsumedCapacity`` is only returned if the ``ReturnConsumedCapacity`` parameter
    was specified. For more information, see `Read/Write Capacity Mode
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **TableName** *(string) --*

      The name of the table that was affected by the operation.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed by the operation.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed by the operation.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed by the operation.

    - **Table** *(dict) --*

      The amount of throughput consumed on the table affected by the operation.

      - **ReadCapacityUnits** *(float) --*

        The total number of read capacity units consumed on a table or an index.

      - **WriteCapacityUnits** *(float) --*

        The total number of write capacity units consumed on a table or an index.

      - **CapacityUnits** *(float) --*

        The total number of capacity units consumed on a table or an index.

    - **LocalSecondaryIndexes** *(dict) --*

      The amount of throughput consumed on each local index affected by the operation.

      - *(string) --*

        - *(dict) --*

          Represents the amount of provisioned throughput capacity consumed on a table or an index.

          - **ReadCapacityUnits** *(float) --*

            The total number of read capacity units consumed on a table or an index.

          - **WriteCapacityUnits** *(float) --*

            The total number of write capacity units consumed on a table or an index.

          - **CapacityUnits** *(float) --*

            The total number of capacity units consumed on a table or an index.

    - **GlobalSecondaryIndexes** *(dict) --*

      The amount of throughput consumed on each global index affected by the operation.

      - *(string) --*

        - *(dict) --*

          Represents the amount of provisioned throughput capacity consumed on a table or an index.

          - **ReadCapacityUnits** *(float) --*

            The total number of read capacity units consumed on a table or an index.

          - **WriteCapacityUnits** *(float) --*

            The total number of write capacity units consumed on a table or an index.

          - **CapacityUnits** *(float) --*

            The total number of capacity units consumed on a table or an index.
    """


_ClientPutItemResponseItemCollectionMetricsItemCollectionKeyTypeDef = TypedDict(
    "_ClientPutItemResponseItemCollectionMetricsItemCollectionKeyTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class ClientPutItemResponseItemCollectionMetricsItemCollectionKeyTypeDef(
    _ClientPutItemResponseItemCollectionMetricsItemCollectionKeyTypeDef
):
    """
    Type definition for `ClientPutItemResponseItemCollectionMetrics` `ItemCollectionKey`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_ClientPutItemResponseItemCollectionMetricsTypeDef = TypedDict(
    "_ClientPutItemResponseItemCollectionMetricsTypeDef",
    {
        "ItemCollectionKey": Dict[
            str, ClientPutItemResponseItemCollectionMetricsItemCollectionKeyTypeDef
        ],
        "SizeEstimateRangeGB": List[float],
    },
    total=False,
)


class ClientPutItemResponseItemCollectionMetricsTypeDef(
    _ClientPutItemResponseItemCollectionMetricsTypeDef
):
    """
    Type definition for `ClientPutItemResponse` `ItemCollectionMetrics`

    Information about item collections, if any, that were affected by the ``PutItem`` operation.
    ``ItemCollectionMetrics`` is only returned if the ``ReturnItemCollectionMetrics`` parameter was
    specified. If the table does not have any local secondary indexes, this information is not
    returned in the response.

    Each ``ItemCollectionMetrics`` element consists of:

    * ``ItemCollectionKey`` - The partition key value of the item collection. This is the same as
    the partition key value of the item itself.

    * ``SizeEstimateRangeGB`` - An estimate of item collection size, in gigabytes. This value is a
    two-element array containing a lower bound and an upper bound for the estimate. The estimate
    includes the size of all the items in the table, plus the size of all attributes projected into
    all of the local secondary indexes on that table. Use this estimate to measure whether a local
    secondary index is approaching its size limit. The estimate is subject to change over time;
    therefore, do not rely on the precision or accuracy of the estimate.

    - **ItemCollectionKey** *(dict) --*

      The partition key value of the item collection. This value is the same as the partition key
      value of the item.

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

          - **S** *(string) --*

            An attribute of type String. For example:

             ``"S": "Hello"``

          - **N** *(string) --*

            An attribute of type Number. For example:

             ``"N": "123.45"``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

          - **B** *(bytes) --*

            An attribute of type Binary. For example:

             ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

          - **SS** *(list) --*

            An attribute of type String Set. For example:

             ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

            - *(string) --*

          - **NS** *(list) --*

            An attribute of type Number Set. For example:

             ``"NS": ["42.2", "-19", "7.5", "3.14"]``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

            - *(string) --*

          - **BS** *(list) --*

            An attribute of type Binary Set. For example:

             ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

            - *(bytes) --*

          - **M** *(dict) --*

            An attribute of type Map. For example:

             ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

            - *(string) --*

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

          - **L** *(list) --*

            An attribute of type List. For example:

             ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

            - *(dict) --*

              Represents the data for an attribute.

              Each attribute value is described as a name-value pair. The name is the data type, and
              the value is the data itself.

              For more information, see `Data Types
              <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
              in the *Amazon DynamoDB Developer Guide* .

          - **NULL** *(boolean) --*

            An attribute of type Null. For example:

             ``"NULL": true``

          - **BOOL** *(boolean) --*

            An attribute of type Boolean. For example:

             ``"BOOL": true``

    - **SizeEstimateRangeGB** *(list) --*

      An estimate of item collection size, in gigabytes. This value is a two-element array
      containing a lower bound and an upper bound for the estimate. The estimate includes the size
      of all the items in the table, plus the size of all attributes projected into all of the local
      secondary indexes on that table. Use this estimate to measure whether a local secondary index
      is approaching its size limit.

      The estimate is subject to change over time; therefore, do not rely on the precision or
      accuracy of the estimate.

      - *(float) --*
    """


_ClientPutItemResponseTypeDef = TypedDict(
    "_ClientPutItemResponseTypeDef",
    {
        "Attributes": Dict[str, ClientPutItemResponseAttributesTypeDef],
        "ConsumedCapacity": ClientPutItemResponseConsumedCapacityTypeDef,
        "ItemCollectionMetrics": ClientPutItemResponseItemCollectionMetricsTypeDef,
    },
    total=False,
)


class ClientPutItemResponseTypeDef(_ClientPutItemResponseTypeDef):
    """
    Type definition for `ClientPutItem` `Response`

    Represents the output of a ``PutItem`` operation.

    - **Attributes** *(dict) --*

      The attribute values as they appeared before the ``PutItem`` operation, but only if
      ``ReturnValues`` is specified as ``ALL_OLD`` in the request. Each element consists of an
      attribute name and an attribute value.

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

          - **S** *(string) --*

            An attribute of type String. For example:

             ``"S": "Hello"``

          - **N** *(string) --*

            An attribute of type Number. For example:

             ``"N": "123.45"``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

          - **B** *(bytes) --*

            An attribute of type Binary. For example:

             ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

          - **SS** *(list) --*

            An attribute of type String Set. For example:

             ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

            - *(string) --*

          - **NS** *(list) --*

            An attribute of type Number Set. For example:

             ``"NS": ["42.2", "-19", "7.5", "3.14"]``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

            - *(string) --*

          - **BS** *(list) --*

            An attribute of type Binary Set. For example:

             ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

            - *(bytes) --*

          - **M** *(dict) --*

            An attribute of type Map. For example:

             ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

            - *(string) --*

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

          - **L** *(list) --*

            An attribute of type List. For example:

             ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

            - *(dict) --*

              Represents the data for an attribute.

              Each attribute value is described as a name-value pair. The name is the data type, and
              the value is the data itself.

              For more information, see `Data Types
              <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
              in the *Amazon DynamoDB Developer Guide* .

          - **NULL** *(boolean) --*

            An attribute of type Null. For example:

             ``"NULL": true``

          - **BOOL** *(boolean) --*

            An attribute of type Boolean. For example:

             ``"BOOL": true``

    - **ConsumedCapacity** *(dict) --*

      The capacity units consumed by the ``PutItem`` operation. The data returned includes the total
      provisioned throughput consumed, along with statistics for the table and any indexes involved
      in the operation. ``ConsumedCapacity`` is only returned if the ``ReturnConsumedCapacity``
      parameter was specified. For more information, see `Read/Write Capacity Mode
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html>`__
      in the *Amazon DynamoDB Developer Guide* .

      - **TableName** *(string) --*

        The name of the table that was affected by the operation.

      - **CapacityUnits** *(float) --*

        The total number of capacity units consumed by the operation.

      - **ReadCapacityUnits** *(float) --*

        The total number of read capacity units consumed by the operation.

      - **WriteCapacityUnits** *(float) --*

        The total number of write capacity units consumed by the operation.

      - **Table** *(dict) --*

        The amount of throughput consumed on the table affected by the operation.

        - **ReadCapacityUnits** *(float) --*

          The total number of read capacity units consumed on a table or an index.

        - **WriteCapacityUnits** *(float) --*

          The total number of write capacity units consumed on a table or an index.

        - **CapacityUnits** *(float) --*

          The total number of capacity units consumed on a table or an index.

      - **LocalSecondaryIndexes** *(dict) --*

        The amount of throughput consumed on each local index affected by the operation.

        - *(string) --*

          - *(dict) --*

            Represents the amount of provisioned throughput capacity consumed on a table or an
            index.

            - **ReadCapacityUnits** *(float) --*

              The total number of read capacity units consumed on a table or an index.

            - **WriteCapacityUnits** *(float) --*

              The total number of write capacity units consumed on a table or an index.

            - **CapacityUnits** *(float) --*

              The total number of capacity units consumed on a table or an index.

      - **GlobalSecondaryIndexes** *(dict) --*

        The amount of throughput consumed on each global index affected by the operation.

        - *(string) --*

          - *(dict) --*

            Represents the amount of provisioned throughput capacity consumed on a table or an
            index.

            - **ReadCapacityUnits** *(float) --*

              The total number of read capacity units consumed on a table or an index.

            - **WriteCapacityUnits** *(float) --*

              The total number of write capacity units consumed on a table or an index.

            - **CapacityUnits** *(float) --*

              The total number of capacity units consumed on a table or an index.

    - **ItemCollectionMetrics** *(dict) --*

      Information about item collections, if any, that were affected by the ``PutItem`` operation.
      ``ItemCollectionMetrics`` is only returned if the ``ReturnItemCollectionMetrics`` parameter
      was specified. If the table does not have any local secondary indexes, this information is not
      returned in the response.

      Each ``ItemCollectionMetrics`` element consists of:

      * ``ItemCollectionKey`` - The partition key value of the item collection. This is the same as
      the partition key value of the item itself.

      * ``SizeEstimateRangeGB`` - An estimate of item collection size, in gigabytes. This value is a
      two-element array containing a lower bound and an upper bound for the estimate. The estimate
      includes the size of all the items in the table, plus the size of all attributes projected
      into all of the local secondary indexes on that table. Use this estimate to measure whether a
      local secondary index is approaching its size limit. The estimate is subject to change over
      time; therefore, do not rely on the precision or accuracy of the estimate.

      - **ItemCollectionKey** *(dict) --*

        The partition key value of the item collection. This value is the same as the partition key
        value of the item.

        - *(string) --*

          - *(dict) --*

            Represents the data for an attribute.

            Each attribute value is described as a name-value pair. The name is the data type, and
            the value is the data itself.

            For more information, see `Data Types
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
            in the *Amazon DynamoDB Developer Guide* .

            - **S** *(string) --*

              An attribute of type String. For example:

               ``"S": "Hello"``

            - **N** *(string) --*

              An attribute of type Number. For example:

               ``"N": "123.45"``

              Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
              across languages and libraries. However, DynamoDB treats them as number type
              attributes for mathematical operations.

            - **B** *(bytes) --*

              An attribute of type Binary. For example:

               ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

            - **SS** *(list) --*

              An attribute of type String Set. For example:

               ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

              - *(string) --*

            - **NS** *(list) --*

              An attribute of type Number Set. For example:

               ``"NS": ["42.2", "-19", "7.5", "3.14"]``

              Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
              across languages and libraries. However, DynamoDB treats them as number type
              attributes for mathematical operations.

              - *(string) --*

            - **BS** *(list) --*

              An attribute of type Binary Set. For example:

               ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

              - *(bytes) --*

            - **M** *(dict) --*

              An attribute of type Map. For example:

               ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

              - *(string) --*

                - *(dict) --*

                  Represents the data for an attribute.

                  Each attribute value is described as a name-value pair. The name is the data type,
                  and the value is the data itself.

                  For more information, see `Data Types
                  <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                  in the *Amazon DynamoDB Developer Guide* .

            - **L** *(list) --*

              An attribute of type List. For example:

               ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

            - **NULL** *(boolean) --*

              An attribute of type Null. For example:

               ``"NULL": true``

            - **BOOL** *(boolean) --*

              An attribute of type Boolean. For example:

               ``"BOOL": true``

      - **SizeEstimateRangeGB** *(list) --*

        An estimate of item collection size, in gigabytes. This value is a two-element array
        containing a lower bound and an upper bound for the estimate. The estimate includes the size
        of all the items in the table, plus the size of all attributes projected into all of the
        local secondary indexes on that table. Use this estimate to measure whether a local
        secondary index is approaching its size limit.

        The estimate is subject to change over time; therefore, do not rely on the precision or
        accuracy of the estimate.

        - *(float) --*
    """


_ClientQueryExclusiveStartKeyTypeDef = TypedDict(
    "_ClientQueryExclusiveStartKeyTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class ClientQueryExclusiveStartKeyTypeDef(_ClientQueryExclusiveStartKeyTypeDef):
    """
    Type definition for `ClientQuery` `ExclusiveStartKey`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_ClientQueryExpressionAttributeValuesTypeDef = TypedDict(
    "_ClientQueryExpressionAttributeValuesTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class ClientQueryExpressionAttributeValuesTypeDef(_ClientQueryExpressionAttributeValuesTypeDef):
    """
    Type definition for `ClientQuery` `ExpressionAttributeValues`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_ClientQueryKeyConditionsAttributeValueListTypeDef = TypedDict(
    "_ClientQueryKeyConditionsAttributeValueListTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class ClientQueryKeyConditionsAttributeValueListTypeDef(
    _ClientQueryKeyConditionsAttributeValueListTypeDef
):
    """
    Type definition for `ClientQueryKeyConditions` `AttributeValueList`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_RequiredClientQueryKeyConditionsTypeDef = TypedDict(
    "_RequiredClientQueryKeyConditionsTypeDef", {"ComparisonOperator": str}
)
_OptionalClientQueryKeyConditionsTypeDef = TypedDict(
    "_OptionalClientQueryKeyConditionsTypeDef",
    {"AttributeValueList": List[ClientQueryKeyConditionsAttributeValueListTypeDef]},
    total=False,
)


class ClientQueryKeyConditionsTypeDef(
    _RequiredClientQueryKeyConditionsTypeDef, _OptionalClientQueryKeyConditionsTypeDef
):
    """
    Type definition for `ClientQuery` `KeyConditions`

    Represents the selection criteria for a ``Query`` or ``Scan`` operation:

    * For a ``Query`` operation, ``Condition`` is used for specifying the ``KeyConditions`` to use
    when querying a table or an index. For ``KeyConditions`` , only the following comparison
    operators are supported:  ``EQ | LE | LT | GE | GT | BEGINS_WITH | BETWEEN``    ``Condition`` is
    also used in a ``QueryFilter`` , which evaluates the query results and returns only the desired
    values.

    * For a ``Scan`` operation, ``Condition`` is used in a ``ScanFilter`` , which evaluates the scan
    results and returns only the desired values.

    - **AttributeValueList** *(list) --*

      One or more values to evaluate against the supplied attribute. The number of values in the
      list depends on the ``ComparisonOperator`` being used.

      For type Number, value comparisons are numeric.

      String value comparisons for greater than, equals, or less than are based on ASCII character
      code values. For example, ``a`` is greater than ``A`` , and ``a`` is greater than ``B`` . For
      a list of code values, see `http\\://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters
      <http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters>`__ .

      For Binary, DynamoDB treats each byte of the binary data as unsigned when it compares binary
      values.

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

        - **S** *(string) --*

          An attribute of type String. For example:

           ``"S": "Hello"``

        - **N** *(string) --*

          An attribute of type Number. For example:

           ``"N": "123.45"``

          Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
          across languages and libraries. However, DynamoDB treats them as number type attributes
          for mathematical operations.

        - **B** *(bytes) --*

          An attribute of type Binary. For example:

           ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

        - **SS** *(list) --*

          An attribute of type String Set. For example:

           ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

          - *(string) --*

        - **NS** *(list) --*

          An attribute of type Number Set. For example:

           ``"NS": ["42.2", "-19", "7.5", "3.14"]``

          Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
          across languages and libraries. However, DynamoDB treats them as number type attributes
          for mathematical operations.

          - *(string) --*

        - **BS** *(list) --*

          An attribute of type Binary Set. For example:

           ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

          - *(bytes) --*

        - **M** *(dict) --*

          An attribute of type Map. For example:

           ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

          - *(string) --*

            - *(dict) --*

              Represents the data for an attribute.

              Each attribute value is described as a name-value pair. The name is the data type, and
              the value is the data itself.

              For more information, see `Data Types
              <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
              in the *Amazon DynamoDB Developer Guide* .

        - **L** *(list) --*

          An attribute of type List. For example:

           ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

          - *(dict) --*

            Represents the data for an attribute.

            Each attribute value is described as a name-value pair. The name is the data type, and
            the value is the data itself.

            For more information, see `Data Types
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
            in the *Amazon DynamoDB Developer Guide* .

        - **NULL** *(boolean) --*

          An attribute of type Null. For example:

           ``"NULL": true``

        - **BOOL** *(boolean) --*

          An attribute of type Boolean. For example:

           ``"BOOL": true``

    - **ComparisonOperator** *(string) --* **[REQUIRED]**

      A comparator for evaluating attributes. For example, equals, greater than, less than, etc.

      The following comparison operators are available:

       ``EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH
       | IN
       | BETWEEN``

      The following are descriptions of each comparison operator.

      * ``EQ`` : Equal. ``EQ`` is supported for all data types, including lists and maps.
      ``AttributeValueList`` can contain only one ``AttributeValue`` element of type String, Number,
      Binary, String Set, Number Set, or Binary Set. If an item contains an ``AttributeValue``
      element of a different type than the one provided in the request, the value does not match.
      For example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` . Also, ``{"N":"6"}`` does not equal
      ``{"NS":["6", "2", "1"]}`` .

      * ``NE`` : Not equal. ``NE`` is supported for all data types, including lists and maps.
      ``AttributeValueList`` can contain only one ``AttributeValue`` of type String, Number, Binary,
      String Set, Number Set, or Binary Set. If an item contains an ``AttributeValue`` of a
      different type than the one provided in the request, the value does not match. For example,
      ``{"S":"6"}`` does not equal ``{"N":"6"}`` . Also, ``{"N":"6"}`` does not equal ``{"NS":["6",
      "2", "1"]}`` .

      * ``LE`` : Less than or equal.   ``AttributeValueList`` can contain only one
      ``AttributeValue`` element of type String, Number, or Binary (not a set type). If an item
      contains an ``AttributeValue`` element of a different type than the one provided in the
      request, the value does not match. For example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` .
      Also, ``{"N":"6"}`` does not compare to ``{"NS":["6", "2", "1"]}`` .

      * ``LT`` : Less than.   ``AttributeValueList`` can contain only one ``AttributeValue`` of type
      String, Number, or Binary (not a set type). If an item contains an ``AttributeValue`` element
      of a different type than the one provided in the request, the value does not match. For
      example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` . Also, ``{"N":"6"}`` does not compare to
      ``{"NS":["6", "2", "1"]}`` .

      * ``GE`` : Greater than or equal.   ``AttributeValueList`` can contain only one
      ``AttributeValue`` element of type String, Number, or Binary (not a set type). If an item
      contains an ``AttributeValue`` element of a different type than the one provided in the
      request, the value does not match. For example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` .
      Also, ``{"N":"6"}`` does not compare to ``{"NS":["6", "2", "1"]}`` .

      * ``GT`` : Greater than.   ``AttributeValueList`` can contain only one ``AttributeValue``
      element of type String, Number, or Binary (not a set type). If an item contains an
      ``AttributeValue`` element of a different type than the one provided in the request, the value
      does not match. For example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` . Also, ``{"N":"6"}``
      does not compare to ``{"NS":["6", "2", "1"]}`` .

      * ``NOT_NULL`` : The attribute exists. ``NOT_NULL`` is supported for all data types, including
      lists and maps.

      .. note::

         This operator tests for the existence of an attribute, not its data type. If the data type
         of attribute "``a`` " is null, and you evaluate it using ``NOT_NULL`` , the result is a
         Boolean ``true`` . This result is because the attribute "``a`` " exists; its data type is
         not relevant to the ``NOT_NULL`` comparison operator.

      * ``NULL`` : The attribute does not exist. ``NULL`` is supported for all data types, including
      lists and maps.

      .. note::

         This operator tests for the nonexistence of an attribute, not its data type. If the data
         type of attribute "``a`` " is null, and you evaluate it using ``NULL`` , the result is a
         Boolean ``false`` . This is because the attribute "``a`` " exists; its data type is not
         relevant to the ``NULL`` comparison operator.

      * ``CONTAINS`` : Checks for a subsequence, or value in a set.  ``AttributeValueList`` can
      contain only one ``AttributeValue`` element of type String, Number, or Binary (not a set
      type). If the target attribute of the comparison is of type String, then the operator checks
      for a substring match. If the target attribute of the comparison is of type Binary, then the
      operator looks for a subsequence of the target that matches the input. If the target attribute
      of the comparison is a set ("``SS`` ", "``NS`` ", or "``BS`` "), then the operator evaluates
      to true if it finds an exact match with any member of the set. CONTAINS is supported for
      lists: When evaluating "``a CONTAINS b`` ", "``a`` " can be a list; however, "``b`` " cannot
      be a set, a map, or a list.

      * ``NOT_CONTAINS`` : Checks for absence of a subsequence, or absence of a value in a set.
      ``AttributeValueList`` can contain only one ``AttributeValue`` element of type String, Number,
      or Binary (not a set type). If the target attribute of the comparison is a String, then the
      operator checks for the absence of a substring match. If the target attribute of the
      comparison is Binary, then the operator checks for the absence of a subsequence of the target
      that matches the input. If the target attribute of the comparison is a set ("``SS`` ", "``NS``
      ", or "``BS`` "), then the operator evaluates to true if it *does not* find an exact match
      with any member of the set. NOT_CONTAINS is supported for lists: When evaluating "``a NOT
      CONTAINS b`` ", "``a`` " can be a list; however, "``b`` " cannot be a set, a map, or a list.

      * ``BEGINS_WITH`` : Checks for a prefix.   ``AttributeValueList`` can contain only one
      ``AttributeValue`` of type String or Binary (not a Number or a set type). The target attribute
      of the comparison must be of type String or Binary (not a Number or a set type).

      * ``IN`` : Checks for matching elements in a list.  ``AttributeValueList`` can contain one or
      more ``AttributeValue`` elements of type String, Number, or Binary. These attributes are
      compared against an existing attribute of an item. If any elements of the input are equal to
      the item attribute, the expression evaluates to true.

      * ``BETWEEN`` : Greater than or equal to the first value, and less than or equal to the second
      value.   ``AttributeValueList`` must contain two ``AttributeValue`` elements of the same type,
      either String, Number, or Binary (not a set type). A target attribute matches if the target
      value is greater than, or equal to, the first element and less than, or equal to, the second
      element. If an item contains an ``AttributeValue`` element of a different type than the one
      provided in the request, the value does not match. For example, ``{"S":"6"}`` does not compare
      to ``{"N":"6"}`` . Also, ``{"N":"6"}`` does not compare to ``{"NS":["6", "2", "1"]}``

      For usage examples of ``AttributeValueList`` and ``ComparisonOperator`` , see `Legacy
      Conditional Parameters
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html>`__
      in the *Amazon DynamoDB Developer Guide* .
    """


_ClientQueryQueryFilterAttributeValueListTypeDef = TypedDict(
    "_ClientQueryQueryFilterAttributeValueListTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class ClientQueryQueryFilterAttributeValueListTypeDef(
    _ClientQueryQueryFilterAttributeValueListTypeDef
):
    """
    Type definition for `ClientQueryQueryFilter` `AttributeValueList`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_RequiredClientQueryQueryFilterTypeDef = TypedDict(
    "_RequiredClientQueryQueryFilterTypeDef", {"ComparisonOperator": str}
)
_OptionalClientQueryQueryFilterTypeDef = TypedDict(
    "_OptionalClientQueryQueryFilterTypeDef",
    {"AttributeValueList": List[ClientQueryQueryFilterAttributeValueListTypeDef]},
    total=False,
)


class ClientQueryQueryFilterTypeDef(
    _RequiredClientQueryQueryFilterTypeDef, _OptionalClientQueryQueryFilterTypeDef
):
    """
    Type definition for `ClientQuery` `QueryFilter`

    Represents the selection criteria for a ``Query`` or ``Scan`` operation:

    * For a ``Query`` operation, ``Condition`` is used for specifying the ``KeyConditions`` to use
    when querying a table or an index. For ``KeyConditions`` , only the following comparison
    operators are supported:  ``EQ | LE | LT | GE | GT | BEGINS_WITH | BETWEEN``    ``Condition`` is
    also used in a ``QueryFilter`` , which evaluates the query results and returns only the desired
    values.

    * For a ``Scan`` operation, ``Condition`` is used in a ``ScanFilter`` , which evaluates the scan
    results and returns only the desired values.

    - **AttributeValueList** *(list) --*

      One or more values to evaluate against the supplied attribute. The number of values in the
      list depends on the ``ComparisonOperator`` being used.

      For type Number, value comparisons are numeric.

      String value comparisons for greater than, equals, or less than are based on ASCII character
      code values. For example, ``a`` is greater than ``A`` , and ``a`` is greater than ``B`` . For
      a list of code values, see `http\\://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters
      <http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters>`__ .

      For Binary, DynamoDB treats each byte of the binary data as unsigned when it compares binary
      values.

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

        - **S** *(string) --*

          An attribute of type String. For example:

           ``"S": "Hello"``

        - **N** *(string) --*

          An attribute of type Number. For example:

           ``"N": "123.45"``

          Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
          across languages and libraries. However, DynamoDB treats them as number type attributes
          for mathematical operations.

        - **B** *(bytes) --*

          An attribute of type Binary. For example:

           ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

        - **SS** *(list) --*

          An attribute of type String Set. For example:

           ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

          - *(string) --*

        - **NS** *(list) --*

          An attribute of type Number Set. For example:

           ``"NS": ["42.2", "-19", "7.5", "3.14"]``

          Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
          across languages and libraries. However, DynamoDB treats them as number type attributes
          for mathematical operations.

          - *(string) --*

        - **BS** *(list) --*

          An attribute of type Binary Set. For example:

           ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

          - *(bytes) --*

        - **M** *(dict) --*

          An attribute of type Map. For example:

           ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

          - *(string) --*

            - *(dict) --*

              Represents the data for an attribute.

              Each attribute value is described as a name-value pair. The name is the data type, and
              the value is the data itself.

              For more information, see `Data Types
              <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
              in the *Amazon DynamoDB Developer Guide* .

        - **L** *(list) --*

          An attribute of type List. For example:

           ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

          - *(dict) --*

            Represents the data for an attribute.

            Each attribute value is described as a name-value pair. The name is the data type, and
            the value is the data itself.

            For more information, see `Data Types
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
            in the *Amazon DynamoDB Developer Guide* .

        - **NULL** *(boolean) --*

          An attribute of type Null. For example:

           ``"NULL": true``

        - **BOOL** *(boolean) --*

          An attribute of type Boolean. For example:

           ``"BOOL": true``

    - **ComparisonOperator** *(string) --* **[REQUIRED]**

      A comparator for evaluating attributes. For example, equals, greater than, less than, etc.

      The following comparison operators are available:

       ``EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH
       | IN
       | BETWEEN``

      The following are descriptions of each comparison operator.

      * ``EQ`` : Equal. ``EQ`` is supported for all data types, including lists and maps.
      ``AttributeValueList`` can contain only one ``AttributeValue`` element of type String, Number,
      Binary, String Set, Number Set, or Binary Set. If an item contains an ``AttributeValue``
      element of a different type than the one provided in the request, the value does not match.
      For example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` . Also, ``{"N":"6"}`` does not equal
      ``{"NS":["6", "2", "1"]}`` .

      * ``NE`` : Not equal. ``NE`` is supported for all data types, including lists and maps.
      ``AttributeValueList`` can contain only one ``AttributeValue`` of type String, Number, Binary,
      String Set, Number Set, or Binary Set. If an item contains an ``AttributeValue`` of a
      different type than the one provided in the request, the value does not match. For example,
      ``{"S":"6"}`` does not equal ``{"N":"6"}`` . Also, ``{"N":"6"}`` does not equal ``{"NS":["6",
      "2", "1"]}`` .

      * ``LE`` : Less than or equal.   ``AttributeValueList`` can contain only one
      ``AttributeValue`` element of type String, Number, or Binary (not a set type). If an item
      contains an ``AttributeValue`` element of a different type than the one provided in the
      request, the value does not match. For example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` .
      Also, ``{"N":"6"}`` does not compare to ``{"NS":["6", "2", "1"]}`` .

      * ``LT`` : Less than.   ``AttributeValueList`` can contain only one ``AttributeValue`` of type
      String, Number, or Binary (not a set type). If an item contains an ``AttributeValue`` element
      of a different type than the one provided in the request, the value does not match. For
      example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` . Also, ``{"N":"6"}`` does not compare to
      ``{"NS":["6", "2", "1"]}`` .

      * ``GE`` : Greater than or equal.   ``AttributeValueList`` can contain only one
      ``AttributeValue`` element of type String, Number, or Binary (not a set type). If an item
      contains an ``AttributeValue`` element of a different type than the one provided in the
      request, the value does not match. For example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` .
      Also, ``{"N":"6"}`` does not compare to ``{"NS":["6", "2", "1"]}`` .

      * ``GT`` : Greater than.   ``AttributeValueList`` can contain only one ``AttributeValue``
      element of type String, Number, or Binary (not a set type). If an item contains an
      ``AttributeValue`` element of a different type than the one provided in the request, the value
      does not match. For example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` . Also, ``{"N":"6"}``
      does not compare to ``{"NS":["6", "2", "1"]}`` .

      * ``NOT_NULL`` : The attribute exists. ``NOT_NULL`` is supported for all data types, including
      lists and maps.

      .. note::

         This operator tests for the existence of an attribute, not its data type. If the data type
         of attribute "``a`` " is null, and you evaluate it using ``NOT_NULL`` , the result is a
         Boolean ``true`` . This result is because the attribute "``a`` " exists; its data type is
         not relevant to the ``NOT_NULL`` comparison operator.

      * ``NULL`` : The attribute does not exist. ``NULL`` is supported for all data types, including
      lists and maps.

      .. note::

         This operator tests for the nonexistence of an attribute, not its data type. If the data
         type of attribute "``a`` " is null, and you evaluate it using ``NULL`` , the result is a
         Boolean ``false`` . This is because the attribute "``a`` " exists; its data type is not
         relevant to the ``NULL`` comparison operator.

      * ``CONTAINS`` : Checks for a subsequence, or value in a set.  ``AttributeValueList`` can
      contain only one ``AttributeValue`` element of type String, Number, or Binary (not a set
      type). If the target attribute of the comparison is of type String, then the operator checks
      for a substring match. If the target attribute of the comparison is of type Binary, then the
      operator looks for a subsequence of the target that matches the input. If the target attribute
      of the comparison is a set ("``SS`` ", "``NS`` ", or "``BS`` "), then the operator evaluates
      to true if it finds an exact match with any member of the set. CONTAINS is supported for
      lists: When evaluating "``a CONTAINS b`` ", "``a`` " can be a list; however, "``b`` " cannot
      be a set, a map, or a list.

      * ``NOT_CONTAINS`` : Checks for absence of a subsequence, or absence of a value in a set.
      ``AttributeValueList`` can contain only one ``AttributeValue`` element of type String, Number,
      or Binary (not a set type). If the target attribute of the comparison is a String, then the
      operator checks for the absence of a substring match. If the target attribute of the
      comparison is Binary, then the operator checks for the absence of a subsequence of the target
      that matches the input. If the target attribute of the comparison is a set ("``SS`` ", "``NS``
      ", or "``BS`` "), then the operator evaluates to true if it *does not* find an exact match
      with any member of the set. NOT_CONTAINS is supported for lists: When evaluating "``a NOT
      CONTAINS b`` ", "``a`` " can be a list; however, "``b`` " cannot be a set, a map, or a list.

      * ``BEGINS_WITH`` : Checks for a prefix.   ``AttributeValueList`` can contain only one
      ``AttributeValue`` of type String or Binary (not a Number or a set type). The target attribute
      of the comparison must be of type String or Binary (not a Number or a set type).

      * ``IN`` : Checks for matching elements in a list.  ``AttributeValueList`` can contain one or
      more ``AttributeValue`` elements of type String, Number, or Binary. These attributes are
      compared against an existing attribute of an item. If any elements of the input are equal to
      the item attribute, the expression evaluates to true.

      * ``BETWEEN`` : Greater than or equal to the first value, and less than or equal to the second
      value.   ``AttributeValueList`` must contain two ``AttributeValue`` elements of the same type,
      either String, Number, or Binary (not a set type). A target attribute matches if the target
      value is greater than, or equal to, the first element and less than, or equal to, the second
      element. If an item contains an ``AttributeValue`` element of a different type than the one
      provided in the request, the value does not match. For example, ``{"S":"6"}`` does not compare
      to ``{"N":"6"}`` . Also, ``{"N":"6"}`` does not compare to ``{"NS":["6", "2", "1"]}``

      For usage examples of ``AttributeValueList`` and ``ComparisonOperator`` , see `Legacy
      Conditional Parameters
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html>`__
      in the *Amazon DynamoDB Developer Guide* .
    """


_ClientQueryResponseConsumedCapacityGlobalSecondaryIndexesTypeDef = TypedDict(
    "_ClientQueryResponseConsumedCapacityGlobalSecondaryIndexesTypeDef",
    {"ReadCapacityUnits": float, "WriteCapacityUnits": float, "CapacityUnits": float},
    total=False,
)


class ClientQueryResponseConsumedCapacityGlobalSecondaryIndexesTypeDef(
    _ClientQueryResponseConsumedCapacityGlobalSecondaryIndexesTypeDef
):
    """
    Type definition for `ClientQueryResponseConsumedCapacity` `GlobalSecondaryIndexes`

    Represents the amount of provisioned throughput capacity consumed on a table or an index.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed on a table or an index.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed on a table or an index.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed on a table or an index.
    """


_ClientQueryResponseConsumedCapacityLocalSecondaryIndexesTypeDef = TypedDict(
    "_ClientQueryResponseConsumedCapacityLocalSecondaryIndexesTypeDef",
    {"ReadCapacityUnits": float, "WriteCapacityUnits": float, "CapacityUnits": float},
    total=False,
)


class ClientQueryResponseConsumedCapacityLocalSecondaryIndexesTypeDef(
    _ClientQueryResponseConsumedCapacityLocalSecondaryIndexesTypeDef
):
    """
    Type definition for `ClientQueryResponseConsumedCapacity` `LocalSecondaryIndexes`

    Represents the amount of provisioned throughput capacity consumed on a table or an index.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed on a table or an index.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed on a table or an index.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed on a table or an index.
    """


_ClientQueryResponseConsumedCapacityTableTypeDef = TypedDict(
    "_ClientQueryResponseConsumedCapacityTableTypeDef",
    {"ReadCapacityUnits": float, "WriteCapacityUnits": float, "CapacityUnits": float},
    total=False,
)


class ClientQueryResponseConsumedCapacityTableTypeDef(
    _ClientQueryResponseConsumedCapacityTableTypeDef
):
    """
    Type definition for `ClientQueryResponseConsumedCapacity` `Table`

    The amount of throughput consumed on the table affected by the operation.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed on a table or an index.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed on a table or an index.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed on a table or an index.
    """


_ClientQueryResponseConsumedCapacityTypeDef = TypedDict(
    "_ClientQueryResponseConsumedCapacityTypeDef",
    {
        "TableName": str,
        "CapacityUnits": float,
        "ReadCapacityUnits": float,
        "WriteCapacityUnits": float,
        "Table": ClientQueryResponseConsumedCapacityTableTypeDef,
        "LocalSecondaryIndexes": Dict[
            str, ClientQueryResponseConsumedCapacityLocalSecondaryIndexesTypeDef
        ],
        "GlobalSecondaryIndexes": Dict[
            str, ClientQueryResponseConsumedCapacityGlobalSecondaryIndexesTypeDef
        ],
    },
    total=False,
)


class ClientQueryResponseConsumedCapacityTypeDef(_ClientQueryResponseConsumedCapacityTypeDef):
    """
    Type definition for `ClientQueryResponse` `ConsumedCapacity`

    The capacity units consumed by the ``Query`` operation. The data returned includes the total
    provisioned throughput consumed, along with statistics for the table and any indexes involved in
    the operation. ``ConsumedCapacity`` is only returned if the ``ReturnConsumedCapacity`` parameter
    was specified. For more information, see `Provisioned Throughput
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **TableName** *(string) --*

      The name of the table that was affected by the operation.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed by the operation.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed by the operation.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed by the operation.

    - **Table** *(dict) --*

      The amount of throughput consumed on the table affected by the operation.

      - **ReadCapacityUnits** *(float) --*

        The total number of read capacity units consumed on a table or an index.

      - **WriteCapacityUnits** *(float) --*

        The total number of write capacity units consumed on a table or an index.

      - **CapacityUnits** *(float) --*

        The total number of capacity units consumed on a table or an index.

    - **LocalSecondaryIndexes** *(dict) --*

      The amount of throughput consumed on each local index affected by the operation.

      - *(string) --*

        - *(dict) --*

          Represents the amount of provisioned throughput capacity consumed on a table or an index.

          - **ReadCapacityUnits** *(float) --*

            The total number of read capacity units consumed on a table or an index.

          - **WriteCapacityUnits** *(float) --*

            The total number of write capacity units consumed on a table or an index.

          - **CapacityUnits** *(float) --*

            The total number of capacity units consumed on a table or an index.

    - **GlobalSecondaryIndexes** *(dict) --*

      The amount of throughput consumed on each global index affected by the operation.

      - *(string) --*

        - *(dict) --*

          Represents the amount of provisioned throughput capacity consumed on a table or an index.

          - **ReadCapacityUnits** *(float) --*

            The total number of read capacity units consumed on a table or an index.

          - **WriteCapacityUnits** *(float) --*

            The total number of write capacity units consumed on a table or an index.

          - **CapacityUnits** *(float) --*

            The total number of capacity units consumed on a table or an index.
    """


_ClientQueryResponseItemsTypeDef = TypedDict(
    "_ClientQueryResponseItemsTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class ClientQueryResponseItemsTypeDef(_ClientQueryResponseItemsTypeDef):
    """
    Type definition for `ClientQueryResponse` `Items`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_ClientQueryResponseLastEvaluatedKeyTypeDef = TypedDict(
    "_ClientQueryResponseLastEvaluatedKeyTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class ClientQueryResponseLastEvaluatedKeyTypeDef(_ClientQueryResponseLastEvaluatedKeyTypeDef):
    """
    Type definition for `ClientQueryResponse` `LastEvaluatedKey`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_ClientQueryResponseTypeDef = TypedDict(
    "_ClientQueryResponseTypeDef",
    {
        "Items": List[Dict[str, ClientQueryResponseItemsTypeDef]],
        "Count": int,
        "ScannedCount": int,
        "LastEvaluatedKey": Dict[str, ClientQueryResponseLastEvaluatedKeyTypeDef],
        "ConsumedCapacity": ClientQueryResponseConsumedCapacityTypeDef,
    },
    total=False,
)


class ClientQueryResponseTypeDef(_ClientQueryResponseTypeDef):
    """
    Type definition for `ClientQuery` `Response`

    Represents the output of a ``Query`` operation.

    - **Items** *(list) --*

      An array of item attributes that match the query criteria. Each element in this array consists
      of an attribute name and the value for that attribute.

      - *(dict) --*

        - *(string) --*

          - *(dict) --*

            Represents the data for an attribute.

            Each attribute value is described as a name-value pair. The name is the data type, and
            the value is the data itself.

            For more information, see `Data Types
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
            in the *Amazon DynamoDB Developer Guide* .

            - **S** *(string) --*

              An attribute of type String. For example:

               ``"S": "Hello"``

            - **N** *(string) --*

              An attribute of type Number. For example:

               ``"N": "123.45"``

              Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
              across languages and libraries. However, DynamoDB treats them as number type
              attributes for mathematical operations.

            - **B** *(bytes) --*

              An attribute of type Binary. For example:

               ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

            - **SS** *(list) --*

              An attribute of type String Set. For example:

               ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

              - *(string) --*

            - **NS** *(list) --*

              An attribute of type Number Set. For example:

               ``"NS": ["42.2", "-19", "7.5", "3.14"]``

              Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
              across languages and libraries. However, DynamoDB treats them as number type
              attributes for mathematical operations.

              - *(string) --*

            - **BS** *(list) --*

              An attribute of type Binary Set. For example:

               ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

              - *(bytes) --*

            - **M** *(dict) --*

              An attribute of type Map. For example:

               ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

              - *(string) --*

                - *(dict) --*

                  Represents the data for an attribute.

                  Each attribute value is described as a name-value pair. The name is the data type,
                  and the value is the data itself.

                  For more information, see `Data Types
                  <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                  in the *Amazon DynamoDB Developer Guide* .

            - **L** *(list) --*

              An attribute of type List. For example:

               ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

            - **NULL** *(boolean) --*

              An attribute of type Null. For example:

               ``"NULL": true``

            - **BOOL** *(boolean) --*

              An attribute of type Boolean. For example:

               ``"BOOL": true``

    - **Count** *(integer) --*

      The number of items in the response.

      If you used a ``QueryFilter`` in the request, then ``Count`` is the number of items returned
      after the filter was applied, and ``ScannedCount`` is the number of matching items before the
      filter was applied.

      If you did not use a filter in the request, then ``Count`` and ``ScannedCount`` are the same.

    - **ScannedCount** *(integer) --*

      The number of items evaluated, before any ``QueryFilter`` is applied. A high ``ScannedCount``
      value with few, or no, ``Count`` results indicates an inefficient ``Query`` operation. For
      more information, see `Count and ScannedCount
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html#Count>`__
      in the *Amazon DynamoDB Developer Guide* .

      If you did not use a filter in the request, then ``ScannedCount`` is the same as ``Count`` .

    - **LastEvaluatedKey** *(dict) --*

      The primary key of the item where the operation stopped, inclusive of the previous result set.
      Use this value to start a new operation, excluding this value in the new request.

      If ``LastEvaluatedKey`` is empty, then the "last page" of results has been processed and there
      is no more data to be retrieved.

      If ``LastEvaluatedKey`` is not empty, it does not necessarily mean that there is more data in
      the result set. The only way to know when you have reached the end of the result set is when
      ``LastEvaluatedKey`` is empty.

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

          - **S** *(string) --*

            An attribute of type String. For example:

             ``"S": "Hello"``

          - **N** *(string) --*

            An attribute of type Number. For example:

             ``"N": "123.45"``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

          - **B** *(bytes) --*

            An attribute of type Binary. For example:

             ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

          - **SS** *(list) --*

            An attribute of type String Set. For example:

             ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

            - *(string) --*

          - **NS** *(list) --*

            An attribute of type Number Set. For example:

             ``"NS": ["42.2", "-19", "7.5", "3.14"]``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

            - *(string) --*

          - **BS** *(list) --*

            An attribute of type Binary Set. For example:

             ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

            - *(bytes) --*

          - **M** *(dict) --*

            An attribute of type Map. For example:

             ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

            - *(string) --*

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

          - **L** *(list) --*

            An attribute of type List. For example:

             ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

            - *(dict) --*

              Represents the data for an attribute.

              Each attribute value is described as a name-value pair. The name is the data type, and
              the value is the data itself.

              For more information, see `Data Types
              <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
              in the *Amazon DynamoDB Developer Guide* .

          - **NULL** *(boolean) --*

            An attribute of type Null. For example:

             ``"NULL": true``

          - **BOOL** *(boolean) --*

            An attribute of type Boolean. For example:

             ``"BOOL": true``

    - **ConsumedCapacity** *(dict) --*

      The capacity units consumed by the ``Query`` operation. The data returned includes the total
      provisioned throughput consumed, along with statistics for the table and any indexes involved
      in the operation. ``ConsumedCapacity`` is only returned if the ``ReturnConsumedCapacity``
      parameter was specified. For more information, see `Provisioned Throughput
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html>`__
      in the *Amazon DynamoDB Developer Guide* .

      - **TableName** *(string) --*

        The name of the table that was affected by the operation.

      - **CapacityUnits** *(float) --*

        The total number of capacity units consumed by the operation.

      - **ReadCapacityUnits** *(float) --*

        The total number of read capacity units consumed by the operation.

      - **WriteCapacityUnits** *(float) --*

        The total number of write capacity units consumed by the operation.

      - **Table** *(dict) --*

        The amount of throughput consumed on the table affected by the operation.

        - **ReadCapacityUnits** *(float) --*

          The total number of read capacity units consumed on a table or an index.

        - **WriteCapacityUnits** *(float) --*

          The total number of write capacity units consumed on a table or an index.

        - **CapacityUnits** *(float) --*

          The total number of capacity units consumed on a table or an index.

      - **LocalSecondaryIndexes** *(dict) --*

        The amount of throughput consumed on each local index affected by the operation.

        - *(string) --*

          - *(dict) --*

            Represents the amount of provisioned throughput capacity consumed on a table or an
            index.

            - **ReadCapacityUnits** *(float) --*

              The total number of read capacity units consumed on a table or an index.

            - **WriteCapacityUnits** *(float) --*

              The total number of write capacity units consumed on a table or an index.

            - **CapacityUnits** *(float) --*

              The total number of capacity units consumed on a table or an index.

      - **GlobalSecondaryIndexes** *(dict) --*

        The amount of throughput consumed on each global index affected by the operation.

        - *(string) --*

          - *(dict) --*

            Represents the amount of provisioned throughput capacity consumed on a table or an
            index.

            - **ReadCapacityUnits** *(float) --*

              The total number of read capacity units consumed on a table or an index.

            - **WriteCapacityUnits** *(float) --*

              The total number of write capacity units consumed on a table or an index.

            - **CapacityUnits** *(float) --*

              The total number of capacity units consumed on a table or an index.
    """


_ClientRestoreTableFromBackupGlobalSecondaryIndexOverrideKeySchemaTypeDef = TypedDict(
    "_ClientRestoreTableFromBackupGlobalSecondaryIndexOverrideKeySchemaTypeDef",
    {"AttributeName": str, "KeyType": str},
)


class ClientRestoreTableFromBackupGlobalSecondaryIndexOverrideKeySchemaTypeDef(
    _ClientRestoreTableFromBackupGlobalSecondaryIndexOverrideKeySchemaTypeDef
):
    """
    Type definition for `ClientRestoreTableFromBackupGlobalSecondaryIndexOverride` `KeySchema`

    Represents *a single element* of a key schema. A key schema specifies the attributes that make
    up the primary key of a table, or the key attributes of an index.

    A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
    simple primary key would be represented by one ``KeySchemaElement`` (for the partition key). A
    composite primary key would require one ``KeySchemaElement`` for the partition key, and another
    ``KeySchemaElement`` for the sort key.

    A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The data
    type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a
    Map.

    - **AttributeName** *(string) --* **[REQUIRED]**

      The name of a key attribute.

    - **KeyType** *(string) --* **[REQUIRED]**

      The role that this key attribute will assume:

      * ``HASH`` - partition key

      * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.
    """


_ClientRestoreTableFromBackupGlobalSecondaryIndexOverrideProjectionTypeDef = TypedDict(
    "_ClientRestoreTableFromBackupGlobalSecondaryIndexOverrideProjectionTypeDef",
    {"ProjectionType": str, "NonKeyAttributes": List[str]},
    total=False,
)


class ClientRestoreTableFromBackupGlobalSecondaryIndexOverrideProjectionTypeDef(
    _ClientRestoreTableFromBackupGlobalSecondaryIndexOverrideProjectionTypeDef
):
    """
    Type definition for `ClientRestoreTableFromBackupGlobalSecondaryIndexOverride` `Projection`

    Represents attributes that are copied (projected) from the table into the global secondary
    index. These are in addition to the primary key attributes and index key attributes, which are
    automatically projected.

    - **ProjectionType** *(string) --*

      The set of attributes that are projected into the index:

      * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

      * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list of
      projected attributes is in ``NonKeyAttributes`` .

      * ``ALL`` - All of the table attributes are projected into the index.

    - **NonKeyAttributes** *(list) --*

      Represents the non-key attribute names which will be projected into the index.

      For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all of the
      local secondary indexes, must not exceed 20. If you project the same attribute into two
      different indexes, this counts as two distinct attributes when determining the total.

      - *(string) --*
    """


_ClientRestoreTableFromBackupGlobalSecondaryIndexOverrideProvisionedThroughputTypeDef = TypedDict(
    "_ClientRestoreTableFromBackupGlobalSecondaryIndexOverrideProvisionedThroughputTypeDef",
    {"ReadCapacityUnits": int, "WriteCapacityUnits": int},
)


class ClientRestoreTableFromBackupGlobalSecondaryIndexOverrideProvisionedThroughputTypeDef(
    _ClientRestoreTableFromBackupGlobalSecondaryIndexOverrideProvisionedThroughputTypeDef
):
    """
    Type definition for `ClientRestoreTableFromBackupGlobalSecondaryIndexOverride`
    `ProvisionedThroughput`

    Represents the provisioned throughput settings for the specified global secondary index.

    For current minimum and maximum provisioned throughput values, see `Limits
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the *Amazon
    DynamoDB Developer Guide* .

    - **ReadCapacityUnits** *(integer) --* **[REQUIRED]**

      The maximum number of strongly consistent reads consumed per second before DynamoDB returns a
      ``ThrottlingException`` . For more information, see `Specifying Read and Write Requirements
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
      in the *Amazon DynamoDB Developer Guide* .

      If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.

    - **WriteCapacityUnits** *(integer) --* **[REQUIRED]**

      The maximum number of writes consumed per second before DynamoDB returns a
      ``ThrottlingException`` . For more information, see `Specifying Read and Write Requirements
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
      in the *Amazon DynamoDB Developer Guide* .

      If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.
    """


_RequiredClientRestoreTableFromBackupGlobalSecondaryIndexOverrideTypeDef = TypedDict(
    "_RequiredClientRestoreTableFromBackupGlobalSecondaryIndexOverrideTypeDef",
    {
        "IndexName": str,
        "KeySchema": List[ClientRestoreTableFromBackupGlobalSecondaryIndexOverrideKeySchemaTypeDef],
        "Projection": ClientRestoreTableFromBackupGlobalSecondaryIndexOverrideProjectionTypeDef,
    },
)
_OptionalClientRestoreTableFromBackupGlobalSecondaryIndexOverrideTypeDef = TypedDict(
    "_OptionalClientRestoreTableFromBackupGlobalSecondaryIndexOverrideTypeDef",
    {
        "ProvisionedThroughput": ClientRestoreTableFromBackupGlobalSecondaryIndexOverrideProvisionedThroughputTypeDef
    },
    total=False,
)


class ClientRestoreTableFromBackupGlobalSecondaryIndexOverrideTypeDef(
    _RequiredClientRestoreTableFromBackupGlobalSecondaryIndexOverrideTypeDef,
    _OptionalClientRestoreTableFromBackupGlobalSecondaryIndexOverrideTypeDef,
):
    """
    Type definition for `ClientRestoreTableFromBackup` `GlobalSecondaryIndexOverride`

    Represents the properties of a global secondary index.

    - **IndexName** *(string) --* **[REQUIRED]**

      The name of the global secondary index. The name must be unique among all other indexes on
      this table.

    - **KeySchema** *(list) --* **[REQUIRED]**

      The complete key schema for a global secondary index, which consists of one or more pairs of
      attribute names and key types:

      * ``HASH`` - partition key

      * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.

      - *(dict) --*

        Represents *a single element* of a key schema. A key schema specifies the attributes that
        make up the primary key of a table, or the key attributes of an index.

        A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
        simple primary key would be represented by one ``KeySchemaElement`` (for the partition key).
        A composite primary key would require one ``KeySchemaElement`` for the partition key, and
        another ``KeySchemaElement`` for the sort key.

        A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The
        data type must be one of String, Number, or Binary. The attribute cannot be nested within a
        List or a Map.

        - **AttributeName** *(string) --* **[REQUIRED]**

          The name of a key attribute.

        - **KeyType** *(string) --* **[REQUIRED]**

          The role that this key attribute will assume:

          * ``HASH`` - partition key

          * ``RANGE`` - sort key

          .. note::

            The partition key of an item is also known as its *hash attribute* . The term "hash
            attribute" derives from DynamoDB's usage of an internal hash function to evenly
            distribute data items across partitions, based on their partition key values.

            The sort key of an item is also known as its *range attribute* . The term "range
            attribute" derives from the way DynamoDB stores items with the same partition key
            physically close together, in sorted order by the sort key value.

    - **Projection** *(dict) --* **[REQUIRED]**

      Represents attributes that are copied (projected) from the table into the global secondary
      index. These are in addition to the primary key attributes and index key attributes, which are
      automatically projected.

      - **ProjectionType** *(string) --*

        The set of attributes that are projected into the index:

        * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

        * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list
        of projected attributes is in ``NonKeyAttributes`` .

        * ``ALL`` - All of the table attributes are projected into the index.

      - **NonKeyAttributes** *(list) --*

        Represents the non-key attribute names which will be projected into the index.

        For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all of
        the local secondary indexes, must not exceed 20. If you project the same attribute into two
        different indexes, this counts as two distinct attributes when determining the total.

        - *(string) --*

    - **ProvisionedThroughput** *(dict) --*

      Represents the provisioned throughput settings for the specified global secondary index.

      For current minimum and maximum provisioned throughput values, see `Limits
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
      *Amazon DynamoDB Developer Guide* .

      - **ReadCapacityUnits** *(integer) --* **[REQUIRED]**

        The maximum number of strongly consistent reads consumed per second before DynamoDB returns
        a ``ThrottlingException`` . For more information, see `Specifying Read and Write
        Requirements
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
        in the *Amazon DynamoDB Developer Guide* .

        If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.

      - **WriteCapacityUnits** *(integer) --* **[REQUIRED]**

        The maximum number of writes consumed per second before DynamoDB returns a
        ``ThrottlingException`` . For more information, see `Specifying Read and Write Requirements
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
        in the *Amazon DynamoDB Developer Guide* .

        If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.
    """


_ClientRestoreTableFromBackupLocalSecondaryIndexOverrideKeySchemaTypeDef = TypedDict(
    "_ClientRestoreTableFromBackupLocalSecondaryIndexOverrideKeySchemaTypeDef",
    {"AttributeName": str, "KeyType": str},
)


class ClientRestoreTableFromBackupLocalSecondaryIndexOverrideKeySchemaTypeDef(
    _ClientRestoreTableFromBackupLocalSecondaryIndexOverrideKeySchemaTypeDef
):
    """
    Type definition for `ClientRestoreTableFromBackupLocalSecondaryIndexOverride` `KeySchema`

    Represents *a single element* of a key schema. A key schema specifies the attributes that make
    up the primary key of a table, or the key attributes of an index.

    A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
    simple primary key would be represented by one ``KeySchemaElement`` (for the partition key). A
    composite primary key would require one ``KeySchemaElement`` for the partition key, and another
    ``KeySchemaElement`` for the sort key.

    A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The data
    type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a
    Map.

    - **AttributeName** *(string) --* **[REQUIRED]**

      The name of a key attribute.

    - **KeyType** *(string) --* **[REQUIRED]**

      The role that this key attribute will assume:

      * ``HASH`` - partition key

      * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.
    """


_ClientRestoreTableFromBackupLocalSecondaryIndexOverrideProjectionTypeDef = TypedDict(
    "_ClientRestoreTableFromBackupLocalSecondaryIndexOverrideProjectionTypeDef",
    {"ProjectionType": str, "NonKeyAttributes": List[str]},
    total=False,
)


class ClientRestoreTableFromBackupLocalSecondaryIndexOverrideProjectionTypeDef(
    _ClientRestoreTableFromBackupLocalSecondaryIndexOverrideProjectionTypeDef
):
    """
    Type definition for `ClientRestoreTableFromBackupLocalSecondaryIndexOverride` `Projection`

    Represents attributes that are copied (projected) from the table into the local secondary index.
    These are in addition to the primary key attributes and index key attributes, which are
    automatically projected.

    - **ProjectionType** *(string) --*

      The set of attributes that are projected into the index:

      * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

      * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list of
      projected attributes is in ``NonKeyAttributes`` .

      * ``ALL`` - All of the table attributes are projected into the index.

    - **NonKeyAttributes** *(list) --*

      Represents the non-key attribute names which will be projected into the index.

      For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all of the
      local secondary indexes, must not exceed 20. If you project the same attribute into two
      different indexes, this counts as two distinct attributes when determining the total.

      - *(string) --*
    """


_ClientRestoreTableFromBackupLocalSecondaryIndexOverrideTypeDef = TypedDict(
    "_ClientRestoreTableFromBackupLocalSecondaryIndexOverrideTypeDef",
    {
        "IndexName": str,
        "KeySchema": List[ClientRestoreTableFromBackupLocalSecondaryIndexOverrideKeySchemaTypeDef],
        "Projection": ClientRestoreTableFromBackupLocalSecondaryIndexOverrideProjectionTypeDef,
    },
)


class ClientRestoreTableFromBackupLocalSecondaryIndexOverrideTypeDef(
    _ClientRestoreTableFromBackupLocalSecondaryIndexOverrideTypeDef
):
    """
    Type definition for `ClientRestoreTableFromBackup` `LocalSecondaryIndexOverride`

    Represents the properties of a local secondary index.

    - **IndexName** *(string) --* **[REQUIRED]**

      The name of the local secondary index. The name must be unique among all other indexes on this
      table.

    - **KeySchema** *(list) --* **[REQUIRED]**

      The complete key schema for the local secondary index, consisting of one or more pairs of
      attribute names and key types:

      * ``HASH`` - partition key

      * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.

      - *(dict) --*

        Represents *a single element* of a key schema. A key schema specifies the attributes that
        make up the primary key of a table, or the key attributes of an index.

        A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
        simple primary key would be represented by one ``KeySchemaElement`` (for the partition key).
        A composite primary key would require one ``KeySchemaElement`` for the partition key, and
        another ``KeySchemaElement`` for the sort key.

        A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The
        data type must be one of String, Number, or Binary. The attribute cannot be nested within a
        List or a Map.

        - **AttributeName** *(string) --* **[REQUIRED]**

          The name of a key attribute.

        - **KeyType** *(string) --* **[REQUIRED]**

          The role that this key attribute will assume:

          * ``HASH`` - partition key

          * ``RANGE`` - sort key

          .. note::

            The partition key of an item is also known as its *hash attribute* . The term "hash
            attribute" derives from DynamoDB's usage of an internal hash function to evenly
            distribute data items across partitions, based on their partition key values.

            The sort key of an item is also known as its *range attribute* . The term "range
            attribute" derives from the way DynamoDB stores items with the same partition key
            physically close together, in sorted order by the sort key value.

    - **Projection** *(dict) --* **[REQUIRED]**

      Represents attributes that are copied (projected) from the table into the local secondary
      index. These are in addition to the primary key attributes and index key attributes, which are
      automatically projected.

      - **ProjectionType** *(string) --*

        The set of attributes that are projected into the index:

        * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

        * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list
        of projected attributes is in ``NonKeyAttributes`` .

        * ``ALL`` - All of the table attributes are projected into the index.

      - **NonKeyAttributes** *(list) --*

        Represents the non-key attribute names which will be projected into the index.

        For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all of
        the local secondary indexes, must not exceed 20. If you project the same attribute into two
        different indexes, this counts as two distinct attributes when determining the total.

        - *(string) --*
    """


_ClientRestoreTableFromBackupProvisionedThroughputOverrideTypeDef = TypedDict(
    "_ClientRestoreTableFromBackupProvisionedThroughputOverrideTypeDef",
    {"ReadCapacityUnits": int, "WriteCapacityUnits": int},
)


class ClientRestoreTableFromBackupProvisionedThroughputOverrideTypeDef(
    _ClientRestoreTableFromBackupProvisionedThroughputOverrideTypeDef
):
    """
    Type definition for `ClientRestoreTableFromBackup` `ProvisionedThroughputOverride`

    Provisioned throughput settings for the restored table.

    - **ReadCapacityUnits** *(integer) --* **[REQUIRED]**

      The maximum number of strongly consistent reads consumed per second before DynamoDB returns a
      ``ThrottlingException`` . For more information, see `Specifying Read and Write Requirements
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
      in the *Amazon DynamoDB Developer Guide* .

      If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.

    - **WriteCapacityUnits** *(integer) --* **[REQUIRED]**

      The maximum number of writes consumed per second before DynamoDB returns a
      ``ThrottlingException`` . For more information, see `Specifying Read and Write Requirements
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
      in the *Amazon DynamoDB Developer Guide* .

      If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.
    """


_ClientRestoreTableFromBackupResponseTableDescriptionArchivalSummaryTypeDef = TypedDict(
    "_ClientRestoreTableFromBackupResponseTableDescriptionArchivalSummaryTypeDef",
    {"ArchivalDateTime": datetime, "ArchivalReason": str, "ArchivalBackupArn": str},
    total=False,
)


class ClientRestoreTableFromBackupResponseTableDescriptionArchivalSummaryTypeDef(
    _ClientRestoreTableFromBackupResponseTableDescriptionArchivalSummaryTypeDef
):
    """
    Type definition for `ClientRestoreTableFromBackupResponseTableDescription` `ArchivalSummary`

    Contains information about the table archive.

    - **ArchivalDateTime** *(datetime) --*

      The date and time when table archival was initiated by DynamoDB, in UNIX epoch time format.

    - **ArchivalReason** *(string) --*

      The reason DynamoDB archived the table. Currently, the only possible value is:

      * ``INACCESSIBLE_ENCRYPTION_CREDENTIALS`` - The table was archived due to the table's AWS KMS
      key being inaccessible for more than seven days. An On-Demand backup was created at the
      archival time.

    - **ArchivalBackupArn** *(string) --*

      The Amazon Resource Name (ARN) of the backup the table was archived to, when applicable in the
      archival reason. If you wish to restore this backup to the same table name, you will need to
      delete the original table.
    """


_ClientRestoreTableFromBackupResponseTableDescriptionAttributeDefinitionsTypeDef = TypedDict(
    "_ClientRestoreTableFromBackupResponseTableDescriptionAttributeDefinitionsTypeDef",
    {"AttributeName": str, "AttributeType": str},
    total=False,
)


class ClientRestoreTableFromBackupResponseTableDescriptionAttributeDefinitionsTypeDef(
    _ClientRestoreTableFromBackupResponseTableDescriptionAttributeDefinitionsTypeDef
):
    """
    Type definition for `ClientRestoreTableFromBackupResponseTableDescription`
    `AttributeDefinitions`

    Represents an attribute for describing the key schema for the table and indexes.

    - **AttributeName** *(string) --*

      A name for the attribute.

    - **AttributeType** *(string) --*

      The data type for the attribute, where:

      * ``S`` - the attribute is of type String

      * ``N`` - the attribute is of type Number

      * ``B`` - the attribute is of type Binary
    """


_ClientRestoreTableFromBackupResponseTableDescriptionBillingModeSummaryTypeDef = TypedDict(
    "_ClientRestoreTableFromBackupResponseTableDescriptionBillingModeSummaryTypeDef",
    {"BillingMode": str, "LastUpdateToPayPerRequestDateTime": datetime},
    total=False,
)


class ClientRestoreTableFromBackupResponseTableDescriptionBillingModeSummaryTypeDef(
    _ClientRestoreTableFromBackupResponseTableDescriptionBillingModeSummaryTypeDef
):
    """
    Type definition for `ClientRestoreTableFromBackupResponseTableDescription` `BillingModeSummary`

    Contains the details for the read/write capacity mode.

    - **BillingMode** *(string) --*

      Controls how you are charged for read and write throughput and how you manage capacity. This
      setting can be changed later.

      * ``PROVISIONED`` - Sets the read/write capacity mode to ``PROVISIONED`` . We recommend using
      ``PROVISIONED`` for predictable workloads.

      * ``PAY_PER_REQUEST`` - Sets the read/write capacity mode to ``PAY_PER_REQUEST`` . We
      recommend using ``PAY_PER_REQUEST`` for unpredictable workloads.

    - **LastUpdateToPayPerRequestDateTime** *(datetime) --*

      Represents the time when ``PAY_PER_REQUEST`` was last set as the read/write capacity mode.
    """


_ClientRestoreTableFromBackupResponseTableDescriptionGlobalSecondaryIndexesKeySchemaTypeDef = TypedDict(
    "_ClientRestoreTableFromBackupResponseTableDescriptionGlobalSecondaryIndexesKeySchemaTypeDef",
    {"AttributeName": str, "KeyType": str},
    total=False,
)


class ClientRestoreTableFromBackupResponseTableDescriptionGlobalSecondaryIndexesKeySchemaTypeDef(
    _ClientRestoreTableFromBackupResponseTableDescriptionGlobalSecondaryIndexesKeySchemaTypeDef
):
    """
    Type definition for `ClientRestoreTableFromBackupResponseTableDescriptionGlobalSecondaryIndexes`
    `KeySchema`

    Represents *a single element* of a key schema. A key schema specifies the attributes that make
    up the primary key of a table, or the key attributes of an index.

    A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
    simple primary key would be represented by one ``KeySchemaElement`` (for the partition key). A
    composite primary key would require one ``KeySchemaElement`` for the partition key, and another
    ``KeySchemaElement`` for the sort key.

    A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The data
    type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a
    Map.

    - **AttributeName** *(string) --*

      The name of a key attribute.

    - **KeyType** *(string) --*

      The role that this key attribute will assume:

      * ``HASH`` - partition key

      * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.
    """


_ClientRestoreTableFromBackupResponseTableDescriptionGlobalSecondaryIndexesProjectionTypeDef = TypedDict(
    "_ClientRestoreTableFromBackupResponseTableDescriptionGlobalSecondaryIndexesProjectionTypeDef",
    {"ProjectionType": str, "NonKeyAttributes": List[str]},
    total=False,
)


class ClientRestoreTableFromBackupResponseTableDescriptionGlobalSecondaryIndexesProjectionTypeDef(
    _ClientRestoreTableFromBackupResponseTableDescriptionGlobalSecondaryIndexesProjectionTypeDef
):
    """
    Type definition for `ClientRestoreTableFromBackupResponseTableDescriptionGlobalSecondaryIndexes`
    `Projection`

    Represents attributes that are copied (projected) from the table into the global secondary
    index. These are in addition to the primary key attributes and index key attributes, which are
    automatically projected.

    - **ProjectionType** *(string) --*

      The set of attributes that are projected into the index:

      * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

      * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list of
      projected attributes is in ``NonKeyAttributes`` .

      * ``ALL`` - All of the table attributes are projected into the index.

    - **NonKeyAttributes** *(list) --*

      Represents the non-key attribute names which will be projected into the index.

      For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all of the
      local secondary indexes, must not exceed 20. If you project the same attribute into two
      different indexes, this counts as two distinct attributes when determining the total.

      - *(string) --*
    """


_ClientRestoreTableFromBackupResponseTableDescriptionGlobalSecondaryIndexesProvisionedThroughputTypeDef = TypedDict(
    "_ClientRestoreTableFromBackupResponseTableDescriptionGlobalSecondaryIndexesProvisionedThroughputTypeDef",
    {
        "LastIncreaseDateTime": datetime,
        "LastDecreaseDateTime": datetime,
        "NumberOfDecreasesToday": int,
        "ReadCapacityUnits": int,
        "WriteCapacityUnits": int,
    },
    total=False,
)


class ClientRestoreTableFromBackupResponseTableDescriptionGlobalSecondaryIndexesProvisionedThroughputTypeDef(
    _ClientRestoreTableFromBackupResponseTableDescriptionGlobalSecondaryIndexesProvisionedThroughputTypeDef
):
    """
    Type definition for `ClientRestoreTableFromBackupResponseTableDescriptionGlobalSecondaryIndexes`
    `ProvisionedThroughput`

    Represents the provisioned throughput settings for the specified global secondary index.

    For current minimum and maximum provisioned throughput values, see `Limits
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the *Amazon
    DynamoDB Developer Guide* .

    - **LastIncreaseDateTime** *(datetime) --*

      The date and time of the last provisioned throughput increase for this table.

    - **LastDecreaseDateTime** *(datetime) --*

      The date and time of the last provisioned throughput decrease for this table.

    - **NumberOfDecreasesToday** *(integer) --*

      The number of provisioned throughput decreases for this table during this UTC calendar day.
      For current maximums on provisioned throughput decreases, see `Limits
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
      *Amazon DynamoDB Developer Guide* .

    - **ReadCapacityUnits** *(integer) --*

      The maximum number of strongly consistent reads consumed per second before DynamoDB returns a
      ``ThrottlingException`` . Eventually consistent reads require less effort than strongly
      consistent reads, so a setting of 50 ``ReadCapacityUnits`` per second provides 100 eventually
      consistent ``ReadCapacityUnits`` per second.

    - **WriteCapacityUnits** *(integer) --*

      The maximum number of writes consumed per second before DynamoDB returns a
      ``ThrottlingException`` .
    """


_ClientRestoreTableFromBackupResponseTableDescriptionGlobalSecondaryIndexesTypeDef = TypedDict(
    "_ClientRestoreTableFromBackupResponseTableDescriptionGlobalSecondaryIndexesTypeDef",
    {
        "IndexName": str,
        "KeySchema": List[
            ClientRestoreTableFromBackupResponseTableDescriptionGlobalSecondaryIndexesKeySchemaTypeDef
        ],
        "Projection": ClientRestoreTableFromBackupResponseTableDescriptionGlobalSecondaryIndexesProjectionTypeDef,
        "IndexStatus": str,
        "Backfilling": bool,
        "ProvisionedThroughput": ClientRestoreTableFromBackupResponseTableDescriptionGlobalSecondaryIndexesProvisionedThroughputTypeDef,
        "IndexSizeBytes": int,
        "ItemCount": int,
        "IndexArn": str,
    },
    total=False,
)


class ClientRestoreTableFromBackupResponseTableDescriptionGlobalSecondaryIndexesTypeDef(
    _ClientRestoreTableFromBackupResponseTableDescriptionGlobalSecondaryIndexesTypeDef
):
    """
    Type definition for `ClientRestoreTableFromBackupResponseTableDescription`
    `GlobalSecondaryIndexes`

    Represents the properties of a global secondary index.

    - **IndexName** *(string) --*

      The name of the global secondary index.

    - **KeySchema** *(list) --*

      The complete key schema for a global secondary index, which consists of one or more pairs of
      attribute names and key types:

      * ``HASH`` - partition key

      * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.

      - *(dict) --*

        Represents *a single element* of a key schema. A key schema specifies the attributes that
        make up the primary key of a table, or the key attributes of an index.

        A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
        simple primary key would be represented by one ``KeySchemaElement`` (for the partition key).
        A composite primary key would require one ``KeySchemaElement`` for the partition key, and
        another ``KeySchemaElement`` for the sort key.

        A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The
        data type must be one of String, Number, or Binary. The attribute cannot be nested within a
        List or a Map.

        - **AttributeName** *(string) --*

          The name of a key attribute.

        - **KeyType** *(string) --*

          The role that this key attribute will assume:

          * ``HASH`` - partition key

          * ``RANGE`` - sort key

          .. note::

            The partition key of an item is also known as its *hash attribute* . The term "hash
            attribute" derives from DynamoDB's usage of an internal hash function to evenly
            distribute data items across partitions, based on their partition key values.

            The sort key of an item is also known as its *range attribute* . The term "range
            attribute" derives from the way DynamoDB stores items with the same partition key
            physically close together, in sorted order by the sort key value.

    - **Projection** *(dict) --*

      Represents attributes that are copied (projected) from the table into the global secondary
      index. These are in addition to the primary key attributes and index key attributes, which are
      automatically projected.

      - **ProjectionType** *(string) --*

        The set of attributes that are projected into the index:

        * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

        * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list
        of projected attributes is in ``NonKeyAttributes`` .

        * ``ALL`` - All of the table attributes are projected into the index.

      - **NonKeyAttributes** *(list) --*

        Represents the non-key attribute names which will be projected into the index.

        For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all of
        the local secondary indexes, must not exceed 20. If you project the same attribute into two
        different indexes, this counts as two distinct attributes when determining the total.

        - *(string) --*

    - **IndexStatus** *(string) --*

      The current state of the global secondary index:

      * ``CREATING`` - The index is being created.

      * ``UPDATING`` - The index is being updated.

      * ``DELETING`` - The index is being deleted.

      * ``ACTIVE`` - The index is ready for use.

    - **Backfilling** *(boolean) --*

      Indicates whether the index is currently backfilling. *Backfilling* is the process of reading
      items from the table and determining whether they can be added to the index. (Not all items
      will qualify: For example, a partition key cannot have any duplicate values.) If an item can
      be added to the index, DynamoDB will do so. After all items have been processed, the
      backfilling operation is complete and ``Backfilling`` is false.

      You can delete an index that is being created during the ``Backfilling`` phase when
      ``IndexStatus`` is set to CREATING and ``Backfilling`` is true. You can't delete the index
      that is being created when ``IndexStatus`` is set to CREATING and ``Backfilling`` is false.

      .. note::

        For indexes that were created during a ``CreateTable`` operation, the ``Backfilling``
        attribute does not appear in the ``DescribeTable`` output.

    - **ProvisionedThroughput** *(dict) --*

      Represents the provisioned throughput settings for the specified global secondary index.

      For current minimum and maximum provisioned throughput values, see `Limits
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
      *Amazon DynamoDB Developer Guide* .

      - **LastIncreaseDateTime** *(datetime) --*

        The date and time of the last provisioned throughput increase for this table.

      - **LastDecreaseDateTime** *(datetime) --*

        The date and time of the last provisioned throughput decrease for this table.

      - **NumberOfDecreasesToday** *(integer) --*

        The number of provisioned throughput decreases for this table during this UTC calendar day.
        For current maximums on provisioned throughput decreases, see `Limits
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
        *Amazon DynamoDB Developer Guide* .

      - **ReadCapacityUnits** *(integer) --*

        The maximum number of strongly consistent reads consumed per second before DynamoDB returns
        a ``ThrottlingException`` . Eventually consistent reads require less effort than strongly
        consistent reads, so a setting of 50 ``ReadCapacityUnits`` per second provides 100
        eventually consistent ``ReadCapacityUnits`` per second.

      - **WriteCapacityUnits** *(integer) --*

        The maximum number of writes consumed per second before DynamoDB returns a
        ``ThrottlingException`` .

    - **IndexSizeBytes** *(integer) --*

      The total size of the specified index, in bytes. DynamoDB updates this value approximately
      every six hours. Recent changes might not be reflected in this value.

    - **ItemCount** *(integer) --*

      The number of items in the specified index. DynamoDB updates this value approximately every
      six hours. Recent changes might not be reflected in this value.

    - **IndexArn** *(string) --*

      The Amazon Resource Name (ARN) that uniquely identifies the index.
    """


_ClientRestoreTableFromBackupResponseTableDescriptionKeySchemaTypeDef = TypedDict(
    "_ClientRestoreTableFromBackupResponseTableDescriptionKeySchemaTypeDef",
    {"AttributeName": str, "KeyType": str},
    total=False,
)


class ClientRestoreTableFromBackupResponseTableDescriptionKeySchemaTypeDef(
    _ClientRestoreTableFromBackupResponseTableDescriptionKeySchemaTypeDef
):
    """
    Type definition for `ClientRestoreTableFromBackupResponseTableDescription` `KeySchema`

    Represents *a single element* of a key schema. A key schema specifies the attributes that make
    up the primary key of a table, or the key attributes of an index.

    A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
    simple primary key would be represented by one ``KeySchemaElement`` (for the partition key). A
    composite primary key would require one ``KeySchemaElement`` for the partition key, and another
    ``KeySchemaElement`` for the sort key.

    A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The data
    type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a
    Map.

    - **AttributeName** *(string) --*

      The name of a key attribute.

    - **KeyType** *(string) --*

      The role that this key attribute will assume:

      * ``HASH`` - partition key

      * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.
    """


_ClientRestoreTableFromBackupResponseTableDescriptionLocalSecondaryIndexesKeySchemaTypeDef = TypedDict(
    "_ClientRestoreTableFromBackupResponseTableDescriptionLocalSecondaryIndexesKeySchemaTypeDef",
    {"AttributeName": str, "KeyType": str},
    total=False,
)


class ClientRestoreTableFromBackupResponseTableDescriptionLocalSecondaryIndexesKeySchemaTypeDef(
    _ClientRestoreTableFromBackupResponseTableDescriptionLocalSecondaryIndexesKeySchemaTypeDef
):
    """
    Type definition for `ClientRestoreTableFromBackupResponseTableDescriptionLocalSecondaryIndexes`
    `KeySchema`

    Represents *a single element* of a key schema. A key schema specifies the attributes that make
    up the primary key of a table, or the key attributes of an index.

    A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
    simple primary key would be represented by one ``KeySchemaElement`` (for the partition key). A
    composite primary key would require one ``KeySchemaElement`` for the partition key, and another
    ``KeySchemaElement`` for the sort key.

    A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The data
    type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a
    Map.

    - **AttributeName** *(string) --*

      The name of a key attribute.

    - **KeyType** *(string) --*

      The role that this key attribute will assume:

      * ``HASH`` - partition key

      * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.
    """


_ClientRestoreTableFromBackupResponseTableDescriptionLocalSecondaryIndexesProjectionTypeDef = TypedDict(
    "_ClientRestoreTableFromBackupResponseTableDescriptionLocalSecondaryIndexesProjectionTypeDef",
    {"ProjectionType": str, "NonKeyAttributes": List[str]},
    total=False,
)


class ClientRestoreTableFromBackupResponseTableDescriptionLocalSecondaryIndexesProjectionTypeDef(
    _ClientRestoreTableFromBackupResponseTableDescriptionLocalSecondaryIndexesProjectionTypeDef
):
    """
    Type definition for `ClientRestoreTableFromBackupResponseTableDescriptionLocalSecondaryIndexes`
    `Projection`

    Represents attributes that are copied (projected) from the table into the global secondary
    index. These are in addition to the primary key attributes and index key attributes, which are
    automatically projected.

    - **ProjectionType** *(string) --*

      The set of attributes that are projected into the index:

      * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

      * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list of
      projected attributes is in ``NonKeyAttributes`` .

      * ``ALL`` - All of the table attributes are projected into the index.

    - **NonKeyAttributes** *(list) --*

      Represents the non-key attribute names which will be projected into the index.

      For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all of the
      local secondary indexes, must not exceed 20. If you project the same attribute into two
      different indexes, this counts as two distinct attributes when determining the total.

      - *(string) --*
    """


_ClientRestoreTableFromBackupResponseTableDescriptionLocalSecondaryIndexesTypeDef = TypedDict(
    "_ClientRestoreTableFromBackupResponseTableDescriptionLocalSecondaryIndexesTypeDef",
    {
        "IndexName": str,
        "KeySchema": List[
            ClientRestoreTableFromBackupResponseTableDescriptionLocalSecondaryIndexesKeySchemaTypeDef
        ],
        "Projection": ClientRestoreTableFromBackupResponseTableDescriptionLocalSecondaryIndexesProjectionTypeDef,
        "IndexSizeBytes": int,
        "ItemCount": int,
        "IndexArn": str,
    },
    total=False,
)


class ClientRestoreTableFromBackupResponseTableDescriptionLocalSecondaryIndexesTypeDef(
    _ClientRestoreTableFromBackupResponseTableDescriptionLocalSecondaryIndexesTypeDef
):
    """
    Type definition for `ClientRestoreTableFromBackupResponseTableDescription`
    `LocalSecondaryIndexes`

    Represents the properties of a local secondary index.

    - **IndexName** *(string) --*

      Represents the name of the local secondary index.

    - **KeySchema** *(list) --*

      The complete key schema for the local secondary index, consisting of one or more pairs of
      attribute names and key types:

      * ``HASH`` - partition key

      * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.

      - *(dict) --*

        Represents *a single element* of a key schema. A key schema specifies the attributes that
        make up the primary key of a table, or the key attributes of an index.

        A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
        simple primary key would be represented by one ``KeySchemaElement`` (for the partition key).
        A composite primary key would require one ``KeySchemaElement`` for the partition key, and
        another ``KeySchemaElement`` for the sort key.

        A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The
        data type must be one of String, Number, or Binary. The attribute cannot be nested within a
        List or a Map.

        - **AttributeName** *(string) --*

          The name of a key attribute.

        - **KeyType** *(string) --*

          The role that this key attribute will assume:

          * ``HASH`` - partition key

          * ``RANGE`` - sort key

          .. note::

            The partition key of an item is also known as its *hash attribute* . The term "hash
            attribute" derives from DynamoDB's usage of an internal hash function to evenly
            distribute data items across partitions, based on their partition key values.

            The sort key of an item is also known as its *range attribute* . The term "range
            attribute" derives from the way DynamoDB stores items with the same partition key
            physically close together, in sorted order by the sort key value.

    - **Projection** *(dict) --*

      Represents attributes that are copied (projected) from the table into the global secondary
      index. These are in addition to the primary key attributes and index key attributes, which are
      automatically projected.

      - **ProjectionType** *(string) --*

        The set of attributes that are projected into the index:

        * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

        * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list
        of projected attributes is in ``NonKeyAttributes`` .

        * ``ALL`` - All of the table attributes are projected into the index.

      - **NonKeyAttributes** *(list) --*

        Represents the non-key attribute names which will be projected into the index.

        For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all of
        the local secondary indexes, must not exceed 20. If you project the same attribute into two
        different indexes, this counts as two distinct attributes when determining the total.

        - *(string) --*

    - **IndexSizeBytes** *(integer) --*

      The total size of the specified index, in bytes. DynamoDB updates this value approximately
      every six hours. Recent changes might not be reflected in this value.

    - **ItemCount** *(integer) --*

      The number of items in the specified index. DynamoDB updates this value approximately every
      six hours. Recent changes might not be reflected in this value.

    - **IndexArn** *(string) --*

      The Amazon Resource Name (ARN) that uniquely identifies the index.
    """


_ClientRestoreTableFromBackupResponseTableDescriptionProvisionedThroughputTypeDef = TypedDict(
    "_ClientRestoreTableFromBackupResponseTableDescriptionProvisionedThroughputTypeDef",
    {
        "LastIncreaseDateTime": datetime,
        "LastDecreaseDateTime": datetime,
        "NumberOfDecreasesToday": int,
        "ReadCapacityUnits": int,
        "WriteCapacityUnits": int,
    },
    total=False,
)


class ClientRestoreTableFromBackupResponseTableDescriptionProvisionedThroughputTypeDef(
    _ClientRestoreTableFromBackupResponseTableDescriptionProvisionedThroughputTypeDef
):
    """
    Type definition for `ClientRestoreTableFromBackupResponseTableDescription`
    `ProvisionedThroughput`

    The provisioned throughput settings for the table, consisting of read and write capacity units,
    along with data about increases and decreases.

    - **LastIncreaseDateTime** *(datetime) --*

      The date and time of the last provisioned throughput increase for this table.

    - **LastDecreaseDateTime** *(datetime) --*

      The date and time of the last provisioned throughput decrease for this table.

    - **NumberOfDecreasesToday** *(integer) --*

      The number of provisioned throughput decreases for this table during this UTC calendar day.
      For current maximums on provisioned throughput decreases, see `Limits
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
      *Amazon DynamoDB Developer Guide* .

    - **ReadCapacityUnits** *(integer) --*

      The maximum number of strongly consistent reads consumed per second before DynamoDB returns a
      ``ThrottlingException`` . Eventually consistent reads require less effort than strongly
      consistent reads, so a setting of 50 ``ReadCapacityUnits`` per second provides 100 eventually
      consistent ``ReadCapacityUnits`` per second.

    - **WriteCapacityUnits** *(integer) --*

      The maximum number of writes consumed per second before DynamoDB returns a
      ``ThrottlingException`` .
    """


_ClientRestoreTableFromBackupResponseTableDescriptionReplicasGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef = TypedDict(
    "_ClientRestoreTableFromBackupResponseTableDescriptionReplicasGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef",
    {"ReadCapacityUnits": int},
    total=False,
)


class ClientRestoreTableFromBackupResponseTableDescriptionReplicasGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef(
    _ClientRestoreTableFromBackupResponseTableDescriptionReplicasGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef
):
    """
    Type definition for
    `ClientRestoreTableFromBackupResponseTableDescriptionReplicasGlobalSecondaryIndexes`
    `ProvisionedThroughputOverride`

    If not described, uses the source table GSI's read capacity settings.

    - **ReadCapacityUnits** *(integer) --*

      Replica-specific read capacity units. If not specified, uses the source table's read capacity
      settings.
    """


_ClientRestoreTableFromBackupResponseTableDescriptionReplicasGlobalSecondaryIndexesTypeDef = TypedDict(
    "_ClientRestoreTableFromBackupResponseTableDescriptionReplicasGlobalSecondaryIndexesTypeDef",
    {
        "IndexName": str,
        "ProvisionedThroughputOverride": ClientRestoreTableFromBackupResponseTableDescriptionReplicasGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef,
    },
    total=False,
)


class ClientRestoreTableFromBackupResponseTableDescriptionReplicasGlobalSecondaryIndexesTypeDef(
    _ClientRestoreTableFromBackupResponseTableDescriptionReplicasGlobalSecondaryIndexesTypeDef
):
    """
    Type definition for `ClientRestoreTableFromBackupResponseTableDescriptionReplicas`
    `GlobalSecondaryIndexes`

    Represents the properties of a replica global secondary index.

    - **IndexName** *(string) --*

      The name of the global secondary index.

    - **ProvisionedThroughputOverride** *(dict) --*

      If not described, uses the source table GSI's read capacity settings.

      - **ReadCapacityUnits** *(integer) --*

        Replica-specific read capacity units. If not specified, uses the source table's read
        capacity settings.
    """


_ClientRestoreTableFromBackupResponseTableDescriptionReplicasProvisionedThroughputOverrideTypeDef = TypedDict(
    "_ClientRestoreTableFromBackupResponseTableDescriptionReplicasProvisionedThroughputOverrideTypeDef",
    {"ReadCapacityUnits": int},
    total=False,
)


class ClientRestoreTableFromBackupResponseTableDescriptionReplicasProvisionedThroughputOverrideTypeDef(
    _ClientRestoreTableFromBackupResponseTableDescriptionReplicasProvisionedThroughputOverrideTypeDef
):
    """
    Type definition for `ClientRestoreTableFromBackupResponseTableDescriptionReplicas`
    `ProvisionedThroughputOverride`

    Replica-specific provisioned throughput. If not described, uses the source table's provisioned
    throughput settings.

    - **ReadCapacityUnits** *(integer) --*

      Replica-specific read capacity units. If not specified, uses the source table's read capacity
      settings.
    """


_ClientRestoreTableFromBackupResponseTableDescriptionReplicasTypeDef = TypedDict(
    "_ClientRestoreTableFromBackupResponseTableDescriptionReplicasTypeDef",
    {
        "RegionName": str,
        "ReplicaStatus": str,
        "ReplicaStatusDescription": str,
        "ReplicaStatusPercentProgress": str,
        "KMSMasterKeyId": str,
        "ProvisionedThroughputOverride": ClientRestoreTableFromBackupResponseTableDescriptionReplicasProvisionedThroughputOverrideTypeDef,
        "GlobalSecondaryIndexes": List[
            ClientRestoreTableFromBackupResponseTableDescriptionReplicasGlobalSecondaryIndexesTypeDef
        ],
    },
    total=False,
)


class ClientRestoreTableFromBackupResponseTableDescriptionReplicasTypeDef(
    _ClientRestoreTableFromBackupResponseTableDescriptionReplicasTypeDef
):
    """
    Type definition for `ClientRestoreTableFromBackupResponseTableDescription` `Replicas`

    Contains the details of the replica.

    - **RegionName** *(string) --*

      The name of the Region.

    - **ReplicaStatus** *(string) --*

      The current state of the replica:

      * ``CREATING`` - The replica is being created.

      * ``UPDATING`` - The replica is being updated.

      * ``DELETING`` - The replica is being deleted.

      * ``ACTIVE`` - The replica is ready for use.

    - **ReplicaStatusDescription** *(string) --*

      Detailed information about the replica status.

    - **ReplicaStatusPercentProgress** *(string) --*

      Specifies the progress of a Create, Update, or Delete action on the replica as a percentage.

    - **KMSMasterKeyId** *(string) --*

      The AWS KMS customer master key (CMK) of the replica that will be used for AWS KMS encryption.

    - **ProvisionedThroughputOverride** *(dict) --*

      Replica-specific provisioned throughput. If not described, uses the source table's provisioned
      throughput settings.

      - **ReadCapacityUnits** *(integer) --*

        Replica-specific read capacity units. If not specified, uses the source table's read
        capacity settings.

    - **GlobalSecondaryIndexes** *(list) --*

      Replica-specific global secondary index settings.

      - *(dict) --*

        Represents the properties of a replica global secondary index.

        - **IndexName** *(string) --*

          The name of the global secondary index.

        - **ProvisionedThroughputOverride** *(dict) --*

          If not described, uses the source table GSI's read capacity settings.

          - **ReadCapacityUnits** *(integer) --*

            Replica-specific read capacity units. If not specified, uses the source table's read
            capacity settings.
    """


_ClientRestoreTableFromBackupResponseTableDescriptionRestoreSummaryTypeDef = TypedDict(
    "_ClientRestoreTableFromBackupResponseTableDescriptionRestoreSummaryTypeDef",
    {
        "SourceBackupArn": str,
        "SourceTableArn": str,
        "RestoreDateTime": datetime,
        "RestoreInProgress": bool,
    },
    total=False,
)


class ClientRestoreTableFromBackupResponseTableDescriptionRestoreSummaryTypeDef(
    _ClientRestoreTableFromBackupResponseTableDescriptionRestoreSummaryTypeDef
):
    """
    Type definition for `ClientRestoreTableFromBackupResponseTableDescription` `RestoreSummary`

    Contains details for the restore.

    - **SourceBackupArn** *(string) --*

      The Amazon Resource Name (ARN) of the backup from which the table was restored.

    - **SourceTableArn** *(string) --*

      The ARN of the source table of the backup that is being restored.

    - **RestoreDateTime** *(datetime) --*

      Point in time or source backup time.

    - **RestoreInProgress** *(boolean) --*

      Indicates if a restore is in progress or not.
    """


_ClientRestoreTableFromBackupResponseTableDescriptionSSEDescriptionTypeDef = TypedDict(
    "_ClientRestoreTableFromBackupResponseTableDescriptionSSEDescriptionTypeDef",
    {
        "Status": str,
        "SSEType": str,
        "KMSMasterKeyArn": str,
        "InaccessibleEncryptionDateTime": datetime,
    },
    total=False,
)


class ClientRestoreTableFromBackupResponseTableDescriptionSSEDescriptionTypeDef(
    _ClientRestoreTableFromBackupResponseTableDescriptionSSEDescriptionTypeDef
):
    """
    Type definition for `ClientRestoreTableFromBackupResponseTableDescription` `SSEDescription`

    The description of the server-side encryption status on the specified table.

    - **Status** *(string) --*

      Represents the current state of server-side encryption. The only supported values are:

      * ``ENABLED`` - Server-side encryption is enabled.

      * ``UPDATING`` - Server-side encryption is being updated.

    - **SSEType** *(string) --*

      Server-side encryption type. The only supported value is:

      * ``KMS`` - Server-side encryption that uses AWS Key Management Service. The key is stored in
      your account and is managed by AWS KMS (AWS KMS charges apply).

    - **KMSMasterKeyArn** *(string) --*

      The AWS KMS customer master key (CMK) ARN used for the AWS KMS encryption.

    - **InaccessibleEncryptionDateTime** *(datetime) --*

      Indicates the time, in UNIX epoch date format, when DynamoDB detected that the table's AWS KMS
      key was inaccessible. This attribute will automatically be cleared when DynamoDB detects that
      the table's AWS KMS key is accessible again. DynamoDB will initiate the table archival process
      when table's AWS KMS key remains inaccessible for more than seven days from this date.
    """


_ClientRestoreTableFromBackupResponseTableDescriptionStreamSpecificationTypeDef = TypedDict(
    "_ClientRestoreTableFromBackupResponseTableDescriptionStreamSpecificationTypeDef",
    {"StreamEnabled": bool, "StreamViewType": str},
    total=False,
)


class ClientRestoreTableFromBackupResponseTableDescriptionStreamSpecificationTypeDef(
    _ClientRestoreTableFromBackupResponseTableDescriptionStreamSpecificationTypeDef
):
    """
    Type definition for `ClientRestoreTableFromBackupResponseTableDescription` `StreamSpecification`

    The current DynamoDB Streams configuration for the table.

    - **StreamEnabled** *(boolean) --*

      Indicates whether DynamoDB Streams is enabled (true) or disabled (false) on the table.

    - **StreamViewType** *(string) --*

      When an item in the table is modified, ``StreamViewType`` determines what information is
      written to the stream for this table. Valid values for ``StreamViewType`` are:

      * ``KEYS_ONLY`` - Only the key attributes of the modified item are written to the stream.

      * ``NEW_IMAGE`` - The entire item, as it appears after it was modified, is written to the
      stream.

      * ``OLD_IMAGE`` - The entire item, as it appeared before it was modified, is written to the
      stream.

      * ``NEW_AND_OLD_IMAGES`` - Both the new and the old item images of the item are written to the
      stream.
    """


_ClientRestoreTableFromBackupResponseTableDescriptionTypeDef = TypedDict(
    "_ClientRestoreTableFromBackupResponseTableDescriptionTypeDef",
    {
        "AttributeDefinitions": List[
            ClientRestoreTableFromBackupResponseTableDescriptionAttributeDefinitionsTypeDef
        ],
        "TableName": str,
        "KeySchema": List[ClientRestoreTableFromBackupResponseTableDescriptionKeySchemaTypeDef],
        "TableStatus": str,
        "CreationDateTime": datetime,
        "ProvisionedThroughput": ClientRestoreTableFromBackupResponseTableDescriptionProvisionedThroughputTypeDef,
        "TableSizeBytes": int,
        "ItemCount": int,
        "TableArn": str,
        "TableId": str,
        "BillingModeSummary": ClientRestoreTableFromBackupResponseTableDescriptionBillingModeSummaryTypeDef,
        "LocalSecondaryIndexes": List[
            ClientRestoreTableFromBackupResponseTableDescriptionLocalSecondaryIndexesTypeDef
        ],
        "GlobalSecondaryIndexes": List[
            ClientRestoreTableFromBackupResponseTableDescriptionGlobalSecondaryIndexesTypeDef
        ],
        "StreamSpecification": ClientRestoreTableFromBackupResponseTableDescriptionStreamSpecificationTypeDef,
        "LatestStreamLabel": str,
        "LatestStreamArn": str,
        "GlobalTableVersion": str,
        "Replicas": List[ClientRestoreTableFromBackupResponseTableDescriptionReplicasTypeDef],
        "RestoreSummary": ClientRestoreTableFromBackupResponseTableDescriptionRestoreSummaryTypeDef,
        "SSEDescription": ClientRestoreTableFromBackupResponseTableDescriptionSSEDescriptionTypeDef,
        "ArchivalSummary": ClientRestoreTableFromBackupResponseTableDescriptionArchivalSummaryTypeDef,
    },
    total=False,
)


class ClientRestoreTableFromBackupResponseTableDescriptionTypeDef(
    _ClientRestoreTableFromBackupResponseTableDescriptionTypeDef
):
    """
    Type definition for `ClientRestoreTableFromBackupResponse` `TableDescription`

    The description of the table created from an existing backup.

    - **AttributeDefinitions** *(list) --*

      An array of ``AttributeDefinition`` objects. Each of these objects describes one attribute in
      the table and index key schema.

      Each ``AttributeDefinition`` object in this array is composed of:

      * ``AttributeName`` - The name of the attribute.

      * ``AttributeType`` - The data type for the attribute.

      - *(dict) --*

        Represents an attribute for describing the key schema for the table and indexes.

        - **AttributeName** *(string) --*

          A name for the attribute.

        - **AttributeType** *(string) --*

          The data type for the attribute, where:

          * ``S`` - the attribute is of type String

          * ``N`` - the attribute is of type Number

          * ``B`` - the attribute is of type Binary

    - **TableName** *(string) --*

      The name of the table.

    - **KeySchema** *(list) --*

      The primary key structure for the table. Each ``KeySchemaElement`` consists of:

      * ``AttributeName`` - The name of the attribute.

      * ``KeyType`` - The role of the attribute:

        * ``HASH`` - partition key

        * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.

      For more information about primary keys, see `Primary Key
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html#DataModelPrimaryKey>`__
      in the *Amazon DynamoDB Developer Guide* .

      - *(dict) --*

        Represents *a single element* of a key schema. A key schema specifies the attributes that
        make up the primary key of a table, or the key attributes of an index.

        A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
        simple primary key would be represented by one ``KeySchemaElement`` (for the partition key).
        A composite primary key would require one ``KeySchemaElement`` for the partition key, and
        another ``KeySchemaElement`` for the sort key.

        A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The
        data type must be one of String, Number, or Binary. The attribute cannot be nested within a
        List or a Map.

        - **AttributeName** *(string) --*

          The name of a key attribute.

        - **KeyType** *(string) --*

          The role that this key attribute will assume:

          * ``HASH`` - partition key

          * ``RANGE`` - sort key

          .. note::

            The partition key of an item is also known as its *hash attribute* . The term "hash
            attribute" derives from DynamoDB's usage of an internal hash function to evenly
            distribute data items across partitions, based on their partition key values.

            The sort key of an item is also known as its *range attribute* . The term "range
            attribute" derives from the way DynamoDB stores items with the same partition key
            physically close together, in sorted order by the sort key value.

    - **TableStatus** *(string) --*

      The current state of the table:

      * ``CREATING`` - The table is being created.

      * ``UPDATING`` - The table is being updated.

      * ``DELETING`` - The table is being deleted.

      * ``ACTIVE`` - The table is ready for use.

      * ``INACCESSIBLE_ENCRYPTION_CREDENTIALS`` - The AWS KMS key used to encrypt the table in
      inaccessible. Table operations may fail due to failure to use the AWS KMS key. DynamoDB will
      initiate the table archival process when a table's AWS KMS key remains inaccessible for more
      than seven days.

      * ``ARCHIVING`` - The table is being archived. Operations are not allowed until archival is
      complete.

      * ``ARCHIVED`` - The table has been archived. See the ArchivalReason for more information.

    - **CreationDateTime** *(datetime) --*

      The date and time when the table was created, in `UNIX epoch time
      <http://www.epochconverter.com/>`__ format.

    - **ProvisionedThroughput** *(dict) --*

      The provisioned throughput settings for the table, consisting of read and write capacity
      units, along with data about increases and decreases.

      - **LastIncreaseDateTime** *(datetime) --*

        The date and time of the last provisioned throughput increase for this table.

      - **LastDecreaseDateTime** *(datetime) --*

        The date and time of the last provisioned throughput decrease for this table.

      - **NumberOfDecreasesToday** *(integer) --*

        The number of provisioned throughput decreases for this table during this UTC calendar day.
        For current maximums on provisioned throughput decreases, see `Limits
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
        *Amazon DynamoDB Developer Guide* .

      - **ReadCapacityUnits** *(integer) --*

        The maximum number of strongly consistent reads consumed per second before DynamoDB returns
        a ``ThrottlingException`` . Eventually consistent reads require less effort than strongly
        consistent reads, so a setting of 50 ``ReadCapacityUnits`` per second provides 100
        eventually consistent ``ReadCapacityUnits`` per second.

      - **WriteCapacityUnits** *(integer) --*

        The maximum number of writes consumed per second before DynamoDB returns a
        ``ThrottlingException`` .

    - **TableSizeBytes** *(integer) --*

      The total size of the specified table, in bytes. DynamoDB updates this value approximately
      every six hours. Recent changes might not be reflected in this value.

    - **ItemCount** *(integer) --*

      The number of items in the specified table. DynamoDB updates this value approximately every
      six hours. Recent changes might not be reflected in this value.

    - **TableArn** *(string) --*

      The Amazon Resource Name (ARN) that uniquely identifies the table.

    - **TableId** *(string) --*

      Unique identifier for the table for which the backup was created.

    - **BillingModeSummary** *(dict) --*

      Contains the details for the read/write capacity mode.

      - **BillingMode** *(string) --*

        Controls how you are charged for read and write throughput and how you manage capacity. This
        setting can be changed later.

        * ``PROVISIONED`` - Sets the read/write capacity mode to ``PROVISIONED`` . We recommend
        using ``PROVISIONED`` for predictable workloads.

        * ``PAY_PER_REQUEST`` - Sets the read/write capacity mode to ``PAY_PER_REQUEST`` . We
        recommend using ``PAY_PER_REQUEST`` for unpredictable workloads.

      - **LastUpdateToPayPerRequestDateTime** *(datetime) --*

        Represents the time when ``PAY_PER_REQUEST`` was last set as the read/write capacity mode.

    - **LocalSecondaryIndexes** *(list) --*

      Represents one or more local secondary indexes on the table. Each index is scoped to a given
      partition key value. Tables with one or more local secondary indexes are subject to an item
      collection size limit, where the amount of data within a given item collection cannot exceed
      10 GB. Each element is composed of:

      * ``IndexName`` - The name of the local secondary index.

      * ``KeySchema`` - Specifies the complete index key schema. The attribute names in the key
      schema must be between 1 and 255 characters (inclusive). The key schema must begin with the
      same partition key as the table.

      * ``Projection`` - Specifies attributes that are copied (projected) from the table into the
      index. These are in addition to the primary key attributes and index key attributes, which are
      automatically projected. Each attribute specification is composed of:

        * ``ProjectionType`` - One of the following:

          * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

          * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list
          of projected attributes is in ``NonKeyAttributes`` .

          * ``ALL`` - All of the table attributes are projected into the index.

        * ``NonKeyAttributes`` - A list of one or more non-key attribute names that are projected
        into the secondary index. The total count of attributes provided in ``NonKeyAttributes`` ,
        summed across all of the secondary indexes, must not exceed 20. If you project the same
        attribute into two different indexes, this counts as two distinct attributes when
        determining the total.

      * ``IndexSizeBytes`` - Represents the total size of the index, in bytes. DynamoDB updates this
      value approximately every six hours. Recent changes might not be reflected in this value.

      * ``ItemCount`` - Represents the number of items in the index. DynamoDB updates this value
      approximately every six hours. Recent changes might not be reflected in this value.

      If the table is in the ``DELETING`` state, no information about indexes will be returned.

      - *(dict) --*

        Represents the properties of a local secondary index.

        - **IndexName** *(string) --*

          Represents the name of the local secondary index.

        - **KeySchema** *(list) --*

          The complete key schema for the local secondary index, consisting of one or more pairs of
          attribute names and key types:

          * ``HASH`` - partition key

          * ``RANGE`` - sort key

          .. note::

            The partition key of an item is also known as its *hash attribute* . The term "hash
            attribute" derives from DynamoDB's usage of an internal hash function to evenly
            distribute data items across partitions, based on their partition key values.

            The sort key of an item is also known as its *range attribute* . The term "range
            attribute" derives from the way DynamoDB stores items with the same partition key
            physically close together, in sorted order by the sort key value.

          - *(dict) --*

            Represents *a single element* of a key schema. A key schema specifies the attributes
            that make up the primary key of a table, or the key attributes of an index.

            A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example,
            a simple primary key would be represented by one ``KeySchemaElement`` (for the partition
            key). A composite primary key would require one ``KeySchemaElement`` for the partition
            key, and another ``KeySchemaElement`` for the sort key.

            A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute).
            The data type must be one of String, Number, or Binary. The attribute cannot be nested
            within a List or a Map.

            - **AttributeName** *(string) --*

              The name of a key attribute.

            - **KeyType** *(string) --*

              The role that this key attribute will assume:

              * ``HASH`` - partition key

              * ``RANGE`` - sort key

              .. note::

                The partition key of an item is also known as its *hash attribute* . The term "hash
                attribute" derives from DynamoDB's usage of an internal hash function to evenly
                distribute data items across partitions, based on their partition key values.

                The sort key of an item is also known as its *range attribute* . The term "range
                attribute" derives from the way DynamoDB stores items with the same partition key
                physically close together, in sorted order by the sort key value.

        - **Projection** *(dict) --*

          Represents attributes that are copied (projected) from the table into the global secondary
          index. These are in addition to the primary key attributes and index key attributes, which
          are automatically projected.

          - **ProjectionType** *(string) --*

            The set of attributes that are projected into the index:

            * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

            * ``INCLUDE`` - Only the specified table attributes are projected into the index. The
            list of projected attributes is in ``NonKeyAttributes`` .

            * ``ALL`` - All of the table attributes are projected into the index.

          - **NonKeyAttributes** *(list) --*

            Represents the non-key attribute names which will be projected into the index.

            For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all
            of the local secondary indexes, must not exceed 20. If you project the same attribute
            into two different indexes, this counts as two distinct attributes when determining the
            total.

            - *(string) --*

        - **IndexSizeBytes** *(integer) --*

          The total size of the specified index, in bytes. DynamoDB updates this value approximately
          every six hours. Recent changes might not be reflected in this value.

        - **ItemCount** *(integer) --*

          The number of items in the specified index. DynamoDB updates this value approximately
          every six hours. Recent changes might not be reflected in this value.

        - **IndexArn** *(string) --*

          The Amazon Resource Name (ARN) that uniquely identifies the index.

    - **GlobalSecondaryIndexes** *(list) --*

      The global secondary indexes, if any, on the table. Each index is scoped to a given partition
      key value. Each element is composed of:

      * ``Backfilling`` - If true, then the index is currently in the backfilling phase. Backfilling
      occurs only when a new global secondary index is added to the table. It is the process by
      which DynamoDB populates the new index with data from the table. (This attribute does not
      appear for indexes that were created during a ``CreateTable`` operation.)  You can delete an
      index that is being created during the ``Backfilling`` phase when ``IndexStatus`` is set to
      CREATING and ``Backfilling`` is true. You can't delete the index that is being created when
      ``IndexStatus`` is set to CREATING and ``Backfilling`` is false. (This attribute does not
      appear for indexes that were created during a ``CreateTable`` operation.)

      * ``IndexName`` - The name of the global secondary index.

      * ``IndexSizeBytes`` - The total size of the global secondary index, in bytes. DynamoDB
      updates this value approximately every six hours. Recent changes might not be reflected in
      this value.

      * ``IndexStatus`` - The current status of the global secondary index:

        * ``CREATING`` - The index is being created.

        * ``UPDATING`` - The index is being updated.

        * ``DELETING`` - The index is being deleted.

        * ``ACTIVE`` - The index is ready for use.

      * ``ItemCount`` - The number of items in the global secondary index. DynamoDB updates this
      value approximately every six hours. Recent changes might not be reflected in this value.

      * ``KeySchema`` - Specifies the complete index key schema. The attribute names in the key
      schema must be between 1 and 255 characters (inclusive). The key schema must begin with the
      same partition key as the table.

      * ``Projection`` - Specifies attributes that are copied (projected) from the table into the
      index. These are in addition to the primary key attributes and index key attributes, which are
      automatically projected. Each attribute specification is composed of:

        * ``ProjectionType`` - One of the following:

          * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

          * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list
          of projected attributes is in ``NonKeyAttributes`` .

          * ``ALL`` - All of the table attributes are projected into the index.

        * ``NonKeyAttributes`` - A list of one or more non-key attribute names that are projected
        into the secondary index. The total count of attributes provided in ``NonKeyAttributes`` ,
        summed across all of the secondary indexes, must not exceed 20. If you project the same
        attribute into two different indexes, this counts as two distinct attributes when
        determining the total.

      * ``ProvisionedThroughput`` - The provisioned throughput settings for the global secondary
      index, consisting of read and write capacity units, along with data about increases and
      decreases.

      If the table is in the ``DELETING`` state, no information about indexes will be returned.

      - *(dict) --*

        Represents the properties of a global secondary index.

        - **IndexName** *(string) --*

          The name of the global secondary index.

        - **KeySchema** *(list) --*

          The complete key schema for a global secondary index, which consists of one or more pairs
          of attribute names and key types:

          * ``HASH`` - partition key

          * ``RANGE`` - sort key

          .. note::

            The partition key of an item is also known as its *hash attribute* . The term "hash
            attribute" derives from DynamoDB's usage of an internal hash function to evenly
            distribute data items across partitions, based on their partition key values.

            The sort key of an item is also known as its *range attribute* . The term "range
            attribute" derives from the way DynamoDB stores items with the same partition key
            physically close together, in sorted order by the sort key value.

          - *(dict) --*

            Represents *a single element* of a key schema. A key schema specifies the attributes
            that make up the primary key of a table, or the key attributes of an index.

            A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example,
            a simple primary key would be represented by one ``KeySchemaElement`` (for the partition
            key). A composite primary key would require one ``KeySchemaElement`` for the partition
            key, and another ``KeySchemaElement`` for the sort key.

            A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute).
            The data type must be one of String, Number, or Binary. The attribute cannot be nested
            within a List or a Map.

            - **AttributeName** *(string) --*

              The name of a key attribute.

            - **KeyType** *(string) --*

              The role that this key attribute will assume:

              * ``HASH`` - partition key

              * ``RANGE`` - sort key

              .. note::

                The partition key of an item is also known as its *hash attribute* . The term "hash
                attribute" derives from DynamoDB's usage of an internal hash function to evenly
                distribute data items across partitions, based on their partition key values.

                The sort key of an item is also known as its *range attribute* . The term "range
                attribute" derives from the way DynamoDB stores items with the same partition key
                physically close together, in sorted order by the sort key value.

        - **Projection** *(dict) --*

          Represents attributes that are copied (projected) from the table into the global secondary
          index. These are in addition to the primary key attributes and index key attributes, which
          are automatically projected.

          - **ProjectionType** *(string) --*

            The set of attributes that are projected into the index:

            * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

            * ``INCLUDE`` - Only the specified table attributes are projected into the index. The
            list of projected attributes is in ``NonKeyAttributes`` .

            * ``ALL`` - All of the table attributes are projected into the index.

          - **NonKeyAttributes** *(list) --*

            Represents the non-key attribute names which will be projected into the index.

            For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all
            of the local secondary indexes, must not exceed 20. If you project the same attribute
            into two different indexes, this counts as two distinct attributes when determining the
            total.

            - *(string) --*

        - **IndexStatus** *(string) --*

          The current state of the global secondary index:

          * ``CREATING`` - The index is being created.

          * ``UPDATING`` - The index is being updated.

          * ``DELETING`` - The index is being deleted.

          * ``ACTIVE`` - The index is ready for use.

        - **Backfilling** *(boolean) --*

          Indicates whether the index is currently backfilling. *Backfilling* is the process of
          reading items from the table and determining whether they can be added to the index. (Not
          all items will qualify: For example, a partition key cannot have any duplicate values.) If
          an item can be added to the index, DynamoDB will do so. After all items have been
          processed, the backfilling operation is complete and ``Backfilling`` is false.

          You can delete an index that is being created during the ``Backfilling`` phase when
          ``IndexStatus`` is set to CREATING and ``Backfilling`` is true. You can't delete the index
          that is being created when ``IndexStatus`` is set to CREATING and ``Backfilling`` is
          false.

          .. note::

            For indexes that were created during a ``CreateTable`` operation, the ``Backfilling``
            attribute does not appear in the ``DescribeTable`` output.

        - **ProvisionedThroughput** *(dict) --*

          Represents the provisioned throughput settings for the specified global secondary index.

          For current minimum and maximum provisioned throughput values, see `Limits
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
          *Amazon DynamoDB Developer Guide* .

          - **LastIncreaseDateTime** *(datetime) --*

            The date and time of the last provisioned throughput increase for this table.

          - **LastDecreaseDateTime** *(datetime) --*

            The date and time of the last provisioned throughput decrease for this table.

          - **NumberOfDecreasesToday** *(integer) --*

            The number of provisioned throughput decreases for this table during this UTC calendar
            day. For current maximums on provisioned throughput decreases, see `Limits
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
            *Amazon DynamoDB Developer Guide* .

          - **ReadCapacityUnits** *(integer) --*

            The maximum number of strongly consistent reads consumed per second before DynamoDB
            returns a ``ThrottlingException`` . Eventually consistent reads require less effort than
            strongly consistent reads, so a setting of 50 ``ReadCapacityUnits`` per second provides
            100 eventually consistent ``ReadCapacityUnits`` per second.

          - **WriteCapacityUnits** *(integer) --*

            The maximum number of writes consumed per second before DynamoDB returns a
            ``ThrottlingException`` .

        - **IndexSizeBytes** *(integer) --*

          The total size of the specified index, in bytes. DynamoDB updates this value approximately
          every six hours. Recent changes might not be reflected in this value.

        - **ItemCount** *(integer) --*

          The number of items in the specified index. DynamoDB updates this value approximately
          every six hours. Recent changes might not be reflected in this value.

        - **IndexArn** *(string) --*

          The Amazon Resource Name (ARN) that uniquely identifies the index.

    - **StreamSpecification** *(dict) --*

      The current DynamoDB Streams configuration for the table.

      - **StreamEnabled** *(boolean) --*

        Indicates whether DynamoDB Streams is enabled (true) or disabled (false) on the table.

      - **StreamViewType** *(string) --*

        When an item in the table is modified, ``StreamViewType`` determines what information is
        written to the stream for this table. Valid values for ``StreamViewType`` are:

        * ``KEYS_ONLY`` - Only the key attributes of the modified item are written to the stream.

        * ``NEW_IMAGE`` - The entire item, as it appears after it was modified, is written to the
        stream.

        * ``OLD_IMAGE`` - The entire item, as it appeared before it was modified, is written to the
        stream.

        * ``NEW_AND_OLD_IMAGES`` - Both the new and the old item images of the item are written to
        the stream.

    - **LatestStreamLabel** *(string) --*

      A timestamp, in ISO 8601 format, for this stream.

      Note that ``LatestStreamLabel`` is not a unique identifier for the stream, because it is
      possible that a stream from another table might have the same timestamp. However, the
      combination of the following three elements is guaranteed to be unique:

      * AWS customer ID

      * Table name

      * ``StreamLabel``

    - **LatestStreamArn** *(string) --*

      The Amazon Resource Name (ARN) that uniquely identifies the latest stream for this table.

    - **GlobalTableVersion** *(string) --*

      Represents the version of `global tables
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GlobalTables.html>`__ in
      use, if the table is replicated across AWS Regions.

    - **Replicas** *(list) --*

      Represents replicas of the table.

      - *(dict) --*

        Contains the details of the replica.

        - **RegionName** *(string) --*

          The name of the Region.

        - **ReplicaStatus** *(string) --*

          The current state of the replica:

          * ``CREATING`` - The replica is being created.

          * ``UPDATING`` - The replica is being updated.

          * ``DELETING`` - The replica is being deleted.

          * ``ACTIVE`` - The replica is ready for use.

        - **ReplicaStatusDescription** *(string) --*

          Detailed information about the replica status.

        - **ReplicaStatusPercentProgress** *(string) --*

          Specifies the progress of a Create, Update, or Delete action on the replica as a
          percentage.

        - **KMSMasterKeyId** *(string) --*

          The AWS KMS customer master key (CMK) of the replica that will be used for AWS KMS
          encryption.

        - **ProvisionedThroughputOverride** *(dict) --*

          Replica-specific provisioned throughput. If not described, uses the source table's
          provisioned throughput settings.

          - **ReadCapacityUnits** *(integer) --*

            Replica-specific read capacity units. If not specified, uses the source table's read
            capacity settings.

        - **GlobalSecondaryIndexes** *(list) --*

          Replica-specific global secondary index settings.

          - *(dict) --*

            Represents the properties of a replica global secondary index.

            - **IndexName** *(string) --*

              The name of the global secondary index.

            - **ProvisionedThroughputOverride** *(dict) --*

              If not described, uses the source table GSI's read capacity settings.

              - **ReadCapacityUnits** *(integer) --*

                Replica-specific read capacity units. If not specified, uses the source table's read
                capacity settings.

    - **RestoreSummary** *(dict) --*

      Contains details for the restore.

      - **SourceBackupArn** *(string) --*

        The Amazon Resource Name (ARN) of the backup from which the table was restored.

      - **SourceTableArn** *(string) --*

        The ARN of the source table of the backup that is being restored.

      - **RestoreDateTime** *(datetime) --*

        Point in time or source backup time.

      - **RestoreInProgress** *(boolean) --*

        Indicates if a restore is in progress or not.

    - **SSEDescription** *(dict) --*

      The description of the server-side encryption status on the specified table.

      - **Status** *(string) --*

        Represents the current state of server-side encryption. The only supported values are:

        * ``ENABLED`` - Server-side encryption is enabled.

        * ``UPDATING`` - Server-side encryption is being updated.

      - **SSEType** *(string) --*

        Server-side encryption type. The only supported value is:

        * ``KMS`` - Server-side encryption that uses AWS Key Management Service. The key is stored
        in your account and is managed by AWS KMS (AWS KMS charges apply).

      - **KMSMasterKeyArn** *(string) --*

        The AWS KMS customer master key (CMK) ARN used for the AWS KMS encryption.

      - **InaccessibleEncryptionDateTime** *(datetime) --*

        Indicates the time, in UNIX epoch date format, when DynamoDB detected that the table's AWS
        KMS key was inaccessible. This attribute will automatically be cleared when DynamoDB detects
        that the table's AWS KMS key is accessible again. DynamoDB will initiate the table archival
        process when table's AWS KMS key remains inaccessible for more than seven days from this
        date.

    - **ArchivalSummary** *(dict) --*

      Contains information about the table archive.

      - **ArchivalDateTime** *(datetime) --*

        The date and time when table archival was initiated by DynamoDB, in UNIX epoch time format.

      - **ArchivalReason** *(string) --*

        The reason DynamoDB archived the table. Currently, the only possible value is:

        * ``INACCESSIBLE_ENCRYPTION_CREDENTIALS`` - The table was archived due to the table's AWS
        KMS key being inaccessible for more than seven days. An On-Demand backup was created at the
        archival time.

      - **ArchivalBackupArn** *(string) --*

        The Amazon Resource Name (ARN) of the backup the table was archived to, when applicable in
        the archival reason. If you wish to restore this backup to the same table name, you will
        need to delete the original table.
    """


_ClientRestoreTableFromBackupResponseTypeDef = TypedDict(
    "_ClientRestoreTableFromBackupResponseTypeDef",
    {"TableDescription": ClientRestoreTableFromBackupResponseTableDescriptionTypeDef},
    total=False,
)


class ClientRestoreTableFromBackupResponseTypeDef(_ClientRestoreTableFromBackupResponseTypeDef):
    """
    Type definition for `ClientRestoreTableFromBackup` `Response`

    - **TableDescription** *(dict) --*

      The description of the table created from an existing backup.

      - **AttributeDefinitions** *(list) --*

        An array of ``AttributeDefinition`` objects. Each of these objects describes one attribute
        in the table and index key schema.

        Each ``AttributeDefinition`` object in this array is composed of:

        * ``AttributeName`` - The name of the attribute.

        * ``AttributeType`` - The data type for the attribute.

        - *(dict) --*

          Represents an attribute for describing the key schema for the table and indexes.

          - **AttributeName** *(string) --*

            A name for the attribute.

          - **AttributeType** *(string) --*

            The data type for the attribute, where:

            * ``S`` - the attribute is of type String

            * ``N`` - the attribute is of type Number

            * ``B`` - the attribute is of type Binary

      - **TableName** *(string) --*

        The name of the table.

      - **KeySchema** *(list) --*

        The primary key structure for the table. Each ``KeySchemaElement`` consists of:

        * ``AttributeName`` - The name of the attribute.

        * ``KeyType`` - The role of the attribute:

          * ``HASH`` - partition key

          * ``RANGE`` - sort key

        .. note::

          The partition key of an item is also known as its *hash attribute* . The term "hash
          attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
          data items across partitions, based on their partition key values.

          The sort key of an item is also known as its *range attribute* . The term "range
          attribute" derives from the way DynamoDB stores items with the same partition key
          physically close together, in sorted order by the sort key value.

        For more information about primary keys, see `Primary Key
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html#DataModelPrimaryKey>`__
        in the *Amazon DynamoDB Developer Guide* .

        - *(dict) --*

          Represents *a single element* of a key schema. A key schema specifies the attributes that
          make up the primary key of a table, or the key attributes of an index.

          A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
          simple primary key would be represented by one ``KeySchemaElement`` (for the partition
          key). A composite primary key would require one ``KeySchemaElement`` for the partition
          key, and another ``KeySchemaElement`` for the sort key.

          A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The
          data type must be one of String, Number, or Binary. The attribute cannot be nested within
          a List or a Map.

          - **AttributeName** *(string) --*

            The name of a key attribute.

          - **KeyType** *(string) --*

            The role that this key attribute will assume:

            * ``HASH`` - partition key

            * ``RANGE`` - sort key

            .. note::

              The partition key of an item is also known as its *hash attribute* . The term "hash
              attribute" derives from DynamoDB's usage of an internal hash function to evenly
              distribute data items across partitions, based on their partition key values.

              The sort key of an item is also known as its *range attribute* . The term "range
              attribute" derives from the way DynamoDB stores items with the same partition key
              physically close together, in sorted order by the sort key value.

      - **TableStatus** *(string) --*

        The current state of the table:

        * ``CREATING`` - The table is being created.

        * ``UPDATING`` - The table is being updated.

        * ``DELETING`` - The table is being deleted.

        * ``ACTIVE`` - The table is ready for use.

        * ``INACCESSIBLE_ENCRYPTION_CREDENTIALS`` - The AWS KMS key used to encrypt the table in
        inaccessible. Table operations may fail due to failure to use the AWS KMS key. DynamoDB will
        initiate the table archival process when a table's AWS KMS key remains inaccessible for more
        than seven days.

        * ``ARCHIVING`` - The table is being archived. Operations are not allowed until archival is
        complete.

        * ``ARCHIVED`` - The table has been archived. See the ArchivalReason for more information.

      - **CreationDateTime** *(datetime) --*

        The date and time when the table was created, in `UNIX epoch time
        <http://www.epochconverter.com/>`__ format.

      - **ProvisionedThroughput** *(dict) --*

        The provisioned throughput settings for the table, consisting of read and write capacity
        units, along with data about increases and decreases.

        - **LastIncreaseDateTime** *(datetime) --*

          The date and time of the last provisioned throughput increase for this table.

        - **LastDecreaseDateTime** *(datetime) --*

          The date and time of the last provisioned throughput decrease for this table.

        - **NumberOfDecreasesToday** *(integer) --*

          The number of provisioned throughput decreases for this table during this UTC calendar
          day. For current maximums on provisioned throughput decreases, see `Limits
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
          *Amazon DynamoDB Developer Guide* .

        - **ReadCapacityUnits** *(integer) --*

          The maximum number of strongly consistent reads consumed per second before DynamoDB
          returns a ``ThrottlingException`` . Eventually consistent reads require less effort than
          strongly consistent reads, so a setting of 50 ``ReadCapacityUnits`` per second provides
          100 eventually consistent ``ReadCapacityUnits`` per second.

        - **WriteCapacityUnits** *(integer) --*

          The maximum number of writes consumed per second before DynamoDB returns a
          ``ThrottlingException`` .

      - **TableSizeBytes** *(integer) --*

        The total size of the specified table, in bytes. DynamoDB updates this value approximately
        every six hours. Recent changes might not be reflected in this value.

      - **ItemCount** *(integer) --*

        The number of items in the specified table. DynamoDB updates this value approximately every
        six hours. Recent changes might not be reflected in this value.

      - **TableArn** *(string) --*

        The Amazon Resource Name (ARN) that uniquely identifies the table.

      - **TableId** *(string) --*

        Unique identifier for the table for which the backup was created.

      - **BillingModeSummary** *(dict) --*

        Contains the details for the read/write capacity mode.

        - **BillingMode** *(string) --*

          Controls how you are charged for read and write throughput and how you manage capacity.
          This setting can be changed later.

          * ``PROVISIONED`` - Sets the read/write capacity mode to ``PROVISIONED`` . We recommend
          using ``PROVISIONED`` for predictable workloads.

          * ``PAY_PER_REQUEST`` - Sets the read/write capacity mode to ``PAY_PER_REQUEST`` . We
          recommend using ``PAY_PER_REQUEST`` for unpredictable workloads.

        - **LastUpdateToPayPerRequestDateTime** *(datetime) --*

          Represents the time when ``PAY_PER_REQUEST`` was last set as the read/write capacity mode.

      - **LocalSecondaryIndexes** *(list) --*

        Represents one or more local secondary indexes on the table. Each index is scoped to a given
        partition key value. Tables with one or more local secondary indexes are subject to an item
        collection size limit, where the amount of data within a given item collection cannot exceed
        10 GB. Each element is composed of:

        * ``IndexName`` - The name of the local secondary index.

        * ``KeySchema`` - Specifies the complete index key schema. The attribute names in the key
        schema must be between 1 and 255 characters (inclusive). The key schema must begin with the
        same partition key as the table.

        * ``Projection`` - Specifies attributes that are copied (projected) from the table into the
        index. These are in addition to the primary key attributes and index key attributes, which
        are automatically projected. Each attribute specification is composed of:

          * ``ProjectionType`` - One of the following:

            * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

            * ``INCLUDE`` - Only the specified table attributes are projected into the index. The
            list of projected attributes is in ``NonKeyAttributes`` .

            * ``ALL`` - All of the table attributes are projected into the index.

          * ``NonKeyAttributes`` - A list of one or more non-key attribute names that are projected
          into the secondary index. The total count of attributes provided in ``NonKeyAttributes`` ,
          summed across all of the secondary indexes, must not exceed 20. If you project the same
          attribute into two different indexes, this counts as two distinct attributes when
          determining the total.

        * ``IndexSizeBytes`` - Represents the total size of the index, in bytes. DynamoDB updates
        this value approximately every six hours. Recent changes might not be reflected in this
        value.

        * ``ItemCount`` - Represents the number of items in the index. DynamoDB updates this value
        approximately every six hours. Recent changes might not be reflected in this value.

        If the table is in the ``DELETING`` state, no information about indexes will be returned.

        - *(dict) --*

          Represents the properties of a local secondary index.

          - **IndexName** *(string) --*

            Represents the name of the local secondary index.

          - **KeySchema** *(list) --*

            The complete key schema for the local secondary index, consisting of one or more pairs
            of attribute names and key types:

            * ``HASH`` - partition key

            * ``RANGE`` - sort key

            .. note::

              The partition key of an item is also known as its *hash attribute* . The term "hash
              attribute" derives from DynamoDB's usage of an internal hash function to evenly
              distribute data items across partitions, based on their partition key values.

              The sort key of an item is also known as its *range attribute* . The term "range
              attribute" derives from the way DynamoDB stores items with the same partition key
              physically close together, in sorted order by the sort key value.

            - *(dict) --*

              Represents *a single element* of a key schema. A key schema specifies the attributes
              that make up the primary key of a table, or the key attributes of an index.

              A ``KeySchemaElement`` represents exactly one attribute of the primary key. For
              example, a simple primary key would be represented by one ``KeySchemaElement`` (for
              the partition key). A composite primary key would require one ``KeySchemaElement`` for
              the partition key, and another ``KeySchemaElement`` for the sort key.

              A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute).
              The data type must be one of String, Number, or Binary. The attribute cannot be nested
              within a List or a Map.

              - **AttributeName** *(string) --*

                The name of a key attribute.

              - **KeyType** *(string) --*

                The role that this key attribute will assume:

                * ``HASH`` - partition key

                * ``RANGE`` - sort key

                .. note::

                  The partition key of an item is also known as its *hash attribute* . The term
                  "hash attribute" derives from DynamoDB's usage of an internal hash function to
                  evenly distribute data items across partitions, based on their partition key
                  values.

                  The sort key of an item is also known as its *range attribute* . The term "range
                  attribute" derives from the way DynamoDB stores items with the same partition key
                  physically close together, in sorted order by the sort key value.

          - **Projection** *(dict) --*

            Represents attributes that are copied (projected) from the table into the global
            secondary index. These are in addition to the primary key attributes and index key
            attributes, which are automatically projected.

            - **ProjectionType** *(string) --*

              The set of attributes that are projected into the index:

              * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

              * ``INCLUDE`` - Only the specified table attributes are projected into the index. The
              list of projected attributes is in ``NonKeyAttributes`` .

              * ``ALL`` - All of the table attributes are projected into the index.

            - **NonKeyAttributes** *(list) --*

              Represents the non-key attribute names which will be projected into the index.

              For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all
              of the local secondary indexes, must not exceed 20. If you project the same attribute
              into two different indexes, this counts as two distinct attributes when determining
              the total.

              - *(string) --*

          - **IndexSizeBytes** *(integer) --*

            The total size of the specified index, in bytes. DynamoDB updates this value
            approximately every six hours. Recent changes might not be reflected in this value.

          - **ItemCount** *(integer) --*

            The number of items in the specified index. DynamoDB updates this value approximately
            every six hours. Recent changes might not be reflected in this value.

          - **IndexArn** *(string) --*

            The Amazon Resource Name (ARN) that uniquely identifies the index.

      - **GlobalSecondaryIndexes** *(list) --*

        The global secondary indexes, if any, on the table. Each index is scoped to a given
        partition key value. Each element is composed of:

        * ``Backfilling`` - If true, then the index is currently in the backfilling phase.
        Backfilling occurs only when a new global secondary index is added to the table. It is the
        process by which DynamoDB populates the new index with data from the table. (This attribute
        does not appear for indexes that were created during a ``CreateTable`` operation.)  You can
        delete an index that is being created during the ``Backfilling`` phase when ``IndexStatus``
        is set to CREATING and ``Backfilling`` is true. You can't delete the index that is being
        created when ``IndexStatus`` is set to CREATING and ``Backfilling`` is false. (This
        attribute does not appear for indexes that were created during a ``CreateTable`` operation.)

        * ``IndexName`` - The name of the global secondary index.

        * ``IndexSizeBytes`` - The total size of the global secondary index, in bytes. DynamoDB
        updates this value approximately every six hours. Recent changes might not be reflected in
        this value.

        * ``IndexStatus`` - The current status of the global secondary index:

          * ``CREATING`` - The index is being created.

          * ``UPDATING`` - The index is being updated.

          * ``DELETING`` - The index is being deleted.

          * ``ACTIVE`` - The index is ready for use.

        * ``ItemCount`` - The number of items in the global secondary index. DynamoDB updates this
        value approximately every six hours. Recent changes might not be reflected in this value.

        * ``KeySchema`` - Specifies the complete index key schema. The attribute names in the key
        schema must be between 1 and 255 characters (inclusive). The key schema must begin with the
        same partition key as the table.

        * ``Projection`` - Specifies attributes that are copied (projected) from the table into the
        index. These are in addition to the primary key attributes and index key attributes, which
        are automatically projected. Each attribute specification is composed of:

          * ``ProjectionType`` - One of the following:

            * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

            * ``INCLUDE`` - Only the specified table attributes are projected into the index. The
            list of projected attributes is in ``NonKeyAttributes`` .

            * ``ALL`` - All of the table attributes are projected into the index.

          * ``NonKeyAttributes`` - A list of one or more non-key attribute names that are projected
          into the secondary index. The total count of attributes provided in ``NonKeyAttributes`` ,
          summed across all of the secondary indexes, must not exceed 20. If you project the same
          attribute into two different indexes, this counts as two distinct attributes when
          determining the total.

        * ``ProvisionedThroughput`` - The provisioned throughput settings for the global secondary
        index, consisting of read and write capacity units, along with data about increases and
        decreases.

        If the table is in the ``DELETING`` state, no information about indexes will be returned.

        - *(dict) --*

          Represents the properties of a global secondary index.

          - **IndexName** *(string) --*

            The name of the global secondary index.

          - **KeySchema** *(list) --*

            The complete key schema for a global secondary index, which consists of one or more
            pairs of attribute names and key types:

            * ``HASH`` - partition key

            * ``RANGE`` - sort key

            .. note::

              The partition key of an item is also known as its *hash attribute* . The term "hash
              attribute" derives from DynamoDB's usage of an internal hash function to evenly
              distribute data items across partitions, based on their partition key values.

              The sort key of an item is also known as its *range attribute* . The term "range
              attribute" derives from the way DynamoDB stores items with the same partition key
              physically close together, in sorted order by the sort key value.

            - *(dict) --*

              Represents *a single element* of a key schema. A key schema specifies the attributes
              that make up the primary key of a table, or the key attributes of an index.

              A ``KeySchemaElement`` represents exactly one attribute of the primary key. For
              example, a simple primary key would be represented by one ``KeySchemaElement`` (for
              the partition key). A composite primary key would require one ``KeySchemaElement`` for
              the partition key, and another ``KeySchemaElement`` for the sort key.

              A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute).
              The data type must be one of String, Number, or Binary. The attribute cannot be nested
              within a List or a Map.

              - **AttributeName** *(string) --*

                The name of a key attribute.

              - **KeyType** *(string) --*

                The role that this key attribute will assume:

                * ``HASH`` - partition key

                * ``RANGE`` - sort key

                .. note::

                  The partition key of an item is also known as its *hash attribute* . The term
                  "hash attribute" derives from DynamoDB's usage of an internal hash function to
                  evenly distribute data items across partitions, based on their partition key
                  values.

                  The sort key of an item is also known as its *range attribute* . The term "range
                  attribute" derives from the way DynamoDB stores items with the same partition key
                  physically close together, in sorted order by the sort key value.

          - **Projection** *(dict) --*

            Represents attributes that are copied (projected) from the table into the global
            secondary index. These are in addition to the primary key attributes and index key
            attributes, which are automatically projected.

            - **ProjectionType** *(string) --*

              The set of attributes that are projected into the index:

              * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

              * ``INCLUDE`` - Only the specified table attributes are projected into the index. The
              list of projected attributes is in ``NonKeyAttributes`` .

              * ``ALL`` - All of the table attributes are projected into the index.

            - **NonKeyAttributes** *(list) --*

              Represents the non-key attribute names which will be projected into the index.

              For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all
              of the local secondary indexes, must not exceed 20. If you project the same attribute
              into two different indexes, this counts as two distinct attributes when determining
              the total.

              - *(string) --*

          - **IndexStatus** *(string) --*

            The current state of the global secondary index:

            * ``CREATING`` - The index is being created.

            * ``UPDATING`` - The index is being updated.

            * ``DELETING`` - The index is being deleted.

            * ``ACTIVE`` - The index is ready for use.

          - **Backfilling** *(boolean) --*

            Indicates whether the index is currently backfilling. *Backfilling* is the process of
            reading items from the table and determining whether they can be added to the index.
            (Not all items will qualify: For example, a partition key cannot have any duplicate
            values.) If an item can be added to the index, DynamoDB will do so. After all items have
            been processed, the backfilling operation is complete and ``Backfilling`` is false.

            You can delete an index that is being created during the ``Backfilling`` phase when
            ``IndexStatus`` is set to CREATING and ``Backfilling`` is true. You can't delete the
            index that is being created when ``IndexStatus`` is set to CREATING and ``Backfilling``
            is false.

            .. note::

              For indexes that were created during a ``CreateTable`` operation, the ``Backfilling``
              attribute does not appear in the ``DescribeTable`` output.

          - **ProvisionedThroughput** *(dict) --*

            Represents the provisioned throughput settings for the specified global secondary index.

            For current minimum and maximum provisioned throughput values, see `Limits
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
            *Amazon DynamoDB Developer Guide* .

            - **LastIncreaseDateTime** *(datetime) --*

              The date and time of the last provisioned throughput increase for this table.

            - **LastDecreaseDateTime** *(datetime) --*

              The date and time of the last provisioned throughput decrease for this table.

            - **NumberOfDecreasesToday** *(integer) --*

              The number of provisioned throughput decreases for this table during this UTC calendar
              day. For current maximums on provisioned throughput decreases, see `Limits
              <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in
              the *Amazon DynamoDB Developer Guide* .

            - **ReadCapacityUnits** *(integer) --*

              The maximum number of strongly consistent reads consumed per second before DynamoDB
              returns a ``ThrottlingException`` . Eventually consistent reads require less effort
              than strongly consistent reads, so a setting of 50 ``ReadCapacityUnits`` per second
              provides 100 eventually consistent ``ReadCapacityUnits`` per second.

            - **WriteCapacityUnits** *(integer) --*

              The maximum number of writes consumed per second before DynamoDB returns a
              ``ThrottlingException`` .

          - **IndexSizeBytes** *(integer) --*

            The total size of the specified index, in bytes. DynamoDB updates this value
            approximately every six hours. Recent changes might not be reflected in this value.

          - **ItemCount** *(integer) --*

            The number of items in the specified index. DynamoDB updates this value approximately
            every six hours. Recent changes might not be reflected in this value.

          - **IndexArn** *(string) --*

            The Amazon Resource Name (ARN) that uniquely identifies the index.

      - **StreamSpecification** *(dict) --*

        The current DynamoDB Streams configuration for the table.

        - **StreamEnabled** *(boolean) --*

          Indicates whether DynamoDB Streams is enabled (true) or disabled (false) on the table.

        - **StreamViewType** *(string) --*

          When an item in the table is modified, ``StreamViewType`` determines what information is
          written to the stream for this table. Valid values for ``StreamViewType`` are:

          * ``KEYS_ONLY`` - Only the key attributes of the modified item are written to the stream.

          * ``NEW_IMAGE`` - The entire item, as it appears after it was modified, is written to the
          stream.

          * ``OLD_IMAGE`` - The entire item, as it appeared before it was modified, is written to
          the stream.

          * ``NEW_AND_OLD_IMAGES`` - Both the new and the old item images of the item are written to
          the stream.

      - **LatestStreamLabel** *(string) --*

        A timestamp, in ISO 8601 format, for this stream.

        Note that ``LatestStreamLabel`` is not a unique identifier for the stream, because it is
        possible that a stream from another table might have the same timestamp. However, the
        combination of the following three elements is guaranteed to be unique:

        * AWS customer ID

        * Table name

        * ``StreamLabel``

      - **LatestStreamArn** *(string) --*

        The Amazon Resource Name (ARN) that uniquely identifies the latest stream for this table.

      - **GlobalTableVersion** *(string) --*

        Represents the version of `global tables
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GlobalTables.html>`__ in
        use, if the table is replicated across AWS Regions.

      - **Replicas** *(list) --*

        Represents replicas of the table.

        - *(dict) --*

          Contains the details of the replica.

          - **RegionName** *(string) --*

            The name of the Region.

          - **ReplicaStatus** *(string) --*

            The current state of the replica:

            * ``CREATING`` - The replica is being created.

            * ``UPDATING`` - The replica is being updated.

            * ``DELETING`` - The replica is being deleted.

            * ``ACTIVE`` - The replica is ready for use.

          - **ReplicaStatusDescription** *(string) --*

            Detailed information about the replica status.

          - **ReplicaStatusPercentProgress** *(string) --*

            Specifies the progress of a Create, Update, or Delete action on the replica as a
            percentage.

          - **KMSMasterKeyId** *(string) --*

            The AWS KMS customer master key (CMK) of the replica that will be used for AWS KMS
            encryption.

          - **ProvisionedThroughputOverride** *(dict) --*

            Replica-specific provisioned throughput. If not described, uses the source table's
            provisioned throughput settings.

            - **ReadCapacityUnits** *(integer) --*

              Replica-specific read capacity units. If not specified, uses the source table's read
              capacity settings.

          - **GlobalSecondaryIndexes** *(list) --*

            Replica-specific global secondary index settings.

            - *(dict) --*

              Represents the properties of a replica global secondary index.

              - **IndexName** *(string) --*

                The name of the global secondary index.

              - **ProvisionedThroughputOverride** *(dict) --*

                If not described, uses the source table GSI's read capacity settings.

                - **ReadCapacityUnits** *(integer) --*

                  Replica-specific read capacity units. If not specified, uses the source table's
                  read capacity settings.

      - **RestoreSummary** *(dict) --*

        Contains details for the restore.

        - **SourceBackupArn** *(string) --*

          The Amazon Resource Name (ARN) of the backup from which the table was restored.

        - **SourceTableArn** *(string) --*

          The ARN of the source table of the backup that is being restored.

        - **RestoreDateTime** *(datetime) --*

          Point in time or source backup time.

        - **RestoreInProgress** *(boolean) --*

          Indicates if a restore is in progress or not.

      - **SSEDescription** *(dict) --*

        The description of the server-side encryption status on the specified table.

        - **Status** *(string) --*

          Represents the current state of server-side encryption. The only supported values are:

          * ``ENABLED`` - Server-side encryption is enabled.

          * ``UPDATING`` - Server-side encryption is being updated.

        - **SSEType** *(string) --*

          Server-side encryption type. The only supported value is:

          * ``KMS`` - Server-side encryption that uses AWS Key Management Service. The key is stored
          in your account and is managed by AWS KMS (AWS KMS charges apply).

        - **KMSMasterKeyArn** *(string) --*

          The AWS KMS customer master key (CMK) ARN used for the AWS KMS encryption.

        - **InaccessibleEncryptionDateTime** *(datetime) --*

          Indicates the time, in UNIX epoch date format, when DynamoDB detected that the table's AWS
          KMS key was inaccessible. This attribute will automatically be cleared when DynamoDB
          detects that the table's AWS KMS key is accessible again. DynamoDB will initiate the table
          archival process when table's AWS KMS key remains inaccessible for more than seven days
          from this date.

      - **ArchivalSummary** *(dict) --*

        Contains information about the table archive.

        - **ArchivalDateTime** *(datetime) --*

          The date and time when table archival was initiated by DynamoDB, in UNIX epoch time
          format.

        - **ArchivalReason** *(string) --*

          The reason DynamoDB archived the table. Currently, the only possible value is:

          * ``INACCESSIBLE_ENCRYPTION_CREDENTIALS`` - The table was archived due to the table's AWS
          KMS key being inaccessible for more than seven days. An On-Demand backup was created at
          the archival time.

        - **ArchivalBackupArn** *(string) --*

          The Amazon Resource Name (ARN) of the backup the table was archived to, when applicable in
          the archival reason. If you wish to restore this backup to the same table name, you will
          need to delete the original table.
    """


_ClientRestoreTableToPointInTimeGlobalSecondaryIndexOverrideKeySchemaTypeDef = TypedDict(
    "_ClientRestoreTableToPointInTimeGlobalSecondaryIndexOverrideKeySchemaTypeDef",
    {"AttributeName": str, "KeyType": str},
)


class ClientRestoreTableToPointInTimeGlobalSecondaryIndexOverrideKeySchemaTypeDef(
    _ClientRestoreTableToPointInTimeGlobalSecondaryIndexOverrideKeySchemaTypeDef
):
    """
    Type definition for `ClientRestoreTableToPointInTimeGlobalSecondaryIndexOverride` `KeySchema`

    Represents *a single element* of a key schema. A key schema specifies the attributes that make
    up the primary key of a table, or the key attributes of an index.

    A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
    simple primary key would be represented by one ``KeySchemaElement`` (for the partition key). A
    composite primary key would require one ``KeySchemaElement`` for the partition key, and another
    ``KeySchemaElement`` for the sort key.

    A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The data
    type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a
    Map.

    - **AttributeName** *(string) --* **[REQUIRED]**

      The name of a key attribute.

    - **KeyType** *(string) --* **[REQUIRED]**

      The role that this key attribute will assume:

      * ``HASH`` - partition key

      * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.
    """


_ClientRestoreTableToPointInTimeGlobalSecondaryIndexOverrideProjectionTypeDef = TypedDict(
    "_ClientRestoreTableToPointInTimeGlobalSecondaryIndexOverrideProjectionTypeDef",
    {"ProjectionType": str, "NonKeyAttributes": List[str]},
    total=False,
)


class ClientRestoreTableToPointInTimeGlobalSecondaryIndexOverrideProjectionTypeDef(
    _ClientRestoreTableToPointInTimeGlobalSecondaryIndexOverrideProjectionTypeDef
):
    """
    Type definition for `ClientRestoreTableToPointInTimeGlobalSecondaryIndexOverride` `Projection`

    Represents attributes that are copied (projected) from the table into the global secondary
    index. These are in addition to the primary key attributes and index key attributes, which are
    automatically projected.

    - **ProjectionType** *(string) --*

      The set of attributes that are projected into the index:

      * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

      * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list of
      projected attributes is in ``NonKeyAttributes`` .

      * ``ALL`` - All of the table attributes are projected into the index.

    - **NonKeyAttributes** *(list) --*

      Represents the non-key attribute names which will be projected into the index.

      For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all of the
      local secondary indexes, must not exceed 20. If you project the same attribute into two
      different indexes, this counts as two distinct attributes when determining the total.

      - *(string) --*
    """


_ClientRestoreTableToPointInTimeGlobalSecondaryIndexOverrideProvisionedThroughputTypeDef = TypedDict(
    "_ClientRestoreTableToPointInTimeGlobalSecondaryIndexOverrideProvisionedThroughputTypeDef",
    {"ReadCapacityUnits": int, "WriteCapacityUnits": int},
)


class ClientRestoreTableToPointInTimeGlobalSecondaryIndexOverrideProvisionedThroughputTypeDef(
    _ClientRestoreTableToPointInTimeGlobalSecondaryIndexOverrideProvisionedThroughputTypeDef
):
    """
    Type definition for `ClientRestoreTableToPointInTimeGlobalSecondaryIndexOverride`
    `ProvisionedThroughput`

    Represents the provisioned throughput settings for the specified global secondary index.

    For current minimum and maximum provisioned throughput values, see `Limits
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the *Amazon
    DynamoDB Developer Guide* .

    - **ReadCapacityUnits** *(integer) --* **[REQUIRED]**

      The maximum number of strongly consistent reads consumed per second before DynamoDB returns a
      ``ThrottlingException`` . For more information, see `Specifying Read and Write Requirements
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
      in the *Amazon DynamoDB Developer Guide* .

      If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.

    - **WriteCapacityUnits** *(integer) --* **[REQUIRED]**

      The maximum number of writes consumed per second before DynamoDB returns a
      ``ThrottlingException`` . For more information, see `Specifying Read and Write Requirements
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
      in the *Amazon DynamoDB Developer Guide* .

      If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.
    """


_RequiredClientRestoreTableToPointInTimeGlobalSecondaryIndexOverrideTypeDef = TypedDict(
    "_RequiredClientRestoreTableToPointInTimeGlobalSecondaryIndexOverrideTypeDef",
    {
        "IndexName": str,
        "KeySchema": List[
            ClientRestoreTableToPointInTimeGlobalSecondaryIndexOverrideKeySchemaTypeDef
        ],
        "Projection": ClientRestoreTableToPointInTimeGlobalSecondaryIndexOverrideProjectionTypeDef,
    },
)
_OptionalClientRestoreTableToPointInTimeGlobalSecondaryIndexOverrideTypeDef = TypedDict(
    "_OptionalClientRestoreTableToPointInTimeGlobalSecondaryIndexOverrideTypeDef",
    {
        "ProvisionedThroughput": ClientRestoreTableToPointInTimeGlobalSecondaryIndexOverrideProvisionedThroughputTypeDef
    },
    total=False,
)


class ClientRestoreTableToPointInTimeGlobalSecondaryIndexOverrideTypeDef(
    _RequiredClientRestoreTableToPointInTimeGlobalSecondaryIndexOverrideTypeDef,
    _OptionalClientRestoreTableToPointInTimeGlobalSecondaryIndexOverrideTypeDef,
):
    """
    Type definition for `ClientRestoreTableToPointInTime` `GlobalSecondaryIndexOverride`

    Represents the properties of a global secondary index.

    - **IndexName** *(string) --* **[REQUIRED]**

      The name of the global secondary index. The name must be unique among all other indexes on
      this table.

    - **KeySchema** *(list) --* **[REQUIRED]**

      The complete key schema for a global secondary index, which consists of one or more pairs of
      attribute names and key types:

      * ``HASH`` - partition key

      * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.

      - *(dict) --*

        Represents *a single element* of a key schema. A key schema specifies the attributes that
        make up the primary key of a table, or the key attributes of an index.

        A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
        simple primary key would be represented by one ``KeySchemaElement`` (for the partition key).
        A composite primary key would require one ``KeySchemaElement`` for the partition key, and
        another ``KeySchemaElement`` for the sort key.

        A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The
        data type must be one of String, Number, or Binary. The attribute cannot be nested within a
        List or a Map.

        - **AttributeName** *(string) --* **[REQUIRED]**

          The name of a key attribute.

        - **KeyType** *(string) --* **[REQUIRED]**

          The role that this key attribute will assume:

          * ``HASH`` - partition key

          * ``RANGE`` - sort key

          .. note::

            The partition key of an item is also known as its *hash attribute* . The term "hash
            attribute" derives from DynamoDB's usage of an internal hash function to evenly
            distribute data items across partitions, based on their partition key values.

            The sort key of an item is also known as its *range attribute* . The term "range
            attribute" derives from the way DynamoDB stores items with the same partition key
            physically close together, in sorted order by the sort key value.

    - **Projection** *(dict) --* **[REQUIRED]**

      Represents attributes that are copied (projected) from the table into the global secondary
      index. These are in addition to the primary key attributes and index key attributes, which are
      automatically projected.

      - **ProjectionType** *(string) --*

        The set of attributes that are projected into the index:

        * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

        * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list
        of projected attributes is in ``NonKeyAttributes`` .

        * ``ALL`` - All of the table attributes are projected into the index.

      - **NonKeyAttributes** *(list) --*

        Represents the non-key attribute names which will be projected into the index.

        For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all of
        the local secondary indexes, must not exceed 20. If you project the same attribute into two
        different indexes, this counts as two distinct attributes when determining the total.

        - *(string) --*

    - **ProvisionedThroughput** *(dict) --*

      Represents the provisioned throughput settings for the specified global secondary index.

      For current minimum and maximum provisioned throughput values, see `Limits
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
      *Amazon DynamoDB Developer Guide* .

      - **ReadCapacityUnits** *(integer) --* **[REQUIRED]**

        The maximum number of strongly consistent reads consumed per second before DynamoDB returns
        a ``ThrottlingException`` . For more information, see `Specifying Read and Write
        Requirements
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
        in the *Amazon DynamoDB Developer Guide* .

        If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.

      - **WriteCapacityUnits** *(integer) --* **[REQUIRED]**

        The maximum number of writes consumed per second before DynamoDB returns a
        ``ThrottlingException`` . For more information, see `Specifying Read and Write Requirements
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
        in the *Amazon DynamoDB Developer Guide* .

        If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.
    """


_ClientRestoreTableToPointInTimeLocalSecondaryIndexOverrideKeySchemaTypeDef = TypedDict(
    "_ClientRestoreTableToPointInTimeLocalSecondaryIndexOverrideKeySchemaTypeDef",
    {"AttributeName": str, "KeyType": str},
)


class ClientRestoreTableToPointInTimeLocalSecondaryIndexOverrideKeySchemaTypeDef(
    _ClientRestoreTableToPointInTimeLocalSecondaryIndexOverrideKeySchemaTypeDef
):
    """
    Type definition for `ClientRestoreTableToPointInTimeLocalSecondaryIndexOverride` `KeySchema`

    Represents *a single element* of a key schema. A key schema specifies the attributes that make
    up the primary key of a table, or the key attributes of an index.

    A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
    simple primary key would be represented by one ``KeySchemaElement`` (for the partition key). A
    composite primary key would require one ``KeySchemaElement`` for the partition key, and another
    ``KeySchemaElement`` for the sort key.

    A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The data
    type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a
    Map.

    - **AttributeName** *(string) --* **[REQUIRED]**

      The name of a key attribute.

    - **KeyType** *(string) --* **[REQUIRED]**

      The role that this key attribute will assume:

      * ``HASH`` - partition key

      * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.
    """


_ClientRestoreTableToPointInTimeLocalSecondaryIndexOverrideProjectionTypeDef = TypedDict(
    "_ClientRestoreTableToPointInTimeLocalSecondaryIndexOverrideProjectionTypeDef",
    {"ProjectionType": str, "NonKeyAttributes": List[str]},
    total=False,
)


class ClientRestoreTableToPointInTimeLocalSecondaryIndexOverrideProjectionTypeDef(
    _ClientRestoreTableToPointInTimeLocalSecondaryIndexOverrideProjectionTypeDef
):
    """
    Type definition for `ClientRestoreTableToPointInTimeLocalSecondaryIndexOverride` `Projection`

    Represents attributes that are copied (projected) from the table into the local secondary index.
    These are in addition to the primary key attributes and index key attributes, which are
    automatically projected.

    - **ProjectionType** *(string) --*

      The set of attributes that are projected into the index:

      * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

      * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list of
      projected attributes is in ``NonKeyAttributes`` .

      * ``ALL`` - All of the table attributes are projected into the index.

    - **NonKeyAttributes** *(list) --*

      Represents the non-key attribute names which will be projected into the index.

      For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all of the
      local secondary indexes, must not exceed 20. If you project the same attribute into two
      different indexes, this counts as two distinct attributes when determining the total.

      - *(string) --*
    """


_ClientRestoreTableToPointInTimeLocalSecondaryIndexOverrideTypeDef = TypedDict(
    "_ClientRestoreTableToPointInTimeLocalSecondaryIndexOverrideTypeDef",
    {
        "IndexName": str,
        "KeySchema": List[
            ClientRestoreTableToPointInTimeLocalSecondaryIndexOverrideKeySchemaTypeDef
        ],
        "Projection": ClientRestoreTableToPointInTimeLocalSecondaryIndexOverrideProjectionTypeDef,
    },
)


class ClientRestoreTableToPointInTimeLocalSecondaryIndexOverrideTypeDef(
    _ClientRestoreTableToPointInTimeLocalSecondaryIndexOverrideTypeDef
):
    """
    Type definition for `ClientRestoreTableToPointInTime` `LocalSecondaryIndexOverride`

    Represents the properties of a local secondary index.

    - **IndexName** *(string) --* **[REQUIRED]**

      The name of the local secondary index. The name must be unique among all other indexes on this
      table.

    - **KeySchema** *(list) --* **[REQUIRED]**

      The complete key schema for the local secondary index, consisting of one or more pairs of
      attribute names and key types:

      * ``HASH`` - partition key

      * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.

      - *(dict) --*

        Represents *a single element* of a key schema. A key schema specifies the attributes that
        make up the primary key of a table, or the key attributes of an index.

        A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
        simple primary key would be represented by one ``KeySchemaElement`` (for the partition key).
        A composite primary key would require one ``KeySchemaElement`` for the partition key, and
        another ``KeySchemaElement`` for the sort key.

        A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The
        data type must be one of String, Number, or Binary. The attribute cannot be nested within a
        List or a Map.

        - **AttributeName** *(string) --* **[REQUIRED]**

          The name of a key attribute.

        - **KeyType** *(string) --* **[REQUIRED]**

          The role that this key attribute will assume:

          * ``HASH`` - partition key

          * ``RANGE`` - sort key

          .. note::

            The partition key of an item is also known as its *hash attribute* . The term "hash
            attribute" derives from DynamoDB's usage of an internal hash function to evenly
            distribute data items across partitions, based on their partition key values.

            The sort key of an item is also known as its *range attribute* . The term "range
            attribute" derives from the way DynamoDB stores items with the same partition key
            physically close together, in sorted order by the sort key value.

    - **Projection** *(dict) --* **[REQUIRED]**

      Represents attributes that are copied (projected) from the table into the local secondary
      index. These are in addition to the primary key attributes and index key attributes, which are
      automatically projected.

      - **ProjectionType** *(string) --*

        The set of attributes that are projected into the index:

        * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

        * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list
        of projected attributes is in ``NonKeyAttributes`` .

        * ``ALL`` - All of the table attributes are projected into the index.

      - **NonKeyAttributes** *(list) --*

        Represents the non-key attribute names which will be projected into the index.

        For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all of
        the local secondary indexes, must not exceed 20. If you project the same attribute into two
        different indexes, this counts as two distinct attributes when determining the total.

        - *(string) --*
    """


_ClientRestoreTableToPointInTimeProvisionedThroughputOverrideTypeDef = TypedDict(
    "_ClientRestoreTableToPointInTimeProvisionedThroughputOverrideTypeDef",
    {"ReadCapacityUnits": int, "WriteCapacityUnits": int},
)


class ClientRestoreTableToPointInTimeProvisionedThroughputOverrideTypeDef(
    _ClientRestoreTableToPointInTimeProvisionedThroughputOverrideTypeDef
):
    """
    Type definition for `ClientRestoreTableToPointInTime` `ProvisionedThroughputOverride`

    Provisioned throughput settings for the restored table.

    - **ReadCapacityUnits** *(integer) --* **[REQUIRED]**

      The maximum number of strongly consistent reads consumed per second before DynamoDB returns a
      ``ThrottlingException`` . For more information, see `Specifying Read and Write Requirements
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
      in the *Amazon DynamoDB Developer Guide* .

      If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.

    - **WriteCapacityUnits** *(integer) --* **[REQUIRED]**

      The maximum number of writes consumed per second before DynamoDB returns a
      ``ThrottlingException`` . For more information, see `Specifying Read and Write Requirements
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
      in the *Amazon DynamoDB Developer Guide* .

      If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.
    """


_ClientRestoreTableToPointInTimeResponseTableDescriptionArchivalSummaryTypeDef = TypedDict(
    "_ClientRestoreTableToPointInTimeResponseTableDescriptionArchivalSummaryTypeDef",
    {"ArchivalDateTime": datetime, "ArchivalReason": str, "ArchivalBackupArn": str},
    total=False,
)


class ClientRestoreTableToPointInTimeResponseTableDescriptionArchivalSummaryTypeDef(
    _ClientRestoreTableToPointInTimeResponseTableDescriptionArchivalSummaryTypeDef
):
    """
    Type definition for `ClientRestoreTableToPointInTimeResponseTableDescription` `ArchivalSummary`

    Contains information about the table archive.

    - **ArchivalDateTime** *(datetime) --*

      The date and time when table archival was initiated by DynamoDB, in UNIX epoch time format.

    - **ArchivalReason** *(string) --*

      The reason DynamoDB archived the table. Currently, the only possible value is:

      * ``INACCESSIBLE_ENCRYPTION_CREDENTIALS`` - The table was archived due to the table's AWS KMS
      key being inaccessible for more than seven days. An On-Demand backup was created at the
      archival time.

    - **ArchivalBackupArn** *(string) --*

      The Amazon Resource Name (ARN) of the backup the table was archived to, when applicable in the
      archival reason. If you wish to restore this backup to the same table name, you will need to
      delete the original table.
    """


_ClientRestoreTableToPointInTimeResponseTableDescriptionAttributeDefinitionsTypeDef = TypedDict(
    "_ClientRestoreTableToPointInTimeResponseTableDescriptionAttributeDefinitionsTypeDef",
    {"AttributeName": str, "AttributeType": str},
    total=False,
)


class ClientRestoreTableToPointInTimeResponseTableDescriptionAttributeDefinitionsTypeDef(
    _ClientRestoreTableToPointInTimeResponseTableDescriptionAttributeDefinitionsTypeDef
):
    """
    Type definition for `ClientRestoreTableToPointInTimeResponseTableDescription`
    `AttributeDefinitions`

    Represents an attribute for describing the key schema for the table and indexes.

    - **AttributeName** *(string) --*

      A name for the attribute.

    - **AttributeType** *(string) --*

      The data type for the attribute, where:

      * ``S`` - the attribute is of type String

      * ``N`` - the attribute is of type Number

      * ``B`` - the attribute is of type Binary
    """


_ClientRestoreTableToPointInTimeResponseTableDescriptionBillingModeSummaryTypeDef = TypedDict(
    "_ClientRestoreTableToPointInTimeResponseTableDescriptionBillingModeSummaryTypeDef",
    {"BillingMode": str, "LastUpdateToPayPerRequestDateTime": datetime},
    total=False,
)


class ClientRestoreTableToPointInTimeResponseTableDescriptionBillingModeSummaryTypeDef(
    _ClientRestoreTableToPointInTimeResponseTableDescriptionBillingModeSummaryTypeDef
):
    """
    Type definition for `ClientRestoreTableToPointInTimeResponseTableDescription`
    `BillingModeSummary`

    Contains the details for the read/write capacity mode.

    - **BillingMode** *(string) --*

      Controls how you are charged for read and write throughput and how you manage capacity. This
      setting can be changed later.

      * ``PROVISIONED`` - Sets the read/write capacity mode to ``PROVISIONED`` . We recommend using
      ``PROVISIONED`` for predictable workloads.

      * ``PAY_PER_REQUEST`` - Sets the read/write capacity mode to ``PAY_PER_REQUEST`` . We
      recommend using ``PAY_PER_REQUEST`` for unpredictable workloads.

    - **LastUpdateToPayPerRequestDateTime** *(datetime) --*

      Represents the time when ``PAY_PER_REQUEST`` was last set as the read/write capacity mode.
    """


_ClientRestoreTableToPointInTimeResponseTableDescriptionGlobalSecondaryIndexesKeySchemaTypeDef = TypedDict(
    "_ClientRestoreTableToPointInTimeResponseTableDescriptionGlobalSecondaryIndexesKeySchemaTypeDef",
    {"AttributeName": str, "KeyType": str},
    total=False,
)


class ClientRestoreTableToPointInTimeResponseTableDescriptionGlobalSecondaryIndexesKeySchemaTypeDef(
    _ClientRestoreTableToPointInTimeResponseTableDescriptionGlobalSecondaryIndexesKeySchemaTypeDef
):
    """
    Type definition for
    `ClientRestoreTableToPointInTimeResponseTableDescriptionGlobalSecondaryIndexes` `KeySchema`

    Represents *a single element* of a key schema. A key schema specifies the attributes that make
    up the primary key of a table, or the key attributes of an index.

    A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
    simple primary key would be represented by one ``KeySchemaElement`` (for the partition key). A
    composite primary key would require one ``KeySchemaElement`` for the partition key, and another
    ``KeySchemaElement`` for the sort key.

    A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The data
    type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a
    Map.

    - **AttributeName** *(string) --*

      The name of a key attribute.

    - **KeyType** *(string) --*

      The role that this key attribute will assume:

      * ``HASH`` - partition key

      * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.
    """


_ClientRestoreTableToPointInTimeResponseTableDescriptionGlobalSecondaryIndexesProjectionTypeDef = TypedDict(
    "_ClientRestoreTableToPointInTimeResponseTableDescriptionGlobalSecondaryIndexesProjectionTypeDef",
    {"ProjectionType": str, "NonKeyAttributes": List[str]},
    total=False,
)


class ClientRestoreTableToPointInTimeResponseTableDescriptionGlobalSecondaryIndexesProjectionTypeDef(
    _ClientRestoreTableToPointInTimeResponseTableDescriptionGlobalSecondaryIndexesProjectionTypeDef
):
    """
    Type definition for
    `ClientRestoreTableToPointInTimeResponseTableDescriptionGlobalSecondaryIndexes` `Projection`

    Represents attributes that are copied (projected) from the table into the global secondary
    index. These are in addition to the primary key attributes and index key attributes, which are
    automatically projected.

    - **ProjectionType** *(string) --*

      The set of attributes that are projected into the index:

      * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

      * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list of
      projected attributes is in ``NonKeyAttributes`` .

      * ``ALL`` - All of the table attributes are projected into the index.

    - **NonKeyAttributes** *(list) --*

      Represents the non-key attribute names which will be projected into the index.

      For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all of the
      local secondary indexes, must not exceed 20. If you project the same attribute into two
      different indexes, this counts as two distinct attributes when determining the total.

      - *(string) --*
    """


_ClientRestoreTableToPointInTimeResponseTableDescriptionGlobalSecondaryIndexesProvisionedThroughputTypeDef = TypedDict(
    "_ClientRestoreTableToPointInTimeResponseTableDescriptionGlobalSecondaryIndexesProvisionedThroughputTypeDef",
    {
        "LastIncreaseDateTime": datetime,
        "LastDecreaseDateTime": datetime,
        "NumberOfDecreasesToday": int,
        "ReadCapacityUnits": int,
        "WriteCapacityUnits": int,
    },
    total=False,
)


class ClientRestoreTableToPointInTimeResponseTableDescriptionGlobalSecondaryIndexesProvisionedThroughputTypeDef(
    _ClientRestoreTableToPointInTimeResponseTableDescriptionGlobalSecondaryIndexesProvisionedThroughputTypeDef
):
    """
    Type definition for
    `ClientRestoreTableToPointInTimeResponseTableDescriptionGlobalSecondaryIndexes`
    `ProvisionedThroughput`

    Represents the provisioned throughput settings for the specified global secondary index.

    For current minimum and maximum provisioned throughput values, see `Limits
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the *Amazon
    DynamoDB Developer Guide* .

    - **LastIncreaseDateTime** *(datetime) --*

      The date and time of the last provisioned throughput increase for this table.

    - **LastDecreaseDateTime** *(datetime) --*

      The date and time of the last provisioned throughput decrease for this table.

    - **NumberOfDecreasesToday** *(integer) --*

      The number of provisioned throughput decreases for this table during this UTC calendar day.
      For current maximums on provisioned throughput decreases, see `Limits
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
      *Amazon DynamoDB Developer Guide* .

    - **ReadCapacityUnits** *(integer) --*

      The maximum number of strongly consistent reads consumed per second before DynamoDB returns a
      ``ThrottlingException`` . Eventually consistent reads require less effort than strongly
      consistent reads, so a setting of 50 ``ReadCapacityUnits`` per second provides 100 eventually
      consistent ``ReadCapacityUnits`` per second.

    - **WriteCapacityUnits** *(integer) --*

      The maximum number of writes consumed per second before DynamoDB returns a
      ``ThrottlingException`` .
    """


_ClientRestoreTableToPointInTimeResponseTableDescriptionGlobalSecondaryIndexesTypeDef = TypedDict(
    "_ClientRestoreTableToPointInTimeResponseTableDescriptionGlobalSecondaryIndexesTypeDef",
    {
        "IndexName": str,
        "KeySchema": List[
            ClientRestoreTableToPointInTimeResponseTableDescriptionGlobalSecondaryIndexesKeySchemaTypeDef
        ],
        "Projection": ClientRestoreTableToPointInTimeResponseTableDescriptionGlobalSecondaryIndexesProjectionTypeDef,
        "IndexStatus": str,
        "Backfilling": bool,
        "ProvisionedThroughput": ClientRestoreTableToPointInTimeResponseTableDescriptionGlobalSecondaryIndexesProvisionedThroughputTypeDef,
        "IndexSizeBytes": int,
        "ItemCount": int,
        "IndexArn": str,
    },
    total=False,
)


class ClientRestoreTableToPointInTimeResponseTableDescriptionGlobalSecondaryIndexesTypeDef(
    _ClientRestoreTableToPointInTimeResponseTableDescriptionGlobalSecondaryIndexesTypeDef
):
    """
    Type definition for `ClientRestoreTableToPointInTimeResponseTableDescription`
    `GlobalSecondaryIndexes`

    Represents the properties of a global secondary index.

    - **IndexName** *(string) --*

      The name of the global secondary index.

    - **KeySchema** *(list) --*

      The complete key schema for a global secondary index, which consists of one or more pairs of
      attribute names and key types:

      * ``HASH`` - partition key

      * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.

      - *(dict) --*

        Represents *a single element* of a key schema. A key schema specifies the attributes that
        make up the primary key of a table, or the key attributes of an index.

        A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
        simple primary key would be represented by one ``KeySchemaElement`` (for the partition key).
        A composite primary key would require one ``KeySchemaElement`` for the partition key, and
        another ``KeySchemaElement`` for the sort key.

        A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The
        data type must be one of String, Number, or Binary. The attribute cannot be nested within a
        List or a Map.

        - **AttributeName** *(string) --*

          The name of a key attribute.

        - **KeyType** *(string) --*

          The role that this key attribute will assume:

          * ``HASH`` - partition key

          * ``RANGE`` - sort key

          .. note::

            The partition key of an item is also known as its *hash attribute* . The term "hash
            attribute" derives from DynamoDB's usage of an internal hash function to evenly
            distribute data items across partitions, based on their partition key values.

            The sort key of an item is also known as its *range attribute* . The term "range
            attribute" derives from the way DynamoDB stores items with the same partition key
            physically close together, in sorted order by the sort key value.

    - **Projection** *(dict) --*

      Represents attributes that are copied (projected) from the table into the global secondary
      index. These are in addition to the primary key attributes and index key attributes, which are
      automatically projected.

      - **ProjectionType** *(string) --*

        The set of attributes that are projected into the index:

        * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

        * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list
        of projected attributes is in ``NonKeyAttributes`` .

        * ``ALL`` - All of the table attributes are projected into the index.

      - **NonKeyAttributes** *(list) --*

        Represents the non-key attribute names which will be projected into the index.

        For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all of
        the local secondary indexes, must not exceed 20. If you project the same attribute into two
        different indexes, this counts as two distinct attributes when determining the total.

        - *(string) --*

    - **IndexStatus** *(string) --*

      The current state of the global secondary index:

      * ``CREATING`` - The index is being created.

      * ``UPDATING`` - The index is being updated.

      * ``DELETING`` - The index is being deleted.

      * ``ACTIVE`` - The index is ready for use.

    - **Backfilling** *(boolean) --*

      Indicates whether the index is currently backfilling. *Backfilling* is the process of reading
      items from the table and determining whether they can be added to the index. (Not all items
      will qualify: For example, a partition key cannot have any duplicate values.) If an item can
      be added to the index, DynamoDB will do so. After all items have been processed, the
      backfilling operation is complete and ``Backfilling`` is false.

      You can delete an index that is being created during the ``Backfilling`` phase when
      ``IndexStatus`` is set to CREATING and ``Backfilling`` is true. You can't delete the index
      that is being created when ``IndexStatus`` is set to CREATING and ``Backfilling`` is false.

      .. note::

        For indexes that were created during a ``CreateTable`` operation, the ``Backfilling``
        attribute does not appear in the ``DescribeTable`` output.

    - **ProvisionedThroughput** *(dict) --*

      Represents the provisioned throughput settings for the specified global secondary index.

      For current minimum and maximum provisioned throughput values, see `Limits
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
      *Amazon DynamoDB Developer Guide* .

      - **LastIncreaseDateTime** *(datetime) --*

        The date and time of the last provisioned throughput increase for this table.

      - **LastDecreaseDateTime** *(datetime) --*

        The date and time of the last provisioned throughput decrease for this table.

      - **NumberOfDecreasesToday** *(integer) --*

        The number of provisioned throughput decreases for this table during this UTC calendar day.
        For current maximums on provisioned throughput decreases, see `Limits
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
        *Amazon DynamoDB Developer Guide* .

      - **ReadCapacityUnits** *(integer) --*

        The maximum number of strongly consistent reads consumed per second before DynamoDB returns
        a ``ThrottlingException`` . Eventually consistent reads require less effort than strongly
        consistent reads, so a setting of 50 ``ReadCapacityUnits`` per second provides 100
        eventually consistent ``ReadCapacityUnits`` per second.

      - **WriteCapacityUnits** *(integer) --*

        The maximum number of writes consumed per second before DynamoDB returns a
        ``ThrottlingException`` .

    - **IndexSizeBytes** *(integer) --*

      The total size of the specified index, in bytes. DynamoDB updates this value approximately
      every six hours. Recent changes might not be reflected in this value.

    - **ItemCount** *(integer) --*

      The number of items in the specified index. DynamoDB updates this value approximately every
      six hours. Recent changes might not be reflected in this value.

    - **IndexArn** *(string) --*

      The Amazon Resource Name (ARN) that uniquely identifies the index.
    """


_ClientRestoreTableToPointInTimeResponseTableDescriptionKeySchemaTypeDef = TypedDict(
    "_ClientRestoreTableToPointInTimeResponseTableDescriptionKeySchemaTypeDef",
    {"AttributeName": str, "KeyType": str},
    total=False,
)


class ClientRestoreTableToPointInTimeResponseTableDescriptionKeySchemaTypeDef(
    _ClientRestoreTableToPointInTimeResponseTableDescriptionKeySchemaTypeDef
):
    """
    Type definition for `ClientRestoreTableToPointInTimeResponseTableDescription` `KeySchema`

    Represents *a single element* of a key schema. A key schema specifies the attributes that make
    up the primary key of a table, or the key attributes of an index.

    A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
    simple primary key would be represented by one ``KeySchemaElement`` (for the partition key). A
    composite primary key would require one ``KeySchemaElement`` for the partition key, and another
    ``KeySchemaElement`` for the sort key.

    A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The data
    type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a
    Map.

    - **AttributeName** *(string) --*

      The name of a key attribute.

    - **KeyType** *(string) --*

      The role that this key attribute will assume:

      * ``HASH`` - partition key

      * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.
    """


_ClientRestoreTableToPointInTimeResponseTableDescriptionLocalSecondaryIndexesKeySchemaTypeDef = TypedDict(
    "_ClientRestoreTableToPointInTimeResponseTableDescriptionLocalSecondaryIndexesKeySchemaTypeDef",
    {"AttributeName": str, "KeyType": str},
    total=False,
)


class ClientRestoreTableToPointInTimeResponseTableDescriptionLocalSecondaryIndexesKeySchemaTypeDef(
    _ClientRestoreTableToPointInTimeResponseTableDescriptionLocalSecondaryIndexesKeySchemaTypeDef
):
    """
    Type definition for
    `ClientRestoreTableToPointInTimeResponseTableDescriptionLocalSecondaryIndexes` `KeySchema`

    Represents *a single element* of a key schema. A key schema specifies the attributes that make
    up the primary key of a table, or the key attributes of an index.

    A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
    simple primary key would be represented by one ``KeySchemaElement`` (for the partition key). A
    composite primary key would require one ``KeySchemaElement`` for the partition key, and another
    ``KeySchemaElement`` for the sort key.

    A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The data
    type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a
    Map.

    - **AttributeName** *(string) --*

      The name of a key attribute.

    - **KeyType** *(string) --*

      The role that this key attribute will assume:

      * ``HASH`` - partition key

      * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.
    """


_ClientRestoreTableToPointInTimeResponseTableDescriptionLocalSecondaryIndexesProjectionTypeDef = TypedDict(
    "_ClientRestoreTableToPointInTimeResponseTableDescriptionLocalSecondaryIndexesProjectionTypeDef",
    {"ProjectionType": str, "NonKeyAttributes": List[str]},
    total=False,
)


class ClientRestoreTableToPointInTimeResponseTableDescriptionLocalSecondaryIndexesProjectionTypeDef(
    _ClientRestoreTableToPointInTimeResponseTableDescriptionLocalSecondaryIndexesProjectionTypeDef
):
    """
    Type definition for
    `ClientRestoreTableToPointInTimeResponseTableDescriptionLocalSecondaryIndexes` `Projection`

    Represents attributes that are copied (projected) from the table into the global secondary
    index. These are in addition to the primary key attributes and index key attributes, which are
    automatically projected.

    - **ProjectionType** *(string) --*

      The set of attributes that are projected into the index:

      * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

      * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list of
      projected attributes is in ``NonKeyAttributes`` .

      * ``ALL`` - All of the table attributes are projected into the index.

    - **NonKeyAttributes** *(list) --*

      Represents the non-key attribute names which will be projected into the index.

      For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all of the
      local secondary indexes, must not exceed 20. If you project the same attribute into two
      different indexes, this counts as two distinct attributes when determining the total.

      - *(string) --*
    """


_ClientRestoreTableToPointInTimeResponseTableDescriptionLocalSecondaryIndexesTypeDef = TypedDict(
    "_ClientRestoreTableToPointInTimeResponseTableDescriptionLocalSecondaryIndexesTypeDef",
    {
        "IndexName": str,
        "KeySchema": List[
            ClientRestoreTableToPointInTimeResponseTableDescriptionLocalSecondaryIndexesKeySchemaTypeDef
        ],
        "Projection": ClientRestoreTableToPointInTimeResponseTableDescriptionLocalSecondaryIndexesProjectionTypeDef,
        "IndexSizeBytes": int,
        "ItemCount": int,
        "IndexArn": str,
    },
    total=False,
)


class ClientRestoreTableToPointInTimeResponseTableDescriptionLocalSecondaryIndexesTypeDef(
    _ClientRestoreTableToPointInTimeResponseTableDescriptionLocalSecondaryIndexesTypeDef
):
    """
    Type definition for `ClientRestoreTableToPointInTimeResponseTableDescription`
    `LocalSecondaryIndexes`

    Represents the properties of a local secondary index.

    - **IndexName** *(string) --*

      Represents the name of the local secondary index.

    - **KeySchema** *(list) --*

      The complete key schema for the local secondary index, consisting of one or more pairs of
      attribute names and key types:

      * ``HASH`` - partition key

      * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.

      - *(dict) --*

        Represents *a single element* of a key schema. A key schema specifies the attributes that
        make up the primary key of a table, or the key attributes of an index.

        A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
        simple primary key would be represented by one ``KeySchemaElement`` (for the partition key).
        A composite primary key would require one ``KeySchemaElement`` for the partition key, and
        another ``KeySchemaElement`` for the sort key.

        A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The
        data type must be one of String, Number, or Binary. The attribute cannot be nested within a
        List or a Map.

        - **AttributeName** *(string) --*

          The name of a key attribute.

        - **KeyType** *(string) --*

          The role that this key attribute will assume:

          * ``HASH`` - partition key

          * ``RANGE`` - sort key

          .. note::

            The partition key of an item is also known as its *hash attribute* . The term "hash
            attribute" derives from DynamoDB's usage of an internal hash function to evenly
            distribute data items across partitions, based on their partition key values.

            The sort key of an item is also known as its *range attribute* . The term "range
            attribute" derives from the way DynamoDB stores items with the same partition key
            physically close together, in sorted order by the sort key value.

    - **Projection** *(dict) --*

      Represents attributes that are copied (projected) from the table into the global secondary
      index. These are in addition to the primary key attributes and index key attributes, which are
      automatically projected.

      - **ProjectionType** *(string) --*

        The set of attributes that are projected into the index:

        * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

        * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list
        of projected attributes is in ``NonKeyAttributes`` .

        * ``ALL`` - All of the table attributes are projected into the index.

      - **NonKeyAttributes** *(list) --*

        Represents the non-key attribute names which will be projected into the index.

        For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all of
        the local secondary indexes, must not exceed 20. If you project the same attribute into two
        different indexes, this counts as two distinct attributes when determining the total.

        - *(string) --*

    - **IndexSizeBytes** *(integer) --*

      The total size of the specified index, in bytes. DynamoDB updates this value approximately
      every six hours. Recent changes might not be reflected in this value.

    - **ItemCount** *(integer) --*

      The number of items in the specified index. DynamoDB updates this value approximately every
      six hours. Recent changes might not be reflected in this value.

    - **IndexArn** *(string) --*

      The Amazon Resource Name (ARN) that uniquely identifies the index.
    """


_ClientRestoreTableToPointInTimeResponseTableDescriptionProvisionedThroughputTypeDef = TypedDict(
    "_ClientRestoreTableToPointInTimeResponseTableDescriptionProvisionedThroughputTypeDef",
    {
        "LastIncreaseDateTime": datetime,
        "LastDecreaseDateTime": datetime,
        "NumberOfDecreasesToday": int,
        "ReadCapacityUnits": int,
        "WriteCapacityUnits": int,
    },
    total=False,
)


class ClientRestoreTableToPointInTimeResponseTableDescriptionProvisionedThroughputTypeDef(
    _ClientRestoreTableToPointInTimeResponseTableDescriptionProvisionedThroughputTypeDef
):
    """
    Type definition for `ClientRestoreTableToPointInTimeResponseTableDescription`
    `ProvisionedThroughput`

    The provisioned throughput settings for the table, consisting of read and write capacity units,
    along with data about increases and decreases.

    - **LastIncreaseDateTime** *(datetime) --*

      The date and time of the last provisioned throughput increase for this table.

    - **LastDecreaseDateTime** *(datetime) --*

      The date and time of the last provisioned throughput decrease for this table.

    - **NumberOfDecreasesToday** *(integer) --*

      The number of provisioned throughput decreases for this table during this UTC calendar day.
      For current maximums on provisioned throughput decreases, see `Limits
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
      *Amazon DynamoDB Developer Guide* .

    - **ReadCapacityUnits** *(integer) --*

      The maximum number of strongly consistent reads consumed per second before DynamoDB returns a
      ``ThrottlingException`` . Eventually consistent reads require less effort than strongly
      consistent reads, so a setting of 50 ``ReadCapacityUnits`` per second provides 100 eventually
      consistent ``ReadCapacityUnits`` per second.

    - **WriteCapacityUnits** *(integer) --*

      The maximum number of writes consumed per second before DynamoDB returns a
      ``ThrottlingException`` .
    """


_ClientRestoreTableToPointInTimeResponseTableDescriptionReplicasGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef = TypedDict(
    "_ClientRestoreTableToPointInTimeResponseTableDescriptionReplicasGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef",
    {"ReadCapacityUnits": int},
    total=False,
)


class ClientRestoreTableToPointInTimeResponseTableDescriptionReplicasGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef(
    _ClientRestoreTableToPointInTimeResponseTableDescriptionReplicasGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef
):
    """
    Type definition for
    `ClientRestoreTableToPointInTimeResponseTableDescriptionReplicasGlobalSecondaryIndexes`
    `ProvisionedThroughputOverride`

    If not described, uses the source table GSI's read capacity settings.

    - **ReadCapacityUnits** *(integer) --*

      Replica-specific read capacity units. If not specified, uses the source table's read capacity
      settings.
    """


_ClientRestoreTableToPointInTimeResponseTableDescriptionReplicasGlobalSecondaryIndexesTypeDef = TypedDict(
    "_ClientRestoreTableToPointInTimeResponseTableDescriptionReplicasGlobalSecondaryIndexesTypeDef",
    {
        "IndexName": str,
        "ProvisionedThroughputOverride": ClientRestoreTableToPointInTimeResponseTableDescriptionReplicasGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef,
    },
    total=False,
)


class ClientRestoreTableToPointInTimeResponseTableDescriptionReplicasGlobalSecondaryIndexesTypeDef(
    _ClientRestoreTableToPointInTimeResponseTableDescriptionReplicasGlobalSecondaryIndexesTypeDef
):
    """
    Type definition for `ClientRestoreTableToPointInTimeResponseTableDescriptionReplicas`
    `GlobalSecondaryIndexes`

    Represents the properties of a replica global secondary index.

    - **IndexName** *(string) --*

      The name of the global secondary index.

    - **ProvisionedThroughputOverride** *(dict) --*

      If not described, uses the source table GSI's read capacity settings.

      - **ReadCapacityUnits** *(integer) --*

        Replica-specific read capacity units. If not specified, uses the source table's read
        capacity settings.
    """


_ClientRestoreTableToPointInTimeResponseTableDescriptionReplicasProvisionedThroughputOverrideTypeDef = TypedDict(
    "_ClientRestoreTableToPointInTimeResponseTableDescriptionReplicasProvisionedThroughputOverrideTypeDef",
    {"ReadCapacityUnits": int},
    total=False,
)


class ClientRestoreTableToPointInTimeResponseTableDescriptionReplicasProvisionedThroughputOverrideTypeDef(
    _ClientRestoreTableToPointInTimeResponseTableDescriptionReplicasProvisionedThroughputOverrideTypeDef
):
    """
    Type definition for `ClientRestoreTableToPointInTimeResponseTableDescriptionReplicas`
    `ProvisionedThroughputOverride`

    Replica-specific provisioned throughput. If not described, uses the source table's provisioned
    throughput settings.

    - **ReadCapacityUnits** *(integer) --*

      Replica-specific read capacity units. If not specified, uses the source table's read capacity
      settings.
    """


_ClientRestoreTableToPointInTimeResponseTableDescriptionReplicasTypeDef = TypedDict(
    "_ClientRestoreTableToPointInTimeResponseTableDescriptionReplicasTypeDef",
    {
        "RegionName": str,
        "ReplicaStatus": str,
        "ReplicaStatusDescription": str,
        "ReplicaStatusPercentProgress": str,
        "KMSMasterKeyId": str,
        "ProvisionedThroughputOverride": ClientRestoreTableToPointInTimeResponseTableDescriptionReplicasProvisionedThroughputOverrideTypeDef,
        "GlobalSecondaryIndexes": List[
            ClientRestoreTableToPointInTimeResponseTableDescriptionReplicasGlobalSecondaryIndexesTypeDef
        ],
    },
    total=False,
)


class ClientRestoreTableToPointInTimeResponseTableDescriptionReplicasTypeDef(
    _ClientRestoreTableToPointInTimeResponseTableDescriptionReplicasTypeDef
):
    """
    Type definition for `ClientRestoreTableToPointInTimeResponseTableDescription` `Replicas`

    Contains the details of the replica.

    - **RegionName** *(string) --*

      The name of the Region.

    - **ReplicaStatus** *(string) --*

      The current state of the replica:

      * ``CREATING`` - The replica is being created.

      * ``UPDATING`` - The replica is being updated.

      * ``DELETING`` - The replica is being deleted.

      * ``ACTIVE`` - The replica is ready for use.

    - **ReplicaStatusDescription** *(string) --*

      Detailed information about the replica status.

    - **ReplicaStatusPercentProgress** *(string) --*

      Specifies the progress of a Create, Update, or Delete action on the replica as a percentage.

    - **KMSMasterKeyId** *(string) --*

      The AWS KMS customer master key (CMK) of the replica that will be used for AWS KMS encryption.

    - **ProvisionedThroughputOverride** *(dict) --*

      Replica-specific provisioned throughput. If not described, uses the source table's provisioned
      throughput settings.

      - **ReadCapacityUnits** *(integer) --*

        Replica-specific read capacity units. If not specified, uses the source table's read
        capacity settings.

    - **GlobalSecondaryIndexes** *(list) --*

      Replica-specific global secondary index settings.

      - *(dict) --*

        Represents the properties of a replica global secondary index.

        - **IndexName** *(string) --*

          The name of the global secondary index.

        - **ProvisionedThroughputOverride** *(dict) --*

          If not described, uses the source table GSI's read capacity settings.

          - **ReadCapacityUnits** *(integer) --*

            Replica-specific read capacity units. If not specified, uses the source table's read
            capacity settings.
    """


_ClientRestoreTableToPointInTimeResponseTableDescriptionRestoreSummaryTypeDef = TypedDict(
    "_ClientRestoreTableToPointInTimeResponseTableDescriptionRestoreSummaryTypeDef",
    {
        "SourceBackupArn": str,
        "SourceTableArn": str,
        "RestoreDateTime": datetime,
        "RestoreInProgress": bool,
    },
    total=False,
)


class ClientRestoreTableToPointInTimeResponseTableDescriptionRestoreSummaryTypeDef(
    _ClientRestoreTableToPointInTimeResponseTableDescriptionRestoreSummaryTypeDef
):
    """
    Type definition for `ClientRestoreTableToPointInTimeResponseTableDescription` `RestoreSummary`

    Contains details for the restore.

    - **SourceBackupArn** *(string) --*

      The Amazon Resource Name (ARN) of the backup from which the table was restored.

    - **SourceTableArn** *(string) --*

      The ARN of the source table of the backup that is being restored.

    - **RestoreDateTime** *(datetime) --*

      Point in time or source backup time.

    - **RestoreInProgress** *(boolean) --*

      Indicates if a restore is in progress or not.
    """


_ClientRestoreTableToPointInTimeResponseTableDescriptionSSEDescriptionTypeDef = TypedDict(
    "_ClientRestoreTableToPointInTimeResponseTableDescriptionSSEDescriptionTypeDef",
    {
        "Status": str,
        "SSEType": str,
        "KMSMasterKeyArn": str,
        "InaccessibleEncryptionDateTime": datetime,
    },
    total=False,
)


class ClientRestoreTableToPointInTimeResponseTableDescriptionSSEDescriptionTypeDef(
    _ClientRestoreTableToPointInTimeResponseTableDescriptionSSEDescriptionTypeDef
):
    """
    Type definition for `ClientRestoreTableToPointInTimeResponseTableDescription` `SSEDescription`

    The description of the server-side encryption status on the specified table.

    - **Status** *(string) --*

      Represents the current state of server-side encryption. The only supported values are:

      * ``ENABLED`` - Server-side encryption is enabled.

      * ``UPDATING`` - Server-side encryption is being updated.

    - **SSEType** *(string) --*

      Server-side encryption type. The only supported value is:

      * ``KMS`` - Server-side encryption that uses AWS Key Management Service. The key is stored in
      your account and is managed by AWS KMS (AWS KMS charges apply).

    - **KMSMasterKeyArn** *(string) --*

      The AWS KMS customer master key (CMK) ARN used for the AWS KMS encryption.

    - **InaccessibleEncryptionDateTime** *(datetime) --*

      Indicates the time, in UNIX epoch date format, when DynamoDB detected that the table's AWS KMS
      key was inaccessible. This attribute will automatically be cleared when DynamoDB detects that
      the table's AWS KMS key is accessible again. DynamoDB will initiate the table archival process
      when table's AWS KMS key remains inaccessible for more than seven days from this date.
    """


_ClientRestoreTableToPointInTimeResponseTableDescriptionStreamSpecificationTypeDef = TypedDict(
    "_ClientRestoreTableToPointInTimeResponseTableDescriptionStreamSpecificationTypeDef",
    {"StreamEnabled": bool, "StreamViewType": str},
    total=False,
)


class ClientRestoreTableToPointInTimeResponseTableDescriptionStreamSpecificationTypeDef(
    _ClientRestoreTableToPointInTimeResponseTableDescriptionStreamSpecificationTypeDef
):
    """
    Type definition for `ClientRestoreTableToPointInTimeResponseTableDescription`
    `StreamSpecification`

    The current DynamoDB Streams configuration for the table.

    - **StreamEnabled** *(boolean) --*

      Indicates whether DynamoDB Streams is enabled (true) or disabled (false) on the table.

    - **StreamViewType** *(string) --*

      When an item in the table is modified, ``StreamViewType`` determines what information is
      written to the stream for this table. Valid values for ``StreamViewType`` are:

      * ``KEYS_ONLY`` - Only the key attributes of the modified item are written to the stream.

      * ``NEW_IMAGE`` - The entire item, as it appears after it was modified, is written to the
      stream.

      * ``OLD_IMAGE`` - The entire item, as it appeared before it was modified, is written to the
      stream.

      * ``NEW_AND_OLD_IMAGES`` - Both the new and the old item images of the item are written to the
      stream.
    """


_ClientRestoreTableToPointInTimeResponseTableDescriptionTypeDef = TypedDict(
    "_ClientRestoreTableToPointInTimeResponseTableDescriptionTypeDef",
    {
        "AttributeDefinitions": List[
            ClientRestoreTableToPointInTimeResponseTableDescriptionAttributeDefinitionsTypeDef
        ],
        "TableName": str,
        "KeySchema": List[ClientRestoreTableToPointInTimeResponseTableDescriptionKeySchemaTypeDef],
        "TableStatus": str,
        "CreationDateTime": datetime,
        "ProvisionedThroughput": ClientRestoreTableToPointInTimeResponseTableDescriptionProvisionedThroughputTypeDef,
        "TableSizeBytes": int,
        "ItemCount": int,
        "TableArn": str,
        "TableId": str,
        "BillingModeSummary": ClientRestoreTableToPointInTimeResponseTableDescriptionBillingModeSummaryTypeDef,
        "LocalSecondaryIndexes": List[
            ClientRestoreTableToPointInTimeResponseTableDescriptionLocalSecondaryIndexesTypeDef
        ],
        "GlobalSecondaryIndexes": List[
            ClientRestoreTableToPointInTimeResponseTableDescriptionGlobalSecondaryIndexesTypeDef
        ],
        "StreamSpecification": ClientRestoreTableToPointInTimeResponseTableDescriptionStreamSpecificationTypeDef,
        "LatestStreamLabel": str,
        "LatestStreamArn": str,
        "GlobalTableVersion": str,
        "Replicas": List[ClientRestoreTableToPointInTimeResponseTableDescriptionReplicasTypeDef],
        "RestoreSummary": ClientRestoreTableToPointInTimeResponseTableDescriptionRestoreSummaryTypeDef,
        "SSEDescription": ClientRestoreTableToPointInTimeResponseTableDescriptionSSEDescriptionTypeDef,
        "ArchivalSummary": ClientRestoreTableToPointInTimeResponseTableDescriptionArchivalSummaryTypeDef,
    },
    total=False,
)


class ClientRestoreTableToPointInTimeResponseTableDescriptionTypeDef(
    _ClientRestoreTableToPointInTimeResponseTableDescriptionTypeDef
):
    """
    Type definition for `ClientRestoreTableToPointInTimeResponse` `TableDescription`

    Represents the properties of a table.

    - **AttributeDefinitions** *(list) --*

      An array of ``AttributeDefinition`` objects. Each of these objects describes one attribute in
      the table and index key schema.

      Each ``AttributeDefinition`` object in this array is composed of:

      * ``AttributeName`` - The name of the attribute.

      * ``AttributeType`` - The data type for the attribute.

      - *(dict) --*

        Represents an attribute for describing the key schema for the table and indexes.

        - **AttributeName** *(string) --*

          A name for the attribute.

        - **AttributeType** *(string) --*

          The data type for the attribute, where:

          * ``S`` - the attribute is of type String

          * ``N`` - the attribute is of type Number

          * ``B`` - the attribute is of type Binary

    - **TableName** *(string) --*

      The name of the table.

    - **KeySchema** *(list) --*

      The primary key structure for the table. Each ``KeySchemaElement`` consists of:

      * ``AttributeName`` - The name of the attribute.

      * ``KeyType`` - The role of the attribute:

        * ``HASH`` - partition key

        * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.

      For more information about primary keys, see `Primary Key
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html#DataModelPrimaryKey>`__
      in the *Amazon DynamoDB Developer Guide* .

      - *(dict) --*

        Represents *a single element* of a key schema. A key schema specifies the attributes that
        make up the primary key of a table, or the key attributes of an index.

        A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
        simple primary key would be represented by one ``KeySchemaElement`` (for the partition key).
        A composite primary key would require one ``KeySchemaElement`` for the partition key, and
        another ``KeySchemaElement`` for the sort key.

        A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The
        data type must be one of String, Number, or Binary. The attribute cannot be nested within a
        List or a Map.

        - **AttributeName** *(string) --*

          The name of a key attribute.

        - **KeyType** *(string) --*

          The role that this key attribute will assume:

          * ``HASH`` - partition key

          * ``RANGE`` - sort key

          .. note::

            The partition key of an item is also known as its *hash attribute* . The term "hash
            attribute" derives from DynamoDB's usage of an internal hash function to evenly
            distribute data items across partitions, based on their partition key values.

            The sort key of an item is also known as its *range attribute* . The term "range
            attribute" derives from the way DynamoDB stores items with the same partition key
            physically close together, in sorted order by the sort key value.

    - **TableStatus** *(string) --*

      The current state of the table:

      * ``CREATING`` - The table is being created.

      * ``UPDATING`` - The table is being updated.

      * ``DELETING`` - The table is being deleted.

      * ``ACTIVE`` - The table is ready for use.

      * ``INACCESSIBLE_ENCRYPTION_CREDENTIALS`` - The AWS KMS key used to encrypt the table in
      inaccessible. Table operations may fail due to failure to use the AWS KMS key. DynamoDB will
      initiate the table archival process when a table's AWS KMS key remains inaccessible for more
      than seven days.

      * ``ARCHIVING`` - The table is being archived. Operations are not allowed until archival is
      complete.

      * ``ARCHIVED`` - The table has been archived. See the ArchivalReason for more information.

    - **CreationDateTime** *(datetime) --*

      The date and time when the table was created, in `UNIX epoch time
      <http://www.epochconverter.com/>`__ format.

    - **ProvisionedThroughput** *(dict) --*

      The provisioned throughput settings for the table, consisting of read and write capacity
      units, along with data about increases and decreases.

      - **LastIncreaseDateTime** *(datetime) --*

        The date and time of the last provisioned throughput increase for this table.

      - **LastDecreaseDateTime** *(datetime) --*

        The date and time of the last provisioned throughput decrease for this table.

      - **NumberOfDecreasesToday** *(integer) --*

        The number of provisioned throughput decreases for this table during this UTC calendar day.
        For current maximums on provisioned throughput decreases, see `Limits
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
        *Amazon DynamoDB Developer Guide* .

      - **ReadCapacityUnits** *(integer) --*

        The maximum number of strongly consistent reads consumed per second before DynamoDB returns
        a ``ThrottlingException`` . Eventually consistent reads require less effort than strongly
        consistent reads, so a setting of 50 ``ReadCapacityUnits`` per second provides 100
        eventually consistent ``ReadCapacityUnits`` per second.

      - **WriteCapacityUnits** *(integer) --*

        The maximum number of writes consumed per second before DynamoDB returns a
        ``ThrottlingException`` .

    - **TableSizeBytes** *(integer) --*

      The total size of the specified table, in bytes. DynamoDB updates this value approximately
      every six hours. Recent changes might not be reflected in this value.

    - **ItemCount** *(integer) --*

      The number of items in the specified table. DynamoDB updates this value approximately every
      six hours. Recent changes might not be reflected in this value.

    - **TableArn** *(string) --*

      The Amazon Resource Name (ARN) that uniquely identifies the table.

    - **TableId** *(string) --*

      Unique identifier for the table for which the backup was created.

    - **BillingModeSummary** *(dict) --*

      Contains the details for the read/write capacity mode.

      - **BillingMode** *(string) --*

        Controls how you are charged for read and write throughput and how you manage capacity. This
        setting can be changed later.

        * ``PROVISIONED`` - Sets the read/write capacity mode to ``PROVISIONED`` . We recommend
        using ``PROVISIONED`` for predictable workloads.

        * ``PAY_PER_REQUEST`` - Sets the read/write capacity mode to ``PAY_PER_REQUEST`` . We
        recommend using ``PAY_PER_REQUEST`` for unpredictable workloads.

      - **LastUpdateToPayPerRequestDateTime** *(datetime) --*

        Represents the time when ``PAY_PER_REQUEST`` was last set as the read/write capacity mode.

    - **LocalSecondaryIndexes** *(list) --*

      Represents one or more local secondary indexes on the table. Each index is scoped to a given
      partition key value. Tables with one or more local secondary indexes are subject to an item
      collection size limit, where the amount of data within a given item collection cannot exceed
      10 GB. Each element is composed of:

      * ``IndexName`` - The name of the local secondary index.

      * ``KeySchema`` - Specifies the complete index key schema. The attribute names in the key
      schema must be between 1 and 255 characters (inclusive). The key schema must begin with the
      same partition key as the table.

      * ``Projection`` - Specifies attributes that are copied (projected) from the table into the
      index. These are in addition to the primary key attributes and index key attributes, which are
      automatically projected. Each attribute specification is composed of:

        * ``ProjectionType`` - One of the following:

          * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

          * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list
          of projected attributes is in ``NonKeyAttributes`` .

          * ``ALL`` - All of the table attributes are projected into the index.

        * ``NonKeyAttributes`` - A list of one or more non-key attribute names that are projected
        into the secondary index. The total count of attributes provided in ``NonKeyAttributes`` ,
        summed across all of the secondary indexes, must not exceed 20. If you project the same
        attribute into two different indexes, this counts as two distinct attributes when
        determining the total.

      * ``IndexSizeBytes`` - Represents the total size of the index, in bytes. DynamoDB updates this
      value approximately every six hours. Recent changes might not be reflected in this value.

      * ``ItemCount`` - Represents the number of items in the index. DynamoDB updates this value
      approximately every six hours. Recent changes might not be reflected in this value.

      If the table is in the ``DELETING`` state, no information about indexes will be returned.

      - *(dict) --*

        Represents the properties of a local secondary index.

        - **IndexName** *(string) --*

          Represents the name of the local secondary index.

        - **KeySchema** *(list) --*

          The complete key schema for the local secondary index, consisting of one or more pairs of
          attribute names and key types:

          * ``HASH`` - partition key

          * ``RANGE`` - sort key

          .. note::

            The partition key of an item is also known as its *hash attribute* . The term "hash
            attribute" derives from DynamoDB's usage of an internal hash function to evenly
            distribute data items across partitions, based on their partition key values.

            The sort key of an item is also known as its *range attribute* . The term "range
            attribute" derives from the way DynamoDB stores items with the same partition key
            physically close together, in sorted order by the sort key value.

          - *(dict) --*

            Represents *a single element* of a key schema. A key schema specifies the attributes
            that make up the primary key of a table, or the key attributes of an index.

            A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example,
            a simple primary key would be represented by one ``KeySchemaElement`` (for the partition
            key). A composite primary key would require one ``KeySchemaElement`` for the partition
            key, and another ``KeySchemaElement`` for the sort key.

            A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute).
            The data type must be one of String, Number, or Binary. The attribute cannot be nested
            within a List or a Map.

            - **AttributeName** *(string) --*

              The name of a key attribute.

            - **KeyType** *(string) --*

              The role that this key attribute will assume:

              * ``HASH`` - partition key

              * ``RANGE`` - sort key

              .. note::

                The partition key of an item is also known as its *hash attribute* . The term "hash
                attribute" derives from DynamoDB's usage of an internal hash function to evenly
                distribute data items across partitions, based on their partition key values.

                The sort key of an item is also known as its *range attribute* . The term "range
                attribute" derives from the way DynamoDB stores items with the same partition key
                physically close together, in sorted order by the sort key value.

        - **Projection** *(dict) --*

          Represents attributes that are copied (projected) from the table into the global secondary
          index. These are in addition to the primary key attributes and index key attributes, which
          are automatically projected.

          - **ProjectionType** *(string) --*

            The set of attributes that are projected into the index:

            * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

            * ``INCLUDE`` - Only the specified table attributes are projected into the index. The
            list of projected attributes is in ``NonKeyAttributes`` .

            * ``ALL`` - All of the table attributes are projected into the index.

          - **NonKeyAttributes** *(list) --*

            Represents the non-key attribute names which will be projected into the index.

            For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all
            of the local secondary indexes, must not exceed 20. If you project the same attribute
            into two different indexes, this counts as two distinct attributes when determining the
            total.

            - *(string) --*

        - **IndexSizeBytes** *(integer) --*

          The total size of the specified index, in bytes. DynamoDB updates this value approximately
          every six hours. Recent changes might not be reflected in this value.

        - **ItemCount** *(integer) --*

          The number of items in the specified index. DynamoDB updates this value approximately
          every six hours. Recent changes might not be reflected in this value.

        - **IndexArn** *(string) --*

          The Amazon Resource Name (ARN) that uniquely identifies the index.

    - **GlobalSecondaryIndexes** *(list) --*

      The global secondary indexes, if any, on the table. Each index is scoped to a given partition
      key value. Each element is composed of:

      * ``Backfilling`` - If true, then the index is currently in the backfilling phase. Backfilling
      occurs only when a new global secondary index is added to the table. It is the process by
      which DynamoDB populates the new index with data from the table. (This attribute does not
      appear for indexes that were created during a ``CreateTable`` operation.)  You can delete an
      index that is being created during the ``Backfilling`` phase when ``IndexStatus`` is set to
      CREATING and ``Backfilling`` is true. You can't delete the index that is being created when
      ``IndexStatus`` is set to CREATING and ``Backfilling`` is false. (This attribute does not
      appear for indexes that were created during a ``CreateTable`` operation.)

      * ``IndexName`` - The name of the global secondary index.

      * ``IndexSizeBytes`` - The total size of the global secondary index, in bytes. DynamoDB
      updates this value approximately every six hours. Recent changes might not be reflected in
      this value.

      * ``IndexStatus`` - The current status of the global secondary index:

        * ``CREATING`` - The index is being created.

        * ``UPDATING`` - The index is being updated.

        * ``DELETING`` - The index is being deleted.

        * ``ACTIVE`` - The index is ready for use.

      * ``ItemCount`` - The number of items in the global secondary index. DynamoDB updates this
      value approximately every six hours. Recent changes might not be reflected in this value.

      * ``KeySchema`` - Specifies the complete index key schema. The attribute names in the key
      schema must be between 1 and 255 characters (inclusive). The key schema must begin with the
      same partition key as the table.

      * ``Projection`` - Specifies attributes that are copied (projected) from the table into the
      index. These are in addition to the primary key attributes and index key attributes, which are
      automatically projected. Each attribute specification is composed of:

        * ``ProjectionType`` - One of the following:

          * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

          * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list
          of projected attributes is in ``NonKeyAttributes`` .

          * ``ALL`` - All of the table attributes are projected into the index.

        * ``NonKeyAttributes`` - A list of one or more non-key attribute names that are projected
        into the secondary index. The total count of attributes provided in ``NonKeyAttributes`` ,
        summed across all of the secondary indexes, must not exceed 20. If you project the same
        attribute into two different indexes, this counts as two distinct attributes when
        determining the total.

      * ``ProvisionedThroughput`` - The provisioned throughput settings for the global secondary
      index, consisting of read and write capacity units, along with data about increases and
      decreases.

      If the table is in the ``DELETING`` state, no information about indexes will be returned.

      - *(dict) --*

        Represents the properties of a global secondary index.

        - **IndexName** *(string) --*

          The name of the global secondary index.

        - **KeySchema** *(list) --*

          The complete key schema for a global secondary index, which consists of one or more pairs
          of attribute names and key types:

          * ``HASH`` - partition key

          * ``RANGE`` - sort key

          .. note::

            The partition key of an item is also known as its *hash attribute* . The term "hash
            attribute" derives from DynamoDB's usage of an internal hash function to evenly
            distribute data items across partitions, based on their partition key values.

            The sort key of an item is also known as its *range attribute* . The term "range
            attribute" derives from the way DynamoDB stores items with the same partition key
            physically close together, in sorted order by the sort key value.

          - *(dict) --*

            Represents *a single element* of a key schema. A key schema specifies the attributes
            that make up the primary key of a table, or the key attributes of an index.

            A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example,
            a simple primary key would be represented by one ``KeySchemaElement`` (for the partition
            key). A composite primary key would require one ``KeySchemaElement`` for the partition
            key, and another ``KeySchemaElement`` for the sort key.

            A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute).
            The data type must be one of String, Number, or Binary. The attribute cannot be nested
            within a List or a Map.

            - **AttributeName** *(string) --*

              The name of a key attribute.

            - **KeyType** *(string) --*

              The role that this key attribute will assume:

              * ``HASH`` - partition key

              * ``RANGE`` - sort key

              .. note::

                The partition key of an item is also known as its *hash attribute* . The term "hash
                attribute" derives from DynamoDB's usage of an internal hash function to evenly
                distribute data items across partitions, based on their partition key values.

                The sort key of an item is also known as its *range attribute* . The term "range
                attribute" derives from the way DynamoDB stores items with the same partition key
                physically close together, in sorted order by the sort key value.

        - **Projection** *(dict) --*

          Represents attributes that are copied (projected) from the table into the global secondary
          index. These are in addition to the primary key attributes and index key attributes, which
          are automatically projected.

          - **ProjectionType** *(string) --*

            The set of attributes that are projected into the index:

            * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

            * ``INCLUDE`` - Only the specified table attributes are projected into the index. The
            list of projected attributes is in ``NonKeyAttributes`` .

            * ``ALL`` - All of the table attributes are projected into the index.

          - **NonKeyAttributes** *(list) --*

            Represents the non-key attribute names which will be projected into the index.

            For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all
            of the local secondary indexes, must not exceed 20. If you project the same attribute
            into two different indexes, this counts as two distinct attributes when determining the
            total.

            - *(string) --*

        - **IndexStatus** *(string) --*

          The current state of the global secondary index:

          * ``CREATING`` - The index is being created.

          * ``UPDATING`` - The index is being updated.

          * ``DELETING`` - The index is being deleted.

          * ``ACTIVE`` - The index is ready for use.

        - **Backfilling** *(boolean) --*

          Indicates whether the index is currently backfilling. *Backfilling* is the process of
          reading items from the table and determining whether they can be added to the index. (Not
          all items will qualify: For example, a partition key cannot have any duplicate values.) If
          an item can be added to the index, DynamoDB will do so. After all items have been
          processed, the backfilling operation is complete and ``Backfilling`` is false.

          You can delete an index that is being created during the ``Backfilling`` phase when
          ``IndexStatus`` is set to CREATING and ``Backfilling`` is true. You can't delete the index
          that is being created when ``IndexStatus`` is set to CREATING and ``Backfilling`` is
          false.

          .. note::

            For indexes that were created during a ``CreateTable`` operation, the ``Backfilling``
            attribute does not appear in the ``DescribeTable`` output.

        - **ProvisionedThroughput** *(dict) --*

          Represents the provisioned throughput settings for the specified global secondary index.

          For current minimum and maximum provisioned throughput values, see `Limits
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
          *Amazon DynamoDB Developer Guide* .

          - **LastIncreaseDateTime** *(datetime) --*

            The date and time of the last provisioned throughput increase for this table.

          - **LastDecreaseDateTime** *(datetime) --*

            The date and time of the last provisioned throughput decrease for this table.

          - **NumberOfDecreasesToday** *(integer) --*

            The number of provisioned throughput decreases for this table during this UTC calendar
            day. For current maximums on provisioned throughput decreases, see `Limits
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
            *Amazon DynamoDB Developer Guide* .

          - **ReadCapacityUnits** *(integer) --*

            The maximum number of strongly consistent reads consumed per second before DynamoDB
            returns a ``ThrottlingException`` . Eventually consistent reads require less effort than
            strongly consistent reads, so a setting of 50 ``ReadCapacityUnits`` per second provides
            100 eventually consistent ``ReadCapacityUnits`` per second.

          - **WriteCapacityUnits** *(integer) --*

            The maximum number of writes consumed per second before DynamoDB returns a
            ``ThrottlingException`` .

        - **IndexSizeBytes** *(integer) --*

          The total size of the specified index, in bytes. DynamoDB updates this value approximately
          every six hours. Recent changes might not be reflected in this value.

        - **ItemCount** *(integer) --*

          The number of items in the specified index. DynamoDB updates this value approximately
          every six hours. Recent changes might not be reflected in this value.

        - **IndexArn** *(string) --*

          The Amazon Resource Name (ARN) that uniquely identifies the index.

    - **StreamSpecification** *(dict) --*

      The current DynamoDB Streams configuration for the table.

      - **StreamEnabled** *(boolean) --*

        Indicates whether DynamoDB Streams is enabled (true) or disabled (false) on the table.

      - **StreamViewType** *(string) --*

        When an item in the table is modified, ``StreamViewType`` determines what information is
        written to the stream for this table. Valid values for ``StreamViewType`` are:

        * ``KEYS_ONLY`` - Only the key attributes of the modified item are written to the stream.

        * ``NEW_IMAGE`` - The entire item, as it appears after it was modified, is written to the
        stream.

        * ``OLD_IMAGE`` - The entire item, as it appeared before it was modified, is written to the
        stream.

        * ``NEW_AND_OLD_IMAGES`` - Both the new and the old item images of the item are written to
        the stream.

    - **LatestStreamLabel** *(string) --*

      A timestamp, in ISO 8601 format, for this stream.

      Note that ``LatestStreamLabel`` is not a unique identifier for the stream, because it is
      possible that a stream from another table might have the same timestamp. However, the
      combination of the following three elements is guaranteed to be unique:

      * AWS customer ID

      * Table name

      * ``StreamLabel``

    - **LatestStreamArn** *(string) --*

      The Amazon Resource Name (ARN) that uniquely identifies the latest stream for this table.

    - **GlobalTableVersion** *(string) --*

      Represents the version of `global tables
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GlobalTables.html>`__ in
      use, if the table is replicated across AWS Regions.

    - **Replicas** *(list) --*

      Represents replicas of the table.

      - *(dict) --*

        Contains the details of the replica.

        - **RegionName** *(string) --*

          The name of the Region.

        - **ReplicaStatus** *(string) --*

          The current state of the replica:

          * ``CREATING`` - The replica is being created.

          * ``UPDATING`` - The replica is being updated.

          * ``DELETING`` - The replica is being deleted.

          * ``ACTIVE`` - The replica is ready for use.

        - **ReplicaStatusDescription** *(string) --*

          Detailed information about the replica status.

        - **ReplicaStatusPercentProgress** *(string) --*

          Specifies the progress of a Create, Update, or Delete action on the replica as a
          percentage.

        - **KMSMasterKeyId** *(string) --*

          The AWS KMS customer master key (CMK) of the replica that will be used for AWS KMS
          encryption.

        - **ProvisionedThroughputOverride** *(dict) --*

          Replica-specific provisioned throughput. If not described, uses the source table's
          provisioned throughput settings.

          - **ReadCapacityUnits** *(integer) --*

            Replica-specific read capacity units. If not specified, uses the source table's read
            capacity settings.

        - **GlobalSecondaryIndexes** *(list) --*

          Replica-specific global secondary index settings.

          - *(dict) --*

            Represents the properties of a replica global secondary index.

            - **IndexName** *(string) --*

              The name of the global secondary index.

            - **ProvisionedThroughputOverride** *(dict) --*

              If not described, uses the source table GSI's read capacity settings.

              - **ReadCapacityUnits** *(integer) --*

                Replica-specific read capacity units. If not specified, uses the source table's read
                capacity settings.

    - **RestoreSummary** *(dict) --*

      Contains details for the restore.

      - **SourceBackupArn** *(string) --*

        The Amazon Resource Name (ARN) of the backup from which the table was restored.

      - **SourceTableArn** *(string) --*

        The ARN of the source table of the backup that is being restored.

      - **RestoreDateTime** *(datetime) --*

        Point in time or source backup time.

      - **RestoreInProgress** *(boolean) --*

        Indicates if a restore is in progress or not.

    - **SSEDescription** *(dict) --*

      The description of the server-side encryption status on the specified table.

      - **Status** *(string) --*

        Represents the current state of server-side encryption. The only supported values are:

        * ``ENABLED`` - Server-side encryption is enabled.

        * ``UPDATING`` - Server-side encryption is being updated.

      - **SSEType** *(string) --*

        Server-side encryption type. The only supported value is:

        * ``KMS`` - Server-side encryption that uses AWS Key Management Service. The key is stored
        in your account and is managed by AWS KMS (AWS KMS charges apply).

      - **KMSMasterKeyArn** *(string) --*

        The AWS KMS customer master key (CMK) ARN used for the AWS KMS encryption.

      - **InaccessibleEncryptionDateTime** *(datetime) --*

        Indicates the time, in UNIX epoch date format, when DynamoDB detected that the table's AWS
        KMS key was inaccessible. This attribute will automatically be cleared when DynamoDB detects
        that the table's AWS KMS key is accessible again. DynamoDB will initiate the table archival
        process when table's AWS KMS key remains inaccessible for more than seven days from this
        date.

    - **ArchivalSummary** *(dict) --*

      Contains information about the table archive.

      - **ArchivalDateTime** *(datetime) --*

        The date and time when table archival was initiated by DynamoDB, in UNIX epoch time format.

      - **ArchivalReason** *(string) --*

        The reason DynamoDB archived the table. Currently, the only possible value is:

        * ``INACCESSIBLE_ENCRYPTION_CREDENTIALS`` - The table was archived due to the table's AWS
        KMS key being inaccessible for more than seven days. An On-Demand backup was created at the
        archival time.

      - **ArchivalBackupArn** *(string) --*

        The Amazon Resource Name (ARN) of the backup the table was archived to, when applicable in
        the archival reason. If you wish to restore this backup to the same table name, you will
        need to delete the original table.
    """


_ClientRestoreTableToPointInTimeResponseTypeDef = TypedDict(
    "_ClientRestoreTableToPointInTimeResponseTypeDef",
    {"TableDescription": ClientRestoreTableToPointInTimeResponseTableDescriptionTypeDef},
    total=False,
)


class ClientRestoreTableToPointInTimeResponseTypeDef(
    _ClientRestoreTableToPointInTimeResponseTypeDef
):
    """
    Type definition for `ClientRestoreTableToPointInTime` `Response`

    - **TableDescription** *(dict) --*

      Represents the properties of a table.

      - **AttributeDefinitions** *(list) --*

        An array of ``AttributeDefinition`` objects. Each of these objects describes one attribute
        in the table and index key schema.

        Each ``AttributeDefinition`` object in this array is composed of:

        * ``AttributeName`` - The name of the attribute.

        * ``AttributeType`` - The data type for the attribute.

        - *(dict) --*

          Represents an attribute for describing the key schema for the table and indexes.

          - **AttributeName** *(string) --*

            A name for the attribute.

          - **AttributeType** *(string) --*

            The data type for the attribute, where:

            * ``S`` - the attribute is of type String

            * ``N`` - the attribute is of type Number

            * ``B`` - the attribute is of type Binary

      - **TableName** *(string) --*

        The name of the table.

      - **KeySchema** *(list) --*

        The primary key structure for the table. Each ``KeySchemaElement`` consists of:

        * ``AttributeName`` - The name of the attribute.

        * ``KeyType`` - The role of the attribute:

          * ``HASH`` - partition key

          * ``RANGE`` - sort key

        .. note::

          The partition key of an item is also known as its *hash attribute* . The term "hash
          attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
          data items across partitions, based on their partition key values.

          The sort key of an item is also known as its *range attribute* . The term "range
          attribute" derives from the way DynamoDB stores items with the same partition key
          physically close together, in sorted order by the sort key value.

        For more information about primary keys, see `Primary Key
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html#DataModelPrimaryKey>`__
        in the *Amazon DynamoDB Developer Guide* .

        - *(dict) --*

          Represents *a single element* of a key schema. A key schema specifies the attributes that
          make up the primary key of a table, or the key attributes of an index.

          A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
          simple primary key would be represented by one ``KeySchemaElement`` (for the partition
          key). A composite primary key would require one ``KeySchemaElement`` for the partition
          key, and another ``KeySchemaElement`` for the sort key.

          A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The
          data type must be one of String, Number, or Binary. The attribute cannot be nested within
          a List or a Map.

          - **AttributeName** *(string) --*

            The name of a key attribute.

          - **KeyType** *(string) --*

            The role that this key attribute will assume:

            * ``HASH`` - partition key

            * ``RANGE`` - sort key

            .. note::

              The partition key of an item is also known as its *hash attribute* . The term "hash
              attribute" derives from DynamoDB's usage of an internal hash function to evenly
              distribute data items across partitions, based on their partition key values.

              The sort key of an item is also known as its *range attribute* . The term "range
              attribute" derives from the way DynamoDB stores items with the same partition key
              physically close together, in sorted order by the sort key value.

      - **TableStatus** *(string) --*

        The current state of the table:

        * ``CREATING`` - The table is being created.

        * ``UPDATING`` - The table is being updated.

        * ``DELETING`` - The table is being deleted.

        * ``ACTIVE`` - The table is ready for use.

        * ``INACCESSIBLE_ENCRYPTION_CREDENTIALS`` - The AWS KMS key used to encrypt the table in
        inaccessible. Table operations may fail due to failure to use the AWS KMS key. DynamoDB will
        initiate the table archival process when a table's AWS KMS key remains inaccessible for more
        than seven days.

        * ``ARCHIVING`` - The table is being archived. Operations are not allowed until archival is
        complete.

        * ``ARCHIVED`` - The table has been archived. See the ArchivalReason for more information.

      - **CreationDateTime** *(datetime) --*

        The date and time when the table was created, in `UNIX epoch time
        <http://www.epochconverter.com/>`__ format.

      - **ProvisionedThroughput** *(dict) --*

        The provisioned throughput settings for the table, consisting of read and write capacity
        units, along with data about increases and decreases.

        - **LastIncreaseDateTime** *(datetime) --*

          The date and time of the last provisioned throughput increase for this table.

        - **LastDecreaseDateTime** *(datetime) --*

          The date and time of the last provisioned throughput decrease for this table.

        - **NumberOfDecreasesToday** *(integer) --*

          The number of provisioned throughput decreases for this table during this UTC calendar
          day. For current maximums on provisioned throughput decreases, see `Limits
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
          *Amazon DynamoDB Developer Guide* .

        - **ReadCapacityUnits** *(integer) --*

          The maximum number of strongly consistent reads consumed per second before DynamoDB
          returns a ``ThrottlingException`` . Eventually consistent reads require less effort than
          strongly consistent reads, so a setting of 50 ``ReadCapacityUnits`` per second provides
          100 eventually consistent ``ReadCapacityUnits`` per second.

        - **WriteCapacityUnits** *(integer) --*

          The maximum number of writes consumed per second before DynamoDB returns a
          ``ThrottlingException`` .

      - **TableSizeBytes** *(integer) --*

        The total size of the specified table, in bytes. DynamoDB updates this value approximately
        every six hours. Recent changes might not be reflected in this value.

      - **ItemCount** *(integer) --*

        The number of items in the specified table. DynamoDB updates this value approximately every
        six hours. Recent changes might not be reflected in this value.

      - **TableArn** *(string) --*

        The Amazon Resource Name (ARN) that uniquely identifies the table.

      - **TableId** *(string) --*

        Unique identifier for the table for which the backup was created.

      - **BillingModeSummary** *(dict) --*

        Contains the details for the read/write capacity mode.

        - **BillingMode** *(string) --*

          Controls how you are charged for read and write throughput and how you manage capacity.
          This setting can be changed later.

          * ``PROVISIONED`` - Sets the read/write capacity mode to ``PROVISIONED`` . We recommend
          using ``PROVISIONED`` for predictable workloads.

          * ``PAY_PER_REQUEST`` - Sets the read/write capacity mode to ``PAY_PER_REQUEST`` . We
          recommend using ``PAY_PER_REQUEST`` for unpredictable workloads.

        - **LastUpdateToPayPerRequestDateTime** *(datetime) --*

          Represents the time when ``PAY_PER_REQUEST`` was last set as the read/write capacity mode.

      - **LocalSecondaryIndexes** *(list) --*

        Represents one or more local secondary indexes on the table. Each index is scoped to a given
        partition key value. Tables with one or more local secondary indexes are subject to an item
        collection size limit, where the amount of data within a given item collection cannot exceed
        10 GB. Each element is composed of:

        * ``IndexName`` - The name of the local secondary index.

        * ``KeySchema`` - Specifies the complete index key schema. The attribute names in the key
        schema must be between 1 and 255 characters (inclusive). The key schema must begin with the
        same partition key as the table.

        * ``Projection`` - Specifies attributes that are copied (projected) from the table into the
        index. These are in addition to the primary key attributes and index key attributes, which
        are automatically projected. Each attribute specification is composed of:

          * ``ProjectionType`` - One of the following:

            * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

            * ``INCLUDE`` - Only the specified table attributes are projected into the index. The
            list of projected attributes is in ``NonKeyAttributes`` .

            * ``ALL`` - All of the table attributes are projected into the index.

          * ``NonKeyAttributes`` - A list of one or more non-key attribute names that are projected
          into the secondary index. The total count of attributes provided in ``NonKeyAttributes`` ,
          summed across all of the secondary indexes, must not exceed 20. If you project the same
          attribute into two different indexes, this counts as two distinct attributes when
          determining the total.

        * ``IndexSizeBytes`` - Represents the total size of the index, in bytes. DynamoDB updates
        this value approximately every six hours. Recent changes might not be reflected in this
        value.

        * ``ItemCount`` - Represents the number of items in the index. DynamoDB updates this value
        approximately every six hours. Recent changes might not be reflected in this value.

        If the table is in the ``DELETING`` state, no information about indexes will be returned.

        - *(dict) --*

          Represents the properties of a local secondary index.

          - **IndexName** *(string) --*

            Represents the name of the local secondary index.

          - **KeySchema** *(list) --*

            The complete key schema for the local secondary index, consisting of one or more pairs
            of attribute names and key types:

            * ``HASH`` - partition key

            * ``RANGE`` - sort key

            .. note::

              The partition key of an item is also known as its *hash attribute* . The term "hash
              attribute" derives from DynamoDB's usage of an internal hash function to evenly
              distribute data items across partitions, based on their partition key values.

              The sort key of an item is also known as its *range attribute* . The term "range
              attribute" derives from the way DynamoDB stores items with the same partition key
              physically close together, in sorted order by the sort key value.

            - *(dict) --*

              Represents *a single element* of a key schema. A key schema specifies the attributes
              that make up the primary key of a table, or the key attributes of an index.

              A ``KeySchemaElement`` represents exactly one attribute of the primary key. For
              example, a simple primary key would be represented by one ``KeySchemaElement`` (for
              the partition key). A composite primary key would require one ``KeySchemaElement`` for
              the partition key, and another ``KeySchemaElement`` for the sort key.

              A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute).
              The data type must be one of String, Number, or Binary. The attribute cannot be nested
              within a List or a Map.

              - **AttributeName** *(string) --*

                The name of a key attribute.

              - **KeyType** *(string) --*

                The role that this key attribute will assume:

                * ``HASH`` - partition key

                * ``RANGE`` - sort key

                .. note::

                  The partition key of an item is also known as its *hash attribute* . The term
                  "hash attribute" derives from DynamoDB's usage of an internal hash function to
                  evenly distribute data items across partitions, based on their partition key
                  values.

                  The sort key of an item is also known as its *range attribute* . The term "range
                  attribute" derives from the way DynamoDB stores items with the same partition key
                  physically close together, in sorted order by the sort key value.

          - **Projection** *(dict) --*

            Represents attributes that are copied (projected) from the table into the global
            secondary index. These are in addition to the primary key attributes and index key
            attributes, which are automatically projected.

            - **ProjectionType** *(string) --*

              The set of attributes that are projected into the index:

              * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

              * ``INCLUDE`` - Only the specified table attributes are projected into the index. The
              list of projected attributes is in ``NonKeyAttributes`` .

              * ``ALL`` - All of the table attributes are projected into the index.

            - **NonKeyAttributes** *(list) --*

              Represents the non-key attribute names which will be projected into the index.

              For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all
              of the local secondary indexes, must not exceed 20. If you project the same attribute
              into two different indexes, this counts as two distinct attributes when determining
              the total.

              - *(string) --*

          - **IndexSizeBytes** *(integer) --*

            The total size of the specified index, in bytes. DynamoDB updates this value
            approximately every six hours. Recent changes might not be reflected in this value.

          - **ItemCount** *(integer) --*

            The number of items in the specified index. DynamoDB updates this value approximately
            every six hours. Recent changes might not be reflected in this value.

          - **IndexArn** *(string) --*

            The Amazon Resource Name (ARN) that uniquely identifies the index.

      - **GlobalSecondaryIndexes** *(list) --*

        The global secondary indexes, if any, on the table. Each index is scoped to a given
        partition key value. Each element is composed of:

        * ``Backfilling`` - If true, then the index is currently in the backfilling phase.
        Backfilling occurs only when a new global secondary index is added to the table. It is the
        process by which DynamoDB populates the new index with data from the table. (This attribute
        does not appear for indexes that were created during a ``CreateTable`` operation.)  You can
        delete an index that is being created during the ``Backfilling`` phase when ``IndexStatus``
        is set to CREATING and ``Backfilling`` is true. You can't delete the index that is being
        created when ``IndexStatus`` is set to CREATING and ``Backfilling`` is false. (This
        attribute does not appear for indexes that were created during a ``CreateTable`` operation.)

        * ``IndexName`` - The name of the global secondary index.

        * ``IndexSizeBytes`` - The total size of the global secondary index, in bytes. DynamoDB
        updates this value approximately every six hours. Recent changes might not be reflected in
        this value.

        * ``IndexStatus`` - The current status of the global secondary index:

          * ``CREATING`` - The index is being created.

          * ``UPDATING`` - The index is being updated.

          * ``DELETING`` - The index is being deleted.

          * ``ACTIVE`` - The index is ready for use.

        * ``ItemCount`` - The number of items in the global secondary index. DynamoDB updates this
        value approximately every six hours. Recent changes might not be reflected in this value.

        * ``KeySchema`` - Specifies the complete index key schema. The attribute names in the key
        schema must be between 1 and 255 characters (inclusive). The key schema must begin with the
        same partition key as the table.

        * ``Projection`` - Specifies attributes that are copied (projected) from the table into the
        index. These are in addition to the primary key attributes and index key attributes, which
        are automatically projected. Each attribute specification is composed of:

          * ``ProjectionType`` - One of the following:

            * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

            * ``INCLUDE`` - Only the specified table attributes are projected into the index. The
            list of projected attributes is in ``NonKeyAttributes`` .

            * ``ALL`` - All of the table attributes are projected into the index.

          * ``NonKeyAttributes`` - A list of one or more non-key attribute names that are projected
          into the secondary index. The total count of attributes provided in ``NonKeyAttributes`` ,
          summed across all of the secondary indexes, must not exceed 20. If you project the same
          attribute into two different indexes, this counts as two distinct attributes when
          determining the total.

        * ``ProvisionedThroughput`` - The provisioned throughput settings for the global secondary
        index, consisting of read and write capacity units, along with data about increases and
        decreases.

        If the table is in the ``DELETING`` state, no information about indexes will be returned.

        - *(dict) --*

          Represents the properties of a global secondary index.

          - **IndexName** *(string) --*

            The name of the global secondary index.

          - **KeySchema** *(list) --*

            The complete key schema for a global secondary index, which consists of one or more
            pairs of attribute names and key types:

            * ``HASH`` - partition key

            * ``RANGE`` - sort key

            .. note::

              The partition key of an item is also known as its *hash attribute* . The term "hash
              attribute" derives from DynamoDB's usage of an internal hash function to evenly
              distribute data items across partitions, based on their partition key values.

              The sort key of an item is also known as its *range attribute* . The term "range
              attribute" derives from the way DynamoDB stores items with the same partition key
              physically close together, in sorted order by the sort key value.

            - *(dict) --*

              Represents *a single element* of a key schema. A key schema specifies the attributes
              that make up the primary key of a table, or the key attributes of an index.

              A ``KeySchemaElement`` represents exactly one attribute of the primary key. For
              example, a simple primary key would be represented by one ``KeySchemaElement`` (for
              the partition key). A composite primary key would require one ``KeySchemaElement`` for
              the partition key, and another ``KeySchemaElement`` for the sort key.

              A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute).
              The data type must be one of String, Number, or Binary. The attribute cannot be nested
              within a List or a Map.

              - **AttributeName** *(string) --*

                The name of a key attribute.

              - **KeyType** *(string) --*

                The role that this key attribute will assume:

                * ``HASH`` - partition key

                * ``RANGE`` - sort key

                .. note::

                  The partition key of an item is also known as its *hash attribute* . The term
                  "hash attribute" derives from DynamoDB's usage of an internal hash function to
                  evenly distribute data items across partitions, based on their partition key
                  values.

                  The sort key of an item is also known as its *range attribute* . The term "range
                  attribute" derives from the way DynamoDB stores items with the same partition key
                  physically close together, in sorted order by the sort key value.

          - **Projection** *(dict) --*

            Represents attributes that are copied (projected) from the table into the global
            secondary index. These are in addition to the primary key attributes and index key
            attributes, which are automatically projected.

            - **ProjectionType** *(string) --*

              The set of attributes that are projected into the index:

              * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

              * ``INCLUDE`` - Only the specified table attributes are projected into the index. The
              list of projected attributes is in ``NonKeyAttributes`` .

              * ``ALL`` - All of the table attributes are projected into the index.

            - **NonKeyAttributes** *(list) --*

              Represents the non-key attribute names which will be projected into the index.

              For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all
              of the local secondary indexes, must not exceed 20. If you project the same attribute
              into two different indexes, this counts as two distinct attributes when determining
              the total.

              - *(string) --*

          - **IndexStatus** *(string) --*

            The current state of the global secondary index:

            * ``CREATING`` - The index is being created.

            * ``UPDATING`` - The index is being updated.

            * ``DELETING`` - The index is being deleted.

            * ``ACTIVE`` - The index is ready for use.

          - **Backfilling** *(boolean) --*

            Indicates whether the index is currently backfilling. *Backfilling* is the process of
            reading items from the table and determining whether they can be added to the index.
            (Not all items will qualify: For example, a partition key cannot have any duplicate
            values.) If an item can be added to the index, DynamoDB will do so. After all items have
            been processed, the backfilling operation is complete and ``Backfilling`` is false.

            You can delete an index that is being created during the ``Backfilling`` phase when
            ``IndexStatus`` is set to CREATING and ``Backfilling`` is true. You can't delete the
            index that is being created when ``IndexStatus`` is set to CREATING and ``Backfilling``
            is false.

            .. note::

              For indexes that were created during a ``CreateTable`` operation, the ``Backfilling``
              attribute does not appear in the ``DescribeTable`` output.

          - **ProvisionedThroughput** *(dict) --*

            Represents the provisioned throughput settings for the specified global secondary index.

            For current minimum and maximum provisioned throughput values, see `Limits
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
            *Amazon DynamoDB Developer Guide* .

            - **LastIncreaseDateTime** *(datetime) --*

              The date and time of the last provisioned throughput increase for this table.

            - **LastDecreaseDateTime** *(datetime) --*

              The date and time of the last provisioned throughput decrease for this table.

            - **NumberOfDecreasesToday** *(integer) --*

              The number of provisioned throughput decreases for this table during this UTC calendar
              day. For current maximums on provisioned throughput decreases, see `Limits
              <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in
              the *Amazon DynamoDB Developer Guide* .

            - **ReadCapacityUnits** *(integer) --*

              The maximum number of strongly consistent reads consumed per second before DynamoDB
              returns a ``ThrottlingException`` . Eventually consistent reads require less effort
              than strongly consistent reads, so a setting of 50 ``ReadCapacityUnits`` per second
              provides 100 eventually consistent ``ReadCapacityUnits`` per second.

            - **WriteCapacityUnits** *(integer) --*

              The maximum number of writes consumed per second before DynamoDB returns a
              ``ThrottlingException`` .

          - **IndexSizeBytes** *(integer) --*

            The total size of the specified index, in bytes. DynamoDB updates this value
            approximately every six hours. Recent changes might not be reflected in this value.

          - **ItemCount** *(integer) --*

            The number of items in the specified index. DynamoDB updates this value approximately
            every six hours. Recent changes might not be reflected in this value.

          - **IndexArn** *(string) --*

            The Amazon Resource Name (ARN) that uniquely identifies the index.

      - **StreamSpecification** *(dict) --*

        The current DynamoDB Streams configuration for the table.

        - **StreamEnabled** *(boolean) --*

          Indicates whether DynamoDB Streams is enabled (true) or disabled (false) on the table.

        - **StreamViewType** *(string) --*

          When an item in the table is modified, ``StreamViewType`` determines what information is
          written to the stream for this table. Valid values for ``StreamViewType`` are:

          * ``KEYS_ONLY`` - Only the key attributes of the modified item are written to the stream.

          * ``NEW_IMAGE`` - The entire item, as it appears after it was modified, is written to the
          stream.

          * ``OLD_IMAGE`` - The entire item, as it appeared before it was modified, is written to
          the stream.

          * ``NEW_AND_OLD_IMAGES`` - Both the new and the old item images of the item are written to
          the stream.

      - **LatestStreamLabel** *(string) --*

        A timestamp, in ISO 8601 format, for this stream.

        Note that ``LatestStreamLabel`` is not a unique identifier for the stream, because it is
        possible that a stream from another table might have the same timestamp. However, the
        combination of the following three elements is guaranteed to be unique:

        * AWS customer ID

        * Table name

        * ``StreamLabel``

      - **LatestStreamArn** *(string) --*

        The Amazon Resource Name (ARN) that uniquely identifies the latest stream for this table.

      - **GlobalTableVersion** *(string) --*

        Represents the version of `global tables
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GlobalTables.html>`__ in
        use, if the table is replicated across AWS Regions.

      - **Replicas** *(list) --*

        Represents replicas of the table.

        - *(dict) --*

          Contains the details of the replica.

          - **RegionName** *(string) --*

            The name of the Region.

          - **ReplicaStatus** *(string) --*

            The current state of the replica:

            * ``CREATING`` - The replica is being created.

            * ``UPDATING`` - The replica is being updated.

            * ``DELETING`` - The replica is being deleted.

            * ``ACTIVE`` - The replica is ready for use.

          - **ReplicaStatusDescription** *(string) --*

            Detailed information about the replica status.

          - **ReplicaStatusPercentProgress** *(string) --*

            Specifies the progress of a Create, Update, or Delete action on the replica as a
            percentage.

          - **KMSMasterKeyId** *(string) --*

            The AWS KMS customer master key (CMK) of the replica that will be used for AWS KMS
            encryption.

          - **ProvisionedThroughputOverride** *(dict) --*

            Replica-specific provisioned throughput. If not described, uses the source table's
            provisioned throughput settings.

            - **ReadCapacityUnits** *(integer) --*

              Replica-specific read capacity units. If not specified, uses the source table's read
              capacity settings.

          - **GlobalSecondaryIndexes** *(list) --*

            Replica-specific global secondary index settings.

            - *(dict) --*

              Represents the properties of a replica global secondary index.

              - **IndexName** *(string) --*

                The name of the global secondary index.

              - **ProvisionedThroughputOverride** *(dict) --*

                If not described, uses the source table GSI's read capacity settings.

                - **ReadCapacityUnits** *(integer) --*

                  Replica-specific read capacity units. If not specified, uses the source table's
                  read capacity settings.

      - **RestoreSummary** *(dict) --*

        Contains details for the restore.

        - **SourceBackupArn** *(string) --*

          The Amazon Resource Name (ARN) of the backup from which the table was restored.

        - **SourceTableArn** *(string) --*

          The ARN of the source table of the backup that is being restored.

        - **RestoreDateTime** *(datetime) --*

          Point in time or source backup time.

        - **RestoreInProgress** *(boolean) --*

          Indicates if a restore is in progress or not.

      - **SSEDescription** *(dict) --*

        The description of the server-side encryption status on the specified table.

        - **Status** *(string) --*

          Represents the current state of server-side encryption. The only supported values are:

          * ``ENABLED`` - Server-side encryption is enabled.

          * ``UPDATING`` - Server-side encryption is being updated.

        - **SSEType** *(string) --*

          Server-side encryption type. The only supported value is:

          * ``KMS`` - Server-side encryption that uses AWS Key Management Service. The key is stored
          in your account and is managed by AWS KMS (AWS KMS charges apply).

        - **KMSMasterKeyArn** *(string) --*

          The AWS KMS customer master key (CMK) ARN used for the AWS KMS encryption.

        - **InaccessibleEncryptionDateTime** *(datetime) --*

          Indicates the time, in UNIX epoch date format, when DynamoDB detected that the table's AWS
          KMS key was inaccessible. This attribute will automatically be cleared when DynamoDB
          detects that the table's AWS KMS key is accessible again. DynamoDB will initiate the table
          archival process when table's AWS KMS key remains inaccessible for more than seven days
          from this date.

      - **ArchivalSummary** *(dict) --*

        Contains information about the table archive.

        - **ArchivalDateTime** *(datetime) --*

          The date and time when table archival was initiated by DynamoDB, in UNIX epoch time
          format.

        - **ArchivalReason** *(string) --*

          The reason DynamoDB archived the table. Currently, the only possible value is:

          * ``INACCESSIBLE_ENCRYPTION_CREDENTIALS`` - The table was archived due to the table's AWS
          KMS key being inaccessible for more than seven days. An On-Demand backup was created at
          the archival time.

        - **ArchivalBackupArn** *(string) --*

          The Amazon Resource Name (ARN) of the backup the table was archived to, when applicable in
          the archival reason. If you wish to restore this backup to the same table name, you will
          need to delete the original table.
    """


_ClientScanExclusiveStartKeyTypeDef = TypedDict(
    "_ClientScanExclusiveStartKeyTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class ClientScanExclusiveStartKeyTypeDef(_ClientScanExclusiveStartKeyTypeDef):
    """
    Type definition for `ClientScan` `ExclusiveStartKey`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_ClientScanExpressionAttributeValuesTypeDef = TypedDict(
    "_ClientScanExpressionAttributeValuesTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class ClientScanExpressionAttributeValuesTypeDef(_ClientScanExpressionAttributeValuesTypeDef):
    """
    Type definition for `ClientScan` `ExpressionAttributeValues`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_ClientScanResponseConsumedCapacityGlobalSecondaryIndexesTypeDef = TypedDict(
    "_ClientScanResponseConsumedCapacityGlobalSecondaryIndexesTypeDef",
    {"ReadCapacityUnits": float, "WriteCapacityUnits": float, "CapacityUnits": float},
    total=False,
)


class ClientScanResponseConsumedCapacityGlobalSecondaryIndexesTypeDef(
    _ClientScanResponseConsumedCapacityGlobalSecondaryIndexesTypeDef
):
    """
    Type definition for `ClientScanResponseConsumedCapacity` `GlobalSecondaryIndexes`

    Represents the amount of provisioned throughput capacity consumed on a table or an index.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed on a table or an index.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed on a table or an index.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed on a table or an index.
    """


_ClientScanResponseConsumedCapacityLocalSecondaryIndexesTypeDef = TypedDict(
    "_ClientScanResponseConsumedCapacityLocalSecondaryIndexesTypeDef",
    {"ReadCapacityUnits": float, "WriteCapacityUnits": float, "CapacityUnits": float},
    total=False,
)


class ClientScanResponseConsumedCapacityLocalSecondaryIndexesTypeDef(
    _ClientScanResponseConsumedCapacityLocalSecondaryIndexesTypeDef
):
    """
    Type definition for `ClientScanResponseConsumedCapacity` `LocalSecondaryIndexes`

    Represents the amount of provisioned throughput capacity consumed on a table or an index.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed on a table or an index.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed on a table or an index.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed on a table or an index.
    """


_ClientScanResponseConsumedCapacityTableTypeDef = TypedDict(
    "_ClientScanResponseConsumedCapacityTableTypeDef",
    {"ReadCapacityUnits": float, "WriteCapacityUnits": float, "CapacityUnits": float},
    total=False,
)


class ClientScanResponseConsumedCapacityTableTypeDef(
    _ClientScanResponseConsumedCapacityTableTypeDef
):
    """
    Type definition for `ClientScanResponseConsumedCapacity` `Table`

    The amount of throughput consumed on the table affected by the operation.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed on a table or an index.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed on a table or an index.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed on a table or an index.
    """


_ClientScanResponseConsumedCapacityTypeDef = TypedDict(
    "_ClientScanResponseConsumedCapacityTypeDef",
    {
        "TableName": str,
        "CapacityUnits": float,
        "ReadCapacityUnits": float,
        "WriteCapacityUnits": float,
        "Table": ClientScanResponseConsumedCapacityTableTypeDef,
        "LocalSecondaryIndexes": Dict[
            str, ClientScanResponseConsumedCapacityLocalSecondaryIndexesTypeDef
        ],
        "GlobalSecondaryIndexes": Dict[
            str, ClientScanResponseConsumedCapacityGlobalSecondaryIndexesTypeDef
        ],
    },
    total=False,
)


class ClientScanResponseConsumedCapacityTypeDef(_ClientScanResponseConsumedCapacityTypeDef):
    """
    Type definition for `ClientScanResponse` `ConsumedCapacity`

    The capacity units consumed by the ``Scan`` operation. The data returned includes the total
    provisioned throughput consumed, along with statistics for the table and any indexes involved in
    the operation. ``ConsumedCapacity`` is only returned if the ``ReturnConsumedCapacity`` parameter
    was specified. For more information, see `Provisioned Throughput
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **TableName** *(string) --*

      The name of the table that was affected by the operation.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed by the operation.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed by the operation.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed by the operation.

    - **Table** *(dict) --*

      The amount of throughput consumed on the table affected by the operation.

      - **ReadCapacityUnits** *(float) --*

        The total number of read capacity units consumed on a table or an index.

      - **WriteCapacityUnits** *(float) --*

        The total number of write capacity units consumed on a table or an index.

      - **CapacityUnits** *(float) --*

        The total number of capacity units consumed on a table or an index.

    - **LocalSecondaryIndexes** *(dict) --*

      The amount of throughput consumed on each local index affected by the operation.

      - *(string) --*

        - *(dict) --*

          Represents the amount of provisioned throughput capacity consumed on a table or an index.

          - **ReadCapacityUnits** *(float) --*

            The total number of read capacity units consumed on a table or an index.

          - **WriteCapacityUnits** *(float) --*

            The total number of write capacity units consumed on a table or an index.

          - **CapacityUnits** *(float) --*

            The total number of capacity units consumed on a table or an index.

    - **GlobalSecondaryIndexes** *(dict) --*

      The amount of throughput consumed on each global index affected by the operation.

      - *(string) --*

        - *(dict) --*

          Represents the amount of provisioned throughput capacity consumed on a table or an index.

          - **ReadCapacityUnits** *(float) --*

            The total number of read capacity units consumed on a table or an index.

          - **WriteCapacityUnits** *(float) --*

            The total number of write capacity units consumed on a table or an index.

          - **CapacityUnits** *(float) --*

            The total number of capacity units consumed on a table or an index.
    """


_ClientScanResponseItemsTypeDef = TypedDict(
    "_ClientScanResponseItemsTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class ClientScanResponseItemsTypeDef(_ClientScanResponseItemsTypeDef):
    """
    Type definition for `ClientScanResponse` `Items`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_ClientScanResponseLastEvaluatedKeyTypeDef = TypedDict(
    "_ClientScanResponseLastEvaluatedKeyTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class ClientScanResponseLastEvaluatedKeyTypeDef(_ClientScanResponseLastEvaluatedKeyTypeDef):
    """
    Type definition for `ClientScanResponse` `LastEvaluatedKey`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_ClientScanResponseTypeDef = TypedDict(
    "_ClientScanResponseTypeDef",
    {
        "Items": List[Dict[str, ClientScanResponseItemsTypeDef]],
        "Count": int,
        "ScannedCount": int,
        "LastEvaluatedKey": Dict[str, ClientScanResponseLastEvaluatedKeyTypeDef],
        "ConsumedCapacity": ClientScanResponseConsumedCapacityTypeDef,
    },
    total=False,
)


class ClientScanResponseTypeDef(_ClientScanResponseTypeDef):
    """
    Type definition for `ClientScan` `Response`

    Represents the output of a ``Scan`` operation.

    - **Items** *(list) --*

      An array of item attributes that match the scan criteria. Each element in this array consists
      of an attribute name and the value for that attribute.

      - *(dict) --*

        - *(string) --*

          - *(dict) --*

            Represents the data for an attribute.

            Each attribute value is described as a name-value pair. The name is the data type, and
            the value is the data itself.

            For more information, see `Data Types
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
            in the *Amazon DynamoDB Developer Guide* .

            - **S** *(string) --*

              An attribute of type String. For example:

               ``"S": "Hello"``

            - **N** *(string) --*

              An attribute of type Number. For example:

               ``"N": "123.45"``

              Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
              across languages and libraries. However, DynamoDB treats them as number type
              attributes for mathematical operations.

            - **B** *(bytes) --*

              An attribute of type Binary. For example:

               ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

            - **SS** *(list) --*

              An attribute of type String Set. For example:

               ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

              - *(string) --*

            - **NS** *(list) --*

              An attribute of type Number Set. For example:

               ``"NS": ["42.2", "-19", "7.5", "3.14"]``

              Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
              across languages and libraries. However, DynamoDB treats them as number type
              attributes for mathematical operations.

              - *(string) --*

            - **BS** *(list) --*

              An attribute of type Binary Set. For example:

               ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

              - *(bytes) --*

            - **M** *(dict) --*

              An attribute of type Map. For example:

               ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

              - *(string) --*

                - *(dict) --*

                  Represents the data for an attribute.

                  Each attribute value is described as a name-value pair. The name is the data type,
                  and the value is the data itself.

                  For more information, see `Data Types
                  <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                  in the *Amazon DynamoDB Developer Guide* .

            - **L** *(list) --*

              An attribute of type List. For example:

               ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

            - **NULL** *(boolean) --*

              An attribute of type Null. For example:

               ``"NULL": true``

            - **BOOL** *(boolean) --*

              An attribute of type Boolean. For example:

               ``"BOOL": true``

    - **Count** *(integer) --*

      The number of items in the response.

      If you set ``ScanFilter`` in the request, then ``Count`` is the number of items returned after
      the filter was applied, and ``ScannedCount`` is the number of matching items before the filter
      was applied.

      If you did not use a filter in the request, then ``Count`` is the same as ``ScannedCount`` .

    - **ScannedCount** *(integer) --*

      The number of items evaluated, before any ``ScanFilter`` is applied. A high ``ScannedCount``
      value with few, or no, ``Count`` results indicates an inefficient ``Scan`` operation. For more
      information, see `Count and ScannedCount
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html#Count>`__
      in the *Amazon DynamoDB Developer Guide* .

      If you did not use a filter in the request, then ``ScannedCount`` is the same as ``Count`` .

    - **LastEvaluatedKey** *(dict) --*

      The primary key of the item where the operation stopped, inclusive of the previous result set.
      Use this value to start a new operation, excluding this value in the new request.

      If ``LastEvaluatedKey`` is empty, then the "last page" of results has been processed and there
      is no more data to be retrieved.

      If ``LastEvaluatedKey`` is not empty, it does not necessarily mean that there is more data in
      the result set. The only way to know when you have reached the end of the result set is when
      ``LastEvaluatedKey`` is empty.

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

          - **S** *(string) --*

            An attribute of type String. For example:

             ``"S": "Hello"``

          - **N** *(string) --*

            An attribute of type Number. For example:

             ``"N": "123.45"``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

          - **B** *(bytes) --*

            An attribute of type Binary. For example:

             ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

          - **SS** *(list) --*

            An attribute of type String Set. For example:

             ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

            - *(string) --*

          - **NS** *(list) --*

            An attribute of type Number Set. For example:

             ``"NS": ["42.2", "-19", "7.5", "3.14"]``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

            - *(string) --*

          - **BS** *(list) --*

            An attribute of type Binary Set. For example:

             ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

            - *(bytes) --*

          - **M** *(dict) --*

            An attribute of type Map. For example:

             ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

            - *(string) --*

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

          - **L** *(list) --*

            An attribute of type List. For example:

             ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

            - *(dict) --*

              Represents the data for an attribute.

              Each attribute value is described as a name-value pair. The name is the data type, and
              the value is the data itself.

              For more information, see `Data Types
              <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
              in the *Amazon DynamoDB Developer Guide* .

          - **NULL** *(boolean) --*

            An attribute of type Null. For example:

             ``"NULL": true``

          - **BOOL** *(boolean) --*

            An attribute of type Boolean. For example:

             ``"BOOL": true``

    - **ConsumedCapacity** *(dict) --*

      The capacity units consumed by the ``Scan`` operation. The data returned includes the total
      provisioned throughput consumed, along with statistics for the table and any indexes involved
      in the operation. ``ConsumedCapacity`` is only returned if the ``ReturnConsumedCapacity``
      parameter was specified. For more information, see `Provisioned Throughput
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html>`__
      in the *Amazon DynamoDB Developer Guide* .

      - **TableName** *(string) --*

        The name of the table that was affected by the operation.

      - **CapacityUnits** *(float) --*

        The total number of capacity units consumed by the operation.

      - **ReadCapacityUnits** *(float) --*

        The total number of read capacity units consumed by the operation.

      - **WriteCapacityUnits** *(float) --*

        The total number of write capacity units consumed by the operation.

      - **Table** *(dict) --*

        The amount of throughput consumed on the table affected by the operation.

        - **ReadCapacityUnits** *(float) --*

          The total number of read capacity units consumed on a table or an index.

        - **WriteCapacityUnits** *(float) --*

          The total number of write capacity units consumed on a table or an index.

        - **CapacityUnits** *(float) --*

          The total number of capacity units consumed on a table or an index.

      - **LocalSecondaryIndexes** *(dict) --*

        The amount of throughput consumed on each local index affected by the operation.

        - *(string) --*

          - *(dict) --*

            Represents the amount of provisioned throughput capacity consumed on a table or an
            index.

            - **ReadCapacityUnits** *(float) --*

              The total number of read capacity units consumed on a table or an index.

            - **WriteCapacityUnits** *(float) --*

              The total number of write capacity units consumed on a table or an index.

            - **CapacityUnits** *(float) --*

              The total number of capacity units consumed on a table or an index.

      - **GlobalSecondaryIndexes** *(dict) --*

        The amount of throughput consumed on each global index affected by the operation.

        - *(string) --*

          - *(dict) --*

            Represents the amount of provisioned throughput capacity consumed on a table or an
            index.

            - **ReadCapacityUnits** *(float) --*

              The total number of read capacity units consumed on a table or an index.

            - **WriteCapacityUnits** *(float) --*

              The total number of write capacity units consumed on a table or an index.

            - **CapacityUnits** *(float) --*

              The total number of capacity units consumed on a table or an index.
    """


_ClientScanScanFilterAttributeValueListTypeDef = TypedDict(
    "_ClientScanScanFilterAttributeValueListTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class ClientScanScanFilterAttributeValueListTypeDef(_ClientScanScanFilterAttributeValueListTypeDef):
    """
    Type definition for `ClientScanScanFilter` `AttributeValueList`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_RequiredClientScanScanFilterTypeDef = TypedDict(
    "_RequiredClientScanScanFilterTypeDef", {"ComparisonOperator": str}
)
_OptionalClientScanScanFilterTypeDef = TypedDict(
    "_OptionalClientScanScanFilterTypeDef",
    {"AttributeValueList": List[ClientScanScanFilterAttributeValueListTypeDef]},
    total=False,
)


class ClientScanScanFilterTypeDef(
    _RequiredClientScanScanFilterTypeDef, _OptionalClientScanScanFilterTypeDef
):
    """
    Type definition for `ClientScan` `ScanFilter`

    Represents the selection criteria for a ``Query`` or ``Scan`` operation:

    * For a ``Query`` operation, ``Condition`` is used for specifying the ``KeyConditions`` to use
    when querying a table or an index. For ``KeyConditions`` , only the following comparison
    operators are supported:  ``EQ | LE | LT | GE | GT | BEGINS_WITH | BETWEEN``    ``Condition`` is
    also used in a ``QueryFilter`` , which evaluates the query results and returns only the desired
    values.

    * For a ``Scan`` operation, ``Condition`` is used in a ``ScanFilter`` , which evaluates the scan
    results and returns only the desired values.

    - **AttributeValueList** *(list) --*

      One or more values to evaluate against the supplied attribute. The number of values in the
      list depends on the ``ComparisonOperator`` being used.

      For type Number, value comparisons are numeric.

      String value comparisons for greater than, equals, or less than are based on ASCII character
      code values. For example, ``a`` is greater than ``A`` , and ``a`` is greater than ``B`` . For
      a list of code values, see `http\\://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters
      <http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters>`__ .

      For Binary, DynamoDB treats each byte of the binary data as unsigned when it compares binary
      values.

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

        - **S** *(string) --*

          An attribute of type String. For example:

           ``"S": "Hello"``

        - **N** *(string) --*

          An attribute of type Number. For example:

           ``"N": "123.45"``

          Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
          across languages and libraries. However, DynamoDB treats them as number type attributes
          for mathematical operations.

        - **B** *(bytes) --*

          An attribute of type Binary. For example:

           ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

        - **SS** *(list) --*

          An attribute of type String Set. For example:

           ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

          - *(string) --*

        - **NS** *(list) --*

          An attribute of type Number Set. For example:

           ``"NS": ["42.2", "-19", "7.5", "3.14"]``

          Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
          across languages and libraries. However, DynamoDB treats them as number type attributes
          for mathematical operations.

          - *(string) --*

        - **BS** *(list) --*

          An attribute of type Binary Set. For example:

           ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

          - *(bytes) --*

        - **M** *(dict) --*

          An attribute of type Map. For example:

           ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

          - *(string) --*

            - *(dict) --*

              Represents the data for an attribute.

              Each attribute value is described as a name-value pair. The name is the data type, and
              the value is the data itself.

              For more information, see `Data Types
              <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
              in the *Amazon DynamoDB Developer Guide* .

        - **L** *(list) --*

          An attribute of type List. For example:

           ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

          - *(dict) --*

            Represents the data for an attribute.

            Each attribute value is described as a name-value pair. The name is the data type, and
            the value is the data itself.

            For more information, see `Data Types
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
            in the *Amazon DynamoDB Developer Guide* .

        - **NULL** *(boolean) --*

          An attribute of type Null. For example:

           ``"NULL": true``

        - **BOOL** *(boolean) --*

          An attribute of type Boolean. For example:

           ``"BOOL": true``

    - **ComparisonOperator** *(string) --* **[REQUIRED]**

      A comparator for evaluating attributes. For example, equals, greater than, less than, etc.

      The following comparison operators are available:

       ``EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH
       | IN
       | BETWEEN``

      The following are descriptions of each comparison operator.

      * ``EQ`` : Equal. ``EQ`` is supported for all data types, including lists and maps.
      ``AttributeValueList`` can contain only one ``AttributeValue`` element of type String, Number,
      Binary, String Set, Number Set, or Binary Set. If an item contains an ``AttributeValue``
      element of a different type than the one provided in the request, the value does not match.
      For example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` . Also, ``{"N":"6"}`` does not equal
      ``{"NS":["6", "2", "1"]}`` .

      * ``NE`` : Not equal. ``NE`` is supported for all data types, including lists and maps.
      ``AttributeValueList`` can contain only one ``AttributeValue`` of type String, Number, Binary,
      String Set, Number Set, or Binary Set. If an item contains an ``AttributeValue`` of a
      different type than the one provided in the request, the value does not match. For example,
      ``{"S":"6"}`` does not equal ``{"N":"6"}`` . Also, ``{"N":"6"}`` does not equal ``{"NS":["6",
      "2", "1"]}`` .

      * ``LE`` : Less than or equal.   ``AttributeValueList`` can contain only one
      ``AttributeValue`` element of type String, Number, or Binary (not a set type). If an item
      contains an ``AttributeValue`` element of a different type than the one provided in the
      request, the value does not match. For example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` .
      Also, ``{"N":"6"}`` does not compare to ``{"NS":["6", "2", "1"]}`` .

      * ``LT`` : Less than.   ``AttributeValueList`` can contain only one ``AttributeValue`` of type
      String, Number, or Binary (not a set type). If an item contains an ``AttributeValue`` element
      of a different type than the one provided in the request, the value does not match. For
      example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` . Also, ``{"N":"6"}`` does not compare to
      ``{"NS":["6", "2", "1"]}`` .

      * ``GE`` : Greater than or equal.   ``AttributeValueList`` can contain only one
      ``AttributeValue`` element of type String, Number, or Binary (not a set type). If an item
      contains an ``AttributeValue`` element of a different type than the one provided in the
      request, the value does not match. For example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` .
      Also, ``{"N":"6"}`` does not compare to ``{"NS":["6", "2", "1"]}`` .

      * ``GT`` : Greater than.   ``AttributeValueList`` can contain only one ``AttributeValue``
      element of type String, Number, or Binary (not a set type). If an item contains an
      ``AttributeValue`` element of a different type than the one provided in the request, the value
      does not match. For example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` . Also, ``{"N":"6"}``
      does not compare to ``{"NS":["6", "2", "1"]}`` .

      * ``NOT_NULL`` : The attribute exists. ``NOT_NULL`` is supported for all data types, including
      lists and maps.

      .. note::

         This operator tests for the existence of an attribute, not its data type. If the data type
         of attribute "``a`` " is null, and you evaluate it using ``NOT_NULL`` , the result is a
         Boolean ``true`` . This result is because the attribute "``a`` " exists; its data type is
         not relevant to the ``NOT_NULL`` comparison operator.

      * ``NULL`` : The attribute does not exist. ``NULL`` is supported for all data types, including
      lists and maps.

      .. note::

         This operator tests for the nonexistence of an attribute, not its data type. If the data
         type of attribute "``a`` " is null, and you evaluate it using ``NULL`` , the result is a
         Boolean ``false`` . This is because the attribute "``a`` " exists; its data type is not
         relevant to the ``NULL`` comparison operator.

      * ``CONTAINS`` : Checks for a subsequence, or value in a set.  ``AttributeValueList`` can
      contain only one ``AttributeValue`` element of type String, Number, or Binary (not a set
      type). If the target attribute of the comparison is of type String, then the operator checks
      for a substring match. If the target attribute of the comparison is of type Binary, then the
      operator looks for a subsequence of the target that matches the input. If the target attribute
      of the comparison is a set ("``SS`` ", "``NS`` ", or "``BS`` "), then the operator evaluates
      to true if it finds an exact match with any member of the set. CONTAINS is supported for
      lists: When evaluating "``a CONTAINS b`` ", "``a`` " can be a list; however, "``b`` " cannot
      be a set, a map, or a list.

      * ``NOT_CONTAINS`` : Checks for absence of a subsequence, or absence of a value in a set.
      ``AttributeValueList`` can contain only one ``AttributeValue`` element of type String, Number,
      or Binary (not a set type). If the target attribute of the comparison is a String, then the
      operator checks for the absence of a substring match. If the target attribute of the
      comparison is Binary, then the operator checks for the absence of a subsequence of the target
      that matches the input. If the target attribute of the comparison is a set ("``SS`` ", "``NS``
      ", or "``BS`` "), then the operator evaluates to true if it *does not* find an exact match
      with any member of the set. NOT_CONTAINS is supported for lists: When evaluating "``a NOT
      CONTAINS b`` ", "``a`` " can be a list; however, "``b`` " cannot be a set, a map, or a list.

      * ``BEGINS_WITH`` : Checks for a prefix.   ``AttributeValueList`` can contain only one
      ``AttributeValue`` of type String or Binary (not a Number or a set type). The target attribute
      of the comparison must be of type String or Binary (not a Number or a set type).

      * ``IN`` : Checks for matching elements in a list.  ``AttributeValueList`` can contain one or
      more ``AttributeValue`` elements of type String, Number, or Binary. These attributes are
      compared against an existing attribute of an item. If any elements of the input are equal to
      the item attribute, the expression evaluates to true.

      * ``BETWEEN`` : Greater than or equal to the first value, and less than or equal to the second
      value.   ``AttributeValueList`` must contain two ``AttributeValue`` elements of the same type,
      either String, Number, or Binary (not a set type). A target attribute matches if the target
      value is greater than, or equal to, the first element and less than, or equal to, the second
      element. If an item contains an ``AttributeValue`` element of a different type than the one
      provided in the request, the value does not match. For example, ``{"S":"6"}`` does not compare
      to ``{"N":"6"}`` . Also, ``{"N":"6"}`` does not compare to ``{"NS":["6", "2", "1"]}``

      For usage examples of ``AttributeValueList`` and ``ComparisonOperator`` , see `Legacy
      Conditional Parameters
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html>`__
      in the *Amazon DynamoDB Developer Guide* .
    """


_ClientTagResourceTagsTypeDef = TypedDict(
    "_ClientTagResourceTagsTypeDef", {"Key": str, "Value": str}
)


class ClientTagResourceTagsTypeDef(_ClientTagResourceTagsTypeDef):
    """
    Type definition for `ClientTagResource` `Tags`

    Describes a tag. A tag is a key-value pair. You can add up to 50 tags to a single DynamoDB
    table.

    AWS-assigned tag names and values are automatically assigned the ``aws:`` prefix, which the user
    cannot assign. AWS-assigned tag names do not count towards the tag limit of 50. User-assigned
    tag names have the prefix ``user:`` in the Cost Allocation Report. You cannot backdate the
    application of a tag.

    For an overview on tagging DynamoDB resources, see `Tagging for DynamoDB
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tagging.html>`__ in the
    *Amazon DynamoDB Developer Guide* .

    - **Key** *(string) --* **[REQUIRED]**

      The key of the tag. Tag keys are case sensitive. Each DynamoDB table can only have up to one
      tag with the same key. If you try to add an existing tag (same key), the existing tag value
      will be updated to the new value.

    - **Value** *(string) --* **[REQUIRED]**

      The value of the tag. Tag values are case-sensitive and can be null.
    """


_ClientTransactGetItemsResponseConsumedCapacityGlobalSecondaryIndexesTypeDef = TypedDict(
    "_ClientTransactGetItemsResponseConsumedCapacityGlobalSecondaryIndexesTypeDef",
    {"ReadCapacityUnits": float, "WriteCapacityUnits": float, "CapacityUnits": float},
    total=False,
)


class ClientTransactGetItemsResponseConsumedCapacityGlobalSecondaryIndexesTypeDef(
    _ClientTransactGetItemsResponseConsumedCapacityGlobalSecondaryIndexesTypeDef
):
    """
    Type definition for `ClientTransactGetItemsResponseConsumedCapacity` `GlobalSecondaryIndexes`

    Represents the amount of provisioned throughput capacity consumed on a table or an index.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed on a table or an index.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed on a table or an index.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed on a table or an index.
    """


_ClientTransactGetItemsResponseConsumedCapacityLocalSecondaryIndexesTypeDef = TypedDict(
    "_ClientTransactGetItemsResponseConsumedCapacityLocalSecondaryIndexesTypeDef",
    {"ReadCapacityUnits": float, "WriteCapacityUnits": float, "CapacityUnits": float},
    total=False,
)


class ClientTransactGetItemsResponseConsumedCapacityLocalSecondaryIndexesTypeDef(
    _ClientTransactGetItemsResponseConsumedCapacityLocalSecondaryIndexesTypeDef
):
    """
    Type definition for `ClientTransactGetItemsResponseConsumedCapacity` `LocalSecondaryIndexes`

    Represents the amount of provisioned throughput capacity consumed on a table or an index.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed on a table or an index.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed on a table or an index.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed on a table or an index.
    """


_ClientTransactGetItemsResponseConsumedCapacityTableTypeDef = TypedDict(
    "_ClientTransactGetItemsResponseConsumedCapacityTableTypeDef",
    {"ReadCapacityUnits": float, "WriteCapacityUnits": float, "CapacityUnits": float},
    total=False,
)


class ClientTransactGetItemsResponseConsumedCapacityTableTypeDef(
    _ClientTransactGetItemsResponseConsumedCapacityTableTypeDef
):
    """
    Type definition for `ClientTransactGetItemsResponseConsumedCapacity` `Table`

    The amount of throughput consumed on the table affected by the operation.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed on a table or an index.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed on a table or an index.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed on a table or an index.
    """


_ClientTransactGetItemsResponseConsumedCapacityTypeDef = TypedDict(
    "_ClientTransactGetItemsResponseConsumedCapacityTypeDef",
    {
        "TableName": str,
        "CapacityUnits": float,
        "ReadCapacityUnits": float,
        "WriteCapacityUnits": float,
        "Table": ClientTransactGetItemsResponseConsumedCapacityTableTypeDef,
        "LocalSecondaryIndexes": Dict[
            str, ClientTransactGetItemsResponseConsumedCapacityLocalSecondaryIndexesTypeDef
        ],
        "GlobalSecondaryIndexes": Dict[
            str, ClientTransactGetItemsResponseConsumedCapacityGlobalSecondaryIndexesTypeDef
        ],
    },
    total=False,
)


class ClientTransactGetItemsResponseConsumedCapacityTypeDef(
    _ClientTransactGetItemsResponseConsumedCapacityTypeDef
):
    """
    Type definition for `ClientTransactGetItemsResponse` `ConsumedCapacity`

    The capacity units consumed by an operation. The data returned includes the total provisioned
    throughput consumed, along with statistics for the table and any indexes involved in the
    operation. ``ConsumedCapacity`` is only returned if the request asked for it. For more
    information, see `Provisioned Throughput
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **TableName** *(string) --*

      The name of the table that was affected by the operation.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed by the operation.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed by the operation.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed by the operation.

    - **Table** *(dict) --*

      The amount of throughput consumed on the table affected by the operation.

      - **ReadCapacityUnits** *(float) --*

        The total number of read capacity units consumed on a table or an index.

      - **WriteCapacityUnits** *(float) --*

        The total number of write capacity units consumed on a table or an index.

      - **CapacityUnits** *(float) --*

        The total number of capacity units consumed on a table or an index.

    - **LocalSecondaryIndexes** *(dict) --*

      The amount of throughput consumed on each local index affected by the operation.

      - *(string) --*

        - *(dict) --*

          Represents the amount of provisioned throughput capacity consumed on a table or an index.

          - **ReadCapacityUnits** *(float) --*

            The total number of read capacity units consumed on a table or an index.

          - **WriteCapacityUnits** *(float) --*

            The total number of write capacity units consumed on a table or an index.

          - **CapacityUnits** *(float) --*

            The total number of capacity units consumed on a table or an index.

    - **GlobalSecondaryIndexes** *(dict) --*

      The amount of throughput consumed on each global index affected by the operation.

      - *(string) --*

        - *(dict) --*

          Represents the amount of provisioned throughput capacity consumed on a table or an index.

          - **ReadCapacityUnits** *(float) --*

            The total number of read capacity units consumed on a table or an index.

          - **WriteCapacityUnits** *(float) --*

            The total number of write capacity units consumed on a table or an index.

          - **CapacityUnits** *(float) --*

            The total number of capacity units consumed on a table or an index.
    """


_ClientTransactGetItemsResponseResponsesItemTypeDef = TypedDict(
    "_ClientTransactGetItemsResponseResponsesItemTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class ClientTransactGetItemsResponseResponsesItemTypeDef(
    _ClientTransactGetItemsResponseResponsesItemTypeDef
):
    """
    Type definition for `ClientTransactGetItemsResponseResponses` `Item`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_ClientTransactGetItemsResponseResponsesTypeDef = TypedDict(
    "_ClientTransactGetItemsResponseResponsesTypeDef",
    {"Item": Dict[str, ClientTransactGetItemsResponseResponsesItemTypeDef]},
    total=False,
)


class ClientTransactGetItemsResponseResponsesTypeDef(
    _ClientTransactGetItemsResponseResponsesTypeDef
):
    """
    Type definition for `ClientTransactGetItemsResponse` `Responses`

    Details for the requested item.

    - **Item** *(dict) --*

      Map of attribute data consisting of the data type and attribute value.

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

          - **S** *(string) --*

            An attribute of type String. For example:

             ``"S": "Hello"``

          - **N** *(string) --*

            An attribute of type Number. For example:

             ``"N": "123.45"``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

          - **B** *(bytes) --*

            An attribute of type Binary. For example:

             ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

          - **SS** *(list) --*

            An attribute of type String Set. For example:

             ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

            - *(string) --*

          - **NS** *(list) --*

            An attribute of type Number Set. For example:

             ``"NS": ["42.2", "-19", "7.5", "3.14"]``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

            - *(string) --*

          - **BS** *(list) --*

            An attribute of type Binary Set. For example:

             ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

            - *(bytes) --*

          - **M** *(dict) --*

            An attribute of type Map. For example:

             ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

            - *(string) --*

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

          - **L** *(list) --*

            An attribute of type List. For example:

             ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

            - *(dict) --*

              Represents the data for an attribute.

              Each attribute value is described as a name-value pair. The name is the data type, and
              the value is the data itself.

              For more information, see `Data Types
              <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
              in the *Amazon DynamoDB Developer Guide* .

          - **NULL** *(boolean) --*

            An attribute of type Null. For example:

             ``"NULL": true``

          - **BOOL** *(boolean) --*

            An attribute of type Boolean. For example:

             ``"BOOL": true``
    """


_ClientTransactGetItemsResponseTypeDef = TypedDict(
    "_ClientTransactGetItemsResponseTypeDef",
    {
        "ConsumedCapacity": List[ClientTransactGetItemsResponseConsumedCapacityTypeDef],
        "Responses": List[ClientTransactGetItemsResponseResponsesTypeDef],
    },
    total=False,
)


class ClientTransactGetItemsResponseTypeDef(_ClientTransactGetItemsResponseTypeDef):
    """
    Type definition for `ClientTransactGetItems` `Response`

    - **ConsumedCapacity** *(list) --*

      If the *ReturnConsumedCapacity* value was ``TOTAL`` , this is an array of ``ConsumedCapacity``
      objects, one for each table addressed by ``TransactGetItem`` objects in the *TransactItems*
      parameter. These ``ConsumedCapacity`` objects report the read-capacity units consumed by the
      ``TransactGetItems`` call in that table.

      - *(dict) --*

        The capacity units consumed by an operation. The data returned includes the total
        provisioned throughput consumed, along with statistics for the table and any indexes
        involved in the operation. ``ConsumedCapacity`` is only returned if the request asked for
        it. For more information, see `Provisioned Throughput
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html>`__
        in the *Amazon DynamoDB Developer Guide* .

        - **TableName** *(string) --*

          The name of the table that was affected by the operation.

        - **CapacityUnits** *(float) --*

          The total number of capacity units consumed by the operation.

        - **ReadCapacityUnits** *(float) --*

          The total number of read capacity units consumed by the operation.

        - **WriteCapacityUnits** *(float) --*

          The total number of write capacity units consumed by the operation.

        - **Table** *(dict) --*

          The amount of throughput consumed on the table affected by the operation.

          - **ReadCapacityUnits** *(float) --*

            The total number of read capacity units consumed on a table or an index.

          - **WriteCapacityUnits** *(float) --*

            The total number of write capacity units consumed on a table or an index.

          - **CapacityUnits** *(float) --*

            The total number of capacity units consumed on a table or an index.

        - **LocalSecondaryIndexes** *(dict) --*

          The amount of throughput consumed on each local index affected by the operation.

          - *(string) --*

            - *(dict) --*

              Represents the amount of provisioned throughput capacity consumed on a table or an
              index.

              - **ReadCapacityUnits** *(float) --*

                The total number of read capacity units consumed on a table or an index.

              - **WriteCapacityUnits** *(float) --*

                The total number of write capacity units consumed on a table or an index.

              - **CapacityUnits** *(float) --*

                The total number of capacity units consumed on a table or an index.

        - **GlobalSecondaryIndexes** *(dict) --*

          The amount of throughput consumed on each global index affected by the operation.

          - *(string) --*

            - *(dict) --*

              Represents the amount of provisioned throughput capacity consumed on a table or an
              index.

              - **ReadCapacityUnits** *(float) --*

                The total number of read capacity units consumed on a table or an index.

              - **WriteCapacityUnits** *(float) --*

                The total number of write capacity units consumed on a table or an index.

              - **CapacityUnits** *(float) --*

                The total number of capacity units consumed on a table or an index.

    - **Responses** *(list) --*

      An ordered array of up to 25 ``ItemResponse`` objects, each of which corresponds to the
      ``TransactGetItem`` object in the same position in the *TransactItems* array. Each
      ``ItemResponse`` object contains a Map of the name-value pairs that are the projected
      attributes of the requested item.

      If a requested item could not be retrieved, the corresponding ``ItemResponse`` object is Null,
      or if the requested item has no projected attributes, the corresponding ``ItemResponse``
      object is an empty Map.

      - *(dict) --*

        Details for the requested item.

        - **Item** *(dict) --*

          Map of attribute data consisting of the data type and attribute value.

          - *(string) --*

            - *(dict) --*

              Represents the data for an attribute.

              Each attribute value is described as a name-value pair. The name is the data type, and
              the value is the data itself.

              For more information, see `Data Types
              <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
              in the *Amazon DynamoDB Developer Guide* .

              - **S** *(string) --*

                An attribute of type String. For example:

                 ``"S": "Hello"``

              - **N** *(string) --*

                An attribute of type Number. For example:

                 ``"N": "123.45"``

                Numbers are sent across the network to DynamoDB as strings, to maximize
                compatibility across languages and libraries. However, DynamoDB treats them as
                number type attributes for mathematical operations.

              - **B** *(bytes) --*

                An attribute of type Binary. For example:

                 ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

              - **SS** *(list) --*

                An attribute of type String Set. For example:

                 ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

                - *(string) --*

              - **NS** *(list) --*

                An attribute of type Number Set. For example:

                 ``"NS": ["42.2", "-19", "7.5", "3.14"]``

                Numbers are sent across the network to DynamoDB as strings, to maximize
                compatibility across languages and libraries. However, DynamoDB treats them as
                number type attributes for mathematical operations.

                - *(string) --*

              - **BS** *(list) --*

                An attribute of type Binary Set. For example:

                 ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

                - *(bytes) --*

              - **M** *(dict) --*

                An attribute of type Map. For example:

                 ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

                - *(string) --*

                  - *(dict) --*

                    Represents the data for an attribute.

                    Each attribute value is described as a name-value pair. The name is the data
                    type, and the value is the data itself.

                    For more information, see `Data Types
                    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                    in the *Amazon DynamoDB Developer Guide* .

              - **L** *(list) --*

                An attribute of type List. For example:

                 ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

                - *(dict) --*

                  Represents the data for an attribute.

                  Each attribute value is described as a name-value pair. The name is the data type,
                  and the value is the data itself.

                  For more information, see `Data Types
                  <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                  in the *Amazon DynamoDB Developer Guide* .

              - **NULL** *(boolean) --*

                An attribute of type Null. For example:

                 ``"NULL": true``

              - **BOOL** *(boolean) --*

                An attribute of type Boolean. For example:

                 ``"BOOL": true``
    """


_ClientTransactGetItemsTransactItemsGetKeyTypeDef = TypedDict(
    "_ClientTransactGetItemsTransactItemsGetKeyTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class ClientTransactGetItemsTransactItemsGetKeyTypeDef(
    _ClientTransactGetItemsTransactItemsGetKeyTypeDef
):
    """
    Type definition for `ClientTransactGetItemsTransactItemsGet` `Key`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_RequiredClientTransactGetItemsTransactItemsGetTypeDef = TypedDict(
    "_RequiredClientTransactGetItemsTransactItemsGetTypeDef",
    {"Key": Dict[str, ClientTransactGetItemsTransactItemsGetKeyTypeDef], "TableName": str},
)
_OptionalClientTransactGetItemsTransactItemsGetTypeDef = TypedDict(
    "_OptionalClientTransactGetItemsTransactItemsGetTypeDef",
    {"ProjectionExpression": str, "ExpressionAttributeNames": Dict[str, str]},
    total=False,
)


class ClientTransactGetItemsTransactItemsGetTypeDef(
    _RequiredClientTransactGetItemsTransactItemsGetTypeDef,
    _OptionalClientTransactGetItemsTransactItemsGetTypeDef,
):
    """
    Type definition for `ClientTransactGetItemsTransactItems` `Get`

    Contains the primary key that identifies the item to get, together with the name of the table
    that contains the item, and optionally the specific attributes of the item to retrieve.

    - **Key** *(dict) --* **[REQUIRED]**

      A map of attribute names to ``AttributeValue`` objects that specifies the primary key of the
      item to retrieve.

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

          - **S** *(string) --*

            An attribute of type String. For example:

             ``"S": "Hello"``

          - **N** *(string) --*

            An attribute of type Number. For example:

             ``"N": "123.45"``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

          - **B** *(bytes) --*

            An attribute of type Binary. For example:

             ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

          - **SS** *(list) --*

            An attribute of type String Set. For example:

             ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

            - *(string) --*

          - **NS** *(list) --*

            An attribute of type Number Set. For example:

             ``"NS": ["42.2", "-19", "7.5", "3.14"]``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

            - *(string) --*

          - **BS** *(list) --*

            An attribute of type Binary Set. For example:

             ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

            - *(bytes) --*

          - **M** *(dict) --*

            An attribute of type Map. For example:

             ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

            - *(string) --*

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

          - **L** *(list) --*

            An attribute of type List. For example:

             ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

            - *(dict) --*

              Represents the data for an attribute.

              Each attribute value is described as a name-value pair. The name is the data type, and
              the value is the data itself.

              For more information, see `Data Types
              <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
              in the *Amazon DynamoDB Developer Guide* .

          - **NULL** *(boolean) --*

            An attribute of type Null. For example:

             ``"NULL": true``

          - **BOOL** *(boolean) --*

            An attribute of type Boolean. For example:

             ``"BOOL": true``

    - **TableName** *(string) --* **[REQUIRED]**

      The name of the table from which to retrieve the specified item.

    - **ProjectionExpression** *(string) --*

      A string that identifies one or more attributes of the specified item to retrieve from the
      table. The attributes in the expression must be separated by commas. If no attribute names are
      specified, then all attributes of the specified item are returned. If any of the requested
      attributes are not found, they do not appear in the result.

    - **ExpressionAttributeNames** *(dict) --*

      One or more substitution tokens for attribute names in the ProjectionExpression parameter.

      - *(string) --*

        - *(string) --*
    """


_ClientTransactGetItemsTransactItemsTypeDef = TypedDict(
    "_ClientTransactGetItemsTransactItemsTypeDef",
    {"Get": ClientTransactGetItemsTransactItemsGetTypeDef},
)


class ClientTransactGetItemsTransactItemsTypeDef(_ClientTransactGetItemsTransactItemsTypeDef):
    """
    Type definition for `ClientTransactGetItems` `TransactItems`

    Specifies an item to be retrieved as part of the transaction.

    - **Get** *(dict) --* **[REQUIRED]**

      Contains the primary key that identifies the item to get, together with the name of the table
      that contains the item, and optionally the specific attributes of the item to retrieve.

      - **Key** *(dict) --* **[REQUIRED]**

        A map of attribute names to ``AttributeValue`` objects that specifies the primary key of the
        item to retrieve.

        - *(string) --*

          - *(dict) --*

            Represents the data for an attribute.

            Each attribute value is described as a name-value pair. The name is the data type, and
            the value is the data itself.

            For more information, see `Data Types
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
            in the *Amazon DynamoDB Developer Guide* .

            - **S** *(string) --*

              An attribute of type String. For example:

               ``"S": "Hello"``

            - **N** *(string) --*

              An attribute of type Number. For example:

               ``"N": "123.45"``

              Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
              across languages and libraries. However, DynamoDB treats them as number type
              attributes for mathematical operations.

            - **B** *(bytes) --*

              An attribute of type Binary. For example:

               ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

            - **SS** *(list) --*

              An attribute of type String Set. For example:

               ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

              - *(string) --*

            - **NS** *(list) --*

              An attribute of type Number Set. For example:

               ``"NS": ["42.2", "-19", "7.5", "3.14"]``

              Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
              across languages and libraries. However, DynamoDB treats them as number type
              attributes for mathematical operations.

              - *(string) --*

            - **BS** *(list) --*

              An attribute of type Binary Set. For example:

               ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

              - *(bytes) --*

            - **M** *(dict) --*

              An attribute of type Map. For example:

               ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

              - *(string) --*

                - *(dict) --*

                  Represents the data for an attribute.

                  Each attribute value is described as a name-value pair. The name is the data type,
                  and the value is the data itself.

                  For more information, see `Data Types
                  <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                  in the *Amazon DynamoDB Developer Guide* .

            - **L** *(list) --*

              An attribute of type List. For example:

               ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

            - **NULL** *(boolean) --*

              An attribute of type Null. For example:

               ``"NULL": true``

            - **BOOL** *(boolean) --*

              An attribute of type Boolean. For example:

               ``"BOOL": true``

      - **TableName** *(string) --* **[REQUIRED]**

        The name of the table from which to retrieve the specified item.

      - **ProjectionExpression** *(string) --*

        A string that identifies one or more attributes of the specified item to retrieve from the
        table. The attributes in the expression must be separated by commas. If no attribute names
        are specified, then all attributes of the specified item are returned. If any of the
        requested attributes are not found, they do not appear in the result.

      - **ExpressionAttributeNames** *(dict) --*

        One or more substitution tokens for attribute names in the ProjectionExpression parameter.

        - *(string) --*

          - *(string) --*
    """


_ClientTransactWriteItemsResponseConsumedCapacityGlobalSecondaryIndexesTypeDef = TypedDict(
    "_ClientTransactWriteItemsResponseConsumedCapacityGlobalSecondaryIndexesTypeDef",
    {"ReadCapacityUnits": float, "WriteCapacityUnits": float, "CapacityUnits": float},
    total=False,
)


class ClientTransactWriteItemsResponseConsumedCapacityGlobalSecondaryIndexesTypeDef(
    _ClientTransactWriteItemsResponseConsumedCapacityGlobalSecondaryIndexesTypeDef
):
    """
    Type definition for `ClientTransactWriteItemsResponseConsumedCapacity` `GlobalSecondaryIndexes`

    Represents the amount of provisioned throughput capacity consumed on a table or an index.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed on a table or an index.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed on a table or an index.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed on a table or an index.
    """


_ClientTransactWriteItemsResponseConsumedCapacityLocalSecondaryIndexesTypeDef = TypedDict(
    "_ClientTransactWriteItemsResponseConsumedCapacityLocalSecondaryIndexesTypeDef",
    {"ReadCapacityUnits": float, "WriteCapacityUnits": float, "CapacityUnits": float},
    total=False,
)


class ClientTransactWriteItemsResponseConsumedCapacityLocalSecondaryIndexesTypeDef(
    _ClientTransactWriteItemsResponseConsumedCapacityLocalSecondaryIndexesTypeDef
):
    """
    Type definition for `ClientTransactWriteItemsResponseConsumedCapacity` `LocalSecondaryIndexes`

    Represents the amount of provisioned throughput capacity consumed on a table or an index.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed on a table or an index.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed on a table or an index.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed on a table or an index.
    """


_ClientTransactWriteItemsResponseConsumedCapacityTableTypeDef = TypedDict(
    "_ClientTransactWriteItemsResponseConsumedCapacityTableTypeDef",
    {"ReadCapacityUnits": float, "WriteCapacityUnits": float, "CapacityUnits": float},
    total=False,
)


class ClientTransactWriteItemsResponseConsumedCapacityTableTypeDef(
    _ClientTransactWriteItemsResponseConsumedCapacityTableTypeDef
):
    """
    Type definition for `ClientTransactWriteItemsResponseConsumedCapacity` `Table`

    The amount of throughput consumed on the table affected by the operation.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed on a table or an index.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed on a table or an index.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed on a table or an index.
    """


_ClientTransactWriteItemsResponseConsumedCapacityTypeDef = TypedDict(
    "_ClientTransactWriteItemsResponseConsumedCapacityTypeDef",
    {
        "TableName": str,
        "CapacityUnits": float,
        "ReadCapacityUnits": float,
        "WriteCapacityUnits": float,
        "Table": ClientTransactWriteItemsResponseConsumedCapacityTableTypeDef,
        "LocalSecondaryIndexes": Dict[
            str, ClientTransactWriteItemsResponseConsumedCapacityLocalSecondaryIndexesTypeDef
        ],
        "GlobalSecondaryIndexes": Dict[
            str, ClientTransactWriteItemsResponseConsumedCapacityGlobalSecondaryIndexesTypeDef
        ],
    },
    total=False,
)


class ClientTransactWriteItemsResponseConsumedCapacityTypeDef(
    _ClientTransactWriteItemsResponseConsumedCapacityTypeDef
):
    """
    Type definition for `ClientTransactWriteItemsResponse` `ConsumedCapacity`

    The capacity units consumed by an operation. The data returned includes the total provisioned
    throughput consumed, along with statistics for the table and any indexes involved in the
    operation. ``ConsumedCapacity`` is only returned if the request asked for it. For more
    information, see `Provisioned Throughput
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **TableName** *(string) --*

      The name of the table that was affected by the operation.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed by the operation.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed by the operation.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed by the operation.

    - **Table** *(dict) --*

      The amount of throughput consumed on the table affected by the operation.

      - **ReadCapacityUnits** *(float) --*

        The total number of read capacity units consumed on a table or an index.

      - **WriteCapacityUnits** *(float) --*

        The total number of write capacity units consumed on a table or an index.

      - **CapacityUnits** *(float) --*

        The total number of capacity units consumed on a table or an index.

    - **LocalSecondaryIndexes** *(dict) --*

      The amount of throughput consumed on each local index affected by the operation.

      - *(string) --*

        - *(dict) --*

          Represents the amount of provisioned throughput capacity consumed on a table or an index.

          - **ReadCapacityUnits** *(float) --*

            The total number of read capacity units consumed on a table or an index.

          - **WriteCapacityUnits** *(float) --*

            The total number of write capacity units consumed on a table or an index.

          - **CapacityUnits** *(float) --*

            The total number of capacity units consumed on a table or an index.

    - **GlobalSecondaryIndexes** *(dict) --*

      The amount of throughput consumed on each global index affected by the operation.

      - *(string) --*

        - *(dict) --*

          Represents the amount of provisioned throughput capacity consumed on a table or an index.

          - **ReadCapacityUnits** *(float) --*

            The total number of read capacity units consumed on a table or an index.

          - **WriteCapacityUnits** *(float) --*

            The total number of write capacity units consumed on a table or an index.

          - **CapacityUnits** *(float) --*

            The total number of capacity units consumed on a table or an index.
    """


_ClientTransactWriteItemsResponseItemCollectionMetricsItemCollectionKeyTypeDef = TypedDict(
    "_ClientTransactWriteItemsResponseItemCollectionMetricsItemCollectionKeyTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class ClientTransactWriteItemsResponseItemCollectionMetricsItemCollectionKeyTypeDef(
    _ClientTransactWriteItemsResponseItemCollectionMetricsItemCollectionKeyTypeDef
):
    """
    Type definition for `ClientTransactWriteItemsResponseItemCollectionMetrics` `ItemCollectionKey`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_ClientTransactWriteItemsResponseItemCollectionMetricsTypeDef = TypedDict(
    "_ClientTransactWriteItemsResponseItemCollectionMetricsTypeDef",
    {
        "ItemCollectionKey": Dict[
            str, ClientTransactWriteItemsResponseItemCollectionMetricsItemCollectionKeyTypeDef
        ],
        "SizeEstimateRangeGB": List[float],
    },
    total=False,
)


class ClientTransactWriteItemsResponseItemCollectionMetricsTypeDef(
    _ClientTransactWriteItemsResponseItemCollectionMetricsTypeDef
):
    """
    Type definition for `ClientTransactWriteItemsResponse` `ItemCollectionMetrics`

    Information about item collections, if any, that were affected by the operation.
    ``ItemCollectionMetrics`` is only returned if the request asked for it. If the table does not
    have any local secondary indexes, this information is not returned in the response.

    - **ItemCollectionKey** *(dict) --*

      The partition key value of the item collection. This value is the same as the partition key
      value of the item.

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

          - **S** *(string) --*

            An attribute of type String. For example:

             ``"S": "Hello"``

          - **N** *(string) --*

            An attribute of type Number. For example:

             ``"N": "123.45"``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

          - **B** *(bytes) --*

            An attribute of type Binary. For example:

             ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

          - **SS** *(list) --*

            An attribute of type String Set. For example:

             ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

            - *(string) --*

          - **NS** *(list) --*

            An attribute of type Number Set. For example:

             ``"NS": ["42.2", "-19", "7.5", "3.14"]``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

            - *(string) --*

          - **BS** *(list) --*

            An attribute of type Binary Set. For example:

             ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

            - *(bytes) --*

          - **M** *(dict) --*

            An attribute of type Map. For example:

             ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

            - *(string) --*

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

          - **L** *(list) --*

            An attribute of type List. For example:

             ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

            - *(dict) --*

              Represents the data for an attribute.

              Each attribute value is described as a name-value pair. The name is the data type, and
              the value is the data itself.

              For more information, see `Data Types
              <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
              in the *Amazon DynamoDB Developer Guide* .

          - **NULL** *(boolean) --*

            An attribute of type Null. For example:

             ``"NULL": true``

          - **BOOL** *(boolean) --*

            An attribute of type Boolean. For example:

             ``"BOOL": true``

    - **SizeEstimateRangeGB** *(list) --*

      An estimate of item collection size, in gigabytes. This value is a two-element array
      containing a lower bound and an upper bound for the estimate. The estimate includes the size
      of all the items in the table, plus the size of all attributes projected into all of the local
      secondary indexes on that table. Use this estimate to measure whether a local secondary index
      is approaching its size limit.

      The estimate is subject to change over time; therefore, do not rely on the precision or
      accuracy of the estimate.

      - *(float) --*
    """


_ClientTransactWriteItemsResponseTypeDef = TypedDict(
    "_ClientTransactWriteItemsResponseTypeDef",
    {
        "ConsumedCapacity": List[ClientTransactWriteItemsResponseConsumedCapacityTypeDef],
        "ItemCollectionMetrics": Dict[
            str, List[ClientTransactWriteItemsResponseItemCollectionMetricsTypeDef]
        ],
    },
    total=False,
)


class ClientTransactWriteItemsResponseTypeDef(_ClientTransactWriteItemsResponseTypeDef):
    """
    Type definition for `ClientTransactWriteItems` `Response`

    - **ConsumedCapacity** *(list) --*

      The capacity units consumed by the entire ``TransactWriteItems`` operation. The values of the
      list are ordered according to the ordering of the ``TransactItems`` request parameter.

      - *(dict) --*

        The capacity units consumed by an operation. The data returned includes the total
        provisioned throughput consumed, along with statistics for the table and any indexes
        involved in the operation. ``ConsumedCapacity`` is only returned if the request asked for
        it. For more information, see `Provisioned Throughput
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html>`__
        in the *Amazon DynamoDB Developer Guide* .

        - **TableName** *(string) --*

          The name of the table that was affected by the operation.

        - **CapacityUnits** *(float) --*

          The total number of capacity units consumed by the operation.

        - **ReadCapacityUnits** *(float) --*

          The total number of read capacity units consumed by the operation.

        - **WriteCapacityUnits** *(float) --*

          The total number of write capacity units consumed by the operation.

        - **Table** *(dict) --*

          The amount of throughput consumed on the table affected by the operation.

          - **ReadCapacityUnits** *(float) --*

            The total number of read capacity units consumed on a table or an index.

          - **WriteCapacityUnits** *(float) --*

            The total number of write capacity units consumed on a table or an index.

          - **CapacityUnits** *(float) --*

            The total number of capacity units consumed on a table or an index.

        - **LocalSecondaryIndexes** *(dict) --*

          The amount of throughput consumed on each local index affected by the operation.

          - *(string) --*

            - *(dict) --*

              Represents the amount of provisioned throughput capacity consumed on a table or an
              index.

              - **ReadCapacityUnits** *(float) --*

                The total number of read capacity units consumed on a table or an index.

              - **WriteCapacityUnits** *(float) --*

                The total number of write capacity units consumed on a table or an index.

              - **CapacityUnits** *(float) --*

                The total number of capacity units consumed on a table or an index.

        - **GlobalSecondaryIndexes** *(dict) --*

          The amount of throughput consumed on each global index affected by the operation.

          - *(string) --*

            - *(dict) --*

              Represents the amount of provisioned throughput capacity consumed on a table or an
              index.

              - **ReadCapacityUnits** *(float) --*

                The total number of read capacity units consumed on a table or an index.

              - **WriteCapacityUnits** *(float) --*

                The total number of write capacity units consumed on a table or an index.

              - **CapacityUnits** *(float) --*

                The total number of capacity units consumed on a table or an index.

    - **ItemCollectionMetrics** *(dict) --*

      A list of tables that were processed by ``TransactWriteItems`` and, for each table,
      information about any item collections that were affected by individual ``UpdateItem`` ,
      ``PutItem`` , or ``DeleteItem`` operations.

      - *(string) --*

        - *(list) --*

          - *(dict) --*

            Information about item collections, if any, that were affected by the operation.
            ``ItemCollectionMetrics`` is only returned if the request asked for it. If the table
            does not have any local secondary indexes, this information is not returned in the
            response.

            - **ItemCollectionKey** *(dict) --*

              The partition key value of the item collection. This value is the same as the
              partition key value of the item.

              - *(string) --*

                - *(dict) --*

                  Represents the data for an attribute.

                  Each attribute value is described as a name-value pair. The name is the data type,
                  and the value is the data itself.

                  For more information, see `Data Types
                  <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                  in the *Amazon DynamoDB Developer Guide* .

                  - **S** *(string) --*

                    An attribute of type String. For example:

                     ``"S": "Hello"``

                  - **N** *(string) --*

                    An attribute of type Number. For example:

                     ``"N": "123.45"``

                    Numbers are sent across the network to DynamoDB as strings, to maximize
                    compatibility across languages and libraries. However, DynamoDB treats them as
                    number type attributes for mathematical operations.

                  - **B** *(bytes) --*

                    An attribute of type Binary. For example:

                     ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

                  - **SS** *(list) --*

                    An attribute of type String Set. For example:

                     ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

                    - *(string) --*

                  - **NS** *(list) --*

                    An attribute of type Number Set. For example:

                     ``"NS": ["42.2", "-19", "7.5", "3.14"]``

                    Numbers are sent across the network to DynamoDB as strings, to maximize
                    compatibility across languages and libraries. However, DynamoDB treats them as
                    number type attributes for mathematical operations.

                    - *(string) --*

                  - **BS** *(list) --*

                    An attribute of type Binary Set. For example:

                     ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

                    - *(bytes) --*

                  - **M** *(dict) --*

                    An attribute of type Map. For example:

                     ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

                    - *(string) --*

                      - *(dict) --*

                        Represents the data for an attribute.

                        Each attribute value is described as a name-value pair. The name is the data
                        type, and the value is the data itself.

                        For more information, see `Data Types
                        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                        in the *Amazon DynamoDB Developer Guide* .

                  - **L** *(list) --*

                    An attribute of type List. For example:

                     ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

                    - *(dict) --*

                      Represents the data for an attribute.

                      Each attribute value is described as a name-value pair. The name is the data
                      type, and the value is the data itself.

                      For more information, see `Data Types
                      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                      in the *Amazon DynamoDB Developer Guide* .

                  - **NULL** *(boolean) --*

                    An attribute of type Null. For example:

                     ``"NULL": true``

                  - **BOOL** *(boolean) --*

                    An attribute of type Boolean. For example:

                     ``"BOOL": true``

            - **SizeEstimateRangeGB** *(list) --*

              An estimate of item collection size, in gigabytes. This value is a two-element array
              containing a lower bound and an upper bound for the estimate. The estimate includes
              the size of all the items in the table, plus the size of all attributes projected into
              all of the local secondary indexes on that table. Use this estimate to measure whether
              a local secondary index is approaching its size limit.

              The estimate is subject to change over time; therefore, do not rely on the precision
              or accuracy of the estimate.

              - *(float) --*
    """


_ClientTransactWriteItemsTransactItemsConditionCheckExpressionAttributeValuesTypeDef = TypedDict(
    "_ClientTransactWriteItemsTransactItemsConditionCheckExpressionAttributeValuesTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class ClientTransactWriteItemsTransactItemsConditionCheckExpressionAttributeValuesTypeDef(
    _ClientTransactWriteItemsTransactItemsConditionCheckExpressionAttributeValuesTypeDef
):
    """
    Type definition for `ClientTransactWriteItemsTransactItemsConditionCheck`
    `ExpressionAttributeValues`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_ClientTransactWriteItemsTransactItemsConditionCheckKeyTypeDef = TypedDict(
    "_ClientTransactWriteItemsTransactItemsConditionCheckKeyTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class ClientTransactWriteItemsTransactItemsConditionCheckKeyTypeDef(
    _ClientTransactWriteItemsTransactItemsConditionCheckKeyTypeDef
):
    """
    Type definition for `ClientTransactWriteItemsTransactItemsConditionCheck` `Key`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_RequiredClientTransactWriteItemsTransactItemsConditionCheckTypeDef = TypedDict(
    "_RequiredClientTransactWriteItemsTransactItemsConditionCheckTypeDef",
    {
        "Key": Dict[str, ClientTransactWriteItemsTransactItemsConditionCheckKeyTypeDef],
        "TableName": str,
        "ConditionExpression": str,
    },
)
_OptionalClientTransactWriteItemsTransactItemsConditionCheckTypeDef = TypedDict(
    "_OptionalClientTransactWriteItemsTransactItemsConditionCheckTypeDef",
    {
        "ExpressionAttributeNames": Dict[str, str],
        "ExpressionAttributeValues": Dict[
            str, ClientTransactWriteItemsTransactItemsConditionCheckExpressionAttributeValuesTypeDef
        ],
        "ReturnValuesOnConditionCheckFailure": str,
    },
    total=False,
)


class ClientTransactWriteItemsTransactItemsConditionCheckTypeDef(
    _RequiredClientTransactWriteItemsTransactItemsConditionCheckTypeDef,
    _OptionalClientTransactWriteItemsTransactItemsConditionCheckTypeDef,
):
    """
    Type definition for `ClientTransactWriteItemsTransactItems` `ConditionCheck`

    A request to perform a check item operation.

    - **Key** *(dict) --* **[REQUIRED]**

      The primary key of the item to be checked. Each element consists of an attribute name and a
      value for that attribute.

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

          - **S** *(string) --*

            An attribute of type String. For example:

             ``"S": "Hello"``

          - **N** *(string) --*

            An attribute of type Number. For example:

             ``"N": "123.45"``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

          - **B** *(bytes) --*

            An attribute of type Binary. For example:

             ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

          - **SS** *(list) --*

            An attribute of type String Set. For example:

             ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

            - *(string) --*

          - **NS** *(list) --*

            An attribute of type Number Set. For example:

             ``"NS": ["42.2", "-19", "7.5", "3.14"]``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

            - *(string) --*

          - **BS** *(list) --*

            An attribute of type Binary Set. For example:

             ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

            - *(bytes) --*

          - **M** *(dict) --*

            An attribute of type Map. For example:

             ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

            - *(string) --*

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

          - **L** *(list) --*

            An attribute of type List. For example:

             ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

            - *(dict) --*

              Represents the data for an attribute.

              Each attribute value is described as a name-value pair. The name is the data type, and
              the value is the data itself.

              For more information, see `Data Types
              <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
              in the *Amazon DynamoDB Developer Guide* .

          - **NULL** *(boolean) --*

            An attribute of type Null. For example:

             ``"NULL": true``

          - **BOOL** *(boolean) --*

            An attribute of type Boolean. For example:

             ``"BOOL": true``

    - **TableName** *(string) --* **[REQUIRED]**

      Name of the table for the check item request.

    - **ConditionExpression** *(string) --* **[REQUIRED]**

      A condition that must be satisfied in order for a conditional update to succeed.

    - **ExpressionAttributeNames** *(dict) --*

      One or more substitution tokens for attribute names in an expression.

      - *(string) --*

        - *(string) --*

    - **ExpressionAttributeValues** *(dict) --*

      One or more values that can be substituted in an expression.

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

          - **S** *(string) --*

            An attribute of type String. For example:

             ``"S": "Hello"``

          - **N** *(string) --*

            An attribute of type Number. For example:

             ``"N": "123.45"``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

          - **B** *(bytes) --*

            An attribute of type Binary. For example:

             ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

          - **SS** *(list) --*

            An attribute of type String Set. For example:

             ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

            - *(string) --*

          - **NS** *(list) --*

            An attribute of type Number Set. For example:

             ``"NS": ["42.2", "-19", "7.5", "3.14"]``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

            - *(string) --*

          - **BS** *(list) --*

            An attribute of type Binary Set. For example:

             ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

            - *(bytes) --*

          - **M** *(dict) --*

            An attribute of type Map. For example:

             ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

            - *(string) --*

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

          - **L** *(list) --*

            An attribute of type List. For example:

             ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

            - *(dict) --*

              Represents the data for an attribute.

              Each attribute value is described as a name-value pair. The name is the data type, and
              the value is the data itself.

              For more information, see `Data Types
              <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
              in the *Amazon DynamoDB Developer Guide* .

          - **NULL** *(boolean) --*

            An attribute of type Null. For example:

             ``"NULL": true``

          - **BOOL** *(boolean) --*

            An attribute of type Boolean. For example:

             ``"BOOL": true``

    - **ReturnValuesOnConditionCheckFailure** *(string) --*

      Use ``ReturnValuesOnConditionCheckFailure`` to get the item attributes if the
      ``ConditionCheck`` condition fails. For ``ReturnValuesOnConditionCheckFailure`` , the valid
      values are: NONE and ALL_OLD.
    """


_ClientTransactWriteItemsTransactItemsDeleteExpressionAttributeValuesTypeDef = TypedDict(
    "_ClientTransactWriteItemsTransactItemsDeleteExpressionAttributeValuesTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class ClientTransactWriteItemsTransactItemsDeleteExpressionAttributeValuesTypeDef(
    _ClientTransactWriteItemsTransactItemsDeleteExpressionAttributeValuesTypeDef
):
    """
    Type definition for `ClientTransactWriteItemsTransactItemsDelete` `ExpressionAttributeValues`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_ClientTransactWriteItemsTransactItemsDeleteKeyTypeDef = TypedDict(
    "_ClientTransactWriteItemsTransactItemsDeleteKeyTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class ClientTransactWriteItemsTransactItemsDeleteKeyTypeDef(
    _ClientTransactWriteItemsTransactItemsDeleteKeyTypeDef
):
    """
    Type definition for `ClientTransactWriteItemsTransactItemsDelete` `Key`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_RequiredClientTransactWriteItemsTransactItemsDeleteTypeDef = TypedDict(
    "_RequiredClientTransactWriteItemsTransactItemsDeleteTypeDef",
    {"Key": Dict[str, ClientTransactWriteItemsTransactItemsDeleteKeyTypeDef], "TableName": str},
)
_OptionalClientTransactWriteItemsTransactItemsDeleteTypeDef = TypedDict(
    "_OptionalClientTransactWriteItemsTransactItemsDeleteTypeDef",
    {
        "ConditionExpression": str,
        "ExpressionAttributeNames": Dict[str, str],
        "ExpressionAttributeValues": Dict[
            str, ClientTransactWriteItemsTransactItemsDeleteExpressionAttributeValuesTypeDef
        ],
        "ReturnValuesOnConditionCheckFailure": str,
    },
    total=False,
)


class ClientTransactWriteItemsTransactItemsDeleteTypeDef(
    _RequiredClientTransactWriteItemsTransactItemsDeleteTypeDef,
    _OptionalClientTransactWriteItemsTransactItemsDeleteTypeDef,
):
    """
    Type definition for `ClientTransactWriteItemsTransactItems` `Delete`

    A request to perform a ``DeleteItem`` operation.

    - **Key** *(dict) --* **[REQUIRED]**

      The primary key of the item to be deleted. Each element consists of an attribute name and a
      value for that attribute.

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

          - **S** *(string) --*

            An attribute of type String. For example:

             ``"S": "Hello"``

          - **N** *(string) --*

            An attribute of type Number. For example:

             ``"N": "123.45"``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

          - **B** *(bytes) --*

            An attribute of type Binary. For example:

             ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

          - **SS** *(list) --*

            An attribute of type String Set. For example:

             ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

            - *(string) --*

          - **NS** *(list) --*

            An attribute of type Number Set. For example:

             ``"NS": ["42.2", "-19", "7.5", "3.14"]``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

            - *(string) --*

          - **BS** *(list) --*

            An attribute of type Binary Set. For example:

             ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

            - *(bytes) --*

          - **M** *(dict) --*

            An attribute of type Map. For example:

             ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

            - *(string) --*

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

          - **L** *(list) --*

            An attribute of type List. For example:

             ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

            - *(dict) --*

              Represents the data for an attribute.

              Each attribute value is described as a name-value pair. The name is the data type, and
              the value is the data itself.

              For more information, see `Data Types
              <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
              in the *Amazon DynamoDB Developer Guide* .

          - **NULL** *(boolean) --*

            An attribute of type Null. For example:

             ``"NULL": true``

          - **BOOL** *(boolean) --*

            An attribute of type Boolean. For example:

             ``"BOOL": true``

    - **TableName** *(string) --* **[REQUIRED]**

      Name of the table in which the item to be deleted resides.

    - **ConditionExpression** *(string) --*

      A condition that must be satisfied in order for a conditional delete to succeed.

    - **ExpressionAttributeNames** *(dict) --*

      One or more substitution tokens for attribute names in an expression.

      - *(string) --*

        - *(string) --*

    - **ExpressionAttributeValues** *(dict) --*

      One or more values that can be substituted in an expression.

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

          - **S** *(string) --*

            An attribute of type String. For example:

             ``"S": "Hello"``

          - **N** *(string) --*

            An attribute of type Number. For example:

             ``"N": "123.45"``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

          - **B** *(bytes) --*

            An attribute of type Binary. For example:

             ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

          - **SS** *(list) --*

            An attribute of type String Set. For example:

             ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

            - *(string) --*

          - **NS** *(list) --*

            An attribute of type Number Set. For example:

             ``"NS": ["42.2", "-19", "7.5", "3.14"]``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

            - *(string) --*

          - **BS** *(list) --*

            An attribute of type Binary Set. For example:

             ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

            - *(bytes) --*

          - **M** *(dict) --*

            An attribute of type Map. For example:

             ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

            - *(string) --*

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

          - **L** *(list) --*

            An attribute of type List. For example:

             ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

            - *(dict) --*

              Represents the data for an attribute.

              Each attribute value is described as a name-value pair. The name is the data type, and
              the value is the data itself.

              For more information, see `Data Types
              <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
              in the *Amazon DynamoDB Developer Guide* .

          - **NULL** *(boolean) --*

            An attribute of type Null. For example:

             ``"NULL": true``

          - **BOOL** *(boolean) --*

            An attribute of type Boolean. For example:

             ``"BOOL": true``

    - **ReturnValuesOnConditionCheckFailure** *(string) --*

      Use ``ReturnValuesOnConditionCheckFailure`` to get the item attributes if the ``Delete``
      condition fails. For ``ReturnValuesOnConditionCheckFailure`` , the valid values are: NONE and
      ALL_OLD.
    """


_ClientTransactWriteItemsTransactItemsPutExpressionAttributeValuesTypeDef = TypedDict(
    "_ClientTransactWriteItemsTransactItemsPutExpressionAttributeValuesTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class ClientTransactWriteItemsTransactItemsPutExpressionAttributeValuesTypeDef(
    _ClientTransactWriteItemsTransactItemsPutExpressionAttributeValuesTypeDef
):
    """
    Type definition for `ClientTransactWriteItemsTransactItemsPut` `ExpressionAttributeValues`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_ClientTransactWriteItemsTransactItemsPutItemTypeDef = TypedDict(
    "_ClientTransactWriteItemsTransactItemsPutItemTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class ClientTransactWriteItemsTransactItemsPutItemTypeDef(
    _ClientTransactWriteItemsTransactItemsPutItemTypeDef
):
    """
    Type definition for `ClientTransactWriteItemsTransactItemsPut` `Item`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_RequiredClientTransactWriteItemsTransactItemsPutTypeDef = TypedDict(
    "_RequiredClientTransactWriteItemsTransactItemsPutTypeDef",
    {"Item": Dict[str, ClientTransactWriteItemsTransactItemsPutItemTypeDef], "TableName": str},
)
_OptionalClientTransactWriteItemsTransactItemsPutTypeDef = TypedDict(
    "_OptionalClientTransactWriteItemsTransactItemsPutTypeDef",
    {
        "ConditionExpression": str,
        "ExpressionAttributeNames": Dict[str, str],
        "ExpressionAttributeValues": Dict[
            str, ClientTransactWriteItemsTransactItemsPutExpressionAttributeValuesTypeDef
        ],
        "ReturnValuesOnConditionCheckFailure": str,
    },
    total=False,
)


class ClientTransactWriteItemsTransactItemsPutTypeDef(
    _RequiredClientTransactWriteItemsTransactItemsPutTypeDef,
    _OptionalClientTransactWriteItemsTransactItemsPutTypeDef,
):
    """
    Type definition for `ClientTransactWriteItemsTransactItems` `Put`

    A request to perform a ``PutItem`` operation.

    - **Item** *(dict) --* **[REQUIRED]**

      A map of attribute name to attribute values, representing the primary key of the item to be
      written by ``PutItem`` . All of the table's primary key attributes must be specified, and
      their data types must match those of the table's key schema. If any attributes are present in
      the item that are part of an index key schema for the table, their types must match the index
      key schema.

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

          - **S** *(string) --*

            An attribute of type String. For example:

             ``"S": "Hello"``

          - **N** *(string) --*

            An attribute of type Number. For example:

             ``"N": "123.45"``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

          - **B** *(bytes) --*

            An attribute of type Binary. For example:

             ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

          - **SS** *(list) --*

            An attribute of type String Set. For example:

             ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

            - *(string) --*

          - **NS** *(list) --*

            An attribute of type Number Set. For example:

             ``"NS": ["42.2", "-19", "7.5", "3.14"]``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

            - *(string) --*

          - **BS** *(list) --*

            An attribute of type Binary Set. For example:

             ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

            - *(bytes) --*

          - **M** *(dict) --*

            An attribute of type Map. For example:

             ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

            - *(string) --*

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

          - **L** *(list) --*

            An attribute of type List. For example:

             ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

            - *(dict) --*

              Represents the data for an attribute.

              Each attribute value is described as a name-value pair. The name is the data type, and
              the value is the data itself.

              For more information, see `Data Types
              <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
              in the *Amazon DynamoDB Developer Guide* .

          - **NULL** *(boolean) --*

            An attribute of type Null. For example:

             ``"NULL": true``

          - **BOOL** *(boolean) --*

            An attribute of type Boolean. For example:

             ``"BOOL": true``

    - **TableName** *(string) --* **[REQUIRED]**

      Name of the table in which to write the item.

    - **ConditionExpression** *(string) --*

      A condition that must be satisfied in order for a conditional update to succeed.

    - **ExpressionAttributeNames** *(dict) --*

      One or more substitution tokens for attribute names in an expression.

      - *(string) --*

        - *(string) --*

    - **ExpressionAttributeValues** *(dict) --*

      One or more values that can be substituted in an expression.

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

          - **S** *(string) --*

            An attribute of type String. For example:

             ``"S": "Hello"``

          - **N** *(string) --*

            An attribute of type Number. For example:

             ``"N": "123.45"``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

          - **B** *(bytes) --*

            An attribute of type Binary. For example:

             ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

          - **SS** *(list) --*

            An attribute of type String Set. For example:

             ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

            - *(string) --*

          - **NS** *(list) --*

            An attribute of type Number Set. For example:

             ``"NS": ["42.2", "-19", "7.5", "3.14"]``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

            - *(string) --*

          - **BS** *(list) --*

            An attribute of type Binary Set. For example:

             ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

            - *(bytes) --*

          - **M** *(dict) --*

            An attribute of type Map. For example:

             ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

            - *(string) --*

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

          - **L** *(list) --*

            An attribute of type List. For example:

             ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

            - *(dict) --*

              Represents the data for an attribute.

              Each attribute value is described as a name-value pair. The name is the data type, and
              the value is the data itself.

              For more information, see `Data Types
              <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
              in the *Amazon DynamoDB Developer Guide* .

          - **NULL** *(boolean) --*

            An attribute of type Null. For example:

             ``"NULL": true``

          - **BOOL** *(boolean) --*

            An attribute of type Boolean. For example:

             ``"BOOL": true``

    - **ReturnValuesOnConditionCheckFailure** *(string) --*

      Use ``ReturnValuesOnConditionCheckFailure`` to get the item attributes if the ``Put``
      condition fails. For ``ReturnValuesOnConditionCheckFailure`` , the valid values are: NONE and
      ALL_OLD.
    """


_ClientTransactWriteItemsTransactItemsUpdateExpressionAttributeValuesTypeDef = TypedDict(
    "_ClientTransactWriteItemsTransactItemsUpdateExpressionAttributeValuesTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class ClientTransactWriteItemsTransactItemsUpdateExpressionAttributeValuesTypeDef(
    _ClientTransactWriteItemsTransactItemsUpdateExpressionAttributeValuesTypeDef
):
    """
    Type definition for `ClientTransactWriteItemsTransactItemsUpdate` `ExpressionAttributeValues`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_ClientTransactWriteItemsTransactItemsUpdateKeyTypeDef = TypedDict(
    "_ClientTransactWriteItemsTransactItemsUpdateKeyTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class ClientTransactWriteItemsTransactItemsUpdateKeyTypeDef(
    _ClientTransactWriteItemsTransactItemsUpdateKeyTypeDef
):
    """
    Type definition for `ClientTransactWriteItemsTransactItemsUpdate` `Key`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_RequiredClientTransactWriteItemsTransactItemsUpdateTypeDef = TypedDict(
    "_RequiredClientTransactWriteItemsTransactItemsUpdateTypeDef",
    {
        "Key": Dict[str, ClientTransactWriteItemsTransactItemsUpdateKeyTypeDef],
        "UpdateExpression": str,
        "TableName": str,
    },
)
_OptionalClientTransactWriteItemsTransactItemsUpdateTypeDef = TypedDict(
    "_OptionalClientTransactWriteItemsTransactItemsUpdateTypeDef",
    {
        "ConditionExpression": str,
        "ExpressionAttributeNames": Dict[str, str],
        "ExpressionAttributeValues": Dict[
            str, ClientTransactWriteItemsTransactItemsUpdateExpressionAttributeValuesTypeDef
        ],
        "ReturnValuesOnConditionCheckFailure": str,
    },
    total=False,
)


class ClientTransactWriteItemsTransactItemsUpdateTypeDef(
    _RequiredClientTransactWriteItemsTransactItemsUpdateTypeDef,
    _OptionalClientTransactWriteItemsTransactItemsUpdateTypeDef,
):
    """
    Type definition for `ClientTransactWriteItemsTransactItems` `Update`

    A request to perform an ``UpdateItem`` operation.

    - **Key** *(dict) --* **[REQUIRED]**

      The primary key of the item to be updated. Each element consists of an attribute name and a
      value for that attribute.

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

          - **S** *(string) --*

            An attribute of type String. For example:

             ``"S": "Hello"``

          - **N** *(string) --*

            An attribute of type Number. For example:

             ``"N": "123.45"``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

          - **B** *(bytes) --*

            An attribute of type Binary. For example:

             ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

          - **SS** *(list) --*

            An attribute of type String Set. For example:

             ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

            - *(string) --*

          - **NS** *(list) --*

            An attribute of type Number Set. For example:

             ``"NS": ["42.2", "-19", "7.5", "3.14"]``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

            - *(string) --*

          - **BS** *(list) --*

            An attribute of type Binary Set. For example:

             ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

            - *(bytes) --*

          - **M** *(dict) --*

            An attribute of type Map. For example:

             ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

            - *(string) --*

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

          - **L** *(list) --*

            An attribute of type List. For example:

             ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

            - *(dict) --*

              Represents the data for an attribute.

              Each attribute value is described as a name-value pair. The name is the data type, and
              the value is the data itself.

              For more information, see `Data Types
              <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
              in the *Amazon DynamoDB Developer Guide* .

          - **NULL** *(boolean) --*

            An attribute of type Null. For example:

             ``"NULL": true``

          - **BOOL** *(boolean) --*

            An attribute of type Boolean. For example:

             ``"BOOL": true``

    - **UpdateExpression** *(string) --* **[REQUIRED]**

      An expression that defines one or more attributes to be updated, the action to be performed on
      them, and new value(s) for them.

    - **TableName** *(string) --* **[REQUIRED]**

      Name of the table for the ``UpdateItem`` request.

    - **ConditionExpression** *(string) --*

      A condition that must be satisfied in order for a conditional update to succeed.

    - **ExpressionAttributeNames** *(dict) --*

      One or more substitution tokens for attribute names in an expression.

      - *(string) --*

        - *(string) --*

    - **ExpressionAttributeValues** *(dict) --*

      One or more values that can be substituted in an expression.

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

          - **S** *(string) --*

            An attribute of type String. For example:

             ``"S": "Hello"``

          - **N** *(string) --*

            An attribute of type Number. For example:

             ``"N": "123.45"``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

          - **B** *(bytes) --*

            An attribute of type Binary. For example:

             ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

          - **SS** *(list) --*

            An attribute of type String Set. For example:

             ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

            - *(string) --*

          - **NS** *(list) --*

            An attribute of type Number Set. For example:

             ``"NS": ["42.2", "-19", "7.5", "3.14"]``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

            - *(string) --*

          - **BS** *(list) --*

            An attribute of type Binary Set. For example:

             ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

            - *(bytes) --*

          - **M** *(dict) --*

            An attribute of type Map. For example:

             ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

            - *(string) --*

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

          - **L** *(list) --*

            An attribute of type List. For example:

             ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

            - *(dict) --*

              Represents the data for an attribute.

              Each attribute value is described as a name-value pair. The name is the data type, and
              the value is the data itself.

              For more information, see `Data Types
              <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
              in the *Amazon DynamoDB Developer Guide* .

          - **NULL** *(boolean) --*

            An attribute of type Null. For example:

             ``"NULL": true``

          - **BOOL** *(boolean) --*

            An attribute of type Boolean. For example:

             ``"BOOL": true``

    - **ReturnValuesOnConditionCheckFailure** *(string) --*

      Use ``ReturnValuesOnConditionCheckFailure`` to get the item attributes if the ``Update``
      condition fails. For ``ReturnValuesOnConditionCheckFailure`` , the valid values are: NONE,
      ALL_OLD, UPDATED_OLD, ALL_NEW, UPDATED_NEW.
    """


_ClientTransactWriteItemsTransactItemsTypeDef = TypedDict(
    "_ClientTransactWriteItemsTransactItemsTypeDef",
    {
        "ConditionCheck": ClientTransactWriteItemsTransactItemsConditionCheckTypeDef,
        "Put": ClientTransactWriteItemsTransactItemsPutTypeDef,
        "Delete": ClientTransactWriteItemsTransactItemsDeleteTypeDef,
        "Update": ClientTransactWriteItemsTransactItemsUpdateTypeDef,
    },
    total=False,
)


class ClientTransactWriteItemsTransactItemsTypeDef(_ClientTransactWriteItemsTransactItemsTypeDef):
    """
    Type definition for `ClientTransactWriteItems` `TransactItems`

    A list of requests that can perform update, put, delete, or check operations on multiple items
    in one or more tables atomically.

    - **ConditionCheck** *(dict) --*

      A request to perform a check item operation.

      - **Key** *(dict) --* **[REQUIRED]**

        The primary key of the item to be checked. Each element consists of an attribute name and a
        value for that attribute.

        - *(string) --*

          - *(dict) --*

            Represents the data for an attribute.

            Each attribute value is described as a name-value pair. The name is the data type, and
            the value is the data itself.

            For more information, see `Data Types
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
            in the *Amazon DynamoDB Developer Guide* .

            - **S** *(string) --*

              An attribute of type String. For example:

               ``"S": "Hello"``

            - **N** *(string) --*

              An attribute of type Number. For example:

               ``"N": "123.45"``

              Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
              across languages and libraries. However, DynamoDB treats them as number type
              attributes for mathematical operations.

            - **B** *(bytes) --*

              An attribute of type Binary. For example:

               ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

            - **SS** *(list) --*

              An attribute of type String Set. For example:

               ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

              - *(string) --*

            - **NS** *(list) --*

              An attribute of type Number Set. For example:

               ``"NS": ["42.2", "-19", "7.5", "3.14"]``

              Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
              across languages and libraries. However, DynamoDB treats them as number type
              attributes for mathematical operations.

              - *(string) --*

            - **BS** *(list) --*

              An attribute of type Binary Set. For example:

               ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

              - *(bytes) --*

            - **M** *(dict) --*

              An attribute of type Map. For example:

               ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

              - *(string) --*

                - *(dict) --*

                  Represents the data for an attribute.

                  Each attribute value is described as a name-value pair. The name is the data type,
                  and the value is the data itself.

                  For more information, see `Data Types
                  <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                  in the *Amazon DynamoDB Developer Guide* .

            - **L** *(list) --*

              An attribute of type List. For example:

               ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

            - **NULL** *(boolean) --*

              An attribute of type Null. For example:

               ``"NULL": true``

            - **BOOL** *(boolean) --*

              An attribute of type Boolean. For example:

               ``"BOOL": true``

      - **TableName** *(string) --* **[REQUIRED]**

        Name of the table for the check item request.

      - **ConditionExpression** *(string) --* **[REQUIRED]**

        A condition that must be satisfied in order for a conditional update to succeed.

      - **ExpressionAttributeNames** *(dict) --*

        One or more substitution tokens for attribute names in an expression.

        - *(string) --*

          - *(string) --*

      - **ExpressionAttributeValues** *(dict) --*

        One or more values that can be substituted in an expression.

        - *(string) --*

          - *(dict) --*

            Represents the data for an attribute.

            Each attribute value is described as a name-value pair. The name is the data type, and
            the value is the data itself.

            For more information, see `Data Types
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
            in the *Amazon DynamoDB Developer Guide* .

            - **S** *(string) --*

              An attribute of type String. For example:

               ``"S": "Hello"``

            - **N** *(string) --*

              An attribute of type Number. For example:

               ``"N": "123.45"``

              Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
              across languages and libraries. However, DynamoDB treats them as number type
              attributes for mathematical operations.

            - **B** *(bytes) --*

              An attribute of type Binary. For example:

               ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

            - **SS** *(list) --*

              An attribute of type String Set. For example:

               ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

              - *(string) --*

            - **NS** *(list) --*

              An attribute of type Number Set. For example:

               ``"NS": ["42.2", "-19", "7.5", "3.14"]``

              Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
              across languages and libraries. However, DynamoDB treats them as number type
              attributes for mathematical operations.

              - *(string) --*

            - **BS** *(list) --*

              An attribute of type Binary Set. For example:

               ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

              - *(bytes) --*

            - **M** *(dict) --*

              An attribute of type Map. For example:

               ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

              - *(string) --*

                - *(dict) --*

                  Represents the data for an attribute.

                  Each attribute value is described as a name-value pair. The name is the data type,
                  and the value is the data itself.

                  For more information, see `Data Types
                  <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                  in the *Amazon DynamoDB Developer Guide* .

            - **L** *(list) --*

              An attribute of type List. For example:

               ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

            - **NULL** *(boolean) --*

              An attribute of type Null. For example:

               ``"NULL": true``

            - **BOOL** *(boolean) --*

              An attribute of type Boolean. For example:

               ``"BOOL": true``

      - **ReturnValuesOnConditionCheckFailure** *(string) --*

        Use ``ReturnValuesOnConditionCheckFailure`` to get the item attributes if the
        ``ConditionCheck`` condition fails. For ``ReturnValuesOnConditionCheckFailure`` , the valid
        values are: NONE and ALL_OLD.

    - **Put** *(dict) --*

      A request to perform a ``PutItem`` operation.

      - **Item** *(dict) --* **[REQUIRED]**

        A map of attribute name to attribute values, representing the primary key of the item to be
        written by ``PutItem`` . All of the table's primary key attributes must be specified, and
        their data types must match those of the table's key schema. If any attributes are present
        in the item that are part of an index key schema for the table, their types must match the
        index key schema.

        - *(string) --*

          - *(dict) --*

            Represents the data for an attribute.

            Each attribute value is described as a name-value pair. The name is the data type, and
            the value is the data itself.

            For more information, see `Data Types
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
            in the *Amazon DynamoDB Developer Guide* .

            - **S** *(string) --*

              An attribute of type String. For example:

               ``"S": "Hello"``

            - **N** *(string) --*

              An attribute of type Number. For example:

               ``"N": "123.45"``

              Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
              across languages and libraries. However, DynamoDB treats them as number type
              attributes for mathematical operations.

            - **B** *(bytes) --*

              An attribute of type Binary. For example:

               ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

            - **SS** *(list) --*

              An attribute of type String Set. For example:

               ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

              - *(string) --*

            - **NS** *(list) --*

              An attribute of type Number Set. For example:

               ``"NS": ["42.2", "-19", "7.5", "3.14"]``

              Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
              across languages and libraries. However, DynamoDB treats them as number type
              attributes for mathematical operations.

              - *(string) --*

            - **BS** *(list) --*

              An attribute of type Binary Set. For example:

               ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

              - *(bytes) --*

            - **M** *(dict) --*

              An attribute of type Map. For example:

               ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

              - *(string) --*

                - *(dict) --*

                  Represents the data for an attribute.

                  Each attribute value is described as a name-value pair. The name is the data type,
                  and the value is the data itself.

                  For more information, see `Data Types
                  <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                  in the *Amazon DynamoDB Developer Guide* .

            - **L** *(list) --*

              An attribute of type List. For example:

               ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

            - **NULL** *(boolean) --*

              An attribute of type Null. For example:

               ``"NULL": true``

            - **BOOL** *(boolean) --*

              An attribute of type Boolean. For example:

               ``"BOOL": true``

      - **TableName** *(string) --* **[REQUIRED]**

        Name of the table in which to write the item.

      - **ConditionExpression** *(string) --*

        A condition that must be satisfied in order for a conditional update to succeed.

      - **ExpressionAttributeNames** *(dict) --*

        One or more substitution tokens for attribute names in an expression.

        - *(string) --*

          - *(string) --*

      - **ExpressionAttributeValues** *(dict) --*

        One or more values that can be substituted in an expression.

        - *(string) --*

          - *(dict) --*

            Represents the data for an attribute.

            Each attribute value is described as a name-value pair. The name is the data type, and
            the value is the data itself.

            For more information, see `Data Types
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
            in the *Amazon DynamoDB Developer Guide* .

            - **S** *(string) --*

              An attribute of type String. For example:

               ``"S": "Hello"``

            - **N** *(string) --*

              An attribute of type Number. For example:

               ``"N": "123.45"``

              Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
              across languages and libraries. However, DynamoDB treats them as number type
              attributes for mathematical operations.

            - **B** *(bytes) --*

              An attribute of type Binary. For example:

               ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

            - **SS** *(list) --*

              An attribute of type String Set. For example:

               ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

              - *(string) --*

            - **NS** *(list) --*

              An attribute of type Number Set. For example:

               ``"NS": ["42.2", "-19", "7.5", "3.14"]``

              Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
              across languages and libraries. However, DynamoDB treats them as number type
              attributes for mathematical operations.

              - *(string) --*

            - **BS** *(list) --*

              An attribute of type Binary Set. For example:

               ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

              - *(bytes) --*

            - **M** *(dict) --*

              An attribute of type Map. For example:

               ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

              - *(string) --*

                - *(dict) --*

                  Represents the data for an attribute.

                  Each attribute value is described as a name-value pair. The name is the data type,
                  and the value is the data itself.

                  For more information, see `Data Types
                  <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                  in the *Amazon DynamoDB Developer Guide* .

            - **L** *(list) --*

              An attribute of type List. For example:

               ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

            - **NULL** *(boolean) --*

              An attribute of type Null. For example:

               ``"NULL": true``

            - **BOOL** *(boolean) --*

              An attribute of type Boolean. For example:

               ``"BOOL": true``

      - **ReturnValuesOnConditionCheckFailure** *(string) --*

        Use ``ReturnValuesOnConditionCheckFailure`` to get the item attributes if the ``Put``
        condition fails. For ``ReturnValuesOnConditionCheckFailure`` , the valid values are: NONE
        and ALL_OLD.

    - **Delete** *(dict) --*

      A request to perform a ``DeleteItem`` operation.

      - **Key** *(dict) --* **[REQUIRED]**

        The primary key of the item to be deleted. Each element consists of an attribute name and a
        value for that attribute.

        - *(string) --*

          - *(dict) --*

            Represents the data for an attribute.

            Each attribute value is described as a name-value pair. The name is the data type, and
            the value is the data itself.

            For more information, see `Data Types
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
            in the *Amazon DynamoDB Developer Guide* .

            - **S** *(string) --*

              An attribute of type String. For example:

               ``"S": "Hello"``

            - **N** *(string) --*

              An attribute of type Number. For example:

               ``"N": "123.45"``

              Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
              across languages and libraries. However, DynamoDB treats them as number type
              attributes for mathematical operations.

            - **B** *(bytes) --*

              An attribute of type Binary. For example:

               ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

            - **SS** *(list) --*

              An attribute of type String Set. For example:

               ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

              - *(string) --*

            - **NS** *(list) --*

              An attribute of type Number Set. For example:

               ``"NS": ["42.2", "-19", "7.5", "3.14"]``

              Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
              across languages and libraries. However, DynamoDB treats them as number type
              attributes for mathematical operations.

              - *(string) --*

            - **BS** *(list) --*

              An attribute of type Binary Set. For example:

               ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

              - *(bytes) --*

            - **M** *(dict) --*

              An attribute of type Map. For example:

               ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

              - *(string) --*

                - *(dict) --*

                  Represents the data for an attribute.

                  Each attribute value is described as a name-value pair. The name is the data type,
                  and the value is the data itself.

                  For more information, see `Data Types
                  <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                  in the *Amazon DynamoDB Developer Guide* .

            - **L** *(list) --*

              An attribute of type List. For example:

               ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

            - **NULL** *(boolean) --*

              An attribute of type Null. For example:

               ``"NULL": true``

            - **BOOL** *(boolean) --*

              An attribute of type Boolean. For example:

               ``"BOOL": true``

      - **TableName** *(string) --* **[REQUIRED]**

        Name of the table in which the item to be deleted resides.

      - **ConditionExpression** *(string) --*

        A condition that must be satisfied in order for a conditional delete to succeed.

      - **ExpressionAttributeNames** *(dict) --*

        One or more substitution tokens for attribute names in an expression.

        - *(string) --*

          - *(string) --*

      - **ExpressionAttributeValues** *(dict) --*

        One or more values that can be substituted in an expression.

        - *(string) --*

          - *(dict) --*

            Represents the data for an attribute.

            Each attribute value is described as a name-value pair. The name is the data type, and
            the value is the data itself.

            For more information, see `Data Types
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
            in the *Amazon DynamoDB Developer Guide* .

            - **S** *(string) --*

              An attribute of type String. For example:

               ``"S": "Hello"``

            - **N** *(string) --*

              An attribute of type Number. For example:

               ``"N": "123.45"``

              Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
              across languages and libraries. However, DynamoDB treats them as number type
              attributes for mathematical operations.

            - **B** *(bytes) --*

              An attribute of type Binary. For example:

               ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

            - **SS** *(list) --*

              An attribute of type String Set. For example:

               ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

              - *(string) --*

            - **NS** *(list) --*

              An attribute of type Number Set. For example:

               ``"NS": ["42.2", "-19", "7.5", "3.14"]``

              Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
              across languages and libraries. However, DynamoDB treats them as number type
              attributes for mathematical operations.

              - *(string) --*

            - **BS** *(list) --*

              An attribute of type Binary Set. For example:

               ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

              - *(bytes) --*

            - **M** *(dict) --*

              An attribute of type Map. For example:

               ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

              - *(string) --*

                - *(dict) --*

                  Represents the data for an attribute.

                  Each attribute value is described as a name-value pair. The name is the data type,
                  and the value is the data itself.

                  For more information, see `Data Types
                  <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                  in the *Amazon DynamoDB Developer Guide* .

            - **L** *(list) --*

              An attribute of type List. For example:

               ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

            - **NULL** *(boolean) --*

              An attribute of type Null. For example:

               ``"NULL": true``

            - **BOOL** *(boolean) --*

              An attribute of type Boolean. For example:

               ``"BOOL": true``

      - **ReturnValuesOnConditionCheckFailure** *(string) --*

        Use ``ReturnValuesOnConditionCheckFailure`` to get the item attributes if the ``Delete``
        condition fails. For ``ReturnValuesOnConditionCheckFailure`` , the valid values are: NONE
        and ALL_OLD.

    - **Update** *(dict) --*

      A request to perform an ``UpdateItem`` operation.

      - **Key** *(dict) --* **[REQUIRED]**

        The primary key of the item to be updated. Each element consists of an attribute name and a
        value for that attribute.

        - *(string) --*

          - *(dict) --*

            Represents the data for an attribute.

            Each attribute value is described as a name-value pair. The name is the data type, and
            the value is the data itself.

            For more information, see `Data Types
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
            in the *Amazon DynamoDB Developer Guide* .

            - **S** *(string) --*

              An attribute of type String. For example:

               ``"S": "Hello"``

            - **N** *(string) --*

              An attribute of type Number. For example:

               ``"N": "123.45"``

              Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
              across languages and libraries. However, DynamoDB treats them as number type
              attributes for mathematical operations.

            - **B** *(bytes) --*

              An attribute of type Binary. For example:

               ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

            - **SS** *(list) --*

              An attribute of type String Set. For example:

               ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

              - *(string) --*

            - **NS** *(list) --*

              An attribute of type Number Set. For example:

               ``"NS": ["42.2", "-19", "7.5", "3.14"]``

              Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
              across languages and libraries. However, DynamoDB treats them as number type
              attributes for mathematical operations.

              - *(string) --*

            - **BS** *(list) --*

              An attribute of type Binary Set. For example:

               ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

              - *(bytes) --*

            - **M** *(dict) --*

              An attribute of type Map. For example:

               ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

              - *(string) --*

                - *(dict) --*

                  Represents the data for an attribute.

                  Each attribute value is described as a name-value pair. The name is the data type,
                  and the value is the data itself.

                  For more information, see `Data Types
                  <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                  in the *Amazon DynamoDB Developer Guide* .

            - **L** *(list) --*

              An attribute of type List. For example:

               ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

            - **NULL** *(boolean) --*

              An attribute of type Null. For example:

               ``"NULL": true``

            - **BOOL** *(boolean) --*

              An attribute of type Boolean. For example:

               ``"BOOL": true``

      - **UpdateExpression** *(string) --* **[REQUIRED]**

        An expression that defines one or more attributes to be updated, the action to be performed
        on them, and new value(s) for them.

      - **TableName** *(string) --* **[REQUIRED]**

        Name of the table for the ``UpdateItem`` request.

      - **ConditionExpression** *(string) --*

        A condition that must be satisfied in order for a conditional update to succeed.

      - **ExpressionAttributeNames** *(dict) --*

        One or more substitution tokens for attribute names in an expression.

        - *(string) --*

          - *(string) --*

      - **ExpressionAttributeValues** *(dict) --*

        One or more values that can be substituted in an expression.

        - *(string) --*

          - *(dict) --*

            Represents the data for an attribute.

            Each attribute value is described as a name-value pair. The name is the data type, and
            the value is the data itself.

            For more information, see `Data Types
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
            in the *Amazon DynamoDB Developer Guide* .

            - **S** *(string) --*

              An attribute of type String. For example:

               ``"S": "Hello"``

            - **N** *(string) --*

              An attribute of type Number. For example:

               ``"N": "123.45"``

              Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
              across languages and libraries. However, DynamoDB treats them as number type
              attributes for mathematical operations.

            - **B** *(bytes) --*

              An attribute of type Binary. For example:

               ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

            - **SS** *(list) --*

              An attribute of type String Set. For example:

               ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

              - *(string) --*

            - **NS** *(list) --*

              An attribute of type Number Set. For example:

               ``"NS": ["42.2", "-19", "7.5", "3.14"]``

              Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
              across languages and libraries. However, DynamoDB treats them as number type
              attributes for mathematical operations.

              - *(string) --*

            - **BS** *(list) --*

              An attribute of type Binary Set. For example:

               ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

              - *(bytes) --*

            - **M** *(dict) --*

              An attribute of type Map. For example:

               ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

              - *(string) --*

                - *(dict) --*

                  Represents the data for an attribute.

                  Each attribute value is described as a name-value pair. The name is the data type,
                  and the value is the data itself.

                  For more information, see `Data Types
                  <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                  in the *Amazon DynamoDB Developer Guide* .

            - **L** *(list) --*

              An attribute of type List. For example:

               ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

            - **NULL** *(boolean) --*

              An attribute of type Null. For example:

               ``"NULL": true``

            - **BOOL** *(boolean) --*

              An attribute of type Boolean. For example:

               ``"BOOL": true``

      - **ReturnValuesOnConditionCheckFailure** *(string) --*

        Use ``ReturnValuesOnConditionCheckFailure`` to get the item attributes if the ``Update``
        condition fails. For ``ReturnValuesOnConditionCheckFailure`` , the valid values are: NONE,
        ALL_OLD, UPDATED_OLD, ALL_NEW, UPDATED_NEW.
    """


_ClientUpdateContinuousBackupsPointInTimeRecoverySpecificationTypeDef = TypedDict(
    "_ClientUpdateContinuousBackupsPointInTimeRecoverySpecificationTypeDef",
    {"PointInTimeRecoveryEnabled": bool},
)


class ClientUpdateContinuousBackupsPointInTimeRecoverySpecificationTypeDef(
    _ClientUpdateContinuousBackupsPointInTimeRecoverySpecificationTypeDef
):
    """
    Type definition for `ClientUpdateContinuousBackups` `PointInTimeRecoverySpecification`

    Represents the settings used to enable point in time recovery.

    - **PointInTimeRecoveryEnabled** *(boolean) --* **[REQUIRED]**

      Indicates whether point in time recovery is enabled (true) or disabled (false) on the table.
    """


_ClientUpdateContinuousBackupsResponseContinuousBackupsDescriptionPointInTimeRecoveryDescriptionTypeDef = TypedDict(
    "_ClientUpdateContinuousBackupsResponseContinuousBackupsDescriptionPointInTimeRecoveryDescriptionTypeDef",
    {
        "PointInTimeRecoveryStatus": str,
        "EarliestRestorableDateTime": datetime,
        "LatestRestorableDateTime": datetime,
    },
    total=False,
)


class ClientUpdateContinuousBackupsResponseContinuousBackupsDescriptionPointInTimeRecoveryDescriptionTypeDef(
    _ClientUpdateContinuousBackupsResponseContinuousBackupsDescriptionPointInTimeRecoveryDescriptionTypeDef
):
    """
    Type definition for `ClientUpdateContinuousBackupsResponseContinuousBackupsDescription`
    `PointInTimeRecoveryDescription`

    The description of the point in time recovery settings applied to the table.

    - **PointInTimeRecoveryStatus** *(string) --*

      The current state of point in time recovery:

      * ``ENABLING`` - Point in time recovery is being enabled.

      * ``ENABLED`` - Point in time recovery is enabled.

      * ``DISABLED`` - Point in time recovery is disabled.

    - **EarliestRestorableDateTime** *(datetime) --*

      Specifies the earliest point in time you can restore your table to. You can restore your table
      to any point in time during the last 35 days.

    - **LatestRestorableDateTime** *(datetime) --*

       ``LatestRestorableDateTime`` is typically 5 minutes before the current time.
    """


_ClientUpdateContinuousBackupsResponseContinuousBackupsDescriptionTypeDef = TypedDict(
    "_ClientUpdateContinuousBackupsResponseContinuousBackupsDescriptionTypeDef",
    {
        "ContinuousBackupsStatus": str,
        "PointInTimeRecoveryDescription": ClientUpdateContinuousBackupsResponseContinuousBackupsDescriptionPointInTimeRecoveryDescriptionTypeDef,
    },
    total=False,
)


class ClientUpdateContinuousBackupsResponseContinuousBackupsDescriptionTypeDef(
    _ClientUpdateContinuousBackupsResponseContinuousBackupsDescriptionTypeDef
):
    """
    Type definition for `ClientUpdateContinuousBackupsResponse` `ContinuousBackupsDescription`

    Represents the continuous backups and point in time recovery settings on the table.

    - **ContinuousBackupsStatus** *(string) --*

       ``ContinuousBackupsStatus`` can be one of the following states: ENABLED, DISABLED

    - **PointInTimeRecoveryDescription** *(dict) --*

      The description of the point in time recovery settings applied to the table.

      - **PointInTimeRecoveryStatus** *(string) --*

        The current state of point in time recovery:

        * ``ENABLING`` - Point in time recovery is being enabled.

        * ``ENABLED`` - Point in time recovery is enabled.

        * ``DISABLED`` - Point in time recovery is disabled.

      - **EarliestRestorableDateTime** *(datetime) --*

        Specifies the earliest point in time you can restore your table to. You can restore your
        table to any point in time during the last 35 days.

      - **LatestRestorableDateTime** *(datetime) --*

         ``LatestRestorableDateTime`` is typically 5 minutes before the current time.
    """


_ClientUpdateContinuousBackupsResponseTypeDef = TypedDict(
    "_ClientUpdateContinuousBackupsResponseTypeDef",
    {
        "ContinuousBackupsDescription": ClientUpdateContinuousBackupsResponseContinuousBackupsDescriptionTypeDef
    },
    total=False,
)


class ClientUpdateContinuousBackupsResponseTypeDef(_ClientUpdateContinuousBackupsResponseTypeDef):
    """
    Type definition for `ClientUpdateContinuousBackups` `Response`

    - **ContinuousBackupsDescription** *(dict) --*

      Represents the continuous backups and point in time recovery settings on the table.

      - **ContinuousBackupsStatus** *(string) --*

         ``ContinuousBackupsStatus`` can be one of the following states: ENABLED, DISABLED

      - **PointInTimeRecoveryDescription** *(dict) --*

        The description of the point in time recovery settings applied to the table.

        - **PointInTimeRecoveryStatus** *(string) --*

          The current state of point in time recovery:

          * ``ENABLING`` - Point in time recovery is being enabled.

          * ``ENABLED`` - Point in time recovery is enabled.

          * ``DISABLED`` - Point in time recovery is disabled.

        - **EarliestRestorableDateTime** *(datetime) --*

          Specifies the earliest point in time you can restore your table to. You can restore your
          table to any point in time during the last 35 days.

        - **LatestRestorableDateTime** *(datetime) --*

           ``LatestRestorableDateTime`` is typically 5 minutes before the current time.
    """


_ClientUpdateContributorInsightsResponseTypeDef = TypedDict(
    "_ClientUpdateContributorInsightsResponseTypeDef",
    {"TableName": str, "IndexName": str, "ContributorInsightsStatus": str},
    total=False,
)


class ClientUpdateContributorInsightsResponseTypeDef(
    _ClientUpdateContributorInsightsResponseTypeDef
):
    """
    Type definition for `ClientUpdateContributorInsights` `Response`

    - **TableName** *(string) --*

      The name of the table.

    - **IndexName** *(string) --*

      The name of the global secondary index, if applicable.

    - **ContributorInsightsStatus** *(string) --*

      The status of contributor insights
    """


_ClientUpdateGlobalTableReplicaUpdatesCreateTypeDef = TypedDict(
    "_ClientUpdateGlobalTableReplicaUpdatesCreateTypeDef", {"RegionName": str}
)


class ClientUpdateGlobalTableReplicaUpdatesCreateTypeDef(
    _ClientUpdateGlobalTableReplicaUpdatesCreateTypeDef
):
    """
    Type definition for `ClientUpdateGlobalTableReplicaUpdates` `Create`

    The parameters required for creating a replica on an existing global table.

    - **RegionName** *(string) --* **[REQUIRED]**

      The Region of the replica to be added.
    """


_ClientUpdateGlobalTableReplicaUpdatesDeleteTypeDef = TypedDict(
    "_ClientUpdateGlobalTableReplicaUpdatesDeleteTypeDef", {"RegionName": str}
)


class ClientUpdateGlobalTableReplicaUpdatesDeleteTypeDef(
    _ClientUpdateGlobalTableReplicaUpdatesDeleteTypeDef
):
    """
    Type definition for `ClientUpdateGlobalTableReplicaUpdates` `Delete`

    The name of the existing replica to be removed.

    - **RegionName** *(string) --* **[REQUIRED]**

      The Region of the replica to be removed.
    """


_ClientUpdateGlobalTableReplicaUpdatesTypeDef = TypedDict(
    "_ClientUpdateGlobalTableReplicaUpdatesTypeDef",
    {
        "Create": ClientUpdateGlobalTableReplicaUpdatesCreateTypeDef,
        "Delete": ClientUpdateGlobalTableReplicaUpdatesDeleteTypeDef,
    },
    total=False,
)


class ClientUpdateGlobalTableReplicaUpdatesTypeDef(_ClientUpdateGlobalTableReplicaUpdatesTypeDef):
    """
    Type definition for `ClientUpdateGlobalTable` `ReplicaUpdates`

    Represents one of the following:

    * A new replica to be added to an existing global table.

    * New parameters for an existing replica.

    * An existing replica to be removed from an existing global table.

    - **Create** *(dict) --*

      The parameters required for creating a replica on an existing global table.

      - **RegionName** *(string) --* **[REQUIRED]**

        The Region of the replica to be added.

    - **Delete** *(dict) --*

      The name of the existing replica to be removed.

      - **RegionName** *(string) --* **[REQUIRED]**

        The Region of the replica to be removed.
    """


_ClientUpdateGlobalTableResponseGlobalTableDescriptionReplicationGroupGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef = TypedDict(
    "_ClientUpdateGlobalTableResponseGlobalTableDescriptionReplicationGroupGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef",
    {"ReadCapacityUnits": int},
    total=False,
)


class ClientUpdateGlobalTableResponseGlobalTableDescriptionReplicationGroupGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef(
    _ClientUpdateGlobalTableResponseGlobalTableDescriptionReplicationGroupGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef
):
    """
    Type definition for
    `ClientUpdateGlobalTableResponseGlobalTableDescriptionReplicationGroupGlobalSecondaryIndexes`
    `ProvisionedThroughputOverride`

    If not described, uses the source table GSI's read capacity settings.

    - **ReadCapacityUnits** *(integer) --*

      Replica-specific read capacity units. If not specified, uses the source table's read capacity
      settings.
    """


_ClientUpdateGlobalTableResponseGlobalTableDescriptionReplicationGroupGlobalSecondaryIndexesTypeDef = TypedDict(
    "_ClientUpdateGlobalTableResponseGlobalTableDescriptionReplicationGroupGlobalSecondaryIndexesTypeDef",
    {
        "IndexName": str,
        "ProvisionedThroughputOverride": ClientUpdateGlobalTableResponseGlobalTableDescriptionReplicationGroupGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef,
    },
    total=False,
)


class ClientUpdateGlobalTableResponseGlobalTableDescriptionReplicationGroupGlobalSecondaryIndexesTypeDef(
    _ClientUpdateGlobalTableResponseGlobalTableDescriptionReplicationGroupGlobalSecondaryIndexesTypeDef
):
    """
    Type definition for `ClientUpdateGlobalTableResponseGlobalTableDescriptionReplicationGroup`
    `GlobalSecondaryIndexes`

    Represents the properties of a replica global secondary index.

    - **IndexName** *(string) --*

      The name of the global secondary index.

    - **ProvisionedThroughputOverride** *(dict) --*

      If not described, uses the source table GSI's read capacity settings.

      - **ReadCapacityUnits** *(integer) --*

        Replica-specific read capacity units. If not specified, uses the source table's read
        capacity settings.
    """


_ClientUpdateGlobalTableResponseGlobalTableDescriptionReplicationGroupProvisionedThroughputOverrideTypeDef = TypedDict(
    "_ClientUpdateGlobalTableResponseGlobalTableDescriptionReplicationGroupProvisionedThroughputOverrideTypeDef",
    {"ReadCapacityUnits": int},
    total=False,
)


class ClientUpdateGlobalTableResponseGlobalTableDescriptionReplicationGroupProvisionedThroughputOverrideTypeDef(
    _ClientUpdateGlobalTableResponseGlobalTableDescriptionReplicationGroupProvisionedThroughputOverrideTypeDef
):
    """
    Type definition for `ClientUpdateGlobalTableResponseGlobalTableDescriptionReplicationGroup`
    `ProvisionedThroughputOverride`

    Replica-specific provisioned throughput. If not described, uses the source table's provisioned
    throughput settings.

    - **ReadCapacityUnits** *(integer) --*

      Replica-specific read capacity units. If not specified, uses the source table's read capacity
      settings.
    """


_ClientUpdateGlobalTableResponseGlobalTableDescriptionReplicationGroupTypeDef = TypedDict(
    "_ClientUpdateGlobalTableResponseGlobalTableDescriptionReplicationGroupTypeDef",
    {
        "RegionName": str,
        "ReplicaStatus": str,
        "ReplicaStatusDescription": str,
        "ReplicaStatusPercentProgress": str,
        "KMSMasterKeyId": str,
        "ProvisionedThroughputOverride": ClientUpdateGlobalTableResponseGlobalTableDescriptionReplicationGroupProvisionedThroughputOverrideTypeDef,
        "GlobalSecondaryIndexes": List[
            ClientUpdateGlobalTableResponseGlobalTableDescriptionReplicationGroupGlobalSecondaryIndexesTypeDef
        ],
    },
    total=False,
)


class ClientUpdateGlobalTableResponseGlobalTableDescriptionReplicationGroupTypeDef(
    _ClientUpdateGlobalTableResponseGlobalTableDescriptionReplicationGroupTypeDef
):
    """
    Type definition for `ClientUpdateGlobalTableResponseGlobalTableDescription` `ReplicationGroup`

    Contains the details of the replica.

    - **RegionName** *(string) --*

      The name of the Region.

    - **ReplicaStatus** *(string) --*

      The current state of the replica:

      * ``CREATING`` - The replica is being created.

      * ``UPDATING`` - The replica is being updated.

      * ``DELETING`` - The replica is being deleted.

      * ``ACTIVE`` - The replica is ready for use.

    - **ReplicaStatusDescription** *(string) --*

      Detailed information about the replica status.

    - **ReplicaStatusPercentProgress** *(string) --*

      Specifies the progress of a Create, Update, or Delete action on the replica as a percentage.

    - **KMSMasterKeyId** *(string) --*

      The AWS KMS customer master key (CMK) of the replica that will be used for AWS KMS encryption.

    - **ProvisionedThroughputOverride** *(dict) --*

      Replica-specific provisioned throughput. If not described, uses the source table's provisioned
      throughput settings.

      - **ReadCapacityUnits** *(integer) --*

        Replica-specific read capacity units. If not specified, uses the source table's read
        capacity settings.

    - **GlobalSecondaryIndexes** *(list) --*

      Replica-specific global secondary index settings.

      - *(dict) --*

        Represents the properties of a replica global secondary index.

        - **IndexName** *(string) --*

          The name of the global secondary index.

        - **ProvisionedThroughputOverride** *(dict) --*

          If not described, uses the source table GSI's read capacity settings.

          - **ReadCapacityUnits** *(integer) --*

            Replica-specific read capacity units. If not specified, uses the source table's read
            capacity settings.
    """


_ClientUpdateGlobalTableResponseGlobalTableDescriptionTypeDef = TypedDict(
    "_ClientUpdateGlobalTableResponseGlobalTableDescriptionTypeDef",
    {
        "ReplicationGroup": List[
            ClientUpdateGlobalTableResponseGlobalTableDescriptionReplicationGroupTypeDef
        ],
        "GlobalTableArn": str,
        "CreationDateTime": datetime,
        "GlobalTableStatus": str,
        "GlobalTableName": str,
    },
    total=False,
)


class ClientUpdateGlobalTableResponseGlobalTableDescriptionTypeDef(
    _ClientUpdateGlobalTableResponseGlobalTableDescriptionTypeDef
):
    """
    Type definition for `ClientUpdateGlobalTableResponse` `GlobalTableDescription`

    Contains the details of the global table.

    - **ReplicationGroup** *(list) --*

      The Regions where the global table has replicas.

      - *(dict) --*

        Contains the details of the replica.

        - **RegionName** *(string) --*

          The name of the Region.

        - **ReplicaStatus** *(string) --*

          The current state of the replica:

          * ``CREATING`` - The replica is being created.

          * ``UPDATING`` - The replica is being updated.

          * ``DELETING`` - The replica is being deleted.

          * ``ACTIVE`` - The replica is ready for use.

        - **ReplicaStatusDescription** *(string) --*

          Detailed information about the replica status.

        - **ReplicaStatusPercentProgress** *(string) --*

          Specifies the progress of a Create, Update, or Delete action on the replica as a
          percentage.

        - **KMSMasterKeyId** *(string) --*

          The AWS KMS customer master key (CMK) of the replica that will be used for AWS KMS
          encryption.

        - **ProvisionedThroughputOverride** *(dict) --*

          Replica-specific provisioned throughput. If not described, uses the source table's
          provisioned throughput settings.

          - **ReadCapacityUnits** *(integer) --*

            Replica-specific read capacity units. If not specified, uses the source table's read
            capacity settings.

        - **GlobalSecondaryIndexes** *(list) --*

          Replica-specific global secondary index settings.

          - *(dict) --*

            Represents the properties of a replica global secondary index.

            - **IndexName** *(string) --*

              The name of the global secondary index.

            - **ProvisionedThroughputOverride** *(dict) --*

              If not described, uses the source table GSI's read capacity settings.

              - **ReadCapacityUnits** *(integer) --*

                Replica-specific read capacity units. If not specified, uses the source table's read
                capacity settings.

    - **GlobalTableArn** *(string) --*

      The unique identifier of the global table.

    - **CreationDateTime** *(datetime) --*

      The creation time of the global table.

    - **GlobalTableStatus** *(string) --*

      The current state of the global table:

      * ``CREATING`` - The global table is being created.

      * ``UPDATING`` - The global table is being updated.

      * ``DELETING`` - The global table is being deleted.

      * ``ACTIVE`` - The global table is ready for use.

    - **GlobalTableName** *(string) --*

      The global table name.
    """


_ClientUpdateGlobalTableResponseTypeDef = TypedDict(
    "_ClientUpdateGlobalTableResponseTypeDef",
    {"GlobalTableDescription": ClientUpdateGlobalTableResponseGlobalTableDescriptionTypeDef},
    total=False,
)


class ClientUpdateGlobalTableResponseTypeDef(_ClientUpdateGlobalTableResponseTypeDef):
    """
    Type definition for `ClientUpdateGlobalTable` `Response`

    - **GlobalTableDescription** *(dict) --*

      Contains the details of the global table.

      - **ReplicationGroup** *(list) --*

        The Regions where the global table has replicas.

        - *(dict) --*

          Contains the details of the replica.

          - **RegionName** *(string) --*

            The name of the Region.

          - **ReplicaStatus** *(string) --*

            The current state of the replica:

            * ``CREATING`` - The replica is being created.

            * ``UPDATING`` - The replica is being updated.

            * ``DELETING`` - The replica is being deleted.

            * ``ACTIVE`` - The replica is ready for use.

          - **ReplicaStatusDescription** *(string) --*

            Detailed information about the replica status.

          - **ReplicaStatusPercentProgress** *(string) --*

            Specifies the progress of a Create, Update, or Delete action on the replica as a
            percentage.

          - **KMSMasterKeyId** *(string) --*

            The AWS KMS customer master key (CMK) of the replica that will be used for AWS KMS
            encryption.

          - **ProvisionedThroughputOverride** *(dict) --*

            Replica-specific provisioned throughput. If not described, uses the source table's
            provisioned throughput settings.

            - **ReadCapacityUnits** *(integer) --*

              Replica-specific read capacity units. If not specified, uses the source table's read
              capacity settings.

          - **GlobalSecondaryIndexes** *(list) --*

            Replica-specific global secondary index settings.

            - *(dict) --*

              Represents the properties of a replica global secondary index.

              - **IndexName** *(string) --*

                The name of the global secondary index.

              - **ProvisionedThroughputOverride** *(dict) --*

                If not described, uses the source table GSI's read capacity settings.

                - **ReadCapacityUnits** *(integer) --*

                  Replica-specific read capacity units. If not specified, uses the source table's
                  read capacity settings.

      - **GlobalTableArn** *(string) --*

        The unique identifier of the global table.

      - **CreationDateTime** *(datetime) --*

        The creation time of the global table.

      - **GlobalTableStatus** *(string) --*

        The current state of the global table:

        * ``CREATING`` - The global table is being created.

        * ``UPDATING`` - The global table is being updated.

        * ``DELETING`` - The global table is being deleted.

        * ``ACTIVE`` - The global table is ready for use.

      - **GlobalTableName** *(string) --*

        The global table name.
    """


_RequiredClientUpdateGlobalTableSettingsGlobalTableGlobalSecondaryIndexSettingsUpdateProvisionedWriteCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef = TypedDict(
    "_RequiredClientUpdateGlobalTableSettingsGlobalTableGlobalSecondaryIndexSettingsUpdateProvisionedWriteCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef",
    {"TargetValue": float},
)
_OptionalClientUpdateGlobalTableSettingsGlobalTableGlobalSecondaryIndexSettingsUpdateProvisionedWriteCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef = TypedDict(
    "_OptionalClientUpdateGlobalTableSettingsGlobalTableGlobalSecondaryIndexSettingsUpdateProvisionedWriteCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef",
    {"DisableScaleIn": bool, "ScaleInCooldown": int, "ScaleOutCooldown": int},
    total=False,
)


class ClientUpdateGlobalTableSettingsGlobalTableGlobalSecondaryIndexSettingsUpdateProvisionedWriteCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef(
    _RequiredClientUpdateGlobalTableSettingsGlobalTableGlobalSecondaryIndexSettingsUpdateProvisionedWriteCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef,
    _OptionalClientUpdateGlobalTableSettingsGlobalTableGlobalSecondaryIndexSettingsUpdateProvisionedWriteCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef,
):
    """
    Type definition for
    `ClientUpdateGlobalTableSettingsGlobalTableGlobalSecondaryIndexSettingsUpdateProvisionedWriteCapacityAutoScalingSettingsUpdateScalingPolicyUpdate`
    `TargetTrackingScalingPolicyConfiguration`

    Represents a target tracking scaling policy configuration.

    - **DisableScaleIn** *(boolean) --*

      Indicates whether scale in by the target tracking policy is disabled. If the value is true,
      scale in is disabled and the target tracking policy won't remove capacity from the scalable
      resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity
      from the scalable resource. The default value is false.

    - **ScaleInCooldown** *(integer) --*

      The amount of time, in seconds, after a scale in activity completes before another scale in
      activity can start. The cooldown period is used to block subsequent scale in requests until it
      has expired. You should scale in conservatively to protect your application's availability.
      However, if another alarm triggers a scale out policy during the cooldown period after a
      scale-in, application auto scaling scales out your scalable target immediately.

    - **ScaleOutCooldown** *(integer) --*

      The amount of time, in seconds, after a scale out activity completes before another scale out
      activity can start. While the cooldown period is in effect, the capacity that has been added
      by the previous scale out event that initiated the cooldown is calculated as part of the
      desired capacity for the next scale out. You should continuously (but not excessively) scale
      out.

    - **TargetValue** *(float) --* **[REQUIRED]**

      The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or
      2e-360 to 2e360 (Base 2).
    """


_RequiredClientUpdateGlobalTableSettingsGlobalTableGlobalSecondaryIndexSettingsUpdateProvisionedWriteCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTypeDef = TypedDict(
    "_RequiredClientUpdateGlobalTableSettingsGlobalTableGlobalSecondaryIndexSettingsUpdateProvisionedWriteCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTypeDef",
    {
        "TargetTrackingScalingPolicyConfiguration": ClientUpdateGlobalTableSettingsGlobalTableGlobalSecondaryIndexSettingsUpdateProvisionedWriteCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef
    },
)
_OptionalClientUpdateGlobalTableSettingsGlobalTableGlobalSecondaryIndexSettingsUpdateProvisionedWriteCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTypeDef = TypedDict(
    "_OptionalClientUpdateGlobalTableSettingsGlobalTableGlobalSecondaryIndexSettingsUpdateProvisionedWriteCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTypeDef",
    {"PolicyName": str},
    total=False,
)


class ClientUpdateGlobalTableSettingsGlobalTableGlobalSecondaryIndexSettingsUpdateProvisionedWriteCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTypeDef(
    _RequiredClientUpdateGlobalTableSettingsGlobalTableGlobalSecondaryIndexSettingsUpdateProvisionedWriteCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTypeDef,
    _OptionalClientUpdateGlobalTableSettingsGlobalTableGlobalSecondaryIndexSettingsUpdateProvisionedWriteCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTypeDef,
):
    """
    Type definition for
    `ClientUpdateGlobalTableSettingsGlobalTableGlobalSecondaryIndexSettingsUpdateProvisionedWriteCapacityAutoScalingSettingsUpdate`
    `ScalingPolicyUpdate`

    The scaling policy to apply for scaling target global table or global secondary index capacity
    units.

    - **PolicyName** *(string) --*

      The name of the scaling policy.

    - **TargetTrackingScalingPolicyConfiguration** *(dict) --* **[REQUIRED]**

      Represents a target tracking scaling policy configuration.

      - **DisableScaleIn** *(boolean) --*

        Indicates whether scale in by the target tracking policy is disabled. If the value is true,
        scale in is disabled and the target tracking policy won't remove capacity from the scalable
        resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity
        from the scalable resource. The default value is false.

      - **ScaleInCooldown** *(integer) --*

        The amount of time, in seconds, after a scale in activity completes before another scale in
        activity can start. The cooldown period is used to block subsequent scale in requests until
        it has expired. You should scale in conservatively to protect your application's
        availability. However, if another alarm triggers a scale out policy during the cooldown
        period after a scale-in, application auto scaling scales out your scalable target
        immediately.

      - **ScaleOutCooldown** *(integer) --*

        The amount of time, in seconds, after a scale out activity completes before another scale
        out activity can start. While the cooldown period is in effect, the capacity that has been
        added by the previous scale out event that initiated the cooldown is calculated as part of
        the desired capacity for the next scale out. You should continuously (but not excessively)
        scale out.

      - **TargetValue** *(float) --* **[REQUIRED]**

        The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or
        2e-360 to 2e360 (Base 2).
    """


_ClientUpdateGlobalTableSettingsGlobalTableGlobalSecondaryIndexSettingsUpdateProvisionedWriteCapacityAutoScalingSettingsUpdateTypeDef = TypedDict(
    "_ClientUpdateGlobalTableSettingsGlobalTableGlobalSecondaryIndexSettingsUpdateProvisionedWriteCapacityAutoScalingSettingsUpdateTypeDef",
    {
        "MinimumUnits": int,
        "MaximumUnits": int,
        "AutoScalingDisabled": bool,
        "AutoScalingRoleArn": str,
        "ScalingPolicyUpdate": ClientUpdateGlobalTableSettingsGlobalTableGlobalSecondaryIndexSettingsUpdateProvisionedWriteCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTypeDef,
    },
    total=False,
)


class ClientUpdateGlobalTableSettingsGlobalTableGlobalSecondaryIndexSettingsUpdateProvisionedWriteCapacityAutoScalingSettingsUpdateTypeDef(
    _ClientUpdateGlobalTableSettingsGlobalTableGlobalSecondaryIndexSettingsUpdateProvisionedWriteCapacityAutoScalingSettingsUpdateTypeDef
):
    """
    Type definition for
    `ClientUpdateGlobalTableSettingsGlobalTableGlobalSecondaryIndexSettingsUpdate`
    `ProvisionedWriteCapacityAutoScalingSettingsUpdate`

    Auto scaling settings for managing a global secondary index's write capacity units.

    - **MinimumUnits** *(integer) --*

      The minimum capacity units that a global table or global secondary index should be scaled down
      to.

    - **MaximumUnits** *(integer) --*

      The maximum capacity units that a global table or global secondary index should be scaled up
      to.

    - **AutoScalingDisabled** *(boolean) --*

      Disabled auto scaling for this global table or global secondary index.

    - **AutoScalingRoleArn** *(string) --*

      Role ARN used for configuring auto scaling policy.

    - **ScalingPolicyUpdate** *(dict) --*

      The scaling policy to apply for scaling target global table or global secondary index capacity
      units.

      - **PolicyName** *(string) --*

        The name of the scaling policy.

      - **TargetTrackingScalingPolicyConfiguration** *(dict) --* **[REQUIRED]**

        Represents a target tracking scaling policy configuration.

        - **DisableScaleIn** *(boolean) --*

          Indicates whether scale in by the target tracking policy is disabled. If the value is
          true, scale in is disabled and the target tracking policy won't remove capacity from the
          scalable resource. Otherwise, scale in is enabled and the target tracking policy can
          remove capacity from the scalable resource. The default value is false.

        - **ScaleInCooldown** *(integer) --*

          The amount of time, in seconds, after a scale in activity completes before another scale
          in activity can start. The cooldown period is used to block subsequent scale in requests
          until it has expired. You should scale in conservatively to protect your application's
          availability. However, if another alarm triggers a scale out policy during the cooldown
          period after a scale-in, application auto scaling scales out your scalable target
          immediately.

        - **ScaleOutCooldown** *(integer) --*

          The amount of time, in seconds, after a scale out activity completes before another scale
          out activity can start. While the cooldown period is in effect, the capacity that has been
          added by the previous scale out event that initiated the cooldown is calculated as part of
          the desired capacity for the next scale out. You should continuously (but not excessively)
          scale out.

        - **TargetValue** *(float) --* **[REQUIRED]**

          The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or
          2e-360 to 2e360 (Base 2).
    """


_RequiredClientUpdateGlobalTableSettingsGlobalTableGlobalSecondaryIndexSettingsUpdateTypeDef = TypedDict(
    "_RequiredClientUpdateGlobalTableSettingsGlobalTableGlobalSecondaryIndexSettingsUpdateTypeDef",
    {"IndexName": str},
)
_OptionalClientUpdateGlobalTableSettingsGlobalTableGlobalSecondaryIndexSettingsUpdateTypeDef = TypedDict(
    "_OptionalClientUpdateGlobalTableSettingsGlobalTableGlobalSecondaryIndexSettingsUpdateTypeDef",
    {
        "ProvisionedWriteCapacityUnits": int,
        "ProvisionedWriteCapacityAutoScalingSettingsUpdate": ClientUpdateGlobalTableSettingsGlobalTableGlobalSecondaryIndexSettingsUpdateProvisionedWriteCapacityAutoScalingSettingsUpdateTypeDef,
    },
    total=False,
)


class ClientUpdateGlobalTableSettingsGlobalTableGlobalSecondaryIndexSettingsUpdateTypeDef(
    _RequiredClientUpdateGlobalTableSettingsGlobalTableGlobalSecondaryIndexSettingsUpdateTypeDef,
    _OptionalClientUpdateGlobalTableSettingsGlobalTableGlobalSecondaryIndexSettingsUpdateTypeDef,
):
    """
    Type definition for `ClientUpdateGlobalTableSettings`
    `GlobalTableGlobalSecondaryIndexSettingsUpdate`

    Represents the settings of a global secondary index for a global table that will be modified.

    - **IndexName** *(string) --* **[REQUIRED]**

      The name of the global secondary index. The name must be unique among all other indexes on
      this table.

    - **ProvisionedWriteCapacityUnits** *(integer) --*

      The maximum number of writes consumed per second before DynamoDB returns a
      ``ThrottlingException.``

    - **ProvisionedWriteCapacityAutoScalingSettingsUpdate** *(dict) --*

      Auto scaling settings for managing a global secondary index's write capacity units.

      - **MinimumUnits** *(integer) --*

        The minimum capacity units that a global table or global secondary index should be scaled
        down to.

      - **MaximumUnits** *(integer) --*

        The maximum capacity units that a global table or global secondary index should be scaled up
        to.

      - **AutoScalingDisabled** *(boolean) --*

        Disabled auto scaling for this global table or global secondary index.

      - **AutoScalingRoleArn** *(string) --*

        Role ARN used for configuring auto scaling policy.

      - **ScalingPolicyUpdate** *(dict) --*

        The scaling policy to apply for scaling target global table or global secondary index
        capacity units.

        - **PolicyName** *(string) --*

          The name of the scaling policy.

        - **TargetTrackingScalingPolicyConfiguration** *(dict) --* **[REQUIRED]**

          Represents a target tracking scaling policy configuration.

          - **DisableScaleIn** *(boolean) --*

            Indicates whether scale in by the target tracking policy is disabled. If the value is
            true, scale in is disabled and the target tracking policy won't remove capacity from the
            scalable resource. Otherwise, scale in is enabled and the target tracking policy can
            remove capacity from the scalable resource. The default value is false.

          - **ScaleInCooldown** *(integer) --*

            The amount of time, in seconds, after a scale in activity completes before another scale
            in activity can start. The cooldown period is used to block subsequent scale in requests
            until it has expired. You should scale in conservatively to protect your application's
            availability. However, if another alarm triggers a scale out policy during the cooldown
            period after a scale-in, application auto scaling scales out your scalable target
            immediately.

          - **ScaleOutCooldown** *(integer) --*

            The amount of time, in seconds, after a scale out activity completes before another
            scale out activity can start. While the cooldown period is in effect, the capacity that
            has been added by the previous scale out event that initiated the cooldown is calculated
            as part of the desired capacity for the next scale out. You should continuously (but not
            excessively) scale out.

          - **TargetValue** *(float) --* **[REQUIRED]**

            The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10)
            or 2e-360 to 2e360 (Base 2).
    """


_RequiredClientUpdateGlobalTableSettingsGlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef = TypedDict(
    "_RequiredClientUpdateGlobalTableSettingsGlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef",
    {"TargetValue": float},
)
_OptionalClientUpdateGlobalTableSettingsGlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef = TypedDict(
    "_OptionalClientUpdateGlobalTableSettingsGlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef",
    {"DisableScaleIn": bool, "ScaleInCooldown": int, "ScaleOutCooldown": int},
    total=False,
)


class ClientUpdateGlobalTableSettingsGlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef(
    _RequiredClientUpdateGlobalTableSettingsGlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef,
    _OptionalClientUpdateGlobalTableSettingsGlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef,
):
    """
    Type definition for
    `ClientUpdateGlobalTableSettingsGlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdateScalingPolicyUpdate`
    `TargetTrackingScalingPolicyConfiguration`

    Represents a target tracking scaling policy configuration.

    - **DisableScaleIn** *(boolean) --*

      Indicates whether scale in by the target tracking policy is disabled. If the value is true,
      scale in is disabled and the target tracking policy won't remove capacity from the scalable
      resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity
      from the scalable resource. The default value is false.

    - **ScaleInCooldown** *(integer) --*

      The amount of time, in seconds, after a scale in activity completes before another scale in
      activity can start. The cooldown period is used to block subsequent scale in requests until it
      has expired. You should scale in conservatively to protect your application's availability.
      However, if another alarm triggers a scale out policy during the cooldown period after a
      scale-in, application auto scaling scales out your scalable target immediately.

    - **ScaleOutCooldown** *(integer) --*

      The amount of time, in seconds, after a scale out activity completes before another scale out
      activity can start. While the cooldown period is in effect, the capacity that has been added
      by the previous scale out event that initiated the cooldown is calculated as part of the
      desired capacity for the next scale out. You should continuously (but not excessively) scale
      out.

    - **TargetValue** *(float) --* **[REQUIRED]**

      The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or
      2e-360 to 2e360 (Base 2).
    """


_RequiredClientUpdateGlobalTableSettingsGlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTypeDef = TypedDict(
    "_RequiredClientUpdateGlobalTableSettingsGlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTypeDef",
    {
        "TargetTrackingScalingPolicyConfiguration": ClientUpdateGlobalTableSettingsGlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef
    },
)
_OptionalClientUpdateGlobalTableSettingsGlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTypeDef = TypedDict(
    "_OptionalClientUpdateGlobalTableSettingsGlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTypeDef",
    {"PolicyName": str},
    total=False,
)


class ClientUpdateGlobalTableSettingsGlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTypeDef(
    _RequiredClientUpdateGlobalTableSettingsGlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTypeDef,
    _OptionalClientUpdateGlobalTableSettingsGlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTypeDef,
):
    """
    Type definition for
    `ClientUpdateGlobalTableSettingsGlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdate`
    `ScalingPolicyUpdate`

    The scaling policy to apply for scaling target global table or global secondary index capacity
    units.

    - **PolicyName** *(string) --*

      The name of the scaling policy.

    - **TargetTrackingScalingPolicyConfiguration** *(dict) --* **[REQUIRED]**

      Represents a target tracking scaling policy configuration.

      - **DisableScaleIn** *(boolean) --*

        Indicates whether scale in by the target tracking policy is disabled. If the value is true,
        scale in is disabled and the target tracking policy won't remove capacity from the scalable
        resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity
        from the scalable resource. The default value is false.

      - **ScaleInCooldown** *(integer) --*

        The amount of time, in seconds, after a scale in activity completes before another scale in
        activity can start. The cooldown period is used to block subsequent scale in requests until
        it has expired. You should scale in conservatively to protect your application's
        availability. However, if another alarm triggers a scale out policy during the cooldown
        period after a scale-in, application auto scaling scales out your scalable target
        immediately.

      - **ScaleOutCooldown** *(integer) --*

        The amount of time, in seconds, after a scale out activity completes before another scale
        out activity can start. While the cooldown period is in effect, the capacity that has been
        added by the previous scale out event that initiated the cooldown is calculated as part of
        the desired capacity for the next scale out. You should continuously (but not excessively)
        scale out.

      - **TargetValue** *(float) --* **[REQUIRED]**

        The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or
        2e-360 to 2e360 (Base 2).
    """


_ClientUpdateGlobalTableSettingsGlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdateTypeDef = TypedDict(
    "_ClientUpdateGlobalTableSettingsGlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdateTypeDef",
    {
        "MinimumUnits": int,
        "MaximumUnits": int,
        "AutoScalingDisabled": bool,
        "AutoScalingRoleArn": str,
        "ScalingPolicyUpdate": ClientUpdateGlobalTableSettingsGlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTypeDef,
    },
    total=False,
)


class ClientUpdateGlobalTableSettingsGlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdateTypeDef(
    _ClientUpdateGlobalTableSettingsGlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdateTypeDef
):
    """
    Type definition for `ClientUpdateGlobalTableSettings`
    `GlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdate`

    Auto scaling settings for managing provisioned write capacity for the global table.

    - **MinimumUnits** *(integer) --*

      The minimum capacity units that a global table or global secondary index should be scaled down
      to.

    - **MaximumUnits** *(integer) --*

      The maximum capacity units that a global table or global secondary index should be scaled up
      to.

    - **AutoScalingDisabled** *(boolean) --*

      Disabled auto scaling for this global table or global secondary index.

    - **AutoScalingRoleArn** *(string) --*

      Role ARN used for configuring auto scaling policy.

    - **ScalingPolicyUpdate** *(dict) --*

      The scaling policy to apply for scaling target global table or global secondary index capacity
      units.

      - **PolicyName** *(string) --*

        The name of the scaling policy.

      - **TargetTrackingScalingPolicyConfiguration** *(dict) --* **[REQUIRED]**

        Represents a target tracking scaling policy configuration.

        - **DisableScaleIn** *(boolean) --*

          Indicates whether scale in by the target tracking policy is disabled. If the value is
          true, scale in is disabled and the target tracking policy won't remove capacity from the
          scalable resource. Otherwise, scale in is enabled and the target tracking policy can
          remove capacity from the scalable resource. The default value is false.

        - **ScaleInCooldown** *(integer) --*

          The amount of time, in seconds, after a scale in activity completes before another scale
          in activity can start. The cooldown period is used to block subsequent scale in requests
          until it has expired. You should scale in conservatively to protect your application's
          availability. However, if another alarm triggers a scale out policy during the cooldown
          period after a scale-in, application auto scaling scales out your scalable target
          immediately.

        - **ScaleOutCooldown** *(integer) --*

          The amount of time, in seconds, after a scale out activity completes before another scale
          out activity can start. While the cooldown period is in effect, the capacity that has been
          added by the previous scale out event that initiated the cooldown is calculated as part of
          the desired capacity for the next scale out. You should continuously (but not excessively)
          scale out.

        - **TargetValue** *(float) --* **[REQUIRED]**

          The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or
          2e-360 to 2e360 (Base 2).
    """


_RequiredClientUpdateGlobalTableSettingsReplicaSettingsUpdateReplicaGlobalSecondaryIndexSettingsUpdateProvisionedReadCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef = TypedDict(
    "_RequiredClientUpdateGlobalTableSettingsReplicaSettingsUpdateReplicaGlobalSecondaryIndexSettingsUpdateProvisionedReadCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef",
    {"TargetValue": float},
)
_OptionalClientUpdateGlobalTableSettingsReplicaSettingsUpdateReplicaGlobalSecondaryIndexSettingsUpdateProvisionedReadCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef = TypedDict(
    "_OptionalClientUpdateGlobalTableSettingsReplicaSettingsUpdateReplicaGlobalSecondaryIndexSettingsUpdateProvisionedReadCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef",
    {"DisableScaleIn": bool, "ScaleInCooldown": int, "ScaleOutCooldown": int},
    total=False,
)


class ClientUpdateGlobalTableSettingsReplicaSettingsUpdateReplicaGlobalSecondaryIndexSettingsUpdateProvisionedReadCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef(
    _RequiredClientUpdateGlobalTableSettingsReplicaSettingsUpdateReplicaGlobalSecondaryIndexSettingsUpdateProvisionedReadCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef,
    _OptionalClientUpdateGlobalTableSettingsReplicaSettingsUpdateReplicaGlobalSecondaryIndexSettingsUpdateProvisionedReadCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef,
):
    """
    Type definition for
    `ClientUpdateGlobalTableSettingsReplicaSettingsUpdateReplicaGlobalSecondaryIndexSettingsUpdateProvisionedReadCapacityAutoScalingSettingsUpdateScalingPolicyUpdate`
    `TargetTrackingScalingPolicyConfiguration`

    Represents a target tracking scaling policy configuration.

    - **DisableScaleIn** *(boolean) --*

      Indicates whether scale in by the target tracking policy is disabled. If the value is true,
      scale in is disabled and the target tracking policy won't remove capacity from the scalable
      resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity
      from the scalable resource. The default value is false.

    - **ScaleInCooldown** *(integer) --*

      The amount of time, in seconds, after a scale in activity completes before another scale in
      activity can start. The cooldown period is used to block subsequent scale in requests until it
      has expired. You should scale in conservatively to protect your application's availability.
      However, if another alarm triggers a scale out policy during the cooldown period after a
      scale-in, application auto scaling scales out your scalable target immediately.

    - **ScaleOutCooldown** *(integer) --*

      The amount of time, in seconds, after a scale out activity completes before another scale out
      activity can start. While the cooldown period is in effect, the capacity that has been added
      by the previous scale out event that initiated the cooldown is calculated as part of the
      desired capacity for the next scale out. You should continuously (but not excessively) scale
      out.

    - **TargetValue** *(float) --* **[REQUIRED]**

      The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or
      2e-360 to 2e360 (Base 2).
    """


_RequiredClientUpdateGlobalTableSettingsReplicaSettingsUpdateReplicaGlobalSecondaryIndexSettingsUpdateProvisionedReadCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTypeDef = TypedDict(
    "_RequiredClientUpdateGlobalTableSettingsReplicaSettingsUpdateReplicaGlobalSecondaryIndexSettingsUpdateProvisionedReadCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTypeDef",
    {
        "TargetTrackingScalingPolicyConfiguration": ClientUpdateGlobalTableSettingsReplicaSettingsUpdateReplicaGlobalSecondaryIndexSettingsUpdateProvisionedReadCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef
    },
)
_OptionalClientUpdateGlobalTableSettingsReplicaSettingsUpdateReplicaGlobalSecondaryIndexSettingsUpdateProvisionedReadCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTypeDef = TypedDict(
    "_OptionalClientUpdateGlobalTableSettingsReplicaSettingsUpdateReplicaGlobalSecondaryIndexSettingsUpdateProvisionedReadCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTypeDef",
    {"PolicyName": str},
    total=False,
)


class ClientUpdateGlobalTableSettingsReplicaSettingsUpdateReplicaGlobalSecondaryIndexSettingsUpdateProvisionedReadCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTypeDef(
    _RequiredClientUpdateGlobalTableSettingsReplicaSettingsUpdateReplicaGlobalSecondaryIndexSettingsUpdateProvisionedReadCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTypeDef,
    _OptionalClientUpdateGlobalTableSettingsReplicaSettingsUpdateReplicaGlobalSecondaryIndexSettingsUpdateProvisionedReadCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTypeDef,
):
    """
    Type definition for
    `ClientUpdateGlobalTableSettingsReplicaSettingsUpdateReplicaGlobalSecondaryIndexSettingsUpdateProvisionedReadCapacityAutoScalingSettingsUpdate`
    `ScalingPolicyUpdate`

    The scaling policy to apply for scaling target global table or global secondary index capacity
    units.

    - **PolicyName** *(string) --*

      The name of the scaling policy.

    - **TargetTrackingScalingPolicyConfiguration** *(dict) --* **[REQUIRED]**

      Represents a target tracking scaling policy configuration.

      - **DisableScaleIn** *(boolean) --*

        Indicates whether scale in by the target tracking policy is disabled. If the value is true,
        scale in is disabled and the target tracking policy won't remove capacity from the scalable
        resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity
        from the scalable resource. The default value is false.

      - **ScaleInCooldown** *(integer) --*

        The amount of time, in seconds, after a scale in activity completes before another scale in
        activity can start. The cooldown period is used to block subsequent scale in requests until
        it has expired. You should scale in conservatively to protect your application's
        availability. However, if another alarm triggers a scale out policy during the cooldown
        period after a scale-in, application auto scaling scales out your scalable target
        immediately.

      - **ScaleOutCooldown** *(integer) --*

        The amount of time, in seconds, after a scale out activity completes before another scale
        out activity can start. While the cooldown period is in effect, the capacity that has been
        added by the previous scale out event that initiated the cooldown is calculated as part of
        the desired capacity for the next scale out. You should continuously (but not excessively)
        scale out.

      - **TargetValue** *(float) --* **[REQUIRED]**

        The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or
        2e-360 to 2e360 (Base 2).
    """


_ClientUpdateGlobalTableSettingsReplicaSettingsUpdateReplicaGlobalSecondaryIndexSettingsUpdateProvisionedReadCapacityAutoScalingSettingsUpdateTypeDef = TypedDict(
    "_ClientUpdateGlobalTableSettingsReplicaSettingsUpdateReplicaGlobalSecondaryIndexSettingsUpdateProvisionedReadCapacityAutoScalingSettingsUpdateTypeDef",
    {
        "MinimumUnits": int,
        "MaximumUnits": int,
        "AutoScalingDisabled": bool,
        "AutoScalingRoleArn": str,
        "ScalingPolicyUpdate": ClientUpdateGlobalTableSettingsReplicaSettingsUpdateReplicaGlobalSecondaryIndexSettingsUpdateProvisionedReadCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTypeDef,
    },
    total=False,
)


class ClientUpdateGlobalTableSettingsReplicaSettingsUpdateReplicaGlobalSecondaryIndexSettingsUpdateProvisionedReadCapacityAutoScalingSettingsUpdateTypeDef(
    _ClientUpdateGlobalTableSettingsReplicaSettingsUpdateReplicaGlobalSecondaryIndexSettingsUpdateProvisionedReadCapacityAutoScalingSettingsUpdateTypeDef
):
    """
    Type definition for
    `ClientUpdateGlobalTableSettingsReplicaSettingsUpdateReplicaGlobalSecondaryIndexSettingsUpdate`
    `ProvisionedReadCapacityAutoScalingSettingsUpdate`

    Auto scaling settings for managing a global secondary index replica's read capacity units.

    - **MinimumUnits** *(integer) --*

      The minimum capacity units that a global table or global secondary index should be scaled down
      to.

    - **MaximumUnits** *(integer) --*

      The maximum capacity units that a global table or global secondary index should be scaled up
      to.

    - **AutoScalingDisabled** *(boolean) --*

      Disabled auto scaling for this global table or global secondary index.

    - **AutoScalingRoleArn** *(string) --*

      Role ARN used for configuring auto scaling policy.

    - **ScalingPolicyUpdate** *(dict) --*

      The scaling policy to apply for scaling target global table or global secondary index capacity
      units.

      - **PolicyName** *(string) --*

        The name of the scaling policy.

      - **TargetTrackingScalingPolicyConfiguration** *(dict) --* **[REQUIRED]**

        Represents a target tracking scaling policy configuration.

        - **DisableScaleIn** *(boolean) --*

          Indicates whether scale in by the target tracking policy is disabled. If the value is
          true, scale in is disabled and the target tracking policy won't remove capacity from the
          scalable resource. Otherwise, scale in is enabled and the target tracking policy can
          remove capacity from the scalable resource. The default value is false.

        - **ScaleInCooldown** *(integer) --*

          The amount of time, in seconds, after a scale in activity completes before another scale
          in activity can start. The cooldown period is used to block subsequent scale in requests
          until it has expired. You should scale in conservatively to protect your application's
          availability. However, if another alarm triggers a scale out policy during the cooldown
          period after a scale-in, application auto scaling scales out your scalable target
          immediately.

        - **ScaleOutCooldown** *(integer) --*

          The amount of time, in seconds, after a scale out activity completes before another scale
          out activity can start. While the cooldown period is in effect, the capacity that has been
          added by the previous scale out event that initiated the cooldown is calculated as part of
          the desired capacity for the next scale out. You should continuously (but not excessively)
          scale out.

        - **TargetValue** *(float) --* **[REQUIRED]**

          The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or
          2e-360 to 2e360 (Base 2).
    """


_RequiredClientUpdateGlobalTableSettingsReplicaSettingsUpdateReplicaGlobalSecondaryIndexSettingsUpdateTypeDef = TypedDict(
    "_RequiredClientUpdateGlobalTableSettingsReplicaSettingsUpdateReplicaGlobalSecondaryIndexSettingsUpdateTypeDef",
    {"IndexName": str},
)
_OptionalClientUpdateGlobalTableSettingsReplicaSettingsUpdateReplicaGlobalSecondaryIndexSettingsUpdateTypeDef = TypedDict(
    "_OptionalClientUpdateGlobalTableSettingsReplicaSettingsUpdateReplicaGlobalSecondaryIndexSettingsUpdateTypeDef",
    {
        "ProvisionedReadCapacityUnits": int,
        "ProvisionedReadCapacityAutoScalingSettingsUpdate": ClientUpdateGlobalTableSettingsReplicaSettingsUpdateReplicaGlobalSecondaryIndexSettingsUpdateProvisionedReadCapacityAutoScalingSettingsUpdateTypeDef,
    },
    total=False,
)


class ClientUpdateGlobalTableSettingsReplicaSettingsUpdateReplicaGlobalSecondaryIndexSettingsUpdateTypeDef(
    _RequiredClientUpdateGlobalTableSettingsReplicaSettingsUpdateReplicaGlobalSecondaryIndexSettingsUpdateTypeDef,
    _OptionalClientUpdateGlobalTableSettingsReplicaSettingsUpdateReplicaGlobalSecondaryIndexSettingsUpdateTypeDef,
):
    """
    Type definition for `ClientUpdateGlobalTableSettingsReplicaSettingsUpdate`
    `ReplicaGlobalSecondaryIndexSettingsUpdate`

    Represents the settings of a global secondary index for a global table that will be modified.

    - **IndexName** *(string) --* **[REQUIRED]**

      The name of the global secondary index. The name must be unique among all other indexes on
      this table.

    - **ProvisionedReadCapacityUnits** *(integer) --*

      The maximum number of strongly consistent reads consumed per second before DynamoDB returns a
      ``ThrottlingException`` .

    - **ProvisionedReadCapacityAutoScalingSettingsUpdate** *(dict) --*

      Auto scaling settings for managing a global secondary index replica's read capacity units.

      - **MinimumUnits** *(integer) --*

        The minimum capacity units that a global table or global secondary index should be scaled
        down to.

      - **MaximumUnits** *(integer) --*

        The maximum capacity units that a global table or global secondary index should be scaled up
        to.

      - **AutoScalingDisabled** *(boolean) --*

        Disabled auto scaling for this global table or global secondary index.

      - **AutoScalingRoleArn** *(string) --*

        Role ARN used for configuring auto scaling policy.

      - **ScalingPolicyUpdate** *(dict) --*

        The scaling policy to apply for scaling target global table or global secondary index
        capacity units.

        - **PolicyName** *(string) --*

          The name of the scaling policy.

        - **TargetTrackingScalingPolicyConfiguration** *(dict) --* **[REQUIRED]**

          Represents a target tracking scaling policy configuration.

          - **DisableScaleIn** *(boolean) --*

            Indicates whether scale in by the target tracking policy is disabled. If the value is
            true, scale in is disabled and the target tracking policy won't remove capacity from the
            scalable resource. Otherwise, scale in is enabled and the target tracking policy can
            remove capacity from the scalable resource. The default value is false.

          - **ScaleInCooldown** *(integer) --*

            The amount of time, in seconds, after a scale in activity completes before another scale
            in activity can start. The cooldown period is used to block subsequent scale in requests
            until it has expired. You should scale in conservatively to protect your application's
            availability. However, if another alarm triggers a scale out policy during the cooldown
            period after a scale-in, application auto scaling scales out your scalable target
            immediately.

          - **ScaleOutCooldown** *(integer) --*

            The amount of time, in seconds, after a scale out activity completes before another
            scale out activity can start. While the cooldown period is in effect, the capacity that
            has been added by the previous scale out event that initiated the cooldown is calculated
            as part of the desired capacity for the next scale out. You should continuously (but not
            excessively) scale out.

          - **TargetValue** *(float) --* **[REQUIRED]**

            The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10)
            or 2e-360 to 2e360 (Base 2).
    """


_RequiredClientUpdateGlobalTableSettingsReplicaSettingsUpdateReplicaProvisionedReadCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef = TypedDict(
    "_RequiredClientUpdateGlobalTableSettingsReplicaSettingsUpdateReplicaProvisionedReadCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef",
    {"TargetValue": float},
)
_OptionalClientUpdateGlobalTableSettingsReplicaSettingsUpdateReplicaProvisionedReadCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef = TypedDict(
    "_OptionalClientUpdateGlobalTableSettingsReplicaSettingsUpdateReplicaProvisionedReadCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef",
    {"DisableScaleIn": bool, "ScaleInCooldown": int, "ScaleOutCooldown": int},
    total=False,
)


class ClientUpdateGlobalTableSettingsReplicaSettingsUpdateReplicaProvisionedReadCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef(
    _RequiredClientUpdateGlobalTableSettingsReplicaSettingsUpdateReplicaProvisionedReadCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef,
    _OptionalClientUpdateGlobalTableSettingsReplicaSettingsUpdateReplicaProvisionedReadCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef,
):
    """
    Type definition for
    `ClientUpdateGlobalTableSettingsReplicaSettingsUpdateReplicaProvisionedReadCapacityAutoScalingSettingsUpdateScalingPolicyUpdate`
    `TargetTrackingScalingPolicyConfiguration`

    Represents a target tracking scaling policy configuration.

    - **DisableScaleIn** *(boolean) --*

      Indicates whether scale in by the target tracking policy is disabled. If the value is true,
      scale in is disabled and the target tracking policy won't remove capacity from the scalable
      resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity
      from the scalable resource. The default value is false.

    - **ScaleInCooldown** *(integer) --*

      The amount of time, in seconds, after a scale in activity completes before another scale in
      activity can start. The cooldown period is used to block subsequent scale in requests until it
      has expired. You should scale in conservatively to protect your application's availability.
      However, if another alarm triggers a scale out policy during the cooldown period after a
      scale-in, application auto scaling scales out your scalable target immediately.

    - **ScaleOutCooldown** *(integer) --*

      The amount of time, in seconds, after a scale out activity completes before another scale out
      activity can start. While the cooldown period is in effect, the capacity that has been added
      by the previous scale out event that initiated the cooldown is calculated as part of the
      desired capacity for the next scale out. You should continuously (but not excessively) scale
      out.

    - **TargetValue** *(float) --* **[REQUIRED]**

      The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or
      2e-360 to 2e360 (Base 2).
    """


_RequiredClientUpdateGlobalTableSettingsReplicaSettingsUpdateReplicaProvisionedReadCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTypeDef = TypedDict(
    "_RequiredClientUpdateGlobalTableSettingsReplicaSettingsUpdateReplicaProvisionedReadCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTypeDef",
    {
        "TargetTrackingScalingPolicyConfiguration": ClientUpdateGlobalTableSettingsReplicaSettingsUpdateReplicaProvisionedReadCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef
    },
)
_OptionalClientUpdateGlobalTableSettingsReplicaSettingsUpdateReplicaProvisionedReadCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTypeDef = TypedDict(
    "_OptionalClientUpdateGlobalTableSettingsReplicaSettingsUpdateReplicaProvisionedReadCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTypeDef",
    {"PolicyName": str},
    total=False,
)


class ClientUpdateGlobalTableSettingsReplicaSettingsUpdateReplicaProvisionedReadCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTypeDef(
    _RequiredClientUpdateGlobalTableSettingsReplicaSettingsUpdateReplicaProvisionedReadCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTypeDef,
    _OptionalClientUpdateGlobalTableSettingsReplicaSettingsUpdateReplicaProvisionedReadCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTypeDef,
):
    """
    Type definition for
    `ClientUpdateGlobalTableSettingsReplicaSettingsUpdateReplicaProvisionedReadCapacityAutoScalingSettingsUpdate`
    `ScalingPolicyUpdate`

    The scaling policy to apply for scaling target global table or global secondary index capacity
    units.

    - **PolicyName** *(string) --*

      The name of the scaling policy.

    - **TargetTrackingScalingPolicyConfiguration** *(dict) --* **[REQUIRED]**

      Represents a target tracking scaling policy configuration.

      - **DisableScaleIn** *(boolean) --*

        Indicates whether scale in by the target tracking policy is disabled. If the value is true,
        scale in is disabled and the target tracking policy won't remove capacity from the scalable
        resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity
        from the scalable resource. The default value is false.

      - **ScaleInCooldown** *(integer) --*

        The amount of time, in seconds, after a scale in activity completes before another scale in
        activity can start. The cooldown period is used to block subsequent scale in requests until
        it has expired. You should scale in conservatively to protect your application's
        availability. However, if another alarm triggers a scale out policy during the cooldown
        period after a scale-in, application auto scaling scales out your scalable target
        immediately.

      - **ScaleOutCooldown** *(integer) --*

        The amount of time, in seconds, after a scale out activity completes before another scale
        out activity can start. While the cooldown period is in effect, the capacity that has been
        added by the previous scale out event that initiated the cooldown is calculated as part of
        the desired capacity for the next scale out. You should continuously (but not excessively)
        scale out.

      - **TargetValue** *(float) --* **[REQUIRED]**

        The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or
        2e-360 to 2e360 (Base 2).
    """


_ClientUpdateGlobalTableSettingsReplicaSettingsUpdateReplicaProvisionedReadCapacityAutoScalingSettingsUpdateTypeDef = TypedDict(
    "_ClientUpdateGlobalTableSettingsReplicaSettingsUpdateReplicaProvisionedReadCapacityAutoScalingSettingsUpdateTypeDef",
    {
        "MinimumUnits": int,
        "MaximumUnits": int,
        "AutoScalingDisabled": bool,
        "AutoScalingRoleArn": str,
        "ScalingPolicyUpdate": ClientUpdateGlobalTableSettingsReplicaSettingsUpdateReplicaProvisionedReadCapacityAutoScalingSettingsUpdateScalingPolicyUpdateTypeDef,
    },
    total=False,
)


class ClientUpdateGlobalTableSettingsReplicaSettingsUpdateReplicaProvisionedReadCapacityAutoScalingSettingsUpdateTypeDef(
    _ClientUpdateGlobalTableSettingsReplicaSettingsUpdateReplicaProvisionedReadCapacityAutoScalingSettingsUpdateTypeDef
):
    """
    Type definition for `ClientUpdateGlobalTableSettingsReplicaSettingsUpdate`
    `ReplicaProvisionedReadCapacityAutoScalingSettingsUpdate`

    Auto scaling settings for managing a global table replica's read capacity units.

    - **MinimumUnits** *(integer) --*

      The minimum capacity units that a global table or global secondary index should be scaled down
      to.

    - **MaximumUnits** *(integer) --*

      The maximum capacity units that a global table or global secondary index should be scaled up
      to.

    - **AutoScalingDisabled** *(boolean) --*

      Disabled auto scaling for this global table or global secondary index.

    - **AutoScalingRoleArn** *(string) --*

      Role ARN used for configuring auto scaling policy.

    - **ScalingPolicyUpdate** *(dict) --*

      The scaling policy to apply for scaling target global table or global secondary index capacity
      units.

      - **PolicyName** *(string) --*

        The name of the scaling policy.

      - **TargetTrackingScalingPolicyConfiguration** *(dict) --* **[REQUIRED]**

        Represents a target tracking scaling policy configuration.

        - **DisableScaleIn** *(boolean) --*

          Indicates whether scale in by the target tracking policy is disabled. If the value is
          true, scale in is disabled and the target tracking policy won't remove capacity from the
          scalable resource. Otherwise, scale in is enabled and the target tracking policy can
          remove capacity from the scalable resource. The default value is false.

        - **ScaleInCooldown** *(integer) --*

          The amount of time, in seconds, after a scale in activity completes before another scale
          in activity can start. The cooldown period is used to block subsequent scale in requests
          until it has expired. You should scale in conservatively to protect your application's
          availability. However, if another alarm triggers a scale out policy during the cooldown
          period after a scale-in, application auto scaling scales out your scalable target
          immediately.

        - **ScaleOutCooldown** *(integer) --*

          The amount of time, in seconds, after a scale out activity completes before another scale
          out activity can start. While the cooldown period is in effect, the capacity that has been
          added by the previous scale out event that initiated the cooldown is calculated as part of
          the desired capacity for the next scale out. You should continuously (but not excessively)
          scale out.

        - **TargetValue** *(float) --* **[REQUIRED]**

          The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or
          2e-360 to 2e360 (Base 2).
    """


_RequiredClientUpdateGlobalTableSettingsReplicaSettingsUpdateTypeDef = TypedDict(
    "_RequiredClientUpdateGlobalTableSettingsReplicaSettingsUpdateTypeDef", {"RegionName": str}
)
_OptionalClientUpdateGlobalTableSettingsReplicaSettingsUpdateTypeDef = TypedDict(
    "_OptionalClientUpdateGlobalTableSettingsReplicaSettingsUpdateTypeDef",
    {
        "ReplicaProvisionedReadCapacityUnits": int,
        "ReplicaProvisionedReadCapacityAutoScalingSettingsUpdate": ClientUpdateGlobalTableSettingsReplicaSettingsUpdateReplicaProvisionedReadCapacityAutoScalingSettingsUpdateTypeDef,
        "ReplicaGlobalSecondaryIndexSettingsUpdate": List[
            ClientUpdateGlobalTableSettingsReplicaSettingsUpdateReplicaGlobalSecondaryIndexSettingsUpdateTypeDef
        ],
    },
    total=False,
)


class ClientUpdateGlobalTableSettingsReplicaSettingsUpdateTypeDef(
    _RequiredClientUpdateGlobalTableSettingsReplicaSettingsUpdateTypeDef,
    _OptionalClientUpdateGlobalTableSettingsReplicaSettingsUpdateTypeDef,
):
    """
    Type definition for `ClientUpdateGlobalTableSettings` `ReplicaSettingsUpdate`

    Represents the settings for a global table in a Region that will be modified.

    - **RegionName** *(string) --* **[REQUIRED]**

      The Region of the replica to be added.

    - **ReplicaProvisionedReadCapacityUnits** *(integer) --*

      The maximum number of strongly consistent reads consumed per second before DynamoDB returns a
      ``ThrottlingException`` . For more information, see `Specifying Read and Write Requirements
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
      in the *Amazon DynamoDB Developer Guide* .

    - **ReplicaProvisionedReadCapacityAutoScalingSettingsUpdate** *(dict) --*

      Auto scaling settings for managing a global table replica's read capacity units.

      - **MinimumUnits** *(integer) --*

        The minimum capacity units that a global table or global secondary index should be scaled
        down to.

      - **MaximumUnits** *(integer) --*

        The maximum capacity units that a global table or global secondary index should be scaled up
        to.

      - **AutoScalingDisabled** *(boolean) --*

        Disabled auto scaling for this global table or global secondary index.

      - **AutoScalingRoleArn** *(string) --*

        Role ARN used for configuring auto scaling policy.

      - **ScalingPolicyUpdate** *(dict) --*

        The scaling policy to apply for scaling target global table or global secondary index
        capacity units.

        - **PolicyName** *(string) --*

          The name of the scaling policy.

        - **TargetTrackingScalingPolicyConfiguration** *(dict) --* **[REQUIRED]**

          Represents a target tracking scaling policy configuration.

          - **DisableScaleIn** *(boolean) --*

            Indicates whether scale in by the target tracking policy is disabled. If the value is
            true, scale in is disabled and the target tracking policy won't remove capacity from the
            scalable resource. Otherwise, scale in is enabled and the target tracking policy can
            remove capacity from the scalable resource. The default value is false.

          - **ScaleInCooldown** *(integer) --*

            The amount of time, in seconds, after a scale in activity completes before another scale
            in activity can start. The cooldown period is used to block subsequent scale in requests
            until it has expired. You should scale in conservatively to protect your application's
            availability. However, if another alarm triggers a scale out policy during the cooldown
            period after a scale-in, application auto scaling scales out your scalable target
            immediately.

          - **ScaleOutCooldown** *(integer) --*

            The amount of time, in seconds, after a scale out activity completes before another
            scale out activity can start. While the cooldown period is in effect, the capacity that
            has been added by the previous scale out event that initiated the cooldown is calculated
            as part of the desired capacity for the next scale out. You should continuously (but not
            excessively) scale out.

          - **TargetValue** *(float) --* **[REQUIRED]**

            The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10)
            or 2e-360 to 2e360 (Base 2).

    - **ReplicaGlobalSecondaryIndexSettingsUpdate** *(list) --*

      Represents the settings of a global secondary index for a global table that will be modified.

      - *(dict) --*

        Represents the settings of a global secondary index for a global table that will be
        modified.

        - **IndexName** *(string) --* **[REQUIRED]**

          The name of the global secondary index. The name must be unique among all other indexes on
          this table.

        - **ProvisionedReadCapacityUnits** *(integer) --*

          The maximum number of strongly consistent reads consumed per second before DynamoDB
          returns a ``ThrottlingException`` .

        - **ProvisionedReadCapacityAutoScalingSettingsUpdate** *(dict) --*

          Auto scaling settings for managing a global secondary index replica's read capacity units.

          - **MinimumUnits** *(integer) --*

            The minimum capacity units that a global table or global secondary index should be
            scaled down to.

          - **MaximumUnits** *(integer) --*

            The maximum capacity units that a global table or global secondary index should be
            scaled up to.

          - **AutoScalingDisabled** *(boolean) --*

            Disabled auto scaling for this global table or global secondary index.

          - **AutoScalingRoleArn** *(string) --*

            Role ARN used for configuring auto scaling policy.

          - **ScalingPolicyUpdate** *(dict) --*

            The scaling policy to apply for scaling target global table or global secondary index
            capacity units.

            - **PolicyName** *(string) --*

              The name of the scaling policy.

            - **TargetTrackingScalingPolicyConfiguration** *(dict) --* **[REQUIRED]**

              Represents a target tracking scaling policy configuration.

              - **DisableScaleIn** *(boolean) --*

                Indicates whether scale in by the target tracking policy is disabled. If the value
                is true, scale in is disabled and the target tracking policy won't remove capacity
                from the scalable resource. Otherwise, scale in is enabled and the target tracking
                policy can remove capacity from the scalable resource. The default value is false.

              - **ScaleInCooldown** *(integer) --*

                The amount of time, in seconds, after a scale in activity completes before another
                scale in activity can start. The cooldown period is used to block subsequent scale
                in requests until it has expired. You should scale in conservatively to protect your
                application's availability. However, if another alarm triggers a scale out policy
                during the cooldown period after a scale-in, application auto scaling scales out
                your scalable target immediately.

              - **ScaleOutCooldown** *(integer) --*

                The amount of time, in seconds, after a scale out activity completes before another
                scale out activity can start. While the cooldown period is in effect, the capacity
                that has been added by the previous scale out event that initiated the cooldown is
                calculated as part of the desired capacity for the next scale out. You should
                continuously (but not excessively) scale out.

              - **TargetValue** *(float) --* **[REQUIRED]**

                The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base
                10) or 2e-360 to 2e360 (Base 2).
    """


_ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaBillingModeSummaryTypeDef = TypedDict(
    "_ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaBillingModeSummaryTypeDef",
    {"BillingMode": str, "LastUpdateToPayPerRequestDateTime": datetime},
    total=False,
)


class ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaBillingModeSummaryTypeDef(
    _ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaBillingModeSummaryTypeDef
):
    """
    Type definition for `ClientUpdateGlobalTableSettingsResponseReplicaSettings`
    `ReplicaBillingModeSummary`

    The read/write capacity mode of the replica.

    - **BillingMode** *(string) --*

      Controls how you are charged for read and write throughput and how you manage capacity. This
      setting can be changed later.

      * ``PROVISIONED`` - Sets the read/write capacity mode to ``PROVISIONED`` . We recommend using
      ``PROVISIONED`` for predictable workloads.

      * ``PAY_PER_REQUEST`` - Sets the read/write capacity mode to ``PAY_PER_REQUEST`` . We
      recommend using ``PAY_PER_REQUEST`` for unpredictable workloads.

    - **LastUpdateToPayPerRequestDateTime** *(datetime) --*

      Represents the time when ``PAY_PER_REQUEST`` was last set as the read/write capacity mode.
    """


_ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef = TypedDict(
    "_ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef",
    {"DisableScaleIn": bool, "ScaleInCooldown": int, "ScaleOutCooldown": int, "TargetValue": float},
    total=False,
)


class ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef(
    _ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef
):
    """
    Type definition for
    `ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedReadCapacityAutoScalingSettingsScalingPolicies`
    `TargetTrackingScalingPolicyConfiguration`

    Represents a target tracking scaling policy configuration.

    - **DisableScaleIn** *(boolean) --*

      Indicates whether scale in by the target tracking policy is disabled. If the value is true,
      scale in is disabled and the target tracking policy won't remove capacity from the scalable
      resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity
      from the scalable resource. The default value is false.

    - **ScaleInCooldown** *(integer) --*

      The amount of time, in seconds, after a scale in activity completes before another scale in
      activity can start. The cooldown period is used to block subsequent scale in requests until it
      has expired. You should scale in conservatively to protect your application's availability.
      However, if another alarm triggers a scale out policy during the cooldown period after a
      scale-in, application auto scaling scales out your scalable target immediately.

    - **ScaleOutCooldown** *(integer) --*

      The amount of time, in seconds, after a scale out activity completes before another scale out
      activity can start. While the cooldown period is in effect, the capacity that has been added
      by the previous scale out event that initiated the cooldown is calculated as part of the
      desired capacity for the next scale out. You should continuously (but not excessively) scale
      out.

    - **TargetValue** *(float) --*

      The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or
      2e-360 to 2e360 (Base 2).
    """


_ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTypeDef = TypedDict(
    "_ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTypeDef",
    {
        "PolicyName": str,
        "TargetTrackingScalingPolicyConfiguration": ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef,
    },
    total=False,
)


class ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTypeDef(
    _ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTypeDef
):
    """
    Type definition for
    `ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedReadCapacityAutoScalingSettings`
    `ScalingPolicies`

    Represents the properties of the scaling policy.

    - **PolicyName** *(string) --*

      The name of the scaling policy.

    - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

      Represents a target tracking scaling policy configuration.

      - **DisableScaleIn** *(boolean) --*

        Indicates whether scale in by the target tracking policy is disabled. If the value is true,
        scale in is disabled and the target tracking policy won't remove capacity from the scalable
        resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity
        from the scalable resource. The default value is false.

      - **ScaleInCooldown** *(integer) --*

        The amount of time, in seconds, after a scale in activity completes before another scale in
        activity can start. The cooldown period is used to block subsequent scale in requests until
        it has expired. You should scale in conservatively to protect your application's
        availability. However, if another alarm triggers a scale out policy during the cooldown
        period after a scale-in, application auto scaling scales out your scalable target
        immediately.

      - **ScaleOutCooldown** *(integer) --*

        The amount of time, in seconds, after a scale out activity completes before another scale
        out activity can start. While the cooldown period is in effect, the capacity that has been
        added by the previous scale out event that initiated the cooldown is calculated as part of
        the desired capacity for the next scale out. You should continuously (but not excessively)
        scale out.

      - **TargetValue** *(float) --*

        The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or
        2e-360 to 2e360 (Base 2).
    """


_ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedReadCapacityAutoScalingSettingsTypeDef = TypedDict(
    "_ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedReadCapacityAutoScalingSettingsTypeDef",
    {
        "MinimumUnits": int,
        "MaximumUnits": int,
        "AutoScalingDisabled": bool,
        "AutoScalingRoleArn": str,
        "ScalingPolicies": List[
            ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTypeDef
        ],
    },
    total=False,
)


class ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedReadCapacityAutoScalingSettingsTypeDef(
    _ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedReadCapacityAutoScalingSettingsTypeDef
):
    """
    Type definition for
    `ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettings`
    `ProvisionedReadCapacityAutoScalingSettings`

    Auto scaling settings for a global secondary index replica's read capacity units.

    - **MinimumUnits** *(integer) --*

      The minimum capacity units that a global table or global secondary index should be scaled down
      to.

    - **MaximumUnits** *(integer) --*

      The maximum capacity units that a global table or global secondary index should be scaled up
      to.

    - **AutoScalingDisabled** *(boolean) --*

      Disabled auto scaling for this global table or global secondary index.

    - **AutoScalingRoleArn** *(string) --*

      Role ARN used for configuring the auto scaling policy.

    - **ScalingPolicies** *(list) --*

      Information about the scaling policies.

      - *(dict) --*

        Represents the properties of the scaling policy.

        - **PolicyName** *(string) --*

          The name of the scaling policy.

        - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

          Represents a target tracking scaling policy configuration.

          - **DisableScaleIn** *(boolean) --*

            Indicates whether scale in by the target tracking policy is disabled. If the value is
            true, scale in is disabled and the target tracking policy won't remove capacity from the
            scalable resource. Otherwise, scale in is enabled and the target tracking policy can
            remove capacity from the scalable resource. The default value is false.

          - **ScaleInCooldown** *(integer) --*

            The amount of time, in seconds, after a scale in activity completes before another scale
            in activity can start. The cooldown period is used to block subsequent scale in requests
            until it has expired. You should scale in conservatively to protect your application's
            availability. However, if another alarm triggers a scale out policy during the cooldown
            period after a scale-in, application auto scaling scales out your scalable target
            immediately.

          - **ScaleOutCooldown** *(integer) --*

            The amount of time, in seconds, after a scale out activity completes before another
            scale out activity can start. While the cooldown period is in effect, the capacity that
            has been added by the previous scale out event that initiated the cooldown is calculated
            as part of the desired capacity for the next scale out. You should continuously (but not
            excessively) scale out.

          - **TargetValue** *(float) --*

            The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10)
            or 2e-360 to 2e360 (Base 2).
    """


_ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef = TypedDict(
    "_ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef",
    {"DisableScaleIn": bool, "ScaleInCooldown": int, "ScaleOutCooldown": int, "TargetValue": float},
    total=False,
)


class ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef(
    _ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef
):
    """
    Type definition for
    `ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedWriteCapacityAutoScalingSettingsScalingPolicies`
    `TargetTrackingScalingPolicyConfiguration`

    Represents a target tracking scaling policy configuration.

    - **DisableScaleIn** *(boolean) --*

      Indicates whether scale in by the target tracking policy is disabled. If the value is true,
      scale in is disabled and the target tracking policy won't remove capacity from the scalable
      resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity
      from the scalable resource. The default value is false.

    - **ScaleInCooldown** *(integer) --*

      The amount of time, in seconds, after a scale in activity completes before another scale in
      activity can start. The cooldown period is used to block subsequent scale in requests until it
      has expired. You should scale in conservatively to protect your application's availability.
      However, if another alarm triggers a scale out policy during the cooldown period after a
      scale-in, application auto scaling scales out your scalable target immediately.

    - **ScaleOutCooldown** *(integer) --*

      The amount of time, in seconds, after a scale out activity completes before another scale out
      activity can start. While the cooldown period is in effect, the capacity that has been added
      by the previous scale out event that initiated the cooldown is calculated as part of the
      desired capacity for the next scale out. You should continuously (but not excessively) scale
      out.

    - **TargetValue** *(float) --*

      The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or
      2e-360 to 2e360 (Base 2).
    """


_ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTypeDef = TypedDict(
    "_ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTypeDef",
    {
        "PolicyName": str,
        "TargetTrackingScalingPolicyConfiguration": ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef,
    },
    total=False,
)


class ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTypeDef(
    _ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTypeDef
):
    """
    Type definition for
    `ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedWriteCapacityAutoScalingSettings`
    `ScalingPolicies`

    Represents the properties of the scaling policy.

    - **PolicyName** *(string) --*

      The name of the scaling policy.

    - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

      Represents a target tracking scaling policy configuration.

      - **DisableScaleIn** *(boolean) --*

        Indicates whether scale in by the target tracking policy is disabled. If the value is true,
        scale in is disabled and the target tracking policy won't remove capacity from the scalable
        resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity
        from the scalable resource. The default value is false.

      - **ScaleInCooldown** *(integer) --*

        The amount of time, in seconds, after a scale in activity completes before another scale in
        activity can start. The cooldown period is used to block subsequent scale in requests until
        it has expired. You should scale in conservatively to protect your application's
        availability. However, if another alarm triggers a scale out policy during the cooldown
        period after a scale-in, application auto scaling scales out your scalable target
        immediately.

      - **ScaleOutCooldown** *(integer) --*

        The amount of time, in seconds, after a scale out activity completes before another scale
        out activity can start. While the cooldown period is in effect, the capacity that has been
        added by the previous scale out event that initiated the cooldown is calculated as part of
        the desired capacity for the next scale out. You should continuously (but not excessively)
        scale out.

      - **TargetValue** *(float) --*

        The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or
        2e-360 to 2e360 (Base 2).
    """


_ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedWriteCapacityAutoScalingSettingsTypeDef = TypedDict(
    "_ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedWriteCapacityAutoScalingSettingsTypeDef",
    {
        "MinimumUnits": int,
        "MaximumUnits": int,
        "AutoScalingDisabled": bool,
        "AutoScalingRoleArn": str,
        "ScalingPolicies": List[
            ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTypeDef
        ],
    },
    total=False,
)


class ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedWriteCapacityAutoScalingSettingsTypeDef(
    _ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedWriteCapacityAutoScalingSettingsTypeDef
):
    """
    Type definition for
    `ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettings`
    `ProvisionedWriteCapacityAutoScalingSettings`

    Auto scaling settings for a global secondary index replica's write capacity units.

    - **MinimumUnits** *(integer) --*

      The minimum capacity units that a global table or global secondary index should be scaled down
      to.

    - **MaximumUnits** *(integer) --*

      The maximum capacity units that a global table or global secondary index should be scaled up
      to.

    - **AutoScalingDisabled** *(boolean) --*

      Disabled auto scaling for this global table or global secondary index.

    - **AutoScalingRoleArn** *(string) --*

      Role ARN used for configuring the auto scaling policy.

    - **ScalingPolicies** *(list) --*

      Information about the scaling policies.

      - *(dict) --*

        Represents the properties of the scaling policy.

        - **PolicyName** *(string) --*

          The name of the scaling policy.

        - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

          Represents a target tracking scaling policy configuration.

          - **DisableScaleIn** *(boolean) --*

            Indicates whether scale in by the target tracking policy is disabled. If the value is
            true, scale in is disabled and the target tracking policy won't remove capacity from the
            scalable resource. Otherwise, scale in is enabled and the target tracking policy can
            remove capacity from the scalable resource. The default value is false.

          - **ScaleInCooldown** *(integer) --*

            The amount of time, in seconds, after a scale in activity completes before another scale
            in activity can start. The cooldown period is used to block subsequent scale in requests
            until it has expired. You should scale in conservatively to protect your application's
            availability. However, if another alarm triggers a scale out policy during the cooldown
            period after a scale-in, application auto scaling scales out your scalable target
            immediately.

          - **ScaleOutCooldown** *(integer) --*

            The amount of time, in seconds, after a scale out activity completes before another
            scale out activity can start. While the cooldown period is in effect, the capacity that
            has been added by the previous scale out event that initiated the cooldown is calculated
            as part of the desired capacity for the next scale out. You should continuously (but not
            excessively) scale out.

          - **TargetValue** *(float) --*

            The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10)
            or 2e-360 to 2e360 (Base 2).
    """


_ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsTypeDef = TypedDict(
    "_ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsTypeDef",
    {
        "IndexName": str,
        "IndexStatus": str,
        "ProvisionedReadCapacityUnits": int,
        "ProvisionedReadCapacityAutoScalingSettings": ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedReadCapacityAutoScalingSettingsTypeDef,
        "ProvisionedWriteCapacityUnits": int,
        "ProvisionedWriteCapacityAutoScalingSettings": ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsProvisionedWriteCapacityAutoScalingSettingsTypeDef,
    },
    total=False,
)


class ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsTypeDef(
    _ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsTypeDef
):
    """
    Type definition for `ClientUpdateGlobalTableSettingsResponseReplicaSettings`
    `ReplicaGlobalSecondaryIndexSettings`

    Represents the properties of a global secondary index.

    - **IndexName** *(string) --*

      The name of the global secondary index. The name must be unique among all other indexes on
      this table.

    - **IndexStatus** *(string) --*

      The current status of the global secondary index:

      * ``CREATING`` - The global secondary index is being created.

      * ``UPDATING`` - The global secondary index is being updated.

      * ``DELETING`` - The global secondary index is being deleted.

      * ``ACTIVE`` - The global secondary index is ready for use.

    - **ProvisionedReadCapacityUnits** *(integer) --*

      The maximum number of strongly consistent reads consumed per second before DynamoDB returns a
      ``ThrottlingException`` .

    - **ProvisionedReadCapacityAutoScalingSettings** *(dict) --*

      Auto scaling settings for a global secondary index replica's read capacity units.

      - **MinimumUnits** *(integer) --*

        The minimum capacity units that a global table or global secondary index should be scaled
        down to.

      - **MaximumUnits** *(integer) --*

        The maximum capacity units that a global table or global secondary index should be scaled up
        to.

      - **AutoScalingDisabled** *(boolean) --*

        Disabled auto scaling for this global table or global secondary index.

      - **AutoScalingRoleArn** *(string) --*

        Role ARN used for configuring the auto scaling policy.

      - **ScalingPolicies** *(list) --*

        Information about the scaling policies.

        - *(dict) --*

          Represents the properties of the scaling policy.

          - **PolicyName** *(string) --*

            The name of the scaling policy.

          - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

            Represents a target tracking scaling policy configuration.

            - **DisableScaleIn** *(boolean) --*

              Indicates whether scale in by the target tracking policy is disabled. If the value is
              true, scale in is disabled and the target tracking policy won't remove capacity from
              the scalable resource. Otherwise, scale in is enabled and the target tracking policy
              can remove capacity from the scalable resource. The default value is false.

            - **ScaleInCooldown** *(integer) --*

              The amount of time, in seconds, after a scale in activity completes before another
              scale in activity can start. The cooldown period is used to block subsequent scale in
              requests until it has expired. You should scale in conservatively to protect your
              application's availability. However, if another alarm triggers a scale out policy
              during the cooldown period after a scale-in, application auto scaling scales out your
              scalable target immediately.

            - **ScaleOutCooldown** *(integer) --*

              The amount of time, in seconds, after a scale out activity completes before another
              scale out activity can start. While the cooldown period is in effect, the capacity
              that has been added by the previous scale out event that initiated the cooldown is
              calculated as part of the desired capacity for the next scale out. You should
              continuously (but not excessively) scale out.

            - **TargetValue** *(float) --*

              The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10)
              or 2e-360 to 2e360 (Base 2).

    - **ProvisionedWriteCapacityUnits** *(integer) --*

      The maximum number of writes consumed per second before DynamoDB returns a
      ``ThrottlingException`` .

    - **ProvisionedWriteCapacityAutoScalingSettings** *(dict) --*

      Auto scaling settings for a global secondary index replica's write capacity units.

      - **MinimumUnits** *(integer) --*

        The minimum capacity units that a global table or global secondary index should be scaled
        down to.

      - **MaximumUnits** *(integer) --*

        The maximum capacity units that a global table or global secondary index should be scaled up
        to.

      - **AutoScalingDisabled** *(boolean) --*

        Disabled auto scaling for this global table or global secondary index.

      - **AutoScalingRoleArn** *(string) --*

        Role ARN used for configuring the auto scaling policy.

      - **ScalingPolicies** *(list) --*

        Information about the scaling policies.

        - *(dict) --*

          Represents the properties of the scaling policy.

          - **PolicyName** *(string) --*

            The name of the scaling policy.

          - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

            Represents a target tracking scaling policy configuration.

            - **DisableScaleIn** *(boolean) --*

              Indicates whether scale in by the target tracking policy is disabled. If the value is
              true, scale in is disabled and the target tracking policy won't remove capacity from
              the scalable resource. Otherwise, scale in is enabled and the target tracking policy
              can remove capacity from the scalable resource. The default value is false.

            - **ScaleInCooldown** *(integer) --*

              The amount of time, in seconds, after a scale in activity completes before another
              scale in activity can start. The cooldown period is used to block subsequent scale in
              requests until it has expired. You should scale in conservatively to protect your
              application's availability. However, if another alarm triggers a scale out policy
              during the cooldown period after a scale-in, application auto scaling scales out your
              scalable target immediately.

            - **ScaleOutCooldown** *(integer) --*

              The amount of time, in seconds, after a scale out activity completes before another
              scale out activity can start. While the cooldown period is in effect, the capacity
              that has been added by the previous scale out event that initiated the cooldown is
              calculated as part of the desired capacity for the next scale out. You should
              continuously (but not excessively) scale out.

            - **TargetValue** *(float) --*

              The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10)
              or 2e-360 to 2e360 (Base 2).
    """


_ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef = TypedDict(
    "_ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef",
    {"DisableScaleIn": bool, "ScaleInCooldown": int, "ScaleOutCooldown": int, "TargetValue": float},
    total=False,
)


class ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef(
    _ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef
):
    """
    Type definition for
    `ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedReadCapacityAutoScalingSettingsScalingPolicies`
    `TargetTrackingScalingPolicyConfiguration`

    Represents a target tracking scaling policy configuration.

    - **DisableScaleIn** *(boolean) --*

      Indicates whether scale in by the target tracking policy is disabled. If the value is true,
      scale in is disabled and the target tracking policy won't remove capacity from the scalable
      resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity
      from the scalable resource. The default value is false.

    - **ScaleInCooldown** *(integer) --*

      The amount of time, in seconds, after a scale in activity completes before another scale in
      activity can start. The cooldown period is used to block subsequent scale in requests until it
      has expired. You should scale in conservatively to protect your application's availability.
      However, if another alarm triggers a scale out policy during the cooldown period after a
      scale-in, application auto scaling scales out your scalable target immediately.

    - **ScaleOutCooldown** *(integer) --*

      The amount of time, in seconds, after a scale out activity completes before another scale out
      activity can start. While the cooldown period is in effect, the capacity that has been added
      by the previous scale out event that initiated the cooldown is calculated as part of the
      desired capacity for the next scale out. You should continuously (but not excessively) scale
      out.

    - **TargetValue** *(float) --*

      The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or
      2e-360 to 2e360 (Base 2).
    """


_ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTypeDef = TypedDict(
    "_ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTypeDef",
    {
        "PolicyName": str,
        "TargetTrackingScalingPolicyConfiguration": ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef,
    },
    total=False,
)


class ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTypeDef(
    _ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTypeDef
):
    """
    Type definition for
    `ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedReadCapacityAutoScalingSettings`
    `ScalingPolicies`

    Represents the properties of the scaling policy.

    - **PolicyName** *(string) --*

      The name of the scaling policy.

    - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

      Represents a target tracking scaling policy configuration.

      - **DisableScaleIn** *(boolean) --*

        Indicates whether scale in by the target tracking policy is disabled. If the value is true,
        scale in is disabled and the target tracking policy won't remove capacity from the scalable
        resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity
        from the scalable resource. The default value is false.

      - **ScaleInCooldown** *(integer) --*

        The amount of time, in seconds, after a scale in activity completes before another scale in
        activity can start. The cooldown period is used to block subsequent scale in requests until
        it has expired. You should scale in conservatively to protect your application's
        availability. However, if another alarm triggers a scale out policy during the cooldown
        period after a scale-in, application auto scaling scales out your scalable target
        immediately.

      - **ScaleOutCooldown** *(integer) --*

        The amount of time, in seconds, after a scale out activity completes before another scale
        out activity can start. While the cooldown period is in effect, the capacity that has been
        added by the previous scale out event that initiated the cooldown is calculated as part of
        the desired capacity for the next scale out. You should continuously (but not excessively)
        scale out.

      - **TargetValue** *(float) --*

        The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or
        2e-360 to 2e360 (Base 2).
    """


_ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedReadCapacityAutoScalingSettingsTypeDef = TypedDict(
    "_ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedReadCapacityAutoScalingSettingsTypeDef",
    {
        "MinimumUnits": int,
        "MaximumUnits": int,
        "AutoScalingDisabled": bool,
        "AutoScalingRoleArn": str,
        "ScalingPolicies": List[
            ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTypeDef
        ],
    },
    total=False,
)


class ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedReadCapacityAutoScalingSettingsTypeDef(
    _ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedReadCapacityAutoScalingSettingsTypeDef
):
    """
    Type definition for `ClientUpdateGlobalTableSettingsResponseReplicaSettings`
    `ReplicaProvisionedReadCapacityAutoScalingSettings`

    Auto scaling settings for a global table replica's read capacity units.

    - **MinimumUnits** *(integer) --*

      The minimum capacity units that a global table or global secondary index should be scaled down
      to.

    - **MaximumUnits** *(integer) --*

      The maximum capacity units that a global table or global secondary index should be scaled up
      to.

    - **AutoScalingDisabled** *(boolean) --*

      Disabled auto scaling for this global table or global secondary index.

    - **AutoScalingRoleArn** *(string) --*

      Role ARN used for configuring the auto scaling policy.

    - **ScalingPolicies** *(list) --*

      Information about the scaling policies.

      - *(dict) --*

        Represents the properties of the scaling policy.

        - **PolicyName** *(string) --*

          The name of the scaling policy.

        - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

          Represents a target tracking scaling policy configuration.

          - **DisableScaleIn** *(boolean) --*

            Indicates whether scale in by the target tracking policy is disabled. If the value is
            true, scale in is disabled and the target tracking policy won't remove capacity from the
            scalable resource. Otherwise, scale in is enabled and the target tracking policy can
            remove capacity from the scalable resource. The default value is false.

          - **ScaleInCooldown** *(integer) --*

            The amount of time, in seconds, after a scale in activity completes before another scale
            in activity can start. The cooldown period is used to block subsequent scale in requests
            until it has expired. You should scale in conservatively to protect your application's
            availability. However, if another alarm triggers a scale out policy during the cooldown
            period after a scale-in, application auto scaling scales out your scalable target
            immediately.

          - **ScaleOutCooldown** *(integer) --*

            The amount of time, in seconds, after a scale out activity completes before another
            scale out activity can start. While the cooldown period is in effect, the capacity that
            has been added by the previous scale out event that initiated the cooldown is calculated
            as part of the desired capacity for the next scale out. You should continuously (but not
            excessively) scale out.

          - **TargetValue** *(float) --*

            The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10)
            or 2e-360 to 2e360 (Base 2).
    """


_ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef = TypedDict(
    "_ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef",
    {"DisableScaleIn": bool, "ScaleInCooldown": int, "ScaleOutCooldown": int, "TargetValue": float},
    total=False,
)


class ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef(
    _ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef
):
    """
    Type definition for
    `ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedWriteCapacityAutoScalingSettingsScalingPolicies`
    `TargetTrackingScalingPolicyConfiguration`

    Represents a target tracking scaling policy configuration.

    - **DisableScaleIn** *(boolean) --*

      Indicates whether scale in by the target tracking policy is disabled. If the value is true,
      scale in is disabled and the target tracking policy won't remove capacity from the scalable
      resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity
      from the scalable resource. The default value is false.

    - **ScaleInCooldown** *(integer) --*

      The amount of time, in seconds, after a scale in activity completes before another scale in
      activity can start. The cooldown period is used to block subsequent scale in requests until it
      has expired. You should scale in conservatively to protect your application's availability.
      However, if another alarm triggers a scale out policy during the cooldown period after a
      scale-in, application auto scaling scales out your scalable target immediately.

    - **ScaleOutCooldown** *(integer) --*

      The amount of time, in seconds, after a scale out activity completes before another scale out
      activity can start. While the cooldown period is in effect, the capacity that has been added
      by the previous scale out event that initiated the cooldown is calculated as part of the
      desired capacity for the next scale out. You should continuously (but not excessively) scale
      out.

    - **TargetValue** *(float) --*

      The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or
      2e-360 to 2e360 (Base 2).
    """


_ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTypeDef = TypedDict(
    "_ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTypeDef",
    {
        "PolicyName": str,
        "TargetTrackingScalingPolicyConfiguration": ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef,
    },
    total=False,
)


class ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTypeDef(
    _ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTypeDef
):
    """
    Type definition for
    `ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedWriteCapacityAutoScalingSettings`
    `ScalingPolicies`

    Represents the properties of the scaling policy.

    - **PolicyName** *(string) --*

      The name of the scaling policy.

    - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

      Represents a target tracking scaling policy configuration.

      - **DisableScaleIn** *(boolean) --*

        Indicates whether scale in by the target tracking policy is disabled. If the value is true,
        scale in is disabled and the target tracking policy won't remove capacity from the scalable
        resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity
        from the scalable resource. The default value is false.

      - **ScaleInCooldown** *(integer) --*

        The amount of time, in seconds, after a scale in activity completes before another scale in
        activity can start. The cooldown period is used to block subsequent scale in requests until
        it has expired. You should scale in conservatively to protect your application's
        availability. However, if another alarm triggers a scale out policy during the cooldown
        period after a scale-in, application auto scaling scales out your scalable target
        immediately.

      - **ScaleOutCooldown** *(integer) --*

        The amount of time, in seconds, after a scale out activity completes before another scale
        out activity can start. While the cooldown period is in effect, the capacity that has been
        added by the previous scale out event that initiated the cooldown is calculated as part of
        the desired capacity for the next scale out. You should continuously (but not excessively)
        scale out.

      - **TargetValue** *(float) --*

        The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or
        2e-360 to 2e360 (Base 2).
    """


_ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedWriteCapacityAutoScalingSettingsTypeDef = TypedDict(
    "_ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedWriteCapacityAutoScalingSettingsTypeDef",
    {
        "MinimumUnits": int,
        "MaximumUnits": int,
        "AutoScalingDisabled": bool,
        "AutoScalingRoleArn": str,
        "ScalingPolicies": List[
            ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTypeDef
        ],
    },
    total=False,
)


class ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedWriteCapacityAutoScalingSettingsTypeDef(
    _ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedWriteCapacityAutoScalingSettingsTypeDef
):
    """
    Type definition for `ClientUpdateGlobalTableSettingsResponseReplicaSettings`
    `ReplicaProvisionedWriteCapacityAutoScalingSettings`

    Auto scaling settings for a global table replica's write capacity units.

    - **MinimumUnits** *(integer) --*

      The minimum capacity units that a global table or global secondary index should be scaled down
      to.

    - **MaximumUnits** *(integer) --*

      The maximum capacity units that a global table or global secondary index should be scaled up
      to.

    - **AutoScalingDisabled** *(boolean) --*

      Disabled auto scaling for this global table or global secondary index.

    - **AutoScalingRoleArn** *(string) --*

      Role ARN used for configuring the auto scaling policy.

    - **ScalingPolicies** *(list) --*

      Information about the scaling policies.

      - *(dict) --*

        Represents the properties of the scaling policy.

        - **PolicyName** *(string) --*

          The name of the scaling policy.

        - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

          Represents a target tracking scaling policy configuration.

          - **DisableScaleIn** *(boolean) --*

            Indicates whether scale in by the target tracking policy is disabled. If the value is
            true, scale in is disabled and the target tracking policy won't remove capacity from the
            scalable resource. Otherwise, scale in is enabled and the target tracking policy can
            remove capacity from the scalable resource. The default value is false.

          - **ScaleInCooldown** *(integer) --*

            The amount of time, in seconds, after a scale in activity completes before another scale
            in activity can start. The cooldown period is used to block subsequent scale in requests
            until it has expired. You should scale in conservatively to protect your application's
            availability. However, if another alarm triggers a scale out policy during the cooldown
            period after a scale-in, application auto scaling scales out your scalable target
            immediately.

          - **ScaleOutCooldown** *(integer) --*

            The amount of time, in seconds, after a scale out activity completes before another
            scale out activity can start. While the cooldown period is in effect, the capacity that
            has been added by the previous scale out event that initiated the cooldown is calculated
            as part of the desired capacity for the next scale out. You should continuously (but not
            excessively) scale out.

          - **TargetValue** *(float) --*

            The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10)
            or 2e-360 to 2e360 (Base 2).
    """


_ClientUpdateGlobalTableSettingsResponseReplicaSettingsTypeDef = TypedDict(
    "_ClientUpdateGlobalTableSettingsResponseReplicaSettingsTypeDef",
    {
        "RegionName": str,
        "ReplicaStatus": str,
        "ReplicaBillingModeSummary": ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaBillingModeSummaryTypeDef,
        "ReplicaProvisionedReadCapacityUnits": int,
        "ReplicaProvisionedReadCapacityAutoScalingSettings": ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedReadCapacityAutoScalingSettingsTypeDef,
        "ReplicaProvisionedWriteCapacityUnits": int,
        "ReplicaProvisionedWriteCapacityAutoScalingSettings": ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaProvisionedWriteCapacityAutoScalingSettingsTypeDef,
        "ReplicaGlobalSecondaryIndexSettings": List[
            ClientUpdateGlobalTableSettingsResponseReplicaSettingsReplicaGlobalSecondaryIndexSettingsTypeDef
        ],
    },
    total=False,
)


class ClientUpdateGlobalTableSettingsResponseReplicaSettingsTypeDef(
    _ClientUpdateGlobalTableSettingsResponseReplicaSettingsTypeDef
):
    """
    Type definition for `ClientUpdateGlobalTableSettingsResponse` `ReplicaSettings`

    Represents the properties of a replica.

    - **RegionName** *(string) --*

      The Region name of the replica.

    - **ReplicaStatus** *(string) --*

      The current state of the Region:

      * ``CREATING`` - The Region is being created.

      * ``UPDATING`` - The Region is being updated.

      * ``DELETING`` - The Region is being deleted.

      * ``ACTIVE`` - The Region is ready for use.

    - **ReplicaBillingModeSummary** *(dict) --*

      The read/write capacity mode of the replica.

      - **BillingMode** *(string) --*

        Controls how you are charged for read and write throughput and how you manage capacity. This
        setting can be changed later.

        * ``PROVISIONED`` - Sets the read/write capacity mode to ``PROVISIONED`` . We recommend
        using ``PROVISIONED`` for predictable workloads.

        * ``PAY_PER_REQUEST`` - Sets the read/write capacity mode to ``PAY_PER_REQUEST`` . We
        recommend using ``PAY_PER_REQUEST`` for unpredictable workloads.

      - **LastUpdateToPayPerRequestDateTime** *(datetime) --*

        Represents the time when ``PAY_PER_REQUEST`` was last set as the read/write capacity mode.

    - **ReplicaProvisionedReadCapacityUnits** *(integer) --*

      The maximum number of strongly consistent reads consumed per second before DynamoDB returns a
      ``ThrottlingException`` . For more information, see `Specifying Read and Write Requirements
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
      in the *Amazon DynamoDB Developer Guide* .

    - **ReplicaProvisionedReadCapacityAutoScalingSettings** *(dict) --*

      Auto scaling settings for a global table replica's read capacity units.

      - **MinimumUnits** *(integer) --*

        The minimum capacity units that a global table or global secondary index should be scaled
        down to.

      - **MaximumUnits** *(integer) --*

        The maximum capacity units that a global table or global secondary index should be scaled up
        to.

      - **AutoScalingDisabled** *(boolean) --*

        Disabled auto scaling for this global table or global secondary index.

      - **AutoScalingRoleArn** *(string) --*

        Role ARN used for configuring the auto scaling policy.

      - **ScalingPolicies** *(list) --*

        Information about the scaling policies.

        - *(dict) --*

          Represents the properties of the scaling policy.

          - **PolicyName** *(string) --*

            The name of the scaling policy.

          - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

            Represents a target tracking scaling policy configuration.

            - **DisableScaleIn** *(boolean) --*

              Indicates whether scale in by the target tracking policy is disabled. If the value is
              true, scale in is disabled and the target tracking policy won't remove capacity from
              the scalable resource. Otherwise, scale in is enabled and the target tracking policy
              can remove capacity from the scalable resource. The default value is false.

            - **ScaleInCooldown** *(integer) --*

              The amount of time, in seconds, after a scale in activity completes before another
              scale in activity can start. The cooldown period is used to block subsequent scale in
              requests until it has expired. You should scale in conservatively to protect your
              application's availability. However, if another alarm triggers a scale out policy
              during the cooldown period after a scale-in, application auto scaling scales out your
              scalable target immediately.

            - **ScaleOutCooldown** *(integer) --*

              The amount of time, in seconds, after a scale out activity completes before another
              scale out activity can start. While the cooldown period is in effect, the capacity
              that has been added by the previous scale out event that initiated the cooldown is
              calculated as part of the desired capacity for the next scale out. You should
              continuously (but not excessively) scale out.

            - **TargetValue** *(float) --*

              The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10)
              or 2e-360 to 2e360 (Base 2).

    - **ReplicaProvisionedWriteCapacityUnits** *(integer) --*

      The maximum number of writes consumed per second before DynamoDB returns a
      ``ThrottlingException`` . For more information, see `Specifying Read and Write Requirements
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
      in the *Amazon DynamoDB Developer Guide* .

    - **ReplicaProvisionedWriteCapacityAutoScalingSettings** *(dict) --*

      Auto scaling settings for a global table replica's write capacity units.

      - **MinimumUnits** *(integer) --*

        The minimum capacity units that a global table or global secondary index should be scaled
        down to.

      - **MaximumUnits** *(integer) --*

        The maximum capacity units that a global table or global secondary index should be scaled up
        to.

      - **AutoScalingDisabled** *(boolean) --*

        Disabled auto scaling for this global table or global secondary index.

      - **AutoScalingRoleArn** *(string) --*

        Role ARN used for configuring the auto scaling policy.

      - **ScalingPolicies** *(list) --*

        Information about the scaling policies.

        - *(dict) --*

          Represents the properties of the scaling policy.

          - **PolicyName** *(string) --*

            The name of the scaling policy.

          - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

            Represents a target tracking scaling policy configuration.

            - **DisableScaleIn** *(boolean) --*

              Indicates whether scale in by the target tracking policy is disabled. If the value is
              true, scale in is disabled and the target tracking policy won't remove capacity from
              the scalable resource. Otherwise, scale in is enabled and the target tracking policy
              can remove capacity from the scalable resource. The default value is false.

            - **ScaleInCooldown** *(integer) --*

              The amount of time, in seconds, after a scale in activity completes before another
              scale in activity can start. The cooldown period is used to block subsequent scale in
              requests until it has expired. You should scale in conservatively to protect your
              application's availability. However, if another alarm triggers a scale out policy
              during the cooldown period after a scale-in, application auto scaling scales out your
              scalable target immediately.

            - **ScaleOutCooldown** *(integer) --*

              The amount of time, in seconds, after a scale out activity completes before another
              scale out activity can start. While the cooldown period is in effect, the capacity
              that has been added by the previous scale out event that initiated the cooldown is
              calculated as part of the desired capacity for the next scale out. You should
              continuously (but not excessively) scale out.

            - **TargetValue** *(float) --*

              The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10)
              or 2e-360 to 2e360 (Base 2).

    - **ReplicaGlobalSecondaryIndexSettings** *(list) --*

      Replica global secondary index settings for the global table.

      - *(dict) --*

        Represents the properties of a global secondary index.

        - **IndexName** *(string) --*

          The name of the global secondary index. The name must be unique among all other indexes on
          this table.

        - **IndexStatus** *(string) --*

          The current status of the global secondary index:

          * ``CREATING`` - The global secondary index is being created.

          * ``UPDATING`` - The global secondary index is being updated.

          * ``DELETING`` - The global secondary index is being deleted.

          * ``ACTIVE`` - The global secondary index is ready for use.

        - **ProvisionedReadCapacityUnits** *(integer) --*

          The maximum number of strongly consistent reads consumed per second before DynamoDB
          returns a ``ThrottlingException`` .

        - **ProvisionedReadCapacityAutoScalingSettings** *(dict) --*

          Auto scaling settings for a global secondary index replica's read capacity units.

          - **MinimumUnits** *(integer) --*

            The minimum capacity units that a global table or global secondary index should be
            scaled down to.

          - **MaximumUnits** *(integer) --*

            The maximum capacity units that a global table or global secondary index should be
            scaled up to.

          - **AutoScalingDisabled** *(boolean) --*

            Disabled auto scaling for this global table or global secondary index.

          - **AutoScalingRoleArn** *(string) --*

            Role ARN used for configuring the auto scaling policy.

          - **ScalingPolicies** *(list) --*

            Information about the scaling policies.

            - *(dict) --*

              Represents the properties of the scaling policy.

              - **PolicyName** *(string) --*

                The name of the scaling policy.

              - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

                Represents a target tracking scaling policy configuration.

                - **DisableScaleIn** *(boolean) --*

                  Indicates whether scale in by the target tracking policy is disabled. If the value
                  is true, scale in is disabled and the target tracking policy won't remove capacity
                  from the scalable resource. Otherwise, scale in is enabled and the target tracking
                  policy can remove capacity from the scalable resource. The default value is false.

                - **ScaleInCooldown** *(integer) --*

                  The amount of time, in seconds, after a scale in activity completes before another
                  scale in activity can start. The cooldown period is used to block subsequent scale
                  in requests until it has expired. You should scale in conservatively to protect
                  your application's availability. However, if another alarm triggers a scale out
                  policy during the cooldown period after a scale-in, application auto scaling
                  scales out your scalable target immediately.

                - **ScaleOutCooldown** *(integer) --*

                  The amount of time, in seconds, after a scale out activity completes before
                  another scale out activity can start. While the cooldown period is in effect, the
                  capacity that has been added by the previous scale out event that initiated the
                  cooldown is calculated as part of the desired capacity for the next scale out. You
                  should continuously (but not excessively) scale out.

                - **TargetValue** *(float) --*

                  The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base
                  10) or 2e-360 to 2e360 (Base 2).

        - **ProvisionedWriteCapacityUnits** *(integer) --*

          The maximum number of writes consumed per second before DynamoDB returns a
          ``ThrottlingException`` .

        - **ProvisionedWriteCapacityAutoScalingSettings** *(dict) --*

          Auto scaling settings for a global secondary index replica's write capacity units.

          - **MinimumUnits** *(integer) --*

            The minimum capacity units that a global table or global secondary index should be
            scaled down to.

          - **MaximumUnits** *(integer) --*

            The maximum capacity units that a global table or global secondary index should be
            scaled up to.

          - **AutoScalingDisabled** *(boolean) --*

            Disabled auto scaling for this global table or global secondary index.

          - **AutoScalingRoleArn** *(string) --*

            Role ARN used for configuring the auto scaling policy.

          - **ScalingPolicies** *(list) --*

            Information about the scaling policies.

            - *(dict) --*

              Represents the properties of the scaling policy.

              - **PolicyName** *(string) --*

                The name of the scaling policy.

              - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

                Represents a target tracking scaling policy configuration.

                - **DisableScaleIn** *(boolean) --*

                  Indicates whether scale in by the target tracking policy is disabled. If the value
                  is true, scale in is disabled and the target tracking policy won't remove capacity
                  from the scalable resource. Otherwise, scale in is enabled and the target tracking
                  policy can remove capacity from the scalable resource. The default value is false.

                - **ScaleInCooldown** *(integer) --*

                  The amount of time, in seconds, after a scale in activity completes before another
                  scale in activity can start. The cooldown period is used to block subsequent scale
                  in requests until it has expired. You should scale in conservatively to protect
                  your application's availability. However, if another alarm triggers a scale out
                  policy during the cooldown period after a scale-in, application auto scaling
                  scales out your scalable target immediately.

                - **ScaleOutCooldown** *(integer) --*

                  The amount of time, in seconds, after a scale out activity completes before
                  another scale out activity can start. While the cooldown period is in effect, the
                  capacity that has been added by the previous scale out event that initiated the
                  cooldown is calculated as part of the desired capacity for the next scale out. You
                  should continuously (but not excessively) scale out.

                - **TargetValue** *(float) --*

                  The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base
                  10) or 2e-360 to 2e360 (Base 2).
    """


_ClientUpdateGlobalTableSettingsResponseTypeDef = TypedDict(
    "_ClientUpdateGlobalTableSettingsResponseTypeDef",
    {
        "GlobalTableName": str,
        "ReplicaSettings": List[ClientUpdateGlobalTableSettingsResponseReplicaSettingsTypeDef],
    },
    total=False,
)


class ClientUpdateGlobalTableSettingsResponseTypeDef(
    _ClientUpdateGlobalTableSettingsResponseTypeDef
):
    """
    Type definition for `ClientUpdateGlobalTableSettings` `Response`

    - **GlobalTableName** *(string) --*

      The name of the global table.

    - **ReplicaSettings** *(list) --*

      The Region-specific settings for the global table.

      - *(dict) --*

        Represents the properties of a replica.

        - **RegionName** *(string) --*

          The Region name of the replica.

        - **ReplicaStatus** *(string) --*

          The current state of the Region:

          * ``CREATING`` - The Region is being created.

          * ``UPDATING`` - The Region is being updated.

          * ``DELETING`` - The Region is being deleted.

          * ``ACTIVE`` - The Region is ready for use.

        - **ReplicaBillingModeSummary** *(dict) --*

          The read/write capacity mode of the replica.

          - **BillingMode** *(string) --*

            Controls how you are charged for read and write throughput and how you manage capacity.
            This setting can be changed later.

            * ``PROVISIONED`` - Sets the read/write capacity mode to ``PROVISIONED`` . We recommend
            using ``PROVISIONED`` for predictable workloads.

            * ``PAY_PER_REQUEST`` - Sets the read/write capacity mode to ``PAY_PER_REQUEST`` . We
            recommend using ``PAY_PER_REQUEST`` for unpredictable workloads.

          - **LastUpdateToPayPerRequestDateTime** *(datetime) --*

            Represents the time when ``PAY_PER_REQUEST`` was last set as the read/write capacity
            mode.

        - **ReplicaProvisionedReadCapacityUnits** *(integer) --*

          The maximum number of strongly consistent reads consumed per second before DynamoDB
          returns a ``ThrottlingException`` . For more information, see `Specifying Read and Write
          Requirements
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
          in the *Amazon DynamoDB Developer Guide* .

        - **ReplicaProvisionedReadCapacityAutoScalingSettings** *(dict) --*

          Auto scaling settings for a global table replica's read capacity units.

          - **MinimumUnits** *(integer) --*

            The minimum capacity units that a global table or global secondary index should be
            scaled down to.

          - **MaximumUnits** *(integer) --*

            The maximum capacity units that a global table or global secondary index should be
            scaled up to.

          - **AutoScalingDisabled** *(boolean) --*

            Disabled auto scaling for this global table or global secondary index.

          - **AutoScalingRoleArn** *(string) --*

            Role ARN used for configuring the auto scaling policy.

          - **ScalingPolicies** *(list) --*

            Information about the scaling policies.

            - *(dict) --*

              Represents the properties of the scaling policy.

              - **PolicyName** *(string) --*

                The name of the scaling policy.

              - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

                Represents a target tracking scaling policy configuration.

                - **DisableScaleIn** *(boolean) --*

                  Indicates whether scale in by the target tracking policy is disabled. If the value
                  is true, scale in is disabled and the target tracking policy won't remove capacity
                  from the scalable resource. Otherwise, scale in is enabled and the target tracking
                  policy can remove capacity from the scalable resource. The default value is false.

                - **ScaleInCooldown** *(integer) --*

                  The amount of time, in seconds, after a scale in activity completes before another
                  scale in activity can start. The cooldown period is used to block subsequent scale
                  in requests until it has expired. You should scale in conservatively to protect
                  your application's availability. However, if another alarm triggers a scale out
                  policy during the cooldown period after a scale-in, application auto scaling
                  scales out your scalable target immediately.

                - **ScaleOutCooldown** *(integer) --*

                  The amount of time, in seconds, after a scale out activity completes before
                  another scale out activity can start. While the cooldown period is in effect, the
                  capacity that has been added by the previous scale out event that initiated the
                  cooldown is calculated as part of the desired capacity for the next scale out. You
                  should continuously (but not excessively) scale out.

                - **TargetValue** *(float) --*

                  The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base
                  10) or 2e-360 to 2e360 (Base 2).

        - **ReplicaProvisionedWriteCapacityUnits** *(integer) --*

          The maximum number of writes consumed per second before DynamoDB returns a
          ``ThrottlingException`` . For more information, see `Specifying Read and Write
          Requirements
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
          in the *Amazon DynamoDB Developer Guide* .

        - **ReplicaProvisionedWriteCapacityAutoScalingSettings** *(dict) --*

          Auto scaling settings for a global table replica's write capacity units.

          - **MinimumUnits** *(integer) --*

            The minimum capacity units that a global table or global secondary index should be
            scaled down to.

          - **MaximumUnits** *(integer) --*

            The maximum capacity units that a global table or global secondary index should be
            scaled up to.

          - **AutoScalingDisabled** *(boolean) --*

            Disabled auto scaling for this global table or global secondary index.

          - **AutoScalingRoleArn** *(string) --*

            Role ARN used for configuring the auto scaling policy.

          - **ScalingPolicies** *(list) --*

            Information about the scaling policies.

            - *(dict) --*

              Represents the properties of the scaling policy.

              - **PolicyName** *(string) --*

                The name of the scaling policy.

              - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

                Represents a target tracking scaling policy configuration.

                - **DisableScaleIn** *(boolean) --*

                  Indicates whether scale in by the target tracking policy is disabled. If the value
                  is true, scale in is disabled and the target tracking policy won't remove capacity
                  from the scalable resource. Otherwise, scale in is enabled and the target tracking
                  policy can remove capacity from the scalable resource. The default value is false.

                - **ScaleInCooldown** *(integer) --*

                  The amount of time, in seconds, after a scale in activity completes before another
                  scale in activity can start. The cooldown period is used to block subsequent scale
                  in requests until it has expired. You should scale in conservatively to protect
                  your application's availability. However, if another alarm triggers a scale out
                  policy during the cooldown period after a scale-in, application auto scaling
                  scales out your scalable target immediately.

                - **ScaleOutCooldown** *(integer) --*

                  The amount of time, in seconds, after a scale out activity completes before
                  another scale out activity can start. While the cooldown period is in effect, the
                  capacity that has been added by the previous scale out event that initiated the
                  cooldown is calculated as part of the desired capacity for the next scale out. You
                  should continuously (but not excessively) scale out.

                - **TargetValue** *(float) --*

                  The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base
                  10) or 2e-360 to 2e360 (Base 2).

        - **ReplicaGlobalSecondaryIndexSettings** *(list) --*

          Replica global secondary index settings for the global table.

          - *(dict) --*

            Represents the properties of a global secondary index.

            - **IndexName** *(string) --*

              The name of the global secondary index. The name must be unique among all other
              indexes on this table.

            - **IndexStatus** *(string) --*

              The current status of the global secondary index:

              * ``CREATING`` - The global secondary index is being created.

              * ``UPDATING`` - The global secondary index is being updated.

              * ``DELETING`` - The global secondary index is being deleted.

              * ``ACTIVE`` - The global secondary index is ready for use.

            - **ProvisionedReadCapacityUnits** *(integer) --*

              The maximum number of strongly consistent reads consumed per second before DynamoDB
              returns a ``ThrottlingException`` .

            - **ProvisionedReadCapacityAutoScalingSettings** *(dict) --*

              Auto scaling settings for a global secondary index replica's read capacity units.

              - **MinimumUnits** *(integer) --*

                The minimum capacity units that a global table or global secondary index should be
                scaled down to.

              - **MaximumUnits** *(integer) --*

                The maximum capacity units that a global table or global secondary index should be
                scaled up to.

              - **AutoScalingDisabled** *(boolean) --*

                Disabled auto scaling for this global table or global secondary index.

              - **AutoScalingRoleArn** *(string) --*

                Role ARN used for configuring the auto scaling policy.

              - **ScalingPolicies** *(list) --*

                Information about the scaling policies.

                - *(dict) --*

                  Represents the properties of the scaling policy.

                  - **PolicyName** *(string) --*

                    The name of the scaling policy.

                  - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

                    Represents a target tracking scaling policy configuration.

                    - **DisableScaleIn** *(boolean) --*

                      Indicates whether scale in by the target tracking policy is disabled. If the
                      value is true, scale in is disabled and the target tracking policy won't
                      remove capacity from the scalable resource. Otherwise, scale in is enabled and
                      the target tracking policy can remove capacity from the scalable resource. The
                      default value is false.

                    - **ScaleInCooldown** *(integer) --*

                      The amount of time, in seconds, after a scale in activity completes before
                      another scale in activity can start. The cooldown period is used to block
                      subsequent scale in requests until it has expired. You should scale in
                      conservatively to protect your application's availability. However, if another
                      alarm triggers a scale out policy during the cooldown period after a scale-in,
                      application auto scaling scales out your scalable target immediately.

                    - **ScaleOutCooldown** *(integer) --*

                      The amount of time, in seconds, after a scale out activity completes before
                      another scale out activity can start. While the cooldown period is in effect,
                      the capacity that has been added by the previous scale out event that
                      initiated the cooldown is calculated as part of the desired capacity for the
                      next scale out. You should continuously (but not excessively) scale out.

                    - **TargetValue** *(float) --*

                      The target value for the metric. The range is 8.515920e-109 to 1.174271e+108
                      (Base 10) or 2e-360 to 2e360 (Base 2).

            - **ProvisionedWriteCapacityUnits** *(integer) --*

              The maximum number of writes consumed per second before DynamoDB returns a
              ``ThrottlingException`` .

            - **ProvisionedWriteCapacityAutoScalingSettings** *(dict) --*

              Auto scaling settings for a global secondary index replica's write capacity units.

              - **MinimumUnits** *(integer) --*

                The minimum capacity units that a global table or global secondary index should be
                scaled down to.

              - **MaximumUnits** *(integer) --*

                The maximum capacity units that a global table or global secondary index should be
                scaled up to.

              - **AutoScalingDisabled** *(boolean) --*

                Disabled auto scaling for this global table or global secondary index.

              - **AutoScalingRoleArn** *(string) --*

                Role ARN used for configuring the auto scaling policy.

              - **ScalingPolicies** *(list) --*

                Information about the scaling policies.

                - *(dict) --*

                  Represents the properties of the scaling policy.

                  - **PolicyName** *(string) --*

                    The name of the scaling policy.

                  - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

                    Represents a target tracking scaling policy configuration.

                    - **DisableScaleIn** *(boolean) --*

                      Indicates whether scale in by the target tracking policy is disabled. If the
                      value is true, scale in is disabled and the target tracking policy won't
                      remove capacity from the scalable resource. Otherwise, scale in is enabled and
                      the target tracking policy can remove capacity from the scalable resource. The
                      default value is false.

                    - **ScaleInCooldown** *(integer) --*

                      The amount of time, in seconds, after a scale in activity completes before
                      another scale in activity can start. The cooldown period is used to block
                      subsequent scale in requests until it has expired. You should scale in
                      conservatively to protect your application's availability. However, if another
                      alarm triggers a scale out policy during the cooldown period after a scale-in,
                      application auto scaling scales out your scalable target immediately.

                    - **ScaleOutCooldown** *(integer) --*

                      The amount of time, in seconds, after a scale out activity completes before
                      another scale out activity can start. While the cooldown period is in effect,
                      the capacity that has been added by the previous scale out event that
                      initiated the cooldown is calculated as part of the desired capacity for the
                      next scale out. You should continuously (but not excessively) scale out.

                    - **TargetValue** *(float) --*

                      The target value for the metric. The range is 8.515920e-109 to 1.174271e+108
                      (Base 10) or 2e-360 to 2e360 (Base 2).
    """


_ClientUpdateItemAttributeUpdatesValueTypeDef = TypedDict(
    "_ClientUpdateItemAttributeUpdatesValueTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class ClientUpdateItemAttributeUpdatesValueTypeDef(_ClientUpdateItemAttributeUpdatesValueTypeDef):
    """
    Type definition for `ClientUpdateItemAttributeUpdates` `Value`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_ClientUpdateItemAttributeUpdatesTypeDef = TypedDict(
    "_ClientUpdateItemAttributeUpdatesTypeDef",
    {"Value": ClientUpdateItemAttributeUpdatesValueTypeDef, "Action": str},
    total=False,
)


class ClientUpdateItemAttributeUpdatesTypeDef(_ClientUpdateItemAttributeUpdatesTypeDef):
    """
    Type definition for `ClientUpdateItem` `AttributeUpdates`

    For the ``UpdateItem`` operation, represents the attributes to be modified, the action to
    perform on each, and the new value for each.

    .. note::

      You cannot use ``UpdateItem`` to update any primary key attributes. Instead, you will need to
      delete the item, and then use ``PutItem`` to create a new item with new attributes.

    Attribute values cannot be null; string and binary type attributes must have lengths greater
    than zero; and set type attributes must not be empty. Requests with empty values will be
    rejected with a ``ValidationException`` exception.

    - **Value** *(dict) --*

      Represents the data for an attribute.

      Each attribute value is described as a name-value pair. The name is the data type, and the
      value is the data itself.

      For more information, see `Data Types
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
      in the *Amazon DynamoDB Developer Guide* .

      - **S** *(string) --*

        An attribute of type String. For example:

         ``"S": "Hello"``

      - **N** *(string) --*

        An attribute of type Number. For example:

         ``"N": "123.45"``

        Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
        languages and libraries. However, DynamoDB treats them as number type attributes for
        mathematical operations.

      - **B** *(bytes) --*

        An attribute of type Binary. For example:

         ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

      - **SS** *(list) --*

        An attribute of type String Set. For example:

         ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

        - *(string) --*

      - **NS** *(list) --*

        An attribute of type Number Set. For example:

         ``"NS": ["42.2", "-19", "7.5", "3.14"]``

        Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
        languages and libraries. However, DynamoDB treats them as number type attributes for
        mathematical operations.

        - *(string) --*

      - **BS** *(list) --*

        An attribute of type Binary Set. For example:

         ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

        - *(bytes) --*

      - **M** *(dict) --*

        An attribute of type Map. For example:

         ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

        - *(string) --*

          - *(dict) --*

            Represents the data for an attribute.

            Each attribute value is described as a name-value pair. The name is the data type, and
            the value is the data itself.

            For more information, see `Data Types
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
            in the *Amazon DynamoDB Developer Guide* .

      - **L** *(list) --*

        An attribute of type List. For example:

         ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

      - **NULL** *(boolean) --*

        An attribute of type Null. For example:

         ``"NULL": true``

      - **BOOL** *(boolean) --*

        An attribute of type Boolean. For example:

         ``"BOOL": true``

    - **Action** *(string) --*

      Specifies how to perform the update. Valid values are ``PUT`` (default), ``DELETE`` , and
      ``ADD`` . The behavior depends on whether the specified primary key already exists in the
      table.

       **If an item with the specified *Key* is found in the table:**

      * ``PUT`` - Adds the specified attribute to the item. If the attribute already exists, it is
      replaced by the new value.

      * ``DELETE`` - If no value is specified, the attribute and its value are removed from the
      item. The data type of the specified value must match the existing value's data type. If a
      *set* of values is specified, then those values are subtracted from the old set. For example,
      if the attribute value was the set ``[a,b,c]`` and the ``DELETE`` action specified ``[a,c]`` ,
      then the final attribute value would be ``[b]`` . Specifying an empty set is an error.

      * ``ADD`` - If the attribute does not already exist, then the attribute and its values are
      added to the item. If the attribute does exist, then the behavior of ``ADD`` depends on the
      data type of the attribute:

        * If the existing attribute is a number, and if ``Value`` is also a number, then the
        ``Value`` is mathematically added to the existing attribute. If ``Value`` is a negative
        number, then it is subtracted from the existing attribute.

        .. note::

           If you use ``ADD`` to increment or decrement a number value for an item that doesn't
           exist before the update, DynamoDB uses 0 as the initial value. In addition, if you use
           ``ADD`` to update an existing item, and intend to increment or decrement an attribute
           value which does not yet exist, DynamoDB uses ``0`` as the initial value. For example,
           suppose that the item you want to update does not yet have an attribute named *itemcount*
           , but you decide to ``ADD`` the number ``3`` to this attribute anyway, even though it
           currently does not exist. DynamoDB will create the *itemcount* attribute, set its initial
           value to ``0`` , and finally add ``3`` to it. The result will be a new *itemcount*
           attribute in the item, with a value of ``3`` .

        * If the existing data type is a set, and if the ``Value`` is also a set, then the ``Value``
        is added to the existing set. (This is a *set* operation, not mathematical addition.) For
        example, if the attribute value was the set ``[1,2]`` , and the ``ADD`` action specified
        ``[3]`` , then the final attribute value would be ``[1,2,3]`` . An error occurs if an Add
        action is specified for a set attribute and the attribute type specified does not match the
        existing set type.  Both sets must have the same primitive data type. For example, if the
        existing data type is a set of strings, the ``Value`` must also be a set of strings. The
        same holds true for number sets and binary sets.

      This action is only valid for an existing attribute whose data type is number or is a set. Do
      not use ``ADD`` for any other data types.

       **If no item with the specified *Key* is found:**

      * ``PUT`` - DynamoDB creates a new item with the specified primary key, and then adds the
      attribute.

      * ``DELETE`` - Nothing happens; there is no attribute to delete.

      * ``ADD`` - DynamoDB creates an item with the supplied primary key and number (or set of
      numbers) for the attribute value. The only data types allowed are number and number set; no
      other data types can be specified.
    """


_ClientUpdateItemExpectedAttributeValueListTypeDef = TypedDict(
    "_ClientUpdateItemExpectedAttributeValueListTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class ClientUpdateItemExpectedAttributeValueListTypeDef(
    _ClientUpdateItemExpectedAttributeValueListTypeDef
):
    """
    Type definition for `ClientUpdateItemExpected` `AttributeValueList`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_ClientUpdateItemExpectedValueTypeDef = TypedDict(
    "_ClientUpdateItemExpectedValueTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class ClientUpdateItemExpectedValueTypeDef(_ClientUpdateItemExpectedValueTypeDef):
    """
    Type definition for `ClientUpdateItemExpected` `Value`

    Represents the data for the expected attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_ClientUpdateItemExpectedTypeDef = TypedDict(
    "_ClientUpdateItemExpectedTypeDef",
    {
        "Value": ClientUpdateItemExpectedValueTypeDef,
        "Exists": bool,
        "ComparisonOperator": str,
        "AttributeValueList": List[ClientUpdateItemExpectedAttributeValueListTypeDef],
    },
    total=False,
)


class ClientUpdateItemExpectedTypeDef(_ClientUpdateItemExpectedTypeDef):
    """
    Type definition for `ClientUpdateItem` `Expected`

    Represents a condition to be compared with an attribute value. This condition can be used with
    ``DeleteItem`` , ``PutItem`` , or ``UpdateItem`` operations; if the comparison evaluates to
    true, the operation succeeds; if not, the operation fails. You can use
    ``ExpectedAttributeValue`` in one of two different ways:

    * Use ``AttributeValueList`` to specify one or more values to compare against an attribute. Use
    ``ComparisonOperator`` to specify how you want to perform the comparison. If the comparison
    evaluates to true, then the conditional operation succeeds.

    * Use ``Value`` to specify a value that DynamoDB will compare against an attribute. If the
    values match, then ``ExpectedAttributeValue`` evaluates to true and the conditional operation
    succeeds. Optionally, you can also set ``Exists`` to false, indicating that you *do not* expect
    to find the attribute value in the table. In this case, the conditional operation succeeds only
    if the comparison evaluates to false.

     ``Value`` and ``Exists`` are incompatible with ``AttributeValueList`` and
     ``ComparisonOperator`` . Note that if you use both sets of parameters at once, DynamoDB will
     return a ``ValidationException`` exception.

    - **Value** *(dict) --*

      Represents the data for the expected attribute.

      Each attribute value is described as a name-value pair. The name is the data type, and the
      value is the data itself.

      For more information, see `Data Types
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
      in the *Amazon DynamoDB Developer Guide* .

      - **S** *(string) --*

        An attribute of type String. For example:

         ``"S": "Hello"``

      - **N** *(string) --*

        An attribute of type Number. For example:

         ``"N": "123.45"``

        Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
        languages and libraries. However, DynamoDB treats them as number type attributes for
        mathematical operations.

      - **B** *(bytes) --*

        An attribute of type Binary. For example:

         ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

      - **SS** *(list) --*

        An attribute of type String Set. For example:

         ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

        - *(string) --*

      - **NS** *(list) --*

        An attribute of type Number Set. For example:

         ``"NS": ["42.2", "-19", "7.5", "3.14"]``

        Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
        languages and libraries. However, DynamoDB treats them as number type attributes for
        mathematical operations.

        - *(string) --*

      - **BS** *(list) --*

        An attribute of type Binary Set. For example:

         ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

        - *(bytes) --*

      - **M** *(dict) --*

        An attribute of type Map. For example:

         ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

        - *(string) --*

          - *(dict) --*

            Represents the data for an attribute.

            Each attribute value is described as a name-value pair. The name is the data type, and
            the value is the data itself.

            For more information, see `Data Types
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
            in the *Amazon DynamoDB Developer Guide* .

      - **L** *(list) --*

        An attribute of type List. For example:

         ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

      - **NULL** *(boolean) --*

        An attribute of type Null. For example:

         ``"NULL": true``

      - **BOOL** *(boolean) --*

        An attribute of type Boolean. For example:

         ``"BOOL": true``

    - **Exists** *(boolean) --*

      Causes DynamoDB to evaluate the value before attempting a conditional operation:

      * If ``Exists`` is ``true`` , DynamoDB will check to see if that attribute value already
      exists in the table. If it is found, then the operation succeeds. If it is not found, the
      operation fails with a ``ConditionCheckFailedException`` .

      * If ``Exists`` is ``false`` , DynamoDB assumes that the attribute value does not exist in the
      table. If in fact the value does not exist, then the assumption is valid and the operation
      succeeds. If the value is found, despite the assumption that it does not exist, the operation
      fails with a ``ConditionCheckFailedException`` .

      The default setting for ``Exists`` is ``true`` . If you supply a ``Value`` all by itself,
      DynamoDB assumes the attribute exists: You don't have to set ``Exists`` to ``true`` , because
      it is implied.

      DynamoDB returns a ``ValidationException`` if:

      * ``Exists`` is ``true`` but there is no ``Value`` to check. (You expect a value to exist, but
      don't specify what that value is.)

      * ``Exists`` is ``false`` but you also provide a ``Value`` . (You cannot expect an attribute
      to have a value, while also expecting it not to exist.)

    - **ComparisonOperator** *(string) --*

      A comparator for evaluating attributes in the ``AttributeValueList`` . For example, equals,
      greater than, less than, etc.

      The following comparison operators are available:

       ``EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH
       | IN
       | BETWEEN``

      The following are descriptions of each comparison operator.

      * ``EQ`` : Equal. ``EQ`` is supported for all data types, including lists and maps.
      ``AttributeValueList`` can contain only one ``AttributeValue`` element of type String, Number,
      Binary, String Set, Number Set, or Binary Set. If an item contains an ``AttributeValue``
      element of a different type than the one provided in the request, the value does not match.
      For example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` . Also, ``{"N":"6"}`` does not equal
      ``{"NS":["6", "2", "1"]}`` .

      * ``NE`` : Not equal. ``NE`` is supported for all data types, including lists and maps.
      ``AttributeValueList`` can contain only one ``AttributeValue`` of type String, Number, Binary,
      String Set, Number Set, or Binary Set. If an item contains an ``AttributeValue`` of a
      different type than the one provided in the request, the value does not match. For example,
      ``{"S":"6"}`` does not equal ``{"N":"6"}`` . Also, ``{"N":"6"}`` does not equal ``{"NS":["6",
      "2", "1"]}`` .

      * ``LE`` : Less than or equal.   ``AttributeValueList`` can contain only one
      ``AttributeValue`` element of type String, Number, or Binary (not a set type). If an item
      contains an ``AttributeValue`` element of a different type than the one provided in the
      request, the value does not match. For example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` .
      Also, ``{"N":"6"}`` does not compare to ``{"NS":["6", "2", "1"]}`` .

      * ``LT`` : Less than.   ``AttributeValueList`` can contain only one ``AttributeValue`` of type
      String, Number, or Binary (not a set type). If an item contains an ``AttributeValue`` element
      of a different type than the one provided in the request, the value does not match. For
      example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` . Also, ``{"N":"6"}`` does not compare to
      ``{"NS":["6", "2", "1"]}`` .

      * ``GE`` : Greater than or equal.   ``AttributeValueList`` can contain only one
      ``AttributeValue`` element of type String, Number, or Binary (not a set type). If an item
      contains an ``AttributeValue`` element of a different type than the one provided in the
      request, the value does not match. For example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` .
      Also, ``{"N":"6"}`` does not compare to ``{"NS":["6", "2", "1"]}`` .

      * ``GT`` : Greater than.   ``AttributeValueList`` can contain only one ``AttributeValue``
      element of type String, Number, or Binary (not a set type). If an item contains an
      ``AttributeValue`` element of a different type than the one provided in the request, the value
      does not match. For example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` . Also, ``{"N":"6"}``
      does not compare to ``{"NS":["6", "2", "1"]}`` .

      * ``NOT_NULL`` : The attribute exists. ``NOT_NULL`` is supported for all data types, including
      lists and maps.

      .. note::

         This operator tests for the existence of an attribute, not its data type. If the data type
         of attribute "``a`` " is null, and you evaluate it using ``NOT_NULL`` , the result is a
         Boolean ``true`` . This result is because the attribute "``a`` " exists; its data type is
         not relevant to the ``NOT_NULL`` comparison operator.

      * ``NULL`` : The attribute does not exist. ``NULL`` is supported for all data types, including
      lists and maps.

      .. note::

         This operator tests for the nonexistence of an attribute, not its data type. If the data
         type of attribute "``a`` " is null, and you evaluate it using ``NULL`` , the result is a
         Boolean ``false`` . This is because the attribute "``a`` " exists; its data type is not
         relevant to the ``NULL`` comparison operator.

      * ``CONTAINS`` : Checks for a subsequence, or value in a set.  ``AttributeValueList`` can
      contain only one ``AttributeValue`` element of type String, Number, or Binary (not a set
      type). If the target attribute of the comparison is of type String, then the operator checks
      for a substring match. If the target attribute of the comparison is of type Binary, then the
      operator looks for a subsequence of the target that matches the input. If the target attribute
      of the comparison is a set ("``SS`` ", "``NS`` ", or "``BS`` "), then the operator evaluates
      to true if it finds an exact match with any member of the set. CONTAINS is supported for
      lists: When evaluating "``a CONTAINS b`` ", "``a`` " can be a list; however, "``b`` " cannot
      be a set, a map, or a list.

      * ``NOT_CONTAINS`` : Checks for absence of a subsequence, or absence of a value in a set.
      ``AttributeValueList`` can contain only one ``AttributeValue`` element of type String, Number,
      or Binary (not a set type). If the target attribute of the comparison is a String, then the
      operator checks for the absence of a substring match. If the target attribute of the
      comparison is Binary, then the operator checks for the absence of a subsequence of the target
      that matches the input. If the target attribute of the comparison is a set ("``SS`` ", "``NS``
      ", or "``BS`` "), then the operator evaluates to true if it *does not* find an exact match
      with any member of the set. NOT_CONTAINS is supported for lists: When evaluating "``a NOT
      CONTAINS b`` ", "``a`` " can be a list; however, "``b`` " cannot be a set, a map, or a list.

      * ``BEGINS_WITH`` : Checks for a prefix.   ``AttributeValueList`` can contain only one
      ``AttributeValue`` of type String or Binary (not a Number or a set type). The target attribute
      of the comparison must be of type String or Binary (not a Number or a set type).

      * ``IN`` : Checks for matching elements in a list.  ``AttributeValueList`` can contain one or
      more ``AttributeValue`` elements of type String, Number, or Binary. These attributes are
      compared against an existing attribute of an item. If any elements of the input are equal to
      the item attribute, the expression evaluates to true.

      * ``BETWEEN`` : Greater than or equal to the first value, and less than or equal to the second
      value.   ``AttributeValueList`` must contain two ``AttributeValue`` elements of the same type,
      either String, Number, or Binary (not a set type). A target attribute matches if the target
      value is greater than, or equal to, the first element and less than, or equal to, the second
      element. If an item contains an ``AttributeValue`` element of a different type than the one
      provided in the request, the value does not match. For example, ``{"S":"6"}`` does not compare
      to ``{"N":"6"}`` . Also, ``{"N":"6"}`` does not compare to ``{"NS":["6", "2", "1"]}``

    - **AttributeValueList** *(list) --*

      One or more values to evaluate against the supplied attribute. The number of values in the
      list depends on the ``ComparisonOperator`` being used.

      For type Number, value comparisons are numeric.

      String value comparisons for greater than, equals, or less than are based on ASCII character
      code values. For example, ``a`` is greater than ``A`` , and ``a`` is greater than ``B`` . For
      a list of code values, see `http\\://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters
      <http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters>`__ .

      For Binary, DynamoDB treats each byte of the binary data as unsigned when it compares binary
      values.

      For information on specifying data types in JSON, see `JSON Data Format
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataFormat.html>`__ in the
      *Amazon DynamoDB Developer Guide* .

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

        - **S** *(string) --*

          An attribute of type String. For example:

           ``"S": "Hello"``

        - **N** *(string) --*

          An attribute of type Number. For example:

           ``"N": "123.45"``

          Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
          across languages and libraries. However, DynamoDB treats them as number type attributes
          for mathematical operations.

        - **B** *(bytes) --*

          An attribute of type Binary. For example:

           ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

        - **SS** *(list) --*

          An attribute of type String Set. For example:

           ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

          - *(string) --*

        - **NS** *(list) --*

          An attribute of type Number Set. For example:

           ``"NS": ["42.2", "-19", "7.5", "3.14"]``

          Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
          across languages and libraries. However, DynamoDB treats them as number type attributes
          for mathematical operations.

          - *(string) --*

        - **BS** *(list) --*

          An attribute of type Binary Set. For example:

           ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

          - *(bytes) --*

        - **M** *(dict) --*

          An attribute of type Map. For example:

           ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

          - *(string) --*

            - *(dict) --*

              Represents the data for an attribute.

              Each attribute value is described as a name-value pair. The name is the data type, and
              the value is the data itself.

              For more information, see `Data Types
              <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
              in the *Amazon DynamoDB Developer Guide* .

        - **L** *(list) --*

          An attribute of type List. For example:

           ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

          - *(dict) --*

            Represents the data for an attribute.

            Each attribute value is described as a name-value pair. The name is the data type, and
            the value is the data itself.

            For more information, see `Data Types
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
            in the *Amazon DynamoDB Developer Guide* .

        - **NULL** *(boolean) --*

          An attribute of type Null. For example:

           ``"NULL": true``

        - **BOOL** *(boolean) --*

          An attribute of type Boolean. For example:

           ``"BOOL": true``
    """


_ClientUpdateItemExpressionAttributeValuesTypeDef = TypedDict(
    "_ClientUpdateItemExpressionAttributeValuesTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class ClientUpdateItemExpressionAttributeValuesTypeDef(
    _ClientUpdateItemExpressionAttributeValuesTypeDef
):
    """
    Type definition for `ClientUpdateItem` `ExpressionAttributeValues`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_ClientUpdateItemKeyTypeDef = TypedDict(
    "_ClientUpdateItemKeyTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class ClientUpdateItemKeyTypeDef(_ClientUpdateItemKeyTypeDef):
    """
    Type definition for `ClientUpdateItem` `Key`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_ClientUpdateItemResponseAttributesTypeDef = TypedDict(
    "_ClientUpdateItemResponseAttributesTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class ClientUpdateItemResponseAttributesTypeDef(_ClientUpdateItemResponseAttributesTypeDef):
    """
    Type definition for `ClientUpdateItemResponse` `Attributes`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_ClientUpdateItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef = TypedDict(
    "_ClientUpdateItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef",
    {"ReadCapacityUnits": float, "WriteCapacityUnits": float, "CapacityUnits": float},
    total=False,
)


class ClientUpdateItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef(
    _ClientUpdateItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef
):
    """
    Type definition for `ClientUpdateItemResponseConsumedCapacity` `GlobalSecondaryIndexes`

    Represents the amount of provisioned throughput capacity consumed on a table or an index.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed on a table or an index.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed on a table or an index.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed on a table or an index.
    """


_ClientUpdateItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef = TypedDict(
    "_ClientUpdateItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef",
    {"ReadCapacityUnits": float, "WriteCapacityUnits": float, "CapacityUnits": float},
    total=False,
)


class ClientUpdateItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef(
    _ClientUpdateItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef
):
    """
    Type definition for `ClientUpdateItemResponseConsumedCapacity` `LocalSecondaryIndexes`

    Represents the amount of provisioned throughput capacity consumed on a table or an index.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed on a table or an index.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed on a table or an index.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed on a table or an index.
    """


_ClientUpdateItemResponseConsumedCapacityTableTypeDef = TypedDict(
    "_ClientUpdateItemResponseConsumedCapacityTableTypeDef",
    {"ReadCapacityUnits": float, "WriteCapacityUnits": float, "CapacityUnits": float},
    total=False,
)


class ClientUpdateItemResponseConsumedCapacityTableTypeDef(
    _ClientUpdateItemResponseConsumedCapacityTableTypeDef
):
    """
    Type definition for `ClientUpdateItemResponseConsumedCapacity` `Table`

    The amount of throughput consumed on the table affected by the operation.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed on a table or an index.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed on a table or an index.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed on a table or an index.
    """


_ClientUpdateItemResponseConsumedCapacityTypeDef = TypedDict(
    "_ClientUpdateItemResponseConsumedCapacityTypeDef",
    {
        "TableName": str,
        "CapacityUnits": float,
        "ReadCapacityUnits": float,
        "WriteCapacityUnits": float,
        "Table": ClientUpdateItemResponseConsumedCapacityTableTypeDef,
        "LocalSecondaryIndexes": Dict[
            str, ClientUpdateItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef
        ],
        "GlobalSecondaryIndexes": Dict[
            str, ClientUpdateItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef
        ],
    },
    total=False,
)


class ClientUpdateItemResponseConsumedCapacityTypeDef(
    _ClientUpdateItemResponseConsumedCapacityTypeDef
):
    """
    Type definition for `ClientUpdateItemResponse` `ConsumedCapacity`

    The capacity units consumed by the ``UpdateItem`` operation. The data returned includes the
    total provisioned throughput consumed, along with statistics for the table and any indexes
    involved in the operation. ``ConsumedCapacity`` is only returned if the
    ``ReturnConsumedCapacity`` parameter was specified. For more information, see `Provisioned
    Throughput
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **TableName** *(string) --*

      The name of the table that was affected by the operation.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed by the operation.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed by the operation.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed by the operation.

    - **Table** *(dict) --*

      The amount of throughput consumed on the table affected by the operation.

      - **ReadCapacityUnits** *(float) --*

        The total number of read capacity units consumed on a table or an index.

      - **WriteCapacityUnits** *(float) --*

        The total number of write capacity units consumed on a table or an index.

      - **CapacityUnits** *(float) --*

        The total number of capacity units consumed on a table or an index.

    - **LocalSecondaryIndexes** *(dict) --*

      The amount of throughput consumed on each local index affected by the operation.

      - *(string) --*

        - *(dict) --*

          Represents the amount of provisioned throughput capacity consumed on a table or an index.

          - **ReadCapacityUnits** *(float) --*

            The total number of read capacity units consumed on a table or an index.

          - **WriteCapacityUnits** *(float) --*

            The total number of write capacity units consumed on a table or an index.

          - **CapacityUnits** *(float) --*

            The total number of capacity units consumed on a table or an index.

    - **GlobalSecondaryIndexes** *(dict) --*

      The amount of throughput consumed on each global index affected by the operation.

      - *(string) --*

        - *(dict) --*

          Represents the amount of provisioned throughput capacity consumed on a table or an index.

          - **ReadCapacityUnits** *(float) --*

            The total number of read capacity units consumed on a table or an index.

          - **WriteCapacityUnits** *(float) --*

            The total number of write capacity units consumed on a table or an index.

          - **CapacityUnits** *(float) --*

            The total number of capacity units consumed on a table or an index.
    """


_ClientUpdateItemResponseItemCollectionMetricsItemCollectionKeyTypeDef = TypedDict(
    "_ClientUpdateItemResponseItemCollectionMetricsItemCollectionKeyTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class ClientUpdateItemResponseItemCollectionMetricsItemCollectionKeyTypeDef(
    _ClientUpdateItemResponseItemCollectionMetricsItemCollectionKeyTypeDef
):
    """
    Type definition for `ClientUpdateItemResponseItemCollectionMetrics` `ItemCollectionKey`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_ClientUpdateItemResponseItemCollectionMetricsTypeDef = TypedDict(
    "_ClientUpdateItemResponseItemCollectionMetricsTypeDef",
    {
        "ItemCollectionKey": Dict[
            str, ClientUpdateItemResponseItemCollectionMetricsItemCollectionKeyTypeDef
        ],
        "SizeEstimateRangeGB": List[float],
    },
    total=False,
)


class ClientUpdateItemResponseItemCollectionMetricsTypeDef(
    _ClientUpdateItemResponseItemCollectionMetricsTypeDef
):
    """
    Type definition for `ClientUpdateItemResponse` `ItemCollectionMetrics`

    Information about item collections, if any, that were affected by the ``UpdateItem`` operation.
    ``ItemCollectionMetrics`` is only returned if the ``ReturnItemCollectionMetrics`` parameter was
    specified. If the table does not have any local secondary indexes, this information is not
    returned in the response.

    Each ``ItemCollectionMetrics`` element consists of:

    * ``ItemCollectionKey`` - The partition key value of the item collection. This is the same as
    the partition key value of the item itself.

    * ``SizeEstimateRangeGB`` - An estimate of item collection size, in gigabytes. This value is a
    two-element array containing a lower bound and an upper bound for the estimate. The estimate
    includes the size of all the items in the table, plus the size of all attributes projected into
    all of the local secondary indexes on that table. Use this estimate to measure whether a local
    secondary index is approaching its size limit. The estimate is subject to change over time;
    therefore, do not rely on the precision or accuracy of the estimate.

    - **ItemCollectionKey** *(dict) --*

      The partition key value of the item collection. This value is the same as the partition key
      value of the item.

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

          - **S** *(string) --*

            An attribute of type String. For example:

             ``"S": "Hello"``

          - **N** *(string) --*

            An attribute of type Number. For example:

             ``"N": "123.45"``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

          - **B** *(bytes) --*

            An attribute of type Binary. For example:

             ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

          - **SS** *(list) --*

            An attribute of type String Set. For example:

             ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

            - *(string) --*

          - **NS** *(list) --*

            An attribute of type Number Set. For example:

             ``"NS": ["42.2", "-19", "7.5", "3.14"]``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

            - *(string) --*

          - **BS** *(list) --*

            An attribute of type Binary Set. For example:

             ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

            - *(bytes) --*

          - **M** *(dict) --*

            An attribute of type Map. For example:

             ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

            - *(string) --*

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

          - **L** *(list) --*

            An attribute of type List. For example:

             ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

            - *(dict) --*

              Represents the data for an attribute.

              Each attribute value is described as a name-value pair. The name is the data type, and
              the value is the data itself.

              For more information, see `Data Types
              <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
              in the *Amazon DynamoDB Developer Guide* .

          - **NULL** *(boolean) --*

            An attribute of type Null. For example:

             ``"NULL": true``

          - **BOOL** *(boolean) --*

            An attribute of type Boolean. For example:

             ``"BOOL": true``

    - **SizeEstimateRangeGB** *(list) --*

      An estimate of item collection size, in gigabytes. This value is a two-element array
      containing a lower bound and an upper bound for the estimate. The estimate includes the size
      of all the items in the table, plus the size of all attributes projected into all of the local
      secondary indexes on that table. Use this estimate to measure whether a local secondary index
      is approaching its size limit.

      The estimate is subject to change over time; therefore, do not rely on the precision or
      accuracy of the estimate.

      - *(float) --*
    """


_ClientUpdateItemResponseTypeDef = TypedDict(
    "_ClientUpdateItemResponseTypeDef",
    {
        "Attributes": Dict[str, ClientUpdateItemResponseAttributesTypeDef],
        "ConsumedCapacity": ClientUpdateItemResponseConsumedCapacityTypeDef,
        "ItemCollectionMetrics": ClientUpdateItemResponseItemCollectionMetricsTypeDef,
    },
    total=False,
)


class ClientUpdateItemResponseTypeDef(_ClientUpdateItemResponseTypeDef):
    """
    Type definition for `ClientUpdateItem` `Response`

    Represents the output of an ``UpdateItem`` operation.

    - **Attributes** *(dict) --*

      A map of attribute values as they appear before or after the ``UpdateItem`` operation, as
      determined by the ``ReturnValues`` parameter.

      The ``Attributes`` map is only present if ``ReturnValues`` was specified as something other
      than ``NONE`` in the request. Each element represents one attribute.

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

          - **S** *(string) --*

            An attribute of type String. For example:

             ``"S": "Hello"``

          - **N** *(string) --*

            An attribute of type Number. For example:

             ``"N": "123.45"``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

          - **B** *(bytes) --*

            An attribute of type Binary. For example:

             ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

          - **SS** *(list) --*

            An attribute of type String Set. For example:

             ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

            - *(string) --*

          - **NS** *(list) --*

            An attribute of type Number Set. For example:

             ``"NS": ["42.2", "-19", "7.5", "3.14"]``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

            - *(string) --*

          - **BS** *(list) --*

            An attribute of type Binary Set. For example:

             ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

            - *(bytes) --*

          - **M** *(dict) --*

            An attribute of type Map. For example:

             ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

            - *(string) --*

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

          - **L** *(list) --*

            An attribute of type List. For example:

             ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

            - *(dict) --*

              Represents the data for an attribute.

              Each attribute value is described as a name-value pair. The name is the data type, and
              the value is the data itself.

              For more information, see `Data Types
              <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
              in the *Amazon DynamoDB Developer Guide* .

          - **NULL** *(boolean) --*

            An attribute of type Null. For example:

             ``"NULL": true``

          - **BOOL** *(boolean) --*

            An attribute of type Boolean. For example:

             ``"BOOL": true``

    - **ConsumedCapacity** *(dict) --*

      The capacity units consumed by the ``UpdateItem`` operation. The data returned includes the
      total provisioned throughput consumed, along with statistics for the table and any indexes
      involved in the operation. ``ConsumedCapacity`` is only returned if the
      ``ReturnConsumedCapacity`` parameter was specified. For more information, see `Provisioned
      Throughput
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html>`__
      in the *Amazon DynamoDB Developer Guide* .

      - **TableName** *(string) --*

        The name of the table that was affected by the operation.

      - **CapacityUnits** *(float) --*

        The total number of capacity units consumed by the operation.

      - **ReadCapacityUnits** *(float) --*

        The total number of read capacity units consumed by the operation.

      - **WriteCapacityUnits** *(float) --*

        The total number of write capacity units consumed by the operation.

      - **Table** *(dict) --*

        The amount of throughput consumed on the table affected by the operation.

        - **ReadCapacityUnits** *(float) --*

          The total number of read capacity units consumed on a table or an index.

        - **WriteCapacityUnits** *(float) --*

          The total number of write capacity units consumed on a table or an index.

        - **CapacityUnits** *(float) --*

          The total number of capacity units consumed on a table or an index.

      - **LocalSecondaryIndexes** *(dict) --*

        The amount of throughput consumed on each local index affected by the operation.

        - *(string) --*

          - *(dict) --*

            Represents the amount of provisioned throughput capacity consumed on a table or an
            index.

            - **ReadCapacityUnits** *(float) --*

              The total number of read capacity units consumed on a table or an index.

            - **WriteCapacityUnits** *(float) --*

              The total number of write capacity units consumed on a table or an index.

            - **CapacityUnits** *(float) --*

              The total number of capacity units consumed on a table or an index.

      - **GlobalSecondaryIndexes** *(dict) --*

        The amount of throughput consumed on each global index affected by the operation.

        - *(string) --*

          - *(dict) --*

            Represents the amount of provisioned throughput capacity consumed on a table or an
            index.

            - **ReadCapacityUnits** *(float) --*

              The total number of read capacity units consumed on a table or an index.

            - **WriteCapacityUnits** *(float) --*

              The total number of write capacity units consumed on a table or an index.

            - **CapacityUnits** *(float) --*

              The total number of capacity units consumed on a table or an index.

    - **ItemCollectionMetrics** *(dict) --*

      Information about item collections, if any, that were affected by the ``UpdateItem``
      operation. ``ItemCollectionMetrics`` is only returned if the ``ReturnItemCollectionMetrics``
      parameter was specified. If the table does not have any local secondary indexes, this
      information is not returned in the response.

      Each ``ItemCollectionMetrics`` element consists of:

      * ``ItemCollectionKey`` - The partition key value of the item collection. This is the same as
      the partition key value of the item itself.

      * ``SizeEstimateRangeGB`` - An estimate of item collection size, in gigabytes. This value is a
      two-element array containing a lower bound and an upper bound for the estimate. The estimate
      includes the size of all the items in the table, plus the size of all attributes projected
      into all of the local secondary indexes on that table. Use this estimate to measure whether a
      local secondary index is approaching its size limit. The estimate is subject to change over
      time; therefore, do not rely on the precision or accuracy of the estimate.

      - **ItemCollectionKey** *(dict) --*

        The partition key value of the item collection. This value is the same as the partition key
        value of the item.

        - *(string) --*

          - *(dict) --*

            Represents the data for an attribute.

            Each attribute value is described as a name-value pair. The name is the data type, and
            the value is the data itself.

            For more information, see `Data Types
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
            in the *Amazon DynamoDB Developer Guide* .

            - **S** *(string) --*

              An attribute of type String. For example:

               ``"S": "Hello"``

            - **N** *(string) --*

              An attribute of type Number. For example:

               ``"N": "123.45"``

              Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
              across languages and libraries. However, DynamoDB treats them as number type
              attributes for mathematical operations.

            - **B** *(bytes) --*

              An attribute of type Binary. For example:

               ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

            - **SS** *(list) --*

              An attribute of type String Set. For example:

               ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

              - *(string) --*

            - **NS** *(list) --*

              An attribute of type Number Set. For example:

               ``"NS": ["42.2", "-19", "7.5", "3.14"]``

              Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
              across languages and libraries. However, DynamoDB treats them as number type
              attributes for mathematical operations.

              - *(string) --*

            - **BS** *(list) --*

              An attribute of type Binary Set. For example:

               ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

              - *(bytes) --*

            - **M** *(dict) --*

              An attribute of type Map. For example:

               ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

              - *(string) --*

                - *(dict) --*

                  Represents the data for an attribute.

                  Each attribute value is described as a name-value pair. The name is the data type,
                  and the value is the data itself.

                  For more information, see `Data Types
                  <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                  in the *Amazon DynamoDB Developer Guide* .

            - **L** *(list) --*

              An attribute of type List. For example:

               ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

            - **NULL** *(boolean) --*

              An attribute of type Null. For example:

               ``"NULL": true``

            - **BOOL** *(boolean) --*

              An attribute of type Boolean. For example:

               ``"BOOL": true``

      - **SizeEstimateRangeGB** *(list) --*

        An estimate of item collection size, in gigabytes. This value is a two-element array
        containing a lower bound and an upper bound for the estimate. The estimate includes the size
        of all the items in the table, plus the size of all attributes projected into all of the
        local secondary indexes on that table. Use this estimate to measure whether a local
        secondary index is approaching its size limit.

        The estimate is subject to change over time; therefore, do not rely on the precision or
        accuracy of the estimate.

        - *(float) --*
    """


_ClientUpdateTableAttributeDefinitionsTypeDef = TypedDict(
    "_ClientUpdateTableAttributeDefinitionsTypeDef", {"AttributeName": str, "AttributeType": str}
)


class ClientUpdateTableAttributeDefinitionsTypeDef(_ClientUpdateTableAttributeDefinitionsTypeDef):
    """
    Type definition for `ClientUpdateTable` `AttributeDefinitions`

    Represents an attribute for describing the key schema for the table and indexes.

    - **AttributeName** *(string) --* **[REQUIRED]**

      A name for the attribute.

    - **AttributeType** *(string) --* **[REQUIRED]**

      The data type for the attribute, where:

      * ``S`` - the attribute is of type String

      * ``N`` - the attribute is of type Number

      * ``B`` - the attribute is of type Binary
    """


_ClientUpdateTableGlobalSecondaryIndexUpdatesCreateKeySchemaTypeDef = TypedDict(
    "_ClientUpdateTableGlobalSecondaryIndexUpdatesCreateKeySchemaTypeDef",
    {"AttributeName": str, "KeyType": str},
)


class ClientUpdateTableGlobalSecondaryIndexUpdatesCreateKeySchemaTypeDef(
    _ClientUpdateTableGlobalSecondaryIndexUpdatesCreateKeySchemaTypeDef
):
    """
    Type definition for `ClientUpdateTableGlobalSecondaryIndexUpdatesCreate` `KeySchema`

    Represents *a single element* of a key schema. A key schema specifies the attributes that make
    up the primary key of a table, or the key attributes of an index.

    A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
    simple primary key would be represented by one ``KeySchemaElement`` (for the partition key). A
    composite primary key would require one ``KeySchemaElement`` for the partition key, and another
    ``KeySchemaElement`` for the sort key.

    A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The data
    type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a
    Map.

    - **AttributeName** *(string) --* **[REQUIRED]**

      The name of a key attribute.

    - **KeyType** *(string) --* **[REQUIRED]**

      The role that this key attribute will assume:

      * ``HASH`` - partition key

      * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.
    """


_ClientUpdateTableGlobalSecondaryIndexUpdatesCreateProjectionTypeDef = TypedDict(
    "_ClientUpdateTableGlobalSecondaryIndexUpdatesCreateProjectionTypeDef",
    {"ProjectionType": str, "NonKeyAttributes": List[str]},
    total=False,
)


class ClientUpdateTableGlobalSecondaryIndexUpdatesCreateProjectionTypeDef(
    _ClientUpdateTableGlobalSecondaryIndexUpdatesCreateProjectionTypeDef
):
    """
    Type definition for `ClientUpdateTableGlobalSecondaryIndexUpdatesCreate` `Projection`

    Represents attributes that are copied (projected) from the table into an index. These are in
    addition to the primary key attributes and index key attributes, which are automatically
    projected.

    - **ProjectionType** *(string) --*

      The set of attributes that are projected into the index:

      * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

      * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list of
      projected attributes is in ``NonKeyAttributes`` .

      * ``ALL`` - All of the table attributes are projected into the index.

    - **NonKeyAttributes** *(list) --*

      Represents the non-key attribute names which will be projected into the index.

      For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all of the
      local secondary indexes, must not exceed 20. If you project the same attribute into two
      different indexes, this counts as two distinct attributes when determining the total.

      - *(string) --*
    """


_ClientUpdateTableGlobalSecondaryIndexUpdatesCreateProvisionedThroughputTypeDef = TypedDict(
    "_ClientUpdateTableGlobalSecondaryIndexUpdatesCreateProvisionedThroughputTypeDef",
    {"ReadCapacityUnits": int, "WriteCapacityUnits": int},
)


class ClientUpdateTableGlobalSecondaryIndexUpdatesCreateProvisionedThroughputTypeDef(
    _ClientUpdateTableGlobalSecondaryIndexUpdatesCreateProvisionedThroughputTypeDef
):
    """
    Type definition for `ClientUpdateTableGlobalSecondaryIndexUpdatesCreate` `ProvisionedThroughput`

    Represents the provisioned throughput settings for the specified global secondary index.

    For current minimum and maximum provisioned throughput values, see `Limits
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the *Amazon
    DynamoDB Developer Guide* .

    - **ReadCapacityUnits** *(integer) --* **[REQUIRED]**

      The maximum number of strongly consistent reads consumed per second before DynamoDB returns a
      ``ThrottlingException`` . For more information, see `Specifying Read and Write Requirements
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
      in the *Amazon DynamoDB Developer Guide* .

      If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.

    - **WriteCapacityUnits** *(integer) --* **[REQUIRED]**

      The maximum number of writes consumed per second before DynamoDB returns a
      ``ThrottlingException`` . For more information, see `Specifying Read and Write Requirements
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
      in the *Amazon DynamoDB Developer Guide* .

      If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.
    """


_RequiredClientUpdateTableGlobalSecondaryIndexUpdatesCreateTypeDef = TypedDict(
    "_RequiredClientUpdateTableGlobalSecondaryIndexUpdatesCreateTypeDef",
    {
        "IndexName": str,
        "KeySchema": List[ClientUpdateTableGlobalSecondaryIndexUpdatesCreateKeySchemaTypeDef],
        "Projection": ClientUpdateTableGlobalSecondaryIndexUpdatesCreateProjectionTypeDef,
    },
)
_OptionalClientUpdateTableGlobalSecondaryIndexUpdatesCreateTypeDef = TypedDict(
    "_OptionalClientUpdateTableGlobalSecondaryIndexUpdatesCreateTypeDef",
    {
        "ProvisionedThroughput": ClientUpdateTableGlobalSecondaryIndexUpdatesCreateProvisionedThroughputTypeDef
    },
    total=False,
)


class ClientUpdateTableGlobalSecondaryIndexUpdatesCreateTypeDef(
    _RequiredClientUpdateTableGlobalSecondaryIndexUpdatesCreateTypeDef,
    _OptionalClientUpdateTableGlobalSecondaryIndexUpdatesCreateTypeDef,
):
    """
    Type definition for `ClientUpdateTableGlobalSecondaryIndexUpdates` `Create`

    The parameters required for creating a global secondary index on an existing table:

    * ``IndexName``

    * ``KeySchema``

    * ``AttributeDefinitions``

    * ``Projection``

    * ``ProvisionedThroughput``

    - **IndexName** *(string) --* **[REQUIRED]**

      The name of the global secondary index to be created.

    - **KeySchema** *(list) --* **[REQUIRED]**

      The key schema for the global secondary index.

      - *(dict) --*

        Represents *a single element* of a key schema. A key schema specifies the attributes that
        make up the primary key of a table, or the key attributes of an index.

        A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
        simple primary key would be represented by one ``KeySchemaElement`` (for the partition key).
        A composite primary key would require one ``KeySchemaElement`` for the partition key, and
        another ``KeySchemaElement`` for the sort key.

        A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The
        data type must be one of String, Number, or Binary. The attribute cannot be nested within a
        List or a Map.

        - **AttributeName** *(string) --* **[REQUIRED]**

          The name of a key attribute.

        - **KeyType** *(string) --* **[REQUIRED]**

          The role that this key attribute will assume:

          * ``HASH`` - partition key

          * ``RANGE`` - sort key

          .. note::

            The partition key of an item is also known as its *hash attribute* . The term "hash
            attribute" derives from DynamoDB's usage of an internal hash function to evenly
            distribute data items across partitions, based on their partition key values.

            The sort key of an item is also known as its *range attribute* . The term "range
            attribute" derives from the way DynamoDB stores items with the same partition key
            physically close together, in sorted order by the sort key value.

    - **Projection** *(dict) --* **[REQUIRED]**

      Represents attributes that are copied (projected) from the table into an index. These are in
      addition to the primary key attributes and index key attributes, which are automatically
      projected.

      - **ProjectionType** *(string) --*

        The set of attributes that are projected into the index:

        * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

        * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list
        of projected attributes is in ``NonKeyAttributes`` .

        * ``ALL`` - All of the table attributes are projected into the index.

      - **NonKeyAttributes** *(list) --*

        Represents the non-key attribute names which will be projected into the index.

        For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all of
        the local secondary indexes, must not exceed 20. If you project the same attribute into two
        different indexes, this counts as two distinct attributes when determining the total.

        - *(string) --*

    - **ProvisionedThroughput** *(dict) --*

      Represents the provisioned throughput settings for the specified global secondary index.

      For current minimum and maximum provisioned throughput values, see `Limits
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
      *Amazon DynamoDB Developer Guide* .

      - **ReadCapacityUnits** *(integer) --* **[REQUIRED]**

        The maximum number of strongly consistent reads consumed per second before DynamoDB returns
        a ``ThrottlingException`` . For more information, see `Specifying Read and Write
        Requirements
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
        in the *Amazon DynamoDB Developer Guide* .

        If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.

      - **WriteCapacityUnits** *(integer) --* **[REQUIRED]**

        The maximum number of writes consumed per second before DynamoDB returns a
        ``ThrottlingException`` . For more information, see `Specifying Read and Write Requirements
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
        in the *Amazon DynamoDB Developer Guide* .

        If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.
    """


_ClientUpdateTableGlobalSecondaryIndexUpdatesDeleteTypeDef = TypedDict(
    "_ClientUpdateTableGlobalSecondaryIndexUpdatesDeleteTypeDef", {"IndexName": str}
)


class ClientUpdateTableGlobalSecondaryIndexUpdatesDeleteTypeDef(
    _ClientUpdateTableGlobalSecondaryIndexUpdatesDeleteTypeDef
):
    """
    Type definition for `ClientUpdateTableGlobalSecondaryIndexUpdates` `Delete`

    The name of an existing global secondary index to be removed.

    - **IndexName** *(string) --* **[REQUIRED]**

      The name of the global secondary index to be deleted.
    """


_ClientUpdateTableGlobalSecondaryIndexUpdatesUpdateProvisionedThroughputTypeDef = TypedDict(
    "_ClientUpdateTableGlobalSecondaryIndexUpdatesUpdateProvisionedThroughputTypeDef",
    {"ReadCapacityUnits": int, "WriteCapacityUnits": int},
)


class ClientUpdateTableGlobalSecondaryIndexUpdatesUpdateProvisionedThroughputTypeDef(
    _ClientUpdateTableGlobalSecondaryIndexUpdatesUpdateProvisionedThroughputTypeDef
):
    """
    Type definition for `ClientUpdateTableGlobalSecondaryIndexUpdatesUpdate` `ProvisionedThroughput`

    Represents the provisioned throughput settings for the specified global secondary index.

    For current minimum and maximum provisioned throughput values, see `Limits
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the *Amazon
    DynamoDB Developer Guide* .

    - **ReadCapacityUnits** *(integer) --* **[REQUIRED]**

      The maximum number of strongly consistent reads consumed per second before DynamoDB returns a
      ``ThrottlingException`` . For more information, see `Specifying Read and Write Requirements
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
      in the *Amazon DynamoDB Developer Guide* .

      If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.

    - **WriteCapacityUnits** *(integer) --* **[REQUIRED]**

      The maximum number of writes consumed per second before DynamoDB returns a
      ``ThrottlingException`` . For more information, see `Specifying Read and Write Requirements
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
      in the *Amazon DynamoDB Developer Guide* .

      If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.
    """


_ClientUpdateTableGlobalSecondaryIndexUpdatesUpdateTypeDef = TypedDict(
    "_ClientUpdateTableGlobalSecondaryIndexUpdatesUpdateTypeDef",
    {
        "IndexName": str,
        "ProvisionedThroughput": ClientUpdateTableGlobalSecondaryIndexUpdatesUpdateProvisionedThroughputTypeDef,
    },
)


class ClientUpdateTableGlobalSecondaryIndexUpdatesUpdateTypeDef(
    _ClientUpdateTableGlobalSecondaryIndexUpdatesUpdateTypeDef
):
    """
    Type definition for `ClientUpdateTableGlobalSecondaryIndexUpdates` `Update`

    The name of an existing global secondary index, along with new provisioned throughput settings
    to be applied to that index.

    - **IndexName** *(string) --* **[REQUIRED]**

      The name of the global secondary index to be updated.

    - **ProvisionedThroughput** *(dict) --* **[REQUIRED]**

      Represents the provisioned throughput settings for the specified global secondary index.

      For current minimum and maximum provisioned throughput values, see `Limits
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
      *Amazon DynamoDB Developer Guide* .

      - **ReadCapacityUnits** *(integer) --* **[REQUIRED]**

        The maximum number of strongly consistent reads consumed per second before DynamoDB returns
        a ``ThrottlingException`` . For more information, see `Specifying Read and Write
        Requirements
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
        in the *Amazon DynamoDB Developer Guide* .

        If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.

      - **WriteCapacityUnits** *(integer) --* **[REQUIRED]**

        The maximum number of writes consumed per second before DynamoDB returns a
        ``ThrottlingException`` . For more information, see `Specifying Read and Write Requirements
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
        in the *Amazon DynamoDB Developer Guide* .

        If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.
    """


_ClientUpdateTableGlobalSecondaryIndexUpdatesTypeDef = TypedDict(
    "_ClientUpdateTableGlobalSecondaryIndexUpdatesTypeDef",
    {
        "Update": ClientUpdateTableGlobalSecondaryIndexUpdatesUpdateTypeDef,
        "Create": ClientUpdateTableGlobalSecondaryIndexUpdatesCreateTypeDef,
        "Delete": ClientUpdateTableGlobalSecondaryIndexUpdatesDeleteTypeDef,
    },
    total=False,
)


class ClientUpdateTableGlobalSecondaryIndexUpdatesTypeDef(
    _ClientUpdateTableGlobalSecondaryIndexUpdatesTypeDef
):
    """
    Type definition for `ClientUpdateTable` `GlobalSecondaryIndexUpdates`

    Represents one of the following:

    * A new global secondary index to be added to an existing table.

    * New provisioned throughput parameters for an existing global secondary index.

    * An existing global secondary index to be removed from an existing table.

    - **Update** *(dict) --*

      The name of an existing global secondary index, along with new provisioned throughput settings
      to be applied to that index.

      - **IndexName** *(string) --* **[REQUIRED]**

        The name of the global secondary index to be updated.

      - **ProvisionedThroughput** *(dict) --* **[REQUIRED]**

        Represents the provisioned throughput settings for the specified global secondary index.

        For current minimum and maximum provisioned throughput values, see `Limits
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
        *Amazon DynamoDB Developer Guide* .

        - **ReadCapacityUnits** *(integer) --* **[REQUIRED]**

          The maximum number of strongly consistent reads consumed per second before DynamoDB
          returns a ``ThrottlingException`` . For more information, see `Specifying Read and Write
          Requirements
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
          in the *Amazon DynamoDB Developer Guide* .

          If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.

        - **WriteCapacityUnits** *(integer) --* **[REQUIRED]**

          The maximum number of writes consumed per second before DynamoDB returns a
          ``ThrottlingException`` . For more information, see `Specifying Read and Write
          Requirements
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
          in the *Amazon DynamoDB Developer Guide* .

          If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.

    - **Create** *(dict) --*

      The parameters required for creating a global secondary index on an existing table:

      * ``IndexName``

      * ``KeySchema``

      * ``AttributeDefinitions``

      * ``Projection``

      * ``ProvisionedThroughput``

      - **IndexName** *(string) --* **[REQUIRED]**

        The name of the global secondary index to be created.

      - **KeySchema** *(list) --* **[REQUIRED]**

        The key schema for the global secondary index.

        - *(dict) --*

          Represents *a single element* of a key schema. A key schema specifies the attributes that
          make up the primary key of a table, or the key attributes of an index.

          A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
          simple primary key would be represented by one ``KeySchemaElement`` (for the partition
          key). A composite primary key would require one ``KeySchemaElement`` for the partition
          key, and another ``KeySchemaElement`` for the sort key.

          A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The
          data type must be one of String, Number, or Binary. The attribute cannot be nested within
          a List or a Map.

          - **AttributeName** *(string) --* **[REQUIRED]**

            The name of a key attribute.

          - **KeyType** *(string) --* **[REQUIRED]**

            The role that this key attribute will assume:

            * ``HASH`` - partition key

            * ``RANGE`` - sort key

            .. note::

              The partition key of an item is also known as its *hash attribute* . The term "hash
              attribute" derives from DynamoDB's usage of an internal hash function to evenly
              distribute data items across partitions, based on their partition key values.

              The sort key of an item is also known as its *range attribute* . The term "range
              attribute" derives from the way DynamoDB stores items with the same partition key
              physically close together, in sorted order by the sort key value.

      - **Projection** *(dict) --* **[REQUIRED]**

        Represents attributes that are copied (projected) from the table into an index. These are in
        addition to the primary key attributes and index key attributes, which are automatically
        projected.

        - **ProjectionType** *(string) --*

          The set of attributes that are projected into the index:

          * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

          * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list
          of projected attributes is in ``NonKeyAttributes`` .

          * ``ALL`` - All of the table attributes are projected into the index.

        - **NonKeyAttributes** *(list) --*

          Represents the non-key attribute names which will be projected into the index.

          For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all of
          the local secondary indexes, must not exceed 20. If you project the same attribute into
          two different indexes, this counts as two distinct attributes when determining the total.

          - *(string) --*

      - **ProvisionedThroughput** *(dict) --*

        Represents the provisioned throughput settings for the specified global secondary index.

        For current minimum and maximum provisioned throughput values, see `Limits
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
        *Amazon DynamoDB Developer Guide* .

        - **ReadCapacityUnits** *(integer) --* **[REQUIRED]**

          The maximum number of strongly consistent reads consumed per second before DynamoDB
          returns a ``ThrottlingException`` . For more information, see `Specifying Read and Write
          Requirements
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
          in the *Amazon DynamoDB Developer Guide* .

          If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.

        - **WriteCapacityUnits** *(integer) --* **[REQUIRED]**

          The maximum number of writes consumed per second before DynamoDB returns a
          ``ThrottlingException`` . For more information, see `Specifying Read and Write
          Requirements
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
          in the *Amazon DynamoDB Developer Guide* .

          If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.

    - **Delete** *(dict) --*

      The name of an existing global secondary index to be removed.

      - **IndexName** *(string) --* **[REQUIRED]**

        The name of the global secondary index to be deleted.
    """


_ClientUpdateTableProvisionedThroughputTypeDef = TypedDict(
    "_ClientUpdateTableProvisionedThroughputTypeDef",
    {"ReadCapacityUnits": int, "WriteCapacityUnits": int},
)


class ClientUpdateTableProvisionedThroughputTypeDef(_ClientUpdateTableProvisionedThroughputTypeDef):
    """
    Type definition for `ClientUpdateTable` `ProvisionedThroughput`

    The new provisioned throughput settings for the specified table or index.

    - **ReadCapacityUnits** *(integer) --* **[REQUIRED]**

      The maximum number of strongly consistent reads consumed per second before DynamoDB returns a
      ``ThrottlingException`` . For more information, see `Specifying Read and Write Requirements
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
      in the *Amazon DynamoDB Developer Guide* .

      If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.

    - **WriteCapacityUnits** *(integer) --* **[REQUIRED]**

      The maximum number of writes consumed per second before DynamoDB returns a
      ``ThrottlingException`` . For more information, see `Specifying Read and Write Requirements
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
      in the *Amazon DynamoDB Developer Guide* .

      If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.
    """


_RequiredClientUpdateTableReplicaAutoScalingGlobalSecondaryIndexUpdatesProvisionedWriteCapacityAutoScalingUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef = TypedDict(
    "_RequiredClientUpdateTableReplicaAutoScalingGlobalSecondaryIndexUpdatesProvisionedWriteCapacityAutoScalingUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef",
    {"TargetValue": float},
)
_OptionalClientUpdateTableReplicaAutoScalingGlobalSecondaryIndexUpdatesProvisionedWriteCapacityAutoScalingUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef = TypedDict(
    "_OptionalClientUpdateTableReplicaAutoScalingGlobalSecondaryIndexUpdatesProvisionedWriteCapacityAutoScalingUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef",
    {"DisableScaleIn": bool, "ScaleInCooldown": int, "ScaleOutCooldown": int},
    total=False,
)


class ClientUpdateTableReplicaAutoScalingGlobalSecondaryIndexUpdatesProvisionedWriteCapacityAutoScalingUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef(
    _RequiredClientUpdateTableReplicaAutoScalingGlobalSecondaryIndexUpdatesProvisionedWriteCapacityAutoScalingUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef,
    _OptionalClientUpdateTableReplicaAutoScalingGlobalSecondaryIndexUpdatesProvisionedWriteCapacityAutoScalingUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef,
):
    """
    Type definition for
    `ClientUpdateTableReplicaAutoScalingGlobalSecondaryIndexUpdatesProvisionedWriteCapacityAutoScalingUpdateScalingPolicyUpdate`
    `TargetTrackingScalingPolicyConfiguration`

    Represents a target tracking scaling policy configuration.

    - **DisableScaleIn** *(boolean) --*

      Indicates whether scale in by the target tracking policy is disabled. If the value is true,
      scale in is disabled and the target tracking policy won't remove capacity from the scalable
      resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity
      from the scalable resource. The default value is false.

    - **ScaleInCooldown** *(integer) --*

      The amount of time, in seconds, after a scale in activity completes before another scale in
      activity can start. The cooldown period is used to block subsequent scale in requests until it
      has expired. You should scale in conservatively to protect your application's availability.
      However, if another alarm triggers a scale out policy during the cooldown period after a
      scale-in, application auto scaling scales out your scalable target immediately.

    - **ScaleOutCooldown** *(integer) --*

      The amount of time, in seconds, after a scale out activity completes before another scale out
      activity can start. While the cooldown period is in effect, the capacity that has been added
      by the previous scale out event that initiated the cooldown is calculated as part of the
      desired capacity for the next scale out. You should continuously (but not excessively) scale
      out.

    - **TargetValue** *(float) --* **[REQUIRED]**

      The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or
      2e-360 to 2e360 (Base 2).
    """


_RequiredClientUpdateTableReplicaAutoScalingGlobalSecondaryIndexUpdatesProvisionedWriteCapacityAutoScalingUpdateScalingPolicyUpdateTypeDef = TypedDict(
    "_RequiredClientUpdateTableReplicaAutoScalingGlobalSecondaryIndexUpdatesProvisionedWriteCapacityAutoScalingUpdateScalingPolicyUpdateTypeDef",
    {
        "TargetTrackingScalingPolicyConfiguration": ClientUpdateTableReplicaAutoScalingGlobalSecondaryIndexUpdatesProvisionedWriteCapacityAutoScalingUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef
    },
)
_OptionalClientUpdateTableReplicaAutoScalingGlobalSecondaryIndexUpdatesProvisionedWriteCapacityAutoScalingUpdateScalingPolicyUpdateTypeDef = TypedDict(
    "_OptionalClientUpdateTableReplicaAutoScalingGlobalSecondaryIndexUpdatesProvisionedWriteCapacityAutoScalingUpdateScalingPolicyUpdateTypeDef",
    {"PolicyName": str},
    total=False,
)


class ClientUpdateTableReplicaAutoScalingGlobalSecondaryIndexUpdatesProvisionedWriteCapacityAutoScalingUpdateScalingPolicyUpdateTypeDef(
    _RequiredClientUpdateTableReplicaAutoScalingGlobalSecondaryIndexUpdatesProvisionedWriteCapacityAutoScalingUpdateScalingPolicyUpdateTypeDef,
    _OptionalClientUpdateTableReplicaAutoScalingGlobalSecondaryIndexUpdatesProvisionedWriteCapacityAutoScalingUpdateScalingPolicyUpdateTypeDef,
):
    """
    Type definition for
    `ClientUpdateTableReplicaAutoScalingGlobalSecondaryIndexUpdatesProvisionedWriteCapacityAutoScalingUpdate`
    `ScalingPolicyUpdate`

    The scaling policy to apply for scaling target global table or global secondary index capacity
    units.

    - **PolicyName** *(string) --*

      The name of the scaling policy.

    - **TargetTrackingScalingPolicyConfiguration** *(dict) --* **[REQUIRED]**

      Represents a target tracking scaling policy configuration.

      - **DisableScaleIn** *(boolean) --*

        Indicates whether scale in by the target tracking policy is disabled. If the value is true,
        scale in is disabled and the target tracking policy won't remove capacity from the scalable
        resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity
        from the scalable resource. The default value is false.

      - **ScaleInCooldown** *(integer) --*

        The amount of time, in seconds, after a scale in activity completes before another scale in
        activity can start. The cooldown period is used to block subsequent scale in requests until
        it has expired. You should scale in conservatively to protect your application's
        availability. However, if another alarm triggers a scale out policy during the cooldown
        period after a scale-in, application auto scaling scales out your scalable target
        immediately.

      - **ScaleOutCooldown** *(integer) --*

        The amount of time, in seconds, after a scale out activity completes before another scale
        out activity can start. While the cooldown period is in effect, the capacity that has been
        added by the previous scale out event that initiated the cooldown is calculated as part of
        the desired capacity for the next scale out. You should continuously (but not excessively)
        scale out.

      - **TargetValue** *(float) --* **[REQUIRED]**

        The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or
        2e-360 to 2e360 (Base 2).
    """


_ClientUpdateTableReplicaAutoScalingGlobalSecondaryIndexUpdatesProvisionedWriteCapacityAutoScalingUpdateTypeDef = TypedDict(
    "_ClientUpdateTableReplicaAutoScalingGlobalSecondaryIndexUpdatesProvisionedWriteCapacityAutoScalingUpdateTypeDef",
    {
        "MinimumUnits": int,
        "MaximumUnits": int,
        "AutoScalingDisabled": bool,
        "AutoScalingRoleArn": str,
        "ScalingPolicyUpdate": ClientUpdateTableReplicaAutoScalingGlobalSecondaryIndexUpdatesProvisionedWriteCapacityAutoScalingUpdateScalingPolicyUpdateTypeDef,
    },
    total=False,
)


class ClientUpdateTableReplicaAutoScalingGlobalSecondaryIndexUpdatesProvisionedWriteCapacityAutoScalingUpdateTypeDef(
    _ClientUpdateTableReplicaAutoScalingGlobalSecondaryIndexUpdatesProvisionedWriteCapacityAutoScalingUpdateTypeDef
):
    """
    Type definition for `ClientUpdateTableReplicaAutoScalingGlobalSecondaryIndexUpdates`
    `ProvisionedWriteCapacityAutoScalingUpdate`

    Represents the auto scaling settings to be modified for a global table or global secondary
    index.

    - **MinimumUnits** *(integer) --*

      The minimum capacity units that a global table or global secondary index should be scaled down
      to.

    - **MaximumUnits** *(integer) --*

      The maximum capacity units that a global table or global secondary index should be scaled up
      to.

    - **AutoScalingDisabled** *(boolean) --*

      Disabled auto scaling for this global table or global secondary index.

    - **AutoScalingRoleArn** *(string) --*

      Role ARN used for configuring auto scaling policy.

    - **ScalingPolicyUpdate** *(dict) --*

      The scaling policy to apply for scaling target global table or global secondary index capacity
      units.

      - **PolicyName** *(string) --*

        The name of the scaling policy.

      - **TargetTrackingScalingPolicyConfiguration** *(dict) --* **[REQUIRED]**

        Represents a target tracking scaling policy configuration.

        - **DisableScaleIn** *(boolean) --*

          Indicates whether scale in by the target tracking policy is disabled. If the value is
          true, scale in is disabled and the target tracking policy won't remove capacity from the
          scalable resource. Otherwise, scale in is enabled and the target tracking policy can
          remove capacity from the scalable resource. The default value is false.

        - **ScaleInCooldown** *(integer) --*

          The amount of time, in seconds, after a scale in activity completes before another scale
          in activity can start. The cooldown period is used to block subsequent scale in requests
          until it has expired. You should scale in conservatively to protect your application's
          availability. However, if another alarm triggers a scale out policy during the cooldown
          period after a scale-in, application auto scaling scales out your scalable target
          immediately.

        - **ScaleOutCooldown** *(integer) --*

          The amount of time, in seconds, after a scale out activity completes before another scale
          out activity can start. While the cooldown period is in effect, the capacity that has been
          added by the previous scale out event that initiated the cooldown is calculated as part of
          the desired capacity for the next scale out. You should continuously (but not excessively)
          scale out.

        - **TargetValue** *(float) --* **[REQUIRED]**

          The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or
          2e-360 to 2e360 (Base 2).
    """


_ClientUpdateTableReplicaAutoScalingGlobalSecondaryIndexUpdatesTypeDef = TypedDict(
    "_ClientUpdateTableReplicaAutoScalingGlobalSecondaryIndexUpdatesTypeDef",
    {
        "IndexName": str,
        "ProvisionedWriteCapacityAutoScalingUpdate": ClientUpdateTableReplicaAutoScalingGlobalSecondaryIndexUpdatesProvisionedWriteCapacityAutoScalingUpdateTypeDef,
    },
    total=False,
)


class ClientUpdateTableReplicaAutoScalingGlobalSecondaryIndexUpdatesTypeDef(
    _ClientUpdateTableReplicaAutoScalingGlobalSecondaryIndexUpdatesTypeDef
):
    """
    Type definition for `ClientUpdateTableReplicaAutoScaling` `GlobalSecondaryIndexUpdates`

    Represents the auto scaling settings of a global secondary index for a global table that will be
    modified.

    - **IndexName** *(string) --*

      The name of the global secondary index.

    - **ProvisionedWriteCapacityAutoScalingUpdate** *(dict) --*

      Represents the auto scaling settings to be modified for a global table or global secondary
      index.

      - **MinimumUnits** *(integer) --*

        The minimum capacity units that a global table or global secondary index should be scaled
        down to.

      - **MaximumUnits** *(integer) --*

        The maximum capacity units that a global table or global secondary index should be scaled up
        to.

      - **AutoScalingDisabled** *(boolean) --*

        Disabled auto scaling for this global table or global secondary index.

      - **AutoScalingRoleArn** *(string) --*

        Role ARN used for configuring auto scaling policy.

      - **ScalingPolicyUpdate** *(dict) --*

        The scaling policy to apply for scaling target global table or global secondary index
        capacity units.

        - **PolicyName** *(string) --*

          The name of the scaling policy.

        - **TargetTrackingScalingPolicyConfiguration** *(dict) --* **[REQUIRED]**

          Represents a target tracking scaling policy configuration.

          - **DisableScaleIn** *(boolean) --*

            Indicates whether scale in by the target tracking policy is disabled. If the value is
            true, scale in is disabled and the target tracking policy won't remove capacity from the
            scalable resource. Otherwise, scale in is enabled and the target tracking policy can
            remove capacity from the scalable resource. The default value is false.

          - **ScaleInCooldown** *(integer) --*

            The amount of time, in seconds, after a scale in activity completes before another scale
            in activity can start. The cooldown period is used to block subsequent scale in requests
            until it has expired. You should scale in conservatively to protect your application's
            availability. However, if another alarm triggers a scale out policy during the cooldown
            period after a scale-in, application auto scaling scales out your scalable target
            immediately.

          - **ScaleOutCooldown** *(integer) --*

            The amount of time, in seconds, after a scale out activity completes before another
            scale out activity can start. While the cooldown period is in effect, the capacity that
            has been added by the previous scale out event that initiated the cooldown is calculated
            as part of the desired capacity for the next scale out. You should continuously (but not
            excessively) scale out.

          - **TargetValue** *(float) --* **[REQUIRED]**

            The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10)
            or 2e-360 to 2e360 (Base 2).
    """


_RequiredClientUpdateTableReplicaAutoScalingProvisionedWriteCapacityAutoScalingUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef = TypedDict(
    "_RequiredClientUpdateTableReplicaAutoScalingProvisionedWriteCapacityAutoScalingUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef",
    {"TargetValue": float},
)
_OptionalClientUpdateTableReplicaAutoScalingProvisionedWriteCapacityAutoScalingUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef = TypedDict(
    "_OptionalClientUpdateTableReplicaAutoScalingProvisionedWriteCapacityAutoScalingUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef",
    {"DisableScaleIn": bool, "ScaleInCooldown": int, "ScaleOutCooldown": int},
    total=False,
)


class ClientUpdateTableReplicaAutoScalingProvisionedWriteCapacityAutoScalingUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef(
    _RequiredClientUpdateTableReplicaAutoScalingProvisionedWriteCapacityAutoScalingUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef,
    _OptionalClientUpdateTableReplicaAutoScalingProvisionedWriteCapacityAutoScalingUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef,
):
    """
    Type definition for
    `ClientUpdateTableReplicaAutoScalingProvisionedWriteCapacityAutoScalingUpdateScalingPolicyUpdate`
    `TargetTrackingScalingPolicyConfiguration`

    Represents a target tracking scaling policy configuration.

    - **DisableScaleIn** *(boolean) --*

      Indicates whether scale in by the target tracking policy is disabled. If the value is true,
      scale in is disabled and the target tracking policy won't remove capacity from the scalable
      resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity
      from the scalable resource. The default value is false.

    - **ScaleInCooldown** *(integer) --*

      The amount of time, in seconds, after a scale in activity completes before another scale in
      activity can start. The cooldown period is used to block subsequent scale in requests until it
      has expired. You should scale in conservatively to protect your application's availability.
      However, if another alarm triggers a scale out policy during the cooldown period after a
      scale-in, application auto scaling scales out your scalable target immediately.

    - **ScaleOutCooldown** *(integer) --*

      The amount of time, in seconds, after a scale out activity completes before another scale out
      activity can start. While the cooldown period is in effect, the capacity that has been added
      by the previous scale out event that initiated the cooldown is calculated as part of the
      desired capacity for the next scale out. You should continuously (but not excessively) scale
      out.

    - **TargetValue** *(float) --* **[REQUIRED]**

      The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or
      2e-360 to 2e360 (Base 2).
    """


_RequiredClientUpdateTableReplicaAutoScalingProvisionedWriteCapacityAutoScalingUpdateScalingPolicyUpdateTypeDef = TypedDict(
    "_RequiredClientUpdateTableReplicaAutoScalingProvisionedWriteCapacityAutoScalingUpdateScalingPolicyUpdateTypeDef",
    {
        "TargetTrackingScalingPolicyConfiguration": ClientUpdateTableReplicaAutoScalingProvisionedWriteCapacityAutoScalingUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef
    },
)
_OptionalClientUpdateTableReplicaAutoScalingProvisionedWriteCapacityAutoScalingUpdateScalingPolicyUpdateTypeDef = TypedDict(
    "_OptionalClientUpdateTableReplicaAutoScalingProvisionedWriteCapacityAutoScalingUpdateScalingPolicyUpdateTypeDef",
    {"PolicyName": str},
    total=False,
)


class ClientUpdateTableReplicaAutoScalingProvisionedWriteCapacityAutoScalingUpdateScalingPolicyUpdateTypeDef(
    _RequiredClientUpdateTableReplicaAutoScalingProvisionedWriteCapacityAutoScalingUpdateScalingPolicyUpdateTypeDef,
    _OptionalClientUpdateTableReplicaAutoScalingProvisionedWriteCapacityAutoScalingUpdateScalingPolicyUpdateTypeDef,
):
    """
    Type definition for
    `ClientUpdateTableReplicaAutoScalingProvisionedWriteCapacityAutoScalingUpdate`
    `ScalingPolicyUpdate`

    The scaling policy to apply for scaling target global table or global secondary index capacity
    units.

    - **PolicyName** *(string) --*

      The name of the scaling policy.

    - **TargetTrackingScalingPolicyConfiguration** *(dict) --* **[REQUIRED]**

      Represents a target tracking scaling policy configuration.

      - **DisableScaleIn** *(boolean) --*

        Indicates whether scale in by the target tracking policy is disabled. If the value is true,
        scale in is disabled and the target tracking policy won't remove capacity from the scalable
        resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity
        from the scalable resource. The default value is false.

      - **ScaleInCooldown** *(integer) --*

        The amount of time, in seconds, after a scale in activity completes before another scale in
        activity can start. The cooldown period is used to block subsequent scale in requests until
        it has expired. You should scale in conservatively to protect your application's
        availability. However, if another alarm triggers a scale out policy during the cooldown
        period after a scale-in, application auto scaling scales out your scalable target
        immediately.

      - **ScaleOutCooldown** *(integer) --*

        The amount of time, in seconds, after a scale out activity completes before another scale
        out activity can start. While the cooldown period is in effect, the capacity that has been
        added by the previous scale out event that initiated the cooldown is calculated as part of
        the desired capacity for the next scale out. You should continuously (but not excessively)
        scale out.

      - **TargetValue** *(float) --* **[REQUIRED]**

        The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or
        2e-360 to 2e360 (Base 2).
    """


_ClientUpdateTableReplicaAutoScalingProvisionedWriteCapacityAutoScalingUpdateTypeDef = TypedDict(
    "_ClientUpdateTableReplicaAutoScalingProvisionedWriteCapacityAutoScalingUpdateTypeDef",
    {
        "MinimumUnits": int,
        "MaximumUnits": int,
        "AutoScalingDisabled": bool,
        "AutoScalingRoleArn": str,
        "ScalingPolicyUpdate": ClientUpdateTableReplicaAutoScalingProvisionedWriteCapacityAutoScalingUpdateScalingPolicyUpdateTypeDef,
    },
    total=False,
)


class ClientUpdateTableReplicaAutoScalingProvisionedWriteCapacityAutoScalingUpdateTypeDef(
    _ClientUpdateTableReplicaAutoScalingProvisionedWriteCapacityAutoScalingUpdateTypeDef
):
    """
    Type definition for `ClientUpdateTableReplicaAutoScaling`
    `ProvisionedWriteCapacityAutoScalingUpdate`

    Represents the auto scaling settings to be modified for a global table or global secondary
    index.

    - **MinimumUnits** *(integer) --*

      The minimum capacity units that a global table or global secondary index should be scaled down
      to.

    - **MaximumUnits** *(integer) --*

      The maximum capacity units that a global table or global secondary index should be scaled up
      to.

    - **AutoScalingDisabled** *(boolean) --*

      Disabled auto scaling for this global table or global secondary index.

    - **AutoScalingRoleArn** *(string) --*

      Role ARN used for configuring auto scaling policy.

    - **ScalingPolicyUpdate** *(dict) --*

      The scaling policy to apply for scaling target global table or global secondary index capacity
      units.

      - **PolicyName** *(string) --*

        The name of the scaling policy.

      - **TargetTrackingScalingPolicyConfiguration** *(dict) --* **[REQUIRED]**

        Represents a target tracking scaling policy configuration.

        - **DisableScaleIn** *(boolean) --*

          Indicates whether scale in by the target tracking policy is disabled. If the value is
          true, scale in is disabled and the target tracking policy won't remove capacity from the
          scalable resource. Otherwise, scale in is enabled and the target tracking policy can
          remove capacity from the scalable resource. The default value is false.

        - **ScaleInCooldown** *(integer) --*

          The amount of time, in seconds, after a scale in activity completes before another scale
          in activity can start. The cooldown period is used to block subsequent scale in requests
          until it has expired. You should scale in conservatively to protect your application's
          availability. However, if another alarm triggers a scale out policy during the cooldown
          period after a scale-in, application auto scaling scales out your scalable target
          immediately.

        - **ScaleOutCooldown** *(integer) --*

          The amount of time, in seconds, after a scale out activity completes before another scale
          out activity can start. While the cooldown period is in effect, the capacity that has been
          added by the previous scale out event that initiated the cooldown is calculated as part of
          the desired capacity for the next scale out. You should continuously (but not excessively)
          scale out.

        - **TargetValue** *(float) --* **[REQUIRED]**

          The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or
          2e-360 to 2e360 (Base 2).
    """


_RequiredClientUpdateTableReplicaAutoScalingReplicaUpdatesReplicaGlobalSecondaryIndexUpdatesProvisionedReadCapacityAutoScalingUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef = TypedDict(
    "_RequiredClientUpdateTableReplicaAutoScalingReplicaUpdatesReplicaGlobalSecondaryIndexUpdatesProvisionedReadCapacityAutoScalingUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef",
    {"TargetValue": float},
)
_OptionalClientUpdateTableReplicaAutoScalingReplicaUpdatesReplicaGlobalSecondaryIndexUpdatesProvisionedReadCapacityAutoScalingUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef = TypedDict(
    "_OptionalClientUpdateTableReplicaAutoScalingReplicaUpdatesReplicaGlobalSecondaryIndexUpdatesProvisionedReadCapacityAutoScalingUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef",
    {"DisableScaleIn": bool, "ScaleInCooldown": int, "ScaleOutCooldown": int},
    total=False,
)


class ClientUpdateTableReplicaAutoScalingReplicaUpdatesReplicaGlobalSecondaryIndexUpdatesProvisionedReadCapacityAutoScalingUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef(
    _RequiredClientUpdateTableReplicaAutoScalingReplicaUpdatesReplicaGlobalSecondaryIndexUpdatesProvisionedReadCapacityAutoScalingUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef,
    _OptionalClientUpdateTableReplicaAutoScalingReplicaUpdatesReplicaGlobalSecondaryIndexUpdatesProvisionedReadCapacityAutoScalingUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef,
):
    """
    Type definition for
    `ClientUpdateTableReplicaAutoScalingReplicaUpdatesReplicaGlobalSecondaryIndexUpdatesProvisionedReadCapacityAutoScalingUpdateScalingPolicyUpdate`
    `TargetTrackingScalingPolicyConfiguration`

    Represents a target tracking scaling policy configuration.

    - **DisableScaleIn** *(boolean) --*

      Indicates whether scale in by the target tracking policy is disabled. If the value is true,
      scale in is disabled and the target tracking policy won't remove capacity from the scalable
      resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity
      from the scalable resource. The default value is false.

    - **ScaleInCooldown** *(integer) --*

      The amount of time, in seconds, after a scale in activity completes before another scale in
      activity can start. The cooldown period is used to block subsequent scale in requests until it
      has expired. You should scale in conservatively to protect your application's availability.
      However, if another alarm triggers a scale out policy during the cooldown period after a
      scale-in, application auto scaling scales out your scalable target immediately.

    - **ScaleOutCooldown** *(integer) --*

      The amount of time, in seconds, after a scale out activity completes before another scale out
      activity can start. While the cooldown period is in effect, the capacity that has been added
      by the previous scale out event that initiated the cooldown is calculated as part of the
      desired capacity for the next scale out. You should continuously (but not excessively) scale
      out.

    - **TargetValue** *(float) --* **[REQUIRED]**

      The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or
      2e-360 to 2e360 (Base 2).
    """


_RequiredClientUpdateTableReplicaAutoScalingReplicaUpdatesReplicaGlobalSecondaryIndexUpdatesProvisionedReadCapacityAutoScalingUpdateScalingPolicyUpdateTypeDef = TypedDict(
    "_RequiredClientUpdateTableReplicaAutoScalingReplicaUpdatesReplicaGlobalSecondaryIndexUpdatesProvisionedReadCapacityAutoScalingUpdateScalingPolicyUpdateTypeDef",
    {
        "TargetTrackingScalingPolicyConfiguration": ClientUpdateTableReplicaAutoScalingReplicaUpdatesReplicaGlobalSecondaryIndexUpdatesProvisionedReadCapacityAutoScalingUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef
    },
)
_OptionalClientUpdateTableReplicaAutoScalingReplicaUpdatesReplicaGlobalSecondaryIndexUpdatesProvisionedReadCapacityAutoScalingUpdateScalingPolicyUpdateTypeDef = TypedDict(
    "_OptionalClientUpdateTableReplicaAutoScalingReplicaUpdatesReplicaGlobalSecondaryIndexUpdatesProvisionedReadCapacityAutoScalingUpdateScalingPolicyUpdateTypeDef",
    {"PolicyName": str},
    total=False,
)


class ClientUpdateTableReplicaAutoScalingReplicaUpdatesReplicaGlobalSecondaryIndexUpdatesProvisionedReadCapacityAutoScalingUpdateScalingPolicyUpdateTypeDef(
    _RequiredClientUpdateTableReplicaAutoScalingReplicaUpdatesReplicaGlobalSecondaryIndexUpdatesProvisionedReadCapacityAutoScalingUpdateScalingPolicyUpdateTypeDef,
    _OptionalClientUpdateTableReplicaAutoScalingReplicaUpdatesReplicaGlobalSecondaryIndexUpdatesProvisionedReadCapacityAutoScalingUpdateScalingPolicyUpdateTypeDef,
):
    """
    Type definition for
    `ClientUpdateTableReplicaAutoScalingReplicaUpdatesReplicaGlobalSecondaryIndexUpdatesProvisionedReadCapacityAutoScalingUpdate`
    `ScalingPolicyUpdate`

    The scaling policy to apply for scaling target global table or global secondary index capacity
    units.

    - **PolicyName** *(string) --*

      The name of the scaling policy.

    - **TargetTrackingScalingPolicyConfiguration** *(dict) --* **[REQUIRED]**

      Represents a target tracking scaling policy configuration.

      - **DisableScaleIn** *(boolean) --*

        Indicates whether scale in by the target tracking policy is disabled. If the value is true,
        scale in is disabled and the target tracking policy won't remove capacity from the scalable
        resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity
        from the scalable resource. The default value is false.

      - **ScaleInCooldown** *(integer) --*

        The amount of time, in seconds, after a scale in activity completes before another scale in
        activity can start. The cooldown period is used to block subsequent scale in requests until
        it has expired. You should scale in conservatively to protect your application's
        availability. However, if another alarm triggers a scale out policy during the cooldown
        period after a scale-in, application auto scaling scales out your scalable target
        immediately.

      - **ScaleOutCooldown** *(integer) --*

        The amount of time, in seconds, after a scale out activity completes before another scale
        out activity can start. While the cooldown period is in effect, the capacity that has been
        added by the previous scale out event that initiated the cooldown is calculated as part of
        the desired capacity for the next scale out. You should continuously (but not excessively)
        scale out.

      - **TargetValue** *(float) --* **[REQUIRED]**

        The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or
        2e-360 to 2e360 (Base 2).
    """


_ClientUpdateTableReplicaAutoScalingReplicaUpdatesReplicaGlobalSecondaryIndexUpdatesProvisionedReadCapacityAutoScalingUpdateTypeDef = TypedDict(
    "_ClientUpdateTableReplicaAutoScalingReplicaUpdatesReplicaGlobalSecondaryIndexUpdatesProvisionedReadCapacityAutoScalingUpdateTypeDef",
    {
        "MinimumUnits": int,
        "MaximumUnits": int,
        "AutoScalingDisabled": bool,
        "AutoScalingRoleArn": str,
        "ScalingPolicyUpdate": ClientUpdateTableReplicaAutoScalingReplicaUpdatesReplicaGlobalSecondaryIndexUpdatesProvisionedReadCapacityAutoScalingUpdateScalingPolicyUpdateTypeDef,
    },
    total=False,
)


class ClientUpdateTableReplicaAutoScalingReplicaUpdatesReplicaGlobalSecondaryIndexUpdatesProvisionedReadCapacityAutoScalingUpdateTypeDef(
    _ClientUpdateTableReplicaAutoScalingReplicaUpdatesReplicaGlobalSecondaryIndexUpdatesProvisionedReadCapacityAutoScalingUpdateTypeDef
):
    """
    Type definition for
    `ClientUpdateTableReplicaAutoScalingReplicaUpdatesReplicaGlobalSecondaryIndexUpdates`
    `ProvisionedReadCapacityAutoScalingUpdate`

    Represents the auto scaling settings to be modified for a global table or global secondary
    index.

    - **MinimumUnits** *(integer) --*

      The minimum capacity units that a global table or global secondary index should be scaled down
      to.

    - **MaximumUnits** *(integer) --*

      The maximum capacity units that a global table or global secondary index should be scaled up
      to.

    - **AutoScalingDisabled** *(boolean) --*

      Disabled auto scaling for this global table or global secondary index.

    - **AutoScalingRoleArn** *(string) --*

      Role ARN used for configuring auto scaling policy.

    - **ScalingPolicyUpdate** *(dict) --*

      The scaling policy to apply for scaling target global table or global secondary index capacity
      units.

      - **PolicyName** *(string) --*

        The name of the scaling policy.

      - **TargetTrackingScalingPolicyConfiguration** *(dict) --* **[REQUIRED]**

        Represents a target tracking scaling policy configuration.

        - **DisableScaleIn** *(boolean) --*

          Indicates whether scale in by the target tracking policy is disabled. If the value is
          true, scale in is disabled and the target tracking policy won't remove capacity from the
          scalable resource. Otherwise, scale in is enabled and the target tracking policy can
          remove capacity from the scalable resource. The default value is false.

        - **ScaleInCooldown** *(integer) --*

          The amount of time, in seconds, after a scale in activity completes before another scale
          in activity can start. The cooldown period is used to block subsequent scale in requests
          until it has expired. You should scale in conservatively to protect your application's
          availability. However, if another alarm triggers a scale out policy during the cooldown
          period after a scale-in, application auto scaling scales out your scalable target
          immediately.

        - **ScaleOutCooldown** *(integer) --*

          The amount of time, in seconds, after a scale out activity completes before another scale
          out activity can start. While the cooldown period is in effect, the capacity that has been
          added by the previous scale out event that initiated the cooldown is calculated as part of
          the desired capacity for the next scale out. You should continuously (but not excessively)
          scale out.

        - **TargetValue** *(float) --* **[REQUIRED]**

          The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or
          2e-360 to 2e360 (Base 2).
    """


_ClientUpdateTableReplicaAutoScalingReplicaUpdatesReplicaGlobalSecondaryIndexUpdatesTypeDef = TypedDict(
    "_ClientUpdateTableReplicaAutoScalingReplicaUpdatesReplicaGlobalSecondaryIndexUpdatesTypeDef",
    {
        "IndexName": str,
        "ProvisionedReadCapacityAutoScalingUpdate": ClientUpdateTableReplicaAutoScalingReplicaUpdatesReplicaGlobalSecondaryIndexUpdatesProvisionedReadCapacityAutoScalingUpdateTypeDef,
    },
    total=False,
)


class ClientUpdateTableReplicaAutoScalingReplicaUpdatesReplicaGlobalSecondaryIndexUpdatesTypeDef(
    _ClientUpdateTableReplicaAutoScalingReplicaUpdatesReplicaGlobalSecondaryIndexUpdatesTypeDef
):
    """
    Type definition for `ClientUpdateTableReplicaAutoScalingReplicaUpdates`
    `ReplicaGlobalSecondaryIndexUpdates`

    Represents the auto scaling settings of a global secondary index for a replica that will be
    modified.

    - **IndexName** *(string) --*

      The name of the global secondary index.

    - **ProvisionedReadCapacityAutoScalingUpdate** *(dict) --*

      Represents the auto scaling settings to be modified for a global table or global secondary
      index.

      - **MinimumUnits** *(integer) --*

        The minimum capacity units that a global table or global secondary index should be scaled
        down to.

      - **MaximumUnits** *(integer) --*

        The maximum capacity units that a global table or global secondary index should be scaled up
        to.

      - **AutoScalingDisabled** *(boolean) --*

        Disabled auto scaling for this global table or global secondary index.

      - **AutoScalingRoleArn** *(string) --*

        Role ARN used for configuring auto scaling policy.

      - **ScalingPolicyUpdate** *(dict) --*

        The scaling policy to apply for scaling target global table or global secondary index
        capacity units.

        - **PolicyName** *(string) --*

          The name of the scaling policy.

        - **TargetTrackingScalingPolicyConfiguration** *(dict) --* **[REQUIRED]**

          Represents a target tracking scaling policy configuration.

          - **DisableScaleIn** *(boolean) --*

            Indicates whether scale in by the target tracking policy is disabled. If the value is
            true, scale in is disabled and the target tracking policy won't remove capacity from the
            scalable resource. Otherwise, scale in is enabled and the target tracking policy can
            remove capacity from the scalable resource. The default value is false.

          - **ScaleInCooldown** *(integer) --*

            The amount of time, in seconds, after a scale in activity completes before another scale
            in activity can start. The cooldown period is used to block subsequent scale in requests
            until it has expired. You should scale in conservatively to protect your application's
            availability. However, if another alarm triggers a scale out policy during the cooldown
            period after a scale-in, application auto scaling scales out your scalable target
            immediately.

          - **ScaleOutCooldown** *(integer) --*

            The amount of time, in seconds, after a scale out activity completes before another
            scale out activity can start. While the cooldown period is in effect, the capacity that
            has been added by the previous scale out event that initiated the cooldown is calculated
            as part of the desired capacity for the next scale out. You should continuously (but not
            excessively) scale out.

          - **TargetValue** *(float) --* **[REQUIRED]**

            The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10)
            or 2e-360 to 2e360 (Base 2).
    """


_RequiredClientUpdateTableReplicaAutoScalingReplicaUpdatesReplicaProvisionedReadCapacityAutoScalingUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef = TypedDict(
    "_RequiredClientUpdateTableReplicaAutoScalingReplicaUpdatesReplicaProvisionedReadCapacityAutoScalingUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef",
    {"TargetValue": float},
)
_OptionalClientUpdateTableReplicaAutoScalingReplicaUpdatesReplicaProvisionedReadCapacityAutoScalingUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef = TypedDict(
    "_OptionalClientUpdateTableReplicaAutoScalingReplicaUpdatesReplicaProvisionedReadCapacityAutoScalingUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef",
    {"DisableScaleIn": bool, "ScaleInCooldown": int, "ScaleOutCooldown": int},
    total=False,
)


class ClientUpdateTableReplicaAutoScalingReplicaUpdatesReplicaProvisionedReadCapacityAutoScalingUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef(
    _RequiredClientUpdateTableReplicaAutoScalingReplicaUpdatesReplicaProvisionedReadCapacityAutoScalingUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef,
    _OptionalClientUpdateTableReplicaAutoScalingReplicaUpdatesReplicaProvisionedReadCapacityAutoScalingUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef,
):
    """
    Type definition for
    `ClientUpdateTableReplicaAutoScalingReplicaUpdatesReplicaProvisionedReadCapacityAutoScalingUpdateScalingPolicyUpdate`
    `TargetTrackingScalingPolicyConfiguration`

    Represents a target tracking scaling policy configuration.

    - **DisableScaleIn** *(boolean) --*

      Indicates whether scale in by the target tracking policy is disabled. If the value is true,
      scale in is disabled and the target tracking policy won't remove capacity from the scalable
      resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity
      from the scalable resource. The default value is false.

    - **ScaleInCooldown** *(integer) --*

      The amount of time, in seconds, after a scale in activity completes before another scale in
      activity can start. The cooldown period is used to block subsequent scale in requests until it
      has expired. You should scale in conservatively to protect your application's availability.
      However, if another alarm triggers a scale out policy during the cooldown period after a
      scale-in, application auto scaling scales out your scalable target immediately.

    - **ScaleOutCooldown** *(integer) --*

      The amount of time, in seconds, after a scale out activity completes before another scale out
      activity can start. While the cooldown period is in effect, the capacity that has been added
      by the previous scale out event that initiated the cooldown is calculated as part of the
      desired capacity for the next scale out. You should continuously (but not excessively) scale
      out.

    - **TargetValue** *(float) --* **[REQUIRED]**

      The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or
      2e-360 to 2e360 (Base 2).
    """


_RequiredClientUpdateTableReplicaAutoScalingReplicaUpdatesReplicaProvisionedReadCapacityAutoScalingUpdateScalingPolicyUpdateTypeDef = TypedDict(
    "_RequiredClientUpdateTableReplicaAutoScalingReplicaUpdatesReplicaProvisionedReadCapacityAutoScalingUpdateScalingPolicyUpdateTypeDef",
    {
        "TargetTrackingScalingPolicyConfiguration": ClientUpdateTableReplicaAutoScalingReplicaUpdatesReplicaProvisionedReadCapacityAutoScalingUpdateScalingPolicyUpdateTargetTrackingScalingPolicyConfigurationTypeDef
    },
)
_OptionalClientUpdateTableReplicaAutoScalingReplicaUpdatesReplicaProvisionedReadCapacityAutoScalingUpdateScalingPolicyUpdateTypeDef = TypedDict(
    "_OptionalClientUpdateTableReplicaAutoScalingReplicaUpdatesReplicaProvisionedReadCapacityAutoScalingUpdateScalingPolicyUpdateTypeDef",
    {"PolicyName": str},
    total=False,
)


class ClientUpdateTableReplicaAutoScalingReplicaUpdatesReplicaProvisionedReadCapacityAutoScalingUpdateScalingPolicyUpdateTypeDef(
    _RequiredClientUpdateTableReplicaAutoScalingReplicaUpdatesReplicaProvisionedReadCapacityAutoScalingUpdateScalingPolicyUpdateTypeDef,
    _OptionalClientUpdateTableReplicaAutoScalingReplicaUpdatesReplicaProvisionedReadCapacityAutoScalingUpdateScalingPolicyUpdateTypeDef,
):
    """
    Type definition for
    `ClientUpdateTableReplicaAutoScalingReplicaUpdatesReplicaProvisionedReadCapacityAutoScalingUpdate`
    `ScalingPolicyUpdate`

    The scaling policy to apply for scaling target global table or global secondary index capacity
    units.

    - **PolicyName** *(string) --*

      The name of the scaling policy.

    - **TargetTrackingScalingPolicyConfiguration** *(dict) --* **[REQUIRED]**

      Represents a target tracking scaling policy configuration.

      - **DisableScaleIn** *(boolean) --*

        Indicates whether scale in by the target tracking policy is disabled. If the value is true,
        scale in is disabled and the target tracking policy won't remove capacity from the scalable
        resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity
        from the scalable resource. The default value is false.

      - **ScaleInCooldown** *(integer) --*

        The amount of time, in seconds, after a scale in activity completes before another scale in
        activity can start. The cooldown period is used to block subsequent scale in requests until
        it has expired. You should scale in conservatively to protect your application's
        availability. However, if another alarm triggers a scale out policy during the cooldown
        period after a scale-in, application auto scaling scales out your scalable target
        immediately.

      - **ScaleOutCooldown** *(integer) --*

        The amount of time, in seconds, after a scale out activity completes before another scale
        out activity can start. While the cooldown period is in effect, the capacity that has been
        added by the previous scale out event that initiated the cooldown is calculated as part of
        the desired capacity for the next scale out. You should continuously (but not excessively)
        scale out.

      - **TargetValue** *(float) --* **[REQUIRED]**

        The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or
        2e-360 to 2e360 (Base 2).
    """


_ClientUpdateTableReplicaAutoScalingReplicaUpdatesReplicaProvisionedReadCapacityAutoScalingUpdateTypeDef = TypedDict(
    "_ClientUpdateTableReplicaAutoScalingReplicaUpdatesReplicaProvisionedReadCapacityAutoScalingUpdateTypeDef",
    {
        "MinimumUnits": int,
        "MaximumUnits": int,
        "AutoScalingDisabled": bool,
        "AutoScalingRoleArn": str,
        "ScalingPolicyUpdate": ClientUpdateTableReplicaAutoScalingReplicaUpdatesReplicaProvisionedReadCapacityAutoScalingUpdateScalingPolicyUpdateTypeDef,
    },
    total=False,
)


class ClientUpdateTableReplicaAutoScalingReplicaUpdatesReplicaProvisionedReadCapacityAutoScalingUpdateTypeDef(
    _ClientUpdateTableReplicaAutoScalingReplicaUpdatesReplicaProvisionedReadCapacityAutoScalingUpdateTypeDef
):
    """
    Type definition for `ClientUpdateTableReplicaAutoScalingReplicaUpdates`
    `ReplicaProvisionedReadCapacityAutoScalingUpdate`

    Represents the auto scaling settings to be modified for a global table or global secondary
    index.

    - **MinimumUnits** *(integer) --*

      The minimum capacity units that a global table or global secondary index should be scaled down
      to.

    - **MaximumUnits** *(integer) --*

      The maximum capacity units that a global table or global secondary index should be scaled up
      to.

    - **AutoScalingDisabled** *(boolean) --*

      Disabled auto scaling for this global table or global secondary index.

    - **AutoScalingRoleArn** *(string) --*

      Role ARN used for configuring auto scaling policy.

    - **ScalingPolicyUpdate** *(dict) --*

      The scaling policy to apply for scaling target global table or global secondary index capacity
      units.

      - **PolicyName** *(string) --*

        The name of the scaling policy.

      - **TargetTrackingScalingPolicyConfiguration** *(dict) --* **[REQUIRED]**

        Represents a target tracking scaling policy configuration.

        - **DisableScaleIn** *(boolean) --*

          Indicates whether scale in by the target tracking policy is disabled. If the value is
          true, scale in is disabled and the target tracking policy won't remove capacity from the
          scalable resource. Otherwise, scale in is enabled and the target tracking policy can
          remove capacity from the scalable resource. The default value is false.

        - **ScaleInCooldown** *(integer) --*

          The amount of time, in seconds, after a scale in activity completes before another scale
          in activity can start. The cooldown period is used to block subsequent scale in requests
          until it has expired. You should scale in conservatively to protect your application's
          availability. However, if another alarm triggers a scale out policy during the cooldown
          period after a scale-in, application auto scaling scales out your scalable target
          immediately.

        - **ScaleOutCooldown** *(integer) --*

          The amount of time, in seconds, after a scale out activity completes before another scale
          out activity can start. While the cooldown period is in effect, the capacity that has been
          added by the previous scale out event that initiated the cooldown is calculated as part of
          the desired capacity for the next scale out. You should continuously (but not excessively)
          scale out.

        - **TargetValue** *(float) --* **[REQUIRED]**

          The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or
          2e-360 to 2e360 (Base 2).
    """


_RequiredClientUpdateTableReplicaAutoScalingReplicaUpdatesTypeDef = TypedDict(
    "_RequiredClientUpdateTableReplicaAutoScalingReplicaUpdatesTypeDef", {"RegionName": str}
)
_OptionalClientUpdateTableReplicaAutoScalingReplicaUpdatesTypeDef = TypedDict(
    "_OptionalClientUpdateTableReplicaAutoScalingReplicaUpdatesTypeDef",
    {
        "ReplicaGlobalSecondaryIndexUpdates": List[
            ClientUpdateTableReplicaAutoScalingReplicaUpdatesReplicaGlobalSecondaryIndexUpdatesTypeDef
        ],
        "ReplicaProvisionedReadCapacityAutoScalingUpdate": ClientUpdateTableReplicaAutoScalingReplicaUpdatesReplicaProvisionedReadCapacityAutoScalingUpdateTypeDef,
    },
    total=False,
)


class ClientUpdateTableReplicaAutoScalingReplicaUpdatesTypeDef(
    _RequiredClientUpdateTableReplicaAutoScalingReplicaUpdatesTypeDef,
    _OptionalClientUpdateTableReplicaAutoScalingReplicaUpdatesTypeDef,
):
    """
    Type definition for `ClientUpdateTableReplicaAutoScaling` `ReplicaUpdates`

    Represents the auto scaling settings of a replica that will be modified.

    - **RegionName** *(string) --* **[REQUIRED]**

      The Region where the replica exists.

    - **ReplicaGlobalSecondaryIndexUpdates** *(list) --*

      Represents the auto scaling settings of global secondary indexes that will be modified.

      - *(dict) --*

        Represents the auto scaling settings of a global secondary index for a replica that will be
        modified.

        - **IndexName** *(string) --*

          The name of the global secondary index.

        - **ProvisionedReadCapacityAutoScalingUpdate** *(dict) --*

          Represents the auto scaling settings to be modified for a global table or global secondary
          index.

          - **MinimumUnits** *(integer) --*

            The minimum capacity units that a global table or global secondary index should be
            scaled down to.

          - **MaximumUnits** *(integer) --*

            The maximum capacity units that a global table or global secondary index should be
            scaled up to.

          - **AutoScalingDisabled** *(boolean) --*

            Disabled auto scaling for this global table or global secondary index.

          - **AutoScalingRoleArn** *(string) --*

            Role ARN used for configuring auto scaling policy.

          - **ScalingPolicyUpdate** *(dict) --*

            The scaling policy to apply for scaling target global table or global secondary index
            capacity units.

            - **PolicyName** *(string) --*

              The name of the scaling policy.

            - **TargetTrackingScalingPolicyConfiguration** *(dict) --* **[REQUIRED]**

              Represents a target tracking scaling policy configuration.

              - **DisableScaleIn** *(boolean) --*

                Indicates whether scale in by the target tracking policy is disabled. If the value
                is true, scale in is disabled and the target tracking policy won't remove capacity
                from the scalable resource. Otherwise, scale in is enabled and the target tracking
                policy can remove capacity from the scalable resource. The default value is false.

              - **ScaleInCooldown** *(integer) --*

                The amount of time, in seconds, after a scale in activity completes before another
                scale in activity can start. The cooldown period is used to block subsequent scale
                in requests until it has expired. You should scale in conservatively to protect your
                application's availability. However, if another alarm triggers a scale out policy
                during the cooldown period after a scale-in, application auto scaling scales out
                your scalable target immediately.

              - **ScaleOutCooldown** *(integer) --*

                The amount of time, in seconds, after a scale out activity completes before another
                scale out activity can start. While the cooldown period is in effect, the capacity
                that has been added by the previous scale out event that initiated the cooldown is
                calculated as part of the desired capacity for the next scale out. You should
                continuously (but not excessively) scale out.

              - **TargetValue** *(float) --* **[REQUIRED]**

                The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base
                10) or 2e-360 to 2e360 (Base 2).

    - **ReplicaProvisionedReadCapacityAutoScalingUpdate** *(dict) --*

      Represents the auto scaling settings to be modified for a global table or global secondary
      index.

      - **MinimumUnits** *(integer) --*

        The minimum capacity units that a global table or global secondary index should be scaled
        down to.

      - **MaximumUnits** *(integer) --*

        The maximum capacity units that a global table or global secondary index should be scaled up
        to.

      - **AutoScalingDisabled** *(boolean) --*

        Disabled auto scaling for this global table or global secondary index.

      - **AutoScalingRoleArn** *(string) --*

        Role ARN used for configuring auto scaling policy.

      - **ScalingPolicyUpdate** *(dict) --*

        The scaling policy to apply for scaling target global table or global secondary index
        capacity units.

        - **PolicyName** *(string) --*

          The name of the scaling policy.

        - **TargetTrackingScalingPolicyConfiguration** *(dict) --* **[REQUIRED]**

          Represents a target tracking scaling policy configuration.

          - **DisableScaleIn** *(boolean) --*

            Indicates whether scale in by the target tracking policy is disabled. If the value is
            true, scale in is disabled and the target tracking policy won't remove capacity from the
            scalable resource. Otherwise, scale in is enabled and the target tracking policy can
            remove capacity from the scalable resource. The default value is false.

          - **ScaleInCooldown** *(integer) --*

            The amount of time, in seconds, after a scale in activity completes before another scale
            in activity can start. The cooldown period is used to block subsequent scale in requests
            until it has expired. You should scale in conservatively to protect your application's
            availability. However, if another alarm triggers a scale out policy during the cooldown
            period after a scale-in, application auto scaling scales out your scalable target
            immediately.

          - **ScaleOutCooldown** *(integer) --*

            The amount of time, in seconds, after a scale out activity completes before another
            scale out activity can start. While the cooldown period is in effect, the capacity that
            has been added by the previous scale out event that initiated the cooldown is calculated
            as part of the desired capacity for the next scale out. You should continuously (but not
            excessively) scale out.

          - **TargetValue** *(float) --* **[REQUIRED]**

            The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10)
            or 2e-360 to 2e360 (Base 2).
    """


_ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef = TypedDict(
    "_ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef",
    {"DisableScaleIn": bool, "ScaleInCooldown": int, "ScaleOutCooldown": int, "TargetValue": float},
    total=False,
)


class ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef(
    _ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef
):
    """
    Type definition for
    `ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedReadCapacityAutoScalingSettingsScalingPolicies`
    `TargetTrackingScalingPolicyConfiguration`

    Represents a target tracking scaling policy configuration.

    - **DisableScaleIn** *(boolean) --*

      Indicates whether scale in by the target tracking policy is disabled. If the value is true,
      scale in is disabled and the target tracking policy won't remove capacity from the scalable
      resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity
      from the scalable resource. The default value is false.

    - **ScaleInCooldown** *(integer) --*

      The amount of time, in seconds, after a scale in activity completes before another scale in
      activity can start. The cooldown period is used to block subsequent scale in requests until it
      has expired. You should scale in conservatively to protect your application's availability.
      However, if another alarm triggers a scale out policy during the cooldown period after a
      scale-in, application auto scaling scales out your scalable target immediately.

    - **ScaleOutCooldown** *(integer) --*

      The amount of time, in seconds, after a scale out activity completes before another scale out
      activity can start. While the cooldown period is in effect, the capacity that has been added
      by the previous scale out event that initiated the cooldown is calculated as part of the
      desired capacity for the next scale out. You should continuously (but not excessively) scale
      out.

    - **TargetValue** *(float) --*

      The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or
      2e-360 to 2e360 (Base 2).
    """


_ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTypeDef = TypedDict(
    "_ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTypeDef",
    {
        "PolicyName": str,
        "TargetTrackingScalingPolicyConfiguration": ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef,
    },
    total=False,
)


class ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTypeDef(
    _ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTypeDef
):
    """
    Type definition for
    `ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedReadCapacityAutoScalingSettings`
    `ScalingPolicies`

    Represents the properties of the scaling policy.

    - **PolicyName** *(string) --*

      The name of the scaling policy.

    - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

      Represents a target tracking scaling policy configuration.

      - **DisableScaleIn** *(boolean) --*

        Indicates whether scale in by the target tracking policy is disabled. If the value is true,
        scale in is disabled and the target tracking policy won't remove capacity from the scalable
        resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity
        from the scalable resource. The default value is false.

      - **ScaleInCooldown** *(integer) --*

        The amount of time, in seconds, after a scale in activity completes before another scale in
        activity can start. The cooldown period is used to block subsequent scale in requests until
        it has expired. You should scale in conservatively to protect your application's
        availability. However, if another alarm triggers a scale out policy during the cooldown
        period after a scale-in, application auto scaling scales out your scalable target
        immediately.

      - **ScaleOutCooldown** *(integer) --*

        The amount of time, in seconds, after a scale out activity completes before another scale
        out activity can start. While the cooldown period is in effect, the capacity that has been
        added by the previous scale out event that initiated the cooldown is calculated as part of
        the desired capacity for the next scale out. You should continuously (but not excessively)
        scale out.

      - **TargetValue** *(float) --*

        The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or
        2e-360 to 2e360 (Base 2).
    """


_ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedReadCapacityAutoScalingSettingsTypeDef = TypedDict(
    "_ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedReadCapacityAutoScalingSettingsTypeDef",
    {
        "MinimumUnits": int,
        "MaximumUnits": int,
        "AutoScalingDisabled": bool,
        "AutoScalingRoleArn": str,
        "ScalingPolicies": List[
            ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTypeDef
        ],
    },
    total=False,
)


class ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedReadCapacityAutoScalingSettingsTypeDef(
    _ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedReadCapacityAutoScalingSettingsTypeDef
):
    """
    Type definition for
    `ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexes`
    `ProvisionedReadCapacityAutoScalingSettings`

    Represents the auto scaling settings for a global table or global secondary index.

    - **MinimumUnits** *(integer) --*

      The minimum capacity units that a global table or global secondary index should be scaled down
      to.

    - **MaximumUnits** *(integer) --*

      The maximum capacity units that a global table or global secondary index should be scaled up
      to.

    - **AutoScalingDisabled** *(boolean) --*

      Disabled auto scaling for this global table or global secondary index.

    - **AutoScalingRoleArn** *(string) --*

      Role ARN used for configuring the auto scaling policy.

    - **ScalingPolicies** *(list) --*

      Information about the scaling policies.

      - *(dict) --*

        Represents the properties of the scaling policy.

        - **PolicyName** *(string) --*

          The name of the scaling policy.

        - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

          Represents a target tracking scaling policy configuration.

          - **DisableScaleIn** *(boolean) --*

            Indicates whether scale in by the target tracking policy is disabled. If the value is
            true, scale in is disabled and the target tracking policy won't remove capacity from the
            scalable resource. Otherwise, scale in is enabled and the target tracking policy can
            remove capacity from the scalable resource. The default value is false.

          - **ScaleInCooldown** *(integer) --*

            The amount of time, in seconds, after a scale in activity completes before another scale
            in activity can start. The cooldown period is used to block subsequent scale in requests
            until it has expired. You should scale in conservatively to protect your application's
            availability. However, if another alarm triggers a scale out policy during the cooldown
            period after a scale-in, application auto scaling scales out your scalable target
            immediately.

          - **ScaleOutCooldown** *(integer) --*

            The amount of time, in seconds, after a scale out activity completes before another
            scale out activity can start. While the cooldown period is in effect, the capacity that
            has been added by the previous scale out event that initiated the cooldown is calculated
            as part of the desired capacity for the next scale out. You should continuously (but not
            excessively) scale out.

          - **TargetValue** *(float) --*

            The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10)
            or 2e-360 to 2e360 (Base 2).
    """


_ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef = TypedDict(
    "_ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef",
    {"DisableScaleIn": bool, "ScaleInCooldown": int, "ScaleOutCooldown": int, "TargetValue": float},
    total=False,
)


class ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef(
    _ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef
):
    """
    Type definition for
    `ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedWriteCapacityAutoScalingSettingsScalingPolicies`
    `TargetTrackingScalingPolicyConfiguration`

    Represents a target tracking scaling policy configuration.

    - **DisableScaleIn** *(boolean) --*

      Indicates whether scale in by the target tracking policy is disabled. If the value is true,
      scale in is disabled and the target tracking policy won't remove capacity from the scalable
      resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity
      from the scalable resource. The default value is false.

    - **ScaleInCooldown** *(integer) --*

      The amount of time, in seconds, after a scale in activity completes before another scale in
      activity can start. The cooldown period is used to block subsequent scale in requests until it
      has expired. You should scale in conservatively to protect your application's availability.
      However, if another alarm triggers a scale out policy during the cooldown period after a
      scale-in, application auto scaling scales out your scalable target immediately.

    - **ScaleOutCooldown** *(integer) --*

      The amount of time, in seconds, after a scale out activity completes before another scale out
      activity can start. While the cooldown period is in effect, the capacity that has been added
      by the previous scale out event that initiated the cooldown is calculated as part of the
      desired capacity for the next scale out. You should continuously (but not excessively) scale
      out.

    - **TargetValue** *(float) --*

      The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or
      2e-360 to 2e360 (Base 2).
    """


_ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTypeDef = TypedDict(
    "_ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTypeDef",
    {
        "PolicyName": str,
        "TargetTrackingScalingPolicyConfiguration": ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef,
    },
    total=False,
)


class ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTypeDef(
    _ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTypeDef
):
    """
    Type definition for
    `ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedWriteCapacityAutoScalingSettings`
    `ScalingPolicies`

    Represents the properties of the scaling policy.

    - **PolicyName** *(string) --*

      The name of the scaling policy.

    - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

      Represents a target tracking scaling policy configuration.

      - **DisableScaleIn** *(boolean) --*

        Indicates whether scale in by the target tracking policy is disabled. If the value is true,
        scale in is disabled and the target tracking policy won't remove capacity from the scalable
        resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity
        from the scalable resource. The default value is false.

      - **ScaleInCooldown** *(integer) --*

        The amount of time, in seconds, after a scale in activity completes before another scale in
        activity can start. The cooldown period is used to block subsequent scale in requests until
        it has expired. You should scale in conservatively to protect your application's
        availability. However, if another alarm triggers a scale out policy during the cooldown
        period after a scale-in, application auto scaling scales out your scalable target
        immediately.

      - **ScaleOutCooldown** *(integer) --*

        The amount of time, in seconds, after a scale out activity completes before another scale
        out activity can start. While the cooldown period is in effect, the capacity that has been
        added by the previous scale out event that initiated the cooldown is calculated as part of
        the desired capacity for the next scale out. You should continuously (but not excessively)
        scale out.

      - **TargetValue** *(float) --*

        The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or
        2e-360 to 2e360 (Base 2).
    """


_ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedWriteCapacityAutoScalingSettingsTypeDef = TypedDict(
    "_ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedWriteCapacityAutoScalingSettingsTypeDef",
    {
        "MinimumUnits": int,
        "MaximumUnits": int,
        "AutoScalingDisabled": bool,
        "AutoScalingRoleArn": str,
        "ScalingPolicies": List[
            ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTypeDef
        ],
    },
    total=False,
)


class ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedWriteCapacityAutoScalingSettingsTypeDef(
    _ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedWriteCapacityAutoScalingSettingsTypeDef
):
    """
    Type definition for
    `ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexes`
    `ProvisionedWriteCapacityAutoScalingSettings`

    Represents the auto scaling settings for a global table or global secondary index.

    - **MinimumUnits** *(integer) --*

      The minimum capacity units that a global table or global secondary index should be scaled down
      to.

    - **MaximumUnits** *(integer) --*

      The maximum capacity units that a global table or global secondary index should be scaled up
      to.

    - **AutoScalingDisabled** *(boolean) --*

      Disabled auto scaling for this global table or global secondary index.

    - **AutoScalingRoleArn** *(string) --*

      Role ARN used for configuring the auto scaling policy.

    - **ScalingPolicies** *(list) --*

      Information about the scaling policies.

      - *(dict) --*

        Represents the properties of the scaling policy.

        - **PolicyName** *(string) --*

          The name of the scaling policy.

        - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

          Represents a target tracking scaling policy configuration.

          - **DisableScaleIn** *(boolean) --*

            Indicates whether scale in by the target tracking policy is disabled. If the value is
            true, scale in is disabled and the target tracking policy won't remove capacity from the
            scalable resource. Otherwise, scale in is enabled and the target tracking policy can
            remove capacity from the scalable resource. The default value is false.

          - **ScaleInCooldown** *(integer) --*

            The amount of time, in seconds, after a scale in activity completes before another scale
            in activity can start. The cooldown period is used to block subsequent scale in requests
            until it has expired. You should scale in conservatively to protect your application's
            availability. However, if another alarm triggers a scale out policy during the cooldown
            period after a scale-in, application auto scaling scales out your scalable target
            immediately.

          - **ScaleOutCooldown** *(integer) --*

            The amount of time, in seconds, after a scale out activity completes before another
            scale out activity can start. While the cooldown period is in effect, the capacity that
            has been added by the previous scale out event that initiated the cooldown is calculated
            as part of the desired capacity for the next scale out. You should continuously (but not
            excessively) scale out.

          - **TargetValue** *(float) --*

            The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10)
            or 2e-360 to 2e360 (Base 2).
    """


_ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesTypeDef = TypedDict(
    "_ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesTypeDef",
    {
        "IndexName": str,
        "IndexStatus": str,
        "ProvisionedReadCapacityAutoScalingSettings": ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedReadCapacityAutoScalingSettingsTypeDef,
        "ProvisionedWriteCapacityAutoScalingSettings": ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesProvisionedWriteCapacityAutoScalingSettingsTypeDef,
    },
    total=False,
)


class ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesTypeDef(
    _ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesTypeDef
):
    """
    Type definition for
    `ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicas`
    `GlobalSecondaryIndexes`

    Represents the auto scaling configuration for a replica global secondary index.

    - **IndexName** *(string) --*

      The name of the global secondary index.

    - **IndexStatus** *(string) --*

      The current state of the replica global secondary index:

      * ``CREATING`` - The index is being created.

      * ``UPDATING`` - The index is being updated.

      * ``DELETING`` - The index is being deleted.

      * ``ACTIVE`` - The index is ready for use.

    - **ProvisionedReadCapacityAutoScalingSettings** *(dict) --*

      Represents the auto scaling settings for a global table or global secondary index.

      - **MinimumUnits** *(integer) --*

        The minimum capacity units that a global table or global secondary index should be scaled
        down to.

      - **MaximumUnits** *(integer) --*

        The maximum capacity units that a global table or global secondary index should be scaled up
        to.

      - **AutoScalingDisabled** *(boolean) --*

        Disabled auto scaling for this global table or global secondary index.

      - **AutoScalingRoleArn** *(string) --*

        Role ARN used for configuring the auto scaling policy.

      - **ScalingPolicies** *(list) --*

        Information about the scaling policies.

        - *(dict) --*

          Represents the properties of the scaling policy.

          - **PolicyName** *(string) --*

            The name of the scaling policy.

          - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

            Represents a target tracking scaling policy configuration.

            - **DisableScaleIn** *(boolean) --*

              Indicates whether scale in by the target tracking policy is disabled. If the value is
              true, scale in is disabled and the target tracking policy won't remove capacity from
              the scalable resource. Otherwise, scale in is enabled and the target tracking policy
              can remove capacity from the scalable resource. The default value is false.

            - **ScaleInCooldown** *(integer) --*

              The amount of time, in seconds, after a scale in activity completes before another
              scale in activity can start. The cooldown period is used to block subsequent scale in
              requests until it has expired. You should scale in conservatively to protect your
              application's availability. However, if another alarm triggers a scale out policy
              during the cooldown period after a scale-in, application auto scaling scales out your
              scalable target immediately.

            - **ScaleOutCooldown** *(integer) --*

              The amount of time, in seconds, after a scale out activity completes before another
              scale out activity can start. While the cooldown period is in effect, the capacity
              that has been added by the previous scale out event that initiated the cooldown is
              calculated as part of the desired capacity for the next scale out. You should
              continuously (but not excessively) scale out.

            - **TargetValue** *(float) --*

              The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10)
              or 2e-360 to 2e360 (Base 2).

    - **ProvisionedWriteCapacityAutoScalingSettings** *(dict) --*

      Represents the auto scaling settings for a global table or global secondary index.

      - **MinimumUnits** *(integer) --*

        The minimum capacity units that a global table or global secondary index should be scaled
        down to.

      - **MaximumUnits** *(integer) --*

        The maximum capacity units that a global table or global secondary index should be scaled up
        to.

      - **AutoScalingDisabled** *(boolean) --*

        Disabled auto scaling for this global table or global secondary index.

      - **AutoScalingRoleArn** *(string) --*

        Role ARN used for configuring the auto scaling policy.

      - **ScalingPolicies** *(list) --*

        Information about the scaling policies.

        - *(dict) --*

          Represents the properties of the scaling policy.

          - **PolicyName** *(string) --*

            The name of the scaling policy.

          - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

            Represents a target tracking scaling policy configuration.

            - **DisableScaleIn** *(boolean) --*

              Indicates whether scale in by the target tracking policy is disabled. If the value is
              true, scale in is disabled and the target tracking policy won't remove capacity from
              the scalable resource. Otherwise, scale in is enabled and the target tracking policy
              can remove capacity from the scalable resource. The default value is false.

            - **ScaleInCooldown** *(integer) --*

              The amount of time, in seconds, after a scale in activity completes before another
              scale in activity can start. The cooldown period is used to block subsequent scale in
              requests until it has expired. You should scale in conservatively to protect your
              application's availability. However, if another alarm triggers a scale out policy
              during the cooldown period after a scale-in, application auto scaling scales out your
              scalable target immediately.

            - **ScaleOutCooldown** *(integer) --*

              The amount of time, in seconds, after a scale out activity completes before another
              scale out activity can start. While the cooldown period is in effect, the capacity
              that has been added by the previous scale out event that initiated the cooldown is
              calculated as part of the desired capacity for the next scale out. You should
              continuously (but not excessively) scale out.

            - **TargetValue** *(float) --*

              The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10)
              or 2e-360 to 2e360 (Base 2).
    """


_ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef = TypedDict(
    "_ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef",
    {"DisableScaleIn": bool, "ScaleInCooldown": int, "ScaleOutCooldown": int, "TargetValue": float},
    total=False,
)


class ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef(
    _ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef
):
    """
    Type definition for
    `ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedReadCapacityAutoScalingSettingsScalingPolicies`
    `TargetTrackingScalingPolicyConfiguration`

    Represents a target tracking scaling policy configuration.

    - **DisableScaleIn** *(boolean) --*

      Indicates whether scale in by the target tracking policy is disabled. If the value is true,
      scale in is disabled and the target tracking policy won't remove capacity from the scalable
      resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity
      from the scalable resource. The default value is false.

    - **ScaleInCooldown** *(integer) --*

      The amount of time, in seconds, after a scale in activity completes before another scale in
      activity can start. The cooldown period is used to block subsequent scale in requests until it
      has expired. You should scale in conservatively to protect your application's availability.
      However, if another alarm triggers a scale out policy during the cooldown period after a
      scale-in, application auto scaling scales out your scalable target immediately.

    - **ScaleOutCooldown** *(integer) --*

      The amount of time, in seconds, after a scale out activity completes before another scale out
      activity can start. While the cooldown period is in effect, the capacity that has been added
      by the previous scale out event that initiated the cooldown is calculated as part of the
      desired capacity for the next scale out. You should continuously (but not excessively) scale
      out.

    - **TargetValue** *(float) --*

      The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or
      2e-360 to 2e360 (Base 2).
    """


_ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTypeDef = TypedDict(
    "_ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTypeDef",
    {
        "PolicyName": str,
        "TargetTrackingScalingPolicyConfiguration": ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef,
    },
    total=False,
)


class ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTypeDef(
    _ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTypeDef
):
    """
    Type definition for
    `ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedReadCapacityAutoScalingSettings`
    `ScalingPolicies`

    Represents the properties of the scaling policy.

    - **PolicyName** *(string) --*

      The name of the scaling policy.

    - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

      Represents a target tracking scaling policy configuration.

      - **DisableScaleIn** *(boolean) --*

        Indicates whether scale in by the target tracking policy is disabled. If the value is true,
        scale in is disabled and the target tracking policy won't remove capacity from the scalable
        resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity
        from the scalable resource. The default value is false.

      - **ScaleInCooldown** *(integer) --*

        The amount of time, in seconds, after a scale in activity completes before another scale in
        activity can start. The cooldown period is used to block subsequent scale in requests until
        it has expired. You should scale in conservatively to protect your application's
        availability. However, if another alarm triggers a scale out policy during the cooldown
        period after a scale-in, application auto scaling scales out your scalable target
        immediately.

      - **ScaleOutCooldown** *(integer) --*

        The amount of time, in seconds, after a scale out activity completes before another scale
        out activity can start. While the cooldown period is in effect, the capacity that has been
        added by the previous scale out event that initiated the cooldown is calculated as part of
        the desired capacity for the next scale out. You should continuously (but not excessively)
        scale out.

      - **TargetValue** *(float) --*

        The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or
        2e-360 to 2e360 (Base 2).
    """


_ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedReadCapacityAutoScalingSettingsTypeDef = TypedDict(
    "_ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedReadCapacityAutoScalingSettingsTypeDef",
    {
        "MinimumUnits": int,
        "MaximumUnits": int,
        "AutoScalingDisabled": bool,
        "AutoScalingRoleArn": str,
        "ScalingPolicies": List[
            ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedReadCapacityAutoScalingSettingsScalingPoliciesTypeDef
        ],
    },
    total=False,
)


class ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedReadCapacityAutoScalingSettingsTypeDef(
    _ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedReadCapacityAutoScalingSettingsTypeDef
):
    """
    Type definition for
    `ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicas`
    `ReplicaProvisionedReadCapacityAutoScalingSettings`

    Represents the auto scaling settings for a global table or global secondary index.

    - **MinimumUnits** *(integer) --*

      The minimum capacity units that a global table or global secondary index should be scaled down
      to.

    - **MaximumUnits** *(integer) --*

      The maximum capacity units that a global table or global secondary index should be scaled up
      to.

    - **AutoScalingDisabled** *(boolean) --*

      Disabled auto scaling for this global table or global secondary index.

    - **AutoScalingRoleArn** *(string) --*

      Role ARN used for configuring the auto scaling policy.

    - **ScalingPolicies** *(list) --*

      Information about the scaling policies.

      - *(dict) --*

        Represents the properties of the scaling policy.

        - **PolicyName** *(string) --*

          The name of the scaling policy.

        - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

          Represents a target tracking scaling policy configuration.

          - **DisableScaleIn** *(boolean) --*

            Indicates whether scale in by the target tracking policy is disabled. If the value is
            true, scale in is disabled and the target tracking policy won't remove capacity from the
            scalable resource. Otherwise, scale in is enabled and the target tracking policy can
            remove capacity from the scalable resource. The default value is false.

          - **ScaleInCooldown** *(integer) --*

            The amount of time, in seconds, after a scale in activity completes before another scale
            in activity can start. The cooldown period is used to block subsequent scale in requests
            until it has expired. You should scale in conservatively to protect your application's
            availability. However, if another alarm triggers a scale out policy during the cooldown
            period after a scale-in, application auto scaling scales out your scalable target
            immediately.

          - **ScaleOutCooldown** *(integer) --*

            The amount of time, in seconds, after a scale out activity completes before another
            scale out activity can start. While the cooldown period is in effect, the capacity that
            has been added by the previous scale out event that initiated the cooldown is calculated
            as part of the desired capacity for the next scale out. You should continuously (but not
            excessively) scale out.

          - **TargetValue** *(float) --*

            The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10)
            or 2e-360 to 2e360 (Base 2).
    """


_ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef = TypedDict(
    "_ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef",
    {"DisableScaleIn": bool, "ScaleInCooldown": int, "ScaleOutCooldown": int, "TargetValue": float},
    total=False,
)


class ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef(
    _ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef
):
    """
    Type definition for
    `ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedWriteCapacityAutoScalingSettingsScalingPolicies`
    `TargetTrackingScalingPolicyConfiguration`

    Represents a target tracking scaling policy configuration.

    - **DisableScaleIn** *(boolean) --*

      Indicates whether scale in by the target tracking policy is disabled. If the value is true,
      scale in is disabled and the target tracking policy won't remove capacity from the scalable
      resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity
      from the scalable resource. The default value is false.

    - **ScaleInCooldown** *(integer) --*

      The amount of time, in seconds, after a scale in activity completes before another scale in
      activity can start. The cooldown period is used to block subsequent scale in requests until it
      has expired. You should scale in conservatively to protect your application's availability.
      However, if another alarm triggers a scale out policy during the cooldown period after a
      scale-in, application auto scaling scales out your scalable target immediately.

    - **ScaleOutCooldown** *(integer) --*

      The amount of time, in seconds, after a scale out activity completes before another scale out
      activity can start. While the cooldown period is in effect, the capacity that has been added
      by the previous scale out event that initiated the cooldown is calculated as part of the
      desired capacity for the next scale out. You should continuously (but not excessively) scale
      out.

    - **TargetValue** *(float) --*

      The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or
      2e-360 to 2e360 (Base 2).
    """


_ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTypeDef = TypedDict(
    "_ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTypeDef",
    {
        "PolicyName": str,
        "TargetTrackingScalingPolicyConfiguration": ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTargetTrackingScalingPolicyConfigurationTypeDef,
    },
    total=False,
)


class ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTypeDef(
    _ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTypeDef
):
    """
    Type definition for
    `ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedWriteCapacityAutoScalingSettings`
    `ScalingPolicies`

    Represents the properties of the scaling policy.

    - **PolicyName** *(string) --*

      The name of the scaling policy.

    - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

      Represents a target tracking scaling policy configuration.

      - **DisableScaleIn** *(boolean) --*

        Indicates whether scale in by the target tracking policy is disabled. If the value is true,
        scale in is disabled and the target tracking policy won't remove capacity from the scalable
        resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity
        from the scalable resource. The default value is false.

      - **ScaleInCooldown** *(integer) --*

        The amount of time, in seconds, after a scale in activity completes before another scale in
        activity can start. The cooldown period is used to block subsequent scale in requests until
        it has expired. You should scale in conservatively to protect your application's
        availability. However, if another alarm triggers a scale out policy during the cooldown
        period after a scale-in, application auto scaling scales out your scalable target
        immediately.

      - **ScaleOutCooldown** *(integer) --*

        The amount of time, in seconds, after a scale out activity completes before another scale
        out activity can start. While the cooldown period is in effect, the capacity that has been
        added by the previous scale out event that initiated the cooldown is calculated as part of
        the desired capacity for the next scale out. You should continuously (but not excessively)
        scale out.

      - **TargetValue** *(float) --*

        The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or
        2e-360 to 2e360 (Base 2).
    """


_ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedWriteCapacityAutoScalingSettingsTypeDef = TypedDict(
    "_ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedWriteCapacityAutoScalingSettingsTypeDef",
    {
        "MinimumUnits": int,
        "MaximumUnits": int,
        "AutoScalingDisabled": bool,
        "AutoScalingRoleArn": str,
        "ScalingPolicies": List[
            ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedWriteCapacityAutoScalingSettingsScalingPoliciesTypeDef
        ],
    },
    total=False,
)


class ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedWriteCapacityAutoScalingSettingsTypeDef(
    _ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedWriteCapacityAutoScalingSettingsTypeDef
):
    """
    Type definition for
    `ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicas`
    `ReplicaProvisionedWriteCapacityAutoScalingSettings`

    Represents the auto scaling settings for a global table or global secondary index.

    - **MinimumUnits** *(integer) --*

      The minimum capacity units that a global table or global secondary index should be scaled down
      to.

    - **MaximumUnits** *(integer) --*

      The maximum capacity units that a global table or global secondary index should be scaled up
      to.

    - **AutoScalingDisabled** *(boolean) --*

      Disabled auto scaling for this global table or global secondary index.

    - **AutoScalingRoleArn** *(string) --*

      Role ARN used for configuring the auto scaling policy.

    - **ScalingPolicies** *(list) --*

      Information about the scaling policies.

      - *(dict) --*

        Represents the properties of the scaling policy.

        - **PolicyName** *(string) --*

          The name of the scaling policy.

        - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

          Represents a target tracking scaling policy configuration.

          - **DisableScaleIn** *(boolean) --*

            Indicates whether scale in by the target tracking policy is disabled. If the value is
            true, scale in is disabled and the target tracking policy won't remove capacity from the
            scalable resource. Otherwise, scale in is enabled and the target tracking policy can
            remove capacity from the scalable resource. The default value is false.

          - **ScaleInCooldown** *(integer) --*

            The amount of time, in seconds, after a scale in activity completes before another scale
            in activity can start. The cooldown period is used to block subsequent scale in requests
            until it has expired. You should scale in conservatively to protect your application's
            availability. However, if another alarm triggers a scale out policy during the cooldown
            period after a scale-in, application auto scaling scales out your scalable target
            immediately.

          - **ScaleOutCooldown** *(integer) --*

            The amount of time, in seconds, after a scale out activity completes before another
            scale out activity can start. While the cooldown period is in effect, the capacity that
            has been added by the previous scale out event that initiated the cooldown is calculated
            as part of the desired capacity for the next scale out. You should continuously (but not
            excessively) scale out.

          - **TargetValue** *(float) --*

            The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10)
            or 2e-360 to 2e360 (Base 2).
    """


_ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasTypeDef = TypedDict(
    "_ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasTypeDef",
    {
        "RegionName": str,
        "GlobalSecondaryIndexes": List[
            ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasGlobalSecondaryIndexesTypeDef
        ],
        "ReplicaProvisionedReadCapacityAutoScalingSettings": ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedReadCapacityAutoScalingSettingsTypeDef,
        "ReplicaProvisionedWriteCapacityAutoScalingSettings": ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasReplicaProvisionedWriteCapacityAutoScalingSettingsTypeDef,
        "ReplicaStatus": str,
    },
    total=False,
)


class ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasTypeDef(
    _ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasTypeDef
):
    """
    Type definition for `ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescription`
    `Replicas`

    Represents the auto scaling settings of the replica.

    - **RegionName** *(string) --*

      The Region where the replica exists.

    - **GlobalSecondaryIndexes** *(list) --*

      Replica-specific global secondary index auto scaling settings.

      - *(dict) --*

        Represents the auto scaling configuration for a replica global secondary index.

        - **IndexName** *(string) --*

          The name of the global secondary index.

        - **IndexStatus** *(string) --*

          The current state of the replica global secondary index:

          * ``CREATING`` - The index is being created.

          * ``UPDATING`` - The index is being updated.

          * ``DELETING`` - The index is being deleted.

          * ``ACTIVE`` - The index is ready for use.

        - **ProvisionedReadCapacityAutoScalingSettings** *(dict) --*

          Represents the auto scaling settings for a global table or global secondary index.

          - **MinimumUnits** *(integer) --*

            The minimum capacity units that a global table or global secondary index should be
            scaled down to.

          - **MaximumUnits** *(integer) --*

            The maximum capacity units that a global table or global secondary index should be
            scaled up to.

          - **AutoScalingDisabled** *(boolean) --*

            Disabled auto scaling for this global table or global secondary index.

          - **AutoScalingRoleArn** *(string) --*

            Role ARN used for configuring the auto scaling policy.

          - **ScalingPolicies** *(list) --*

            Information about the scaling policies.

            - *(dict) --*

              Represents the properties of the scaling policy.

              - **PolicyName** *(string) --*

                The name of the scaling policy.

              - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

                Represents a target tracking scaling policy configuration.

                - **DisableScaleIn** *(boolean) --*

                  Indicates whether scale in by the target tracking policy is disabled. If the value
                  is true, scale in is disabled and the target tracking policy won't remove capacity
                  from the scalable resource. Otherwise, scale in is enabled and the target tracking
                  policy can remove capacity from the scalable resource. The default value is false.

                - **ScaleInCooldown** *(integer) --*

                  The amount of time, in seconds, after a scale in activity completes before another
                  scale in activity can start. The cooldown period is used to block subsequent scale
                  in requests until it has expired. You should scale in conservatively to protect
                  your application's availability. However, if another alarm triggers a scale out
                  policy during the cooldown period after a scale-in, application auto scaling
                  scales out your scalable target immediately.

                - **ScaleOutCooldown** *(integer) --*

                  The amount of time, in seconds, after a scale out activity completes before
                  another scale out activity can start. While the cooldown period is in effect, the
                  capacity that has been added by the previous scale out event that initiated the
                  cooldown is calculated as part of the desired capacity for the next scale out. You
                  should continuously (but not excessively) scale out.

                - **TargetValue** *(float) --*

                  The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base
                  10) or 2e-360 to 2e360 (Base 2).

        - **ProvisionedWriteCapacityAutoScalingSettings** *(dict) --*

          Represents the auto scaling settings for a global table or global secondary index.

          - **MinimumUnits** *(integer) --*

            The minimum capacity units that a global table or global secondary index should be
            scaled down to.

          - **MaximumUnits** *(integer) --*

            The maximum capacity units that a global table or global secondary index should be
            scaled up to.

          - **AutoScalingDisabled** *(boolean) --*

            Disabled auto scaling for this global table or global secondary index.

          - **AutoScalingRoleArn** *(string) --*

            Role ARN used for configuring the auto scaling policy.

          - **ScalingPolicies** *(list) --*

            Information about the scaling policies.

            - *(dict) --*

              Represents the properties of the scaling policy.

              - **PolicyName** *(string) --*

                The name of the scaling policy.

              - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

                Represents a target tracking scaling policy configuration.

                - **DisableScaleIn** *(boolean) --*

                  Indicates whether scale in by the target tracking policy is disabled. If the value
                  is true, scale in is disabled and the target tracking policy won't remove capacity
                  from the scalable resource. Otherwise, scale in is enabled and the target tracking
                  policy can remove capacity from the scalable resource. The default value is false.

                - **ScaleInCooldown** *(integer) --*

                  The amount of time, in seconds, after a scale in activity completes before another
                  scale in activity can start. The cooldown period is used to block subsequent scale
                  in requests until it has expired. You should scale in conservatively to protect
                  your application's availability. However, if another alarm triggers a scale out
                  policy during the cooldown period after a scale-in, application auto scaling
                  scales out your scalable target immediately.

                - **ScaleOutCooldown** *(integer) --*

                  The amount of time, in seconds, after a scale out activity completes before
                  another scale out activity can start. While the cooldown period is in effect, the
                  capacity that has been added by the previous scale out event that initiated the
                  cooldown is calculated as part of the desired capacity for the next scale out. You
                  should continuously (but not excessively) scale out.

                - **TargetValue** *(float) --*

                  The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base
                  10) or 2e-360 to 2e360 (Base 2).

    - **ReplicaProvisionedReadCapacityAutoScalingSettings** *(dict) --*

      Represents the auto scaling settings for a global table or global secondary index.

      - **MinimumUnits** *(integer) --*

        The minimum capacity units that a global table or global secondary index should be scaled
        down to.

      - **MaximumUnits** *(integer) --*

        The maximum capacity units that a global table or global secondary index should be scaled up
        to.

      - **AutoScalingDisabled** *(boolean) --*

        Disabled auto scaling for this global table or global secondary index.

      - **AutoScalingRoleArn** *(string) --*

        Role ARN used for configuring the auto scaling policy.

      - **ScalingPolicies** *(list) --*

        Information about the scaling policies.

        - *(dict) --*

          Represents the properties of the scaling policy.

          - **PolicyName** *(string) --*

            The name of the scaling policy.

          - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

            Represents a target tracking scaling policy configuration.

            - **DisableScaleIn** *(boolean) --*

              Indicates whether scale in by the target tracking policy is disabled. If the value is
              true, scale in is disabled and the target tracking policy won't remove capacity from
              the scalable resource. Otherwise, scale in is enabled and the target tracking policy
              can remove capacity from the scalable resource. The default value is false.

            - **ScaleInCooldown** *(integer) --*

              The amount of time, in seconds, after a scale in activity completes before another
              scale in activity can start. The cooldown period is used to block subsequent scale in
              requests until it has expired. You should scale in conservatively to protect your
              application's availability. However, if another alarm triggers a scale out policy
              during the cooldown period after a scale-in, application auto scaling scales out your
              scalable target immediately.

            - **ScaleOutCooldown** *(integer) --*

              The amount of time, in seconds, after a scale out activity completes before another
              scale out activity can start. While the cooldown period is in effect, the capacity
              that has been added by the previous scale out event that initiated the cooldown is
              calculated as part of the desired capacity for the next scale out. You should
              continuously (but not excessively) scale out.

            - **TargetValue** *(float) --*

              The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10)
              or 2e-360 to 2e360 (Base 2).

    - **ReplicaProvisionedWriteCapacityAutoScalingSettings** *(dict) --*

      Represents the auto scaling settings for a global table or global secondary index.

      - **MinimumUnits** *(integer) --*

        The minimum capacity units that a global table or global secondary index should be scaled
        down to.

      - **MaximumUnits** *(integer) --*

        The maximum capacity units that a global table or global secondary index should be scaled up
        to.

      - **AutoScalingDisabled** *(boolean) --*

        Disabled auto scaling for this global table or global secondary index.

      - **AutoScalingRoleArn** *(string) --*

        Role ARN used for configuring the auto scaling policy.

      - **ScalingPolicies** *(list) --*

        Information about the scaling policies.

        - *(dict) --*

          Represents the properties of the scaling policy.

          - **PolicyName** *(string) --*

            The name of the scaling policy.

          - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

            Represents a target tracking scaling policy configuration.

            - **DisableScaleIn** *(boolean) --*

              Indicates whether scale in by the target tracking policy is disabled. If the value is
              true, scale in is disabled and the target tracking policy won't remove capacity from
              the scalable resource. Otherwise, scale in is enabled and the target tracking policy
              can remove capacity from the scalable resource. The default value is false.

            - **ScaleInCooldown** *(integer) --*

              The amount of time, in seconds, after a scale in activity completes before another
              scale in activity can start. The cooldown period is used to block subsequent scale in
              requests until it has expired. You should scale in conservatively to protect your
              application's availability. However, if another alarm triggers a scale out policy
              during the cooldown period after a scale-in, application auto scaling scales out your
              scalable target immediately.

            - **ScaleOutCooldown** *(integer) --*

              The amount of time, in seconds, after a scale out activity completes before another
              scale out activity can start. While the cooldown period is in effect, the capacity
              that has been added by the previous scale out event that initiated the cooldown is
              calculated as part of the desired capacity for the next scale out. You should
              continuously (but not excessively) scale out.

            - **TargetValue** *(float) --*

              The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10)
              or 2e-360 to 2e360 (Base 2).

    - **ReplicaStatus** *(string) --*

      The current state of the replica:

      * ``CREATING`` - The replica is being created.

      * ``UPDATING`` - The replica is being updated.

      * ``DELETING`` - The replica is being deleted.

      * ``ACTIVE`` - The replica is ready for use.
    """


_ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionTypeDef = TypedDict(
    "_ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionTypeDef",
    {
        "TableName": str,
        "TableStatus": str,
        "Replicas": List[
            ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionReplicasTypeDef
        ],
    },
    total=False,
)


class ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionTypeDef(
    _ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionTypeDef
):
    """
    Type definition for `ClientUpdateTableReplicaAutoScalingResponse` `TableAutoScalingDescription`

    Returns information about the auto scaling settings of a table with replicas.

    - **TableName** *(string) --*

      The name of the table.

    - **TableStatus** *(string) --*

      The current state of the table:

      * ``CREATING`` - The table is being created.

      * ``UPDATING`` - The table is being updated.

      * ``DELETING`` - The table is being deleted.

      * ``ACTIVE`` - The table is ready for use.

    - **Replicas** *(list) --*

      Represents replicas of the global table.

      - *(dict) --*

        Represents the auto scaling settings of the replica.

        - **RegionName** *(string) --*

          The Region where the replica exists.

        - **GlobalSecondaryIndexes** *(list) --*

          Replica-specific global secondary index auto scaling settings.

          - *(dict) --*

            Represents the auto scaling configuration for a replica global secondary index.

            - **IndexName** *(string) --*

              The name of the global secondary index.

            - **IndexStatus** *(string) --*

              The current state of the replica global secondary index:

              * ``CREATING`` - The index is being created.

              * ``UPDATING`` - The index is being updated.

              * ``DELETING`` - The index is being deleted.

              * ``ACTIVE`` - The index is ready for use.

            - **ProvisionedReadCapacityAutoScalingSettings** *(dict) --*

              Represents the auto scaling settings for a global table or global secondary index.

              - **MinimumUnits** *(integer) --*

                The minimum capacity units that a global table or global secondary index should be
                scaled down to.

              - **MaximumUnits** *(integer) --*

                The maximum capacity units that a global table or global secondary index should be
                scaled up to.

              - **AutoScalingDisabled** *(boolean) --*

                Disabled auto scaling for this global table or global secondary index.

              - **AutoScalingRoleArn** *(string) --*

                Role ARN used for configuring the auto scaling policy.

              - **ScalingPolicies** *(list) --*

                Information about the scaling policies.

                - *(dict) --*

                  Represents the properties of the scaling policy.

                  - **PolicyName** *(string) --*

                    The name of the scaling policy.

                  - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

                    Represents a target tracking scaling policy configuration.

                    - **DisableScaleIn** *(boolean) --*

                      Indicates whether scale in by the target tracking policy is disabled. If the
                      value is true, scale in is disabled and the target tracking policy won't
                      remove capacity from the scalable resource. Otherwise, scale in is enabled and
                      the target tracking policy can remove capacity from the scalable resource. The
                      default value is false.

                    - **ScaleInCooldown** *(integer) --*

                      The amount of time, in seconds, after a scale in activity completes before
                      another scale in activity can start. The cooldown period is used to block
                      subsequent scale in requests until it has expired. You should scale in
                      conservatively to protect your application's availability. However, if another
                      alarm triggers a scale out policy during the cooldown period after a scale-in,
                      application auto scaling scales out your scalable target immediately.

                    - **ScaleOutCooldown** *(integer) --*

                      The amount of time, in seconds, after a scale out activity completes before
                      another scale out activity can start. While the cooldown period is in effect,
                      the capacity that has been added by the previous scale out event that
                      initiated the cooldown is calculated as part of the desired capacity for the
                      next scale out. You should continuously (but not excessively) scale out.

                    - **TargetValue** *(float) --*

                      The target value for the metric. The range is 8.515920e-109 to 1.174271e+108
                      (Base 10) or 2e-360 to 2e360 (Base 2).

            - **ProvisionedWriteCapacityAutoScalingSettings** *(dict) --*

              Represents the auto scaling settings for a global table or global secondary index.

              - **MinimumUnits** *(integer) --*

                The minimum capacity units that a global table or global secondary index should be
                scaled down to.

              - **MaximumUnits** *(integer) --*

                The maximum capacity units that a global table or global secondary index should be
                scaled up to.

              - **AutoScalingDisabled** *(boolean) --*

                Disabled auto scaling for this global table or global secondary index.

              - **AutoScalingRoleArn** *(string) --*

                Role ARN used for configuring the auto scaling policy.

              - **ScalingPolicies** *(list) --*

                Information about the scaling policies.

                - *(dict) --*

                  Represents the properties of the scaling policy.

                  - **PolicyName** *(string) --*

                    The name of the scaling policy.

                  - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

                    Represents a target tracking scaling policy configuration.

                    - **DisableScaleIn** *(boolean) --*

                      Indicates whether scale in by the target tracking policy is disabled. If the
                      value is true, scale in is disabled and the target tracking policy won't
                      remove capacity from the scalable resource. Otherwise, scale in is enabled and
                      the target tracking policy can remove capacity from the scalable resource. The
                      default value is false.

                    - **ScaleInCooldown** *(integer) --*

                      The amount of time, in seconds, after a scale in activity completes before
                      another scale in activity can start. The cooldown period is used to block
                      subsequent scale in requests until it has expired. You should scale in
                      conservatively to protect your application's availability. However, if another
                      alarm triggers a scale out policy during the cooldown period after a scale-in,
                      application auto scaling scales out your scalable target immediately.

                    - **ScaleOutCooldown** *(integer) --*

                      The amount of time, in seconds, after a scale out activity completes before
                      another scale out activity can start. While the cooldown period is in effect,
                      the capacity that has been added by the previous scale out event that
                      initiated the cooldown is calculated as part of the desired capacity for the
                      next scale out. You should continuously (but not excessively) scale out.

                    - **TargetValue** *(float) --*

                      The target value for the metric. The range is 8.515920e-109 to 1.174271e+108
                      (Base 10) or 2e-360 to 2e360 (Base 2).

        - **ReplicaProvisionedReadCapacityAutoScalingSettings** *(dict) --*

          Represents the auto scaling settings for a global table or global secondary index.

          - **MinimumUnits** *(integer) --*

            The minimum capacity units that a global table or global secondary index should be
            scaled down to.

          - **MaximumUnits** *(integer) --*

            The maximum capacity units that a global table or global secondary index should be
            scaled up to.

          - **AutoScalingDisabled** *(boolean) --*

            Disabled auto scaling for this global table or global secondary index.

          - **AutoScalingRoleArn** *(string) --*

            Role ARN used for configuring the auto scaling policy.

          - **ScalingPolicies** *(list) --*

            Information about the scaling policies.

            - *(dict) --*

              Represents the properties of the scaling policy.

              - **PolicyName** *(string) --*

                The name of the scaling policy.

              - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

                Represents a target tracking scaling policy configuration.

                - **DisableScaleIn** *(boolean) --*

                  Indicates whether scale in by the target tracking policy is disabled. If the value
                  is true, scale in is disabled and the target tracking policy won't remove capacity
                  from the scalable resource. Otherwise, scale in is enabled and the target tracking
                  policy can remove capacity from the scalable resource. The default value is false.

                - **ScaleInCooldown** *(integer) --*

                  The amount of time, in seconds, after a scale in activity completes before another
                  scale in activity can start. The cooldown period is used to block subsequent scale
                  in requests until it has expired. You should scale in conservatively to protect
                  your application's availability. However, if another alarm triggers a scale out
                  policy during the cooldown period after a scale-in, application auto scaling
                  scales out your scalable target immediately.

                - **ScaleOutCooldown** *(integer) --*

                  The amount of time, in seconds, after a scale out activity completes before
                  another scale out activity can start. While the cooldown period is in effect, the
                  capacity that has been added by the previous scale out event that initiated the
                  cooldown is calculated as part of the desired capacity for the next scale out. You
                  should continuously (but not excessively) scale out.

                - **TargetValue** *(float) --*

                  The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base
                  10) or 2e-360 to 2e360 (Base 2).

        - **ReplicaProvisionedWriteCapacityAutoScalingSettings** *(dict) --*

          Represents the auto scaling settings for a global table or global secondary index.

          - **MinimumUnits** *(integer) --*

            The minimum capacity units that a global table or global secondary index should be
            scaled down to.

          - **MaximumUnits** *(integer) --*

            The maximum capacity units that a global table or global secondary index should be
            scaled up to.

          - **AutoScalingDisabled** *(boolean) --*

            Disabled auto scaling for this global table or global secondary index.

          - **AutoScalingRoleArn** *(string) --*

            Role ARN used for configuring the auto scaling policy.

          - **ScalingPolicies** *(list) --*

            Information about the scaling policies.

            - *(dict) --*

              Represents the properties of the scaling policy.

              - **PolicyName** *(string) --*

                The name of the scaling policy.

              - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

                Represents a target tracking scaling policy configuration.

                - **DisableScaleIn** *(boolean) --*

                  Indicates whether scale in by the target tracking policy is disabled. If the value
                  is true, scale in is disabled and the target tracking policy won't remove capacity
                  from the scalable resource. Otherwise, scale in is enabled and the target tracking
                  policy can remove capacity from the scalable resource. The default value is false.

                - **ScaleInCooldown** *(integer) --*

                  The amount of time, in seconds, after a scale in activity completes before another
                  scale in activity can start. The cooldown period is used to block subsequent scale
                  in requests until it has expired. You should scale in conservatively to protect
                  your application's availability. However, if another alarm triggers a scale out
                  policy during the cooldown period after a scale-in, application auto scaling
                  scales out your scalable target immediately.

                - **ScaleOutCooldown** *(integer) --*

                  The amount of time, in seconds, after a scale out activity completes before
                  another scale out activity can start. While the cooldown period is in effect, the
                  capacity that has been added by the previous scale out event that initiated the
                  cooldown is calculated as part of the desired capacity for the next scale out. You
                  should continuously (but not excessively) scale out.

                - **TargetValue** *(float) --*

                  The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base
                  10) or 2e-360 to 2e360 (Base 2).

        - **ReplicaStatus** *(string) --*

          The current state of the replica:

          * ``CREATING`` - The replica is being created.

          * ``UPDATING`` - The replica is being updated.

          * ``DELETING`` - The replica is being deleted.

          * ``ACTIVE`` - The replica is ready for use.
    """


_ClientUpdateTableReplicaAutoScalingResponseTypeDef = TypedDict(
    "_ClientUpdateTableReplicaAutoScalingResponseTypeDef",
    {
        "TableAutoScalingDescription": ClientUpdateTableReplicaAutoScalingResponseTableAutoScalingDescriptionTypeDef
    },
    total=False,
)


class ClientUpdateTableReplicaAutoScalingResponseTypeDef(
    _ClientUpdateTableReplicaAutoScalingResponseTypeDef
):
    """
    Type definition for `ClientUpdateTableReplicaAutoScaling` `Response`

    - **TableAutoScalingDescription** *(dict) --*

      Returns information about the auto scaling settings of a table with replicas.

      - **TableName** *(string) --*

        The name of the table.

      - **TableStatus** *(string) --*

        The current state of the table:

        * ``CREATING`` - The table is being created.

        * ``UPDATING`` - The table is being updated.

        * ``DELETING`` - The table is being deleted.

        * ``ACTIVE`` - The table is ready for use.

      - **Replicas** *(list) --*

        Represents replicas of the global table.

        - *(dict) --*

          Represents the auto scaling settings of the replica.

          - **RegionName** *(string) --*

            The Region where the replica exists.

          - **GlobalSecondaryIndexes** *(list) --*

            Replica-specific global secondary index auto scaling settings.

            - *(dict) --*

              Represents the auto scaling configuration for a replica global secondary index.

              - **IndexName** *(string) --*

                The name of the global secondary index.

              - **IndexStatus** *(string) --*

                The current state of the replica global secondary index:

                * ``CREATING`` - The index is being created.

                * ``UPDATING`` - The index is being updated.

                * ``DELETING`` - The index is being deleted.

                * ``ACTIVE`` - The index is ready for use.

              - **ProvisionedReadCapacityAutoScalingSettings** *(dict) --*

                Represents the auto scaling settings for a global table or global secondary index.

                - **MinimumUnits** *(integer) --*

                  The minimum capacity units that a global table or global secondary index should be
                  scaled down to.

                - **MaximumUnits** *(integer) --*

                  The maximum capacity units that a global table or global secondary index should be
                  scaled up to.

                - **AutoScalingDisabled** *(boolean) --*

                  Disabled auto scaling for this global table or global secondary index.

                - **AutoScalingRoleArn** *(string) --*

                  Role ARN used for configuring the auto scaling policy.

                - **ScalingPolicies** *(list) --*

                  Information about the scaling policies.

                  - *(dict) --*

                    Represents the properties of the scaling policy.

                    - **PolicyName** *(string) --*

                      The name of the scaling policy.

                    - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

                      Represents a target tracking scaling policy configuration.

                      - **DisableScaleIn** *(boolean) --*

                        Indicates whether scale in by the target tracking policy is disabled. If the
                        value is true, scale in is disabled and the target tracking policy won't
                        remove capacity from the scalable resource. Otherwise, scale in is enabled
                        and the target tracking policy can remove capacity from the scalable
                        resource. The default value is false.

                      - **ScaleInCooldown** *(integer) --*

                        The amount of time, in seconds, after a scale in activity completes before
                        another scale in activity can start. The cooldown period is used to block
                        subsequent scale in requests until it has expired. You should scale in
                        conservatively to protect your application's availability. However, if
                        another alarm triggers a scale out policy during the cooldown period after a
                        scale-in, application auto scaling scales out your scalable target
                        immediately.

                      - **ScaleOutCooldown** *(integer) --*

                        The amount of time, in seconds, after a scale out activity completes before
                        another scale out activity can start. While the cooldown period is in
                        effect, the capacity that has been added by the previous scale out event
                        that initiated the cooldown is calculated as part of the desired capacity
                        for the next scale out. You should continuously (but not excessively) scale
                        out.

                      - **TargetValue** *(float) --*

                        The target value for the metric. The range is 8.515920e-109 to 1.174271e+108
                        (Base 10) or 2e-360 to 2e360 (Base 2).

              - **ProvisionedWriteCapacityAutoScalingSettings** *(dict) --*

                Represents the auto scaling settings for a global table or global secondary index.

                - **MinimumUnits** *(integer) --*

                  The minimum capacity units that a global table or global secondary index should be
                  scaled down to.

                - **MaximumUnits** *(integer) --*

                  The maximum capacity units that a global table or global secondary index should be
                  scaled up to.

                - **AutoScalingDisabled** *(boolean) --*

                  Disabled auto scaling for this global table or global secondary index.

                - **AutoScalingRoleArn** *(string) --*

                  Role ARN used for configuring the auto scaling policy.

                - **ScalingPolicies** *(list) --*

                  Information about the scaling policies.

                  - *(dict) --*

                    Represents the properties of the scaling policy.

                    - **PolicyName** *(string) --*

                      The name of the scaling policy.

                    - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

                      Represents a target tracking scaling policy configuration.

                      - **DisableScaleIn** *(boolean) --*

                        Indicates whether scale in by the target tracking policy is disabled. If the
                        value is true, scale in is disabled and the target tracking policy won't
                        remove capacity from the scalable resource. Otherwise, scale in is enabled
                        and the target tracking policy can remove capacity from the scalable
                        resource. The default value is false.

                      - **ScaleInCooldown** *(integer) --*

                        The amount of time, in seconds, after a scale in activity completes before
                        another scale in activity can start. The cooldown period is used to block
                        subsequent scale in requests until it has expired. You should scale in
                        conservatively to protect your application's availability. However, if
                        another alarm triggers a scale out policy during the cooldown period after a
                        scale-in, application auto scaling scales out your scalable target
                        immediately.

                      - **ScaleOutCooldown** *(integer) --*

                        The amount of time, in seconds, after a scale out activity completes before
                        another scale out activity can start. While the cooldown period is in
                        effect, the capacity that has been added by the previous scale out event
                        that initiated the cooldown is calculated as part of the desired capacity
                        for the next scale out. You should continuously (but not excessively) scale
                        out.

                      - **TargetValue** *(float) --*

                        The target value for the metric. The range is 8.515920e-109 to 1.174271e+108
                        (Base 10) or 2e-360 to 2e360 (Base 2).

          - **ReplicaProvisionedReadCapacityAutoScalingSettings** *(dict) --*

            Represents the auto scaling settings for a global table or global secondary index.

            - **MinimumUnits** *(integer) --*

              The minimum capacity units that a global table or global secondary index should be
              scaled down to.

            - **MaximumUnits** *(integer) --*

              The maximum capacity units that a global table or global secondary index should be
              scaled up to.

            - **AutoScalingDisabled** *(boolean) --*

              Disabled auto scaling for this global table or global secondary index.

            - **AutoScalingRoleArn** *(string) --*

              Role ARN used for configuring the auto scaling policy.

            - **ScalingPolicies** *(list) --*

              Information about the scaling policies.

              - *(dict) --*

                Represents the properties of the scaling policy.

                - **PolicyName** *(string) --*

                  The name of the scaling policy.

                - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

                  Represents a target tracking scaling policy configuration.

                  - **DisableScaleIn** *(boolean) --*

                    Indicates whether scale in by the target tracking policy is disabled. If the
                    value is true, scale in is disabled and the target tracking policy won't remove
                    capacity from the scalable resource. Otherwise, scale in is enabled and the
                    target tracking policy can remove capacity from the scalable resource. The
                    default value is false.

                  - **ScaleInCooldown** *(integer) --*

                    The amount of time, in seconds, after a scale in activity completes before
                    another scale in activity can start. The cooldown period is used to block
                    subsequent scale in requests until it has expired. You should scale in
                    conservatively to protect your application's availability. However, if another
                    alarm triggers a scale out policy during the cooldown period after a scale-in,
                    application auto scaling scales out your scalable target immediately.

                  - **ScaleOutCooldown** *(integer) --*

                    The amount of time, in seconds, after a scale out activity completes before
                    another scale out activity can start. While the cooldown period is in effect,
                    the capacity that has been added by the previous scale out event that initiated
                    the cooldown is calculated as part of the desired capacity for the next scale
                    out. You should continuously (but not excessively) scale out.

                  - **TargetValue** *(float) --*

                    The target value for the metric. The range is 8.515920e-109 to 1.174271e+108
                    (Base 10) or 2e-360 to 2e360 (Base 2).

          - **ReplicaProvisionedWriteCapacityAutoScalingSettings** *(dict) --*

            Represents the auto scaling settings for a global table or global secondary index.

            - **MinimumUnits** *(integer) --*

              The minimum capacity units that a global table or global secondary index should be
              scaled down to.

            - **MaximumUnits** *(integer) --*

              The maximum capacity units that a global table or global secondary index should be
              scaled up to.

            - **AutoScalingDisabled** *(boolean) --*

              Disabled auto scaling for this global table or global secondary index.

            - **AutoScalingRoleArn** *(string) --*

              Role ARN used for configuring the auto scaling policy.

            - **ScalingPolicies** *(list) --*

              Information about the scaling policies.

              - *(dict) --*

                Represents the properties of the scaling policy.

                - **PolicyName** *(string) --*

                  The name of the scaling policy.

                - **TargetTrackingScalingPolicyConfiguration** *(dict) --*

                  Represents a target tracking scaling policy configuration.

                  - **DisableScaleIn** *(boolean) --*

                    Indicates whether scale in by the target tracking policy is disabled. If the
                    value is true, scale in is disabled and the target tracking policy won't remove
                    capacity from the scalable resource. Otherwise, scale in is enabled and the
                    target tracking policy can remove capacity from the scalable resource. The
                    default value is false.

                  - **ScaleInCooldown** *(integer) --*

                    The amount of time, in seconds, after a scale in activity completes before
                    another scale in activity can start. The cooldown period is used to block
                    subsequent scale in requests until it has expired. You should scale in
                    conservatively to protect your application's availability. However, if another
                    alarm triggers a scale out policy during the cooldown period after a scale-in,
                    application auto scaling scales out your scalable target immediately.

                  - **ScaleOutCooldown** *(integer) --*

                    The amount of time, in seconds, after a scale out activity completes before
                    another scale out activity can start. While the cooldown period is in effect,
                    the capacity that has been added by the previous scale out event that initiated
                    the cooldown is calculated as part of the desired capacity for the next scale
                    out. You should continuously (but not excessively) scale out.

                  - **TargetValue** *(float) --*

                    The target value for the metric. The range is 8.515920e-109 to 1.174271e+108
                    (Base 10) or 2e-360 to 2e360 (Base 2).

          - **ReplicaStatus** *(string) --*

            The current state of the replica:

            * ``CREATING`` - The replica is being created.

            * ``UPDATING`` - The replica is being updated.

            * ``DELETING`` - The replica is being deleted.

            * ``ACTIVE`` - The replica is ready for use.
    """


_ClientUpdateTableReplicaUpdatesCreateGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef = TypedDict(
    "_ClientUpdateTableReplicaUpdatesCreateGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef",
    {"ReadCapacityUnits": int},
    total=False,
)


class ClientUpdateTableReplicaUpdatesCreateGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef(
    _ClientUpdateTableReplicaUpdatesCreateGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef
):
    """
    Type definition for `ClientUpdateTableReplicaUpdatesCreateGlobalSecondaryIndexes`
    `ProvisionedThroughputOverride`

    Replica table GSI-specific provisioned throughput. If not specified, uses the source table GSI's
    read capacity settings.

    - **ReadCapacityUnits** *(integer) --*

      Replica-specific read capacity units. If not specified, uses the source table's read capacity
      settings.
    """


_RequiredClientUpdateTableReplicaUpdatesCreateGlobalSecondaryIndexesTypeDef = TypedDict(
    "_RequiredClientUpdateTableReplicaUpdatesCreateGlobalSecondaryIndexesTypeDef",
    {"IndexName": str},
)
_OptionalClientUpdateTableReplicaUpdatesCreateGlobalSecondaryIndexesTypeDef = TypedDict(
    "_OptionalClientUpdateTableReplicaUpdatesCreateGlobalSecondaryIndexesTypeDef",
    {
        "ProvisionedThroughputOverride": ClientUpdateTableReplicaUpdatesCreateGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef
    },
    total=False,
)


class ClientUpdateTableReplicaUpdatesCreateGlobalSecondaryIndexesTypeDef(
    _RequiredClientUpdateTableReplicaUpdatesCreateGlobalSecondaryIndexesTypeDef,
    _OptionalClientUpdateTableReplicaUpdatesCreateGlobalSecondaryIndexesTypeDef,
):
    """
    Type definition for `ClientUpdateTableReplicaUpdatesCreate` `GlobalSecondaryIndexes`

    Represents the properties of a replica global secondary index.

    - **IndexName** *(string) --* **[REQUIRED]**

      The name of the global secondary index.

    - **ProvisionedThroughputOverride** *(dict) --*

      Replica table GSI-specific provisioned throughput. If not specified, uses the source table
      GSI's read capacity settings.

      - **ReadCapacityUnits** *(integer) --*

        Replica-specific read capacity units. If not specified, uses the source table's read
        capacity settings.
    """


_ClientUpdateTableReplicaUpdatesCreateProvisionedThroughputOverrideTypeDef = TypedDict(
    "_ClientUpdateTableReplicaUpdatesCreateProvisionedThroughputOverrideTypeDef",
    {"ReadCapacityUnits": int},
    total=False,
)


class ClientUpdateTableReplicaUpdatesCreateProvisionedThroughputOverrideTypeDef(
    _ClientUpdateTableReplicaUpdatesCreateProvisionedThroughputOverrideTypeDef
):
    """
    Type definition for `ClientUpdateTableReplicaUpdatesCreate` `ProvisionedThroughputOverride`

    Replica-specific provisioned throughput. If not specified, uses the source table's provisioned
    throughput settings.

    - **ReadCapacityUnits** *(integer) --*

      Replica-specific read capacity units. If not specified, uses the source table's read capacity
      settings.
    """


_RequiredClientUpdateTableReplicaUpdatesCreateTypeDef = TypedDict(
    "_RequiredClientUpdateTableReplicaUpdatesCreateTypeDef", {"RegionName": str}
)
_OptionalClientUpdateTableReplicaUpdatesCreateTypeDef = TypedDict(
    "_OptionalClientUpdateTableReplicaUpdatesCreateTypeDef",
    {
        "KMSMasterKeyId": str,
        "ProvisionedThroughputOverride": ClientUpdateTableReplicaUpdatesCreateProvisionedThroughputOverrideTypeDef,
        "GlobalSecondaryIndexes": List[
            ClientUpdateTableReplicaUpdatesCreateGlobalSecondaryIndexesTypeDef
        ],
    },
    total=False,
)


class ClientUpdateTableReplicaUpdatesCreateTypeDef(
    _RequiredClientUpdateTableReplicaUpdatesCreateTypeDef,
    _OptionalClientUpdateTableReplicaUpdatesCreateTypeDef,
):
    """
    Type definition for `ClientUpdateTableReplicaUpdates` `Create`

    The parameters required for creating a replica for the table.

    - **RegionName** *(string) --* **[REQUIRED]**

      The Region where the new replica will be created.

    - **KMSMasterKeyId** *(string) --*

      The AWS KMS customer master key (CMK) that should be used for AWS KMS encryption in the new
      replica. To specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias
      ARN. Note that you should only provide this parameter if the key is different from the default
      DynamoDB KMS master key alias/aws/dynamodb.

    - **ProvisionedThroughputOverride** *(dict) --*

      Replica-specific provisioned throughput. If not specified, uses the source table's provisioned
      throughput settings.

      - **ReadCapacityUnits** *(integer) --*

        Replica-specific read capacity units. If not specified, uses the source table's read
        capacity settings.

    - **GlobalSecondaryIndexes** *(list) --*

      Replica-specific global secondary index settings.

      - *(dict) --*

        Represents the properties of a replica global secondary index.

        - **IndexName** *(string) --* **[REQUIRED]**

          The name of the global secondary index.

        - **ProvisionedThroughputOverride** *(dict) --*

          Replica table GSI-specific provisioned throughput. If not specified, uses the source table
          GSI's read capacity settings.

          - **ReadCapacityUnits** *(integer) --*

            Replica-specific read capacity units. If not specified, uses the source table's read
            capacity settings.
    """


_ClientUpdateTableReplicaUpdatesDeleteTypeDef = TypedDict(
    "_ClientUpdateTableReplicaUpdatesDeleteTypeDef", {"RegionName": str}
)


class ClientUpdateTableReplicaUpdatesDeleteTypeDef(_ClientUpdateTableReplicaUpdatesDeleteTypeDef):
    """
    Type definition for `ClientUpdateTableReplicaUpdates` `Delete`

    The parameters required for deleting a replica for the table.

    - **RegionName** *(string) --* **[REQUIRED]**

      The Region where the replica exists.
    """


_ClientUpdateTableReplicaUpdatesUpdateGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef = TypedDict(
    "_ClientUpdateTableReplicaUpdatesUpdateGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef",
    {"ReadCapacityUnits": int},
    total=False,
)


class ClientUpdateTableReplicaUpdatesUpdateGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef(
    _ClientUpdateTableReplicaUpdatesUpdateGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef
):
    """
    Type definition for `ClientUpdateTableReplicaUpdatesUpdateGlobalSecondaryIndexes`
    `ProvisionedThroughputOverride`

    Replica table GSI-specific provisioned throughput. If not specified, uses the source table GSI's
    read capacity settings.

    - **ReadCapacityUnits** *(integer) --*

      Replica-specific read capacity units. If not specified, uses the source table's read capacity
      settings.
    """


_RequiredClientUpdateTableReplicaUpdatesUpdateGlobalSecondaryIndexesTypeDef = TypedDict(
    "_RequiredClientUpdateTableReplicaUpdatesUpdateGlobalSecondaryIndexesTypeDef",
    {"IndexName": str},
)
_OptionalClientUpdateTableReplicaUpdatesUpdateGlobalSecondaryIndexesTypeDef = TypedDict(
    "_OptionalClientUpdateTableReplicaUpdatesUpdateGlobalSecondaryIndexesTypeDef",
    {
        "ProvisionedThroughputOverride": ClientUpdateTableReplicaUpdatesUpdateGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef
    },
    total=False,
)


class ClientUpdateTableReplicaUpdatesUpdateGlobalSecondaryIndexesTypeDef(
    _RequiredClientUpdateTableReplicaUpdatesUpdateGlobalSecondaryIndexesTypeDef,
    _OptionalClientUpdateTableReplicaUpdatesUpdateGlobalSecondaryIndexesTypeDef,
):
    """
    Type definition for `ClientUpdateTableReplicaUpdatesUpdate` `GlobalSecondaryIndexes`

    Represents the properties of a replica global secondary index.

    - **IndexName** *(string) --* **[REQUIRED]**

      The name of the global secondary index.

    - **ProvisionedThroughputOverride** *(dict) --*

      Replica table GSI-specific provisioned throughput. If not specified, uses the source table
      GSI's read capacity settings.

      - **ReadCapacityUnits** *(integer) --*

        Replica-specific read capacity units. If not specified, uses the source table's read
        capacity settings.
    """


_ClientUpdateTableReplicaUpdatesUpdateProvisionedThroughputOverrideTypeDef = TypedDict(
    "_ClientUpdateTableReplicaUpdatesUpdateProvisionedThroughputOverrideTypeDef",
    {"ReadCapacityUnits": int},
    total=False,
)


class ClientUpdateTableReplicaUpdatesUpdateProvisionedThroughputOverrideTypeDef(
    _ClientUpdateTableReplicaUpdatesUpdateProvisionedThroughputOverrideTypeDef
):
    """
    Type definition for `ClientUpdateTableReplicaUpdatesUpdate` `ProvisionedThroughputOverride`

    Replica-specific provisioned throughput. If not specified, uses the source table's provisioned
    throughput settings.

    - **ReadCapacityUnits** *(integer) --*

      Replica-specific read capacity units. If not specified, uses the source table's read capacity
      settings.
    """


_RequiredClientUpdateTableReplicaUpdatesUpdateTypeDef = TypedDict(
    "_RequiredClientUpdateTableReplicaUpdatesUpdateTypeDef", {"RegionName": str}
)
_OptionalClientUpdateTableReplicaUpdatesUpdateTypeDef = TypedDict(
    "_OptionalClientUpdateTableReplicaUpdatesUpdateTypeDef",
    {
        "KMSMasterKeyId": str,
        "ProvisionedThroughputOverride": ClientUpdateTableReplicaUpdatesUpdateProvisionedThroughputOverrideTypeDef,
        "GlobalSecondaryIndexes": List[
            ClientUpdateTableReplicaUpdatesUpdateGlobalSecondaryIndexesTypeDef
        ],
    },
    total=False,
)


class ClientUpdateTableReplicaUpdatesUpdateTypeDef(
    _RequiredClientUpdateTableReplicaUpdatesUpdateTypeDef,
    _OptionalClientUpdateTableReplicaUpdatesUpdateTypeDef,
):
    """
    Type definition for `ClientUpdateTableReplicaUpdates` `Update`

    The parameters required for updating a replica for the table.

    - **RegionName** *(string) --* **[REQUIRED]**

      The Region where the replica exists.

    - **KMSMasterKeyId** *(string) --*

      The AWS KMS customer master key (CMK) of the replica that should be used for AWS KMS
      encryption. To specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias
      ARN. Note that you should only provide this parameter if the key is different from the default
      DynamoDB KMS master key alias/aws/dynamodb.

    - **ProvisionedThroughputOverride** *(dict) --*

      Replica-specific provisioned throughput. If not specified, uses the source table's provisioned
      throughput settings.

      - **ReadCapacityUnits** *(integer) --*

        Replica-specific read capacity units. If not specified, uses the source table's read
        capacity settings.

    - **GlobalSecondaryIndexes** *(list) --*

      Replica-specific global secondary index settings.

      - *(dict) --*

        Represents the properties of a replica global secondary index.

        - **IndexName** *(string) --* **[REQUIRED]**

          The name of the global secondary index.

        - **ProvisionedThroughputOverride** *(dict) --*

          Replica table GSI-specific provisioned throughput. If not specified, uses the source table
          GSI's read capacity settings.

          - **ReadCapacityUnits** *(integer) --*

            Replica-specific read capacity units. If not specified, uses the source table's read
            capacity settings.
    """


_ClientUpdateTableReplicaUpdatesTypeDef = TypedDict(
    "_ClientUpdateTableReplicaUpdatesTypeDef",
    {
        "Create": ClientUpdateTableReplicaUpdatesCreateTypeDef,
        "Update": ClientUpdateTableReplicaUpdatesUpdateTypeDef,
        "Delete": ClientUpdateTableReplicaUpdatesDeleteTypeDef,
    },
    total=False,
)


class ClientUpdateTableReplicaUpdatesTypeDef(_ClientUpdateTableReplicaUpdatesTypeDef):
    """
    Type definition for `ClientUpdateTable` `ReplicaUpdates`

    Represents one of the following:

    * A new replica to be added to an existing regional table or global table. This request invokes
    the ``CreateTableReplica`` action in the destination Region.

    * New parameters for an existing replica. This request invokes the ``UpdateTable`` action in the
    destination Region.

    * An existing replica to be deleted. The request invokes the ``DeleteTableReplica`` action in
    the destination Region, deleting the replica and all if its items in the destination Region.

    - **Create** *(dict) --*

      The parameters required for creating a replica for the table.

      - **RegionName** *(string) --* **[REQUIRED]**

        The Region where the new replica will be created.

      - **KMSMasterKeyId** *(string) --*

        The AWS KMS customer master key (CMK) that should be used for AWS KMS encryption in the new
        replica. To specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias
        ARN. Note that you should only provide this parameter if the key is different from the
        default DynamoDB KMS master key alias/aws/dynamodb.

      - **ProvisionedThroughputOverride** *(dict) --*

        Replica-specific provisioned throughput. If not specified, uses the source table's
        provisioned throughput settings.

        - **ReadCapacityUnits** *(integer) --*

          Replica-specific read capacity units. If not specified, uses the source table's read
          capacity settings.

      - **GlobalSecondaryIndexes** *(list) --*

        Replica-specific global secondary index settings.

        - *(dict) --*

          Represents the properties of a replica global secondary index.

          - **IndexName** *(string) --* **[REQUIRED]**

            The name of the global secondary index.

          - **ProvisionedThroughputOverride** *(dict) --*

            Replica table GSI-specific provisioned throughput. If not specified, uses the source
            table GSI's read capacity settings.

            - **ReadCapacityUnits** *(integer) --*

              Replica-specific read capacity units. If not specified, uses the source table's read
              capacity settings.

    - **Update** *(dict) --*

      The parameters required for updating a replica for the table.

      - **RegionName** *(string) --* **[REQUIRED]**

        The Region where the replica exists.

      - **KMSMasterKeyId** *(string) --*

        The AWS KMS customer master key (CMK) of the replica that should be used for AWS KMS
        encryption. To specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or
        alias ARN. Note that you should only provide this parameter if the key is different from the
        default DynamoDB KMS master key alias/aws/dynamodb.

      - **ProvisionedThroughputOverride** *(dict) --*

        Replica-specific provisioned throughput. If not specified, uses the source table's
        provisioned throughput settings.

        - **ReadCapacityUnits** *(integer) --*

          Replica-specific read capacity units. If not specified, uses the source table's read
          capacity settings.

      - **GlobalSecondaryIndexes** *(list) --*

        Replica-specific global secondary index settings.

        - *(dict) --*

          Represents the properties of a replica global secondary index.

          - **IndexName** *(string) --* **[REQUIRED]**

            The name of the global secondary index.

          - **ProvisionedThroughputOverride** *(dict) --*

            Replica table GSI-specific provisioned throughput. If not specified, uses the source
            table GSI's read capacity settings.

            - **ReadCapacityUnits** *(integer) --*

              Replica-specific read capacity units. If not specified, uses the source table's read
              capacity settings.

    - **Delete** *(dict) --*

      The parameters required for deleting a replica for the table.

      - **RegionName** *(string) --* **[REQUIRED]**

        The Region where the replica exists.
    """


_ClientUpdateTableResponseTableDescriptionArchivalSummaryTypeDef = TypedDict(
    "_ClientUpdateTableResponseTableDescriptionArchivalSummaryTypeDef",
    {"ArchivalDateTime": datetime, "ArchivalReason": str, "ArchivalBackupArn": str},
    total=False,
)


class ClientUpdateTableResponseTableDescriptionArchivalSummaryTypeDef(
    _ClientUpdateTableResponseTableDescriptionArchivalSummaryTypeDef
):
    """
    Type definition for `ClientUpdateTableResponseTableDescription` `ArchivalSummary`

    Contains information about the table archive.

    - **ArchivalDateTime** *(datetime) --*

      The date and time when table archival was initiated by DynamoDB, in UNIX epoch time format.

    - **ArchivalReason** *(string) --*

      The reason DynamoDB archived the table. Currently, the only possible value is:

      * ``INACCESSIBLE_ENCRYPTION_CREDENTIALS`` - The table was archived due to the table's AWS KMS
      key being inaccessible for more than seven days. An On-Demand backup was created at the
      archival time.

    - **ArchivalBackupArn** *(string) --*

      The Amazon Resource Name (ARN) of the backup the table was archived to, when applicable in the
      archival reason. If you wish to restore this backup to the same table name, you will need to
      delete the original table.
    """


_ClientUpdateTableResponseTableDescriptionAttributeDefinitionsTypeDef = TypedDict(
    "_ClientUpdateTableResponseTableDescriptionAttributeDefinitionsTypeDef",
    {"AttributeName": str, "AttributeType": str},
    total=False,
)


class ClientUpdateTableResponseTableDescriptionAttributeDefinitionsTypeDef(
    _ClientUpdateTableResponseTableDescriptionAttributeDefinitionsTypeDef
):
    """
    Type definition for `ClientUpdateTableResponseTableDescription` `AttributeDefinitions`

    Represents an attribute for describing the key schema for the table and indexes.

    - **AttributeName** *(string) --*

      A name for the attribute.

    - **AttributeType** *(string) --*

      The data type for the attribute, where:

      * ``S`` - the attribute is of type String

      * ``N`` - the attribute is of type Number

      * ``B`` - the attribute is of type Binary
    """


_ClientUpdateTableResponseTableDescriptionBillingModeSummaryTypeDef = TypedDict(
    "_ClientUpdateTableResponseTableDescriptionBillingModeSummaryTypeDef",
    {"BillingMode": str, "LastUpdateToPayPerRequestDateTime": datetime},
    total=False,
)


class ClientUpdateTableResponseTableDescriptionBillingModeSummaryTypeDef(
    _ClientUpdateTableResponseTableDescriptionBillingModeSummaryTypeDef
):
    """
    Type definition for `ClientUpdateTableResponseTableDescription` `BillingModeSummary`

    Contains the details for the read/write capacity mode.

    - **BillingMode** *(string) --*

      Controls how you are charged for read and write throughput and how you manage capacity. This
      setting can be changed later.

      * ``PROVISIONED`` - Sets the read/write capacity mode to ``PROVISIONED`` . We recommend using
      ``PROVISIONED`` for predictable workloads.

      * ``PAY_PER_REQUEST`` - Sets the read/write capacity mode to ``PAY_PER_REQUEST`` . We
      recommend using ``PAY_PER_REQUEST`` for unpredictable workloads.

    - **LastUpdateToPayPerRequestDateTime** *(datetime) --*

      Represents the time when ``PAY_PER_REQUEST`` was last set as the read/write capacity mode.
    """


_ClientUpdateTableResponseTableDescriptionGlobalSecondaryIndexesKeySchemaTypeDef = TypedDict(
    "_ClientUpdateTableResponseTableDescriptionGlobalSecondaryIndexesKeySchemaTypeDef",
    {"AttributeName": str, "KeyType": str},
    total=False,
)


class ClientUpdateTableResponseTableDescriptionGlobalSecondaryIndexesKeySchemaTypeDef(
    _ClientUpdateTableResponseTableDescriptionGlobalSecondaryIndexesKeySchemaTypeDef
):
    """
    Type definition for `ClientUpdateTableResponseTableDescriptionGlobalSecondaryIndexes`
    `KeySchema`

    Represents *a single element* of a key schema. A key schema specifies the attributes that make
    up the primary key of a table, or the key attributes of an index.

    A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
    simple primary key would be represented by one ``KeySchemaElement`` (for the partition key). A
    composite primary key would require one ``KeySchemaElement`` for the partition key, and another
    ``KeySchemaElement`` for the sort key.

    A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The data
    type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a
    Map.

    - **AttributeName** *(string) --*

      The name of a key attribute.

    - **KeyType** *(string) --*

      The role that this key attribute will assume:

      * ``HASH`` - partition key

      * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.
    """


_ClientUpdateTableResponseTableDescriptionGlobalSecondaryIndexesProjectionTypeDef = TypedDict(
    "_ClientUpdateTableResponseTableDescriptionGlobalSecondaryIndexesProjectionTypeDef",
    {"ProjectionType": str, "NonKeyAttributes": List[str]},
    total=False,
)


class ClientUpdateTableResponseTableDescriptionGlobalSecondaryIndexesProjectionTypeDef(
    _ClientUpdateTableResponseTableDescriptionGlobalSecondaryIndexesProjectionTypeDef
):
    """
    Type definition for `ClientUpdateTableResponseTableDescriptionGlobalSecondaryIndexes`
    `Projection`

    Represents attributes that are copied (projected) from the table into the global secondary
    index. These are in addition to the primary key attributes and index key attributes, which are
    automatically projected.

    - **ProjectionType** *(string) --*

      The set of attributes that are projected into the index:

      * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

      * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list of
      projected attributes is in ``NonKeyAttributes`` .

      * ``ALL`` - All of the table attributes are projected into the index.

    - **NonKeyAttributes** *(list) --*

      Represents the non-key attribute names which will be projected into the index.

      For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all of the
      local secondary indexes, must not exceed 20. If you project the same attribute into two
      different indexes, this counts as two distinct attributes when determining the total.

      - *(string) --*
    """


_ClientUpdateTableResponseTableDescriptionGlobalSecondaryIndexesProvisionedThroughputTypeDef = TypedDict(
    "_ClientUpdateTableResponseTableDescriptionGlobalSecondaryIndexesProvisionedThroughputTypeDef",
    {
        "LastIncreaseDateTime": datetime,
        "LastDecreaseDateTime": datetime,
        "NumberOfDecreasesToday": int,
        "ReadCapacityUnits": int,
        "WriteCapacityUnits": int,
    },
    total=False,
)


class ClientUpdateTableResponseTableDescriptionGlobalSecondaryIndexesProvisionedThroughputTypeDef(
    _ClientUpdateTableResponseTableDescriptionGlobalSecondaryIndexesProvisionedThroughputTypeDef
):
    """
    Type definition for `ClientUpdateTableResponseTableDescriptionGlobalSecondaryIndexes`
    `ProvisionedThroughput`

    Represents the provisioned throughput settings for the specified global secondary index.

    For current minimum and maximum provisioned throughput values, see `Limits
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the *Amazon
    DynamoDB Developer Guide* .

    - **LastIncreaseDateTime** *(datetime) --*

      The date and time of the last provisioned throughput increase for this table.

    - **LastDecreaseDateTime** *(datetime) --*

      The date and time of the last provisioned throughput decrease for this table.

    - **NumberOfDecreasesToday** *(integer) --*

      The number of provisioned throughput decreases for this table during this UTC calendar day.
      For current maximums on provisioned throughput decreases, see `Limits
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
      *Amazon DynamoDB Developer Guide* .

    - **ReadCapacityUnits** *(integer) --*

      The maximum number of strongly consistent reads consumed per second before DynamoDB returns a
      ``ThrottlingException`` . Eventually consistent reads require less effort than strongly
      consistent reads, so a setting of 50 ``ReadCapacityUnits`` per second provides 100 eventually
      consistent ``ReadCapacityUnits`` per second.

    - **WriteCapacityUnits** *(integer) --*

      The maximum number of writes consumed per second before DynamoDB returns a
      ``ThrottlingException`` .
    """


_ClientUpdateTableResponseTableDescriptionGlobalSecondaryIndexesTypeDef = TypedDict(
    "_ClientUpdateTableResponseTableDescriptionGlobalSecondaryIndexesTypeDef",
    {
        "IndexName": str,
        "KeySchema": List[
            ClientUpdateTableResponseTableDescriptionGlobalSecondaryIndexesKeySchemaTypeDef
        ],
        "Projection": ClientUpdateTableResponseTableDescriptionGlobalSecondaryIndexesProjectionTypeDef,
        "IndexStatus": str,
        "Backfilling": bool,
        "ProvisionedThroughput": ClientUpdateTableResponseTableDescriptionGlobalSecondaryIndexesProvisionedThroughputTypeDef,
        "IndexSizeBytes": int,
        "ItemCount": int,
        "IndexArn": str,
    },
    total=False,
)


class ClientUpdateTableResponseTableDescriptionGlobalSecondaryIndexesTypeDef(
    _ClientUpdateTableResponseTableDescriptionGlobalSecondaryIndexesTypeDef
):
    """
    Type definition for `ClientUpdateTableResponseTableDescription` `GlobalSecondaryIndexes`

    Represents the properties of a global secondary index.

    - **IndexName** *(string) --*

      The name of the global secondary index.

    - **KeySchema** *(list) --*

      The complete key schema for a global secondary index, which consists of one or more pairs of
      attribute names and key types:

      * ``HASH`` - partition key

      * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.

      - *(dict) --*

        Represents *a single element* of a key schema. A key schema specifies the attributes that
        make up the primary key of a table, or the key attributes of an index.

        A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
        simple primary key would be represented by one ``KeySchemaElement`` (for the partition key).
        A composite primary key would require one ``KeySchemaElement`` for the partition key, and
        another ``KeySchemaElement`` for the sort key.

        A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The
        data type must be one of String, Number, or Binary. The attribute cannot be nested within a
        List or a Map.

        - **AttributeName** *(string) --*

          The name of a key attribute.

        - **KeyType** *(string) --*

          The role that this key attribute will assume:

          * ``HASH`` - partition key

          * ``RANGE`` - sort key

          .. note::

            The partition key of an item is also known as its *hash attribute* . The term "hash
            attribute" derives from DynamoDB's usage of an internal hash function to evenly
            distribute data items across partitions, based on their partition key values.

            The sort key of an item is also known as its *range attribute* . The term "range
            attribute" derives from the way DynamoDB stores items with the same partition key
            physically close together, in sorted order by the sort key value.

    - **Projection** *(dict) --*

      Represents attributes that are copied (projected) from the table into the global secondary
      index. These are in addition to the primary key attributes and index key attributes, which are
      automatically projected.

      - **ProjectionType** *(string) --*

        The set of attributes that are projected into the index:

        * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

        * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list
        of projected attributes is in ``NonKeyAttributes`` .

        * ``ALL`` - All of the table attributes are projected into the index.

      - **NonKeyAttributes** *(list) --*

        Represents the non-key attribute names which will be projected into the index.

        For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all of
        the local secondary indexes, must not exceed 20. If you project the same attribute into two
        different indexes, this counts as two distinct attributes when determining the total.

        - *(string) --*

    - **IndexStatus** *(string) --*

      The current state of the global secondary index:

      * ``CREATING`` - The index is being created.

      * ``UPDATING`` - The index is being updated.

      * ``DELETING`` - The index is being deleted.

      * ``ACTIVE`` - The index is ready for use.

    - **Backfilling** *(boolean) --*

      Indicates whether the index is currently backfilling. *Backfilling* is the process of reading
      items from the table and determining whether they can be added to the index. (Not all items
      will qualify: For example, a partition key cannot have any duplicate values.) If an item can
      be added to the index, DynamoDB will do so. After all items have been processed, the
      backfilling operation is complete and ``Backfilling`` is false.

      You can delete an index that is being created during the ``Backfilling`` phase when
      ``IndexStatus`` is set to CREATING and ``Backfilling`` is true. You can't delete the index
      that is being created when ``IndexStatus`` is set to CREATING and ``Backfilling`` is false.

      .. note::

        For indexes that were created during a ``CreateTable`` operation, the ``Backfilling``
        attribute does not appear in the ``DescribeTable`` output.

    - **ProvisionedThroughput** *(dict) --*

      Represents the provisioned throughput settings for the specified global secondary index.

      For current minimum and maximum provisioned throughput values, see `Limits
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
      *Amazon DynamoDB Developer Guide* .

      - **LastIncreaseDateTime** *(datetime) --*

        The date and time of the last provisioned throughput increase for this table.

      - **LastDecreaseDateTime** *(datetime) --*

        The date and time of the last provisioned throughput decrease for this table.

      - **NumberOfDecreasesToday** *(integer) --*

        The number of provisioned throughput decreases for this table during this UTC calendar day.
        For current maximums on provisioned throughput decreases, see `Limits
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
        *Amazon DynamoDB Developer Guide* .

      - **ReadCapacityUnits** *(integer) --*

        The maximum number of strongly consistent reads consumed per second before DynamoDB returns
        a ``ThrottlingException`` . Eventually consistent reads require less effort than strongly
        consistent reads, so a setting of 50 ``ReadCapacityUnits`` per second provides 100
        eventually consistent ``ReadCapacityUnits`` per second.

      - **WriteCapacityUnits** *(integer) --*

        The maximum number of writes consumed per second before DynamoDB returns a
        ``ThrottlingException`` .

    - **IndexSizeBytes** *(integer) --*

      The total size of the specified index, in bytes. DynamoDB updates this value approximately
      every six hours. Recent changes might not be reflected in this value.

    - **ItemCount** *(integer) --*

      The number of items in the specified index. DynamoDB updates this value approximately every
      six hours. Recent changes might not be reflected in this value.

    - **IndexArn** *(string) --*

      The Amazon Resource Name (ARN) that uniquely identifies the index.
    """


_ClientUpdateTableResponseTableDescriptionKeySchemaTypeDef = TypedDict(
    "_ClientUpdateTableResponseTableDescriptionKeySchemaTypeDef",
    {"AttributeName": str, "KeyType": str},
    total=False,
)


class ClientUpdateTableResponseTableDescriptionKeySchemaTypeDef(
    _ClientUpdateTableResponseTableDescriptionKeySchemaTypeDef
):
    """
    Type definition for `ClientUpdateTableResponseTableDescription` `KeySchema`

    Represents *a single element* of a key schema. A key schema specifies the attributes that make
    up the primary key of a table, or the key attributes of an index.

    A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
    simple primary key would be represented by one ``KeySchemaElement`` (for the partition key). A
    composite primary key would require one ``KeySchemaElement`` for the partition key, and another
    ``KeySchemaElement`` for the sort key.

    A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The data
    type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a
    Map.

    - **AttributeName** *(string) --*

      The name of a key attribute.

    - **KeyType** *(string) --*

      The role that this key attribute will assume:

      * ``HASH`` - partition key

      * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.
    """


_ClientUpdateTableResponseTableDescriptionLocalSecondaryIndexesKeySchemaTypeDef = TypedDict(
    "_ClientUpdateTableResponseTableDescriptionLocalSecondaryIndexesKeySchemaTypeDef",
    {"AttributeName": str, "KeyType": str},
    total=False,
)


class ClientUpdateTableResponseTableDescriptionLocalSecondaryIndexesKeySchemaTypeDef(
    _ClientUpdateTableResponseTableDescriptionLocalSecondaryIndexesKeySchemaTypeDef
):
    """
    Type definition for `ClientUpdateTableResponseTableDescriptionLocalSecondaryIndexes` `KeySchema`

    Represents *a single element* of a key schema. A key schema specifies the attributes that make
    up the primary key of a table, or the key attributes of an index.

    A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
    simple primary key would be represented by one ``KeySchemaElement`` (for the partition key). A
    composite primary key would require one ``KeySchemaElement`` for the partition key, and another
    ``KeySchemaElement`` for the sort key.

    A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The data
    type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a
    Map.

    - **AttributeName** *(string) --*

      The name of a key attribute.

    - **KeyType** *(string) --*

      The role that this key attribute will assume:

      * ``HASH`` - partition key

      * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.
    """


_ClientUpdateTableResponseTableDescriptionLocalSecondaryIndexesProjectionTypeDef = TypedDict(
    "_ClientUpdateTableResponseTableDescriptionLocalSecondaryIndexesProjectionTypeDef",
    {"ProjectionType": str, "NonKeyAttributes": List[str]},
    total=False,
)


class ClientUpdateTableResponseTableDescriptionLocalSecondaryIndexesProjectionTypeDef(
    _ClientUpdateTableResponseTableDescriptionLocalSecondaryIndexesProjectionTypeDef
):
    """
    Type definition for `ClientUpdateTableResponseTableDescriptionLocalSecondaryIndexes`
    `Projection`

    Represents attributes that are copied (projected) from the table into the global secondary
    index. These are in addition to the primary key attributes and index key attributes, which are
    automatically projected.

    - **ProjectionType** *(string) --*

      The set of attributes that are projected into the index:

      * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

      * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list of
      projected attributes is in ``NonKeyAttributes`` .

      * ``ALL`` - All of the table attributes are projected into the index.

    - **NonKeyAttributes** *(list) --*

      Represents the non-key attribute names which will be projected into the index.

      For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all of the
      local secondary indexes, must not exceed 20. If you project the same attribute into two
      different indexes, this counts as two distinct attributes when determining the total.

      - *(string) --*
    """


_ClientUpdateTableResponseTableDescriptionLocalSecondaryIndexesTypeDef = TypedDict(
    "_ClientUpdateTableResponseTableDescriptionLocalSecondaryIndexesTypeDef",
    {
        "IndexName": str,
        "KeySchema": List[
            ClientUpdateTableResponseTableDescriptionLocalSecondaryIndexesKeySchemaTypeDef
        ],
        "Projection": ClientUpdateTableResponseTableDescriptionLocalSecondaryIndexesProjectionTypeDef,
        "IndexSizeBytes": int,
        "ItemCount": int,
        "IndexArn": str,
    },
    total=False,
)


class ClientUpdateTableResponseTableDescriptionLocalSecondaryIndexesTypeDef(
    _ClientUpdateTableResponseTableDescriptionLocalSecondaryIndexesTypeDef
):
    """
    Type definition for `ClientUpdateTableResponseTableDescription` `LocalSecondaryIndexes`

    Represents the properties of a local secondary index.

    - **IndexName** *(string) --*

      Represents the name of the local secondary index.

    - **KeySchema** *(list) --*

      The complete key schema for the local secondary index, consisting of one or more pairs of
      attribute names and key types:

      * ``HASH`` - partition key

      * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.

      - *(dict) --*

        Represents *a single element* of a key schema. A key schema specifies the attributes that
        make up the primary key of a table, or the key attributes of an index.

        A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
        simple primary key would be represented by one ``KeySchemaElement`` (for the partition key).
        A composite primary key would require one ``KeySchemaElement`` for the partition key, and
        another ``KeySchemaElement`` for the sort key.

        A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The
        data type must be one of String, Number, or Binary. The attribute cannot be nested within a
        List or a Map.

        - **AttributeName** *(string) --*

          The name of a key attribute.

        - **KeyType** *(string) --*

          The role that this key attribute will assume:

          * ``HASH`` - partition key

          * ``RANGE`` - sort key

          .. note::

            The partition key of an item is also known as its *hash attribute* . The term "hash
            attribute" derives from DynamoDB's usage of an internal hash function to evenly
            distribute data items across partitions, based on their partition key values.

            The sort key of an item is also known as its *range attribute* . The term "range
            attribute" derives from the way DynamoDB stores items with the same partition key
            physically close together, in sorted order by the sort key value.

    - **Projection** *(dict) --*

      Represents attributes that are copied (projected) from the table into the global secondary
      index. These are in addition to the primary key attributes and index key attributes, which are
      automatically projected.

      - **ProjectionType** *(string) --*

        The set of attributes that are projected into the index:

        * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

        * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list
        of projected attributes is in ``NonKeyAttributes`` .

        * ``ALL`` - All of the table attributes are projected into the index.

      - **NonKeyAttributes** *(list) --*

        Represents the non-key attribute names which will be projected into the index.

        For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all of
        the local secondary indexes, must not exceed 20. If you project the same attribute into two
        different indexes, this counts as two distinct attributes when determining the total.

        - *(string) --*

    - **IndexSizeBytes** *(integer) --*

      The total size of the specified index, in bytes. DynamoDB updates this value approximately
      every six hours. Recent changes might not be reflected in this value.

    - **ItemCount** *(integer) --*

      The number of items in the specified index. DynamoDB updates this value approximately every
      six hours. Recent changes might not be reflected in this value.

    - **IndexArn** *(string) --*

      The Amazon Resource Name (ARN) that uniquely identifies the index.
    """


_ClientUpdateTableResponseTableDescriptionProvisionedThroughputTypeDef = TypedDict(
    "_ClientUpdateTableResponseTableDescriptionProvisionedThroughputTypeDef",
    {
        "LastIncreaseDateTime": datetime,
        "LastDecreaseDateTime": datetime,
        "NumberOfDecreasesToday": int,
        "ReadCapacityUnits": int,
        "WriteCapacityUnits": int,
    },
    total=False,
)


class ClientUpdateTableResponseTableDescriptionProvisionedThroughputTypeDef(
    _ClientUpdateTableResponseTableDescriptionProvisionedThroughputTypeDef
):
    """
    Type definition for `ClientUpdateTableResponseTableDescription` `ProvisionedThroughput`

    The provisioned throughput settings for the table, consisting of read and write capacity units,
    along with data about increases and decreases.

    - **LastIncreaseDateTime** *(datetime) --*

      The date and time of the last provisioned throughput increase for this table.

    - **LastDecreaseDateTime** *(datetime) --*

      The date and time of the last provisioned throughput decrease for this table.

    - **NumberOfDecreasesToday** *(integer) --*

      The number of provisioned throughput decreases for this table during this UTC calendar day.
      For current maximums on provisioned throughput decreases, see `Limits
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
      *Amazon DynamoDB Developer Guide* .

    - **ReadCapacityUnits** *(integer) --*

      The maximum number of strongly consistent reads consumed per second before DynamoDB returns a
      ``ThrottlingException`` . Eventually consistent reads require less effort than strongly
      consistent reads, so a setting of 50 ``ReadCapacityUnits`` per second provides 100 eventually
      consistent ``ReadCapacityUnits`` per second.

    - **WriteCapacityUnits** *(integer) --*

      The maximum number of writes consumed per second before DynamoDB returns a
      ``ThrottlingException`` .
    """


_ClientUpdateTableResponseTableDescriptionReplicasGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef = TypedDict(
    "_ClientUpdateTableResponseTableDescriptionReplicasGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef",
    {"ReadCapacityUnits": int},
    total=False,
)


class ClientUpdateTableResponseTableDescriptionReplicasGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef(
    _ClientUpdateTableResponseTableDescriptionReplicasGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef
):
    """
    Type definition for `ClientUpdateTableResponseTableDescriptionReplicasGlobalSecondaryIndexes`
    `ProvisionedThroughputOverride`

    If not described, uses the source table GSI's read capacity settings.

    - **ReadCapacityUnits** *(integer) --*

      Replica-specific read capacity units. If not specified, uses the source table's read capacity
      settings.
    """


_ClientUpdateTableResponseTableDescriptionReplicasGlobalSecondaryIndexesTypeDef = TypedDict(
    "_ClientUpdateTableResponseTableDescriptionReplicasGlobalSecondaryIndexesTypeDef",
    {
        "IndexName": str,
        "ProvisionedThroughputOverride": ClientUpdateTableResponseTableDescriptionReplicasGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef,
    },
    total=False,
)


class ClientUpdateTableResponseTableDescriptionReplicasGlobalSecondaryIndexesTypeDef(
    _ClientUpdateTableResponseTableDescriptionReplicasGlobalSecondaryIndexesTypeDef
):
    """
    Type definition for `ClientUpdateTableResponseTableDescriptionReplicas` `GlobalSecondaryIndexes`

    Represents the properties of a replica global secondary index.

    - **IndexName** *(string) --*

      The name of the global secondary index.

    - **ProvisionedThroughputOverride** *(dict) --*

      If not described, uses the source table GSI's read capacity settings.

      - **ReadCapacityUnits** *(integer) --*

        Replica-specific read capacity units. If not specified, uses the source table's read
        capacity settings.
    """


_ClientUpdateTableResponseTableDescriptionReplicasProvisionedThroughputOverrideTypeDef = TypedDict(
    "_ClientUpdateTableResponseTableDescriptionReplicasProvisionedThroughputOverrideTypeDef",
    {"ReadCapacityUnits": int},
    total=False,
)


class ClientUpdateTableResponseTableDescriptionReplicasProvisionedThroughputOverrideTypeDef(
    _ClientUpdateTableResponseTableDescriptionReplicasProvisionedThroughputOverrideTypeDef
):
    """
    Type definition for `ClientUpdateTableResponseTableDescriptionReplicas`
    `ProvisionedThroughputOverride`

    Replica-specific provisioned throughput. If not described, uses the source table's provisioned
    throughput settings.

    - **ReadCapacityUnits** *(integer) --*

      Replica-specific read capacity units. If not specified, uses the source table's read capacity
      settings.
    """


_ClientUpdateTableResponseTableDescriptionReplicasTypeDef = TypedDict(
    "_ClientUpdateTableResponseTableDescriptionReplicasTypeDef",
    {
        "RegionName": str,
        "ReplicaStatus": str,
        "ReplicaStatusDescription": str,
        "ReplicaStatusPercentProgress": str,
        "KMSMasterKeyId": str,
        "ProvisionedThroughputOverride": ClientUpdateTableResponseTableDescriptionReplicasProvisionedThroughputOverrideTypeDef,
        "GlobalSecondaryIndexes": List[
            ClientUpdateTableResponseTableDescriptionReplicasGlobalSecondaryIndexesTypeDef
        ],
    },
    total=False,
)


class ClientUpdateTableResponseTableDescriptionReplicasTypeDef(
    _ClientUpdateTableResponseTableDescriptionReplicasTypeDef
):
    """
    Type definition for `ClientUpdateTableResponseTableDescription` `Replicas`

    Contains the details of the replica.

    - **RegionName** *(string) --*

      The name of the Region.

    - **ReplicaStatus** *(string) --*

      The current state of the replica:

      * ``CREATING`` - The replica is being created.

      * ``UPDATING`` - The replica is being updated.

      * ``DELETING`` - The replica is being deleted.

      * ``ACTIVE`` - The replica is ready for use.

    - **ReplicaStatusDescription** *(string) --*

      Detailed information about the replica status.

    - **ReplicaStatusPercentProgress** *(string) --*

      Specifies the progress of a Create, Update, or Delete action on the replica as a percentage.

    - **KMSMasterKeyId** *(string) --*

      The AWS KMS customer master key (CMK) of the replica that will be used for AWS KMS encryption.

    - **ProvisionedThroughputOverride** *(dict) --*

      Replica-specific provisioned throughput. If not described, uses the source table's provisioned
      throughput settings.

      - **ReadCapacityUnits** *(integer) --*

        Replica-specific read capacity units. If not specified, uses the source table's read
        capacity settings.

    - **GlobalSecondaryIndexes** *(list) --*

      Replica-specific global secondary index settings.

      - *(dict) --*

        Represents the properties of a replica global secondary index.

        - **IndexName** *(string) --*

          The name of the global secondary index.

        - **ProvisionedThroughputOverride** *(dict) --*

          If not described, uses the source table GSI's read capacity settings.

          - **ReadCapacityUnits** *(integer) --*

            Replica-specific read capacity units. If not specified, uses the source table's read
            capacity settings.
    """


_ClientUpdateTableResponseTableDescriptionRestoreSummaryTypeDef = TypedDict(
    "_ClientUpdateTableResponseTableDescriptionRestoreSummaryTypeDef",
    {
        "SourceBackupArn": str,
        "SourceTableArn": str,
        "RestoreDateTime": datetime,
        "RestoreInProgress": bool,
    },
    total=False,
)


class ClientUpdateTableResponseTableDescriptionRestoreSummaryTypeDef(
    _ClientUpdateTableResponseTableDescriptionRestoreSummaryTypeDef
):
    """
    Type definition for `ClientUpdateTableResponseTableDescription` `RestoreSummary`

    Contains details for the restore.

    - **SourceBackupArn** *(string) --*

      The Amazon Resource Name (ARN) of the backup from which the table was restored.

    - **SourceTableArn** *(string) --*

      The ARN of the source table of the backup that is being restored.

    - **RestoreDateTime** *(datetime) --*

      Point in time or source backup time.

    - **RestoreInProgress** *(boolean) --*

      Indicates if a restore is in progress or not.
    """


_ClientUpdateTableResponseTableDescriptionSSEDescriptionTypeDef = TypedDict(
    "_ClientUpdateTableResponseTableDescriptionSSEDescriptionTypeDef",
    {
        "Status": str,
        "SSEType": str,
        "KMSMasterKeyArn": str,
        "InaccessibleEncryptionDateTime": datetime,
    },
    total=False,
)


class ClientUpdateTableResponseTableDescriptionSSEDescriptionTypeDef(
    _ClientUpdateTableResponseTableDescriptionSSEDescriptionTypeDef
):
    """
    Type definition for `ClientUpdateTableResponseTableDescription` `SSEDescription`

    The description of the server-side encryption status on the specified table.

    - **Status** *(string) --*

      Represents the current state of server-side encryption. The only supported values are:

      * ``ENABLED`` - Server-side encryption is enabled.

      * ``UPDATING`` - Server-side encryption is being updated.

    - **SSEType** *(string) --*

      Server-side encryption type. The only supported value is:

      * ``KMS`` - Server-side encryption that uses AWS Key Management Service. The key is stored in
      your account and is managed by AWS KMS (AWS KMS charges apply).

    - **KMSMasterKeyArn** *(string) --*

      The AWS KMS customer master key (CMK) ARN used for the AWS KMS encryption.

    - **InaccessibleEncryptionDateTime** *(datetime) --*

      Indicates the time, in UNIX epoch date format, when DynamoDB detected that the table's AWS KMS
      key was inaccessible. This attribute will automatically be cleared when DynamoDB detects that
      the table's AWS KMS key is accessible again. DynamoDB will initiate the table archival process
      when table's AWS KMS key remains inaccessible for more than seven days from this date.
    """


_ClientUpdateTableResponseTableDescriptionStreamSpecificationTypeDef = TypedDict(
    "_ClientUpdateTableResponseTableDescriptionStreamSpecificationTypeDef",
    {"StreamEnabled": bool, "StreamViewType": str},
    total=False,
)


class ClientUpdateTableResponseTableDescriptionStreamSpecificationTypeDef(
    _ClientUpdateTableResponseTableDescriptionStreamSpecificationTypeDef
):
    """
    Type definition for `ClientUpdateTableResponseTableDescription` `StreamSpecification`

    The current DynamoDB Streams configuration for the table.

    - **StreamEnabled** *(boolean) --*

      Indicates whether DynamoDB Streams is enabled (true) or disabled (false) on the table.

    - **StreamViewType** *(string) --*

      When an item in the table is modified, ``StreamViewType`` determines what information is
      written to the stream for this table. Valid values for ``StreamViewType`` are:

      * ``KEYS_ONLY`` - Only the key attributes of the modified item are written to the stream.

      * ``NEW_IMAGE`` - The entire item, as it appears after it was modified, is written to the
      stream.

      * ``OLD_IMAGE`` - The entire item, as it appeared before it was modified, is written to the
      stream.

      * ``NEW_AND_OLD_IMAGES`` - Both the new and the old item images of the item are written to the
      stream.
    """


_ClientUpdateTableResponseTableDescriptionTypeDef = TypedDict(
    "_ClientUpdateTableResponseTableDescriptionTypeDef",
    {
        "AttributeDefinitions": List[
            ClientUpdateTableResponseTableDescriptionAttributeDefinitionsTypeDef
        ],
        "TableName": str,
        "KeySchema": List[ClientUpdateTableResponseTableDescriptionKeySchemaTypeDef],
        "TableStatus": str,
        "CreationDateTime": datetime,
        "ProvisionedThroughput": ClientUpdateTableResponseTableDescriptionProvisionedThroughputTypeDef,
        "TableSizeBytes": int,
        "ItemCount": int,
        "TableArn": str,
        "TableId": str,
        "BillingModeSummary": ClientUpdateTableResponseTableDescriptionBillingModeSummaryTypeDef,
        "LocalSecondaryIndexes": List[
            ClientUpdateTableResponseTableDescriptionLocalSecondaryIndexesTypeDef
        ],
        "GlobalSecondaryIndexes": List[
            ClientUpdateTableResponseTableDescriptionGlobalSecondaryIndexesTypeDef
        ],
        "StreamSpecification": ClientUpdateTableResponseTableDescriptionStreamSpecificationTypeDef,
        "LatestStreamLabel": str,
        "LatestStreamArn": str,
        "GlobalTableVersion": str,
        "Replicas": List[ClientUpdateTableResponseTableDescriptionReplicasTypeDef],
        "RestoreSummary": ClientUpdateTableResponseTableDescriptionRestoreSummaryTypeDef,
        "SSEDescription": ClientUpdateTableResponseTableDescriptionSSEDescriptionTypeDef,
        "ArchivalSummary": ClientUpdateTableResponseTableDescriptionArchivalSummaryTypeDef,
    },
    total=False,
)


class ClientUpdateTableResponseTableDescriptionTypeDef(
    _ClientUpdateTableResponseTableDescriptionTypeDef
):
    """
    Type definition for `ClientUpdateTableResponse` `TableDescription`

    Represents the properties of the table.

    - **AttributeDefinitions** *(list) --*

      An array of ``AttributeDefinition`` objects. Each of these objects describes one attribute in
      the table and index key schema.

      Each ``AttributeDefinition`` object in this array is composed of:

      * ``AttributeName`` - The name of the attribute.

      * ``AttributeType`` - The data type for the attribute.

      - *(dict) --*

        Represents an attribute for describing the key schema for the table and indexes.

        - **AttributeName** *(string) --*

          A name for the attribute.

        - **AttributeType** *(string) --*

          The data type for the attribute, where:

          * ``S`` - the attribute is of type String

          * ``N`` - the attribute is of type Number

          * ``B`` - the attribute is of type Binary

    - **TableName** *(string) --*

      The name of the table.

    - **KeySchema** *(list) --*

      The primary key structure for the table. Each ``KeySchemaElement`` consists of:

      * ``AttributeName`` - The name of the attribute.

      * ``KeyType`` - The role of the attribute:

        * ``HASH`` - partition key

        * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.

      For more information about primary keys, see `Primary Key
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html#DataModelPrimaryKey>`__
      in the *Amazon DynamoDB Developer Guide* .

      - *(dict) --*

        Represents *a single element* of a key schema. A key schema specifies the attributes that
        make up the primary key of a table, or the key attributes of an index.

        A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
        simple primary key would be represented by one ``KeySchemaElement`` (for the partition key).
        A composite primary key would require one ``KeySchemaElement`` for the partition key, and
        another ``KeySchemaElement`` for the sort key.

        A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The
        data type must be one of String, Number, or Binary. The attribute cannot be nested within a
        List or a Map.

        - **AttributeName** *(string) --*

          The name of a key attribute.

        - **KeyType** *(string) --*

          The role that this key attribute will assume:

          * ``HASH`` - partition key

          * ``RANGE`` - sort key

          .. note::

            The partition key of an item is also known as its *hash attribute* . The term "hash
            attribute" derives from DynamoDB's usage of an internal hash function to evenly
            distribute data items across partitions, based on their partition key values.

            The sort key of an item is also known as its *range attribute* . The term "range
            attribute" derives from the way DynamoDB stores items with the same partition key
            physically close together, in sorted order by the sort key value.

    - **TableStatus** *(string) --*

      The current state of the table:

      * ``CREATING`` - The table is being created.

      * ``UPDATING`` - The table is being updated.

      * ``DELETING`` - The table is being deleted.

      * ``ACTIVE`` - The table is ready for use.

      * ``INACCESSIBLE_ENCRYPTION_CREDENTIALS`` - The AWS KMS key used to encrypt the table in
      inaccessible. Table operations may fail due to failure to use the AWS KMS key. DynamoDB will
      initiate the table archival process when a table's AWS KMS key remains inaccessible for more
      than seven days.

      * ``ARCHIVING`` - The table is being archived. Operations are not allowed until archival is
      complete.

      * ``ARCHIVED`` - The table has been archived. See the ArchivalReason for more information.

    - **CreationDateTime** *(datetime) --*

      The date and time when the table was created, in `UNIX epoch time
      <http://www.epochconverter.com/>`__ format.

    - **ProvisionedThroughput** *(dict) --*

      The provisioned throughput settings for the table, consisting of read and write capacity
      units, along with data about increases and decreases.

      - **LastIncreaseDateTime** *(datetime) --*

        The date and time of the last provisioned throughput increase for this table.

      - **LastDecreaseDateTime** *(datetime) --*

        The date and time of the last provisioned throughput decrease for this table.

      - **NumberOfDecreasesToday** *(integer) --*

        The number of provisioned throughput decreases for this table during this UTC calendar day.
        For current maximums on provisioned throughput decreases, see `Limits
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
        *Amazon DynamoDB Developer Guide* .

      - **ReadCapacityUnits** *(integer) --*

        The maximum number of strongly consistent reads consumed per second before DynamoDB returns
        a ``ThrottlingException`` . Eventually consistent reads require less effort than strongly
        consistent reads, so a setting of 50 ``ReadCapacityUnits`` per second provides 100
        eventually consistent ``ReadCapacityUnits`` per second.

      - **WriteCapacityUnits** *(integer) --*

        The maximum number of writes consumed per second before DynamoDB returns a
        ``ThrottlingException`` .

    - **TableSizeBytes** *(integer) --*

      The total size of the specified table, in bytes. DynamoDB updates this value approximately
      every six hours. Recent changes might not be reflected in this value.

    - **ItemCount** *(integer) --*

      The number of items in the specified table. DynamoDB updates this value approximately every
      six hours. Recent changes might not be reflected in this value.

    - **TableArn** *(string) --*

      The Amazon Resource Name (ARN) that uniquely identifies the table.

    - **TableId** *(string) --*

      Unique identifier for the table for which the backup was created.

    - **BillingModeSummary** *(dict) --*

      Contains the details for the read/write capacity mode.

      - **BillingMode** *(string) --*

        Controls how you are charged for read and write throughput and how you manage capacity. This
        setting can be changed later.

        * ``PROVISIONED`` - Sets the read/write capacity mode to ``PROVISIONED`` . We recommend
        using ``PROVISIONED`` for predictable workloads.

        * ``PAY_PER_REQUEST`` - Sets the read/write capacity mode to ``PAY_PER_REQUEST`` . We
        recommend using ``PAY_PER_REQUEST`` for unpredictable workloads.

      - **LastUpdateToPayPerRequestDateTime** *(datetime) --*

        Represents the time when ``PAY_PER_REQUEST`` was last set as the read/write capacity mode.

    - **LocalSecondaryIndexes** *(list) --*

      Represents one or more local secondary indexes on the table. Each index is scoped to a given
      partition key value. Tables with one or more local secondary indexes are subject to an item
      collection size limit, where the amount of data within a given item collection cannot exceed
      10 GB. Each element is composed of:

      * ``IndexName`` - The name of the local secondary index.

      * ``KeySchema`` - Specifies the complete index key schema. The attribute names in the key
      schema must be between 1 and 255 characters (inclusive). The key schema must begin with the
      same partition key as the table.

      * ``Projection`` - Specifies attributes that are copied (projected) from the table into the
      index. These are in addition to the primary key attributes and index key attributes, which are
      automatically projected. Each attribute specification is composed of:

        * ``ProjectionType`` - One of the following:

          * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

          * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list
          of projected attributes is in ``NonKeyAttributes`` .

          * ``ALL`` - All of the table attributes are projected into the index.

        * ``NonKeyAttributes`` - A list of one or more non-key attribute names that are projected
        into the secondary index. The total count of attributes provided in ``NonKeyAttributes`` ,
        summed across all of the secondary indexes, must not exceed 20. If you project the same
        attribute into two different indexes, this counts as two distinct attributes when
        determining the total.

      * ``IndexSizeBytes`` - Represents the total size of the index, in bytes. DynamoDB updates this
      value approximately every six hours. Recent changes might not be reflected in this value.

      * ``ItemCount`` - Represents the number of items in the index. DynamoDB updates this value
      approximately every six hours. Recent changes might not be reflected in this value.

      If the table is in the ``DELETING`` state, no information about indexes will be returned.

      - *(dict) --*

        Represents the properties of a local secondary index.

        - **IndexName** *(string) --*

          Represents the name of the local secondary index.

        - **KeySchema** *(list) --*

          The complete key schema for the local secondary index, consisting of one or more pairs of
          attribute names and key types:

          * ``HASH`` - partition key

          * ``RANGE`` - sort key

          .. note::

            The partition key of an item is also known as its *hash attribute* . The term "hash
            attribute" derives from DynamoDB's usage of an internal hash function to evenly
            distribute data items across partitions, based on their partition key values.

            The sort key of an item is also known as its *range attribute* . The term "range
            attribute" derives from the way DynamoDB stores items with the same partition key
            physically close together, in sorted order by the sort key value.

          - *(dict) --*

            Represents *a single element* of a key schema. A key schema specifies the attributes
            that make up the primary key of a table, or the key attributes of an index.

            A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example,
            a simple primary key would be represented by one ``KeySchemaElement`` (for the partition
            key). A composite primary key would require one ``KeySchemaElement`` for the partition
            key, and another ``KeySchemaElement`` for the sort key.

            A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute).
            The data type must be one of String, Number, or Binary. The attribute cannot be nested
            within a List or a Map.

            - **AttributeName** *(string) --*

              The name of a key attribute.

            - **KeyType** *(string) --*

              The role that this key attribute will assume:

              * ``HASH`` - partition key

              * ``RANGE`` - sort key

              .. note::

                The partition key of an item is also known as its *hash attribute* . The term "hash
                attribute" derives from DynamoDB's usage of an internal hash function to evenly
                distribute data items across partitions, based on their partition key values.

                The sort key of an item is also known as its *range attribute* . The term "range
                attribute" derives from the way DynamoDB stores items with the same partition key
                physically close together, in sorted order by the sort key value.

        - **Projection** *(dict) --*

          Represents attributes that are copied (projected) from the table into the global secondary
          index. These are in addition to the primary key attributes and index key attributes, which
          are automatically projected.

          - **ProjectionType** *(string) --*

            The set of attributes that are projected into the index:

            * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

            * ``INCLUDE`` - Only the specified table attributes are projected into the index. The
            list of projected attributes is in ``NonKeyAttributes`` .

            * ``ALL`` - All of the table attributes are projected into the index.

          - **NonKeyAttributes** *(list) --*

            Represents the non-key attribute names which will be projected into the index.

            For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all
            of the local secondary indexes, must not exceed 20. If you project the same attribute
            into two different indexes, this counts as two distinct attributes when determining the
            total.

            - *(string) --*

        - **IndexSizeBytes** *(integer) --*

          The total size of the specified index, in bytes. DynamoDB updates this value approximately
          every six hours. Recent changes might not be reflected in this value.

        - **ItemCount** *(integer) --*

          The number of items in the specified index. DynamoDB updates this value approximately
          every six hours. Recent changes might not be reflected in this value.

        - **IndexArn** *(string) --*

          The Amazon Resource Name (ARN) that uniquely identifies the index.

    - **GlobalSecondaryIndexes** *(list) --*

      The global secondary indexes, if any, on the table. Each index is scoped to a given partition
      key value. Each element is composed of:

      * ``Backfilling`` - If true, then the index is currently in the backfilling phase. Backfilling
      occurs only when a new global secondary index is added to the table. It is the process by
      which DynamoDB populates the new index with data from the table. (This attribute does not
      appear for indexes that were created during a ``CreateTable`` operation.)  You can delete an
      index that is being created during the ``Backfilling`` phase when ``IndexStatus`` is set to
      CREATING and ``Backfilling`` is true. You can't delete the index that is being created when
      ``IndexStatus`` is set to CREATING and ``Backfilling`` is false. (This attribute does not
      appear for indexes that were created during a ``CreateTable`` operation.)

      * ``IndexName`` - The name of the global secondary index.

      * ``IndexSizeBytes`` - The total size of the global secondary index, in bytes. DynamoDB
      updates this value approximately every six hours. Recent changes might not be reflected in
      this value.

      * ``IndexStatus`` - The current status of the global secondary index:

        * ``CREATING`` - The index is being created.

        * ``UPDATING`` - The index is being updated.

        * ``DELETING`` - The index is being deleted.

        * ``ACTIVE`` - The index is ready for use.

      * ``ItemCount`` - The number of items in the global secondary index. DynamoDB updates this
      value approximately every six hours. Recent changes might not be reflected in this value.

      * ``KeySchema`` - Specifies the complete index key schema. The attribute names in the key
      schema must be between 1 and 255 characters (inclusive). The key schema must begin with the
      same partition key as the table.

      * ``Projection`` - Specifies attributes that are copied (projected) from the table into the
      index. These are in addition to the primary key attributes and index key attributes, which are
      automatically projected. Each attribute specification is composed of:

        * ``ProjectionType`` - One of the following:

          * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

          * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list
          of projected attributes is in ``NonKeyAttributes`` .

          * ``ALL`` - All of the table attributes are projected into the index.

        * ``NonKeyAttributes`` - A list of one or more non-key attribute names that are projected
        into the secondary index. The total count of attributes provided in ``NonKeyAttributes`` ,
        summed across all of the secondary indexes, must not exceed 20. If you project the same
        attribute into two different indexes, this counts as two distinct attributes when
        determining the total.

      * ``ProvisionedThroughput`` - The provisioned throughput settings for the global secondary
      index, consisting of read and write capacity units, along with data about increases and
      decreases.

      If the table is in the ``DELETING`` state, no information about indexes will be returned.

      - *(dict) --*

        Represents the properties of a global secondary index.

        - **IndexName** *(string) --*

          The name of the global secondary index.

        - **KeySchema** *(list) --*

          The complete key schema for a global secondary index, which consists of one or more pairs
          of attribute names and key types:

          * ``HASH`` - partition key

          * ``RANGE`` - sort key

          .. note::

            The partition key of an item is also known as its *hash attribute* . The term "hash
            attribute" derives from DynamoDB's usage of an internal hash function to evenly
            distribute data items across partitions, based on their partition key values.

            The sort key of an item is also known as its *range attribute* . The term "range
            attribute" derives from the way DynamoDB stores items with the same partition key
            physically close together, in sorted order by the sort key value.

          - *(dict) --*

            Represents *a single element* of a key schema. A key schema specifies the attributes
            that make up the primary key of a table, or the key attributes of an index.

            A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example,
            a simple primary key would be represented by one ``KeySchemaElement`` (for the partition
            key). A composite primary key would require one ``KeySchemaElement`` for the partition
            key, and another ``KeySchemaElement`` for the sort key.

            A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute).
            The data type must be one of String, Number, or Binary. The attribute cannot be nested
            within a List or a Map.

            - **AttributeName** *(string) --*

              The name of a key attribute.

            - **KeyType** *(string) --*

              The role that this key attribute will assume:

              * ``HASH`` - partition key

              * ``RANGE`` - sort key

              .. note::

                The partition key of an item is also known as its *hash attribute* . The term "hash
                attribute" derives from DynamoDB's usage of an internal hash function to evenly
                distribute data items across partitions, based on their partition key values.

                The sort key of an item is also known as its *range attribute* . The term "range
                attribute" derives from the way DynamoDB stores items with the same partition key
                physically close together, in sorted order by the sort key value.

        - **Projection** *(dict) --*

          Represents attributes that are copied (projected) from the table into the global secondary
          index. These are in addition to the primary key attributes and index key attributes, which
          are automatically projected.

          - **ProjectionType** *(string) --*

            The set of attributes that are projected into the index:

            * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

            * ``INCLUDE`` - Only the specified table attributes are projected into the index. The
            list of projected attributes is in ``NonKeyAttributes`` .

            * ``ALL`` - All of the table attributes are projected into the index.

          - **NonKeyAttributes** *(list) --*

            Represents the non-key attribute names which will be projected into the index.

            For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all
            of the local secondary indexes, must not exceed 20. If you project the same attribute
            into two different indexes, this counts as two distinct attributes when determining the
            total.

            - *(string) --*

        - **IndexStatus** *(string) --*

          The current state of the global secondary index:

          * ``CREATING`` - The index is being created.

          * ``UPDATING`` - The index is being updated.

          * ``DELETING`` - The index is being deleted.

          * ``ACTIVE`` - The index is ready for use.

        - **Backfilling** *(boolean) --*

          Indicates whether the index is currently backfilling. *Backfilling* is the process of
          reading items from the table and determining whether they can be added to the index. (Not
          all items will qualify: For example, a partition key cannot have any duplicate values.) If
          an item can be added to the index, DynamoDB will do so. After all items have been
          processed, the backfilling operation is complete and ``Backfilling`` is false.

          You can delete an index that is being created during the ``Backfilling`` phase when
          ``IndexStatus`` is set to CREATING and ``Backfilling`` is true. You can't delete the index
          that is being created when ``IndexStatus`` is set to CREATING and ``Backfilling`` is
          false.

          .. note::

            For indexes that were created during a ``CreateTable`` operation, the ``Backfilling``
            attribute does not appear in the ``DescribeTable`` output.

        - **ProvisionedThroughput** *(dict) --*

          Represents the provisioned throughput settings for the specified global secondary index.

          For current minimum and maximum provisioned throughput values, see `Limits
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
          *Amazon DynamoDB Developer Guide* .

          - **LastIncreaseDateTime** *(datetime) --*

            The date and time of the last provisioned throughput increase for this table.

          - **LastDecreaseDateTime** *(datetime) --*

            The date and time of the last provisioned throughput decrease for this table.

          - **NumberOfDecreasesToday** *(integer) --*

            The number of provisioned throughput decreases for this table during this UTC calendar
            day. For current maximums on provisioned throughput decreases, see `Limits
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
            *Amazon DynamoDB Developer Guide* .

          - **ReadCapacityUnits** *(integer) --*

            The maximum number of strongly consistent reads consumed per second before DynamoDB
            returns a ``ThrottlingException`` . Eventually consistent reads require less effort than
            strongly consistent reads, so a setting of 50 ``ReadCapacityUnits`` per second provides
            100 eventually consistent ``ReadCapacityUnits`` per second.

          - **WriteCapacityUnits** *(integer) --*

            The maximum number of writes consumed per second before DynamoDB returns a
            ``ThrottlingException`` .

        - **IndexSizeBytes** *(integer) --*

          The total size of the specified index, in bytes. DynamoDB updates this value approximately
          every six hours. Recent changes might not be reflected in this value.

        - **ItemCount** *(integer) --*

          The number of items in the specified index. DynamoDB updates this value approximately
          every six hours. Recent changes might not be reflected in this value.

        - **IndexArn** *(string) --*

          The Amazon Resource Name (ARN) that uniquely identifies the index.

    - **StreamSpecification** *(dict) --*

      The current DynamoDB Streams configuration for the table.

      - **StreamEnabled** *(boolean) --*

        Indicates whether DynamoDB Streams is enabled (true) or disabled (false) on the table.

      - **StreamViewType** *(string) --*

        When an item in the table is modified, ``StreamViewType`` determines what information is
        written to the stream for this table. Valid values for ``StreamViewType`` are:

        * ``KEYS_ONLY`` - Only the key attributes of the modified item are written to the stream.

        * ``NEW_IMAGE`` - The entire item, as it appears after it was modified, is written to the
        stream.

        * ``OLD_IMAGE`` - The entire item, as it appeared before it was modified, is written to the
        stream.

        * ``NEW_AND_OLD_IMAGES`` - Both the new and the old item images of the item are written to
        the stream.

    - **LatestStreamLabel** *(string) --*

      A timestamp, in ISO 8601 format, for this stream.

      Note that ``LatestStreamLabel`` is not a unique identifier for the stream, because it is
      possible that a stream from another table might have the same timestamp. However, the
      combination of the following three elements is guaranteed to be unique:

      * AWS customer ID

      * Table name

      * ``StreamLabel``

    - **LatestStreamArn** *(string) --*

      The Amazon Resource Name (ARN) that uniquely identifies the latest stream for this table.

    - **GlobalTableVersion** *(string) --*

      Represents the version of `global tables
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GlobalTables.html>`__ in
      use, if the table is replicated across AWS Regions.

    - **Replicas** *(list) --*

      Represents replicas of the table.

      - *(dict) --*

        Contains the details of the replica.

        - **RegionName** *(string) --*

          The name of the Region.

        - **ReplicaStatus** *(string) --*

          The current state of the replica:

          * ``CREATING`` - The replica is being created.

          * ``UPDATING`` - The replica is being updated.

          * ``DELETING`` - The replica is being deleted.

          * ``ACTIVE`` - The replica is ready for use.

        - **ReplicaStatusDescription** *(string) --*

          Detailed information about the replica status.

        - **ReplicaStatusPercentProgress** *(string) --*

          Specifies the progress of a Create, Update, or Delete action on the replica as a
          percentage.

        - **KMSMasterKeyId** *(string) --*

          The AWS KMS customer master key (CMK) of the replica that will be used for AWS KMS
          encryption.

        - **ProvisionedThroughputOverride** *(dict) --*

          Replica-specific provisioned throughput. If not described, uses the source table's
          provisioned throughput settings.

          - **ReadCapacityUnits** *(integer) --*

            Replica-specific read capacity units. If not specified, uses the source table's read
            capacity settings.

        - **GlobalSecondaryIndexes** *(list) --*

          Replica-specific global secondary index settings.

          - *(dict) --*

            Represents the properties of a replica global secondary index.

            - **IndexName** *(string) --*

              The name of the global secondary index.

            - **ProvisionedThroughputOverride** *(dict) --*

              If not described, uses the source table GSI's read capacity settings.

              - **ReadCapacityUnits** *(integer) --*

                Replica-specific read capacity units. If not specified, uses the source table's read
                capacity settings.

    - **RestoreSummary** *(dict) --*

      Contains details for the restore.

      - **SourceBackupArn** *(string) --*

        The Amazon Resource Name (ARN) of the backup from which the table was restored.

      - **SourceTableArn** *(string) --*

        The ARN of the source table of the backup that is being restored.

      - **RestoreDateTime** *(datetime) --*

        Point in time or source backup time.

      - **RestoreInProgress** *(boolean) --*

        Indicates if a restore is in progress or not.

    - **SSEDescription** *(dict) --*

      The description of the server-side encryption status on the specified table.

      - **Status** *(string) --*

        Represents the current state of server-side encryption. The only supported values are:

        * ``ENABLED`` - Server-side encryption is enabled.

        * ``UPDATING`` - Server-side encryption is being updated.

      - **SSEType** *(string) --*

        Server-side encryption type. The only supported value is:

        * ``KMS`` - Server-side encryption that uses AWS Key Management Service. The key is stored
        in your account and is managed by AWS KMS (AWS KMS charges apply).

      - **KMSMasterKeyArn** *(string) --*

        The AWS KMS customer master key (CMK) ARN used for the AWS KMS encryption.

      - **InaccessibleEncryptionDateTime** *(datetime) --*

        Indicates the time, in UNIX epoch date format, when DynamoDB detected that the table's AWS
        KMS key was inaccessible. This attribute will automatically be cleared when DynamoDB detects
        that the table's AWS KMS key is accessible again. DynamoDB will initiate the table archival
        process when table's AWS KMS key remains inaccessible for more than seven days from this
        date.

    - **ArchivalSummary** *(dict) --*

      Contains information about the table archive.

      - **ArchivalDateTime** *(datetime) --*

        The date and time when table archival was initiated by DynamoDB, in UNIX epoch time format.

      - **ArchivalReason** *(string) --*

        The reason DynamoDB archived the table. Currently, the only possible value is:

        * ``INACCESSIBLE_ENCRYPTION_CREDENTIALS`` - The table was archived due to the table's AWS
        KMS key being inaccessible for more than seven days. An On-Demand backup was created at the
        archival time.

      - **ArchivalBackupArn** *(string) --*

        The Amazon Resource Name (ARN) of the backup the table was archived to, when applicable in
        the archival reason. If you wish to restore this backup to the same table name, you will
        need to delete the original table.
    """


_ClientUpdateTableResponseTypeDef = TypedDict(
    "_ClientUpdateTableResponseTypeDef",
    {"TableDescription": ClientUpdateTableResponseTableDescriptionTypeDef},
    total=False,
)


class ClientUpdateTableResponseTypeDef(_ClientUpdateTableResponseTypeDef):
    """
    Type definition for `ClientUpdateTable` `Response`

    Represents the output of an ``UpdateTable`` operation.

    - **TableDescription** *(dict) --*

      Represents the properties of the table.

      - **AttributeDefinitions** *(list) --*

        An array of ``AttributeDefinition`` objects. Each of these objects describes one attribute
        in the table and index key schema.

        Each ``AttributeDefinition`` object in this array is composed of:

        * ``AttributeName`` - The name of the attribute.

        * ``AttributeType`` - The data type for the attribute.

        - *(dict) --*

          Represents an attribute for describing the key schema for the table and indexes.

          - **AttributeName** *(string) --*

            A name for the attribute.

          - **AttributeType** *(string) --*

            The data type for the attribute, where:

            * ``S`` - the attribute is of type String

            * ``N`` - the attribute is of type Number

            * ``B`` - the attribute is of type Binary

      - **TableName** *(string) --*

        The name of the table.

      - **KeySchema** *(list) --*

        The primary key structure for the table. Each ``KeySchemaElement`` consists of:

        * ``AttributeName`` - The name of the attribute.

        * ``KeyType`` - The role of the attribute:

          * ``HASH`` - partition key

          * ``RANGE`` - sort key

        .. note::

          The partition key of an item is also known as its *hash attribute* . The term "hash
          attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
          data items across partitions, based on their partition key values.

          The sort key of an item is also known as its *range attribute* . The term "range
          attribute" derives from the way DynamoDB stores items with the same partition key
          physically close together, in sorted order by the sort key value.

        For more information about primary keys, see `Primary Key
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html#DataModelPrimaryKey>`__
        in the *Amazon DynamoDB Developer Guide* .

        - *(dict) --*

          Represents *a single element* of a key schema. A key schema specifies the attributes that
          make up the primary key of a table, or the key attributes of an index.

          A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
          simple primary key would be represented by one ``KeySchemaElement`` (for the partition
          key). A composite primary key would require one ``KeySchemaElement`` for the partition
          key, and another ``KeySchemaElement`` for the sort key.

          A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The
          data type must be one of String, Number, or Binary. The attribute cannot be nested within
          a List or a Map.

          - **AttributeName** *(string) --*

            The name of a key attribute.

          - **KeyType** *(string) --*

            The role that this key attribute will assume:

            * ``HASH`` - partition key

            * ``RANGE`` - sort key

            .. note::

              The partition key of an item is also known as its *hash attribute* . The term "hash
              attribute" derives from DynamoDB's usage of an internal hash function to evenly
              distribute data items across partitions, based on their partition key values.

              The sort key of an item is also known as its *range attribute* . The term "range
              attribute" derives from the way DynamoDB stores items with the same partition key
              physically close together, in sorted order by the sort key value.

      - **TableStatus** *(string) --*

        The current state of the table:

        * ``CREATING`` - The table is being created.

        * ``UPDATING`` - The table is being updated.

        * ``DELETING`` - The table is being deleted.

        * ``ACTIVE`` - The table is ready for use.

        * ``INACCESSIBLE_ENCRYPTION_CREDENTIALS`` - The AWS KMS key used to encrypt the table in
        inaccessible. Table operations may fail due to failure to use the AWS KMS key. DynamoDB will
        initiate the table archival process when a table's AWS KMS key remains inaccessible for more
        than seven days.

        * ``ARCHIVING`` - The table is being archived. Operations are not allowed until archival is
        complete.

        * ``ARCHIVED`` - The table has been archived. See the ArchivalReason for more information.

      - **CreationDateTime** *(datetime) --*

        The date and time when the table was created, in `UNIX epoch time
        <http://www.epochconverter.com/>`__ format.

      - **ProvisionedThroughput** *(dict) --*

        The provisioned throughput settings for the table, consisting of read and write capacity
        units, along with data about increases and decreases.

        - **LastIncreaseDateTime** *(datetime) --*

          The date and time of the last provisioned throughput increase for this table.

        - **LastDecreaseDateTime** *(datetime) --*

          The date and time of the last provisioned throughput decrease for this table.

        - **NumberOfDecreasesToday** *(integer) --*

          The number of provisioned throughput decreases for this table during this UTC calendar
          day. For current maximums on provisioned throughput decreases, see `Limits
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
          *Amazon DynamoDB Developer Guide* .

        - **ReadCapacityUnits** *(integer) --*

          The maximum number of strongly consistent reads consumed per second before DynamoDB
          returns a ``ThrottlingException`` . Eventually consistent reads require less effort than
          strongly consistent reads, so a setting of 50 ``ReadCapacityUnits`` per second provides
          100 eventually consistent ``ReadCapacityUnits`` per second.

        - **WriteCapacityUnits** *(integer) --*

          The maximum number of writes consumed per second before DynamoDB returns a
          ``ThrottlingException`` .

      - **TableSizeBytes** *(integer) --*

        The total size of the specified table, in bytes. DynamoDB updates this value approximately
        every six hours. Recent changes might not be reflected in this value.

      - **ItemCount** *(integer) --*

        The number of items in the specified table. DynamoDB updates this value approximately every
        six hours. Recent changes might not be reflected in this value.

      - **TableArn** *(string) --*

        The Amazon Resource Name (ARN) that uniquely identifies the table.

      - **TableId** *(string) --*

        Unique identifier for the table for which the backup was created.

      - **BillingModeSummary** *(dict) --*

        Contains the details for the read/write capacity mode.

        - **BillingMode** *(string) --*

          Controls how you are charged for read and write throughput and how you manage capacity.
          This setting can be changed later.

          * ``PROVISIONED`` - Sets the read/write capacity mode to ``PROVISIONED`` . We recommend
          using ``PROVISIONED`` for predictable workloads.

          * ``PAY_PER_REQUEST`` - Sets the read/write capacity mode to ``PAY_PER_REQUEST`` . We
          recommend using ``PAY_PER_REQUEST`` for unpredictable workloads.

        - **LastUpdateToPayPerRequestDateTime** *(datetime) --*

          Represents the time when ``PAY_PER_REQUEST`` was last set as the read/write capacity mode.

      - **LocalSecondaryIndexes** *(list) --*

        Represents one or more local secondary indexes on the table. Each index is scoped to a given
        partition key value. Tables with one or more local secondary indexes are subject to an item
        collection size limit, where the amount of data within a given item collection cannot exceed
        10 GB. Each element is composed of:

        * ``IndexName`` - The name of the local secondary index.

        * ``KeySchema`` - Specifies the complete index key schema. The attribute names in the key
        schema must be between 1 and 255 characters (inclusive). The key schema must begin with the
        same partition key as the table.

        * ``Projection`` - Specifies attributes that are copied (projected) from the table into the
        index. These are in addition to the primary key attributes and index key attributes, which
        are automatically projected. Each attribute specification is composed of:

          * ``ProjectionType`` - One of the following:

            * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

            * ``INCLUDE`` - Only the specified table attributes are projected into the index. The
            list of projected attributes is in ``NonKeyAttributes`` .

            * ``ALL`` - All of the table attributes are projected into the index.

          * ``NonKeyAttributes`` - A list of one or more non-key attribute names that are projected
          into the secondary index. The total count of attributes provided in ``NonKeyAttributes`` ,
          summed across all of the secondary indexes, must not exceed 20. If you project the same
          attribute into two different indexes, this counts as two distinct attributes when
          determining the total.

        * ``IndexSizeBytes`` - Represents the total size of the index, in bytes. DynamoDB updates
        this value approximately every six hours. Recent changes might not be reflected in this
        value.

        * ``ItemCount`` - Represents the number of items in the index. DynamoDB updates this value
        approximately every six hours. Recent changes might not be reflected in this value.

        If the table is in the ``DELETING`` state, no information about indexes will be returned.

        - *(dict) --*

          Represents the properties of a local secondary index.

          - **IndexName** *(string) --*

            Represents the name of the local secondary index.

          - **KeySchema** *(list) --*

            The complete key schema for the local secondary index, consisting of one or more pairs
            of attribute names and key types:

            * ``HASH`` - partition key

            * ``RANGE`` - sort key

            .. note::

              The partition key of an item is also known as its *hash attribute* . The term "hash
              attribute" derives from DynamoDB's usage of an internal hash function to evenly
              distribute data items across partitions, based on their partition key values.

              The sort key of an item is also known as its *range attribute* . The term "range
              attribute" derives from the way DynamoDB stores items with the same partition key
              physically close together, in sorted order by the sort key value.

            - *(dict) --*

              Represents *a single element* of a key schema. A key schema specifies the attributes
              that make up the primary key of a table, or the key attributes of an index.

              A ``KeySchemaElement`` represents exactly one attribute of the primary key. For
              example, a simple primary key would be represented by one ``KeySchemaElement`` (for
              the partition key). A composite primary key would require one ``KeySchemaElement`` for
              the partition key, and another ``KeySchemaElement`` for the sort key.

              A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute).
              The data type must be one of String, Number, or Binary. The attribute cannot be nested
              within a List or a Map.

              - **AttributeName** *(string) --*

                The name of a key attribute.

              - **KeyType** *(string) --*

                The role that this key attribute will assume:

                * ``HASH`` - partition key

                * ``RANGE`` - sort key

                .. note::

                  The partition key of an item is also known as its *hash attribute* . The term
                  "hash attribute" derives from DynamoDB's usage of an internal hash function to
                  evenly distribute data items across partitions, based on their partition key
                  values.

                  The sort key of an item is also known as its *range attribute* . The term "range
                  attribute" derives from the way DynamoDB stores items with the same partition key
                  physically close together, in sorted order by the sort key value.

          - **Projection** *(dict) --*

            Represents attributes that are copied (projected) from the table into the global
            secondary index. These are in addition to the primary key attributes and index key
            attributes, which are automatically projected.

            - **ProjectionType** *(string) --*

              The set of attributes that are projected into the index:

              * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

              * ``INCLUDE`` - Only the specified table attributes are projected into the index. The
              list of projected attributes is in ``NonKeyAttributes`` .

              * ``ALL`` - All of the table attributes are projected into the index.

            - **NonKeyAttributes** *(list) --*

              Represents the non-key attribute names which will be projected into the index.

              For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all
              of the local secondary indexes, must not exceed 20. If you project the same attribute
              into two different indexes, this counts as two distinct attributes when determining
              the total.

              - *(string) --*

          - **IndexSizeBytes** *(integer) --*

            The total size of the specified index, in bytes. DynamoDB updates this value
            approximately every six hours. Recent changes might not be reflected in this value.

          - **ItemCount** *(integer) --*

            The number of items in the specified index. DynamoDB updates this value approximately
            every six hours. Recent changes might not be reflected in this value.

          - **IndexArn** *(string) --*

            The Amazon Resource Name (ARN) that uniquely identifies the index.

      - **GlobalSecondaryIndexes** *(list) --*

        The global secondary indexes, if any, on the table. Each index is scoped to a given
        partition key value. Each element is composed of:

        * ``Backfilling`` - If true, then the index is currently in the backfilling phase.
        Backfilling occurs only when a new global secondary index is added to the table. It is the
        process by which DynamoDB populates the new index with data from the table. (This attribute
        does not appear for indexes that were created during a ``CreateTable`` operation.)  You can
        delete an index that is being created during the ``Backfilling`` phase when ``IndexStatus``
        is set to CREATING and ``Backfilling`` is true. You can't delete the index that is being
        created when ``IndexStatus`` is set to CREATING and ``Backfilling`` is false. (This
        attribute does not appear for indexes that were created during a ``CreateTable`` operation.)

        * ``IndexName`` - The name of the global secondary index.

        * ``IndexSizeBytes`` - The total size of the global secondary index, in bytes. DynamoDB
        updates this value approximately every six hours. Recent changes might not be reflected in
        this value.

        * ``IndexStatus`` - The current status of the global secondary index:

          * ``CREATING`` - The index is being created.

          * ``UPDATING`` - The index is being updated.

          * ``DELETING`` - The index is being deleted.

          * ``ACTIVE`` - The index is ready for use.

        * ``ItemCount`` - The number of items in the global secondary index. DynamoDB updates this
        value approximately every six hours. Recent changes might not be reflected in this value.

        * ``KeySchema`` - Specifies the complete index key schema. The attribute names in the key
        schema must be between 1 and 255 characters (inclusive). The key schema must begin with the
        same partition key as the table.

        * ``Projection`` - Specifies attributes that are copied (projected) from the table into the
        index. These are in addition to the primary key attributes and index key attributes, which
        are automatically projected. Each attribute specification is composed of:

          * ``ProjectionType`` - One of the following:

            * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

            * ``INCLUDE`` - Only the specified table attributes are projected into the index. The
            list of projected attributes is in ``NonKeyAttributes`` .

            * ``ALL`` - All of the table attributes are projected into the index.

          * ``NonKeyAttributes`` - A list of one or more non-key attribute names that are projected
          into the secondary index. The total count of attributes provided in ``NonKeyAttributes`` ,
          summed across all of the secondary indexes, must not exceed 20. If you project the same
          attribute into two different indexes, this counts as two distinct attributes when
          determining the total.

        * ``ProvisionedThroughput`` - The provisioned throughput settings for the global secondary
        index, consisting of read and write capacity units, along with data about increases and
        decreases.

        If the table is in the ``DELETING`` state, no information about indexes will be returned.

        - *(dict) --*

          Represents the properties of a global secondary index.

          - **IndexName** *(string) --*

            The name of the global secondary index.

          - **KeySchema** *(list) --*

            The complete key schema for a global secondary index, which consists of one or more
            pairs of attribute names and key types:

            * ``HASH`` - partition key

            * ``RANGE`` - sort key

            .. note::

              The partition key of an item is also known as its *hash attribute* . The term "hash
              attribute" derives from DynamoDB's usage of an internal hash function to evenly
              distribute data items across partitions, based on their partition key values.

              The sort key of an item is also known as its *range attribute* . The term "range
              attribute" derives from the way DynamoDB stores items with the same partition key
              physically close together, in sorted order by the sort key value.

            - *(dict) --*

              Represents *a single element* of a key schema. A key schema specifies the attributes
              that make up the primary key of a table, or the key attributes of an index.

              A ``KeySchemaElement`` represents exactly one attribute of the primary key. For
              example, a simple primary key would be represented by one ``KeySchemaElement`` (for
              the partition key). A composite primary key would require one ``KeySchemaElement`` for
              the partition key, and another ``KeySchemaElement`` for the sort key.

              A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute).
              The data type must be one of String, Number, or Binary. The attribute cannot be nested
              within a List or a Map.

              - **AttributeName** *(string) --*

                The name of a key attribute.

              - **KeyType** *(string) --*

                The role that this key attribute will assume:

                * ``HASH`` - partition key

                * ``RANGE`` - sort key

                .. note::

                  The partition key of an item is also known as its *hash attribute* . The term
                  "hash attribute" derives from DynamoDB's usage of an internal hash function to
                  evenly distribute data items across partitions, based on their partition key
                  values.

                  The sort key of an item is also known as its *range attribute* . The term "range
                  attribute" derives from the way DynamoDB stores items with the same partition key
                  physically close together, in sorted order by the sort key value.

          - **Projection** *(dict) --*

            Represents attributes that are copied (projected) from the table into the global
            secondary index. These are in addition to the primary key attributes and index key
            attributes, which are automatically projected.

            - **ProjectionType** *(string) --*

              The set of attributes that are projected into the index:

              * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

              * ``INCLUDE`` - Only the specified table attributes are projected into the index. The
              list of projected attributes is in ``NonKeyAttributes`` .

              * ``ALL`` - All of the table attributes are projected into the index.

            - **NonKeyAttributes** *(list) --*

              Represents the non-key attribute names which will be projected into the index.

              For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all
              of the local secondary indexes, must not exceed 20. If you project the same attribute
              into two different indexes, this counts as two distinct attributes when determining
              the total.

              - *(string) --*

          - **IndexStatus** *(string) --*

            The current state of the global secondary index:

            * ``CREATING`` - The index is being created.

            * ``UPDATING`` - The index is being updated.

            * ``DELETING`` - The index is being deleted.

            * ``ACTIVE`` - The index is ready for use.

          - **Backfilling** *(boolean) --*

            Indicates whether the index is currently backfilling. *Backfilling* is the process of
            reading items from the table and determining whether they can be added to the index.
            (Not all items will qualify: For example, a partition key cannot have any duplicate
            values.) If an item can be added to the index, DynamoDB will do so. After all items have
            been processed, the backfilling operation is complete and ``Backfilling`` is false.

            You can delete an index that is being created during the ``Backfilling`` phase when
            ``IndexStatus`` is set to CREATING and ``Backfilling`` is true. You can't delete the
            index that is being created when ``IndexStatus`` is set to CREATING and ``Backfilling``
            is false.

            .. note::

              For indexes that were created during a ``CreateTable`` operation, the ``Backfilling``
              attribute does not appear in the ``DescribeTable`` output.

          - **ProvisionedThroughput** *(dict) --*

            Represents the provisioned throughput settings for the specified global secondary index.

            For current minimum and maximum provisioned throughput values, see `Limits
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
            *Amazon DynamoDB Developer Guide* .

            - **LastIncreaseDateTime** *(datetime) --*

              The date and time of the last provisioned throughput increase for this table.

            - **LastDecreaseDateTime** *(datetime) --*

              The date and time of the last provisioned throughput decrease for this table.

            - **NumberOfDecreasesToday** *(integer) --*

              The number of provisioned throughput decreases for this table during this UTC calendar
              day. For current maximums on provisioned throughput decreases, see `Limits
              <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in
              the *Amazon DynamoDB Developer Guide* .

            - **ReadCapacityUnits** *(integer) --*

              The maximum number of strongly consistent reads consumed per second before DynamoDB
              returns a ``ThrottlingException`` . Eventually consistent reads require less effort
              than strongly consistent reads, so a setting of 50 ``ReadCapacityUnits`` per second
              provides 100 eventually consistent ``ReadCapacityUnits`` per second.

            - **WriteCapacityUnits** *(integer) --*

              The maximum number of writes consumed per second before DynamoDB returns a
              ``ThrottlingException`` .

          - **IndexSizeBytes** *(integer) --*

            The total size of the specified index, in bytes. DynamoDB updates this value
            approximately every six hours. Recent changes might not be reflected in this value.

          - **ItemCount** *(integer) --*

            The number of items in the specified index. DynamoDB updates this value approximately
            every six hours. Recent changes might not be reflected in this value.

          - **IndexArn** *(string) --*

            The Amazon Resource Name (ARN) that uniquely identifies the index.

      - **StreamSpecification** *(dict) --*

        The current DynamoDB Streams configuration for the table.

        - **StreamEnabled** *(boolean) --*

          Indicates whether DynamoDB Streams is enabled (true) or disabled (false) on the table.

        - **StreamViewType** *(string) --*

          When an item in the table is modified, ``StreamViewType`` determines what information is
          written to the stream for this table. Valid values for ``StreamViewType`` are:

          * ``KEYS_ONLY`` - Only the key attributes of the modified item are written to the stream.

          * ``NEW_IMAGE`` - The entire item, as it appears after it was modified, is written to the
          stream.

          * ``OLD_IMAGE`` - The entire item, as it appeared before it was modified, is written to
          the stream.

          * ``NEW_AND_OLD_IMAGES`` - Both the new and the old item images of the item are written to
          the stream.

      - **LatestStreamLabel** *(string) --*

        A timestamp, in ISO 8601 format, for this stream.

        Note that ``LatestStreamLabel`` is not a unique identifier for the stream, because it is
        possible that a stream from another table might have the same timestamp. However, the
        combination of the following three elements is guaranteed to be unique:

        * AWS customer ID

        * Table name

        * ``StreamLabel``

      - **LatestStreamArn** *(string) --*

        The Amazon Resource Name (ARN) that uniquely identifies the latest stream for this table.

      - **GlobalTableVersion** *(string) --*

        Represents the version of `global tables
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GlobalTables.html>`__ in
        use, if the table is replicated across AWS Regions.

      - **Replicas** *(list) --*

        Represents replicas of the table.

        - *(dict) --*

          Contains the details of the replica.

          - **RegionName** *(string) --*

            The name of the Region.

          - **ReplicaStatus** *(string) --*

            The current state of the replica:

            * ``CREATING`` - The replica is being created.

            * ``UPDATING`` - The replica is being updated.

            * ``DELETING`` - The replica is being deleted.

            * ``ACTIVE`` - The replica is ready for use.

          - **ReplicaStatusDescription** *(string) --*

            Detailed information about the replica status.

          - **ReplicaStatusPercentProgress** *(string) --*

            Specifies the progress of a Create, Update, or Delete action on the replica as a
            percentage.

          - **KMSMasterKeyId** *(string) --*

            The AWS KMS customer master key (CMK) of the replica that will be used for AWS KMS
            encryption.

          - **ProvisionedThroughputOverride** *(dict) --*

            Replica-specific provisioned throughput. If not described, uses the source table's
            provisioned throughput settings.

            - **ReadCapacityUnits** *(integer) --*

              Replica-specific read capacity units. If not specified, uses the source table's read
              capacity settings.

          - **GlobalSecondaryIndexes** *(list) --*

            Replica-specific global secondary index settings.

            - *(dict) --*

              Represents the properties of a replica global secondary index.

              - **IndexName** *(string) --*

                The name of the global secondary index.

              - **ProvisionedThroughputOverride** *(dict) --*

                If not described, uses the source table GSI's read capacity settings.

                - **ReadCapacityUnits** *(integer) --*

                  Replica-specific read capacity units. If not specified, uses the source table's
                  read capacity settings.

      - **RestoreSummary** *(dict) --*

        Contains details for the restore.

        - **SourceBackupArn** *(string) --*

          The Amazon Resource Name (ARN) of the backup from which the table was restored.

        - **SourceTableArn** *(string) --*

          The ARN of the source table of the backup that is being restored.

        - **RestoreDateTime** *(datetime) --*

          Point in time or source backup time.

        - **RestoreInProgress** *(boolean) --*

          Indicates if a restore is in progress or not.

      - **SSEDescription** *(dict) --*

        The description of the server-side encryption status on the specified table.

        - **Status** *(string) --*

          Represents the current state of server-side encryption. The only supported values are:

          * ``ENABLED`` - Server-side encryption is enabled.

          * ``UPDATING`` - Server-side encryption is being updated.

        - **SSEType** *(string) --*

          Server-side encryption type. The only supported value is:

          * ``KMS`` - Server-side encryption that uses AWS Key Management Service. The key is stored
          in your account and is managed by AWS KMS (AWS KMS charges apply).

        - **KMSMasterKeyArn** *(string) --*

          The AWS KMS customer master key (CMK) ARN used for the AWS KMS encryption.

        - **InaccessibleEncryptionDateTime** *(datetime) --*

          Indicates the time, in UNIX epoch date format, when DynamoDB detected that the table's AWS
          KMS key was inaccessible. This attribute will automatically be cleared when DynamoDB
          detects that the table's AWS KMS key is accessible again. DynamoDB will initiate the table
          archival process when table's AWS KMS key remains inaccessible for more than seven days
          from this date.

      - **ArchivalSummary** *(dict) --*

        Contains information about the table archive.

        - **ArchivalDateTime** *(datetime) --*

          The date and time when table archival was initiated by DynamoDB, in UNIX epoch time
          format.

        - **ArchivalReason** *(string) --*

          The reason DynamoDB archived the table. Currently, the only possible value is:

          * ``INACCESSIBLE_ENCRYPTION_CREDENTIALS`` - The table was archived due to the table's AWS
          KMS key being inaccessible for more than seven days. An On-Demand backup was created at
          the archival time.

        - **ArchivalBackupArn** *(string) --*

          The Amazon Resource Name (ARN) of the backup the table was archived to, when applicable in
          the archival reason. If you wish to restore this backup to the same table name, you will
          need to delete the original table.
    """


_ClientUpdateTableSSESpecificationTypeDef = TypedDict(
    "_ClientUpdateTableSSESpecificationTypeDef",
    {"Enabled": bool, "SSEType": str, "KMSMasterKeyId": str},
    total=False,
)


class ClientUpdateTableSSESpecificationTypeDef(_ClientUpdateTableSSESpecificationTypeDef):
    """
    Type definition for `ClientUpdateTable` `SSESpecification`

    The new server-side encryption settings for the specified table.

    - **Enabled** *(boolean) --*

      Indicates whether server-side encryption is done using an AWS managed CMK or an AWS owned CMK.
      If enabled (true), server-side encryption type is set to ``KMS`` and an AWS managed CMK is
      used (AWS KMS charges apply). If disabled (false) or not specified, server-side encryption is
      set to AWS owned CMK.

    - **SSEType** *(string) --*

      Server-side encryption type. The only supported value is:

      * ``KMS`` - Server-side encryption that uses AWS Key Management Service. The key is stored in
      your account and is managed by AWS KMS (AWS KMS charges apply).

    - **KMSMasterKeyId** *(string) --*

      The AWS KMS customer master key (CMK) that should be used for the AWS KMS encryption. To
      specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. Note that
      you should only provide this parameter if the key is different from the default DynamoDB
      customer master key alias/aws/dynamodb.
    """


_RequiredClientUpdateTableStreamSpecificationTypeDef = TypedDict(
    "_RequiredClientUpdateTableStreamSpecificationTypeDef", {"StreamEnabled": bool}
)
_OptionalClientUpdateTableStreamSpecificationTypeDef = TypedDict(
    "_OptionalClientUpdateTableStreamSpecificationTypeDef", {"StreamViewType": str}, total=False
)


class ClientUpdateTableStreamSpecificationTypeDef(
    _RequiredClientUpdateTableStreamSpecificationTypeDef,
    _OptionalClientUpdateTableStreamSpecificationTypeDef,
):
    """
    Type definition for `ClientUpdateTable` `StreamSpecification`

    Represents the DynamoDB Streams configuration for the table.

    .. note::

      You receive a ``ResourceInUseException`` if you try to enable a stream on a table that already
      has a stream, or if you try to disable a stream on a table that doesn't have a stream.

    - **StreamEnabled** *(boolean) --* **[REQUIRED]**

      Indicates whether DynamoDB Streams is enabled (true) or disabled (false) on the table.

    - **StreamViewType** *(string) --*

      When an item in the table is modified, ``StreamViewType`` determines what information is
      written to the stream for this table. Valid values for ``StreamViewType`` are:

      * ``KEYS_ONLY`` - Only the key attributes of the modified item are written to the stream.

      * ``NEW_IMAGE`` - The entire item, as it appears after it was modified, is written to the
      stream.

      * ``OLD_IMAGE`` - The entire item, as it appeared before it was modified, is written to the
      stream.

      * ``NEW_AND_OLD_IMAGES`` - Both the new and the old item images of the item are written to the
      stream.
    """


_ClientUpdateTimeToLiveResponseTimeToLiveSpecificationTypeDef = TypedDict(
    "_ClientUpdateTimeToLiveResponseTimeToLiveSpecificationTypeDef",
    {"Enabled": bool, "AttributeName": str},
    total=False,
)


class ClientUpdateTimeToLiveResponseTimeToLiveSpecificationTypeDef(
    _ClientUpdateTimeToLiveResponseTimeToLiveSpecificationTypeDef
):
    """
    Type definition for `ClientUpdateTimeToLiveResponse` `TimeToLiveSpecification`

    Represents the output of an ``UpdateTimeToLive`` operation.

    - **Enabled** *(boolean) --*

      Indicates whether TTL is to be enabled (true) or disabled (false) on the table.

    - **AttributeName** *(string) --*

      The name of the TTL attribute used to store the expiration time for items in the table.
    """


_ClientUpdateTimeToLiveResponseTypeDef = TypedDict(
    "_ClientUpdateTimeToLiveResponseTypeDef",
    {"TimeToLiveSpecification": ClientUpdateTimeToLiveResponseTimeToLiveSpecificationTypeDef},
    total=False,
)


class ClientUpdateTimeToLiveResponseTypeDef(_ClientUpdateTimeToLiveResponseTypeDef):
    """
    Type definition for `ClientUpdateTimeToLive` `Response`

    - **TimeToLiveSpecification** *(dict) --*

      Represents the output of an ``UpdateTimeToLive`` operation.

      - **Enabled** *(boolean) --*

        Indicates whether TTL is to be enabled (true) or disabled (false) on the table.

      - **AttributeName** *(string) --*

        The name of the TTL attribute used to store the expiration time for items in the table.
    """


_ClientUpdateTimeToLiveTimeToLiveSpecificationTypeDef = TypedDict(
    "_ClientUpdateTimeToLiveTimeToLiveSpecificationTypeDef", {"Enabled": bool, "AttributeName": str}
)


class ClientUpdateTimeToLiveTimeToLiveSpecificationTypeDef(
    _ClientUpdateTimeToLiveTimeToLiveSpecificationTypeDef
):
    """
    Type definition for `ClientUpdateTimeToLive` `TimeToLiveSpecification`

    Represents the settings used to enable or disable Time to Live for the specified table.

    - **Enabled** *(boolean) --* **[REQUIRED]**

      Indicates whether TTL is to be enabled (true) or disabled (false) on the table.

    - **AttributeName** *(string) --* **[REQUIRED]**

      The name of the TTL attribute used to store the expiration time for items in the table.
    """


_ListBackupsPaginatePaginationConfigTypeDef = TypedDict(
    "_ListBackupsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class ListBackupsPaginatePaginationConfigTypeDef(_ListBackupsPaginatePaginationConfigTypeDef):
    """
    Type definition for `ListBackupsPaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_ListBackupsPaginateResponseBackupSummariesTypeDef = TypedDict(
    "_ListBackupsPaginateResponseBackupSummariesTypeDef",
    {
        "TableName": str,
        "TableId": str,
        "TableArn": str,
        "BackupArn": str,
        "BackupName": str,
        "BackupCreationDateTime": datetime,
        "BackupExpiryDateTime": datetime,
        "BackupStatus": str,
        "BackupType": str,
        "BackupSizeBytes": int,
    },
    total=False,
)


class ListBackupsPaginateResponseBackupSummariesTypeDef(
    _ListBackupsPaginateResponseBackupSummariesTypeDef
):
    """
    Type definition for `ListBackupsPaginateResponse` `BackupSummaries`

    Contains details for the backup.

    - **TableName** *(string) --*

      Name of the table.

    - **TableId** *(string) --*

      Unique identifier for the table.

    - **TableArn** *(string) --*

      ARN associated with the table.

    - **BackupArn** *(string) --*

      ARN associated with the backup.

    - **BackupName** *(string) --*

      Name of the specified backup.

    - **BackupCreationDateTime** *(datetime) --*

      Time at which the backup was created.

    - **BackupExpiryDateTime** *(datetime) --*

      Time at which the automatic on-demand backup created by DynamoDB will expire. This ``SYSTEM``
      on-demand backup expires automatically 35 days after its creation.

    - **BackupStatus** *(string) --*

      Backup can be in one of the following states: CREATING, ACTIVE, DELETED.

    - **BackupType** *(string) --*

      BackupType:

      * ``USER`` - You create and manage these using the on-demand backup feature.

      * ``SYSTEM`` - If you delete a table with point-in-time recovery enabled, a ``SYSTEM`` backup
      is automatically created and is retained for 35 days (at no additional cost). System backups
      allow you to restore the deleted table to the state it was in just before the point of
      deletion.

      * ``AWS_BACKUP`` - On-demand backup created by you from AWS Backup service.

    - **BackupSizeBytes** *(integer) --*

      Size of the backup in bytes.
    """


_ListBackupsPaginateResponseTypeDef = TypedDict(
    "_ListBackupsPaginateResponseTypeDef",
    {"BackupSummaries": List[ListBackupsPaginateResponseBackupSummariesTypeDef], "NextToken": str},
    total=False,
)


class ListBackupsPaginateResponseTypeDef(_ListBackupsPaginateResponseTypeDef):
    """
    Type definition for `ListBackupsPaginate` `Response`

    - **BackupSummaries** *(list) --*

      List of ``BackupSummary`` objects.

      - *(dict) --*

        Contains details for the backup.

        - **TableName** *(string) --*

          Name of the table.

        - **TableId** *(string) --*

          Unique identifier for the table.

        - **TableArn** *(string) --*

          ARN associated with the table.

        - **BackupArn** *(string) --*

          ARN associated with the backup.

        - **BackupName** *(string) --*

          Name of the specified backup.

        - **BackupCreationDateTime** *(datetime) --*

          Time at which the backup was created.

        - **BackupExpiryDateTime** *(datetime) --*

          Time at which the automatic on-demand backup created by DynamoDB will expire. This
          ``SYSTEM`` on-demand backup expires automatically 35 days after its creation.

        - **BackupStatus** *(string) --*

          Backup can be in one of the following states: CREATING, ACTIVE, DELETED.

        - **BackupType** *(string) --*

          BackupType:

          * ``USER`` - You create and manage these using the on-demand backup feature.

          * ``SYSTEM`` - If you delete a table with point-in-time recovery enabled, a ``SYSTEM``
          backup is automatically created and is retained for 35 days (at no additional cost).
          System backups allow you to restore the deleted table to the state it was in just before
          the point of deletion.

          * ``AWS_BACKUP`` - On-demand backup created by you from AWS Backup service.

        - **BackupSizeBytes** *(integer) --*

          Size of the backup in bytes.

    - **NextToken** *(string) --*

      A token to resume pagination.
    """


_ListTablesPaginatePaginationConfigTypeDef = TypedDict(
    "_ListTablesPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class ListTablesPaginatePaginationConfigTypeDef(_ListTablesPaginatePaginationConfigTypeDef):
    """
    Type definition for `ListTablesPaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_ListTablesPaginateResponseTypeDef = TypedDict(
    "_ListTablesPaginateResponseTypeDef", {"TableNames": List[str], "NextToken": str}, total=False
)


class ListTablesPaginateResponseTypeDef(_ListTablesPaginateResponseTypeDef):
    """
    Type definition for `ListTablesPaginate` `Response`

    Represents the output of a ``ListTables`` operation.

    - **TableNames** *(list) --*

      The names of the tables associated with the current account at the current endpoint. The
      maximum size of this array is 100.

      If ``LastEvaluatedTableName`` also appears in the output, you can use this value as the
      ``ExclusiveStartTableName`` parameter in a subsequent ``ListTables`` request and obtain the
      next page of results.

      - *(string) --*

    - **NextToken** *(string) --*

      A token to resume pagination.
    """


_ListTagsOfResourcePaginatePaginationConfigTypeDef = TypedDict(
    "_ListTagsOfResourcePaginatePaginationConfigTypeDef",
    {"MaxItems": int, "StartingToken": str},
    total=False,
)


class ListTagsOfResourcePaginatePaginationConfigTypeDef(
    _ListTagsOfResourcePaginatePaginationConfigTypeDef
):
    """
    Type definition for `ListTagsOfResourcePaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_ListTagsOfResourcePaginateResponseTagsTypeDef = TypedDict(
    "_ListTagsOfResourcePaginateResponseTagsTypeDef", {"Key": str, "Value": str}, total=False
)


class ListTagsOfResourcePaginateResponseTagsTypeDef(_ListTagsOfResourcePaginateResponseTagsTypeDef):
    """
    Type definition for `ListTagsOfResourcePaginateResponse` `Tags`

    Describes a tag. A tag is a key-value pair. You can add up to 50 tags to a single DynamoDB
    table.

    AWS-assigned tag names and values are automatically assigned the ``aws:`` prefix, which the user
    cannot assign. AWS-assigned tag names do not count towards the tag limit of 50. User-assigned
    tag names have the prefix ``user:`` in the Cost Allocation Report. You cannot backdate the
    application of a tag.

    For an overview on tagging DynamoDB resources, see `Tagging for DynamoDB
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tagging.html>`__ in the
    *Amazon DynamoDB Developer Guide* .

    - **Key** *(string) --*

      The key of the tag. Tag keys are case sensitive. Each DynamoDB table can only have up to one
      tag with the same key. If you try to add an existing tag (same key), the existing tag value
      will be updated to the new value.

    - **Value** *(string) --*

      The value of the tag. Tag values are case-sensitive and can be null.
    """


_ListTagsOfResourcePaginateResponseTypeDef = TypedDict(
    "_ListTagsOfResourcePaginateResponseTypeDef",
    {"Tags": List[ListTagsOfResourcePaginateResponseTagsTypeDef]},
    total=False,
)


class ListTagsOfResourcePaginateResponseTypeDef(_ListTagsOfResourcePaginateResponseTypeDef):
    """
    Type definition for `ListTagsOfResourcePaginate` `Response`

    - **Tags** *(list) --*

      The tags currently associated with the Amazon DynamoDB resource.

      - *(dict) --*

        Describes a tag. A tag is a key-value pair. You can add up to 50 tags to a single DynamoDB
        table.

        AWS-assigned tag names and values are automatically assigned the ``aws:`` prefix, which the
        user cannot assign. AWS-assigned tag names do not count towards the tag limit of 50.
        User-assigned tag names have the prefix ``user:`` in the Cost Allocation Report. You cannot
        backdate the application of a tag.

        For an overview on tagging DynamoDB resources, see `Tagging for DynamoDB
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tagging.html>`__ in the
        *Amazon DynamoDB Developer Guide* .

        - **Key** *(string) --*

          The key of the tag. Tag keys are case sensitive. Each DynamoDB table can only have up to
          one tag with the same key. If you try to add an existing tag (same key), the existing tag
          value will be updated to the new value.

        - **Value** *(string) --*

          The value of the tag. Tag values are case-sensitive and can be null.
    """


_QueryPaginateExpressionAttributeValuesTypeDef = TypedDict(
    "_QueryPaginateExpressionAttributeValuesTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class QueryPaginateExpressionAttributeValuesTypeDef(_QueryPaginateExpressionAttributeValuesTypeDef):
    """
    Type definition for `QueryPaginate` `ExpressionAttributeValues`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_QueryPaginateKeyConditionsAttributeValueListTypeDef = TypedDict(
    "_QueryPaginateKeyConditionsAttributeValueListTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class QueryPaginateKeyConditionsAttributeValueListTypeDef(
    _QueryPaginateKeyConditionsAttributeValueListTypeDef
):
    """
    Type definition for `QueryPaginateKeyConditions` `AttributeValueList`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_RequiredQueryPaginateKeyConditionsTypeDef = TypedDict(
    "_RequiredQueryPaginateKeyConditionsTypeDef", {"ComparisonOperator": str}
)
_OptionalQueryPaginateKeyConditionsTypeDef = TypedDict(
    "_OptionalQueryPaginateKeyConditionsTypeDef",
    {"AttributeValueList": List[QueryPaginateKeyConditionsAttributeValueListTypeDef]},
    total=False,
)


class QueryPaginateKeyConditionsTypeDef(
    _RequiredQueryPaginateKeyConditionsTypeDef, _OptionalQueryPaginateKeyConditionsTypeDef
):
    """
    Type definition for `QueryPaginate` `KeyConditions`

    Represents the selection criteria for a ``Query`` or ``Scan`` operation:

    * For a ``Query`` operation, ``Condition`` is used for specifying the ``KeyConditions`` to use
    when querying a table or an index. For ``KeyConditions`` , only the following comparison
    operators are supported:  ``EQ | LE | LT | GE | GT | BEGINS_WITH | BETWEEN``    ``Condition`` is
    also used in a ``QueryFilter`` , which evaluates the query results and returns only the desired
    values.

    * For a ``Scan`` operation, ``Condition`` is used in a ``ScanFilter`` , which evaluates the scan
    results and returns only the desired values.

    - **AttributeValueList** *(list) --*

      One or more values to evaluate against the supplied attribute. The number of values in the
      list depends on the ``ComparisonOperator`` being used.

      For type Number, value comparisons are numeric.

      String value comparisons for greater than, equals, or less than are based on ASCII character
      code values. For example, ``a`` is greater than ``A`` , and ``a`` is greater than ``B`` . For
      a list of code values, see `http\\://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters
      <http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters>`__ .

      For Binary, DynamoDB treats each byte of the binary data as unsigned when it compares binary
      values.

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

        - **S** *(string) --*

          An attribute of type String. For example:

           ``"S": "Hello"``

        - **N** *(string) --*

          An attribute of type Number. For example:

           ``"N": "123.45"``

          Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
          across languages and libraries. However, DynamoDB treats them as number type attributes
          for mathematical operations.

        - **B** *(bytes) --*

          An attribute of type Binary. For example:

           ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

        - **SS** *(list) --*

          An attribute of type String Set. For example:

           ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

          - *(string) --*

        - **NS** *(list) --*

          An attribute of type Number Set. For example:

           ``"NS": ["42.2", "-19", "7.5", "3.14"]``

          Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
          across languages and libraries. However, DynamoDB treats them as number type attributes
          for mathematical operations.

          - *(string) --*

        - **BS** *(list) --*

          An attribute of type Binary Set. For example:

           ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

          - *(bytes) --*

        - **M** *(dict) --*

          An attribute of type Map. For example:

           ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

          - *(string) --*

            - *(dict) --*

              Represents the data for an attribute.

              Each attribute value is described as a name-value pair. The name is the data type, and
              the value is the data itself.

              For more information, see `Data Types
              <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
              in the *Amazon DynamoDB Developer Guide* .

        - **L** *(list) --*

          An attribute of type List. For example:

           ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

          - *(dict) --*

            Represents the data for an attribute.

            Each attribute value is described as a name-value pair. The name is the data type, and
            the value is the data itself.

            For more information, see `Data Types
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
            in the *Amazon DynamoDB Developer Guide* .

        - **NULL** *(boolean) --*

          An attribute of type Null. For example:

           ``"NULL": true``

        - **BOOL** *(boolean) --*

          An attribute of type Boolean. For example:

           ``"BOOL": true``

    - **ComparisonOperator** *(string) --* **[REQUIRED]**

      A comparator for evaluating attributes. For example, equals, greater than, less than, etc.

      The following comparison operators are available:

       ``EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH
       | IN
       | BETWEEN``

      The following are descriptions of each comparison operator.

      * ``EQ`` : Equal. ``EQ`` is supported for all data types, including lists and maps.
      ``AttributeValueList`` can contain only one ``AttributeValue`` element of type String, Number,
      Binary, String Set, Number Set, or Binary Set. If an item contains an ``AttributeValue``
      element of a different type than the one provided in the request, the value does not match.
      For example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` . Also, ``{"N":"6"}`` does not equal
      ``{"NS":["6", "2", "1"]}`` .

      * ``NE`` : Not equal. ``NE`` is supported for all data types, including lists and maps.
      ``AttributeValueList`` can contain only one ``AttributeValue`` of type String, Number, Binary,
      String Set, Number Set, or Binary Set. If an item contains an ``AttributeValue`` of a
      different type than the one provided in the request, the value does not match. For example,
      ``{"S":"6"}`` does not equal ``{"N":"6"}`` . Also, ``{"N":"6"}`` does not equal ``{"NS":["6",
      "2", "1"]}`` .

      * ``LE`` : Less than or equal.   ``AttributeValueList`` can contain only one
      ``AttributeValue`` element of type String, Number, or Binary (not a set type). If an item
      contains an ``AttributeValue`` element of a different type than the one provided in the
      request, the value does not match. For example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` .
      Also, ``{"N":"6"}`` does not compare to ``{"NS":["6", "2", "1"]}`` .

      * ``LT`` : Less than.   ``AttributeValueList`` can contain only one ``AttributeValue`` of type
      String, Number, or Binary (not a set type). If an item contains an ``AttributeValue`` element
      of a different type than the one provided in the request, the value does not match. For
      example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` . Also, ``{"N":"6"}`` does not compare to
      ``{"NS":["6", "2", "1"]}`` .

      * ``GE`` : Greater than or equal.   ``AttributeValueList`` can contain only one
      ``AttributeValue`` element of type String, Number, or Binary (not a set type). If an item
      contains an ``AttributeValue`` element of a different type than the one provided in the
      request, the value does not match. For example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` .
      Also, ``{"N":"6"}`` does not compare to ``{"NS":["6", "2", "1"]}`` .

      * ``GT`` : Greater than.   ``AttributeValueList`` can contain only one ``AttributeValue``
      element of type String, Number, or Binary (not a set type). If an item contains an
      ``AttributeValue`` element of a different type than the one provided in the request, the value
      does not match. For example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` . Also, ``{"N":"6"}``
      does not compare to ``{"NS":["6", "2", "1"]}`` .

      * ``NOT_NULL`` : The attribute exists. ``NOT_NULL`` is supported for all data types, including
      lists and maps.

      .. note::

         This operator tests for the existence of an attribute, not its data type. If the data type
         of attribute "``a`` " is null, and you evaluate it using ``NOT_NULL`` , the result is a
         Boolean ``true`` . This result is because the attribute "``a`` " exists; its data type is
         not relevant to the ``NOT_NULL`` comparison operator.

      * ``NULL`` : The attribute does not exist. ``NULL`` is supported for all data types, including
      lists and maps.

      .. note::

         This operator tests for the nonexistence of an attribute, not its data type. If the data
         type of attribute "``a`` " is null, and you evaluate it using ``NULL`` , the result is a
         Boolean ``false`` . This is because the attribute "``a`` " exists; its data type is not
         relevant to the ``NULL`` comparison operator.

      * ``CONTAINS`` : Checks for a subsequence, or value in a set.  ``AttributeValueList`` can
      contain only one ``AttributeValue`` element of type String, Number, or Binary (not a set
      type). If the target attribute of the comparison is of type String, then the operator checks
      for a substring match. If the target attribute of the comparison is of type Binary, then the
      operator looks for a subsequence of the target that matches the input. If the target attribute
      of the comparison is a set ("``SS`` ", "``NS`` ", or "``BS`` "), then the operator evaluates
      to true if it finds an exact match with any member of the set. CONTAINS is supported for
      lists: When evaluating "``a CONTAINS b`` ", "``a`` " can be a list; however, "``b`` " cannot
      be a set, a map, or a list.

      * ``NOT_CONTAINS`` : Checks for absence of a subsequence, or absence of a value in a set.
      ``AttributeValueList`` can contain only one ``AttributeValue`` element of type String, Number,
      or Binary (not a set type). If the target attribute of the comparison is a String, then the
      operator checks for the absence of a substring match. If the target attribute of the
      comparison is Binary, then the operator checks for the absence of a subsequence of the target
      that matches the input. If the target attribute of the comparison is a set ("``SS`` ", "``NS``
      ", or "``BS`` "), then the operator evaluates to true if it *does not* find an exact match
      with any member of the set. NOT_CONTAINS is supported for lists: When evaluating "``a NOT
      CONTAINS b`` ", "``a`` " can be a list; however, "``b`` " cannot be a set, a map, or a list.

      * ``BEGINS_WITH`` : Checks for a prefix.   ``AttributeValueList`` can contain only one
      ``AttributeValue`` of type String or Binary (not a Number or a set type). The target attribute
      of the comparison must be of type String or Binary (not a Number or a set type).

      * ``IN`` : Checks for matching elements in a list.  ``AttributeValueList`` can contain one or
      more ``AttributeValue`` elements of type String, Number, or Binary. These attributes are
      compared against an existing attribute of an item. If any elements of the input are equal to
      the item attribute, the expression evaluates to true.

      * ``BETWEEN`` : Greater than or equal to the first value, and less than or equal to the second
      value.   ``AttributeValueList`` must contain two ``AttributeValue`` elements of the same type,
      either String, Number, or Binary (not a set type). A target attribute matches if the target
      value is greater than, or equal to, the first element and less than, or equal to, the second
      element. If an item contains an ``AttributeValue`` element of a different type than the one
      provided in the request, the value does not match. For example, ``{"S":"6"}`` does not compare
      to ``{"N":"6"}`` . Also, ``{"N":"6"}`` does not compare to ``{"NS":["6", "2", "1"]}``

      For usage examples of ``AttributeValueList`` and ``ComparisonOperator`` , see `Legacy
      Conditional Parameters
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html>`__
      in the *Amazon DynamoDB Developer Guide* .
    """


_QueryPaginatePaginationConfigTypeDef = TypedDict(
    "_QueryPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class QueryPaginatePaginationConfigTypeDef(_QueryPaginatePaginationConfigTypeDef):
    """
    Type definition for `QueryPaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_QueryPaginateQueryFilterAttributeValueListTypeDef = TypedDict(
    "_QueryPaginateQueryFilterAttributeValueListTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class QueryPaginateQueryFilterAttributeValueListTypeDef(
    _QueryPaginateQueryFilterAttributeValueListTypeDef
):
    """
    Type definition for `QueryPaginateQueryFilter` `AttributeValueList`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_RequiredQueryPaginateQueryFilterTypeDef = TypedDict(
    "_RequiredQueryPaginateQueryFilterTypeDef", {"ComparisonOperator": str}
)
_OptionalQueryPaginateQueryFilterTypeDef = TypedDict(
    "_OptionalQueryPaginateQueryFilterTypeDef",
    {"AttributeValueList": List[QueryPaginateQueryFilterAttributeValueListTypeDef]},
    total=False,
)


class QueryPaginateQueryFilterTypeDef(
    _RequiredQueryPaginateQueryFilterTypeDef, _OptionalQueryPaginateQueryFilterTypeDef
):
    """
    Type definition for `QueryPaginate` `QueryFilter`

    Represents the selection criteria for a ``Query`` or ``Scan`` operation:

    * For a ``Query`` operation, ``Condition`` is used for specifying the ``KeyConditions`` to use
    when querying a table or an index. For ``KeyConditions`` , only the following comparison
    operators are supported:  ``EQ | LE | LT | GE | GT | BEGINS_WITH | BETWEEN``    ``Condition`` is
    also used in a ``QueryFilter`` , which evaluates the query results and returns only the desired
    values.

    * For a ``Scan`` operation, ``Condition`` is used in a ``ScanFilter`` , which evaluates the scan
    results and returns only the desired values.

    - **AttributeValueList** *(list) --*

      One or more values to evaluate against the supplied attribute. The number of values in the
      list depends on the ``ComparisonOperator`` being used.

      For type Number, value comparisons are numeric.

      String value comparisons for greater than, equals, or less than are based on ASCII character
      code values. For example, ``a`` is greater than ``A`` , and ``a`` is greater than ``B`` . For
      a list of code values, see `http\\://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters
      <http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters>`__ .

      For Binary, DynamoDB treats each byte of the binary data as unsigned when it compares binary
      values.

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

        - **S** *(string) --*

          An attribute of type String. For example:

           ``"S": "Hello"``

        - **N** *(string) --*

          An attribute of type Number. For example:

           ``"N": "123.45"``

          Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
          across languages and libraries. However, DynamoDB treats them as number type attributes
          for mathematical operations.

        - **B** *(bytes) --*

          An attribute of type Binary. For example:

           ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

        - **SS** *(list) --*

          An attribute of type String Set. For example:

           ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

          - *(string) --*

        - **NS** *(list) --*

          An attribute of type Number Set. For example:

           ``"NS": ["42.2", "-19", "7.5", "3.14"]``

          Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
          across languages and libraries. However, DynamoDB treats them as number type attributes
          for mathematical operations.

          - *(string) --*

        - **BS** *(list) --*

          An attribute of type Binary Set. For example:

           ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

          - *(bytes) --*

        - **M** *(dict) --*

          An attribute of type Map. For example:

           ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

          - *(string) --*

            - *(dict) --*

              Represents the data for an attribute.

              Each attribute value is described as a name-value pair. The name is the data type, and
              the value is the data itself.

              For more information, see `Data Types
              <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
              in the *Amazon DynamoDB Developer Guide* .

        - **L** *(list) --*

          An attribute of type List. For example:

           ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

          - *(dict) --*

            Represents the data for an attribute.

            Each attribute value is described as a name-value pair. The name is the data type, and
            the value is the data itself.

            For more information, see `Data Types
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
            in the *Amazon DynamoDB Developer Guide* .

        - **NULL** *(boolean) --*

          An attribute of type Null. For example:

           ``"NULL": true``

        - **BOOL** *(boolean) --*

          An attribute of type Boolean. For example:

           ``"BOOL": true``

    - **ComparisonOperator** *(string) --* **[REQUIRED]**

      A comparator for evaluating attributes. For example, equals, greater than, less than, etc.

      The following comparison operators are available:

       ``EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH
       | IN
       | BETWEEN``

      The following are descriptions of each comparison operator.

      * ``EQ`` : Equal. ``EQ`` is supported for all data types, including lists and maps.
      ``AttributeValueList`` can contain only one ``AttributeValue`` element of type String, Number,
      Binary, String Set, Number Set, or Binary Set. If an item contains an ``AttributeValue``
      element of a different type than the one provided in the request, the value does not match.
      For example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` . Also, ``{"N":"6"}`` does not equal
      ``{"NS":["6", "2", "1"]}`` .

      * ``NE`` : Not equal. ``NE`` is supported for all data types, including lists and maps.
      ``AttributeValueList`` can contain only one ``AttributeValue`` of type String, Number, Binary,
      String Set, Number Set, or Binary Set. If an item contains an ``AttributeValue`` of a
      different type than the one provided in the request, the value does not match. For example,
      ``{"S":"6"}`` does not equal ``{"N":"6"}`` . Also, ``{"N":"6"}`` does not equal ``{"NS":["6",
      "2", "1"]}`` .

      * ``LE`` : Less than or equal.   ``AttributeValueList`` can contain only one
      ``AttributeValue`` element of type String, Number, or Binary (not a set type). If an item
      contains an ``AttributeValue`` element of a different type than the one provided in the
      request, the value does not match. For example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` .
      Also, ``{"N":"6"}`` does not compare to ``{"NS":["6", "2", "1"]}`` .

      * ``LT`` : Less than.   ``AttributeValueList`` can contain only one ``AttributeValue`` of type
      String, Number, or Binary (not a set type). If an item contains an ``AttributeValue`` element
      of a different type than the one provided in the request, the value does not match. For
      example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` . Also, ``{"N":"6"}`` does not compare to
      ``{"NS":["6", "2", "1"]}`` .

      * ``GE`` : Greater than or equal.   ``AttributeValueList`` can contain only one
      ``AttributeValue`` element of type String, Number, or Binary (not a set type). If an item
      contains an ``AttributeValue`` element of a different type than the one provided in the
      request, the value does not match. For example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` .
      Also, ``{"N":"6"}`` does not compare to ``{"NS":["6", "2", "1"]}`` .

      * ``GT`` : Greater than.   ``AttributeValueList`` can contain only one ``AttributeValue``
      element of type String, Number, or Binary (not a set type). If an item contains an
      ``AttributeValue`` element of a different type than the one provided in the request, the value
      does not match. For example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` . Also, ``{"N":"6"}``
      does not compare to ``{"NS":["6", "2", "1"]}`` .

      * ``NOT_NULL`` : The attribute exists. ``NOT_NULL`` is supported for all data types, including
      lists and maps.

      .. note::

         This operator tests for the existence of an attribute, not its data type. If the data type
         of attribute "``a`` " is null, and you evaluate it using ``NOT_NULL`` , the result is a
         Boolean ``true`` . This result is because the attribute "``a`` " exists; its data type is
         not relevant to the ``NOT_NULL`` comparison operator.

      * ``NULL`` : The attribute does not exist. ``NULL`` is supported for all data types, including
      lists and maps.

      .. note::

         This operator tests for the nonexistence of an attribute, not its data type. If the data
         type of attribute "``a`` " is null, and you evaluate it using ``NULL`` , the result is a
         Boolean ``false`` . This is because the attribute "``a`` " exists; its data type is not
         relevant to the ``NULL`` comparison operator.

      * ``CONTAINS`` : Checks for a subsequence, or value in a set.  ``AttributeValueList`` can
      contain only one ``AttributeValue`` element of type String, Number, or Binary (not a set
      type). If the target attribute of the comparison is of type String, then the operator checks
      for a substring match. If the target attribute of the comparison is of type Binary, then the
      operator looks for a subsequence of the target that matches the input. If the target attribute
      of the comparison is a set ("``SS`` ", "``NS`` ", or "``BS`` "), then the operator evaluates
      to true if it finds an exact match with any member of the set. CONTAINS is supported for
      lists: When evaluating "``a CONTAINS b`` ", "``a`` " can be a list; however, "``b`` " cannot
      be a set, a map, or a list.

      * ``NOT_CONTAINS`` : Checks for absence of a subsequence, or absence of a value in a set.
      ``AttributeValueList`` can contain only one ``AttributeValue`` element of type String, Number,
      or Binary (not a set type). If the target attribute of the comparison is a String, then the
      operator checks for the absence of a substring match. If the target attribute of the
      comparison is Binary, then the operator checks for the absence of a subsequence of the target
      that matches the input. If the target attribute of the comparison is a set ("``SS`` ", "``NS``
      ", or "``BS`` "), then the operator evaluates to true if it *does not* find an exact match
      with any member of the set. NOT_CONTAINS is supported for lists: When evaluating "``a NOT
      CONTAINS b`` ", "``a`` " can be a list; however, "``b`` " cannot be a set, a map, or a list.

      * ``BEGINS_WITH`` : Checks for a prefix.   ``AttributeValueList`` can contain only one
      ``AttributeValue`` of type String or Binary (not a Number or a set type). The target attribute
      of the comparison must be of type String or Binary (not a Number or a set type).

      * ``IN`` : Checks for matching elements in a list.  ``AttributeValueList`` can contain one or
      more ``AttributeValue`` elements of type String, Number, or Binary. These attributes are
      compared against an existing attribute of an item. If any elements of the input are equal to
      the item attribute, the expression evaluates to true.

      * ``BETWEEN`` : Greater than or equal to the first value, and less than or equal to the second
      value.   ``AttributeValueList`` must contain two ``AttributeValue`` elements of the same type,
      either String, Number, or Binary (not a set type). A target attribute matches if the target
      value is greater than, or equal to, the first element and less than, or equal to, the second
      element. If an item contains an ``AttributeValue`` element of a different type than the one
      provided in the request, the value does not match. For example, ``{"S":"6"}`` does not compare
      to ``{"N":"6"}`` . Also, ``{"N":"6"}`` does not compare to ``{"NS":["6", "2", "1"]}``

      For usage examples of ``AttributeValueList`` and ``ComparisonOperator`` , see `Legacy
      Conditional Parameters
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html>`__
      in the *Amazon DynamoDB Developer Guide* .
    """


_QueryPaginateResponseConsumedCapacityGlobalSecondaryIndexesTypeDef = TypedDict(
    "_QueryPaginateResponseConsumedCapacityGlobalSecondaryIndexesTypeDef",
    {"ReadCapacityUnits": float, "WriteCapacityUnits": float, "CapacityUnits": float},
    total=False,
)


class QueryPaginateResponseConsumedCapacityGlobalSecondaryIndexesTypeDef(
    _QueryPaginateResponseConsumedCapacityGlobalSecondaryIndexesTypeDef
):
    """
    Type definition for `QueryPaginateResponseConsumedCapacity` `GlobalSecondaryIndexes`

    Represents the amount of provisioned throughput capacity consumed on a table or an index.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed on a table or an index.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed on a table or an index.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed on a table or an index.
    """


_QueryPaginateResponseConsumedCapacityLocalSecondaryIndexesTypeDef = TypedDict(
    "_QueryPaginateResponseConsumedCapacityLocalSecondaryIndexesTypeDef",
    {"ReadCapacityUnits": float, "WriteCapacityUnits": float, "CapacityUnits": float},
    total=False,
)


class QueryPaginateResponseConsumedCapacityLocalSecondaryIndexesTypeDef(
    _QueryPaginateResponseConsumedCapacityLocalSecondaryIndexesTypeDef
):
    """
    Type definition for `QueryPaginateResponseConsumedCapacity` `LocalSecondaryIndexes`

    Represents the amount of provisioned throughput capacity consumed on a table or an index.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed on a table or an index.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed on a table or an index.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed on a table or an index.
    """


_QueryPaginateResponseConsumedCapacityTableTypeDef = TypedDict(
    "_QueryPaginateResponseConsumedCapacityTableTypeDef",
    {"ReadCapacityUnits": float, "WriteCapacityUnits": float, "CapacityUnits": float},
    total=False,
)


class QueryPaginateResponseConsumedCapacityTableTypeDef(
    _QueryPaginateResponseConsumedCapacityTableTypeDef
):
    """
    Type definition for `QueryPaginateResponseConsumedCapacity` `Table`

    The amount of throughput consumed on the table affected by the operation.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed on a table or an index.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed on a table or an index.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed on a table or an index.
    """


_QueryPaginateResponseConsumedCapacityTypeDef = TypedDict(
    "_QueryPaginateResponseConsumedCapacityTypeDef",
    {
        "TableName": str,
        "CapacityUnits": float,
        "ReadCapacityUnits": float,
        "WriteCapacityUnits": float,
        "Table": QueryPaginateResponseConsumedCapacityTableTypeDef,
        "LocalSecondaryIndexes": Dict[
            str, QueryPaginateResponseConsumedCapacityLocalSecondaryIndexesTypeDef
        ],
        "GlobalSecondaryIndexes": Dict[
            str, QueryPaginateResponseConsumedCapacityGlobalSecondaryIndexesTypeDef
        ],
    },
    total=False,
)


class QueryPaginateResponseConsumedCapacityTypeDef(_QueryPaginateResponseConsumedCapacityTypeDef):
    """
    Type definition for `QueryPaginateResponse` `ConsumedCapacity`

    The capacity units consumed by the ``Query`` operation. The data returned includes the total
    provisioned throughput consumed, along with statistics for the table and any indexes involved in
    the operation. ``ConsumedCapacity`` is only returned if the ``ReturnConsumedCapacity`` parameter
    was specified. For more information, see `Provisioned Throughput
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **TableName** *(string) --*

      The name of the table that was affected by the operation.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed by the operation.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed by the operation.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed by the operation.

    - **Table** *(dict) --*

      The amount of throughput consumed on the table affected by the operation.

      - **ReadCapacityUnits** *(float) --*

        The total number of read capacity units consumed on a table or an index.

      - **WriteCapacityUnits** *(float) --*

        The total number of write capacity units consumed on a table or an index.

      - **CapacityUnits** *(float) --*

        The total number of capacity units consumed on a table or an index.

    - **LocalSecondaryIndexes** *(dict) --*

      The amount of throughput consumed on each local index affected by the operation.

      - *(string) --*

        - *(dict) --*

          Represents the amount of provisioned throughput capacity consumed on a table or an index.

          - **ReadCapacityUnits** *(float) --*

            The total number of read capacity units consumed on a table or an index.

          - **WriteCapacityUnits** *(float) --*

            The total number of write capacity units consumed on a table or an index.

          - **CapacityUnits** *(float) --*

            The total number of capacity units consumed on a table or an index.

    - **GlobalSecondaryIndexes** *(dict) --*

      The amount of throughput consumed on each global index affected by the operation.

      - *(string) --*

        - *(dict) --*

          Represents the amount of provisioned throughput capacity consumed on a table or an index.

          - **ReadCapacityUnits** *(float) --*

            The total number of read capacity units consumed on a table or an index.

          - **WriteCapacityUnits** *(float) --*

            The total number of write capacity units consumed on a table or an index.

          - **CapacityUnits** *(float) --*

            The total number of capacity units consumed on a table or an index.
    """


_QueryPaginateResponseItemsTypeDef = TypedDict(
    "_QueryPaginateResponseItemsTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class QueryPaginateResponseItemsTypeDef(_QueryPaginateResponseItemsTypeDef):
    """
    Type definition for `QueryPaginateResponse` `Items`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_QueryPaginateResponseTypeDef = TypedDict(
    "_QueryPaginateResponseTypeDef",
    {
        "Items": List[Dict[str, QueryPaginateResponseItemsTypeDef]],
        "Count": int,
        "ScannedCount": int,
        "ConsumedCapacity": QueryPaginateResponseConsumedCapacityTypeDef,
        "NextToken": str,
    },
    total=False,
)


class QueryPaginateResponseTypeDef(_QueryPaginateResponseTypeDef):
    """
    Type definition for `QueryPaginate` `Response`

    Represents the output of a ``Query`` operation.

    - **Items** *(list) --*

      An array of item attributes that match the query criteria. Each element in this array consists
      of an attribute name and the value for that attribute.

      - *(dict) --*

        - *(string) --*

          - *(dict) --*

            Represents the data for an attribute.

            Each attribute value is described as a name-value pair. The name is the data type, and
            the value is the data itself.

            For more information, see `Data Types
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
            in the *Amazon DynamoDB Developer Guide* .

            - **S** *(string) --*

              An attribute of type String. For example:

               ``"S": "Hello"``

            - **N** *(string) --*

              An attribute of type Number. For example:

               ``"N": "123.45"``

              Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
              across languages and libraries. However, DynamoDB treats them as number type
              attributes for mathematical operations.

            - **B** *(bytes) --*

              An attribute of type Binary. For example:

               ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

            - **SS** *(list) --*

              An attribute of type String Set. For example:

               ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

              - *(string) --*

            - **NS** *(list) --*

              An attribute of type Number Set. For example:

               ``"NS": ["42.2", "-19", "7.5", "3.14"]``

              Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
              across languages and libraries. However, DynamoDB treats them as number type
              attributes for mathematical operations.

              - *(string) --*

            - **BS** *(list) --*

              An attribute of type Binary Set. For example:

               ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

              - *(bytes) --*

            - **M** *(dict) --*

              An attribute of type Map. For example:

               ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

              - *(string) --*

                - *(dict) --*

                  Represents the data for an attribute.

                  Each attribute value is described as a name-value pair. The name is the data type,
                  and the value is the data itself.

                  For more information, see `Data Types
                  <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                  in the *Amazon DynamoDB Developer Guide* .

            - **L** *(list) --*

              An attribute of type List. For example:

               ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

            - **NULL** *(boolean) --*

              An attribute of type Null. For example:

               ``"NULL": true``

            - **BOOL** *(boolean) --*

              An attribute of type Boolean. For example:

               ``"BOOL": true``

    - **Count** *(integer) --*

      The number of items in the response.

      If you used a ``QueryFilter`` in the request, then ``Count`` is the number of items returned
      after the filter was applied, and ``ScannedCount`` is the number of matching items before the
      filter was applied.

      If you did not use a filter in the request, then ``Count`` and ``ScannedCount`` are the same.

    - **ScannedCount** *(integer) --*

      The number of items evaluated, before any ``QueryFilter`` is applied. A high ``ScannedCount``
      value with few, or no, ``Count`` results indicates an inefficient ``Query`` operation. For
      more information, see `Count and ScannedCount
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html#Count>`__
      in the *Amazon DynamoDB Developer Guide* .

      If you did not use a filter in the request, then ``ScannedCount`` is the same as ``Count`` .

    - **ConsumedCapacity** *(dict) --*

      The capacity units consumed by the ``Query`` operation. The data returned includes the total
      provisioned throughput consumed, along with statistics for the table and any indexes involved
      in the operation. ``ConsumedCapacity`` is only returned if the ``ReturnConsumedCapacity``
      parameter was specified. For more information, see `Provisioned Throughput
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html>`__
      in the *Amazon DynamoDB Developer Guide* .

      - **TableName** *(string) --*

        The name of the table that was affected by the operation.

      - **CapacityUnits** *(float) --*

        The total number of capacity units consumed by the operation.

      - **ReadCapacityUnits** *(float) --*

        The total number of read capacity units consumed by the operation.

      - **WriteCapacityUnits** *(float) --*

        The total number of write capacity units consumed by the operation.

      - **Table** *(dict) --*

        The amount of throughput consumed on the table affected by the operation.

        - **ReadCapacityUnits** *(float) --*

          The total number of read capacity units consumed on a table or an index.

        - **WriteCapacityUnits** *(float) --*

          The total number of write capacity units consumed on a table or an index.

        - **CapacityUnits** *(float) --*

          The total number of capacity units consumed on a table or an index.

      - **LocalSecondaryIndexes** *(dict) --*

        The amount of throughput consumed on each local index affected by the operation.

        - *(string) --*

          - *(dict) --*

            Represents the amount of provisioned throughput capacity consumed on a table or an
            index.

            - **ReadCapacityUnits** *(float) --*

              The total number of read capacity units consumed on a table or an index.

            - **WriteCapacityUnits** *(float) --*

              The total number of write capacity units consumed on a table or an index.

            - **CapacityUnits** *(float) --*

              The total number of capacity units consumed on a table or an index.

      - **GlobalSecondaryIndexes** *(dict) --*

        The amount of throughput consumed on each global index affected by the operation.

        - *(string) --*

          - *(dict) --*

            Represents the amount of provisioned throughput capacity consumed on a table or an
            index.

            - **ReadCapacityUnits** *(float) --*

              The total number of read capacity units consumed on a table or an index.

            - **WriteCapacityUnits** *(float) --*

              The total number of write capacity units consumed on a table or an index.

            - **CapacityUnits** *(float) --*

              The total number of capacity units consumed on a table or an index.

    - **NextToken** *(string) --*

      A token to resume pagination.
    """


_ScanPaginateExpressionAttributeValuesTypeDef = TypedDict(
    "_ScanPaginateExpressionAttributeValuesTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class ScanPaginateExpressionAttributeValuesTypeDef(_ScanPaginateExpressionAttributeValuesTypeDef):
    """
    Type definition for `ScanPaginate` `ExpressionAttributeValues`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_ScanPaginatePaginationConfigTypeDef = TypedDict(
    "_ScanPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class ScanPaginatePaginationConfigTypeDef(_ScanPaginatePaginationConfigTypeDef):
    """
    Type definition for `ScanPaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_ScanPaginateResponseConsumedCapacityGlobalSecondaryIndexesTypeDef = TypedDict(
    "_ScanPaginateResponseConsumedCapacityGlobalSecondaryIndexesTypeDef",
    {"ReadCapacityUnits": float, "WriteCapacityUnits": float, "CapacityUnits": float},
    total=False,
)


class ScanPaginateResponseConsumedCapacityGlobalSecondaryIndexesTypeDef(
    _ScanPaginateResponseConsumedCapacityGlobalSecondaryIndexesTypeDef
):
    """
    Type definition for `ScanPaginateResponseConsumedCapacity` `GlobalSecondaryIndexes`

    Represents the amount of provisioned throughput capacity consumed on a table or an index.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed on a table or an index.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed on a table or an index.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed on a table or an index.
    """


_ScanPaginateResponseConsumedCapacityLocalSecondaryIndexesTypeDef = TypedDict(
    "_ScanPaginateResponseConsumedCapacityLocalSecondaryIndexesTypeDef",
    {"ReadCapacityUnits": float, "WriteCapacityUnits": float, "CapacityUnits": float},
    total=False,
)


class ScanPaginateResponseConsumedCapacityLocalSecondaryIndexesTypeDef(
    _ScanPaginateResponseConsumedCapacityLocalSecondaryIndexesTypeDef
):
    """
    Type definition for `ScanPaginateResponseConsumedCapacity` `LocalSecondaryIndexes`

    Represents the amount of provisioned throughput capacity consumed on a table or an index.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed on a table or an index.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed on a table or an index.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed on a table or an index.
    """


_ScanPaginateResponseConsumedCapacityTableTypeDef = TypedDict(
    "_ScanPaginateResponseConsumedCapacityTableTypeDef",
    {"ReadCapacityUnits": float, "WriteCapacityUnits": float, "CapacityUnits": float},
    total=False,
)


class ScanPaginateResponseConsumedCapacityTableTypeDef(
    _ScanPaginateResponseConsumedCapacityTableTypeDef
):
    """
    Type definition for `ScanPaginateResponseConsumedCapacity` `Table`

    The amount of throughput consumed on the table affected by the operation.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed on a table or an index.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed on a table or an index.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed on a table or an index.
    """


_ScanPaginateResponseConsumedCapacityTypeDef = TypedDict(
    "_ScanPaginateResponseConsumedCapacityTypeDef",
    {
        "TableName": str,
        "CapacityUnits": float,
        "ReadCapacityUnits": float,
        "WriteCapacityUnits": float,
        "Table": ScanPaginateResponseConsumedCapacityTableTypeDef,
        "LocalSecondaryIndexes": Dict[
            str, ScanPaginateResponseConsumedCapacityLocalSecondaryIndexesTypeDef
        ],
        "GlobalSecondaryIndexes": Dict[
            str, ScanPaginateResponseConsumedCapacityGlobalSecondaryIndexesTypeDef
        ],
    },
    total=False,
)


class ScanPaginateResponseConsumedCapacityTypeDef(_ScanPaginateResponseConsumedCapacityTypeDef):
    """
    Type definition for `ScanPaginateResponse` `ConsumedCapacity`

    The capacity units consumed by the ``Scan`` operation. The data returned includes the total
    provisioned throughput consumed, along with statistics for the table and any indexes involved in
    the operation. ``ConsumedCapacity`` is only returned if the ``ReturnConsumedCapacity`` parameter
    was specified. For more information, see `Provisioned Throughput
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **TableName** *(string) --*

      The name of the table that was affected by the operation.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed by the operation.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed by the operation.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed by the operation.

    - **Table** *(dict) --*

      The amount of throughput consumed on the table affected by the operation.

      - **ReadCapacityUnits** *(float) --*

        The total number of read capacity units consumed on a table or an index.

      - **WriteCapacityUnits** *(float) --*

        The total number of write capacity units consumed on a table or an index.

      - **CapacityUnits** *(float) --*

        The total number of capacity units consumed on a table or an index.

    - **LocalSecondaryIndexes** *(dict) --*

      The amount of throughput consumed on each local index affected by the operation.

      - *(string) --*

        - *(dict) --*

          Represents the amount of provisioned throughput capacity consumed on a table or an index.

          - **ReadCapacityUnits** *(float) --*

            The total number of read capacity units consumed on a table or an index.

          - **WriteCapacityUnits** *(float) --*

            The total number of write capacity units consumed on a table or an index.

          - **CapacityUnits** *(float) --*

            The total number of capacity units consumed on a table or an index.

    - **GlobalSecondaryIndexes** *(dict) --*

      The amount of throughput consumed on each global index affected by the operation.

      - *(string) --*

        - *(dict) --*

          Represents the amount of provisioned throughput capacity consumed on a table or an index.

          - **ReadCapacityUnits** *(float) --*

            The total number of read capacity units consumed on a table or an index.

          - **WriteCapacityUnits** *(float) --*

            The total number of write capacity units consumed on a table or an index.

          - **CapacityUnits** *(float) --*

            The total number of capacity units consumed on a table or an index.
    """


_ScanPaginateResponseItemsTypeDef = TypedDict(
    "_ScanPaginateResponseItemsTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class ScanPaginateResponseItemsTypeDef(_ScanPaginateResponseItemsTypeDef):
    """
    Type definition for `ScanPaginateResponse` `Items`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_ScanPaginateResponseTypeDef = TypedDict(
    "_ScanPaginateResponseTypeDef",
    {
        "Items": List[Dict[str, ScanPaginateResponseItemsTypeDef]],
        "Count": int,
        "ScannedCount": int,
        "ConsumedCapacity": ScanPaginateResponseConsumedCapacityTypeDef,
        "NextToken": str,
    },
    total=False,
)


class ScanPaginateResponseTypeDef(_ScanPaginateResponseTypeDef):
    """
    Type definition for `ScanPaginate` `Response`

    Represents the output of a ``Scan`` operation.

    - **Items** *(list) --*

      An array of item attributes that match the scan criteria. Each element in this array consists
      of an attribute name and the value for that attribute.

      - *(dict) --*

        - *(string) --*

          - *(dict) --*

            Represents the data for an attribute.

            Each attribute value is described as a name-value pair. The name is the data type, and
            the value is the data itself.

            For more information, see `Data Types
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
            in the *Amazon DynamoDB Developer Guide* .

            - **S** *(string) --*

              An attribute of type String. For example:

               ``"S": "Hello"``

            - **N** *(string) --*

              An attribute of type Number. For example:

               ``"N": "123.45"``

              Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
              across languages and libraries. However, DynamoDB treats them as number type
              attributes for mathematical operations.

            - **B** *(bytes) --*

              An attribute of type Binary. For example:

               ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

            - **SS** *(list) --*

              An attribute of type String Set. For example:

               ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

              - *(string) --*

            - **NS** *(list) --*

              An attribute of type Number Set. For example:

               ``"NS": ["42.2", "-19", "7.5", "3.14"]``

              Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
              across languages and libraries. However, DynamoDB treats them as number type
              attributes for mathematical operations.

              - *(string) --*

            - **BS** *(list) --*

              An attribute of type Binary Set. For example:

               ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

              - *(bytes) --*

            - **M** *(dict) --*

              An attribute of type Map. For example:

               ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

              - *(string) --*

                - *(dict) --*

                  Represents the data for an attribute.

                  Each attribute value is described as a name-value pair. The name is the data type,
                  and the value is the data itself.

                  For more information, see `Data Types
                  <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                  in the *Amazon DynamoDB Developer Guide* .

            - **L** *(list) --*

              An attribute of type List. For example:

               ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

            - **NULL** *(boolean) --*

              An attribute of type Null. For example:

               ``"NULL": true``

            - **BOOL** *(boolean) --*

              An attribute of type Boolean. For example:

               ``"BOOL": true``

    - **Count** *(integer) --*

      The number of items in the response.

      If you set ``ScanFilter`` in the request, then ``Count`` is the number of items returned after
      the filter was applied, and ``ScannedCount`` is the number of matching items before the filter
      was applied.

      If you did not use a filter in the request, then ``Count`` is the same as ``ScannedCount`` .

    - **ScannedCount** *(integer) --*

      The number of items evaluated, before any ``ScanFilter`` is applied. A high ``ScannedCount``
      value with few, or no, ``Count`` results indicates an inefficient ``Scan`` operation. For more
      information, see `Count and ScannedCount
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html#Count>`__
      in the *Amazon DynamoDB Developer Guide* .

      If you did not use a filter in the request, then ``ScannedCount`` is the same as ``Count`` .

    - **ConsumedCapacity** *(dict) --*

      The capacity units consumed by the ``Scan`` operation. The data returned includes the total
      provisioned throughput consumed, along with statistics for the table and any indexes involved
      in the operation. ``ConsumedCapacity`` is only returned if the ``ReturnConsumedCapacity``
      parameter was specified. For more information, see `Provisioned Throughput
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html>`__
      in the *Amazon DynamoDB Developer Guide* .

      - **TableName** *(string) --*

        The name of the table that was affected by the operation.

      - **CapacityUnits** *(float) --*

        The total number of capacity units consumed by the operation.

      - **ReadCapacityUnits** *(float) --*

        The total number of read capacity units consumed by the operation.

      - **WriteCapacityUnits** *(float) --*

        The total number of write capacity units consumed by the operation.

      - **Table** *(dict) --*

        The amount of throughput consumed on the table affected by the operation.

        - **ReadCapacityUnits** *(float) --*

          The total number of read capacity units consumed on a table or an index.

        - **WriteCapacityUnits** *(float) --*

          The total number of write capacity units consumed on a table or an index.

        - **CapacityUnits** *(float) --*

          The total number of capacity units consumed on a table or an index.

      - **LocalSecondaryIndexes** *(dict) --*

        The amount of throughput consumed on each local index affected by the operation.

        - *(string) --*

          - *(dict) --*

            Represents the amount of provisioned throughput capacity consumed on a table or an
            index.

            - **ReadCapacityUnits** *(float) --*

              The total number of read capacity units consumed on a table or an index.

            - **WriteCapacityUnits** *(float) --*

              The total number of write capacity units consumed on a table or an index.

            - **CapacityUnits** *(float) --*

              The total number of capacity units consumed on a table or an index.

      - **GlobalSecondaryIndexes** *(dict) --*

        The amount of throughput consumed on each global index affected by the operation.

        - *(string) --*

          - *(dict) --*

            Represents the amount of provisioned throughput capacity consumed on a table or an
            index.

            - **ReadCapacityUnits** *(float) --*

              The total number of read capacity units consumed on a table or an index.

            - **WriteCapacityUnits** *(float) --*

              The total number of write capacity units consumed on a table or an index.

            - **CapacityUnits** *(float) --*

              The total number of capacity units consumed on a table or an index.

    - **NextToken** *(string) --*

      A token to resume pagination.
    """


_ScanPaginateScanFilterAttributeValueListTypeDef = TypedDict(
    "_ScanPaginateScanFilterAttributeValueListTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class ScanPaginateScanFilterAttributeValueListTypeDef(
    _ScanPaginateScanFilterAttributeValueListTypeDef
):
    """
    Type definition for `ScanPaginateScanFilter` `AttributeValueList`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_RequiredScanPaginateScanFilterTypeDef = TypedDict(
    "_RequiredScanPaginateScanFilterTypeDef", {"ComparisonOperator": str}
)
_OptionalScanPaginateScanFilterTypeDef = TypedDict(
    "_OptionalScanPaginateScanFilterTypeDef",
    {"AttributeValueList": List[ScanPaginateScanFilterAttributeValueListTypeDef]},
    total=False,
)


class ScanPaginateScanFilterTypeDef(
    _RequiredScanPaginateScanFilterTypeDef, _OptionalScanPaginateScanFilterTypeDef
):
    """
    Type definition for `ScanPaginate` `ScanFilter`

    Represents the selection criteria for a ``Query`` or ``Scan`` operation:

    * For a ``Query`` operation, ``Condition`` is used for specifying the ``KeyConditions`` to use
    when querying a table or an index. For ``KeyConditions`` , only the following comparison
    operators are supported:  ``EQ | LE | LT | GE | GT | BEGINS_WITH | BETWEEN``    ``Condition`` is
    also used in a ``QueryFilter`` , which evaluates the query results and returns only the desired
    values.

    * For a ``Scan`` operation, ``Condition`` is used in a ``ScanFilter`` , which evaluates the scan
    results and returns only the desired values.

    - **AttributeValueList** *(list) --*

      One or more values to evaluate against the supplied attribute. The number of values in the
      list depends on the ``ComparisonOperator`` being used.

      For type Number, value comparisons are numeric.

      String value comparisons for greater than, equals, or less than are based on ASCII character
      code values. For example, ``a`` is greater than ``A`` , and ``a`` is greater than ``B`` . For
      a list of code values, see `http\\://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters
      <http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters>`__ .

      For Binary, DynamoDB treats each byte of the binary data as unsigned when it compares binary
      values.

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

        - **S** *(string) --*

          An attribute of type String. For example:

           ``"S": "Hello"``

        - **N** *(string) --*

          An attribute of type Number. For example:

           ``"N": "123.45"``

          Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
          across languages and libraries. However, DynamoDB treats them as number type attributes
          for mathematical operations.

        - **B** *(bytes) --*

          An attribute of type Binary. For example:

           ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

        - **SS** *(list) --*

          An attribute of type String Set. For example:

           ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

          - *(string) --*

        - **NS** *(list) --*

          An attribute of type Number Set. For example:

           ``"NS": ["42.2", "-19", "7.5", "3.14"]``

          Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
          across languages and libraries. However, DynamoDB treats them as number type attributes
          for mathematical operations.

          - *(string) --*

        - **BS** *(list) --*

          An attribute of type Binary Set. For example:

           ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

          - *(bytes) --*

        - **M** *(dict) --*

          An attribute of type Map. For example:

           ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

          - *(string) --*

            - *(dict) --*

              Represents the data for an attribute.

              Each attribute value is described as a name-value pair. The name is the data type, and
              the value is the data itself.

              For more information, see `Data Types
              <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
              in the *Amazon DynamoDB Developer Guide* .

        - **L** *(list) --*

          An attribute of type List. For example:

           ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

          - *(dict) --*

            Represents the data for an attribute.

            Each attribute value is described as a name-value pair. The name is the data type, and
            the value is the data itself.

            For more information, see `Data Types
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
            in the *Amazon DynamoDB Developer Guide* .

        - **NULL** *(boolean) --*

          An attribute of type Null. For example:

           ``"NULL": true``

        - **BOOL** *(boolean) --*

          An attribute of type Boolean. For example:

           ``"BOOL": true``

    - **ComparisonOperator** *(string) --* **[REQUIRED]**

      A comparator for evaluating attributes. For example, equals, greater than, less than, etc.

      The following comparison operators are available:

       ``EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH
       | IN
       | BETWEEN``

      The following are descriptions of each comparison operator.

      * ``EQ`` : Equal. ``EQ`` is supported for all data types, including lists and maps.
      ``AttributeValueList`` can contain only one ``AttributeValue`` element of type String, Number,
      Binary, String Set, Number Set, or Binary Set. If an item contains an ``AttributeValue``
      element of a different type than the one provided in the request, the value does not match.
      For example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` . Also, ``{"N":"6"}`` does not equal
      ``{"NS":["6", "2", "1"]}`` .

      * ``NE`` : Not equal. ``NE`` is supported for all data types, including lists and maps.
      ``AttributeValueList`` can contain only one ``AttributeValue`` of type String, Number, Binary,
      String Set, Number Set, or Binary Set. If an item contains an ``AttributeValue`` of a
      different type than the one provided in the request, the value does not match. For example,
      ``{"S":"6"}`` does not equal ``{"N":"6"}`` . Also, ``{"N":"6"}`` does not equal ``{"NS":["6",
      "2", "1"]}`` .

      * ``LE`` : Less than or equal.   ``AttributeValueList`` can contain only one
      ``AttributeValue`` element of type String, Number, or Binary (not a set type). If an item
      contains an ``AttributeValue`` element of a different type than the one provided in the
      request, the value does not match. For example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` .
      Also, ``{"N":"6"}`` does not compare to ``{"NS":["6", "2", "1"]}`` .

      * ``LT`` : Less than.   ``AttributeValueList`` can contain only one ``AttributeValue`` of type
      String, Number, or Binary (not a set type). If an item contains an ``AttributeValue`` element
      of a different type than the one provided in the request, the value does not match. For
      example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` . Also, ``{"N":"6"}`` does not compare to
      ``{"NS":["6", "2", "1"]}`` .

      * ``GE`` : Greater than or equal.   ``AttributeValueList`` can contain only one
      ``AttributeValue`` element of type String, Number, or Binary (not a set type). If an item
      contains an ``AttributeValue`` element of a different type than the one provided in the
      request, the value does not match. For example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` .
      Also, ``{"N":"6"}`` does not compare to ``{"NS":["6", "2", "1"]}`` .

      * ``GT`` : Greater than.   ``AttributeValueList`` can contain only one ``AttributeValue``
      element of type String, Number, or Binary (not a set type). If an item contains an
      ``AttributeValue`` element of a different type than the one provided in the request, the value
      does not match. For example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` . Also, ``{"N":"6"}``
      does not compare to ``{"NS":["6", "2", "1"]}`` .

      * ``NOT_NULL`` : The attribute exists. ``NOT_NULL`` is supported for all data types, including
      lists and maps.

      .. note::

         This operator tests for the existence of an attribute, not its data type. If the data type
         of attribute "``a`` " is null, and you evaluate it using ``NOT_NULL`` , the result is a
         Boolean ``true`` . This result is because the attribute "``a`` " exists; its data type is
         not relevant to the ``NOT_NULL`` comparison operator.

      * ``NULL`` : The attribute does not exist. ``NULL`` is supported for all data types, including
      lists and maps.

      .. note::

         This operator tests for the nonexistence of an attribute, not its data type. If the data
         type of attribute "``a`` " is null, and you evaluate it using ``NULL`` , the result is a
         Boolean ``false`` . This is because the attribute "``a`` " exists; its data type is not
         relevant to the ``NULL`` comparison operator.

      * ``CONTAINS`` : Checks for a subsequence, or value in a set.  ``AttributeValueList`` can
      contain only one ``AttributeValue`` element of type String, Number, or Binary (not a set
      type). If the target attribute of the comparison is of type String, then the operator checks
      for a substring match. If the target attribute of the comparison is of type Binary, then the
      operator looks for a subsequence of the target that matches the input. If the target attribute
      of the comparison is a set ("``SS`` ", "``NS`` ", or "``BS`` "), then the operator evaluates
      to true if it finds an exact match with any member of the set. CONTAINS is supported for
      lists: When evaluating "``a CONTAINS b`` ", "``a`` " can be a list; however, "``b`` " cannot
      be a set, a map, or a list.

      * ``NOT_CONTAINS`` : Checks for absence of a subsequence, or absence of a value in a set.
      ``AttributeValueList`` can contain only one ``AttributeValue`` element of type String, Number,
      or Binary (not a set type). If the target attribute of the comparison is a String, then the
      operator checks for the absence of a substring match. If the target attribute of the
      comparison is Binary, then the operator checks for the absence of a subsequence of the target
      that matches the input. If the target attribute of the comparison is a set ("``SS`` ", "``NS``
      ", or "``BS`` "), then the operator evaluates to true if it *does not* find an exact match
      with any member of the set. NOT_CONTAINS is supported for lists: When evaluating "``a NOT
      CONTAINS b`` ", "``a`` " can be a list; however, "``b`` " cannot be a set, a map, or a list.

      * ``BEGINS_WITH`` : Checks for a prefix.   ``AttributeValueList`` can contain only one
      ``AttributeValue`` of type String or Binary (not a Number or a set type). The target attribute
      of the comparison must be of type String or Binary (not a Number or a set type).

      * ``IN`` : Checks for matching elements in a list.  ``AttributeValueList`` can contain one or
      more ``AttributeValue`` elements of type String, Number, or Binary. These attributes are
      compared against an existing attribute of an item. If any elements of the input are equal to
      the item attribute, the expression evaluates to true.

      * ``BETWEEN`` : Greater than or equal to the first value, and less than or equal to the second
      value.   ``AttributeValueList`` must contain two ``AttributeValue`` elements of the same type,
      either String, Number, or Binary (not a set type). A target attribute matches if the target
      value is greater than, or equal to, the first element and less than, or equal to, the second
      element. If an item contains an ``AttributeValue`` element of a different type than the one
      provided in the request, the value does not match. For example, ``{"S":"6"}`` does not compare
      to ``{"N":"6"}`` . Also, ``{"N":"6"}`` does not compare to ``{"NS":["6", "2", "1"]}``

      For usage examples of ``AttributeValueList`` and ``ComparisonOperator`` , see `Legacy
      Conditional Parameters
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html>`__
      in the *Amazon DynamoDB Developer Guide* .
    """


_ServiceResourceBatchGetItemRequestItemsKeysTypeDef = TypedDict(
    "_ServiceResourceBatchGetItemRequestItemsKeysTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class ServiceResourceBatchGetItemRequestItemsKeysTypeDef(
    _ServiceResourceBatchGetItemRequestItemsKeysTypeDef
):
    """
    Type definition for `ServiceResourceBatchGetItemRequestItems` `Keys`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_RequiredServiceResourceBatchGetItemRequestItemsTypeDef = TypedDict(
    "_RequiredServiceResourceBatchGetItemRequestItemsTypeDef",
    {"Keys": List[Dict[str, ServiceResourceBatchGetItemRequestItemsKeysTypeDef]]},
)
_OptionalServiceResourceBatchGetItemRequestItemsTypeDef = TypedDict(
    "_OptionalServiceResourceBatchGetItemRequestItemsTypeDef",
    {
        "AttributesToGet": List[str],
        "ConsistentRead": bool,
        "ProjectionExpression": str,
        "ExpressionAttributeNames": Dict[str, str],
    },
    total=False,
)


class ServiceResourceBatchGetItemRequestItemsTypeDef(
    _RequiredServiceResourceBatchGetItemRequestItemsTypeDef,
    _OptionalServiceResourceBatchGetItemRequestItemsTypeDef,
):
    """
    Type definition for `ServiceResourceBatchGetItem` `RequestItems`

    Represents a set of primary keys and, for each key, the attributes to retrieve from the table.

    For each primary key, you must provide *all* of the key attributes. For example, with a simple
    primary key, you only need to provide the partition key. For a composite primary key, you must
    provide *both* the partition key and the sort key.

    - **Keys** *(list) --* **[REQUIRED]**

      The primary key attribute values that define the items and the attributes associated with the
      items.

      - *(dict) --*

        - *(string) --*

          - *(dict) --*

            Represents the data for an attribute.

            Each attribute value is described as a name-value pair. The name is the data type, and
            the value is the data itself.

            For more information, see `Data Types
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
            in the *Amazon DynamoDB Developer Guide* .

            - **S** *(string) --*

              An attribute of type String. For example:

               ``"S": "Hello"``

            - **N** *(string) --*

              An attribute of type Number. For example:

               ``"N": "123.45"``

              Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
              across languages and libraries. However, DynamoDB treats them as number type
              attributes for mathematical operations.

            - **B** *(bytes) --*

              An attribute of type Binary. For example:

               ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

            - **SS** *(list) --*

              An attribute of type String Set. For example:

               ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

              - *(string) --*

            - **NS** *(list) --*

              An attribute of type Number Set. For example:

               ``"NS": ["42.2", "-19", "7.5", "3.14"]``

              Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
              across languages and libraries. However, DynamoDB treats them as number type
              attributes for mathematical operations.

              - *(string) --*

            - **BS** *(list) --*

              An attribute of type Binary Set. For example:

               ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

              - *(bytes) --*

            - **M** *(dict) --*

              An attribute of type Map. For example:

               ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

              - *(string) --*

                - *(dict) --*

                  Represents the data for an attribute.

                  Each attribute value is described as a name-value pair. The name is the data type,
                  and the value is the data itself.

                  For more information, see `Data Types
                  <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                  in the *Amazon DynamoDB Developer Guide* .

            - **L** *(list) --*

              An attribute of type List. For example:

               ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

            - **NULL** *(boolean) --*

              An attribute of type Null. For example:

               ``"NULL": true``

            - **BOOL** *(boolean) --*

              An attribute of type Boolean. For example:

               ``"BOOL": true``

    - **AttributesToGet** *(list) --*

      This is a legacy parameter. Use ``ProjectionExpression`` instead. For more information, see
      `Legacy Conditional Parameters
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html>`__
      in the *Amazon DynamoDB Developer Guide* .

      - *(string) --*

    - **ConsistentRead** *(boolean) --*

      The consistency of a read operation. If set to ``true`` , then a strongly consistent read is
      used; otherwise, an eventually consistent read is used.

    - **ProjectionExpression** *(string) --*

      A string that identifies one or more attributes to retrieve from the table. These attributes
      can include scalars, sets, or elements of a JSON document. The attributes in the
      ``ProjectionExpression`` must be separated by commas.

      If no attribute names are specified, then all attributes will be returned. If any of the
      requested attributes are not found, they will not appear in the result.

      For more information, see `Accessing Item Attributes
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html>`__
      in the *Amazon DynamoDB Developer Guide* .

    - **ExpressionAttributeNames** *(dict) --*

      One or more substitution tokens for attribute names in an expression. The following are some
      use cases for using ``ExpressionAttributeNames`` :

      * To access an attribute whose name conflicts with a DynamoDB reserved word.

      * To create a placeholder for repeating occurrences of an attribute name in an expression.

      * To prevent special characters in an attribute name from being misinterpreted in an
      expression.

      Use the **#** character in an expression to dereference an attribute name. For example,
      consider the following attribute name:

      * ``Percentile``

      The name of this attribute conflicts with a reserved word, so it cannot be used directly in an
      expression. (For the complete list of reserved words, see `Reserved Words
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html>`__ in
      the *Amazon DynamoDB Developer Guide* ). To work around this, you could specify the following
      for ``ExpressionAttributeNames`` :

      * ``{"#P":"Percentile"}``

      You could then use this substitution in an expression, as in this example:

      * ``#P = :val``

      .. note::

        Tokens that begin with the **:** character are *expression attribute values* , which are
        placeholders for the actual value at runtime.

      For more information on expression attribute names, see `Accessing Item Attributes
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html>`__
      in the *Amazon DynamoDB Developer Guide* .

      - *(string) --*

        - *(string) --*
    """


_ServiceResourceBatchGetItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef = TypedDict(
    "_ServiceResourceBatchGetItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef",
    {"ReadCapacityUnits": float, "WriteCapacityUnits": float, "CapacityUnits": float},
    total=False,
)


class ServiceResourceBatchGetItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef(
    _ServiceResourceBatchGetItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef
):
    """
    Type definition for `ServiceResourceBatchGetItemResponseConsumedCapacity`
    `GlobalSecondaryIndexes`

    Represents the amount of provisioned throughput capacity consumed on a table or an index.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed on a table or an index.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed on a table or an index.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed on a table or an index.
    """


_ServiceResourceBatchGetItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef = TypedDict(
    "_ServiceResourceBatchGetItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef",
    {"ReadCapacityUnits": float, "WriteCapacityUnits": float, "CapacityUnits": float},
    total=False,
)


class ServiceResourceBatchGetItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef(
    _ServiceResourceBatchGetItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef
):
    """
    Type definition for `ServiceResourceBatchGetItemResponseConsumedCapacity`
    `LocalSecondaryIndexes`

    Represents the amount of provisioned throughput capacity consumed on a table or an index.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed on a table or an index.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed on a table or an index.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed on a table or an index.
    """


_ServiceResourceBatchGetItemResponseConsumedCapacityTableTypeDef = TypedDict(
    "_ServiceResourceBatchGetItemResponseConsumedCapacityTableTypeDef",
    {"ReadCapacityUnits": float, "WriteCapacityUnits": float, "CapacityUnits": float},
    total=False,
)


class ServiceResourceBatchGetItemResponseConsumedCapacityTableTypeDef(
    _ServiceResourceBatchGetItemResponseConsumedCapacityTableTypeDef
):
    """
    Type definition for `ServiceResourceBatchGetItemResponseConsumedCapacity` `Table`

    The amount of throughput consumed on the table affected by the operation.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed on a table or an index.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed on a table or an index.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed on a table or an index.
    """


_ServiceResourceBatchGetItemResponseConsumedCapacityTypeDef = TypedDict(
    "_ServiceResourceBatchGetItemResponseConsumedCapacityTypeDef",
    {
        "TableName": str,
        "CapacityUnits": float,
        "ReadCapacityUnits": float,
        "WriteCapacityUnits": float,
        "Table": ServiceResourceBatchGetItemResponseConsumedCapacityTableTypeDef,
        "LocalSecondaryIndexes": Dict[
            str, ServiceResourceBatchGetItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef
        ],
        "GlobalSecondaryIndexes": Dict[
            str, ServiceResourceBatchGetItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef
        ],
    },
    total=False,
)


class ServiceResourceBatchGetItemResponseConsumedCapacityTypeDef(
    _ServiceResourceBatchGetItemResponseConsumedCapacityTypeDef
):
    """
    Type definition for `ServiceResourceBatchGetItemResponse` `ConsumedCapacity`

    The capacity units consumed by an operation. The data returned includes the total provisioned
    throughput consumed, along with statistics for the table and any indexes involved in the
    operation. ``ConsumedCapacity`` is only returned if the request asked for it. For more
    information, see `Provisioned Throughput
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **TableName** *(string) --*

      The name of the table that was affected by the operation.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed by the operation.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed by the operation.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed by the operation.

    - **Table** *(dict) --*

      The amount of throughput consumed on the table affected by the operation.

      - **ReadCapacityUnits** *(float) --*

        The total number of read capacity units consumed on a table or an index.

      - **WriteCapacityUnits** *(float) --*

        The total number of write capacity units consumed on a table or an index.

      - **CapacityUnits** *(float) --*

        The total number of capacity units consumed on a table or an index.

    - **LocalSecondaryIndexes** *(dict) --*

      The amount of throughput consumed on each local index affected by the operation.

      - *(string) --*

        - *(dict) --*

          Represents the amount of provisioned throughput capacity consumed on a table or an index.

          - **ReadCapacityUnits** *(float) --*

            The total number of read capacity units consumed on a table or an index.

          - **WriteCapacityUnits** *(float) --*

            The total number of write capacity units consumed on a table or an index.

          - **CapacityUnits** *(float) --*

            The total number of capacity units consumed on a table or an index.

    - **GlobalSecondaryIndexes** *(dict) --*

      The amount of throughput consumed on each global index affected by the operation.

      - *(string) --*

        - *(dict) --*

          Represents the amount of provisioned throughput capacity consumed on a table or an index.

          - **ReadCapacityUnits** *(float) --*

            The total number of read capacity units consumed on a table or an index.

          - **WriteCapacityUnits** *(float) --*

            The total number of write capacity units consumed on a table or an index.

          - **CapacityUnits** *(float) --*

            The total number of capacity units consumed on a table or an index.
    """


_ServiceResourceBatchGetItemResponseResponsesTypeDef = TypedDict(
    "_ServiceResourceBatchGetItemResponseResponsesTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class ServiceResourceBatchGetItemResponseResponsesTypeDef(
    _ServiceResourceBatchGetItemResponseResponsesTypeDef
):
    """
    Type definition for `ServiceResourceBatchGetItemResponse` `Responses`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_ServiceResourceBatchGetItemResponseUnprocessedKeysKeysTypeDef = TypedDict(
    "_ServiceResourceBatchGetItemResponseUnprocessedKeysKeysTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class ServiceResourceBatchGetItemResponseUnprocessedKeysKeysTypeDef(
    _ServiceResourceBatchGetItemResponseUnprocessedKeysKeysTypeDef
):
    """
    Type definition for `ServiceResourceBatchGetItemResponseUnprocessedKeys` `Keys`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_ServiceResourceBatchGetItemResponseUnprocessedKeysTypeDef = TypedDict(
    "_ServiceResourceBatchGetItemResponseUnprocessedKeysTypeDef",
    {
        "Keys": List[Dict[str, ServiceResourceBatchGetItemResponseUnprocessedKeysKeysTypeDef]],
        "AttributesToGet": List[str],
        "ConsistentRead": bool,
        "ProjectionExpression": str,
        "ExpressionAttributeNames": Dict[str, str],
    },
    total=False,
)


class ServiceResourceBatchGetItemResponseUnprocessedKeysTypeDef(
    _ServiceResourceBatchGetItemResponseUnprocessedKeysTypeDef
):
    """
    Type definition for `ServiceResourceBatchGetItemResponse` `UnprocessedKeys`

    Represents a set of primary keys and, for each key, the attributes to retrieve from the table.

    For each primary key, you must provide *all* of the key attributes. For example, with a simple
    primary key, you only need to provide the partition key. For a composite primary key, you must
    provide *both* the partition key and the sort key.

    - **Keys** *(list) --*

      The primary key attribute values that define the items and the attributes associated with the
      items.

      - *(dict) --*

        - *(string) --*

          - *(dict) --*

            Represents the data for an attribute.

            Each attribute value is described as a name-value pair. The name is the data type, and
            the value is the data itself.

            For more information, see `Data Types
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
            in the *Amazon DynamoDB Developer Guide* .

            - **S** *(string) --*

              An attribute of type String. For example:

               ``"S": "Hello"``

            - **N** *(string) --*

              An attribute of type Number. For example:

               ``"N": "123.45"``

              Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
              across languages and libraries. However, DynamoDB treats them as number type
              attributes for mathematical operations.

            - **B** *(bytes) --*

              An attribute of type Binary. For example:

               ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

            - **SS** *(list) --*

              An attribute of type String Set. For example:

               ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

              - *(string) --*

            - **NS** *(list) --*

              An attribute of type Number Set. For example:

               ``"NS": ["42.2", "-19", "7.5", "3.14"]``

              Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
              across languages and libraries. However, DynamoDB treats them as number type
              attributes for mathematical operations.

              - *(string) --*

            - **BS** *(list) --*

              An attribute of type Binary Set. For example:

               ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

              - *(bytes) --*

            - **M** *(dict) --*

              An attribute of type Map. For example:

               ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

              - *(string) --*

                - *(dict) --*

                  Represents the data for an attribute.

                  Each attribute value is described as a name-value pair. The name is the data type,
                  and the value is the data itself.

                  For more information, see `Data Types
                  <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                  in the *Amazon DynamoDB Developer Guide* .

            - **L** *(list) --*

              An attribute of type List. For example:

               ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

            - **NULL** *(boolean) --*

              An attribute of type Null. For example:

               ``"NULL": true``

            - **BOOL** *(boolean) --*

              An attribute of type Boolean. For example:

               ``"BOOL": true``

    - **AttributesToGet** *(list) --*

      This is a legacy parameter. Use ``ProjectionExpression`` instead. For more information, see
      `Legacy Conditional Parameters
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html>`__
      in the *Amazon DynamoDB Developer Guide* .

      - *(string) --*

    - **ConsistentRead** *(boolean) --*

      The consistency of a read operation. If set to ``true`` , then a strongly consistent read is
      used; otherwise, an eventually consistent read is used.

    - **ProjectionExpression** *(string) --*

      A string that identifies one or more attributes to retrieve from the table. These attributes
      can include scalars, sets, or elements of a JSON document. The attributes in the
      ``ProjectionExpression`` must be separated by commas.

      If no attribute names are specified, then all attributes will be returned. If any of the
      requested attributes are not found, they will not appear in the result.

      For more information, see `Accessing Item Attributes
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html>`__
      in the *Amazon DynamoDB Developer Guide* .

    - **ExpressionAttributeNames** *(dict) --*

      One or more substitution tokens for attribute names in an expression. The following are some
      use cases for using ``ExpressionAttributeNames`` :

      * To access an attribute whose name conflicts with a DynamoDB reserved word.

      * To create a placeholder for repeating occurrences of an attribute name in an expression.

      * To prevent special characters in an attribute name from being misinterpreted in an
      expression.

      Use the **#** character in an expression to dereference an attribute name. For example,
      consider the following attribute name:

      * ``Percentile``

      The name of this attribute conflicts with a reserved word, so it cannot be used directly in an
      expression. (For the complete list of reserved words, see `Reserved Words
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html>`__ in
      the *Amazon DynamoDB Developer Guide* ). To work around this, you could specify the following
      for ``ExpressionAttributeNames`` :

      * ``{"#P":"Percentile"}``

      You could then use this substitution in an expression, as in this example:

      * ``#P = :val``

      .. note::

        Tokens that begin with the **:** character are *expression attribute values* , which are
        placeholders for the actual value at runtime.

      For more information on expression attribute names, see `Accessing Item Attributes
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html>`__
      in the *Amazon DynamoDB Developer Guide* .

      - *(string) --*

        - *(string) --*
    """


_ServiceResourceBatchGetItemResponseTypeDef = TypedDict(
    "_ServiceResourceBatchGetItemResponseTypeDef",
    {
        "Responses": Dict[
            str, List[Dict[str, ServiceResourceBatchGetItemResponseResponsesTypeDef]]
        ],
        "UnprocessedKeys": Dict[str, ServiceResourceBatchGetItemResponseUnprocessedKeysTypeDef],
        "ConsumedCapacity": List[ServiceResourceBatchGetItemResponseConsumedCapacityTypeDef],
    },
    total=False,
)


class ServiceResourceBatchGetItemResponseTypeDef(_ServiceResourceBatchGetItemResponseTypeDef):
    """
    Type definition for `ServiceResourceBatchGetItem` `Response`

    Represents the output of a ``BatchGetItem`` operation.

    - **Responses** *(dict) --*

      A map of table name to a list of items. Each object in ``Responses`` consists of a table name,
      along with a map of attribute data consisting of the data type and attribute value.

      - *(string) --*

        - *(list) --*

          - *(dict) --*

            - *(string) --*

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

                - **S** *(string) --*

                  An attribute of type String. For example:

                   ``"S": "Hello"``

                - **N** *(string) --*

                  An attribute of type Number. For example:

                   ``"N": "123.45"``

                  Numbers are sent across the network to DynamoDB as strings, to maximize
                  compatibility across languages and libraries. However, DynamoDB treats them as
                  number type attributes for mathematical operations.

                - **B** *(bytes) --*

                  An attribute of type Binary. For example:

                   ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

                - **SS** *(list) --*

                  An attribute of type String Set. For example:

                   ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

                  - *(string) --*

                - **NS** *(list) --*

                  An attribute of type Number Set. For example:

                   ``"NS": ["42.2", "-19", "7.5", "3.14"]``

                  Numbers are sent across the network to DynamoDB as strings, to maximize
                  compatibility across languages and libraries. However, DynamoDB treats them as
                  number type attributes for mathematical operations.

                  - *(string) --*

                - **BS** *(list) --*

                  An attribute of type Binary Set. For example:

                   ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

                  - *(bytes) --*

                - **M** *(dict) --*

                  An attribute of type Map. For example:

                   ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

                  - *(string) --*

                    - *(dict) --*

                      Represents the data for an attribute.

                      Each attribute value is described as a name-value pair. The name is the data
                      type, and the value is the data itself.

                      For more information, see `Data Types
                      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                      in the *Amazon DynamoDB Developer Guide* .

                - **L** *(list) --*

                  An attribute of type List. For example:

                   ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

                  - *(dict) --*

                    Represents the data for an attribute.

                    Each attribute value is described as a name-value pair. The name is the data
                    type, and the value is the data itself.

                    For more information, see `Data Types
                    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                    in the *Amazon DynamoDB Developer Guide* .

                - **NULL** *(boolean) --*

                  An attribute of type Null. For example:

                   ``"NULL": true``

                - **BOOL** *(boolean) --*

                  An attribute of type Boolean. For example:

                   ``"BOOL": true``

    - **UnprocessedKeys** *(dict) --*

      A map of tables and their respective keys that were not processed with the current response.
      The ``UnprocessedKeys`` value is in the same form as ``RequestItems`` , so the value can be
      provided directly to a subsequent ``BatchGetItem`` operation. For more information, see
      ``RequestItems`` in the Request Parameters section.

      Each element consists of:

      * ``Keys`` - An array of primary key attribute values that define specific items in the table.

      * ``ProjectionExpression`` - One or more attributes to be retrieved from the table or index.
      By default, all attributes are returned. If a requested attribute is not found, it does not
      appear in the result.

      * ``ConsistentRead`` - The consistency of a read operation. If set to ``true`` , then a
      strongly consistent read is used; otherwise, an eventually consistent read is used.

      If there are no unprocessed keys remaining, the response contains an empty ``UnprocessedKeys``
      map.

      - *(string) --*

        - *(dict) --*

          Represents a set of primary keys and, for each key, the attributes to retrieve from the
          table.

          For each primary key, you must provide *all* of the key attributes. For example, with a
          simple primary key, you only need to provide the partition key. For a composite primary
          key, you must provide *both* the partition key and the sort key.

          - **Keys** *(list) --*

            The primary key attribute values that define the items and the attributes associated
            with the items.

            - *(dict) --*

              - *(string) --*

                - *(dict) --*

                  Represents the data for an attribute.

                  Each attribute value is described as a name-value pair. The name is the data type,
                  and the value is the data itself.

                  For more information, see `Data Types
                  <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                  in the *Amazon DynamoDB Developer Guide* .

                  - **S** *(string) --*

                    An attribute of type String. For example:

                     ``"S": "Hello"``

                  - **N** *(string) --*

                    An attribute of type Number. For example:

                     ``"N": "123.45"``

                    Numbers are sent across the network to DynamoDB as strings, to maximize
                    compatibility across languages and libraries. However, DynamoDB treats them as
                    number type attributes for mathematical operations.

                  - **B** *(bytes) --*

                    An attribute of type Binary. For example:

                     ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

                  - **SS** *(list) --*

                    An attribute of type String Set. For example:

                     ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

                    - *(string) --*

                  - **NS** *(list) --*

                    An attribute of type Number Set. For example:

                     ``"NS": ["42.2", "-19", "7.5", "3.14"]``

                    Numbers are sent across the network to DynamoDB as strings, to maximize
                    compatibility across languages and libraries. However, DynamoDB treats them as
                    number type attributes for mathematical operations.

                    - *(string) --*

                  - **BS** *(list) --*

                    An attribute of type Binary Set. For example:

                     ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

                    - *(bytes) --*

                  - **M** *(dict) --*

                    An attribute of type Map. For example:

                     ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

                    - *(string) --*

                      - *(dict) --*

                        Represents the data for an attribute.

                        Each attribute value is described as a name-value pair. The name is the data
                        type, and the value is the data itself.

                        For more information, see `Data Types
                        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                        in the *Amazon DynamoDB Developer Guide* .

                  - **L** *(list) --*

                    An attribute of type List. For example:

                     ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

                    - *(dict) --*

                      Represents the data for an attribute.

                      Each attribute value is described as a name-value pair. The name is the data
                      type, and the value is the data itself.

                      For more information, see `Data Types
                      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                      in the *Amazon DynamoDB Developer Guide* .

                  - **NULL** *(boolean) --*

                    An attribute of type Null. For example:

                     ``"NULL": true``

                  - **BOOL** *(boolean) --*

                    An attribute of type Boolean. For example:

                     ``"BOOL": true``

          - **AttributesToGet** *(list) --*

            This is a legacy parameter. Use ``ProjectionExpression`` instead. For more information,
            see `Legacy Conditional Parameters
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html>`__
            in the *Amazon DynamoDB Developer Guide* .

            - *(string) --*

          - **ConsistentRead** *(boolean) --*

            The consistency of a read operation. If set to ``true`` , then a strongly consistent
            read is used; otherwise, an eventually consistent read is used.

          - **ProjectionExpression** *(string) --*

            A string that identifies one or more attributes to retrieve from the table. These
            attributes can include scalars, sets, or elements of a JSON document. The attributes in
            the ``ProjectionExpression`` must be separated by commas.

            If no attribute names are specified, then all attributes will be returned. If any of the
            requested attributes are not found, they will not appear in the result.

            For more information, see `Accessing Item Attributes
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html>`__
            in the *Amazon DynamoDB Developer Guide* .

          - **ExpressionAttributeNames** *(dict) --*

            One or more substitution tokens for attribute names in an expression. The following are
            some use cases for using ``ExpressionAttributeNames`` :

            * To access an attribute whose name conflicts with a DynamoDB reserved word.

            * To create a placeholder for repeating occurrences of an attribute name in an
            expression.

            * To prevent special characters in an attribute name from being misinterpreted in an
            expression.

            Use the **#** character in an expression to dereference an attribute name. For example,
            consider the following attribute name:

            * ``Percentile``

            The name of this attribute conflicts with a reserved word, so it cannot be used directly
            in an expression. (For the complete list of reserved words, see `Reserved Words
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html>`__
            in the *Amazon DynamoDB Developer Guide* ). To work around this, you could specify the
            following for ``ExpressionAttributeNames`` :

            * ``{"#P":"Percentile"}``

            You could then use this substitution in an expression, as in this example:

            * ``#P = :val``

            .. note::

              Tokens that begin with the **:** character are *expression attribute values* , which
              are placeholders for the actual value at runtime.

            For more information on expression attribute names, see `Accessing Item Attributes
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html>`__
            in the *Amazon DynamoDB Developer Guide* .

            - *(string) --*

              - *(string) --*

    - **ConsumedCapacity** *(list) --*

      The read capacity units consumed by the entire ``BatchGetItem`` operation.

      Each element consists of:

      * ``TableName`` - The table that consumed the provisioned throughput.

      * ``CapacityUnits`` - The total number of capacity units consumed.

      - *(dict) --*

        The capacity units consumed by an operation. The data returned includes the total
        provisioned throughput consumed, along with statistics for the table and any indexes
        involved in the operation. ``ConsumedCapacity`` is only returned if the request asked for
        it. For more information, see `Provisioned Throughput
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html>`__
        in the *Amazon DynamoDB Developer Guide* .

        - **TableName** *(string) --*

          The name of the table that was affected by the operation.

        - **CapacityUnits** *(float) --*

          The total number of capacity units consumed by the operation.

        - **ReadCapacityUnits** *(float) --*

          The total number of read capacity units consumed by the operation.

        - **WriteCapacityUnits** *(float) --*

          The total number of write capacity units consumed by the operation.

        - **Table** *(dict) --*

          The amount of throughput consumed on the table affected by the operation.

          - **ReadCapacityUnits** *(float) --*

            The total number of read capacity units consumed on a table or an index.

          - **WriteCapacityUnits** *(float) --*

            The total number of write capacity units consumed on a table or an index.

          - **CapacityUnits** *(float) --*

            The total number of capacity units consumed on a table or an index.

        - **LocalSecondaryIndexes** *(dict) --*

          The amount of throughput consumed on each local index affected by the operation.

          - *(string) --*

            - *(dict) --*

              Represents the amount of provisioned throughput capacity consumed on a table or an
              index.

              - **ReadCapacityUnits** *(float) --*

                The total number of read capacity units consumed on a table or an index.

              - **WriteCapacityUnits** *(float) --*

                The total number of write capacity units consumed on a table or an index.

              - **CapacityUnits** *(float) --*

                The total number of capacity units consumed on a table or an index.

        - **GlobalSecondaryIndexes** *(dict) --*

          The amount of throughput consumed on each global index affected by the operation.

          - *(string) --*

            - *(dict) --*

              Represents the amount of provisioned throughput capacity consumed on a table or an
              index.

              - **ReadCapacityUnits** *(float) --*

                The total number of read capacity units consumed on a table or an index.

              - **WriteCapacityUnits** *(float) --*

                The total number of write capacity units consumed on a table or an index.

              - **CapacityUnits** *(float) --*

                The total number of capacity units consumed on a table or an index.
    """


_ServiceResourceBatchWriteItemRequestItemsDeleteRequestKeyTypeDef = TypedDict(
    "_ServiceResourceBatchWriteItemRequestItemsDeleteRequestKeyTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class ServiceResourceBatchWriteItemRequestItemsDeleteRequestKeyTypeDef(
    _ServiceResourceBatchWriteItemRequestItemsDeleteRequestKeyTypeDef
):
    """
    Type definition for `ServiceResourceBatchWriteItemRequestItemsDeleteRequest` `Key`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_ServiceResourceBatchWriteItemRequestItemsDeleteRequestTypeDef = TypedDict(
    "_ServiceResourceBatchWriteItemRequestItemsDeleteRequestTypeDef",
    {"Key": Dict[str, ServiceResourceBatchWriteItemRequestItemsDeleteRequestKeyTypeDef]},
)


class ServiceResourceBatchWriteItemRequestItemsDeleteRequestTypeDef(
    _ServiceResourceBatchWriteItemRequestItemsDeleteRequestTypeDef
):
    """
    Type definition for `ServiceResourceBatchWriteItemRequestItems` `DeleteRequest`

    A request to perform a ``DeleteItem`` operation.

    - **Key** *(dict) --* **[REQUIRED]**

      A map of attribute name to attribute values, representing the primary key of the item to
      delete. All of the table's primary key attributes must be specified, and their data types must
      match those of the table's key schema.

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

          - **S** *(string) --*

            An attribute of type String. For example:

             ``"S": "Hello"``

          - **N** *(string) --*

            An attribute of type Number. For example:

             ``"N": "123.45"``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

          - **B** *(bytes) --*

            An attribute of type Binary. For example:

             ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

          - **SS** *(list) --*

            An attribute of type String Set. For example:

             ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

            - *(string) --*

          - **NS** *(list) --*

            An attribute of type Number Set. For example:

             ``"NS": ["42.2", "-19", "7.5", "3.14"]``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

            - *(string) --*

          - **BS** *(list) --*

            An attribute of type Binary Set. For example:

             ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

            - *(bytes) --*

          - **M** *(dict) --*

            An attribute of type Map. For example:

             ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

            - *(string) --*

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

          - **L** *(list) --*

            An attribute of type List. For example:

             ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

            - *(dict) --*

              Represents the data for an attribute.

              Each attribute value is described as a name-value pair. The name is the data type, and
              the value is the data itself.

              For more information, see `Data Types
              <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
              in the *Amazon DynamoDB Developer Guide* .

          - **NULL** *(boolean) --*

            An attribute of type Null. For example:

             ``"NULL": true``

          - **BOOL** *(boolean) --*

            An attribute of type Boolean. For example:

             ``"BOOL": true``
    """


_ServiceResourceBatchWriteItemRequestItemsPutRequestItemTypeDef = TypedDict(
    "_ServiceResourceBatchWriteItemRequestItemsPutRequestItemTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class ServiceResourceBatchWriteItemRequestItemsPutRequestItemTypeDef(
    _ServiceResourceBatchWriteItemRequestItemsPutRequestItemTypeDef
):
    """
    Type definition for `ServiceResourceBatchWriteItemRequestItemsPutRequest` `Item`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_ServiceResourceBatchWriteItemRequestItemsPutRequestTypeDef = TypedDict(
    "_ServiceResourceBatchWriteItemRequestItemsPutRequestTypeDef",
    {"Item": Dict[str, ServiceResourceBatchWriteItemRequestItemsPutRequestItemTypeDef]},
)


class ServiceResourceBatchWriteItemRequestItemsPutRequestTypeDef(
    _ServiceResourceBatchWriteItemRequestItemsPutRequestTypeDef
):
    """
    Type definition for `ServiceResourceBatchWriteItemRequestItems` `PutRequest`

    A request to perform a ``PutItem`` operation.

    - **Item** *(dict) --* **[REQUIRED]**

      A map of attribute name to attribute values, representing the primary key of an item to be
      processed by ``PutItem`` . All of the table's primary key attributes must be specified, and
      their data types must match those of the table's key schema. If any attributes are present in
      the item that are part of an index key schema for the table, their types must match the index
      key schema.

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

          - **S** *(string) --*

            An attribute of type String. For example:

             ``"S": "Hello"``

          - **N** *(string) --*

            An attribute of type Number. For example:

             ``"N": "123.45"``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

          - **B** *(bytes) --*

            An attribute of type Binary. For example:

             ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

          - **SS** *(list) --*

            An attribute of type String Set. For example:

             ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

            - *(string) --*

          - **NS** *(list) --*

            An attribute of type Number Set. For example:

             ``"NS": ["42.2", "-19", "7.5", "3.14"]``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

            - *(string) --*

          - **BS** *(list) --*

            An attribute of type Binary Set. For example:

             ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

            - *(bytes) --*

          - **M** *(dict) --*

            An attribute of type Map. For example:

             ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

            - *(string) --*

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

          - **L** *(list) --*

            An attribute of type List. For example:

             ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

            - *(dict) --*

              Represents the data for an attribute.

              Each attribute value is described as a name-value pair. The name is the data type, and
              the value is the data itself.

              For more information, see `Data Types
              <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
              in the *Amazon DynamoDB Developer Guide* .

          - **NULL** *(boolean) --*

            An attribute of type Null. For example:

             ``"NULL": true``

          - **BOOL** *(boolean) --*

            An attribute of type Boolean. For example:

             ``"BOOL": true``
    """


_ServiceResourceBatchWriteItemRequestItemsTypeDef = TypedDict(
    "_ServiceResourceBatchWriteItemRequestItemsTypeDef",
    {
        "PutRequest": ServiceResourceBatchWriteItemRequestItemsPutRequestTypeDef,
        "DeleteRequest": ServiceResourceBatchWriteItemRequestItemsDeleteRequestTypeDef,
    },
    total=False,
)


class ServiceResourceBatchWriteItemRequestItemsTypeDef(
    _ServiceResourceBatchWriteItemRequestItemsTypeDef
):
    """
    Type definition for `ServiceResourceBatchWriteItem` `RequestItems`

    Represents an operation to perform - either ``DeleteItem`` or ``PutItem`` . You can only request
    one of these operations, not both, in a single ``WriteRequest`` . If you do need to perform both
    of these operations, you need to provide two separate ``WriteRequest`` objects.

    - **PutRequest** *(dict) --*

      A request to perform a ``PutItem`` operation.

      - **Item** *(dict) --* **[REQUIRED]**

        A map of attribute name to attribute values, representing the primary key of an item to be
        processed by ``PutItem`` . All of the table's primary key attributes must be specified, and
        their data types must match those of the table's key schema. If any attributes are present
        in the item that are part of an index key schema for the table, their types must match the
        index key schema.

        - *(string) --*

          - *(dict) --*

            Represents the data for an attribute.

            Each attribute value is described as a name-value pair. The name is the data type, and
            the value is the data itself.

            For more information, see `Data Types
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
            in the *Amazon DynamoDB Developer Guide* .

            - **S** *(string) --*

              An attribute of type String. For example:

               ``"S": "Hello"``

            - **N** *(string) --*

              An attribute of type Number. For example:

               ``"N": "123.45"``

              Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
              across languages and libraries. However, DynamoDB treats them as number type
              attributes for mathematical operations.

            - **B** *(bytes) --*

              An attribute of type Binary. For example:

               ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

            - **SS** *(list) --*

              An attribute of type String Set. For example:

               ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

              - *(string) --*

            - **NS** *(list) --*

              An attribute of type Number Set. For example:

               ``"NS": ["42.2", "-19", "7.5", "3.14"]``

              Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
              across languages and libraries. However, DynamoDB treats them as number type
              attributes for mathematical operations.

              - *(string) --*

            - **BS** *(list) --*

              An attribute of type Binary Set. For example:

               ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

              - *(bytes) --*

            - **M** *(dict) --*

              An attribute of type Map. For example:

               ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

              - *(string) --*

                - *(dict) --*

                  Represents the data for an attribute.

                  Each attribute value is described as a name-value pair. The name is the data type,
                  and the value is the data itself.

                  For more information, see `Data Types
                  <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                  in the *Amazon DynamoDB Developer Guide* .

            - **L** *(list) --*

              An attribute of type List. For example:

               ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

            - **NULL** *(boolean) --*

              An attribute of type Null. For example:

               ``"NULL": true``

            - **BOOL** *(boolean) --*

              An attribute of type Boolean. For example:

               ``"BOOL": true``

    - **DeleteRequest** *(dict) --*

      A request to perform a ``DeleteItem`` operation.

      - **Key** *(dict) --* **[REQUIRED]**

        A map of attribute name to attribute values, representing the primary key of the item to
        delete. All of the table's primary key attributes must be specified, and their data types
        must match those of the table's key schema.

        - *(string) --*

          - *(dict) --*

            Represents the data for an attribute.

            Each attribute value is described as a name-value pair. The name is the data type, and
            the value is the data itself.

            For more information, see `Data Types
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
            in the *Amazon DynamoDB Developer Guide* .

            - **S** *(string) --*

              An attribute of type String. For example:

               ``"S": "Hello"``

            - **N** *(string) --*

              An attribute of type Number. For example:

               ``"N": "123.45"``

              Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
              across languages and libraries. However, DynamoDB treats them as number type
              attributes for mathematical operations.

            - **B** *(bytes) --*

              An attribute of type Binary. For example:

               ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

            - **SS** *(list) --*

              An attribute of type String Set. For example:

               ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

              - *(string) --*

            - **NS** *(list) --*

              An attribute of type Number Set. For example:

               ``"NS": ["42.2", "-19", "7.5", "3.14"]``

              Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
              across languages and libraries. However, DynamoDB treats them as number type
              attributes for mathematical operations.

              - *(string) --*

            - **BS** *(list) --*

              An attribute of type Binary Set. For example:

               ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

              - *(bytes) --*

            - **M** *(dict) --*

              An attribute of type Map. For example:

               ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

              - *(string) --*

                - *(dict) --*

                  Represents the data for an attribute.

                  Each attribute value is described as a name-value pair. The name is the data type,
                  and the value is the data itself.

                  For more information, see `Data Types
                  <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                  in the *Amazon DynamoDB Developer Guide* .

            - **L** *(list) --*

              An attribute of type List. For example:

               ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

            - **NULL** *(boolean) --*

              An attribute of type Null. For example:

               ``"NULL": true``

            - **BOOL** *(boolean) --*

              An attribute of type Boolean. For example:

               ``"BOOL": true``
    """


_ServiceResourceBatchWriteItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef = TypedDict(
    "_ServiceResourceBatchWriteItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef",
    {"ReadCapacityUnits": float, "WriteCapacityUnits": float, "CapacityUnits": float},
    total=False,
)


class ServiceResourceBatchWriteItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef(
    _ServiceResourceBatchWriteItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef
):
    """
    Type definition for `ServiceResourceBatchWriteItemResponseConsumedCapacity`
    `GlobalSecondaryIndexes`

    Represents the amount of provisioned throughput capacity consumed on a table or an index.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed on a table or an index.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed on a table or an index.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed on a table or an index.
    """


_ServiceResourceBatchWriteItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef = TypedDict(
    "_ServiceResourceBatchWriteItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef",
    {"ReadCapacityUnits": float, "WriteCapacityUnits": float, "CapacityUnits": float},
    total=False,
)


class ServiceResourceBatchWriteItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef(
    _ServiceResourceBatchWriteItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef
):
    """
    Type definition for `ServiceResourceBatchWriteItemResponseConsumedCapacity`
    `LocalSecondaryIndexes`

    Represents the amount of provisioned throughput capacity consumed on a table or an index.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed on a table or an index.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed on a table or an index.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed on a table or an index.
    """


_ServiceResourceBatchWriteItemResponseConsumedCapacityTableTypeDef = TypedDict(
    "_ServiceResourceBatchWriteItemResponseConsumedCapacityTableTypeDef",
    {"ReadCapacityUnits": float, "WriteCapacityUnits": float, "CapacityUnits": float},
    total=False,
)


class ServiceResourceBatchWriteItemResponseConsumedCapacityTableTypeDef(
    _ServiceResourceBatchWriteItemResponseConsumedCapacityTableTypeDef
):
    """
    Type definition for `ServiceResourceBatchWriteItemResponseConsumedCapacity` `Table`

    The amount of throughput consumed on the table affected by the operation.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed on a table or an index.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed on a table or an index.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed on a table or an index.
    """


_ServiceResourceBatchWriteItemResponseConsumedCapacityTypeDef = TypedDict(
    "_ServiceResourceBatchWriteItemResponseConsumedCapacityTypeDef",
    {
        "TableName": str,
        "CapacityUnits": float,
        "ReadCapacityUnits": float,
        "WriteCapacityUnits": float,
        "Table": ServiceResourceBatchWriteItemResponseConsumedCapacityTableTypeDef,
        "LocalSecondaryIndexes": Dict[
            str, ServiceResourceBatchWriteItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef
        ],
        "GlobalSecondaryIndexes": Dict[
            str, ServiceResourceBatchWriteItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef
        ],
    },
    total=False,
)


class ServiceResourceBatchWriteItemResponseConsumedCapacityTypeDef(
    _ServiceResourceBatchWriteItemResponseConsumedCapacityTypeDef
):
    """
    Type definition for `ServiceResourceBatchWriteItemResponse` `ConsumedCapacity`

    The capacity units consumed by an operation. The data returned includes the total provisioned
    throughput consumed, along with statistics for the table and any indexes involved in the
    operation. ``ConsumedCapacity`` is only returned if the request asked for it. For more
    information, see `Provisioned Throughput
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **TableName** *(string) --*

      The name of the table that was affected by the operation.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed by the operation.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed by the operation.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed by the operation.

    - **Table** *(dict) --*

      The amount of throughput consumed on the table affected by the operation.

      - **ReadCapacityUnits** *(float) --*

        The total number of read capacity units consumed on a table or an index.

      - **WriteCapacityUnits** *(float) --*

        The total number of write capacity units consumed on a table or an index.

      - **CapacityUnits** *(float) --*

        The total number of capacity units consumed on a table or an index.

    - **LocalSecondaryIndexes** *(dict) --*

      The amount of throughput consumed on each local index affected by the operation.

      - *(string) --*

        - *(dict) --*

          Represents the amount of provisioned throughput capacity consumed on a table or an index.

          - **ReadCapacityUnits** *(float) --*

            The total number of read capacity units consumed on a table or an index.

          - **WriteCapacityUnits** *(float) --*

            The total number of write capacity units consumed on a table or an index.

          - **CapacityUnits** *(float) --*

            The total number of capacity units consumed on a table or an index.

    - **GlobalSecondaryIndexes** *(dict) --*

      The amount of throughput consumed on each global index affected by the operation.

      - *(string) --*

        - *(dict) --*

          Represents the amount of provisioned throughput capacity consumed on a table or an index.

          - **ReadCapacityUnits** *(float) --*

            The total number of read capacity units consumed on a table or an index.

          - **WriteCapacityUnits** *(float) --*

            The total number of write capacity units consumed on a table or an index.

          - **CapacityUnits** *(float) --*

            The total number of capacity units consumed on a table or an index.
    """


_ServiceResourceBatchWriteItemResponseItemCollectionMetricsItemCollectionKeyTypeDef = TypedDict(
    "_ServiceResourceBatchWriteItemResponseItemCollectionMetricsItemCollectionKeyTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class ServiceResourceBatchWriteItemResponseItemCollectionMetricsItemCollectionKeyTypeDef(
    _ServiceResourceBatchWriteItemResponseItemCollectionMetricsItemCollectionKeyTypeDef
):
    """
    Type definition for `ServiceResourceBatchWriteItemResponseItemCollectionMetrics`
    `ItemCollectionKey`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_ServiceResourceBatchWriteItemResponseItemCollectionMetricsTypeDef = TypedDict(
    "_ServiceResourceBatchWriteItemResponseItemCollectionMetricsTypeDef",
    {
        "ItemCollectionKey": Dict[
            str, ServiceResourceBatchWriteItemResponseItemCollectionMetricsItemCollectionKeyTypeDef
        ],
        "SizeEstimateRangeGB": List[float],
    },
    total=False,
)


class ServiceResourceBatchWriteItemResponseItemCollectionMetricsTypeDef(
    _ServiceResourceBatchWriteItemResponseItemCollectionMetricsTypeDef
):
    """
    Type definition for `ServiceResourceBatchWriteItemResponse` `ItemCollectionMetrics`

    Information about item collections, if any, that were affected by the operation.
    ``ItemCollectionMetrics`` is only returned if the request asked for it. If the table does not
    have any local secondary indexes, this information is not returned in the response.

    - **ItemCollectionKey** *(dict) --*

      The partition key value of the item collection. This value is the same as the partition key
      value of the item.

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

          - **S** *(string) --*

            An attribute of type String. For example:

             ``"S": "Hello"``

          - **N** *(string) --*

            An attribute of type Number. For example:

             ``"N": "123.45"``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

          - **B** *(bytes) --*

            An attribute of type Binary. For example:

             ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

          - **SS** *(list) --*

            An attribute of type String Set. For example:

             ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

            - *(string) --*

          - **NS** *(list) --*

            An attribute of type Number Set. For example:

             ``"NS": ["42.2", "-19", "7.5", "3.14"]``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

            - *(string) --*

          - **BS** *(list) --*

            An attribute of type Binary Set. For example:

             ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

            - *(bytes) --*

          - **M** *(dict) --*

            An attribute of type Map. For example:

             ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

            - *(string) --*

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

          - **L** *(list) --*

            An attribute of type List. For example:

             ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

            - *(dict) --*

              Represents the data for an attribute.

              Each attribute value is described as a name-value pair. The name is the data type, and
              the value is the data itself.

              For more information, see `Data Types
              <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
              in the *Amazon DynamoDB Developer Guide* .

          - **NULL** *(boolean) --*

            An attribute of type Null. For example:

             ``"NULL": true``

          - **BOOL** *(boolean) --*

            An attribute of type Boolean. For example:

             ``"BOOL": true``

    - **SizeEstimateRangeGB** *(list) --*

      An estimate of item collection size, in gigabytes. This value is a two-element array
      containing a lower bound and an upper bound for the estimate. The estimate includes the size
      of all the items in the table, plus the size of all attributes projected into all of the local
      secondary indexes on that table. Use this estimate to measure whether a local secondary index
      is approaching its size limit.

      The estimate is subject to change over time; therefore, do not rely on the precision or
      accuracy of the estimate.

      - *(float) --*
    """


_ServiceResourceBatchWriteItemResponseUnprocessedItemsDeleteRequestKeyTypeDef = TypedDict(
    "_ServiceResourceBatchWriteItemResponseUnprocessedItemsDeleteRequestKeyTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class ServiceResourceBatchWriteItemResponseUnprocessedItemsDeleteRequestKeyTypeDef(
    _ServiceResourceBatchWriteItemResponseUnprocessedItemsDeleteRequestKeyTypeDef
):
    """
    Type definition for `ServiceResourceBatchWriteItemResponseUnprocessedItemsDeleteRequest` `Key`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_ServiceResourceBatchWriteItemResponseUnprocessedItemsDeleteRequestTypeDef = TypedDict(
    "_ServiceResourceBatchWriteItemResponseUnprocessedItemsDeleteRequestTypeDef",
    {
        "Key": Dict[
            str, ServiceResourceBatchWriteItemResponseUnprocessedItemsDeleteRequestKeyTypeDef
        ]
    },
    total=False,
)


class ServiceResourceBatchWriteItemResponseUnprocessedItemsDeleteRequestTypeDef(
    _ServiceResourceBatchWriteItemResponseUnprocessedItemsDeleteRequestTypeDef
):
    """
    Type definition for `ServiceResourceBatchWriteItemResponseUnprocessedItems` `DeleteRequest`

    A request to perform a ``DeleteItem`` operation.

    - **Key** *(dict) --*

      A map of attribute name to attribute values, representing the primary key of the item to
      delete. All of the table's primary key attributes must be specified, and their data types must
      match those of the table's key schema.

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

          - **S** *(string) --*

            An attribute of type String. For example:

             ``"S": "Hello"``

          - **N** *(string) --*

            An attribute of type Number. For example:

             ``"N": "123.45"``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

          - **B** *(bytes) --*

            An attribute of type Binary. For example:

             ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

          - **SS** *(list) --*

            An attribute of type String Set. For example:

             ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

            - *(string) --*

          - **NS** *(list) --*

            An attribute of type Number Set. For example:

             ``"NS": ["42.2", "-19", "7.5", "3.14"]``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

            - *(string) --*

          - **BS** *(list) --*

            An attribute of type Binary Set. For example:

             ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

            - *(bytes) --*

          - **M** *(dict) --*

            An attribute of type Map. For example:

             ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

            - *(string) --*

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

          - **L** *(list) --*

            An attribute of type List. For example:

             ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

            - *(dict) --*

              Represents the data for an attribute.

              Each attribute value is described as a name-value pair. The name is the data type, and
              the value is the data itself.

              For more information, see `Data Types
              <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
              in the *Amazon DynamoDB Developer Guide* .

          - **NULL** *(boolean) --*

            An attribute of type Null. For example:

             ``"NULL": true``

          - **BOOL** *(boolean) --*

            An attribute of type Boolean. For example:

             ``"BOOL": true``
    """


_ServiceResourceBatchWriteItemResponseUnprocessedItemsPutRequestItemTypeDef = TypedDict(
    "_ServiceResourceBatchWriteItemResponseUnprocessedItemsPutRequestItemTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class ServiceResourceBatchWriteItemResponseUnprocessedItemsPutRequestItemTypeDef(
    _ServiceResourceBatchWriteItemResponseUnprocessedItemsPutRequestItemTypeDef
):
    """
    Type definition for `ServiceResourceBatchWriteItemResponseUnprocessedItemsPutRequest` `Item`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_ServiceResourceBatchWriteItemResponseUnprocessedItemsPutRequestTypeDef = TypedDict(
    "_ServiceResourceBatchWriteItemResponseUnprocessedItemsPutRequestTypeDef",
    {"Item": Dict[str, ServiceResourceBatchWriteItemResponseUnprocessedItemsPutRequestItemTypeDef]},
    total=False,
)


class ServiceResourceBatchWriteItemResponseUnprocessedItemsPutRequestTypeDef(
    _ServiceResourceBatchWriteItemResponseUnprocessedItemsPutRequestTypeDef
):
    """
    Type definition for `ServiceResourceBatchWriteItemResponseUnprocessedItems` `PutRequest`

    A request to perform a ``PutItem`` operation.

    - **Item** *(dict) --*

      A map of attribute name to attribute values, representing the primary key of an item to be
      processed by ``PutItem`` . All of the table's primary key attributes must be specified, and
      their data types must match those of the table's key schema. If any attributes are present in
      the item that are part of an index key schema for the table, their types must match the index
      key schema.

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

          - **S** *(string) --*

            An attribute of type String. For example:

             ``"S": "Hello"``

          - **N** *(string) --*

            An attribute of type Number. For example:

             ``"N": "123.45"``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

          - **B** *(bytes) --*

            An attribute of type Binary. For example:

             ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

          - **SS** *(list) --*

            An attribute of type String Set. For example:

             ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

            - *(string) --*

          - **NS** *(list) --*

            An attribute of type Number Set. For example:

             ``"NS": ["42.2", "-19", "7.5", "3.14"]``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

            - *(string) --*

          - **BS** *(list) --*

            An attribute of type Binary Set. For example:

             ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

            - *(bytes) --*

          - **M** *(dict) --*

            An attribute of type Map. For example:

             ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

            - *(string) --*

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

          - **L** *(list) --*

            An attribute of type List. For example:

             ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

            - *(dict) --*

              Represents the data for an attribute.

              Each attribute value is described as a name-value pair. The name is the data type, and
              the value is the data itself.

              For more information, see `Data Types
              <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
              in the *Amazon DynamoDB Developer Guide* .

          - **NULL** *(boolean) --*

            An attribute of type Null. For example:

             ``"NULL": true``

          - **BOOL** *(boolean) --*

            An attribute of type Boolean. For example:

             ``"BOOL": true``
    """


_ServiceResourceBatchWriteItemResponseUnprocessedItemsTypeDef = TypedDict(
    "_ServiceResourceBatchWriteItemResponseUnprocessedItemsTypeDef",
    {
        "PutRequest": ServiceResourceBatchWriteItemResponseUnprocessedItemsPutRequestTypeDef,
        "DeleteRequest": ServiceResourceBatchWriteItemResponseUnprocessedItemsDeleteRequestTypeDef,
    },
    total=False,
)


class ServiceResourceBatchWriteItemResponseUnprocessedItemsTypeDef(
    _ServiceResourceBatchWriteItemResponseUnprocessedItemsTypeDef
):
    """
    Type definition for `ServiceResourceBatchWriteItemResponse` `UnprocessedItems`

    Represents an operation to perform - either ``DeleteItem`` or ``PutItem`` . You can only request
    one of these operations, not both, in a single ``WriteRequest`` . If you do need to perform both
    of these operations, you need to provide two separate ``WriteRequest`` objects.

    - **PutRequest** *(dict) --*

      A request to perform a ``PutItem`` operation.

      - **Item** *(dict) --*

        A map of attribute name to attribute values, representing the primary key of an item to be
        processed by ``PutItem`` . All of the table's primary key attributes must be specified, and
        their data types must match those of the table's key schema. If any attributes are present
        in the item that are part of an index key schema for the table, their types must match the
        index key schema.

        - *(string) --*

          - *(dict) --*

            Represents the data for an attribute.

            Each attribute value is described as a name-value pair. The name is the data type, and
            the value is the data itself.

            For more information, see `Data Types
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
            in the *Amazon DynamoDB Developer Guide* .

            - **S** *(string) --*

              An attribute of type String. For example:

               ``"S": "Hello"``

            - **N** *(string) --*

              An attribute of type Number. For example:

               ``"N": "123.45"``

              Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
              across languages and libraries. However, DynamoDB treats them as number type
              attributes for mathematical operations.

            - **B** *(bytes) --*

              An attribute of type Binary. For example:

               ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

            - **SS** *(list) --*

              An attribute of type String Set. For example:

               ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

              - *(string) --*

            - **NS** *(list) --*

              An attribute of type Number Set. For example:

               ``"NS": ["42.2", "-19", "7.5", "3.14"]``

              Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
              across languages and libraries. However, DynamoDB treats them as number type
              attributes for mathematical operations.

              - *(string) --*

            - **BS** *(list) --*

              An attribute of type Binary Set. For example:

               ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

              - *(bytes) --*

            - **M** *(dict) --*

              An attribute of type Map. For example:

               ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

              - *(string) --*

                - *(dict) --*

                  Represents the data for an attribute.

                  Each attribute value is described as a name-value pair. The name is the data type,
                  and the value is the data itself.

                  For more information, see `Data Types
                  <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                  in the *Amazon DynamoDB Developer Guide* .

            - **L** *(list) --*

              An attribute of type List. For example:

               ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

            - **NULL** *(boolean) --*

              An attribute of type Null. For example:

               ``"NULL": true``

            - **BOOL** *(boolean) --*

              An attribute of type Boolean. For example:

               ``"BOOL": true``

    - **DeleteRequest** *(dict) --*

      A request to perform a ``DeleteItem`` operation.

      - **Key** *(dict) --*

        A map of attribute name to attribute values, representing the primary key of the item to
        delete. All of the table's primary key attributes must be specified, and their data types
        must match those of the table's key schema.

        - *(string) --*

          - *(dict) --*

            Represents the data for an attribute.

            Each attribute value is described as a name-value pair. The name is the data type, and
            the value is the data itself.

            For more information, see `Data Types
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
            in the *Amazon DynamoDB Developer Guide* .

            - **S** *(string) --*

              An attribute of type String. For example:

               ``"S": "Hello"``

            - **N** *(string) --*

              An attribute of type Number. For example:

               ``"N": "123.45"``

              Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
              across languages and libraries. However, DynamoDB treats them as number type
              attributes for mathematical operations.

            - **B** *(bytes) --*

              An attribute of type Binary. For example:

               ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

            - **SS** *(list) --*

              An attribute of type String Set. For example:

               ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

              - *(string) --*

            - **NS** *(list) --*

              An attribute of type Number Set. For example:

               ``"NS": ["42.2", "-19", "7.5", "3.14"]``

              Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
              across languages and libraries. However, DynamoDB treats them as number type
              attributes for mathematical operations.

              - *(string) --*

            - **BS** *(list) --*

              An attribute of type Binary Set. For example:

               ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

              - *(bytes) --*

            - **M** *(dict) --*

              An attribute of type Map. For example:

               ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

              - *(string) --*

                - *(dict) --*

                  Represents the data for an attribute.

                  Each attribute value is described as a name-value pair. The name is the data type,
                  and the value is the data itself.

                  For more information, see `Data Types
                  <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                  in the *Amazon DynamoDB Developer Guide* .

            - **L** *(list) --*

              An attribute of type List. For example:

               ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

            - **NULL** *(boolean) --*

              An attribute of type Null. For example:

               ``"NULL": true``

            - **BOOL** *(boolean) --*

              An attribute of type Boolean. For example:

               ``"BOOL": true``
    """


_ServiceResourceBatchWriteItemResponseTypeDef = TypedDict(
    "_ServiceResourceBatchWriteItemResponseTypeDef",
    {
        "UnprocessedItems": Dict[
            str, List[ServiceResourceBatchWriteItemResponseUnprocessedItemsTypeDef]
        ],
        "ItemCollectionMetrics": Dict[
            str, List[ServiceResourceBatchWriteItemResponseItemCollectionMetricsTypeDef]
        ],
        "ConsumedCapacity": List[ServiceResourceBatchWriteItemResponseConsumedCapacityTypeDef],
    },
    total=False,
)


class ServiceResourceBatchWriteItemResponseTypeDef(_ServiceResourceBatchWriteItemResponseTypeDef):
    """
    Type definition for `ServiceResourceBatchWriteItem` `Response`

    Represents the output of a ``BatchWriteItem`` operation.

    - **UnprocessedItems** *(dict) --*

      A map of tables and requests against those tables that were not processed. The
      ``UnprocessedItems`` value is in the same form as ``RequestItems`` , so you can provide this
      value directly to a subsequent ``BatchGetItem`` operation. For more information, see
      ``RequestItems`` in the Request Parameters section.

      Each ``UnprocessedItems`` entry consists of a table name and, for that table, a list of
      operations to perform (``DeleteRequest`` or ``PutRequest`` ).

      * ``DeleteRequest`` - Perform a ``DeleteItem`` operation on the specified item. The item to be
      deleted is identified by a ``Key`` subelement:

        * ``Key`` - A map of primary key attribute values that uniquely identify the item. Each
        entry in this map consists of an attribute name and an attribute value.

      * ``PutRequest`` - Perform a ``PutItem`` operation on the specified item. The item to be put
      is identified by an ``Item`` subelement:

        * ``Item`` - A map of attributes and their values. Each entry in this map consists of an
        attribute name and an attribute value. Attribute values must not be null; string and binary
        type attributes must have lengths greater than zero; and set type attributes must not be
        empty. Requests that contain empty values will be rejected with a ``ValidationException``
        exception. If you specify any attributes that are part of an index key, then the data types
        for those attributes must match those of the schema in the table's attribute definition.

      If there are no unprocessed items remaining, the response contains an empty
      ``UnprocessedItems`` map.

      - *(string) --*

        - *(list) --*

          - *(dict) --*

            Represents an operation to perform - either ``DeleteItem`` or ``PutItem`` . You can only
            request one of these operations, not both, in a single ``WriteRequest`` . If you do need
            to perform both of these operations, you need to provide two separate ``WriteRequest``
            objects.

            - **PutRequest** *(dict) --*

              A request to perform a ``PutItem`` operation.

              - **Item** *(dict) --*

                A map of attribute name to attribute values, representing the primary key of an item
                to be processed by ``PutItem`` . All of the table's primary key attributes must be
                specified, and their data types must match those of the table's key schema. If any
                attributes are present in the item that are part of an index key schema for the
                table, their types must match the index key schema.

                - *(string) --*

                  - *(dict) --*

                    Represents the data for an attribute.

                    Each attribute value is described as a name-value pair. The name is the data
                    type, and the value is the data itself.

                    For more information, see `Data Types
                    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                    in the *Amazon DynamoDB Developer Guide* .

                    - **S** *(string) --*

                      An attribute of type String. For example:

                       ``"S": "Hello"``

                    - **N** *(string) --*

                      An attribute of type Number. For example:

                       ``"N": "123.45"``

                      Numbers are sent across the network to DynamoDB as strings, to maximize
                      compatibility across languages and libraries. However, DynamoDB treats them as
                      number type attributes for mathematical operations.

                    - **B** *(bytes) --*

                      An attribute of type Binary. For example:

                       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

                    - **SS** *(list) --*

                      An attribute of type String Set. For example:

                       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

                      - *(string) --*

                    - **NS** *(list) --*

                      An attribute of type Number Set. For example:

                       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

                      Numbers are sent across the network to DynamoDB as strings, to maximize
                      compatibility across languages and libraries. However, DynamoDB treats them as
                      number type attributes for mathematical operations.

                      - *(string) --*

                    - **BS** *(list) --*

                      An attribute of type Binary Set. For example:

                       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

                      - *(bytes) --*

                    - **M** *(dict) --*

                      An attribute of type Map. For example:

                       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

                      - *(string) --*

                        - *(dict) --*

                          Represents the data for an attribute.

                          Each attribute value is described as a name-value pair. The name is the
                          data type, and the value is the data itself.

                          For more information, see `Data Types
                          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                          in the *Amazon DynamoDB Developer Guide* .

                    - **L** *(list) --*

                      An attribute of type List. For example:

                       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

                      - *(dict) --*

                        Represents the data for an attribute.

                        Each attribute value is described as a name-value pair. The name is the data
                        type, and the value is the data itself.

                        For more information, see `Data Types
                        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                        in the *Amazon DynamoDB Developer Guide* .

                    - **NULL** *(boolean) --*

                      An attribute of type Null. For example:

                       ``"NULL": true``

                    - **BOOL** *(boolean) --*

                      An attribute of type Boolean. For example:

                       ``"BOOL": true``

            - **DeleteRequest** *(dict) --*

              A request to perform a ``DeleteItem`` operation.

              - **Key** *(dict) --*

                A map of attribute name to attribute values, representing the primary key of the
                item to delete. All of the table's primary key attributes must be specified, and
                their data types must match those of the table's key schema.

                - *(string) --*

                  - *(dict) --*

                    Represents the data for an attribute.

                    Each attribute value is described as a name-value pair. The name is the data
                    type, and the value is the data itself.

                    For more information, see `Data Types
                    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                    in the *Amazon DynamoDB Developer Guide* .

                    - **S** *(string) --*

                      An attribute of type String. For example:

                       ``"S": "Hello"``

                    - **N** *(string) --*

                      An attribute of type Number. For example:

                       ``"N": "123.45"``

                      Numbers are sent across the network to DynamoDB as strings, to maximize
                      compatibility across languages and libraries. However, DynamoDB treats them as
                      number type attributes for mathematical operations.

                    - **B** *(bytes) --*

                      An attribute of type Binary. For example:

                       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

                    - **SS** *(list) --*

                      An attribute of type String Set. For example:

                       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

                      - *(string) --*

                    - **NS** *(list) --*

                      An attribute of type Number Set. For example:

                       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

                      Numbers are sent across the network to DynamoDB as strings, to maximize
                      compatibility across languages and libraries. However, DynamoDB treats them as
                      number type attributes for mathematical operations.

                      - *(string) --*

                    - **BS** *(list) --*

                      An attribute of type Binary Set. For example:

                       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

                      - *(bytes) --*

                    - **M** *(dict) --*

                      An attribute of type Map. For example:

                       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

                      - *(string) --*

                        - *(dict) --*

                          Represents the data for an attribute.

                          Each attribute value is described as a name-value pair. The name is the
                          data type, and the value is the data itself.

                          For more information, see `Data Types
                          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                          in the *Amazon DynamoDB Developer Guide* .

                    - **L** *(list) --*

                      An attribute of type List. For example:

                       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

                      - *(dict) --*

                        Represents the data for an attribute.

                        Each attribute value is described as a name-value pair. The name is the data
                        type, and the value is the data itself.

                        For more information, see `Data Types
                        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                        in the *Amazon DynamoDB Developer Guide* .

                    - **NULL** *(boolean) --*

                      An attribute of type Null. For example:

                       ``"NULL": true``

                    - **BOOL** *(boolean) --*

                      An attribute of type Boolean. For example:

                       ``"BOOL": true``

    - **ItemCollectionMetrics** *(dict) --*

      A list of tables that were processed by ``BatchWriteItem`` and, for each table, information
      about any item collections that were affected by individual ``DeleteItem`` or ``PutItem``
      operations.

      Each entry consists of the following subelements:

      * ``ItemCollectionKey`` - The partition key value of the item collection. This is the same as
      the partition key value of the item.

      * ``SizeEstimateRangeGB`` - An estimate of item collection size, expressed in GB. This is a
      two-element array containing a lower bound and an upper bound for the estimate. The estimate
      includes the size of all the items in the table, plus the size of all attributes projected
      into all of the local secondary indexes on the table. Use this estimate to measure whether a
      local secondary index is approaching its size limit. The estimate is subject to change over
      time; therefore, do not rely on the precision or accuracy of the estimate.

      - *(string) --*

        - *(list) --*

          - *(dict) --*

            Information about item collections, if any, that were affected by the operation.
            ``ItemCollectionMetrics`` is only returned if the request asked for it. If the table
            does not have any local secondary indexes, this information is not returned in the
            response.

            - **ItemCollectionKey** *(dict) --*

              The partition key value of the item collection. This value is the same as the
              partition key value of the item.

              - *(string) --*

                - *(dict) --*

                  Represents the data for an attribute.

                  Each attribute value is described as a name-value pair. The name is the data type,
                  and the value is the data itself.

                  For more information, see `Data Types
                  <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                  in the *Amazon DynamoDB Developer Guide* .

                  - **S** *(string) --*

                    An attribute of type String. For example:

                     ``"S": "Hello"``

                  - **N** *(string) --*

                    An attribute of type Number. For example:

                     ``"N": "123.45"``

                    Numbers are sent across the network to DynamoDB as strings, to maximize
                    compatibility across languages and libraries. However, DynamoDB treats them as
                    number type attributes for mathematical operations.

                  - **B** *(bytes) --*

                    An attribute of type Binary. For example:

                     ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

                  - **SS** *(list) --*

                    An attribute of type String Set. For example:

                     ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

                    - *(string) --*

                  - **NS** *(list) --*

                    An attribute of type Number Set. For example:

                     ``"NS": ["42.2", "-19", "7.5", "3.14"]``

                    Numbers are sent across the network to DynamoDB as strings, to maximize
                    compatibility across languages and libraries. However, DynamoDB treats them as
                    number type attributes for mathematical operations.

                    - *(string) --*

                  - **BS** *(list) --*

                    An attribute of type Binary Set. For example:

                     ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

                    - *(bytes) --*

                  - **M** *(dict) --*

                    An attribute of type Map. For example:

                     ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

                    - *(string) --*

                      - *(dict) --*

                        Represents the data for an attribute.

                        Each attribute value is described as a name-value pair. The name is the data
                        type, and the value is the data itself.

                        For more information, see `Data Types
                        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                        in the *Amazon DynamoDB Developer Guide* .

                  - **L** *(list) --*

                    An attribute of type List. For example:

                     ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

                    - *(dict) --*

                      Represents the data for an attribute.

                      Each attribute value is described as a name-value pair. The name is the data
                      type, and the value is the data itself.

                      For more information, see `Data Types
                      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                      in the *Amazon DynamoDB Developer Guide* .

                  - **NULL** *(boolean) --*

                    An attribute of type Null. For example:

                     ``"NULL": true``

                  - **BOOL** *(boolean) --*

                    An attribute of type Boolean. For example:

                     ``"BOOL": true``

            - **SizeEstimateRangeGB** *(list) --*

              An estimate of item collection size, in gigabytes. This value is a two-element array
              containing a lower bound and an upper bound for the estimate. The estimate includes
              the size of all the items in the table, plus the size of all attributes projected into
              all of the local secondary indexes on that table. Use this estimate to measure whether
              a local secondary index is approaching its size limit.

              The estimate is subject to change over time; therefore, do not rely on the precision
              or accuracy of the estimate.

              - *(float) --*

    - **ConsumedCapacity** *(list) --*

      The capacity units consumed by the entire ``BatchWriteItem`` operation.

      Each element consists of:

      * ``TableName`` - The table that consumed the provisioned throughput.

      * ``CapacityUnits`` - The total number of capacity units consumed.

      - *(dict) --*

        The capacity units consumed by an operation. The data returned includes the total
        provisioned throughput consumed, along with statistics for the table and any indexes
        involved in the operation. ``ConsumedCapacity`` is only returned if the request asked for
        it. For more information, see `Provisioned Throughput
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html>`__
        in the *Amazon DynamoDB Developer Guide* .

        - **TableName** *(string) --*

          The name of the table that was affected by the operation.

        - **CapacityUnits** *(float) --*

          The total number of capacity units consumed by the operation.

        - **ReadCapacityUnits** *(float) --*

          The total number of read capacity units consumed by the operation.

        - **WriteCapacityUnits** *(float) --*

          The total number of write capacity units consumed by the operation.

        - **Table** *(dict) --*

          The amount of throughput consumed on the table affected by the operation.

          - **ReadCapacityUnits** *(float) --*

            The total number of read capacity units consumed on a table or an index.

          - **WriteCapacityUnits** *(float) --*

            The total number of write capacity units consumed on a table or an index.

          - **CapacityUnits** *(float) --*

            The total number of capacity units consumed on a table or an index.

        - **LocalSecondaryIndexes** *(dict) --*

          The amount of throughput consumed on each local index affected by the operation.

          - *(string) --*

            - *(dict) --*

              Represents the amount of provisioned throughput capacity consumed on a table or an
              index.

              - **ReadCapacityUnits** *(float) --*

                The total number of read capacity units consumed on a table or an index.

              - **WriteCapacityUnits** *(float) --*

                The total number of write capacity units consumed on a table or an index.

              - **CapacityUnits** *(float) --*

                The total number of capacity units consumed on a table or an index.

        - **GlobalSecondaryIndexes** *(dict) --*

          The amount of throughput consumed on each global index affected by the operation.

          - *(string) --*

            - *(dict) --*

              Represents the amount of provisioned throughput capacity consumed on a table or an
              index.

              - **ReadCapacityUnits** *(float) --*

                The total number of read capacity units consumed on a table or an index.

              - **WriteCapacityUnits** *(float) --*

                The total number of write capacity units consumed on a table or an index.

              - **CapacityUnits** *(float) --*

                The total number of capacity units consumed on a table or an index.
    """


_ServiceResourceCreateTableAttributeDefinitionsTypeDef = TypedDict(
    "_ServiceResourceCreateTableAttributeDefinitionsTypeDef",
    {"AttributeName": str, "AttributeType": str},
)


class ServiceResourceCreateTableAttributeDefinitionsTypeDef(
    _ServiceResourceCreateTableAttributeDefinitionsTypeDef
):
    """
    Type definition for `ServiceResourceCreateTable` `AttributeDefinitions`

    Represents an attribute for describing the key schema for the table and indexes.

    - **AttributeName** *(string) --* **[REQUIRED]**

      A name for the attribute.

    - **AttributeType** *(string) --* **[REQUIRED]**

      The data type for the attribute, where:

      * ``S`` - the attribute is of type String

      * ``N`` - the attribute is of type Number

      * ``B`` - the attribute is of type Binary
    """


_ServiceResourceCreateTableGlobalSecondaryIndexesKeySchemaTypeDef = TypedDict(
    "_ServiceResourceCreateTableGlobalSecondaryIndexesKeySchemaTypeDef",
    {"AttributeName": str, "KeyType": str},
)


class ServiceResourceCreateTableGlobalSecondaryIndexesKeySchemaTypeDef(
    _ServiceResourceCreateTableGlobalSecondaryIndexesKeySchemaTypeDef
):
    """
    Type definition for `ServiceResourceCreateTableGlobalSecondaryIndexes` `KeySchema`

    Represents *a single element* of a key schema. A key schema specifies the attributes that make
    up the primary key of a table, or the key attributes of an index.

    A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
    simple primary key would be represented by one ``KeySchemaElement`` (for the partition key). A
    composite primary key would require one ``KeySchemaElement`` for the partition key, and another
    ``KeySchemaElement`` for the sort key.

    A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The data
    type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a
    Map.

    - **AttributeName** *(string) --* **[REQUIRED]**

      The name of a key attribute.

    - **KeyType** *(string) --* **[REQUIRED]**

      The role that this key attribute will assume:

      * ``HASH`` - partition key

      * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.
    """


_ServiceResourceCreateTableGlobalSecondaryIndexesProjectionTypeDef = TypedDict(
    "_ServiceResourceCreateTableGlobalSecondaryIndexesProjectionTypeDef",
    {"ProjectionType": str, "NonKeyAttributes": List[str]},
    total=False,
)


class ServiceResourceCreateTableGlobalSecondaryIndexesProjectionTypeDef(
    _ServiceResourceCreateTableGlobalSecondaryIndexesProjectionTypeDef
):
    """
    Type definition for `ServiceResourceCreateTableGlobalSecondaryIndexes` `Projection`

    Represents attributes that are copied (projected) from the table into the global secondary
    index. These are in addition to the primary key attributes and index key attributes, which are
    automatically projected.

    - **ProjectionType** *(string) --*

      The set of attributes that are projected into the index:

      * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

      * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list of
      projected attributes is in ``NonKeyAttributes`` .

      * ``ALL`` - All of the table attributes are projected into the index.

    - **NonKeyAttributes** *(list) --*

      Represents the non-key attribute names which will be projected into the index.

      For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all of the
      local secondary indexes, must not exceed 20. If you project the same attribute into two
      different indexes, this counts as two distinct attributes when determining the total.

      - *(string) --*
    """


_ServiceResourceCreateTableGlobalSecondaryIndexesProvisionedThroughputTypeDef = TypedDict(
    "_ServiceResourceCreateTableGlobalSecondaryIndexesProvisionedThroughputTypeDef",
    {"ReadCapacityUnits": int, "WriteCapacityUnits": int},
)


class ServiceResourceCreateTableGlobalSecondaryIndexesProvisionedThroughputTypeDef(
    _ServiceResourceCreateTableGlobalSecondaryIndexesProvisionedThroughputTypeDef
):
    """
    Type definition for `ServiceResourceCreateTableGlobalSecondaryIndexes` `ProvisionedThroughput`

    Represents the provisioned throughput settings for the specified global secondary index.

    For current minimum and maximum provisioned throughput values, see `Limits
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the *Amazon
    DynamoDB Developer Guide* .

    - **ReadCapacityUnits** *(integer) --* **[REQUIRED]**

      The maximum number of strongly consistent reads consumed per second before DynamoDB returns a
      ``ThrottlingException`` . For more information, see `Specifying Read and Write Requirements
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
      in the *Amazon DynamoDB Developer Guide* .

      If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.

    - **WriteCapacityUnits** *(integer) --* **[REQUIRED]**

      The maximum number of writes consumed per second before DynamoDB returns a
      ``ThrottlingException`` . For more information, see `Specifying Read and Write Requirements
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
      in the *Amazon DynamoDB Developer Guide* .

      If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.
    """


_RequiredServiceResourceCreateTableGlobalSecondaryIndexesTypeDef = TypedDict(
    "_RequiredServiceResourceCreateTableGlobalSecondaryIndexesTypeDef",
    {
        "IndexName": str,
        "KeySchema": List[ServiceResourceCreateTableGlobalSecondaryIndexesKeySchemaTypeDef],
        "Projection": ServiceResourceCreateTableGlobalSecondaryIndexesProjectionTypeDef,
    },
)
_OptionalServiceResourceCreateTableGlobalSecondaryIndexesTypeDef = TypedDict(
    "_OptionalServiceResourceCreateTableGlobalSecondaryIndexesTypeDef",
    {
        "ProvisionedThroughput": ServiceResourceCreateTableGlobalSecondaryIndexesProvisionedThroughputTypeDef
    },
    total=False,
)


class ServiceResourceCreateTableGlobalSecondaryIndexesTypeDef(
    _RequiredServiceResourceCreateTableGlobalSecondaryIndexesTypeDef,
    _OptionalServiceResourceCreateTableGlobalSecondaryIndexesTypeDef,
):
    """
    Type definition for `ServiceResourceCreateTable` `GlobalSecondaryIndexes`

    Represents the properties of a global secondary index.

    - **IndexName** *(string) --* **[REQUIRED]**

      The name of the global secondary index. The name must be unique among all other indexes on
      this table.

    - **KeySchema** *(list) --* **[REQUIRED]**

      The complete key schema for a global secondary index, which consists of one or more pairs of
      attribute names and key types:

      * ``HASH`` - partition key

      * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.

      - *(dict) --*

        Represents *a single element* of a key schema. A key schema specifies the attributes that
        make up the primary key of a table, or the key attributes of an index.

        A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
        simple primary key would be represented by one ``KeySchemaElement`` (for the partition key).
        A composite primary key would require one ``KeySchemaElement`` for the partition key, and
        another ``KeySchemaElement`` for the sort key.

        A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The
        data type must be one of String, Number, or Binary. The attribute cannot be nested within a
        List or a Map.

        - **AttributeName** *(string) --* **[REQUIRED]**

          The name of a key attribute.

        - **KeyType** *(string) --* **[REQUIRED]**

          The role that this key attribute will assume:

          * ``HASH`` - partition key

          * ``RANGE`` - sort key

          .. note::

            The partition key of an item is also known as its *hash attribute* . The term "hash
            attribute" derives from DynamoDB's usage of an internal hash function to evenly
            distribute data items across partitions, based on their partition key values.

            The sort key of an item is also known as its *range attribute* . The term "range
            attribute" derives from the way DynamoDB stores items with the same partition key
            physically close together, in sorted order by the sort key value.

    - **Projection** *(dict) --* **[REQUIRED]**

      Represents attributes that are copied (projected) from the table into the global secondary
      index. These are in addition to the primary key attributes and index key attributes, which are
      automatically projected.

      - **ProjectionType** *(string) --*

        The set of attributes that are projected into the index:

        * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

        * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list
        of projected attributes is in ``NonKeyAttributes`` .

        * ``ALL`` - All of the table attributes are projected into the index.

      - **NonKeyAttributes** *(list) --*

        Represents the non-key attribute names which will be projected into the index.

        For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all of
        the local secondary indexes, must not exceed 20. If you project the same attribute into two
        different indexes, this counts as two distinct attributes when determining the total.

        - *(string) --*

    - **ProvisionedThroughput** *(dict) --*

      Represents the provisioned throughput settings for the specified global secondary index.

      For current minimum and maximum provisioned throughput values, see `Limits
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
      *Amazon DynamoDB Developer Guide* .

      - **ReadCapacityUnits** *(integer) --* **[REQUIRED]**

        The maximum number of strongly consistent reads consumed per second before DynamoDB returns
        a ``ThrottlingException`` . For more information, see `Specifying Read and Write
        Requirements
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
        in the *Amazon DynamoDB Developer Guide* .

        If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.

      - **WriteCapacityUnits** *(integer) --* **[REQUIRED]**

        The maximum number of writes consumed per second before DynamoDB returns a
        ``ThrottlingException`` . For more information, see `Specifying Read and Write Requirements
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
        in the *Amazon DynamoDB Developer Guide* .

        If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.
    """


_ServiceResourceCreateTableKeySchemaTypeDef = TypedDict(
    "_ServiceResourceCreateTableKeySchemaTypeDef", {"AttributeName": str, "KeyType": str}
)


class ServiceResourceCreateTableKeySchemaTypeDef(_ServiceResourceCreateTableKeySchemaTypeDef):
    """
    Type definition for `ServiceResourceCreateTable` `KeySchema`

    Represents *a single element* of a key schema. A key schema specifies the attributes that make
    up the primary key of a table, or the key attributes of an index.

    A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
    simple primary key would be represented by one ``KeySchemaElement`` (for the partition key). A
    composite primary key would require one ``KeySchemaElement`` for the partition key, and another
    ``KeySchemaElement`` for the sort key.

    A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The data
    type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a
    Map.

    - **AttributeName** *(string) --* **[REQUIRED]**

      The name of a key attribute.

    - **KeyType** *(string) --* **[REQUIRED]**

      The role that this key attribute will assume:

      * ``HASH`` - partition key

      * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.
    """


_ServiceResourceCreateTableLocalSecondaryIndexesKeySchemaTypeDef = TypedDict(
    "_ServiceResourceCreateTableLocalSecondaryIndexesKeySchemaTypeDef",
    {"AttributeName": str, "KeyType": str},
)


class ServiceResourceCreateTableLocalSecondaryIndexesKeySchemaTypeDef(
    _ServiceResourceCreateTableLocalSecondaryIndexesKeySchemaTypeDef
):
    """
    Type definition for `ServiceResourceCreateTableLocalSecondaryIndexes` `KeySchema`

    Represents *a single element* of a key schema. A key schema specifies the attributes that make
    up the primary key of a table, or the key attributes of an index.

    A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
    simple primary key would be represented by one ``KeySchemaElement`` (for the partition key). A
    composite primary key would require one ``KeySchemaElement`` for the partition key, and another
    ``KeySchemaElement`` for the sort key.

    A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The data
    type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a
    Map.

    - **AttributeName** *(string) --* **[REQUIRED]**

      The name of a key attribute.

    - **KeyType** *(string) --* **[REQUIRED]**

      The role that this key attribute will assume:

      * ``HASH`` - partition key

      * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.
    """


_ServiceResourceCreateTableLocalSecondaryIndexesProjectionTypeDef = TypedDict(
    "_ServiceResourceCreateTableLocalSecondaryIndexesProjectionTypeDef",
    {"ProjectionType": str, "NonKeyAttributes": List[str]},
    total=False,
)


class ServiceResourceCreateTableLocalSecondaryIndexesProjectionTypeDef(
    _ServiceResourceCreateTableLocalSecondaryIndexesProjectionTypeDef
):
    """
    Type definition for `ServiceResourceCreateTableLocalSecondaryIndexes` `Projection`

    Represents attributes that are copied (projected) from the table into the local secondary index.
    These are in addition to the primary key attributes and index key attributes, which are
    automatically projected.

    - **ProjectionType** *(string) --*

      The set of attributes that are projected into the index:

      * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

      * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list of
      projected attributes is in ``NonKeyAttributes`` .

      * ``ALL`` - All of the table attributes are projected into the index.

    - **NonKeyAttributes** *(list) --*

      Represents the non-key attribute names which will be projected into the index.

      For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all of the
      local secondary indexes, must not exceed 20. If you project the same attribute into two
      different indexes, this counts as two distinct attributes when determining the total.

      - *(string) --*
    """


_ServiceResourceCreateTableLocalSecondaryIndexesTypeDef = TypedDict(
    "_ServiceResourceCreateTableLocalSecondaryIndexesTypeDef",
    {
        "IndexName": str,
        "KeySchema": List[ServiceResourceCreateTableLocalSecondaryIndexesKeySchemaTypeDef],
        "Projection": ServiceResourceCreateTableLocalSecondaryIndexesProjectionTypeDef,
    },
)


class ServiceResourceCreateTableLocalSecondaryIndexesTypeDef(
    _ServiceResourceCreateTableLocalSecondaryIndexesTypeDef
):
    """
    Type definition for `ServiceResourceCreateTable` `LocalSecondaryIndexes`

    Represents the properties of a local secondary index.

    - **IndexName** *(string) --* **[REQUIRED]**

      The name of the local secondary index. The name must be unique among all other indexes on this
      table.

    - **KeySchema** *(list) --* **[REQUIRED]**

      The complete key schema for the local secondary index, consisting of one or more pairs of
      attribute names and key types:

      * ``HASH`` - partition key

      * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.

      - *(dict) --*

        Represents *a single element* of a key schema. A key schema specifies the attributes that
        make up the primary key of a table, or the key attributes of an index.

        A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
        simple primary key would be represented by one ``KeySchemaElement`` (for the partition key).
        A composite primary key would require one ``KeySchemaElement`` for the partition key, and
        another ``KeySchemaElement`` for the sort key.

        A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The
        data type must be one of String, Number, or Binary. The attribute cannot be nested within a
        List or a Map.

        - **AttributeName** *(string) --* **[REQUIRED]**

          The name of a key attribute.

        - **KeyType** *(string) --* **[REQUIRED]**

          The role that this key attribute will assume:

          * ``HASH`` - partition key

          * ``RANGE`` - sort key

          .. note::

            The partition key of an item is also known as its *hash attribute* . The term "hash
            attribute" derives from DynamoDB's usage of an internal hash function to evenly
            distribute data items across partitions, based on their partition key values.

            The sort key of an item is also known as its *range attribute* . The term "range
            attribute" derives from the way DynamoDB stores items with the same partition key
            physically close together, in sorted order by the sort key value.

    - **Projection** *(dict) --* **[REQUIRED]**

      Represents attributes that are copied (projected) from the table into the local secondary
      index. These are in addition to the primary key attributes and index key attributes, which are
      automatically projected.

      - **ProjectionType** *(string) --*

        The set of attributes that are projected into the index:

        * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

        * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list
        of projected attributes is in ``NonKeyAttributes`` .

        * ``ALL`` - All of the table attributes are projected into the index.

      - **NonKeyAttributes** *(list) --*

        Represents the non-key attribute names which will be projected into the index.

        For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all of
        the local secondary indexes, must not exceed 20. If you project the same attribute into two
        different indexes, this counts as two distinct attributes when determining the total.

        - *(string) --*
    """


_ServiceResourceCreateTableProvisionedThroughputTypeDef = TypedDict(
    "_ServiceResourceCreateTableProvisionedThroughputTypeDef",
    {"ReadCapacityUnits": int, "WriteCapacityUnits": int},
)


class ServiceResourceCreateTableProvisionedThroughputTypeDef(
    _ServiceResourceCreateTableProvisionedThroughputTypeDef
):
    """
    Type definition for `ServiceResourceCreateTable` `ProvisionedThroughput`

    Represents the provisioned throughput settings for a specified table or index. The settings can
    be modified using the ``UpdateTable`` operation.

    If you set BillingMode as ``PROVISIONED`` , you must specify this property. If you set
    BillingMode as ``PAY_PER_REQUEST`` , you cannot specify this property.

    For current minimum and maximum provisioned throughput values, see `Limits
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the *Amazon
    DynamoDB Developer Guide* .

    - **ReadCapacityUnits** *(integer) --* **[REQUIRED]**

      The maximum number of strongly consistent reads consumed per second before DynamoDB returns a
      ``ThrottlingException`` . For more information, see `Specifying Read and Write Requirements
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
      in the *Amazon DynamoDB Developer Guide* .

      If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.

    - **WriteCapacityUnits** *(integer) --* **[REQUIRED]**

      The maximum number of writes consumed per second before DynamoDB returns a
      ``ThrottlingException`` . For more information, see `Specifying Read and Write Requirements
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
      in the *Amazon DynamoDB Developer Guide* .

      If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.
    """


_ServiceResourceCreateTableSSESpecificationTypeDef = TypedDict(
    "_ServiceResourceCreateTableSSESpecificationTypeDef",
    {"Enabled": bool, "SSEType": str, "KMSMasterKeyId": str},
    total=False,
)


class ServiceResourceCreateTableSSESpecificationTypeDef(
    _ServiceResourceCreateTableSSESpecificationTypeDef
):
    """
    Type definition for `ServiceResourceCreateTable` `SSESpecification`

    Represents the settings used to enable server-side encryption.

    - **Enabled** *(boolean) --*

      Indicates whether server-side encryption is done using an AWS managed CMK or an AWS owned CMK.
      If enabled (true), server-side encryption type is set to ``KMS`` and an AWS managed CMK is
      used (AWS KMS charges apply). If disabled (false) or not specified, server-side encryption is
      set to AWS owned CMK.

    - **SSEType** *(string) --*

      Server-side encryption type. The only supported value is:

      * ``KMS`` - Server-side encryption that uses AWS Key Management Service. The key is stored in
      your account and is managed by AWS KMS (AWS KMS charges apply).

    - **KMSMasterKeyId** *(string) --*

      The AWS KMS customer master key (CMK) that should be used for the AWS KMS encryption. To
      specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. Note that
      you should only provide this parameter if the key is different from the default DynamoDB
      customer master key alias/aws/dynamodb.
    """


_RequiredServiceResourceCreateTableStreamSpecificationTypeDef = TypedDict(
    "_RequiredServiceResourceCreateTableStreamSpecificationTypeDef", {"StreamEnabled": bool}
)
_OptionalServiceResourceCreateTableStreamSpecificationTypeDef = TypedDict(
    "_OptionalServiceResourceCreateTableStreamSpecificationTypeDef",
    {"StreamViewType": str},
    total=False,
)


class ServiceResourceCreateTableStreamSpecificationTypeDef(
    _RequiredServiceResourceCreateTableStreamSpecificationTypeDef,
    _OptionalServiceResourceCreateTableStreamSpecificationTypeDef,
):
    """
    Type definition for `ServiceResourceCreateTable` `StreamSpecification`

    The settings for DynamoDB Streams on the table. These settings consist of:

    * ``StreamEnabled`` - Indicates whether DynamoDB Streams is to be enabled (true) or disabled
    (false).

    * ``StreamViewType`` - When an item in the table is modified, ``StreamViewType`` determines what
    information is written to the table's stream. Valid values for ``StreamViewType`` are:

      * ``KEYS_ONLY`` - Only the key attributes of the modified item are written to the stream.

      * ``NEW_IMAGE`` - The entire item, as it appears after it was modified, is written to the
      stream.

      * ``OLD_IMAGE`` - The entire item, as it appeared before it was modified, is written to the
      stream.

      * ``NEW_AND_OLD_IMAGES`` - Both the new and the old item images of the item are written to the
      stream.

    - **StreamEnabled** *(boolean) --* **[REQUIRED]**

      Indicates whether DynamoDB Streams is enabled (true) or disabled (false) on the table.

    - **StreamViewType** *(string) --*

      When an item in the table is modified, ``StreamViewType`` determines what information is
      written to the stream for this table. Valid values for ``StreamViewType`` are:

      * ``KEYS_ONLY`` - Only the key attributes of the modified item are written to the stream.

      * ``NEW_IMAGE`` - The entire item, as it appears after it was modified, is written to the
      stream.

      * ``OLD_IMAGE`` - The entire item, as it appeared before it was modified, is written to the
      stream.

      * ``NEW_AND_OLD_IMAGES`` - Both the new and the old item images of the item are written to the
      stream.
    """


_ServiceResourceCreateTableTagsTypeDef = TypedDict(
    "_ServiceResourceCreateTableTagsTypeDef", {"Key": str, "Value": str}
)


class ServiceResourceCreateTableTagsTypeDef(_ServiceResourceCreateTableTagsTypeDef):
    """
    Type definition for `ServiceResourceCreateTable` `Tags`

    Describes a tag. A tag is a key-value pair. You can add up to 50 tags to a single DynamoDB
    table.

    AWS-assigned tag names and values are automatically assigned the ``aws:`` prefix, which the user
    cannot assign. AWS-assigned tag names do not count towards the tag limit of 50. User-assigned
    tag names have the prefix ``user:`` in the Cost Allocation Report. You cannot backdate the
    application of a tag.

    For an overview on tagging DynamoDB resources, see `Tagging for DynamoDB
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tagging.html>`__ in the
    *Amazon DynamoDB Developer Guide* .

    - **Key** *(string) --* **[REQUIRED]**

      The key of the tag. Tag keys are case sensitive. Each DynamoDB table can only have up to one
      tag with the same key. If you try to add an existing tag (same key), the existing tag value
      will be updated to the new value.

    - **Value** *(string) --* **[REQUIRED]**

      The value of the tag. Tag values are case-sensitive and can be null.
    """


_TableDeleteItemExpectedAttributeValueListTypeDef = TypedDict(
    "_TableDeleteItemExpectedAttributeValueListTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class TableDeleteItemExpectedAttributeValueListTypeDef(
    _TableDeleteItemExpectedAttributeValueListTypeDef
):
    """
    Type definition for `TableDeleteItemExpected` `AttributeValueList`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_TableDeleteItemExpectedValueTypeDef = TypedDict(
    "_TableDeleteItemExpectedValueTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class TableDeleteItemExpectedValueTypeDef(_TableDeleteItemExpectedValueTypeDef):
    """
    Type definition for `TableDeleteItemExpected` `Value`

    Represents the data for the expected attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_TableDeleteItemExpectedTypeDef = TypedDict(
    "_TableDeleteItemExpectedTypeDef",
    {
        "Value": TableDeleteItemExpectedValueTypeDef,
        "Exists": bool,
        "ComparisonOperator": str,
        "AttributeValueList": List[TableDeleteItemExpectedAttributeValueListTypeDef],
    },
    total=False,
)


class TableDeleteItemExpectedTypeDef(_TableDeleteItemExpectedTypeDef):
    """
    Type definition for `TableDeleteItem` `Expected`

    Represents a condition to be compared with an attribute value. This condition can be used with
    ``DeleteItem`` , ``PutItem`` , or ``UpdateItem`` operations; if the comparison evaluates to
    true, the operation succeeds; if not, the operation fails. You can use
    ``ExpectedAttributeValue`` in one of two different ways:

    * Use ``AttributeValueList`` to specify one or more values to compare against an attribute. Use
    ``ComparisonOperator`` to specify how you want to perform the comparison. If the comparison
    evaluates to true, then the conditional operation succeeds.

    * Use ``Value`` to specify a value that DynamoDB will compare against an attribute. If the
    values match, then ``ExpectedAttributeValue`` evaluates to true and the conditional operation
    succeeds. Optionally, you can also set ``Exists`` to false, indicating that you *do not* expect
    to find the attribute value in the table. In this case, the conditional operation succeeds only
    if the comparison evaluates to false.

     ``Value`` and ``Exists`` are incompatible with ``AttributeValueList`` and
     ``ComparisonOperator`` . Note that if you use both sets of parameters at once, DynamoDB will
     return a ``ValidationException`` exception.

    - **Value** *(dict) --*

      Represents the data for the expected attribute.

      Each attribute value is described as a name-value pair. The name is the data type, and the
      value is the data itself.

      For more information, see `Data Types
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
      in the *Amazon DynamoDB Developer Guide* .

      - **S** *(string) --*

        An attribute of type String. For example:

         ``"S": "Hello"``

      - **N** *(string) --*

        An attribute of type Number. For example:

         ``"N": "123.45"``

        Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
        languages and libraries. However, DynamoDB treats them as number type attributes for
        mathematical operations.

      - **B** *(bytes) --*

        An attribute of type Binary. For example:

         ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

      - **SS** *(list) --*

        An attribute of type String Set. For example:

         ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

        - *(string) --*

      - **NS** *(list) --*

        An attribute of type Number Set. For example:

         ``"NS": ["42.2", "-19", "7.5", "3.14"]``

        Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
        languages and libraries. However, DynamoDB treats them as number type attributes for
        mathematical operations.

        - *(string) --*

      - **BS** *(list) --*

        An attribute of type Binary Set. For example:

         ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

        - *(bytes) --*

      - **M** *(dict) --*

        An attribute of type Map. For example:

         ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

        - *(string) --*

          - *(dict) --*

            Represents the data for an attribute.

            Each attribute value is described as a name-value pair. The name is the data type, and
            the value is the data itself.

            For more information, see `Data Types
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
            in the *Amazon DynamoDB Developer Guide* .

      - **L** *(list) --*

        An attribute of type List. For example:

         ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

      - **NULL** *(boolean) --*

        An attribute of type Null. For example:

         ``"NULL": true``

      - **BOOL** *(boolean) --*

        An attribute of type Boolean. For example:

         ``"BOOL": true``

    - **Exists** *(boolean) --*

      Causes DynamoDB to evaluate the value before attempting a conditional operation:

      * If ``Exists`` is ``true`` , DynamoDB will check to see if that attribute value already
      exists in the table. If it is found, then the operation succeeds. If it is not found, the
      operation fails with a ``ConditionCheckFailedException`` .

      * If ``Exists`` is ``false`` , DynamoDB assumes that the attribute value does not exist in the
      table. If in fact the value does not exist, then the assumption is valid and the operation
      succeeds. If the value is found, despite the assumption that it does not exist, the operation
      fails with a ``ConditionCheckFailedException`` .

      The default setting for ``Exists`` is ``true`` . If you supply a ``Value`` all by itself,
      DynamoDB assumes the attribute exists: You don't have to set ``Exists`` to ``true`` , because
      it is implied.

      DynamoDB returns a ``ValidationException`` if:

      * ``Exists`` is ``true`` but there is no ``Value`` to check. (You expect a value to exist, but
      don't specify what that value is.)

      * ``Exists`` is ``false`` but you also provide a ``Value`` . (You cannot expect an attribute
      to have a value, while also expecting it not to exist.)

    - **ComparisonOperator** *(string) --*

      A comparator for evaluating attributes in the ``AttributeValueList`` . For example, equals,
      greater than, less than, etc.

      The following comparison operators are available:

       ``EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH
       | IN
       | BETWEEN``

      The following are descriptions of each comparison operator.

      * ``EQ`` : Equal. ``EQ`` is supported for all data types, including lists and maps.
      ``AttributeValueList`` can contain only one ``AttributeValue`` element of type String, Number,
      Binary, String Set, Number Set, or Binary Set. If an item contains an ``AttributeValue``
      element of a different type than the one provided in the request, the value does not match.
      For example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` . Also, ``{"N":"6"}`` does not equal
      ``{"NS":["6", "2", "1"]}`` .

      * ``NE`` : Not equal. ``NE`` is supported for all data types, including lists and maps.
      ``AttributeValueList`` can contain only one ``AttributeValue`` of type String, Number, Binary,
      String Set, Number Set, or Binary Set. If an item contains an ``AttributeValue`` of a
      different type than the one provided in the request, the value does not match. For example,
      ``{"S":"6"}`` does not equal ``{"N":"6"}`` . Also, ``{"N":"6"}`` does not equal ``{"NS":["6",
      "2", "1"]}`` .

      * ``LE`` : Less than or equal.   ``AttributeValueList`` can contain only one
      ``AttributeValue`` element of type String, Number, or Binary (not a set type). If an item
      contains an ``AttributeValue`` element of a different type than the one provided in the
      request, the value does not match. For example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` .
      Also, ``{"N":"6"}`` does not compare to ``{"NS":["6", "2", "1"]}`` .

      * ``LT`` : Less than.   ``AttributeValueList`` can contain only one ``AttributeValue`` of type
      String, Number, or Binary (not a set type). If an item contains an ``AttributeValue`` element
      of a different type than the one provided in the request, the value does not match. For
      example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` . Also, ``{"N":"6"}`` does not compare to
      ``{"NS":["6", "2", "1"]}`` .

      * ``GE`` : Greater than or equal.   ``AttributeValueList`` can contain only one
      ``AttributeValue`` element of type String, Number, or Binary (not a set type). If an item
      contains an ``AttributeValue`` element of a different type than the one provided in the
      request, the value does not match. For example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` .
      Also, ``{"N":"6"}`` does not compare to ``{"NS":["6", "2", "1"]}`` .

      * ``GT`` : Greater than.   ``AttributeValueList`` can contain only one ``AttributeValue``
      element of type String, Number, or Binary (not a set type). If an item contains an
      ``AttributeValue`` element of a different type than the one provided in the request, the value
      does not match. For example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` . Also, ``{"N":"6"}``
      does not compare to ``{"NS":["6", "2", "1"]}`` .

      * ``NOT_NULL`` : The attribute exists. ``NOT_NULL`` is supported for all data types, including
      lists and maps.

      .. note::

         This operator tests for the existence of an attribute, not its data type. If the data type
         of attribute "``a`` " is null, and you evaluate it using ``NOT_NULL`` , the result is a
         Boolean ``true`` . This result is because the attribute "``a`` " exists; its data type is
         not relevant to the ``NOT_NULL`` comparison operator.

      * ``NULL`` : The attribute does not exist. ``NULL`` is supported for all data types, including
      lists and maps.

      .. note::

         This operator tests for the nonexistence of an attribute, not its data type. If the data
         type of attribute "``a`` " is null, and you evaluate it using ``NULL`` , the result is a
         Boolean ``false`` . This is because the attribute "``a`` " exists; its data type is not
         relevant to the ``NULL`` comparison operator.

      * ``CONTAINS`` : Checks for a subsequence, or value in a set.  ``AttributeValueList`` can
      contain only one ``AttributeValue`` element of type String, Number, or Binary (not a set
      type). If the target attribute of the comparison is of type String, then the operator checks
      for a substring match. If the target attribute of the comparison is of type Binary, then the
      operator looks for a subsequence of the target that matches the input. If the target attribute
      of the comparison is a set ("``SS`` ", "``NS`` ", or "``BS`` "), then the operator evaluates
      to true if it finds an exact match with any member of the set. CONTAINS is supported for
      lists: When evaluating "``a CONTAINS b`` ", "``a`` " can be a list; however, "``b`` " cannot
      be a set, a map, or a list.

      * ``NOT_CONTAINS`` : Checks for absence of a subsequence, or absence of a value in a set.
      ``AttributeValueList`` can contain only one ``AttributeValue`` element of type String, Number,
      or Binary (not a set type). If the target attribute of the comparison is a String, then the
      operator checks for the absence of a substring match. If the target attribute of the
      comparison is Binary, then the operator checks for the absence of a subsequence of the target
      that matches the input. If the target attribute of the comparison is a set ("``SS`` ", "``NS``
      ", or "``BS`` "), then the operator evaluates to true if it *does not* find an exact match
      with any member of the set. NOT_CONTAINS is supported for lists: When evaluating "``a NOT
      CONTAINS b`` ", "``a`` " can be a list; however, "``b`` " cannot be a set, a map, or a list.

      * ``BEGINS_WITH`` : Checks for a prefix.   ``AttributeValueList`` can contain only one
      ``AttributeValue`` of type String or Binary (not a Number or a set type). The target attribute
      of the comparison must be of type String or Binary (not a Number or a set type).

      * ``IN`` : Checks for matching elements in a list.  ``AttributeValueList`` can contain one or
      more ``AttributeValue`` elements of type String, Number, or Binary. These attributes are
      compared against an existing attribute of an item. If any elements of the input are equal to
      the item attribute, the expression evaluates to true.

      * ``BETWEEN`` : Greater than or equal to the first value, and less than or equal to the second
      value.   ``AttributeValueList`` must contain two ``AttributeValue`` elements of the same type,
      either String, Number, or Binary (not a set type). A target attribute matches if the target
      value is greater than, or equal to, the first element and less than, or equal to, the second
      element. If an item contains an ``AttributeValue`` element of a different type than the one
      provided in the request, the value does not match. For example, ``{"S":"6"}`` does not compare
      to ``{"N":"6"}`` . Also, ``{"N":"6"}`` does not compare to ``{"NS":["6", "2", "1"]}``

    - **AttributeValueList** *(list) --*

      One or more values to evaluate against the supplied attribute. The number of values in the
      list depends on the ``ComparisonOperator`` being used.

      For type Number, value comparisons are numeric.

      String value comparisons for greater than, equals, or less than are based on ASCII character
      code values. For example, ``a`` is greater than ``A`` , and ``a`` is greater than ``B`` . For
      a list of code values, see `http\\://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters
      <http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters>`__ .

      For Binary, DynamoDB treats each byte of the binary data as unsigned when it compares binary
      values.

      For information on specifying data types in JSON, see `JSON Data Format
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataFormat.html>`__ in the
      *Amazon DynamoDB Developer Guide* .

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

        - **S** *(string) --*

          An attribute of type String. For example:

           ``"S": "Hello"``

        - **N** *(string) --*

          An attribute of type Number. For example:

           ``"N": "123.45"``

          Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
          across languages and libraries. However, DynamoDB treats them as number type attributes
          for mathematical operations.

        - **B** *(bytes) --*

          An attribute of type Binary. For example:

           ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

        - **SS** *(list) --*

          An attribute of type String Set. For example:

           ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

          - *(string) --*

        - **NS** *(list) --*

          An attribute of type Number Set. For example:

           ``"NS": ["42.2", "-19", "7.5", "3.14"]``

          Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
          across languages and libraries. However, DynamoDB treats them as number type attributes
          for mathematical operations.

          - *(string) --*

        - **BS** *(list) --*

          An attribute of type Binary Set. For example:

           ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

          - *(bytes) --*

        - **M** *(dict) --*

          An attribute of type Map. For example:

           ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

          - *(string) --*

            - *(dict) --*

              Represents the data for an attribute.

              Each attribute value is described as a name-value pair. The name is the data type, and
              the value is the data itself.

              For more information, see `Data Types
              <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
              in the *Amazon DynamoDB Developer Guide* .

        - **L** *(list) --*

          An attribute of type List. For example:

           ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

          - *(dict) --*

            Represents the data for an attribute.

            Each attribute value is described as a name-value pair. The name is the data type, and
            the value is the data itself.

            For more information, see `Data Types
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
            in the *Amazon DynamoDB Developer Guide* .

        - **NULL** *(boolean) --*

          An attribute of type Null. For example:

           ``"NULL": true``

        - **BOOL** *(boolean) --*

          An attribute of type Boolean. For example:

           ``"BOOL": true``
    """


_TableDeleteItemExpressionAttributeValuesTypeDef = TypedDict(
    "_TableDeleteItemExpressionAttributeValuesTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class TableDeleteItemExpressionAttributeValuesTypeDef(
    _TableDeleteItemExpressionAttributeValuesTypeDef
):
    """
    Type definition for `TableDeleteItem` `ExpressionAttributeValues`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_TableDeleteItemKeyTypeDef = TypedDict(
    "_TableDeleteItemKeyTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class TableDeleteItemKeyTypeDef(_TableDeleteItemKeyTypeDef):
    """
    Type definition for `TableDeleteItem` `Key`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_TableDeleteItemResponseAttributesTypeDef = TypedDict(
    "_TableDeleteItemResponseAttributesTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class TableDeleteItemResponseAttributesTypeDef(_TableDeleteItemResponseAttributesTypeDef):
    """
    Type definition for `TableDeleteItemResponse` `Attributes`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_TableDeleteItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef = TypedDict(
    "_TableDeleteItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef",
    {"ReadCapacityUnits": float, "WriteCapacityUnits": float, "CapacityUnits": float},
    total=False,
)


class TableDeleteItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef(
    _TableDeleteItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef
):
    """
    Type definition for `TableDeleteItemResponseConsumedCapacity` `GlobalSecondaryIndexes`

    Represents the amount of provisioned throughput capacity consumed on a table or an index.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed on a table or an index.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed on a table or an index.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed on a table or an index.
    """


_TableDeleteItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef = TypedDict(
    "_TableDeleteItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef",
    {"ReadCapacityUnits": float, "WriteCapacityUnits": float, "CapacityUnits": float},
    total=False,
)


class TableDeleteItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef(
    _TableDeleteItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef
):
    """
    Type definition for `TableDeleteItemResponseConsumedCapacity` `LocalSecondaryIndexes`

    Represents the amount of provisioned throughput capacity consumed on a table or an index.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed on a table or an index.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed on a table or an index.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed on a table or an index.
    """


_TableDeleteItemResponseConsumedCapacityTableTypeDef = TypedDict(
    "_TableDeleteItemResponseConsumedCapacityTableTypeDef",
    {"ReadCapacityUnits": float, "WriteCapacityUnits": float, "CapacityUnits": float},
    total=False,
)


class TableDeleteItemResponseConsumedCapacityTableTypeDef(
    _TableDeleteItemResponseConsumedCapacityTableTypeDef
):
    """
    Type definition for `TableDeleteItemResponseConsumedCapacity` `Table`

    The amount of throughput consumed on the table affected by the operation.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed on a table or an index.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed on a table or an index.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed on a table or an index.
    """


_TableDeleteItemResponseConsumedCapacityTypeDef = TypedDict(
    "_TableDeleteItemResponseConsumedCapacityTypeDef",
    {
        "TableName": str,
        "CapacityUnits": float,
        "ReadCapacityUnits": float,
        "WriteCapacityUnits": float,
        "Table": TableDeleteItemResponseConsumedCapacityTableTypeDef,
        "LocalSecondaryIndexes": Dict[
            str, TableDeleteItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef
        ],
        "GlobalSecondaryIndexes": Dict[
            str, TableDeleteItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef
        ],
    },
    total=False,
)


class TableDeleteItemResponseConsumedCapacityTypeDef(
    _TableDeleteItemResponseConsumedCapacityTypeDef
):
    """
    Type definition for `TableDeleteItemResponse` `ConsumedCapacity`

    The capacity units consumed by the ``DeleteItem`` operation. The data returned includes the
    total provisioned throughput consumed, along with statistics for the table and any indexes
    involved in the operation. ``ConsumedCapacity`` is only returned if the
    ``ReturnConsumedCapacity`` parameter was specified. For more information, see `Provisioned Mode
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **TableName** *(string) --*

      The name of the table that was affected by the operation.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed by the operation.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed by the operation.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed by the operation.

    - **Table** *(dict) --*

      The amount of throughput consumed on the table affected by the operation.

      - **ReadCapacityUnits** *(float) --*

        The total number of read capacity units consumed on a table or an index.

      - **WriteCapacityUnits** *(float) --*

        The total number of write capacity units consumed on a table or an index.

      - **CapacityUnits** *(float) --*

        The total number of capacity units consumed on a table or an index.

    - **LocalSecondaryIndexes** *(dict) --*

      The amount of throughput consumed on each local index affected by the operation.

      - *(string) --*

        - *(dict) --*

          Represents the amount of provisioned throughput capacity consumed on a table or an index.

          - **ReadCapacityUnits** *(float) --*

            The total number of read capacity units consumed on a table or an index.

          - **WriteCapacityUnits** *(float) --*

            The total number of write capacity units consumed on a table or an index.

          - **CapacityUnits** *(float) --*

            The total number of capacity units consumed on a table or an index.

    - **GlobalSecondaryIndexes** *(dict) --*

      The amount of throughput consumed on each global index affected by the operation.

      - *(string) --*

        - *(dict) --*

          Represents the amount of provisioned throughput capacity consumed on a table or an index.

          - **ReadCapacityUnits** *(float) --*

            The total number of read capacity units consumed on a table or an index.

          - **WriteCapacityUnits** *(float) --*

            The total number of write capacity units consumed on a table or an index.

          - **CapacityUnits** *(float) --*

            The total number of capacity units consumed on a table or an index.
    """


_TableDeleteItemResponseItemCollectionMetricsItemCollectionKeyTypeDef = TypedDict(
    "_TableDeleteItemResponseItemCollectionMetricsItemCollectionKeyTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class TableDeleteItemResponseItemCollectionMetricsItemCollectionKeyTypeDef(
    _TableDeleteItemResponseItemCollectionMetricsItemCollectionKeyTypeDef
):
    """
    Type definition for `TableDeleteItemResponseItemCollectionMetrics` `ItemCollectionKey`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_TableDeleteItemResponseItemCollectionMetricsTypeDef = TypedDict(
    "_TableDeleteItemResponseItemCollectionMetricsTypeDef",
    {
        "ItemCollectionKey": Dict[
            str, TableDeleteItemResponseItemCollectionMetricsItemCollectionKeyTypeDef
        ],
        "SizeEstimateRangeGB": List[float],
    },
    total=False,
)


class TableDeleteItemResponseItemCollectionMetricsTypeDef(
    _TableDeleteItemResponseItemCollectionMetricsTypeDef
):
    """
    Type definition for `TableDeleteItemResponse` `ItemCollectionMetrics`

    Information about item collections, if any, that were affected by the ``DeleteItem`` operation.
    ``ItemCollectionMetrics`` is only returned if the ``ReturnItemCollectionMetrics`` parameter was
    specified. If the table does not have any local secondary indexes, this information is not
    returned in the response.

    Each ``ItemCollectionMetrics`` element consists of:

    * ``ItemCollectionKey`` - The partition key value of the item collection. This is the same as
    the partition key value of the item itself.

    * ``SizeEstimateRangeGB`` - An estimate of item collection size, in gigabytes. This value is a
    two-element array containing a lower bound and an upper bound for the estimate. The estimate
    includes the size of all the items in the table, plus the size of all attributes projected into
    all of the local secondary indexes on that table. Use this estimate to measure whether a local
    secondary index is approaching its size limit. The estimate is subject to change over time;
    therefore, do not rely on the precision or accuracy of the estimate.

    - **ItemCollectionKey** *(dict) --*

      The partition key value of the item collection. This value is the same as the partition key
      value of the item.

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

          - **S** *(string) --*

            An attribute of type String. For example:

             ``"S": "Hello"``

          - **N** *(string) --*

            An attribute of type Number. For example:

             ``"N": "123.45"``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

          - **B** *(bytes) --*

            An attribute of type Binary. For example:

             ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

          - **SS** *(list) --*

            An attribute of type String Set. For example:

             ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

            - *(string) --*

          - **NS** *(list) --*

            An attribute of type Number Set. For example:

             ``"NS": ["42.2", "-19", "7.5", "3.14"]``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

            - *(string) --*

          - **BS** *(list) --*

            An attribute of type Binary Set. For example:

             ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

            - *(bytes) --*

          - **M** *(dict) --*

            An attribute of type Map. For example:

             ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

            - *(string) --*

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

          - **L** *(list) --*

            An attribute of type List. For example:

             ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

            - *(dict) --*

              Represents the data for an attribute.

              Each attribute value is described as a name-value pair. The name is the data type, and
              the value is the data itself.

              For more information, see `Data Types
              <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
              in the *Amazon DynamoDB Developer Guide* .

          - **NULL** *(boolean) --*

            An attribute of type Null. For example:

             ``"NULL": true``

          - **BOOL** *(boolean) --*

            An attribute of type Boolean. For example:

             ``"BOOL": true``

    - **SizeEstimateRangeGB** *(list) --*

      An estimate of item collection size, in gigabytes. This value is a two-element array
      containing a lower bound and an upper bound for the estimate. The estimate includes the size
      of all the items in the table, plus the size of all attributes projected into all of the local
      secondary indexes on that table. Use this estimate to measure whether a local secondary index
      is approaching its size limit.

      The estimate is subject to change over time; therefore, do not rely on the precision or
      accuracy of the estimate.

      - *(float) --*
    """


_TableDeleteItemResponseTypeDef = TypedDict(
    "_TableDeleteItemResponseTypeDef",
    {
        "Attributes": Dict[str, TableDeleteItemResponseAttributesTypeDef],
        "ConsumedCapacity": TableDeleteItemResponseConsumedCapacityTypeDef,
        "ItemCollectionMetrics": TableDeleteItemResponseItemCollectionMetricsTypeDef,
    },
    total=False,
)


class TableDeleteItemResponseTypeDef(_TableDeleteItemResponseTypeDef):
    """
    Type definition for `TableDeleteItem` `Response`

    Represents the output of a ``DeleteItem`` operation.

    - **Attributes** *(dict) --*

      A map of attribute names to ``AttributeValue`` objects, representing the item as it appeared
      before the ``DeleteItem`` operation. This map appears in the response only if ``ReturnValues``
      was specified as ``ALL_OLD`` in the request.

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

          - **S** *(string) --*

            An attribute of type String. For example:

             ``"S": "Hello"``

          - **N** *(string) --*

            An attribute of type Number. For example:

             ``"N": "123.45"``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

          - **B** *(bytes) --*

            An attribute of type Binary. For example:

             ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

          - **SS** *(list) --*

            An attribute of type String Set. For example:

             ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

            - *(string) --*

          - **NS** *(list) --*

            An attribute of type Number Set. For example:

             ``"NS": ["42.2", "-19", "7.5", "3.14"]``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

            - *(string) --*

          - **BS** *(list) --*

            An attribute of type Binary Set. For example:

             ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

            - *(bytes) --*

          - **M** *(dict) --*

            An attribute of type Map. For example:

             ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

            - *(string) --*

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

          - **L** *(list) --*

            An attribute of type List. For example:

             ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

            - *(dict) --*

              Represents the data for an attribute.

              Each attribute value is described as a name-value pair. The name is the data type, and
              the value is the data itself.

              For more information, see `Data Types
              <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
              in the *Amazon DynamoDB Developer Guide* .

          - **NULL** *(boolean) --*

            An attribute of type Null. For example:

             ``"NULL": true``

          - **BOOL** *(boolean) --*

            An attribute of type Boolean. For example:

             ``"BOOL": true``

    - **ConsumedCapacity** *(dict) --*

      The capacity units consumed by the ``DeleteItem`` operation. The data returned includes the
      total provisioned throughput consumed, along with statistics for the table and any indexes
      involved in the operation. ``ConsumedCapacity`` is only returned if the
      ``ReturnConsumedCapacity`` parameter was specified. For more information, see `Provisioned
      Mode
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html>`__
      in the *Amazon DynamoDB Developer Guide* .

      - **TableName** *(string) --*

        The name of the table that was affected by the operation.

      - **CapacityUnits** *(float) --*

        The total number of capacity units consumed by the operation.

      - **ReadCapacityUnits** *(float) --*

        The total number of read capacity units consumed by the operation.

      - **WriteCapacityUnits** *(float) --*

        The total number of write capacity units consumed by the operation.

      - **Table** *(dict) --*

        The amount of throughput consumed on the table affected by the operation.

        - **ReadCapacityUnits** *(float) --*

          The total number of read capacity units consumed on a table or an index.

        - **WriteCapacityUnits** *(float) --*

          The total number of write capacity units consumed on a table or an index.

        - **CapacityUnits** *(float) --*

          The total number of capacity units consumed on a table or an index.

      - **LocalSecondaryIndexes** *(dict) --*

        The amount of throughput consumed on each local index affected by the operation.

        - *(string) --*

          - *(dict) --*

            Represents the amount of provisioned throughput capacity consumed on a table or an
            index.

            - **ReadCapacityUnits** *(float) --*

              The total number of read capacity units consumed on a table or an index.

            - **WriteCapacityUnits** *(float) --*

              The total number of write capacity units consumed on a table or an index.

            - **CapacityUnits** *(float) --*

              The total number of capacity units consumed on a table or an index.

      - **GlobalSecondaryIndexes** *(dict) --*

        The amount of throughput consumed on each global index affected by the operation.

        - *(string) --*

          - *(dict) --*

            Represents the amount of provisioned throughput capacity consumed on a table or an
            index.

            - **ReadCapacityUnits** *(float) --*

              The total number of read capacity units consumed on a table or an index.

            - **WriteCapacityUnits** *(float) --*

              The total number of write capacity units consumed on a table or an index.

            - **CapacityUnits** *(float) --*

              The total number of capacity units consumed on a table or an index.

    - **ItemCollectionMetrics** *(dict) --*

      Information about item collections, if any, that were affected by the ``DeleteItem``
      operation. ``ItemCollectionMetrics`` is only returned if the ``ReturnItemCollectionMetrics``
      parameter was specified. If the table does not have any local secondary indexes, this
      information is not returned in the response.

      Each ``ItemCollectionMetrics`` element consists of:

      * ``ItemCollectionKey`` - The partition key value of the item collection. This is the same as
      the partition key value of the item itself.

      * ``SizeEstimateRangeGB`` - An estimate of item collection size, in gigabytes. This value is a
      two-element array containing a lower bound and an upper bound for the estimate. The estimate
      includes the size of all the items in the table, plus the size of all attributes projected
      into all of the local secondary indexes on that table. Use this estimate to measure whether a
      local secondary index is approaching its size limit. The estimate is subject to change over
      time; therefore, do not rely on the precision or accuracy of the estimate.

      - **ItemCollectionKey** *(dict) --*

        The partition key value of the item collection. This value is the same as the partition key
        value of the item.

        - *(string) --*

          - *(dict) --*

            Represents the data for an attribute.

            Each attribute value is described as a name-value pair. The name is the data type, and
            the value is the data itself.

            For more information, see `Data Types
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
            in the *Amazon DynamoDB Developer Guide* .

            - **S** *(string) --*

              An attribute of type String. For example:

               ``"S": "Hello"``

            - **N** *(string) --*

              An attribute of type Number. For example:

               ``"N": "123.45"``

              Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
              across languages and libraries. However, DynamoDB treats them as number type
              attributes for mathematical operations.

            - **B** *(bytes) --*

              An attribute of type Binary. For example:

               ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

            - **SS** *(list) --*

              An attribute of type String Set. For example:

               ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

              - *(string) --*

            - **NS** *(list) --*

              An attribute of type Number Set. For example:

               ``"NS": ["42.2", "-19", "7.5", "3.14"]``

              Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
              across languages and libraries. However, DynamoDB treats them as number type
              attributes for mathematical operations.

              - *(string) --*

            - **BS** *(list) --*

              An attribute of type Binary Set. For example:

               ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

              - *(bytes) --*

            - **M** *(dict) --*

              An attribute of type Map. For example:

               ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

              - *(string) --*

                - *(dict) --*

                  Represents the data for an attribute.

                  Each attribute value is described as a name-value pair. The name is the data type,
                  and the value is the data itself.

                  For more information, see `Data Types
                  <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                  in the *Amazon DynamoDB Developer Guide* .

            - **L** *(list) --*

              An attribute of type List. For example:

               ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

            - **NULL** *(boolean) --*

              An attribute of type Null. For example:

               ``"NULL": true``

            - **BOOL** *(boolean) --*

              An attribute of type Boolean. For example:

               ``"BOOL": true``

      - **SizeEstimateRangeGB** *(list) --*

        An estimate of item collection size, in gigabytes. This value is a two-element array
        containing a lower bound and an upper bound for the estimate. The estimate includes the size
        of all the items in the table, plus the size of all attributes projected into all of the
        local secondary indexes on that table. Use this estimate to measure whether a local
        secondary index is approaching its size limit.

        The estimate is subject to change over time; therefore, do not rely on the precision or
        accuracy of the estimate.

        - *(float) --*
    """


_TableDeleteResponseTableDescriptionArchivalSummaryTypeDef = TypedDict(
    "_TableDeleteResponseTableDescriptionArchivalSummaryTypeDef",
    {"ArchivalDateTime": datetime, "ArchivalReason": str, "ArchivalBackupArn": str},
    total=False,
)


class TableDeleteResponseTableDescriptionArchivalSummaryTypeDef(
    _TableDeleteResponseTableDescriptionArchivalSummaryTypeDef
):
    """
    Type definition for `TableDeleteResponseTableDescription` `ArchivalSummary`

    Contains information about the table archive.

    - **ArchivalDateTime** *(datetime) --*

      The date and time when table archival was initiated by DynamoDB, in UNIX epoch time format.

    - **ArchivalReason** *(string) --*

      The reason DynamoDB archived the table. Currently, the only possible value is:

      * ``INACCESSIBLE_ENCRYPTION_CREDENTIALS`` - The table was archived due to the table's AWS KMS
      key being inaccessible for more than seven days. An On-Demand backup was created at the
      archival time.

    - **ArchivalBackupArn** *(string) --*

      The Amazon Resource Name (ARN) of the backup the table was archived to, when applicable in the
      archival reason. If you wish to restore this backup to the same table name, you will need to
      delete the original table.
    """


_TableDeleteResponseTableDescriptionAttributeDefinitionsTypeDef = TypedDict(
    "_TableDeleteResponseTableDescriptionAttributeDefinitionsTypeDef",
    {"AttributeName": str, "AttributeType": str},
    total=False,
)


class TableDeleteResponseTableDescriptionAttributeDefinitionsTypeDef(
    _TableDeleteResponseTableDescriptionAttributeDefinitionsTypeDef
):
    """
    Type definition for `TableDeleteResponseTableDescription` `AttributeDefinitions`

    Represents an attribute for describing the key schema for the table and indexes.

    - **AttributeName** *(string) --*

      A name for the attribute.

    - **AttributeType** *(string) --*

      The data type for the attribute, where:

      * ``S`` - the attribute is of type String

      * ``N`` - the attribute is of type Number

      * ``B`` - the attribute is of type Binary
    """


_TableDeleteResponseTableDescriptionBillingModeSummaryTypeDef = TypedDict(
    "_TableDeleteResponseTableDescriptionBillingModeSummaryTypeDef",
    {"BillingMode": str, "LastUpdateToPayPerRequestDateTime": datetime},
    total=False,
)


class TableDeleteResponseTableDescriptionBillingModeSummaryTypeDef(
    _TableDeleteResponseTableDescriptionBillingModeSummaryTypeDef
):
    """
    Type definition for `TableDeleteResponseTableDescription` `BillingModeSummary`

    Contains the details for the read/write capacity mode.

    - **BillingMode** *(string) --*

      Controls how you are charged for read and write throughput and how you manage capacity. This
      setting can be changed later.

      * ``PROVISIONED`` - Sets the read/write capacity mode to ``PROVISIONED`` . We recommend using
      ``PROVISIONED`` for predictable workloads.

      * ``PAY_PER_REQUEST`` - Sets the read/write capacity mode to ``PAY_PER_REQUEST`` . We
      recommend using ``PAY_PER_REQUEST`` for unpredictable workloads.

    - **LastUpdateToPayPerRequestDateTime** *(datetime) --*

      Represents the time when ``PAY_PER_REQUEST`` was last set as the read/write capacity mode.
    """


_TableDeleteResponseTableDescriptionGlobalSecondaryIndexesKeySchemaTypeDef = TypedDict(
    "_TableDeleteResponseTableDescriptionGlobalSecondaryIndexesKeySchemaTypeDef",
    {"AttributeName": str, "KeyType": str},
    total=False,
)


class TableDeleteResponseTableDescriptionGlobalSecondaryIndexesKeySchemaTypeDef(
    _TableDeleteResponseTableDescriptionGlobalSecondaryIndexesKeySchemaTypeDef
):
    """
    Type definition for `TableDeleteResponseTableDescriptionGlobalSecondaryIndexes` `KeySchema`

    Represents *a single element* of a key schema. A key schema specifies the attributes that make
    up the primary key of a table, or the key attributes of an index.

    A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
    simple primary key would be represented by one ``KeySchemaElement`` (for the partition key). A
    composite primary key would require one ``KeySchemaElement`` for the partition key, and another
    ``KeySchemaElement`` for the sort key.

    A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The data
    type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a
    Map.

    - **AttributeName** *(string) --*

      The name of a key attribute.

    - **KeyType** *(string) --*

      The role that this key attribute will assume:

      * ``HASH`` - partition key

      * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.
    """


_TableDeleteResponseTableDescriptionGlobalSecondaryIndexesProjectionTypeDef = TypedDict(
    "_TableDeleteResponseTableDescriptionGlobalSecondaryIndexesProjectionTypeDef",
    {"ProjectionType": str, "NonKeyAttributes": List[str]},
    total=False,
)


class TableDeleteResponseTableDescriptionGlobalSecondaryIndexesProjectionTypeDef(
    _TableDeleteResponseTableDescriptionGlobalSecondaryIndexesProjectionTypeDef
):
    """
    Type definition for `TableDeleteResponseTableDescriptionGlobalSecondaryIndexes` `Projection`

    Represents attributes that are copied (projected) from the table into the global secondary
    index. These are in addition to the primary key attributes and index key attributes, which are
    automatically projected.

    - **ProjectionType** *(string) --*

      The set of attributes that are projected into the index:

      * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

      * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list of
      projected attributes is in ``NonKeyAttributes`` .

      * ``ALL`` - All of the table attributes are projected into the index.

    - **NonKeyAttributes** *(list) --*

      Represents the non-key attribute names which will be projected into the index.

      For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all of the
      local secondary indexes, must not exceed 20. If you project the same attribute into two
      different indexes, this counts as two distinct attributes when determining the total.

      - *(string) --*
    """


_TableDeleteResponseTableDescriptionGlobalSecondaryIndexesProvisionedThroughputTypeDef = TypedDict(
    "_TableDeleteResponseTableDescriptionGlobalSecondaryIndexesProvisionedThroughputTypeDef",
    {
        "LastIncreaseDateTime": datetime,
        "LastDecreaseDateTime": datetime,
        "NumberOfDecreasesToday": int,
        "ReadCapacityUnits": int,
        "WriteCapacityUnits": int,
    },
    total=False,
)


class TableDeleteResponseTableDescriptionGlobalSecondaryIndexesProvisionedThroughputTypeDef(
    _TableDeleteResponseTableDescriptionGlobalSecondaryIndexesProvisionedThroughputTypeDef
):
    """
    Type definition for `TableDeleteResponseTableDescriptionGlobalSecondaryIndexes`
    `ProvisionedThroughput`

    Represents the provisioned throughput settings for the specified global secondary index.

    For current minimum and maximum provisioned throughput values, see `Limits
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the *Amazon
    DynamoDB Developer Guide* .

    - **LastIncreaseDateTime** *(datetime) --*

      The date and time of the last provisioned throughput increase for this table.

    - **LastDecreaseDateTime** *(datetime) --*

      The date and time of the last provisioned throughput decrease for this table.

    - **NumberOfDecreasesToday** *(integer) --*

      The number of provisioned throughput decreases for this table during this UTC calendar day.
      For current maximums on provisioned throughput decreases, see `Limits
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
      *Amazon DynamoDB Developer Guide* .

    - **ReadCapacityUnits** *(integer) --*

      The maximum number of strongly consistent reads consumed per second before DynamoDB returns a
      ``ThrottlingException`` . Eventually consistent reads require less effort than strongly
      consistent reads, so a setting of 50 ``ReadCapacityUnits`` per second provides 100 eventually
      consistent ``ReadCapacityUnits`` per second.

    - **WriteCapacityUnits** *(integer) --*

      The maximum number of writes consumed per second before DynamoDB returns a
      ``ThrottlingException`` .
    """


_TableDeleteResponseTableDescriptionGlobalSecondaryIndexesTypeDef = TypedDict(
    "_TableDeleteResponseTableDescriptionGlobalSecondaryIndexesTypeDef",
    {
        "IndexName": str,
        "KeySchema": List[
            TableDeleteResponseTableDescriptionGlobalSecondaryIndexesKeySchemaTypeDef
        ],
        "Projection": TableDeleteResponseTableDescriptionGlobalSecondaryIndexesProjectionTypeDef,
        "IndexStatus": str,
        "Backfilling": bool,
        "ProvisionedThroughput": TableDeleteResponseTableDescriptionGlobalSecondaryIndexesProvisionedThroughputTypeDef,
        "IndexSizeBytes": int,
        "ItemCount": int,
        "IndexArn": str,
    },
    total=False,
)


class TableDeleteResponseTableDescriptionGlobalSecondaryIndexesTypeDef(
    _TableDeleteResponseTableDescriptionGlobalSecondaryIndexesTypeDef
):
    """
    Type definition for `TableDeleteResponseTableDescription` `GlobalSecondaryIndexes`

    Represents the properties of a global secondary index.

    - **IndexName** *(string) --*

      The name of the global secondary index.

    - **KeySchema** *(list) --*

      The complete key schema for a global secondary index, which consists of one or more pairs of
      attribute names and key types:

      * ``HASH`` - partition key

      * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.

      - *(dict) --*

        Represents *a single element* of a key schema. A key schema specifies the attributes that
        make up the primary key of a table, or the key attributes of an index.

        A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
        simple primary key would be represented by one ``KeySchemaElement`` (for the partition key).
        A composite primary key would require one ``KeySchemaElement`` for the partition key, and
        another ``KeySchemaElement`` for the sort key.

        A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The
        data type must be one of String, Number, or Binary. The attribute cannot be nested within a
        List or a Map.

        - **AttributeName** *(string) --*

          The name of a key attribute.

        - **KeyType** *(string) --*

          The role that this key attribute will assume:

          * ``HASH`` - partition key

          * ``RANGE`` - sort key

          .. note::

            The partition key of an item is also known as its *hash attribute* . The term "hash
            attribute" derives from DynamoDB's usage of an internal hash function to evenly
            distribute data items across partitions, based on their partition key values.

            The sort key of an item is also known as its *range attribute* . The term "range
            attribute" derives from the way DynamoDB stores items with the same partition key
            physically close together, in sorted order by the sort key value.

    - **Projection** *(dict) --*

      Represents attributes that are copied (projected) from the table into the global secondary
      index. These are in addition to the primary key attributes and index key attributes, which are
      automatically projected.

      - **ProjectionType** *(string) --*

        The set of attributes that are projected into the index:

        * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

        * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list
        of projected attributes is in ``NonKeyAttributes`` .

        * ``ALL`` - All of the table attributes are projected into the index.

      - **NonKeyAttributes** *(list) --*

        Represents the non-key attribute names which will be projected into the index.

        For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all of
        the local secondary indexes, must not exceed 20. If you project the same attribute into two
        different indexes, this counts as two distinct attributes when determining the total.

        - *(string) --*

    - **IndexStatus** *(string) --*

      The current state of the global secondary index:

      * ``CREATING`` - The index is being created.

      * ``UPDATING`` - The index is being updated.

      * ``DELETING`` - The index is being deleted.

      * ``ACTIVE`` - The index is ready for use.

    - **Backfilling** *(boolean) --*

      Indicates whether the index is currently backfilling. *Backfilling* is the process of reading
      items from the table and determining whether they can be added to the index. (Not all items
      will qualify: For example, a partition key cannot have any duplicate values.) If an item can
      be added to the index, DynamoDB will do so. After all items have been processed, the
      backfilling operation is complete and ``Backfilling`` is false.

      You can delete an index that is being created during the ``Backfilling`` phase when
      ``IndexStatus`` is set to CREATING and ``Backfilling`` is true. You can't delete the index
      that is being created when ``IndexStatus`` is set to CREATING and ``Backfilling`` is false.

      .. note::

        For indexes that were created during a ``CreateTable`` operation, the ``Backfilling``
        attribute does not appear in the ``DescribeTable`` output.

    - **ProvisionedThroughput** *(dict) --*

      Represents the provisioned throughput settings for the specified global secondary index.

      For current minimum and maximum provisioned throughput values, see `Limits
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
      *Amazon DynamoDB Developer Guide* .

      - **LastIncreaseDateTime** *(datetime) --*

        The date and time of the last provisioned throughput increase for this table.

      - **LastDecreaseDateTime** *(datetime) --*

        The date and time of the last provisioned throughput decrease for this table.

      - **NumberOfDecreasesToday** *(integer) --*

        The number of provisioned throughput decreases for this table during this UTC calendar day.
        For current maximums on provisioned throughput decreases, see `Limits
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
        *Amazon DynamoDB Developer Guide* .

      - **ReadCapacityUnits** *(integer) --*

        The maximum number of strongly consistent reads consumed per second before DynamoDB returns
        a ``ThrottlingException`` . Eventually consistent reads require less effort than strongly
        consistent reads, so a setting of 50 ``ReadCapacityUnits`` per second provides 100
        eventually consistent ``ReadCapacityUnits`` per second.

      - **WriteCapacityUnits** *(integer) --*

        The maximum number of writes consumed per second before DynamoDB returns a
        ``ThrottlingException`` .

    - **IndexSizeBytes** *(integer) --*

      The total size of the specified index, in bytes. DynamoDB updates this value approximately
      every six hours. Recent changes might not be reflected in this value.

    - **ItemCount** *(integer) --*

      The number of items in the specified index. DynamoDB updates this value approximately every
      six hours. Recent changes might not be reflected in this value.

    - **IndexArn** *(string) --*

      The Amazon Resource Name (ARN) that uniquely identifies the index.
    """


_TableDeleteResponseTableDescriptionKeySchemaTypeDef = TypedDict(
    "_TableDeleteResponseTableDescriptionKeySchemaTypeDef",
    {"AttributeName": str, "KeyType": str},
    total=False,
)


class TableDeleteResponseTableDescriptionKeySchemaTypeDef(
    _TableDeleteResponseTableDescriptionKeySchemaTypeDef
):
    """
    Type definition for `TableDeleteResponseTableDescription` `KeySchema`

    Represents *a single element* of a key schema. A key schema specifies the attributes that make
    up the primary key of a table, or the key attributes of an index.

    A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
    simple primary key would be represented by one ``KeySchemaElement`` (for the partition key). A
    composite primary key would require one ``KeySchemaElement`` for the partition key, and another
    ``KeySchemaElement`` for the sort key.

    A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The data
    type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a
    Map.

    - **AttributeName** *(string) --*

      The name of a key attribute.

    - **KeyType** *(string) --*

      The role that this key attribute will assume:

      * ``HASH`` - partition key

      * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.
    """


_TableDeleteResponseTableDescriptionLocalSecondaryIndexesKeySchemaTypeDef = TypedDict(
    "_TableDeleteResponseTableDescriptionLocalSecondaryIndexesKeySchemaTypeDef",
    {"AttributeName": str, "KeyType": str},
    total=False,
)


class TableDeleteResponseTableDescriptionLocalSecondaryIndexesKeySchemaTypeDef(
    _TableDeleteResponseTableDescriptionLocalSecondaryIndexesKeySchemaTypeDef
):
    """
    Type definition for `TableDeleteResponseTableDescriptionLocalSecondaryIndexes` `KeySchema`

    Represents *a single element* of a key schema. A key schema specifies the attributes that make
    up the primary key of a table, or the key attributes of an index.

    A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
    simple primary key would be represented by one ``KeySchemaElement`` (for the partition key). A
    composite primary key would require one ``KeySchemaElement`` for the partition key, and another
    ``KeySchemaElement`` for the sort key.

    A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The data
    type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a
    Map.

    - **AttributeName** *(string) --*

      The name of a key attribute.

    - **KeyType** *(string) --*

      The role that this key attribute will assume:

      * ``HASH`` - partition key

      * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.
    """


_TableDeleteResponseTableDescriptionLocalSecondaryIndexesProjectionTypeDef = TypedDict(
    "_TableDeleteResponseTableDescriptionLocalSecondaryIndexesProjectionTypeDef",
    {"ProjectionType": str, "NonKeyAttributes": List[str]},
    total=False,
)


class TableDeleteResponseTableDescriptionLocalSecondaryIndexesProjectionTypeDef(
    _TableDeleteResponseTableDescriptionLocalSecondaryIndexesProjectionTypeDef
):
    """
    Type definition for `TableDeleteResponseTableDescriptionLocalSecondaryIndexes` `Projection`

    Represents attributes that are copied (projected) from the table into the global secondary
    index. These are in addition to the primary key attributes and index key attributes, which are
    automatically projected.

    - **ProjectionType** *(string) --*

      The set of attributes that are projected into the index:

      * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

      * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list of
      projected attributes is in ``NonKeyAttributes`` .

      * ``ALL`` - All of the table attributes are projected into the index.

    - **NonKeyAttributes** *(list) --*

      Represents the non-key attribute names which will be projected into the index.

      For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all of the
      local secondary indexes, must not exceed 20. If you project the same attribute into two
      different indexes, this counts as two distinct attributes when determining the total.

      - *(string) --*
    """


_TableDeleteResponseTableDescriptionLocalSecondaryIndexesTypeDef = TypedDict(
    "_TableDeleteResponseTableDescriptionLocalSecondaryIndexesTypeDef",
    {
        "IndexName": str,
        "KeySchema": List[TableDeleteResponseTableDescriptionLocalSecondaryIndexesKeySchemaTypeDef],
        "Projection": TableDeleteResponseTableDescriptionLocalSecondaryIndexesProjectionTypeDef,
        "IndexSizeBytes": int,
        "ItemCount": int,
        "IndexArn": str,
    },
    total=False,
)


class TableDeleteResponseTableDescriptionLocalSecondaryIndexesTypeDef(
    _TableDeleteResponseTableDescriptionLocalSecondaryIndexesTypeDef
):
    """
    Type definition for `TableDeleteResponseTableDescription` `LocalSecondaryIndexes`

    Represents the properties of a local secondary index.

    - **IndexName** *(string) --*

      Represents the name of the local secondary index.

    - **KeySchema** *(list) --*

      The complete key schema for the local secondary index, consisting of one or more pairs of
      attribute names and key types:

      * ``HASH`` - partition key

      * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.

      - *(dict) --*

        Represents *a single element* of a key schema. A key schema specifies the attributes that
        make up the primary key of a table, or the key attributes of an index.

        A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
        simple primary key would be represented by one ``KeySchemaElement`` (for the partition key).
        A composite primary key would require one ``KeySchemaElement`` for the partition key, and
        another ``KeySchemaElement`` for the sort key.

        A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The
        data type must be one of String, Number, or Binary. The attribute cannot be nested within a
        List or a Map.

        - **AttributeName** *(string) --*

          The name of a key attribute.

        - **KeyType** *(string) --*

          The role that this key attribute will assume:

          * ``HASH`` - partition key

          * ``RANGE`` - sort key

          .. note::

            The partition key of an item is also known as its *hash attribute* . The term "hash
            attribute" derives from DynamoDB's usage of an internal hash function to evenly
            distribute data items across partitions, based on their partition key values.

            The sort key of an item is also known as its *range attribute* . The term "range
            attribute" derives from the way DynamoDB stores items with the same partition key
            physically close together, in sorted order by the sort key value.

    - **Projection** *(dict) --*

      Represents attributes that are copied (projected) from the table into the global secondary
      index. These are in addition to the primary key attributes and index key attributes, which are
      automatically projected.

      - **ProjectionType** *(string) --*

        The set of attributes that are projected into the index:

        * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

        * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list
        of projected attributes is in ``NonKeyAttributes`` .

        * ``ALL`` - All of the table attributes are projected into the index.

      - **NonKeyAttributes** *(list) --*

        Represents the non-key attribute names which will be projected into the index.

        For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all of
        the local secondary indexes, must not exceed 20. If you project the same attribute into two
        different indexes, this counts as two distinct attributes when determining the total.

        - *(string) --*

    - **IndexSizeBytes** *(integer) --*

      The total size of the specified index, in bytes. DynamoDB updates this value approximately
      every six hours. Recent changes might not be reflected in this value.

    - **ItemCount** *(integer) --*

      The number of items in the specified index. DynamoDB updates this value approximately every
      six hours. Recent changes might not be reflected in this value.

    - **IndexArn** *(string) --*

      The Amazon Resource Name (ARN) that uniquely identifies the index.
    """


_TableDeleteResponseTableDescriptionProvisionedThroughputTypeDef = TypedDict(
    "_TableDeleteResponseTableDescriptionProvisionedThroughputTypeDef",
    {
        "LastIncreaseDateTime": datetime,
        "LastDecreaseDateTime": datetime,
        "NumberOfDecreasesToday": int,
        "ReadCapacityUnits": int,
        "WriteCapacityUnits": int,
    },
    total=False,
)


class TableDeleteResponseTableDescriptionProvisionedThroughputTypeDef(
    _TableDeleteResponseTableDescriptionProvisionedThroughputTypeDef
):
    """
    Type definition for `TableDeleteResponseTableDescription` `ProvisionedThroughput`

    The provisioned throughput settings for the table, consisting of read and write capacity units,
    along with data about increases and decreases.

    - **LastIncreaseDateTime** *(datetime) --*

      The date and time of the last provisioned throughput increase for this table.

    - **LastDecreaseDateTime** *(datetime) --*

      The date and time of the last provisioned throughput decrease for this table.

    - **NumberOfDecreasesToday** *(integer) --*

      The number of provisioned throughput decreases for this table during this UTC calendar day.
      For current maximums on provisioned throughput decreases, see `Limits
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
      *Amazon DynamoDB Developer Guide* .

    - **ReadCapacityUnits** *(integer) --*

      The maximum number of strongly consistent reads consumed per second before DynamoDB returns a
      ``ThrottlingException`` . Eventually consistent reads require less effort than strongly
      consistent reads, so a setting of 50 ``ReadCapacityUnits`` per second provides 100 eventually
      consistent ``ReadCapacityUnits`` per second.

    - **WriteCapacityUnits** *(integer) --*

      The maximum number of writes consumed per second before DynamoDB returns a
      ``ThrottlingException`` .
    """


_TableDeleteResponseTableDescriptionReplicasGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef = TypedDict(
    "_TableDeleteResponseTableDescriptionReplicasGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef",
    {"ReadCapacityUnits": int},
    total=False,
)


class TableDeleteResponseTableDescriptionReplicasGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef(
    _TableDeleteResponseTableDescriptionReplicasGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef
):
    """
    Type definition for `TableDeleteResponseTableDescriptionReplicasGlobalSecondaryIndexes`
    `ProvisionedThroughputOverride`

    If not described, uses the source table GSI's read capacity settings.

    - **ReadCapacityUnits** *(integer) --*

      Replica-specific read capacity units. If not specified, uses the source table's read capacity
      settings.
    """


_TableDeleteResponseTableDescriptionReplicasGlobalSecondaryIndexesTypeDef = TypedDict(
    "_TableDeleteResponseTableDescriptionReplicasGlobalSecondaryIndexesTypeDef",
    {
        "IndexName": str,
        "ProvisionedThroughputOverride": TableDeleteResponseTableDescriptionReplicasGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef,
    },
    total=False,
)


class TableDeleteResponseTableDescriptionReplicasGlobalSecondaryIndexesTypeDef(
    _TableDeleteResponseTableDescriptionReplicasGlobalSecondaryIndexesTypeDef
):
    """
    Type definition for `TableDeleteResponseTableDescriptionReplicas` `GlobalSecondaryIndexes`

    Represents the properties of a replica global secondary index.

    - **IndexName** *(string) --*

      The name of the global secondary index.

    - **ProvisionedThroughputOverride** *(dict) --*

      If not described, uses the source table GSI's read capacity settings.

      - **ReadCapacityUnits** *(integer) --*

        Replica-specific read capacity units. If not specified, uses the source table's read
        capacity settings.
    """


_TableDeleteResponseTableDescriptionReplicasProvisionedThroughputOverrideTypeDef = TypedDict(
    "_TableDeleteResponseTableDescriptionReplicasProvisionedThroughputOverrideTypeDef",
    {"ReadCapacityUnits": int},
    total=False,
)


class TableDeleteResponseTableDescriptionReplicasProvisionedThroughputOverrideTypeDef(
    _TableDeleteResponseTableDescriptionReplicasProvisionedThroughputOverrideTypeDef
):
    """
    Type definition for `TableDeleteResponseTableDescriptionReplicas`
    `ProvisionedThroughputOverride`

    Replica-specific provisioned throughput. If not described, uses the source table's provisioned
    throughput settings.

    - **ReadCapacityUnits** *(integer) --*

      Replica-specific read capacity units. If not specified, uses the source table's read capacity
      settings.
    """


_TableDeleteResponseTableDescriptionReplicasTypeDef = TypedDict(
    "_TableDeleteResponseTableDescriptionReplicasTypeDef",
    {
        "RegionName": str,
        "ReplicaStatus": str,
        "ReplicaStatusDescription": str,
        "ReplicaStatusPercentProgress": str,
        "KMSMasterKeyId": str,
        "ProvisionedThroughputOverride": TableDeleteResponseTableDescriptionReplicasProvisionedThroughputOverrideTypeDef,
        "GlobalSecondaryIndexes": List[
            TableDeleteResponseTableDescriptionReplicasGlobalSecondaryIndexesTypeDef
        ],
    },
    total=False,
)


class TableDeleteResponseTableDescriptionReplicasTypeDef(
    _TableDeleteResponseTableDescriptionReplicasTypeDef
):
    """
    Type definition for `TableDeleteResponseTableDescription` `Replicas`

    Contains the details of the replica.

    - **RegionName** *(string) --*

      The name of the Region.

    - **ReplicaStatus** *(string) --*

      The current state of the replica:

      * ``CREATING`` - The replica is being created.

      * ``UPDATING`` - The replica is being updated.

      * ``DELETING`` - The replica is being deleted.

      * ``ACTIVE`` - The replica is ready for use.

    - **ReplicaStatusDescription** *(string) --*

      Detailed information about the replica status.

    - **ReplicaStatusPercentProgress** *(string) --*

      Specifies the progress of a Create, Update, or Delete action on the replica as a percentage.

    - **KMSMasterKeyId** *(string) --*

      The AWS KMS customer master key (CMK) of the replica that will be used for AWS KMS encryption.

    - **ProvisionedThroughputOverride** *(dict) --*

      Replica-specific provisioned throughput. If not described, uses the source table's provisioned
      throughput settings.

      - **ReadCapacityUnits** *(integer) --*

        Replica-specific read capacity units. If not specified, uses the source table's read
        capacity settings.

    - **GlobalSecondaryIndexes** *(list) --*

      Replica-specific global secondary index settings.

      - *(dict) --*

        Represents the properties of a replica global secondary index.

        - **IndexName** *(string) --*

          The name of the global secondary index.

        - **ProvisionedThroughputOverride** *(dict) --*

          If not described, uses the source table GSI's read capacity settings.

          - **ReadCapacityUnits** *(integer) --*

            Replica-specific read capacity units. If not specified, uses the source table's read
            capacity settings.
    """


_TableDeleteResponseTableDescriptionRestoreSummaryTypeDef = TypedDict(
    "_TableDeleteResponseTableDescriptionRestoreSummaryTypeDef",
    {
        "SourceBackupArn": str,
        "SourceTableArn": str,
        "RestoreDateTime": datetime,
        "RestoreInProgress": bool,
    },
    total=False,
)


class TableDeleteResponseTableDescriptionRestoreSummaryTypeDef(
    _TableDeleteResponseTableDescriptionRestoreSummaryTypeDef
):
    """
    Type definition for `TableDeleteResponseTableDescription` `RestoreSummary`

    Contains details for the restore.

    - **SourceBackupArn** *(string) --*

      The Amazon Resource Name (ARN) of the backup from which the table was restored.

    - **SourceTableArn** *(string) --*

      The ARN of the source table of the backup that is being restored.

    - **RestoreDateTime** *(datetime) --*

      Point in time or source backup time.

    - **RestoreInProgress** *(boolean) --*

      Indicates if a restore is in progress or not.
    """


_TableDeleteResponseTableDescriptionSSEDescriptionTypeDef = TypedDict(
    "_TableDeleteResponseTableDescriptionSSEDescriptionTypeDef",
    {
        "Status": str,
        "SSEType": str,
        "KMSMasterKeyArn": str,
        "InaccessibleEncryptionDateTime": datetime,
    },
    total=False,
)


class TableDeleteResponseTableDescriptionSSEDescriptionTypeDef(
    _TableDeleteResponseTableDescriptionSSEDescriptionTypeDef
):
    """
    Type definition for `TableDeleteResponseTableDescription` `SSEDescription`

    The description of the server-side encryption status on the specified table.

    - **Status** *(string) --*

      Represents the current state of server-side encryption. The only supported values are:

      * ``ENABLED`` - Server-side encryption is enabled.

      * ``UPDATING`` - Server-side encryption is being updated.

    - **SSEType** *(string) --*

      Server-side encryption type. The only supported value is:

      * ``KMS`` - Server-side encryption that uses AWS Key Management Service. The key is stored in
      your account and is managed by AWS KMS (AWS KMS charges apply).

    - **KMSMasterKeyArn** *(string) --*

      The AWS KMS customer master key (CMK) ARN used for the AWS KMS encryption.

    - **InaccessibleEncryptionDateTime** *(datetime) --*

      Indicates the time, in UNIX epoch date format, when DynamoDB detected that the table's AWS KMS
      key was inaccessible. This attribute will automatically be cleared when DynamoDB detects that
      the table's AWS KMS key is accessible again. DynamoDB will initiate the table archival process
      when table's AWS KMS key remains inaccessible for more than seven days from this date.
    """


_TableDeleteResponseTableDescriptionStreamSpecificationTypeDef = TypedDict(
    "_TableDeleteResponseTableDescriptionStreamSpecificationTypeDef",
    {"StreamEnabled": bool, "StreamViewType": str},
    total=False,
)


class TableDeleteResponseTableDescriptionStreamSpecificationTypeDef(
    _TableDeleteResponseTableDescriptionStreamSpecificationTypeDef
):
    """
    Type definition for `TableDeleteResponseTableDescription` `StreamSpecification`

    The current DynamoDB Streams configuration for the table.

    - **StreamEnabled** *(boolean) --*

      Indicates whether DynamoDB Streams is enabled (true) or disabled (false) on the table.

    - **StreamViewType** *(string) --*

      When an item in the table is modified, ``StreamViewType`` determines what information is
      written to the stream for this table. Valid values for ``StreamViewType`` are:

      * ``KEYS_ONLY`` - Only the key attributes of the modified item are written to the stream.

      * ``NEW_IMAGE`` - The entire item, as it appears after it was modified, is written to the
      stream.

      * ``OLD_IMAGE`` - The entire item, as it appeared before it was modified, is written to the
      stream.

      * ``NEW_AND_OLD_IMAGES`` - Both the new and the old item images of the item are written to the
      stream.
    """


_TableDeleteResponseTableDescriptionTypeDef = TypedDict(
    "_TableDeleteResponseTableDescriptionTypeDef",
    {
        "AttributeDefinitions": List[
            TableDeleteResponseTableDescriptionAttributeDefinitionsTypeDef
        ],
        "TableName": str,
        "KeySchema": List[TableDeleteResponseTableDescriptionKeySchemaTypeDef],
        "TableStatus": str,
        "CreationDateTime": datetime,
        "ProvisionedThroughput": TableDeleteResponseTableDescriptionProvisionedThroughputTypeDef,
        "TableSizeBytes": int,
        "ItemCount": int,
        "TableArn": str,
        "TableId": str,
        "BillingModeSummary": TableDeleteResponseTableDescriptionBillingModeSummaryTypeDef,
        "LocalSecondaryIndexes": List[
            TableDeleteResponseTableDescriptionLocalSecondaryIndexesTypeDef
        ],
        "GlobalSecondaryIndexes": List[
            TableDeleteResponseTableDescriptionGlobalSecondaryIndexesTypeDef
        ],
        "StreamSpecification": TableDeleteResponseTableDescriptionStreamSpecificationTypeDef,
        "LatestStreamLabel": str,
        "LatestStreamArn": str,
        "GlobalTableVersion": str,
        "Replicas": List[TableDeleteResponseTableDescriptionReplicasTypeDef],
        "RestoreSummary": TableDeleteResponseTableDescriptionRestoreSummaryTypeDef,
        "SSEDescription": TableDeleteResponseTableDescriptionSSEDescriptionTypeDef,
        "ArchivalSummary": TableDeleteResponseTableDescriptionArchivalSummaryTypeDef,
    },
    total=False,
)


class TableDeleteResponseTableDescriptionTypeDef(_TableDeleteResponseTableDescriptionTypeDef):
    """
    Type definition for `TableDeleteResponse` `TableDescription`

    Represents the properties of a table.

    - **AttributeDefinitions** *(list) --*

      An array of ``AttributeDefinition`` objects. Each of these objects describes one attribute in
      the table and index key schema.

      Each ``AttributeDefinition`` object in this array is composed of:

      * ``AttributeName`` - The name of the attribute.

      * ``AttributeType`` - The data type for the attribute.

      - *(dict) --*

        Represents an attribute for describing the key schema for the table and indexes.

        - **AttributeName** *(string) --*

          A name for the attribute.

        - **AttributeType** *(string) --*

          The data type for the attribute, where:

          * ``S`` - the attribute is of type String

          * ``N`` - the attribute is of type Number

          * ``B`` - the attribute is of type Binary

    - **TableName** *(string) --*

      The name of the table.

    - **KeySchema** *(list) --*

      The primary key structure for the table. Each ``KeySchemaElement`` consists of:

      * ``AttributeName`` - The name of the attribute.

      * ``KeyType`` - The role of the attribute:

        * ``HASH`` - partition key

        * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.

      For more information about primary keys, see `Primary Key
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html#DataModelPrimaryKey>`__
      in the *Amazon DynamoDB Developer Guide* .

      - *(dict) --*

        Represents *a single element* of a key schema. A key schema specifies the attributes that
        make up the primary key of a table, or the key attributes of an index.

        A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
        simple primary key would be represented by one ``KeySchemaElement`` (for the partition key).
        A composite primary key would require one ``KeySchemaElement`` for the partition key, and
        another ``KeySchemaElement`` for the sort key.

        A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The
        data type must be one of String, Number, or Binary. The attribute cannot be nested within a
        List or a Map.

        - **AttributeName** *(string) --*

          The name of a key attribute.

        - **KeyType** *(string) --*

          The role that this key attribute will assume:

          * ``HASH`` - partition key

          * ``RANGE`` - sort key

          .. note::

            The partition key of an item is also known as its *hash attribute* . The term "hash
            attribute" derives from DynamoDB's usage of an internal hash function to evenly
            distribute data items across partitions, based on their partition key values.

            The sort key of an item is also known as its *range attribute* . The term "range
            attribute" derives from the way DynamoDB stores items with the same partition key
            physically close together, in sorted order by the sort key value.

    - **TableStatus** *(string) --*

      The current state of the table:

      * ``CREATING`` - The table is being created.

      * ``UPDATING`` - The table is being updated.

      * ``DELETING`` - The table is being deleted.

      * ``ACTIVE`` - The table is ready for use.

      * ``INACCESSIBLE_ENCRYPTION_CREDENTIALS`` - The AWS KMS key used to encrypt the table in
      inaccessible. Table operations may fail due to failure to use the AWS KMS key. DynamoDB will
      initiate the table archival process when a table's AWS KMS key remains inaccessible for more
      than seven days.

      * ``ARCHIVING`` - The table is being archived. Operations are not allowed until archival is
      complete.

      * ``ARCHIVED`` - The table has been archived. See the ArchivalReason for more information.

    - **CreationDateTime** *(datetime) --*

      The date and time when the table was created, in `UNIX epoch time
      <http://www.epochconverter.com/>`__ format.

    - **ProvisionedThroughput** *(dict) --*

      The provisioned throughput settings for the table, consisting of read and write capacity
      units, along with data about increases and decreases.

      - **LastIncreaseDateTime** *(datetime) --*

        The date and time of the last provisioned throughput increase for this table.

      - **LastDecreaseDateTime** *(datetime) --*

        The date and time of the last provisioned throughput decrease for this table.

      - **NumberOfDecreasesToday** *(integer) --*

        The number of provisioned throughput decreases for this table during this UTC calendar day.
        For current maximums on provisioned throughput decreases, see `Limits
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
        *Amazon DynamoDB Developer Guide* .

      - **ReadCapacityUnits** *(integer) --*

        The maximum number of strongly consistent reads consumed per second before DynamoDB returns
        a ``ThrottlingException`` . Eventually consistent reads require less effort than strongly
        consistent reads, so a setting of 50 ``ReadCapacityUnits`` per second provides 100
        eventually consistent ``ReadCapacityUnits`` per second.

      - **WriteCapacityUnits** *(integer) --*

        The maximum number of writes consumed per second before DynamoDB returns a
        ``ThrottlingException`` .

    - **TableSizeBytes** *(integer) --*

      The total size of the specified table, in bytes. DynamoDB updates this value approximately
      every six hours. Recent changes might not be reflected in this value.

    - **ItemCount** *(integer) --*

      The number of items in the specified table. DynamoDB updates this value approximately every
      six hours. Recent changes might not be reflected in this value.

    - **TableArn** *(string) --*

      The Amazon Resource Name (ARN) that uniquely identifies the table.

    - **TableId** *(string) --*

      Unique identifier for the table for which the backup was created.

    - **BillingModeSummary** *(dict) --*

      Contains the details for the read/write capacity mode.

      - **BillingMode** *(string) --*

        Controls how you are charged for read and write throughput and how you manage capacity. This
        setting can be changed later.

        * ``PROVISIONED`` - Sets the read/write capacity mode to ``PROVISIONED`` . We recommend
        using ``PROVISIONED`` for predictable workloads.

        * ``PAY_PER_REQUEST`` - Sets the read/write capacity mode to ``PAY_PER_REQUEST`` . We
        recommend using ``PAY_PER_REQUEST`` for unpredictable workloads.

      - **LastUpdateToPayPerRequestDateTime** *(datetime) --*

        Represents the time when ``PAY_PER_REQUEST`` was last set as the read/write capacity mode.

    - **LocalSecondaryIndexes** *(list) --*

      Represents one or more local secondary indexes on the table. Each index is scoped to a given
      partition key value. Tables with one or more local secondary indexes are subject to an item
      collection size limit, where the amount of data within a given item collection cannot exceed
      10 GB. Each element is composed of:

      * ``IndexName`` - The name of the local secondary index.

      * ``KeySchema`` - Specifies the complete index key schema. The attribute names in the key
      schema must be between 1 and 255 characters (inclusive). The key schema must begin with the
      same partition key as the table.

      * ``Projection`` - Specifies attributes that are copied (projected) from the table into the
      index. These are in addition to the primary key attributes and index key attributes, which are
      automatically projected. Each attribute specification is composed of:

        * ``ProjectionType`` - One of the following:

          * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

          * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list
          of projected attributes is in ``NonKeyAttributes`` .

          * ``ALL`` - All of the table attributes are projected into the index.

        * ``NonKeyAttributes`` - A list of one or more non-key attribute names that are projected
        into the secondary index. The total count of attributes provided in ``NonKeyAttributes`` ,
        summed across all of the secondary indexes, must not exceed 20. If you project the same
        attribute into two different indexes, this counts as two distinct attributes when
        determining the total.

      * ``IndexSizeBytes`` - Represents the total size of the index, in bytes. DynamoDB updates this
      value approximately every six hours. Recent changes might not be reflected in this value.

      * ``ItemCount`` - Represents the number of items in the index. DynamoDB updates this value
      approximately every six hours. Recent changes might not be reflected in this value.

      If the table is in the ``DELETING`` state, no information about indexes will be returned.

      - *(dict) --*

        Represents the properties of a local secondary index.

        - **IndexName** *(string) --*

          Represents the name of the local secondary index.

        - **KeySchema** *(list) --*

          The complete key schema for the local secondary index, consisting of one or more pairs of
          attribute names and key types:

          * ``HASH`` - partition key

          * ``RANGE`` - sort key

          .. note::

            The partition key of an item is also known as its *hash attribute* . The term "hash
            attribute" derives from DynamoDB's usage of an internal hash function to evenly
            distribute data items across partitions, based on their partition key values.

            The sort key of an item is also known as its *range attribute* . The term "range
            attribute" derives from the way DynamoDB stores items with the same partition key
            physically close together, in sorted order by the sort key value.

          - *(dict) --*

            Represents *a single element* of a key schema. A key schema specifies the attributes
            that make up the primary key of a table, or the key attributes of an index.

            A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example,
            a simple primary key would be represented by one ``KeySchemaElement`` (for the partition
            key). A composite primary key would require one ``KeySchemaElement`` for the partition
            key, and another ``KeySchemaElement`` for the sort key.

            A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute).
            The data type must be one of String, Number, or Binary. The attribute cannot be nested
            within a List or a Map.

            - **AttributeName** *(string) --*

              The name of a key attribute.

            - **KeyType** *(string) --*

              The role that this key attribute will assume:

              * ``HASH`` - partition key

              * ``RANGE`` - sort key

              .. note::

                The partition key of an item is also known as its *hash attribute* . The term "hash
                attribute" derives from DynamoDB's usage of an internal hash function to evenly
                distribute data items across partitions, based on their partition key values.

                The sort key of an item is also known as its *range attribute* . The term "range
                attribute" derives from the way DynamoDB stores items with the same partition key
                physically close together, in sorted order by the sort key value.

        - **Projection** *(dict) --*

          Represents attributes that are copied (projected) from the table into the global secondary
          index. These are in addition to the primary key attributes and index key attributes, which
          are automatically projected.

          - **ProjectionType** *(string) --*

            The set of attributes that are projected into the index:

            * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

            * ``INCLUDE`` - Only the specified table attributes are projected into the index. The
            list of projected attributes is in ``NonKeyAttributes`` .

            * ``ALL`` - All of the table attributes are projected into the index.

          - **NonKeyAttributes** *(list) --*

            Represents the non-key attribute names which will be projected into the index.

            For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all
            of the local secondary indexes, must not exceed 20. If you project the same attribute
            into two different indexes, this counts as two distinct attributes when determining the
            total.

            - *(string) --*

        - **IndexSizeBytes** *(integer) --*

          The total size of the specified index, in bytes. DynamoDB updates this value approximately
          every six hours. Recent changes might not be reflected in this value.

        - **ItemCount** *(integer) --*

          The number of items in the specified index. DynamoDB updates this value approximately
          every six hours. Recent changes might not be reflected in this value.

        - **IndexArn** *(string) --*

          The Amazon Resource Name (ARN) that uniquely identifies the index.

    - **GlobalSecondaryIndexes** *(list) --*

      The global secondary indexes, if any, on the table. Each index is scoped to a given partition
      key value. Each element is composed of:

      * ``Backfilling`` - If true, then the index is currently in the backfilling phase. Backfilling
      occurs only when a new global secondary index is added to the table. It is the process by
      which DynamoDB populates the new index with data from the table. (This attribute does not
      appear for indexes that were created during a ``CreateTable`` operation.)  You can delete an
      index that is being created during the ``Backfilling`` phase when ``IndexStatus`` is set to
      CREATING and ``Backfilling`` is true. You can't delete the index that is being created when
      ``IndexStatus`` is set to CREATING and ``Backfilling`` is false. (This attribute does not
      appear for indexes that were created during a ``CreateTable`` operation.)

      * ``IndexName`` - The name of the global secondary index.

      * ``IndexSizeBytes`` - The total size of the global secondary index, in bytes. DynamoDB
      updates this value approximately every six hours. Recent changes might not be reflected in
      this value.

      * ``IndexStatus`` - The current status of the global secondary index:

        * ``CREATING`` - The index is being created.

        * ``UPDATING`` - The index is being updated.

        * ``DELETING`` - The index is being deleted.

        * ``ACTIVE`` - The index is ready for use.

      * ``ItemCount`` - The number of items in the global secondary index. DynamoDB updates this
      value approximately every six hours. Recent changes might not be reflected in this value.

      * ``KeySchema`` - Specifies the complete index key schema. The attribute names in the key
      schema must be between 1 and 255 characters (inclusive). The key schema must begin with the
      same partition key as the table.

      * ``Projection`` - Specifies attributes that are copied (projected) from the table into the
      index. These are in addition to the primary key attributes and index key attributes, which are
      automatically projected. Each attribute specification is composed of:

        * ``ProjectionType`` - One of the following:

          * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

          * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list
          of projected attributes is in ``NonKeyAttributes`` .

          * ``ALL`` - All of the table attributes are projected into the index.

        * ``NonKeyAttributes`` - A list of one or more non-key attribute names that are projected
        into the secondary index. The total count of attributes provided in ``NonKeyAttributes`` ,
        summed across all of the secondary indexes, must not exceed 20. If you project the same
        attribute into two different indexes, this counts as two distinct attributes when
        determining the total.

      * ``ProvisionedThroughput`` - The provisioned throughput settings for the global secondary
      index, consisting of read and write capacity units, along with data about increases and
      decreases.

      If the table is in the ``DELETING`` state, no information about indexes will be returned.

      - *(dict) --*

        Represents the properties of a global secondary index.

        - **IndexName** *(string) --*

          The name of the global secondary index.

        - **KeySchema** *(list) --*

          The complete key schema for a global secondary index, which consists of one or more pairs
          of attribute names and key types:

          * ``HASH`` - partition key

          * ``RANGE`` - sort key

          .. note::

            The partition key of an item is also known as its *hash attribute* . The term "hash
            attribute" derives from DynamoDB's usage of an internal hash function to evenly
            distribute data items across partitions, based on their partition key values.

            The sort key of an item is also known as its *range attribute* . The term "range
            attribute" derives from the way DynamoDB stores items with the same partition key
            physically close together, in sorted order by the sort key value.

          - *(dict) --*

            Represents *a single element* of a key schema. A key schema specifies the attributes
            that make up the primary key of a table, or the key attributes of an index.

            A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example,
            a simple primary key would be represented by one ``KeySchemaElement`` (for the partition
            key). A composite primary key would require one ``KeySchemaElement`` for the partition
            key, and another ``KeySchemaElement`` for the sort key.

            A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute).
            The data type must be one of String, Number, or Binary. The attribute cannot be nested
            within a List or a Map.

            - **AttributeName** *(string) --*

              The name of a key attribute.

            - **KeyType** *(string) --*

              The role that this key attribute will assume:

              * ``HASH`` - partition key

              * ``RANGE`` - sort key

              .. note::

                The partition key of an item is also known as its *hash attribute* . The term "hash
                attribute" derives from DynamoDB's usage of an internal hash function to evenly
                distribute data items across partitions, based on their partition key values.

                The sort key of an item is also known as its *range attribute* . The term "range
                attribute" derives from the way DynamoDB stores items with the same partition key
                physically close together, in sorted order by the sort key value.

        - **Projection** *(dict) --*

          Represents attributes that are copied (projected) from the table into the global secondary
          index. These are in addition to the primary key attributes and index key attributes, which
          are automatically projected.

          - **ProjectionType** *(string) --*

            The set of attributes that are projected into the index:

            * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

            * ``INCLUDE`` - Only the specified table attributes are projected into the index. The
            list of projected attributes is in ``NonKeyAttributes`` .

            * ``ALL`` - All of the table attributes are projected into the index.

          - **NonKeyAttributes** *(list) --*

            Represents the non-key attribute names which will be projected into the index.

            For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all
            of the local secondary indexes, must not exceed 20. If you project the same attribute
            into two different indexes, this counts as two distinct attributes when determining the
            total.

            - *(string) --*

        - **IndexStatus** *(string) --*

          The current state of the global secondary index:

          * ``CREATING`` - The index is being created.

          * ``UPDATING`` - The index is being updated.

          * ``DELETING`` - The index is being deleted.

          * ``ACTIVE`` - The index is ready for use.

        - **Backfilling** *(boolean) --*

          Indicates whether the index is currently backfilling. *Backfilling* is the process of
          reading items from the table and determining whether they can be added to the index. (Not
          all items will qualify: For example, a partition key cannot have any duplicate values.) If
          an item can be added to the index, DynamoDB will do so. After all items have been
          processed, the backfilling operation is complete and ``Backfilling`` is false.

          You can delete an index that is being created during the ``Backfilling`` phase when
          ``IndexStatus`` is set to CREATING and ``Backfilling`` is true. You can't delete the index
          that is being created when ``IndexStatus`` is set to CREATING and ``Backfilling`` is
          false.

          .. note::

            For indexes that were created during a ``CreateTable`` operation, the ``Backfilling``
            attribute does not appear in the ``DescribeTable`` output.

        - **ProvisionedThroughput** *(dict) --*

          Represents the provisioned throughput settings for the specified global secondary index.

          For current minimum and maximum provisioned throughput values, see `Limits
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
          *Amazon DynamoDB Developer Guide* .

          - **LastIncreaseDateTime** *(datetime) --*

            The date and time of the last provisioned throughput increase for this table.

          - **LastDecreaseDateTime** *(datetime) --*

            The date and time of the last provisioned throughput decrease for this table.

          - **NumberOfDecreasesToday** *(integer) --*

            The number of provisioned throughput decreases for this table during this UTC calendar
            day. For current maximums on provisioned throughput decreases, see `Limits
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
            *Amazon DynamoDB Developer Guide* .

          - **ReadCapacityUnits** *(integer) --*

            The maximum number of strongly consistent reads consumed per second before DynamoDB
            returns a ``ThrottlingException`` . Eventually consistent reads require less effort than
            strongly consistent reads, so a setting of 50 ``ReadCapacityUnits`` per second provides
            100 eventually consistent ``ReadCapacityUnits`` per second.

          - **WriteCapacityUnits** *(integer) --*

            The maximum number of writes consumed per second before DynamoDB returns a
            ``ThrottlingException`` .

        - **IndexSizeBytes** *(integer) --*

          The total size of the specified index, in bytes. DynamoDB updates this value approximately
          every six hours. Recent changes might not be reflected in this value.

        - **ItemCount** *(integer) --*

          The number of items in the specified index. DynamoDB updates this value approximately
          every six hours. Recent changes might not be reflected in this value.

        - **IndexArn** *(string) --*

          The Amazon Resource Name (ARN) that uniquely identifies the index.

    - **StreamSpecification** *(dict) --*

      The current DynamoDB Streams configuration for the table.

      - **StreamEnabled** *(boolean) --*

        Indicates whether DynamoDB Streams is enabled (true) or disabled (false) on the table.

      - **StreamViewType** *(string) --*

        When an item in the table is modified, ``StreamViewType`` determines what information is
        written to the stream for this table. Valid values for ``StreamViewType`` are:

        * ``KEYS_ONLY`` - Only the key attributes of the modified item are written to the stream.

        * ``NEW_IMAGE`` - The entire item, as it appears after it was modified, is written to the
        stream.

        * ``OLD_IMAGE`` - The entire item, as it appeared before it was modified, is written to the
        stream.

        * ``NEW_AND_OLD_IMAGES`` - Both the new and the old item images of the item are written to
        the stream.

    - **LatestStreamLabel** *(string) --*

      A timestamp, in ISO 8601 format, for this stream.

      Note that ``LatestStreamLabel`` is not a unique identifier for the stream, because it is
      possible that a stream from another table might have the same timestamp. However, the
      combination of the following three elements is guaranteed to be unique:

      * AWS customer ID

      * Table name

      * ``StreamLabel``

    - **LatestStreamArn** *(string) --*

      The Amazon Resource Name (ARN) that uniquely identifies the latest stream for this table.

    - **GlobalTableVersion** *(string) --*

      Represents the version of `global tables
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GlobalTables.html>`__ in
      use, if the table is replicated across AWS Regions.

    - **Replicas** *(list) --*

      Represents replicas of the table.

      - *(dict) --*

        Contains the details of the replica.

        - **RegionName** *(string) --*

          The name of the Region.

        - **ReplicaStatus** *(string) --*

          The current state of the replica:

          * ``CREATING`` - The replica is being created.

          * ``UPDATING`` - The replica is being updated.

          * ``DELETING`` - The replica is being deleted.

          * ``ACTIVE`` - The replica is ready for use.

        - **ReplicaStatusDescription** *(string) --*

          Detailed information about the replica status.

        - **ReplicaStatusPercentProgress** *(string) --*

          Specifies the progress of a Create, Update, or Delete action on the replica as a
          percentage.

        - **KMSMasterKeyId** *(string) --*

          The AWS KMS customer master key (CMK) of the replica that will be used for AWS KMS
          encryption.

        - **ProvisionedThroughputOverride** *(dict) --*

          Replica-specific provisioned throughput. If not described, uses the source table's
          provisioned throughput settings.

          - **ReadCapacityUnits** *(integer) --*

            Replica-specific read capacity units. If not specified, uses the source table's read
            capacity settings.

        - **GlobalSecondaryIndexes** *(list) --*

          Replica-specific global secondary index settings.

          - *(dict) --*

            Represents the properties of a replica global secondary index.

            - **IndexName** *(string) --*

              The name of the global secondary index.

            - **ProvisionedThroughputOverride** *(dict) --*

              If not described, uses the source table GSI's read capacity settings.

              - **ReadCapacityUnits** *(integer) --*

                Replica-specific read capacity units. If not specified, uses the source table's read
                capacity settings.

    - **RestoreSummary** *(dict) --*

      Contains details for the restore.

      - **SourceBackupArn** *(string) --*

        The Amazon Resource Name (ARN) of the backup from which the table was restored.

      - **SourceTableArn** *(string) --*

        The ARN of the source table of the backup that is being restored.

      - **RestoreDateTime** *(datetime) --*

        Point in time or source backup time.

      - **RestoreInProgress** *(boolean) --*

        Indicates if a restore is in progress or not.

    - **SSEDescription** *(dict) --*

      The description of the server-side encryption status on the specified table.

      - **Status** *(string) --*

        Represents the current state of server-side encryption. The only supported values are:

        * ``ENABLED`` - Server-side encryption is enabled.

        * ``UPDATING`` - Server-side encryption is being updated.

      - **SSEType** *(string) --*

        Server-side encryption type. The only supported value is:

        * ``KMS`` - Server-side encryption that uses AWS Key Management Service. The key is stored
        in your account and is managed by AWS KMS (AWS KMS charges apply).

      - **KMSMasterKeyArn** *(string) --*

        The AWS KMS customer master key (CMK) ARN used for the AWS KMS encryption.

      - **InaccessibleEncryptionDateTime** *(datetime) --*

        Indicates the time, in UNIX epoch date format, when DynamoDB detected that the table's AWS
        KMS key was inaccessible. This attribute will automatically be cleared when DynamoDB detects
        that the table's AWS KMS key is accessible again. DynamoDB will initiate the table archival
        process when table's AWS KMS key remains inaccessible for more than seven days from this
        date.

    - **ArchivalSummary** *(dict) --*

      Contains information about the table archive.

      - **ArchivalDateTime** *(datetime) --*

        The date and time when table archival was initiated by DynamoDB, in UNIX epoch time format.

      - **ArchivalReason** *(string) --*

        The reason DynamoDB archived the table. Currently, the only possible value is:

        * ``INACCESSIBLE_ENCRYPTION_CREDENTIALS`` - The table was archived due to the table's AWS
        KMS key being inaccessible for more than seven days. An On-Demand backup was created at the
        archival time.

      - **ArchivalBackupArn** *(string) --*

        The Amazon Resource Name (ARN) of the backup the table was archived to, when applicable in
        the archival reason. If you wish to restore this backup to the same table name, you will
        need to delete the original table.
    """


_TableDeleteResponseTypeDef = TypedDict(
    "_TableDeleteResponseTypeDef",
    {"TableDescription": TableDeleteResponseTableDescriptionTypeDef},
    total=False,
)


class TableDeleteResponseTypeDef(_TableDeleteResponseTypeDef):
    """
    Type definition for `TableDelete` `Response`

    Represents the output of a ``DeleteTable`` operation.

    - **TableDescription** *(dict) --*

      Represents the properties of a table.

      - **AttributeDefinitions** *(list) --*

        An array of ``AttributeDefinition`` objects. Each of these objects describes one attribute
        in the table and index key schema.

        Each ``AttributeDefinition`` object in this array is composed of:

        * ``AttributeName`` - The name of the attribute.

        * ``AttributeType`` - The data type for the attribute.

        - *(dict) --*

          Represents an attribute for describing the key schema for the table and indexes.

          - **AttributeName** *(string) --*

            A name for the attribute.

          - **AttributeType** *(string) --*

            The data type for the attribute, where:

            * ``S`` - the attribute is of type String

            * ``N`` - the attribute is of type Number

            * ``B`` - the attribute is of type Binary

      - **TableName** *(string) --*

        The name of the table.

      - **KeySchema** *(list) --*

        The primary key structure for the table. Each ``KeySchemaElement`` consists of:

        * ``AttributeName`` - The name of the attribute.

        * ``KeyType`` - The role of the attribute:

          * ``HASH`` - partition key

          * ``RANGE`` - sort key

        .. note::

          The partition key of an item is also known as its *hash attribute* . The term "hash
          attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
          data items across partitions, based on their partition key values.

          The sort key of an item is also known as its *range attribute* . The term "range
          attribute" derives from the way DynamoDB stores items with the same partition key
          physically close together, in sorted order by the sort key value.

        For more information about primary keys, see `Primary Key
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html#DataModelPrimaryKey>`__
        in the *Amazon DynamoDB Developer Guide* .

        - *(dict) --*

          Represents *a single element* of a key schema. A key schema specifies the attributes that
          make up the primary key of a table, or the key attributes of an index.

          A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
          simple primary key would be represented by one ``KeySchemaElement`` (for the partition
          key). A composite primary key would require one ``KeySchemaElement`` for the partition
          key, and another ``KeySchemaElement`` for the sort key.

          A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The
          data type must be one of String, Number, or Binary. The attribute cannot be nested within
          a List or a Map.

          - **AttributeName** *(string) --*

            The name of a key attribute.

          - **KeyType** *(string) --*

            The role that this key attribute will assume:

            * ``HASH`` - partition key

            * ``RANGE`` - sort key

            .. note::

              The partition key of an item is also known as its *hash attribute* . The term "hash
              attribute" derives from DynamoDB's usage of an internal hash function to evenly
              distribute data items across partitions, based on their partition key values.

              The sort key of an item is also known as its *range attribute* . The term "range
              attribute" derives from the way DynamoDB stores items with the same partition key
              physically close together, in sorted order by the sort key value.

      - **TableStatus** *(string) --*

        The current state of the table:

        * ``CREATING`` - The table is being created.

        * ``UPDATING`` - The table is being updated.

        * ``DELETING`` - The table is being deleted.

        * ``ACTIVE`` - The table is ready for use.

        * ``INACCESSIBLE_ENCRYPTION_CREDENTIALS`` - The AWS KMS key used to encrypt the table in
        inaccessible. Table operations may fail due to failure to use the AWS KMS key. DynamoDB will
        initiate the table archival process when a table's AWS KMS key remains inaccessible for more
        than seven days.

        * ``ARCHIVING`` - The table is being archived. Operations are not allowed until archival is
        complete.

        * ``ARCHIVED`` - The table has been archived. See the ArchivalReason for more information.

      - **CreationDateTime** *(datetime) --*

        The date and time when the table was created, in `UNIX epoch time
        <http://www.epochconverter.com/>`__ format.

      - **ProvisionedThroughput** *(dict) --*

        The provisioned throughput settings for the table, consisting of read and write capacity
        units, along with data about increases and decreases.

        - **LastIncreaseDateTime** *(datetime) --*

          The date and time of the last provisioned throughput increase for this table.

        - **LastDecreaseDateTime** *(datetime) --*

          The date and time of the last provisioned throughput decrease for this table.

        - **NumberOfDecreasesToday** *(integer) --*

          The number of provisioned throughput decreases for this table during this UTC calendar
          day. For current maximums on provisioned throughput decreases, see `Limits
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
          *Amazon DynamoDB Developer Guide* .

        - **ReadCapacityUnits** *(integer) --*

          The maximum number of strongly consistent reads consumed per second before DynamoDB
          returns a ``ThrottlingException`` . Eventually consistent reads require less effort than
          strongly consistent reads, so a setting of 50 ``ReadCapacityUnits`` per second provides
          100 eventually consistent ``ReadCapacityUnits`` per second.

        - **WriteCapacityUnits** *(integer) --*

          The maximum number of writes consumed per second before DynamoDB returns a
          ``ThrottlingException`` .

      - **TableSizeBytes** *(integer) --*

        The total size of the specified table, in bytes. DynamoDB updates this value approximately
        every six hours. Recent changes might not be reflected in this value.

      - **ItemCount** *(integer) --*

        The number of items in the specified table. DynamoDB updates this value approximately every
        six hours. Recent changes might not be reflected in this value.

      - **TableArn** *(string) --*

        The Amazon Resource Name (ARN) that uniquely identifies the table.

      - **TableId** *(string) --*

        Unique identifier for the table for which the backup was created.

      - **BillingModeSummary** *(dict) --*

        Contains the details for the read/write capacity mode.

        - **BillingMode** *(string) --*

          Controls how you are charged for read and write throughput and how you manage capacity.
          This setting can be changed later.

          * ``PROVISIONED`` - Sets the read/write capacity mode to ``PROVISIONED`` . We recommend
          using ``PROVISIONED`` for predictable workloads.

          * ``PAY_PER_REQUEST`` - Sets the read/write capacity mode to ``PAY_PER_REQUEST`` . We
          recommend using ``PAY_PER_REQUEST`` for unpredictable workloads.

        - **LastUpdateToPayPerRequestDateTime** *(datetime) --*

          Represents the time when ``PAY_PER_REQUEST`` was last set as the read/write capacity mode.

      - **LocalSecondaryIndexes** *(list) --*

        Represents one or more local secondary indexes on the table. Each index is scoped to a given
        partition key value. Tables with one or more local secondary indexes are subject to an item
        collection size limit, where the amount of data within a given item collection cannot exceed
        10 GB. Each element is composed of:

        * ``IndexName`` - The name of the local secondary index.

        * ``KeySchema`` - Specifies the complete index key schema. The attribute names in the key
        schema must be between 1 and 255 characters (inclusive). The key schema must begin with the
        same partition key as the table.

        * ``Projection`` - Specifies attributes that are copied (projected) from the table into the
        index. These are in addition to the primary key attributes and index key attributes, which
        are automatically projected. Each attribute specification is composed of:

          * ``ProjectionType`` - One of the following:

            * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

            * ``INCLUDE`` - Only the specified table attributes are projected into the index. The
            list of projected attributes is in ``NonKeyAttributes`` .

            * ``ALL`` - All of the table attributes are projected into the index.

          * ``NonKeyAttributes`` - A list of one or more non-key attribute names that are projected
          into the secondary index. The total count of attributes provided in ``NonKeyAttributes`` ,
          summed across all of the secondary indexes, must not exceed 20. If you project the same
          attribute into two different indexes, this counts as two distinct attributes when
          determining the total.

        * ``IndexSizeBytes`` - Represents the total size of the index, in bytes. DynamoDB updates
        this value approximately every six hours. Recent changes might not be reflected in this
        value.

        * ``ItemCount`` - Represents the number of items in the index. DynamoDB updates this value
        approximately every six hours. Recent changes might not be reflected in this value.

        If the table is in the ``DELETING`` state, no information about indexes will be returned.

        - *(dict) --*

          Represents the properties of a local secondary index.

          - **IndexName** *(string) --*

            Represents the name of the local secondary index.

          - **KeySchema** *(list) --*

            The complete key schema for the local secondary index, consisting of one or more pairs
            of attribute names and key types:

            * ``HASH`` - partition key

            * ``RANGE`` - sort key

            .. note::

              The partition key of an item is also known as its *hash attribute* . The term "hash
              attribute" derives from DynamoDB's usage of an internal hash function to evenly
              distribute data items across partitions, based on their partition key values.

              The sort key of an item is also known as its *range attribute* . The term "range
              attribute" derives from the way DynamoDB stores items with the same partition key
              physically close together, in sorted order by the sort key value.

            - *(dict) --*

              Represents *a single element* of a key schema. A key schema specifies the attributes
              that make up the primary key of a table, or the key attributes of an index.

              A ``KeySchemaElement`` represents exactly one attribute of the primary key. For
              example, a simple primary key would be represented by one ``KeySchemaElement`` (for
              the partition key). A composite primary key would require one ``KeySchemaElement`` for
              the partition key, and another ``KeySchemaElement`` for the sort key.

              A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute).
              The data type must be one of String, Number, or Binary. The attribute cannot be nested
              within a List or a Map.

              - **AttributeName** *(string) --*

                The name of a key attribute.

              - **KeyType** *(string) --*

                The role that this key attribute will assume:

                * ``HASH`` - partition key

                * ``RANGE`` - sort key

                .. note::

                  The partition key of an item is also known as its *hash attribute* . The term
                  "hash attribute" derives from DynamoDB's usage of an internal hash function to
                  evenly distribute data items across partitions, based on their partition key
                  values.

                  The sort key of an item is also known as its *range attribute* . The term "range
                  attribute" derives from the way DynamoDB stores items with the same partition key
                  physically close together, in sorted order by the sort key value.

          - **Projection** *(dict) --*

            Represents attributes that are copied (projected) from the table into the global
            secondary index. These are in addition to the primary key attributes and index key
            attributes, which are automatically projected.

            - **ProjectionType** *(string) --*

              The set of attributes that are projected into the index:

              * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

              * ``INCLUDE`` - Only the specified table attributes are projected into the index. The
              list of projected attributes is in ``NonKeyAttributes`` .

              * ``ALL`` - All of the table attributes are projected into the index.

            - **NonKeyAttributes** *(list) --*

              Represents the non-key attribute names which will be projected into the index.

              For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all
              of the local secondary indexes, must not exceed 20. If you project the same attribute
              into two different indexes, this counts as two distinct attributes when determining
              the total.

              - *(string) --*

          - **IndexSizeBytes** *(integer) --*

            The total size of the specified index, in bytes. DynamoDB updates this value
            approximately every six hours. Recent changes might not be reflected in this value.

          - **ItemCount** *(integer) --*

            The number of items in the specified index. DynamoDB updates this value approximately
            every six hours. Recent changes might not be reflected in this value.

          - **IndexArn** *(string) --*

            The Amazon Resource Name (ARN) that uniquely identifies the index.

      - **GlobalSecondaryIndexes** *(list) --*

        The global secondary indexes, if any, on the table. Each index is scoped to a given
        partition key value. Each element is composed of:

        * ``Backfilling`` - If true, then the index is currently in the backfilling phase.
        Backfilling occurs only when a new global secondary index is added to the table. It is the
        process by which DynamoDB populates the new index with data from the table. (This attribute
        does not appear for indexes that were created during a ``CreateTable`` operation.)  You can
        delete an index that is being created during the ``Backfilling`` phase when ``IndexStatus``
        is set to CREATING and ``Backfilling`` is true. You can't delete the index that is being
        created when ``IndexStatus`` is set to CREATING and ``Backfilling`` is false. (This
        attribute does not appear for indexes that were created during a ``CreateTable`` operation.)

        * ``IndexName`` - The name of the global secondary index.

        * ``IndexSizeBytes`` - The total size of the global secondary index, in bytes. DynamoDB
        updates this value approximately every six hours. Recent changes might not be reflected in
        this value.

        * ``IndexStatus`` - The current status of the global secondary index:

          * ``CREATING`` - The index is being created.

          * ``UPDATING`` - The index is being updated.

          * ``DELETING`` - The index is being deleted.

          * ``ACTIVE`` - The index is ready for use.

        * ``ItemCount`` - The number of items in the global secondary index. DynamoDB updates this
        value approximately every six hours. Recent changes might not be reflected in this value.

        * ``KeySchema`` - Specifies the complete index key schema. The attribute names in the key
        schema must be between 1 and 255 characters (inclusive). The key schema must begin with the
        same partition key as the table.

        * ``Projection`` - Specifies attributes that are copied (projected) from the table into the
        index. These are in addition to the primary key attributes and index key attributes, which
        are automatically projected. Each attribute specification is composed of:

          * ``ProjectionType`` - One of the following:

            * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

            * ``INCLUDE`` - Only the specified table attributes are projected into the index. The
            list of projected attributes is in ``NonKeyAttributes`` .

            * ``ALL`` - All of the table attributes are projected into the index.

          * ``NonKeyAttributes`` - A list of one or more non-key attribute names that are projected
          into the secondary index. The total count of attributes provided in ``NonKeyAttributes`` ,
          summed across all of the secondary indexes, must not exceed 20. If you project the same
          attribute into two different indexes, this counts as two distinct attributes when
          determining the total.

        * ``ProvisionedThroughput`` - The provisioned throughput settings for the global secondary
        index, consisting of read and write capacity units, along with data about increases and
        decreases.

        If the table is in the ``DELETING`` state, no information about indexes will be returned.

        - *(dict) --*

          Represents the properties of a global secondary index.

          - **IndexName** *(string) --*

            The name of the global secondary index.

          - **KeySchema** *(list) --*

            The complete key schema for a global secondary index, which consists of one or more
            pairs of attribute names and key types:

            * ``HASH`` - partition key

            * ``RANGE`` - sort key

            .. note::

              The partition key of an item is also known as its *hash attribute* . The term "hash
              attribute" derives from DynamoDB's usage of an internal hash function to evenly
              distribute data items across partitions, based on their partition key values.

              The sort key of an item is also known as its *range attribute* . The term "range
              attribute" derives from the way DynamoDB stores items with the same partition key
              physically close together, in sorted order by the sort key value.

            - *(dict) --*

              Represents *a single element* of a key schema. A key schema specifies the attributes
              that make up the primary key of a table, or the key attributes of an index.

              A ``KeySchemaElement`` represents exactly one attribute of the primary key. For
              example, a simple primary key would be represented by one ``KeySchemaElement`` (for
              the partition key). A composite primary key would require one ``KeySchemaElement`` for
              the partition key, and another ``KeySchemaElement`` for the sort key.

              A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute).
              The data type must be one of String, Number, or Binary. The attribute cannot be nested
              within a List or a Map.

              - **AttributeName** *(string) --*

                The name of a key attribute.

              - **KeyType** *(string) --*

                The role that this key attribute will assume:

                * ``HASH`` - partition key

                * ``RANGE`` - sort key

                .. note::

                  The partition key of an item is also known as its *hash attribute* . The term
                  "hash attribute" derives from DynamoDB's usage of an internal hash function to
                  evenly distribute data items across partitions, based on their partition key
                  values.

                  The sort key of an item is also known as its *range attribute* . The term "range
                  attribute" derives from the way DynamoDB stores items with the same partition key
                  physically close together, in sorted order by the sort key value.

          - **Projection** *(dict) --*

            Represents attributes that are copied (projected) from the table into the global
            secondary index. These are in addition to the primary key attributes and index key
            attributes, which are automatically projected.

            - **ProjectionType** *(string) --*

              The set of attributes that are projected into the index:

              * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

              * ``INCLUDE`` - Only the specified table attributes are projected into the index. The
              list of projected attributes is in ``NonKeyAttributes`` .

              * ``ALL`` - All of the table attributes are projected into the index.

            - **NonKeyAttributes** *(list) --*

              Represents the non-key attribute names which will be projected into the index.

              For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all
              of the local secondary indexes, must not exceed 20. If you project the same attribute
              into two different indexes, this counts as two distinct attributes when determining
              the total.

              - *(string) --*

          - **IndexStatus** *(string) --*

            The current state of the global secondary index:

            * ``CREATING`` - The index is being created.

            * ``UPDATING`` - The index is being updated.

            * ``DELETING`` - The index is being deleted.

            * ``ACTIVE`` - The index is ready for use.

          - **Backfilling** *(boolean) --*

            Indicates whether the index is currently backfilling. *Backfilling* is the process of
            reading items from the table and determining whether they can be added to the index.
            (Not all items will qualify: For example, a partition key cannot have any duplicate
            values.) If an item can be added to the index, DynamoDB will do so. After all items have
            been processed, the backfilling operation is complete and ``Backfilling`` is false.

            You can delete an index that is being created during the ``Backfilling`` phase when
            ``IndexStatus`` is set to CREATING and ``Backfilling`` is true. You can't delete the
            index that is being created when ``IndexStatus`` is set to CREATING and ``Backfilling``
            is false.

            .. note::

              For indexes that were created during a ``CreateTable`` operation, the ``Backfilling``
              attribute does not appear in the ``DescribeTable`` output.

          - **ProvisionedThroughput** *(dict) --*

            Represents the provisioned throughput settings for the specified global secondary index.

            For current minimum and maximum provisioned throughput values, see `Limits
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
            *Amazon DynamoDB Developer Guide* .

            - **LastIncreaseDateTime** *(datetime) --*

              The date and time of the last provisioned throughput increase for this table.

            - **LastDecreaseDateTime** *(datetime) --*

              The date and time of the last provisioned throughput decrease for this table.

            - **NumberOfDecreasesToday** *(integer) --*

              The number of provisioned throughput decreases for this table during this UTC calendar
              day. For current maximums on provisioned throughput decreases, see `Limits
              <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in
              the *Amazon DynamoDB Developer Guide* .

            - **ReadCapacityUnits** *(integer) --*

              The maximum number of strongly consistent reads consumed per second before DynamoDB
              returns a ``ThrottlingException`` . Eventually consistent reads require less effort
              than strongly consistent reads, so a setting of 50 ``ReadCapacityUnits`` per second
              provides 100 eventually consistent ``ReadCapacityUnits`` per second.

            - **WriteCapacityUnits** *(integer) --*

              The maximum number of writes consumed per second before DynamoDB returns a
              ``ThrottlingException`` .

          - **IndexSizeBytes** *(integer) --*

            The total size of the specified index, in bytes. DynamoDB updates this value
            approximately every six hours. Recent changes might not be reflected in this value.

          - **ItemCount** *(integer) --*

            The number of items in the specified index. DynamoDB updates this value approximately
            every six hours. Recent changes might not be reflected in this value.

          - **IndexArn** *(string) --*

            The Amazon Resource Name (ARN) that uniquely identifies the index.

      - **StreamSpecification** *(dict) --*

        The current DynamoDB Streams configuration for the table.

        - **StreamEnabled** *(boolean) --*

          Indicates whether DynamoDB Streams is enabled (true) or disabled (false) on the table.

        - **StreamViewType** *(string) --*

          When an item in the table is modified, ``StreamViewType`` determines what information is
          written to the stream for this table. Valid values for ``StreamViewType`` are:

          * ``KEYS_ONLY`` - Only the key attributes of the modified item are written to the stream.

          * ``NEW_IMAGE`` - The entire item, as it appears after it was modified, is written to the
          stream.

          * ``OLD_IMAGE`` - The entire item, as it appeared before it was modified, is written to
          the stream.

          * ``NEW_AND_OLD_IMAGES`` - Both the new and the old item images of the item are written to
          the stream.

      - **LatestStreamLabel** *(string) --*

        A timestamp, in ISO 8601 format, for this stream.

        Note that ``LatestStreamLabel`` is not a unique identifier for the stream, because it is
        possible that a stream from another table might have the same timestamp. However, the
        combination of the following three elements is guaranteed to be unique:

        * AWS customer ID

        * Table name

        * ``StreamLabel``

      - **LatestStreamArn** *(string) --*

        The Amazon Resource Name (ARN) that uniquely identifies the latest stream for this table.

      - **GlobalTableVersion** *(string) --*

        Represents the version of `global tables
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GlobalTables.html>`__ in
        use, if the table is replicated across AWS Regions.

      - **Replicas** *(list) --*

        Represents replicas of the table.

        - *(dict) --*

          Contains the details of the replica.

          - **RegionName** *(string) --*

            The name of the Region.

          - **ReplicaStatus** *(string) --*

            The current state of the replica:

            * ``CREATING`` - The replica is being created.

            * ``UPDATING`` - The replica is being updated.

            * ``DELETING`` - The replica is being deleted.

            * ``ACTIVE`` - The replica is ready for use.

          - **ReplicaStatusDescription** *(string) --*

            Detailed information about the replica status.

          - **ReplicaStatusPercentProgress** *(string) --*

            Specifies the progress of a Create, Update, or Delete action on the replica as a
            percentage.

          - **KMSMasterKeyId** *(string) --*

            The AWS KMS customer master key (CMK) of the replica that will be used for AWS KMS
            encryption.

          - **ProvisionedThroughputOverride** *(dict) --*

            Replica-specific provisioned throughput. If not described, uses the source table's
            provisioned throughput settings.

            - **ReadCapacityUnits** *(integer) --*

              Replica-specific read capacity units. If not specified, uses the source table's read
              capacity settings.

          - **GlobalSecondaryIndexes** *(list) --*

            Replica-specific global secondary index settings.

            - *(dict) --*

              Represents the properties of a replica global secondary index.

              - **IndexName** *(string) --*

                The name of the global secondary index.

              - **ProvisionedThroughputOverride** *(dict) --*

                If not described, uses the source table GSI's read capacity settings.

                - **ReadCapacityUnits** *(integer) --*

                  Replica-specific read capacity units. If not specified, uses the source table's
                  read capacity settings.

      - **RestoreSummary** *(dict) --*

        Contains details for the restore.

        - **SourceBackupArn** *(string) --*

          The Amazon Resource Name (ARN) of the backup from which the table was restored.

        - **SourceTableArn** *(string) --*

          The ARN of the source table of the backup that is being restored.

        - **RestoreDateTime** *(datetime) --*

          Point in time or source backup time.

        - **RestoreInProgress** *(boolean) --*

          Indicates if a restore is in progress or not.

      - **SSEDescription** *(dict) --*

        The description of the server-side encryption status on the specified table.

        - **Status** *(string) --*

          Represents the current state of server-side encryption. The only supported values are:

          * ``ENABLED`` - Server-side encryption is enabled.

          * ``UPDATING`` - Server-side encryption is being updated.

        - **SSEType** *(string) --*

          Server-side encryption type. The only supported value is:

          * ``KMS`` - Server-side encryption that uses AWS Key Management Service. The key is stored
          in your account and is managed by AWS KMS (AWS KMS charges apply).

        - **KMSMasterKeyArn** *(string) --*

          The AWS KMS customer master key (CMK) ARN used for the AWS KMS encryption.

        - **InaccessibleEncryptionDateTime** *(datetime) --*

          Indicates the time, in UNIX epoch date format, when DynamoDB detected that the table's AWS
          KMS key was inaccessible. This attribute will automatically be cleared when DynamoDB
          detects that the table's AWS KMS key is accessible again. DynamoDB will initiate the table
          archival process when table's AWS KMS key remains inaccessible for more than seven days
          from this date.

      - **ArchivalSummary** *(dict) --*

        Contains information about the table archive.

        - **ArchivalDateTime** *(datetime) --*

          The date and time when table archival was initiated by DynamoDB, in UNIX epoch time
          format.

        - **ArchivalReason** *(string) --*

          The reason DynamoDB archived the table. Currently, the only possible value is:

          * ``INACCESSIBLE_ENCRYPTION_CREDENTIALS`` - The table was archived due to the table's AWS
          KMS key being inaccessible for more than seven days. An On-Demand backup was created at
          the archival time.

        - **ArchivalBackupArn** *(string) --*

          The Amazon Resource Name (ARN) of the backup the table was archived to, when applicable in
          the archival reason. If you wish to restore this backup to the same table name, you will
          need to delete the original table.
    """


_TableExistsWaitWaiterConfigTypeDef = TypedDict(
    "_TableExistsWaitWaiterConfigTypeDef", {"Delay": int, "MaxAttempts": int}, total=False
)


class TableExistsWaitWaiterConfigTypeDef(_TableExistsWaitWaiterConfigTypeDef):
    """
    Type definition for `TableExistsWait` `WaiterConfig`

    A dictionary that provides parameters to control waiting behavior.

    - **Delay** *(integer) --*

      The amount of time in seconds to wait between attempts. Default: 20

    - **MaxAttempts** *(integer) --*

      The maximum number of attempts to be made. Default: 25
    """


_TableGetItemKeyTypeDef = TypedDict(
    "_TableGetItemKeyTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class TableGetItemKeyTypeDef(_TableGetItemKeyTypeDef):
    """
    Type definition for `TableGetItem` `Key`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_TableGetItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef = TypedDict(
    "_TableGetItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef",
    {"ReadCapacityUnits": float, "WriteCapacityUnits": float, "CapacityUnits": float},
    total=False,
)


class TableGetItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef(
    _TableGetItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef
):
    """
    Type definition for `TableGetItemResponseConsumedCapacity` `GlobalSecondaryIndexes`

    Represents the amount of provisioned throughput capacity consumed on a table or an index.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed on a table or an index.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed on a table or an index.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed on a table or an index.
    """


_TableGetItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef = TypedDict(
    "_TableGetItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef",
    {"ReadCapacityUnits": float, "WriteCapacityUnits": float, "CapacityUnits": float},
    total=False,
)


class TableGetItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef(
    _TableGetItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef
):
    """
    Type definition for `TableGetItemResponseConsumedCapacity` `LocalSecondaryIndexes`

    Represents the amount of provisioned throughput capacity consumed on a table or an index.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed on a table or an index.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed on a table or an index.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed on a table or an index.
    """


_TableGetItemResponseConsumedCapacityTableTypeDef = TypedDict(
    "_TableGetItemResponseConsumedCapacityTableTypeDef",
    {"ReadCapacityUnits": float, "WriteCapacityUnits": float, "CapacityUnits": float},
    total=False,
)


class TableGetItemResponseConsumedCapacityTableTypeDef(
    _TableGetItemResponseConsumedCapacityTableTypeDef
):
    """
    Type definition for `TableGetItemResponseConsumedCapacity` `Table`

    The amount of throughput consumed on the table affected by the operation.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed on a table or an index.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed on a table or an index.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed on a table or an index.
    """


_TableGetItemResponseConsumedCapacityTypeDef = TypedDict(
    "_TableGetItemResponseConsumedCapacityTypeDef",
    {
        "TableName": str,
        "CapacityUnits": float,
        "ReadCapacityUnits": float,
        "WriteCapacityUnits": float,
        "Table": TableGetItemResponseConsumedCapacityTableTypeDef,
        "LocalSecondaryIndexes": Dict[
            str, TableGetItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef
        ],
        "GlobalSecondaryIndexes": Dict[
            str, TableGetItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef
        ],
    },
    total=False,
)


class TableGetItemResponseConsumedCapacityTypeDef(_TableGetItemResponseConsumedCapacityTypeDef):
    """
    Type definition for `TableGetItemResponse` `ConsumedCapacity`

    The capacity units consumed by the ``GetItem`` operation. The data returned includes the total
    provisioned throughput consumed, along with statistics for the table and any indexes involved in
    the operation. ``ConsumedCapacity`` is only returned if the ``ReturnConsumedCapacity`` parameter
    was specified. For more information, see `Read/Write Capacity Mode
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **TableName** *(string) --*

      The name of the table that was affected by the operation.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed by the operation.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed by the operation.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed by the operation.

    - **Table** *(dict) --*

      The amount of throughput consumed on the table affected by the operation.

      - **ReadCapacityUnits** *(float) --*

        The total number of read capacity units consumed on a table or an index.

      - **WriteCapacityUnits** *(float) --*

        The total number of write capacity units consumed on a table or an index.

      - **CapacityUnits** *(float) --*

        The total number of capacity units consumed on a table or an index.

    - **LocalSecondaryIndexes** *(dict) --*

      The amount of throughput consumed on each local index affected by the operation.

      - *(string) --*

        - *(dict) --*

          Represents the amount of provisioned throughput capacity consumed on a table or an index.

          - **ReadCapacityUnits** *(float) --*

            The total number of read capacity units consumed on a table or an index.

          - **WriteCapacityUnits** *(float) --*

            The total number of write capacity units consumed on a table or an index.

          - **CapacityUnits** *(float) --*

            The total number of capacity units consumed on a table or an index.

    - **GlobalSecondaryIndexes** *(dict) --*

      The amount of throughput consumed on each global index affected by the operation.

      - *(string) --*

        - *(dict) --*

          Represents the amount of provisioned throughput capacity consumed on a table or an index.

          - **ReadCapacityUnits** *(float) --*

            The total number of read capacity units consumed on a table or an index.

          - **WriteCapacityUnits** *(float) --*

            The total number of write capacity units consumed on a table or an index.

          - **CapacityUnits** *(float) --*

            The total number of capacity units consumed on a table or an index.
    """


_TableGetItemResponseItemTypeDef = TypedDict(
    "_TableGetItemResponseItemTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class TableGetItemResponseItemTypeDef(_TableGetItemResponseItemTypeDef):
    """
    Type definition for `TableGetItemResponse` `Item`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_TableGetItemResponseTypeDef = TypedDict(
    "_TableGetItemResponseTypeDef",
    {
        "Item": Dict[str, TableGetItemResponseItemTypeDef],
        "ConsumedCapacity": TableGetItemResponseConsumedCapacityTypeDef,
    },
    total=False,
)


class TableGetItemResponseTypeDef(_TableGetItemResponseTypeDef):
    """
    Type definition for `TableGetItem` `Response`

    Represents the output of a ``GetItem`` operation.

    - **Item** *(dict) --*

      A map of attribute names to ``AttributeValue`` objects, as specified by
      ``ProjectionExpression`` .

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

          - **S** *(string) --*

            An attribute of type String. For example:

             ``"S": "Hello"``

          - **N** *(string) --*

            An attribute of type Number. For example:

             ``"N": "123.45"``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

          - **B** *(bytes) --*

            An attribute of type Binary. For example:

             ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

          - **SS** *(list) --*

            An attribute of type String Set. For example:

             ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

            - *(string) --*

          - **NS** *(list) --*

            An attribute of type Number Set. For example:

             ``"NS": ["42.2", "-19", "7.5", "3.14"]``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

            - *(string) --*

          - **BS** *(list) --*

            An attribute of type Binary Set. For example:

             ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

            - *(bytes) --*

          - **M** *(dict) --*

            An attribute of type Map. For example:

             ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

            - *(string) --*

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

          - **L** *(list) --*

            An attribute of type List. For example:

             ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

            - *(dict) --*

              Represents the data for an attribute.

              Each attribute value is described as a name-value pair. The name is the data type, and
              the value is the data itself.

              For more information, see `Data Types
              <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
              in the *Amazon DynamoDB Developer Guide* .

          - **NULL** *(boolean) --*

            An attribute of type Null. For example:

             ``"NULL": true``

          - **BOOL** *(boolean) --*

            An attribute of type Boolean. For example:

             ``"BOOL": true``

    - **ConsumedCapacity** *(dict) --*

      The capacity units consumed by the ``GetItem`` operation. The data returned includes the total
      provisioned throughput consumed, along with statistics for the table and any indexes involved
      in the operation. ``ConsumedCapacity`` is only returned if the ``ReturnConsumedCapacity``
      parameter was specified. For more information, see `Read/Write Capacity Mode
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html>`__
      in the *Amazon DynamoDB Developer Guide* .

      - **TableName** *(string) --*

        The name of the table that was affected by the operation.

      - **CapacityUnits** *(float) --*

        The total number of capacity units consumed by the operation.

      - **ReadCapacityUnits** *(float) --*

        The total number of read capacity units consumed by the operation.

      - **WriteCapacityUnits** *(float) --*

        The total number of write capacity units consumed by the operation.

      - **Table** *(dict) --*

        The amount of throughput consumed on the table affected by the operation.

        - **ReadCapacityUnits** *(float) --*

          The total number of read capacity units consumed on a table or an index.

        - **WriteCapacityUnits** *(float) --*

          The total number of write capacity units consumed on a table or an index.

        - **CapacityUnits** *(float) --*

          The total number of capacity units consumed on a table or an index.

      - **LocalSecondaryIndexes** *(dict) --*

        The amount of throughput consumed on each local index affected by the operation.

        - *(string) --*

          - *(dict) --*

            Represents the amount of provisioned throughput capacity consumed on a table or an
            index.

            - **ReadCapacityUnits** *(float) --*

              The total number of read capacity units consumed on a table or an index.

            - **WriteCapacityUnits** *(float) --*

              The total number of write capacity units consumed on a table or an index.

            - **CapacityUnits** *(float) --*

              The total number of capacity units consumed on a table or an index.

      - **GlobalSecondaryIndexes** *(dict) --*

        The amount of throughput consumed on each global index affected by the operation.

        - *(string) --*

          - *(dict) --*

            Represents the amount of provisioned throughput capacity consumed on a table or an
            index.

            - **ReadCapacityUnits** *(float) --*

              The total number of read capacity units consumed on a table or an index.

            - **WriteCapacityUnits** *(float) --*

              The total number of write capacity units consumed on a table or an index.

            - **CapacityUnits** *(float) --*

              The total number of capacity units consumed on a table or an index.
    """


_TableNotExistsWaitWaiterConfigTypeDef = TypedDict(
    "_TableNotExistsWaitWaiterConfigTypeDef", {"Delay": int, "MaxAttempts": int}, total=False
)


class TableNotExistsWaitWaiterConfigTypeDef(_TableNotExistsWaitWaiterConfigTypeDef):
    """
    Type definition for `TableNotExistsWait` `WaiterConfig`

    A dictionary that provides parameters to control waiting behavior.

    - **Delay** *(integer) --*

      The amount of time in seconds to wait between attempts. Default: 20

    - **MaxAttempts** *(integer) --*

      The maximum number of attempts to be made. Default: 25
    """


_TablePutItemExpectedAttributeValueListTypeDef = TypedDict(
    "_TablePutItemExpectedAttributeValueListTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class TablePutItemExpectedAttributeValueListTypeDef(_TablePutItemExpectedAttributeValueListTypeDef):
    """
    Type definition for `TablePutItemExpected` `AttributeValueList`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_TablePutItemExpectedValueTypeDef = TypedDict(
    "_TablePutItemExpectedValueTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class TablePutItemExpectedValueTypeDef(_TablePutItemExpectedValueTypeDef):
    """
    Type definition for `TablePutItemExpected` `Value`

    Represents the data for the expected attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_TablePutItemExpectedTypeDef = TypedDict(
    "_TablePutItemExpectedTypeDef",
    {
        "Value": TablePutItemExpectedValueTypeDef,
        "Exists": bool,
        "ComparisonOperator": str,
        "AttributeValueList": List[TablePutItemExpectedAttributeValueListTypeDef],
    },
    total=False,
)


class TablePutItemExpectedTypeDef(_TablePutItemExpectedTypeDef):
    """
    Type definition for `TablePutItem` `Expected`

    Represents a condition to be compared with an attribute value. This condition can be used with
    ``DeleteItem`` , ``PutItem`` , or ``UpdateItem`` operations; if the comparison evaluates to
    true, the operation succeeds; if not, the operation fails. You can use
    ``ExpectedAttributeValue`` in one of two different ways:

    * Use ``AttributeValueList`` to specify one or more values to compare against an attribute. Use
    ``ComparisonOperator`` to specify how you want to perform the comparison. If the comparison
    evaluates to true, then the conditional operation succeeds.

    * Use ``Value`` to specify a value that DynamoDB will compare against an attribute. If the
    values match, then ``ExpectedAttributeValue`` evaluates to true and the conditional operation
    succeeds. Optionally, you can also set ``Exists`` to false, indicating that you *do not* expect
    to find the attribute value in the table. In this case, the conditional operation succeeds only
    if the comparison evaluates to false.

     ``Value`` and ``Exists`` are incompatible with ``AttributeValueList`` and
     ``ComparisonOperator`` . Note that if you use both sets of parameters at once, DynamoDB will
     return a ``ValidationException`` exception.

    - **Value** *(dict) --*

      Represents the data for the expected attribute.

      Each attribute value is described as a name-value pair. The name is the data type, and the
      value is the data itself.

      For more information, see `Data Types
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
      in the *Amazon DynamoDB Developer Guide* .

      - **S** *(string) --*

        An attribute of type String. For example:

         ``"S": "Hello"``

      - **N** *(string) --*

        An attribute of type Number. For example:

         ``"N": "123.45"``

        Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
        languages and libraries. However, DynamoDB treats them as number type attributes for
        mathematical operations.

      - **B** *(bytes) --*

        An attribute of type Binary. For example:

         ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

      - **SS** *(list) --*

        An attribute of type String Set. For example:

         ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

        - *(string) --*

      - **NS** *(list) --*

        An attribute of type Number Set. For example:

         ``"NS": ["42.2", "-19", "7.5", "3.14"]``

        Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
        languages and libraries. However, DynamoDB treats them as number type attributes for
        mathematical operations.

        - *(string) --*

      - **BS** *(list) --*

        An attribute of type Binary Set. For example:

         ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

        - *(bytes) --*

      - **M** *(dict) --*

        An attribute of type Map. For example:

         ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

        - *(string) --*

          - *(dict) --*

            Represents the data for an attribute.

            Each attribute value is described as a name-value pair. The name is the data type, and
            the value is the data itself.

            For more information, see `Data Types
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
            in the *Amazon DynamoDB Developer Guide* .

      - **L** *(list) --*

        An attribute of type List. For example:

         ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

      - **NULL** *(boolean) --*

        An attribute of type Null. For example:

         ``"NULL": true``

      - **BOOL** *(boolean) --*

        An attribute of type Boolean. For example:

         ``"BOOL": true``

    - **Exists** *(boolean) --*

      Causes DynamoDB to evaluate the value before attempting a conditional operation:

      * If ``Exists`` is ``true`` , DynamoDB will check to see if that attribute value already
      exists in the table. If it is found, then the operation succeeds. If it is not found, the
      operation fails with a ``ConditionCheckFailedException`` .

      * If ``Exists`` is ``false`` , DynamoDB assumes that the attribute value does not exist in the
      table. If in fact the value does not exist, then the assumption is valid and the operation
      succeeds. If the value is found, despite the assumption that it does not exist, the operation
      fails with a ``ConditionCheckFailedException`` .

      The default setting for ``Exists`` is ``true`` . If you supply a ``Value`` all by itself,
      DynamoDB assumes the attribute exists: You don't have to set ``Exists`` to ``true`` , because
      it is implied.

      DynamoDB returns a ``ValidationException`` if:

      * ``Exists`` is ``true`` but there is no ``Value`` to check. (You expect a value to exist, but
      don't specify what that value is.)

      * ``Exists`` is ``false`` but you also provide a ``Value`` . (You cannot expect an attribute
      to have a value, while also expecting it not to exist.)

    - **ComparisonOperator** *(string) --*

      A comparator for evaluating attributes in the ``AttributeValueList`` . For example, equals,
      greater than, less than, etc.

      The following comparison operators are available:

       ``EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH
       | IN
       | BETWEEN``

      The following are descriptions of each comparison operator.

      * ``EQ`` : Equal. ``EQ`` is supported for all data types, including lists and maps.
      ``AttributeValueList`` can contain only one ``AttributeValue`` element of type String, Number,
      Binary, String Set, Number Set, or Binary Set. If an item contains an ``AttributeValue``
      element of a different type than the one provided in the request, the value does not match.
      For example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` . Also, ``{"N":"6"}`` does not equal
      ``{"NS":["6", "2", "1"]}`` .

      * ``NE`` : Not equal. ``NE`` is supported for all data types, including lists and maps.
      ``AttributeValueList`` can contain only one ``AttributeValue`` of type String, Number, Binary,
      String Set, Number Set, or Binary Set. If an item contains an ``AttributeValue`` of a
      different type than the one provided in the request, the value does not match. For example,
      ``{"S":"6"}`` does not equal ``{"N":"6"}`` . Also, ``{"N":"6"}`` does not equal ``{"NS":["6",
      "2", "1"]}`` .

      * ``LE`` : Less than or equal.   ``AttributeValueList`` can contain only one
      ``AttributeValue`` element of type String, Number, or Binary (not a set type). If an item
      contains an ``AttributeValue`` element of a different type than the one provided in the
      request, the value does not match. For example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` .
      Also, ``{"N":"6"}`` does not compare to ``{"NS":["6", "2", "1"]}`` .

      * ``LT`` : Less than.   ``AttributeValueList`` can contain only one ``AttributeValue`` of type
      String, Number, or Binary (not a set type). If an item contains an ``AttributeValue`` element
      of a different type than the one provided in the request, the value does not match. For
      example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` . Also, ``{"N":"6"}`` does not compare to
      ``{"NS":["6", "2", "1"]}`` .

      * ``GE`` : Greater than or equal.   ``AttributeValueList`` can contain only one
      ``AttributeValue`` element of type String, Number, or Binary (not a set type). If an item
      contains an ``AttributeValue`` element of a different type than the one provided in the
      request, the value does not match. For example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` .
      Also, ``{"N":"6"}`` does not compare to ``{"NS":["6", "2", "1"]}`` .

      * ``GT`` : Greater than.   ``AttributeValueList`` can contain only one ``AttributeValue``
      element of type String, Number, or Binary (not a set type). If an item contains an
      ``AttributeValue`` element of a different type than the one provided in the request, the value
      does not match. For example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` . Also, ``{"N":"6"}``
      does not compare to ``{"NS":["6", "2", "1"]}`` .

      * ``NOT_NULL`` : The attribute exists. ``NOT_NULL`` is supported for all data types, including
      lists and maps.

      .. note::

         This operator tests for the existence of an attribute, not its data type. If the data type
         of attribute "``a`` " is null, and you evaluate it using ``NOT_NULL`` , the result is a
         Boolean ``true`` . This result is because the attribute "``a`` " exists; its data type is
         not relevant to the ``NOT_NULL`` comparison operator.

      * ``NULL`` : The attribute does not exist. ``NULL`` is supported for all data types, including
      lists and maps.

      .. note::

         This operator tests for the nonexistence of an attribute, not its data type. If the data
         type of attribute "``a`` " is null, and you evaluate it using ``NULL`` , the result is a
         Boolean ``false`` . This is because the attribute "``a`` " exists; its data type is not
         relevant to the ``NULL`` comparison operator.

      * ``CONTAINS`` : Checks for a subsequence, or value in a set.  ``AttributeValueList`` can
      contain only one ``AttributeValue`` element of type String, Number, or Binary (not a set
      type). If the target attribute of the comparison is of type String, then the operator checks
      for a substring match. If the target attribute of the comparison is of type Binary, then the
      operator looks for a subsequence of the target that matches the input. If the target attribute
      of the comparison is a set ("``SS`` ", "``NS`` ", or "``BS`` "), then the operator evaluates
      to true if it finds an exact match with any member of the set. CONTAINS is supported for
      lists: When evaluating "``a CONTAINS b`` ", "``a`` " can be a list; however, "``b`` " cannot
      be a set, a map, or a list.

      * ``NOT_CONTAINS`` : Checks for absence of a subsequence, or absence of a value in a set.
      ``AttributeValueList`` can contain only one ``AttributeValue`` element of type String, Number,
      or Binary (not a set type). If the target attribute of the comparison is a String, then the
      operator checks for the absence of a substring match. If the target attribute of the
      comparison is Binary, then the operator checks for the absence of a subsequence of the target
      that matches the input. If the target attribute of the comparison is a set ("``SS`` ", "``NS``
      ", or "``BS`` "), then the operator evaluates to true if it *does not* find an exact match
      with any member of the set. NOT_CONTAINS is supported for lists: When evaluating "``a NOT
      CONTAINS b`` ", "``a`` " can be a list; however, "``b`` " cannot be a set, a map, or a list.

      * ``BEGINS_WITH`` : Checks for a prefix.   ``AttributeValueList`` can contain only one
      ``AttributeValue`` of type String or Binary (not a Number or a set type). The target attribute
      of the comparison must be of type String or Binary (not a Number or a set type).

      * ``IN`` : Checks for matching elements in a list.  ``AttributeValueList`` can contain one or
      more ``AttributeValue`` elements of type String, Number, or Binary. These attributes are
      compared against an existing attribute of an item. If any elements of the input are equal to
      the item attribute, the expression evaluates to true.

      * ``BETWEEN`` : Greater than or equal to the first value, and less than or equal to the second
      value.   ``AttributeValueList`` must contain two ``AttributeValue`` elements of the same type,
      either String, Number, or Binary (not a set type). A target attribute matches if the target
      value is greater than, or equal to, the first element and less than, or equal to, the second
      element. If an item contains an ``AttributeValue`` element of a different type than the one
      provided in the request, the value does not match. For example, ``{"S":"6"}`` does not compare
      to ``{"N":"6"}`` . Also, ``{"N":"6"}`` does not compare to ``{"NS":["6", "2", "1"]}``

    - **AttributeValueList** *(list) --*

      One or more values to evaluate against the supplied attribute. The number of values in the
      list depends on the ``ComparisonOperator`` being used.

      For type Number, value comparisons are numeric.

      String value comparisons for greater than, equals, or less than are based on ASCII character
      code values. For example, ``a`` is greater than ``A`` , and ``a`` is greater than ``B`` . For
      a list of code values, see `http\\://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters
      <http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters>`__ .

      For Binary, DynamoDB treats each byte of the binary data as unsigned when it compares binary
      values.

      For information on specifying data types in JSON, see `JSON Data Format
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataFormat.html>`__ in the
      *Amazon DynamoDB Developer Guide* .

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

        - **S** *(string) --*

          An attribute of type String. For example:

           ``"S": "Hello"``

        - **N** *(string) --*

          An attribute of type Number. For example:

           ``"N": "123.45"``

          Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
          across languages and libraries. However, DynamoDB treats them as number type attributes
          for mathematical operations.

        - **B** *(bytes) --*

          An attribute of type Binary. For example:

           ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

        - **SS** *(list) --*

          An attribute of type String Set. For example:

           ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

          - *(string) --*

        - **NS** *(list) --*

          An attribute of type Number Set. For example:

           ``"NS": ["42.2", "-19", "7.5", "3.14"]``

          Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
          across languages and libraries. However, DynamoDB treats them as number type attributes
          for mathematical operations.

          - *(string) --*

        - **BS** *(list) --*

          An attribute of type Binary Set. For example:

           ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

          - *(bytes) --*

        - **M** *(dict) --*

          An attribute of type Map. For example:

           ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

          - *(string) --*

            - *(dict) --*

              Represents the data for an attribute.

              Each attribute value is described as a name-value pair. The name is the data type, and
              the value is the data itself.

              For more information, see `Data Types
              <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
              in the *Amazon DynamoDB Developer Guide* .

        - **L** *(list) --*

          An attribute of type List. For example:

           ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

          - *(dict) --*

            Represents the data for an attribute.

            Each attribute value is described as a name-value pair. The name is the data type, and
            the value is the data itself.

            For more information, see `Data Types
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
            in the *Amazon DynamoDB Developer Guide* .

        - **NULL** *(boolean) --*

          An attribute of type Null. For example:

           ``"NULL": true``

        - **BOOL** *(boolean) --*

          An attribute of type Boolean. For example:

           ``"BOOL": true``
    """


_TablePutItemExpressionAttributeValuesTypeDef = TypedDict(
    "_TablePutItemExpressionAttributeValuesTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class TablePutItemExpressionAttributeValuesTypeDef(_TablePutItemExpressionAttributeValuesTypeDef):
    """
    Type definition for `TablePutItem` `ExpressionAttributeValues`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_TablePutItemItemTypeDef = TypedDict(
    "_TablePutItemItemTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class TablePutItemItemTypeDef(_TablePutItemItemTypeDef):
    """
    Type definition for `TablePutItem` `Item`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_TablePutItemResponseAttributesTypeDef = TypedDict(
    "_TablePutItemResponseAttributesTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class TablePutItemResponseAttributesTypeDef(_TablePutItemResponseAttributesTypeDef):
    """
    Type definition for `TablePutItemResponse` `Attributes`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_TablePutItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef = TypedDict(
    "_TablePutItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef",
    {"ReadCapacityUnits": float, "WriteCapacityUnits": float, "CapacityUnits": float},
    total=False,
)


class TablePutItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef(
    _TablePutItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef
):
    """
    Type definition for `TablePutItemResponseConsumedCapacity` `GlobalSecondaryIndexes`

    Represents the amount of provisioned throughput capacity consumed on a table or an index.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed on a table or an index.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed on a table or an index.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed on a table or an index.
    """


_TablePutItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef = TypedDict(
    "_TablePutItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef",
    {"ReadCapacityUnits": float, "WriteCapacityUnits": float, "CapacityUnits": float},
    total=False,
)


class TablePutItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef(
    _TablePutItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef
):
    """
    Type definition for `TablePutItemResponseConsumedCapacity` `LocalSecondaryIndexes`

    Represents the amount of provisioned throughput capacity consumed on a table or an index.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed on a table or an index.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed on a table or an index.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed on a table or an index.
    """


_TablePutItemResponseConsumedCapacityTableTypeDef = TypedDict(
    "_TablePutItemResponseConsumedCapacityTableTypeDef",
    {"ReadCapacityUnits": float, "WriteCapacityUnits": float, "CapacityUnits": float},
    total=False,
)


class TablePutItemResponseConsumedCapacityTableTypeDef(
    _TablePutItemResponseConsumedCapacityTableTypeDef
):
    """
    Type definition for `TablePutItemResponseConsumedCapacity` `Table`

    The amount of throughput consumed on the table affected by the operation.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed on a table or an index.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed on a table or an index.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed on a table or an index.
    """


_TablePutItemResponseConsumedCapacityTypeDef = TypedDict(
    "_TablePutItemResponseConsumedCapacityTypeDef",
    {
        "TableName": str,
        "CapacityUnits": float,
        "ReadCapacityUnits": float,
        "WriteCapacityUnits": float,
        "Table": TablePutItemResponseConsumedCapacityTableTypeDef,
        "LocalSecondaryIndexes": Dict[
            str, TablePutItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef
        ],
        "GlobalSecondaryIndexes": Dict[
            str, TablePutItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef
        ],
    },
    total=False,
)


class TablePutItemResponseConsumedCapacityTypeDef(_TablePutItemResponseConsumedCapacityTypeDef):
    """
    Type definition for `TablePutItemResponse` `ConsumedCapacity`

    The capacity units consumed by the ``PutItem`` operation. The data returned includes the total
    provisioned throughput consumed, along with statistics for the table and any indexes involved in
    the operation. ``ConsumedCapacity`` is only returned if the ``ReturnConsumedCapacity`` parameter
    was specified. For more information, see `Read/Write Capacity Mode
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **TableName** *(string) --*

      The name of the table that was affected by the operation.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed by the operation.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed by the operation.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed by the operation.

    - **Table** *(dict) --*

      The amount of throughput consumed on the table affected by the operation.

      - **ReadCapacityUnits** *(float) --*

        The total number of read capacity units consumed on a table or an index.

      - **WriteCapacityUnits** *(float) --*

        The total number of write capacity units consumed on a table or an index.

      - **CapacityUnits** *(float) --*

        The total number of capacity units consumed on a table or an index.

    - **LocalSecondaryIndexes** *(dict) --*

      The amount of throughput consumed on each local index affected by the operation.

      - *(string) --*

        - *(dict) --*

          Represents the amount of provisioned throughput capacity consumed on a table or an index.

          - **ReadCapacityUnits** *(float) --*

            The total number of read capacity units consumed on a table or an index.

          - **WriteCapacityUnits** *(float) --*

            The total number of write capacity units consumed on a table or an index.

          - **CapacityUnits** *(float) --*

            The total number of capacity units consumed on a table or an index.

    - **GlobalSecondaryIndexes** *(dict) --*

      The amount of throughput consumed on each global index affected by the operation.

      - *(string) --*

        - *(dict) --*

          Represents the amount of provisioned throughput capacity consumed on a table or an index.

          - **ReadCapacityUnits** *(float) --*

            The total number of read capacity units consumed on a table or an index.

          - **WriteCapacityUnits** *(float) --*

            The total number of write capacity units consumed on a table or an index.

          - **CapacityUnits** *(float) --*

            The total number of capacity units consumed on a table or an index.
    """


_TablePutItemResponseItemCollectionMetricsItemCollectionKeyTypeDef = TypedDict(
    "_TablePutItemResponseItemCollectionMetricsItemCollectionKeyTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class TablePutItemResponseItemCollectionMetricsItemCollectionKeyTypeDef(
    _TablePutItemResponseItemCollectionMetricsItemCollectionKeyTypeDef
):
    """
    Type definition for `TablePutItemResponseItemCollectionMetrics` `ItemCollectionKey`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_TablePutItemResponseItemCollectionMetricsTypeDef = TypedDict(
    "_TablePutItemResponseItemCollectionMetricsTypeDef",
    {
        "ItemCollectionKey": Dict[
            str, TablePutItemResponseItemCollectionMetricsItemCollectionKeyTypeDef
        ],
        "SizeEstimateRangeGB": List[float],
    },
    total=False,
)


class TablePutItemResponseItemCollectionMetricsTypeDef(
    _TablePutItemResponseItemCollectionMetricsTypeDef
):
    """
    Type definition for `TablePutItemResponse` `ItemCollectionMetrics`

    Information about item collections, if any, that were affected by the ``PutItem`` operation.
    ``ItemCollectionMetrics`` is only returned if the ``ReturnItemCollectionMetrics`` parameter was
    specified. If the table does not have any local secondary indexes, this information is not
    returned in the response.

    Each ``ItemCollectionMetrics`` element consists of:

    * ``ItemCollectionKey`` - The partition key value of the item collection. This is the same as
    the partition key value of the item itself.

    * ``SizeEstimateRangeGB`` - An estimate of item collection size, in gigabytes. This value is a
    two-element array containing a lower bound and an upper bound for the estimate. The estimate
    includes the size of all the items in the table, plus the size of all attributes projected into
    all of the local secondary indexes on that table. Use this estimate to measure whether a local
    secondary index is approaching its size limit. The estimate is subject to change over time;
    therefore, do not rely on the precision or accuracy of the estimate.

    - **ItemCollectionKey** *(dict) --*

      The partition key value of the item collection. This value is the same as the partition key
      value of the item.

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

          - **S** *(string) --*

            An attribute of type String. For example:

             ``"S": "Hello"``

          - **N** *(string) --*

            An attribute of type Number. For example:

             ``"N": "123.45"``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

          - **B** *(bytes) --*

            An attribute of type Binary. For example:

             ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

          - **SS** *(list) --*

            An attribute of type String Set. For example:

             ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

            - *(string) --*

          - **NS** *(list) --*

            An attribute of type Number Set. For example:

             ``"NS": ["42.2", "-19", "7.5", "3.14"]``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

            - *(string) --*

          - **BS** *(list) --*

            An attribute of type Binary Set. For example:

             ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

            - *(bytes) --*

          - **M** *(dict) --*

            An attribute of type Map. For example:

             ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

            - *(string) --*

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

          - **L** *(list) --*

            An attribute of type List. For example:

             ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

            - *(dict) --*

              Represents the data for an attribute.

              Each attribute value is described as a name-value pair. The name is the data type, and
              the value is the data itself.

              For more information, see `Data Types
              <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
              in the *Amazon DynamoDB Developer Guide* .

          - **NULL** *(boolean) --*

            An attribute of type Null. For example:

             ``"NULL": true``

          - **BOOL** *(boolean) --*

            An attribute of type Boolean. For example:

             ``"BOOL": true``

    - **SizeEstimateRangeGB** *(list) --*

      An estimate of item collection size, in gigabytes. This value is a two-element array
      containing a lower bound and an upper bound for the estimate. The estimate includes the size
      of all the items in the table, plus the size of all attributes projected into all of the local
      secondary indexes on that table. Use this estimate to measure whether a local secondary index
      is approaching its size limit.

      The estimate is subject to change over time; therefore, do not rely on the precision or
      accuracy of the estimate.

      - *(float) --*
    """


_TablePutItemResponseTypeDef = TypedDict(
    "_TablePutItemResponseTypeDef",
    {
        "Attributes": Dict[str, TablePutItemResponseAttributesTypeDef],
        "ConsumedCapacity": TablePutItemResponseConsumedCapacityTypeDef,
        "ItemCollectionMetrics": TablePutItemResponseItemCollectionMetricsTypeDef,
    },
    total=False,
)


class TablePutItemResponseTypeDef(_TablePutItemResponseTypeDef):
    """
    Type definition for `TablePutItem` `Response`

    Represents the output of a ``PutItem`` operation.

    - **Attributes** *(dict) --*

      The attribute values as they appeared before the ``PutItem`` operation, but only if
      ``ReturnValues`` is specified as ``ALL_OLD`` in the request. Each element consists of an
      attribute name and an attribute value.

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

          - **S** *(string) --*

            An attribute of type String. For example:

             ``"S": "Hello"``

          - **N** *(string) --*

            An attribute of type Number. For example:

             ``"N": "123.45"``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

          - **B** *(bytes) --*

            An attribute of type Binary. For example:

             ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

          - **SS** *(list) --*

            An attribute of type String Set. For example:

             ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

            - *(string) --*

          - **NS** *(list) --*

            An attribute of type Number Set. For example:

             ``"NS": ["42.2", "-19", "7.5", "3.14"]``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

            - *(string) --*

          - **BS** *(list) --*

            An attribute of type Binary Set. For example:

             ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

            - *(bytes) --*

          - **M** *(dict) --*

            An attribute of type Map. For example:

             ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

            - *(string) --*

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

          - **L** *(list) --*

            An attribute of type List. For example:

             ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

            - *(dict) --*

              Represents the data for an attribute.

              Each attribute value is described as a name-value pair. The name is the data type, and
              the value is the data itself.

              For more information, see `Data Types
              <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
              in the *Amazon DynamoDB Developer Guide* .

          - **NULL** *(boolean) --*

            An attribute of type Null. For example:

             ``"NULL": true``

          - **BOOL** *(boolean) --*

            An attribute of type Boolean. For example:

             ``"BOOL": true``

    - **ConsumedCapacity** *(dict) --*

      The capacity units consumed by the ``PutItem`` operation. The data returned includes the total
      provisioned throughput consumed, along with statistics for the table and any indexes involved
      in the operation. ``ConsumedCapacity`` is only returned if the ``ReturnConsumedCapacity``
      parameter was specified. For more information, see `Read/Write Capacity Mode
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html>`__
      in the *Amazon DynamoDB Developer Guide* .

      - **TableName** *(string) --*

        The name of the table that was affected by the operation.

      - **CapacityUnits** *(float) --*

        The total number of capacity units consumed by the operation.

      - **ReadCapacityUnits** *(float) --*

        The total number of read capacity units consumed by the operation.

      - **WriteCapacityUnits** *(float) --*

        The total number of write capacity units consumed by the operation.

      - **Table** *(dict) --*

        The amount of throughput consumed on the table affected by the operation.

        - **ReadCapacityUnits** *(float) --*

          The total number of read capacity units consumed on a table or an index.

        - **WriteCapacityUnits** *(float) --*

          The total number of write capacity units consumed on a table or an index.

        - **CapacityUnits** *(float) --*

          The total number of capacity units consumed on a table or an index.

      - **LocalSecondaryIndexes** *(dict) --*

        The amount of throughput consumed on each local index affected by the operation.

        - *(string) --*

          - *(dict) --*

            Represents the amount of provisioned throughput capacity consumed on a table or an
            index.

            - **ReadCapacityUnits** *(float) --*

              The total number of read capacity units consumed on a table or an index.

            - **WriteCapacityUnits** *(float) --*

              The total number of write capacity units consumed on a table or an index.

            - **CapacityUnits** *(float) --*

              The total number of capacity units consumed on a table or an index.

      - **GlobalSecondaryIndexes** *(dict) --*

        The amount of throughput consumed on each global index affected by the operation.

        - *(string) --*

          - *(dict) --*

            Represents the amount of provisioned throughput capacity consumed on a table or an
            index.

            - **ReadCapacityUnits** *(float) --*

              The total number of read capacity units consumed on a table or an index.

            - **WriteCapacityUnits** *(float) --*

              The total number of write capacity units consumed on a table or an index.

            - **CapacityUnits** *(float) --*

              The total number of capacity units consumed on a table or an index.

    - **ItemCollectionMetrics** *(dict) --*

      Information about item collections, if any, that were affected by the ``PutItem`` operation.
      ``ItemCollectionMetrics`` is only returned if the ``ReturnItemCollectionMetrics`` parameter
      was specified. If the table does not have any local secondary indexes, this information is not
      returned in the response.

      Each ``ItemCollectionMetrics`` element consists of:

      * ``ItemCollectionKey`` - The partition key value of the item collection. This is the same as
      the partition key value of the item itself.

      * ``SizeEstimateRangeGB`` - An estimate of item collection size, in gigabytes. This value is a
      two-element array containing a lower bound and an upper bound for the estimate. The estimate
      includes the size of all the items in the table, plus the size of all attributes projected
      into all of the local secondary indexes on that table. Use this estimate to measure whether a
      local secondary index is approaching its size limit. The estimate is subject to change over
      time; therefore, do not rely on the precision or accuracy of the estimate.

      - **ItemCollectionKey** *(dict) --*

        The partition key value of the item collection. This value is the same as the partition key
        value of the item.

        - *(string) --*

          - *(dict) --*

            Represents the data for an attribute.

            Each attribute value is described as a name-value pair. The name is the data type, and
            the value is the data itself.

            For more information, see `Data Types
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
            in the *Amazon DynamoDB Developer Guide* .

            - **S** *(string) --*

              An attribute of type String. For example:

               ``"S": "Hello"``

            - **N** *(string) --*

              An attribute of type Number. For example:

               ``"N": "123.45"``

              Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
              across languages and libraries. However, DynamoDB treats them as number type
              attributes for mathematical operations.

            - **B** *(bytes) --*

              An attribute of type Binary. For example:

               ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

            - **SS** *(list) --*

              An attribute of type String Set. For example:

               ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

              - *(string) --*

            - **NS** *(list) --*

              An attribute of type Number Set. For example:

               ``"NS": ["42.2", "-19", "7.5", "3.14"]``

              Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
              across languages and libraries. However, DynamoDB treats them as number type
              attributes for mathematical operations.

              - *(string) --*

            - **BS** *(list) --*

              An attribute of type Binary Set. For example:

               ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

              - *(bytes) --*

            - **M** *(dict) --*

              An attribute of type Map. For example:

               ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

              - *(string) --*

                - *(dict) --*

                  Represents the data for an attribute.

                  Each attribute value is described as a name-value pair. The name is the data type,
                  and the value is the data itself.

                  For more information, see `Data Types
                  <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                  in the *Amazon DynamoDB Developer Guide* .

            - **L** *(list) --*

              An attribute of type List. For example:

               ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

            - **NULL** *(boolean) --*

              An attribute of type Null. For example:

               ``"NULL": true``

            - **BOOL** *(boolean) --*

              An attribute of type Boolean. For example:

               ``"BOOL": true``

      - **SizeEstimateRangeGB** *(list) --*

        An estimate of item collection size, in gigabytes. This value is a two-element array
        containing a lower bound and an upper bound for the estimate. The estimate includes the size
        of all the items in the table, plus the size of all attributes projected into all of the
        local secondary indexes on that table. Use this estimate to measure whether a local
        secondary index is approaching its size limit.

        The estimate is subject to change over time; therefore, do not rely on the precision or
        accuracy of the estimate.

        - *(float) --*
    """


_TableQueryExclusiveStartKeyTypeDef = TypedDict(
    "_TableQueryExclusiveStartKeyTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class TableQueryExclusiveStartKeyTypeDef(_TableQueryExclusiveStartKeyTypeDef):
    """
    Type definition for `TableQuery` `ExclusiveStartKey`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_TableQueryExpressionAttributeValuesTypeDef = TypedDict(
    "_TableQueryExpressionAttributeValuesTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class TableQueryExpressionAttributeValuesTypeDef(_TableQueryExpressionAttributeValuesTypeDef):
    """
    Type definition for `TableQuery` `ExpressionAttributeValues`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_TableQueryKeyConditionsAttributeValueListTypeDef = TypedDict(
    "_TableQueryKeyConditionsAttributeValueListTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class TableQueryKeyConditionsAttributeValueListTypeDef(
    _TableQueryKeyConditionsAttributeValueListTypeDef
):
    """
    Type definition for `TableQueryKeyConditions` `AttributeValueList`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_RequiredTableQueryKeyConditionsTypeDef = TypedDict(
    "_RequiredTableQueryKeyConditionsTypeDef", {"ComparisonOperator": str}
)
_OptionalTableQueryKeyConditionsTypeDef = TypedDict(
    "_OptionalTableQueryKeyConditionsTypeDef",
    {"AttributeValueList": List[TableQueryKeyConditionsAttributeValueListTypeDef]},
    total=False,
)


class TableQueryKeyConditionsTypeDef(
    _RequiredTableQueryKeyConditionsTypeDef, _OptionalTableQueryKeyConditionsTypeDef
):
    """
    Type definition for `TableQuery` `KeyConditions`

    Represents the selection criteria for a ``Query`` or ``Scan`` operation:

    * For a ``Query`` operation, ``Condition`` is used for specifying the ``KeyConditions`` to use
    when querying a table or an index. For ``KeyConditions`` , only the following comparison
    operators are supported:  ``EQ | LE | LT | GE | GT | BEGINS_WITH | BETWEEN``    ``Condition`` is
    also used in a ``QueryFilter`` , which evaluates the query results and returns only the desired
    values.

    * For a ``Scan`` operation, ``Condition`` is used in a ``ScanFilter`` , which evaluates the scan
    results and returns only the desired values.

    - **AttributeValueList** *(list) --*

      One or more values to evaluate against the supplied attribute. The number of values in the
      list depends on the ``ComparisonOperator`` being used.

      For type Number, value comparisons are numeric.

      String value comparisons for greater than, equals, or less than are based on ASCII character
      code values. For example, ``a`` is greater than ``A`` , and ``a`` is greater than ``B`` . For
      a list of code values, see `http\\://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters
      <http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters>`__ .

      For Binary, DynamoDB treats each byte of the binary data as unsigned when it compares binary
      values.

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

        - **S** *(string) --*

          An attribute of type String. For example:

           ``"S": "Hello"``

        - **N** *(string) --*

          An attribute of type Number. For example:

           ``"N": "123.45"``

          Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
          across languages and libraries. However, DynamoDB treats them as number type attributes
          for mathematical operations.

        - **B** *(bytes) --*

          An attribute of type Binary. For example:

           ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

        - **SS** *(list) --*

          An attribute of type String Set. For example:

           ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

          - *(string) --*

        - **NS** *(list) --*

          An attribute of type Number Set. For example:

           ``"NS": ["42.2", "-19", "7.5", "3.14"]``

          Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
          across languages and libraries. However, DynamoDB treats them as number type attributes
          for mathematical operations.

          - *(string) --*

        - **BS** *(list) --*

          An attribute of type Binary Set. For example:

           ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

          - *(bytes) --*

        - **M** *(dict) --*

          An attribute of type Map. For example:

           ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

          - *(string) --*

            - *(dict) --*

              Represents the data for an attribute.

              Each attribute value is described as a name-value pair. The name is the data type, and
              the value is the data itself.

              For more information, see `Data Types
              <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
              in the *Amazon DynamoDB Developer Guide* .

        - **L** *(list) --*

          An attribute of type List. For example:

           ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

          - *(dict) --*

            Represents the data for an attribute.

            Each attribute value is described as a name-value pair. The name is the data type, and
            the value is the data itself.

            For more information, see `Data Types
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
            in the *Amazon DynamoDB Developer Guide* .

        - **NULL** *(boolean) --*

          An attribute of type Null. For example:

           ``"NULL": true``

        - **BOOL** *(boolean) --*

          An attribute of type Boolean. For example:

           ``"BOOL": true``

    - **ComparisonOperator** *(string) --* **[REQUIRED]**

      A comparator for evaluating attributes. For example, equals, greater than, less than, etc.

      The following comparison operators are available:

       ``EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH
       | IN
       | BETWEEN``

      The following are descriptions of each comparison operator.

      * ``EQ`` : Equal. ``EQ`` is supported for all data types, including lists and maps.
      ``AttributeValueList`` can contain only one ``AttributeValue`` element of type String, Number,
      Binary, String Set, Number Set, or Binary Set. If an item contains an ``AttributeValue``
      element of a different type than the one provided in the request, the value does not match.
      For example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` . Also, ``{"N":"6"}`` does not equal
      ``{"NS":["6", "2", "1"]}`` .

      * ``NE`` : Not equal. ``NE`` is supported for all data types, including lists and maps.
      ``AttributeValueList`` can contain only one ``AttributeValue`` of type String, Number, Binary,
      String Set, Number Set, or Binary Set. If an item contains an ``AttributeValue`` of a
      different type than the one provided in the request, the value does not match. For example,
      ``{"S":"6"}`` does not equal ``{"N":"6"}`` . Also, ``{"N":"6"}`` does not equal ``{"NS":["6",
      "2", "1"]}`` .

      * ``LE`` : Less than or equal.   ``AttributeValueList`` can contain only one
      ``AttributeValue`` element of type String, Number, or Binary (not a set type). If an item
      contains an ``AttributeValue`` element of a different type than the one provided in the
      request, the value does not match. For example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` .
      Also, ``{"N":"6"}`` does not compare to ``{"NS":["6", "2", "1"]}`` .

      * ``LT`` : Less than.   ``AttributeValueList`` can contain only one ``AttributeValue`` of type
      String, Number, or Binary (not a set type). If an item contains an ``AttributeValue`` element
      of a different type than the one provided in the request, the value does not match. For
      example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` . Also, ``{"N":"6"}`` does not compare to
      ``{"NS":["6", "2", "1"]}`` .

      * ``GE`` : Greater than or equal.   ``AttributeValueList`` can contain only one
      ``AttributeValue`` element of type String, Number, or Binary (not a set type). If an item
      contains an ``AttributeValue`` element of a different type than the one provided in the
      request, the value does not match. For example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` .
      Also, ``{"N":"6"}`` does not compare to ``{"NS":["6", "2", "1"]}`` .

      * ``GT`` : Greater than.   ``AttributeValueList`` can contain only one ``AttributeValue``
      element of type String, Number, or Binary (not a set type). If an item contains an
      ``AttributeValue`` element of a different type than the one provided in the request, the value
      does not match. For example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` . Also, ``{"N":"6"}``
      does not compare to ``{"NS":["6", "2", "1"]}`` .

      * ``NOT_NULL`` : The attribute exists. ``NOT_NULL`` is supported for all data types, including
      lists and maps.

      .. note::

         This operator tests for the existence of an attribute, not its data type. If the data type
         of attribute "``a`` " is null, and you evaluate it using ``NOT_NULL`` , the result is a
         Boolean ``true`` . This result is because the attribute "``a`` " exists; its data type is
         not relevant to the ``NOT_NULL`` comparison operator.

      * ``NULL`` : The attribute does not exist. ``NULL`` is supported for all data types, including
      lists and maps.

      .. note::

         This operator tests for the nonexistence of an attribute, not its data type. If the data
         type of attribute "``a`` " is null, and you evaluate it using ``NULL`` , the result is a
         Boolean ``false`` . This is because the attribute "``a`` " exists; its data type is not
         relevant to the ``NULL`` comparison operator.

      * ``CONTAINS`` : Checks for a subsequence, or value in a set.  ``AttributeValueList`` can
      contain only one ``AttributeValue`` element of type String, Number, or Binary (not a set
      type). If the target attribute of the comparison is of type String, then the operator checks
      for a substring match. If the target attribute of the comparison is of type Binary, then the
      operator looks for a subsequence of the target that matches the input. If the target attribute
      of the comparison is a set ("``SS`` ", "``NS`` ", or "``BS`` "), then the operator evaluates
      to true if it finds an exact match with any member of the set. CONTAINS is supported for
      lists: When evaluating "``a CONTAINS b`` ", "``a`` " can be a list; however, "``b`` " cannot
      be a set, a map, or a list.

      * ``NOT_CONTAINS`` : Checks for absence of a subsequence, or absence of a value in a set.
      ``AttributeValueList`` can contain only one ``AttributeValue`` element of type String, Number,
      or Binary (not a set type). If the target attribute of the comparison is a String, then the
      operator checks for the absence of a substring match. If the target attribute of the
      comparison is Binary, then the operator checks for the absence of a subsequence of the target
      that matches the input. If the target attribute of the comparison is a set ("``SS`` ", "``NS``
      ", or "``BS`` "), then the operator evaluates to true if it *does not* find an exact match
      with any member of the set. NOT_CONTAINS is supported for lists: When evaluating "``a NOT
      CONTAINS b`` ", "``a`` " can be a list; however, "``b`` " cannot be a set, a map, or a list.

      * ``BEGINS_WITH`` : Checks for a prefix.   ``AttributeValueList`` can contain only one
      ``AttributeValue`` of type String or Binary (not a Number or a set type). The target attribute
      of the comparison must be of type String or Binary (not a Number or a set type).

      * ``IN`` : Checks for matching elements in a list.  ``AttributeValueList`` can contain one or
      more ``AttributeValue`` elements of type String, Number, or Binary. These attributes are
      compared against an existing attribute of an item. If any elements of the input are equal to
      the item attribute, the expression evaluates to true.

      * ``BETWEEN`` : Greater than or equal to the first value, and less than or equal to the second
      value.   ``AttributeValueList`` must contain two ``AttributeValue`` elements of the same type,
      either String, Number, or Binary (not a set type). A target attribute matches if the target
      value is greater than, or equal to, the first element and less than, or equal to, the second
      element. If an item contains an ``AttributeValue`` element of a different type than the one
      provided in the request, the value does not match. For example, ``{"S":"6"}`` does not compare
      to ``{"N":"6"}`` . Also, ``{"N":"6"}`` does not compare to ``{"NS":["6", "2", "1"]}``

      For usage examples of ``AttributeValueList`` and ``ComparisonOperator`` , see `Legacy
      Conditional Parameters
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html>`__
      in the *Amazon DynamoDB Developer Guide* .
    """


_TableQueryQueryFilterAttributeValueListTypeDef = TypedDict(
    "_TableQueryQueryFilterAttributeValueListTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class TableQueryQueryFilterAttributeValueListTypeDef(
    _TableQueryQueryFilterAttributeValueListTypeDef
):
    """
    Type definition for `TableQueryQueryFilter` `AttributeValueList`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_RequiredTableQueryQueryFilterTypeDef = TypedDict(
    "_RequiredTableQueryQueryFilterTypeDef", {"ComparisonOperator": str}
)
_OptionalTableQueryQueryFilterTypeDef = TypedDict(
    "_OptionalTableQueryQueryFilterTypeDef",
    {"AttributeValueList": List[TableQueryQueryFilterAttributeValueListTypeDef]},
    total=False,
)


class TableQueryQueryFilterTypeDef(
    _RequiredTableQueryQueryFilterTypeDef, _OptionalTableQueryQueryFilterTypeDef
):
    """
    Type definition for `TableQuery` `QueryFilter`

    Represents the selection criteria for a ``Query`` or ``Scan`` operation:

    * For a ``Query`` operation, ``Condition`` is used for specifying the ``KeyConditions`` to use
    when querying a table or an index. For ``KeyConditions`` , only the following comparison
    operators are supported:  ``EQ | LE | LT | GE | GT | BEGINS_WITH | BETWEEN``    ``Condition`` is
    also used in a ``QueryFilter`` , which evaluates the query results and returns only the desired
    values.

    * For a ``Scan`` operation, ``Condition`` is used in a ``ScanFilter`` , which evaluates the scan
    results and returns only the desired values.

    - **AttributeValueList** *(list) --*

      One or more values to evaluate against the supplied attribute. The number of values in the
      list depends on the ``ComparisonOperator`` being used.

      For type Number, value comparisons are numeric.

      String value comparisons for greater than, equals, or less than are based on ASCII character
      code values. For example, ``a`` is greater than ``A`` , and ``a`` is greater than ``B`` . For
      a list of code values, see `http\\://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters
      <http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters>`__ .

      For Binary, DynamoDB treats each byte of the binary data as unsigned when it compares binary
      values.

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

        - **S** *(string) --*

          An attribute of type String. For example:

           ``"S": "Hello"``

        - **N** *(string) --*

          An attribute of type Number. For example:

           ``"N": "123.45"``

          Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
          across languages and libraries. However, DynamoDB treats them as number type attributes
          for mathematical operations.

        - **B** *(bytes) --*

          An attribute of type Binary. For example:

           ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

        - **SS** *(list) --*

          An attribute of type String Set. For example:

           ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

          - *(string) --*

        - **NS** *(list) --*

          An attribute of type Number Set. For example:

           ``"NS": ["42.2", "-19", "7.5", "3.14"]``

          Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
          across languages and libraries. However, DynamoDB treats them as number type attributes
          for mathematical operations.

          - *(string) --*

        - **BS** *(list) --*

          An attribute of type Binary Set. For example:

           ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

          - *(bytes) --*

        - **M** *(dict) --*

          An attribute of type Map. For example:

           ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

          - *(string) --*

            - *(dict) --*

              Represents the data for an attribute.

              Each attribute value is described as a name-value pair. The name is the data type, and
              the value is the data itself.

              For more information, see `Data Types
              <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
              in the *Amazon DynamoDB Developer Guide* .

        - **L** *(list) --*

          An attribute of type List. For example:

           ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

          - *(dict) --*

            Represents the data for an attribute.

            Each attribute value is described as a name-value pair. The name is the data type, and
            the value is the data itself.

            For more information, see `Data Types
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
            in the *Amazon DynamoDB Developer Guide* .

        - **NULL** *(boolean) --*

          An attribute of type Null. For example:

           ``"NULL": true``

        - **BOOL** *(boolean) --*

          An attribute of type Boolean. For example:

           ``"BOOL": true``

    - **ComparisonOperator** *(string) --* **[REQUIRED]**

      A comparator for evaluating attributes. For example, equals, greater than, less than, etc.

      The following comparison operators are available:

       ``EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH
       | IN
       | BETWEEN``

      The following are descriptions of each comparison operator.

      * ``EQ`` : Equal. ``EQ`` is supported for all data types, including lists and maps.
      ``AttributeValueList`` can contain only one ``AttributeValue`` element of type String, Number,
      Binary, String Set, Number Set, or Binary Set. If an item contains an ``AttributeValue``
      element of a different type than the one provided in the request, the value does not match.
      For example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` . Also, ``{"N":"6"}`` does not equal
      ``{"NS":["6", "2", "1"]}`` .

      * ``NE`` : Not equal. ``NE`` is supported for all data types, including lists and maps.
      ``AttributeValueList`` can contain only one ``AttributeValue`` of type String, Number, Binary,
      String Set, Number Set, or Binary Set. If an item contains an ``AttributeValue`` of a
      different type than the one provided in the request, the value does not match. For example,
      ``{"S":"6"}`` does not equal ``{"N":"6"}`` . Also, ``{"N":"6"}`` does not equal ``{"NS":["6",
      "2", "1"]}`` .

      * ``LE`` : Less than or equal.   ``AttributeValueList`` can contain only one
      ``AttributeValue`` element of type String, Number, or Binary (not a set type). If an item
      contains an ``AttributeValue`` element of a different type than the one provided in the
      request, the value does not match. For example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` .
      Also, ``{"N":"6"}`` does not compare to ``{"NS":["6", "2", "1"]}`` .

      * ``LT`` : Less than.   ``AttributeValueList`` can contain only one ``AttributeValue`` of type
      String, Number, or Binary (not a set type). If an item contains an ``AttributeValue`` element
      of a different type than the one provided in the request, the value does not match. For
      example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` . Also, ``{"N":"6"}`` does not compare to
      ``{"NS":["6", "2", "1"]}`` .

      * ``GE`` : Greater than or equal.   ``AttributeValueList`` can contain only one
      ``AttributeValue`` element of type String, Number, or Binary (not a set type). If an item
      contains an ``AttributeValue`` element of a different type than the one provided in the
      request, the value does not match. For example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` .
      Also, ``{"N":"6"}`` does not compare to ``{"NS":["6", "2", "1"]}`` .

      * ``GT`` : Greater than.   ``AttributeValueList`` can contain only one ``AttributeValue``
      element of type String, Number, or Binary (not a set type). If an item contains an
      ``AttributeValue`` element of a different type than the one provided in the request, the value
      does not match. For example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` . Also, ``{"N":"6"}``
      does not compare to ``{"NS":["6", "2", "1"]}`` .

      * ``NOT_NULL`` : The attribute exists. ``NOT_NULL`` is supported for all data types, including
      lists and maps.

      .. note::

         This operator tests for the existence of an attribute, not its data type. If the data type
         of attribute "``a`` " is null, and you evaluate it using ``NOT_NULL`` , the result is a
         Boolean ``true`` . This result is because the attribute "``a`` " exists; its data type is
         not relevant to the ``NOT_NULL`` comparison operator.

      * ``NULL`` : The attribute does not exist. ``NULL`` is supported for all data types, including
      lists and maps.

      .. note::

         This operator tests for the nonexistence of an attribute, not its data type. If the data
         type of attribute "``a`` " is null, and you evaluate it using ``NULL`` , the result is a
         Boolean ``false`` . This is because the attribute "``a`` " exists; its data type is not
         relevant to the ``NULL`` comparison operator.

      * ``CONTAINS`` : Checks for a subsequence, or value in a set.  ``AttributeValueList`` can
      contain only one ``AttributeValue`` element of type String, Number, or Binary (not a set
      type). If the target attribute of the comparison is of type String, then the operator checks
      for a substring match. If the target attribute of the comparison is of type Binary, then the
      operator looks for a subsequence of the target that matches the input. If the target attribute
      of the comparison is a set ("``SS`` ", "``NS`` ", or "``BS`` "), then the operator evaluates
      to true if it finds an exact match with any member of the set. CONTAINS is supported for
      lists: When evaluating "``a CONTAINS b`` ", "``a`` " can be a list; however, "``b`` " cannot
      be a set, a map, or a list.

      * ``NOT_CONTAINS`` : Checks for absence of a subsequence, or absence of a value in a set.
      ``AttributeValueList`` can contain only one ``AttributeValue`` element of type String, Number,
      or Binary (not a set type). If the target attribute of the comparison is a String, then the
      operator checks for the absence of a substring match. If the target attribute of the
      comparison is Binary, then the operator checks for the absence of a subsequence of the target
      that matches the input. If the target attribute of the comparison is a set ("``SS`` ", "``NS``
      ", or "``BS`` "), then the operator evaluates to true if it *does not* find an exact match
      with any member of the set. NOT_CONTAINS is supported for lists: When evaluating "``a NOT
      CONTAINS b`` ", "``a`` " can be a list; however, "``b`` " cannot be a set, a map, or a list.

      * ``BEGINS_WITH`` : Checks for a prefix.   ``AttributeValueList`` can contain only one
      ``AttributeValue`` of type String or Binary (not a Number or a set type). The target attribute
      of the comparison must be of type String or Binary (not a Number or a set type).

      * ``IN`` : Checks for matching elements in a list.  ``AttributeValueList`` can contain one or
      more ``AttributeValue`` elements of type String, Number, or Binary. These attributes are
      compared against an existing attribute of an item. If any elements of the input are equal to
      the item attribute, the expression evaluates to true.

      * ``BETWEEN`` : Greater than or equal to the first value, and less than or equal to the second
      value.   ``AttributeValueList`` must contain two ``AttributeValue`` elements of the same type,
      either String, Number, or Binary (not a set type). A target attribute matches if the target
      value is greater than, or equal to, the first element and less than, or equal to, the second
      element. If an item contains an ``AttributeValue`` element of a different type than the one
      provided in the request, the value does not match. For example, ``{"S":"6"}`` does not compare
      to ``{"N":"6"}`` . Also, ``{"N":"6"}`` does not compare to ``{"NS":["6", "2", "1"]}``

      For usage examples of ``AttributeValueList`` and ``ComparisonOperator`` , see `Legacy
      Conditional Parameters
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html>`__
      in the *Amazon DynamoDB Developer Guide* .
    """


_TableQueryResponseConsumedCapacityGlobalSecondaryIndexesTypeDef = TypedDict(
    "_TableQueryResponseConsumedCapacityGlobalSecondaryIndexesTypeDef",
    {"ReadCapacityUnits": float, "WriteCapacityUnits": float, "CapacityUnits": float},
    total=False,
)


class TableQueryResponseConsumedCapacityGlobalSecondaryIndexesTypeDef(
    _TableQueryResponseConsumedCapacityGlobalSecondaryIndexesTypeDef
):
    """
    Type definition for `TableQueryResponseConsumedCapacity` `GlobalSecondaryIndexes`

    Represents the amount of provisioned throughput capacity consumed on a table or an index.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed on a table or an index.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed on a table or an index.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed on a table or an index.
    """


_TableQueryResponseConsumedCapacityLocalSecondaryIndexesTypeDef = TypedDict(
    "_TableQueryResponseConsumedCapacityLocalSecondaryIndexesTypeDef",
    {"ReadCapacityUnits": float, "WriteCapacityUnits": float, "CapacityUnits": float},
    total=False,
)


class TableQueryResponseConsumedCapacityLocalSecondaryIndexesTypeDef(
    _TableQueryResponseConsumedCapacityLocalSecondaryIndexesTypeDef
):
    """
    Type definition for `TableQueryResponseConsumedCapacity` `LocalSecondaryIndexes`

    Represents the amount of provisioned throughput capacity consumed on a table or an index.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed on a table or an index.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed on a table or an index.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed on a table or an index.
    """


_TableQueryResponseConsumedCapacityTableTypeDef = TypedDict(
    "_TableQueryResponseConsumedCapacityTableTypeDef",
    {"ReadCapacityUnits": float, "WriteCapacityUnits": float, "CapacityUnits": float},
    total=False,
)


class TableQueryResponseConsumedCapacityTableTypeDef(
    _TableQueryResponseConsumedCapacityTableTypeDef
):
    """
    Type definition for `TableQueryResponseConsumedCapacity` `Table`

    The amount of throughput consumed on the table affected by the operation.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed on a table or an index.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed on a table or an index.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed on a table or an index.
    """


_TableQueryResponseConsumedCapacityTypeDef = TypedDict(
    "_TableQueryResponseConsumedCapacityTypeDef",
    {
        "TableName": str,
        "CapacityUnits": float,
        "ReadCapacityUnits": float,
        "WriteCapacityUnits": float,
        "Table": TableQueryResponseConsumedCapacityTableTypeDef,
        "LocalSecondaryIndexes": Dict[
            str, TableQueryResponseConsumedCapacityLocalSecondaryIndexesTypeDef
        ],
        "GlobalSecondaryIndexes": Dict[
            str, TableQueryResponseConsumedCapacityGlobalSecondaryIndexesTypeDef
        ],
    },
    total=False,
)


class TableQueryResponseConsumedCapacityTypeDef(_TableQueryResponseConsumedCapacityTypeDef):
    """
    Type definition for `TableQueryResponse` `ConsumedCapacity`

    The capacity units consumed by the ``Query`` operation. The data returned includes the total
    provisioned throughput consumed, along with statistics for the table and any indexes involved in
    the operation. ``ConsumedCapacity`` is only returned if the ``ReturnConsumedCapacity`` parameter
    was specified. For more information, see `Provisioned Throughput
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **TableName** *(string) --*

      The name of the table that was affected by the operation.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed by the operation.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed by the operation.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed by the operation.

    - **Table** *(dict) --*

      The amount of throughput consumed on the table affected by the operation.

      - **ReadCapacityUnits** *(float) --*

        The total number of read capacity units consumed on a table or an index.

      - **WriteCapacityUnits** *(float) --*

        The total number of write capacity units consumed on a table or an index.

      - **CapacityUnits** *(float) --*

        The total number of capacity units consumed on a table or an index.

    - **LocalSecondaryIndexes** *(dict) --*

      The amount of throughput consumed on each local index affected by the operation.

      - *(string) --*

        - *(dict) --*

          Represents the amount of provisioned throughput capacity consumed on a table or an index.

          - **ReadCapacityUnits** *(float) --*

            The total number of read capacity units consumed on a table or an index.

          - **WriteCapacityUnits** *(float) --*

            The total number of write capacity units consumed on a table or an index.

          - **CapacityUnits** *(float) --*

            The total number of capacity units consumed on a table or an index.

    - **GlobalSecondaryIndexes** *(dict) --*

      The amount of throughput consumed on each global index affected by the operation.

      - *(string) --*

        - *(dict) --*

          Represents the amount of provisioned throughput capacity consumed on a table or an index.

          - **ReadCapacityUnits** *(float) --*

            The total number of read capacity units consumed on a table or an index.

          - **WriteCapacityUnits** *(float) --*

            The total number of write capacity units consumed on a table or an index.

          - **CapacityUnits** *(float) --*

            The total number of capacity units consumed on a table or an index.
    """


_TableQueryResponseItemsTypeDef = TypedDict(
    "_TableQueryResponseItemsTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class TableQueryResponseItemsTypeDef(_TableQueryResponseItemsTypeDef):
    """
    Type definition for `TableQueryResponse` `Items`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_TableQueryResponseLastEvaluatedKeyTypeDef = TypedDict(
    "_TableQueryResponseLastEvaluatedKeyTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class TableQueryResponseLastEvaluatedKeyTypeDef(_TableQueryResponseLastEvaluatedKeyTypeDef):
    """
    Type definition for `TableQueryResponse` `LastEvaluatedKey`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_TableQueryResponseTypeDef = TypedDict(
    "_TableQueryResponseTypeDef",
    {
        "Items": List[Dict[str, TableQueryResponseItemsTypeDef]],
        "Count": int,
        "ScannedCount": int,
        "LastEvaluatedKey": Dict[str, TableQueryResponseLastEvaluatedKeyTypeDef],
        "ConsumedCapacity": TableQueryResponseConsumedCapacityTypeDef,
    },
    total=False,
)


class TableQueryResponseTypeDef(_TableQueryResponseTypeDef):
    """
    Type definition for `TableQuery` `Response`

    Represents the output of a ``Query`` operation.

    - **Items** *(list) --*

      An array of item attributes that match the query criteria. Each element in this array consists
      of an attribute name and the value for that attribute.

      - *(dict) --*

        - *(string) --*

          - *(dict) --*

            Represents the data for an attribute.

            Each attribute value is described as a name-value pair. The name is the data type, and
            the value is the data itself.

            For more information, see `Data Types
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
            in the *Amazon DynamoDB Developer Guide* .

            - **S** *(string) --*

              An attribute of type String. For example:

               ``"S": "Hello"``

            - **N** *(string) --*

              An attribute of type Number. For example:

               ``"N": "123.45"``

              Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
              across languages and libraries. However, DynamoDB treats them as number type
              attributes for mathematical operations.

            - **B** *(bytes) --*

              An attribute of type Binary. For example:

               ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

            - **SS** *(list) --*

              An attribute of type String Set. For example:

               ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

              - *(string) --*

            - **NS** *(list) --*

              An attribute of type Number Set. For example:

               ``"NS": ["42.2", "-19", "7.5", "3.14"]``

              Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
              across languages and libraries. However, DynamoDB treats them as number type
              attributes for mathematical operations.

              - *(string) --*

            - **BS** *(list) --*

              An attribute of type Binary Set. For example:

               ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

              - *(bytes) --*

            - **M** *(dict) --*

              An attribute of type Map. For example:

               ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

              - *(string) --*

                - *(dict) --*

                  Represents the data for an attribute.

                  Each attribute value is described as a name-value pair. The name is the data type,
                  and the value is the data itself.

                  For more information, see `Data Types
                  <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                  in the *Amazon DynamoDB Developer Guide* .

            - **L** *(list) --*

              An attribute of type List. For example:

               ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

            - **NULL** *(boolean) --*

              An attribute of type Null. For example:

               ``"NULL": true``

            - **BOOL** *(boolean) --*

              An attribute of type Boolean. For example:

               ``"BOOL": true``

    - **Count** *(integer) --*

      The number of items in the response.

      If you used a ``QueryFilter`` in the request, then ``Count`` is the number of items returned
      after the filter was applied, and ``ScannedCount`` is the number of matching items before the
      filter was applied.

      If you did not use a filter in the request, then ``Count`` and ``ScannedCount`` are the same.

    - **ScannedCount** *(integer) --*

      The number of items evaluated, before any ``QueryFilter`` is applied. A high ``ScannedCount``
      value with few, or no, ``Count`` results indicates an inefficient ``Query`` operation. For
      more information, see `Count and ScannedCount
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html#Count>`__
      in the *Amazon DynamoDB Developer Guide* .

      If you did not use a filter in the request, then ``ScannedCount`` is the same as ``Count`` .

    - **LastEvaluatedKey** *(dict) --*

      The primary key of the item where the operation stopped, inclusive of the previous result set.
      Use this value to start a new operation, excluding this value in the new request.

      If ``LastEvaluatedKey`` is empty, then the "last page" of results has been processed and there
      is no more data to be retrieved.

      If ``LastEvaluatedKey`` is not empty, it does not necessarily mean that there is more data in
      the result set. The only way to know when you have reached the end of the result set is when
      ``LastEvaluatedKey`` is empty.

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

          - **S** *(string) --*

            An attribute of type String. For example:

             ``"S": "Hello"``

          - **N** *(string) --*

            An attribute of type Number. For example:

             ``"N": "123.45"``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

          - **B** *(bytes) --*

            An attribute of type Binary. For example:

             ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

          - **SS** *(list) --*

            An attribute of type String Set. For example:

             ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

            - *(string) --*

          - **NS** *(list) --*

            An attribute of type Number Set. For example:

             ``"NS": ["42.2", "-19", "7.5", "3.14"]``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

            - *(string) --*

          - **BS** *(list) --*

            An attribute of type Binary Set. For example:

             ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

            - *(bytes) --*

          - **M** *(dict) --*

            An attribute of type Map. For example:

             ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

            - *(string) --*

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

          - **L** *(list) --*

            An attribute of type List. For example:

             ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

            - *(dict) --*

              Represents the data for an attribute.

              Each attribute value is described as a name-value pair. The name is the data type, and
              the value is the data itself.

              For more information, see `Data Types
              <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
              in the *Amazon DynamoDB Developer Guide* .

          - **NULL** *(boolean) --*

            An attribute of type Null. For example:

             ``"NULL": true``

          - **BOOL** *(boolean) --*

            An attribute of type Boolean. For example:

             ``"BOOL": true``

    - **ConsumedCapacity** *(dict) --*

      The capacity units consumed by the ``Query`` operation. The data returned includes the total
      provisioned throughput consumed, along with statistics for the table and any indexes involved
      in the operation. ``ConsumedCapacity`` is only returned if the ``ReturnConsumedCapacity``
      parameter was specified. For more information, see `Provisioned Throughput
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html>`__
      in the *Amazon DynamoDB Developer Guide* .

      - **TableName** *(string) --*

        The name of the table that was affected by the operation.

      - **CapacityUnits** *(float) --*

        The total number of capacity units consumed by the operation.

      - **ReadCapacityUnits** *(float) --*

        The total number of read capacity units consumed by the operation.

      - **WriteCapacityUnits** *(float) --*

        The total number of write capacity units consumed by the operation.

      - **Table** *(dict) --*

        The amount of throughput consumed on the table affected by the operation.

        - **ReadCapacityUnits** *(float) --*

          The total number of read capacity units consumed on a table or an index.

        - **WriteCapacityUnits** *(float) --*

          The total number of write capacity units consumed on a table or an index.

        - **CapacityUnits** *(float) --*

          The total number of capacity units consumed on a table or an index.

      - **LocalSecondaryIndexes** *(dict) --*

        The amount of throughput consumed on each local index affected by the operation.

        - *(string) --*

          - *(dict) --*

            Represents the amount of provisioned throughput capacity consumed on a table or an
            index.

            - **ReadCapacityUnits** *(float) --*

              The total number of read capacity units consumed on a table or an index.

            - **WriteCapacityUnits** *(float) --*

              The total number of write capacity units consumed on a table or an index.

            - **CapacityUnits** *(float) --*

              The total number of capacity units consumed on a table or an index.

      - **GlobalSecondaryIndexes** *(dict) --*

        The amount of throughput consumed on each global index affected by the operation.

        - *(string) --*

          - *(dict) --*

            Represents the amount of provisioned throughput capacity consumed on a table or an
            index.

            - **ReadCapacityUnits** *(float) --*

              The total number of read capacity units consumed on a table or an index.

            - **WriteCapacityUnits** *(float) --*

              The total number of write capacity units consumed on a table or an index.

            - **CapacityUnits** *(float) --*

              The total number of capacity units consumed on a table or an index.
    """


_TableScanExclusiveStartKeyTypeDef = TypedDict(
    "_TableScanExclusiveStartKeyTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class TableScanExclusiveStartKeyTypeDef(_TableScanExclusiveStartKeyTypeDef):
    """
    Type definition for `TableScan` `ExclusiveStartKey`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_TableScanExpressionAttributeValuesTypeDef = TypedDict(
    "_TableScanExpressionAttributeValuesTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class TableScanExpressionAttributeValuesTypeDef(_TableScanExpressionAttributeValuesTypeDef):
    """
    Type definition for `TableScan` `ExpressionAttributeValues`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_TableScanResponseConsumedCapacityGlobalSecondaryIndexesTypeDef = TypedDict(
    "_TableScanResponseConsumedCapacityGlobalSecondaryIndexesTypeDef",
    {"ReadCapacityUnits": float, "WriteCapacityUnits": float, "CapacityUnits": float},
    total=False,
)


class TableScanResponseConsumedCapacityGlobalSecondaryIndexesTypeDef(
    _TableScanResponseConsumedCapacityGlobalSecondaryIndexesTypeDef
):
    """
    Type definition for `TableScanResponseConsumedCapacity` `GlobalSecondaryIndexes`

    Represents the amount of provisioned throughput capacity consumed on a table or an index.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed on a table or an index.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed on a table or an index.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed on a table or an index.
    """


_TableScanResponseConsumedCapacityLocalSecondaryIndexesTypeDef = TypedDict(
    "_TableScanResponseConsumedCapacityLocalSecondaryIndexesTypeDef",
    {"ReadCapacityUnits": float, "WriteCapacityUnits": float, "CapacityUnits": float},
    total=False,
)


class TableScanResponseConsumedCapacityLocalSecondaryIndexesTypeDef(
    _TableScanResponseConsumedCapacityLocalSecondaryIndexesTypeDef
):
    """
    Type definition for `TableScanResponseConsumedCapacity` `LocalSecondaryIndexes`

    Represents the amount of provisioned throughput capacity consumed on a table or an index.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed on a table or an index.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed on a table or an index.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed on a table or an index.
    """


_TableScanResponseConsumedCapacityTableTypeDef = TypedDict(
    "_TableScanResponseConsumedCapacityTableTypeDef",
    {"ReadCapacityUnits": float, "WriteCapacityUnits": float, "CapacityUnits": float},
    total=False,
)


class TableScanResponseConsumedCapacityTableTypeDef(_TableScanResponseConsumedCapacityTableTypeDef):
    """
    Type definition for `TableScanResponseConsumedCapacity` `Table`

    The amount of throughput consumed on the table affected by the operation.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed on a table or an index.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed on a table or an index.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed on a table or an index.
    """


_TableScanResponseConsumedCapacityTypeDef = TypedDict(
    "_TableScanResponseConsumedCapacityTypeDef",
    {
        "TableName": str,
        "CapacityUnits": float,
        "ReadCapacityUnits": float,
        "WriteCapacityUnits": float,
        "Table": TableScanResponseConsumedCapacityTableTypeDef,
        "LocalSecondaryIndexes": Dict[
            str, TableScanResponseConsumedCapacityLocalSecondaryIndexesTypeDef
        ],
        "GlobalSecondaryIndexes": Dict[
            str, TableScanResponseConsumedCapacityGlobalSecondaryIndexesTypeDef
        ],
    },
    total=False,
)


class TableScanResponseConsumedCapacityTypeDef(_TableScanResponseConsumedCapacityTypeDef):
    """
    Type definition for `TableScanResponse` `ConsumedCapacity`

    The capacity units consumed by the ``Scan`` operation. The data returned includes the total
    provisioned throughput consumed, along with statistics for the table and any indexes involved in
    the operation. ``ConsumedCapacity`` is only returned if the ``ReturnConsumedCapacity`` parameter
    was specified. For more information, see `Provisioned Throughput
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **TableName** *(string) --*

      The name of the table that was affected by the operation.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed by the operation.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed by the operation.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed by the operation.

    - **Table** *(dict) --*

      The amount of throughput consumed on the table affected by the operation.

      - **ReadCapacityUnits** *(float) --*

        The total number of read capacity units consumed on a table or an index.

      - **WriteCapacityUnits** *(float) --*

        The total number of write capacity units consumed on a table or an index.

      - **CapacityUnits** *(float) --*

        The total number of capacity units consumed on a table or an index.

    - **LocalSecondaryIndexes** *(dict) --*

      The amount of throughput consumed on each local index affected by the operation.

      - *(string) --*

        - *(dict) --*

          Represents the amount of provisioned throughput capacity consumed on a table or an index.

          - **ReadCapacityUnits** *(float) --*

            The total number of read capacity units consumed on a table or an index.

          - **WriteCapacityUnits** *(float) --*

            The total number of write capacity units consumed on a table or an index.

          - **CapacityUnits** *(float) --*

            The total number of capacity units consumed on a table or an index.

    - **GlobalSecondaryIndexes** *(dict) --*

      The amount of throughput consumed on each global index affected by the operation.

      - *(string) --*

        - *(dict) --*

          Represents the amount of provisioned throughput capacity consumed on a table or an index.

          - **ReadCapacityUnits** *(float) --*

            The total number of read capacity units consumed on a table or an index.

          - **WriteCapacityUnits** *(float) --*

            The total number of write capacity units consumed on a table or an index.

          - **CapacityUnits** *(float) --*

            The total number of capacity units consumed on a table or an index.
    """


_TableScanResponseItemsTypeDef = TypedDict(
    "_TableScanResponseItemsTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class TableScanResponseItemsTypeDef(_TableScanResponseItemsTypeDef):
    """
    Type definition for `TableScanResponse` `Items`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_TableScanResponseLastEvaluatedKeyTypeDef = TypedDict(
    "_TableScanResponseLastEvaluatedKeyTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class TableScanResponseLastEvaluatedKeyTypeDef(_TableScanResponseLastEvaluatedKeyTypeDef):
    """
    Type definition for `TableScanResponse` `LastEvaluatedKey`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_TableScanResponseTypeDef = TypedDict(
    "_TableScanResponseTypeDef",
    {
        "Items": List[Dict[str, TableScanResponseItemsTypeDef]],
        "Count": int,
        "ScannedCount": int,
        "LastEvaluatedKey": Dict[str, TableScanResponseLastEvaluatedKeyTypeDef],
        "ConsumedCapacity": TableScanResponseConsumedCapacityTypeDef,
    },
    total=False,
)


class TableScanResponseTypeDef(_TableScanResponseTypeDef):
    """
    Type definition for `TableScan` `Response`

    Represents the output of a ``Scan`` operation.

    - **Items** *(list) --*

      An array of item attributes that match the scan criteria. Each element in this array consists
      of an attribute name and the value for that attribute.

      - *(dict) --*

        - *(string) --*

          - *(dict) --*

            Represents the data for an attribute.

            Each attribute value is described as a name-value pair. The name is the data type, and
            the value is the data itself.

            For more information, see `Data Types
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
            in the *Amazon DynamoDB Developer Guide* .

            - **S** *(string) --*

              An attribute of type String. For example:

               ``"S": "Hello"``

            - **N** *(string) --*

              An attribute of type Number. For example:

               ``"N": "123.45"``

              Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
              across languages and libraries. However, DynamoDB treats them as number type
              attributes for mathematical operations.

            - **B** *(bytes) --*

              An attribute of type Binary. For example:

               ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

            - **SS** *(list) --*

              An attribute of type String Set. For example:

               ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

              - *(string) --*

            - **NS** *(list) --*

              An attribute of type Number Set. For example:

               ``"NS": ["42.2", "-19", "7.5", "3.14"]``

              Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
              across languages and libraries. However, DynamoDB treats them as number type
              attributes for mathematical operations.

              - *(string) --*

            - **BS** *(list) --*

              An attribute of type Binary Set. For example:

               ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

              - *(bytes) --*

            - **M** *(dict) --*

              An attribute of type Map. For example:

               ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

              - *(string) --*

                - *(dict) --*

                  Represents the data for an attribute.

                  Each attribute value is described as a name-value pair. The name is the data type,
                  and the value is the data itself.

                  For more information, see `Data Types
                  <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                  in the *Amazon DynamoDB Developer Guide* .

            - **L** *(list) --*

              An attribute of type List. For example:

               ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

            - **NULL** *(boolean) --*

              An attribute of type Null. For example:

               ``"NULL": true``

            - **BOOL** *(boolean) --*

              An attribute of type Boolean. For example:

               ``"BOOL": true``

    - **Count** *(integer) --*

      The number of items in the response.

      If you set ``ScanFilter`` in the request, then ``Count`` is the number of items returned after
      the filter was applied, and ``ScannedCount`` is the number of matching items before the filter
      was applied.

      If you did not use a filter in the request, then ``Count`` is the same as ``ScannedCount`` .

    - **ScannedCount** *(integer) --*

      The number of items evaluated, before any ``ScanFilter`` is applied. A high ``ScannedCount``
      value with few, or no, ``Count`` results indicates an inefficient ``Scan`` operation. For more
      information, see `Count and ScannedCount
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html#Count>`__
      in the *Amazon DynamoDB Developer Guide* .

      If you did not use a filter in the request, then ``ScannedCount`` is the same as ``Count`` .

    - **LastEvaluatedKey** *(dict) --*

      The primary key of the item where the operation stopped, inclusive of the previous result set.
      Use this value to start a new operation, excluding this value in the new request.

      If ``LastEvaluatedKey`` is empty, then the "last page" of results has been processed and there
      is no more data to be retrieved.

      If ``LastEvaluatedKey`` is not empty, it does not necessarily mean that there is more data in
      the result set. The only way to know when you have reached the end of the result set is when
      ``LastEvaluatedKey`` is empty.

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

          - **S** *(string) --*

            An attribute of type String. For example:

             ``"S": "Hello"``

          - **N** *(string) --*

            An attribute of type Number. For example:

             ``"N": "123.45"``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

          - **B** *(bytes) --*

            An attribute of type Binary. For example:

             ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

          - **SS** *(list) --*

            An attribute of type String Set. For example:

             ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

            - *(string) --*

          - **NS** *(list) --*

            An attribute of type Number Set. For example:

             ``"NS": ["42.2", "-19", "7.5", "3.14"]``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

            - *(string) --*

          - **BS** *(list) --*

            An attribute of type Binary Set. For example:

             ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

            - *(bytes) --*

          - **M** *(dict) --*

            An attribute of type Map. For example:

             ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

            - *(string) --*

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

          - **L** *(list) --*

            An attribute of type List. For example:

             ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

            - *(dict) --*

              Represents the data for an attribute.

              Each attribute value is described as a name-value pair. The name is the data type, and
              the value is the data itself.

              For more information, see `Data Types
              <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
              in the *Amazon DynamoDB Developer Guide* .

          - **NULL** *(boolean) --*

            An attribute of type Null. For example:

             ``"NULL": true``

          - **BOOL** *(boolean) --*

            An attribute of type Boolean. For example:

             ``"BOOL": true``

    - **ConsumedCapacity** *(dict) --*

      The capacity units consumed by the ``Scan`` operation. The data returned includes the total
      provisioned throughput consumed, along with statistics for the table and any indexes involved
      in the operation. ``ConsumedCapacity`` is only returned if the ``ReturnConsumedCapacity``
      parameter was specified. For more information, see `Provisioned Throughput
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html>`__
      in the *Amazon DynamoDB Developer Guide* .

      - **TableName** *(string) --*

        The name of the table that was affected by the operation.

      - **CapacityUnits** *(float) --*

        The total number of capacity units consumed by the operation.

      - **ReadCapacityUnits** *(float) --*

        The total number of read capacity units consumed by the operation.

      - **WriteCapacityUnits** *(float) --*

        The total number of write capacity units consumed by the operation.

      - **Table** *(dict) --*

        The amount of throughput consumed on the table affected by the operation.

        - **ReadCapacityUnits** *(float) --*

          The total number of read capacity units consumed on a table or an index.

        - **WriteCapacityUnits** *(float) --*

          The total number of write capacity units consumed on a table or an index.

        - **CapacityUnits** *(float) --*

          The total number of capacity units consumed on a table or an index.

      - **LocalSecondaryIndexes** *(dict) --*

        The amount of throughput consumed on each local index affected by the operation.

        - *(string) --*

          - *(dict) --*

            Represents the amount of provisioned throughput capacity consumed on a table or an
            index.

            - **ReadCapacityUnits** *(float) --*

              The total number of read capacity units consumed on a table or an index.

            - **WriteCapacityUnits** *(float) --*

              The total number of write capacity units consumed on a table or an index.

            - **CapacityUnits** *(float) --*

              The total number of capacity units consumed on a table or an index.

      - **GlobalSecondaryIndexes** *(dict) --*

        The amount of throughput consumed on each global index affected by the operation.

        - *(string) --*

          - *(dict) --*

            Represents the amount of provisioned throughput capacity consumed on a table or an
            index.

            - **ReadCapacityUnits** *(float) --*

              The total number of read capacity units consumed on a table or an index.

            - **WriteCapacityUnits** *(float) --*

              The total number of write capacity units consumed on a table or an index.

            - **CapacityUnits** *(float) --*

              The total number of capacity units consumed on a table or an index.
    """


_TableScanScanFilterAttributeValueListTypeDef = TypedDict(
    "_TableScanScanFilterAttributeValueListTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class TableScanScanFilterAttributeValueListTypeDef(_TableScanScanFilterAttributeValueListTypeDef):
    """
    Type definition for `TableScanScanFilter` `AttributeValueList`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_RequiredTableScanScanFilterTypeDef = TypedDict(
    "_RequiredTableScanScanFilterTypeDef", {"ComparisonOperator": str}
)
_OptionalTableScanScanFilterTypeDef = TypedDict(
    "_OptionalTableScanScanFilterTypeDef",
    {"AttributeValueList": List[TableScanScanFilterAttributeValueListTypeDef]},
    total=False,
)


class TableScanScanFilterTypeDef(
    _RequiredTableScanScanFilterTypeDef, _OptionalTableScanScanFilterTypeDef
):
    """
    Type definition for `TableScan` `ScanFilter`

    Represents the selection criteria for a ``Query`` or ``Scan`` operation:

    * For a ``Query`` operation, ``Condition`` is used for specifying the ``KeyConditions`` to use
    when querying a table or an index. For ``KeyConditions`` , only the following comparison
    operators are supported:  ``EQ | LE | LT | GE | GT | BEGINS_WITH | BETWEEN``    ``Condition`` is
    also used in a ``QueryFilter`` , which evaluates the query results and returns only the desired
    values.

    * For a ``Scan`` operation, ``Condition`` is used in a ``ScanFilter`` , which evaluates the scan
    results and returns only the desired values.

    - **AttributeValueList** *(list) --*

      One or more values to evaluate against the supplied attribute. The number of values in the
      list depends on the ``ComparisonOperator`` being used.

      For type Number, value comparisons are numeric.

      String value comparisons for greater than, equals, or less than are based on ASCII character
      code values. For example, ``a`` is greater than ``A`` , and ``a`` is greater than ``B`` . For
      a list of code values, see `http\\://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters
      <http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters>`__ .

      For Binary, DynamoDB treats each byte of the binary data as unsigned when it compares binary
      values.

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

        - **S** *(string) --*

          An attribute of type String. For example:

           ``"S": "Hello"``

        - **N** *(string) --*

          An attribute of type Number. For example:

           ``"N": "123.45"``

          Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
          across languages and libraries. However, DynamoDB treats them as number type attributes
          for mathematical operations.

        - **B** *(bytes) --*

          An attribute of type Binary. For example:

           ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

        - **SS** *(list) --*

          An attribute of type String Set. For example:

           ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

          - *(string) --*

        - **NS** *(list) --*

          An attribute of type Number Set. For example:

           ``"NS": ["42.2", "-19", "7.5", "3.14"]``

          Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
          across languages and libraries. However, DynamoDB treats them as number type attributes
          for mathematical operations.

          - *(string) --*

        - **BS** *(list) --*

          An attribute of type Binary Set. For example:

           ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

          - *(bytes) --*

        - **M** *(dict) --*

          An attribute of type Map. For example:

           ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

          - *(string) --*

            - *(dict) --*

              Represents the data for an attribute.

              Each attribute value is described as a name-value pair. The name is the data type, and
              the value is the data itself.

              For more information, see `Data Types
              <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
              in the *Amazon DynamoDB Developer Guide* .

        - **L** *(list) --*

          An attribute of type List. For example:

           ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

          - *(dict) --*

            Represents the data for an attribute.

            Each attribute value is described as a name-value pair. The name is the data type, and
            the value is the data itself.

            For more information, see `Data Types
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
            in the *Amazon DynamoDB Developer Guide* .

        - **NULL** *(boolean) --*

          An attribute of type Null. For example:

           ``"NULL": true``

        - **BOOL** *(boolean) --*

          An attribute of type Boolean. For example:

           ``"BOOL": true``

    - **ComparisonOperator** *(string) --* **[REQUIRED]**

      A comparator for evaluating attributes. For example, equals, greater than, less than, etc.

      The following comparison operators are available:

       ``EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH
       | IN
       | BETWEEN``

      The following are descriptions of each comparison operator.

      * ``EQ`` : Equal. ``EQ`` is supported for all data types, including lists and maps.
      ``AttributeValueList`` can contain only one ``AttributeValue`` element of type String, Number,
      Binary, String Set, Number Set, or Binary Set. If an item contains an ``AttributeValue``
      element of a different type than the one provided in the request, the value does not match.
      For example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` . Also, ``{"N":"6"}`` does not equal
      ``{"NS":["6", "2", "1"]}`` .

      * ``NE`` : Not equal. ``NE`` is supported for all data types, including lists and maps.
      ``AttributeValueList`` can contain only one ``AttributeValue`` of type String, Number, Binary,
      String Set, Number Set, or Binary Set. If an item contains an ``AttributeValue`` of a
      different type than the one provided in the request, the value does not match. For example,
      ``{"S":"6"}`` does not equal ``{"N":"6"}`` . Also, ``{"N":"6"}`` does not equal ``{"NS":["6",
      "2", "1"]}`` .

      * ``LE`` : Less than or equal.   ``AttributeValueList`` can contain only one
      ``AttributeValue`` element of type String, Number, or Binary (not a set type). If an item
      contains an ``AttributeValue`` element of a different type than the one provided in the
      request, the value does not match. For example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` .
      Also, ``{"N":"6"}`` does not compare to ``{"NS":["6", "2", "1"]}`` .

      * ``LT`` : Less than.   ``AttributeValueList`` can contain only one ``AttributeValue`` of type
      String, Number, or Binary (not a set type). If an item contains an ``AttributeValue`` element
      of a different type than the one provided in the request, the value does not match. For
      example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` . Also, ``{"N":"6"}`` does not compare to
      ``{"NS":["6", "2", "1"]}`` .

      * ``GE`` : Greater than or equal.   ``AttributeValueList`` can contain only one
      ``AttributeValue`` element of type String, Number, or Binary (not a set type). If an item
      contains an ``AttributeValue`` element of a different type than the one provided in the
      request, the value does not match. For example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` .
      Also, ``{"N":"6"}`` does not compare to ``{"NS":["6", "2", "1"]}`` .

      * ``GT`` : Greater than.   ``AttributeValueList`` can contain only one ``AttributeValue``
      element of type String, Number, or Binary (not a set type). If an item contains an
      ``AttributeValue`` element of a different type than the one provided in the request, the value
      does not match. For example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` . Also, ``{"N":"6"}``
      does not compare to ``{"NS":["6", "2", "1"]}`` .

      * ``NOT_NULL`` : The attribute exists. ``NOT_NULL`` is supported for all data types, including
      lists and maps.

      .. note::

         This operator tests for the existence of an attribute, not its data type. If the data type
         of attribute "``a`` " is null, and you evaluate it using ``NOT_NULL`` , the result is a
         Boolean ``true`` . This result is because the attribute "``a`` " exists; its data type is
         not relevant to the ``NOT_NULL`` comparison operator.

      * ``NULL`` : The attribute does not exist. ``NULL`` is supported for all data types, including
      lists and maps.

      .. note::

         This operator tests for the nonexistence of an attribute, not its data type. If the data
         type of attribute "``a`` " is null, and you evaluate it using ``NULL`` , the result is a
         Boolean ``false`` . This is because the attribute "``a`` " exists; its data type is not
         relevant to the ``NULL`` comparison operator.

      * ``CONTAINS`` : Checks for a subsequence, or value in a set.  ``AttributeValueList`` can
      contain only one ``AttributeValue`` element of type String, Number, or Binary (not a set
      type). If the target attribute of the comparison is of type String, then the operator checks
      for a substring match. If the target attribute of the comparison is of type Binary, then the
      operator looks for a subsequence of the target that matches the input. If the target attribute
      of the comparison is a set ("``SS`` ", "``NS`` ", or "``BS`` "), then the operator evaluates
      to true if it finds an exact match with any member of the set. CONTAINS is supported for
      lists: When evaluating "``a CONTAINS b`` ", "``a`` " can be a list; however, "``b`` " cannot
      be a set, a map, or a list.

      * ``NOT_CONTAINS`` : Checks for absence of a subsequence, or absence of a value in a set.
      ``AttributeValueList`` can contain only one ``AttributeValue`` element of type String, Number,
      or Binary (not a set type). If the target attribute of the comparison is a String, then the
      operator checks for the absence of a substring match. If the target attribute of the
      comparison is Binary, then the operator checks for the absence of a subsequence of the target
      that matches the input. If the target attribute of the comparison is a set ("``SS`` ", "``NS``
      ", or "``BS`` "), then the operator evaluates to true if it *does not* find an exact match
      with any member of the set. NOT_CONTAINS is supported for lists: When evaluating "``a NOT
      CONTAINS b`` ", "``a`` " can be a list; however, "``b`` " cannot be a set, a map, or a list.

      * ``BEGINS_WITH`` : Checks for a prefix.   ``AttributeValueList`` can contain only one
      ``AttributeValue`` of type String or Binary (not a Number or a set type). The target attribute
      of the comparison must be of type String or Binary (not a Number or a set type).

      * ``IN`` : Checks for matching elements in a list.  ``AttributeValueList`` can contain one or
      more ``AttributeValue`` elements of type String, Number, or Binary. These attributes are
      compared against an existing attribute of an item. If any elements of the input are equal to
      the item attribute, the expression evaluates to true.

      * ``BETWEEN`` : Greater than or equal to the first value, and less than or equal to the second
      value.   ``AttributeValueList`` must contain two ``AttributeValue`` elements of the same type,
      either String, Number, or Binary (not a set type). A target attribute matches if the target
      value is greater than, or equal to, the first element and less than, or equal to, the second
      element. If an item contains an ``AttributeValue`` element of a different type than the one
      provided in the request, the value does not match. For example, ``{"S":"6"}`` does not compare
      to ``{"N":"6"}`` . Also, ``{"N":"6"}`` does not compare to ``{"NS":["6", "2", "1"]}``

      For usage examples of ``AttributeValueList`` and ``ComparisonOperator`` , see `Legacy
      Conditional Parameters
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html>`__
      in the *Amazon DynamoDB Developer Guide* .
    """


_TableUpdateAttributeDefinitionsTypeDef = TypedDict(
    "_TableUpdateAttributeDefinitionsTypeDef", {"AttributeName": str, "AttributeType": str}
)


class TableUpdateAttributeDefinitionsTypeDef(_TableUpdateAttributeDefinitionsTypeDef):
    """
    Type definition for `TableUpdate` `AttributeDefinitions`

    Represents an attribute for describing the key schema for the table and indexes.

    - **AttributeName** *(string) --* **[REQUIRED]**

      A name for the attribute.

    - **AttributeType** *(string) --* **[REQUIRED]**

      The data type for the attribute, where:

      * ``S`` - the attribute is of type String

      * ``N`` - the attribute is of type Number

      * ``B`` - the attribute is of type Binary
    """


_TableUpdateGlobalSecondaryIndexUpdatesCreateKeySchemaTypeDef = TypedDict(
    "_TableUpdateGlobalSecondaryIndexUpdatesCreateKeySchemaTypeDef",
    {"AttributeName": str, "KeyType": str},
)


class TableUpdateGlobalSecondaryIndexUpdatesCreateKeySchemaTypeDef(
    _TableUpdateGlobalSecondaryIndexUpdatesCreateKeySchemaTypeDef
):
    """
    Type definition for `TableUpdateGlobalSecondaryIndexUpdatesCreate` `KeySchema`

    Represents *a single element* of a key schema. A key schema specifies the attributes that make
    up the primary key of a table, or the key attributes of an index.

    A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
    simple primary key would be represented by one ``KeySchemaElement`` (for the partition key). A
    composite primary key would require one ``KeySchemaElement`` for the partition key, and another
    ``KeySchemaElement`` for the sort key.

    A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The data
    type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a
    Map.

    - **AttributeName** *(string) --* **[REQUIRED]**

      The name of a key attribute.

    - **KeyType** *(string) --* **[REQUIRED]**

      The role that this key attribute will assume:

      * ``HASH`` - partition key

      * ``RANGE`` - sort key

      .. note::

        The partition key of an item is also known as its *hash attribute* . The term "hash
        attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute
        data items across partitions, based on their partition key values.

        The sort key of an item is also known as its *range attribute* . The term "range attribute"
        derives from the way DynamoDB stores items with the same partition key physically close
        together, in sorted order by the sort key value.
    """


_TableUpdateGlobalSecondaryIndexUpdatesCreateProjectionTypeDef = TypedDict(
    "_TableUpdateGlobalSecondaryIndexUpdatesCreateProjectionTypeDef",
    {"ProjectionType": str, "NonKeyAttributes": List[str]},
    total=False,
)


class TableUpdateGlobalSecondaryIndexUpdatesCreateProjectionTypeDef(
    _TableUpdateGlobalSecondaryIndexUpdatesCreateProjectionTypeDef
):
    """
    Type definition for `TableUpdateGlobalSecondaryIndexUpdatesCreate` `Projection`

    Represents attributes that are copied (projected) from the table into an index. These are in
    addition to the primary key attributes and index key attributes, which are automatically
    projected.

    - **ProjectionType** *(string) --*

      The set of attributes that are projected into the index:

      * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

      * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list of
      projected attributes is in ``NonKeyAttributes`` .

      * ``ALL`` - All of the table attributes are projected into the index.

    - **NonKeyAttributes** *(list) --*

      Represents the non-key attribute names which will be projected into the index.

      For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all of the
      local secondary indexes, must not exceed 20. If you project the same attribute into two
      different indexes, this counts as two distinct attributes when determining the total.

      - *(string) --*
    """


_TableUpdateGlobalSecondaryIndexUpdatesCreateProvisionedThroughputTypeDef = TypedDict(
    "_TableUpdateGlobalSecondaryIndexUpdatesCreateProvisionedThroughputTypeDef",
    {"ReadCapacityUnits": int, "WriteCapacityUnits": int},
)


class TableUpdateGlobalSecondaryIndexUpdatesCreateProvisionedThroughputTypeDef(
    _TableUpdateGlobalSecondaryIndexUpdatesCreateProvisionedThroughputTypeDef
):
    """
    Type definition for `TableUpdateGlobalSecondaryIndexUpdatesCreate` `ProvisionedThroughput`

    Represents the provisioned throughput settings for the specified global secondary index.

    For current minimum and maximum provisioned throughput values, see `Limits
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the *Amazon
    DynamoDB Developer Guide* .

    - **ReadCapacityUnits** *(integer) --* **[REQUIRED]**

      The maximum number of strongly consistent reads consumed per second before DynamoDB returns a
      ``ThrottlingException`` . For more information, see `Specifying Read and Write Requirements
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
      in the *Amazon DynamoDB Developer Guide* .

      If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.

    - **WriteCapacityUnits** *(integer) --* **[REQUIRED]**

      The maximum number of writes consumed per second before DynamoDB returns a
      ``ThrottlingException`` . For more information, see `Specifying Read and Write Requirements
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
      in the *Amazon DynamoDB Developer Guide* .

      If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.
    """


_RequiredTableUpdateGlobalSecondaryIndexUpdatesCreateTypeDef = TypedDict(
    "_RequiredTableUpdateGlobalSecondaryIndexUpdatesCreateTypeDef",
    {
        "IndexName": str,
        "KeySchema": List[TableUpdateGlobalSecondaryIndexUpdatesCreateKeySchemaTypeDef],
        "Projection": TableUpdateGlobalSecondaryIndexUpdatesCreateProjectionTypeDef,
    },
)
_OptionalTableUpdateGlobalSecondaryIndexUpdatesCreateTypeDef = TypedDict(
    "_OptionalTableUpdateGlobalSecondaryIndexUpdatesCreateTypeDef",
    {
        "ProvisionedThroughput": TableUpdateGlobalSecondaryIndexUpdatesCreateProvisionedThroughputTypeDef
    },
    total=False,
)


class TableUpdateGlobalSecondaryIndexUpdatesCreateTypeDef(
    _RequiredTableUpdateGlobalSecondaryIndexUpdatesCreateTypeDef,
    _OptionalTableUpdateGlobalSecondaryIndexUpdatesCreateTypeDef,
):
    """
    Type definition for `TableUpdateGlobalSecondaryIndexUpdates` `Create`

    The parameters required for creating a global secondary index on an existing table:

    * ``IndexName``

    * ``KeySchema``

    * ``AttributeDefinitions``

    * ``Projection``

    * ``ProvisionedThroughput``

    - **IndexName** *(string) --* **[REQUIRED]**

      The name of the global secondary index to be created.

    - **KeySchema** *(list) --* **[REQUIRED]**

      The key schema for the global secondary index.

      - *(dict) --*

        Represents *a single element* of a key schema. A key schema specifies the attributes that
        make up the primary key of a table, or the key attributes of an index.

        A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
        simple primary key would be represented by one ``KeySchemaElement`` (for the partition key).
        A composite primary key would require one ``KeySchemaElement`` for the partition key, and
        another ``KeySchemaElement`` for the sort key.

        A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The
        data type must be one of String, Number, or Binary. The attribute cannot be nested within a
        List or a Map.

        - **AttributeName** *(string) --* **[REQUIRED]**

          The name of a key attribute.

        - **KeyType** *(string) --* **[REQUIRED]**

          The role that this key attribute will assume:

          * ``HASH`` - partition key

          * ``RANGE`` - sort key

          .. note::

            The partition key of an item is also known as its *hash attribute* . The term "hash
            attribute" derives from DynamoDB's usage of an internal hash function to evenly
            distribute data items across partitions, based on their partition key values.

            The sort key of an item is also known as its *range attribute* . The term "range
            attribute" derives from the way DynamoDB stores items with the same partition key
            physically close together, in sorted order by the sort key value.

    - **Projection** *(dict) --* **[REQUIRED]**

      Represents attributes that are copied (projected) from the table into an index. These are in
      addition to the primary key attributes and index key attributes, which are automatically
      projected.

      - **ProjectionType** *(string) --*

        The set of attributes that are projected into the index:

        * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

        * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list
        of projected attributes is in ``NonKeyAttributes`` .

        * ``ALL`` - All of the table attributes are projected into the index.

      - **NonKeyAttributes** *(list) --*

        Represents the non-key attribute names which will be projected into the index.

        For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all of
        the local secondary indexes, must not exceed 20. If you project the same attribute into two
        different indexes, this counts as two distinct attributes when determining the total.

        - *(string) --*

    - **ProvisionedThroughput** *(dict) --*

      Represents the provisioned throughput settings for the specified global secondary index.

      For current minimum and maximum provisioned throughput values, see `Limits
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
      *Amazon DynamoDB Developer Guide* .

      - **ReadCapacityUnits** *(integer) --* **[REQUIRED]**

        The maximum number of strongly consistent reads consumed per second before DynamoDB returns
        a ``ThrottlingException`` . For more information, see `Specifying Read and Write
        Requirements
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
        in the *Amazon DynamoDB Developer Guide* .

        If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.

      - **WriteCapacityUnits** *(integer) --* **[REQUIRED]**

        The maximum number of writes consumed per second before DynamoDB returns a
        ``ThrottlingException`` . For more information, see `Specifying Read and Write Requirements
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
        in the *Amazon DynamoDB Developer Guide* .

        If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.
    """


_TableUpdateGlobalSecondaryIndexUpdatesDeleteTypeDef = TypedDict(
    "_TableUpdateGlobalSecondaryIndexUpdatesDeleteTypeDef", {"IndexName": str}
)


class TableUpdateGlobalSecondaryIndexUpdatesDeleteTypeDef(
    _TableUpdateGlobalSecondaryIndexUpdatesDeleteTypeDef
):
    """
    Type definition for `TableUpdateGlobalSecondaryIndexUpdates` `Delete`

    The name of an existing global secondary index to be removed.

    - **IndexName** *(string) --* **[REQUIRED]**

      The name of the global secondary index to be deleted.
    """


_TableUpdateGlobalSecondaryIndexUpdatesUpdateProvisionedThroughputTypeDef = TypedDict(
    "_TableUpdateGlobalSecondaryIndexUpdatesUpdateProvisionedThroughputTypeDef",
    {"ReadCapacityUnits": int, "WriteCapacityUnits": int},
)


class TableUpdateGlobalSecondaryIndexUpdatesUpdateProvisionedThroughputTypeDef(
    _TableUpdateGlobalSecondaryIndexUpdatesUpdateProvisionedThroughputTypeDef
):
    """
    Type definition for `TableUpdateGlobalSecondaryIndexUpdatesUpdate` `ProvisionedThroughput`

    Represents the provisioned throughput settings for the specified global secondary index.

    For current minimum and maximum provisioned throughput values, see `Limits
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the *Amazon
    DynamoDB Developer Guide* .

    - **ReadCapacityUnits** *(integer) --* **[REQUIRED]**

      The maximum number of strongly consistent reads consumed per second before DynamoDB returns a
      ``ThrottlingException`` . For more information, see `Specifying Read and Write Requirements
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
      in the *Amazon DynamoDB Developer Guide* .

      If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.

    - **WriteCapacityUnits** *(integer) --* **[REQUIRED]**

      The maximum number of writes consumed per second before DynamoDB returns a
      ``ThrottlingException`` . For more information, see `Specifying Read and Write Requirements
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
      in the *Amazon DynamoDB Developer Guide* .

      If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.
    """


_TableUpdateGlobalSecondaryIndexUpdatesUpdateTypeDef = TypedDict(
    "_TableUpdateGlobalSecondaryIndexUpdatesUpdateTypeDef",
    {
        "IndexName": str,
        "ProvisionedThroughput": TableUpdateGlobalSecondaryIndexUpdatesUpdateProvisionedThroughputTypeDef,
    },
)


class TableUpdateGlobalSecondaryIndexUpdatesUpdateTypeDef(
    _TableUpdateGlobalSecondaryIndexUpdatesUpdateTypeDef
):
    """
    Type definition for `TableUpdateGlobalSecondaryIndexUpdates` `Update`

    The name of an existing global secondary index, along with new provisioned throughput settings
    to be applied to that index.

    - **IndexName** *(string) --* **[REQUIRED]**

      The name of the global secondary index to be updated.

    - **ProvisionedThroughput** *(dict) --* **[REQUIRED]**

      Represents the provisioned throughput settings for the specified global secondary index.

      For current minimum and maximum provisioned throughput values, see `Limits
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
      *Amazon DynamoDB Developer Guide* .

      - **ReadCapacityUnits** *(integer) --* **[REQUIRED]**

        The maximum number of strongly consistent reads consumed per second before DynamoDB returns
        a ``ThrottlingException`` . For more information, see `Specifying Read and Write
        Requirements
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
        in the *Amazon DynamoDB Developer Guide* .

        If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.

      - **WriteCapacityUnits** *(integer) --* **[REQUIRED]**

        The maximum number of writes consumed per second before DynamoDB returns a
        ``ThrottlingException`` . For more information, see `Specifying Read and Write Requirements
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
        in the *Amazon DynamoDB Developer Guide* .

        If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.
    """


_TableUpdateGlobalSecondaryIndexUpdatesTypeDef = TypedDict(
    "_TableUpdateGlobalSecondaryIndexUpdatesTypeDef",
    {
        "Update": TableUpdateGlobalSecondaryIndexUpdatesUpdateTypeDef,
        "Create": TableUpdateGlobalSecondaryIndexUpdatesCreateTypeDef,
        "Delete": TableUpdateGlobalSecondaryIndexUpdatesDeleteTypeDef,
    },
    total=False,
)


class TableUpdateGlobalSecondaryIndexUpdatesTypeDef(_TableUpdateGlobalSecondaryIndexUpdatesTypeDef):
    """
    Type definition for `TableUpdate` `GlobalSecondaryIndexUpdates`

    Represents one of the following:

    * A new global secondary index to be added to an existing table.

    * New provisioned throughput parameters for an existing global secondary index.

    * An existing global secondary index to be removed from an existing table.

    - **Update** *(dict) --*

      The name of an existing global secondary index, along with new provisioned throughput settings
      to be applied to that index.

      - **IndexName** *(string) --* **[REQUIRED]**

        The name of the global secondary index to be updated.

      - **ProvisionedThroughput** *(dict) --* **[REQUIRED]**

        Represents the provisioned throughput settings for the specified global secondary index.

        For current minimum and maximum provisioned throughput values, see `Limits
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
        *Amazon DynamoDB Developer Guide* .

        - **ReadCapacityUnits** *(integer) --* **[REQUIRED]**

          The maximum number of strongly consistent reads consumed per second before DynamoDB
          returns a ``ThrottlingException`` . For more information, see `Specifying Read and Write
          Requirements
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
          in the *Amazon DynamoDB Developer Guide* .

          If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.

        - **WriteCapacityUnits** *(integer) --* **[REQUIRED]**

          The maximum number of writes consumed per second before DynamoDB returns a
          ``ThrottlingException`` . For more information, see `Specifying Read and Write
          Requirements
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
          in the *Amazon DynamoDB Developer Guide* .

          If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.

    - **Create** *(dict) --*

      The parameters required for creating a global secondary index on an existing table:

      * ``IndexName``

      * ``KeySchema``

      * ``AttributeDefinitions``

      * ``Projection``

      * ``ProvisionedThroughput``

      - **IndexName** *(string) --* **[REQUIRED]**

        The name of the global secondary index to be created.

      - **KeySchema** *(list) --* **[REQUIRED]**

        The key schema for the global secondary index.

        - *(dict) --*

          Represents *a single element* of a key schema. A key schema specifies the attributes that
          make up the primary key of a table, or the key attributes of an index.

          A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a
          simple primary key would be represented by one ``KeySchemaElement`` (for the partition
          key). A composite primary key would require one ``KeySchemaElement`` for the partition
          key, and another ``KeySchemaElement`` for the sort key.

          A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The
          data type must be one of String, Number, or Binary. The attribute cannot be nested within
          a List or a Map.

          - **AttributeName** *(string) --* **[REQUIRED]**

            The name of a key attribute.

          - **KeyType** *(string) --* **[REQUIRED]**

            The role that this key attribute will assume:

            * ``HASH`` - partition key

            * ``RANGE`` - sort key

            .. note::

              The partition key of an item is also known as its *hash attribute* . The term "hash
              attribute" derives from DynamoDB's usage of an internal hash function to evenly
              distribute data items across partitions, based on their partition key values.

              The sort key of an item is also known as its *range attribute* . The term "range
              attribute" derives from the way DynamoDB stores items with the same partition key
              physically close together, in sorted order by the sort key value.

      - **Projection** *(dict) --* **[REQUIRED]**

        Represents attributes that are copied (projected) from the table into an index. These are in
        addition to the primary key attributes and index key attributes, which are automatically
        projected.

        - **ProjectionType** *(string) --*

          The set of attributes that are projected into the index:

          * ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.

          * ``INCLUDE`` - Only the specified table attributes are projected into the index. The list
          of projected attributes is in ``NonKeyAttributes`` .

          * ``ALL`` - All of the table attributes are projected into the index.

        - **NonKeyAttributes** *(list) --*

          Represents the non-key attribute names which will be projected into the index.

          For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all of
          the local secondary indexes, must not exceed 20. If you project the same attribute into
          two different indexes, this counts as two distinct attributes when determining the total.

          - *(string) --*

      - **ProvisionedThroughput** *(dict) --*

        Represents the provisioned throughput settings for the specified global secondary index.

        For current minimum and maximum provisioned throughput values, see `Limits
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html>`__ in the
        *Amazon DynamoDB Developer Guide* .

        - **ReadCapacityUnits** *(integer) --* **[REQUIRED]**

          The maximum number of strongly consistent reads consumed per second before DynamoDB
          returns a ``ThrottlingException`` . For more information, see `Specifying Read and Write
          Requirements
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
          in the *Amazon DynamoDB Developer Guide* .

          If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.

        - **WriteCapacityUnits** *(integer) --* **[REQUIRED]**

          The maximum number of writes consumed per second before DynamoDB returns a
          ``ThrottlingException`` . For more information, see `Specifying Read and Write
          Requirements
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
          in the *Amazon DynamoDB Developer Guide* .

          If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.

    - **Delete** *(dict) --*

      The name of an existing global secondary index to be removed.

      - **IndexName** *(string) --* **[REQUIRED]**

        The name of the global secondary index to be deleted.
    """


_TableUpdateItemAttributeUpdatesValueTypeDef = TypedDict(
    "_TableUpdateItemAttributeUpdatesValueTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class TableUpdateItemAttributeUpdatesValueTypeDef(_TableUpdateItemAttributeUpdatesValueTypeDef):
    """
    Type definition for `TableUpdateItemAttributeUpdates` `Value`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_TableUpdateItemAttributeUpdatesTypeDef = TypedDict(
    "_TableUpdateItemAttributeUpdatesTypeDef",
    {"Value": TableUpdateItemAttributeUpdatesValueTypeDef, "Action": str},
    total=False,
)


class TableUpdateItemAttributeUpdatesTypeDef(_TableUpdateItemAttributeUpdatesTypeDef):
    """
    Type definition for `TableUpdateItem` `AttributeUpdates`

    For the ``UpdateItem`` operation, represents the attributes to be modified, the action to
    perform on each, and the new value for each.

    .. note::

      You cannot use ``UpdateItem`` to update any primary key attributes. Instead, you will need to
      delete the item, and then use ``PutItem`` to create a new item with new attributes.

    Attribute values cannot be null; string and binary type attributes must have lengths greater
    than zero; and set type attributes must not be empty. Requests with empty values will be
    rejected with a ``ValidationException`` exception.

    - **Value** *(dict) --*

      Represents the data for an attribute.

      Each attribute value is described as a name-value pair. The name is the data type, and the
      value is the data itself.

      For more information, see `Data Types
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
      in the *Amazon DynamoDB Developer Guide* .

      - **S** *(string) --*

        An attribute of type String. For example:

         ``"S": "Hello"``

      - **N** *(string) --*

        An attribute of type Number. For example:

         ``"N": "123.45"``

        Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
        languages and libraries. However, DynamoDB treats them as number type attributes for
        mathematical operations.

      - **B** *(bytes) --*

        An attribute of type Binary. For example:

         ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

      - **SS** *(list) --*

        An attribute of type String Set. For example:

         ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

        - *(string) --*

      - **NS** *(list) --*

        An attribute of type Number Set. For example:

         ``"NS": ["42.2", "-19", "7.5", "3.14"]``

        Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
        languages and libraries. However, DynamoDB treats them as number type attributes for
        mathematical operations.

        - *(string) --*

      - **BS** *(list) --*

        An attribute of type Binary Set. For example:

         ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

        - *(bytes) --*

      - **M** *(dict) --*

        An attribute of type Map. For example:

         ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

        - *(string) --*

          - *(dict) --*

            Represents the data for an attribute.

            Each attribute value is described as a name-value pair. The name is the data type, and
            the value is the data itself.

            For more information, see `Data Types
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
            in the *Amazon DynamoDB Developer Guide* .

      - **L** *(list) --*

        An attribute of type List. For example:

         ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

      - **NULL** *(boolean) --*

        An attribute of type Null. For example:

         ``"NULL": true``

      - **BOOL** *(boolean) --*

        An attribute of type Boolean. For example:

         ``"BOOL": true``

    - **Action** *(string) --*

      Specifies how to perform the update. Valid values are ``PUT`` (default), ``DELETE`` , and
      ``ADD`` . The behavior depends on whether the specified primary key already exists in the
      table.

       **If an item with the specified *Key* is found in the table:**

      * ``PUT`` - Adds the specified attribute to the item. If the attribute already exists, it is
      replaced by the new value.

      * ``DELETE`` - If no value is specified, the attribute and its value are removed from the
      item. The data type of the specified value must match the existing value's data type. If a
      *set* of values is specified, then those values are subtracted from the old set. For example,
      if the attribute value was the set ``[a,b,c]`` and the ``DELETE`` action specified ``[a,c]`` ,
      then the final attribute value would be ``[b]`` . Specifying an empty set is an error.

      * ``ADD`` - If the attribute does not already exist, then the attribute and its values are
      added to the item. If the attribute does exist, then the behavior of ``ADD`` depends on the
      data type of the attribute:

        * If the existing attribute is a number, and if ``Value`` is also a number, then the
        ``Value`` is mathematically added to the existing attribute. If ``Value`` is a negative
        number, then it is subtracted from the existing attribute.

        .. note::

           If you use ``ADD`` to increment or decrement a number value for an item that doesn't
           exist before the update, DynamoDB uses 0 as the initial value. In addition, if you use
           ``ADD`` to update an existing item, and intend to increment or decrement an attribute
           value which does not yet exist, DynamoDB uses ``0`` as the initial value. For example,
           suppose that the item you want to update does not yet have an attribute named *itemcount*
           , but you decide to ``ADD`` the number ``3`` to this attribute anyway, even though it
           currently does not exist. DynamoDB will create the *itemcount* attribute, set its initial
           value to ``0`` , and finally add ``3`` to it. The result will be a new *itemcount*
           attribute in the item, with a value of ``3`` .

        * If the existing data type is a set, and if the ``Value`` is also a set, then the ``Value``
        is added to the existing set. (This is a *set* operation, not mathematical addition.) For
        example, if the attribute value was the set ``[1,2]`` , and the ``ADD`` action specified
        ``[3]`` , then the final attribute value would be ``[1,2,3]`` . An error occurs if an Add
        action is specified for a set attribute and the attribute type specified does not match the
        existing set type.  Both sets must have the same primitive data type. For example, if the
        existing data type is a set of strings, the ``Value`` must also be a set of strings. The
        same holds true for number sets and binary sets.

      This action is only valid for an existing attribute whose data type is number or is a set. Do
      not use ``ADD`` for any other data types.

       **If no item with the specified *Key* is found:**

      * ``PUT`` - DynamoDB creates a new item with the specified primary key, and then adds the
      attribute.

      * ``DELETE`` - Nothing happens; there is no attribute to delete.

      * ``ADD`` - DynamoDB creates an item with the supplied primary key and number (or set of
      numbers) for the attribute value. The only data types allowed are number and number set; no
      other data types can be specified.
    """


_TableUpdateItemExpectedAttributeValueListTypeDef = TypedDict(
    "_TableUpdateItemExpectedAttributeValueListTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class TableUpdateItemExpectedAttributeValueListTypeDef(
    _TableUpdateItemExpectedAttributeValueListTypeDef
):
    """
    Type definition for `TableUpdateItemExpected` `AttributeValueList`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_TableUpdateItemExpectedValueTypeDef = TypedDict(
    "_TableUpdateItemExpectedValueTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class TableUpdateItemExpectedValueTypeDef(_TableUpdateItemExpectedValueTypeDef):
    """
    Type definition for `TableUpdateItemExpected` `Value`

    Represents the data for the expected attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_TableUpdateItemExpectedTypeDef = TypedDict(
    "_TableUpdateItemExpectedTypeDef",
    {
        "Value": TableUpdateItemExpectedValueTypeDef,
        "Exists": bool,
        "ComparisonOperator": str,
        "AttributeValueList": List[TableUpdateItemExpectedAttributeValueListTypeDef],
    },
    total=False,
)


class TableUpdateItemExpectedTypeDef(_TableUpdateItemExpectedTypeDef):
    """
    Type definition for `TableUpdateItem` `Expected`

    Represents a condition to be compared with an attribute value. This condition can be used with
    ``DeleteItem`` , ``PutItem`` , or ``UpdateItem`` operations; if the comparison evaluates to
    true, the operation succeeds; if not, the operation fails. You can use
    ``ExpectedAttributeValue`` in one of two different ways:

    * Use ``AttributeValueList`` to specify one or more values to compare against an attribute. Use
    ``ComparisonOperator`` to specify how you want to perform the comparison. If the comparison
    evaluates to true, then the conditional operation succeeds.

    * Use ``Value`` to specify a value that DynamoDB will compare against an attribute. If the
    values match, then ``ExpectedAttributeValue`` evaluates to true and the conditional operation
    succeeds. Optionally, you can also set ``Exists`` to false, indicating that you *do not* expect
    to find the attribute value in the table. In this case, the conditional operation succeeds only
    if the comparison evaluates to false.

     ``Value`` and ``Exists`` are incompatible with ``AttributeValueList`` and
     ``ComparisonOperator`` . Note that if you use both sets of parameters at once, DynamoDB will
     return a ``ValidationException`` exception.

    - **Value** *(dict) --*

      Represents the data for the expected attribute.

      Each attribute value is described as a name-value pair. The name is the data type, and the
      value is the data itself.

      For more information, see `Data Types
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
      in the *Amazon DynamoDB Developer Guide* .

      - **S** *(string) --*

        An attribute of type String. For example:

         ``"S": "Hello"``

      - **N** *(string) --*

        An attribute of type Number. For example:

         ``"N": "123.45"``

        Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
        languages and libraries. However, DynamoDB treats them as number type attributes for
        mathematical operations.

      - **B** *(bytes) --*

        An attribute of type Binary. For example:

         ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

      - **SS** *(list) --*

        An attribute of type String Set. For example:

         ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

        - *(string) --*

      - **NS** *(list) --*

        An attribute of type Number Set. For example:

         ``"NS": ["42.2", "-19", "7.5", "3.14"]``

        Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
        languages and libraries. However, DynamoDB treats them as number type attributes for
        mathematical operations.

        - *(string) --*

      - **BS** *(list) --*

        An attribute of type Binary Set. For example:

         ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

        - *(bytes) --*

      - **M** *(dict) --*

        An attribute of type Map. For example:

         ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

        - *(string) --*

          - *(dict) --*

            Represents the data for an attribute.

            Each attribute value is described as a name-value pair. The name is the data type, and
            the value is the data itself.

            For more information, see `Data Types
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
            in the *Amazon DynamoDB Developer Guide* .

      - **L** *(list) --*

        An attribute of type List. For example:

         ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

      - **NULL** *(boolean) --*

        An attribute of type Null. For example:

         ``"NULL": true``

      - **BOOL** *(boolean) --*

        An attribute of type Boolean. For example:

         ``"BOOL": true``

    - **Exists** *(boolean) --*

      Causes DynamoDB to evaluate the value before attempting a conditional operation:

      * If ``Exists`` is ``true`` , DynamoDB will check to see if that attribute value already
      exists in the table. If it is found, then the operation succeeds. If it is not found, the
      operation fails with a ``ConditionCheckFailedException`` .

      * If ``Exists`` is ``false`` , DynamoDB assumes that the attribute value does not exist in the
      table. If in fact the value does not exist, then the assumption is valid and the operation
      succeeds. If the value is found, despite the assumption that it does not exist, the operation
      fails with a ``ConditionCheckFailedException`` .

      The default setting for ``Exists`` is ``true`` . If you supply a ``Value`` all by itself,
      DynamoDB assumes the attribute exists: You don't have to set ``Exists`` to ``true`` , because
      it is implied.

      DynamoDB returns a ``ValidationException`` if:

      * ``Exists`` is ``true`` but there is no ``Value`` to check. (You expect a value to exist, but
      don't specify what that value is.)

      * ``Exists`` is ``false`` but you also provide a ``Value`` . (You cannot expect an attribute
      to have a value, while also expecting it not to exist.)

    - **ComparisonOperator** *(string) --*

      A comparator for evaluating attributes in the ``AttributeValueList`` . For example, equals,
      greater than, less than, etc.

      The following comparison operators are available:

       ``EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH
       | IN
       | BETWEEN``

      The following are descriptions of each comparison operator.

      * ``EQ`` : Equal. ``EQ`` is supported for all data types, including lists and maps.
      ``AttributeValueList`` can contain only one ``AttributeValue`` element of type String, Number,
      Binary, String Set, Number Set, or Binary Set. If an item contains an ``AttributeValue``
      element of a different type than the one provided in the request, the value does not match.
      For example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` . Also, ``{"N":"6"}`` does not equal
      ``{"NS":["6", "2", "1"]}`` .

      * ``NE`` : Not equal. ``NE`` is supported for all data types, including lists and maps.
      ``AttributeValueList`` can contain only one ``AttributeValue`` of type String, Number, Binary,
      String Set, Number Set, or Binary Set. If an item contains an ``AttributeValue`` of a
      different type than the one provided in the request, the value does not match. For example,
      ``{"S":"6"}`` does not equal ``{"N":"6"}`` . Also, ``{"N":"6"}`` does not equal ``{"NS":["6",
      "2", "1"]}`` .

      * ``LE`` : Less than or equal.   ``AttributeValueList`` can contain only one
      ``AttributeValue`` element of type String, Number, or Binary (not a set type). If an item
      contains an ``AttributeValue`` element of a different type than the one provided in the
      request, the value does not match. For example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` .
      Also, ``{"N":"6"}`` does not compare to ``{"NS":["6", "2", "1"]}`` .

      * ``LT`` : Less than.   ``AttributeValueList`` can contain only one ``AttributeValue`` of type
      String, Number, or Binary (not a set type). If an item contains an ``AttributeValue`` element
      of a different type than the one provided in the request, the value does not match. For
      example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` . Also, ``{"N":"6"}`` does not compare to
      ``{"NS":["6", "2", "1"]}`` .

      * ``GE`` : Greater than or equal.   ``AttributeValueList`` can contain only one
      ``AttributeValue`` element of type String, Number, or Binary (not a set type). If an item
      contains an ``AttributeValue`` element of a different type than the one provided in the
      request, the value does not match. For example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` .
      Also, ``{"N":"6"}`` does not compare to ``{"NS":["6", "2", "1"]}`` .

      * ``GT`` : Greater than.   ``AttributeValueList`` can contain only one ``AttributeValue``
      element of type String, Number, or Binary (not a set type). If an item contains an
      ``AttributeValue`` element of a different type than the one provided in the request, the value
      does not match. For example, ``{"S":"6"}`` does not equal ``{"N":"6"}`` . Also, ``{"N":"6"}``
      does not compare to ``{"NS":["6", "2", "1"]}`` .

      * ``NOT_NULL`` : The attribute exists. ``NOT_NULL`` is supported for all data types, including
      lists and maps.

      .. note::

         This operator tests for the existence of an attribute, not its data type. If the data type
         of attribute "``a`` " is null, and you evaluate it using ``NOT_NULL`` , the result is a
         Boolean ``true`` . This result is because the attribute "``a`` " exists; its data type is
         not relevant to the ``NOT_NULL`` comparison operator.

      * ``NULL`` : The attribute does not exist. ``NULL`` is supported for all data types, including
      lists and maps.

      .. note::

         This operator tests for the nonexistence of an attribute, not its data type. If the data
         type of attribute "``a`` " is null, and you evaluate it using ``NULL`` , the result is a
         Boolean ``false`` . This is because the attribute "``a`` " exists; its data type is not
         relevant to the ``NULL`` comparison operator.

      * ``CONTAINS`` : Checks for a subsequence, or value in a set.  ``AttributeValueList`` can
      contain only one ``AttributeValue`` element of type String, Number, or Binary (not a set
      type). If the target attribute of the comparison is of type String, then the operator checks
      for a substring match. If the target attribute of the comparison is of type Binary, then the
      operator looks for a subsequence of the target that matches the input. If the target attribute
      of the comparison is a set ("``SS`` ", "``NS`` ", or "``BS`` "), then the operator evaluates
      to true if it finds an exact match with any member of the set. CONTAINS is supported for
      lists: When evaluating "``a CONTAINS b`` ", "``a`` " can be a list; however, "``b`` " cannot
      be a set, a map, or a list.

      * ``NOT_CONTAINS`` : Checks for absence of a subsequence, or absence of a value in a set.
      ``AttributeValueList`` can contain only one ``AttributeValue`` element of type String, Number,
      or Binary (not a set type). If the target attribute of the comparison is a String, then the
      operator checks for the absence of a substring match. If the target attribute of the
      comparison is Binary, then the operator checks for the absence of a subsequence of the target
      that matches the input. If the target attribute of the comparison is a set ("``SS`` ", "``NS``
      ", or "``BS`` "), then the operator evaluates to true if it *does not* find an exact match
      with any member of the set. NOT_CONTAINS is supported for lists: When evaluating "``a NOT
      CONTAINS b`` ", "``a`` " can be a list; however, "``b`` " cannot be a set, a map, or a list.

      * ``BEGINS_WITH`` : Checks for a prefix.   ``AttributeValueList`` can contain only one
      ``AttributeValue`` of type String or Binary (not a Number or a set type). The target attribute
      of the comparison must be of type String or Binary (not a Number or a set type).

      * ``IN`` : Checks for matching elements in a list.  ``AttributeValueList`` can contain one or
      more ``AttributeValue`` elements of type String, Number, or Binary. These attributes are
      compared against an existing attribute of an item. If any elements of the input are equal to
      the item attribute, the expression evaluates to true.

      * ``BETWEEN`` : Greater than or equal to the first value, and less than or equal to the second
      value.   ``AttributeValueList`` must contain two ``AttributeValue`` elements of the same type,
      either String, Number, or Binary (not a set type). A target attribute matches if the target
      value is greater than, or equal to, the first element and less than, or equal to, the second
      element. If an item contains an ``AttributeValue`` element of a different type than the one
      provided in the request, the value does not match. For example, ``{"S":"6"}`` does not compare
      to ``{"N":"6"}`` . Also, ``{"N":"6"}`` does not compare to ``{"NS":["6", "2", "1"]}``

    - **AttributeValueList** *(list) --*

      One or more values to evaluate against the supplied attribute. The number of values in the
      list depends on the ``ComparisonOperator`` being used.

      For type Number, value comparisons are numeric.

      String value comparisons for greater than, equals, or less than are based on ASCII character
      code values. For example, ``a`` is greater than ``A`` , and ``a`` is greater than ``B`` . For
      a list of code values, see `http\\://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters
      <http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters>`__ .

      For Binary, DynamoDB treats each byte of the binary data as unsigned when it compares binary
      values.

      For information on specifying data types in JSON, see `JSON Data Format
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataFormat.html>`__ in the
      *Amazon DynamoDB Developer Guide* .

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

        - **S** *(string) --*

          An attribute of type String. For example:

           ``"S": "Hello"``

        - **N** *(string) --*

          An attribute of type Number. For example:

           ``"N": "123.45"``

          Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
          across languages and libraries. However, DynamoDB treats them as number type attributes
          for mathematical operations.

        - **B** *(bytes) --*

          An attribute of type Binary. For example:

           ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

        - **SS** *(list) --*

          An attribute of type String Set. For example:

           ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

          - *(string) --*

        - **NS** *(list) --*

          An attribute of type Number Set. For example:

           ``"NS": ["42.2", "-19", "7.5", "3.14"]``

          Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
          across languages and libraries. However, DynamoDB treats them as number type attributes
          for mathematical operations.

          - *(string) --*

        - **BS** *(list) --*

          An attribute of type Binary Set. For example:

           ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

          - *(bytes) --*

        - **M** *(dict) --*

          An attribute of type Map. For example:

           ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

          - *(string) --*

            - *(dict) --*

              Represents the data for an attribute.

              Each attribute value is described as a name-value pair. The name is the data type, and
              the value is the data itself.

              For more information, see `Data Types
              <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
              in the *Amazon DynamoDB Developer Guide* .

        - **L** *(list) --*

          An attribute of type List. For example:

           ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

          - *(dict) --*

            Represents the data for an attribute.

            Each attribute value is described as a name-value pair. The name is the data type, and
            the value is the data itself.

            For more information, see `Data Types
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
            in the *Amazon DynamoDB Developer Guide* .

        - **NULL** *(boolean) --*

          An attribute of type Null. For example:

           ``"NULL": true``

        - **BOOL** *(boolean) --*

          An attribute of type Boolean. For example:

           ``"BOOL": true``
    """


_TableUpdateItemExpressionAttributeValuesTypeDef = TypedDict(
    "_TableUpdateItemExpressionAttributeValuesTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class TableUpdateItemExpressionAttributeValuesTypeDef(
    _TableUpdateItemExpressionAttributeValuesTypeDef
):
    """
    Type definition for `TableUpdateItem` `ExpressionAttributeValues`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_TableUpdateItemKeyTypeDef = TypedDict(
    "_TableUpdateItemKeyTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class TableUpdateItemKeyTypeDef(_TableUpdateItemKeyTypeDef):
    """
    Type definition for `TableUpdateItem` `Key`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_TableUpdateItemResponseAttributesTypeDef = TypedDict(
    "_TableUpdateItemResponseAttributesTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class TableUpdateItemResponseAttributesTypeDef(_TableUpdateItemResponseAttributesTypeDef):
    """
    Type definition for `TableUpdateItemResponse` `Attributes`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_TableUpdateItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef = TypedDict(
    "_TableUpdateItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef",
    {"ReadCapacityUnits": float, "WriteCapacityUnits": float, "CapacityUnits": float},
    total=False,
)


class TableUpdateItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef(
    _TableUpdateItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef
):
    """
    Type definition for `TableUpdateItemResponseConsumedCapacity` `GlobalSecondaryIndexes`

    Represents the amount of provisioned throughput capacity consumed on a table or an index.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed on a table or an index.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed on a table or an index.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed on a table or an index.
    """


_TableUpdateItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef = TypedDict(
    "_TableUpdateItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef",
    {"ReadCapacityUnits": float, "WriteCapacityUnits": float, "CapacityUnits": float},
    total=False,
)


class TableUpdateItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef(
    _TableUpdateItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef
):
    """
    Type definition for `TableUpdateItemResponseConsumedCapacity` `LocalSecondaryIndexes`

    Represents the amount of provisioned throughput capacity consumed on a table or an index.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed on a table or an index.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed on a table or an index.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed on a table or an index.
    """


_TableUpdateItemResponseConsumedCapacityTableTypeDef = TypedDict(
    "_TableUpdateItemResponseConsumedCapacityTableTypeDef",
    {"ReadCapacityUnits": float, "WriteCapacityUnits": float, "CapacityUnits": float},
    total=False,
)


class TableUpdateItemResponseConsumedCapacityTableTypeDef(
    _TableUpdateItemResponseConsumedCapacityTableTypeDef
):
    """
    Type definition for `TableUpdateItemResponseConsumedCapacity` `Table`

    The amount of throughput consumed on the table affected by the operation.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed on a table or an index.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed on a table or an index.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed on a table or an index.
    """


_TableUpdateItemResponseConsumedCapacityTypeDef = TypedDict(
    "_TableUpdateItemResponseConsumedCapacityTypeDef",
    {
        "TableName": str,
        "CapacityUnits": float,
        "ReadCapacityUnits": float,
        "WriteCapacityUnits": float,
        "Table": TableUpdateItemResponseConsumedCapacityTableTypeDef,
        "LocalSecondaryIndexes": Dict[
            str, TableUpdateItemResponseConsumedCapacityLocalSecondaryIndexesTypeDef
        ],
        "GlobalSecondaryIndexes": Dict[
            str, TableUpdateItemResponseConsumedCapacityGlobalSecondaryIndexesTypeDef
        ],
    },
    total=False,
)


class TableUpdateItemResponseConsumedCapacityTypeDef(
    _TableUpdateItemResponseConsumedCapacityTypeDef
):
    """
    Type definition for `TableUpdateItemResponse` `ConsumedCapacity`

    The capacity units consumed by the ``UpdateItem`` operation. The data returned includes the
    total provisioned throughput consumed, along with statistics for the table and any indexes
    involved in the operation. ``ConsumedCapacity`` is only returned if the
    ``ReturnConsumedCapacity`` parameter was specified. For more information, see `Provisioned
    Throughput
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **TableName** *(string) --*

      The name of the table that was affected by the operation.

    - **CapacityUnits** *(float) --*

      The total number of capacity units consumed by the operation.

    - **ReadCapacityUnits** *(float) --*

      The total number of read capacity units consumed by the operation.

    - **WriteCapacityUnits** *(float) --*

      The total number of write capacity units consumed by the operation.

    - **Table** *(dict) --*

      The amount of throughput consumed on the table affected by the operation.

      - **ReadCapacityUnits** *(float) --*

        The total number of read capacity units consumed on a table or an index.

      - **WriteCapacityUnits** *(float) --*

        The total number of write capacity units consumed on a table or an index.

      - **CapacityUnits** *(float) --*

        The total number of capacity units consumed on a table or an index.

    - **LocalSecondaryIndexes** *(dict) --*

      The amount of throughput consumed on each local index affected by the operation.

      - *(string) --*

        - *(dict) --*

          Represents the amount of provisioned throughput capacity consumed on a table or an index.

          - **ReadCapacityUnits** *(float) --*

            The total number of read capacity units consumed on a table or an index.

          - **WriteCapacityUnits** *(float) --*

            The total number of write capacity units consumed on a table or an index.

          - **CapacityUnits** *(float) --*

            The total number of capacity units consumed on a table or an index.

    - **GlobalSecondaryIndexes** *(dict) --*

      The amount of throughput consumed on each global index affected by the operation.

      - *(string) --*

        - *(dict) --*

          Represents the amount of provisioned throughput capacity consumed on a table or an index.

          - **ReadCapacityUnits** *(float) --*

            The total number of read capacity units consumed on a table or an index.

          - **WriteCapacityUnits** *(float) --*

            The total number of write capacity units consumed on a table or an index.

          - **CapacityUnits** *(float) --*

            The total number of capacity units consumed on a table or an index.
    """


_TableUpdateItemResponseItemCollectionMetricsItemCollectionKeyTypeDef = TypedDict(
    "_TableUpdateItemResponseItemCollectionMetricsItemCollectionKeyTypeDef",
    {
        "S": str,
        "N": str,
        "B": bytes,
        "SS": List[str],
        "NS": List[str],
        "BS": List[bytes],
        "M": Dict[str, Dict],
        "L": List[Dict],
        "NULL": bool,
        "BOOL": bool,
    },
    total=False,
)


class TableUpdateItemResponseItemCollectionMetricsItemCollectionKeyTypeDef(
    _TableUpdateItemResponseItemCollectionMetricsItemCollectionKeyTypeDef
):
    """
    Type definition for `TableUpdateItemResponseItemCollectionMetrics` `ItemCollectionKey`

    Represents the data for an attribute.

    Each attribute value is described as a name-value pair. The name is the data type, and the value
    is the data itself.

    For more information, see `Data Types
    <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
    in the *Amazon DynamoDB Developer Guide* .

    - **S** *(string) --*

      An attribute of type String. For example:

       ``"S": "Hello"``

    - **N** *(string) --*

      An attribute of type Number. For example:

       ``"N": "123.45"``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

    - **B** *(bytes) --*

      An attribute of type Binary. For example:

       ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

    - **SS** *(list) --*

      An attribute of type String Set. For example:

       ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

      - *(string) --*

    - **NS** *(list) --*

      An attribute of type Number Set. For example:

       ``"NS": ["42.2", "-19", "7.5", "3.14"]``

      Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across
      languages and libraries. However, DynamoDB treats them as number type attributes for
      mathematical operations.

      - *(string) --*

    - **BS** *(list) --*

      An attribute of type Binary Set. For example:

       ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

      - *(bytes) --*

    - **M** *(dict) --*

      An attribute of type Map. For example:

       ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

    - **L** *(list) --*

      An attribute of type List. For example:

       ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

      - *(dict) --*

        Represents the data for an attribute.

        Each attribute value is described as a name-value pair. The name is the data type, and the
        value is the data itself.

        For more information, see `Data Types
        <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
        in the *Amazon DynamoDB Developer Guide* .

    - **NULL** *(boolean) --*

      An attribute of type Null. For example:

       ``"NULL": true``

    - **BOOL** *(boolean) --*

      An attribute of type Boolean. For example:

       ``"BOOL": true``
    """


_TableUpdateItemResponseItemCollectionMetricsTypeDef = TypedDict(
    "_TableUpdateItemResponseItemCollectionMetricsTypeDef",
    {
        "ItemCollectionKey": Dict[
            str, TableUpdateItemResponseItemCollectionMetricsItemCollectionKeyTypeDef
        ],
        "SizeEstimateRangeGB": List[float],
    },
    total=False,
)


class TableUpdateItemResponseItemCollectionMetricsTypeDef(
    _TableUpdateItemResponseItemCollectionMetricsTypeDef
):
    """
    Type definition for `TableUpdateItemResponse` `ItemCollectionMetrics`

    Information about item collections, if any, that were affected by the ``UpdateItem`` operation.
    ``ItemCollectionMetrics`` is only returned if the ``ReturnItemCollectionMetrics`` parameter was
    specified. If the table does not have any local secondary indexes, this information is not
    returned in the response.

    Each ``ItemCollectionMetrics`` element consists of:

    * ``ItemCollectionKey`` - The partition key value of the item collection. This is the same as
    the partition key value of the item itself.

    * ``SizeEstimateRangeGB`` - An estimate of item collection size, in gigabytes. This value is a
    two-element array containing a lower bound and an upper bound for the estimate. The estimate
    includes the size of all the items in the table, plus the size of all attributes projected into
    all of the local secondary indexes on that table. Use this estimate to measure whether a local
    secondary index is approaching its size limit. The estimate is subject to change over time;
    therefore, do not rely on the precision or accuracy of the estimate.

    - **ItemCollectionKey** *(dict) --*

      The partition key value of the item collection. This value is the same as the partition key
      value of the item.

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

          - **S** *(string) --*

            An attribute of type String. For example:

             ``"S": "Hello"``

          - **N** *(string) --*

            An attribute of type Number. For example:

             ``"N": "123.45"``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

          - **B** *(bytes) --*

            An attribute of type Binary. For example:

             ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

          - **SS** *(list) --*

            An attribute of type String Set. For example:

             ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

            - *(string) --*

          - **NS** *(list) --*

            An attribute of type Number Set. For example:

             ``"NS": ["42.2", "-19", "7.5", "3.14"]``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

            - *(string) --*

          - **BS** *(list) --*

            An attribute of type Binary Set. For example:

             ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

            - *(bytes) --*

          - **M** *(dict) --*

            An attribute of type Map. For example:

             ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

            - *(string) --*

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

          - **L** *(list) --*

            An attribute of type List. For example:

             ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

            - *(dict) --*

              Represents the data for an attribute.

              Each attribute value is described as a name-value pair. The name is the data type, and
              the value is the data itself.

              For more information, see `Data Types
              <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
              in the *Amazon DynamoDB Developer Guide* .

          - **NULL** *(boolean) --*

            An attribute of type Null. For example:

             ``"NULL": true``

          - **BOOL** *(boolean) --*

            An attribute of type Boolean. For example:

             ``"BOOL": true``

    - **SizeEstimateRangeGB** *(list) --*

      An estimate of item collection size, in gigabytes. This value is a two-element array
      containing a lower bound and an upper bound for the estimate. The estimate includes the size
      of all the items in the table, plus the size of all attributes projected into all of the local
      secondary indexes on that table. Use this estimate to measure whether a local secondary index
      is approaching its size limit.

      The estimate is subject to change over time; therefore, do not rely on the precision or
      accuracy of the estimate.

      - *(float) --*
    """


_TableUpdateItemResponseTypeDef = TypedDict(
    "_TableUpdateItemResponseTypeDef",
    {
        "Attributes": Dict[str, TableUpdateItemResponseAttributesTypeDef],
        "ConsumedCapacity": TableUpdateItemResponseConsumedCapacityTypeDef,
        "ItemCollectionMetrics": TableUpdateItemResponseItemCollectionMetricsTypeDef,
    },
    total=False,
)


class TableUpdateItemResponseTypeDef(_TableUpdateItemResponseTypeDef):
    """
    Type definition for `TableUpdateItem` `Response`

    Represents the output of an ``UpdateItem`` operation.

    - **Attributes** *(dict) --*

      A map of attribute values as they appear before or after the ``UpdateItem`` operation, as
      determined by the ``ReturnValues`` parameter.

      The ``Attributes`` map is only present if ``ReturnValues`` was specified as something other
      than ``NONE`` in the request. Each element represents one attribute.

      - *(string) --*

        - *(dict) --*

          Represents the data for an attribute.

          Each attribute value is described as a name-value pair. The name is the data type, and the
          value is the data itself.

          For more information, see `Data Types
          <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
          in the *Amazon DynamoDB Developer Guide* .

          - **S** *(string) --*

            An attribute of type String. For example:

             ``"S": "Hello"``

          - **N** *(string) --*

            An attribute of type Number. For example:

             ``"N": "123.45"``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

          - **B** *(bytes) --*

            An attribute of type Binary. For example:

             ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

          - **SS** *(list) --*

            An attribute of type String Set. For example:

             ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

            - *(string) --*

          - **NS** *(list) --*

            An attribute of type Number Set. For example:

             ``"NS": ["42.2", "-19", "7.5", "3.14"]``

            Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
            across languages and libraries. However, DynamoDB treats them as number type attributes
            for mathematical operations.

            - *(string) --*

          - **BS** *(list) --*

            An attribute of type Binary Set. For example:

             ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

            - *(bytes) --*

          - **M** *(dict) --*

            An attribute of type Map. For example:

             ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

            - *(string) --*

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

          - **L** *(list) --*

            An attribute of type List. For example:

             ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

            - *(dict) --*

              Represents the data for an attribute.

              Each attribute value is described as a name-value pair. The name is the data type, and
              the value is the data itself.

              For more information, see `Data Types
              <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
              in the *Amazon DynamoDB Developer Guide* .

          - **NULL** *(boolean) --*

            An attribute of type Null. For example:

             ``"NULL": true``

          - **BOOL** *(boolean) --*

            An attribute of type Boolean. For example:

             ``"BOOL": true``

    - **ConsumedCapacity** *(dict) --*

      The capacity units consumed by the ``UpdateItem`` operation. The data returned includes the
      total provisioned throughput consumed, along with statistics for the table and any indexes
      involved in the operation. ``ConsumedCapacity`` is only returned if the
      ``ReturnConsumedCapacity`` parameter was specified. For more information, see `Provisioned
      Throughput
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html>`__
      in the *Amazon DynamoDB Developer Guide* .

      - **TableName** *(string) --*

        The name of the table that was affected by the operation.

      - **CapacityUnits** *(float) --*

        The total number of capacity units consumed by the operation.

      - **ReadCapacityUnits** *(float) --*

        The total number of read capacity units consumed by the operation.

      - **WriteCapacityUnits** *(float) --*

        The total number of write capacity units consumed by the operation.

      - **Table** *(dict) --*

        The amount of throughput consumed on the table affected by the operation.

        - **ReadCapacityUnits** *(float) --*

          The total number of read capacity units consumed on a table or an index.

        - **WriteCapacityUnits** *(float) --*

          The total number of write capacity units consumed on a table or an index.

        - **CapacityUnits** *(float) --*

          The total number of capacity units consumed on a table or an index.

      - **LocalSecondaryIndexes** *(dict) --*

        The amount of throughput consumed on each local index affected by the operation.

        - *(string) --*

          - *(dict) --*

            Represents the amount of provisioned throughput capacity consumed on a table or an
            index.

            - **ReadCapacityUnits** *(float) --*

              The total number of read capacity units consumed on a table or an index.

            - **WriteCapacityUnits** *(float) --*

              The total number of write capacity units consumed on a table or an index.

            - **CapacityUnits** *(float) --*

              The total number of capacity units consumed on a table or an index.

      - **GlobalSecondaryIndexes** *(dict) --*

        The amount of throughput consumed on each global index affected by the operation.

        - *(string) --*

          - *(dict) --*

            Represents the amount of provisioned throughput capacity consumed on a table or an
            index.

            - **ReadCapacityUnits** *(float) --*

              The total number of read capacity units consumed on a table or an index.

            - **WriteCapacityUnits** *(float) --*

              The total number of write capacity units consumed on a table or an index.

            - **CapacityUnits** *(float) --*

              The total number of capacity units consumed on a table or an index.

    - **ItemCollectionMetrics** *(dict) --*

      Information about item collections, if any, that were affected by the ``UpdateItem``
      operation. ``ItemCollectionMetrics`` is only returned if the ``ReturnItemCollectionMetrics``
      parameter was specified. If the table does not have any local secondary indexes, this
      information is not returned in the response.

      Each ``ItemCollectionMetrics`` element consists of:

      * ``ItemCollectionKey`` - The partition key value of the item collection. This is the same as
      the partition key value of the item itself.

      * ``SizeEstimateRangeGB`` - An estimate of item collection size, in gigabytes. This value is a
      two-element array containing a lower bound and an upper bound for the estimate. The estimate
      includes the size of all the items in the table, plus the size of all attributes projected
      into all of the local secondary indexes on that table. Use this estimate to measure whether a
      local secondary index is approaching its size limit. The estimate is subject to change over
      time; therefore, do not rely on the precision or accuracy of the estimate.

      - **ItemCollectionKey** *(dict) --*

        The partition key value of the item collection. This value is the same as the partition key
        value of the item.

        - *(string) --*

          - *(dict) --*

            Represents the data for an attribute.

            Each attribute value is described as a name-value pair. The name is the data type, and
            the value is the data itself.

            For more information, see `Data Types
            <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
            in the *Amazon DynamoDB Developer Guide* .

            - **S** *(string) --*

              An attribute of type String. For example:

               ``"S": "Hello"``

            - **N** *(string) --*

              An attribute of type Number. For example:

               ``"N": "123.45"``

              Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
              across languages and libraries. However, DynamoDB treats them as number type
              attributes for mathematical operations.

            - **B** *(bytes) --*

              An attribute of type Binary. For example:

               ``"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"``

            - **SS** *(list) --*

              An attribute of type String Set. For example:

               ``"SS": ["Giraffe", "Hippo" ,"Zebra"]``

              - *(string) --*

            - **NS** *(list) --*

              An attribute of type Number Set. For example:

               ``"NS": ["42.2", "-19", "7.5", "3.14"]``

              Numbers are sent across the network to DynamoDB as strings, to maximize compatibility
              across languages and libraries. However, DynamoDB treats them as number type
              attributes for mathematical operations.

              - *(string) --*

            - **BS** *(list) --*

              An attribute of type Binary Set. For example:

               ``"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]``

              - *(bytes) --*

            - **M** *(dict) --*

              An attribute of type Map. For example:

               ``"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}``

              - *(string) --*

                - *(dict) --*

                  Represents the data for an attribute.

                  Each attribute value is described as a name-value pair. The name is the data type,
                  and the value is the data itself.

                  For more information, see `Data Types
                  <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                  in the *Amazon DynamoDB Developer Guide* .

            - **L** *(list) --*

              An attribute of type List. For example:

               ``"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]``

              - *(dict) --*

                Represents the data for an attribute.

                Each attribute value is described as a name-value pair. The name is the data type,
                and the value is the data itself.

                For more information, see `Data Types
                <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes>`__
                in the *Amazon DynamoDB Developer Guide* .

            - **NULL** *(boolean) --*

              An attribute of type Null. For example:

               ``"NULL": true``

            - **BOOL** *(boolean) --*

              An attribute of type Boolean. For example:

               ``"BOOL": true``

      - **SizeEstimateRangeGB** *(list) --*

        An estimate of item collection size, in gigabytes. This value is a two-element array
        containing a lower bound and an upper bound for the estimate. The estimate includes the size
        of all the items in the table, plus the size of all attributes projected into all of the
        local secondary indexes on that table. Use this estimate to measure whether a local
        secondary index is approaching its size limit.

        The estimate is subject to change over time; therefore, do not rely on the precision or
        accuracy of the estimate.

        - *(float) --*
    """


_TableUpdateProvisionedThroughputTypeDef = TypedDict(
    "_TableUpdateProvisionedThroughputTypeDef",
    {"ReadCapacityUnits": int, "WriteCapacityUnits": int},
)


class TableUpdateProvisionedThroughputTypeDef(_TableUpdateProvisionedThroughputTypeDef):
    """
    Type definition for `TableUpdate` `ProvisionedThroughput`

    The new provisioned throughput settings for the specified table or index.

    - **ReadCapacityUnits** *(integer) --* **[REQUIRED]**

      The maximum number of strongly consistent reads consumed per second before DynamoDB returns a
      ``ThrottlingException`` . For more information, see `Specifying Read and Write Requirements
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
      in the *Amazon DynamoDB Developer Guide* .

      If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.

    - **WriteCapacityUnits** *(integer) --* **[REQUIRED]**

      The maximum number of writes consumed per second before DynamoDB returns a
      ``ThrottlingException`` . For more information, see `Specifying Read and Write Requirements
      <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput>`__
      in the *Amazon DynamoDB Developer Guide* .

      If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.
    """


_TableUpdateReplicaUpdatesCreateGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef = TypedDict(
    "_TableUpdateReplicaUpdatesCreateGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef",
    {"ReadCapacityUnits": int},
    total=False,
)


class TableUpdateReplicaUpdatesCreateGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef(
    _TableUpdateReplicaUpdatesCreateGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef
):
    """
    Type definition for `TableUpdateReplicaUpdatesCreateGlobalSecondaryIndexes`
    `ProvisionedThroughputOverride`

    Replica table GSI-specific provisioned throughput. If not specified, uses the source table GSI's
    read capacity settings.

    - **ReadCapacityUnits** *(integer) --*

      Replica-specific read capacity units. If not specified, uses the source table's read capacity
      settings.
    """


_RequiredTableUpdateReplicaUpdatesCreateGlobalSecondaryIndexesTypeDef = TypedDict(
    "_RequiredTableUpdateReplicaUpdatesCreateGlobalSecondaryIndexesTypeDef", {"IndexName": str}
)
_OptionalTableUpdateReplicaUpdatesCreateGlobalSecondaryIndexesTypeDef = TypedDict(
    "_OptionalTableUpdateReplicaUpdatesCreateGlobalSecondaryIndexesTypeDef",
    {
        "ProvisionedThroughputOverride": TableUpdateReplicaUpdatesCreateGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef
    },
    total=False,
)


class TableUpdateReplicaUpdatesCreateGlobalSecondaryIndexesTypeDef(
    _RequiredTableUpdateReplicaUpdatesCreateGlobalSecondaryIndexesTypeDef,
    _OptionalTableUpdateReplicaUpdatesCreateGlobalSecondaryIndexesTypeDef,
):
    """
    Type definition for `TableUpdateReplicaUpdatesCreate` `GlobalSecondaryIndexes`

    Represents the properties of a replica global secondary index.

    - **IndexName** *(string) --* **[REQUIRED]**

      The name of the global secondary index.

    - **ProvisionedThroughputOverride** *(dict) --*

      Replica table GSI-specific provisioned throughput. If not specified, uses the source table
      GSI's read capacity settings.

      - **ReadCapacityUnits** *(integer) --*

        Replica-specific read capacity units. If not specified, uses the source table's read
        capacity settings.
    """


_TableUpdateReplicaUpdatesCreateProvisionedThroughputOverrideTypeDef = TypedDict(
    "_TableUpdateReplicaUpdatesCreateProvisionedThroughputOverrideTypeDef",
    {"ReadCapacityUnits": int},
    total=False,
)


class TableUpdateReplicaUpdatesCreateProvisionedThroughputOverrideTypeDef(
    _TableUpdateReplicaUpdatesCreateProvisionedThroughputOverrideTypeDef
):
    """
    Type definition for `TableUpdateReplicaUpdatesCreate` `ProvisionedThroughputOverride`

    Replica-specific provisioned throughput. If not specified, uses the source table's provisioned
    throughput settings.

    - **ReadCapacityUnits** *(integer) --*

      Replica-specific read capacity units. If not specified, uses the source table's read capacity
      settings.
    """


_RequiredTableUpdateReplicaUpdatesCreateTypeDef = TypedDict(
    "_RequiredTableUpdateReplicaUpdatesCreateTypeDef", {"RegionName": str}
)
_OptionalTableUpdateReplicaUpdatesCreateTypeDef = TypedDict(
    "_OptionalTableUpdateReplicaUpdatesCreateTypeDef",
    {
        "KMSMasterKeyId": str,
        "ProvisionedThroughputOverride": TableUpdateReplicaUpdatesCreateProvisionedThroughputOverrideTypeDef,
        "GlobalSecondaryIndexes": List[
            TableUpdateReplicaUpdatesCreateGlobalSecondaryIndexesTypeDef
        ],
    },
    total=False,
)


class TableUpdateReplicaUpdatesCreateTypeDef(
    _RequiredTableUpdateReplicaUpdatesCreateTypeDef, _OptionalTableUpdateReplicaUpdatesCreateTypeDef
):
    """
    Type definition for `TableUpdateReplicaUpdates` `Create`

    The parameters required for creating a replica for the table.

    - **RegionName** *(string) --* **[REQUIRED]**

      The Region where the new replica will be created.

    - **KMSMasterKeyId** *(string) --*

      The AWS KMS customer master key (CMK) that should be used for AWS KMS encryption in the new
      replica. To specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias
      ARN. Note that you should only provide this parameter if the key is different from the default
      DynamoDB KMS master key alias/aws/dynamodb.

    - **ProvisionedThroughputOverride** *(dict) --*

      Replica-specific provisioned throughput. If not specified, uses the source table's provisioned
      throughput settings.

      - **ReadCapacityUnits** *(integer) --*

        Replica-specific read capacity units. If not specified, uses the source table's read
        capacity settings.

    - **GlobalSecondaryIndexes** *(list) --*

      Replica-specific global secondary index settings.

      - *(dict) --*

        Represents the properties of a replica global secondary index.

        - **IndexName** *(string) --* **[REQUIRED]**

          The name of the global secondary index.

        - **ProvisionedThroughputOverride** *(dict) --*

          Replica table GSI-specific provisioned throughput. If not specified, uses the source table
          GSI's read capacity settings.

          - **ReadCapacityUnits** *(integer) --*

            Replica-specific read capacity units. If not specified, uses the source table's read
            capacity settings.
    """


_TableUpdateReplicaUpdatesDeleteTypeDef = TypedDict(
    "_TableUpdateReplicaUpdatesDeleteTypeDef", {"RegionName": str}
)


class TableUpdateReplicaUpdatesDeleteTypeDef(_TableUpdateReplicaUpdatesDeleteTypeDef):
    """
    Type definition for `TableUpdateReplicaUpdates` `Delete`

    The parameters required for deleting a replica for the table.

    - **RegionName** *(string) --* **[REQUIRED]**

      The Region where the replica exists.
    """


_TableUpdateReplicaUpdatesUpdateGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef = TypedDict(
    "_TableUpdateReplicaUpdatesUpdateGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef",
    {"ReadCapacityUnits": int},
    total=False,
)


class TableUpdateReplicaUpdatesUpdateGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef(
    _TableUpdateReplicaUpdatesUpdateGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef
):
    """
    Type definition for `TableUpdateReplicaUpdatesUpdateGlobalSecondaryIndexes`
    `ProvisionedThroughputOverride`

    Replica table GSI-specific provisioned throughput. If not specified, uses the source table GSI's
    read capacity settings.

    - **ReadCapacityUnits** *(integer) --*

      Replica-specific read capacity units. If not specified, uses the source table's read capacity
      settings.
    """


_RequiredTableUpdateReplicaUpdatesUpdateGlobalSecondaryIndexesTypeDef = TypedDict(
    "_RequiredTableUpdateReplicaUpdatesUpdateGlobalSecondaryIndexesTypeDef", {"IndexName": str}
)
_OptionalTableUpdateReplicaUpdatesUpdateGlobalSecondaryIndexesTypeDef = TypedDict(
    "_OptionalTableUpdateReplicaUpdatesUpdateGlobalSecondaryIndexesTypeDef",
    {
        "ProvisionedThroughputOverride": TableUpdateReplicaUpdatesUpdateGlobalSecondaryIndexesProvisionedThroughputOverrideTypeDef
    },
    total=False,
)


class TableUpdateReplicaUpdatesUpdateGlobalSecondaryIndexesTypeDef(
    _RequiredTableUpdateReplicaUpdatesUpdateGlobalSecondaryIndexesTypeDef,
    _OptionalTableUpdateReplicaUpdatesUpdateGlobalSecondaryIndexesTypeDef,
):
    """
    Type definition for `TableUpdateReplicaUpdatesUpdate` `GlobalSecondaryIndexes`

    Represents the properties of a replica global secondary index.

    - **IndexName** *(string) --* **[REQUIRED]**

      The name of the global secondary index.

    - **ProvisionedThroughputOverride** *(dict) --*

      Replica table GSI-specific provisioned throughput. If not specified, uses the source table
      GSI's read capacity settings.

      - **ReadCapacityUnits** *(integer) --*

        Replica-specific read capacity units. If not specified, uses the source table's read
        capacity settings.
    """


_TableUpdateReplicaUpdatesUpdateProvisionedThroughputOverrideTypeDef = TypedDict(
    "_TableUpdateReplicaUpdatesUpdateProvisionedThroughputOverrideTypeDef",
    {"ReadCapacityUnits": int},
    total=False,
)


class TableUpdateReplicaUpdatesUpdateProvisionedThroughputOverrideTypeDef(
    _TableUpdateReplicaUpdatesUpdateProvisionedThroughputOverrideTypeDef
):
    """
    Type definition for `TableUpdateReplicaUpdatesUpdate` `ProvisionedThroughputOverride`

    Replica-specific provisioned throughput. If not specified, uses the source table's provisioned
    throughput settings.

    - **ReadCapacityUnits** *(integer) --*

      Replica-specific read capacity units. If not specified, uses the source table's read capacity
      settings.
    """


_RequiredTableUpdateReplicaUpdatesUpdateTypeDef = TypedDict(
    "_RequiredTableUpdateReplicaUpdatesUpdateTypeDef", {"RegionName": str}
)
_OptionalTableUpdateReplicaUpdatesUpdateTypeDef = TypedDict(
    "_OptionalTableUpdateReplicaUpdatesUpdateTypeDef",
    {
        "KMSMasterKeyId": str,
        "ProvisionedThroughputOverride": TableUpdateReplicaUpdatesUpdateProvisionedThroughputOverrideTypeDef,
        "GlobalSecondaryIndexes": List[
            TableUpdateReplicaUpdatesUpdateGlobalSecondaryIndexesTypeDef
        ],
    },
    total=False,
)


class TableUpdateReplicaUpdatesUpdateTypeDef(
    _RequiredTableUpdateReplicaUpdatesUpdateTypeDef, _OptionalTableUpdateReplicaUpdatesUpdateTypeDef
):
    """
    Type definition for `TableUpdateReplicaUpdates` `Update`

    The parameters required for updating a replica for the table.

    - **RegionName** *(string) --* **[REQUIRED]**

      The Region where the replica exists.

    - **KMSMasterKeyId** *(string) --*

      The AWS KMS customer master key (CMK) of the replica that should be used for AWS KMS
      encryption. To specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias
      ARN. Note that you should only provide this parameter if the key is different from the default
      DynamoDB KMS master key alias/aws/dynamodb.

    - **ProvisionedThroughputOverride** *(dict) --*

      Replica-specific provisioned throughput. If not specified, uses the source table's provisioned
      throughput settings.

      - **ReadCapacityUnits** *(integer) --*

        Replica-specific read capacity units. If not specified, uses the source table's read
        capacity settings.

    - **GlobalSecondaryIndexes** *(list) --*

      Replica-specific global secondary index settings.

      - *(dict) --*

        Represents the properties of a replica global secondary index.

        - **IndexName** *(string) --* **[REQUIRED]**

          The name of the global secondary index.

        - **ProvisionedThroughputOverride** *(dict) --*

          Replica table GSI-specific provisioned throughput. If not specified, uses the source table
          GSI's read capacity settings.

          - **ReadCapacityUnits** *(integer) --*

            Replica-specific read capacity units. If not specified, uses the source table's read
            capacity settings.
    """


_TableUpdateReplicaUpdatesTypeDef = TypedDict(
    "_TableUpdateReplicaUpdatesTypeDef",
    {
        "Create": TableUpdateReplicaUpdatesCreateTypeDef,
        "Update": TableUpdateReplicaUpdatesUpdateTypeDef,
        "Delete": TableUpdateReplicaUpdatesDeleteTypeDef,
    },
    total=False,
)


class TableUpdateReplicaUpdatesTypeDef(_TableUpdateReplicaUpdatesTypeDef):
    """
    Type definition for `TableUpdate` `ReplicaUpdates`

    Represents one of the following:

    * A new replica to be added to an existing regional table or global table. This request invokes
    the ``CreateTableReplica`` action in the destination Region.

    * New parameters for an existing replica. This request invokes the ``UpdateTable`` action in the
    destination Region.

    * An existing replica to be deleted. The request invokes the ``DeleteTableReplica`` action in
    the destination Region, deleting the replica and all if its items in the destination Region.

    - **Create** *(dict) --*

      The parameters required for creating a replica for the table.

      - **RegionName** *(string) --* **[REQUIRED]**

        The Region where the new replica will be created.

      - **KMSMasterKeyId** *(string) --*

        The AWS KMS customer master key (CMK) that should be used for AWS KMS encryption in the new
        replica. To specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias
        ARN. Note that you should only provide this parameter if the key is different from the
        default DynamoDB KMS master key alias/aws/dynamodb.

      - **ProvisionedThroughputOverride** *(dict) --*

        Replica-specific provisioned throughput. If not specified, uses the source table's
        provisioned throughput settings.

        - **ReadCapacityUnits** *(integer) --*

          Replica-specific read capacity units. If not specified, uses the source table's read
          capacity settings.

      - **GlobalSecondaryIndexes** *(list) --*

        Replica-specific global secondary index settings.

        - *(dict) --*

          Represents the properties of a replica global secondary index.

          - **IndexName** *(string) --* **[REQUIRED]**

            The name of the global secondary index.

          - **ProvisionedThroughputOverride** *(dict) --*

            Replica table GSI-specific provisioned throughput. If not specified, uses the source
            table GSI's read capacity settings.

            - **ReadCapacityUnits** *(integer) --*

              Replica-specific read capacity units. If not specified, uses the source table's read
              capacity settings.

    - **Update** *(dict) --*

      The parameters required for updating a replica for the table.

      - **RegionName** *(string) --* **[REQUIRED]**

        The Region where the replica exists.

      - **KMSMasterKeyId** *(string) --*

        The AWS KMS customer master key (CMK) of the replica that should be used for AWS KMS
        encryption. To specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or
        alias ARN. Note that you should only provide this parameter if the key is different from the
        default DynamoDB KMS master key alias/aws/dynamodb.

      - **ProvisionedThroughputOverride** *(dict) --*

        Replica-specific provisioned throughput. If not specified, uses the source table's
        provisioned throughput settings.

        - **ReadCapacityUnits** *(integer) --*

          Replica-specific read capacity units. If not specified, uses the source table's read
          capacity settings.

      - **GlobalSecondaryIndexes** *(list) --*

        Replica-specific global secondary index settings.

        - *(dict) --*

          Represents the properties of a replica global secondary index.

          - **IndexName** *(string) --* **[REQUIRED]**

            The name of the global secondary index.

          - **ProvisionedThroughputOverride** *(dict) --*

            Replica table GSI-specific provisioned throughput. If not specified, uses the source
            table GSI's read capacity settings.

            - **ReadCapacityUnits** *(integer) --*

              Replica-specific read capacity units. If not specified, uses the source table's read
              capacity settings.

    - **Delete** *(dict) --*

      The parameters required for deleting a replica for the table.

      - **RegionName** *(string) --* **[REQUIRED]**

        The Region where the replica exists.
    """


_TableUpdateSSESpecificationTypeDef = TypedDict(
    "_TableUpdateSSESpecificationTypeDef",
    {"Enabled": bool, "SSEType": str, "KMSMasterKeyId": str},
    total=False,
)


class TableUpdateSSESpecificationTypeDef(_TableUpdateSSESpecificationTypeDef):
    """
    Type definition for `TableUpdate` `SSESpecification`

    The new server-side encryption settings for the specified table.

    - **Enabled** *(boolean) --*

      Indicates whether server-side encryption is done using an AWS managed CMK or an AWS owned CMK.
      If enabled (true), server-side encryption type is set to ``KMS`` and an AWS managed CMK is
      used (AWS KMS charges apply). If disabled (false) or not specified, server-side encryption is
      set to AWS owned CMK.

    - **SSEType** *(string) --*

      Server-side encryption type. The only supported value is:

      * ``KMS`` - Server-side encryption that uses AWS Key Management Service. The key is stored in
      your account and is managed by AWS KMS (AWS KMS charges apply).

    - **KMSMasterKeyId** *(string) --*

      The AWS KMS customer master key (CMK) that should be used for the AWS KMS encryption. To
      specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. Note that
      you should only provide this parameter if the key is different from the default DynamoDB
      customer master key alias/aws/dynamodb.
    """


_RequiredTableUpdateStreamSpecificationTypeDef = TypedDict(
    "_RequiredTableUpdateStreamSpecificationTypeDef", {"StreamEnabled": bool}
)
_OptionalTableUpdateStreamSpecificationTypeDef = TypedDict(
    "_OptionalTableUpdateStreamSpecificationTypeDef", {"StreamViewType": str}, total=False
)


class TableUpdateStreamSpecificationTypeDef(
    _RequiredTableUpdateStreamSpecificationTypeDef, _OptionalTableUpdateStreamSpecificationTypeDef
):
    """
    Type definition for `TableUpdate` `StreamSpecification`

    Represents the DynamoDB Streams configuration for the table.

    .. note::

      You receive a ``ResourceInUseException`` if you try to enable a stream on a table that already
      has a stream, or if you try to disable a stream on a table that doesn't have a stream.

    - **StreamEnabled** *(boolean) --* **[REQUIRED]**

      Indicates whether DynamoDB Streams is enabled (true) or disabled (false) on the table.

    - **StreamViewType** *(string) --*

      When an item in the table is modified, ``StreamViewType`` determines what information is
      written to the stream for this table. Valid values for ``StreamViewType`` are:

      * ``KEYS_ONLY`` - Only the key attributes of the modified item are written to the stream.

      * ``NEW_IMAGE`` - The entire item, as it appears after it was modified, is written to the
      stream.

      * ``OLD_IMAGE`` - The entire item, as it appeared before it was modified, is written to the
      stream.

      * ``NEW_AND_OLD_IMAGES`` - Both the new and the old item images of the item are written to the
      stream.
    """
