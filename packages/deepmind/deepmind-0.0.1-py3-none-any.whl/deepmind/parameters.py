import numpy as np
import platform


'''
Detect operating system and assign proper address of cloud location (google drive, one drive, or dropbox)
'''
if platform.system() == 'Windows':
    cloud_location = 'D:/OneDrive/UCF/projects/scaffold_2_ml/'
elif platform.system() == 'Linux':
    cloud_location = '/home/amir/Dropbox/'
else:
    cloud_location = ''
    print('SEMPY Warning: Platform is not supposted...')

main_dir = cloud_location + 'scaffoldpy_v_1/'
cfd_content = main_dir + 'cfd_contents/'
output_dir = main_dir + 'output/'
files_dir = main_dir + 'files/'
cfd_content_file_sample = cfd_content + 'contents_1_freezing.pkl'

measurements_file = files_dir + 'measurements.xlsx'
dp_file = files_dir + 'dps.csv'


########################################################################################################################
#   CFD parameters
########################################################################################################################
#   m, n numbers to combine notmalized temperature (T) array to normalized ice fraction (I.F.) array as.
#   fusion = m * T + n * I.F.
m, n = 40, 40

########################################################################################################################
#   General parameters
########################################################################################################################
sample_data = np.array([[1, 2, 4, 5],
                        [0, 4, 7, 9],
                        [1, 2, 3, 4],
                        [1, 9, 6, 4],
                        [0, 3, 4, 2],
                        [0, 2, 5, 6],
                        [1, 2, 2, 3],
                        [1, 2, 9, 0],
                        [0, 7, 4, 8]])
########################################################################################################################
#   Autoencoder parameters
########################################################################################################################
#   Training percentage of input data
train_percent_autoencoder = 80

#   Address to save weights file
weights_file_address = output_dir + 'training_weights/'

latent_dim = 22

encoder_layers = [6, 10, 22] # the last one is the latent dimension (compressed dimension)
decoder_layers = [29, 15, 15]
#   Lambda coefficnet of l2 regulizor of the keras
lam=.001
#   learning rate lr
lr = 0.02
#   Epoch number
epoch = 750
#   Batch number
batch = 2000
#   Optimizer model ('SGD' stochastic gradient decent, 'adam' ...)
optimizer_model = 'adam'
#  early stopping
early_stopping = True
#   Show convergence output while running
verbose = False
#   Overwrite training weights
overwrite = True
#   Number of CPU used for training
cpu_num = 1

normalize = True

#   fusion [temp, ice]
fusion = [.5, .5]

########################################################################################################################
#   svm Classifier
########################################################################################################################
gamma = 0.1
c = 1.05
svm_new_input = np.array([[7, 4, 8], [3, 4, 2]])
#   Training percentage of input data
train_percent_svm = 80

########################################################################################################################
#   Genetic Algorithm
########################################################################################################################
#   best parameters file generated by genetic algorithm
params_file = files_dir + 'best_params_for_temperature'

acceptable_error = 30
#  best parameters for temperature
# ([17, 33, 36], [23, 3], 0.07743025996128, 0.08037125490973188, 80.0)



########################################################################################################################
#   Experiment
########################################################################################################################
#   Initialize variables
dp, r, z, r_n, z_n, index = [4, 0, 5, 0.1, 0.1, 10]

elements = [396, 389, 27, 17, 345, 363, 126, 114, 533, 468, 440, 672, 864, 760, 750, 117, 910, 918, 1182, 101, 297, 287,
            322, 315, 829, 340, 361, 859, 1276, 201, 1093, 354, 1494, 1364, 334, 77, 967, 392, 1667, 1448, 158, 71, 440,
            163, 901, 1190, 919, 1158, 1593, 240, 1796, 13, 1430, 2136, 1168, 1881, 1658, 1361, 2650, 2359, 1312, 1288,
            750, 769, 2070, 2087, 1818, 1498, 18, 115, 1566, 1671, 979, 78, 453, 1226, 2174, 3526, 3876, 2482]

