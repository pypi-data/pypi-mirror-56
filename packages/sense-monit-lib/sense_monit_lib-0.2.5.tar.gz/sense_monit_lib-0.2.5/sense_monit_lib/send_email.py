#!/usr/bin/env python# -*- coding: utf-8 -*-from .models import *import datetimeimport sense_core as sdfrom . import email_base, utilsclass MonitEmialSender(object):		def _send_err_email(self, module, title,  subject, receiver_email):		email_list = []		if receiver_email:			if type(receiver_email) == list:				email_list = receiver_email			elif type(receiver_email) == str:				email_list = [receiver_email]		else:			return None		send_res = self._send_email(module, title, subject, email_list)		if not send_res or send_res == '':			sd.log_info('[*] Module ' + module + ' errors email has send failed.')	def _send_email(self, module, title, subject, email_list=None):		_now = datetime.datetime.now()		msg_res = self._send_email_detail(module, email_list, subject, title)		return msg_res		def _get_last_send_time(self, module_name):		email_send_log = EmailSendLog()		session = email_send_log.get_session()		email_send = session.query(EmailSendLog).filter(EmailSendLog.module == module_name).order_by("time").all()		if email_send:			last_time = email_send[-1].time		else:			last_time = datetime.datetime.strptime("2019-01-01 00:00:00", "%Y-%m-%d %H:%M:%S")		email_send_log.close_session(session)		return last_time		def _check_send_result(self, send_res):		suc_email, fail_email = [], []		if send_res['code'] == 'OK':			suc_email = send_res['addr']		elif send_res['code'] == 'Failed':			suc_email = send_res['suc_list']			fail_email = send_res['failed_list']		return suc_email, fail_email		def _send_email_detail(self, module, email_list, subject, title):		if not email_list or len(email_list) == 0:			sd.log_info('The receiver email is empty')			return {}		_res = email_base.send_email(module, email_list, subject, title)		res = self._is_mail_failed(_res)		if res:			_res = utils.build_dic(code='Failed', flag='email', failed_list=res)		else:			_res = utils.build_dic(code='OK', flag='email', addr=email_list)			sd.log_info('email send successful!!!')		return _res	def _is_mail_failed(self, res):		if not isinstance(res, dict):			return []		if len(res) == 0:			return False		return list(res.keys())