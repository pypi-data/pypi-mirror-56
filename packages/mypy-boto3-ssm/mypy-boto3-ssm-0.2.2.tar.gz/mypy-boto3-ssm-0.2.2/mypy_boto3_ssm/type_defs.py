"Main interface for ssm type defs"
from __future__ import annotations

from datetime import datetime
from typing import Any, Dict, List
from typing_extensions import TypedDict


__all__ = (
    "ClientAddTagsToResourceTagsTypeDef",
    "ClientCancelMaintenanceWindowExecutionResponseTypeDef",
    "ClientCreateActivationResponseTypeDef",
    "ClientCreateActivationTagsTypeDef",
    "ClientCreateAssociationBatchEntriesOutputLocationS3LocationTypeDef",
    "ClientCreateAssociationBatchEntriesOutputLocationTypeDef",
    "ClientCreateAssociationBatchEntriesTargetsTypeDef",
    "ClientCreateAssociationBatchEntriesTypeDef",
    "ClientCreateAssociationBatchResponseFailedEntryOutputLocationS3LocationTypeDef",
    "ClientCreateAssociationBatchResponseFailedEntryOutputLocationTypeDef",
    "ClientCreateAssociationBatchResponseFailedEntryTargetsTypeDef",
    "ClientCreateAssociationBatchResponseFailedEntryTypeDef",
    "ClientCreateAssociationBatchResponseFailedTypeDef",
    "ClientCreateAssociationBatchResponseSuccessfulOutputLocationS3LocationTypeDef",
    "ClientCreateAssociationBatchResponseSuccessfulOutputLocationTypeDef",
    "ClientCreateAssociationBatchResponseSuccessfulOverviewTypeDef",
    "ClientCreateAssociationBatchResponseSuccessfulStatusTypeDef",
    "ClientCreateAssociationBatchResponseSuccessfulTargetsTypeDef",
    "ClientCreateAssociationBatchResponseSuccessfulTypeDef",
    "ClientCreateAssociationBatchResponseTypeDef",
    "ClientCreateAssociationOutputLocationS3LocationTypeDef",
    "ClientCreateAssociationOutputLocationTypeDef",
    "ClientCreateAssociationResponseAssociationDescriptionOutputLocationS3LocationTypeDef",
    "ClientCreateAssociationResponseAssociationDescriptionOutputLocationTypeDef",
    "ClientCreateAssociationResponseAssociationDescriptionOverviewTypeDef",
    "ClientCreateAssociationResponseAssociationDescriptionStatusTypeDef",
    "ClientCreateAssociationResponseAssociationDescriptionTargetsTypeDef",
    "ClientCreateAssociationResponseAssociationDescriptionTypeDef",
    "ClientCreateAssociationResponseTypeDef",
    "ClientCreateAssociationTargetsTypeDef",
    "ClientCreateDocumentAttachmentsTypeDef",
    "ClientCreateDocumentResponseDocumentDescriptionAttachmentsInformationTypeDef",
    "ClientCreateDocumentResponseDocumentDescriptionParametersTypeDef",
    "ClientCreateDocumentResponseDocumentDescriptionTagsTypeDef",
    "ClientCreateDocumentResponseDocumentDescriptionTypeDef",
    "ClientCreateDocumentResponseTypeDef",
    "ClientCreateDocumentTagsTypeDef",
    "ClientCreateMaintenanceWindowResponseTypeDef",
    "ClientCreateMaintenanceWindowTagsTypeDef",
    "ClientCreateOpsItemNotificationsTypeDef",
    "ClientCreateOpsItemOperationalDataTypeDef",
    "ClientCreateOpsItemRelatedOpsItemsTypeDef",
    "ClientCreateOpsItemResponseTypeDef",
    "ClientCreateOpsItemTagsTypeDef",
    "ClientCreatePatchBaselineApprovalRulesPatchRulesPatchFilterGroupPatchFiltersTypeDef",
    "ClientCreatePatchBaselineApprovalRulesPatchRulesPatchFilterGroupTypeDef",
    "ClientCreatePatchBaselineApprovalRulesPatchRulesTypeDef",
    "ClientCreatePatchBaselineApprovalRulesTypeDef",
    "ClientCreatePatchBaselineGlobalFiltersPatchFiltersTypeDef",
    "ClientCreatePatchBaselineGlobalFiltersTypeDef",
    "ClientCreatePatchBaselineResponseTypeDef",
    "ClientCreatePatchBaselineSourcesTypeDef",
    "ClientCreatePatchBaselineTagsTypeDef",
    "ClientCreateResourceDataSyncS3DestinationTypeDef",
    "ClientDeleteInventoryResponseDeletionSummarySummaryItemsTypeDef",
    "ClientDeleteInventoryResponseDeletionSummaryTypeDef",
    "ClientDeleteInventoryResponseTypeDef",
    "ClientDeleteMaintenanceWindowResponseTypeDef",
    "ClientDeleteParametersResponseTypeDef",
    "ClientDeletePatchBaselineResponseTypeDef",
    "ClientDeregisterPatchBaselineForPatchGroupResponseTypeDef",
    "ClientDeregisterTargetFromMaintenanceWindowResponseTypeDef",
    "ClientDeregisterTaskFromMaintenanceWindowResponseTypeDef",
    "ClientDescribeActivationsFiltersTypeDef",
    "ClientDescribeActivationsResponseActivationListTagsTypeDef",
    "ClientDescribeActivationsResponseActivationListTypeDef",
    "ClientDescribeActivationsResponseTypeDef",
    "ClientDescribeAssociationExecutionTargetsFiltersTypeDef",
    "ClientDescribeAssociationExecutionTargetsResponseAssociationExecutionTargetsOutputSourceTypeDef",
    "ClientDescribeAssociationExecutionTargetsResponseAssociationExecutionTargetsTypeDef",
    "ClientDescribeAssociationExecutionTargetsResponseTypeDef",
    "ClientDescribeAssociationExecutionsFiltersTypeDef",
    "ClientDescribeAssociationExecutionsResponseAssociationExecutionsTypeDef",
    "ClientDescribeAssociationExecutionsResponseTypeDef",
    "ClientDescribeAssociationResponseAssociationDescriptionOutputLocationS3LocationTypeDef",
    "ClientDescribeAssociationResponseAssociationDescriptionOutputLocationTypeDef",
    "ClientDescribeAssociationResponseAssociationDescriptionOverviewTypeDef",
    "ClientDescribeAssociationResponseAssociationDescriptionStatusTypeDef",
    "ClientDescribeAssociationResponseAssociationDescriptionTargetsTypeDef",
    "ClientDescribeAssociationResponseAssociationDescriptionTypeDef",
    "ClientDescribeAssociationResponseTypeDef",
    "ClientDescribeAutomationExecutionsFiltersTypeDef",
    "ClientDescribeAutomationExecutionsResponseAutomationExecutionMetadataListResolvedTargetsTypeDef",
    "ClientDescribeAutomationExecutionsResponseAutomationExecutionMetadataListTargetsTypeDef",
    "ClientDescribeAutomationExecutionsResponseAutomationExecutionMetadataListTypeDef",
    "ClientDescribeAutomationExecutionsResponseTypeDef",
    "ClientDescribeAutomationStepExecutionsFiltersTypeDef",
    "ClientDescribeAutomationStepExecutionsResponseStepExecutionsFailureDetailsTypeDef",
    "ClientDescribeAutomationStepExecutionsResponseStepExecutionsTargetLocationTypeDef",
    "ClientDescribeAutomationStepExecutionsResponseStepExecutionsTargetsTypeDef",
    "ClientDescribeAutomationStepExecutionsResponseStepExecutionsTypeDef",
    "ClientDescribeAutomationStepExecutionsResponseTypeDef",
    "ClientDescribeAvailablePatchesFiltersTypeDef",
    "ClientDescribeAvailablePatchesResponsePatchesTypeDef",
    "ClientDescribeAvailablePatchesResponseTypeDef",
    "ClientDescribeDocumentPermissionResponseTypeDef",
    "ClientDescribeDocumentResponseDocumentAttachmentsInformationTypeDef",
    "ClientDescribeDocumentResponseDocumentParametersTypeDef",
    "ClientDescribeDocumentResponseDocumentTagsTypeDef",
    "ClientDescribeDocumentResponseDocumentTypeDef",
    "ClientDescribeDocumentResponseTypeDef",
    "ClientDescribeEffectiveInstanceAssociationsResponseAssociationsTypeDef",
    "ClientDescribeEffectiveInstanceAssociationsResponseTypeDef",
    "ClientDescribeEffectivePatchesForPatchBaselineResponseEffectivePatchesPatchStatusTypeDef",
    "ClientDescribeEffectivePatchesForPatchBaselineResponseEffectivePatchesPatchTypeDef",
    "ClientDescribeEffectivePatchesForPatchBaselineResponseEffectivePatchesTypeDef",
    "ClientDescribeEffectivePatchesForPatchBaselineResponseTypeDef",
    "ClientDescribeInstanceAssociationsStatusResponseInstanceAssociationStatusInfosOutputUrlS3OutputUrlTypeDef",
    "ClientDescribeInstanceAssociationsStatusResponseInstanceAssociationStatusInfosOutputUrlTypeDef",
    "ClientDescribeInstanceAssociationsStatusResponseInstanceAssociationStatusInfosTypeDef",
    "ClientDescribeInstanceAssociationsStatusResponseTypeDef",
    "ClientDescribeInstanceInformationFiltersTypeDef",
    "ClientDescribeInstanceInformationInstanceInformationFilterListTypeDef",
    "ClientDescribeInstanceInformationResponseInstanceInformationListAssociationOverviewTypeDef",
    "ClientDescribeInstanceInformationResponseInstanceInformationListTypeDef",
    "ClientDescribeInstanceInformationResponseTypeDef",
    "ClientDescribeInstancePatchStatesForPatchGroupFiltersTypeDef",
    "ClientDescribeInstancePatchStatesForPatchGroupResponseInstancePatchStatesTypeDef",
    "ClientDescribeInstancePatchStatesForPatchGroupResponseTypeDef",
    "ClientDescribeInstancePatchStatesResponseInstancePatchStatesTypeDef",
    "ClientDescribeInstancePatchStatesResponseTypeDef",
    "ClientDescribeInstancePatchesFiltersTypeDef",
    "ClientDescribeInstancePatchesResponsePatchesTypeDef",
    "ClientDescribeInstancePatchesResponseTypeDef",
    "ClientDescribeInventoryDeletionsResponseInventoryDeletionsDeletionSummarySummaryItemsTypeDef",
    "ClientDescribeInventoryDeletionsResponseInventoryDeletionsDeletionSummaryTypeDef",
    "ClientDescribeInventoryDeletionsResponseInventoryDeletionsTypeDef",
    "ClientDescribeInventoryDeletionsResponseTypeDef",
    "ClientDescribeMaintenanceWindowExecutionTaskInvocationsFiltersTypeDef",
    "ClientDescribeMaintenanceWindowExecutionTaskInvocationsResponseWindowExecutionTaskInvocationIdentitiesTypeDef",
    "ClientDescribeMaintenanceWindowExecutionTaskInvocationsResponseTypeDef",
    "ClientDescribeMaintenanceWindowExecutionTasksFiltersTypeDef",
    "ClientDescribeMaintenanceWindowExecutionTasksResponseWindowExecutionTaskIdentitiesTypeDef",
    "ClientDescribeMaintenanceWindowExecutionTasksResponseTypeDef",
    "ClientDescribeMaintenanceWindowExecutionsFiltersTypeDef",
    "ClientDescribeMaintenanceWindowExecutionsResponseWindowExecutionsTypeDef",
    "ClientDescribeMaintenanceWindowExecutionsResponseTypeDef",
    "ClientDescribeMaintenanceWindowScheduleFiltersTypeDef",
    "ClientDescribeMaintenanceWindowScheduleResponseScheduledWindowExecutionsTypeDef",
    "ClientDescribeMaintenanceWindowScheduleResponseTypeDef",
    "ClientDescribeMaintenanceWindowScheduleTargetsTypeDef",
    "ClientDescribeMaintenanceWindowTargetsFiltersTypeDef",
    "ClientDescribeMaintenanceWindowTargetsResponseTargetsTargetsTypeDef",
    "ClientDescribeMaintenanceWindowTargetsResponseTargetsTypeDef",
    "ClientDescribeMaintenanceWindowTargetsResponseTypeDef",
    "ClientDescribeMaintenanceWindowTasksFiltersTypeDef",
    "ClientDescribeMaintenanceWindowTasksResponseTasksLoggingInfoTypeDef",
    "ClientDescribeMaintenanceWindowTasksResponseTasksTargetsTypeDef",
    "ClientDescribeMaintenanceWindowTasksResponseTasksTaskParametersTypeDef",
    "ClientDescribeMaintenanceWindowTasksResponseTasksTypeDef",
    "ClientDescribeMaintenanceWindowTasksResponseTypeDef",
    "ClientDescribeMaintenanceWindowsFiltersTypeDef",
    "ClientDescribeMaintenanceWindowsForTargetResponseWindowIdentitiesTypeDef",
    "ClientDescribeMaintenanceWindowsForTargetResponseTypeDef",
    "ClientDescribeMaintenanceWindowsForTargetTargetsTypeDef",
    "ClientDescribeMaintenanceWindowsResponseWindowIdentitiesTypeDef",
    "ClientDescribeMaintenanceWindowsResponseTypeDef",
    "ClientDescribeOpsItemsOpsItemFiltersTypeDef",
    "ClientDescribeOpsItemsResponseOpsItemSummariesOperationalDataTypeDef",
    "ClientDescribeOpsItemsResponseOpsItemSummariesTypeDef",
    "ClientDescribeOpsItemsResponseTypeDef",
    "ClientDescribeParametersFiltersTypeDef",
    "ClientDescribeParametersParameterFiltersTypeDef",
    "ClientDescribeParametersResponseParametersPoliciesTypeDef",
    "ClientDescribeParametersResponseParametersTypeDef",
    "ClientDescribeParametersResponseTypeDef",
    "ClientDescribePatchBaselinesFiltersTypeDef",
    "ClientDescribePatchBaselinesResponseBaselineIdentitiesTypeDef",
    "ClientDescribePatchBaselinesResponseTypeDef",
    "ClientDescribePatchGroupStateResponseTypeDef",
    "ClientDescribePatchGroupsFiltersTypeDef",
    "ClientDescribePatchGroupsResponseMappingsBaselineIdentityTypeDef",
    "ClientDescribePatchGroupsResponseMappingsTypeDef",
    "ClientDescribePatchGroupsResponseTypeDef",
    "ClientDescribePatchPropertiesResponseTypeDef",
    "ClientDescribeSessionsFiltersTypeDef",
    "ClientDescribeSessionsResponseSessionsOutputUrlTypeDef",
    "ClientDescribeSessionsResponseSessionsTypeDef",
    "ClientDescribeSessionsResponseTypeDef",
    "ClientGetAutomationExecutionResponseAutomationExecutionProgressCountersTypeDef",
    "ClientGetAutomationExecutionResponseAutomationExecutionResolvedTargetsTypeDef",
    "ClientGetAutomationExecutionResponseAutomationExecutionStepExecutionsFailureDetailsTypeDef",
    "ClientGetAutomationExecutionResponseAutomationExecutionStepExecutionsTargetLocationTypeDef",
    "ClientGetAutomationExecutionResponseAutomationExecutionStepExecutionsTargetsTypeDef",
    "ClientGetAutomationExecutionResponseAutomationExecutionStepExecutionsTypeDef",
    "ClientGetAutomationExecutionResponseAutomationExecutionTargetLocationsTypeDef",
    "ClientGetAutomationExecutionResponseAutomationExecutionTargetsTypeDef",
    "ClientGetAutomationExecutionResponseAutomationExecutionTypeDef",
    "ClientGetAutomationExecutionResponseTypeDef",
    "ClientGetCommandInvocationResponseCloudWatchOutputConfigTypeDef",
    "ClientGetCommandInvocationResponseTypeDef",
    "ClientGetConnectionStatusResponseTypeDef",
    "ClientGetDefaultPatchBaselineResponseTypeDef",
    "ClientGetDeployablePatchSnapshotForInstanceResponseTypeDef",
    "ClientGetDocumentResponseAttachmentsContentTypeDef",
    "ClientGetDocumentResponseTypeDef",
    "ClientGetInventoryAggregatorsGroupsFiltersTypeDef",
    "ClientGetInventoryAggregatorsGroupsTypeDef",
    "ClientGetInventoryAggregatorsTypeDef",
    "ClientGetInventoryFiltersTypeDef",
    "ClientGetInventoryResponseEntitiesDataTypeDef",
    "ClientGetInventoryResponseEntitiesTypeDef",
    "ClientGetInventoryResponseTypeDef",
    "ClientGetInventoryResultAttributesTypeDef",
    "ClientGetInventorySchemaResponseSchemasAttributesTypeDef",
    "ClientGetInventorySchemaResponseSchemasTypeDef",
    "ClientGetInventorySchemaResponseTypeDef",
    "ClientGetMaintenanceWindowExecutionResponseTypeDef",
    "ClientGetMaintenanceWindowExecutionTaskInvocationResponseTypeDef",
    "ClientGetMaintenanceWindowExecutionTaskResponseTaskParametersTypeDef",
    "ClientGetMaintenanceWindowExecutionTaskResponseTypeDef",
    "ClientGetMaintenanceWindowResponseTypeDef",
    "ClientGetMaintenanceWindowTaskResponseLoggingInfoTypeDef",
    "ClientGetMaintenanceWindowTaskResponseTargetsTypeDef",
    "ClientGetMaintenanceWindowTaskResponseTaskInvocationParametersAutomationTypeDef",
    "ClientGetMaintenanceWindowTaskResponseTaskInvocationParametersLambdaTypeDef",
    "ClientGetMaintenanceWindowTaskResponseTaskInvocationParametersRunCommandNotificationConfigTypeDef",
    "ClientGetMaintenanceWindowTaskResponseTaskInvocationParametersRunCommandTypeDef",
    "ClientGetMaintenanceWindowTaskResponseTaskInvocationParametersStepFunctionsTypeDef",
    "ClientGetMaintenanceWindowTaskResponseTaskInvocationParametersTypeDef",
    "ClientGetMaintenanceWindowTaskResponseTaskParametersTypeDef",
    "ClientGetMaintenanceWindowTaskResponseTypeDef",
    "ClientGetOpsItemResponseOpsItemNotificationsTypeDef",
    "ClientGetOpsItemResponseOpsItemOperationalDataTypeDef",
    "ClientGetOpsItemResponseOpsItemRelatedOpsItemsTypeDef",
    "ClientGetOpsItemResponseOpsItemTypeDef",
    "ClientGetOpsItemResponseTypeDef",
    "ClientGetOpsSummaryAggregatorsFiltersTypeDef",
    "ClientGetOpsSummaryAggregatorsTypeDef",
    "ClientGetOpsSummaryFiltersTypeDef",
    "ClientGetOpsSummaryResponseEntitiesDataTypeDef",
    "ClientGetOpsSummaryResponseEntitiesTypeDef",
    "ClientGetOpsSummaryResponseTypeDef",
    "ClientGetParameterHistoryResponseParametersPoliciesTypeDef",
    "ClientGetParameterHistoryResponseParametersTypeDef",
    "ClientGetParameterHistoryResponseTypeDef",
    "ClientGetParameterResponseParameterTypeDef",
    "ClientGetParameterResponseTypeDef",
    "ClientGetParametersByPathParameterFiltersTypeDef",
    "ClientGetParametersByPathResponseParametersTypeDef",
    "ClientGetParametersByPathResponseTypeDef",
    "ClientGetParametersResponseParametersTypeDef",
    "ClientGetParametersResponseTypeDef",
    "ClientGetPatchBaselineForPatchGroupResponseTypeDef",
    "ClientGetPatchBaselineResponseApprovalRulesPatchRulesPatchFilterGroupPatchFiltersTypeDef",
    "ClientGetPatchBaselineResponseApprovalRulesPatchRulesPatchFilterGroupTypeDef",
    "ClientGetPatchBaselineResponseApprovalRulesPatchRulesTypeDef",
    "ClientGetPatchBaselineResponseApprovalRulesTypeDef",
    "ClientGetPatchBaselineResponseGlobalFiltersPatchFiltersTypeDef",
    "ClientGetPatchBaselineResponseGlobalFiltersTypeDef",
    "ClientGetPatchBaselineResponseSourcesTypeDef",
    "ClientGetPatchBaselineResponseTypeDef",
    "ClientGetServiceSettingResponseServiceSettingTypeDef",
    "ClientGetServiceSettingResponseTypeDef",
    "ClientLabelParameterVersionResponseTypeDef",
    "ClientListAssociationVersionsResponseAssociationVersionsOutputLocationS3LocationTypeDef",
    "ClientListAssociationVersionsResponseAssociationVersionsOutputLocationTypeDef",
    "ClientListAssociationVersionsResponseAssociationVersionsTargetsTypeDef",
    "ClientListAssociationVersionsResponseAssociationVersionsTypeDef",
    "ClientListAssociationVersionsResponseTypeDef",
    "ClientListAssociationsAssociationFilterListTypeDef",
    "ClientListAssociationsResponseAssociationsOverviewTypeDef",
    "ClientListAssociationsResponseAssociationsTargetsTypeDef",
    "ClientListAssociationsResponseAssociationsTypeDef",
    "ClientListAssociationsResponseTypeDef",
    "ClientListCommandInvocationsFiltersTypeDef",
    "ClientListCommandInvocationsResponseCommandInvocationsCloudWatchOutputConfigTypeDef",
    "ClientListCommandInvocationsResponseCommandInvocationsCommandPluginsTypeDef",
    "ClientListCommandInvocationsResponseCommandInvocationsNotificationConfigTypeDef",
    "ClientListCommandInvocationsResponseCommandInvocationsTypeDef",
    "ClientListCommandInvocationsResponseTypeDef",
    "ClientListCommandsFiltersTypeDef",
    "ClientListCommandsResponseCommandsCloudWatchOutputConfigTypeDef",
    "ClientListCommandsResponseCommandsNotificationConfigTypeDef",
    "ClientListCommandsResponseCommandsTargetsTypeDef",
    "ClientListCommandsResponseCommandsTypeDef",
    "ClientListCommandsResponseTypeDef",
    "ClientListComplianceItemsFiltersTypeDef",
    "ClientListComplianceItemsResponseComplianceItemsExecutionSummaryTypeDef",
    "ClientListComplianceItemsResponseComplianceItemsTypeDef",
    "ClientListComplianceItemsResponseTypeDef",
    "ClientListComplianceSummariesFiltersTypeDef",
    "ClientListComplianceSummariesResponseComplianceSummaryItemsCompliantSummarySeveritySummaryTypeDef",
    "ClientListComplianceSummariesResponseComplianceSummaryItemsCompliantSummaryTypeDef",
    "ClientListComplianceSummariesResponseComplianceSummaryItemsNonCompliantSummarySeveritySummaryTypeDef",
    "ClientListComplianceSummariesResponseComplianceSummaryItemsNonCompliantSummaryTypeDef",
    "ClientListComplianceSummariesResponseComplianceSummaryItemsTypeDef",
    "ClientListComplianceSummariesResponseTypeDef",
    "ClientListDocumentVersionsResponseDocumentVersionsTypeDef",
    "ClientListDocumentVersionsResponseTypeDef",
    "ClientListDocumentsDocumentFilterListTypeDef",
    "ClientListDocumentsFiltersTypeDef",
    "ClientListDocumentsResponseDocumentIdentifiersTagsTypeDef",
    "ClientListDocumentsResponseDocumentIdentifiersTypeDef",
    "ClientListDocumentsResponseTypeDef",
    "ClientListInventoryEntriesFiltersTypeDef",
    "ClientListInventoryEntriesResponseTypeDef",
    "ClientListResourceComplianceSummariesFiltersTypeDef",
    "ClientListResourceComplianceSummariesResponseResourceComplianceSummaryItemsCompliantSummarySeveritySummaryTypeDef",
    "ClientListResourceComplianceSummariesResponseResourceComplianceSummaryItemsCompliantSummaryTypeDef",
    "ClientListResourceComplianceSummariesResponseResourceComplianceSummaryItemsExecutionSummaryTypeDef",
    "ClientListResourceComplianceSummariesResponseResourceComplianceSummaryItemsNonCompliantSummarySeveritySummaryTypeDef",
    "ClientListResourceComplianceSummariesResponseResourceComplianceSummaryItemsNonCompliantSummaryTypeDef",
    "ClientListResourceComplianceSummariesResponseResourceComplianceSummaryItemsTypeDef",
    "ClientListResourceComplianceSummariesResponseTypeDef",
    "ClientListResourceDataSyncResponseResourceDataSyncItemsS3DestinationTypeDef",
    "ClientListResourceDataSyncResponseResourceDataSyncItemsTypeDef",
    "ClientListResourceDataSyncResponseTypeDef",
    "ClientListTagsForResourceResponseTagListTypeDef",
    "ClientListTagsForResourceResponseTypeDef",
    "ClientPutComplianceItemsExecutionSummaryTypeDef",
    "ClientPutComplianceItemsItemsTypeDef",
    "ClientPutInventoryItemsTypeDef",
    "ClientPutInventoryResponseTypeDef",
    "ClientPutParameterResponseTypeDef",
    "ClientPutParameterTagsTypeDef",
    "ClientRegisterDefaultPatchBaselineResponseTypeDef",
    "ClientRegisterPatchBaselineForPatchGroupResponseTypeDef",
    "ClientRegisterTargetWithMaintenanceWindowResponseTypeDef",
    "ClientRegisterTargetWithMaintenanceWindowTargetsTypeDef",
    "ClientRegisterTaskWithMaintenanceWindowLoggingInfoTypeDef",
    "ClientRegisterTaskWithMaintenanceWindowResponseTypeDef",
    "ClientRegisterTaskWithMaintenanceWindowTargetsTypeDef",
    "ClientRegisterTaskWithMaintenanceWindowTaskInvocationParametersAutomationTypeDef",
    "ClientRegisterTaskWithMaintenanceWindowTaskInvocationParametersLambdaTypeDef",
    "ClientRegisterTaskWithMaintenanceWindowTaskInvocationParametersRunCommandNotificationConfigTypeDef",
    "ClientRegisterTaskWithMaintenanceWindowTaskInvocationParametersRunCommandTypeDef",
    "ClientRegisterTaskWithMaintenanceWindowTaskInvocationParametersStepFunctionsTypeDef",
    "ClientRegisterTaskWithMaintenanceWindowTaskInvocationParametersTypeDef",
    "ClientRegisterTaskWithMaintenanceWindowTaskParametersTypeDef",
    "ClientResetServiceSettingResponseServiceSettingTypeDef",
    "ClientResetServiceSettingResponseTypeDef",
    "ClientResumeSessionResponseTypeDef",
    "ClientSendCommandCloudWatchOutputConfigTypeDef",
    "ClientSendCommandNotificationConfigTypeDef",
    "ClientSendCommandResponseCommandCloudWatchOutputConfigTypeDef",
    "ClientSendCommandResponseCommandNotificationConfigTypeDef",
    "ClientSendCommandResponseCommandTargetsTypeDef",
    "ClientSendCommandResponseCommandTypeDef",
    "ClientSendCommandResponseTypeDef",
    "ClientSendCommandTargetsTypeDef",
    "ClientStartAutomationExecutionResponseTypeDef",
    "ClientStartAutomationExecutionTargetLocationsTypeDef",
    "ClientStartAutomationExecutionTargetsTypeDef",
    "ClientStartSessionResponseTypeDef",
    "ClientTerminateSessionResponseTypeDef",
    "ClientUpdateAssociationOutputLocationS3LocationTypeDef",
    "ClientUpdateAssociationOutputLocationTypeDef",
    "ClientUpdateAssociationResponseAssociationDescriptionOutputLocationS3LocationTypeDef",
    "ClientUpdateAssociationResponseAssociationDescriptionOutputLocationTypeDef",
    "ClientUpdateAssociationResponseAssociationDescriptionOverviewTypeDef",
    "ClientUpdateAssociationResponseAssociationDescriptionStatusTypeDef",
    "ClientUpdateAssociationResponseAssociationDescriptionTargetsTypeDef",
    "ClientUpdateAssociationResponseAssociationDescriptionTypeDef",
    "ClientUpdateAssociationResponseTypeDef",
    "ClientUpdateAssociationStatusAssociationStatusTypeDef",
    "ClientUpdateAssociationStatusResponseAssociationDescriptionOutputLocationS3LocationTypeDef",
    "ClientUpdateAssociationStatusResponseAssociationDescriptionOutputLocationTypeDef",
    "ClientUpdateAssociationStatusResponseAssociationDescriptionOverviewTypeDef",
    "ClientUpdateAssociationStatusResponseAssociationDescriptionStatusTypeDef",
    "ClientUpdateAssociationStatusResponseAssociationDescriptionTargetsTypeDef",
    "ClientUpdateAssociationStatusResponseAssociationDescriptionTypeDef",
    "ClientUpdateAssociationStatusResponseTypeDef",
    "ClientUpdateAssociationTargetsTypeDef",
    "ClientUpdateDocumentAttachmentsTypeDef",
    "ClientUpdateDocumentDefaultVersionResponseDescriptionTypeDef",
    "ClientUpdateDocumentDefaultVersionResponseTypeDef",
    "ClientUpdateDocumentResponseDocumentDescriptionAttachmentsInformationTypeDef",
    "ClientUpdateDocumentResponseDocumentDescriptionParametersTypeDef",
    "ClientUpdateDocumentResponseDocumentDescriptionTagsTypeDef",
    "ClientUpdateDocumentResponseDocumentDescriptionTypeDef",
    "ClientUpdateDocumentResponseTypeDef",
    "ClientUpdateMaintenanceWindowResponseTypeDef",
    "ClientUpdateMaintenanceWindowTargetResponseTargetsTypeDef",
    "ClientUpdateMaintenanceWindowTargetResponseTypeDef",
    "ClientUpdateMaintenanceWindowTargetTargetsTypeDef",
    "ClientUpdateMaintenanceWindowTaskLoggingInfoTypeDef",
    "ClientUpdateMaintenanceWindowTaskResponseLoggingInfoTypeDef",
    "ClientUpdateMaintenanceWindowTaskResponseTargetsTypeDef",
    "ClientUpdateMaintenanceWindowTaskResponseTaskInvocationParametersAutomationTypeDef",
    "ClientUpdateMaintenanceWindowTaskResponseTaskInvocationParametersLambdaTypeDef",
    "ClientUpdateMaintenanceWindowTaskResponseTaskInvocationParametersRunCommandNotificationConfigTypeDef",
    "ClientUpdateMaintenanceWindowTaskResponseTaskInvocationParametersRunCommandTypeDef",
    "ClientUpdateMaintenanceWindowTaskResponseTaskInvocationParametersStepFunctionsTypeDef",
    "ClientUpdateMaintenanceWindowTaskResponseTaskInvocationParametersTypeDef",
    "ClientUpdateMaintenanceWindowTaskResponseTaskParametersTypeDef",
    "ClientUpdateMaintenanceWindowTaskResponseTypeDef",
    "ClientUpdateMaintenanceWindowTaskTargetsTypeDef",
    "ClientUpdateMaintenanceWindowTaskTaskInvocationParametersAutomationTypeDef",
    "ClientUpdateMaintenanceWindowTaskTaskInvocationParametersLambdaTypeDef",
    "ClientUpdateMaintenanceWindowTaskTaskInvocationParametersRunCommandNotificationConfigTypeDef",
    "ClientUpdateMaintenanceWindowTaskTaskInvocationParametersRunCommandTypeDef",
    "ClientUpdateMaintenanceWindowTaskTaskInvocationParametersStepFunctionsTypeDef",
    "ClientUpdateMaintenanceWindowTaskTaskInvocationParametersTypeDef",
    "ClientUpdateMaintenanceWindowTaskTaskParametersTypeDef",
    "ClientUpdateOpsItemNotificationsTypeDef",
    "ClientUpdateOpsItemOperationalDataTypeDef",
    "ClientUpdateOpsItemRelatedOpsItemsTypeDef",
    "ClientUpdatePatchBaselineApprovalRulesPatchRulesPatchFilterGroupPatchFiltersTypeDef",
    "ClientUpdatePatchBaselineApprovalRulesPatchRulesPatchFilterGroupTypeDef",
    "ClientUpdatePatchBaselineApprovalRulesPatchRulesTypeDef",
    "ClientUpdatePatchBaselineApprovalRulesTypeDef",
    "ClientUpdatePatchBaselineGlobalFiltersPatchFiltersTypeDef",
    "ClientUpdatePatchBaselineGlobalFiltersTypeDef",
    "ClientUpdatePatchBaselineResponseApprovalRulesPatchRulesPatchFilterGroupPatchFiltersTypeDef",
    "ClientUpdatePatchBaselineResponseApprovalRulesPatchRulesPatchFilterGroupTypeDef",
    "ClientUpdatePatchBaselineResponseApprovalRulesPatchRulesTypeDef",
    "ClientUpdatePatchBaselineResponseApprovalRulesTypeDef",
    "ClientUpdatePatchBaselineResponseGlobalFiltersPatchFiltersTypeDef",
    "ClientUpdatePatchBaselineResponseGlobalFiltersTypeDef",
    "ClientUpdatePatchBaselineResponseSourcesTypeDef",
    "ClientUpdatePatchBaselineResponseTypeDef",
    "ClientUpdatePatchBaselineSourcesTypeDef",
    "DescribeActivationsPaginateFiltersTypeDef",
    "DescribeActivationsPaginatePaginationConfigTypeDef",
    "DescribeActivationsPaginateResponseActivationListTagsTypeDef",
    "DescribeActivationsPaginateResponseActivationListTypeDef",
    "DescribeActivationsPaginateResponseTypeDef",
    "DescribeAssociationExecutionTargetsPaginateFiltersTypeDef",
    "DescribeAssociationExecutionTargetsPaginatePaginationConfigTypeDef",
    "DescribeAssociationExecutionTargetsPaginateResponseAssociationExecutionTargetsOutputSourceTypeDef",
    "DescribeAssociationExecutionTargetsPaginateResponseAssociationExecutionTargetsTypeDef",
    "DescribeAssociationExecutionTargetsPaginateResponseTypeDef",
    "DescribeAssociationExecutionsPaginateFiltersTypeDef",
    "DescribeAssociationExecutionsPaginatePaginationConfigTypeDef",
    "DescribeAssociationExecutionsPaginateResponseAssociationExecutionsTypeDef",
    "DescribeAssociationExecutionsPaginateResponseTypeDef",
    "DescribeAutomationExecutionsPaginateFiltersTypeDef",
    "DescribeAutomationExecutionsPaginatePaginationConfigTypeDef",
    "DescribeAutomationExecutionsPaginateResponseAutomationExecutionMetadataListResolvedTargetsTypeDef",
    "DescribeAutomationExecutionsPaginateResponseAutomationExecutionMetadataListTargetsTypeDef",
    "DescribeAutomationExecutionsPaginateResponseAutomationExecutionMetadataListTypeDef",
    "DescribeAutomationExecutionsPaginateResponseTypeDef",
    "DescribeAutomationStepExecutionsPaginateFiltersTypeDef",
    "DescribeAutomationStepExecutionsPaginatePaginationConfigTypeDef",
    "DescribeAutomationStepExecutionsPaginateResponseStepExecutionsFailureDetailsTypeDef",
    "DescribeAutomationStepExecutionsPaginateResponseStepExecutionsTargetLocationTypeDef",
    "DescribeAutomationStepExecutionsPaginateResponseStepExecutionsTargetsTypeDef",
    "DescribeAutomationStepExecutionsPaginateResponseStepExecutionsTypeDef",
    "DescribeAutomationStepExecutionsPaginateResponseTypeDef",
    "DescribeAvailablePatchesPaginateFiltersTypeDef",
    "DescribeAvailablePatchesPaginatePaginationConfigTypeDef",
    "DescribeAvailablePatchesPaginateResponsePatchesTypeDef",
    "DescribeAvailablePatchesPaginateResponseTypeDef",
    "DescribeEffectiveInstanceAssociationsPaginatePaginationConfigTypeDef",
    "DescribeEffectiveInstanceAssociationsPaginateResponseAssociationsTypeDef",
    "DescribeEffectiveInstanceAssociationsPaginateResponseTypeDef",
    "DescribeEffectivePatchesForPatchBaselinePaginatePaginationConfigTypeDef",
    "DescribeEffectivePatchesForPatchBaselinePaginateResponseEffectivePatchesPatchStatusTypeDef",
    "DescribeEffectivePatchesForPatchBaselinePaginateResponseEffectivePatchesPatchTypeDef",
    "DescribeEffectivePatchesForPatchBaselinePaginateResponseEffectivePatchesTypeDef",
    "DescribeEffectivePatchesForPatchBaselinePaginateResponseTypeDef",
    "DescribeInstanceAssociationsStatusPaginatePaginationConfigTypeDef",
    "DescribeInstanceAssociationsStatusPaginateResponseInstanceAssociationStatusInfosOutputUrlS3OutputUrlTypeDef",
    "DescribeInstanceAssociationsStatusPaginateResponseInstanceAssociationStatusInfosOutputUrlTypeDef",
    "DescribeInstanceAssociationsStatusPaginateResponseInstanceAssociationStatusInfosTypeDef",
    "DescribeInstanceAssociationsStatusPaginateResponseTypeDef",
    "DescribeInstanceInformationPaginateFiltersTypeDef",
    "DescribeInstanceInformationPaginateInstanceInformationFilterListTypeDef",
    "DescribeInstanceInformationPaginatePaginationConfigTypeDef",
    "DescribeInstanceInformationPaginateResponseInstanceInformationListAssociationOverviewTypeDef",
    "DescribeInstanceInformationPaginateResponseInstanceInformationListTypeDef",
    "DescribeInstanceInformationPaginateResponseTypeDef",
    "DescribeInstancePatchStatesForPatchGroupPaginateFiltersTypeDef",
    "DescribeInstancePatchStatesForPatchGroupPaginatePaginationConfigTypeDef",
    "DescribeInstancePatchStatesForPatchGroupPaginateResponseInstancePatchStatesTypeDef",
    "DescribeInstancePatchStatesForPatchGroupPaginateResponseTypeDef",
    "DescribeInstancePatchStatesPaginatePaginationConfigTypeDef",
    "DescribeInstancePatchStatesPaginateResponseInstancePatchStatesTypeDef",
    "DescribeInstancePatchStatesPaginateResponseTypeDef",
    "DescribeInstancePatchesPaginateFiltersTypeDef",
    "DescribeInstancePatchesPaginatePaginationConfigTypeDef",
    "DescribeInstancePatchesPaginateResponsePatchesTypeDef",
    "DescribeInstancePatchesPaginateResponseTypeDef",
    "DescribeInventoryDeletionsPaginatePaginationConfigTypeDef",
    "DescribeInventoryDeletionsPaginateResponseInventoryDeletionsDeletionSummarySummaryItemsTypeDef",
    "DescribeInventoryDeletionsPaginateResponseInventoryDeletionsDeletionSummaryTypeDef",
    "DescribeInventoryDeletionsPaginateResponseInventoryDeletionsTypeDef",
    "DescribeInventoryDeletionsPaginateResponseTypeDef",
    "DescribeMaintenanceWindowExecutionTaskInvocationsPaginateFiltersTypeDef",
    "DescribeMaintenanceWindowExecutionTaskInvocationsPaginatePaginationConfigTypeDef",
    "DescribeMaintenanceWindowExecutionTaskInvocationsPaginateResponseWindowExecutionTaskInvocationIdentitiesTypeDef",
    "DescribeMaintenanceWindowExecutionTaskInvocationsPaginateResponseTypeDef",
    "DescribeMaintenanceWindowExecutionTasksPaginateFiltersTypeDef",
    "DescribeMaintenanceWindowExecutionTasksPaginatePaginationConfigTypeDef",
    "DescribeMaintenanceWindowExecutionTasksPaginateResponseWindowExecutionTaskIdentitiesTypeDef",
    "DescribeMaintenanceWindowExecutionTasksPaginateResponseTypeDef",
    "DescribeMaintenanceWindowExecutionsPaginateFiltersTypeDef",
    "DescribeMaintenanceWindowExecutionsPaginatePaginationConfigTypeDef",
    "DescribeMaintenanceWindowExecutionsPaginateResponseWindowExecutionsTypeDef",
    "DescribeMaintenanceWindowExecutionsPaginateResponseTypeDef",
    "DescribeMaintenanceWindowSchedulePaginateFiltersTypeDef",
    "DescribeMaintenanceWindowSchedulePaginatePaginationConfigTypeDef",
    "DescribeMaintenanceWindowSchedulePaginateResponseScheduledWindowExecutionsTypeDef",
    "DescribeMaintenanceWindowSchedulePaginateResponseTypeDef",
    "DescribeMaintenanceWindowSchedulePaginateTargetsTypeDef",
    "DescribeMaintenanceWindowTargetsPaginateFiltersTypeDef",
    "DescribeMaintenanceWindowTargetsPaginatePaginationConfigTypeDef",
    "DescribeMaintenanceWindowTargetsPaginateResponseTargetsTargetsTypeDef",
    "DescribeMaintenanceWindowTargetsPaginateResponseTargetsTypeDef",
    "DescribeMaintenanceWindowTargetsPaginateResponseTypeDef",
    "DescribeMaintenanceWindowTasksPaginateFiltersTypeDef",
    "DescribeMaintenanceWindowTasksPaginatePaginationConfigTypeDef",
    "DescribeMaintenanceWindowTasksPaginateResponseTasksLoggingInfoTypeDef",
    "DescribeMaintenanceWindowTasksPaginateResponseTasksTargetsTypeDef",
    "DescribeMaintenanceWindowTasksPaginateResponseTasksTaskParametersTypeDef",
    "DescribeMaintenanceWindowTasksPaginateResponseTasksTypeDef",
    "DescribeMaintenanceWindowTasksPaginateResponseTypeDef",
    "DescribeMaintenanceWindowsForTargetPaginatePaginationConfigTypeDef",
    "DescribeMaintenanceWindowsForTargetPaginateResponseWindowIdentitiesTypeDef",
    "DescribeMaintenanceWindowsForTargetPaginateResponseTypeDef",
    "DescribeMaintenanceWindowsForTargetPaginateTargetsTypeDef",
    "DescribeMaintenanceWindowsPaginateFiltersTypeDef",
    "DescribeMaintenanceWindowsPaginatePaginationConfigTypeDef",
    "DescribeMaintenanceWindowsPaginateResponseWindowIdentitiesTypeDef",
    "DescribeMaintenanceWindowsPaginateResponseTypeDef",
    "DescribeParametersPaginateFiltersTypeDef",
    "DescribeParametersPaginatePaginationConfigTypeDef",
    "DescribeParametersPaginateParameterFiltersTypeDef",
    "DescribeParametersPaginateResponseParametersPoliciesTypeDef",
    "DescribeParametersPaginateResponseParametersTypeDef",
    "DescribeParametersPaginateResponseTypeDef",
    "DescribePatchBaselinesPaginateFiltersTypeDef",
    "DescribePatchBaselinesPaginatePaginationConfigTypeDef",
    "DescribePatchBaselinesPaginateResponseBaselineIdentitiesTypeDef",
    "DescribePatchBaselinesPaginateResponseTypeDef",
    "DescribePatchGroupsPaginateFiltersTypeDef",
    "DescribePatchGroupsPaginatePaginationConfigTypeDef",
    "DescribePatchGroupsPaginateResponseMappingsBaselineIdentityTypeDef",
    "DescribePatchGroupsPaginateResponseMappingsTypeDef",
    "DescribePatchGroupsPaginateResponseTypeDef",
    "DescribeSessionsPaginateFiltersTypeDef",
    "DescribeSessionsPaginatePaginationConfigTypeDef",
    "DescribeSessionsPaginateResponseSessionsOutputUrlTypeDef",
    "DescribeSessionsPaginateResponseSessionsTypeDef",
    "DescribeSessionsPaginateResponseTypeDef",
    "GetInventoryPaginateAggregatorsGroupsFiltersTypeDef",
    "GetInventoryPaginateAggregatorsGroupsTypeDef",
    "GetInventoryPaginateAggregatorsTypeDef",
    "GetInventoryPaginateFiltersTypeDef",
    "GetInventoryPaginatePaginationConfigTypeDef",
    "GetInventoryPaginateResponseEntitiesDataTypeDef",
    "GetInventoryPaginateResponseEntitiesTypeDef",
    "GetInventoryPaginateResponseTypeDef",
    "GetInventoryPaginateResultAttributesTypeDef",
    "GetInventorySchemaPaginatePaginationConfigTypeDef",
    "GetInventorySchemaPaginateResponseSchemasAttributesTypeDef",
    "GetInventorySchemaPaginateResponseSchemasTypeDef",
    "GetInventorySchemaPaginateResponseTypeDef",
    "GetParameterHistoryPaginatePaginationConfigTypeDef",
    "GetParameterHistoryPaginateResponseParametersPoliciesTypeDef",
    "GetParameterHistoryPaginateResponseParametersTypeDef",
    "GetParameterHistoryPaginateResponseTypeDef",
    "GetParametersByPathPaginatePaginationConfigTypeDef",
    "GetParametersByPathPaginateParameterFiltersTypeDef",
    "GetParametersByPathPaginateResponseParametersTypeDef",
    "GetParametersByPathPaginateResponseTypeDef",
    "ListAssociationVersionsPaginatePaginationConfigTypeDef",
    "ListAssociationVersionsPaginateResponseAssociationVersionsOutputLocationS3LocationTypeDef",
    "ListAssociationVersionsPaginateResponseAssociationVersionsOutputLocationTypeDef",
    "ListAssociationVersionsPaginateResponseAssociationVersionsTargetsTypeDef",
    "ListAssociationVersionsPaginateResponseAssociationVersionsTypeDef",
    "ListAssociationVersionsPaginateResponseTypeDef",
    "ListAssociationsPaginateAssociationFilterListTypeDef",
    "ListAssociationsPaginatePaginationConfigTypeDef",
    "ListAssociationsPaginateResponseAssociationsOverviewTypeDef",
    "ListAssociationsPaginateResponseAssociationsTargetsTypeDef",
    "ListAssociationsPaginateResponseAssociationsTypeDef",
    "ListAssociationsPaginateResponseTypeDef",
    "ListCommandInvocationsPaginateFiltersTypeDef",
    "ListCommandInvocationsPaginatePaginationConfigTypeDef",
    "ListCommandInvocationsPaginateResponseCommandInvocationsCloudWatchOutputConfigTypeDef",
    "ListCommandInvocationsPaginateResponseCommandInvocationsCommandPluginsTypeDef",
    "ListCommandInvocationsPaginateResponseCommandInvocationsNotificationConfigTypeDef",
    "ListCommandInvocationsPaginateResponseCommandInvocationsTypeDef",
    "ListCommandInvocationsPaginateResponseTypeDef",
    "ListCommandsPaginateFiltersTypeDef",
    "ListCommandsPaginatePaginationConfigTypeDef",
    "ListCommandsPaginateResponseCommandsCloudWatchOutputConfigTypeDef",
    "ListCommandsPaginateResponseCommandsNotificationConfigTypeDef",
    "ListCommandsPaginateResponseCommandsTargetsTypeDef",
    "ListCommandsPaginateResponseCommandsTypeDef",
    "ListCommandsPaginateResponseTypeDef",
    "ListComplianceItemsPaginateFiltersTypeDef",
    "ListComplianceItemsPaginatePaginationConfigTypeDef",
    "ListComplianceItemsPaginateResponseComplianceItemsExecutionSummaryTypeDef",
    "ListComplianceItemsPaginateResponseComplianceItemsTypeDef",
    "ListComplianceItemsPaginateResponseTypeDef",
    "ListComplianceSummariesPaginateFiltersTypeDef",
    "ListComplianceSummariesPaginatePaginationConfigTypeDef",
    "ListComplianceSummariesPaginateResponseComplianceSummaryItemsCompliantSummarySeveritySummaryTypeDef",
    "ListComplianceSummariesPaginateResponseComplianceSummaryItemsCompliantSummaryTypeDef",
    "ListComplianceSummariesPaginateResponseComplianceSummaryItemsNonCompliantSummarySeveritySummaryTypeDef",
    "ListComplianceSummariesPaginateResponseComplianceSummaryItemsNonCompliantSummaryTypeDef",
    "ListComplianceSummariesPaginateResponseComplianceSummaryItemsTypeDef",
    "ListComplianceSummariesPaginateResponseTypeDef",
    "ListDocumentVersionsPaginatePaginationConfigTypeDef",
    "ListDocumentVersionsPaginateResponseDocumentVersionsTypeDef",
    "ListDocumentVersionsPaginateResponseTypeDef",
    "ListDocumentsPaginateDocumentFilterListTypeDef",
    "ListDocumentsPaginateFiltersTypeDef",
    "ListDocumentsPaginatePaginationConfigTypeDef",
    "ListDocumentsPaginateResponseDocumentIdentifiersTagsTypeDef",
    "ListDocumentsPaginateResponseDocumentIdentifiersTypeDef",
    "ListDocumentsPaginateResponseTypeDef",
    "ListResourceComplianceSummariesPaginateFiltersTypeDef",
    "ListResourceComplianceSummariesPaginatePaginationConfigTypeDef",
    "ListResourceComplianceSummariesPaginateResponseResourceComplianceSummaryItemsCompliantSummarySeveritySummaryTypeDef",
    "ListResourceComplianceSummariesPaginateResponseResourceComplianceSummaryItemsCompliantSummaryTypeDef",
    "ListResourceComplianceSummariesPaginateResponseResourceComplianceSummaryItemsExecutionSummaryTypeDef",
    "ListResourceComplianceSummariesPaginateResponseResourceComplianceSummaryItemsNonCompliantSummarySeveritySummaryTypeDef",
    "ListResourceComplianceSummariesPaginateResponseResourceComplianceSummaryItemsNonCompliantSummaryTypeDef",
    "ListResourceComplianceSummariesPaginateResponseResourceComplianceSummaryItemsTypeDef",
    "ListResourceComplianceSummariesPaginateResponseTypeDef",
    "ListResourceDataSyncPaginatePaginationConfigTypeDef",
    "ListResourceDataSyncPaginateResponseResourceDataSyncItemsS3DestinationTypeDef",
    "ListResourceDataSyncPaginateResponseResourceDataSyncItemsTypeDef",
    "ListResourceDataSyncPaginateResponseTypeDef",
)


_ClientAddTagsToResourceTagsTypeDef = TypedDict(
    "_ClientAddTagsToResourceTagsTypeDef", {"Key": str, "Value": str}
)


class ClientAddTagsToResourceTagsTypeDef(_ClientAddTagsToResourceTagsTypeDef):
    """
    Type definition for `ClientAddTagsToResource` `Tags`

    Metadata that you assign to your AWS resources. Tags enable you to categorize your resources in
    different ways, for example, by purpose, owner, or environment. In Systems Manager, you can
    apply tags to documents, managed instances, maintenance windows, Parameter Store parameters,
    and patch baselines.

    - **Key** *(string) --* **[REQUIRED]**

      The name of the tag.

    - **Value** *(string) --* **[REQUIRED]**

      The value of the tag.
    """


_ClientCancelMaintenanceWindowExecutionResponseTypeDef = TypedDict(
    "_ClientCancelMaintenanceWindowExecutionResponseTypeDef",
    {"WindowExecutionId": str},
    total=False,
)


class ClientCancelMaintenanceWindowExecutionResponseTypeDef(
    _ClientCancelMaintenanceWindowExecutionResponseTypeDef
):
    """
    Type definition for `ClientCancelMaintenanceWindowExecution` `Response`

    - **WindowExecutionId** *(string) --*

      The ID of the maintenance window execution that has been stopped.
    """


_ClientCreateActivationResponseTypeDef = TypedDict(
    "_ClientCreateActivationResponseTypeDef",
    {"ActivationId": str, "ActivationCode": str},
    total=False,
)


class ClientCreateActivationResponseTypeDef(_ClientCreateActivationResponseTypeDef):
    """
    Type definition for `ClientCreateActivation` `Response`

    - **ActivationId** *(string) --*

      The ID number generated by the system when it processed the activation. The activation ID
      functions like a user name.

    - **ActivationCode** *(string) --*

      The code the system generates when it processes the activation. The activation code functions
      like a password to validate the activation ID.
    """


_ClientCreateActivationTagsTypeDef = TypedDict(
    "_ClientCreateActivationTagsTypeDef", {"Key": str, "Value": str}
)


class ClientCreateActivationTagsTypeDef(_ClientCreateActivationTagsTypeDef):
    """
    Type definition for `ClientCreateActivation` `Tags`

    Metadata that you assign to your AWS resources. Tags enable you to categorize your resources in
    different ways, for example, by purpose, owner, or environment. In Systems Manager, you can
    apply tags to documents, managed instances, maintenance windows, Parameter Store parameters,
    and patch baselines.

    - **Key** *(string) --* **[REQUIRED]**

      The name of the tag.

    - **Value** *(string) --* **[REQUIRED]**

      The value of the tag.
    """


_ClientCreateAssociationBatchEntriesOutputLocationS3LocationTypeDef = TypedDict(
    "_ClientCreateAssociationBatchEntriesOutputLocationS3LocationTypeDef",
    {"OutputS3Region": str, "OutputS3BucketName": str, "OutputS3KeyPrefix": str},
    total=False,
)


class ClientCreateAssociationBatchEntriesOutputLocationS3LocationTypeDef(
    _ClientCreateAssociationBatchEntriesOutputLocationS3LocationTypeDef
):
    """
    Type definition for `ClientCreateAssociationBatchEntriesOutputLocation` `S3Location`

    An Amazon S3 bucket where you want to store the results of this request.

    - **OutputS3Region** *(string) --*

      (Deprecated) You can no longer specify this parameter. The system ignores it. Instead,
      Systems Manager automatically determines the Amazon S3 bucket region.

    - **OutputS3BucketName** *(string) --*

      The name of the Amazon S3 bucket.

    - **OutputS3KeyPrefix** *(string) --*

      The Amazon S3 bucket subfolder.
    """


_ClientCreateAssociationBatchEntriesOutputLocationTypeDef = TypedDict(
    "_ClientCreateAssociationBatchEntriesOutputLocationTypeDef",
    {"S3Location": ClientCreateAssociationBatchEntriesOutputLocationS3LocationTypeDef},
    total=False,
)


class ClientCreateAssociationBatchEntriesOutputLocationTypeDef(
    _ClientCreateAssociationBatchEntriesOutputLocationTypeDef
):
    """
    Type definition for `ClientCreateAssociationBatchEntries` `OutputLocation`

    An Amazon S3 bucket where you want to store the results of this request.

    - **S3Location** *(dict) --*

      An Amazon S3 bucket where you want to store the results of this request.

      - **OutputS3Region** *(string) --*

        (Deprecated) You can no longer specify this parameter. The system ignores it. Instead,
        Systems Manager automatically determines the Amazon S3 bucket region.

      - **OutputS3BucketName** *(string) --*

        The name of the Amazon S3 bucket.

      - **OutputS3KeyPrefix** *(string) --*

        The Amazon S3 bucket subfolder.
    """


_ClientCreateAssociationBatchEntriesTargetsTypeDef = TypedDict(
    "_ClientCreateAssociationBatchEntriesTargetsTypeDef",
    {"Key": str, "Values": List[str]},
    total=False,
)


class ClientCreateAssociationBatchEntriesTargetsTypeDef(
    _ClientCreateAssociationBatchEntriesTargetsTypeDef
):
    """
    Type definition for `ClientCreateAssociationBatchEntries` `Targets`

    An array of search criteria that targets instances using a Key,Value combination that you
    specify.

    Supported formats include the following.

    * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

    * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

    * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

    * (Maintenance window targets only) ``Key=resource-groups:Name,Values=*resource-group-name*
    ``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

    For example:

    * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

    * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

    * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

    * (Maintenance window targets only)
    ``Key=resource-groups:Name,Values=ProductionResourceGroup``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC* ``

    For information about how to send commands that target instances using ``Key,Value``
    parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
    <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
    in the *AWS Systems Manager User Guide* .

    - **Key** *(string) --*

      User-defined criteria for sending commands that target instances that meet the criteria.

    - **Values** *(list) --*

      User-defined criteria that maps to ``Key`` . For example, if you specified
      ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on instances
      that include Amazon EC2 tags of ``ServerRole,WebServer`` .

      - *(string) --*
    """


_RequiredClientCreateAssociationBatchEntriesTypeDef = TypedDict(
    "_RequiredClientCreateAssociationBatchEntriesTypeDef", {"Name": str}
)
_OptionalClientCreateAssociationBatchEntriesTypeDef = TypedDict(
    "_OptionalClientCreateAssociationBatchEntriesTypeDef",
    {
        "InstanceId": str,
        "Parameters": Dict[str, List[str]],
        "AutomationTargetParameterName": str,
        "DocumentVersion": str,
        "Targets": List[ClientCreateAssociationBatchEntriesTargetsTypeDef],
        "ScheduleExpression": str,
        "OutputLocation": ClientCreateAssociationBatchEntriesOutputLocationTypeDef,
        "AssociationName": str,
        "MaxErrors": str,
        "MaxConcurrency": str,
        "ComplianceSeverity": str,
    },
    total=False,
)


class ClientCreateAssociationBatchEntriesTypeDef(
    _RequiredClientCreateAssociationBatchEntriesTypeDef,
    _OptionalClientCreateAssociationBatchEntriesTypeDef,
):
    """
    Type definition for `ClientCreateAssociationBatch` `Entries`

    Describes the association of a Systems Manager SSM document and an instance.

    - **Name** *(string) --* **[REQUIRED]**

      The name of the SSM document that contains the configuration information for the instance.
      You can specify Command or Automation documents.

      You can specify AWS-predefined documents, documents you created, or a document that is shared
      with you from another account.

      For SSM documents that are shared with you from other AWS accounts, you must specify the
      complete SSM document ARN, in the following format:

       ``arn:aws:ssm:*region* :*account-id* :document/*document-name* ``

      For example:

       ``arn:aws:ssm:us-east-2:12345678912:document/My-Shared-Document``

      For AWS-predefined documents and SSM documents you created in your account, you only need to
      specify the document name. For example, ``AWS-ApplyPatchBaseline`` or ``My-Document`` .

    - **InstanceId** *(string) --*

      The ID of the instance.

    - **Parameters** *(dict) --*

      A description of the parameters for a document.

      - *(string) --*

        - *(list) --*

          - *(string) --*

    - **AutomationTargetParameterName** *(string) --*

      Specify the target for the association. This target is required for associations that use an
      Automation document and target resources by using rate controls.

    - **DocumentVersion** *(string) --*

      The document version.

    - **Targets** *(list) --*

      The instances targeted by the request.

      - *(dict) --*

        An array of search criteria that targets instances using a Key,Value combination that you
        specify.

        Supported formats include the following.

        * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

        * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

        * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

        * (Maintenance window targets only) ``Key=resource-groups:Name,Values=*resource-group-name*
        ``

        * (Maintenance window targets only)
        ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

        For example:

        * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

        * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

        * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

        * (Maintenance window targets only)
        ``Key=resource-groups:Name,Values=ProductionResourceGroup``

        * (Maintenance window targets only)
        ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC* ``

        For information about how to send commands that target instances using ``Key,Value``
        parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
        <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
        in the *AWS Systems Manager User Guide* .

        - **Key** *(string) --*

          User-defined criteria for sending commands that target instances that meet the criteria.

        - **Values** *(list) --*

          User-defined criteria that maps to ``Key`` . For example, if you specified
          ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on instances
          that include Amazon EC2 tags of ``ServerRole,WebServer`` .

          - *(string) --*

    - **ScheduleExpression** *(string) --*

      A cron expression that specifies a schedule when the association runs.

    - **OutputLocation** *(dict) --*

      An Amazon S3 bucket where you want to store the results of this request.

      - **S3Location** *(dict) --*

        An Amazon S3 bucket where you want to store the results of this request.

        - **OutputS3Region** *(string) --*

          (Deprecated) You can no longer specify this parameter. The system ignores it. Instead,
          Systems Manager automatically determines the Amazon S3 bucket region.

        - **OutputS3BucketName** *(string) --*

          The name of the Amazon S3 bucket.

        - **OutputS3KeyPrefix** *(string) --*

          The Amazon S3 bucket subfolder.

    - **AssociationName** *(string) --*

      Specify a descriptive name for the association.

    - **MaxErrors** *(string) --*

      The number of errors that are allowed before the system stops sending requests to run the
      association on additional targets. You can specify either an absolute number of errors, for
      example 10, or a percentage of the target set, for example 10%. If you specify 3, for
      example, the system stops sending requests when the fourth error is received. If you specify
      0, then the system stops sending requests after the first error is returned. If you run an
      association on 50 instances and set MaxError to 10%, then the system stops sending the
      request when the sixth error is received.

      Executions that are already running an association when MaxErrors is reached are allowed to
      complete, but some of these executions may fail as well. If you need to ensure that there
      won't be more than max-errors failed executions, set MaxConcurrency to 1 so that executions
      proceed one at a time.

    - **MaxConcurrency** *(string) --*

      The maximum number of targets allowed to run the association at the same time. You can
      specify a number, for example 10, or a percentage of the target set, for example 10%. The
      default value is 100%, which means all targets run the association at the same time.

      If a new instance starts and attempts to run an association while Systems Manager is running
      MaxConcurrency associations, the association is allowed to run. During the next association
      interval, the new instance will process its association within the limit specified for
      MaxConcurrency.

    - **ComplianceSeverity** *(string) --*

      The severity level to assign to the association.
    """


_ClientCreateAssociationBatchResponseFailedEntryOutputLocationS3LocationTypeDef = TypedDict(
    "_ClientCreateAssociationBatchResponseFailedEntryOutputLocationS3LocationTypeDef",
    {"OutputS3Region": str, "OutputS3BucketName": str, "OutputS3KeyPrefix": str},
    total=False,
)


class ClientCreateAssociationBatchResponseFailedEntryOutputLocationS3LocationTypeDef(
    _ClientCreateAssociationBatchResponseFailedEntryOutputLocationS3LocationTypeDef
):
    """
    Type definition for `ClientCreateAssociationBatchResponseFailedEntryOutputLocation` `S3Location`

    An Amazon S3 bucket where you want to store the results of this request.

    - **OutputS3Region** *(string) --*

      (Deprecated) You can no longer specify this parameter. The system ignores it.
      Instead, Systems Manager automatically determines the Amazon S3 bucket region.

    - **OutputS3BucketName** *(string) --*

      The name of the Amazon S3 bucket.

    - **OutputS3KeyPrefix** *(string) --*

      The Amazon S3 bucket subfolder.
    """


_ClientCreateAssociationBatchResponseFailedEntryOutputLocationTypeDef = TypedDict(
    "_ClientCreateAssociationBatchResponseFailedEntryOutputLocationTypeDef",
    {
        "S3Location": ClientCreateAssociationBatchResponseFailedEntryOutputLocationS3LocationTypeDef
    },
    total=False,
)


class ClientCreateAssociationBatchResponseFailedEntryOutputLocationTypeDef(
    _ClientCreateAssociationBatchResponseFailedEntryOutputLocationTypeDef
):
    """
    Type definition for `ClientCreateAssociationBatchResponseFailedEntry` `OutputLocation`

    An Amazon S3 bucket where you want to store the results of this request.

    - **S3Location** *(dict) --*

      An Amazon S3 bucket where you want to store the results of this request.

      - **OutputS3Region** *(string) --*

        (Deprecated) You can no longer specify this parameter. The system ignores it.
        Instead, Systems Manager automatically determines the Amazon S3 bucket region.

      - **OutputS3BucketName** *(string) --*

        The name of the Amazon S3 bucket.

      - **OutputS3KeyPrefix** *(string) --*

        The Amazon S3 bucket subfolder.
    """


_ClientCreateAssociationBatchResponseFailedEntryTargetsTypeDef = TypedDict(
    "_ClientCreateAssociationBatchResponseFailedEntryTargetsTypeDef",
    {"Key": str, "Values": List[str]},
    total=False,
)


class ClientCreateAssociationBatchResponseFailedEntryTargetsTypeDef(
    _ClientCreateAssociationBatchResponseFailedEntryTargetsTypeDef
):
    """
    Type definition for `ClientCreateAssociationBatchResponseFailedEntry` `Targets`

    An array of search criteria that targets instances using a Key,Value combination that
    you specify.

    Supported formats include the following.

    * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

    * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

    * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

    * (Maintenance window targets only)
    ``Key=resource-groups:Name,Values=*resource-group-name* ``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2*
    ``

    For example:

    *
    ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

    * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

    * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

    * (Maintenance window targets only)
    ``Key=resource-groups:Name,Values=ProductionResourceGroup``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE*
    ,*AWS::EC2::VPC* ``

    For information about how to send commands that target instances using ``Key,Value``
    parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
    <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
    in the *AWS Systems Manager User Guide* .

    - **Key** *(string) --*

      User-defined criteria for sending commands that target instances that meet the
      criteria.

    - **Values** *(list) --*

      User-defined criteria that maps to ``Key`` . For example, if you specified
      ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
      instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

      - *(string) --*
    """


_ClientCreateAssociationBatchResponseFailedEntryTypeDef = TypedDict(
    "_ClientCreateAssociationBatchResponseFailedEntryTypeDef",
    {
        "Name": str,
        "InstanceId": str,
        "Parameters": Dict[str, List[str]],
        "AutomationTargetParameterName": str,
        "DocumentVersion": str,
        "Targets": List[ClientCreateAssociationBatchResponseFailedEntryTargetsTypeDef],
        "ScheduleExpression": str,
        "OutputLocation": ClientCreateAssociationBatchResponseFailedEntryOutputLocationTypeDef,
        "AssociationName": str,
        "MaxErrors": str,
        "MaxConcurrency": str,
        "ComplianceSeverity": str,
    },
    total=False,
)


class ClientCreateAssociationBatchResponseFailedEntryTypeDef(
    _ClientCreateAssociationBatchResponseFailedEntryTypeDef
):
    """
    Type definition for `ClientCreateAssociationBatchResponseFailed` `Entry`

    The association.

    - **Name** *(string) --*

      The name of the SSM document that contains the configuration information for the
      instance. You can specify Command or Automation documents.

      You can specify AWS-predefined documents, documents you created, or a document that is
      shared with you from another account.

      For SSM documents that are shared with you from other AWS accounts, you must specify
      the complete SSM document ARN, in the following format:

       ``arn:aws:ssm:*region* :*account-id* :document/*document-name* ``

      For example:

       ``arn:aws:ssm:us-east-2:12345678912:document/My-Shared-Document``

      For AWS-predefined documents and SSM documents you created in your account, you only
      need to specify the document name. For example, ``AWS-ApplyPatchBaseline`` or
      ``My-Document`` .

    - **InstanceId** *(string) --*

      The ID of the instance.

    - **Parameters** *(dict) --*

      A description of the parameters for a document.

      - *(string) --*

        - *(list) --*

          - *(string) --*

    - **AutomationTargetParameterName** *(string) --*

      Specify the target for the association. This target is required for associations that
      use an Automation document and target resources by using rate controls.

    - **DocumentVersion** *(string) --*

      The document version.

    - **Targets** *(list) --*

      The instances targeted by the request.

      - *(dict) --*

        An array of search criteria that targets instances using a Key,Value combination that
        you specify.

        Supported formats include the following.

        * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

        * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

        * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

        * (Maintenance window targets only)
        ``Key=resource-groups:Name,Values=*resource-group-name* ``

        * (Maintenance window targets only)
        ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2*
        ``

        For example:

        *
        ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

        * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

        * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

        * (Maintenance window targets only)
        ``Key=resource-groups:Name,Values=ProductionResourceGroup``

        * (Maintenance window targets only)
        ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE*
        ,*AWS::EC2::VPC* ``

        For information about how to send commands that target instances using ``Key,Value``
        parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
        <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
        in the *AWS Systems Manager User Guide* .

        - **Key** *(string) --*

          User-defined criteria for sending commands that target instances that meet the
          criteria.

        - **Values** *(list) --*

          User-defined criteria that maps to ``Key`` . For example, if you specified
          ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
          instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

          - *(string) --*

    - **ScheduleExpression** *(string) --*

      A cron expression that specifies a schedule when the association runs.

    - **OutputLocation** *(dict) --*

      An Amazon S3 bucket where you want to store the results of this request.

      - **S3Location** *(dict) --*

        An Amazon S3 bucket where you want to store the results of this request.

        - **OutputS3Region** *(string) --*

          (Deprecated) You can no longer specify this parameter. The system ignores it.
          Instead, Systems Manager automatically determines the Amazon S3 bucket region.

        - **OutputS3BucketName** *(string) --*

          The name of the Amazon S3 bucket.

        - **OutputS3KeyPrefix** *(string) --*

          The Amazon S3 bucket subfolder.

    - **AssociationName** *(string) --*

      Specify a descriptive name for the association.

    - **MaxErrors** *(string) --*

      The number of errors that are allowed before the system stops sending requests to run
      the association on additional targets. You can specify either an absolute number of
      errors, for example 10, or a percentage of the target set, for example 10%. If you
      specify 3, for example, the system stops sending requests when the fourth error is
      received. If you specify 0, then the system stops sending requests after the first
      error is returned. If you run an association on 50 instances and set MaxError to 10%,
      then the system stops sending the request when the sixth error is received.

      Executions that are already running an association when MaxErrors is reached are
      allowed to complete, but some of these executions may fail as well. If you need to
      ensure that there won't be more than max-errors failed executions, set MaxConcurrency
      to 1 so that executions proceed one at a time.

    - **MaxConcurrency** *(string) --*

      The maximum number of targets allowed to run the association at the same time. You can
      specify a number, for example 10, or a percentage of the target set, for example 10%.
      The default value is 100%, which means all targets run the association at the same time.

      If a new instance starts and attempts to run an association while Systems Manager is
      running MaxConcurrency associations, the association is allowed to run. During the next
      association interval, the new instance will process its association within the limit
      specified for MaxConcurrency.

    - **ComplianceSeverity** *(string) --*

      The severity level to assign to the association.
    """


_ClientCreateAssociationBatchResponseFailedTypeDef = TypedDict(
    "_ClientCreateAssociationBatchResponseFailedTypeDef",
    {
        "Entry": ClientCreateAssociationBatchResponseFailedEntryTypeDef,
        "Message": str,
        "Fault": str,
    },
    total=False,
)


class ClientCreateAssociationBatchResponseFailedTypeDef(
    _ClientCreateAssociationBatchResponseFailedTypeDef
):
    """
    Type definition for `ClientCreateAssociationBatchResponse` `Failed`

    Describes a failed association.

    - **Entry** *(dict) --*

      The association.

      - **Name** *(string) --*

        The name of the SSM document that contains the configuration information for the
        instance. You can specify Command or Automation documents.

        You can specify AWS-predefined documents, documents you created, or a document that is
        shared with you from another account.

        For SSM documents that are shared with you from other AWS accounts, you must specify
        the complete SSM document ARN, in the following format:

         ``arn:aws:ssm:*region* :*account-id* :document/*document-name* ``

        For example:

         ``arn:aws:ssm:us-east-2:12345678912:document/My-Shared-Document``

        For AWS-predefined documents and SSM documents you created in your account, you only
        need to specify the document name. For example, ``AWS-ApplyPatchBaseline`` or
        ``My-Document`` .

      - **InstanceId** *(string) --*

        The ID of the instance.

      - **Parameters** *(dict) --*

        A description of the parameters for a document.

        - *(string) --*

          - *(list) --*

            - *(string) --*

      - **AutomationTargetParameterName** *(string) --*

        Specify the target for the association. This target is required for associations that
        use an Automation document and target resources by using rate controls.

      - **DocumentVersion** *(string) --*

        The document version.

      - **Targets** *(list) --*

        The instances targeted by the request.

        - *(dict) --*

          An array of search criteria that targets instances using a Key,Value combination that
          you specify.

          Supported formats include the following.

          * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

          * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

          * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

          * (Maintenance window targets only)
          ``Key=resource-groups:Name,Values=*resource-group-name* ``

          * (Maintenance window targets only)
          ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2*
          ``

          For example:

          *
          ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

          * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

          * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

          * (Maintenance window targets only)
          ``Key=resource-groups:Name,Values=ProductionResourceGroup``

          * (Maintenance window targets only)
          ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE*
          ,*AWS::EC2::VPC* ``

          For information about how to send commands that target instances using ``Key,Value``
          parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
          <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
          in the *AWS Systems Manager User Guide* .

          - **Key** *(string) --*

            User-defined criteria for sending commands that target instances that meet the
            criteria.

          - **Values** *(list) --*

            User-defined criteria that maps to ``Key`` . For example, if you specified
            ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
            instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

            - *(string) --*

      - **ScheduleExpression** *(string) --*

        A cron expression that specifies a schedule when the association runs.

      - **OutputLocation** *(dict) --*

        An Amazon S3 bucket where you want to store the results of this request.

        - **S3Location** *(dict) --*

          An Amazon S3 bucket where you want to store the results of this request.

          - **OutputS3Region** *(string) --*

            (Deprecated) You can no longer specify this parameter. The system ignores it.
            Instead, Systems Manager automatically determines the Amazon S3 bucket region.

          - **OutputS3BucketName** *(string) --*

            The name of the Amazon S3 bucket.

          - **OutputS3KeyPrefix** *(string) --*

            The Amazon S3 bucket subfolder.

      - **AssociationName** *(string) --*

        Specify a descriptive name for the association.

      - **MaxErrors** *(string) --*

        The number of errors that are allowed before the system stops sending requests to run
        the association on additional targets. You can specify either an absolute number of
        errors, for example 10, or a percentage of the target set, for example 10%. If you
        specify 3, for example, the system stops sending requests when the fourth error is
        received. If you specify 0, then the system stops sending requests after the first
        error is returned. If you run an association on 50 instances and set MaxError to 10%,
        then the system stops sending the request when the sixth error is received.

        Executions that are already running an association when MaxErrors is reached are
        allowed to complete, but some of these executions may fail as well. If you need to
        ensure that there won't be more than max-errors failed executions, set MaxConcurrency
        to 1 so that executions proceed one at a time.

      - **MaxConcurrency** *(string) --*

        The maximum number of targets allowed to run the association at the same time. You can
        specify a number, for example 10, or a percentage of the target set, for example 10%.
        The default value is 100%, which means all targets run the association at the same time.

        If a new instance starts and attempts to run an association while Systems Manager is
        running MaxConcurrency associations, the association is allowed to run. During the next
        association interval, the new instance will process its association within the limit
        specified for MaxConcurrency.

      - **ComplianceSeverity** *(string) --*

        The severity level to assign to the association.

    - **Message** *(string) --*

      A description of the failure.

    - **Fault** *(string) --*

      The source of the failure.
    """


_ClientCreateAssociationBatchResponseSuccessfulOutputLocationS3LocationTypeDef = TypedDict(
    "_ClientCreateAssociationBatchResponseSuccessfulOutputLocationS3LocationTypeDef",
    {"OutputS3Region": str, "OutputS3BucketName": str, "OutputS3KeyPrefix": str},
    total=False,
)


class ClientCreateAssociationBatchResponseSuccessfulOutputLocationS3LocationTypeDef(
    _ClientCreateAssociationBatchResponseSuccessfulOutputLocationS3LocationTypeDef
):
    """
    Type definition for `ClientCreateAssociationBatchResponseSuccessfulOutputLocation` `S3Location`

    An Amazon S3 bucket where you want to store the results of this request.

    - **OutputS3Region** *(string) --*

      (Deprecated) You can no longer specify this parameter. The system ignores it.
      Instead, Systems Manager automatically determines the Amazon S3 bucket region.

    - **OutputS3BucketName** *(string) --*

      The name of the Amazon S3 bucket.

    - **OutputS3KeyPrefix** *(string) --*

      The Amazon S3 bucket subfolder.
    """


_ClientCreateAssociationBatchResponseSuccessfulOutputLocationTypeDef = TypedDict(
    "_ClientCreateAssociationBatchResponseSuccessfulOutputLocationTypeDef",
    {
        "S3Location": ClientCreateAssociationBatchResponseSuccessfulOutputLocationS3LocationTypeDef
    },
    total=False,
)


class ClientCreateAssociationBatchResponseSuccessfulOutputLocationTypeDef(
    _ClientCreateAssociationBatchResponseSuccessfulOutputLocationTypeDef
):
    """
    Type definition for `ClientCreateAssociationBatchResponseSuccessful` `OutputLocation`

    An Amazon S3 bucket where you want to store the output details of the request.

    - **S3Location** *(dict) --*

      An Amazon S3 bucket where you want to store the results of this request.

      - **OutputS3Region** *(string) --*

        (Deprecated) You can no longer specify this parameter. The system ignores it.
        Instead, Systems Manager automatically determines the Amazon S3 bucket region.

      - **OutputS3BucketName** *(string) --*

        The name of the Amazon S3 bucket.

      - **OutputS3KeyPrefix** *(string) --*

        The Amazon S3 bucket subfolder.
    """


_ClientCreateAssociationBatchResponseSuccessfulOverviewTypeDef = TypedDict(
    "_ClientCreateAssociationBatchResponseSuccessfulOverviewTypeDef",
    {
        "Status": str,
        "DetailedStatus": str,
        "AssociationStatusAggregatedCount": Dict[str, int],
    },
    total=False,
)


class ClientCreateAssociationBatchResponseSuccessfulOverviewTypeDef(
    _ClientCreateAssociationBatchResponseSuccessfulOverviewTypeDef
):
    """
    Type definition for `ClientCreateAssociationBatchResponseSuccessful` `Overview`

    Information about the association.

    - **Status** *(string) --*

      The status of the association. Status can be: Pending, Success, or Failed.

    - **DetailedStatus** *(string) --*

      A detailed status of the association.

    - **AssociationStatusAggregatedCount** *(dict) --*

      Returns the number of targets for the association status. For example, if you created
      an association with two instances, and one of them was successful, this would return
      the count of instances by status.

      - *(string) --*

        - *(integer) --*
    """


_ClientCreateAssociationBatchResponseSuccessfulStatusTypeDef = TypedDict(
    "_ClientCreateAssociationBatchResponseSuccessfulStatusTypeDef",
    {"Date": datetime, "Name": str, "Message": str, "AdditionalInfo": str},
    total=False,
)


class ClientCreateAssociationBatchResponseSuccessfulStatusTypeDef(
    _ClientCreateAssociationBatchResponseSuccessfulStatusTypeDef
):
    """
    Type definition for `ClientCreateAssociationBatchResponseSuccessful` `Status`

    The association status.

    - **Date** *(datetime) --*

      The date when the status changed.

    - **Name** *(string) --*

      The status.

    - **Message** *(string) --*

      The reason for the status.

    - **AdditionalInfo** *(string) --*

      A user-defined string.
    """


_ClientCreateAssociationBatchResponseSuccessfulTargetsTypeDef = TypedDict(
    "_ClientCreateAssociationBatchResponseSuccessfulTargetsTypeDef",
    {"Key": str, "Values": List[str]},
    total=False,
)


class ClientCreateAssociationBatchResponseSuccessfulTargetsTypeDef(
    _ClientCreateAssociationBatchResponseSuccessfulTargetsTypeDef
):
    """
    Type definition for `ClientCreateAssociationBatchResponseSuccessful` `Targets`

    An array of search criteria that targets instances using a Key,Value combination that
    you specify.

    Supported formats include the following.

    * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

    * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

    * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

    * (Maintenance window targets only)
    ``Key=resource-groups:Name,Values=*resource-group-name* ``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

    For example:

    * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

    * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

    * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

    * (Maintenance window targets only)
    ``Key=resource-groups:Name,Values=ProductionResourceGroup``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC*
    ``

    For information about how to send commands that target instances using ``Key,Value``
    parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
    <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
    in the *AWS Systems Manager User Guide* .

    - **Key** *(string) --*

      User-defined criteria for sending commands that target instances that meet the
      criteria.

    - **Values** *(list) --*

      User-defined criteria that maps to ``Key`` . For example, if you specified
      ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
      instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

      - *(string) --*
    """


_ClientCreateAssociationBatchResponseSuccessfulTypeDef = TypedDict(
    "_ClientCreateAssociationBatchResponseSuccessfulTypeDef",
    {
        "Name": str,
        "InstanceId": str,
        "AssociationVersion": str,
        "Date": datetime,
        "LastUpdateAssociationDate": datetime,
        "Status": ClientCreateAssociationBatchResponseSuccessfulStatusTypeDef,
        "Overview": ClientCreateAssociationBatchResponseSuccessfulOverviewTypeDef,
        "DocumentVersion": str,
        "AutomationTargetParameterName": str,
        "Parameters": Dict[str, List[str]],
        "AssociationId": str,
        "Targets": List[ClientCreateAssociationBatchResponseSuccessfulTargetsTypeDef],
        "ScheduleExpression": str,
        "OutputLocation": ClientCreateAssociationBatchResponseSuccessfulOutputLocationTypeDef,
        "LastExecutionDate": datetime,
        "LastSuccessfulExecutionDate": datetime,
        "AssociationName": str,
        "MaxErrors": str,
        "MaxConcurrency": str,
        "ComplianceSeverity": str,
    },
    total=False,
)


class ClientCreateAssociationBatchResponseSuccessfulTypeDef(
    _ClientCreateAssociationBatchResponseSuccessfulTypeDef
):
    """
    Type definition for `ClientCreateAssociationBatchResponse` `Successful`

    Describes the parameters for a document.

    - **Name** *(string) --*

      The name of the Systems Manager document.

    - **InstanceId** *(string) --*

      The ID of the instance.

    - **AssociationVersion** *(string) --*

      The association version.

    - **Date** *(datetime) --*

      The date when the association was made.

    - **LastUpdateAssociationDate** *(datetime) --*

      The date when the association was last updated.

    - **Status** *(dict) --*

      The association status.

      - **Date** *(datetime) --*

        The date when the status changed.

      - **Name** *(string) --*

        The status.

      - **Message** *(string) --*

        The reason for the status.

      - **AdditionalInfo** *(string) --*

        A user-defined string.

    - **Overview** *(dict) --*

      Information about the association.

      - **Status** *(string) --*

        The status of the association. Status can be: Pending, Success, or Failed.

      - **DetailedStatus** *(string) --*

        A detailed status of the association.

      - **AssociationStatusAggregatedCount** *(dict) --*

        Returns the number of targets for the association status. For example, if you created
        an association with two instances, and one of them was successful, this would return
        the count of instances by status.

        - *(string) --*

          - *(integer) --*

    - **DocumentVersion** *(string) --*

      The document version.

    - **AutomationTargetParameterName** *(string) --*

      Specify the target for the association. This target is required for associations that use
      an Automation document and target resources by using rate controls.

    - **Parameters** *(dict) --*

      A description of the parameters for a document.

      - *(string) --*

        - *(list) --*

          - *(string) --*

    - **AssociationId** *(string) --*

      The association ID.

    - **Targets** *(list) --*

      The instances targeted by the request.

      - *(dict) --*

        An array of search criteria that targets instances using a Key,Value combination that
        you specify.

        Supported formats include the following.

        * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

        * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

        * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

        * (Maintenance window targets only)
        ``Key=resource-groups:Name,Values=*resource-group-name* ``

        * (Maintenance window targets only)
        ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

        For example:

        * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

        * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

        * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

        * (Maintenance window targets only)
        ``Key=resource-groups:Name,Values=ProductionResourceGroup``

        * (Maintenance window targets only)
        ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC*
        ``

        For information about how to send commands that target instances using ``Key,Value``
        parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
        <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
        in the *AWS Systems Manager User Guide* .

        - **Key** *(string) --*

          User-defined criteria for sending commands that target instances that meet the
          criteria.

        - **Values** *(list) --*

          User-defined criteria that maps to ``Key`` . For example, if you specified
          ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
          instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

          - *(string) --*

    - **ScheduleExpression** *(string) --*

      A cron expression that specifies a schedule when the association runs.

    - **OutputLocation** *(dict) --*

      An Amazon S3 bucket where you want to store the output details of the request.

      - **S3Location** *(dict) --*

        An Amazon S3 bucket where you want to store the results of this request.

        - **OutputS3Region** *(string) --*

          (Deprecated) You can no longer specify this parameter. The system ignores it.
          Instead, Systems Manager automatically determines the Amazon S3 bucket region.

        - **OutputS3BucketName** *(string) --*

          The name of the Amazon S3 bucket.

        - **OutputS3KeyPrefix** *(string) --*

          The Amazon S3 bucket subfolder.

    - **LastExecutionDate** *(datetime) --*

      The date on which the association was last run.

    - **LastSuccessfulExecutionDate** *(datetime) --*

      The last date on which the association was successfully run.

    - **AssociationName** *(string) --*

      The association name.

    - **MaxErrors** *(string) --*

      The number of errors that are allowed before the system stops sending requests to run the
      association on additional targets. You can specify either an absolute number of errors,
      for example 10, or a percentage of the target set, for example 10%. If you specify 3, for
      example, the system stops sending requests when the fourth error is received. If you
      specify 0, then the system stops sending requests after the first error is returned. If
      you run an association on 50 instances and set MaxError to 10%, then the system stops
      sending the request when the sixth error is received.

      Executions that are already running an association when MaxErrors is reached are allowed
      to complete, but some of these executions may fail as well. If you need to ensure that
      there won't be more than max-errors failed executions, set MaxConcurrency to 1 so that
      executions proceed one at a time.

    - **MaxConcurrency** *(string) --*

      The maximum number of targets allowed to run the association at the same time. You can
      specify a number, for example 10, or a percentage of the target set, for example 10%. The
      default value is 100%, which means all targets run the association at the same time.

      If a new instance starts and attempts to run an association while Systems Manager is
      running MaxConcurrency associations, the association is allowed to run. During the next
      association interval, the new instance will process its association within the limit
      specified for MaxConcurrency.

    - **ComplianceSeverity** *(string) --*

      The severity level that is assigned to the association.
    """


_ClientCreateAssociationBatchResponseTypeDef = TypedDict(
    "_ClientCreateAssociationBatchResponseTypeDef",
    {
        "Successful": List[ClientCreateAssociationBatchResponseSuccessfulTypeDef],
        "Failed": List[ClientCreateAssociationBatchResponseFailedTypeDef],
    },
    total=False,
)


class ClientCreateAssociationBatchResponseTypeDef(
    _ClientCreateAssociationBatchResponseTypeDef
):
    """
    Type definition for `ClientCreateAssociationBatch` `Response`

    - **Successful** *(list) --*

      Information about the associations that succeeded.

      - *(dict) --*

        Describes the parameters for a document.

        - **Name** *(string) --*

          The name of the Systems Manager document.

        - **InstanceId** *(string) --*

          The ID of the instance.

        - **AssociationVersion** *(string) --*

          The association version.

        - **Date** *(datetime) --*

          The date when the association was made.

        - **LastUpdateAssociationDate** *(datetime) --*

          The date when the association was last updated.

        - **Status** *(dict) --*

          The association status.

          - **Date** *(datetime) --*

            The date when the status changed.

          - **Name** *(string) --*

            The status.

          - **Message** *(string) --*

            The reason for the status.

          - **AdditionalInfo** *(string) --*

            A user-defined string.

        - **Overview** *(dict) --*

          Information about the association.

          - **Status** *(string) --*

            The status of the association. Status can be: Pending, Success, or Failed.

          - **DetailedStatus** *(string) --*

            A detailed status of the association.

          - **AssociationStatusAggregatedCount** *(dict) --*

            Returns the number of targets for the association status. For example, if you created
            an association with two instances, and one of them was successful, this would return
            the count of instances by status.

            - *(string) --*

              - *(integer) --*

        - **DocumentVersion** *(string) --*

          The document version.

        - **AutomationTargetParameterName** *(string) --*

          Specify the target for the association. This target is required for associations that use
          an Automation document and target resources by using rate controls.

        - **Parameters** *(dict) --*

          A description of the parameters for a document.

          - *(string) --*

            - *(list) --*

              - *(string) --*

        - **AssociationId** *(string) --*

          The association ID.

        - **Targets** *(list) --*

          The instances targeted by the request.

          - *(dict) --*

            An array of search criteria that targets instances using a Key,Value combination that
            you specify.

            Supported formats include the following.

            * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

            * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

            * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

            * (Maintenance window targets only)
            ``Key=resource-groups:Name,Values=*resource-group-name* ``

            * (Maintenance window targets only)
            ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

            For example:

            * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

            * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

            * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

            * (Maintenance window targets only)
            ``Key=resource-groups:Name,Values=ProductionResourceGroup``

            * (Maintenance window targets only)
            ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC*
            ``

            For information about how to send commands that target instances using ``Key,Value``
            parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
            <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
            in the *AWS Systems Manager User Guide* .

            - **Key** *(string) --*

              User-defined criteria for sending commands that target instances that meet the
              criteria.

            - **Values** *(list) --*

              User-defined criteria that maps to ``Key`` . For example, if you specified
              ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
              instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

              - *(string) --*

        - **ScheduleExpression** *(string) --*

          A cron expression that specifies a schedule when the association runs.

        - **OutputLocation** *(dict) --*

          An Amazon S3 bucket where you want to store the output details of the request.

          - **S3Location** *(dict) --*

            An Amazon S3 bucket where you want to store the results of this request.

            - **OutputS3Region** *(string) --*

              (Deprecated) You can no longer specify this parameter. The system ignores it.
              Instead, Systems Manager automatically determines the Amazon S3 bucket region.

            - **OutputS3BucketName** *(string) --*

              The name of the Amazon S3 bucket.

            - **OutputS3KeyPrefix** *(string) --*

              The Amazon S3 bucket subfolder.

        - **LastExecutionDate** *(datetime) --*

          The date on which the association was last run.

        - **LastSuccessfulExecutionDate** *(datetime) --*

          The last date on which the association was successfully run.

        - **AssociationName** *(string) --*

          The association name.

        - **MaxErrors** *(string) --*

          The number of errors that are allowed before the system stops sending requests to run the
          association on additional targets. You can specify either an absolute number of errors,
          for example 10, or a percentage of the target set, for example 10%. If you specify 3, for
          example, the system stops sending requests when the fourth error is received. If you
          specify 0, then the system stops sending requests after the first error is returned. If
          you run an association on 50 instances and set MaxError to 10%, then the system stops
          sending the request when the sixth error is received.

          Executions that are already running an association when MaxErrors is reached are allowed
          to complete, but some of these executions may fail as well. If you need to ensure that
          there won't be more than max-errors failed executions, set MaxConcurrency to 1 so that
          executions proceed one at a time.

        - **MaxConcurrency** *(string) --*

          The maximum number of targets allowed to run the association at the same time. You can
          specify a number, for example 10, or a percentage of the target set, for example 10%. The
          default value is 100%, which means all targets run the association at the same time.

          If a new instance starts and attempts to run an association while Systems Manager is
          running MaxConcurrency associations, the association is allowed to run. During the next
          association interval, the new instance will process its association within the limit
          specified for MaxConcurrency.

        - **ComplianceSeverity** *(string) --*

          The severity level that is assigned to the association.

    - **Failed** *(list) --*

      Information about the associations that failed.

      - *(dict) --*

        Describes a failed association.

        - **Entry** *(dict) --*

          The association.

          - **Name** *(string) --*

            The name of the SSM document that contains the configuration information for the
            instance. You can specify Command or Automation documents.

            You can specify AWS-predefined documents, documents you created, or a document that is
            shared with you from another account.

            For SSM documents that are shared with you from other AWS accounts, you must specify
            the complete SSM document ARN, in the following format:

             ``arn:aws:ssm:*region* :*account-id* :document/*document-name* ``

            For example:

             ``arn:aws:ssm:us-east-2:12345678912:document/My-Shared-Document``

            For AWS-predefined documents and SSM documents you created in your account, you only
            need to specify the document name. For example, ``AWS-ApplyPatchBaseline`` or
            ``My-Document`` .

          - **InstanceId** *(string) --*

            The ID of the instance.

          - **Parameters** *(dict) --*

            A description of the parameters for a document.

            - *(string) --*

              - *(list) --*

                - *(string) --*

          - **AutomationTargetParameterName** *(string) --*

            Specify the target for the association. This target is required for associations that
            use an Automation document and target resources by using rate controls.

          - **DocumentVersion** *(string) --*

            The document version.

          - **Targets** *(list) --*

            The instances targeted by the request.

            - *(dict) --*

              An array of search criteria that targets instances using a Key,Value combination that
              you specify.

              Supported formats include the following.

              * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

              * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

              * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

              * (Maintenance window targets only)
              ``Key=resource-groups:Name,Values=*resource-group-name* ``

              * (Maintenance window targets only)
              ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2*
              ``

              For example:

              *
              ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

              * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

              * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

              * (Maintenance window targets only)
              ``Key=resource-groups:Name,Values=ProductionResourceGroup``

              * (Maintenance window targets only)
              ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE*
              ,*AWS::EC2::VPC* ``

              For information about how to send commands that target instances using ``Key,Value``
              parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
              <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
              in the *AWS Systems Manager User Guide* .

              - **Key** *(string) --*

                User-defined criteria for sending commands that target instances that meet the
                criteria.

              - **Values** *(list) --*

                User-defined criteria that maps to ``Key`` . For example, if you specified
                ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
                instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

                - *(string) --*

          - **ScheduleExpression** *(string) --*

            A cron expression that specifies a schedule when the association runs.

          - **OutputLocation** *(dict) --*

            An Amazon S3 bucket where you want to store the results of this request.

            - **S3Location** *(dict) --*

              An Amazon S3 bucket where you want to store the results of this request.

              - **OutputS3Region** *(string) --*

                (Deprecated) You can no longer specify this parameter. The system ignores it.
                Instead, Systems Manager automatically determines the Amazon S3 bucket region.

              - **OutputS3BucketName** *(string) --*

                The name of the Amazon S3 bucket.

              - **OutputS3KeyPrefix** *(string) --*

                The Amazon S3 bucket subfolder.

          - **AssociationName** *(string) --*

            Specify a descriptive name for the association.

          - **MaxErrors** *(string) --*

            The number of errors that are allowed before the system stops sending requests to run
            the association on additional targets. You can specify either an absolute number of
            errors, for example 10, or a percentage of the target set, for example 10%. If you
            specify 3, for example, the system stops sending requests when the fourth error is
            received. If you specify 0, then the system stops sending requests after the first
            error is returned. If you run an association on 50 instances and set MaxError to 10%,
            then the system stops sending the request when the sixth error is received.

            Executions that are already running an association when MaxErrors is reached are
            allowed to complete, but some of these executions may fail as well. If you need to
            ensure that there won't be more than max-errors failed executions, set MaxConcurrency
            to 1 so that executions proceed one at a time.

          - **MaxConcurrency** *(string) --*

            The maximum number of targets allowed to run the association at the same time. You can
            specify a number, for example 10, or a percentage of the target set, for example 10%.
            The default value is 100%, which means all targets run the association at the same time.

            If a new instance starts and attempts to run an association while Systems Manager is
            running MaxConcurrency associations, the association is allowed to run. During the next
            association interval, the new instance will process its association within the limit
            specified for MaxConcurrency.

          - **ComplianceSeverity** *(string) --*

            The severity level to assign to the association.

        - **Message** *(string) --*

          A description of the failure.

        - **Fault** *(string) --*

          The source of the failure.
    """


_ClientCreateAssociationOutputLocationS3LocationTypeDef = TypedDict(
    "_ClientCreateAssociationOutputLocationS3LocationTypeDef",
    {"OutputS3Region": str, "OutputS3BucketName": str, "OutputS3KeyPrefix": str},
    total=False,
)


class ClientCreateAssociationOutputLocationS3LocationTypeDef(
    _ClientCreateAssociationOutputLocationS3LocationTypeDef
):
    """
    Type definition for `ClientCreateAssociationOutputLocation` `S3Location`

    An Amazon S3 bucket where you want to store the results of this request.

    - **OutputS3Region** *(string) --*

      (Deprecated) You can no longer specify this parameter. The system ignores it. Instead,
      Systems Manager automatically determines the Amazon S3 bucket region.

    - **OutputS3BucketName** *(string) --*

      The name of the Amazon S3 bucket.

    - **OutputS3KeyPrefix** *(string) --*

      The Amazon S3 bucket subfolder.
    """


_ClientCreateAssociationOutputLocationTypeDef = TypedDict(
    "_ClientCreateAssociationOutputLocationTypeDef",
    {"S3Location": ClientCreateAssociationOutputLocationS3LocationTypeDef},
    total=False,
)


class ClientCreateAssociationOutputLocationTypeDef(
    _ClientCreateAssociationOutputLocationTypeDef
):
    """
    Type definition for `ClientCreateAssociation` `OutputLocation`

    An Amazon S3 bucket where you want to store the output details of the request.

    - **S3Location** *(dict) --*

      An Amazon S3 bucket where you want to store the results of this request.

      - **OutputS3Region** *(string) --*

        (Deprecated) You can no longer specify this parameter. The system ignores it. Instead,
        Systems Manager automatically determines the Amazon S3 bucket region.

      - **OutputS3BucketName** *(string) --*

        The name of the Amazon S3 bucket.

      - **OutputS3KeyPrefix** *(string) --*

        The Amazon S3 bucket subfolder.
    """


_ClientCreateAssociationResponseAssociationDescriptionOutputLocationS3LocationTypeDef = TypedDict(
    "_ClientCreateAssociationResponseAssociationDescriptionOutputLocationS3LocationTypeDef",
    {"OutputS3Region": str, "OutputS3BucketName": str, "OutputS3KeyPrefix": str},
    total=False,
)


class ClientCreateAssociationResponseAssociationDescriptionOutputLocationS3LocationTypeDef(
    _ClientCreateAssociationResponseAssociationDescriptionOutputLocationS3LocationTypeDef
):
    """
    Type definition for `ClientCreateAssociationResponseAssociationDescriptionOutputLocation` `S3Location`

    An Amazon S3 bucket where you want to store the results of this request.

    - **OutputS3Region** *(string) --*

      (Deprecated) You can no longer specify this parameter. The system ignores it. Instead,
      Systems Manager automatically determines the Amazon S3 bucket region.

    - **OutputS3BucketName** *(string) --*

      The name of the Amazon S3 bucket.

    - **OutputS3KeyPrefix** *(string) --*

      The Amazon S3 bucket subfolder.
    """


_ClientCreateAssociationResponseAssociationDescriptionOutputLocationTypeDef = TypedDict(
    "_ClientCreateAssociationResponseAssociationDescriptionOutputLocationTypeDef",
    {
        "S3Location": ClientCreateAssociationResponseAssociationDescriptionOutputLocationS3LocationTypeDef
    },
    total=False,
)


class ClientCreateAssociationResponseAssociationDescriptionOutputLocationTypeDef(
    _ClientCreateAssociationResponseAssociationDescriptionOutputLocationTypeDef
):
    """
    Type definition for `ClientCreateAssociationResponseAssociationDescription` `OutputLocation`

    An Amazon S3 bucket where you want to store the output details of the request.

    - **S3Location** *(dict) --*

      An Amazon S3 bucket where you want to store the results of this request.

      - **OutputS3Region** *(string) --*

        (Deprecated) You can no longer specify this parameter. The system ignores it. Instead,
        Systems Manager automatically determines the Amazon S3 bucket region.

      - **OutputS3BucketName** *(string) --*

        The name of the Amazon S3 bucket.

      - **OutputS3KeyPrefix** *(string) --*

        The Amazon S3 bucket subfolder.
    """


_ClientCreateAssociationResponseAssociationDescriptionOverviewTypeDef = TypedDict(
    "_ClientCreateAssociationResponseAssociationDescriptionOverviewTypeDef",
    {
        "Status": str,
        "DetailedStatus": str,
        "AssociationStatusAggregatedCount": Dict[str, int],
    },
    total=False,
)


class ClientCreateAssociationResponseAssociationDescriptionOverviewTypeDef(
    _ClientCreateAssociationResponseAssociationDescriptionOverviewTypeDef
):
    """
    Type definition for `ClientCreateAssociationResponseAssociationDescription` `Overview`

    Information about the association.

    - **Status** *(string) --*

      The status of the association. Status can be: Pending, Success, or Failed.

    - **DetailedStatus** *(string) --*

      A detailed status of the association.

    - **AssociationStatusAggregatedCount** *(dict) --*

      Returns the number of targets for the association status. For example, if you created an
      association with two instances, and one of them was successful, this would return the
      count of instances by status.

      - *(string) --*

        - *(integer) --*
    """


_ClientCreateAssociationResponseAssociationDescriptionStatusTypeDef = TypedDict(
    "_ClientCreateAssociationResponseAssociationDescriptionStatusTypeDef",
    {"Date": datetime, "Name": str, "Message": str, "AdditionalInfo": str},
    total=False,
)


class ClientCreateAssociationResponseAssociationDescriptionStatusTypeDef(
    _ClientCreateAssociationResponseAssociationDescriptionStatusTypeDef
):
    """
    Type definition for `ClientCreateAssociationResponseAssociationDescription` `Status`

    The association status.

    - **Date** *(datetime) --*

      The date when the status changed.

    - **Name** *(string) --*

      The status.

    - **Message** *(string) --*

      The reason for the status.

    - **AdditionalInfo** *(string) --*

      A user-defined string.
    """


_ClientCreateAssociationResponseAssociationDescriptionTargetsTypeDef = TypedDict(
    "_ClientCreateAssociationResponseAssociationDescriptionTargetsTypeDef",
    {"Key": str, "Values": List[str]},
    total=False,
)


class ClientCreateAssociationResponseAssociationDescriptionTargetsTypeDef(
    _ClientCreateAssociationResponseAssociationDescriptionTargetsTypeDef
):
    """
    Type definition for `ClientCreateAssociationResponseAssociationDescription` `Targets`

    An array of search criteria that targets instances using a Key,Value combination that you
    specify.

    Supported formats include the following.

    * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

    * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

    * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

    * (Maintenance window targets only)
    ``Key=resource-groups:Name,Values=*resource-group-name* ``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

    For example:

    * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

    * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

    * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

    * (Maintenance window targets only)
    ``Key=resource-groups:Name,Values=ProductionResourceGroup``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC* ``

    For information about how to send commands that target instances using ``Key,Value``
    parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
    <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
    in the *AWS Systems Manager User Guide* .

    - **Key** *(string) --*

      User-defined criteria for sending commands that target instances that meet the criteria.

    - **Values** *(list) --*

      User-defined criteria that maps to ``Key`` . For example, if you specified
      ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
      instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

      - *(string) --*
    """


_ClientCreateAssociationResponseAssociationDescriptionTypeDef = TypedDict(
    "_ClientCreateAssociationResponseAssociationDescriptionTypeDef",
    {
        "Name": str,
        "InstanceId": str,
        "AssociationVersion": str,
        "Date": datetime,
        "LastUpdateAssociationDate": datetime,
        "Status": ClientCreateAssociationResponseAssociationDescriptionStatusTypeDef,
        "Overview": ClientCreateAssociationResponseAssociationDescriptionOverviewTypeDef,
        "DocumentVersion": str,
        "AutomationTargetParameterName": str,
        "Parameters": Dict[str, List[str]],
        "AssociationId": str,
        "Targets": List[
            ClientCreateAssociationResponseAssociationDescriptionTargetsTypeDef
        ],
        "ScheduleExpression": str,
        "OutputLocation": ClientCreateAssociationResponseAssociationDescriptionOutputLocationTypeDef,
        "LastExecutionDate": datetime,
        "LastSuccessfulExecutionDate": datetime,
        "AssociationName": str,
        "MaxErrors": str,
        "MaxConcurrency": str,
        "ComplianceSeverity": str,
    },
    total=False,
)


class ClientCreateAssociationResponseAssociationDescriptionTypeDef(
    _ClientCreateAssociationResponseAssociationDescriptionTypeDef
):
    """
    Type definition for `ClientCreateAssociationResponse` `AssociationDescription`

    Information about the association.

    - **Name** *(string) --*

      The name of the Systems Manager document.

    - **InstanceId** *(string) --*

      The ID of the instance.

    - **AssociationVersion** *(string) --*

      The association version.

    - **Date** *(datetime) --*

      The date when the association was made.

    - **LastUpdateAssociationDate** *(datetime) --*

      The date when the association was last updated.

    - **Status** *(dict) --*

      The association status.

      - **Date** *(datetime) --*

        The date when the status changed.

      - **Name** *(string) --*

        The status.

      - **Message** *(string) --*

        The reason for the status.

      - **AdditionalInfo** *(string) --*

        A user-defined string.

    - **Overview** *(dict) --*

      Information about the association.

      - **Status** *(string) --*

        The status of the association. Status can be: Pending, Success, or Failed.

      - **DetailedStatus** *(string) --*

        A detailed status of the association.

      - **AssociationStatusAggregatedCount** *(dict) --*

        Returns the number of targets for the association status. For example, if you created an
        association with two instances, and one of them was successful, this would return the
        count of instances by status.

        - *(string) --*

          - *(integer) --*

    - **DocumentVersion** *(string) --*

      The document version.

    - **AutomationTargetParameterName** *(string) --*

      Specify the target for the association. This target is required for associations that use
      an Automation document and target resources by using rate controls.

    - **Parameters** *(dict) --*

      A description of the parameters for a document.

      - *(string) --*

        - *(list) --*

          - *(string) --*

    - **AssociationId** *(string) --*

      The association ID.

    - **Targets** *(list) --*

      The instances targeted by the request.

      - *(dict) --*

        An array of search criteria that targets instances using a Key,Value combination that you
        specify.

        Supported formats include the following.

        * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

        * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

        * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

        * (Maintenance window targets only)
        ``Key=resource-groups:Name,Values=*resource-group-name* ``

        * (Maintenance window targets only)
        ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

        For example:

        * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

        * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

        * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

        * (Maintenance window targets only)
        ``Key=resource-groups:Name,Values=ProductionResourceGroup``

        * (Maintenance window targets only)
        ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC* ``

        For information about how to send commands that target instances using ``Key,Value``
        parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
        <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
        in the *AWS Systems Manager User Guide* .

        - **Key** *(string) --*

          User-defined criteria for sending commands that target instances that meet the criteria.

        - **Values** *(list) --*

          User-defined criteria that maps to ``Key`` . For example, if you specified
          ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
          instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

          - *(string) --*

    - **ScheduleExpression** *(string) --*

      A cron expression that specifies a schedule when the association runs.

    - **OutputLocation** *(dict) --*

      An Amazon S3 bucket where you want to store the output details of the request.

      - **S3Location** *(dict) --*

        An Amazon S3 bucket where you want to store the results of this request.

        - **OutputS3Region** *(string) --*

          (Deprecated) You can no longer specify this parameter. The system ignores it. Instead,
          Systems Manager automatically determines the Amazon S3 bucket region.

        - **OutputS3BucketName** *(string) --*

          The name of the Amazon S3 bucket.

        - **OutputS3KeyPrefix** *(string) --*

          The Amazon S3 bucket subfolder.

    - **LastExecutionDate** *(datetime) --*

      The date on which the association was last run.

    - **LastSuccessfulExecutionDate** *(datetime) --*

      The last date on which the association was successfully run.

    - **AssociationName** *(string) --*

      The association name.

    - **MaxErrors** *(string) --*

      The number of errors that are allowed before the system stops sending requests to run the
      association on additional targets. You can specify either an absolute number of errors, for
      example 10, or a percentage of the target set, for example 10%. If you specify 3, for
      example, the system stops sending requests when the fourth error is received. If you
      specify 0, then the system stops sending requests after the first error is returned. If you
      run an association on 50 instances and set MaxError to 10%, then the system stops sending
      the request when the sixth error is received.

      Executions that are already running an association when MaxErrors is reached are allowed to
      complete, but some of these executions may fail as well. If you need to ensure that there
      won't be more than max-errors failed executions, set MaxConcurrency to 1 so that executions
      proceed one at a time.

    - **MaxConcurrency** *(string) --*

      The maximum number of targets allowed to run the association at the same time. You can
      specify a number, for example 10, or a percentage of the target set, for example 10%. The
      default value is 100%, which means all targets run the association at the same time.

      If a new instance starts and attempts to run an association while Systems Manager is
      running MaxConcurrency associations, the association is allowed to run. During the next
      association interval, the new instance will process its association within the limit
      specified for MaxConcurrency.

    - **ComplianceSeverity** *(string) --*

      The severity level that is assigned to the association.
    """


_ClientCreateAssociationResponseTypeDef = TypedDict(
    "_ClientCreateAssociationResponseTypeDef",
    {
        "AssociationDescription": ClientCreateAssociationResponseAssociationDescriptionTypeDef
    },
    total=False,
)


class ClientCreateAssociationResponseTypeDef(_ClientCreateAssociationResponseTypeDef):
    """
    Type definition for `ClientCreateAssociation` `Response`

    - **AssociationDescription** *(dict) --*

      Information about the association.

      - **Name** *(string) --*

        The name of the Systems Manager document.

      - **InstanceId** *(string) --*

        The ID of the instance.

      - **AssociationVersion** *(string) --*

        The association version.

      - **Date** *(datetime) --*

        The date when the association was made.

      - **LastUpdateAssociationDate** *(datetime) --*

        The date when the association was last updated.

      - **Status** *(dict) --*

        The association status.

        - **Date** *(datetime) --*

          The date when the status changed.

        - **Name** *(string) --*

          The status.

        - **Message** *(string) --*

          The reason for the status.

        - **AdditionalInfo** *(string) --*

          A user-defined string.

      - **Overview** *(dict) --*

        Information about the association.

        - **Status** *(string) --*

          The status of the association. Status can be: Pending, Success, or Failed.

        - **DetailedStatus** *(string) --*

          A detailed status of the association.

        - **AssociationStatusAggregatedCount** *(dict) --*

          Returns the number of targets for the association status. For example, if you created an
          association with two instances, and one of them was successful, this would return the
          count of instances by status.

          - *(string) --*

            - *(integer) --*

      - **DocumentVersion** *(string) --*

        The document version.

      - **AutomationTargetParameterName** *(string) --*

        Specify the target for the association. This target is required for associations that use
        an Automation document and target resources by using rate controls.

      - **Parameters** *(dict) --*

        A description of the parameters for a document.

        - *(string) --*

          - *(list) --*

            - *(string) --*

      - **AssociationId** *(string) --*

        The association ID.

      - **Targets** *(list) --*

        The instances targeted by the request.

        - *(dict) --*

          An array of search criteria that targets instances using a Key,Value combination that you
          specify.

          Supported formats include the following.

          * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

          * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

          * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

          * (Maintenance window targets only)
          ``Key=resource-groups:Name,Values=*resource-group-name* ``

          * (Maintenance window targets only)
          ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

          For example:

          * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

          * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

          * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

          * (Maintenance window targets only)
          ``Key=resource-groups:Name,Values=ProductionResourceGroup``

          * (Maintenance window targets only)
          ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC* ``

          For information about how to send commands that target instances using ``Key,Value``
          parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
          <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
          in the *AWS Systems Manager User Guide* .

          - **Key** *(string) --*

            User-defined criteria for sending commands that target instances that meet the criteria.

          - **Values** *(list) --*

            User-defined criteria that maps to ``Key`` . For example, if you specified
            ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
            instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

            - *(string) --*

      - **ScheduleExpression** *(string) --*

        A cron expression that specifies a schedule when the association runs.

      - **OutputLocation** *(dict) --*

        An Amazon S3 bucket where you want to store the output details of the request.

        - **S3Location** *(dict) --*

          An Amazon S3 bucket where you want to store the results of this request.

          - **OutputS3Region** *(string) --*

            (Deprecated) You can no longer specify this parameter. The system ignores it. Instead,
            Systems Manager automatically determines the Amazon S3 bucket region.

          - **OutputS3BucketName** *(string) --*

            The name of the Amazon S3 bucket.

          - **OutputS3KeyPrefix** *(string) --*

            The Amazon S3 bucket subfolder.

      - **LastExecutionDate** *(datetime) --*

        The date on which the association was last run.

      - **LastSuccessfulExecutionDate** *(datetime) --*

        The last date on which the association was successfully run.

      - **AssociationName** *(string) --*

        The association name.

      - **MaxErrors** *(string) --*

        The number of errors that are allowed before the system stops sending requests to run the
        association on additional targets. You can specify either an absolute number of errors, for
        example 10, or a percentage of the target set, for example 10%. If you specify 3, for
        example, the system stops sending requests when the fourth error is received. If you
        specify 0, then the system stops sending requests after the first error is returned. If you
        run an association on 50 instances and set MaxError to 10%, then the system stops sending
        the request when the sixth error is received.

        Executions that are already running an association when MaxErrors is reached are allowed to
        complete, but some of these executions may fail as well. If you need to ensure that there
        won't be more than max-errors failed executions, set MaxConcurrency to 1 so that executions
        proceed one at a time.

      - **MaxConcurrency** *(string) --*

        The maximum number of targets allowed to run the association at the same time. You can
        specify a number, for example 10, or a percentage of the target set, for example 10%. The
        default value is 100%, which means all targets run the association at the same time.

        If a new instance starts and attempts to run an association while Systems Manager is
        running MaxConcurrency associations, the association is allowed to run. During the next
        association interval, the new instance will process its association within the limit
        specified for MaxConcurrency.

      - **ComplianceSeverity** *(string) --*

        The severity level that is assigned to the association.
    """


_ClientCreateAssociationTargetsTypeDef = TypedDict(
    "_ClientCreateAssociationTargetsTypeDef",
    {"Key": str, "Values": List[str]},
    total=False,
)


class ClientCreateAssociationTargetsTypeDef(_ClientCreateAssociationTargetsTypeDef):
    """
    Type definition for `ClientCreateAssociation` `Targets`

    An array of search criteria that targets instances using a Key,Value combination that you
    specify.

    Supported formats include the following.

    * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

    * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

    * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

    * (Maintenance window targets only) ``Key=resource-groups:Name,Values=*resource-group-name* ``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

    For example:

    * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

    * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

    * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

    * (Maintenance window targets only) ``Key=resource-groups:Name,Values=ProductionResourceGroup``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC* ``

    For information about how to send commands that target instances using ``Key,Value``
    parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
    <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
    in the *AWS Systems Manager User Guide* .

    - **Key** *(string) --*

      User-defined criteria for sending commands that target instances that meet the criteria.

    - **Values** *(list) --*

      User-defined criteria that maps to ``Key`` . For example, if you specified ``tag:ServerRole``
      , you could specify ``value:WebServer`` to run a command on instances that include Amazon EC2
      tags of ``ServerRole,WebServer`` .

      - *(string) --*
    """


_ClientCreateDocumentAttachmentsTypeDef = TypedDict(
    "_ClientCreateDocumentAttachmentsTypeDef",
    {"Key": str, "Values": List[str], "Name": str},
    total=False,
)


class ClientCreateDocumentAttachmentsTypeDef(_ClientCreateDocumentAttachmentsTypeDef):
    """
    Type definition for `ClientCreateDocument` `Attachments`

    Identifying information about a document attachment, including the file name and a key-value
    pair that identifies the location of an attachment to a document.

    - **Key** *(string) --*

      The key of a key-value pair that identifies the location of an attachment to a document.

    - **Values** *(list) --*

      The value of a key-value pair that identifies the location of an attachment to a document.
      The format is the URL of the location of a document attachment, such as the URL of an Amazon
      S3 bucket.

      - *(string) --*

    - **Name** *(string) --*

      The name of the document attachment file.
    """


_ClientCreateDocumentResponseDocumentDescriptionAttachmentsInformationTypeDef = TypedDict(
    "_ClientCreateDocumentResponseDocumentDescriptionAttachmentsInformationTypeDef",
    {"Name": str},
    total=False,
)


class ClientCreateDocumentResponseDocumentDescriptionAttachmentsInformationTypeDef(
    _ClientCreateDocumentResponseDocumentDescriptionAttachmentsInformationTypeDef
):
    """
    Type definition for `ClientCreateDocumentResponseDocumentDescription` `AttachmentsInformation`

    An attribute of an attachment, such as the attachment name.

    - **Name** *(string) --*

      The name of the attachment.
    """


_ClientCreateDocumentResponseDocumentDescriptionParametersTypeDef = TypedDict(
    "_ClientCreateDocumentResponseDocumentDescriptionParametersTypeDef",
    {"Name": str, "Type": str, "Description": str, "DefaultValue": str},
    total=False,
)


class ClientCreateDocumentResponseDocumentDescriptionParametersTypeDef(
    _ClientCreateDocumentResponseDocumentDescriptionParametersTypeDef
):
    """
    Type definition for `ClientCreateDocumentResponseDocumentDescription` `Parameters`

    Parameters specified in a System Manager document that run on the server when the command
    is run.

    - **Name** *(string) --*

      The name of the parameter.

    - **Type** *(string) --*

      The type of parameter. The type can be either String or StringList.

    - **Description** *(string) --*

      A description of what the parameter does, how to use it, the default value, and whether
      or not the parameter is optional.

    - **DefaultValue** *(string) --*

      If specified, the default values for the parameters. Parameters without a default value
      are required. Parameters with a default value are optional.
    """


_ClientCreateDocumentResponseDocumentDescriptionTagsTypeDef = TypedDict(
    "_ClientCreateDocumentResponseDocumentDescriptionTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)


class ClientCreateDocumentResponseDocumentDescriptionTagsTypeDef(
    _ClientCreateDocumentResponseDocumentDescriptionTagsTypeDef
):
    """
    Type definition for `ClientCreateDocumentResponseDocumentDescription` `Tags`

    Metadata that you assign to your AWS resources. Tags enable you to categorize your
    resources in different ways, for example, by purpose, owner, or environment. In Systems
    Manager, you can apply tags to documents, managed instances, maintenance windows,
    Parameter Store parameters, and patch baselines.

    - **Key** *(string) --*

      The name of the tag.

    - **Value** *(string) --*

      The value of the tag.
    """


_ClientCreateDocumentResponseDocumentDescriptionTypeDef = TypedDict(
    "_ClientCreateDocumentResponseDocumentDescriptionTypeDef",
    {
        "Sha1": str,
        "Hash": str,
        "HashType": str,
        "Name": str,
        "VersionName": str,
        "Owner": str,
        "CreatedDate": datetime,
        "Status": str,
        "StatusInformation": str,
        "DocumentVersion": str,
        "Description": str,
        "Parameters": List[
            ClientCreateDocumentResponseDocumentDescriptionParametersTypeDef
        ],
        "PlatformTypes": List[str],
        "DocumentType": str,
        "SchemaVersion": str,
        "LatestVersion": str,
        "DefaultVersion": str,
        "DocumentFormat": str,
        "TargetType": str,
        "Tags": List[ClientCreateDocumentResponseDocumentDescriptionTagsTypeDef],
        "AttachmentsInformation": List[
            ClientCreateDocumentResponseDocumentDescriptionAttachmentsInformationTypeDef
        ],
    },
    total=False,
)


class ClientCreateDocumentResponseDocumentDescriptionTypeDef(
    _ClientCreateDocumentResponseDocumentDescriptionTypeDef
):
    """
    Type definition for `ClientCreateDocumentResponse` `DocumentDescription`

    Information about the Systems Manager document.

    - **Sha1** *(string) --*

      The SHA1 hash of the document, which you can use for verification.

    - **Hash** *(string) --*

      The Sha256 or Sha1 hash created by the system when the document was created.

      .. note::

        Sha1 hashes have been deprecated.

    - **HashType** *(string) --*

      The hash type of the document. Valid values include ``Sha256`` or ``Sha1`` .

      .. note::

        Sha1 hashes have been deprecated.

    - **Name** *(string) --*

      The name of the Systems Manager document.

    - **VersionName** *(string) --*

      The version of the artifact associated with the document.

    - **Owner** *(string) --*

      The AWS user account that created the document.

    - **CreatedDate** *(datetime) --*

      The date when the document was created.

    - **Status** *(string) --*

      The status of the Systems Manager document.

    - **StatusInformation** *(string) --*

      A message returned by AWS Systems Manager that explains the ``Status`` value. For example,
      a ``Failed`` status might be explained by the ``StatusInformation`` message, "The specified
      S3 bucket does not exist. Verify that the URL of the S3 bucket is correct."

    - **DocumentVersion** *(string) --*

      The document version.

    - **Description** *(string) --*

      A description of the document.

    - **Parameters** *(list) --*

      A description of the parameters for a document.

      - *(dict) --*

        Parameters specified in a System Manager document that run on the server when the command
        is run.

        - **Name** *(string) --*

          The name of the parameter.

        - **Type** *(string) --*

          The type of parameter. The type can be either String or StringList.

        - **Description** *(string) --*

          A description of what the parameter does, how to use it, the default value, and whether
          or not the parameter is optional.

        - **DefaultValue** *(string) --*

          If specified, the default values for the parameters. Parameters without a default value
          are required. Parameters with a default value are optional.

    - **PlatformTypes** *(list) --*

      The list of OS platforms compatible with this Systems Manager document.

      - *(string) --*

    - **DocumentType** *(string) --*

      The type of document.

    - **SchemaVersion** *(string) --*

      The schema version.

    - **LatestVersion** *(string) --*

      The latest version of the document.

    - **DefaultVersion** *(string) --*

      The default version.

    - **DocumentFormat** *(string) --*

      The document format, either JSON or YAML.

    - **TargetType** *(string) --*

      The target type which defines the kinds of resources the document can run on. For example,
      /AWS::EC2::Instance. For a list of valid resource types, see `AWS Resource Types Reference
      <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html>`__
      in the *AWS CloudFormation User Guide* .

    - **Tags** *(list) --*

      The tags, or metadata, that have been applied to the document.

      - *(dict) --*

        Metadata that you assign to your AWS resources. Tags enable you to categorize your
        resources in different ways, for example, by purpose, owner, or environment. In Systems
        Manager, you can apply tags to documents, managed instances, maintenance windows,
        Parameter Store parameters, and patch baselines.

        - **Key** *(string) --*

          The name of the tag.

        - **Value** *(string) --*

          The value of the tag.

    - **AttachmentsInformation** *(list) --*

      Details about the document attachments, including names, locations, sizes, etc.

      - *(dict) --*

        An attribute of an attachment, such as the attachment name.

        - **Name** *(string) --*

          The name of the attachment.
    """


_ClientCreateDocumentResponseTypeDef = TypedDict(
    "_ClientCreateDocumentResponseTypeDef",
    {"DocumentDescription": ClientCreateDocumentResponseDocumentDescriptionTypeDef},
    total=False,
)


class ClientCreateDocumentResponseTypeDef(_ClientCreateDocumentResponseTypeDef):
    """
    Type definition for `ClientCreateDocument` `Response`

    - **DocumentDescription** *(dict) --*

      Information about the Systems Manager document.

      - **Sha1** *(string) --*

        The SHA1 hash of the document, which you can use for verification.

      - **Hash** *(string) --*

        The Sha256 or Sha1 hash created by the system when the document was created.

        .. note::

          Sha1 hashes have been deprecated.

      - **HashType** *(string) --*

        The hash type of the document. Valid values include ``Sha256`` or ``Sha1`` .

        .. note::

          Sha1 hashes have been deprecated.

      - **Name** *(string) --*

        The name of the Systems Manager document.

      - **VersionName** *(string) --*

        The version of the artifact associated with the document.

      - **Owner** *(string) --*

        The AWS user account that created the document.

      - **CreatedDate** *(datetime) --*

        The date when the document was created.

      - **Status** *(string) --*

        The status of the Systems Manager document.

      - **StatusInformation** *(string) --*

        A message returned by AWS Systems Manager that explains the ``Status`` value. For example,
        a ``Failed`` status might be explained by the ``StatusInformation`` message, "The specified
        S3 bucket does not exist. Verify that the URL of the S3 bucket is correct."

      - **DocumentVersion** *(string) --*

        The document version.

      - **Description** *(string) --*

        A description of the document.

      - **Parameters** *(list) --*

        A description of the parameters for a document.

        - *(dict) --*

          Parameters specified in a System Manager document that run on the server when the command
          is run.

          - **Name** *(string) --*

            The name of the parameter.

          - **Type** *(string) --*

            The type of parameter. The type can be either String or StringList.

          - **Description** *(string) --*

            A description of what the parameter does, how to use it, the default value, and whether
            or not the parameter is optional.

          - **DefaultValue** *(string) --*

            If specified, the default values for the parameters. Parameters without a default value
            are required. Parameters with a default value are optional.

      - **PlatformTypes** *(list) --*

        The list of OS platforms compatible with this Systems Manager document.

        - *(string) --*

      - **DocumentType** *(string) --*

        The type of document.

      - **SchemaVersion** *(string) --*

        The schema version.

      - **LatestVersion** *(string) --*

        The latest version of the document.

      - **DefaultVersion** *(string) --*

        The default version.

      - **DocumentFormat** *(string) --*

        The document format, either JSON or YAML.

      - **TargetType** *(string) --*

        The target type which defines the kinds of resources the document can run on. For example,
        /AWS::EC2::Instance. For a list of valid resource types, see `AWS Resource Types Reference
        <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html>`__
        in the *AWS CloudFormation User Guide* .

      - **Tags** *(list) --*

        The tags, or metadata, that have been applied to the document.

        - *(dict) --*

          Metadata that you assign to your AWS resources. Tags enable you to categorize your
          resources in different ways, for example, by purpose, owner, or environment. In Systems
          Manager, you can apply tags to documents, managed instances, maintenance windows,
          Parameter Store parameters, and patch baselines.

          - **Key** *(string) --*

            The name of the tag.

          - **Value** *(string) --*

            The value of the tag.

      - **AttachmentsInformation** *(list) --*

        Details about the document attachments, including names, locations, sizes, etc.

        - *(dict) --*

          An attribute of an attachment, such as the attachment name.

          - **Name** *(string) --*

            The name of the attachment.
    """


_ClientCreateDocumentTagsTypeDef = TypedDict(
    "_ClientCreateDocumentTagsTypeDef", {"Key": str, "Value": str}
)


class ClientCreateDocumentTagsTypeDef(_ClientCreateDocumentTagsTypeDef):
    """
    Type definition for `ClientCreateDocument` `Tags`

    Metadata that you assign to your AWS resources. Tags enable you to categorize your resources in
    different ways, for example, by purpose, owner, or environment. In Systems Manager, you can
    apply tags to documents, managed instances, maintenance windows, Parameter Store parameters,
    and patch baselines.

    - **Key** *(string) --* **[REQUIRED]**

      The name of the tag.

    - **Value** *(string) --* **[REQUIRED]**

      The value of the tag.
    """


_ClientCreateMaintenanceWindowResponseTypeDef = TypedDict(
    "_ClientCreateMaintenanceWindowResponseTypeDef", {"WindowId": str}, total=False
)


class ClientCreateMaintenanceWindowResponseTypeDef(
    _ClientCreateMaintenanceWindowResponseTypeDef
):
    """
    Type definition for `ClientCreateMaintenanceWindow` `Response`

    - **WindowId** *(string) --*

      The ID of the created maintenance window.
    """


_ClientCreateMaintenanceWindowTagsTypeDef = TypedDict(
    "_ClientCreateMaintenanceWindowTagsTypeDef", {"Key": str, "Value": str}
)


class ClientCreateMaintenanceWindowTagsTypeDef(
    _ClientCreateMaintenanceWindowTagsTypeDef
):
    """
    Type definition for `ClientCreateMaintenanceWindow` `Tags`

    Metadata that you assign to your AWS resources. Tags enable you to categorize your resources in
    different ways, for example, by purpose, owner, or environment. In Systems Manager, you can
    apply tags to documents, managed instances, maintenance windows, Parameter Store parameters,
    and patch baselines.

    - **Key** *(string) --* **[REQUIRED]**

      The name of the tag.

    - **Value** *(string) --* **[REQUIRED]**

      The value of the tag.
    """


_ClientCreateOpsItemNotificationsTypeDef = TypedDict(
    "_ClientCreateOpsItemNotificationsTypeDef", {"Arn": str}, total=False
)


class ClientCreateOpsItemNotificationsTypeDef(_ClientCreateOpsItemNotificationsTypeDef):
    """
    Type definition for `ClientCreateOpsItem` `Notifications`

    A notification about the OpsItem.

    - **Arn** *(string) --*

      The Amazon Resource Name (ARN) of an SNS topic where notifications are sent when this OpsItem
      is edited or changed.
    """


_ClientCreateOpsItemOperationalDataTypeDef = TypedDict(
    "_ClientCreateOpsItemOperationalDataTypeDef",
    {"Value": str, "Type": str},
    total=False,
)


class ClientCreateOpsItemOperationalDataTypeDef(
    _ClientCreateOpsItemOperationalDataTypeDef
):
    """
    Type definition for `ClientCreateOpsItem` `OperationalData`

    An object that defines the value of the key and its type in the OperationalData map.

    - **Value** *(string) --*

      The value of the OperationalData key.

    - **Type** *(string) --*

      The type of key-value pair. Valid types include ``SearchableString`` and ``String`` .
    """


_ClientCreateOpsItemRelatedOpsItemsTypeDef = TypedDict(
    "_ClientCreateOpsItemRelatedOpsItemsTypeDef", {"OpsItemId": str}
)


class ClientCreateOpsItemRelatedOpsItemsTypeDef(
    _ClientCreateOpsItemRelatedOpsItemsTypeDef
):
    """
    Type definition for `ClientCreateOpsItem` `RelatedOpsItems`

    An OpsItems that shares something in common with the current OpsItem. For example, related
    OpsItems can include OpsItems with similar error messages, impacted resources, or statuses for
    the impacted resource.

    - **OpsItemId** *(string) --* **[REQUIRED]**

      The ID of an OpsItem related to the current OpsItem.
    """


_ClientCreateOpsItemResponseTypeDef = TypedDict(
    "_ClientCreateOpsItemResponseTypeDef", {"OpsItemId": str}, total=False
)


class ClientCreateOpsItemResponseTypeDef(_ClientCreateOpsItemResponseTypeDef):
    """
    Type definition for `ClientCreateOpsItem` `Response`

    - **OpsItemId** *(string) --*

      The ID of the OpsItem.
    """


_ClientCreateOpsItemTagsTypeDef = TypedDict(
    "_ClientCreateOpsItemTagsTypeDef", {"Key": str, "Value": str}
)


class ClientCreateOpsItemTagsTypeDef(_ClientCreateOpsItemTagsTypeDef):
    """
    Type definition for `ClientCreateOpsItem` `Tags`

    Metadata that you assign to your AWS resources. Tags enable you to categorize your resources in
    different ways, for example, by purpose, owner, or environment. In Systems Manager, you can
    apply tags to documents, managed instances, maintenance windows, Parameter Store parameters,
    and patch baselines.

    - **Key** *(string) --* **[REQUIRED]**

      The name of the tag.

    - **Value** *(string) --* **[REQUIRED]**

      The value of the tag.
    """


_ClientCreatePatchBaselineApprovalRulesPatchRulesPatchFilterGroupPatchFiltersTypeDef = TypedDict(
    "_ClientCreatePatchBaselineApprovalRulesPatchRulesPatchFilterGroupPatchFiltersTypeDef",
    {"Key": str, "Values": List[str]},
)


class ClientCreatePatchBaselineApprovalRulesPatchRulesPatchFilterGroupPatchFiltersTypeDef(
    _ClientCreatePatchBaselineApprovalRulesPatchRulesPatchFilterGroupPatchFiltersTypeDef
):
    """
    Type definition for `ClientCreatePatchBaselineApprovalRulesPatchRulesPatchFilterGroup` `PatchFilters`

    Defines which patches should be included in a patch baseline.

    A patch filter consists of a key and a set of values. The filter key is a patch
    property. For example, the available filter keys for WINDOWS are PATCH_SET, PRODUCT,
    PRODUCT_FAMILY, CLASSIFICATION, and MSRC_SEVERITY. The filter values define a matching
    criterion for the patch property indicated by the key. For example, if the filter key
    is PRODUCT and the filter values are ["Office 2013", "Office 2016"], then the filter
    accepts all patches where product name is either "Office 2013" or "Office 2016". The
    filter values can be exact values for the patch property given as a key, or a wildcard
    (*), which matches all values.

    You can view lists of valid values for the patch properties by running the
    ``DescribePatchProperties`` command. For information about which patch properties can
    be used with each major operating system, see  DescribePatchProperties .

    - **Key** *(string) --* **[REQUIRED]**

      The key for the filter.

      Run the  DescribePatchProperties command to view lists of valid keys for each
      operating system type.

    - **Values** *(list) --* **[REQUIRED]**

      The value for the filter key.

      Run the  DescribePatchProperties command to view lists of valid values for each key
      based on operating system type.

      - *(string) --*
    """


_ClientCreatePatchBaselineApprovalRulesPatchRulesPatchFilterGroupTypeDef = TypedDict(
    "_ClientCreatePatchBaselineApprovalRulesPatchRulesPatchFilterGroupTypeDef",
    {
        "PatchFilters": List[
            ClientCreatePatchBaselineApprovalRulesPatchRulesPatchFilterGroupPatchFiltersTypeDef
        ]
    },
)


class ClientCreatePatchBaselineApprovalRulesPatchRulesPatchFilterGroupTypeDef(
    _ClientCreatePatchBaselineApprovalRulesPatchRulesPatchFilterGroupTypeDef
):
    """
    Type definition for `ClientCreatePatchBaselineApprovalRulesPatchRules` `PatchFilterGroup`

    The patch filter group that defines the criteria for the rule.

    - **PatchFilters** *(list) --* **[REQUIRED]**

      The set of patch filters that make up the group.

      - *(dict) --*

        Defines which patches should be included in a patch baseline.

        A patch filter consists of a key and a set of values. The filter key is a patch
        property. For example, the available filter keys for WINDOWS are PATCH_SET, PRODUCT,
        PRODUCT_FAMILY, CLASSIFICATION, and MSRC_SEVERITY. The filter values define a matching
        criterion for the patch property indicated by the key. For example, if the filter key
        is PRODUCT and the filter values are ["Office 2013", "Office 2016"], then the filter
        accepts all patches where product name is either "Office 2013" or "Office 2016". The
        filter values can be exact values for the patch property given as a key, or a wildcard
        (*), which matches all values.

        You can view lists of valid values for the patch properties by running the
        ``DescribePatchProperties`` command. For information about which patch properties can
        be used with each major operating system, see  DescribePatchProperties .

        - **Key** *(string) --* **[REQUIRED]**

          The key for the filter.

          Run the  DescribePatchProperties command to view lists of valid keys for each
          operating system type.

        - **Values** *(list) --* **[REQUIRED]**

          The value for the filter key.

          Run the  DescribePatchProperties command to view lists of valid values for each key
          based on operating system type.

          - *(string) --*
    """


_RequiredClientCreatePatchBaselineApprovalRulesPatchRulesTypeDef = TypedDict(
    "_RequiredClientCreatePatchBaselineApprovalRulesPatchRulesTypeDef",
    {
        "PatchFilterGroup": ClientCreatePatchBaselineApprovalRulesPatchRulesPatchFilterGroupTypeDef,
        "ApproveAfterDays": int,
    },
)
_OptionalClientCreatePatchBaselineApprovalRulesPatchRulesTypeDef = TypedDict(
    "_OptionalClientCreatePatchBaselineApprovalRulesPatchRulesTypeDef",
    {"ComplianceLevel": str, "EnableNonSecurity": bool},
    total=False,
)


class ClientCreatePatchBaselineApprovalRulesPatchRulesTypeDef(
    _RequiredClientCreatePatchBaselineApprovalRulesPatchRulesTypeDef,
    _OptionalClientCreatePatchBaselineApprovalRulesPatchRulesTypeDef,
):
    """
    Type definition for `ClientCreatePatchBaselineApprovalRules` `PatchRules`

    Defines an approval rule for a patch baseline.

    - **PatchFilterGroup** *(dict) --* **[REQUIRED]**

      The patch filter group that defines the criteria for the rule.

      - **PatchFilters** *(list) --* **[REQUIRED]**

        The set of patch filters that make up the group.

        - *(dict) --*

          Defines which patches should be included in a patch baseline.

          A patch filter consists of a key and a set of values. The filter key is a patch
          property. For example, the available filter keys for WINDOWS are PATCH_SET, PRODUCT,
          PRODUCT_FAMILY, CLASSIFICATION, and MSRC_SEVERITY. The filter values define a matching
          criterion for the patch property indicated by the key. For example, if the filter key
          is PRODUCT and the filter values are ["Office 2013", "Office 2016"], then the filter
          accepts all patches where product name is either "Office 2013" or "Office 2016". The
          filter values can be exact values for the patch property given as a key, or a wildcard
          (*), which matches all values.

          You can view lists of valid values for the patch properties by running the
          ``DescribePatchProperties`` command. For information about which patch properties can
          be used with each major operating system, see  DescribePatchProperties .

          - **Key** *(string) --* **[REQUIRED]**

            The key for the filter.

            Run the  DescribePatchProperties command to view lists of valid keys for each
            operating system type.

          - **Values** *(list) --* **[REQUIRED]**

            The value for the filter key.

            Run the  DescribePatchProperties command to view lists of valid values for each key
            based on operating system type.

            - *(string) --*

    - **ComplianceLevel** *(string) --*

      A compliance severity level for all approved patches in a patch baseline. Valid compliance
      severity levels include the following: Unspecified, Critical, High, Medium, Low, and
      Informational.

    - **ApproveAfterDays** *(integer) --* **[REQUIRED]**

      The number of days after the release date of each patch matched by the rule that the patch
      is marked as approved in the patch baseline. For example, a value of ``7`` means that
      patches are approved seven days after they are released.

    - **EnableNonSecurity** *(boolean) --*

      For instances identified by the approval rule filters, enables a patch baseline to apply
      non-security updates available in the specified repository. The default value is 'false'.
      Applies to Linux instances only.
    """


_ClientCreatePatchBaselineApprovalRulesTypeDef = TypedDict(
    "_ClientCreatePatchBaselineApprovalRulesTypeDef",
    {"PatchRules": List[ClientCreatePatchBaselineApprovalRulesPatchRulesTypeDef]},
)


class ClientCreatePatchBaselineApprovalRulesTypeDef(
    _ClientCreatePatchBaselineApprovalRulesTypeDef
):
    """
    Type definition for `ClientCreatePatchBaseline` `ApprovalRules`

    A set of rules used to include patches in the baseline.

    - **PatchRules** *(list) --* **[REQUIRED]**

      The rules that make up the rule group.

      - *(dict) --*

        Defines an approval rule for a patch baseline.

        - **PatchFilterGroup** *(dict) --* **[REQUIRED]**

          The patch filter group that defines the criteria for the rule.

          - **PatchFilters** *(list) --* **[REQUIRED]**

            The set of patch filters that make up the group.

            - *(dict) --*

              Defines which patches should be included in a patch baseline.

              A patch filter consists of a key and a set of values. The filter key is a patch
              property. For example, the available filter keys for WINDOWS are PATCH_SET, PRODUCT,
              PRODUCT_FAMILY, CLASSIFICATION, and MSRC_SEVERITY. The filter values define a matching
              criterion for the patch property indicated by the key. For example, if the filter key
              is PRODUCT and the filter values are ["Office 2013", "Office 2016"], then the filter
              accepts all patches where product name is either "Office 2013" or "Office 2016". The
              filter values can be exact values for the patch property given as a key, or a wildcard
              (*), which matches all values.

              You can view lists of valid values for the patch properties by running the
              ``DescribePatchProperties`` command. For information about which patch properties can
              be used with each major operating system, see  DescribePatchProperties .

              - **Key** *(string) --* **[REQUIRED]**

                The key for the filter.

                Run the  DescribePatchProperties command to view lists of valid keys for each
                operating system type.

              - **Values** *(list) --* **[REQUIRED]**

                The value for the filter key.

                Run the  DescribePatchProperties command to view lists of valid values for each key
                based on operating system type.

                - *(string) --*

        - **ComplianceLevel** *(string) --*

          A compliance severity level for all approved patches in a patch baseline. Valid compliance
          severity levels include the following: Unspecified, Critical, High, Medium, Low, and
          Informational.

        - **ApproveAfterDays** *(integer) --* **[REQUIRED]**

          The number of days after the release date of each patch matched by the rule that the patch
          is marked as approved in the patch baseline. For example, a value of ``7`` means that
          patches are approved seven days after they are released.

        - **EnableNonSecurity** *(boolean) --*

          For instances identified by the approval rule filters, enables a patch baseline to apply
          non-security updates available in the specified repository. The default value is 'false'.
          Applies to Linux instances only.
    """


_ClientCreatePatchBaselineGlobalFiltersPatchFiltersTypeDef = TypedDict(
    "_ClientCreatePatchBaselineGlobalFiltersPatchFiltersTypeDef",
    {"Key": str, "Values": List[str]},
)


class ClientCreatePatchBaselineGlobalFiltersPatchFiltersTypeDef(
    _ClientCreatePatchBaselineGlobalFiltersPatchFiltersTypeDef
):
    """
    Type definition for `ClientCreatePatchBaselineGlobalFilters` `PatchFilters`

    Defines which patches should be included in a patch baseline.

    A patch filter consists of a key and a set of values. The filter key is a patch property. For
    example, the available filter keys for WINDOWS are PATCH_SET, PRODUCT, PRODUCT_FAMILY,
    CLASSIFICATION, and MSRC_SEVERITY. The filter values define a matching criterion for the
    patch property indicated by the key. For example, if the filter key is PRODUCT and the filter
    values are ["Office 2013", "Office 2016"], then the filter accepts all patches where product
    name is either "Office 2013" or "Office 2016". The filter values can be exact values for the
    patch property given as a key, or a wildcard (*), which matches all values.

    You can view lists of valid values for the patch properties by running the
    ``DescribePatchProperties`` command. For information about which patch properties can be used
    with each major operating system, see  DescribePatchProperties .

    - **Key** *(string) --* **[REQUIRED]**

      The key for the filter.

      Run the  DescribePatchProperties command to view lists of valid keys for each operating
      system type.

    - **Values** *(list) --* **[REQUIRED]**

      The value for the filter key.

      Run the  DescribePatchProperties command to view lists of valid values for each key based
      on operating system type.

      - *(string) --*
    """


_ClientCreatePatchBaselineGlobalFiltersTypeDef = TypedDict(
    "_ClientCreatePatchBaselineGlobalFiltersTypeDef",
    {"PatchFilters": List[ClientCreatePatchBaselineGlobalFiltersPatchFiltersTypeDef]},
)


class ClientCreatePatchBaselineGlobalFiltersTypeDef(
    _ClientCreatePatchBaselineGlobalFiltersTypeDef
):
    """
    Type definition for `ClientCreatePatchBaseline` `GlobalFilters`

    A set of global filters used to include patches in the baseline.

    - **PatchFilters** *(list) --* **[REQUIRED]**

      The set of patch filters that make up the group.

      - *(dict) --*

        Defines which patches should be included in a patch baseline.

        A patch filter consists of a key and a set of values. The filter key is a patch property. For
        example, the available filter keys for WINDOWS are PATCH_SET, PRODUCT, PRODUCT_FAMILY,
        CLASSIFICATION, and MSRC_SEVERITY. The filter values define a matching criterion for the
        patch property indicated by the key. For example, if the filter key is PRODUCT and the filter
        values are ["Office 2013", "Office 2016"], then the filter accepts all patches where product
        name is either "Office 2013" or "Office 2016". The filter values can be exact values for the
        patch property given as a key, or a wildcard (*), which matches all values.

        You can view lists of valid values for the patch properties by running the
        ``DescribePatchProperties`` command. For information about which patch properties can be used
        with each major operating system, see  DescribePatchProperties .

        - **Key** *(string) --* **[REQUIRED]**

          The key for the filter.

          Run the  DescribePatchProperties command to view lists of valid keys for each operating
          system type.

        - **Values** *(list) --* **[REQUIRED]**

          The value for the filter key.

          Run the  DescribePatchProperties command to view lists of valid values for each key based
          on operating system type.

          - *(string) --*
    """


_ClientCreatePatchBaselineResponseTypeDef = TypedDict(
    "_ClientCreatePatchBaselineResponseTypeDef", {"BaselineId": str}, total=False
)


class ClientCreatePatchBaselineResponseTypeDef(
    _ClientCreatePatchBaselineResponseTypeDef
):
    """
    Type definition for `ClientCreatePatchBaseline` `Response`

    - **BaselineId** *(string) --*

      The ID of the created patch baseline.
    """


_ClientCreatePatchBaselineSourcesTypeDef = TypedDict(
    "_ClientCreatePatchBaselineSourcesTypeDef",
    {"Name": str, "Products": List[str], "Configuration": str},
)


class ClientCreatePatchBaselineSourcesTypeDef(_ClientCreatePatchBaselineSourcesTypeDef):
    """
    Type definition for `ClientCreatePatchBaseline` `Sources`

    Information about the patches to use to update the instances, including target operating
    systems and source repository. Applies to Linux instances only.

    - **Name** *(string) --* **[REQUIRED]**

      The name specified to identify the patch source.

    - **Products** *(list) --* **[REQUIRED]**

      The specific operating system versions a patch repository applies to, such as "Ubuntu16.04",
      "AmazonLinux2016.09", "RedhatEnterpriseLinux7.2" or "Suse12.7". For lists of supported
      product values, see  PatchFilter .

      - *(string) --*

    - **Configuration** *(string) --* **[REQUIRED]**

      The value of the yum repo configuration. For example:

       ``[main]``

       ``cachedir=/var/cache/yum/$basesearch$releasever``

       ``keepcache=0``

       ``debuglevel=2``
    """


_ClientCreatePatchBaselineTagsTypeDef = TypedDict(
    "_ClientCreatePatchBaselineTagsTypeDef", {"Key": str, "Value": str}
)


class ClientCreatePatchBaselineTagsTypeDef(_ClientCreatePatchBaselineTagsTypeDef):
    """
    Type definition for `ClientCreatePatchBaseline` `Tags`

    Metadata that you assign to your AWS resources. Tags enable you to categorize your resources in
    different ways, for example, by purpose, owner, or environment. In Systems Manager, you can
    apply tags to documents, managed instances, maintenance windows, Parameter Store parameters,
    and patch baselines.

    - **Key** *(string) --* **[REQUIRED]**

      The name of the tag.

    - **Value** *(string) --* **[REQUIRED]**

      The value of the tag.
    """


_RequiredClientCreateResourceDataSyncS3DestinationTypeDef = TypedDict(
    "_RequiredClientCreateResourceDataSyncS3DestinationTypeDef",
    {"BucketName": str, "SyncFormat": str, "Region": str},
)
_OptionalClientCreateResourceDataSyncS3DestinationTypeDef = TypedDict(
    "_OptionalClientCreateResourceDataSyncS3DestinationTypeDef",
    {"Prefix": str, "AWSKMSKeyARN": str},
    total=False,
)


class ClientCreateResourceDataSyncS3DestinationTypeDef(
    _RequiredClientCreateResourceDataSyncS3DestinationTypeDef,
    _OptionalClientCreateResourceDataSyncS3DestinationTypeDef,
):
    """
    Type definition for `ClientCreateResourceDataSync` `S3Destination`

    Amazon S3 configuration details for the sync.

    - **BucketName** *(string) --* **[REQUIRED]**

      The name of the Amazon S3 bucket where the aggregated data is stored.

    - **Prefix** *(string) --*

      An Amazon S3 prefix for the bucket.

    - **SyncFormat** *(string) --* **[REQUIRED]**

      A supported sync format. The following format is currently supported: JsonSerDe

    - **Region** *(string) --* **[REQUIRED]**

      The AWS Region with the Amazon S3 bucket targeted by the Resource Data Sync.

    - **AWSKMSKeyARN** *(string) --*

      The ARN of an encryption key for a destination in Amazon S3. Must belong to the same Region as
      the destination Amazon S3 bucket.
    """


_ClientDeleteInventoryResponseDeletionSummarySummaryItemsTypeDef = TypedDict(
    "_ClientDeleteInventoryResponseDeletionSummarySummaryItemsTypeDef",
    {"Version": str, "Count": int, "RemainingCount": int},
    total=False,
)


class ClientDeleteInventoryResponseDeletionSummarySummaryItemsTypeDef(
    _ClientDeleteInventoryResponseDeletionSummarySummaryItemsTypeDef
):
    """
    Type definition for `ClientDeleteInventoryResponseDeletionSummary` `SummaryItems`

    Either a count, remaining count, or a version number in a delete inventory summary.

    - **Version** *(string) --*

      The inventory type version.

    - **Count** *(integer) --*

      A count of the number of deleted items.

    - **RemainingCount** *(integer) --*

      The remaining number of items to delete.
    """


_ClientDeleteInventoryResponseDeletionSummaryTypeDef = TypedDict(
    "_ClientDeleteInventoryResponseDeletionSummaryTypeDef",
    {
        "TotalCount": int,
        "RemainingCount": int,
        "SummaryItems": List[
            ClientDeleteInventoryResponseDeletionSummarySummaryItemsTypeDef
        ],
    },
    total=False,
)


class ClientDeleteInventoryResponseDeletionSummaryTypeDef(
    _ClientDeleteInventoryResponseDeletionSummaryTypeDef
):
    """
    Type definition for `ClientDeleteInventoryResponse` `DeletionSummary`

    A summary of the delete operation. For more information about this summary, see
    `Understanding the Delete Inventory Summary
    <http://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-inventory-delete.html#sysman-inventory-delete-summary>`__
    in the *AWS Systems Manager User Guide* .

    - **TotalCount** *(integer) --*

      The total number of items to delete. This count does not change during the delete operation.

    - **RemainingCount** *(integer) --*

      Remaining number of items to delete.

    - **SummaryItems** *(list) --*

      A list of counts and versions for deleted items.

      - *(dict) --*

        Either a count, remaining count, or a version number in a delete inventory summary.

        - **Version** *(string) --*

          The inventory type version.

        - **Count** *(integer) --*

          A count of the number of deleted items.

        - **RemainingCount** *(integer) --*

          The remaining number of items to delete.
    """


_ClientDeleteInventoryResponseTypeDef = TypedDict(
    "_ClientDeleteInventoryResponseTypeDef",
    {
        "DeletionId": str,
        "TypeName": str,
        "DeletionSummary": ClientDeleteInventoryResponseDeletionSummaryTypeDef,
    },
    total=False,
)


class ClientDeleteInventoryResponseTypeDef(_ClientDeleteInventoryResponseTypeDef):
    """
    Type definition for `ClientDeleteInventory` `Response`

    - **DeletionId** *(string) --*

      Every ``DeleteInventory`` action is assigned a unique ID. This option returns a unique ID.
      You can use this ID to query the status of a delete operation. This option is useful for
      ensuring that a delete operation has completed before you begin other actions.

    - **TypeName** *(string) --*

      The name of the inventory data type specified in the request.

    - **DeletionSummary** *(dict) --*

      A summary of the delete operation. For more information about this summary, see
      `Understanding the Delete Inventory Summary
      <http://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-inventory-delete.html#sysman-inventory-delete-summary>`__
      in the *AWS Systems Manager User Guide* .

      - **TotalCount** *(integer) --*

        The total number of items to delete. This count does not change during the delete operation.

      - **RemainingCount** *(integer) --*

        Remaining number of items to delete.

      - **SummaryItems** *(list) --*

        A list of counts and versions for deleted items.

        - *(dict) --*

          Either a count, remaining count, or a version number in a delete inventory summary.

          - **Version** *(string) --*

            The inventory type version.

          - **Count** *(integer) --*

            A count of the number of deleted items.

          - **RemainingCount** *(integer) --*

            The remaining number of items to delete.
    """


_ClientDeleteMaintenanceWindowResponseTypeDef = TypedDict(
    "_ClientDeleteMaintenanceWindowResponseTypeDef", {"WindowId": str}, total=False
)


class ClientDeleteMaintenanceWindowResponseTypeDef(
    _ClientDeleteMaintenanceWindowResponseTypeDef
):
    """
    Type definition for `ClientDeleteMaintenanceWindow` `Response`

    - **WindowId** *(string) --*

      The ID of the deleted maintenance window.
    """


_ClientDeleteParametersResponseTypeDef = TypedDict(
    "_ClientDeleteParametersResponseTypeDef",
    {"DeletedParameters": List[str], "InvalidParameters": List[str]},
    total=False,
)


class ClientDeleteParametersResponseTypeDef(_ClientDeleteParametersResponseTypeDef):
    """
    Type definition for `ClientDeleteParameters` `Response`

    - **DeletedParameters** *(list) --*

      The names of the deleted parameters.

      - *(string) --*

    - **InvalidParameters** *(list) --*

      The names of parameters that weren't deleted because the parameters are not valid.

      - *(string) --*
    """


_ClientDeletePatchBaselineResponseTypeDef = TypedDict(
    "_ClientDeletePatchBaselineResponseTypeDef", {"BaselineId": str}, total=False
)


class ClientDeletePatchBaselineResponseTypeDef(
    _ClientDeletePatchBaselineResponseTypeDef
):
    """
    Type definition for `ClientDeletePatchBaseline` `Response`

    - **BaselineId** *(string) --*

      The ID of the deleted patch baseline.
    """


_ClientDeregisterPatchBaselineForPatchGroupResponseTypeDef = TypedDict(
    "_ClientDeregisterPatchBaselineForPatchGroupResponseTypeDef",
    {"BaselineId": str, "PatchGroup": str},
    total=False,
)


class ClientDeregisterPatchBaselineForPatchGroupResponseTypeDef(
    _ClientDeregisterPatchBaselineForPatchGroupResponseTypeDef
):
    """
    Type definition for `ClientDeregisterPatchBaselineForPatchGroup` `Response`

    - **BaselineId** *(string) --*

      The ID of the patch baseline the patch group was deregistered from.

    - **PatchGroup** *(string) --*

      The name of the patch group deregistered from the patch baseline.
    """


_ClientDeregisterTargetFromMaintenanceWindowResponseTypeDef = TypedDict(
    "_ClientDeregisterTargetFromMaintenanceWindowResponseTypeDef",
    {"WindowId": str, "WindowTargetId": str},
    total=False,
)


class ClientDeregisterTargetFromMaintenanceWindowResponseTypeDef(
    _ClientDeregisterTargetFromMaintenanceWindowResponseTypeDef
):
    """
    Type definition for `ClientDeregisterTargetFromMaintenanceWindow` `Response`

    - **WindowId** *(string) --*

      The ID of the maintenance window the target was removed from.

    - **WindowTargetId** *(string) --*

      The ID of the removed target definition.
    """


_ClientDeregisterTaskFromMaintenanceWindowResponseTypeDef = TypedDict(
    "_ClientDeregisterTaskFromMaintenanceWindowResponseTypeDef",
    {"WindowId": str, "WindowTaskId": str},
    total=False,
)


class ClientDeregisterTaskFromMaintenanceWindowResponseTypeDef(
    _ClientDeregisterTaskFromMaintenanceWindowResponseTypeDef
):
    """
    Type definition for `ClientDeregisterTaskFromMaintenanceWindow` `Response`

    - **WindowId** *(string) --*

      The ID of the maintenance window the task was removed from.

    - **WindowTaskId** *(string) --*

      The ID of the task removed from the maintenance window.
    """


_ClientDescribeActivationsFiltersTypeDef = TypedDict(
    "_ClientDescribeActivationsFiltersTypeDef",
    {"FilterKey": str, "FilterValues": List[str]},
    total=False,
)


class ClientDescribeActivationsFiltersTypeDef(_ClientDescribeActivationsFiltersTypeDef):
    """
    Type definition for `ClientDescribeActivations` `Filters`

    Filter for the DescribeActivation API.

    - **FilterKey** *(string) --*

      The name of the filter.

    - **FilterValues** *(list) --*

      The filter values.

      - *(string) --*
    """


_ClientDescribeActivationsResponseActivationListTagsTypeDef = TypedDict(
    "_ClientDescribeActivationsResponseActivationListTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)


class ClientDescribeActivationsResponseActivationListTagsTypeDef(
    _ClientDescribeActivationsResponseActivationListTagsTypeDef
):
    """
    Type definition for `ClientDescribeActivationsResponseActivationList` `Tags`

    Metadata that you assign to your AWS resources. Tags enable you to categorize your
    resources in different ways, for example, by purpose, owner, or environment. In Systems
    Manager, you can apply tags to documents, managed instances, maintenance windows,
    Parameter Store parameters, and patch baselines.

    - **Key** *(string) --*

      The name of the tag.

    - **Value** *(string) --*

      The value of the tag.
    """


_ClientDescribeActivationsResponseActivationListTypeDef = TypedDict(
    "_ClientDescribeActivationsResponseActivationListTypeDef",
    {
        "ActivationId": str,
        "Description": str,
        "DefaultInstanceName": str,
        "IamRole": str,
        "RegistrationLimit": int,
        "RegistrationsCount": int,
        "ExpirationDate": datetime,
        "Expired": bool,
        "CreatedDate": datetime,
        "Tags": List[ClientDescribeActivationsResponseActivationListTagsTypeDef],
    },
    total=False,
)


class ClientDescribeActivationsResponseActivationListTypeDef(
    _ClientDescribeActivationsResponseActivationListTypeDef
):
    """
    Type definition for `ClientDescribeActivationsResponse` `ActivationList`

    An activation registers one or more on-premises servers or virtual machines (VMs) with AWS
    so that you can configure those servers or VMs using Run Command. A server or VM that has
    been registered with AWS is called a managed instance.

    - **ActivationId** *(string) --*

      The ID created by Systems Manager when you submitted the activation.

    - **Description** *(string) --*

      A user defined description of the activation.

    - **DefaultInstanceName** *(string) --*

      A name for the managed instance when it is created.

    - **IamRole** *(string) --*

      The Amazon Identity and Access Management (IAM) role to assign to the managed instance.

    - **RegistrationLimit** *(integer) --*

      The maximum number of managed instances that can be registered using this activation.

    - **RegistrationsCount** *(integer) --*

      The number of managed instances already registered with this activation.

    - **ExpirationDate** *(datetime) --*

      The date when this activation can no longer be used to register managed instances.

    - **Expired** *(boolean) --*

      Whether or not the activation is expired.

    - **CreatedDate** *(datetime) --*

      The date the activation was created.

    - **Tags** *(list) --*

      Tags assigned to the activation.

      - *(dict) --*

        Metadata that you assign to your AWS resources. Tags enable you to categorize your
        resources in different ways, for example, by purpose, owner, or environment. In Systems
        Manager, you can apply tags to documents, managed instances, maintenance windows,
        Parameter Store parameters, and patch baselines.

        - **Key** *(string) --*

          The name of the tag.

        - **Value** *(string) --*

          The value of the tag.
    """


_ClientDescribeActivationsResponseTypeDef = TypedDict(
    "_ClientDescribeActivationsResponseTypeDef",
    {
        "ActivationList": List[ClientDescribeActivationsResponseActivationListTypeDef],
        "NextToken": str,
    },
    total=False,
)


class ClientDescribeActivationsResponseTypeDef(
    _ClientDescribeActivationsResponseTypeDef
):
    """
    Type definition for `ClientDescribeActivations` `Response`

    - **ActivationList** *(list) --*

      A list of activations for your AWS account.

      - *(dict) --*

        An activation registers one or more on-premises servers or virtual machines (VMs) with AWS
        so that you can configure those servers or VMs using Run Command. A server or VM that has
        been registered with AWS is called a managed instance.

        - **ActivationId** *(string) --*

          The ID created by Systems Manager when you submitted the activation.

        - **Description** *(string) --*

          A user defined description of the activation.

        - **DefaultInstanceName** *(string) --*

          A name for the managed instance when it is created.

        - **IamRole** *(string) --*

          The Amazon Identity and Access Management (IAM) role to assign to the managed instance.

        - **RegistrationLimit** *(integer) --*

          The maximum number of managed instances that can be registered using this activation.

        - **RegistrationsCount** *(integer) --*

          The number of managed instances already registered with this activation.

        - **ExpirationDate** *(datetime) --*

          The date when this activation can no longer be used to register managed instances.

        - **Expired** *(boolean) --*

          Whether or not the activation is expired.

        - **CreatedDate** *(datetime) --*

          The date the activation was created.

        - **Tags** *(list) --*

          Tags assigned to the activation.

          - *(dict) --*

            Metadata that you assign to your AWS resources. Tags enable you to categorize your
            resources in different ways, for example, by purpose, owner, or environment. In Systems
            Manager, you can apply tags to documents, managed instances, maintenance windows,
            Parameter Store parameters, and patch baselines.

            - **Key** *(string) --*

              The name of the tag.

            - **Value** *(string) --*

              The value of the tag.

    - **NextToken** *(string) --*

      The token for the next set of items to return. Use this token to get the next set of results.
    """


_ClientDescribeAssociationExecutionTargetsFiltersTypeDef = TypedDict(
    "_ClientDescribeAssociationExecutionTargetsFiltersTypeDef",
    {"Key": str, "Value": str},
)


class ClientDescribeAssociationExecutionTargetsFiltersTypeDef(
    _ClientDescribeAssociationExecutionTargetsFiltersTypeDef
):
    """
    Type definition for `ClientDescribeAssociationExecutionTargets` `Filters`

    Filters for the association execution.

    - **Key** *(string) --* **[REQUIRED]**

      The key value used in the request.

    - **Value** *(string) --* **[REQUIRED]**

      The value specified for the key.
    """


_ClientDescribeAssociationExecutionTargetsResponseAssociationExecutionTargetsOutputSourceTypeDef = TypedDict(
    "_ClientDescribeAssociationExecutionTargetsResponseAssociationExecutionTargetsOutputSourceTypeDef",
    {"OutputSourceId": str, "OutputSourceType": str},
    total=False,
)


class ClientDescribeAssociationExecutionTargetsResponseAssociationExecutionTargetsOutputSourceTypeDef(
    _ClientDescribeAssociationExecutionTargetsResponseAssociationExecutionTargetsOutputSourceTypeDef
):
    """
    Type definition for `ClientDescribeAssociationExecutionTargetsResponseAssociationExecutionTargets` `OutputSource`

    The location where the association details are saved.

    - **OutputSourceId** *(string) --*

      The ID of the output source, for example the URL of an Amazon S3 bucket.

    - **OutputSourceType** *(string) --*

      The type of source where the association execution details are stored, for example,
      Amazon S3.
    """


_ClientDescribeAssociationExecutionTargetsResponseAssociationExecutionTargetsTypeDef = TypedDict(
    "_ClientDescribeAssociationExecutionTargetsResponseAssociationExecutionTargetsTypeDef",
    {
        "AssociationId": str,
        "AssociationVersion": str,
        "ExecutionId": str,
        "ResourceId": str,
        "ResourceType": str,
        "Status": str,
        "DetailedStatus": str,
        "LastExecutionDate": datetime,
        "OutputSource": ClientDescribeAssociationExecutionTargetsResponseAssociationExecutionTargetsOutputSourceTypeDef,
    },
    total=False,
)


class ClientDescribeAssociationExecutionTargetsResponseAssociationExecutionTargetsTypeDef(
    _ClientDescribeAssociationExecutionTargetsResponseAssociationExecutionTargetsTypeDef
):
    """
    Type definition for `ClientDescribeAssociationExecutionTargetsResponse` `AssociationExecutionTargets`

    Includes information about the specified association execution.

    - **AssociationId** *(string) --*

      The association ID.

    - **AssociationVersion** *(string) --*

      The association version.

    - **ExecutionId** *(string) --*

      The execution ID.

    - **ResourceId** *(string) --*

      The resource ID, for example, the instance ID where the association ran.

    - **ResourceType** *(string) --*

      The resource type, for example, instance.

    - **Status** *(string) --*

      The association execution status.

    - **DetailedStatus** *(string) --*

      Detailed information about the execution status.

    - **LastExecutionDate** *(datetime) --*

      The date of the last execution.

    - **OutputSource** *(dict) --*

      The location where the association details are saved.

      - **OutputSourceId** *(string) --*

        The ID of the output source, for example the URL of an Amazon S3 bucket.

      - **OutputSourceType** *(string) --*

        The type of source where the association execution details are stored, for example,
        Amazon S3.
    """


_ClientDescribeAssociationExecutionTargetsResponseTypeDef = TypedDict(
    "_ClientDescribeAssociationExecutionTargetsResponseTypeDef",
    {
        "AssociationExecutionTargets": List[
            ClientDescribeAssociationExecutionTargetsResponseAssociationExecutionTargetsTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)


class ClientDescribeAssociationExecutionTargetsResponseTypeDef(
    _ClientDescribeAssociationExecutionTargetsResponseTypeDef
):
    """
    Type definition for `ClientDescribeAssociationExecutionTargets` `Response`

    - **AssociationExecutionTargets** *(list) --*

      Information about the execution.

      - *(dict) --*

        Includes information about the specified association execution.

        - **AssociationId** *(string) --*

          The association ID.

        - **AssociationVersion** *(string) --*

          The association version.

        - **ExecutionId** *(string) --*

          The execution ID.

        - **ResourceId** *(string) --*

          The resource ID, for example, the instance ID where the association ran.

        - **ResourceType** *(string) --*

          The resource type, for example, instance.

        - **Status** *(string) --*

          The association execution status.

        - **DetailedStatus** *(string) --*

          Detailed information about the execution status.

        - **LastExecutionDate** *(datetime) --*

          The date of the last execution.

        - **OutputSource** *(dict) --*

          The location where the association details are saved.

          - **OutputSourceId** *(string) --*

            The ID of the output source, for example the URL of an Amazon S3 bucket.

          - **OutputSourceType** *(string) --*

            The type of source where the association execution details are stored, for example,
            Amazon S3.

    - **NextToken** *(string) --*

      The token for the next set of items to return. Use this token to get the next set of results.
    """


_ClientDescribeAssociationExecutionsFiltersTypeDef = TypedDict(
    "_ClientDescribeAssociationExecutionsFiltersTypeDef",
    {"Key": str, "Value": str, "Type": str},
)


class ClientDescribeAssociationExecutionsFiltersTypeDef(
    _ClientDescribeAssociationExecutionsFiltersTypeDef
):
    """
    Type definition for `ClientDescribeAssociationExecutions` `Filters`

    Filters used in the request.

    - **Key** *(string) --* **[REQUIRED]**

      The key value used in the request.

    - **Value** *(string) --* **[REQUIRED]**

      The value specified for the key.

    - **Type** *(string) --* **[REQUIRED]**

      The filter type specified in the request.
    """


_ClientDescribeAssociationExecutionsResponseAssociationExecutionsTypeDef = TypedDict(
    "_ClientDescribeAssociationExecutionsResponseAssociationExecutionsTypeDef",
    {
        "AssociationId": str,
        "AssociationVersion": str,
        "ExecutionId": str,
        "Status": str,
        "DetailedStatus": str,
        "CreatedTime": datetime,
        "LastExecutionDate": datetime,
        "ResourceCountByStatus": str,
    },
    total=False,
)


class ClientDescribeAssociationExecutionsResponseAssociationExecutionsTypeDef(
    _ClientDescribeAssociationExecutionsResponseAssociationExecutionsTypeDef
):
    """
    Type definition for `ClientDescribeAssociationExecutionsResponse` `AssociationExecutions`

    Includes information about the specified association.

    - **AssociationId** *(string) --*

      The association ID.

    - **AssociationVersion** *(string) --*

      The association version.

    - **ExecutionId** *(string) --*

      The execution ID for the association.

    - **Status** *(string) --*

      The status of the association execution.

    - **DetailedStatus** *(string) --*

      Detailed status information about the execution.

    - **CreatedTime** *(datetime) --*

      The time the execution started.

    - **LastExecutionDate** *(datetime) --*

      The date of the last execution.

    - **ResourceCountByStatus** *(string) --*

      An aggregate status of the resources in the execution based on the status type.
    """


_ClientDescribeAssociationExecutionsResponseTypeDef = TypedDict(
    "_ClientDescribeAssociationExecutionsResponseTypeDef",
    {
        "AssociationExecutions": List[
            ClientDescribeAssociationExecutionsResponseAssociationExecutionsTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)


class ClientDescribeAssociationExecutionsResponseTypeDef(
    _ClientDescribeAssociationExecutionsResponseTypeDef
):
    """
    Type definition for `ClientDescribeAssociationExecutions` `Response`

    - **AssociationExecutions** *(list) --*

      A list of the executions for the specified association ID.

      - *(dict) --*

        Includes information about the specified association.

        - **AssociationId** *(string) --*

          The association ID.

        - **AssociationVersion** *(string) --*

          The association version.

        - **ExecutionId** *(string) --*

          The execution ID for the association.

        - **Status** *(string) --*

          The status of the association execution.

        - **DetailedStatus** *(string) --*

          Detailed status information about the execution.

        - **CreatedTime** *(datetime) --*

          The time the execution started.

        - **LastExecutionDate** *(datetime) --*

          The date of the last execution.

        - **ResourceCountByStatus** *(string) --*

          An aggregate status of the resources in the execution based on the status type.

    - **NextToken** *(string) --*

      The token for the next set of items to return. Use this token to get the next set of results.
    """


_ClientDescribeAssociationResponseAssociationDescriptionOutputLocationS3LocationTypeDef = TypedDict(
    "_ClientDescribeAssociationResponseAssociationDescriptionOutputLocationS3LocationTypeDef",
    {"OutputS3Region": str, "OutputS3BucketName": str, "OutputS3KeyPrefix": str},
    total=False,
)


class ClientDescribeAssociationResponseAssociationDescriptionOutputLocationS3LocationTypeDef(
    _ClientDescribeAssociationResponseAssociationDescriptionOutputLocationS3LocationTypeDef
):
    """
    Type definition for `ClientDescribeAssociationResponseAssociationDescriptionOutputLocation` `S3Location`

    An Amazon S3 bucket where you want to store the results of this request.

    - **OutputS3Region** *(string) --*

      (Deprecated) You can no longer specify this parameter. The system ignores it. Instead,
      Systems Manager automatically determines the Amazon S3 bucket region.

    - **OutputS3BucketName** *(string) --*

      The name of the Amazon S3 bucket.

    - **OutputS3KeyPrefix** *(string) --*

      The Amazon S3 bucket subfolder.
    """


_ClientDescribeAssociationResponseAssociationDescriptionOutputLocationTypeDef = TypedDict(
    "_ClientDescribeAssociationResponseAssociationDescriptionOutputLocationTypeDef",
    {
        "S3Location": ClientDescribeAssociationResponseAssociationDescriptionOutputLocationS3LocationTypeDef
    },
    total=False,
)


class ClientDescribeAssociationResponseAssociationDescriptionOutputLocationTypeDef(
    _ClientDescribeAssociationResponseAssociationDescriptionOutputLocationTypeDef
):
    """
    Type definition for `ClientDescribeAssociationResponseAssociationDescription` `OutputLocation`

    An Amazon S3 bucket where you want to store the output details of the request.

    - **S3Location** *(dict) --*

      An Amazon S3 bucket where you want to store the results of this request.

      - **OutputS3Region** *(string) --*

        (Deprecated) You can no longer specify this parameter. The system ignores it. Instead,
        Systems Manager automatically determines the Amazon S3 bucket region.

      - **OutputS3BucketName** *(string) --*

        The name of the Amazon S3 bucket.

      - **OutputS3KeyPrefix** *(string) --*

        The Amazon S3 bucket subfolder.
    """


_ClientDescribeAssociationResponseAssociationDescriptionOverviewTypeDef = TypedDict(
    "_ClientDescribeAssociationResponseAssociationDescriptionOverviewTypeDef",
    {
        "Status": str,
        "DetailedStatus": str,
        "AssociationStatusAggregatedCount": Dict[str, int],
    },
    total=False,
)


class ClientDescribeAssociationResponseAssociationDescriptionOverviewTypeDef(
    _ClientDescribeAssociationResponseAssociationDescriptionOverviewTypeDef
):
    """
    Type definition for `ClientDescribeAssociationResponseAssociationDescription` `Overview`

    Information about the association.

    - **Status** *(string) --*

      The status of the association. Status can be: Pending, Success, or Failed.

    - **DetailedStatus** *(string) --*

      A detailed status of the association.

    - **AssociationStatusAggregatedCount** *(dict) --*

      Returns the number of targets for the association status. For example, if you created an
      association with two instances, and one of them was successful, this would return the
      count of instances by status.

      - *(string) --*

        - *(integer) --*
    """


_ClientDescribeAssociationResponseAssociationDescriptionStatusTypeDef = TypedDict(
    "_ClientDescribeAssociationResponseAssociationDescriptionStatusTypeDef",
    {"Date": datetime, "Name": str, "Message": str, "AdditionalInfo": str},
    total=False,
)


class ClientDescribeAssociationResponseAssociationDescriptionStatusTypeDef(
    _ClientDescribeAssociationResponseAssociationDescriptionStatusTypeDef
):
    """
    Type definition for `ClientDescribeAssociationResponseAssociationDescription` `Status`

    The association status.

    - **Date** *(datetime) --*

      The date when the status changed.

    - **Name** *(string) --*

      The status.

    - **Message** *(string) --*

      The reason for the status.

    - **AdditionalInfo** *(string) --*

      A user-defined string.
    """


_ClientDescribeAssociationResponseAssociationDescriptionTargetsTypeDef = TypedDict(
    "_ClientDescribeAssociationResponseAssociationDescriptionTargetsTypeDef",
    {"Key": str, "Values": List[str]},
    total=False,
)


class ClientDescribeAssociationResponseAssociationDescriptionTargetsTypeDef(
    _ClientDescribeAssociationResponseAssociationDescriptionTargetsTypeDef
):
    """
    Type definition for `ClientDescribeAssociationResponseAssociationDescription` `Targets`

    An array of search criteria that targets instances using a Key,Value combination that you
    specify.

    Supported formats include the following.

    * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

    * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

    * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

    * (Maintenance window targets only)
    ``Key=resource-groups:Name,Values=*resource-group-name* ``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

    For example:

    * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

    * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

    * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

    * (Maintenance window targets only)
    ``Key=resource-groups:Name,Values=ProductionResourceGroup``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC* ``

    For information about how to send commands that target instances using ``Key,Value``
    parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
    <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
    in the *AWS Systems Manager User Guide* .

    - **Key** *(string) --*

      User-defined criteria for sending commands that target instances that meet the criteria.

    - **Values** *(list) --*

      User-defined criteria that maps to ``Key`` . For example, if you specified
      ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
      instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

      - *(string) --*
    """


_ClientDescribeAssociationResponseAssociationDescriptionTypeDef = TypedDict(
    "_ClientDescribeAssociationResponseAssociationDescriptionTypeDef",
    {
        "Name": str,
        "InstanceId": str,
        "AssociationVersion": str,
        "Date": datetime,
        "LastUpdateAssociationDate": datetime,
        "Status": ClientDescribeAssociationResponseAssociationDescriptionStatusTypeDef,
        "Overview": ClientDescribeAssociationResponseAssociationDescriptionOverviewTypeDef,
        "DocumentVersion": str,
        "AutomationTargetParameterName": str,
        "Parameters": Dict[str, List[str]],
        "AssociationId": str,
        "Targets": List[
            ClientDescribeAssociationResponseAssociationDescriptionTargetsTypeDef
        ],
        "ScheduleExpression": str,
        "OutputLocation": ClientDescribeAssociationResponseAssociationDescriptionOutputLocationTypeDef,
        "LastExecutionDate": datetime,
        "LastSuccessfulExecutionDate": datetime,
        "AssociationName": str,
        "MaxErrors": str,
        "MaxConcurrency": str,
        "ComplianceSeverity": str,
    },
    total=False,
)


class ClientDescribeAssociationResponseAssociationDescriptionTypeDef(
    _ClientDescribeAssociationResponseAssociationDescriptionTypeDef
):
    """
    Type definition for `ClientDescribeAssociationResponse` `AssociationDescription`

    Information about the association.

    - **Name** *(string) --*

      The name of the Systems Manager document.

    - **InstanceId** *(string) --*

      The ID of the instance.

    - **AssociationVersion** *(string) --*

      The association version.

    - **Date** *(datetime) --*

      The date when the association was made.

    - **LastUpdateAssociationDate** *(datetime) --*

      The date when the association was last updated.

    - **Status** *(dict) --*

      The association status.

      - **Date** *(datetime) --*

        The date when the status changed.

      - **Name** *(string) --*

        The status.

      - **Message** *(string) --*

        The reason for the status.

      - **AdditionalInfo** *(string) --*

        A user-defined string.

    - **Overview** *(dict) --*

      Information about the association.

      - **Status** *(string) --*

        The status of the association. Status can be: Pending, Success, or Failed.

      - **DetailedStatus** *(string) --*

        A detailed status of the association.

      - **AssociationStatusAggregatedCount** *(dict) --*

        Returns the number of targets for the association status. For example, if you created an
        association with two instances, and one of them was successful, this would return the
        count of instances by status.

        - *(string) --*

          - *(integer) --*

    - **DocumentVersion** *(string) --*

      The document version.

    - **AutomationTargetParameterName** *(string) --*

      Specify the target for the association. This target is required for associations that use
      an Automation document and target resources by using rate controls.

    - **Parameters** *(dict) --*

      A description of the parameters for a document.

      - *(string) --*

        - *(list) --*

          - *(string) --*

    - **AssociationId** *(string) --*

      The association ID.

    - **Targets** *(list) --*

      The instances targeted by the request.

      - *(dict) --*

        An array of search criteria that targets instances using a Key,Value combination that you
        specify.

        Supported formats include the following.

        * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

        * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

        * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

        * (Maintenance window targets only)
        ``Key=resource-groups:Name,Values=*resource-group-name* ``

        * (Maintenance window targets only)
        ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

        For example:

        * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

        * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

        * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

        * (Maintenance window targets only)
        ``Key=resource-groups:Name,Values=ProductionResourceGroup``

        * (Maintenance window targets only)
        ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC* ``

        For information about how to send commands that target instances using ``Key,Value``
        parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
        <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
        in the *AWS Systems Manager User Guide* .

        - **Key** *(string) --*

          User-defined criteria for sending commands that target instances that meet the criteria.

        - **Values** *(list) --*

          User-defined criteria that maps to ``Key`` . For example, if you specified
          ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
          instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

          - *(string) --*

    - **ScheduleExpression** *(string) --*

      A cron expression that specifies a schedule when the association runs.

    - **OutputLocation** *(dict) --*

      An Amazon S3 bucket where you want to store the output details of the request.

      - **S3Location** *(dict) --*

        An Amazon S3 bucket where you want to store the results of this request.

        - **OutputS3Region** *(string) --*

          (Deprecated) You can no longer specify this parameter. The system ignores it. Instead,
          Systems Manager automatically determines the Amazon S3 bucket region.

        - **OutputS3BucketName** *(string) --*

          The name of the Amazon S3 bucket.

        - **OutputS3KeyPrefix** *(string) --*

          The Amazon S3 bucket subfolder.

    - **LastExecutionDate** *(datetime) --*

      The date on which the association was last run.

    - **LastSuccessfulExecutionDate** *(datetime) --*

      The last date on which the association was successfully run.

    - **AssociationName** *(string) --*

      The association name.

    - **MaxErrors** *(string) --*

      The number of errors that are allowed before the system stops sending requests to run the
      association on additional targets. You can specify either an absolute number of errors, for
      example 10, or a percentage of the target set, for example 10%. If you specify 3, for
      example, the system stops sending requests when the fourth error is received. If you
      specify 0, then the system stops sending requests after the first error is returned. If you
      run an association on 50 instances and set MaxError to 10%, then the system stops sending
      the request when the sixth error is received.

      Executions that are already running an association when MaxErrors is reached are allowed to
      complete, but some of these executions may fail as well. If you need to ensure that there
      won't be more than max-errors failed executions, set MaxConcurrency to 1 so that executions
      proceed one at a time.

    - **MaxConcurrency** *(string) --*

      The maximum number of targets allowed to run the association at the same time. You can
      specify a number, for example 10, or a percentage of the target set, for example 10%. The
      default value is 100%, which means all targets run the association at the same time.

      If a new instance starts and attempts to run an association while Systems Manager is
      running MaxConcurrency associations, the association is allowed to run. During the next
      association interval, the new instance will process its association within the limit
      specified for MaxConcurrency.

    - **ComplianceSeverity** *(string) --*

      The severity level that is assigned to the association.
    """


_ClientDescribeAssociationResponseTypeDef = TypedDict(
    "_ClientDescribeAssociationResponseTypeDef",
    {
        "AssociationDescription": ClientDescribeAssociationResponseAssociationDescriptionTypeDef
    },
    total=False,
)


class ClientDescribeAssociationResponseTypeDef(
    _ClientDescribeAssociationResponseTypeDef
):
    """
    Type definition for `ClientDescribeAssociation` `Response`

    - **AssociationDescription** *(dict) --*

      Information about the association.

      - **Name** *(string) --*

        The name of the Systems Manager document.

      - **InstanceId** *(string) --*

        The ID of the instance.

      - **AssociationVersion** *(string) --*

        The association version.

      - **Date** *(datetime) --*

        The date when the association was made.

      - **LastUpdateAssociationDate** *(datetime) --*

        The date when the association was last updated.

      - **Status** *(dict) --*

        The association status.

        - **Date** *(datetime) --*

          The date when the status changed.

        - **Name** *(string) --*

          The status.

        - **Message** *(string) --*

          The reason for the status.

        - **AdditionalInfo** *(string) --*

          A user-defined string.

      - **Overview** *(dict) --*

        Information about the association.

        - **Status** *(string) --*

          The status of the association. Status can be: Pending, Success, or Failed.

        - **DetailedStatus** *(string) --*

          A detailed status of the association.

        - **AssociationStatusAggregatedCount** *(dict) --*

          Returns the number of targets for the association status. For example, if you created an
          association with two instances, and one of them was successful, this would return the
          count of instances by status.

          - *(string) --*

            - *(integer) --*

      - **DocumentVersion** *(string) --*

        The document version.

      - **AutomationTargetParameterName** *(string) --*

        Specify the target for the association. This target is required for associations that use
        an Automation document and target resources by using rate controls.

      - **Parameters** *(dict) --*

        A description of the parameters for a document.

        - *(string) --*

          - *(list) --*

            - *(string) --*

      - **AssociationId** *(string) --*

        The association ID.

      - **Targets** *(list) --*

        The instances targeted by the request.

        - *(dict) --*

          An array of search criteria that targets instances using a Key,Value combination that you
          specify.

          Supported formats include the following.

          * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

          * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

          * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

          * (Maintenance window targets only)
          ``Key=resource-groups:Name,Values=*resource-group-name* ``

          * (Maintenance window targets only)
          ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

          For example:

          * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

          * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

          * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

          * (Maintenance window targets only)
          ``Key=resource-groups:Name,Values=ProductionResourceGroup``

          * (Maintenance window targets only)
          ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC* ``

          For information about how to send commands that target instances using ``Key,Value``
          parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
          <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
          in the *AWS Systems Manager User Guide* .

          - **Key** *(string) --*

            User-defined criteria for sending commands that target instances that meet the criteria.

          - **Values** *(list) --*

            User-defined criteria that maps to ``Key`` . For example, if you specified
            ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
            instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

            - *(string) --*

      - **ScheduleExpression** *(string) --*

        A cron expression that specifies a schedule when the association runs.

      - **OutputLocation** *(dict) --*

        An Amazon S3 bucket where you want to store the output details of the request.

        - **S3Location** *(dict) --*

          An Amazon S3 bucket where you want to store the results of this request.

          - **OutputS3Region** *(string) --*

            (Deprecated) You can no longer specify this parameter. The system ignores it. Instead,
            Systems Manager automatically determines the Amazon S3 bucket region.

          - **OutputS3BucketName** *(string) --*

            The name of the Amazon S3 bucket.

          - **OutputS3KeyPrefix** *(string) --*

            The Amazon S3 bucket subfolder.

      - **LastExecutionDate** *(datetime) --*

        The date on which the association was last run.

      - **LastSuccessfulExecutionDate** *(datetime) --*

        The last date on which the association was successfully run.

      - **AssociationName** *(string) --*

        The association name.

      - **MaxErrors** *(string) --*

        The number of errors that are allowed before the system stops sending requests to run the
        association on additional targets. You can specify either an absolute number of errors, for
        example 10, or a percentage of the target set, for example 10%. If you specify 3, for
        example, the system stops sending requests when the fourth error is received. If you
        specify 0, then the system stops sending requests after the first error is returned. If you
        run an association on 50 instances and set MaxError to 10%, then the system stops sending
        the request when the sixth error is received.

        Executions that are already running an association when MaxErrors is reached are allowed to
        complete, but some of these executions may fail as well. If you need to ensure that there
        won't be more than max-errors failed executions, set MaxConcurrency to 1 so that executions
        proceed one at a time.

      - **MaxConcurrency** *(string) --*

        The maximum number of targets allowed to run the association at the same time. You can
        specify a number, for example 10, or a percentage of the target set, for example 10%. The
        default value is 100%, which means all targets run the association at the same time.

        If a new instance starts and attempts to run an association while Systems Manager is
        running MaxConcurrency associations, the association is allowed to run. During the next
        association interval, the new instance will process its association within the limit
        specified for MaxConcurrency.

      - **ComplianceSeverity** *(string) --*

        The severity level that is assigned to the association.
    """


_ClientDescribeAutomationExecutionsFiltersTypeDef = TypedDict(
    "_ClientDescribeAutomationExecutionsFiltersTypeDef",
    {"Key": str, "Values": List[str]},
)


class ClientDescribeAutomationExecutionsFiltersTypeDef(
    _ClientDescribeAutomationExecutionsFiltersTypeDef
):
    """
    Type definition for `ClientDescribeAutomationExecutions` `Filters`

    A filter used to match specific automation executions. This is used to limit the scope of
    Automation execution information returned.

    - **Key** *(string) --* **[REQUIRED]**

      One or more keys to limit the results. Valid filter keys include the following:
      DocumentNamePrefix, ExecutionStatus, ExecutionId, ParentExecutionId, CurrentAction,
      StartTimeBefore, StartTimeAfter.

    - **Values** *(list) --* **[REQUIRED]**

      The values used to limit the execution information associated with the filter's key.

      - *(string) --*
    """


_ClientDescribeAutomationExecutionsResponseAutomationExecutionMetadataListResolvedTargetsTypeDef = TypedDict(
    "_ClientDescribeAutomationExecutionsResponseAutomationExecutionMetadataListResolvedTargetsTypeDef",
    {"ParameterValues": List[str], "Truncated": bool},
    total=False,
)


class ClientDescribeAutomationExecutionsResponseAutomationExecutionMetadataListResolvedTargetsTypeDef(
    _ClientDescribeAutomationExecutionsResponseAutomationExecutionMetadataListResolvedTargetsTypeDef
):
    """
    Type definition for `ClientDescribeAutomationExecutionsResponseAutomationExecutionMetadataList` `ResolvedTargets`

    A list of targets that resolved during the execution.

    - **ParameterValues** *(list) --*

      A list of parameter values sent to targets that resolved during the Automation
      execution.

      - *(string) --*

    - **Truncated** *(boolean) --*

      A boolean value indicating whether the resolved target list is truncated.
    """


_ClientDescribeAutomationExecutionsResponseAutomationExecutionMetadataListTargetsTypeDef = TypedDict(
    "_ClientDescribeAutomationExecutionsResponseAutomationExecutionMetadataListTargetsTypeDef",
    {"Key": str, "Values": List[str]},
    total=False,
)


class ClientDescribeAutomationExecutionsResponseAutomationExecutionMetadataListTargetsTypeDef(
    _ClientDescribeAutomationExecutionsResponseAutomationExecutionMetadataListTargetsTypeDef
):
    """
    Type definition for `ClientDescribeAutomationExecutionsResponseAutomationExecutionMetadataList` `Targets`

    An array of search criteria that targets instances using a Key,Value combination that
    you specify.

    Supported formats include the following.

    * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

    * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

    * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

    * (Maintenance window targets only)
    ``Key=resource-groups:Name,Values=*resource-group-name* ``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

    For example:

    * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

    * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

    * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

    * (Maintenance window targets only)
    ``Key=resource-groups:Name,Values=ProductionResourceGroup``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC*
    ``

    For information about how to send commands that target instances using ``Key,Value``
    parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
    <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
    in the *AWS Systems Manager User Guide* .

    - **Key** *(string) --*

      User-defined criteria for sending commands that target instances that meet the
      criteria.

    - **Values** *(list) --*

      User-defined criteria that maps to ``Key`` . For example, if you specified
      ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
      instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

      - *(string) --*
    """


_ClientDescribeAutomationExecutionsResponseAutomationExecutionMetadataListTypeDef = TypedDict(
    "_ClientDescribeAutomationExecutionsResponseAutomationExecutionMetadataListTypeDef",
    {
        "AutomationExecutionId": str,
        "DocumentName": str,
        "DocumentVersion": str,
        "AutomationExecutionStatus": str,
        "ExecutionStartTime": datetime,
        "ExecutionEndTime": datetime,
        "ExecutedBy": str,
        "LogFile": str,
        "Outputs": Dict[str, List[str]],
        "Mode": str,
        "ParentAutomationExecutionId": str,
        "CurrentStepName": str,
        "CurrentAction": str,
        "FailureMessage": str,
        "TargetParameterName": str,
        "Targets": List[
            ClientDescribeAutomationExecutionsResponseAutomationExecutionMetadataListTargetsTypeDef
        ],
        "TargetMaps": List[Dict[str, List[str]]],
        "ResolvedTargets": ClientDescribeAutomationExecutionsResponseAutomationExecutionMetadataListResolvedTargetsTypeDef,
        "MaxConcurrency": str,
        "MaxErrors": str,
        "Target": str,
        "AutomationType": str,
    },
    total=False,
)


class ClientDescribeAutomationExecutionsResponseAutomationExecutionMetadataListTypeDef(
    _ClientDescribeAutomationExecutionsResponseAutomationExecutionMetadataListTypeDef
):
    """
    Type definition for `ClientDescribeAutomationExecutionsResponse` `AutomationExecutionMetadataList`

    Details about a specific Automation execution.

    - **AutomationExecutionId** *(string) --*

      The execution ID.

    - **DocumentName** *(string) --*

      The name of the Automation document used during execution.

    - **DocumentVersion** *(string) --*

      The document version used during the execution.

    - **AutomationExecutionStatus** *(string) --*

      The status of the execution. Valid values include: Running, Succeeded, Failed, Timed out,
      or Cancelled.

    - **ExecutionStartTime** *(datetime) --*

      The time the execution started.>

    - **ExecutionEndTime** *(datetime) --*

      The time the execution finished. This is not populated if the execution is still in
      progress.

    - **ExecutedBy** *(string) --*

      The IAM role ARN of the user who ran the Automation.

    - **LogFile** *(string) --*

      An Amazon S3 bucket where execution information is stored.

    - **Outputs** *(dict) --*

      The list of execution outputs as defined in the Automation document.

      - *(string) --*

        - *(list) --*

          - *(string) --*

    - **Mode** *(string) --*

      The Automation execution mode.

    - **ParentAutomationExecutionId** *(string) --*

      The ExecutionId of the parent Automation.

    - **CurrentStepName** *(string) --*

      The name of the step that is currently running.

    - **CurrentAction** *(string) --*

      The action of the step that is currently running.

    - **FailureMessage** *(string) --*

      The list of execution outputs as defined in the Automation document.

    - **TargetParameterName** *(string) --*

      The list of execution outputs as defined in the Automation document.

    - **Targets** *(list) --*

      The targets defined by the user when starting the Automation.

      - *(dict) --*

        An array of search criteria that targets instances using a Key,Value combination that
        you specify.

        Supported formats include the following.

        * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

        * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

        * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

        * (Maintenance window targets only)
        ``Key=resource-groups:Name,Values=*resource-group-name* ``

        * (Maintenance window targets only)
        ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

        For example:

        * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

        * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

        * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

        * (Maintenance window targets only)
        ``Key=resource-groups:Name,Values=ProductionResourceGroup``

        * (Maintenance window targets only)
        ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC*
        ``

        For information about how to send commands that target instances using ``Key,Value``
        parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
        <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
        in the *AWS Systems Manager User Guide* .

        - **Key** *(string) --*

          User-defined criteria for sending commands that target instances that meet the
          criteria.

        - **Values** *(list) --*

          User-defined criteria that maps to ``Key`` . For example, if you specified
          ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
          instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

          - *(string) --*

    - **TargetMaps** *(list) --*

      The specified key-value mapping of document parameters to target resources.

      - *(dict) --*

        - *(string) --*

          - *(list) --*

            - *(string) --*

    - **ResolvedTargets** *(dict) --*

      A list of targets that resolved during the execution.

      - **ParameterValues** *(list) --*

        A list of parameter values sent to targets that resolved during the Automation
        execution.

        - *(string) --*

      - **Truncated** *(boolean) --*

        A boolean value indicating whether the resolved target list is truncated.

    - **MaxConcurrency** *(string) --*

      The MaxConcurrency value specified by the user when starting the Automation.

    - **MaxErrors** *(string) --*

      The MaxErrors value specified by the user when starting the Automation.

    - **Target** *(string) --*

      The list of execution outputs as defined in the Automation document.

    - **AutomationType** *(string) --*

      Use this filter with  DescribeAutomationExecutions . Specify either Local or
      CrossAccount. CrossAccount is an Automation that runs in multiple AWS Regions and
      accounts. For more information, see `Executing Automations in Multiple AWS Regions and
      Accounts
      <http://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-automation-multiple-accounts-and-regions.html>`__
      in the *AWS Systems Manager User Guide* .
    """


_ClientDescribeAutomationExecutionsResponseTypeDef = TypedDict(
    "_ClientDescribeAutomationExecutionsResponseTypeDef",
    {
        "AutomationExecutionMetadataList": List[
            ClientDescribeAutomationExecutionsResponseAutomationExecutionMetadataListTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)


class ClientDescribeAutomationExecutionsResponseTypeDef(
    _ClientDescribeAutomationExecutionsResponseTypeDef
):
    """
    Type definition for `ClientDescribeAutomationExecutions` `Response`

    - **AutomationExecutionMetadataList** *(list) --*

      The list of details about each automation execution which has occurred which matches the
      filter specification, if any.

      - *(dict) --*

        Details about a specific Automation execution.

        - **AutomationExecutionId** *(string) --*

          The execution ID.

        - **DocumentName** *(string) --*

          The name of the Automation document used during execution.

        - **DocumentVersion** *(string) --*

          The document version used during the execution.

        - **AutomationExecutionStatus** *(string) --*

          The status of the execution. Valid values include: Running, Succeeded, Failed, Timed out,
          or Cancelled.

        - **ExecutionStartTime** *(datetime) --*

          The time the execution started.>

        - **ExecutionEndTime** *(datetime) --*

          The time the execution finished. This is not populated if the execution is still in
          progress.

        - **ExecutedBy** *(string) --*

          The IAM role ARN of the user who ran the Automation.

        - **LogFile** *(string) --*

          An Amazon S3 bucket where execution information is stored.

        - **Outputs** *(dict) --*

          The list of execution outputs as defined in the Automation document.

          - *(string) --*

            - *(list) --*

              - *(string) --*

        - **Mode** *(string) --*

          The Automation execution mode.

        - **ParentAutomationExecutionId** *(string) --*

          The ExecutionId of the parent Automation.

        - **CurrentStepName** *(string) --*

          The name of the step that is currently running.

        - **CurrentAction** *(string) --*

          The action of the step that is currently running.

        - **FailureMessage** *(string) --*

          The list of execution outputs as defined in the Automation document.

        - **TargetParameterName** *(string) --*

          The list of execution outputs as defined in the Automation document.

        - **Targets** *(list) --*

          The targets defined by the user when starting the Automation.

          - *(dict) --*

            An array of search criteria that targets instances using a Key,Value combination that
            you specify.

            Supported formats include the following.

            * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

            * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

            * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

            * (Maintenance window targets only)
            ``Key=resource-groups:Name,Values=*resource-group-name* ``

            * (Maintenance window targets only)
            ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

            For example:

            * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

            * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

            * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

            * (Maintenance window targets only)
            ``Key=resource-groups:Name,Values=ProductionResourceGroup``

            * (Maintenance window targets only)
            ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC*
            ``

            For information about how to send commands that target instances using ``Key,Value``
            parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
            <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
            in the *AWS Systems Manager User Guide* .

            - **Key** *(string) --*

              User-defined criteria for sending commands that target instances that meet the
              criteria.

            - **Values** *(list) --*

              User-defined criteria that maps to ``Key`` . For example, if you specified
              ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
              instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

              - *(string) --*

        - **TargetMaps** *(list) --*

          The specified key-value mapping of document parameters to target resources.

          - *(dict) --*

            - *(string) --*

              - *(list) --*

                - *(string) --*

        - **ResolvedTargets** *(dict) --*

          A list of targets that resolved during the execution.

          - **ParameterValues** *(list) --*

            A list of parameter values sent to targets that resolved during the Automation
            execution.

            - *(string) --*

          - **Truncated** *(boolean) --*

            A boolean value indicating whether the resolved target list is truncated.

        - **MaxConcurrency** *(string) --*

          The MaxConcurrency value specified by the user when starting the Automation.

        - **MaxErrors** *(string) --*

          The MaxErrors value specified by the user when starting the Automation.

        - **Target** *(string) --*

          The list of execution outputs as defined in the Automation document.

        - **AutomationType** *(string) --*

          Use this filter with  DescribeAutomationExecutions . Specify either Local or
          CrossAccount. CrossAccount is an Automation that runs in multiple AWS Regions and
          accounts. For more information, see `Executing Automations in Multiple AWS Regions and
          Accounts
          <http://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-automation-multiple-accounts-and-regions.html>`__
          in the *AWS Systems Manager User Guide* .

    - **NextToken** *(string) --*

      The token to use when requesting the next set of items. If there are no additional items to
      return, the string is empty.
    """


_ClientDescribeAutomationStepExecutionsFiltersTypeDef = TypedDict(
    "_ClientDescribeAutomationStepExecutionsFiltersTypeDef",
    {"Key": str, "Values": List[str]},
)


class ClientDescribeAutomationStepExecutionsFiltersTypeDef(
    _ClientDescribeAutomationStepExecutionsFiltersTypeDef
):
    """
    Type definition for `ClientDescribeAutomationStepExecutions` `Filters`

    A filter to limit the amount of step execution information returned by the call.

    - **Key** *(string) --* **[REQUIRED]**

      One or more keys to limit the results. Valid filter keys include the following: StepName,
      Action, StepExecutionId, StepExecutionStatus, StartTimeBefore, StartTimeAfter.

    - **Values** *(list) --* **[REQUIRED]**

      The values of the filter key.

      - *(string) --*
    """


_ClientDescribeAutomationStepExecutionsResponseStepExecutionsFailureDetailsTypeDef = TypedDict(
    "_ClientDescribeAutomationStepExecutionsResponseStepExecutionsFailureDetailsTypeDef",
    {"FailureStage": str, "FailureType": str, "Details": Dict[str, List[str]]},
    total=False,
)


class ClientDescribeAutomationStepExecutionsResponseStepExecutionsFailureDetailsTypeDef(
    _ClientDescribeAutomationStepExecutionsResponseStepExecutionsFailureDetailsTypeDef
):
    """
    Type definition for `ClientDescribeAutomationStepExecutionsResponseStepExecutions` `FailureDetails`

    Information about the Automation failure.

    - **FailureStage** *(string) --*

      The stage of the Automation execution when the failure occurred. The stages include the
      following: InputValidation, PreVerification, Invocation, PostVerification.

    - **FailureType** *(string) --*

      The type of Automation failure. Failure types include the following: Action,
      Permission, Throttling, Verification, Internal.

    - **Details** *(dict) --*

      Detailed information about the Automation step failure.

      - *(string) --*

        - *(list) --*

          - *(string) --*
    """


_ClientDescribeAutomationStepExecutionsResponseStepExecutionsTargetLocationTypeDef = TypedDict(
    "_ClientDescribeAutomationStepExecutionsResponseStepExecutionsTargetLocationTypeDef",
    {
        "Accounts": List[str],
        "Regions": List[str],
        "TargetLocationMaxConcurrency": str,
        "TargetLocationMaxErrors": str,
        "ExecutionRoleName": str,
    },
    total=False,
)


class ClientDescribeAutomationStepExecutionsResponseStepExecutionsTargetLocationTypeDef(
    _ClientDescribeAutomationStepExecutionsResponseStepExecutionsTargetLocationTypeDef
):
    """
    Type definition for `ClientDescribeAutomationStepExecutionsResponseStepExecutions` `TargetLocation`

    The combination of AWS Regions and accounts targeted by the current Automation execution.

    - **Accounts** *(list) --*

      The AWS accounts targeted by the current Automation execution.

      - *(string) --*

    - **Regions** *(list) --*

      The AWS Regions targeted by the current Automation execution.

      - *(string) --*

    - **TargetLocationMaxConcurrency** *(string) --*

      The maximum number of AWS accounts and AWS regions allowed to run the Automation
      concurrently

    - **TargetLocationMaxErrors** *(string) --*

      The maximum number of errors allowed before the system stops queueing additional
      Automation executions for the currently running Automation.

    - **ExecutionRoleName** *(string) --*

      The Automation execution role used by the currently running Automation.
    """


_ClientDescribeAutomationStepExecutionsResponseStepExecutionsTargetsTypeDef = TypedDict(
    "_ClientDescribeAutomationStepExecutionsResponseStepExecutionsTargetsTypeDef",
    {"Key": str, "Values": List[str]},
    total=False,
)


class ClientDescribeAutomationStepExecutionsResponseStepExecutionsTargetsTypeDef(
    _ClientDescribeAutomationStepExecutionsResponseStepExecutionsTargetsTypeDef
):
    """
    Type definition for `ClientDescribeAutomationStepExecutionsResponseStepExecutions` `Targets`

    An array of search criteria that targets instances using a Key,Value combination that
    you specify.

    Supported formats include the following.

    * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

    * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

    * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

    * (Maintenance window targets only)
    ``Key=resource-groups:Name,Values=*resource-group-name* ``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

    For example:

    * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

    * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

    * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

    * (Maintenance window targets only)
    ``Key=resource-groups:Name,Values=ProductionResourceGroup``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC*
    ``

    For information about how to send commands that target instances using ``Key,Value``
    parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
    <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
    in the *AWS Systems Manager User Guide* .

    - **Key** *(string) --*

      User-defined criteria for sending commands that target instances that meet the
      criteria.

    - **Values** *(list) --*

      User-defined criteria that maps to ``Key`` . For example, if you specified
      ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
      instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

      - *(string) --*
    """


_ClientDescribeAutomationStepExecutionsResponseStepExecutionsTypeDef = TypedDict(
    "_ClientDescribeAutomationStepExecutionsResponseStepExecutionsTypeDef",
    {
        "StepName": str,
        "Action": str,
        "TimeoutSeconds": int,
        "OnFailure": str,
        "MaxAttempts": int,
        "ExecutionStartTime": datetime,
        "ExecutionEndTime": datetime,
        "StepStatus": str,
        "ResponseCode": str,
        "Inputs": Dict[str, str],
        "Outputs": Dict[str, List[str]],
        "Response": str,
        "FailureMessage": str,
        "FailureDetails": ClientDescribeAutomationStepExecutionsResponseStepExecutionsFailureDetailsTypeDef,
        "StepExecutionId": str,
        "OverriddenParameters": Dict[str, List[str]],
        "IsEnd": bool,
        "NextStep": str,
        "IsCritical": bool,
        "ValidNextSteps": List[str],
        "Targets": List[
            ClientDescribeAutomationStepExecutionsResponseStepExecutionsTargetsTypeDef
        ],
        "TargetLocation": ClientDescribeAutomationStepExecutionsResponseStepExecutionsTargetLocationTypeDef,
    },
    total=False,
)


class ClientDescribeAutomationStepExecutionsResponseStepExecutionsTypeDef(
    _ClientDescribeAutomationStepExecutionsResponseStepExecutionsTypeDef
):
    """
    Type definition for `ClientDescribeAutomationStepExecutionsResponse` `StepExecutions`

    Detailed information about an the execution state of an Automation step.

    - **StepName** *(string) --*

      The name of this execution step.

    - **Action** *(string) --*

      The action this step performs. The action determines the behavior of the step.

    - **TimeoutSeconds** *(integer) --*

      The timeout seconds of the step.

    - **OnFailure** *(string) --*

      The action to take if the step fails. The default value is Abort.

    - **MaxAttempts** *(integer) --*

      The maximum number of tries to run the action of the step. The default value is 1.

    - **ExecutionStartTime** *(datetime) --*

      If a step has begun execution, this contains the time the step started. If the step is in
      Pending status, this field is not populated.

    - **ExecutionEndTime** *(datetime) --*

      If a step has finished execution, this contains the time the execution ended. If the step
      has not yet concluded, this field is not populated.

    - **StepStatus** *(string) --*

      The execution status for this step. Valid values include: Pending, InProgress, Success,
      Cancelled, Failed, and TimedOut.

    - **ResponseCode** *(string) --*

      The response code returned by the execution of the step.

    - **Inputs** *(dict) --*

      Fully-resolved values passed into the step before execution.

      - *(string) --*

        - *(string) --*

    - **Outputs** *(dict) --*

      Returned values from the execution of the step.

      - *(string) --*

        - *(list) --*

          - *(string) --*

    - **Response** *(string) --*

      A message associated with the response code for an execution.

    - **FailureMessage** *(string) --*

      If a step failed, this message explains why the execution failed.

    - **FailureDetails** *(dict) --*

      Information about the Automation failure.

      - **FailureStage** *(string) --*

        The stage of the Automation execution when the failure occurred. The stages include the
        following: InputValidation, PreVerification, Invocation, PostVerification.

      - **FailureType** *(string) --*

        The type of Automation failure. Failure types include the following: Action,
        Permission, Throttling, Verification, Internal.

      - **Details** *(dict) --*

        Detailed information about the Automation step failure.

        - *(string) --*

          - *(list) --*

            - *(string) --*

    - **StepExecutionId** *(string) --*

      The unique ID of a step execution.

    - **OverriddenParameters** *(dict) --*

      A user-specified list of parameters to override when running a step.

      - *(string) --*

        - *(list) --*

          - *(string) --*

    - **IsEnd** *(boolean) --*

      The flag which can be used to end automation no matter whether the step succeeds or fails.

    - **NextStep** *(string) --*

      The next step after the step succeeds.

    - **IsCritical** *(boolean) --*

      The flag which can be used to help decide whether the failure of current step leads to
      the Automation failure.

    - **ValidNextSteps** *(list) --*

      Strategies used when step fails, we support Continue and Abort. Abort will fail the
      automation when the step fails. Continue will ignore the failure of current step and
      allow automation to run the next step. With conditional branching, we add step:stepName
      to support the automation to go to another specific step.

      - *(string) --*

    - **Targets** *(list) --*

      The targets for the step execution.

      - *(dict) --*

        An array of search criteria that targets instances using a Key,Value combination that
        you specify.

        Supported formats include the following.

        * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

        * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

        * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

        * (Maintenance window targets only)
        ``Key=resource-groups:Name,Values=*resource-group-name* ``

        * (Maintenance window targets only)
        ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

        For example:

        * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

        * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

        * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

        * (Maintenance window targets only)
        ``Key=resource-groups:Name,Values=ProductionResourceGroup``

        * (Maintenance window targets only)
        ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC*
        ``

        For information about how to send commands that target instances using ``Key,Value``
        parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
        <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
        in the *AWS Systems Manager User Guide* .

        - **Key** *(string) --*

          User-defined criteria for sending commands that target instances that meet the
          criteria.

        - **Values** *(list) --*

          User-defined criteria that maps to ``Key`` . For example, if you specified
          ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
          instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

          - *(string) --*

    - **TargetLocation** *(dict) --*

      The combination of AWS Regions and accounts targeted by the current Automation execution.

      - **Accounts** *(list) --*

        The AWS accounts targeted by the current Automation execution.

        - *(string) --*

      - **Regions** *(list) --*

        The AWS Regions targeted by the current Automation execution.

        - *(string) --*

      - **TargetLocationMaxConcurrency** *(string) --*

        The maximum number of AWS accounts and AWS regions allowed to run the Automation
        concurrently

      - **TargetLocationMaxErrors** *(string) --*

        The maximum number of errors allowed before the system stops queueing additional
        Automation executions for the currently running Automation.

      - **ExecutionRoleName** *(string) --*

        The Automation execution role used by the currently running Automation.
    """


_ClientDescribeAutomationStepExecutionsResponseTypeDef = TypedDict(
    "_ClientDescribeAutomationStepExecutionsResponseTypeDef",
    {
        "StepExecutions": List[
            ClientDescribeAutomationStepExecutionsResponseStepExecutionsTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)


class ClientDescribeAutomationStepExecutionsResponseTypeDef(
    _ClientDescribeAutomationStepExecutionsResponseTypeDef
):
    """
    Type definition for `ClientDescribeAutomationStepExecutions` `Response`

    - **StepExecutions** *(list) --*

      A list of details about the current state of all steps that make up an execution.

      - *(dict) --*

        Detailed information about an the execution state of an Automation step.

        - **StepName** *(string) --*

          The name of this execution step.

        - **Action** *(string) --*

          The action this step performs. The action determines the behavior of the step.

        - **TimeoutSeconds** *(integer) --*

          The timeout seconds of the step.

        - **OnFailure** *(string) --*

          The action to take if the step fails. The default value is Abort.

        - **MaxAttempts** *(integer) --*

          The maximum number of tries to run the action of the step. The default value is 1.

        - **ExecutionStartTime** *(datetime) --*

          If a step has begun execution, this contains the time the step started. If the step is in
          Pending status, this field is not populated.

        - **ExecutionEndTime** *(datetime) --*

          If a step has finished execution, this contains the time the execution ended. If the step
          has not yet concluded, this field is not populated.

        - **StepStatus** *(string) --*

          The execution status for this step. Valid values include: Pending, InProgress, Success,
          Cancelled, Failed, and TimedOut.

        - **ResponseCode** *(string) --*

          The response code returned by the execution of the step.

        - **Inputs** *(dict) --*

          Fully-resolved values passed into the step before execution.

          - *(string) --*

            - *(string) --*

        - **Outputs** *(dict) --*

          Returned values from the execution of the step.

          - *(string) --*

            - *(list) --*

              - *(string) --*

        - **Response** *(string) --*

          A message associated with the response code for an execution.

        - **FailureMessage** *(string) --*

          If a step failed, this message explains why the execution failed.

        - **FailureDetails** *(dict) --*

          Information about the Automation failure.

          - **FailureStage** *(string) --*

            The stage of the Automation execution when the failure occurred. The stages include the
            following: InputValidation, PreVerification, Invocation, PostVerification.

          - **FailureType** *(string) --*

            The type of Automation failure. Failure types include the following: Action,
            Permission, Throttling, Verification, Internal.

          - **Details** *(dict) --*

            Detailed information about the Automation step failure.

            - *(string) --*

              - *(list) --*

                - *(string) --*

        - **StepExecutionId** *(string) --*

          The unique ID of a step execution.

        - **OverriddenParameters** *(dict) --*

          A user-specified list of parameters to override when running a step.

          - *(string) --*

            - *(list) --*

              - *(string) --*

        - **IsEnd** *(boolean) --*

          The flag which can be used to end automation no matter whether the step succeeds or fails.

        - **NextStep** *(string) --*

          The next step after the step succeeds.

        - **IsCritical** *(boolean) --*

          The flag which can be used to help decide whether the failure of current step leads to
          the Automation failure.

        - **ValidNextSteps** *(list) --*

          Strategies used when step fails, we support Continue and Abort. Abort will fail the
          automation when the step fails. Continue will ignore the failure of current step and
          allow automation to run the next step. With conditional branching, we add step:stepName
          to support the automation to go to another specific step.

          - *(string) --*

        - **Targets** *(list) --*

          The targets for the step execution.

          - *(dict) --*

            An array of search criteria that targets instances using a Key,Value combination that
            you specify.

            Supported formats include the following.

            * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

            * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

            * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

            * (Maintenance window targets only)
            ``Key=resource-groups:Name,Values=*resource-group-name* ``

            * (Maintenance window targets only)
            ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

            For example:

            * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

            * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

            * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

            * (Maintenance window targets only)
            ``Key=resource-groups:Name,Values=ProductionResourceGroup``

            * (Maintenance window targets only)
            ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC*
            ``

            For information about how to send commands that target instances using ``Key,Value``
            parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
            <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
            in the *AWS Systems Manager User Guide* .

            - **Key** *(string) --*

              User-defined criteria for sending commands that target instances that meet the
              criteria.

            - **Values** *(list) --*

              User-defined criteria that maps to ``Key`` . For example, if you specified
              ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
              instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

              - *(string) --*

        - **TargetLocation** *(dict) --*

          The combination of AWS Regions and accounts targeted by the current Automation execution.

          - **Accounts** *(list) --*

            The AWS accounts targeted by the current Automation execution.

            - *(string) --*

          - **Regions** *(list) --*

            The AWS Regions targeted by the current Automation execution.

            - *(string) --*

          - **TargetLocationMaxConcurrency** *(string) --*

            The maximum number of AWS accounts and AWS regions allowed to run the Automation
            concurrently

          - **TargetLocationMaxErrors** *(string) --*

            The maximum number of errors allowed before the system stops queueing additional
            Automation executions for the currently running Automation.

          - **ExecutionRoleName** *(string) --*

            The Automation execution role used by the currently running Automation.

    - **NextToken** *(string) --*

      The token to use when requesting the next set of items. If there are no additional items to
      return, the string is empty.
    """


_ClientDescribeAvailablePatchesFiltersTypeDef = TypedDict(
    "_ClientDescribeAvailablePatchesFiltersTypeDef",
    {"Key": str, "Values": List[str]},
    total=False,
)


class ClientDescribeAvailablePatchesFiltersTypeDef(
    _ClientDescribeAvailablePatchesFiltersTypeDef
):
    """
    Type definition for `ClientDescribeAvailablePatches` `Filters`

    Defines a filter used in Patch Manager APIs.

    - **Key** *(string) --*

      The key for the filter.

    - **Values** *(list) --*

      The value for the filter.

      - *(string) --*
    """


_ClientDescribeAvailablePatchesResponsePatchesTypeDef = TypedDict(
    "_ClientDescribeAvailablePatchesResponsePatchesTypeDef",
    {
        "Id": str,
        "ReleaseDate": datetime,
        "Title": str,
        "Description": str,
        "ContentUrl": str,
        "Vendor": str,
        "ProductFamily": str,
        "Product": str,
        "Classification": str,
        "MsrcSeverity": str,
        "KbNumber": str,
        "MsrcNumber": str,
        "Language": str,
    },
    total=False,
)


class ClientDescribeAvailablePatchesResponsePatchesTypeDef(
    _ClientDescribeAvailablePatchesResponsePatchesTypeDef
):
    """
    Type definition for `ClientDescribeAvailablePatchesResponse` `Patches`

    Represents metadata about a patch.

    - **Id** *(string) --*

      The ID of the patch (this is different than the Microsoft Knowledge Base ID).

    - **ReleaseDate** *(datetime) --*

      The date the patch was released.

    - **Title** *(string) --*

      The title of the patch.

    - **Description** *(string) --*

      The description of the patch.

    - **ContentUrl** *(string) --*

      The URL where more information can be obtained about the patch.

    - **Vendor** *(string) --*

      The name of the vendor providing the patch.

    - **ProductFamily** *(string) --*

      The product family the patch is applicable for (for example, Windows).

    - **Product** *(string) --*

      The specific product the patch is applicable for (for example, WindowsServer2016).

    - **Classification** *(string) --*

      The classification of the patch (for example, SecurityUpdates, Updates, CriticalUpdates).

    - **MsrcSeverity** *(string) --*

      The severity of the patch (for example Critical, Important, Moderate).

    - **KbNumber** *(string) --*

      The Microsoft Knowledge Base ID of the patch.

    - **MsrcNumber** *(string) --*

      The ID of the MSRC bulletin the patch is related to.

    - **Language** *(string) --*

      The language of the patch if it's language-specific.
    """


_ClientDescribeAvailablePatchesResponseTypeDef = TypedDict(
    "_ClientDescribeAvailablePatchesResponseTypeDef",
    {
        "Patches": List[ClientDescribeAvailablePatchesResponsePatchesTypeDef],
        "NextToken": str,
    },
    total=False,
)


class ClientDescribeAvailablePatchesResponseTypeDef(
    _ClientDescribeAvailablePatchesResponseTypeDef
):
    """
    Type definition for `ClientDescribeAvailablePatches` `Response`

    - **Patches** *(list) --*

      An array of patches. Each entry in the array is a patch structure.

      - *(dict) --*

        Represents metadata about a patch.

        - **Id** *(string) --*

          The ID of the patch (this is different than the Microsoft Knowledge Base ID).

        - **ReleaseDate** *(datetime) --*

          The date the patch was released.

        - **Title** *(string) --*

          The title of the patch.

        - **Description** *(string) --*

          The description of the patch.

        - **ContentUrl** *(string) --*

          The URL where more information can be obtained about the patch.

        - **Vendor** *(string) --*

          The name of the vendor providing the patch.

        - **ProductFamily** *(string) --*

          The product family the patch is applicable for (for example, Windows).

        - **Product** *(string) --*

          The specific product the patch is applicable for (for example, WindowsServer2016).

        - **Classification** *(string) --*

          The classification of the patch (for example, SecurityUpdates, Updates, CriticalUpdates).

        - **MsrcSeverity** *(string) --*

          The severity of the patch (for example Critical, Important, Moderate).

        - **KbNumber** *(string) --*

          The Microsoft Knowledge Base ID of the patch.

        - **MsrcNumber** *(string) --*

          The ID of the MSRC bulletin the patch is related to.

        - **Language** *(string) --*

          The language of the patch if it's language-specific.

    - **NextToken** *(string) --*

      The token to use when requesting the next set of items. If there are no additional items to
      return, the string is empty.
    """


_ClientDescribeDocumentPermissionResponseTypeDef = TypedDict(
    "_ClientDescribeDocumentPermissionResponseTypeDef",
    {"AccountIds": List[str]},
    total=False,
)


class ClientDescribeDocumentPermissionResponseTypeDef(
    _ClientDescribeDocumentPermissionResponseTypeDef
):
    """
    Type definition for `ClientDescribeDocumentPermission` `Response`

    - **AccountIds** *(list) --*

      The account IDs that have permission to use this document. The ID can be either an AWS
      account or *All* .

      - *(string) --*
    """


_ClientDescribeDocumentResponseDocumentAttachmentsInformationTypeDef = TypedDict(
    "_ClientDescribeDocumentResponseDocumentAttachmentsInformationTypeDef",
    {"Name": str},
    total=False,
)


class ClientDescribeDocumentResponseDocumentAttachmentsInformationTypeDef(
    _ClientDescribeDocumentResponseDocumentAttachmentsInformationTypeDef
):
    """
    Type definition for `ClientDescribeDocumentResponseDocument` `AttachmentsInformation`

    An attribute of an attachment, such as the attachment name.

    - **Name** *(string) --*

      The name of the attachment.
    """


_ClientDescribeDocumentResponseDocumentParametersTypeDef = TypedDict(
    "_ClientDescribeDocumentResponseDocumentParametersTypeDef",
    {"Name": str, "Type": str, "Description": str, "DefaultValue": str},
    total=False,
)


class ClientDescribeDocumentResponseDocumentParametersTypeDef(
    _ClientDescribeDocumentResponseDocumentParametersTypeDef
):
    """
    Type definition for `ClientDescribeDocumentResponseDocument` `Parameters`

    Parameters specified in a System Manager document that run on the server when the command
    is run.

    - **Name** *(string) --*

      The name of the parameter.

    - **Type** *(string) --*

      The type of parameter. The type can be either String or StringList.

    - **Description** *(string) --*

      A description of what the parameter does, how to use it, the default value, and whether
      or not the parameter is optional.

    - **DefaultValue** *(string) --*

      If specified, the default values for the parameters. Parameters without a default value
      are required. Parameters with a default value are optional.
    """


_ClientDescribeDocumentResponseDocumentTagsTypeDef = TypedDict(
    "_ClientDescribeDocumentResponseDocumentTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)


class ClientDescribeDocumentResponseDocumentTagsTypeDef(
    _ClientDescribeDocumentResponseDocumentTagsTypeDef
):
    """
    Type definition for `ClientDescribeDocumentResponseDocument` `Tags`

    Metadata that you assign to your AWS resources. Tags enable you to categorize your
    resources in different ways, for example, by purpose, owner, or environment. In Systems
    Manager, you can apply tags to documents, managed instances, maintenance windows,
    Parameter Store parameters, and patch baselines.

    - **Key** *(string) --*

      The name of the tag.

    - **Value** *(string) --*

      The value of the tag.
    """


_ClientDescribeDocumentResponseDocumentTypeDef = TypedDict(
    "_ClientDescribeDocumentResponseDocumentTypeDef",
    {
        "Sha1": str,
        "Hash": str,
        "HashType": str,
        "Name": str,
        "VersionName": str,
        "Owner": str,
        "CreatedDate": datetime,
        "Status": str,
        "StatusInformation": str,
        "DocumentVersion": str,
        "Description": str,
        "Parameters": List[ClientDescribeDocumentResponseDocumentParametersTypeDef],
        "PlatformTypes": List[str],
        "DocumentType": str,
        "SchemaVersion": str,
        "LatestVersion": str,
        "DefaultVersion": str,
        "DocumentFormat": str,
        "TargetType": str,
        "Tags": List[ClientDescribeDocumentResponseDocumentTagsTypeDef],
        "AttachmentsInformation": List[
            ClientDescribeDocumentResponseDocumentAttachmentsInformationTypeDef
        ],
    },
    total=False,
)


class ClientDescribeDocumentResponseDocumentTypeDef(
    _ClientDescribeDocumentResponseDocumentTypeDef
):
    """
    Type definition for `ClientDescribeDocumentResponse` `Document`

    Information about the Systems Manager document.

    - **Sha1** *(string) --*

      The SHA1 hash of the document, which you can use for verification.

    - **Hash** *(string) --*

      The Sha256 or Sha1 hash created by the system when the document was created.

      .. note::

        Sha1 hashes have been deprecated.

    - **HashType** *(string) --*

      The hash type of the document. Valid values include ``Sha256`` or ``Sha1`` .

      .. note::

        Sha1 hashes have been deprecated.

    - **Name** *(string) --*

      The name of the Systems Manager document.

    - **VersionName** *(string) --*

      The version of the artifact associated with the document.

    - **Owner** *(string) --*

      The AWS user account that created the document.

    - **CreatedDate** *(datetime) --*

      The date when the document was created.

    - **Status** *(string) --*

      The status of the Systems Manager document.

    - **StatusInformation** *(string) --*

      A message returned by AWS Systems Manager that explains the ``Status`` value. For example,
      a ``Failed`` status might be explained by the ``StatusInformation`` message, "The specified
      S3 bucket does not exist. Verify that the URL of the S3 bucket is correct."

    - **DocumentVersion** *(string) --*

      The document version.

    - **Description** *(string) --*

      A description of the document.

    - **Parameters** *(list) --*

      A description of the parameters for a document.

      - *(dict) --*

        Parameters specified in a System Manager document that run on the server when the command
        is run.

        - **Name** *(string) --*

          The name of the parameter.

        - **Type** *(string) --*

          The type of parameter. The type can be either String or StringList.

        - **Description** *(string) --*

          A description of what the parameter does, how to use it, the default value, and whether
          or not the parameter is optional.

        - **DefaultValue** *(string) --*

          If specified, the default values for the parameters. Parameters without a default value
          are required. Parameters with a default value are optional.

    - **PlatformTypes** *(list) --*

      The list of OS platforms compatible with this Systems Manager document.

      - *(string) --*

    - **DocumentType** *(string) --*

      The type of document.

    - **SchemaVersion** *(string) --*

      The schema version.

    - **LatestVersion** *(string) --*

      The latest version of the document.

    - **DefaultVersion** *(string) --*

      The default version.

    - **DocumentFormat** *(string) --*

      The document format, either JSON or YAML.

    - **TargetType** *(string) --*

      The target type which defines the kinds of resources the document can run on. For example,
      /AWS::EC2::Instance. For a list of valid resource types, see `AWS Resource Types Reference
      <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html>`__
      in the *AWS CloudFormation User Guide* .

    - **Tags** *(list) --*

      The tags, or metadata, that have been applied to the document.

      - *(dict) --*

        Metadata that you assign to your AWS resources. Tags enable you to categorize your
        resources in different ways, for example, by purpose, owner, or environment. In Systems
        Manager, you can apply tags to documents, managed instances, maintenance windows,
        Parameter Store parameters, and patch baselines.

        - **Key** *(string) --*

          The name of the tag.

        - **Value** *(string) --*

          The value of the tag.

    - **AttachmentsInformation** *(list) --*

      Details about the document attachments, including names, locations, sizes, etc.

      - *(dict) --*

        An attribute of an attachment, such as the attachment name.

        - **Name** *(string) --*

          The name of the attachment.
    """


_ClientDescribeDocumentResponseTypeDef = TypedDict(
    "_ClientDescribeDocumentResponseTypeDef",
    {"Document": ClientDescribeDocumentResponseDocumentTypeDef},
    total=False,
)


class ClientDescribeDocumentResponseTypeDef(_ClientDescribeDocumentResponseTypeDef):
    """
    Type definition for `ClientDescribeDocument` `Response`

    - **Document** *(dict) --*

      Information about the Systems Manager document.

      - **Sha1** *(string) --*

        The SHA1 hash of the document, which you can use for verification.

      - **Hash** *(string) --*

        The Sha256 or Sha1 hash created by the system when the document was created.

        .. note::

          Sha1 hashes have been deprecated.

      - **HashType** *(string) --*

        The hash type of the document. Valid values include ``Sha256`` or ``Sha1`` .

        .. note::

          Sha1 hashes have been deprecated.

      - **Name** *(string) --*

        The name of the Systems Manager document.

      - **VersionName** *(string) --*

        The version of the artifact associated with the document.

      - **Owner** *(string) --*

        The AWS user account that created the document.

      - **CreatedDate** *(datetime) --*

        The date when the document was created.

      - **Status** *(string) --*

        The status of the Systems Manager document.

      - **StatusInformation** *(string) --*

        A message returned by AWS Systems Manager that explains the ``Status`` value. For example,
        a ``Failed`` status might be explained by the ``StatusInformation`` message, "The specified
        S3 bucket does not exist. Verify that the URL of the S3 bucket is correct."

      - **DocumentVersion** *(string) --*

        The document version.

      - **Description** *(string) --*

        A description of the document.

      - **Parameters** *(list) --*

        A description of the parameters for a document.

        - *(dict) --*

          Parameters specified in a System Manager document that run on the server when the command
          is run.

          - **Name** *(string) --*

            The name of the parameter.

          - **Type** *(string) --*

            The type of parameter. The type can be either String or StringList.

          - **Description** *(string) --*

            A description of what the parameter does, how to use it, the default value, and whether
            or not the parameter is optional.

          - **DefaultValue** *(string) --*

            If specified, the default values for the parameters. Parameters without a default value
            are required. Parameters with a default value are optional.

      - **PlatformTypes** *(list) --*

        The list of OS platforms compatible with this Systems Manager document.

        - *(string) --*

      - **DocumentType** *(string) --*

        The type of document.

      - **SchemaVersion** *(string) --*

        The schema version.

      - **LatestVersion** *(string) --*

        The latest version of the document.

      - **DefaultVersion** *(string) --*

        The default version.

      - **DocumentFormat** *(string) --*

        The document format, either JSON or YAML.

      - **TargetType** *(string) --*

        The target type which defines the kinds of resources the document can run on. For example,
        /AWS::EC2::Instance. For a list of valid resource types, see `AWS Resource Types Reference
        <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html>`__
        in the *AWS CloudFormation User Guide* .

      - **Tags** *(list) --*

        The tags, or metadata, that have been applied to the document.

        - *(dict) --*

          Metadata that you assign to your AWS resources. Tags enable you to categorize your
          resources in different ways, for example, by purpose, owner, or environment. In Systems
          Manager, you can apply tags to documents, managed instances, maintenance windows,
          Parameter Store parameters, and patch baselines.

          - **Key** *(string) --*

            The name of the tag.

          - **Value** *(string) --*

            The value of the tag.

      - **AttachmentsInformation** *(list) --*

        Details about the document attachments, including names, locations, sizes, etc.

        - *(dict) --*

          An attribute of an attachment, such as the attachment name.

          - **Name** *(string) --*

            The name of the attachment.
    """


_ClientDescribeEffectiveInstanceAssociationsResponseAssociationsTypeDef = TypedDict(
    "_ClientDescribeEffectiveInstanceAssociationsResponseAssociationsTypeDef",
    {
        "AssociationId": str,
        "InstanceId": str,
        "Content": str,
        "AssociationVersion": str,
    },
    total=False,
)


class ClientDescribeEffectiveInstanceAssociationsResponseAssociationsTypeDef(
    _ClientDescribeEffectiveInstanceAssociationsResponseAssociationsTypeDef
):
    """
    Type definition for `ClientDescribeEffectiveInstanceAssociationsResponse` `Associations`

    One or more association documents on the instance.

    - **AssociationId** *(string) --*

      The association ID.

    - **InstanceId** *(string) --*

      The instance ID.

    - **Content** *(string) --*

      The content of the association document for the instance(s).

    - **AssociationVersion** *(string) --*

      Version information for the association on the instance.
    """


_ClientDescribeEffectiveInstanceAssociationsResponseTypeDef = TypedDict(
    "_ClientDescribeEffectiveInstanceAssociationsResponseTypeDef",
    {
        "Associations": List[
            ClientDescribeEffectiveInstanceAssociationsResponseAssociationsTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)


class ClientDescribeEffectiveInstanceAssociationsResponseTypeDef(
    _ClientDescribeEffectiveInstanceAssociationsResponseTypeDef
):
    """
    Type definition for `ClientDescribeEffectiveInstanceAssociations` `Response`

    - **Associations** *(list) --*

      The associations for the requested instance.

      - *(dict) --*

        One or more association documents on the instance.

        - **AssociationId** *(string) --*

          The association ID.

        - **InstanceId** *(string) --*

          The instance ID.

        - **Content** *(string) --*

          The content of the association document for the instance(s).

        - **AssociationVersion** *(string) --*

          Version information for the association on the instance.

    - **NextToken** *(string) --*

      The token to use when requesting the next set of items. If there are no additional items to
      return, the string is empty.
    """


_ClientDescribeEffectivePatchesForPatchBaselineResponseEffectivePatchesPatchStatusTypeDef = TypedDict(
    "_ClientDescribeEffectivePatchesForPatchBaselineResponseEffectivePatchesPatchStatusTypeDef",
    {"DeploymentStatus": str, "ComplianceLevel": str, "ApprovalDate": datetime},
    total=False,
)


class ClientDescribeEffectivePatchesForPatchBaselineResponseEffectivePatchesPatchStatusTypeDef(
    _ClientDescribeEffectivePatchesForPatchBaselineResponseEffectivePatchesPatchStatusTypeDef
):
    """
    Type definition for `ClientDescribeEffectivePatchesForPatchBaselineResponseEffectivePatches` `PatchStatus`

    The status of the patch in a patch baseline. This includes information about whether the
    patch is currently approved, due to be approved by a rule, explicitly approved, or
    explicitly rejected and the date the patch was or will be approved.

    - **DeploymentStatus** *(string) --*

      The approval status of a patch (APPROVED, PENDING_APPROVAL, EXPLICIT_APPROVED,
      EXPLICIT_REJECTED).

    - **ComplianceLevel** *(string) --*

      The compliance severity level for a patch.

    - **ApprovalDate** *(datetime) --*

      The date the patch was approved (or will be approved if the status is PENDING_APPROVAL).
    """


_ClientDescribeEffectivePatchesForPatchBaselineResponseEffectivePatchesPatchTypeDef = TypedDict(
    "_ClientDescribeEffectivePatchesForPatchBaselineResponseEffectivePatchesPatchTypeDef",
    {
        "Id": str,
        "ReleaseDate": datetime,
        "Title": str,
        "Description": str,
        "ContentUrl": str,
        "Vendor": str,
        "ProductFamily": str,
        "Product": str,
        "Classification": str,
        "MsrcSeverity": str,
        "KbNumber": str,
        "MsrcNumber": str,
        "Language": str,
    },
    total=False,
)


class ClientDescribeEffectivePatchesForPatchBaselineResponseEffectivePatchesPatchTypeDef(
    _ClientDescribeEffectivePatchesForPatchBaselineResponseEffectivePatchesPatchTypeDef
):
    """
    Type definition for `ClientDescribeEffectivePatchesForPatchBaselineResponseEffectivePatches` `Patch`

    Provides metadata for a patch, including information such as the KB ID, severity,
    classification and a URL for where more information can be obtained about the patch.

    - **Id** *(string) --*

      The ID of the patch (this is different than the Microsoft Knowledge Base ID).

    - **ReleaseDate** *(datetime) --*

      The date the patch was released.

    - **Title** *(string) --*

      The title of the patch.

    - **Description** *(string) --*

      The description of the patch.

    - **ContentUrl** *(string) --*

      The URL where more information can be obtained about the patch.

    - **Vendor** *(string) --*

      The name of the vendor providing the patch.

    - **ProductFamily** *(string) --*

      The product family the patch is applicable for (for example, Windows).

    - **Product** *(string) --*

      The specific product the patch is applicable for (for example, WindowsServer2016).

    - **Classification** *(string) --*

      The classification of the patch (for example, SecurityUpdates, Updates,
      CriticalUpdates).

    - **MsrcSeverity** *(string) --*

      The severity of the patch (for example Critical, Important, Moderate).

    - **KbNumber** *(string) --*

      The Microsoft Knowledge Base ID of the patch.

    - **MsrcNumber** *(string) --*

      The ID of the MSRC bulletin the patch is related to.

    - **Language** *(string) --*

      The language of the patch if it's language-specific.
    """


_ClientDescribeEffectivePatchesForPatchBaselineResponseEffectivePatchesTypeDef = TypedDict(
    "_ClientDescribeEffectivePatchesForPatchBaselineResponseEffectivePatchesTypeDef",
    {
        "Patch": ClientDescribeEffectivePatchesForPatchBaselineResponseEffectivePatchesPatchTypeDef,
        "PatchStatus": ClientDescribeEffectivePatchesForPatchBaselineResponseEffectivePatchesPatchStatusTypeDef,
    },
    total=False,
)


class ClientDescribeEffectivePatchesForPatchBaselineResponseEffectivePatchesTypeDef(
    _ClientDescribeEffectivePatchesForPatchBaselineResponseEffectivePatchesTypeDef
):
    """
    Type definition for `ClientDescribeEffectivePatchesForPatchBaselineResponse` `EffectivePatches`

    The EffectivePatch structure defines metadata about a patch along with the approval state
    of the patch in a particular patch baseline. The approval state includes information about
    whether the patch is currently approved, due to be approved by a rule, explicitly approved,
    or explicitly rejected and the date the patch was or will be approved.

    - **Patch** *(dict) --*

      Provides metadata for a patch, including information such as the KB ID, severity,
      classification and a URL for where more information can be obtained about the patch.

      - **Id** *(string) --*

        The ID of the patch (this is different than the Microsoft Knowledge Base ID).

      - **ReleaseDate** *(datetime) --*

        The date the patch was released.

      - **Title** *(string) --*

        The title of the patch.

      - **Description** *(string) --*

        The description of the patch.

      - **ContentUrl** *(string) --*

        The URL where more information can be obtained about the patch.

      - **Vendor** *(string) --*

        The name of the vendor providing the patch.

      - **ProductFamily** *(string) --*

        The product family the patch is applicable for (for example, Windows).

      - **Product** *(string) --*

        The specific product the patch is applicable for (for example, WindowsServer2016).

      - **Classification** *(string) --*

        The classification of the patch (for example, SecurityUpdates, Updates,
        CriticalUpdates).

      - **MsrcSeverity** *(string) --*

        The severity of the patch (for example Critical, Important, Moderate).

      - **KbNumber** *(string) --*

        The Microsoft Knowledge Base ID of the patch.

      - **MsrcNumber** *(string) --*

        The ID of the MSRC bulletin the patch is related to.

      - **Language** *(string) --*

        The language of the patch if it's language-specific.

    - **PatchStatus** *(dict) --*

      The status of the patch in a patch baseline. This includes information about whether the
      patch is currently approved, due to be approved by a rule, explicitly approved, or
      explicitly rejected and the date the patch was or will be approved.

      - **DeploymentStatus** *(string) --*

        The approval status of a patch (APPROVED, PENDING_APPROVAL, EXPLICIT_APPROVED,
        EXPLICIT_REJECTED).

      - **ComplianceLevel** *(string) --*

        The compliance severity level for a patch.

      - **ApprovalDate** *(datetime) --*

        The date the patch was approved (or will be approved if the status is PENDING_APPROVAL).
    """


_ClientDescribeEffectivePatchesForPatchBaselineResponseTypeDef = TypedDict(
    "_ClientDescribeEffectivePatchesForPatchBaselineResponseTypeDef",
    {
        "EffectivePatches": List[
            ClientDescribeEffectivePatchesForPatchBaselineResponseEffectivePatchesTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)


class ClientDescribeEffectivePatchesForPatchBaselineResponseTypeDef(
    _ClientDescribeEffectivePatchesForPatchBaselineResponseTypeDef
):
    """
    Type definition for `ClientDescribeEffectivePatchesForPatchBaseline` `Response`

    - **EffectivePatches** *(list) --*

      An array of patches and patch status.

      - *(dict) --*

        The EffectivePatch structure defines metadata about a patch along with the approval state
        of the patch in a particular patch baseline. The approval state includes information about
        whether the patch is currently approved, due to be approved by a rule, explicitly approved,
        or explicitly rejected and the date the patch was or will be approved.

        - **Patch** *(dict) --*

          Provides metadata for a patch, including information such as the KB ID, severity,
          classification and a URL for where more information can be obtained about the patch.

          - **Id** *(string) --*

            The ID of the patch (this is different than the Microsoft Knowledge Base ID).

          - **ReleaseDate** *(datetime) --*

            The date the patch was released.

          - **Title** *(string) --*

            The title of the patch.

          - **Description** *(string) --*

            The description of the patch.

          - **ContentUrl** *(string) --*

            The URL where more information can be obtained about the patch.

          - **Vendor** *(string) --*

            The name of the vendor providing the patch.

          - **ProductFamily** *(string) --*

            The product family the patch is applicable for (for example, Windows).

          - **Product** *(string) --*

            The specific product the patch is applicable for (for example, WindowsServer2016).

          - **Classification** *(string) --*

            The classification of the patch (for example, SecurityUpdates, Updates,
            CriticalUpdates).

          - **MsrcSeverity** *(string) --*

            The severity of the patch (for example Critical, Important, Moderate).

          - **KbNumber** *(string) --*

            The Microsoft Knowledge Base ID of the patch.

          - **MsrcNumber** *(string) --*

            The ID of the MSRC bulletin the patch is related to.

          - **Language** *(string) --*

            The language of the patch if it's language-specific.

        - **PatchStatus** *(dict) --*

          The status of the patch in a patch baseline. This includes information about whether the
          patch is currently approved, due to be approved by a rule, explicitly approved, or
          explicitly rejected and the date the patch was or will be approved.

          - **DeploymentStatus** *(string) --*

            The approval status of a patch (APPROVED, PENDING_APPROVAL, EXPLICIT_APPROVED,
            EXPLICIT_REJECTED).

          - **ComplianceLevel** *(string) --*

            The compliance severity level for a patch.

          - **ApprovalDate** *(datetime) --*

            The date the patch was approved (or will be approved if the status is PENDING_APPROVAL).

    - **NextToken** *(string) --*

      The token to use when requesting the next set of items. If there are no additional items to
      return, the string is empty.
    """


_ClientDescribeInstanceAssociationsStatusResponseInstanceAssociationStatusInfosOutputUrlS3OutputUrlTypeDef = TypedDict(
    "_ClientDescribeInstanceAssociationsStatusResponseInstanceAssociationStatusInfosOutputUrlS3OutputUrlTypeDef",
    {"OutputUrl": str},
    total=False,
)


class ClientDescribeInstanceAssociationsStatusResponseInstanceAssociationStatusInfosOutputUrlS3OutputUrlTypeDef(
    _ClientDescribeInstanceAssociationsStatusResponseInstanceAssociationStatusInfosOutputUrlS3OutputUrlTypeDef
):
    """
    Type definition for `ClientDescribeInstanceAssociationsStatusResponseInstanceAssociationStatusInfosOutputUrl` `S3OutputUrl`

    The URL of Amazon S3 bucket where you want to store the results of this request.

    - **OutputUrl** *(string) --*

      A URL for an Amazon S3 bucket where you want to store the results of this request.
    """


_ClientDescribeInstanceAssociationsStatusResponseInstanceAssociationStatusInfosOutputUrlTypeDef = TypedDict(
    "_ClientDescribeInstanceAssociationsStatusResponseInstanceAssociationStatusInfosOutputUrlTypeDef",
    {
        "S3OutputUrl": ClientDescribeInstanceAssociationsStatusResponseInstanceAssociationStatusInfosOutputUrlS3OutputUrlTypeDef
    },
    total=False,
)


class ClientDescribeInstanceAssociationsStatusResponseInstanceAssociationStatusInfosOutputUrlTypeDef(
    _ClientDescribeInstanceAssociationsStatusResponseInstanceAssociationStatusInfosOutputUrlTypeDef
):
    """
    Type definition for `ClientDescribeInstanceAssociationsStatusResponseInstanceAssociationStatusInfos` `OutputUrl`

    A URL for an Amazon S3 bucket where you want to store the results of this request.

    - **S3OutputUrl** *(dict) --*

      The URL of Amazon S3 bucket where you want to store the results of this request.

      - **OutputUrl** *(string) --*

        A URL for an Amazon S3 bucket where you want to store the results of this request.
    """


_ClientDescribeInstanceAssociationsStatusResponseInstanceAssociationStatusInfosTypeDef = TypedDict(
    "_ClientDescribeInstanceAssociationsStatusResponseInstanceAssociationStatusInfosTypeDef",
    {
        "AssociationId": str,
        "Name": str,
        "DocumentVersion": str,
        "AssociationVersion": str,
        "InstanceId": str,
        "ExecutionDate": datetime,
        "Status": str,
        "DetailedStatus": str,
        "ExecutionSummary": str,
        "ErrorCode": str,
        "OutputUrl": ClientDescribeInstanceAssociationsStatusResponseInstanceAssociationStatusInfosOutputUrlTypeDef,
        "AssociationName": str,
    },
    total=False,
)


class ClientDescribeInstanceAssociationsStatusResponseInstanceAssociationStatusInfosTypeDef(
    _ClientDescribeInstanceAssociationsStatusResponseInstanceAssociationStatusInfosTypeDef
):
    """
    Type definition for `ClientDescribeInstanceAssociationsStatusResponse` `InstanceAssociationStatusInfos`

    Status information about the instance association.

    - **AssociationId** *(string) --*

      The association ID.

    - **Name** *(string) --*

      The name of the association.

    - **DocumentVersion** *(string) --*

      The association document versions.

    - **AssociationVersion** *(string) --*

      The version of the association applied to the instance.

    - **InstanceId** *(string) --*

      The instance ID where the association was created.

    - **ExecutionDate** *(datetime) --*

      The date the instance association ran.

    - **Status** *(string) --*

      Status information about the instance association.

    - **DetailedStatus** *(string) --*

      Detailed status information about the instance association.

    - **ExecutionSummary** *(string) --*

      Summary information about association execution.

    - **ErrorCode** *(string) --*

      An error code returned by the request to create the association.

    - **OutputUrl** *(dict) --*

      A URL for an Amazon S3 bucket where you want to store the results of this request.

      - **S3OutputUrl** *(dict) --*

        The URL of Amazon S3 bucket where you want to store the results of this request.

        - **OutputUrl** *(string) --*

          A URL for an Amazon S3 bucket where you want to store the results of this request.

    - **AssociationName** *(string) --*

      The name of the association applied to the instance.
    """


_ClientDescribeInstanceAssociationsStatusResponseTypeDef = TypedDict(
    "_ClientDescribeInstanceAssociationsStatusResponseTypeDef",
    {
        "InstanceAssociationStatusInfos": List[
            ClientDescribeInstanceAssociationsStatusResponseInstanceAssociationStatusInfosTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)


class ClientDescribeInstanceAssociationsStatusResponseTypeDef(
    _ClientDescribeInstanceAssociationsStatusResponseTypeDef
):
    """
    Type definition for `ClientDescribeInstanceAssociationsStatus` `Response`

    - **InstanceAssociationStatusInfos** *(list) --*

      Status information about the association.

      - *(dict) --*

        Status information about the instance association.

        - **AssociationId** *(string) --*

          The association ID.

        - **Name** *(string) --*

          The name of the association.

        - **DocumentVersion** *(string) --*

          The association document versions.

        - **AssociationVersion** *(string) --*

          The version of the association applied to the instance.

        - **InstanceId** *(string) --*

          The instance ID where the association was created.

        - **ExecutionDate** *(datetime) --*

          The date the instance association ran.

        - **Status** *(string) --*

          Status information about the instance association.

        - **DetailedStatus** *(string) --*

          Detailed status information about the instance association.

        - **ExecutionSummary** *(string) --*

          Summary information about association execution.

        - **ErrorCode** *(string) --*

          An error code returned by the request to create the association.

        - **OutputUrl** *(dict) --*

          A URL for an Amazon S3 bucket where you want to store the results of this request.

          - **S3OutputUrl** *(dict) --*

            The URL of Amazon S3 bucket where you want to store the results of this request.

            - **OutputUrl** *(string) --*

              A URL for an Amazon S3 bucket where you want to store the results of this request.

        - **AssociationName** *(string) --*

          The name of the association applied to the instance.

    - **NextToken** *(string) --*

      The token to use when requesting the next set of items. If there are no additional items to
      return, the string is empty.
    """


_ClientDescribeInstanceInformationFiltersTypeDef = TypedDict(
    "_ClientDescribeInstanceInformationFiltersTypeDef",
    {"Key": str, "Values": List[str]},
)


class ClientDescribeInstanceInformationFiltersTypeDef(
    _ClientDescribeInstanceInformationFiltersTypeDef
):
    """
    Type definition for `ClientDescribeInstanceInformation` `Filters`

    The filters to describe or get information about your managed instances.

    - **Key** *(string) --* **[REQUIRED]**

      The filter key name to describe your instances. For example:

      "InstanceIds"|"AgentVersion"|"PingStatus"|"PlatformTypes"|"ActivationIds"|"IamRole"
      |"ResourceType"|"AssociationStatus"|"Tag Key"

    - **Values** *(list) --* **[REQUIRED]**

      The filter values.

      - *(string) --*
    """


_ClientDescribeInstanceInformationInstanceInformationFilterListTypeDef = TypedDict(
    "_ClientDescribeInstanceInformationInstanceInformationFilterListTypeDef",
    {"key": str, "valueSet": List[str]},
)


class ClientDescribeInstanceInformationInstanceInformationFilterListTypeDef(
    _ClientDescribeInstanceInformationInstanceInformationFilterListTypeDef
):
    """
    Type definition for `ClientDescribeInstanceInformation` `InstanceInformationFilterList`

    Describes a filter for a specific list of instances. You can filter instances information by
    using tags. You specify tags by using a key-value mapping.

    Use this action instead of the
    DescribeInstanceInformationRequest$InstanceInformationFilterList method. The
    ``InstanceInformationFilterList`` method is a legacy method and does not support tags.

    - **key** *(string) --* **[REQUIRED]**

      The name of the filter.

    - **valueSet** *(list) --* **[REQUIRED]**

      The filter values.

      - *(string) --*
    """


_ClientDescribeInstanceInformationResponseInstanceInformationListAssociationOverviewTypeDef = TypedDict(
    "_ClientDescribeInstanceInformationResponseInstanceInformationListAssociationOverviewTypeDef",
    {"DetailedStatus": str, "InstanceAssociationStatusAggregatedCount": Dict[str, int]},
    total=False,
)


class ClientDescribeInstanceInformationResponseInstanceInformationListAssociationOverviewTypeDef(
    _ClientDescribeInstanceInformationResponseInstanceInformationListAssociationOverviewTypeDef
):
    """
    Type definition for `ClientDescribeInstanceInformationResponseInstanceInformationList` `AssociationOverview`

    Information about the association.

    - **DetailedStatus** *(string) --*

      Detailed status information about the aggregated associations.

    - **InstanceAssociationStatusAggregatedCount** *(dict) --*

      The number of associations for the instance(s).

      - *(string) --*

        - *(integer) --*
    """


_ClientDescribeInstanceInformationResponseInstanceInformationListTypeDef = TypedDict(
    "_ClientDescribeInstanceInformationResponseInstanceInformationListTypeDef",
    {
        "InstanceId": str,
        "PingStatus": str,
        "LastPingDateTime": datetime,
        "AgentVersion": str,
        "IsLatestVersion": bool,
        "PlatformType": str,
        "PlatformName": str,
        "PlatformVersion": str,
        "ActivationId": str,
        "IamRole": str,
        "RegistrationDate": datetime,
        "ResourceType": str,
        "Name": str,
        "IPAddress": str,
        "ComputerName": str,
        "AssociationStatus": str,
        "LastAssociationExecutionDate": datetime,
        "LastSuccessfulAssociationExecutionDate": datetime,
        "AssociationOverview": ClientDescribeInstanceInformationResponseInstanceInformationListAssociationOverviewTypeDef,
    },
    total=False,
)


class ClientDescribeInstanceInformationResponseInstanceInformationListTypeDef(
    _ClientDescribeInstanceInformationResponseInstanceInformationListTypeDef
):
    """
    Type definition for `ClientDescribeInstanceInformationResponse` `InstanceInformationList`

    Describes a filter for a specific list of instances.

    - **InstanceId** *(string) --*

      The instance ID.

    - **PingStatus** *(string) --*

      Connection status of SSM Agent.

    - **LastPingDateTime** *(datetime) --*

      The date and time when agent last pinged Systems Manager service.

    - **AgentVersion** *(string) --*

      The version of SSM Agent running on your Linux instance.

    - **IsLatestVersion** *(boolean) --*

      Indicates whether the latest version of SSM Agent is running on your Linux Managed
      Instance. This field does not indicate whether or not the latest version is installed on
      Windows managed instances, because some older versions of Windows Server use the
      EC2Config service to process SSM requests.

    - **PlatformType** *(string) --*

      The operating system platform type.

    - **PlatformName** *(string) --*

      The name of the operating system platform running on your instance.

    - **PlatformVersion** *(string) --*

      The version of the OS platform running on your instance.

    - **ActivationId** *(string) --*

      The activation ID created by Systems Manager when the server or VM was registered.

    - **IamRole** *(string) --*

      The Amazon Identity and Access Management (IAM) role assigned to the on-premises Systems
      Manager managed instances. This call does not return the IAM role for Amazon EC2
      instances.

    - **RegistrationDate** *(datetime) --*

      The date the server or VM was registered with AWS as a managed instance.

    - **ResourceType** *(string) --*

      The type of instance. Instances are either EC2 instances or managed instances.

    - **Name** *(string) --*

      The name of the managed instance.

    - **IPAddress** *(string) --*

      The IP address of the managed instance.

    - **ComputerName** *(string) --*

      The fully qualified host name of the managed instance.

    - **AssociationStatus** *(string) --*

      The status of the association.

    - **LastAssociationExecutionDate** *(datetime) --*

      The date the association was last run.

    - **LastSuccessfulAssociationExecutionDate** *(datetime) --*

      The last date the association was successfully run.

    - **AssociationOverview** *(dict) --*

      Information about the association.

      - **DetailedStatus** *(string) --*

        Detailed status information about the aggregated associations.

      - **InstanceAssociationStatusAggregatedCount** *(dict) --*

        The number of associations for the instance(s).

        - *(string) --*

          - *(integer) --*
    """


_ClientDescribeInstanceInformationResponseTypeDef = TypedDict(
    "_ClientDescribeInstanceInformationResponseTypeDef",
    {
        "InstanceInformationList": List[
            ClientDescribeInstanceInformationResponseInstanceInformationListTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)


class ClientDescribeInstanceInformationResponseTypeDef(
    _ClientDescribeInstanceInformationResponseTypeDef
):
    """
    Type definition for `ClientDescribeInstanceInformation` `Response`

    - **InstanceInformationList** *(list) --*

      The instance information list.

      - *(dict) --*

        Describes a filter for a specific list of instances.

        - **InstanceId** *(string) --*

          The instance ID.

        - **PingStatus** *(string) --*

          Connection status of SSM Agent.

        - **LastPingDateTime** *(datetime) --*

          The date and time when agent last pinged Systems Manager service.

        - **AgentVersion** *(string) --*

          The version of SSM Agent running on your Linux instance.

        - **IsLatestVersion** *(boolean) --*

          Indicates whether the latest version of SSM Agent is running on your Linux Managed
          Instance. This field does not indicate whether or not the latest version is installed on
          Windows managed instances, because some older versions of Windows Server use the
          EC2Config service to process SSM requests.

        - **PlatformType** *(string) --*

          The operating system platform type.

        - **PlatformName** *(string) --*

          The name of the operating system platform running on your instance.

        - **PlatformVersion** *(string) --*

          The version of the OS platform running on your instance.

        - **ActivationId** *(string) --*

          The activation ID created by Systems Manager when the server or VM was registered.

        - **IamRole** *(string) --*

          The Amazon Identity and Access Management (IAM) role assigned to the on-premises Systems
          Manager managed instances. This call does not return the IAM role for Amazon EC2
          instances.

        - **RegistrationDate** *(datetime) --*

          The date the server or VM was registered with AWS as a managed instance.

        - **ResourceType** *(string) --*

          The type of instance. Instances are either EC2 instances or managed instances.

        - **Name** *(string) --*

          The name of the managed instance.

        - **IPAddress** *(string) --*

          The IP address of the managed instance.

        - **ComputerName** *(string) --*

          The fully qualified host name of the managed instance.

        - **AssociationStatus** *(string) --*

          The status of the association.

        - **LastAssociationExecutionDate** *(datetime) --*

          The date the association was last run.

        - **LastSuccessfulAssociationExecutionDate** *(datetime) --*

          The last date the association was successfully run.

        - **AssociationOverview** *(dict) --*

          Information about the association.

          - **DetailedStatus** *(string) --*

            Detailed status information about the aggregated associations.

          - **InstanceAssociationStatusAggregatedCount** *(dict) --*

            The number of associations for the instance(s).

            - *(string) --*

              - *(integer) --*

    - **NextToken** *(string) --*

      The token to use when requesting the next set of items. If there are no additional items to
      return, the string is empty.
    """


_ClientDescribeInstancePatchStatesForPatchGroupFiltersTypeDef = TypedDict(
    "_ClientDescribeInstancePatchStatesForPatchGroupFiltersTypeDef",
    {"Key": str, "Values": List[str], "Type": str},
)


class ClientDescribeInstancePatchStatesForPatchGroupFiltersTypeDef(
    _ClientDescribeInstancePatchStatesForPatchGroupFiltersTypeDef
):
    """
    Type definition for `ClientDescribeInstancePatchStatesForPatchGroup` `Filters`

    Defines a filter used in DescribeInstancePatchStatesForPatchGroup used to scope down the
    information returned by the API.

    - **Key** *(string) --* **[REQUIRED]**

      The key for the filter. Supported values are FailedCount, InstalledCount,
      InstalledOtherCount, MissingCount and NotApplicableCount.

    - **Values** *(list) --* **[REQUIRED]**

      The value for the filter, must be an integer greater than or equal to 0.

      - *(string) --*

    - **Type** *(string) --* **[REQUIRED]**

      The type of comparison that should be performed for the value: Equal, NotEqual, LessThan or
      GreaterThan.
    """


_ClientDescribeInstancePatchStatesForPatchGroupResponseInstancePatchStatesTypeDef = TypedDict(
    "_ClientDescribeInstancePatchStatesForPatchGroupResponseInstancePatchStatesTypeDef",
    {
        "InstanceId": str,
        "PatchGroup": str,
        "BaselineId": str,
        "SnapshotId": str,
        "InstallOverrideList": str,
        "OwnerInformation": str,
        "InstalledCount": int,
        "InstalledOtherCount": int,
        "InstalledRejectedCount": int,
        "MissingCount": int,
        "FailedCount": int,
        "UnreportedNotApplicableCount": int,
        "NotApplicableCount": int,
        "OperationStartTime": datetime,
        "OperationEndTime": datetime,
        "Operation": str,
    },
    total=False,
)


class ClientDescribeInstancePatchStatesForPatchGroupResponseInstancePatchStatesTypeDef(
    _ClientDescribeInstancePatchStatesForPatchGroupResponseInstancePatchStatesTypeDef
):
    """
    Type definition for `ClientDescribeInstancePatchStatesForPatchGroupResponse` `InstancePatchStates`

    Defines the high-level patch compliance state for a managed instance, providing information
    about the number of installed, missing, not applicable, and failed patches along with
    metadata about the operation when this information was gathered for the instance.

    - **InstanceId** *(string) --*

      The ID of the managed instance the high-level patch compliance information was collected
      for.

    - **PatchGroup** *(string) --*

      The name of the patch group the managed instance belongs to.

    - **BaselineId** *(string) --*

      The ID of the patch baseline used to patch the instance.

    - **SnapshotId** *(string) --*

      The ID of the patch baseline snapshot used during the patching operation when this
      compliance data was collected.

    - **InstallOverrideList** *(string) --*

      An https URL or an Amazon S3 path-style URL to a list of patches to be installed. This
      patch installation list, which you maintain in an Amazon S3 bucket in YAML format and
      specify in the SSM document ``AWS-RunPatchBaseline`` , overrides the patches specified by
      the default patch baseline.

      For more information about the ``InstallOverrideList`` parameter, see `About the SSM
      Document AWS-RunPatchBaseline
      <http://docs.aws.amazon.com/systems-manager/latest/userguide/patch-manager-about-aws-runpatchbaseline.html>`__
      in the *AWS Systems Manager User Guide* .

    - **OwnerInformation** *(string) --*

      Placeholder information. This field will always be empty in the current release of the
      service.

    - **InstalledCount** *(integer) --*

      The number of patches from the patch baseline that are installed on the instance.

    - **InstalledOtherCount** *(integer) --*

      The number of patches not specified in the patch baseline that are installed on the
      instance.

    - **InstalledRejectedCount** *(integer) --*

      The number of instances with patches installed that are specified in a RejectedPatches
      list. Patches with a status of *InstalledRejected* were typically installed before they
      were added to a RejectedPatches list.

      .. note::

        If ALLOW_AS_DEPENDENCY is the specified option for RejectedPatchesAction, the value of
        InstalledRejectedCount will always be 0 (zero).

    - **MissingCount** *(integer) --*

      The number of patches from the patch baseline that are applicable for the instance but
      aren't currently installed.

    - **FailedCount** *(integer) --*

      The number of patches from the patch baseline that were attempted to be installed during
      the last patching operation, but failed to install.

    - **UnreportedNotApplicableCount** *(integer) --*

      The number of patches beyond the supported limit of ``NotApplicableCount`` that are not
      reported by name to Systems Manager Inventory.

    - **NotApplicableCount** *(integer) --*

      The number of patches from the patch baseline that aren't applicable for the instance and
      therefore aren't installed on the instance. This number may be truncated if the list of
      patch names is very large. The number of patches beyond this limit are reported in
      ``UnreportedNotApplicableCount`` .

    - **OperationStartTime** *(datetime) --*

      The time the most recent patching operation was started on the instance.

    - **OperationEndTime** *(datetime) --*

      The time the most recent patching operation completed on the instance.

    - **Operation** *(string) --*

      The type of patching operation that was performed: SCAN (assess patch compliance state)
      or INSTALL (install missing patches).
    """


_ClientDescribeInstancePatchStatesForPatchGroupResponseTypeDef = TypedDict(
    "_ClientDescribeInstancePatchStatesForPatchGroupResponseTypeDef",
    {
        "InstancePatchStates": List[
            ClientDescribeInstancePatchStatesForPatchGroupResponseInstancePatchStatesTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)


class ClientDescribeInstancePatchStatesForPatchGroupResponseTypeDef(
    _ClientDescribeInstancePatchStatesForPatchGroupResponseTypeDef
):
    """
    Type definition for `ClientDescribeInstancePatchStatesForPatchGroup` `Response`

    - **InstancePatchStates** *(list) --*

      The high-level patch state for the requested instances.

      - *(dict) --*

        Defines the high-level patch compliance state for a managed instance, providing information
        about the number of installed, missing, not applicable, and failed patches along with
        metadata about the operation when this information was gathered for the instance.

        - **InstanceId** *(string) --*

          The ID of the managed instance the high-level patch compliance information was collected
          for.

        - **PatchGroup** *(string) --*

          The name of the patch group the managed instance belongs to.

        - **BaselineId** *(string) --*

          The ID of the patch baseline used to patch the instance.

        - **SnapshotId** *(string) --*

          The ID of the patch baseline snapshot used during the patching operation when this
          compliance data was collected.

        - **InstallOverrideList** *(string) --*

          An https URL or an Amazon S3 path-style URL to a list of patches to be installed. This
          patch installation list, which you maintain in an Amazon S3 bucket in YAML format and
          specify in the SSM document ``AWS-RunPatchBaseline`` , overrides the patches specified by
          the default patch baseline.

          For more information about the ``InstallOverrideList`` parameter, see `About the SSM
          Document AWS-RunPatchBaseline
          <http://docs.aws.amazon.com/systems-manager/latest/userguide/patch-manager-about-aws-runpatchbaseline.html>`__
          in the *AWS Systems Manager User Guide* .

        - **OwnerInformation** *(string) --*

          Placeholder information. This field will always be empty in the current release of the
          service.

        - **InstalledCount** *(integer) --*

          The number of patches from the patch baseline that are installed on the instance.

        - **InstalledOtherCount** *(integer) --*

          The number of patches not specified in the patch baseline that are installed on the
          instance.

        - **InstalledRejectedCount** *(integer) --*

          The number of instances with patches installed that are specified in a RejectedPatches
          list. Patches with a status of *InstalledRejected* were typically installed before they
          were added to a RejectedPatches list.

          .. note::

            If ALLOW_AS_DEPENDENCY is the specified option for RejectedPatchesAction, the value of
            InstalledRejectedCount will always be 0 (zero).

        - **MissingCount** *(integer) --*

          The number of patches from the patch baseline that are applicable for the instance but
          aren't currently installed.

        - **FailedCount** *(integer) --*

          The number of patches from the patch baseline that were attempted to be installed during
          the last patching operation, but failed to install.

        - **UnreportedNotApplicableCount** *(integer) --*

          The number of patches beyond the supported limit of ``NotApplicableCount`` that are not
          reported by name to Systems Manager Inventory.

        - **NotApplicableCount** *(integer) --*

          The number of patches from the patch baseline that aren't applicable for the instance and
          therefore aren't installed on the instance. This number may be truncated if the list of
          patch names is very large. The number of patches beyond this limit are reported in
          ``UnreportedNotApplicableCount`` .

        - **OperationStartTime** *(datetime) --*

          The time the most recent patching operation was started on the instance.

        - **OperationEndTime** *(datetime) --*

          The time the most recent patching operation completed on the instance.

        - **Operation** *(string) --*

          The type of patching operation that was performed: SCAN (assess patch compliance state)
          or INSTALL (install missing patches).

    - **NextToken** *(string) --*

      The token to use when requesting the next set of items. If there are no additional items to
      return, the string is empty.
    """


_ClientDescribeInstancePatchStatesResponseInstancePatchStatesTypeDef = TypedDict(
    "_ClientDescribeInstancePatchStatesResponseInstancePatchStatesTypeDef",
    {
        "InstanceId": str,
        "PatchGroup": str,
        "BaselineId": str,
        "SnapshotId": str,
        "InstallOverrideList": str,
        "OwnerInformation": str,
        "InstalledCount": int,
        "InstalledOtherCount": int,
        "InstalledRejectedCount": int,
        "MissingCount": int,
        "FailedCount": int,
        "UnreportedNotApplicableCount": int,
        "NotApplicableCount": int,
        "OperationStartTime": datetime,
        "OperationEndTime": datetime,
        "Operation": str,
    },
    total=False,
)


class ClientDescribeInstancePatchStatesResponseInstancePatchStatesTypeDef(
    _ClientDescribeInstancePatchStatesResponseInstancePatchStatesTypeDef
):
    """
    Type definition for `ClientDescribeInstancePatchStatesResponse` `InstancePatchStates`

    Defines the high-level patch compliance state for a managed instance, providing information
    about the number of installed, missing, not applicable, and failed patches along with
    metadata about the operation when this information was gathered for the instance.

    - **InstanceId** *(string) --*

      The ID of the managed instance the high-level patch compliance information was collected
      for.

    - **PatchGroup** *(string) --*

      The name of the patch group the managed instance belongs to.

    - **BaselineId** *(string) --*

      The ID of the patch baseline used to patch the instance.

    - **SnapshotId** *(string) --*

      The ID of the patch baseline snapshot used during the patching operation when this
      compliance data was collected.

    - **InstallOverrideList** *(string) --*

      An https URL or an Amazon S3 path-style URL to a list of patches to be installed. This
      patch installation list, which you maintain in an Amazon S3 bucket in YAML format and
      specify in the SSM document ``AWS-RunPatchBaseline`` , overrides the patches specified by
      the default patch baseline.

      For more information about the ``InstallOverrideList`` parameter, see `About the SSM
      Document AWS-RunPatchBaseline
      <http://docs.aws.amazon.com/systems-manager/latest/userguide/patch-manager-about-aws-runpatchbaseline.html>`__
      in the *AWS Systems Manager User Guide* .

    - **OwnerInformation** *(string) --*

      Placeholder information. This field will always be empty in the current release of the
      service.

    - **InstalledCount** *(integer) --*

      The number of patches from the patch baseline that are installed on the instance.

    - **InstalledOtherCount** *(integer) --*

      The number of patches not specified in the patch baseline that are installed on the
      instance.

    - **InstalledRejectedCount** *(integer) --*

      The number of instances with patches installed that are specified in a RejectedPatches
      list. Patches with a status of *InstalledRejected* were typically installed before they
      were added to a RejectedPatches list.

      .. note::

        If ALLOW_AS_DEPENDENCY is the specified option for RejectedPatchesAction, the value of
        InstalledRejectedCount will always be 0 (zero).

    - **MissingCount** *(integer) --*

      The number of patches from the patch baseline that are applicable for the instance but
      aren't currently installed.

    - **FailedCount** *(integer) --*

      The number of patches from the patch baseline that were attempted to be installed during
      the last patching operation, but failed to install.

    - **UnreportedNotApplicableCount** *(integer) --*

      The number of patches beyond the supported limit of ``NotApplicableCount`` that are not
      reported by name to Systems Manager Inventory.

    - **NotApplicableCount** *(integer) --*

      The number of patches from the patch baseline that aren't applicable for the instance and
      therefore aren't installed on the instance. This number may be truncated if the list of
      patch names is very large. The number of patches beyond this limit are reported in
      ``UnreportedNotApplicableCount`` .

    - **OperationStartTime** *(datetime) --*

      The time the most recent patching operation was started on the instance.

    - **OperationEndTime** *(datetime) --*

      The time the most recent patching operation completed on the instance.

    - **Operation** *(string) --*

      The type of patching operation that was performed: SCAN (assess patch compliance state)
      or INSTALL (install missing patches).
    """


_ClientDescribeInstancePatchStatesResponseTypeDef = TypedDict(
    "_ClientDescribeInstancePatchStatesResponseTypeDef",
    {
        "InstancePatchStates": List[
            ClientDescribeInstancePatchStatesResponseInstancePatchStatesTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)


class ClientDescribeInstancePatchStatesResponseTypeDef(
    _ClientDescribeInstancePatchStatesResponseTypeDef
):
    """
    Type definition for `ClientDescribeInstancePatchStates` `Response`

    - **InstancePatchStates** *(list) --*

      The high-level patch state for the requested instances.

      - *(dict) --*

        Defines the high-level patch compliance state for a managed instance, providing information
        about the number of installed, missing, not applicable, and failed patches along with
        metadata about the operation when this information was gathered for the instance.

        - **InstanceId** *(string) --*

          The ID of the managed instance the high-level patch compliance information was collected
          for.

        - **PatchGroup** *(string) --*

          The name of the patch group the managed instance belongs to.

        - **BaselineId** *(string) --*

          The ID of the patch baseline used to patch the instance.

        - **SnapshotId** *(string) --*

          The ID of the patch baseline snapshot used during the patching operation when this
          compliance data was collected.

        - **InstallOverrideList** *(string) --*

          An https URL or an Amazon S3 path-style URL to a list of patches to be installed. This
          patch installation list, which you maintain in an Amazon S3 bucket in YAML format and
          specify in the SSM document ``AWS-RunPatchBaseline`` , overrides the patches specified by
          the default patch baseline.

          For more information about the ``InstallOverrideList`` parameter, see `About the SSM
          Document AWS-RunPatchBaseline
          <http://docs.aws.amazon.com/systems-manager/latest/userguide/patch-manager-about-aws-runpatchbaseline.html>`__
          in the *AWS Systems Manager User Guide* .

        - **OwnerInformation** *(string) --*

          Placeholder information. This field will always be empty in the current release of the
          service.

        - **InstalledCount** *(integer) --*

          The number of patches from the patch baseline that are installed on the instance.

        - **InstalledOtherCount** *(integer) --*

          The number of patches not specified in the patch baseline that are installed on the
          instance.

        - **InstalledRejectedCount** *(integer) --*

          The number of instances with patches installed that are specified in a RejectedPatches
          list. Patches with a status of *InstalledRejected* were typically installed before they
          were added to a RejectedPatches list.

          .. note::

            If ALLOW_AS_DEPENDENCY is the specified option for RejectedPatchesAction, the value of
            InstalledRejectedCount will always be 0 (zero).

        - **MissingCount** *(integer) --*

          The number of patches from the patch baseline that are applicable for the instance but
          aren't currently installed.

        - **FailedCount** *(integer) --*

          The number of patches from the patch baseline that were attempted to be installed during
          the last patching operation, but failed to install.

        - **UnreportedNotApplicableCount** *(integer) --*

          The number of patches beyond the supported limit of ``NotApplicableCount`` that are not
          reported by name to Systems Manager Inventory.

        - **NotApplicableCount** *(integer) --*

          The number of patches from the patch baseline that aren't applicable for the instance and
          therefore aren't installed on the instance. This number may be truncated if the list of
          patch names is very large. The number of patches beyond this limit are reported in
          ``UnreportedNotApplicableCount`` .

        - **OperationStartTime** *(datetime) --*

          The time the most recent patching operation was started on the instance.

        - **OperationEndTime** *(datetime) --*

          The time the most recent patching operation completed on the instance.

        - **Operation** *(string) --*

          The type of patching operation that was performed: SCAN (assess patch compliance state)
          or INSTALL (install missing patches).

    - **NextToken** *(string) --*

      The token to use when requesting the next set of items. If there are no additional items to
      return, the string is empty.
    """


_ClientDescribeInstancePatchesFiltersTypeDef = TypedDict(
    "_ClientDescribeInstancePatchesFiltersTypeDef",
    {"Key": str, "Values": List[str]},
    total=False,
)


class ClientDescribeInstancePatchesFiltersTypeDef(
    _ClientDescribeInstancePatchesFiltersTypeDef
):
    """
    Type definition for `ClientDescribeInstancePatches` `Filters`

    Defines a filter used in Patch Manager APIs.

    - **Key** *(string) --*

      The key for the filter.

    - **Values** *(list) --*

      The value for the filter.

      - *(string) --*
    """


_ClientDescribeInstancePatchesResponsePatchesTypeDef = TypedDict(
    "_ClientDescribeInstancePatchesResponsePatchesTypeDef",
    {
        "Title": str,
        "KBId": str,
        "Classification": str,
        "Severity": str,
        "State": str,
        "InstalledTime": datetime,
    },
    total=False,
)


class ClientDescribeInstancePatchesResponsePatchesTypeDef(
    _ClientDescribeInstancePatchesResponsePatchesTypeDef
):
    """
    Type definition for `ClientDescribeInstancePatchesResponse` `Patches`

    Information about the state of a patch on a particular instance as it relates to the patch
    baseline used to patch the instance.

    - **Title** *(string) --*

      The title of the patch.

    - **KBId** *(string) --*

      The operating system-specific ID of the patch.

    - **Classification** *(string) --*

      The classification of the patch (for example, SecurityUpdates, Updates, CriticalUpdates).

    - **Severity** *(string) --*

      The severity of the patch (for example, Critical, Important, Moderate).

    - **State** *(string) --*

      The state of the patch on the instance, such as INSTALLED or FAILED.

      For descriptions of each patch state, see `About Patch Compliance
      <http://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-compliance-about.html#sysman-compliance-monitor-patch>`__
      in the *AWS Systems Manager User Guide* .

    - **InstalledTime** *(datetime) --*

      The date/time the patch was installed on the instance. Note that not all operating
      systems provide this level of information.
    """


_ClientDescribeInstancePatchesResponseTypeDef = TypedDict(
    "_ClientDescribeInstancePatchesResponseTypeDef",
    {
        "Patches": List[ClientDescribeInstancePatchesResponsePatchesTypeDef],
        "NextToken": str,
    },
    total=False,
)


class ClientDescribeInstancePatchesResponseTypeDef(
    _ClientDescribeInstancePatchesResponseTypeDef
):
    """
    Type definition for `ClientDescribeInstancePatches` `Response`

    - **Patches** *(list) --*

      Each entry in the array is a structure containing:

      Title (string)

      KBId (string)

      Classification (string)

      Severity (string)

      State (string, such as "INSTALLED" or "FAILED")

      InstalledTime (DateTime)

      InstalledBy (string)

      - *(dict) --*

        Information about the state of a patch on a particular instance as it relates to the patch
        baseline used to patch the instance.

        - **Title** *(string) --*

          The title of the patch.

        - **KBId** *(string) --*

          The operating system-specific ID of the patch.

        - **Classification** *(string) --*

          The classification of the patch (for example, SecurityUpdates, Updates, CriticalUpdates).

        - **Severity** *(string) --*

          The severity of the patch (for example, Critical, Important, Moderate).

        - **State** *(string) --*

          The state of the patch on the instance, such as INSTALLED or FAILED.

          For descriptions of each patch state, see `About Patch Compliance
          <http://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-compliance-about.html#sysman-compliance-monitor-patch>`__
          in the *AWS Systems Manager User Guide* .

        - **InstalledTime** *(datetime) --*

          The date/time the patch was installed on the instance. Note that not all operating
          systems provide this level of information.

    - **NextToken** *(string) --*

      The token to use when requesting the next set of items. If there are no additional items to
      return, the string is empty.
    """


_ClientDescribeInventoryDeletionsResponseInventoryDeletionsDeletionSummarySummaryItemsTypeDef = TypedDict(
    "_ClientDescribeInventoryDeletionsResponseInventoryDeletionsDeletionSummarySummaryItemsTypeDef",
    {"Version": str, "Count": int, "RemainingCount": int},
    total=False,
)


class ClientDescribeInventoryDeletionsResponseInventoryDeletionsDeletionSummarySummaryItemsTypeDef(
    _ClientDescribeInventoryDeletionsResponseInventoryDeletionsDeletionSummarySummaryItemsTypeDef
):
    """
    Type definition for `ClientDescribeInventoryDeletionsResponseInventoryDeletionsDeletionSummary` `SummaryItems`

    Either a count, remaining count, or a version number in a delete inventory summary.

    - **Version** *(string) --*

      The inventory type version.

    - **Count** *(integer) --*

      A count of the number of deleted items.

    - **RemainingCount** *(integer) --*

      The remaining number of items to delete.
    """


_ClientDescribeInventoryDeletionsResponseInventoryDeletionsDeletionSummaryTypeDef = TypedDict(
    "_ClientDescribeInventoryDeletionsResponseInventoryDeletionsDeletionSummaryTypeDef",
    {
        "TotalCount": int,
        "RemainingCount": int,
        "SummaryItems": List[
            ClientDescribeInventoryDeletionsResponseInventoryDeletionsDeletionSummarySummaryItemsTypeDef
        ],
    },
    total=False,
)


class ClientDescribeInventoryDeletionsResponseInventoryDeletionsDeletionSummaryTypeDef(
    _ClientDescribeInventoryDeletionsResponseInventoryDeletionsDeletionSummaryTypeDef
):
    """
    Type definition for `ClientDescribeInventoryDeletionsResponseInventoryDeletions` `DeletionSummary`

    Information about the delete operation. For more information about this summary, see
    `Understanding the Delete Inventory Summary
    <http://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-inventory-custom.html#sysman-inventory-delete>`__
    in the *AWS Systems Manager User Guide* .

    - **TotalCount** *(integer) --*

      The total number of items to delete. This count does not change during the delete
      operation.

    - **RemainingCount** *(integer) --*

      Remaining number of items to delete.

    - **SummaryItems** *(list) --*

      A list of counts and versions for deleted items.

      - *(dict) --*

        Either a count, remaining count, or a version number in a delete inventory summary.

        - **Version** *(string) --*

          The inventory type version.

        - **Count** *(integer) --*

          A count of the number of deleted items.

        - **RemainingCount** *(integer) --*

          The remaining number of items to delete.
    """


_ClientDescribeInventoryDeletionsResponseInventoryDeletionsTypeDef = TypedDict(
    "_ClientDescribeInventoryDeletionsResponseInventoryDeletionsTypeDef",
    {
        "DeletionId": str,
        "TypeName": str,
        "DeletionStartTime": datetime,
        "LastStatus": str,
        "LastStatusMessage": str,
        "DeletionSummary": ClientDescribeInventoryDeletionsResponseInventoryDeletionsDeletionSummaryTypeDef,
        "LastStatusUpdateTime": datetime,
    },
    total=False,
)


class ClientDescribeInventoryDeletionsResponseInventoryDeletionsTypeDef(
    _ClientDescribeInventoryDeletionsResponseInventoryDeletionsTypeDef
):
    """
    Type definition for `ClientDescribeInventoryDeletionsResponse` `InventoryDeletions`

    Status information returned by the ``DeleteInventory`` action.

    - **DeletionId** *(string) --*

      The deletion ID returned by the ``DeleteInventory`` action.

    - **TypeName** *(string) --*

      The name of the inventory data type.

    - **DeletionStartTime** *(datetime) --*

      The UTC timestamp when the delete operation started.

    - **LastStatus** *(string) --*

      The status of the operation. Possible values are InProgress and Complete.

    - **LastStatusMessage** *(string) --*

      Information about the status.

    - **DeletionSummary** *(dict) --*

      Information about the delete operation. For more information about this summary, see
      `Understanding the Delete Inventory Summary
      <http://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-inventory-custom.html#sysman-inventory-delete>`__
      in the *AWS Systems Manager User Guide* .

      - **TotalCount** *(integer) --*

        The total number of items to delete. This count does not change during the delete
        operation.

      - **RemainingCount** *(integer) --*

        Remaining number of items to delete.

      - **SummaryItems** *(list) --*

        A list of counts and versions for deleted items.

        - *(dict) --*

          Either a count, remaining count, or a version number in a delete inventory summary.

          - **Version** *(string) --*

            The inventory type version.

          - **Count** *(integer) --*

            A count of the number of deleted items.

          - **RemainingCount** *(integer) --*

            The remaining number of items to delete.

    - **LastStatusUpdateTime** *(datetime) --*

      The UTC timestamp of when the last status report.
    """


_ClientDescribeInventoryDeletionsResponseTypeDef = TypedDict(
    "_ClientDescribeInventoryDeletionsResponseTypeDef",
    {
        "InventoryDeletions": List[
            ClientDescribeInventoryDeletionsResponseInventoryDeletionsTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)


class ClientDescribeInventoryDeletionsResponseTypeDef(
    _ClientDescribeInventoryDeletionsResponseTypeDef
):
    """
    Type definition for `ClientDescribeInventoryDeletions` `Response`

    - **InventoryDeletions** *(list) --*

      A list of status items for deleted inventory.

      - *(dict) --*

        Status information returned by the ``DeleteInventory`` action.

        - **DeletionId** *(string) --*

          The deletion ID returned by the ``DeleteInventory`` action.

        - **TypeName** *(string) --*

          The name of the inventory data type.

        - **DeletionStartTime** *(datetime) --*

          The UTC timestamp when the delete operation started.

        - **LastStatus** *(string) --*

          The status of the operation. Possible values are InProgress and Complete.

        - **LastStatusMessage** *(string) --*

          Information about the status.

        - **DeletionSummary** *(dict) --*

          Information about the delete operation. For more information about this summary, see
          `Understanding the Delete Inventory Summary
          <http://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-inventory-custom.html#sysman-inventory-delete>`__
          in the *AWS Systems Manager User Guide* .

          - **TotalCount** *(integer) --*

            The total number of items to delete. This count does not change during the delete
            operation.

          - **RemainingCount** *(integer) --*

            Remaining number of items to delete.

          - **SummaryItems** *(list) --*

            A list of counts and versions for deleted items.

            - *(dict) --*

              Either a count, remaining count, or a version number in a delete inventory summary.

              - **Version** *(string) --*

                The inventory type version.

              - **Count** *(integer) --*

                A count of the number of deleted items.

              - **RemainingCount** *(integer) --*

                The remaining number of items to delete.

        - **LastStatusUpdateTime** *(datetime) --*

          The UTC timestamp of when the last status report.

    - **NextToken** *(string) --*

      The token for the next set of items to return. Use this token to get the next set of results.
    """


_ClientDescribeMaintenanceWindowExecutionTaskInvocationsFiltersTypeDef = TypedDict(
    "_ClientDescribeMaintenanceWindowExecutionTaskInvocationsFiltersTypeDef",
    {"Key": str, "Values": List[str]},
    total=False,
)


class ClientDescribeMaintenanceWindowExecutionTaskInvocationsFiltersTypeDef(
    _ClientDescribeMaintenanceWindowExecutionTaskInvocationsFiltersTypeDef
):
    """
    Type definition for `ClientDescribeMaintenanceWindowExecutionTaskInvocations` `Filters`

    Filter used in the request. Supported filter keys are Name and Enabled.

    - **Key** *(string) --*

      The name of the filter.

    - **Values** *(list) --*

      The filter values.

      - *(string) --*
    """


_ClientDescribeMaintenanceWindowExecutionTaskInvocationsResponseWindowExecutionTaskInvocationIdentitiesTypeDef = TypedDict(
    "_ClientDescribeMaintenanceWindowExecutionTaskInvocationsResponseWindowExecutionTaskInvocationIdentitiesTypeDef",
    {
        "WindowExecutionId": str,
        "TaskExecutionId": str,
        "InvocationId": str,
        "ExecutionId": str,
        "TaskType": str,
        "Parameters": str,
        "Status": str,
        "StatusDetails": str,
        "StartTime": datetime,
        "EndTime": datetime,
        "OwnerInformation": str,
        "WindowTargetId": str,
    },
    total=False,
)


class ClientDescribeMaintenanceWindowExecutionTaskInvocationsResponseWindowExecutionTaskInvocationIdentitiesTypeDef(
    _ClientDescribeMaintenanceWindowExecutionTaskInvocationsResponseWindowExecutionTaskInvocationIdentitiesTypeDef
):
    """
    Type definition for `ClientDescribeMaintenanceWindowExecutionTaskInvocationsResponse` `WindowExecutionTaskInvocationIdentities`

    Describes the information about a task invocation for a particular target as part of a task
    execution performed as part of a maintenance window execution.

    - **WindowExecutionId** *(string) --*

      The ID of the maintenance window execution that ran the task.

    - **TaskExecutionId** *(string) --*

      The ID of the specific task execution in the maintenance window execution.

    - **InvocationId** *(string) --*

      The ID of the task invocation.

    - **ExecutionId** *(string) --*

      The ID of the action performed in the service that actually handled the task invocation.
      If the task type is RUN_COMMAND, this value is the command ID.

    - **TaskType** *(string) --*

      The task type.

    - **Parameters** *(string) --*

      The parameters that were provided for the invocation when it was run.

    - **Status** *(string) --*

      The status of the task invocation.

    - **StatusDetails** *(string) --*

      The details explaining the status of the task invocation. Only available for certain
      Status values.

    - **StartTime** *(datetime) --*

      The time the invocation started.

    - **EndTime** *(datetime) --*

      The time the invocation finished.

    - **OwnerInformation** *(string) --*

      User-provided value that was specified when the target was registered with the
      maintenance window. This was also included in any CloudWatch events raised during the
      task invocation.

    - **WindowTargetId** *(string) --*

      The ID of the target definition in this maintenance window the invocation was performed
      for.
    """


_ClientDescribeMaintenanceWindowExecutionTaskInvocationsResponseTypeDef = TypedDict(
    "_ClientDescribeMaintenanceWindowExecutionTaskInvocationsResponseTypeDef",
    {
        "WindowExecutionTaskInvocationIdentities": List[
            ClientDescribeMaintenanceWindowExecutionTaskInvocationsResponseWindowExecutionTaskInvocationIdentitiesTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)


class ClientDescribeMaintenanceWindowExecutionTaskInvocationsResponseTypeDef(
    _ClientDescribeMaintenanceWindowExecutionTaskInvocationsResponseTypeDef
):
    """
    Type definition for `ClientDescribeMaintenanceWindowExecutionTaskInvocations` `Response`

    - **WindowExecutionTaskInvocationIdentities** *(list) --*

      Information about the task invocation results per invocation.

      - *(dict) --*

        Describes the information about a task invocation for a particular target as part of a task
        execution performed as part of a maintenance window execution.

        - **WindowExecutionId** *(string) --*

          The ID of the maintenance window execution that ran the task.

        - **TaskExecutionId** *(string) --*

          The ID of the specific task execution in the maintenance window execution.

        - **InvocationId** *(string) --*

          The ID of the task invocation.

        - **ExecutionId** *(string) --*

          The ID of the action performed in the service that actually handled the task invocation.
          If the task type is RUN_COMMAND, this value is the command ID.

        - **TaskType** *(string) --*

          The task type.

        - **Parameters** *(string) --*

          The parameters that were provided for the invocation when it was run.

        - **Status** *(string) --*

          The status of the task invocation.

        - **StatusDetails** *(string) --*

          The details explaining the status of the task invocation. Only available for certain
          Status values.

        - **StartTime** *(datetime) --*

          The time the invocation started.

        - **EndTime** *(datetime) --*

          The time the invocation finished.

        - **OwnerInformation** *(string) --*

          User-provided value that was specified when the target was registered with the
          maintenance window. This was also included in any CloudWatch events raised during the
          task invocation.

        - **WindowTargetId** *(string) --*

          The ID of the target definition in this maintenance window the invocation was performed
          for.

    - **NextToken** *(string) --*

      The token to use when requesting the next set of items. If there are no additional items to
      return, the string is empty.
    """


_ClientDescribeMaintenanceWindowExecutionTasksFiltersTypeDef = TypedDict(
    "_ClientDescribeMaintenanceWindowExecutionTasksFiltersTypeDef",
    {"Key": str, "Values": List[str]},
    total=False,
)


class ClientDescribeMaintenanceWindowExecutionTasksFiltersTypeDef(
    _ClientDescribeMaintenanceWindowExecutionTasksFiltersTypeDef
):
    """
    Type definition for `ClientDescribeMaintenanceWindowExecutionTasks` `Filters`

    Filter used in the request. Supported filter keys are Name and Enabled.

    - **Key** *(string) --*

      The name of the filter.

    - **Values** *(list) --*

      The filter values.

      - *(string) --*
    """


_ClientDescribeMaintenanceWindowExecutionTasksResponseWindowExecutionTaskIdentitiesTypeDef = TypedDict(
    "_ClientDescribeMaintenanceWindowExecutionTasksResponseWindowExecutionTaskIdentitiesTypeDef",
    {
        "WindowExecutionId": str,
        "TaskExecutionId": str,
        "Status": str,
        "StatusDetails": str,
        "StartTime": datetime,
        "EndTime": datetime,
        "TaskArn": str,
        "TaskType": str,
    },
    total=False,
)


class ClientDescribeMaintenanceWindowExecutionTasksResponseWindowExecutionTaskIdentitiesTypeDef(
    _ClientDescribeMaintenanceWindowExecutionTasksResponseWindowExecutionTaskIdentitiesTypeDef
):
    """
    Type definition for `ClientDescribeMaintenanceWindowExecutionTasksResponse` `WindowExecutionTaskIdentities`

    Information about a task execution performed as part of a maintenance window execution.

    - **WindowExecutionId** *(string) --*

      The ID of the maintenance window execution that ran the task.

    - **TaskExecutionId** *(string) --*

      The ID of the specific task execution in the maintenance window execution.

    - **Status** *(string) --*

      The status of the task execution.

    - **StatusDetails** *(string) --*

      The details explaining the status of the task execution. Only available for certain
      status values.

    - **StartTime** *(datetime) --*

      The time the task execution started.

    - **EndTime** *(datetime) --*

      The time the task execution finished.

    - **TaskArn** *(string) --*

      The ARN of the task that ran.

    - **TaskType** *(string) --*

      The type of task that ran.
    """


_ClientDescribeMaintenanceWindowExecutionTasksResponseTypeDef = TypedDict(
    "_ClientDescribeMaintenanceWindowExecutionTasksResponseTypeDef",
    {
        "WindowExecutionTaskIdentities": List[
            ClientDescribeMaintenanceWindowExecutionTasksResponseWindowExecutionTaskIdentitiesTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)


class ClientDescribeMaintenanceWindowExecutionTasksResponseTypeDef(
    _ClientDescribeMaintenanceWindowExecutionTasksResponseTypeDef
):
    """
    Type definition for `ClientDescribeMaintenanceWindowExecutionTasks` `Response`

    - **WindowExecutionTaskIdentities** *(list) --*

      Information about the task executions.

      - *(dict) --*

        Information about a task execution performed as part of a maintenance window execution.

        - **WindowExecutionId** *(string) --*

          The ID of the maintenance window execution that ran the task.

        - **TaskExecutionId** *(string) --*

          The ID of the specific task execution in the maintenance window execution.

        - **Status** *(string) --*

          The status of the task execution.

        - **StatusDetails** *(string) --*

          The details explaining the status of the task execution. Only available for certain
          status values.

        - **StartTime** *(datetime) --*

          The time the task execution started.

        - **EndTime** *(datetime) --*

          The time the task execution finished.

        - **TaskArn** *(string) --*

          The ARN of the task that ran.

        - **TaskType** *(string) --*

          The type of task that ran.

    - **NextToken** *(string) --*

      The token to use when requesting the next set of items. If there are no additional items to
      return, the string is empty.
    """


_ClientDescribeMaintenanceWindowExecutionsFiltersTypeDef = TypedDict(
    "_ClientDescribeMaintenanceWindowExecutionsFiltersTypeDef",
    {"Key": str, "Values": List[str]},
    total=False,
)


class ClientDescribeMaintenanceWindowExecutionsFiltersTypeDef(
    _ClientDescribeMaintenanceWindowExecutionsFiltersTypeDef
):
    """
    Type definition for `ClientDescribeMaintenanceWindowExecutions` `Filters`

    Filter used in the request. Supported filter keys are Name and Enabled.

    - **Key** *(string) --*

      The name of the filter.

    - **Values** *(list) --*

      The filter values.

      - *(string) --*
    """


_ClientDescribeMaintenanceWindowExecutionsResponseWindowExecutionsTypeDef = TypedDict(
    "_ClientDescribeMaintenanceWindowExecutionsResponseWindowExecutionsTypeDef",
    {
        "WindowId": str,
        "WindowExecutionId": str,
        "Status": str,
        "StatusDetails": str,
        "StartTime": datetime,
        "EndTime": datetime,
    },
    total=False,
)


class ClientDescribeMaintenanceWindowExecutionsResponseWindowExecutionsTypeDef(
    _ClientDescribeMaintenanceWindowExecutionsResponseWindowExecutionsTypeDef
):
    """
    Type definition for `ClientDescribeMaintenanceWindowExecutionsResponse` `WindowExecutions`

    Describes the information about an execution of a maintenance window.

    - **WindowId** *(string) --*

      The ID of the maintenance window.

    - **WindowExecutionId** *(string) --*

      The ID of the maintenance window execution.

    - **Status** *(string) --*

      The status of the execution.

    - **StatusDetails** *(string) --*

      The details explaining the Status. Only available for certain status values.

    - **StartTime** *(datetime) --*

      The time the execution started.

    - **EndTime** *(datetime) --*

      The time the execution finished.
    """


_ClientDescribeMaintenanceWindowExecutionsResponseTypeDef = TypedDict(
    "_ClientDescribeMaintenanceWindowExecutionsResponseTypeDef",
    {
        "WindowExecutions": List[
            ClientDescribeMaintenanceWindowExecutionsResponseWindowExecutionsTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)


class ClientDescribeMaintenanceWindowExecutionsResponseTypeDef(
    _ClientDescribeMaintenanceWindowExecutionsResponseTypeDef
):
    """
    Type definition for `ClientDescribeMaintenanceWindowExecutions` `Response`

    - **WindowExecutions** *(list) --*

      Information about the maintenance window executions.

      - *(dict) --*

        Describes the information about an execution of a maintenance window.

        - **WindowId** *(string) --*

          The ID of the maintenance window.

        - **WindowExecutionId** *(string) --*

          The ID of the maintenance window execution.

        - **Status** *(string) --*

          The status of the execution.

        - **StatusDetails** *(string) --*

          The details explaining the Status. Only available for certain status values.

        - **StartTime** *(datetime) --*

          The time the execution started.

        - **EndTime** *(datetime) --*

          The time the execution finished.

    - **NextToken** *(string) --*

      The token to use when requesting the next set of items. If there are no additional items to
      return, the string is empty.
    """


_ClientDescribeMaintenanceWindowScheduleFiltersTypeDef = TypedDict(
    "_ClientDescribeMaintenanceWindowScheduleFiltersTypeDef",
    {"Key": str, "Values": List[str]},
    total=False,
)


class ClientDescribeMaintenanceWindowScheduleFiltersTypeDef(
    _ClientDescribeMaintenanceWindowScheduleFiltersTypeDef
):
    """
    Type definition for `ClientDescribeMaintenanceWindowSchedule` `Filters`

    Defines a filter used in Patch Manager APIs.

    - **Key** *(string) --*

      The key for the filter.

    - **Values** *(list) --*

      The value for the filter.

      - *(string) --*
    """


_ClientDescribeMaintenanceWindowScheduleResponseScheduledWindowExecutionsTypeDef = TypedDict(
    "_ClientDescribeMaintenanceWindowScheduleResponseScheduledWindowExecutionsTypeDef",
    {"WindowId": str, "Name": str, "ExecutionTime": str},
    total=False,
)


class ClientDescribeMaintenanceWindowScheduleResponseScheduledWindowExecutionsTypeDef(
    _ClientDescribeMaintenanceWindowScheduleResponseScheduledWindowExecutionsTypeDef
):
    """
    Type definition for `ClientDescribeMaintenanceWindowScheduleResponse` `ScheduledWindowExecutions`

    Information about a scheduled execution for a maintenance window.

    - **WindowId** *(string) --*

      The ID of the maintenance window to be run.

    - **Name** *(string) --*

      The name of the maintenance window to be run.

    - **ExecutionTime** *(string) --*

      The time, in ISO-8601 Extended format, that the maintenance window is scheduled to be run.
    """


_ClientDescribeMaintenanceWindowScheduleResponseTypeDef = TypedDict(
    "_ClientDescribeMaintenanceWindowScheduleResponseTypeDef",
    {
        "ScheduledWindowExecutions": List[
            ClientDescribeMaintenanceWindowScheduleResponseScheduledWindowExecutionsTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)


class ClientDescribeMaintenanceWindowScheduleResponseTypeDef(
    _ClientDescribeMaintenanceWindowScheduleResponseTypeDef
):
    """
    Type definition for `ClientDescribeMaintenanceWindowSchedule` `Response`

    - **ScheduledWindowExecutions** *(list) --*

      Information about maintenance window executions scheduled for the specified time range.

      - *(dict) --*

        Information about a scheduled execution for a maintenance window.

        - **WindowId** *(string) --*

          The ID of the maintenance window to be run.

        - **Name** *(string) --*

          The name of the maintenance window to be run.

        - **ExecutionTime** *(string) --*

          The time, in ISO-8601 Extended format, that the maintenance window is scheduled to be run.

    - **NextToken** *(string) --*

      The token for the next set of items to return. (You use this token in the next call.)
    """


_ClientDescribeMaintenanceWindowScheduleTargetsTypeDef = TypedDict(
    "_ClientDescribeMaintenanceWindowScheduleTargetsTypeDef",
    {"Key": str, "Values": List[str]},
    total=False,
)


class ClientDescribeMaintenanceWindowScheduleTargetsTypeDef(
    _ClientDescribeMaintenanceWindowScheduleTargetsTypeDef
):
    """
    Type definition for `ClientDescribeMaintenanceWindowSchedule` `Targets`

    An array of search criteria that targets instances using a Key,Value combination that you
    specify.

    Supported formats include the following.

    * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

    * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

    * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

    * (Maintenance window targets only) ``Key=resource-groups:Name,Values=*resource-group-name* ``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

    For example:

    * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

    * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

    * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

    * (Maintenance window targets only) ``Key=resource-groups:Name,Values=ProductionResourceGroup``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC* ``

    For information about how to send commands that target instances using ``Key,Value``
    parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
    <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
    in the *AWS Systems Manager User Guide* .

    - **Key** *(string) --*

      User-defined criteria for sending commands that target instances that meet the criteria.

    - **Values** *(list) --*

      User-defined criteria that maps to ``Key`` . For example, if you specified ``tag:ServerRole``
      , you could specify ``value:WebServer`` to run a command on instances that include Amazon EC2
      tags of ``ServerRole,WebServer`` .

      - *(string) --*
    """


_ClientDescribeMaintenanceWindowTargetsFiltersTypeDef = TypedDict(
    "_ClientDescribeMaintenanceWindowTargetsFiltersTypeDef",
    {"Key": str, "Values": List[str]},
    total=False,
)


class ClientDescribeMaintenanceWindowTargetsFiltersTypeDef(
    _ClientDescribeMaintenanceWindowTargetsFiltersTypeDef
):
    """
    Type definition for `ClientDescribeMaintenanceWindowTargets` `Filters`

    Filter used in the request. Supported filter keys are Name and Enabled.

    - **Key** *(string) --*

      The name of the filter.

    - **Values** *(list) --*

      The filter values.

      - *(string) --*
    """


_ClientDescribeMaintenanceWindowTargetsResponseTargetsTargetsTypeDef = TypedDict(
    "_ClientDescribeMaintenanceWindowTargetsResponseTargetsTargetsTypeDef",
    {"Key": str, "Values": List[str]},
    total=False,
)


class ClientDescribeMaintenanceWindowTargetsResponseTargetsTargetsTypeDef(
    _ClientDescribeMaintenanceWindowTargetsResponseTargetsTargetsTypeDef
):
    """
    Type definition for `ClientDescribeMaintenanceWindowTargetsResponseTargets` `Targets`

    An array of search criteria that targets instances using a Key,Value combination that
    you specify.

    Supported formats include the following.

    * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

    * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

    * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

    * (Maintenance window targets only)
    ``Key=resource-groups:Name,Values=*resource-group-name* ``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

    For example:

    * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

    * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

    * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

    * (Maintenance window targets only)
    ``Key=resource-groups:Name,Values=ProductionResourceGroup``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC*
    ``

    For information about how to send commands that target instances using ``Key,Value``
    parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
    <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
    in the *AWS Systems Manager User Guide* .

    - **Key** *(string) --*

      User-defined criteria for sending commands that target instances that meet the
      criteria.

    - **Values** *(list) --*

      User-defined criteria that maps to ``Key`` . For example, if you specified
      ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
      instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

      - *(string) --*
    """


_ClientDescribeMaintenanceWindowTargetsResponseTargetsTypeDef = TypedDict(
    "_ClientDescribeMaintenanceWindowTargetsResponseTargetsTypeDef",
    {
        "WindowId": str,
        "WindowTargetId": str,
        "ResourceType": str,
        "Targets": List[
            ClientDescribeMaintenanceWindowTargetsResponseTargetsTargetsTypeDef
        ],
        "OwnerInformation": str,
        "Name": str,
        "Description": str,
    },
    total=False,
)


class ClientDescribeMaintenanceWindowTargetsResponseTargetsTypeDef(
    _ClientDescribeMaintenanceWindowTargetsResponseTargetsTypeDef
):
    """
    Type definition for `ClientDescribeMaintenanceWindowTargetsResponse` `Targets`

    The target registered with the maintenance window.

    - **WindowId** *(string) --*

      The ID of the maintenance window to register the target with.

    - **WindowTargetId** *(string) --*

      The ID of the target.

    - **ResourceType** *(string) --*

      The type of target that is being registered with the maintenance window.

    - **Targets** *(list) --*

      The targets, either instances or tags.

      Specify instances using the following format:

       ``Key=instanceids,Values=<instanceid1>,<instanceid2>``

      Tags are specified using the following format:

       ``Key=<tag name>,Values=<tag value>`` .

      - *(dict) --*

        An array of search criteria that targets instances using a Key,Value combination that
        you specify.

        Supported formats include the following.

        * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

        * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

        * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

        * (Maintenance window targets only)
        ``Key=resource-groups:Name,Values=*resource-group-name* ``

        * (Maintenance window targets only)
        ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

        For example:

        * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

        * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

        * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

        * (Maintenance window targets only)
        ``Key=resource-groups:Name,Values=ProductionResourceGroup``

        * (Maintenance window targets only)
        ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC*
        ``

        For information about how to send commands that target instances using ``Key,Value``
        parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
        <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
        in the *AWS Systems Manager User Guide* .

        - **Key** *(string) --*

          User-defined criteria for sending commands that target instances that meet the
          criteria.

        - **Values** *(list) --*

          User-defined criteria that maps to ``Key`` . For example, if you specified
          ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
          instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

          - *(string) --*

    - **OwnerInformation** *(string) --*

      A user-provided value that will be included in any CloudWatch events that are raised
      while running tasks for these targets in this maintenance window.

    - **Name** *(string) --*

      The name for the maintenance window target.

    - **Description** *(string) --*

      A description for the target.
    """


_ClientDescribeMaintenanceWindowTargetsResponseTypeDef = TypedDict(
    "_ClientDescribeMaintenanceWindowTargetsResponseTypeDef",
    {
        "Targets": List[ClientDescribeMaintenanceWindowTargetsResponseTargetsTypeDef],
        "NextToken": str,
    },
    total=False,
)


class ClientDescribeMaintenanceWindowTargetsResponseTypeDef(
    _ClientDescribeMaintenanceWindowTargetsResponseTypeDef
):
    """
    Type definition for `ClientDescribeMaintenanceWindowTargets` `Response`

    - **Targets** *(list) --*

      Information about the targets in the maintenance window.

      - *(dict) --*

        The target registered with the maintenance window.

        - **WindowId** *(string) --*

          The ID of the maintenance window to register the target with.

        - **WindowTargetId** *(string) --*

          The ID of the target.

        - **ResourceType** *(string) --*

          The type of target that is being registered with the maintenance window.

        - **Targets** *(list) --*

          The targets, either instances or tags.

          Specify instances using the following format:

           ``Key=instanceids,Values=<instanceid1>,<instanceid2>``

          Tags are specified using the following format:

           ``Key=<tag name>,Values=<tag value>`` .

          - *(dict) --*

            An array of search criteria that targets instances using a Key,Value combination that
            you specify.

            Supported formats include the following.

            * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

            * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

            * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

            * (Maintenance window targets only)
            ``Key=resource-groups:Name,Values=*resource-group-name* ``

            * (Maintenance window targets only)
            ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

            For example:

            * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

            * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

            * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

            * (Maintenance window targets only)
            ``Key=resource-groups:Name,Values=ProductionResourceGroup``

            * (Maintenance window targets only)
            ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC*
            ``

            For information about how to send commands that target instances using ``Key,Value``
            parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
            <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
            in the *AWS Systems Manager User Guide* .

            - **Key** *(string) --*

              User-defined criteria for sending commands that target instances that meet the
              criteria.

            - **Values** *(list) --*

              User-defined criteria that maps to ``Key`` . For example, if you specified
              ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
              instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

              - *(string) --*

        - **OwnerInformation** *(string) --*

          A user-provided value that will be included in any CloudWatch events that are raised
          while running tasks for these targets in this maintenance window.

        - **Name** *(string) --*

          The name for the maintenance window target.

        - **Description** *(string) --*

          A description for the target.

    - **NextToken** *(string) --*

      The token to use when requesting the next set of items. If there are no additional items to
      return, the string is empty.
    """


_ClientDescribeMaintenanceWindowTasksFiltersTypeDef = TypedDict(
    "_ClientDescribeMaintenanceWindowTasksFiltersTypeDef",
    {"Key": str, "Values": List[str]},
    total=False,
)


class ClientDescribeMaintenanceWindowTasksFiltersTypeDef(
    _ClientDescribeMaintenanceWindowTasksFiltersTypeDef
):
    """
    Type definition for `ClientDescribeMaintenanceWindowTasks` `Filters`

    Filter used in the request. Supported filter keys are Name and Enabled.

    - **Key** *(string) --*

      The name of the filter.

    - **Values** *(list) --*

      The filter values.

      - *(string) --*
    """


_ClientDescribeMaintenanceWindowTasksResponseTasksLoggingInfoTypeDef = TypedDict(
    "_ClientDescribeMaintenanceWindowTasksResponseTasksLoggingInfoTypeDef",
    {"S3BucketName": str, "S3KeyPrefix": str, "S3Region": str},
    total=False,
)


class ClientDescribeMaintenanceWindowTasksResponseTasksLoggingInfoTypeDef(
    _ClientDescribeMaintenanceWindowTasksResponseTasksLoggingInfoTypeDef
):
    """
    Type definition for `ClientDescribeMaintenanceWindowTasksResponseTasks` `LoggingInfo`

    Information about an Amazon S3 bucket to write task-level logs to.

    .. note::

       ``LoggingInfo`` has been deprecated. To specify an S3 bucket to contain logs, instead
       use the ``OutputS3BucketName`` and ``OutputS3KeyPrefix`` options in the
       ``TaskInvocationParameters`` structure. For information about how Systems Manager
       handles these options for the supported maintenance window task types, see
       MaintenanceWindowTaskInvocationParameters .

    - **S3BucketName** *(string) --*

      The name of an Amazon S3 bucket where execution logs are stored .

    - **S3KeyPrefix** *(string) --*

      (Optional) The Amazon S3 bucket subfolder.

    - **S3Region** *(string) --*

      The region where the Amazon S3 bucket is located.
    """


_ClientDescribeMaintenanceWindowTasksResponseTasksTargetsTypeDef = TypedDict(
    "_ClientDescribeMaintenanceWindowTasksResponseTasksTargetsTypeDef",
    {"Key": str, "Values": List[str]},
    total=False,
)


class ClientDescribeMaintenanceWindowTasksResponseTasksTargetsTypeDef(
    _ClientDescribeMaintenanceWindowTasksResponseTasksTargetsTypeDef
):
    """
    Type definition for `ClientDescribeMaintenanceWindowTasksResponseTasks` `Targets`

    An array of search criteria that targets instances using a Key,Value combination that
    you specify.

    Supported formats include the following.

    * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

    * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

    * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

    * (Maintenance window targets only)
    ``Key=resource-groups:Name,Values=*resource-group-name* ``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

    For example:

    * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

    * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

    * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

    * (Maintenance window targets only)
    ``Key=resource-groups:Name,Values=ProductionResourceGroup``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC*
    ``

    For information about how to send commands that target instances using ``Key,Value``
    parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
    <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
    in the *AWS Systems Manager User Guide* .

    - **Key** *(string) --*

      User-defined criteria for sending commands that target instances that meet the
      criteria.

    - **Values** *(list) --*

      User-defined criteria that maps to ``Key`` . For example, if you specified
      ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
      instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

      - *(string) --*
    """


_ClientDescribeMaintenanceWindowTasksResponseTasksTaskParametersTypeDef = TypedDict(
    "_ClientDescribeMaintenanceWindowTasksResponseTasksTaskParametersTypeDef",
    {"Values": List[str]},
    total=False,
)


class ClientDescribeMaintenanceWindowTasksResponseTasksTaskParametersTypeDef(
    _ClientDescribeMaintenanceWindowTasksResponseTasksTaskParametersTypeDef
):
    """
    Type definition for `ClientDescribeMaintenanceWindowTasksResponseTasks` `TaskParameters`

    Defines the values for a task parameter.

    - **Values** *(list) --*

      This field contains an array of 0 or more strings, each 1 to 255 characters in
      length.

      - *(string) --*
    """


_ClientDescribeMaintenanceWindowTasksResponseTasksTypeDef = TypedDict(
    "_ClientDescribeMaintenanceWindowTasksResponseTasksTypeDef",
    {
        "WindowId": str,
        "WindowTaskId": str,
        "TaskArn": str,
        "Type": str,
        "Targets": List[
            ClientDescribeMaintenanceWindowTasksResponseTasksTargetsTypeDef
        ],
        "TaskParameters": Dict[
            str, ClientDescribeMaintenanceWindowTasksResponseTasksTaskParametersTypeDef
        ],
        "Priority": int,
        "LoggingInfo": ClientDescribeMaintenanceWindowTasksResponseTasksLoggingInfoTypeDef,
        "ServiceRoleArn": str,
        "MaxConcurrency": str,
        "MaxErrors": str,
        "Name": str,
        "Description": str,
    },
    total=False,
)


class ClientDescribeMaintenanceWindowTasksResponseTasksTypeDef(
    _ClientDescribeMaintenanceWindowTasksResponseTasksTypeDef
):
    """
    Type definition for `ClientDescribeMaintenanceWindowTasksResponse` `Tasks`

    Information about a task defined for a maintenance window.

    - **WindowId** *(string) --*

      The ID of the maintenance window where the task is registered.

    - **WindowTaskId** *(string) --*

      The task ID.

    - **TaskArn** *(string) --*

      The resource that the task uses during execution. For RUN_COMMAND and AUTOMATION task
      types, ``TaskArn`` is the Systems Manager document name or ARN. For LAMBDA tasks, it's
      the function name or ARN. For STEP_FUNCTIONS tasks, it's the state machine ARN.

    - **Type** *(string) --*

      The type of task. The type can be one of the following: RUN_COMMAND, AUTOMATION, LAMBDA,
      or STEP_FUNCTIONS.

    - **Targets** *(list) --*

      The targets (either instances or tags). Instances are specified using
      Key=instanceids,Values=<instanceid1>,<instanceid2>. Tags are specified using Key=<tag
      name>,Values=<tag value>.

      - *(dict) --*

        An array of search criteria that targets instances using a Key,Value combination that
        you specify.

        Supported formats include the following.

        * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

        * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

        * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

        * (Maintenance window targets only)
        ``Key=resource-groups:Name,Values=*resource-group-name* ``

        * (Maintenance window targets only)
        ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

        For example:

        * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

        * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

        * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

        * (Maintenance window targets only)
        ``Key=resource-groups:Name,Values=ProductionResourceGroup``

        * (Maintenance window targets only)
        ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC*
        ``

        For information about how to send commands that target instances using ``Key,Value``
        parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
        <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
        in the *AWS Systems Manager User Guide* .

        - **Key** *(string) --*

          User-defined criteria for sending commands that target instances that meet the
          criteria.

        - **Values** *(list) --*

          User-defined criteria that maps to ``Key`` . For example, if you specified
          ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
          instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

          - *(string) --*

    - **TaskParameters** *(dict) --*

      The parameters that should be passed to the task when it is run.

      .. note::

         ``TaskParameters`` has been deprecated. To specify parameters to pass to a task when
         it runs, instead use the ``Parameters`` option in the ``TaskInvocationParameters``
         structure. For information about how Systems Manager handles these options for the
         supported maintenance window task types, see
         MaintenanceWindowTaskInvocationParameters .

      - *(string) --*

        - *(dict) --*

          Defines the values for a task parameter.

          - **Values** *(list) --*

            This field contains an array of 0 or more strings, each 1 to 255 characters in
            length.

            - *(string) --*

    - **Priority** *(integer) --*

      The priority of the task in the maintenance window. The lower the number, the higher the
      priority. Tasks that have the same priority are scheduled in parallel.

    - **LoggingInfo** *(dict) --*

      Information about an Amazon S3 bucket to write task-level logs to.

      .. note::

         ``LoggingInfo`` has been deprecated. To specify an S3 bucket to contain logs, instead
         use the ``OutputS3BucketName`` and ``OutputS3KeyPrefix`` options in the
         ``TaskInvocationParameters`` structure. For information about how Systems Manager
         handles these options for the supported maintenance window task types, see
         MaintenanceWindowTaskInvocationParameters .

      - **S3BucketName** *(string) --*

        The name of an Amazon S3 bucket where execution logs are stored .

      - **S3KeyPrefix** *(string) --*

        (Optional) The Amazon S3 bucket subfolder.

      - **S3Region** *(string) --*

        The region where the Amazon S3 bucket is located.

    - **ServiceRoleArn** *(string) --*

      The ARN of the IAM service role to use to publish Amazon Simple Notification Service
      (Amazon SNS) notifications for maintenance window Run Command tasks.

    - **MaxConcurrency** *(string) --*

      The maximum number of targets this task can be run for, in parallel.

    - **MaxErrors** *(string) --*

      The maximum number of errors allowed before this task stops being scheduled.

    - **Name** *(string) --*

      The task name.

    - **Description** *(string) --*

      A description of the task.
    """


_ClientDescribeMaintenanceWindowTasksResponseTypeDef = TypedDict(
    "_ClientDescribeMaintenanceWindowTasksResponseTypeDef",
    {
        "Tasks": List[ClientDescribeMaintenanceWindowTasksResponseTasksTypeDef],
        "NextToken": str,
    },
    total=False,
)


class ClientDescribeMaintenanceWindowTasksResponseTypeDef(
    _ClientDescribeMaintenanceWindowTasksResponseTypeDef
):
    """
    Type definition for `ClientDescribeMaintenanceWindowTasks` `Response`

    - **Tasks** *(list) --*

      Information about the tasks in the maintenance window.

      - *(dict) --*

        Information about a task defined for a maintenance window.

        - **WindowId** *(string) --*

          The ID of the maintenance window where the task is registered.

        - **WindowTaskId** *(string) --*

          The task ID.

        - **TaskArn** *(string) --*

          The resource that the task uses during execution. For RUN_COMMAND and AUTOMATION task
          types, ``TaskArn`` is the Systems Manager document name or ARN. For LAMBDA tasks, it's
          the function name or ARN. For STEP_FUNCTIONS tasks, it's the state machine ARN.

        - **Type** *(string) --*

          The type of task. The type can be one of the following: RUN_COMMAND, AUTOMATION, LAMBDA,
          or STEP_FUNCTIONS.

        - **Targets** *(list) --*

          The targets (either instances or tags). Instances are specified using
          Key=instanceids,Values=<instanceid1>,<instanceid2>. Tags are specified using Key=<tag
          name>,Values=<tag value>.

          - *(dict) --*

            An array of search criteria that targets instances using a Key,Value combination that
            you specify.

            Supported formats include the following.

            * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

            * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

            * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

            * (Maintenance window targets only)
            ``Key=resource-groups:Name,Values=*resource-group-name* ``

            * (Maintenance window targets only)
            ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

            For example:

            * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

            * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

            * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

            * (Maintenance window targets only)
            ``Key=resource-groups:Name,Values=ProductionResourceGroup``

            * (Maintenance window targets only)
            ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC*
            ``

            For information about how to send commands that target instances using ``Key,Value``
            parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
            <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
            in the *AWS Systems Manager User Guide* .

            - **Key** *(string) --*

              User-defined criteria for sending commands that target instances that meet the
              criteria.

            - **Values** *(list) --*

              User-defined criteria that maps to ``Key`` . For example, if you specified
              ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
              instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

              - *(string) --*

        - **TaskParameters** *(dict) --*

          The parameters that should be passed to the task when it is run.

          .. note::

             ``TaskParameters`` has been deprecated. To specify parameters to pass to a task when
             it runs, instead use the ``Parameters`` option in the ``TaskInvocationParameters``
             structure. For information about how Systems Manager handles these options for the
             supported maintenance window task types, see
             MaintenanceWindowTaskInvocationParameters .

          - *(string) --*

            - *(dict) --*

              Defines the values for a task parameter.

              - **Values** *(list) --*

                This field contains an array of 0 or more strings, each 1 to 255 characters in
                length.

                - *(string) --*

        - **Priority** *(integer) --*

          The priority of the task in the maintenance window. The lower the number, the higher the
          priority. Tasks that have the same priority are scheduled in parallel.

        - **LoggingInfo** *(dict) --*

          Information about an Amazon S3 bucket to write task-level logs to.

          .. note::

             ``LoggingInfo`` has been deprecated. To specify an S3 bucket to contain logs, instead
             use the ``OutputS3BucketName`` and ``OutputS3KeyPrefix`` options in the
             ``TaskInvocationParameters`` structure. For information about how Systems Manager
             handles these options for the supported maintenance window task types, see
             MaintenanceWindowTaskInvocationParameters .

          - **S3BucketName** *(string) --*

            The name of an Amazon S3 bucket where execution logs are stored .

          - **S3KeyPrefix** *(string) --*

            (Optional) The Amazon S3 bucket subfolder.

          - **S3Region** *(string) --*

            The region where the Amazon S3 bucket is located.

        - **ServiceRoleArn** *(string) --*

          The ARN of the IAM service role to use to publish Amazon Simple Notification Service
          (Amazon SNS) notifications for maintenance window Run Command tasks.

        - **MaxConcurrency** *(string) --*

          The maximum number of targets this task can be run for, in parallel.

        - **MaxErrors** *(string) --*

          The maximum number of errors allowed before this task stops being scheduled.

        - **Name** *(string) --*

          The task name.

        - **Description** *(string) --*

          A description of the task.

    - **NextToken** *(string) --*

      The token to use when requesting the next set of items. If there are no additional items to
      return, the string is empty.
    """


_ClientDescribeMaintenanceWindowsFiltersTypeDef = TypedDict(
    "_ClientDescribeMaintenanceWindowsFiltersTypeDef",
    {"Key": str, "Values": List[str]},
    total=False,
)


class ClientDescribeMaintenanceWindowsFiltersTypeDef(
    _ClientDescribeMaintenanceWindowsFiltersTypeDef
):
    """
    Type definition for `ClientDescribeMaintenanceWindows` `Filters`

    Filter used in the request. Supported filter keys are Name and Enabled.

    - **Key** *(string) --*

      The name of the filter.

    - **Values** *(list) --*

      The filter values.

      - *(string) --*
    """


_ClientDescribeMaintenanceWindowsForTargetResponseWindowIdentitiesTypeDef = TypedDict(
    "_ClientDescribeMaintenanceWindowsForTargetResponseWindowIdentitiesTypeDef",
    {"WindowId": str, "Name": str},
    total=False,
)


class ClientDescribeMaintenanceWindowsForTargetResponseWindowIdentitiesTypeDef(
    _ClientDescribeMaintenanceWindowsForTargetResponseWindowIdentitiesTypeDef
):
    """
    Type definition for `ClientDescribeMaintenanceWindowsForTargetResponse` `WindowIdentities`

    The maintenance window to which the specified target belongs.

    - **WindowId** *(string) --*

      The ID of the maintenance window.

    - **Name** *(string) --*

      The name of the maintenance window.
    """


_ClientDescribeMaintenanceWindowsForTargetResponseTypeDef = TypedDict(
    "_ClientDescribeMaintenanceWindowsForTargetResponseTypeDef",
    {
        "WindowIdentities": List[
            ClientDescribeMaintenanceWindowsForTargetResponseWindowIdentitiesTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)


class ClientDescribeMaintenanceWindowsForTargetResponseTypeDef(
    _ClientDescribeMaintenanceWindowsForTargetResponseTypeDef
):
    """
    Type definition for `ClientDescribeMaintenanceWindowsForTarget` `Response`

    - **WindowIdentities** *(list) --*

      Information about the maintenance window targets and tasks an instance is associated with.

      - *(dict) --*

        The maintenance window to which the specified target belongs.

        - **WindowId** *(string) --*

          The ID of the maintenance window.

        - **Name** *(string) --*

          The name of the maintenance window.

    - **NextToken** *(string) --*

      The token for the next set of items to return. (You use this token in the next call.)
    """


_ClientDescribeMaintenanceWindowsForTargetTargetsTypeDef = TypedDict(
    "_ClientDescribeMaintenanceWindowsForTargetTargetsTypeDef",
    {"Key": str, "Values": List[str]},
    total=False,
)


class ClientDescribeMaintenanceWindowsForTargetTargetsTypeDef(
    _ClientDescribeMaintenanceWindowsForTargetTargetsTypeDef
):
    """
    Type definition for `ClientDescribeMaintenanceWindowsForTarget` `Targets`

    An array of search criteria that targets instances using a Key,Value combination that you
    specify.

    Supported formats include the following.

    * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

    * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

    * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

    * (Maintenance window targets only) ``Key=resource-groups:Name,Values=*resource-group-name* ``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

    For example:

    * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

    * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

    * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

    * (Maintenance window targets only) ``Key=resource-groups:Name,Values=ProductionResourceGroup``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC* ``

    For information about how to send commands that target instances using ``Key,Value``
    parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
    <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
    in the *AWS Systems Manager User Guide* .

    - **Key** *(string) --*

      User-defined criteria for sending commands that target instances that meet the criteria.

    - **Values** *(list) --*

      User-defined criteria that maps to ``Key`` . For example, if you specified ``tag:ServerRole``
      , you could specify ``value:WebServer`` to run a command on instances that include Amazon EC2
      tags of ``ServerRole,WebServer`` .

      - *(string) --*
    """


_ClientDescribeMaintenanceWindowsResponseWindowIdentitiesTypeDef = TypedDict(
    "_ClientDescribeMaintenanceWindowsResponseWindowIdentitiesTypeDef",
    {
        "WindowId": str,
        "Name": str,
        "Description": str,
        "Enabled": bool,
        "Duration": int,
        "Cutoff": int,
        "Schedule": str,
        "ScheduleTimezone": str,
        "EndDate": str,
        "StartDate": str,
        "NextExecutionTime": str,
    },
    total=False,
)


class ClientDescribeMaintenanceWindowsResponseWindowIdentitiesTypeDef(
    _ClientDescribeMaintenanceWindowsResponseWindowIdentitiesTypeDef
):
    """
    Type definition for `ClientDescribeMaintenanceWindowsResponse` `WindowIdentities`

    Information about the maintenance window.

    - **WindowId** *(string) --*

      The ID of the maintenance window.

    - **Name** *(string) --*

      The name of the maintenance window.

    - **Description** *(string) --*

      A description of the maintenance window.

    - **Enabled** *(boolean) --*

      Indicates whether the maintenance window is enabled.

    - **Duration** *(integer) --*

      The duration of the maintenance window in hours.

    - **Cutoff** *(integer) --*

      The number of hours before the end of the maintenance window that Systems Manager stops
      scheduling new tasks for execution.

    - **Schedule** *(string) --*

      The schedule of the maintenance window in the form of a cron or rate expression.

    - **ScheduleTimezone** *(string) --*

      The time zone that the scheduled maintenance window executions are based on, in Internet
      Assigned Numbers Authority (IANA) format.

    - **EndDate** *(string) --*

      The date and time, in ISO-8601 Extended format, for when the maintenance window is
      scheduled to become inactive.

    - **StartDate** *(string) --*

      The date and time, in ISO-8601 Extended format, for when the maintenance window is
      scheduled to become active.

    - **NextExecutionTime** *(string) --*

      The next time the maintenance window will actually run, taking into account any specified
      times for the maintenance window to become active or inactive.
    """


_ClientDescribeMaintenanceWindowsResponseTypeDef = TypedDict(
    "_ClientDescribeMaintenanceWindowsResponseTypeDef",
    {
        "WindowIdentities": List[
            ClientDescribeMaintenanceWindowsResponseWindowIdentitiesTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)


class ClientDescribeMaintenanceWindowsResponseTypeDef(
    _ClientDescribeMaintenanceWindowsResponseTypeDef
):
    """
    Type definition for `ClientDescribeMaintenanceWindows` `Response`

    - **WindowIdentities** *(list) --*

      Information about the maintenance windows.

      - *(dict) --*

        Information about the maintenance window.

        - **WindowId** *(string) --*

          The ID of the maintenance window.

        - **Name** *(string) --*

          The name of the maintenance window.

        - **Description** *(string) --*

          A description of the maintenance window.

        - **Enabled** *(boolean) --*

          Indicates whether the maintenance window is enabled.

        - **Duration** *(integer) --*

          The duration of the maintenance window in hours.

        - **Cutoff** *(integer) --*

          The number of hours before the end of the maintenance window that Systems Manager stops
          scheduling new tasks for execution.

        - **Schedule** *(string) --*

          The schedule of the maintenance window in the form of a cron or rate expression.

        - **ScheduleTimezone** *(string) --*

          The time zone that the scheduled maintenance window executions are based on, in Internet
          Assigned Numbers Authority (IANA) format.

        - **EndDate** *(string) --*

          The date and time, in ISO-8601 Extended format, for when the maintenance window is
          scheduled to become inactive.

        - **StartDate** *(string) --*

          The date and time, in ISO-8601 Extended format, for when the maintenance window is
          scheduled to become active.

        - **NextExecutionTime** *(string) --*

          The next time the maintenance window will actually run, taking into account any specified
          times for the maintenance window to become active or inactive.

    - **NextToken** *(string) --*

      The token to use when requesting the next set of items. If there are no additional items to
      return, the string is empty.
    """


_ClientDescribeOpsItemsOpsItemFiltersTypeDef = TypedDict(
    "_ClientDescribeOpsItemsOpsItemFiltersTypeDef",
    {"Key": str, "Values": List[str], "Operator": str},
)


class ClientDescribeOpsItemsOpsItemFiltersTypeDef(
    _ClientDescribeOpsItemsOpsItemFiltersTypeDef
):
    """
    Type definition for `ClientDescribeOpsItems` `OpsItemFilters`

    Describes an OpsItem filter.

    - **Key** *(string) --* **[REQUIRED]**

      The name of the filter.

    - **Values** *(list) --* **[REQUIRED]**

      The filter value.

      - *(string) --*

    - **Operator** *(string) --* **[REQUIRED]**

      The operator used by the filter call.
    """


_ClientDescribeOpsItemsResponseOpsItemSummariesOperationalDataTypeDef = TypedDict(
    "_ClientDescribeOpsItemsResponseOpsItemSummariesOperationalDataTypeDef",
    {"Value": str, "Type": str},
    total=False,
)


class ClientDescribeOpsItemsResponseOpsItemSummariesOperationalDataTypeDef(
    _ClientDescribeOpsItemsResponseOpsItemSummariesOperationalDataTypeDef
):
    """
    Type definition for `ClientDescribeOpsItemsResponseOpsItemSummaries` `OperationalData`

    An object that defines the value of the key and its type in the OperationalData map.

    - **Value** *(string) --*

      The value of the OperationalData key.

    - **Type** *(string) --*

      The type of key-value pair. Valid types include ``SearchableString`` and ``String``
      .
    """


_ClientDescribeOpsItemsResponseOpsItemSummariesTypeDef = TypedDict(
    "_ClientDescribeOpsItemsResponseOpsItemSummariesTypeDef",
    {
        "CreatedBy": str,
        "CreatedTime": datetime,
        "LastModifiedBy": str,
        "LastModifiedTime": datetime,
        "Priority": int,
        "Source": str,
        "Status": str,
        "OpsItemId": str,
        "Title": str,
        "OperationalData": Dict[
            str, ClientDescribeOpsItemsResponseOpsItemSummariesOperationalDataTypeDef
        ],
    },
    total=False,
)


class ClientDescribeOpsItemsResponseOpsItemSummariesTypeDef(
    _ClientDescribeOpsItemsResponseOpsItemSummariesTypeDef
):
    """
    Type definition for `ClientDescribeOpsItemsResponse` `OpsItemSummaries`

    A count of OpsItems.

    - **CreatedBy** *(string) --*

      The Amazon Resource Name (ARN) of the IAM entity that created the OpsItem.

    - **CreatedTime** *(datetime) --*

      The date and time the OpsItem was created.

    - **LastModifiedBy** *(string) --*

      The Amazon Resource Name (ARN) of the IAM entity that created the OpsItem.

    - **LastModifiedTime** *(datetime) --*

      The date and time the OpsItem was last updated.

    - **Priority** *(integer) --*

      The importance of this OpsItem in relation to other OpsItems in the system.

    - **Source** *(string) --*

      The impacted AWS resource.

    - **Status** *(string) --*

      The OpsItem status. Status can be ``Open`` , ``In Progress`` , or ``Resolved`` .

    - **OpsItemId** *(string) --*

      The ID of the OpsItem.

    - **Title** *(string) --*

      A short heading that describes the nature of the OpsItem and the impacted resource.

    - **OperationalData** *(dict) --*

      Operational data is custom data that provides useful reference details about the OpsItem.

      - *(string) --*

        - *(dict) --*

          An object that defines the value of the key and its type in the OperationalData map.

          - **Value** *(string) --*

            The value of the OperationalData key.

          - **Type** *(string) --*

            The type of key-value pair. Valid types include ``SearchableString`` and ``String``
            .
    """


_ClientDescribeOpsItemsResponseTypeDef = TypedDict(
    "_ClientDescribeOpsItemsResponseTypeDef",
    {
        "NextToken": str,
        "OpsItemSummaries": List[ClientDescribeOpsItemsResponseOpsItemSummariesTypeDef],
    },
    total=False,
)


class ClientDescribeOpsItemsResponseTypeDef(_ClientDescribeOpsItemsResponseTypeDef):
    """
    Type definition for `ClientDescribeOpsItems` `Response`

    - **NextToken** *(string) --*

      The token for the next set of items to return. Use this token to get the next set of results.

    - **OpsItemSummaries** *(list) --*

      A list of OpsItems.

      - *(dict) --*

        A count of OpsItems.

        - **CreatedBy** *(string) --*

          The Amazon Resource Name (ARN) of the IAM entity that created the OpsItem.

        - **CreatedTime** *(datetime) --*

          The date and time the OpsItem was created.

        - **LastModifiedBy** *(string) --*

          The Amazon Resource Name (ARN) of the IAM entity that created the OpsItem.

        - **LastModifiedTime** *(datetime) --*

          The date and time the OpsItem was last updated.

        - **Priority** *(integer) --*

          The importance of this OpsItem in relation to other OpsItems in the system.

        - **Source** *(string) --*

          The impacted AWS resource.

        - **Status** *(string) --*

          The OpsItem status. Status can be ``Open`` , ``In Progress`` , or ``Resolved`` .

        - **OpsItemId** *(string) --*

          The ID of the OpsItem.

        - **Title** *(string) --*

          A short heading that describes the nature of the OpsItem and the impacted resource.

        - **OperationalData** *(dict) --*

          Operational data is custom data that provides useful reference details about the OpsItem.

          - *(string) --*

            - *(dict) --*

              An object that defines the value of the key and its type in the OperationalData map.

              - **Value** *(string) --*

                The value of the OperationalData key.

              - **Type** *(string) --*

                The type of key-value pair. Valid types include ``SearchableString`` and ``String``
                .
    """


_ClientDescribeParametersFiltersTypeDef = TypedDict(
    "_ClientDescribeParametersFiltersTypeDef", {"Key": str, "Values": List[str]}
)


class ClientDescribeParametersFiltersTypeDef(_ClientDescribeParametersFiltersTypeDef):
    """
    Type definition for `ClientDescribeParameters` `Filters`

    This data type is deprecated. Instead, use  ParameterStringFilter .

    - **Key** *(string) --* **[REQUIRED]**

      The name of the filter.

    - **Values** *(list) --* **[REQUIRED]**

      The filter values.

      - *(string) --*
    """


_RequiredClientDescribeParametersParameterFiltersTypeDef = TypedDict(
    "_RequiredClientDescribeParametersParameterFiltersTypeDef", {"Key": str}
)
_OptionalClientDescribeParametersParameterFiltersTypeDef = TypedDict(
    "_OptionalClientDescribeParametersParameterFiltersTypeDef",
    {"Option": str, "Values": List[str]},
    total=False,
)


class ClientDescribeParametersParameterFiltersTypeDef(
    _RequiredClientDescribeParametersParameterFiltersTypeDef,
    _OptionalClientDescribeParametersParameterFiltersTypeDef,
):
    """
    Type definition for `ClientDescribeParameters` `ParameterFilters`

    One or more filters. Use a filter to return a more specific list of results.

    .. warning::

      The ``ParameterStringFilter`` object is used by the  DescribeParameters and
      GetParametersByPath API actions. However, not all of the pattern values listed for ``Key``
      can be used with both actions.

      For ``DescribeActions`` , all of the listed patterns are valid, with the exception of
      ``Label`` .

      For ``GetParametersByPath`` , the following patterns listed for ``Key`` are not valid:
      ``Name`` , ``Path`` , and ``Tier`` .

      For examples of CLI commands demonstrating valid parameter filter constructions, see
      `Searching for Systems Manager Parameters
      <http://docs.aws.amazon.com/systems-manager/latest/userguide/parameter-search.html>`__ in the
      *AWS Systems Manager User Guide* .

    - **Key** *(string) --* **[REQUIRED]**

      The name of the filter.

    - **Option** *(string) --*

      For all filters used with  DescribeParameters , valid options include ``Equals`` and
      ``BeginsWith`` . The ``Name`` filter additionally supports the ``Contains`` option.
      (Exception: For filters using the key ``Path`` , valid options include ``Recursive`` and
      ``OneLevel`` .)

      For filters used with  GetParametersByPath , valid options include ``Equals`` and
      ``BeginsWith`` . (Exception: For filters using the key ``Label`` , the only valid option is
      ``Equals`` .)

    - **Values** *(list) --*

      The value you want to search for.

      - *(string) --*
    """


_ClientDescribeParametersResponseParametersPoliciesTypeDef = TypedDict(
    "_ClientDescribeParametersResponseParametersPoliciesTypeDef",
    {"PolicyText": str, "PolicyType": str, "PolicyStatus": str},
    total=False,
)


class ClientDescribeParametersResponseParametersPoliciesTypeDef(
    _ClientDescribeParametersResponseParametersPoliciesTypeDef
):
    """
    Type definition for `ClientDescribeParametersResponseParameters` `Policies`

    One or more policies assigned to a parameter.

    - **PolicyText** *(string) --*

      The JSON text of the policy.

    - **PolicyType** *(string) --*

      The type of policy. Parameter Store supports the following policy types: Expiration,
      ExpirationNotification, and NoChangeNotification.

    - **PolicyStatus** *(string) --*

      The status of the policy. Policies report the following statuses: Pending (the policy
      has not been enforced or applied yet), Finished (the policy was applied), Failed (the
      policy was not applied), or InProgress (the policy is being applied now).
    """


_ClientDescribeParametersResponseParametersTypeDef = TypedDict(
    "_ClientDescribeParametersResponseParametersTypeDef",
    {
        "Name": str,
        "Type": str,
        "KeyId": str,
        "LastModifiedDate": datetime,
        "LastModifiedUser": str,
        "Description": str,
        "AllowedPattern": str,
        "Version": int,
        "Tier": str,
        "Policies": List[ClientDescribeParametersResponseParametersPoliciesTypeDef],
    },
    total=False,
)


class ClientDescribeParametersResponseParametersTypeDef(
    _ClientDescribeParametersResponseParametersTypeDef
):
    """
    Type definition for `ClientDescribeParametersResponse` `Parameters`

    Metadata includes information like the ARN of the last user and the date/time the parameter
    was last used.

    - **Name** *(string) --*

      The parameter name.

    - **Type** *(string) --*

      The type of parameter. Valid parameter types include the following: String, String list,
      Secure string.

    - **KeyId** *(string) --*

      The ID of the query key used for this parameter.

    - **LastModifiedDate** *(datetime) --*

      Date the parameter was last changed or updated.

    - **LastModifiedUser** *(string) --*

      Amazon Resource Name (ARN) of the AWS user who last changed the parameter.

    - **Description** *(string) --*

      Description of the parameter actions.

    - **AllowedPattern** *(string) --*

      A parameter name can include only the following letters and symbols.

      a-zA-Z0-9_.-

    - **Version** *(integer) --*

      The parameter version.

    - **Tier** *(string) --*

      The parameter tier.

    - **Policies** *(list) --*

      A list of policies associated with a parameter.

      - *(dict) --*

        One or more policies assigned to a parameter.

        - **PolicyText** *(string) --*

          The JSON text of the policy.

        - **PolicyType** *(string) --*

          The type of policy. Parameter Store supports the following policy types: Expiration,
          ExpirationNotification, and NoChangeNotification.

        - **PolicyStatus** *(string) --*

          The status of the policy. Policies report the following statuses: Pending (the policy
          has not been enforced or applied yet), Finished (the policy was applied), Failed (the
          policy was not applied), or InProgress (the policy is being applied now).
    """


_ClientDescribeParametersResponseTypeDef = TypedDict(
    "_ClientDescribeParametersResponseTypeDef",
    {
        "Parameters": List[ClientDescribeParametersResponseParametersTypeDef],
        "NextToken": str,
    },
    total=False,
)


class ClientDescribeParametersResponseTypeDef(_ClientDescribeParametersResponseTypeDef):
    """
    Type definition for `ClientDescribeParameters` `Response`

    - **Parameters** *(list) --*

      Parameters returned by the request.

      - *(dict) --*

        Metadata includes information like the ARN of the last user and the date/time the parameter
        was last used.

        - **Name** *(string) --*

          The parameter name.

        - **Type** *(string) --*

          The type of parameter. Valid parameter types include the following: String, String list,
          Secure string.

        - **KeyId** *(string) --*

          The ID of the query key used for this parameter.

        - **LastModifiedDate** *(datetime) --*

          Date the parameter was last changed or updated.

        - **LastModifiedUser** *(string) --*

          Amazon Resource Name (ARN) of the AWS user who last changed the parameter.

        - **Description** *(string) --*

          Description of the parameter actions.

        - **AllowedPattern** *(string) --*

          A parameter name can include only the following letters and symbols.

          a-zA-Z0-9_.-

        - **Version** *(integer) --*

          The parameter version.

        - **Tier** *(string) --*

          The parameter tier.

        - **Policies** *(list) --*

          A list of policies associated with a parameter.

          - *(dict) --*

            One or more policies assigned to a parameter.

            - **PolicyText** *(string) --*

              The JSON text of the policy.

            - **PolicyType** *(string) --*

              The type of policy. Parameter Store supports the following policy types: Expiration,
              ExpirationNotification, and NoChangeNotification.

            - **PolicyStatus** *(string) --*

              The status of the policy. Policies report the following statuses: Pending (the policy
              has not been enforced or applied yet), Finished (the policy was applied), Failed (the
              policy was not applied), or InProgress (the policy is being applied now).

    - **NextToken** *(string) --*

      The token to use when requesting the next set of items. If there are no additional items to
      return, the string is empty.
    """


_ClientDescribePatchBaselinesFiltersTypeDef = TypedDict(
    "_ClientDescribePatchBaselinesFiltersTypeDef",
    {"Key": str, "Values": List[str]},
    total=False,
)


class ClientDescribePatchBaselinesFiltersTypeDef(
    _ClientDescribePatchBaselinesFiltersTypeDef
):
    """
    Type definition for `ClientDescribePatchBaselines` `Filters`

    Defines a filter used in Patch Manager APIs.

    - **Key** *(string) --*

      The key for the filter.

    - **Values** *(list) --*

      The value for the filter.

      - *(string) --*
    """


_ClientDescribePatchBaselinesResponseBaselineIdentitiesTypeDef = TypedDict(
    "_ClientDescribePatchBaselinesResponseBaselineIdentitiesTypeDef",
    {
        "BaselineId": str,
        "BaselineName": str,
        "OperatingSystem": str,
        "BaselineDescription": str,
        "DefaultBaseline": bool,
    },
    total=False,
)


class ClientDescribePatchBaselinesResponseBaselineIdentitiesTypeDef(
    _ClientDescribePatchBaselinesResponseBaselineIdentitiesTypeDef
):
    """
    Type definition for `ClientDescribePatchBaselinesResponse` `BaselineIdentities`

    Defines the basic information about a patch baseline.

    - **BaselineId** *(string) --*

      The ID of the patch baseline.

    - **BaselineName** *(string) --*

      The name of the patch baseline.

    - **OperatingSystem** *(string) --*

      Defines the operating system the patch baseline applies to. The Default value is WINDOWS.

    - **BaselineDescription** *(string) --*

      The description of the patch baseline.

    - **DefaultBaseline** *(boolean) --*

      Whether this is the default baseline. Note that Systems Manager supports creating
      multiple default patch baselines. For example, you can create a default patch baseline
      for each operating system.
    """


_ClientDescribePatchBaselinesResponseTypeDef = TypedDict(
    "_ClientDescribePatchBaselinesResponseTypeDef",
    {
        "BaselineIdentities": List[
            ClientDescribePatchBaselinesResponseBaselineIdentitiesTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)


class ClientDescribePatchBaselinesResponseTypeDef(
    _ClientDescribePatchBaselinesResponseTypeDef
):
    """
    Type definition for `ClientDescribePatchBaselines` `Response`

    - **BaselineIdentities** *(list) --*

      An array of PatchBaselineIdentity elements.

      - *(dict) --*

        Defines the basic information about a patch baseline.

        - **BaselineId** *(string) --*

          The ID of the patch baseline.

        - **BaselineName** *(string) --*

          The name of the patch baseline.

        - **OperatingSystem** *(string) --*

          Defines the operating system the patch baseline applies to. The Default value is WINDOWS.

        - **BaselineDescription** *(string) --*

          The description of the patch baseline.

        - **DefaultBaseline** *(boolean) --*

          Whether this is the default baseline. Note that Systems Manager supports creating
          multiple default patch baselines. For example, you can create a default patch baseline
          for each operating system.

    - **NextToken** *(string) --*

      The token to use when requesting the next set of items. If there are no additional items to
      return, the string is empty.
    """


_ClientDescribePatchGroupStateResponseTypeDef = TypedDict(
    "_ClientDescribePatchGroupStateResponseTypeDef",
    {
        "Instances": int,
        "InstancesWithInstalledPatches": int,
        "InstancesWithInstalledOtherPatches": int,
        "InstancesWithInstalledRejectedPatches": int,
        "InstancesWithMissingPatches": int,
        "InstancesWithFailedPatches": int,
        "InstancesWithNotApplicablePatches": int,
        "InstancesWithUnreportedNotApplicablePatches": int,
    },
    total=False,
)


class ClientDescribePatchGroupStateResponseTypeDef(
    _ClientDescribePatchGroupStateResponseTypeDef
):
    """
    Type definition for `ClientDescribePatchGroupState` `Response`

    - **Instances** *(integer) --*

      The number of instances in the patch group.

    - **InstancesWithInstalledPatches** *(integer) --*

      The number of instances with installed patches.

    - **InstancesWithInstalledOtherPatches** *(integer) --*

      The number of instances with patches installed that aren't defined in the patch baseline.

    - **InstancesWithInstalledRejectedPatches** *(integer) --*

      The number of instances with patches installed that are specified in a RejectedPatches list.
      Patches with a status of *INSTALLED_REJECTED* were typically installed before they were added
      to a RejectedPatches list.

      .. note::

        If ALLOW_AS_DEPENDENCY is the specified option for RejectedPatchesAction, the value of
        InstancesWithInstalledRejectedPatches will always be 0 (zero).

    - **InstancesWithMissingPatches** *(integer) --*

      The number of instances with missing patches from the patch baseline.

    - **InstancesWithFailedPatches** *(integer) --*

      The number of instances with patches from the patch baseline that failed to install.

    - **InstancesWithNotApplicablePatches** *(integer) --*

      The number of instances with patches that aren't applicable.

    - **InstancesWithUnreportedNotApplicablePatches** *(integer) --*

      The number of instances with ``NotApplicable`` patches beyond the supported limit, which are
      not reported by name to Systems Manager Inventory.
    """


_ClientDescribePatchGroupsFiltersTypeDef = TypedDict(
    "_ClientDescribePatchGroupsFiltersTypeDef",
    {"Key": str, "Values": List[str]},
    total=False,
)


class ClientDescribePatchGroupsFiltersTypeDef(_ClientDescribePatchGroupsFiltersTypeDef):
    """
    Type definition for `ClientDescribePatchGroups` `Filters`

    Defines a filter used in Patch Manager APIs.

    - **Key** *(string) --*

      The key for the filter.

    - **Values** *(list) --*

      The value for the filter.

      - *(string) --*
    """


_ClientDescribePatchGroupsResponseMappingsBaselineIdentityTypeDef = TypedDict(
    "_ClientDescribePatchGroupsResponseMappingsBaselineIdentityTypeDef",
    {
        "BaselineId": str,
        "BaselineName": str,
        "OperatingSystem": str,
        "BaselineDescription": str,
        "DefaultBaseline": bool,
    },
    total=False,
)


class ClientDescribePatchGroupsResponseMappingsBaselineIdentityTypeDef(
    _ClientDescribePatchGroupsResponseMappingsBaselineIdentityTypeDef
):
    """
    Type definition for `ClientDescribePatchGroupsResponseMappings` `BaselineIdentity`

    The patch baseline the patch group is registered with.

    - **BaselineId** *(string) --*

      The ID of the patch baseline.

    - **BaselineName** *(string) --*

      The name of the patch baseline.

    - **OperatingSystem** *(string) --*

      Defines the operating system the patch baseline applies to. The Default value is
      WINDOWS.

    - **BaselineDescription** *(string) --*

      The description of the patch baseline.

    - **DefaultBaseline** *(boolean) --*

      Whether this is the default baseline. Note that Systems Manager supports creating
      multiple default patch baselines. For example, you can create a default patch baseline
      for each operating system.
    """


_ClientDescribePatchGroupsResponseMappingsTypeDef = TypedDict(
    "_ClientDescribePatchGroupsResponseMappingsTypeDef",
    {
        "PatchGroup": str,
        "BaselineIdentity": ClientDescribePatchGroupsResponseMappingsBaselineIdentityTypeDef,
    },
    total=False,
)


class ClientDescribePatchGroupsResponseMappingsTypeDef(
    _ClientDescribePatchGroupsResponseMappingsTypeDef
):
    """
    Type definition for `ClientDescribePatchGroupsResponse` `Mappings`

    The mapping between a patch group and the patch baseline the patch group is registered with.

    - **PatchGroup** *(string) --*

      The name of the patch group registered with the patch baseline.

    - **BaselineIdentity** *(dict) --*

      The patch baseline the patch group is registered with.

      - **BaselineId** *(string) --*

        The ID of the patch baseline.

      - **BaselineName** *(string) --*

        The name of the patch baseline.

      - **OperatingSystem** *(string) --*

        Defines the operating system the patch baseline applies to. The Default value is
        WINDOWS.

      - **BaselineDescription** *(string) --*

        The description of the patch baseline.

      - **DefaultBaseline** *(boolean) --*

        Whether this is the default baseline. Note that Systems Manager supports creating
        multiple default patch baselines. For example, you can create a default patch baseline
        for each operating system.
    """


_ClientDescribePatchGroupsResponseTypeDef = TypedDict(
    "_ClientDescribePatchGroupsResponseTypeDef",
    {
        "Mappings": List[ClientDescribePatchGroupsResponseMappingsTypeDef],
        "NextToken": str,
    },
    total=False,
)


class ClientDescribePatchGroupsResponseTypeDef(
    _ClientDescribePatchGroupsResponseTypeDef
):
    """
    Type definition for `ClientDescribePatchGroups` `Response`

    - **Mappings** *(list) --*

      Each entry in the array contains:

      PatchGroup: string (between 1 and 256 characters, Regex: ^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$)

      PatchBaselineIdentity: A PatchBaselineIdentity element.

      - *(dict) --*

        The mapping between a patch group and the patch baseline the patch group is registered with.

        - **PatchGroup** *(string) --*

          The name of the patch group registered with the patch baseline.

        - **BaselineIdentity** *(dict) --*

          The patch baseline the patch group is registered with.

          - **BaselineId** *(string) --*

            The ID of the patch baseline.

          - **BaselineName** *(string) --*

            The name of the patch baseline.

          - **OperatingSystem** *(string) --*

            Defines the operating system the patch baseline applies to. The Default value is
            WINDOWS.

          - **BaselineDescription** *(string) --*

            The description of the patch baseline.

          - **DefaultBaseline** *(boolean) --*

            Whether this is the default baseline. Note that Systems Manager supports creating
            multiple default patch baselines. For example, you can create a default patch baseline
            for each operating system.

    - **NextToken** *(string) --*

      The token to use when requesting the next set of items. If there are no additional items to
      return, the string is empty.
    """


_ClientDescribePatchPropertiesResponseTypeDef = TypedDict(
    "_ClientDescribePatchPropertiesResponseTypeDef",
    {"Properties": List[Dict[str, str]], "NextToken": str},
    total=False,
)


class ClientDescribePatchPropertiesResponseTypeDef(
    _ClientDescribePatchPropertiesResponseTypeDef
):
    """
    Type definition for `ClientDescribePatchProperties` `Response`

    - **Properties** *(list) --*

      A list of the properties for patches matching the filter request parameters.

      - *(dict) --*

        - *(string) --*

          - *(string) --*

    - **NextToken** *(string) --*

      The token for the next set of items to return. (You use this token in the next call.)
    """


_ClientDescribeSessionsFiltersTypeDef = TypedDict(
    "_ClientDescribeSessionsFiltersTypeDef", {"key": str, "value": str}
)


class ClientDescribeSessionsFiltersTypeDef(_ClientDescribeSessionsFiltersTypeDef):
    """
    Type definition for `ClientDescribeSessions` `Filters`

    Describes a filter for Session Manager information.

    - **key** *(string) --* **[REQUIRED]**

      The name of the filter.

    - **value** *(string) --* **[REQUIRED]**

      The filter value. Valid values for each filter key are as follows:

      * InvokedAfter: Specify a timestamp to limit your results. For example, specify
      2018-08-29T00:00:00Z to see sessions that started August 29, 2018, and later.

      * InvokedBefore: Specify a timestamp to limit your results. For example, specify
      2018-08-29T00:00:00Z to see sessions that started before August 29, 2018.

      * Target: Specify an instance to which session connections have been made.

      * Owner: Specify an AWS user account to see a list of sessions started by that user.

      * Status: Specify a valid session status to see a list of all sessions with that status.
      Status values you can specify include:

        * Connected

        * Connecting

        * Disconnected

        * Terminated

        * Terminating

        * Failed
    """


_ClientDescribeSessionsResponseSessionsOutputUrlTypeDef = TypedDict(
    "_ClientDescribeSessionsResponseSessionsOutputUrlTypeDef",
    {"S3OutputUrl": str, "CloudWatchOutputUrl": str},
    total=False,
)


class ClientDescribeSessionsResponseSessionsOutputUrlTypeDef(
    _ClientDescribeSessionsResponseSessionsOutputUrlTypeDef
):
    """
    Type definition for `ClientDescribeSessionsResponseSessions` `OutputUrl`

    Reserved for future use.

    - **S3OutputUrl** *(string) --*

      Reserved for future use.

    - **CloudWatchOutputUrl** *(string) --*

      Reserved for future use.
    """


_ClientDescribeSessionsResponseSessionsTypeDef = TypedDict(
    "_ClientDescribeSessionsResponseSessionsTypeDef",
    {
        "SessionId": str,
        "Target": str,
        "Status": str,
        "StartDate": datetime,
        "EndDate": datetime,
        "DocumentName": str,
        "Owner": str,
        "Details": str,
        "OutputUrl": ClientDescribeSessionsResponseSessionsOutputUrlTypeDef,
    },
    total=False,
)


class ClientDescribeSessionsResponseSessionsTypeDef(
    _ClientDescribeSessionsResponseSessionsTypeDef
):
    """
    Type definition for `ClientDescribeSessionsResponse` `Sessions`

    Information about a Session Manager connection to an instance.

    - **SessionId** *(string) --*

      The ID of the session.

    - **Target** *(string) --*

      The instance that the Session Manager session connected to.

    - **Status** *(string) --*

      The status of the session. For example, "Connected" or "Terminated".

    - **StartDate** *(datetime) --*

      The date and time, in ISO-8601 Extended format, when the session began.

    - **EndDate** *(datetime) --*

      The date and time, in ISO-8601 Extended format, when the session was terminated.

    - **DocumentName** *(string) --*

      The name of the Session Manager SSM document used to define the parameters and plugin
      settings for the session. For example, ``SSM-SessionManagerRunShell`` .

    - **Owner** *(string) --*

      The ID of the AWS user account that started the session.

    - **Details** *(string) --*

      Reserved for future use.

    - **OutputUrl** *(dict) --*

      Reserved for future use.

      - **S3OutputUrl** *(string) --*

        Reserved for future use.

      - **CloudWatchOutputUrl** *(string) --*

        Reserved for future use.
    """


_ClientDescribeSessionsResponseTypeDef = TypedDict(
    "_ClientDescribeSessionsResponseTypeDef",
    {"Sessions": List[ClientDescribeSessionsResponseSessionsTypeDef], "NextToken": str},
    total=False,
)


class ClientDescribeSessionsResponseTypeDef(_ClientDescribeSessionsResponseTypeDef):
    """
    Type definition for `ClientDescribeSessions` `Response`

    - **Sessions** *(list) --*

      A list of sessions meeting the request parameters.

      - *(dict) --*

        Information about a Session Manager connection to an instance.

        - **SessionId** *(string) --*

          The ID of the session.

        - **Target** *(string) --*

          The instance that the Session Manager session connected to.

        - **Status** *(string) --*

          The status of the session. For example, "Connected" or "Terminated".

        - **StartDate** *(datetime) --*

          The date and time, in ISO-8601 Extended format, when the session began.

        - **EndDate** *(datetime) --*

          The date and time, in ISO-8601 Extended format, when the session was terminated.

        - **DocumentName** *(string) --*

          The name of the Session Manager SSM document used to define the parameters and plugin
          settings for the session. For example, ``SSM-SessionManagerRunShell`` .

        - **Owner** *(string) --*

          The ID of the AWS user account that started the session.

        - **Details** *(string) --*

          Reserved for future use.

        - **OutputUrl** *(dict) --*

          Reserved for future use.

          - **S3OutputUrl** *(string) --*

            Reserved for future use.

          - **CloudWatchOutputUrl** *(string) --*

            Reserved for future use.

    - **NextToken** *(string) --*

      The token for the next set of items to return. (You received this token from a previous call.)
    """


_ClientGetAutomationExecutionResponseAutomationExecutionProgressCountersTypeDef = TypedDict(
    "_ClientGetAutomationExecutionResponseAutomationExecutionProgressCountersTypeDef",
    {
        "TotalSteps": int,
        "SuccessSteps": int,
        "FailedSteps": int,
        "CancelledSteps": int,
        "TimedOutSteps": int,
    },
    total=False,
)


class ClientGetAutomationExecutionResponseAutomationExecutionProgressCountersTypeDef(
    _ClientGetAutomationExecutionResponseAutomationExecutionProgressCountersTypeDef
):
    """
    Type definition for `ClientGetAutomationExecutionResponseAutomationExecution` `ProgressCounters`

    An aggregate of step execution statuses displayed in the AWS Console for a multi-Region and
    multi-account Automation execution.

    - **TotalSteps** *(integer) --*

      The total number of steps run in all specified AWS Regions and accounts for the current
      Automation execution.

    - **SuccessSteps** *(integer) --*

      The total number of steps that successfully completed in all specified AWS Regions and
      accounts for the current Automation execution.

    - **FailedSteps** *(integer) --*

      The total number of steps that failed to run in all specified AWS Regions and accounts
      for the current Automation execution.

    - **CancelledSteps** *(integer) --*

      The total number of steps that the system cancelled in all specified AWS Regions and
      accounts for the current Automation execution.

    - **TimedOutSteps** *(integer) --*

      The total number of steps that timed out in all specified AWS Regions and accounts for
      the current Automation execution.
    """


_ClientGetAutomationExecutionResponseAutomationExecutionResolvedTargetsTypeDef = TypedDict(
    "_ClientGetAutomationExecutionResponseAutomationExecutionResolvedTargetsTypeDef",
    {"ParameterValues": List[str], "Truncated": bool},
    total=False,
)


class ClientGetAutomationExecutionResponseAutomationExecutionResolvedTargetsTypeDef(
    _ClientGetAutomationExecutionResponseAutomationExecutionResolvedTargetsTypeDef
):
    """
    Type definition for `ClientGetAutomationExecutionResponseAutomationExecution` `ResolvedTargets`

    A list of resolved targets in the rate control execution.

    - **ParameterValues** *(list) --*

      A list of parameter values sent to targets that resolved during the Automation execution.

      - *(string) --*

    - **Truncated** *(boolean) --*

      A boolean value indicating whether the resolved target list is truncated.
    """


_ClientGetAutomationExecutionResponseAutomationExecutionStepExecutionsFailureDetailsTypeDef = TypedDict(
    "_ClientGetAutomationExecutionResponseAutomationExecutionStepExecutionsFailureDetailsTypeDef",
    {"FailureStage": str, "FailureType": str, "Details": Dict[str, List[str]]},
    total=False,
)


class ClientGetAutomationExecutionResponseAutomationExecutionStepExecutionsFailureDetailsTypeDef(
    _ClientGetAutomationExecutionResponseAutomationExecutionStepExecutionsFailureDetailsTypeDef
):
    """
    Type definition for `ClientGetAutomationExecutionResponseAutomationExecutionStepExecutions` `FailureDetails`

    Information about the Automation failure.

    - **FailureStage** *(string) --*

      The stage of the Automation execution when the failure occurred. The stages include
      the following: InputValidation, PreVerification, Invocation, PostVerification.

    - **FailureType** *(string) --*

      The type of Automation failure. Failure types include the following: Action,
      Permission, Throttling, Verification, Internal.

    - **Details** *(dict) --*

      Detailed information about the Automation step failure.

      - *(string) --*

        - *(list) --*

          - *(string) --*
    """


_ClientGetAutomationExecutionResponseAutomationExecutionStepExecutionsTargetLocationTypeDef = TypedDict(
    "_ClientGetAutomationExecutionResponseAutomationExecutionStepExecutionsTargetLocationTypeDef",
    {
        "Accounts": List[str],
        "Regions": List[str],
        "TargetLocationMaxConcurrency": str,
        "TargetLocationMaxErrors": str,
        "ExecutionRoleName": str,
    },
    total=False,
)


class ClientGetAutomationExecutionResponseAutomationExecutionStepExecutionsTargetLocationTypeDef(
    _ClientGetAutomationExecutionResponseAutomationExecutionStepExecutionsTargetLocationTypeDef
):
    """
    Type definition for `ClientGetAutomationExecutionResponseAutomationExecutionStepExecutions` `TargetLocation`

    The combination of AWS Regions and accounts targeted by the current Automation
    execution.

    - **Accounts** *(list) --*

      The AWS accounts targeted by the current Automation execution.

      - *(string) --*

    - **Regions** *(list) --*

      The AWS Regions targeted by the current Automation execution.

      - *(string) --*

    - **TargetLocationMaxConcurrency** *(string) --*

      The maximum number of AWS accounts and AWS regions allowed to run the Automation
      concurrently

    - **TargetLocationMaxErrors** *(string) --*

      The maximum number of errors allowed before the system stops queueing additional
      Automation executions for the currently running Automation.

    - **ExecutionRoleName** *(string) --*

      The Automation execution role used by the currently running Automation.
    """


_ClientGetAutomationExecutionResponseAutomationExecutionStepExecutionsTargetsTypeDef = TypedDict(
    "_ClientGetAutomationExecutionResponseAutomationExecutionStepExecutionsTargetsTypeDef",
    {"Key": str, "Values": List[str]},
    total=False,
)


class ClientGetAutomationExecutionResponseAutomationExecutionStepExecutionsTargetsTypeDef(
    _ClientGetAutomationExecutionResponseAutomationExecutionStepExecutionsTargetsTypeDef
):
    """
    Type definition for `ClientGetAutomationExecutionResponseAutomationExecutionStepExecutions` `Targets`

    An array of search criteria that targets instances using a Key,Value combination that
    you specify.

    Supported formats include the following.

    * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

    * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

    * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

    * (Maintenance window targets only)
    ``Key=resource-groups:Name,Values=*resource-group-name* ``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2*
    ``

    For example:

    *
    ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

    * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

    * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

    * (Maintenance window targets only)
    ``Key=resource-groups:Name,Values=ProductionResourceGroup``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE*
    ,*AWS::EC2::VPC* ``

    For information about how to send commands that target instances using ``Key,Value``
    parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
    <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
    in the *AWS Systems Manager User Guide* .

    - **Key** *(string) --*

      User-defined criteria for sending commands that target instances that meet the
      criteria.

    - **Values** *(list) --*

      User-defined criteria that maps to ``Key`` . For example, if you specified
      ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
      instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

      - *(string) --*
    """


_ClientGetAutomationExecutionResponseAutomationExecutionStepExecutionsTypeDef = TypedDict(
    "_ClientGetAutomationExecutionResponseAutomationExecutionStepExecutionsTypeDef",
    {
        "StepName": str,
        "Action": str,
        "TimeoutSeconds": int,
        "OnFailure": str,
        "MaxAttempts": int,
        "ExecutionStartTime": datetime,
        "ExecutionEndTime": datetime,
        "StepStatus": str,
        "ResponseCode": str,
        "Inputs": Dict[str, str],
        "Outputs": Dict[str, List[str]],
        "Response": str,
        "FailureMessage": str,
        "FailureDetails": ClientGetAutomationExecutionResponseAutomationExecutionStepExecutionsFailureDetailsTypeDef,
        "StepExecutionId": str,
        "OverriddenParameters": Dict[str, List[str]],
        "IsEnd": bool,
        "NextStep": str,
        "IsCritical": bool,
        "ValidNextSteps": List[str],
        "Targets": List[
            ClientGetAutomationExecutionResponseAutomationExecutionStepExecutionsTargetsTypeDef
        ],
        "TargetLocation": ClientGetAutomationExecutionResponseAutomationExecutionStepExecutionsTargetLocationTypeDef,
    },
    total=False,
)


class ClientGetAutomationExecutionResponseAutomationExecutionStepExecutionsTypeDef(
    _ClientGetAutomationExecutionResponseAutomationExecutionStepExecutionsTypeDef
):
    """
    Type definition for `ClientGetAutomationExecutionResponseAutomationExecution` `StepExecutions`

    Detailed information about an the execution state of an Automation step.

    - **StepName** *(string) --*

      The name of this execution step.

    - **Action** *(string) --*

      The action this step performs. The action determines the behavior of the step.

    - **TimeoutSeconds** *(integer) --*

      The timeout seconds of the step.

    - **OnFailure** *(string) --*

      The action to take if the step fails. The default value is Abort.

    - **MaxAttempts** *(integer) --*

      The maximum number of tries to run the action of the step. The default value is 1.

    - **ExecutionStartTime** *(datetime) --*

      If a step has begun execution, this contains the time the step started. If the step is
      in Pending status, this field is not populated.

    - **ExecutionEndTime** *(datetime) --*

      If a step has finished execution, this contains the time the execution ended. If the
      step has not yet concluded, this field is not populated.

    - **StepStatus** *(string) --*

      The execution status for this step. Valid values include: Pending, InProgress, Success,
      Cancelled, Failed, and TimedOut.

    - **ResponseCode** *(string) --*

      The response code returned by the execution of the step.

    - **Inputs** *(dict) --*

      Fully-resolved values passed into the step before execution.

      - *(string) --*

        - *(string) --*

    - **Outputs** *(dict) --*

      Returned values from the execution of the step.

      - *(string) --*

        - *(list) --*

          - *(string) --*

    - **Response** *(string) --*

      A message associated with the response code for an execution.

    - **FailureMessage** *(string) --*

      If a step failed, this message explains why the execution failed.

    - **FailureDetails** *(dict) --*

      Information about the Automation failure.

      - **FailureStage** *(string) --*

        The stage of the Automation execution when the failure occurred. The stages include
        the following: InputValidation, PreVerification, Invocation, PostVerification.

      - **FailureType** *(string) --*

        The type of Automation failure. Failure types include the following: Action,
        Permission, Throttling, Verification, Internal.

      - **Details** *(dict) --*

        Detailed information about the Automation step failure.

        - *(string) --*

          - *(list) --*

            - *(string) --*

    - **StepExecutionId** *(string) --*

      The unique ID of a step execution.

    - **OverriddenParameters** *(dict) --*

      A user-specified list of parameters to override when running a step.

      - *(string) --*

        - *(list) --*

          - *(string) --*

    - **IsEnd** *(boolean) --*

      The flag which can be used to end automation no matter whether the step succeeds or
      fails.

    - **NextStep** *(string) --*

      The next step after the step succeeds.

    - **IsCritical** *(boolean) --*

      The flag which can be used to help decide whether the failure of current step leads to
      the Automation failure.

    - **ValidNextSteps** *(list) --*

      Strategies used when step fails, we support Continue and Abort. Abort will fail the
      automation when the step fails. Continue will ignore the failure of current step and
      allow automation to run the next step. With conditional branching, we add step:stepName
      to support the automation to go to another specific step.

      - *(string) --*

    - **Targets** *(list) --*

      The targets for the step execution.

      - *(dict) --*

        An array of search criteria that targets instances using a Key,Value combination that
        you specify.

        Supported formats include the following.

        * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

        * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

        * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

        * (Maintenance window targets only)
        ``Key=resource-groups:Name,Values=*resource-group-name* ``

        * (Maintenance window targets only)
        ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2*
        ``

        For example:

        *
        ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

        * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

        * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

        * (Maintenance window targets only)
        ``Key=resource-groups:Name,Values=ProductionResourceGroup``

        * (Maintenance window targets only)
        ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE*
        ,*AWS::EC2::VPC* ``

        For information about how to send commands that target instances using ``Key,Value``
        parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
        <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
        in the *AWS Systems Manager User Guide* .

        - **Key** *(string) --*

          User-defined criteria for sending commands that target instances that meet the
          criteria.

        - **Values** *(list) --*

          User-defined criteria that maps to ``Key`` . For example, if you specified
          ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
          instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

          - *(string) --*

    - **TargetLocation** *(dict) --*

      The combination of AWS Regions and accounts targeted by the current Automation
      execution.

      - **Accounts** *(list) --*

        The AWS accounts targeted by the current Automation execution.

        - *(string) --*

      - **Regions** *(list) --*

        The AWS Regions targeted by the current Automation execution.

        - *(string) --*

      - **TargetLocationMaxConcurrency** *(string) --*

        The maximum number of AWS accounts and AWS regions allowed to run the Automation
        concurrently

      - **TargetLocationMaxErrors** *(string) --*

        The maximum number of errors allowed before the system stops queueing additional
        Automation executions for the currently running Automation.

      - **ExecutionRoleName** *(string) --*

        The Automation execution role used by the currently running Automation.
    """


_ClientGetAutomationExecutionResponseAutomationExecutionTargetLocationsTypeDef = TypedDict(
    "_ClientGetAutomationExecutionResponseAutomationExecutionTargetLocationsTypeDef",
    {
        "Accounts": List[str],
        "Regions": List[str],
        "TargetLocationMaxConcurrency": str,
        "TargetLocationMaxErrors": str,
        "ExecutionRoleName": str,
    },
    total=False,
)


class ClientGetAutomationExecutionResponseAutomationExecutionTargetLocationsTypeDef(
    _ClientGetAutomationExecutionResponseAutomationExecutionTargetLocationsTypeDef
):
    """
    Type definition for `ClientGetAutomationExecutionResponseAutomationExecution` `TargetLocations`

    The combination of AWS Regions and accounts targeted by the current Automation execution.

    - **Accounts** *(list) --*

      The AWS accounts targeted by the current Automation execution.

      - *(string) --*

    - **Regions** *(list) --*

      The AWS Regions targeted by the current Automation execution.

      - *(string) --*

    - **TargetLocationMaxConcurrency** *(string) --*

      The maximum number of AWS accounts and AWS regions allowed to run the Automation
      concurrently

    - **TargetLocationMaxErrors** *(string) --*

      The maximum number of errors allowed before the system stops queueing additional
      Automation executions for the currently running Automation.

    - **ExecutionRoleName** *(string) --*

      The Automation execution role used by the currently running Automation.
    """


_ClientGetAutomationExecutionResponseAutomationExecutionTargetsTypeDef = TypedDict(
    "_ClientGetAutomationExecutionResponseAutomationExecutionTargetsTypeDef",
    {"Key": str, "Values": List[str]},
    total=False,
)


class ClientGetAutomationExecutionResponseAutomationExecutionTargetsTypeDef(
    _ClientGetAutomationExecutionResponseAutomationExecutionTargetsTypeDef
):
    """
    Type definition for `ClientGetAutomationExecutionResponseAutomationExecution` `Targets`

    An array of search criteria that targets instances using a Key,Value combination that you
    specify.

    Supported formats include the following.

    * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

    * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

    * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

    * (Maintenance window targets only)
    ``Key=resource-groups:Name,Values=*resource-group-name* ``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

    For example:

    * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

    * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

    * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

    * (Maintenance window targets only)
    ``Key=resource-groups:Name,Values=ProductionResourceGroup``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC* ``

    For information about how to send commands that target instances using ``Key,Value``
    parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
    <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
    in the *AWS Systems Manager User Guide* .

    - **Key** *(string) --*

      User-defined criteria for sending commands that target instances that meet the criteria.

    - **Values** *(list) --*

      User-defined criteria that maps to ``Key`` . For example, if you specified
      ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
      instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

      - *(string) --*
    """


_ClientGetAutomationExecutionResponseAutomationExecutionTypeDef = TypedDict(
    "_ClientGetAutomationExecutionResponseAutomationExecutionTypeDef",
    {
        "AutomationExecutionId": str,
        "DocumentName": str,
        "DocumentVersion": str,
        "ExecutionStartTime": datetime,
        "ExecutionEndTime": datetime,
        "AutomationExecutionStatus": str,
        "StepExecutions": List[
            ClientGetAutomationExecutionResponseAutomationExecutionStepExecutionsTypeDef
        ],
        "StepExecutionsTruncated": bool,
        "Parameters": Dict[str, List[str]],
        "Outputs": Dict[str, List[str]],
        "FailureMessage": str,
        "Mode": str,
        "ParentAutomationExecutionId": str,
        "ExecutedBy": str,
        "CurrentStepName": str,
        "CurrentAction": str,
        "TargetParameterName": str,
        "Targets": List[
            ClientGetAutomationExecutionResponseAutomationExecutionTargetsTypeDef
        ],
        "TargetMaps": List[Dict[str, List[str]]],
        "ResolvedTargets": ClientGetAutomationExecutionResponseAutomationExecutionResolvedTargetsTypeDef,
        "MaxConcurrency": str,
        "MaxErrors": str,
        "Target": str,
        "TargetLocations": List[
            ClientGetAutomationExecutionResponseAutomationExecutionTargetLocationsTypeDef
        ],
        "ProgressCounters": ClientGetAutomationExecutionResponseAutomationExecutionProgressCountersTypeDef,
    },
    total=False,
)


class ClientGetAutomationExecutionResponseAutomationExecutionTypeDef(
    _ClientGetAutomationExecutionResponseAutomationExecutionTypeDef
):
    """
    Type definition for `ClientGetAutomationExecutionResponse` `AutomationExecution`

    Detailed information about the current state of an automation execution.

    - **AutomationExecutionId** *(string) --*

      The execution ID.

    - **DocumentName** *(string) --*

      The name of the Automation document used during the execution.

    - **DocumentVersion** *(string) --*

      The version of the document to use during execution.

    - **ExecutionStartTime** *(datetime) --*

      The time the execution started.

    - **ExecutionEndTime** *(datetime) --*

      The time the execution finished.

    - **AutomationExecutionStatus** *(string) --*

      The execution status of the Automation.

    - **StepExecutions** *(list) --*

      A list of details about the current state of all steps that comprise an execution. An
      Automation document contains a list of steps that are run in order.

      - *(dict) --*

        Detailed information about an the execution state of an Automation step.

        - **StepName** *(string) --*

          The name of this execution step.

        - **Action** *(string) --*

          The action this step performs. The action determines the behavior of the step.

        - **TimeoutSeconds** *(integer) --*

          The timeout seconds of the step.

        - **OnFailure** *(string) --*

          The action to take if the step fails. The default value is Abort.

        - **MaxAttempts** *(integer) --*

          The maximum number of tries to run the action of the step. The default value is 1.

        - **ExecutionStartTime** *(datetime) --*

          If a step has begun execution, this contains the time the step started. If the step is
          in Pending status, this field is not populated.

        - **ExecutionEndTime** *(datetime) --*

          If a step has finished execution, this contains the time the execution ended. If the
          step has not yet concluded, this field is not populated.

        - **StepStatus** *(string) --*

          The execution status for this step. Valid values include: Pending, InProgress, Success,
          Cancelled, Failed, and TimedOut.

        - **ResponseCode** *(string) --*

          The response code returned by the execution of the step.

        - **Inputs** *(dict) --*

          Fully-resolved values passed into the step before execution.

          - *(string) --*

            - *(string) --*

        - **Outputs** *(dict) --*

          Returned values from the execution of the step.

          - *(string) --*

            - *(list) --*

              - *(string) --*

        - **Response** *(string) --*

          A message associated with the response code for an execution.

        - **FailureMessage** *(string) --*

          If a step failed, this message explains why the execution failed.

        - **FailureDetails** *(dict) --*

          Information about the Automation failure.

          - **FailureStage** *(string) --*

            The stage of the Automation execution when the failure occurred. The stages include
            the following: InputValidation, PreVerification, Invocation, PostVerification.

          - **FailureType** *(string) --*

            The type of Automation failure. Failure types include the following: Action,
            Permission, Throttling, Verification, Internal.

          - **Details** *(dict) --*

            Detailed information about the Automation step failure.

            - *(string) --*

              - *(list) --*

                - *(string) --*

        - **StepExecutionId** *(string) --*

          The unique ID of a step execution.

        - **OverriddenParameters** *(dict) --*

          A user-specified list of parameters to override when running a step.

          - *(string) --*

            - *(list) --*

              - *(string) --*

        - **IsEnd** *(boolean) --*

          The flag which can be used to end automation no matter whether the step succeeds or
          fails.

        - **NextStep** *(string) --*

          The next step after the step succeeds.

        - **IsCritical** *(boolean) --*

          The flag which can be used to help decide whether the failure of current step leads to
          the Automation failure.

        - **ValidNextSteps** *(list) --*

          Strategies used when step fails, we support Continue and Abort. Abort will fail the
          automation when the step fails. Continue will ignore the failure of current step and
          allow automation to run the next step. With conditional branching, we add step:stepName
          to support the automation to go to another specific step.

          - *(string) --*

        - **Targets** *(list) --*

          The targets for the step execution.

          - *(dict) --*

            An array of search criteria that targets instances using a Key,Value combination that
            you specify.

            Supported formats include the following.

            * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

            * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

            * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

            * (Maintenance window targets only)
            ``Key=resource-groups:Name,Values=*resource-group-name* ``

            * (Maintenance window targets only)
            ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2*
            ``

            For example:

            *
            ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

            * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

            * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

            * (Maintenance window targets only)
            ``Key=resource-groups:Name,Values=ProductionResourceGroup``

            * (Maintenance window targets only)
            ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE*
            ,*AWS::EC2::VPC* ``

            For information about how to send commands that target instances using ``Key,Value``
            parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
            <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
            in the *AWS Systems Manager User Guide* .

            - **Key** *(string) --*

              User-defined criteria for sending commands that target instances that meet the
              criteria.

            - **Values** *(list) --*

              User-defined criteria that maps to ``Key`` . For example, if you specified
              ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
              instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

              - *(string) --*

        - **TargetLocation** *(dict) --*

          The combination of AWS Regions and accounts targeted by the current Automation
          execution.

          - **Accounts** *(list) --*

            The AWS accounts targeted by the current Automation execution.

            - *(string) --*

          - **Regions** *(list) --*

            The AWS Regions targeted by the current Automation execution.

            - *(string) --*

          - **TargetLocationMaxConcurrency** *(string) --*

            The maximum number of AWS accounts and AWS regions allowed to run the Automation
            concurrently

          - **TargetLocationMaxErrors** *(string) --*

            The maximum number of errors allowed before the system stops queueing additional
            Automation executions for the currently running Automation.

          - **ExecutionRoleName** *(string) --*

            The Automation execution role used by the currently running Automation.

    - **StepExecutionsTruncated** *(boolean) --*

      A boolean value that indicates if the response contains the full list of the Automation
      step executions. If true, use the DescribeAutomationStepExecutions API action to get the
      full list of step executions.

    - **Parameters** *(dict) --*

      The key-value map of execution parameters, which were supplied when calling
      StartAutomationExecution.

      - *(string) --*

        - *(list) --*

          - *(string) --*

    - **Outputs** *(dict) --*

      The list of execution outputs as defined in the automation document.

      - *(string) --*

        - *(list) --*

          - *(string) --*

    - **FailureMessage** *(string) --*

      A message describing why an execution has failed, if the status is set to Failed.

    - **Mode** *(string) --*

      The automation execution mode.

    - **ParentAutomationExecutionId** *(string) --*

      The AutomationExecutionId of the parent automation.

    - **ExecutedBy** *(string) --*

      The Amazon Resource Name (ARN) of the user who ran the automation.

    - **CurrentStepName** *(string) --*

      The name of the step that is currently running.

    - **CurrentAction** *(string) --*

      The action of the step that is currently running.

    - **TargetParameterName** *(string) --*

      The parameter name.

    - **Targets** *(list) --*

      The specified targets.

      - *(dict) --*

        An array of search criteria that targets instances using a Key,Value combination that you
        specify.

        Supported formats include the following.

        * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

        * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

        * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

        * (Maintenance window targets only)
        ``Key=resource-groups:Name,Values=*resource-group-name* ``

        * (Maintenance window targets only)
        ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

        For example:

        * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

        * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

        * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

        * (Maintenance window targets only)
        ``Key=resource-groups:Name,Values=ProductionResourceGroup``

        * (Maintenance window targets only)
        ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC* ``

        For information about how to send commands that target instances using ``Key,Value``
        parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
        <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
        in the *AWS Systems Manager User Guide* .

        - **Key** *(string) --*

          User-defined criteria for sending commands that target instances that meet the criteria.

        - **Values** *(list) --*

          User-defined criteria that maps to ``Key`` . For example, if you specified
          ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
          instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

          - *(string) --*

    - **TargetMaps** *(list) --*

      The specified key-value mapping of document parameters to target resources.

      - *(dict) --*

        - *(string) --*

          - *(list) --*

            - *(string) --*

    - **ResolvedTargets** *(dict) --*

      A list of resolved targets in the rate control execution.

      - **ParameterValues** *(list) --*

        A list of parameter values sent to targets that resolved during the Automation execution.

        - *(string) --*

      - **Truncated** *(boolean) --*

        A boolean value indicating whether the resolved target list is truncated.

    - **MaxConcurrency** *(string) --*

      The MaxConcurrency value specified by the user when the execution started.

    - **MaxErrors** *(string) --*

      The MaxErrors value specified by the user when the execution started.

    - **Target** *(string) --*

      The target of the execution.

    - **TargetLocations** *(list) --*

      The combination of AWS Regions and/or AWS accounts where you want to run the Automation.

      - *(dict) --*

        The combination of AWS Regions and accounts targeted by the current Automation execution.

        - **Accounts** *(list) --*

          The AWS accounts targeted by the current Automation execution.

          - *(string) --*

        - **Regions** *(list) --*

          The AWS Regions targeted by the current Automation execution.

          - *(string) --*

        - **TargetLocationMaxConcurrency** *(string) --*

          The maximum number of AWS accounts and AWS regions allowed to run the Automation
          concurrently

        - **TargetLocationMaxErrors** *(string) --*

          The maximum number of errors allowed before the system stops queueing additional
          Automation executions for the currently running Automation.

        - **ExecutionRoleName** *(string) --*

          The Automation execution role used by the currently running Automation.

    - **ProgressCounters** *(dict) --*

      An aggregate of step execution statuses displayed in the AWS Console for a multi-Region and
      multi-account Automation execution.

      - **TotalSteps** *(integer) --*

        The total number of steps run in all specified AWS Regions and accounts for the current
        Automation execution.

      - **SuccessSteps** *(integer) --*

        The total number of steps that successfully completed in all specified AWS Regions and
        accounts for the current Automation execution.

      - **FailedSteps** *(integer) --*

        The total number of steps that failed to run in all specified AWS Regions and accounts
        for the current Automation execution.

      - **CancelledSteps** *(integer) --*

        The total number of steps that the system cancelled in all specified AWS Regions and
        accounts for the current Automation execution.

      - **TimedOutSteps** *(integer) --*

        The total number of steps that timed out in all specified AWS Regions and accounts for
        the current Automation execution.
    """


_ClientGetAutomationExecutionResponseTypeDef = TypedDict(
    "_ClientGetAutomationExecutionResponseTypeDef",
    {
        "AutomationExecution": ClientGetAutomationExecutionResponseAutomationExecutionTypeDef
    },
    total=False,
)


class ClientGetAutomationExecutionResponseTypeDef(
    _ClientGetAutomationExecutionResponseTypeDef
):
    """
    Type definition for `ClientGetAutomationExecution` `Response`

    - **AutomationExecution** *(dict) --*

      Detailed information about the current state of an automation execution.

      - **AutomationExecutionId** *(string) --*

        The execution ID.

      - **DocumentName** *(string) --*

        The name of the Automation document used during the execution.

      - **DocumentVersion** *(string) --*

        The version of the document to use during execution.

      - **ExecutionStartTime** *(datetime) --*

        The time the execution started.

      - **ExecutionEndTime** *(datetime) --*

        The time the execution finished.

      - **AutomationExecutionStatus** *(string) --*

        The execution status of the Automation.

      - **StepExecutions** *(list) --*

        A list of details about the current state of all steps that comprise an execution. An
        Automation document contains a list of steps that are run in order.

        - *(dict) --*

          Detailed information about an the execution state of an Automation step.

          - **StepName** *(string) --*

            The name of this execution step.

          - **Action** *(string) --*

            The action this step performs. The action determines the behavior of the step.

          - **TimeoutSeconds** *(integer) --*

            The timeout seconds of the step.

          - **OnFailure** *(string) --*

            The action to take if the step fails. The default value is Abort.

          - **MaxAttempts** *(integer) --*

            The maximum number of tries to run the action of the step. The default value is 1.

          - **ExecutionStartTime** *(datetime) --*

            If a step has begun execution, this contains the time the step started. If the step is
            in Pending status, this field is not populated.

          - **ExecutionEndTime** *(datetime) --*

            If a step has finished execution, this contains the time the execution ended. If the
            step has not yet concluded, this field is not populated.

          - **StepStatus** *(string) --*

            The execution status for this step. Valid values include: Pending, InProgress, Success,
            Cancelled, Failed, and TimedOut.

          - **ResponseCode** *(string) --*

            The response code returned by the execution of the step.

          - **Inputs** *(dict) --*

            Fully-resolved values passed into the step before execution.

            - *(string) --*

              - *(string) --*

          - **Outputs** *(dict) --*

            Returned values from the execution of the step.

            - *(string) --*

              - *(list) --*

                - *(string) --*

          - **Response** *(string) --*

            A message associated with the response code for an execution.

          - **FailureMessage** *(string) --*

            If a step failed, this message explains why the execution failed.

          - **FailureDetails** *(dict) --*

            Information about the Automation failure.

            - **FailureStage** *(string) --*

              The stage of the Automation execution when the failure occurred. The stages include
              the following: InputValidation, PreVerification, Invocation, PostVerification.

            - **FailureType** *(string) --*

              The type of Automation failure. Failure types include the following: Action,
              Permission, Throttling, Verification, Internal.

            - **Details** *(dict) --*

              Detailed information about the Automation step failure.

              - *(string) --*

                - *(list) --*

                  - *(string) --*

          - **StepExecutionId** *(string) --*

            The unique ID of a step execution.

          - **OverriddenParameters** *(dict) --*

            A user-specified list of parameters to override when running a step.

            - *(string) --*

              - *(list) --*

                - *(string) --*

          - **IsEnd** *(boolean) --*

            The flag which can be used to end automation no matter whether the step succeeds or
            fails.

          - **NextStep** *(string) --*

            The next step after the step succeeds.

          - **IsCritical** *(boolean) --*

            The flag which can be used to help decide whether the failure of current step leads to
            the Automation failure.

          - **ValidNextSteps** *(list) --*

            Strategies used when step fails, we support Continue and Abort. Abort will fail the
            automation when the step fails. Continue will ignore the failure of current step and
            allow automation to run the next step. With conditional branching, we add step:stepName
            to support the automation to go to another specific step.

            - *(string) --*

          - **Targets** *(list) --*

            The targets for the step execution.

            - *(dict) --*

              An array of search criteria that targets instances using a Key,Value combination that
              you specify.

              Supported formats include the following.

              * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

              * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

              * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

              * (Maintenance window targets only)
              ``Key=resource-groups:Name,Values=*resource-group-name* ``

              * (Maintenance window targets only)
              ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2*
              ``

              For example:

              *
              ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

              * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

              * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

              * (Maintenance window targets only)
              ``Key=resource-groups:Name,Values=ProductionResourceGroup``

              * (Maintenance window targets only)
              ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE*
              ,*AWS::EC2::VPC* ``

              For information about how to send commands that target instances using ``Key,Value``
              parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
              <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
              in the *AWS Systems Manager User Guide* .

              - **Key** *(string) --*

                User-defined criteria for sending commands that target instances that meet the
                criteria.

              - **Values** *(list) --*

                User-defined criteria that maps to ``Key`` . For example, if you specified
                ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
                instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

                - *(string) --*

          - **TargetLocation** *(dict) --*

            The combination of AWS Regions and accounts targeted by the current Automation
            execution.

            - **Accounts** *(list) --*

              The AWS accounts targeted by the current Automation execution.

              - *(string) --*

            - **Regions** *(list) --*

              The AWS Regions targeted by the current Automation execution.

              - *(string) --*

            - **TargetLocationMaxConcurrency** *(string) --*

              The maximum number of AWS accounts and AWS regions allowed to run the Automation
              concurrently

            - **TargetLocationMaxErrors** *(string) --*

              The maximum number of errors allowed before the system stops queueing additional
              Automation executions for the currently running Automation.

            - **ExecutionRoleName** *(string) --*

              The Automation execution role used by the currently running Automation.

      - **StepExecutionsTruncated** *(boolean) --*

        A boolean value that indicates if the response contains the full list of the Automation
        step executions. If true, use the DescribeAutomationStepExecutions API action to get the
        full list of step executions.

      - **Parameters** *(dict) --*

        The key-value map of execution parameters, which were supplied when calling
        StartAutomationExecution.

        - *(string) --*

          - *(list) --*

            - *(string) --*

      - **Outputs** *(dict) --*

        The list of execution outputs as defined in the automation document.

        - *(string) --*

          - *(list) --*

            - *(string) --*

      - **FailureMessage** *(string) --*

        A message describing why an execution has failed, if the status is set to Failed.

      - **Mode** *(string) --*

        The automation execution mode.

      - **ParentAutomationExecutionId** *(string) --*

        The AutomationExecutionId of the parent automation.

      - **ExecutedBy** *(string) --*

        The Amazon Resource Name (ARN) of the user who ran the automation.

      - **CurrentStepName** *(string) --*

        The name of the step that is currently running.

      - **CurrentAction** *(string) --*

        The action of the step that is currently running.

      - **TargetParameterName** *(string) --*

        The parameter name.

      - **Targets** *(list) --*

        The specified targets.

        - *(dict) --*

          An array of search criteria that targets instances using a Key,Value combination that you
          specify.

          Supported formats include the following.

          * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

          * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

          * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

          * (Maintenance window targets only)
          ``Key=resource-groups:Name,Values=*resource-group-name* ``

          * (Maintenance window targets only)
          ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

          For example:

          * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

          * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

          * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

          * (Maintenance window targets only)
          ``Key=resource-groups:Name,Values=ProductionResourceGroup``

          * (Maintenance window targets only)
          ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC* ``

          For information about how to send commands that target instances using ``Key,Value``
          parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
          <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
          in the *AWS Systems Manager User Guide* .

          - **Key** *(string) --*

            User-defined criteria for sending commands that target instances that meet the criteria.

          - **Values** *(list) --*

            User-defined criteria that maps to ``Key`` . For example, if you specified
            ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
            instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

            - *(string) --*

      - **TargetMaps** *(list) --*

        The specified key-value mapping of document parameters to target resources.

        - *(dict) --*

          - *(string) --*

            - *(list) --*

              - *(string) --*

      - **ResolvedTargets** *(dict) --*

        A list of resolved targets in the rate control execution.

        - **ParameterValues** *(list) --*

          A list of parameter values sent to targets that resolved during the Automation execution.

          - *(string) --*

        - **Truncated** *(boolean) --*

          A boolean value indicating whether the resolved target list is truncated.

      - **MaxConcurrency** *(string) --*

        The MaxConcurrency value specified by the user when the execution started.

      - **MaxErrors** *(string) --*

        The MaxErrors value specified by the user when the execution started.

      - **Target** *(string) --*

        The target of the execution.

      - **TargetLocations** *(list) --*

        The combination of AWS Regions and/or AWS accounts where you want to run the Automation.

        - *(dict) --*

          The combination of AWS Regions and accounts targeted by the current Automation execution.

          - **Accounts** *(list) --*

            The AWS accounts targeted by the current Automation execution.

            - *(string) --*

          - **Regions** *(list) --*

            The AWS Regions targeted by the current Automation execution.

            - *(string) --*

          - **TargetLocationMaxConcurrency** *(string) --*

            The maximum number of AWS accounts and AWS regions allowed to run the Automation
            concurrently

          - **TargetLocationMaxErrors** *(string) --*

            The maximum number of errors allowed before the system stops queueing additional
            Automation executions for the currently running Automation.

          - **ExecutionRoleName** *(string) --*

            The Automation execution role used by the currently running Automation.

      - **ProgressCounters** *(dict) --*

        An aggregate of step execution statuses displayed in the AWS Console for a multi-Region and
        multi-account Automation execution.

        - **TotalSteps** *(integer) --*

          The total number of steps run in all specified AWS Regions and accounts for the current
          Automation execution.

        - **SuccessSteps** *(integer) --*

          The total number of steps that successfully completed in all specified AWS Regions and
          accounts for the current Automation execution.

        - **FailedSteps** *(integer) --*

          The total number of steps that failed to run in all specified AWS Regions and accounts
          for the current Automation execution.

        - **CancelledSteps** *(integer) --*

          The total number of steps that the system cancelled in all specified AWS Regions and
          accounts for the current Automation execution.

        - **TimedOutSteps** *(integer) --*

          The total number of steps that timed out in all specified AWS Regions and accounts for
          the current Automation execution.
    """


_ClientGetCommandInvocationResponseCloudWatchOutputConfigTypeDef = TypedDict(
    "_ClientGetCommandInvocationResponseCloudWatchOutputConfigTypeDef",
    {"CloudWatchLogGroupName": str, "CloudWatchOutputEnabled": bool},
    total=False,
)


class ClientGetCommandInvocationResponseCloudWatchOutputConfigTypeDef(
    _ClientGetCommandInvocationResponseCloudWatchOutputConfigTypeDef
):
    """
    Type definition for `ClientGetCommandInvocationResponse` `CloudWatchOutputConfig`

    CloudWatch Logs information where Systems Manager sent the command output.

    - **CloudWatchLogGroupName** *(string) --*

      The name of the CloudWatch log group where you want to send command output. If you don't
      specify a group name, Systems Manager automatically creates a log group for you. The log
      group uses the following naming format: aws/ssm/*SystemsManagerDocumentName* .

    - **CloudWatchOutputEnabled** *(boolean) --*

      Enables Systems Manager to send command output to CloudWatch Logs.
    """


_ClientGetCommandInvocationResponseTypeDef = TypedDict(
    "_ClientGetCommandInvocationResponseTypeDef",
    {
        "CommandId": str,
        "InstanceId": str,
        "Comment": str,
        "DocumentName": str,
        "DocumentVersion": str,
        "PluginName": str,
        "ResponseCode": int,
        "ExecutionStartDateTime": str,
        "ExecutionElapsedTime": str,
        "ExecutionEndDateTime": str,
        "Status": str,
        "StatusDetails": str,
        "StandardOutputContent": str,
        "StandardOutputUrl": str,
        "StandardErrorContent": str,
        "StandardErrorUrl": str,
        "CloudWatchOutputConfig": ClientGetCommandInvocationResponseCloudWatchOutputConfigTypeDef,
    },
    total=False,
)


class ClientGetCommandInvocationResponseTypeDef(
    _ClientGetCommandInvocationResponseTypeDef
):
    """
    Type definition for `ClientGetCommandInvocation` `Response`

    - **CommandId** *(string) --*

      The parent command ID of the invocation plugin.

    - **InstanceId** *(string) --*

      The ID of the managed instance targeted by the command. A managed instance can be an Amazon
      EC2 instance or an instance in your hybrid environment that is configured for Systems Manager.

    - **Comment** *(string) --*

      The comment text for the command.

    - **DocumentName** *(string) --*

      The name of the document that was run. For example, AWS-RunShellScript.

    - **DocumentVersion** *(string) --*

      The SSM document version used in the request.

    - **PluginName** *(string) --*

      The name of the plugin for which you want detailed results. For example, aws:RunShellScript
      is a plugin.

    - **ResponseCode** *(integer) --*

      The error level response code for the plugin script. If the response code is -1, then the
      command has not started running on the instance, or it was not received by the instance.

    - **ExecutionStartDateTime** *(string) --*

      The date and time the plugin started running. Date and time are written in ISO 8601 format.
      For example, June 7, 2017 is represented as 2017-06-7. The following sample AWS CLI command
      uses the ``InvokedBefore`` filter.

       ``aws ssm list-commands --filters key=InvokedBefore,value=2017-06-07T00:00:00Z``

      If the plugin has not started to run, the string is empty.

    - **ExecutionElapsedTime** *(string) --*

      Duration since ExecutionStartDateTime.

    - **ExecutionEndDateTime** *(string) --*

      The date and time the plugin was finished running. Date and time are written in ISO 8601
      format. For example, June 7, 2017 is represented as 2017-06-7. The following sample AWS CLI
      command uses the ``InvokedAfter`` filter.

       ``aws ssm list-commands --filters key=InvokedAfter,value=2017-06-07T00:00:00Z``

      If the plugin has not started to run, the string is empty.

    - **Status** *(string) --*

      The status of this invocation plugin. This status can be different than StatusDetails.

    - **StatusDetails** *(string) --*

      A detailed status of the command execution for an invocation. StatusDetails includes more
      information than Status because it includes states resulting from error and concurrency
      control parameters. StatusDetails can show different results than Status. For more
      information about these statuses, see `Understanding Command Statuses
      <http://docs.aws.amazon.com/systems-manager/latest/userguide/monitor-commands.html>`__ in the
      *AWS Systems Manager User Guide* . StatusDetails can be one of the following values:

      * Pending: The command has not been sent to the instance.

      * In Progress: The command has been sent to the instance but has not reached a terminal state.

      * Delayed: The system attempted to send the command to the target, but the target was not
      available. The instance might not be available because of network issues, the instance was
      stopped, etc. The system will try to deliver the command again.

      * Success: The command or plugin was run successfully. This is a terminal state.

      * Delivery Timed Out: The command was not delivered to the instance before the delivery
      timeout expired. Delivery timeouts do not count against the parent command's MaxErrors limit,
      but they do contribute to whether the parent command status is Success or Incomplete. This is
      a terminal state.

      * Execution Timed Out: The command started to run on the instance, but the execution was not
      complete before the timeout expired. Execution timeouts count against the MaxErrors limit of
      the parent command. This is a terminal state.

      * Failed: The command wasn't run successfully on the instance. For a plugin, this indicates
      that the result code was not zero. For a command invocation, this indicates that the result
      code for one or more plugins was not zero. Invocation failures count against the MaxErrors
      limit of the parent command. This is a terminal state.

      * Canceled: The command was terminated before it was completed. This is a terminal state.

      * Undeliverable: The command can't be delivered to the instance. The instance might not exist
      or might not be responding. Undeliverable invocations don't count against the parent
      command's MaxErrors limit and don't contribute to whether the parent command status is
      Success or Incomplete. This is a terminal state.

      * Terminated: The parent command exceeded its MaxErrors limit and subsequent command
      invocations were canceled by the system. This is a terminal state.

    - **StandardOutputContent** *(string) --*

      The first 24,000 characters written by the plugin to stdout. If the command has not finished
      running, if ExecutionStatus is neither Succeeded nor Failed, then this string is empty.

    - **StandardOutputUrl** *(string) --*

      The URL for the complete text written by the plugin to stdout in Amazon S3. If an Amazon S3
      bucket was not specified, then this string is empty.

    - **StandardErrorContent** *(string) --*

      The first 8,000 characters written by the plugin to stderr. If the command has not finished
      running, then this string is empty.

    - **StandardErrorUrl** *(string) --*

      The URL for the complete text written by the plugin to stderr. If the command has not
      finished running, then this string is empty.

    - **CloudWatchOutputConfig** *(dict) --*

      CloudWatch Logs information where Systems Manager sent the command output.

      - **CloudWatchLogGroupName** *(string) --*

        The name of the CloudWatch log group where you want to send command output. If you don't
        specify a group name, Systems Manager automatically creates a log group for you. The log
        group uses the following naming format: aws/ssm/*SystemsManagerDocumentName* .

      - **CloudWatchOutputEnabled** *(boolean) --*

        Enables Systems Manager to send command output to CloudWatch Logs.
    """


_ClientGetConnectionStatusResponseTypeDef = TypedDict(
    "_ClientGetConnectionStatusResponseTypeDef",
    {"Target": str, "Status": str},
    total=False,
)


class ClientGetConnectionStatusResponseTypeDef(
    _ClientGetConnectionStatusResponseTypeDef
):
    """
    Type definition for `ClientGetConnectionStatus` `Response`

    - **Target** *(string) --*

      The ID of the instance to check connection status.

    - **Status** *(string) --*

      The status of the connection to the instance. For example, 'Connected' or 'Not Connected'.
    """


_ClientGetDefaultPatchBaselineResponseTypeDef = TypedDict(
    "_ClientGetDefaultPatchBaselineResponseTypeDef",
    {"BaselineId": str, "OperatingSystem": str},
    total=False,
)


class ClientGetDefaultPatchBaselineResponseTypeDef(
    _ClientGetDefaultPatchBaselineResponseTypeDef
):
    """
    Type definition for `ClientGetDefaultPatchBaseline` `Response`

    - **BaselineId** *(string) --*

      The ID of the default patch baseline.

    - **OperatingSystem** *(string) --*

      The operating system for the returned patch baseline.
    """


_ClientGetDeployablePatchSnapshotForInstanceResponseTypeDef = TypedDict(
    "_ClientGetDeployablePatchSnapshotForInstanceResponseTypeDef",
    {"InstanceId": str, "SnapshotId": str, "SnapshotDownloadUrl": str, "Product": str},
    total=False,
)


class ClientGetDeployablePatchSnapshotForInstanceResponseTypeDef(
    _ClientGetDeployablePatchSnapshotForInstanceResponseTypeDef
):
    """
    Type definition for `ClientGetDeployablePatchSnapshotForInstance` `Response`

    - **InstanceId** *(string) --*

      The ID of the instance.

    - **SnapshotId** *(string) --*

      The user-defined snapshot ID.

    - **SnapshotDownloadUrl** *(string) --*

      A pre-signed Amazon S3 URL that can be used to download the patch snapshot.

    - **Product** *(string) --*

      Returns the specific operating system (for example Windows Server 2012 or Amazon Linux
      2015.09) on the instance for the specified patch snapshot.
    """


_ClientGetDocumentResponseAttachmentsContentTypeDef = TypedDict(
    "_ClientGetDocumentResponseAttachmentsContentTypeDef",
    {"Name": str, "Size": int, "Hash": str, "HashType": str, "Url": str},
    total=False,
)


class ClientGetDocumentResponseAttachmentsContentTypeDef(
    _ClientGetDocumentResponseAttachmentsContentTypeDef
):
    """
    Type definition for `ClientGetDocumentResponse` `AttachmentsContent`

    A structure that includes attributes that describe a document attachment.

    - **Name** *(string) --*

      The name of an attachment.

    - **Size** *(integer) --*

      The size of an attachment in bytes.

    - **Hash** *(string) --*

      The cryptographic hash value of the document content.

    - **HashType** *(string) --*

      The hash algorithm used to calculate the hash value.

    - **Url** *(string) --*

      The URL location of the attachment content.
    """


_ClientGetDocumentResponseTypeDef = TypedDict(
    "_ClientGetDocumentResponseTypeDef",
    {
        "Name": str,
        "VersionName": str,
        "DocumentVersion": str,
        "Status": str,
        "StatusInformation": str,
        "Content": str,
        "DocumentType": str,
        "DocumentFormat": str,
        "AttachmentsContent": List[ClientGetDocumentResponseAttachmentsContentTypeDef],
    },
    total=False,
)


class ClientGetDocumentResponseTypeDef(_ClientGetDocumentResponseTypeDef):
    """
    Type definition for `ClientGetDocument` `Response`

    - **Name** *(string) --*

      The name of the Systems Manager document.

    - **VersionName** *(string) --*

      The version of the artifact associated with the document. For example, "Release 12, Update
      6". This value is unique across all versions of a document, and cannot be changed.

    - **DocumentVersion** *(string) --*

      The document version.

    - **Status** *(string) --*

      The status of the Systems Manager document, such as ``Creating`` , ``Active`` , ``Updating``
      , ``Failed`` , and ``Deleting`` .

    - **StatusInformation** *(string) --*

      A message returned by AWS Systems Manager that explains the ``Status`` value. For example, a
      ``Failed`` status might be explained by the ``StatusInformation`` message, "The specified S3
      bucket does not exist. Verify that the URL of the S3 bucket is correct."

    - **Content** *(string) --*

      The contents of the Systems Manager document.

    - **DocumentType** *(string) --*

      The document type.

    - **DocumentFormat** *(string) --*

      The document format, either JSON or YAML.

    - **AttachmentsContent** *(list) --*

      A description of the document attachments, including names, locations, sizes, etc.

      - *(dict) --*

        A structure that includes attributes that describe a document attachment.

        - **Name** *(string) --*

          The name of an attachment.

        - **Size** *(integer) --*

          The size of an attachment in bytes.

        - **Hash** *(string) --*

          The cryptographic hash value of the document content.

        - **HashType** *(string) --*

          The hash algorithm used to calculate the hash value.

        - **Url** *(string) --*

          The URL location of the attachment content.
    """


_RequiredClientGetInventoryAggregatorsGroupsFiltersTypeDef = TypedDict(
    "_RequiredClientGetInventoryAggregatorsGroupsFiltersTypeDef",
    {"Key": str, "Values": List[str]},
)
_OptionalClientGetInventoryAggregatorsGroupsFiltersTypeDef = TypedDict(
    "_OptionalClientGetInventoryAggregatorsGroupsFiltersTypeDef",
    {"Type": str},
    total=False,
)


class ClientGetInventoryAggregatorsGroupsFiltersTypeDef(
    _RequiredClientGetInventoryAggregatorsGroupsFiltersTypeDef,
    _OptionalClientGetInventoryAggregatorsGroupsFiltersTypeDef,
):
    """
    Type definition for `ClientGetInventoryAggregatorsGroups` `Filters`

    One or more filters. Use a filter to return a more specific list of results.

    - **Key** *(string) --* **[REQUIRED]**

      The name of the filter key.

    - **Values** *(list) --* **[REQUIRED]**

      Inventory filter values. Example: inventory filter where instance IDs are specified
      as values Key=AWS:InstanceInformation.InstanceId,Values= i-a12b3c4d5e6g,
      i-1a2b3c4d5e6,Type=Equal

      - *(string) --*

    - **Type** *(string) --*

      The type of filter. Valid values include the following:
      "Equal"|"NotEqual"|"BeginWith"|"LessThan"|"GreaterThan"
    """


_ClientGetInventoryAggregatorsGroupsTypeDef = TypedDict(
    "_ClientGetInventoryAggregatorsGroupsTypeDef",
    {"Name": str, "Filters": List[ClientGetInventoryAggregatorsGroupsFiltersTypeDef]},
)


class ClientGetInventoryAggregatorsGroupsTypeDef(
    _ClientGetInventoryAggregatorsGroupsTypeDef
):
    """
    Type definition for `ClientGetInventoryAggregators` `Groups`

    A user-defined set of one or more filters on which to aggregate inventory data. Groups
    return a count of resources that match and don't match the specified criteria.

    - **Name** *(string) --* **[REQUIRED]**

      The name of the group.

    - **Filters** *(list) --* **[REQUIRED]**

      Filters define the criteria for the group. The ``matchingCount`` field displays the
      number of resources that match the criteria. The ``notMatchingCount`` field displays the
      number of resources that don't match the criteria.

      - *(dict) --*

        One or more filters. Use a filter to return a more specific list of results.

        - **Key** *(string) --* **[REQUIRED]**

          The name of the filter key.

        - **Values** *(list) --* **[REQUIRED]**

          Inventory filter values. Example: inventory filter where instance IDs are specified
          as values Key=AWS:InstanceInformation.InstanceId,Values= i-a12b3c4d5e6g,
          i-1a2b3c4d5e6,Type=Equal

          - *(string) --*

        - **Type** *(string) --*

          The type of filter. Valid values include the following:
          "Equal"|"NotEqual"|"BeginWith"|"LessThan"|"GreaterThan"
    """


_ClientGetInventoryAggregatorsTypeDef = TypedDict(
    "_ClientGetInventoryAggregatorsTypeDef",
    {
        "Expression": str,
        "Aggregators": List[Any],
        "Groups": List[ClientGetInventoryAggregatorsGroupsTypeDef],
    },
    total=False,
)


class ClientGetInventoryAggregatorsTypeDef(_ClientGetInventoryAggregatorsTypeDef):
    """
    Type definition for `ClientGetInventory` `Aggregators`

    Specifies the inventory type and attribute for the aggregation execution.

    - **Expression** *(string) --*

      The inventory type and attribute name for aggregation.

    - **Aggregators** *(list) --*

      Nested aggregators to further refine aggregation for an inventory type.

    - **Groups** *(list) --*

      A user-defined set of one or more filters on which to aggregate inventory data. Groups return
      a count of resources that match and don't match the specified criteria.

      - *(dict) --*

        A user-defined set of one or more filters on which to aggregate inventory data. Groups
        return a count of resources that match and don't match the specified criteria.

        - **Name** *(string) --* **[REQUIRED]**

          The name of the group.

        - **Filters** *(list) --* **[REQUIRED]**

          Filters define the criteria for the group. The ``matchingCount`` field displays the
          number of resources that match the criteria. The ``notMatchingCount`` field displays the
          number of resources that don't match the criteria.

          - *(dict) --*

            One or more filters. Use a filter to return a more specific list of results.

            - **Key** *(string) --* **[REQUIRED]**

              The name of the filter key.

            - **Values** *(list) --* **[REQUIRED]**

              Inventory filter values. Example: inventory filter where instance IDs are specified
              as values Key=AWS:InstanceInformation.InstanceId,Values= i-a12b3c4d5e6g,
              i-1a2b3c4d5e6,Type=Equal

              - *(string) --*

            - **Type** *(string) --*

              The type of filter. Valid values include the following:
              "Equal"|"NotEqual"|"BeginWith"|"LessThan"|"GreaterThan"
    """


_RequiredClientGetInventoryFiltersTypeDef = TypedDict(
    "_RequiredClientGetInventoryFiltersTypeDef", {"Key": str, "Values": List[str]}
)
_OptionalClientGetInventoryFiltersTypeDef = TypedDict(
    "_OptionalClientGetInventoryFiltersTypeDef", {"Type": str}, total=False
)


class ClientGetInventoryFiltersTypeDef(
    _RequiredClientGetInventoryFiltersTypeDef, _OptionalClientGetInventoryFiltersTypeDef
):
    """
    Type definition for `ClientGetInventory` `Filters`

    One or more filters. Use a filter to return a more specific list of results.

    - **Key** *(string) --* **[REQUIRED]**

      The name of the filter key.

    - **Values** *(list) --* **[REQUIRED]**

      Inventory filter values. Example: inventory filter where instance IDs are specified as values
      Key=AWS:InstanceInformation.InstanceId,Values= i-a12b3c4d5e6g, i-1a2b3c4d5e6,Type=Equal

      - *(string) --*

    - **Type** *(string) --*

      The type of filter. Valid values include the following:
      "Equal"|"NotEqual"|"BeginWith"|"LessThan"|"GreaterThan"
    """


_ClientGetInventoryResponseEntitiesDataTypeDef = TypedDict(
    "_ClientGetInventoryResponseEntitiesDataTypeDef",
    {
        "TypeName": str,
        "SchemaVersion": str,
        "CaptureTime": str,
        "ContentHash": str,
        "Content": List[Dict[str, str]],
    },
    total=False,
)


class ClientGetInventoryResponseEntitiesDataTypeDef(
    _ClientGetInventoryResponseEntitiesDataTypeDef
):
    """
    Type definition for `ClientGetInventoryResponseEntities` `Data`

    The inventory result item.

    - **TypeName** *(string) --*

      The name of the inventory result item type.

    - **SchemaVersion** *(string) --*

      The schema version for the inventory result item/

    - **CaptureTime** *(string) --*

      The time inventory item data was captured.

    - **ContentHash** *(string) --*

      MD5 hash of the inventory item type contents. The content hash is used to determine
      whether to update inventory information. The PutInventory API does not update the
      inventory item type contents if the MD5 hash has not changed since last update.

    - **Content** *(list) --*

      Contains all the inventory data of the item type. Results include attribute names
      and values.

      - *(dict) --*

        - *(string) --*

          - *(string) --*
    """


_ClientGetInventoryResponseEntitiesTypeDef = TypedDict(
    "_ClientGetInventoryResponseEntitiesTypeDef",
    {"Id": str, "Data": Dict[str, ClientGetInventoryResponseEntitiesDataTypeDef]},
    total=False,
)


class ClientGetInventoryResponseEntitiesTypeDef(
    _ClientGetInventoryResponseEntitiesTypeDef
):
    """
    Type definition for `ClientGetInventoryResponse` `Entities`

    Inventory query results.

    - **Id** *(string) --*

      ID of the inventory result entity. For example, for managed instance inventory the result
      will be the managed instance ID. For EC2 instance inventory, the result will be the
      instance ID.

    - **Data** *(dict) --*

      The data section in the inventory result entity JSON.

      - *(string) --*

        - *(dict) --*

          The inventory result item.

          - **TypeName** *(string) --*

            The name of the inventory result item type.

          - **SchemaVersion** *(string) --*

            The schema version for the inventory result item/

          - **CaptureTime** *(string) --*

            The time inventory item data was captured.

          - **ContentHash** *(string) --*

            MD5 hash of the inventory item type contents. The content hash is used to determine
            whether to update inventory information. The PutInventory API does not update the
            inventory item type contents if the MD5 hash has not changed since last update.

          - **Content** *(list) --*

            Contains all the inventory data of the item type. Results include attribute names
            and values.

            - *(dict) --*

              - *(string) --*

                - *(string) --*
    """


_ClientGetInventoryResponseTypeDef = TypedDict(
    "_ClientGetInventoryResponseTypeDef",
    {"Entities": List[ClientGetInventoryResponseEntitiesTypeDef], "NextToken": str},
    total=False,
)


class ClientGetInventoryResponseTypeDef(_ClientGetInventoryResponseTypeDef):
    """
    Type definition for `ClientGetInventory` `Response`

    - **Entities** *(list) --*

      Collection of inventory entities such as a collection of instance inventory.

      - *(dict) --*

        Inventory query results.

        - **Id** *(string) --*

          ID of the inventory result entity. For example, for managed instance inventory the result
          will be the managed instance ID. For EC2 instance inventory, the result will be the
          instance ID.

        - **Data** *(dict) --*

          The data section in the inventory result entity JSON.

          - *(string) --*

            - *(dict) --*

              The inventory result item.

              - **TypeName** *(string) --*

                The name of the inventory result item type.

              - **SchemaVersion** *(string) --*

                The schema version for the inventory result item/

              - **CaptureTime** *(string) --*

                The time inventory item data was captured.

              - **ContentHash** *(string) --*

                MD5 hash of the inventory item type contents. The content hash is used to determine
                whether to update inventory information. The PutInventory API does not update the
                inventory item type contents if the MD5 hash has not changed since last update.

              - **Content** *(list) --*

                Contains all the inventory data of the item type. Results include attribute names
                and values.

                - *(dict) --*

                  - *(string) --*

                    - *(string) --*

    - **NextToken** *(string) --*

      The token to use when requesting the next set of items. If there are no additional items to
      return, the string is empty.
    """


_ClientGetInventoryResultAttributesTypeDef = TypedDict(
    "_ClientGetInventoryResultAttributesTypeDef", {"TypeName": str}
)


class ClientGetInventoryResultAttributesTypeDef(
    _ClientGetInventoryResultAttributesTypeDef
):
    """
    Type definition for `ClientGetInventory` `ResultAttributes`

    The inventory item result attribute.

    - **TypeName** *(string) --* **[REQUIRED]**

      Name of the inventory item type. Valid value: AWS:InstanceInformation. Default Value:
      AWS:InstanceInformation.
    """


_ClientGetInventorySchemaResponseSchemasAttributesTypeDef = TypedDict(
    "_ClientGetInventorySchemaResponseSchemasAttributesTypeDef",
    {"Name": str, "DataType": str},
    total=False,
)


class ClientGetInventorySchemaResponseSchemasAttributesTypeDef(
    _ClientGetInventorySchemaResponseSchemasAttributesTypeDef
):
    """
    Type definition for `ClientGetInventorySchemaResponseSchemas` `Attributes`

    Attributes are the entries within the inventory item content. It contains name and
    value.

    - **Name** *(string) --*

      Name of the inventory item attribute.

    - **DataType** *(string) --*

      The data type of the inventory item attribute.
    """


_ClientGetInventorySchemaResponseSchemasTypeDef = TypedDict(
    "_ClientGetInventorySchemaResponseSchemasTypeDef",
    {
        "TypeName": str,
        "Version": str,
        "Attributes": List[ClientGetInventorySchemaResponseSchemasAttributesTypeDef],
        "DisplayName": str,
    },
    total=False,
)


class ClientGetInventorySchemaResponseSchemasTypeDef(
    _ClientGetInventorySchemaResponseSchemasTypeDef
):
    """
    Type definition for `ClientGetInventorySchemaResponse` `Schemas`

    The inventory item schema definition. Users can use this to compose inventory query filters.

    - **TypeName** *(string) --*

      The name of the inventory type. Default inventory item type names start with AWS. Custom
      inventory type names will start with Custom. Default inventory item types include the
      following: AWS:AWSComponent, AWS:Application, AWS:InstanceInformation, AWS:Network, and
      AWS:WindowsUpdate.

    - **Version** *(string) --*

      The schema version for the inventory item.

    - **Attributes** *(list) --*

      The schema attributes for inventory. This contains data type and attribute name.

      - *(dict) --*

        Attributes are the entries within the inventory item content. It contains name and
        value.

        - **Name** *(string) --*

          Name of the inventory item attribute.

        - **DataType** *(string) --*

          The data type of the inventory item attribute.

    - **DisplayName** *(string) --*

      The alias name of the inventory type. The alias name is used for display purposes.
    """


_ClientGetInventorySchemaResponseTypeDef = TypedDict(
    "_ClientGetInventorySchemaResponseTypeDef",
    {"Schemas": List[ClientGetInventorySchemaResponseSchemasTypeDef], "NextToken": str},
    total=False,
)


class ClientGetInventorySchemaResponseTypeDef(_ClientGetInventorySchemaResponseTypeDef):
    """
    Type definition for `ClientGetInventorySchema` `Response`

    - **Schemas** *(list) --*

      Inventory schemas returned by the request.

      - *(dict) --*

        The inventory item schema definition. Users can use this to compose inventory query filters.

        - **TypeName** *(string) --*

          The name of the inventory type. Default inventory item type names start with AWS. Custom
          inventory type names will start with Custom. Default inventory item types include the
          following: AWS:AWSComponent, AWS:Application, AWS:InstanceInformation, AWS:Network, and
          AWS:WindowsUpdate.

        - **Version** *(string) --*

          The schema version for the inventory item.

        - **Attributes** *(list) --*

          The schema attributes for inventory. This contains data type and attribute name.

          - *(dict) --*

            Attributes are the entries within the inventory item content. It contains name and
            value.

            - **Name** *(string) --*

              Name of the inventory item attribute.

            - **DataType** *(string) --*

              The data type of the inventory item attribute.

        - **DisplayName** *(string) --*

          The alias name of the inventory type. The alias name is used for display purposes.

    - **NextToken** *(string) --*

      The token to use when requesting the next set of items. If there are no additional items to
      return, the string is empty.
    """


_ClientGetMaintenanceWindowExecutionResponseTypeDef = TypedDict(
    "_ClientGetMaintenanceWindowExecutionResponseTypeDef",
    {
        "WindowExecutionId": str,
        "TaskIds": List[str],
        "Status": str,
        "StatusDetails": str,
        "StartTime": datetime,
        "EndTime": datetime,
    },
    total=False,
)


class ClientGetMaintenanceWindowExecutionResponseTypeDef(
    _ClientGetMaintenanceWindowExecutionResponseTypeDef
):
    """
    Type definition for `ClientGetMaintenanceWindowExecution` `Response`

    - **WindowExecutionId** *(string) --*

      The ID of the maintenance window execution.

    - **TaskIds** *(list) --*

      The ID of the task executions from the maintenance window execution.

      - *(string) --*

    - **Status** *(string) --*

      The status of the maintenance window execution.

    - **StatusDetails** *(string) --*

      The details explaining the Status. Only available for certain status values.

    - **StartTime** *(datetime) --*

      The time the maintenance window started running.

    - **EndTime** *(datetime) --*

      The time the maintenance window finished running.
    """


_ClientGetMaintenanceWindowExecutionTaskInvocationResponseTypeDef = TypedDict(
    "_ClientGetMaintenanceWindowExecutionTaskInvocationResponseTypeDef",
    {
        "WindowExecutionId": str,
        "TaskExecutionId": str,
        "InvocationId": str,
        "ExecutionId": str,
        "TaskType": str,
        "Parameters": str,
        "Status": str,
        "StatusDetails": str,
        "StartTime": datetime,
        "EndTime": datetime,
        "OwnerInformation": str,
        "WindowTargetId": str,
    },
    total=False,
)


class ClientGetMaintenanceWindowExecutionTaskInvocationResponseTypeDef(
    _ClientGetMaintenanceWindowExecutionTaskInvocationResponseTypeDef
):
    """
    Type definition for `ClientGetMaintenanceWindowExecutionTaskInvocation` `Response`

    - **WindowExecutionId** *(string) --*

      The maintenance window execution ID.

    - **TaskExecutionId** *(string) --*

      The task execution ID.

    - **InvocationId** *(string) --*

      The invocation ID.

    - **ExecutionId** *(string) --*

      The execution ID.

    - **TaskType** *(string) --*

      Retrieves the task type for a maintenance window. Task types include the following: LAMBDA,
      STEP_FUNCTIONS, AUTOMATION, RUN_COMMAND.

    - **Parameters** *(string) --*

      The parameters used at the time that the task ran.

    - **Status** *(string) --*

      The task status for an invocation.

    - **StatusDetails** *(string) --*

      The details explaining the status. Details are only available for certain status values.

    - **StartTime** *(datetime) --*

      The time that the task started running on the target.

    - **EndTime** *(datetime) --*

      The time that the task finished running on the target.

    - **OwnerInformation** *(string) --*

      User-provided value to be included in any CloudWatch events raised while running tasks for
      these targets in this maintenance window.

    - **WindowTargetId** *(string) --*

      The maintenance window target ID.
    """


_ClientGetMaintenanceWindowExecutionTaskResponseTaskParametersTypeDef = TypedDict(
    "_ClientGetMaintenanceWindowExecutionTaskResponseTaskParametersTypeDef",
    {"Values": List[str]},
    total=False,
)


class ClientGetMaintenanceWindowExecutionTaskResponseTaskParametersTypeDef(
    _ClientGetMaintenanceWindowExecutionTaskResponseTaskParametersTypeDef
):
    """
    Type definition for `ClientGetMaintenanceWindowExecutionTaskResponse` `TaskParameters`

    Defines the values for a task parameter.

    - **Values** *(list) --*

      This field contains an array of 0 or more strings, each 1 to 255 characters in length.

      - *(string) --*
    """


_ClientGetMaintenanceWindowExecutionTaskResponseTypeDef = TypedDict(
    "_ClientGetMaintenanceWindowExecutionTaskResponseTypeDef",
    {
        "WindowExecutionId": str,
        "TaskExecutionId": str,
        "TaskArn": str,
        "ServiceRole": str,
        "Type": str,
        "TaskParameters": List[
            Dict[
                str,
                ClientGetMaintenanceWindowExecutionTaskResponseTaskParametersTypeDef,
            ]
        ],
        "Priority": int,
        "MaxConcurrency": str,
        "MaxErrors": str,
        "Status": str,
        "StatusDetails": str,
        "StartTime": datetime,
        "EndTime": datetime,
    },
    total=False,
)


class ClientGetMaintenanceWindowExecutionTaskResponseTypeDef(
    _ClientGetMaintenanceWindowExecutionTaskResponseTypeDef
):
    """
    Type definition for `ClientGetMaintenanceWindowExecutionTask` `Response`

    - **WindowExecutionId** *(string) --*

      The ID of the maintenance window execution that includes the task.

    - **TaskExecutionId** *(string) --*

      The ID of the specific task execution in the maintenance window task that was retrieved.

    - **TaskArn** *(string) --*

      The ARN of the task that ran.

    - **ServiceRole** *(string) --*

      The role that was assumed when running the task.

    - **Type** *(string) --*

      The type of task that was run.

    - **TaskParameters** *(list) --*

      The parameters passed to the task when it was run.

      .. note::

         ``TaskParameters`` has been deprecated. To specify parameters to pass to a task when it
         runs, instead use the ``Parameters`` option in the ``TaskInvocationParameters`` structure.
         For information about how Systems Manager handles these options for the supported
         maintenance window task types, see  MaintenanceWindowTaskInvocationParameters .

      The map has the following format:

      Key: string, between 1 and 255 characters

      Value: an array of strings, each string is between 1 and 255 characters

      - *(dict) --*

        - *(string) --*

          - *(dict) --*

            Defines the values for a task parameter.

            - **Values** *(list) --*

              This field contains an array of 0 or more strings, each 1 to 255 characters in length.

              - *(string) --*

    - **Priority** *(integer) --*

      The priority of the task.

    - **MaxConcurrency** *(string) --*

      The defined maximum number of task executions that could be run in parallel.

    - **MaxErrors** *(string) --*

      The defined maximum number of task execution errors allowed before scheduling of the task
      execution would have been stopped.

    - **Status** *(string) --*

      The status of the task.

    - **StatusDetails** *(string) --*

      The details explaining the Status. Only available for certain status values.

    - **StartTime** *(datetime) --*

      The time the task execution started.

    - **EndTime** *(datetime) --*

      The time the task execution completed.
    """


_ClientGetMaintenanceWindowResponseTypeDef = TypedDict(
    "_ClientGetMaintenanceWindowResponseTypeDef",
    {
        "WindowId": str,
        "Name": str,
        "Description": str,
        "StartDate": str,
        "EndDate": str,
        "Schedule": str,
        "ScheduleTimezone": str,
        "NextExecutionTime": str,
        "Duration": int,
        "Cutoff": int,
        "AllowUnassociatedTargets": bool,
        "Enabled": bool,
        "CreatedDate": datetime,
        "ModifiedDate": datetime,
    },
    total=False,
)


class ClientGetMaintenanceWindowResponseTypeDef(
    _ClientGetMaintenanceWindowResponseTypeDef
):
    """
    Type definition for `ClientGetMaintenanceWindow` `Response`

    - **WindowId** *(string) --*

      The ID of the created maintenance window.

    - **Name** *(string) --*

      The name of the maintenance window.

    - **Description** *(string) --*

      The description of the maintenance window.

    - **StartDate** *(string) --*

      The date and time, in ISO-8601 Extended format, for when the maintenance window is scheduled
      to become active. The maintenance window will not run before this specified time.

    - **EndDate** *(string) --*

      The date and time, in ISO-8601 Extended format, for when the maintenance window is scheduled
      to become inactive. The maintenance window will not run after this specified time.

    - **Schedule** *(string) --*

      The schedule of the maintenance window in the form of a cron or rate expression.

    - **ScheduleTimezone** *(string) --*

      The time zone that the scheduled maintenance window executions are based on, in Internet
      Assigned Numbers Authority (IANA) format. For example: "America/Los_Angeles", "etc/UTC", or
      "Asia/Seoul". For more information, see the `Time Zone Database
      <https://www.iana.org/time-zones>`__ on the IANA website.

    - **NextExecutionTime** *(string) --*

      The next time the maintenance window will actually run, taking into account any specified
      times for the maintenance window to become active or inactive.

    - **Duration** *(integer) --*

      The duration of the maintenance window in hours.

    - **Cutoff** *(integer) --*

      The number of hours before the end of the maintenance window that Systems Manager stops
      scheduling new tasks for execution.

    - **AllowUnassociatedTargets** *(boolean) --*

      Whether targets must be registered with the maintenance window before tasks can be defined
      for those targets.

    - **Enabled** *(boolean) --*

      Indicates whether the maintenance window is enabled.

    - **CreatedDate** *(datetime) --*

      The date the maintenance window was created.

    - **ModifiedDate** *(datetime) --*

      The date the maintenance window was last modified.
    """


_ClientGetMaintenanceWindowTaskResponseLoggingInfoTypeDef = TypedDict(
    "_ClientGetMaintenanceWindowTaskResponseLoggingInfoTypeDef",
    {"S3BucketName": str, "S3KeyPrefix": str, "S3Region": str},
    total=False,
)


class ClientGetMaintenanceWindowTaskResponseLoggingInfoTypeDef(
    _ClientGetMaintenanceWindowTaskResponseLoggingInfoTypeDef
):
    """
    Type definition for `ClientGetMaintenanceWindowTaskResponse` `LoggingInfo`

    The location in Amazon S3 where the task results are logged.

    .. note::

       ``LoggingInfo`` has been deprecated. To specify an S3 bucket to contain logs, instead use
       the ``OutputS3BucketName`` and ``OutputS3KeyPrefix`` options in the
       ``TaskInvocationParameters`` structure. For information about how Systems Manager handles
       these options for the supported maintenance window task types, see
       MaintenanceWindowTaskInvocationParameters .

    - **S3BucketName** *(string) --*

      The name of an Amazon S3 bucket where execution logs are stored .

    - **S3KeyPrefix** *(string) --*

      (Optional) The Amazon S3 bucket subfolder.

    - **S3Region** *(string) --*

      The region where the Amazon S3 bucket is located.
    """


_ClientGetMaintenanceWindowTaskResponseTargetsTypeDef = TypedDict(
    "_ClientGetMaintenanceWindowTaskResponseTargetsTypeDef",
    {"Key": str, "Values": List[str]},
    total=False,
)


class ClientGetMaintenanceWindowTaskResponseTargetsTypeDef(
    _ClientGetMaintenanceWindowTaskResponseTargetsTypeDef
):
    """
    Type definition for `ClientGetMaintenanceWindowTaskResponse` `Targets`

    An array of search criteria that targets instances using a Key,Value combination that you
    specify.

    Supported formats include the following.

    * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

    * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

    * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

    * (Maintenance window targets only) ``Key=resource-groups:Name,Values=*resource-group-name*
    ``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

    For example:

    * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

    * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

    * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

    * (Maintenance window targets only)
    ``Key=resource-groups:Name,Values=ProductionResourceGroup``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC* ``

    For information about how to send commands that target instances using ``Key,Value``
    parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
    <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
    in the *AWS Systems Manager User Guide* .

    - **Key** *(string) --*

      User-defined criteria for sending commands that target instances that meet the criteria.

    - **Values** *(list) --*

      User-defined criteria that maps to ``Key`` . For example, if you specified
      ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on instances
      that include Amazon EC2 tags of ``ServerRole,WebServer`` .

      - *(string) --*
    """


_ClientGetMaintenanceWindowTaskResponseTaskInvocationParametersAutomationTypeDef = TypedDict(
    "_ClientGetMaintenanceWindowTaskResponseTaskInvocationParametersAutomationTypeDef",
    {"DocumentVersion": str, "Parameters": Dict[str, List[str]]},
    total=False,
)


class ClientGetMaintenanceWindowTaskResponseTaskInvocationParametersAutomationTypeDef(
    _ClientGetMaintenanceWindowTaskResponseTaskInvocationParametersAutomationTypeDef
):
    """
    Type definition for `ClientGetMaintenanceWindowTaskResponseTaskInvocationParameters` `Automation`

    The parameters for an AUTOMATION task type.

    - **DocumentVersion** *(string) --*

      The version of an Automation document to use during task execution.

    - **Parameters** *(dict) --*

      The parameters for the AUTOMATION task.

      For information about specifying and updating task parameters, see
      RegisterTaskWithMaintenanceWindow and  UpdateMaintenanceWindowTask .

      .. note::

         ``LoggingInfo`` has been deprecated. To specify an S3 bucket to contain logs, instead
         use the ``OutputS3BucketName`` and ``OutputS3KeyPrefix`` options in the
         ``TaskInvocationParameters`` structure. For information about how Systems Manager
         handles these options for the supported maintenance window task types, see
         MaintenanceWindowTaskInvocationParameters .

         ``TaskParameters`` has been deprecated. To specify parameters to pass to a task when
         it runs, instead use the ``Parameters`` option in the ``TaskInvocationParameters``
         structure. For information about how Systems Manager handles these options for the
         supported maintenance window task types, see
         MaintenanceWindowTaskInvocationParameters .

        For AUTOMATION task types, Systems Manager ignores any values specified for these
        parameters.

      - *(string) --*

        - *(list) --*

          - *(string) --*
    """


_ClientGetMaintenanceWindowTaskResponseTaskInvocationParametersLambdaTypeDef = TypedDict(
    "_ClientGetMaintenanceWindowTaskResponseTaskInvocationParametersLambdaTypeDef",
    {"ClientContext": str, "Qualifier": str, "Payload": bytes},
    total=False,
)


class ClientGetMaintenanceWindowTaskResponseTaskInvocationParametersLambdaTypeDef(
    _ClientGetMaintenanceWindowTaskResponseTaskInvocationParametersLambdaTypeDef
):
    """
    Type definition for `ClientGetMaintenanceWindowTaskResponseTaskInvocationParameters` `Lambda`

    The parameters for a LAMBDA task type.

    - **ClientContext** *(string) --*

      Pass client-specific information to the Lambda function that you are invoking. You can
      then process the client information in your Lambda function as you choose through the
      context variable.

    - **Qualifier** *(string) --*

      (Optional) Specify a Lambda function version or alias name. If you specify a function
      version, the action uses the qualified function ARN to invoke a specific Lambda function.
      If you specify an alias name, the action uses the alias ARN to invoke the Lambda function
      version to which the alias points.

    - **Payload** *(bytes) --*

      JSON to provide to your Lambda function as input.
    """


_ClientGetMaintenanceWindowTaskResponseTaskInvocationParametersRunCommandNotificationConfigTypeDef = TypedDict(
    "_ClientGetMaintenanceWindowTaskResponseTaskInvocationParametersRunCommandNotificationConfigTypeDef",
    {"NotificationArn": str, "NotificationEvents": List[str], "NotificationType": str},
    total=False,
)


class ClientGetMaintenanceWindowTaskResponseTaskInvocationParametersRunCommandNotificationConfigTypeDef(
    _ClientGetMaintenanceWindowTaskResponseTaskInvocationParametersRunCommandNotificationConfigTypeDef
):
    """
    Type definition for `ClientGetMaintenanceWindowTaskResponseTaskInvocationParametersRunCommand` `NotificationConfig`

    Configurations for sending notifications about command status changes on a per-instance
    basis.

    - **NotificationArn** *(string) --*

      An Amazon Resource Name (ARN) for an Amazon Simple Notification Service (Amazon SNS)
      topic. Run Command pushes notifications about command status changes to this topic.

    - **NotificationEvents** *(list) --*

      The different events for which you can receive notifications. These events include the
      following: All (events), InProgress, Success, TimedOut, Cancelled, Failed. To learn
      more about these events, see `Configuring Amazon SNS Notifications for AWS Systems
      Manager
      <http://docs.aws.amazon.com/systems-manager/latest/userguide/monitoring-sns-notifications.html>`__
      in the *AWS Systems Manager User Guide* .

      - *(string) --*

    - **NotificationType** *(string) --*

      Command: Receive notification when the status of a command changes. Invocation: For
      commands sent to multiple instances, receive notification on a per-instance basis when
      the status of a command changes.
    """


_ClientGetMaintenanceWindowTaskResponseTaskInvocationParametersRunCommandTypeDef = TypedDict(
    "_ClientGetMaintenanceWindowTaskResponseTaskInvocationParametersRunCommandTypeDef",
    {
        "Comment": str,
        "DocumentHash": str,
        "DocumentHashType": str,
        "NotificationConfig": ClientGetMaintenanceWindowTaskResponseTaskInvocationParametersRunCommandNotificationConfigTypeDef,
        "OutputS3BucketName": str,
        "OutputS3KeyPrefix": str,
        "Parameters": Dict[str, List[str]],
        "ServiceRoleArn": str,
        "TimeoutSeconds": int,
    },
    total=False,
)


class ClientGetMaintenanceWindowTaskResponseTaskInvocationParametersRunCommandTypeDef(
    _ClientGetMaintenanceWindowTaskResponseTaskInvocationParametersRunCommandTypeDef
):
    """
    Type definition for `ClientGetMaintenanceWindowTaskResponseTaskInvocationParameters` `RunCommand`

    The parameters for a RUN_COMMAND task type.

    - **Comment** *(string) --*

      Information about the commands to run.

    - **DocumentHash** *(string) --*

      The SHA-256 or SHA-1 hash created by the system when the document was created. SHA-1
      hashes have been deprecated.

    - **DocumentHashType** *(string) --*

      SHA-256 or SHA-1. SHA-1 hashes have been deprecated.

    - **NotificationConfig** *(dict) --*

      Configurations for sending notifications about command status changes on a per-instance
      basis.

      - **NotificationArn** *(string) --*

        An Amazon Resource Name (ARN) for an Amazon Simple Notification Service (Amazon SNS)
        topic. Run Command pushes notifications about command status changes to this topic.

      - **NotificationEvents** *(list) --*

        The different events for which you can receive notifications. These events include the
        following: All (events), InProgress, Success, TimedOut, Cancelled, Failed. To learn
        more about these events, see `Configuring Amazon SNS Notifications for AWS Systems
        Manager
        <http://docs.aws.amazon.com/systems-manager/latest/userguide/monitoring-sns-notifications.html>`__
        in the *AWS Systems Manager User Guide* .

        - *(string) --*

      - **NotificationType** *(string) --*

        Command: Receive notification when the status of a command changes. Invocation: For
        commands sent to multiple instances, receive notification on a per-instance basis when
        the status of a command changes.

    - **OutputS3BucketName** *(string) --*

      The name of the Amazon S3 bucket.

    - **OutputS3KeyPrefix** *(string) --*

      The Amazon S3 bucket subfolder.

    - **Parameters** *(dict) --*

      The parameters for the RUN_COMMAND task execution.

      - *(string) --*

        - *(list) --*

          - *(string) --*

    - **ServiceRoleArn** *(string) --*

      The ARN of the IAM service role to use to publish Amazon Simple Notification Service
      (Amazon SNS) notifications for maintenance window Run Command tasks.

    - **TimeoutSeconds** *(integer) --*

      If this time is reached and the command has not already started running, it doesn't run.
    """


_ClientGetMaintenanceWindowTaskResponseTaskInvocationParametersStepFunctionsTypeDef = TypedDict(
    "_ClientGetMaintenanceWindowTaskResponseTaskInvocationParametersStepFunctionsTypeDef",
    {"Input": str, "Name": str},
    total=False,
)


class ClientGetMaintenanceWindowTaskResponseTaskInvocationParametersStepFunctionsTypeDef(
    _ClientGetMaintenanceWindowTaskResponseTaskInvocationParametersStepFunctionsTypeDef
):
    """
    Type definition for `ClientGetMaintenanceWindowTaskResponseTaskInvocationParameters` `StepFunctions`

    The parameters for a STEP_FUNCTIONS task type.

    - **Input** *(string) --*

      The inputs for the STEP_FUNCTIONS task.

    - **Name** *(string) --*

      The name of the STEP_FUNCTIONS task.
    """


_ClientGetMaintenanceWindowTaskResponseTaskInvocationParametersTypeDef = TypedDict(
    "_ClientGetMaintenanceWindowTaskResponseTaskInvocationParametersTypeDef",
    {
        "RunCommand": ClientGetMaintenanceWindowTaskResponseTaskInvocationParametersRunCommandTypeDef,
        "Automation": ClientGetMaintenanceWindowTaskResponseTaskInvocationParametersAutomationTypeDef,
        "StepFunctions": ClientGetMaintenanceWindowTaskResponseTaskInvocationParametersStepFunctionsTypeDef,
        "Lambda": ClientGetMaintenanceWindowTaskResponseTaskInvocationParametersLambdaTypeDef,
    },
    total=False,
)


class ClientGetMaintenanceWindowTaskResponseTaskInvocationParametersTypeDef(
    _ClientGetMaintenanceWindowTaskResponseTaskInvocationParametersTypeDef
):
    """
    Type definition for `ClientGetMaintenanceWindowTaskResponse` `TaskInvocationParameters`

    The parameters to pass to the task when it runs.

    - **RunCommand** *(dict) --*

      The parameters for a RUN_COMMAND task type.

      - **Comment** *(string) --*

        Information about the commands to run.

      - **DocumentHash** *(string) --*

        The SHA-256 or SHA-1 hash created by the system when the document was created. SHA-1
        hashes have been deprecated.

      - **DocumentHashType** *(string) --*

        SHA-256 or SHA-1. SHA-1 hashes have been deprecated.

      - **NotificationConfig** *(dict) --*

        Configurations for sending notifications about command status changes on a per-instance
        basis.

        - **NotificationArn** *(string) --*

          An Amazon Resource Name (ARN) for an Amazon Simple Notification Service (Amazon SNS)
          topic. Run Command pushes notifications about command status changes to this topic.

        - **NotificationEvents** *(list) --*

          The different events for which you can receive notifications. These events include the
          following: All (events), InProgress, Success, TimedOut, Cancelled, Failed. To learn
          more about these events, see `Configuring Amazon SNS Notifications for AWS Systems
          Manager
          <http://docs.aws.amazon.com/systems-manager/latest/userguide/monitoring-sns-notifications.html>`__
          in the *AWS Systems Manager User Guide* .

          - *(string) --*

        - **NotificationType** *(string) --*

          Command: Receive notification when the status of a command changes. Invocation: For
          commands sent to multiple instances, receive notification on a per-instance basis when
          the status of a command changes.

      - **OutputS3BucketName** *(string) --*

        The name of the Amazon S3 bucket.

      - **OutputS3KeyPrefix** *(string) --*

        The Amazon S3 bucket subfolder.

      - **Parameters** *(dict) --*

        The parameters for the RUN_COMMAND task execution.

        - *(string) --*

          - *(list) --*

            - *(string) --*

      - **ServiceRoleArn** *(string) --*

        The ARN of the IAM service role to use to publish Amazon Simple Notification Service
        (Amazon SNS) notifications for maintenance window Run Command tasks.

      - **TimeoutSeconds** *(integer) --*

        If this time is reached and the command has not already started running, it doesn't run.

    - **Automation** *(dict) --*

      The parameters for an AUTOMATION task type.

      - **DocumentVersion** *(string) --*

        The version of an Automation document to use during task execution.

      - **Parameters** *(dict) --*

        The parameters for the AUTOMATION task.

        For information about specifying and updating task parameters, see
        RegisterTaskWithMaintenanceWindow and  UpdateMaintenanceWindowTask .

        .. note::

           ``LoggingInfo`` has been deprecated. To specify an S3 bucket to contain logs, instead
           use the ``OutputS3BucketName`` and ``OutputS3KeyPrefix`` options in the
           ``TaskInvocationParameters`` structure. For information about how Systems Manager
           handles these options for the supported maintenance window task types, see
           MaintenanceWindowTaskInvocationParameters .

           ``TaskParameters`` has been deprecated. To specify parameters to pass to a task when
           it runs, instead use the ``Parameters`` option in the ``TaskInvocationParameters``
           structure. For information about how Systems Manager handles these options for the
           supported maintenance window task types, see
           MaintenanceWindowTaskInvocationParameters .

          For AUTOMATION task types, Systems Manager ignores any values specified for these
          parameters.

        - *(string) --*

          - *(list) --*

            - *(string) --*

    - **StepFunctions** *(dict) --*

      The parameters for a STEP_FUNCTIONS task type.

      - **Input** *(string) --*

        The inputs for the STEP_FUNCTIONS task.

      - **Name** *(string) --*

        The name of the STEP_FUNCTIONS task.

    - **Lambda** *(dict) --*

      The parameters for a LAMBDA task type.

      - **ClientContext** *(string) --*

        Pass client-specific information to the Lambda function that you are invoking. You can
        then process the client information in your Lambda function as you choose through the
        context variable.

      - **Qualifier** *(string) --*

        (Optional) Specify a Lambda function version or alias name. If you specify a function
        version, the action uses the qualified function ARN to invoke a specific Lambda function.
        If you specify an alias name, the action uses the alias ARN to invoke the Lambda function
        version to which the alias points.

      - **Payload** *(bytes) --*

        JSON to provide to your Lambda function as input.
    """


_ClientGetMaintenanceWindowTaskResponseTaskParametersTypeDef = TypedDict(
    "_ClientGetMaintenanceWindowTaskResponseTaskParametersTypeDef",
    {"Values": List[str]},
    total=False,
)


class ClientGetMaintenanceWindowTaskResponseTaskParametersTypeDef(
    _ClientGetMaintenanceWindowTaskResponseTaskParametersTypeDef
):
    """
    Type definition for `ClientGetMaintenanceWindowTaskResponse` `TaskParameters`

    Defines the values for a task parameter.

    - **Values** *(list) --*

      This field contains an array of 0 or more strings, each 1 to 255 characters in length.

      - *(string) --*
    """


_ClientGetMaintenanceWindowTaskResponseTypeDef = TypedDict(
    "_ClientGetMaintenanceWindowTaskResponseTypeDef",
    {
        "WindowId": str,
        "WindowTaskId": str,
        "Targets": List[ClientGetMaintenanceWindowTaskResponseTargetsTypeDef],
        "TaskArn": str,
        "ServiceRoleArn": str,
        "TaskType": str,
        "TaskParameters": Dict[
            str, ClientGetMaintenanceWindowTaskResponseTaskParametersTypeDef
        ],
        "TaskInvocationParameters": ClientGetMaintenanceWindowTaskResponseTaskInvocationParametersTypeDef,
        "Priority": int,
        "MaxConcurrency": str,
        "MaxErrors": str,
        "LoggingInfo": ClientGetMaintenanceWindowTaskResponseLoggingInfoTypeDef,
        "Name": str,
        "Description": str,
    },
    total=False,
)


class ClientGetMaintenanceWindowTaskResponseTypeDef(
    _ClientGetMaintenanceWindowTaskResponseTypeDef
):
    """
    Type definition for `ClientGetMaintenanceWindowTask` `Response`

    - **WindowId** *(string) --*

      The retrieved maintenance window ID.

    - **WindowTaskId** *(string) --*

      The retrieved maintenance window task ID.

    - **Targets** *(list) --*

      The targets where the task should run.

      - *(dict) --*

        An array of search criteria that targets instances using a Key,Value combination that you
        specify.

        Supported formats include the following.

        * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

        * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

        * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

        * (Maintenance window targets only) ``Key=resource-groups:Name,Values=*resource-group-name*
        ``

        * (Maintenance window targets only)
        ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

        For example:

        * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

        * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

        * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

        * (Maintenance window targets only)
        ``Key=resource-groups:Name,Values=ProductionResourceGroup``

        * (Maintenance window targets only)
        ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC* ``

        For information about how to send commands that target instances using ``Key,Value``
        parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
        <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
        in the *AWS Systems Manager User Guide* .

        - **Key** *(string) --*

          User-defined criteria for sending commands that target instances that meet the criteria.

        - **Values** *(list) --*

          User-defined criteria that maps to ``Key`` . For example, if you specified
          ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on instances
          that include Amazon EC2 tags of ``ServerRole,WebServer`` .

          - *(string) --*

    - **TaskArn** *(string) --*

      The resource that the task used during execution. For RUN_COMMAND and AUTOMATION task types,
      the TaskArn is the Systems Manager Document name/ARN. For LAMBDA tasks, the value is the
      function name/ARN. For STEP_FUNCTIONS tasks, the value is the state machine ARN.

    - **ServiceRoleArn** *(string) --*

      The ARN of the IAM service role to use to publish Amazon Simple Notification Service (Amazon
      SNS) notifications for maintenance window Run Command tasks.

    - **TaskType** *(string) --*

      The type of task to run.

    - **TaskParameters** *(dict) --*

      The parameters to pass to the task when it runs.

      .. note::

         ``TaskParameters`` has been deprecated. To specify parameters to pass to a task when it
         runs, instead use the ``Parameters`` option in the ``TaskInvocationParameters`` structure.
         For information about how Systems Manager handles these options for the supported
         maintenance window task types, see  MaintenanceWindowTaskInvocationParameters .

      - *(string) --*

        - *(dict) --*

          Defines the values for a task parameter.

          - **Values** *(list) --*

            This field contains an array of 0 or more strings, each 1 to 255 characters in length.

            - *(string) --*

    - **TaskInvocationParameters** *(dict) --*

      The parameters to pass to the task when it runs.

      - **RunCommand** *(dict) --*

        The parameters for a RUN_COMMAND task type.

        - **Comment** *(string) --*

          Information about the commands to run.

        - **DocumentHash** *(string) --*

          The SHA-256 or SHA-1 hash created by the system when the document was created. SHA-1
          hashes have been deprecated.

        - **DocumentHashType** *(string) --*

          SHA-256 or SHA-1. SHA-1 hashes have been deprecated.

        - **NotificationConfig** *(dict) --*

          Configurations for sending notifications about command status changes on a per-instance
          basis.

          - **NotificationArn** *(string) --*

            An Amazon Resource Name (ARN) for an Amazon Simple Notification Service (Amazon SNS)
            topic. Run Command pushes notifications about command status changes to this topic.

          - **NotificationEvents** *(list) --*

            The different events for which you can receive notifications. These events include the
            following: All (events), InProgress, Success, TimedOut, Cancelled, Failed. To learn
            more about these events, see `Configuring Amazon SNS Notifications for AWS Systems
            Manager
            <http://docs.aws.amazon.com/systems-manager/latest/userguide/monitoring-sns-notifications.html>`__
            in the *AWS Systems Manager User Guide* .

            - *(string) --*

          - **NotificationType** *(string) --*

            Command: Receive notification when the status of a command changes. Invocation: For
            commands sent to multiple instances, receive notification on a per-instance basis when
            the status of a command changes.

        - **OutputS3BucketName** *(string) --*

          The name of the Amazon S3 bucket.

        - **OutputS3KeyPrefix** *(string) --*

          The Amazon S3 bucket subfolder.

        - **Parameters** *(dict) --*

          The parameters for the RUN_COMMAND task execution.

          - *(string) --*

            - *(list) --*

              - *(string) --*

        - **ServiceRoleArn** *(string) --*

          The ARN of the IAM service role to use to publish Amazon Simple Notification Service
          (Amazon SNS) notifications for maintenance window Run Command tasks.

        - **TimeoutSeconds** *(integer) --*

          If this time is reached and the command has not already started running, it doesn't run.

      - **Automation** *(dict) --*

        The parameters for an AUTOMATION task type.

        - **DocumentVersion** *(string) --*

          The version of an Automation document to use during task execution.

        - **Parameters** *(dict) --*

          The parameters for the AUTOMATION task.

          For information about specifying and updating task parameters, see
          RegisterTaskWithMaintenanceWindow and  UpdateMaintenanceWindowTask .

          .. note::

             ``LoggingInfo`` has been deprecated. To specify an S3 bucket to contain logs, instead
             use the ``OutputS3BucketName`` and ``OutputS3KeyPrefix`` options in the
             ``TaskInvocationParameters`` structure. For information about how Systems Manager
             handles these options for the supported maintenance window task types, see
             MaintenanceWindowTaskInvocationParameters .

             ``TaskParameters`` has been deprecated. To specify parameters to pass to a task when
             it runs, instead use the ``Parameters`` option in the ``TaskInvocationParameters``
             structure. For information about how Systems Manager handles these options for the
             supported maintenance window task types, see
             MaintenanceWindowTaskInvocationParameters .

            For AUTOMATION task types, Systems Manager ignores any values specified for these
            parameters.

          - *(string) --*

            - *(list) --*

              - *(string) --*

      - **StepFunctions** *(dict) --*

        The parameters for a STEP_FUNCTIONS task type.

        - **Input** *(string) --*

          The inputs for the STEP_FUNCTIONS task.

        - **Name** *(string) --*

          The name of the STEP_FUNCTIONS task.

      - **Lambda** *(dict) --*

        The parameters for a LAMBDA task type.

        - **ClientContext** *(string) --*

          Pass client-specific information to the Lambda function that you are invoking. You can
          then process the client information in your Lambda function as you choose through the
          context variable.

        - **Qualifier** *(string) --*

          (Optional) Specify a Lambda function version or alias name. If you specify a function
          version, the action uses the qualified function ARN to invoke a specific Lambda function.
          If you specify an alias name, the action uses the alias ARN to invoke the Lambda function
          version to which the alias points.

        - **Payload** *(bytes) --*

          JSON to provide to your Lambda function as input.

    - **Priority** *(integer) --*

      The priority of the task when it runs. The lower the number, the higher the priority. Tasks
      that have the same priority are scheduled in parallel.

    - **MaxConcurrency** *(string) --*

      The maximum number of targets allowed to run this task in parallel.

    - **MaxErrors** *(string) --*

      The maximum number of errors allowed before the task stops being scheduled.

    - **LoggingInfo** *(dict) --*

      The location in Amazon S3 where the task results are logged.

      .. note::

         ``LoggingInfo`` has been deprecated. To specify an S3 bucket to contain logs, instead use
         the ``OutputS3BucketName`` and ``OutputS3KeyPrefix`` options in the
         ``TaskInvocationParameters`` structure. For information about how Systems Manager handles
         these options for the supported maintenance window task types, see
         MaintenanceWindowTaskInvocationParameters .

      - **S3BucketName** *(string) --*

        The name of an Amazon S3 bucket where execution logs are stored .

      - **S3KeyPrefix** *(string) --*

        (Optional) The Amazon S3 bucket subfolder.

      - **S3Region** *(string) --*

        The region where the Amazon S3 bucket is located.

    - **Name** *(string) --*

      The retrieved task name.

    - **Description** *(string) --*

      The retrieved task description.
    """


_ClientGetOpsItemResponseOpsItemNotificationsTypeDef = TypedDict(
    "_ClientGetOpsItemResponseOpsItemNotificationsTypeDef", {"Arn": str}, total=False
)


class ClientGetOpsItemResponseOpsItemNotificationsTypeDef(
    _ClientGetOpsItemResponseOpsItemNotificationsTypeDef
):
    """
    Type definition for `ClientGetOpsItemResponseOpsItem` `Notifications`

    A notification about the OpsItem.

    - **Arn** *(string) --*

      The Amazon Resource Name (ARN) of an SNS topic where notifications are sent when this
      OpsItem is edited or changed.
    """


_ClientGetOpsItemResponseOpsItemOperationalDataTypeDef = TypedDict(
    "_ClientGetOpsItemResponseOpsItemOperationalDataTypeDef",
    {"Value": str, "Type": str},
    total=False,
)


class ClientGetOpsItemResponseOpsItemOperationalDataTypeDef(
    _ClientGetOpsItemResponseOpsItemOperationalDataTypeDef
):
    """
    Type definition for `ClientGetOpsItemResponseOpsItem` `OperationalData`

    An object that defines the value of the key and its type in the OperationalData map.

    - **Value** *(string) --*

      The value of the OperationalData key.

    - **Type** *(string) --*

      The type of key-value pair. Valid types include ``SearchableString`` and ``String`` .
    """


_ClientGetOpsItemResponseOpsItemRelatedOpsItemsTypeDef = TypedDict(
    "_ClientGetOpsItemResponseOpsItemRelatedOpsItemsTypeDef",
    {"OpsItemId": str},
    total=False,
)


class ClientGetOpsItemResponseOpsItemRelatedOpsItemsTypeDef(
    _ClientGetOpsItemResponseOpsItemRelatedOpsItemsTypeDef
):
    """
    Type definition for `ClientGetOpsItemResponseOpsItem` `RelatedOpsItems`

    An OpsItems that shares something in common with the current OpsItem. For example,
    related OpsItems can include OpsItems with similar error messages, impacted resources, or
    statuses for the impacted resource.

    - **OpsItemId** *(string) --*

      The ID of an OpsItem related to the current OpsItem.
    """


_ClientGetOpsItemResponseOpsItemTypeDef = TypedDict(
    "_ClientGetOpsItemResponseOpsItemTypeDef",
    {
        "CreatedBy": str,
        "CreatedTime": datetime,
        "Description": str,
        "LastModifiedBy": str,
        "LastModifiedTime": datetime,
        "Notifications": List[ClientGetOpsItemResponseOpsItemNotificationsTypeDef],
        "Priority": int,
        "RelatedOpsItems": List[ClientGetOpsItemResponseOpsItemRelatedOpsItemsTypeDef],
        "Status": str,
        "OpsItemId": str,
        "Version": str,
        "Title": str,
        "Source": str,
        "OperationalData": Dict[
            str, ClientGetOpsItemResponseOpsItemOperationalDataTypeDef
        ],
    },
    total=False,
)


class ClientGetOpsItemResponseOpsItemTypeDef(_ClientGetOpsItemResponseOpsItemTypeDef):
    """
    Type definition for `ClientGetOpsItemResponse` `OpsItem`

    The OpsItem.

    - **CreatedBy** *(string) --*

      The ARN of the AWS account that created the OpsItem.

    - **CreatedTime** *(datetime) --*

      The date and time the OpsItem was created.

    - **Description** *(string) --*

      The OpsItem description.

    - **LastModifiedBy** *(string) --*

      The ARN of the AWS account that last updated the OpsItem.

    - **LastModifiedTime** *(datetime) --*

      The date and time the OpsItem was last updated.

    - **Notifications** *(list) --*

      The Amazon Resource Name (ARN) of an SNS topic where notifications are sent when this
      OpsItem is edited or changed.

      - *(dict) --*

        A notification about the OpsItem.

        - **Arn** *(string) --*

          The Amazon Resource Name (ARN) of an SNS topic where notifications are sent when this
          OpsItem is edited or changed.

    - **Priority** *(integer) --*

      The importance of this OpsItem in relation to other OpsItems in the system.

    - **RelatedOpsItems** *(list) --*

      One or more OpsItems that share something in common with the current OpsItem. For example,
      related OpsItems can include OpsItems with similar error messages, impacted resources, or
      statuses for the impacted resource.

      - *(dict) --*

        An OpsItems that shares something in common with the current OpsItem. For example,
        related OpsItems can include OpsItems with similar error messages, impacted resources, or
        statuses for the impacted resource.

        - **OpsItemId** *(string) --*

          The ID of an OpsItem related to the current OpsItem.

    - **Status** *(string) --*

      The OpsItem status. Status can be ``Open`` , ``In Progress`` , or ``Resolved`` . For more
      information, see `Editing OpsItem Details
      <http://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter-working-with-OpsItems-editing-details.html>`__
      in the *AWS Systems Manager User Guide* .

    - **OpsItemId** *(string) --*

      The ID of the OpsItem.

    - **Version** *(string) --*

      The version of this OpsItem. Each time the OpsItem is edited the version number increments
      by one.

    - **Title** *(string) --*

      A short heading that describes the nature of the OpsItem and the impacted resource.

    - **Source** *(string) --*

      The origin of the OpsItem, such as Amazon EC2 or AWS Systems Manager. The impacted resource
      is a subset of source.

    - **OperationalData** *(dict) --*

      Operational data is custom data that provides useful reference details about the OpsItem.
      For example, you can specify log files, error strings, license keys, troubleshooting tips,
      or other relevant data. You enter operational data as key-value pairs. The key has a
      maximum length of 128 characters. The value has a maximum size of 20 KB.

      .. warning::

        Operational data keys *can't* begin with the following: amazon, aws, amzn, ssm, /amazon,
        /aws, /amzn, /ssm.

      You can choose to make the data searchable by other users in the account or you can
      restrict search access. Searchable data means that all users with access to the OpsItem
      Overview page (as provided by the  DescribeOpsItems API action) can view and search on the
      specified data. Operational data that is not searchable is only viewable by users who have
      access to the OpsItem (as provided by the  GetOpsItem API action).

      Use the ``/aws/resources`` key in OperationalData to specify a related resource in the
      request. Use the ``/aws/automations`` key in OperationalData to associate an Automation
      runbook with the OpsItem. To view AWS CLI example commands that use these keys, see
      `Creating OpsItems Manually
      <http://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter-creating-OpsItems.html#OpsCenter-manually-create-OpsItems>`__
      in the *AWS Systems Manager User Guide* .

      - *(string) --*

        - *(dict) --*

          An object that defines the value of the key and its type in the OperationalData map.

          - **Value** *(string) --*

            The value of the OperationalData key.

          - **Type** *(string) --*

            The type of key-value pair. Valid types include ``SearchableString`` and ``String`` .
    """


_ClientGetOpsItemResponseTypeDef = TypedDict(
    "_ClientGetOpsItemResponseTypeDef",
    {"OpsItem": ClientGetOpsItemResponseOpsItemTypeDef},
    total=False,
)


class ClientGetOpsItemResponseTypeDef(_ClientGetOpsItemResponseTypeDef):
    """
    Type definition for `ClientGetOpsItem` `Response`

    - **OpsItem** *(dict) --*

      The OpsItem.

      - **CreatedBy** *(string) --*

        The ARN of the AWS account that created the OpsItem.

      - **CreatedTime** *(datetime) --*

        The date and time the OpsItem was created.

      - **Description** *(string) --*

        The OpsItem description.

      - **LastModifiedBy** *(string) --*

        The ARN of the AWS account that last updated the OpsItem.

      - **LastModifiedTime** *(datetime) --*

        The date and time the OpsItem was last updated.

      - **Notifications** *(list) --*

        The Amazon Resource Name (ARN) of an SNS topic where notifications are sent when this
        OpsItem is edited or changed.

        - *(dict) --*

          A notification about the OpsItem.

          - **Arn** *(string) --*

            The Amazon Resource Name (ARN) of an SNS topic where notifications are sent when this
            OpsItem is edited or changed.

      - **Priority** *(integer) --*

        The importance of this OpsItem in relation to other OpsItems in the system.

      - **RelatedOpsItems** *(list) --*

        One or more OpsItems that share something in common with the current OpsItem. For example,
        related OpsItems can include OpsItems with similar error messages, impacted resources, or
        statuses for the impacted resource.

        - *(dict) --*

          An OpsItems that shares something in common with the current OpsItem. For example,
          related OpsItems can include OpsItems with similar error messages, impacted resources, or
          statuses for the impacted resource.

          - **OpsItemId** *(string) --*

            The ID of an OpsItem related to the current OpsItem.

      - **Status** *(string) --*

        The OpsItem status. Status can be ``Open`` , ``In Progress`` , or ``Resolved`` . For more
        information, see `Editing OpsItem Details
        <http://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter-working-with-OpsItems-editing-details.html>`__
        in the *AWS Systems Manager User Guide* .

      - **OpsItemId** *(string) --*

        The ID of the OpsItem.

      - **Version** *(string) --*

        The version of this OpsItem. Each time the OpsItem is edited the version number increments
        by one.

      - **Title** *(string) --*

        A short heading that describes the nature of the OpsItem and the impacted resource.

      - **Source** *(string) --*

        The origin of the OpsItem, such as Amazon EC2 or AWS Systems Manager. The impacted resource
        is a subset of source.

      - **OperationalData** *(dict) --*

        Operational data is custom data that provides useful reference details about the OpsItem.
        For example, you can specify log files, error strings, license keys, troubleshooting tips,
        or other relevant data. You enter operational data as key-value pairs. The key has a
        maximum length of 128 characters. The value has a maximum size of 20 KB.

        .. warning::

          Operational data keys *can't* begin with the following: amazon, aws, amzn, ssm, /amazon,
          /aws, /amzn, /ssm.

        You can choose to make the data searchable by other users in the account or you can
        restrict search access. Searchable data means that all users with access to the OpsItem
        Overview page (as provided by the  DescribeOpsItems API action) can view and search on the
        specified data. Operational data that is not searchable is only viewable by users who have
        access to the OpsItem (as provided by the  GetOpsItem API action).

        Use the ``/aws/resources`` key in OperationalData to specify a related resource in the
        request. Use the ``/aws/automations`` key in OperationalData to associate an Automation
        runbook with the OpsItem. To view AWS CLI example commands that use these keys, see
        `Creating OpsItems Manually
        <http://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter-creating-OpsItems.html#OpsCenter-manually-create-OpsItems>`__
        in the *AWS Systems Manager User Guide* .

        - *(string) --*

          - *(dict) --*

            An object that defines the value of the key and its type in the OperationalData map.

            - **Value** *(string) --*

              The value of the OperationalData key.

            - **Type** *(string) --*

              The type of key-value pair. Valid types include ``SearchableString`` and ``String`` .
    """


_RequiredClientGetOpsSummaryAggregatorsFiltersTypeDef = TypedDict(
    "_RequiredClientGetOpsSummaryAggregatorsFiltersTypeDef",
    {"Key": str, "Values": List[str]},
)
_OptionalClientGetOpsSummaryAggregatorsFiltersTypeDef = TypedDict(
    "_OptionalClientGetOpsSummaryAggregatorsFiltersTypeDef", {"Type": str}, total=False
)


class ClientGetOpsSummaryAggregatorsFiltersTypeDef(
    _RequiredClientGetOpsSummaryAggregatorsFiltersTypeDef,
    _OptionalClientGetOpsSummaryAggregatorsFiltersTypeDef,
):
    """
    Type definition for `ClientGetOpsSummaryAggregators` `Filters`

    A filter for viewing OpsItem summaries.

    - **Key** *(string) --* **[REQUIRED]**

      The name of the filter.

    - **Values** *(list) --* **[REQUIRED]**

      The filter value.

      - *(string) --*

    - **Type** *(string) --*

      The type of filter.
    """


_ClientGetOpsSummaryAggregatorsTypeDef = TypedDict(
    "_ClientGetOpsSummaryAggregatorsTypeDef",
    {
        "AggregatorType": str,
        "TypeName": str,
        "AttributeName": str,
        "Values": Dict[str, str],
        "Filters": List[ClientGetOpsSummaryAggregatorsFiltersTypeDef],
        "Aggregators": List[Any],
    },
    total=False,
)


class ClientGetOpsSummaryAggregatorsTypeDef(_ClientGetOpsSummaryAggregatorsTypeDef):
    """
    Type definition for `ClientGetOpsSummary` `Aggregators`

    One or more aggregators for viewing counts of OpsItems using different dimensions such as
    ``Source`` , ``CreatedTime`` , or ``Source and CreatedTime`` , to name a few.

    - **AggregatorType** *(string) --*

      Either a Range or Count aggregator for limiting an OpsItem summary.

    - **TypeName** *(string) --*

      The data type name to use for viewing counts of OpsItems.

    - **AttributeName** *(string) --*

      The name of an OpsItem attribute on which to limit the count of OpsItems.

    - **Values** *(dict) --*

      The aggregator value.

      - *(string) --*

        - *(string) --*

    - **Filters** *(list) --*

      The aggregator filters.

      - *(dict) --*

        A filter for viewing OpsItem summaries.

        - **Key** *(string) --* **[REQUIRED]**

          The name of the filter.

        - **Values** *(list) --* **[REQUIRED]**

          The filter value.

          - *(string) --*

        - **Type** *(string) --*

          The type of filter.

    - **Aggregators** *(list) --*

      A nested aggregator for viewing counts of OpsItems.
    """


_RequiredClientGetOpsSummaryFiltersTypeDef = TypedDict(
    "_RequiredClientGetOpsSummaryFiltersTypeDef", {"Key": str, "Values": List[str]}
)
_OptionalClientGetOpsSummaryFiltersTypeDef = TypedDict(
    "_OptionalClientGetOpsSummaryFiltersTypeDef", {"Type": str}, total=False
)


class ClientGetOpsSummaryFiltersTypeDef(
    _RequiredClientGetOpsSummaryFiltersTypeDef,
    _OptionalClientGetOpsSummaryFiltersTypeDef,
):
    """
    Type definition for `ClientGetOpsSummary` `Filters`

    A filter for viewing OpsItem summaries.

    - **Key** *(string) --* **[REQUIRED]**

      The name of the filter.

    - **Values** *(list) --* **[REQUIRED]**

      The filter value.

      - *(string) --*

    - **Type** *(string) --*

      The type of filter.
    """


_ClientGetOpsSummaryResponseEntitiesDataTypeDef = TypedDict(
    "_ClientGetOpsSummaryResponseEntitiesDataTypeDef",
    {"Content": List[Dict[str, str]]},
    total=False,
)


class ClientGetOpsSummaryResponseEntitiesDataTypeDef(
    _ClientGetOpsSummaryResponseEntitiesDataTypeDef
):
    """
    Type definition for `ClientGetOpsSummaryResponseEntities` `Data`

    The OpsItem summaries result item.

    - **Content** *(list) --*

      The detailed data content for an OpsItem summaries result item.

      - *(dict) --*

        - *(string) --*

          - *(string) --*
    """


_ClientGetOpsSummaryResponseEntitiesTypeDef = TypedDict(
    "_ClientGetOpsSummaryResponseEntitiesTypeDef",
    {"Id": str, "Data": Dict[str, ClientGetOpsSummaryResponseEntitiesDataTypeDef]},
    total=False,
)


class ClientGetOpsSummaryResponseEntitiesTypeDef(
    _ClientGetOpsSummaryResponseEntitiesTypeDef
):
    """
    Type definition for `ClientGetOpsSummaryResponse` `Entities`

    The result of the query.

    - **Id** *(string) --*

      The query ID.

    - **Data** *(dict) --*

      The data returned by the query.

      - *(string) --*

        - *(dict) --*

          The OpsItem summaries result item.

          - **Content** *(list) --*

            The detailed data content for an OpsItem summaries result item.

            - *(dict) --*

              - *(string) --*

                - *(string) --*
    """


_ClientGetOpsSummaryResponseTypeDef = TypedDict(
    "_ClientGetOpsSummaryResponseTypeDef",
    {"Entities": List[ClientGetOpsSummaryResponseEntitiesTypeDef], "NextToken": str},
    total=False,
)


class ClientGetOpsSummaryResponseTypeDef(_ClientGetOpsSummaryResponseTypeDef):
    """
    Type definition for `ClientGetOpsSummary` `Response`

    - **Entities** *(list) --*

      The list of aggregated and filtered OpsItems.

      - *(dict) --*

        The result of the query.

        - **Id** *(string) --*

          The query ID.

        - **Data** *(dict) --*

          The data returned by the query.

          - *(string) --*

            - *(dict) --*

              The OpsItem summaries result item.

              - **Content** *(list) --*

                The detailed data content for an OpsItem summaries result item.

                - *(dict) --*

                  - *(string) --*

                    - *(string) --*

    - **NextToken** *(string) --*

      The token for the next set of items to return. Use this token to get the next set of results.
    """


_ClientGetParameterHistoryResponseParametersPoliciesTypeDef = TypedDict(
    "_ClientGetParameterHistoryResponseParametersPoliciesTypeDef",
    {"PolicyText": str, "PolicyType": str, "PolicyStatus": str},
    total=False,
)


class ClientGetParameterHistoryResponseParametersPoliciesTypeDef(
    _ClientGetParameterHistoryResponseParametersPoliciesTypeDef
):
    """
    Type definition for `ClientGetParameterHistoryResponseParameters` `Policies`

    One or more policies assigned to a parameter.

    - **PolicyText** *(string) --*

      The JSON text of the policy.

    - **PolicyType** *(string) --*

      The type of policy. Parameter Store supports the following policy types: Expiration,
      ExpirationNotification, and NoChangeNotification.

    - **PolicyStatus** *(string) --*

      The status of the policy. Policies report the following statuses: Pending (the policy
      has not been enforced or applied yet), Finished (the policy was applied), Failed (the
      policy was not applied), or InProgress (the policy is being applied now).
    """


_ClientGetParameterHistoryResponseParametersTypeDef = TypedDict(
    "_ClientGetParameterHistoryResponseParametersTypeDef",
    {
        "Name": str,
        "Type": str,
        "KeyId": str,
        "LastModifiedDate": datetime,
        "LastModifiedUser": str,
        "Description": str,
        "Value": str,
        "AllowedPattern": str,
        "Version": int,
        "Labels": List[str],
        "Tier": str,
        "Policies": List[ClientGetParameterHistoryResponseParametersPoliciesTypeDef],
    },
    total=False,
)


class ClientGetParameterHistoryResponseParametersTypeDef(
    _ClientGetParameterHistoryResponseParametersTypeDef
):
    """
    Type definition for `ClientGetParameterHistoryResponse` `Parameters`

    Information about parameter usage.

    - **Name** *(string) --*

      The name of the parameter.

    - **Type** *(string) --*

      The type of parameter used.

    - **KeyId** *(string) --*

      The ID of the query key used for this parameter.

    - **LastModifiedDate** *(datetime) --*

      Date the parameter was last changed or updated.

    - **LastModifiedUser** *(string) --*

      Amazon Resource Name (ARN) of the AWS user who last changed the parameter.

    - **Description** *(string) --*

      Information about the parameter.

    - **Value** *(string) --*

      The parameter value.

    - **AllowedPattern** *(string) --*

      Parameter names can include the following letters and symbols.

      a-zA-Z0-9_.-

    - **Version** *(integer) --*

      The parameter version.

    - **Labels** *(list) --*

      Labels assigned to the parameter version.

      - *(string) --*

    - **Tier** *(string) --*

      The parameter tier.

    - **Policies** *(list) --*

      Information about the policies assigned to a parameter.

       `Working with Parameter Policies
       <https://docs.aws.amazon.com/systems-manager/latest/userguide/parameter-store-policies.html>`__
       in the *AWS Systems Manager User Guide* .

      - *(dict) --*

        One or more policies assigned to a parameter.

        - **PolicyText** *(string) --*

          The JSON text of the policy.

        - **PolicyType** *(string) --*

          The type of policy. Parameter Store supports the following policy types: Expiration,
          ExpirationNotification, and NoChangeNotification.

        - **PolicyStatus** *(string) --*

          The status of the policy. Policies report the following statuses: Pending (the policy
          has not been enforced or applied yet), Finished (the policy was applied), Failed (the
          policy was not applied), or InProgress (the policy is being applied now).
    """


_ClientGetParameterHistoryResponseTypeDef = TypedDict(
    "_ClientGetParameterHistoryResponseTypeDef",
    {
        "Parameters": List[ClientGetParameterHistoryResponseParametersTypeDef],
        "NextToken": str,
    },
    total=False,
)


class ClientGetParameterHistoryResponseTypeDef(
    _ClientGetParameterHistoryResponseTypeDef
):
    """
    Type definition for `ClientGetParameterHistory` `Response`

    - **Parameters** *(list) --*

      A list of parameters returned by the request.

      - *(dict) --*

        Information about parameter usage.

        - **Name** *(string) --*

          The name of the parameter.

        - **Type** *(string) --*

          The type of parameter used.

        - **KeyId** *(string) --*

          The ID of the query key used for this parameter.

        - **LastModifiedDate** *(datetime) --*

          Date the parameter was last changed or updated.

        - **LastModifiedUser** *(string) --*

          Amazon Resource Name (ARN) of the AWS user who last changed the parameter.

        - **Description** *(string) --*

          Information about the parameter.

        - **Value** *(string) --*

          The parameter value.

        - **AllowedPattern** *(string) --*

          Parameter names can include the following letters and symbols.

          a-zA-Z0-9_.-

        - **Version** *(integer) --*

          The parameter version.

        - **Labels** *(list) --*

          Labels assigned to the parameter version.

          - *(string) --*

        - **Tier** *(string) --*

          The parameter tier.

        - **Policies** *(list) --*

          Information about the policies assigned to a parameter.

           `Working with Parameter Policies
           <https://docs.aws.amazon.com/systems-manager/latest/userguide/parameter-store-policies.html>`__
           in the *AWS Systems Manager User Guide* .

          - *(dict) --*

            One or more policies assigned to a parameter.

            - **PolicyText** *(string) --*

              The JSON text of the policy.

            - **PolicyType** *(string) --*

              The type of policy. Parameter Store supports the following policy types: Expiration,
              ExpirationNotification, and NoChangeNotification.

            - **PolicyStatus** *(string) --*

              The status of the policy. Policies report the following statuses: Pending (the policy
              has not been enforced or applied yet), Finished (the policy was applied), Failed (the
              policy was not applied), or InProgress (the policy is being applied now).

    - **NextToken** *(string) --*

      The token to use when requesting the next set of items. If there are no additional items to
      return, the string is empty.
    """


_ClientGetParameterResponseParameterTypeDef = TypedDict(
    "_ClientGetParameterResponseParameterTypeDef",
    {
        "Name": str,
        "Type": str,
        "Value": str,
        "Version": int,
        "Selector": str,
        "SourceResult": str,
        "LastModifiedDate": datetime,
        "ARN": str,
    },
    total=False,
)


class ClientGetParameterResponseParameterTypeDef(
    _ClientGetParameterResponseParameterTypeDef
):
    """
    Type definition for `ClientGetParameterResponse` `Parameter`

    Information about a parameter.

    - **Name** *(string) --*

      The name of the parameter.

    - **Type** *(string) --*

      The type of parameter. Valid values include the following: String, String list, Secure
      string.

    - **Value** *(string) --*

      The parameter value.

    - **Version** *(integer) --*

      The parameter version.

    - **Selector** *(string) --*

      Either the version number or the label used to retrieve the parameter value. Specify
      selectors by using one of the following formats:

      parameter_name:version

      parameter_name:label

    - **SourceResult** *(string) --*

      Applies to parameters that reference information in other AWS services. SourceResult is the
      raw result or response from the source.

    - **LastModifiedDate** *(datetime) --*

      Date the parameter was last changed or updated and the parameter version was created.

    - **ARN** *(string) --*

      The Amazon Resource Name (ARN) of the parameter.
    """


_ClientGetParameterResponseTypeDef = TypedDict(
    "_ClientGetParameterResponseTypeDef",
    {"Parameter": ClientGetParameterResponseParameterTypeDef},
    total=False,
)


class ClientGetParameterResponseTypeDef(_ClientGetParameterResponseTypeDef):
    """
    Type definition for `ClientGetParameter` `Response`

    - **Parameter** *(dict) --*

      Information about a parameter.

      - **Name** *(string) --*

        The name of the parameter.

      - **Type** *(string) --*

        The type of parameter. Valid values include the following: String, String list, Secure
        string.

      - **Value** *(string) --*

        The parameter value.

      - **Version** *(integer) --*

        The parameter version.

      - **Selector** *(string) --*

        Either the version number or the label used to retrieve the parameter value. Specify
        selectors by using one of the following formats:

        parameter_name:version

        parameter_name:label

      - **SourceResult** *(string) --*

        Applies to parameters that reference information in other AWS services. SourceResult is the
        raw result or response from the source.

      - **LastModifiedDate** *(datetime) --*

        Date the parameter was last changed or updated and the parameter version was created.

      - **ARN** *(string) --*

        The Amazon Resource Name (ARN) of the parameter.
    """


_RequiredClientGetParametersByPathParameterFiltersTypeDef = TypedDict(
    "_RequiredClientGetParametersByPathParameterFiltersTypeDef", {"Key": str}
)
_OptionalClientGetParametersByPathParameterFiltersTypeDef = TypedDict(
    "_OptionalClientGetParametersByPathParameterFiltersTypeDef",
    {"Option": str, "Values": List[str]},
    total=False,
)


class ClientGetParametersByPathParameterFiltersTypeDef(
    _RequiredClientGetParametersByPathParameterFiltersTypeDef,
    _OptionalClientGetParametersByPathParameterFiltersTypeDef,
):
    """
    Type definition for `ClientGetParametersByPath` `ParameterFilters`

    One or more filters. Use a filter to return a more specific list of results.

    .. warning::

      The ``ParameterStringFilter`` object is used by the  DescribeParameters and
      GetParametersByPath API actions. However, not all of the pattern values listed for ``Key``
      can be used with both actions.

      For ``DescribeActions`` , all of the listed patterns are valid, with the exception of
      ``Label`` .

      For ``GetParametersByPath`` , the following patterns listed for ``Key`` are not valid:
      ``Name`` , ``Path`` , and ``Tier`` .

      For examples of CLI commands demonstrating valid parameter filter constructions, see
      `Searching for Systems Manager Parameters
      <http://docs.aws.amazon.com/systems-manager/latest/userguide/parameter-search.html>`__ in the
      *AWS Systems Manager User Guide* .

    - **Key** *(string) --* **[REQUIRED]**

      The name of the filter.

    - **Option** *(string) --*

      For all filters used with  DescribeParameters , valid options include ``Equals`` and
      ``BeginsWith`` . The ``Name`` filter additionally supports the ``Contains`` option.
      (Exception: For filters using the key ``Path`` , valid options include ``Recursive`` and
      ``OneLevel`` .)

      For filters used with  GetParametersByPath , valid options include ``Equals`` and
      ``BeginsWith`` . (Exception: For filters using the key ``Label`` , the only valid option is
      ``Equals`` .)

    - **Values** *(list) --*

      The value you want to search for.

      - *(string) --*
    """


_ClientGetParametersByPathResponseParametersTypeDef = TypedDict(
    "_ClientGetParametersByPathResponseParametersTypeDef",
    {
        "Name": str,
        "Type": str,
        "Value": str,
        "Version": int,
        "Selector": str,
        "SourceResult": str,
        "LastModifiedDate": datetime,
        "ARN": str,
    },
    total=False,
)


class ClientGetParametersByPathResponseParametersTypeDef(
    _ClientGetParametersByPathResponseParametersTypeDef
):
    """
    Type definition for `ClientGetParametersByPathResponse` `Parameters`

    An Amazon EC2 Systems Manager parameter in Parameter Store.

    - **Name** *(string) --*

      The name of the parameter.

    - **Type** *(string) --*

      The type of parameter. Valid values include the following: String, String list, Secure
      string.

    - **Value** *(string) --*

      The parameter value.

    - **Version** *(integer) --*

      The parameter version.

    - **Selector** *(string) --*

      Either the version number or the label used to retrieve the parameter value. Specify
      selectors by using one of the following formats:

      parameter_name:version

      parameter_name:label

    - **SourceResult** *(string) --*

      Applies to parameters that reference information in other AWS services. SourceResult is
      the raw result or response from the source.

    - **LastModifiedDate** *(datetime) --*

      Date the parameter was last changed or updated and the parameter version was created.

    - **ARN** *(string) --*

      The Amazon Resource Name (ARN) of the parameter.
    """


_ClientGetParametersByPathResponseTypeDef = TypedDict(
    "_ClientGetParametersByPathResponseTypeDef",
    {
        "Parameters": List[ClientGetParametersByPathResponseParametersTypeDef],
        "NextToken": str,
    },
    total=False,
)


class ClientGetParametersByPathResponseTypeDef(
    _ClientGetParametersByPathResponseTypeDef
):
    """
    Type definition for `ClientGetParametersByPath` `Response`

    - **Parameters** *(list) --*

      A list of parameters found in the specified hierarchy.

      - *(dict) --*

        An Amazon EC2 Systems Manager parameter in Parameter Store.

        - **Name** *(string) --*

          The name of the parameter.

        - **Type** *(string) --*

          The type of parameter. Valid values include the following: String, String list, Secure
          string.

        - **Value** *(string) --*

          The parameter value.

        - **Version** *(integer) --*

          The parameter version.

        - **Selector** *(string) --*

          Either the version number or the label used to retrieve the parameter value. Specify
          selectors by using one of the following formats:

          parameter_name:version

          parameter_name:label

        - **SourceResult** *(string) --*

          Applies to parameters that reference information in other AWS services. SourceResult is
          the raw result or response from the source.

        - **LastModifiedDate** *(datetime) --*

          Date the parameter was last changed or updated and the parameter version was created.

        - **ARN** *(string) --*

          The Amazon Resource Name (ARN) of the parameter.

    - **NextToken** *(string) --*

      The token for the next set of items to return. Use this token to get the next set of results.
    """


_ClientGetParametersResponseParametersTypeDef = TypedDict(
    "_ClientGetParametersResponseParametersTypeDef",
    {
        "Name": str,
        "Type": str,
        "Value": str,
        "Version": int,
        "Selector": str,
        "SourceResult": str,
        "LastModifiedDate": datetime,
        "ARN": str,
    },
    total=False,
)


class ClientGetParametersResponseParametersTypeDef(
    _ClientGetParametersResponseParametersTypeDef
):
    """
    Type definition for `ClientGetParametersResponse` `Parameters`

    An Amazon EC2 Systems Manager parameter in Parameter Store.

    - **Name** *(string) --*

      The name of the parameter.

    - **Type** *(string) --*

      The type of parameter. Valid values include the following: String, String list, Secure
      string.

    - **Value** *(string) --*

      The parameter value.

    - **Version** *(integer) --*

      The parameter version.

    - **Selector** *(string) --*

      Either the version number or the label used to retrieve the parameter value. Specify
      selectors by using one of the following formats:

      parameter_name:version

      parameter_name:label

    - **SourceResult** *(string) --*

      Applies to parameters that reference information in other AWS services. SourceResult is
      the raw result or response from the source.

    - **LastModifiedDate** *(datetime) --*

      Date the parameter was last changed or updated and the parameter version was created.

    - **ARN** *(string) --*

      The Amazon Resource Name (ARN) of the parameter.
    """


_ClientGetParametersResponseTypeDef = TypedDict(
    "_ClientGetParametersResponseTypeDef",
    {
        "Parameters": List[ClientGetParametersResponseParametersTypeDef],
        "InvalidParameters": List[str],
    },
    total=False,
)


class ClientGetParametersResponseTypeDef(_ClientGetParametersResponseTypeDef):
    """
    Type definition for `ClientGetParameters` `Response`

    - **Parameters** *(list) --*

      A list of details for a parameter.

      - *(dict) --*

        An Amazon EC2 Systems Manager parameter in Parameter Store.

        - **Name** *(string) --*

          The name of the parameter.

        - **Type** *(string) --*

          The type of parameter. Valid values include the following: String, String list, Secure
          string.

        - **Value** *(string) --*

          The parameter value.

        - **Version** *(integer) --*

          The parameter version.

        - **Selector** *(string) --*

          Either the version number or the label used to retrieve the parameter value. Specify
          selectors by using one of the following formats:

          parameter_name:version

          parameter_name:label

        - **SourceResult** *(string) --*

          Applies to parameters that reference information in other AWS services. SourceResult is
          the raw result or response from the source.

        - **LastModifiedDate** *(datetime) --*

          Date the parameter was last changed or updated and the parameter version was created.

        - **ARN** *(string) --*

          The Amazon Resource Name (ARN) of the parameter.

    - **InvalidParameters** *(list) --*

      A list of parameters that are not formatted correctly or do not run during an execution.

      - *(string) --*
    """


_ClientGetPatchBaselineForPatchGroupResponseTypeDef = TypedDict(
    "_ClientGetPatchBaselineForPatchGroupResponseTypeDef",
    {"BaselineId": str, "PatchGroup": str, "OperatingSystem": str},
    total=False,
)


class ClientGetPatchBaselineForPatchGroupResponseTypeDef(
    _ClientGetPatchBaselineForPatchGroupResponseTypeDef
):
    """
    Type definition for `ClientGetPatchBaselineForPatchGroup` `Response`

    - **BaselineId** *(string) --*

      The ID of the patch baseline that should be used for the patch group.

    - **PatchGroup** *(string) --*

      The name of the patch group.

    - **OperatingSystem** *(string) --*

      The operating system rule specified for patch groups using the patch baseline.
    """


_ClientGetPatchBaselineResponseApprovalRulesPatchRulesPatchFilterGroupPatchFiltersTypeDef = TypedDict(
    "_ClientGetPatchBaselineResponseApprovalRulesPatchRulesPatchFilterGroupPatchFiltersTypeDef",
    {"Key": str, "Values": List[str]},
    total=False,
)


class ClientGetPatchBaselineResponseApprovalRulesPatchRulesPatchFilterGroupPatchFiltersTypeDef(
    _ClientGetPatchBaselineResponseApprovalRulesPatchRulesPatchFilterGroupPatchFiltersTypeDef
):
    """
    Type definition for `ClientGetPatchBaselineResponseApprovalRulesPatchRulesPatchFilterGroup` `PatchFilters`

    Defines which patches should be included in a patch baseline.

    A patch filter consists of a key and a set of values. The filter key is a patch
    property. For example, the available filter keys for WINDOWS are PATCH_SET,
    PRODUCT, PRODUCT_FAMILY, CLASSIFICATION, and MSRC_SEVERITY. The filter values
    define a matching criterion for the patch property indicated by the key. For
    example, if the filter key is PRODUCT and the filter values are ["Office 2013",
    "Office 2016"], then the filter accepts all patches where product name is either
    "Office 2013" or "Office 2016". The filter values can be exact values for the patch
    property given as a key, or a wildcard (*), which matches all values.

    You can view lists of valid values for the patch properties by running the
    ``DescribePatchProperties`` command. For information about which patch properties
    can be used with each major operating system, see  DescribePatchProperties .

    - **Key** *(string) --*

      The key for the filter.

      Run the  DescribePatchProperties command to view lists of valid keys for each
      operating system type.

    - **Values** *(list) --*

      The value for the filter key.

      Run the  DescribePatchProperties command to view lists of valid values for each
      key based on operating system type.

      - *(string) --*
    """


_ClientGetPatchBaselineResponseApprovalRulesPatchRulesPatchFilterGroupTypeDef = TypedDict(
    "_ClientGetPatchBaselineResponseApprovalRulesPatchRulesPatchFilterGroupTypeDef",
    {
        "PatchFilters": List[
            ClientGetPatchBaselineResponseApprovalRulesPatchRulesPatchFilterGroupPatchFiltersTypeDef
        ]
    },
    total=False,
)


class ClientGetPatchBaselineResponseApprovalRulesPatchRulesPatchFilterGroupTypeDef(
    _ClientGetPatchBaselineResponseApprovalRulesPatchRulesPatchFilterGroupTypeDef
):
    """
    Type definition for `ClientGetPatchBaselineResponseApprovalRulesPatchRules` `PatchFilterGroup`

    The patch filter group that defines the criteria for the rule.

    - **PatchFilters** *(list) --*

      The set of patch filters that make up the group.

      - *(dict) --*

        Defines which patches should be included in a patch baseline.

        A patch filter consists of a key and a set of values. The filter key is a patch
        property. For example, the available filter keys for WINDOWS are PATCH_SET,
        PRODUCT, PRODUCT_FAMILY, CLASSIFICATION, and MSRC_SEVERITY. The filter values
        define a matching criterion for the patch property indicated by the key. For
        example, if the filter key is PRODUCT and the filter values are ["Office 2013",
        "Office 2016"], then the filter accepts all patches where product name is either
        "Office 2013" or "Office 2016". The filter values can be exact values for the patch
        property given as a key, or a wildcard (*), which matches all values.

        You can view lists of valid values for the patch properties by running the
        ``DescribePatchProperties`` command. For information about which patch properties
        can be used with each major operating system, see  DescribePatchProperties .

        - **Key** *(string) --*

          The key for the filter.

          Run the  DescribePatchProperties command to view lists of valid keys for each
          operating system type.

        - **Values** *(list) --*

          The value for the filter key.

          Run the  DescribePatchProperties command to view lists of valid values for each
          key based on operating system type.

          - *(string) --*
    """


_ClientGetPatchBaselineResponseApprovalRulesPatchRulesTypeDef = TypedDict(
    "_ClientGetPatchBaselineResponseApprovalRulesPatchRulesTypeDef",
    {
        "PatchFilterGroup": ClientGetPatchBaselineResponseApprovalRulesPatchRulesPatchFilterGroupTypeDef,
        "ComplianceLevel": str,
        "ApproveAfterDays": int,
        "EnableNonSecurity": bool,
    },
    total=False,
)


class ClientGetPatchBaselineResponseApprovalRulesPatchRulesTypeDef(
    _ClientGetPatchBaselineResponseApprovalRulesPatchRulesTypeDef
):
    """
    Type definition for `ClientGetPatchBaselineResponseApprovalRules` `PatchRules`

    Defines an approval rule for a patch baseline.

    - **PatchFilterGroup** *(dict) --*

      The patch filter group that defines the criteria for the rule.

      - **PatchFilters** *(list) --*

        The set of patch filters that make up the group.

        - *(dict) --*

          Defines which patches should be included in a patch baseline.

          A patch filter consists of a key and a set of values. The filter key is a patch
          property. For example, the available filter keys for WINDOWS are PATCH_SET,
          PRODUCT, PRODUCT_FAMILY, CLASSIFICATION, and MSRC_SEVERITY. The filter values
          define a matching criterion for the patch property indicated by the key. For
          example, if the filter key is PRODUCT and the filter values are ["Office 2013",
          "Office 2016"], then the filter accepts all patches where product name is either
          "Office 2013" or "Office 2016". The filter values can be exact values for the patch
          property given as a key, or a wildcard (*), which matches all values.

          You can view lists of valid values for the patch properties by running the
          ``DescribePatchProperties`` command. For information about which patch properties
          can be used with each major operating system, see  DescribePatchProperties .

          - **Key** *(string) --*

            The key for the filter.

            Run the  DescribePatchProperties command to view lists of valid keys for each
            operating system type.

          - **Values** *(list) --*

            The value for the filter key.

            Run the  DescribePatchProperties command to view lists of valid values for each
            key based on operating system type.

            - *(string) --*

    - **ComplianceLevel** *(string) --*

      A compliance severity level for all approved patches in a patch baseline. Valid
      compliance severity levels include the following: Unspecified, Critical, High, Medium,
      Low, and Informational.

    - **ApproveAfterDays** *(integer) --*

      The number of days after the release date of each patch matched by the rule that the
      patch is marked as approved in the patch baseline. For example, a value of ``7`` means
      that patches are approved seven days after they are released.

    - **EnableNonSecurity** *(boolean) --*

      For instances identified by the approval rule filters, enables a patch baseline to
      apply non-security updates available in the specified repository. The default value is
      'false'. Applies to Linux instances only.
    """


_ClientGetPatchBaselineResponseApprovalRulesTypeDef = TypedDict(
    "_ClientGetPatchBaselineResponseApprovalRulesTypeDef",
    {"PatchRules": List[ClientGetPatchBaselineResponseApprovalRulesPatchRulesTypeDef]},
    total=False,
)


class ClientGetPatchBaselineResponseApprovalRulesTypeDef(
    _ClientGetPatchBaselineResponseApprovalRulesTypeDef
):
    """
    Type definition for `ClientGetPatchBaselineResponse` `ApprovalRules`

    A set of rules used to include patches in the baseline.

    - **PatchRules** *(list) --*

      The rules that make up the rule group.

      - *(dict) --*

        Defines an approval rule for a patch baseline.

        - **PatchFilterGroup** *(dict) --*

          The patch filter group that defines the criteria for the rule.

          - **PatchFilters** *(list) --*

            The set of patch filters that make up the group.

            - *(dict) --*

              Defines which patches should be included in a patch baseline.

              A patch filter consists of a key and a set of values. The filter key is a patch
              property. For example, the available filter keys for WINDOWS are PATCH_SET,
              PRODUCT, PRODUCT_FAMILY, CLASSIFICATION, and MSRC_SEVERITY. The filter values
              define a matching criterion for the patch property indicated by the key. For
              example, if the filter key is PRODUCT and the filter values are ["Office 2013",
              "Office 2016"], then the filter accepts all patches where product name is either
              "Office 2013" or "Office 2016". The filter values can be exact values for the patch
              property given as a key, or a wildcard (*), which matches all values.

              You can view lists of valid values for the patch properties by running the
              ``DescribePatchProperties`` command. For information about which patch properties
              can be used with each major operating system, see  DescribePatchProperties .

              - **Key** *(string) --*

                The key for the filter.

                Run the  DescribePatchProperties command to view lists of valid keys for each
                operating system type.

              - **Values** *(list) --*

                The value for the filter key.

                Run the  DescribePatchProperties command to view lists of valid values for each
                key based on operating system type.

                - *(string) --*

        - **ComplianceLevel** *(string) --*

          A compliance severity level for all approved patches in a patch baseline. Valid
          compliance severity levels include the following: Unspecified, Critical, High, Medium,
          Low, and Informational.

        - **ApproveAfterDays** *(integer) --*

          The number of days after the release date of each patch matched by the rule that the
          patch is marked as approved in the patch baseline. For example, a value of ``7`` means
          that patches are approved seven days after they are released.

        - **EnableNonSecurity** *(boolean) --*

          For instances identified by the approval rule filters, enables a patch baseline to
          apply non-security updates available in the specified repository. The default value is
          'false'. Applies to Linux instances only.
    """


_ClientGetPatchBaselineResponseGlobalFiltersPatchFiltersTypeDef = TypedDict(
    "_ClientGetPatchBaselineResponseGlobalFiltersPatchFiltersTypeDef",
    {"Key": str, "Values": List[str]},
    total=False,
)


class ClientGetPatchBaselineResponseGlobalFiltersPatchFiltersTypeDef(
    _ClientGetPatchBaselineResponseGlobalFiltersPatchFiltersTypeDef
):
    """
    Type definition for `ClientGetPatchBaselineResponseGlobalFilters` `PatchFilters`

    Defines which patches should be included in a patch baseline.

    A patch filter consists of a key and a set of values. The filter key is a patch property.
    For example, the available filter keys for WINDOWS are PATCH_SET, PRODUCT,
    PRODUCT_FAMILY, CLASSIFICATION, and MSRC_SEVERITY. The filter values define a matching
    criterion for the patch property indicated by the key. For example, if the filter key is
    PRODUCT and the filter values are ["Office 2013", "Office 2016"], then the filter accepts
    all patches where product name is either "Office 2013" or "Office 2016". The filter
    values can be exact values for the patch property given as a key, or a wildcard (*),
    which matches all values.

    You can view lists of valid values for the patch properties by running the
    ``DescribePatchProperties`` command. For information about which patch properties can be
    used with each major operating system, see  DescribePatchProperties .

    - **Key** *(string) --*

      The key for the filter.

      Run the  DescribePatchProperties command to view lists of valid keys for each operating
      system type.

    - **Values** *(list) --*

      The value for the filter key.

      Run the  DescribePatchProperties command to view lists of valid values for each key
      based on operating system type.

      - *(string) --*
    """


_ClientGetPatchBaselineResponseGlobalFiltersTypeDef = TypedDict(
    "_ClientGetPatchBaselineResponseGlobalFiltersTypeDef",
    {
        "PatchFilters": List[
            ClientGetPatchBaselineResponseGlobalFiltersPatchFiltersTypeDef
        ]
    },
    total=False,
)


class ClientGetPatchBaselineResponseGlobalFiltersTypeDef(
    _ClientGetPatchBaselineResponseGlobalFiltersTypeDef
):
    """
    Type definition for `ClientGetPatchBaselineResponse` `GlobalFilters`

    A set of global filters used to exclude patches from the baseline.

    - **PatchFilters** *(list) --*

      The set of patch filters that make up the group.

      - *(dict) --*

        Defines which patches should be included in a patch baseline.

        A patch filter consists of a key and a set of values. The filter key is a patch property.
        For example, the available filter keys for WINDOWS are PATCH_SET, PRODUCT,
        PRODUCT_FAMILY, CLASSIFICATION, and MSRC_SEVERITY. The filter values define a matching
        criterion for the patch property indicated by the key. For example, if the filter key is
        PRODUCT and the filter values are ["Office 2013", "Office 2016"], then the filter accepts
        all patches where product name is either "Office 2013" or "Office 2016". The filter
        values can be exact values for the patch property given as a key, or a wildcard (*),
        which matches all values.

        You can view lists of valid values for the patch properties by running the
        ``DescribePatchProperties`` command. For information about which patch properties can be
        used with each major operating system, see  DescribePatchProperties .

        - **Key** *(string) --*

          The key for the filter.

          Run the  DescribePatchProperties command to view lists of valid keys for each operating
          system type.

        - **Values** *(list) --*

          The value for the filter key.

          Run the  DescribePatchProperties command to view lists of valid values for each key
          based on operating system type.

          - *(string) --*
    """


_ClientGetPatchBaselineResponseSourcesTypeDef = TypedDict(
    "_ClientGetPatchBaselineResponseSourcesTypeDef",
    {"Name": str, "Products": List[str], "Configuration": str},
    total=False,
)


class ClientGetPatchBaselineResponseSourcesTypeDef(
    _ClientGetPatchBaselineResponseSourcesTypeDef
):
    """
    Type definition for `ClientGetPatchBaselineResponse` `Sources`

    Information about the patches to use to update the instances, including target operating
    systems and source repository. Applies to Linux instances only.

    - **Name** *(string) --*

      The name specified to identify the patch source.

    - **Products** *(list) --*

      The specific operating system versions a patch repository applies to, such as
      "Ubuntu16.04", "AmazonLinux2016.09", "RedhatEnterpriseLinux7.2" or "Suse12.7". For lists
      of supported product values, see  PatchFilter .

      - *(string) --*

    - **Configuration** *(string) --*

      The value of the yum repo configuration. For example:

       ``[main]``

       ``cachedir=/var/cache/yum/$basesearch$releasever``

       ``keepcache=0``

       ``debuglevel=2``
    """


_ClientGetPatchBaselineResponseTypeDef = TypedDict(
    "_ClientGetPatchBaselineResponseTypeDef",
    {
        "BaselineId": str,
        "Name": str,
        "OperatingSystem": str,
        "GlobalFilters": ClientGetPatchBaselineResponseGlobalFiltersTypeDef,
        "ApprovalRules": ClientGetPatchBaselineResponseApprovalRulesTypeDef,
        "ApprovedPatches": List[str],
        "ApprovedPatchesComplianceLevel": str,
        "ApprovedPatchesEnableNonSecurity": bool,
        "RejectedPatches": List[str],
        "RejectedPatchesAction": str,
        "PatchGroups": List[str],
        "CreatedDate": datetime,
        "ModifiedDate": datetime,
        "Description": str,
        "Sources": List[ClientGetPatchBaselineResponseSourcesTypeDef],
    },
    total=False,
)


class ClientGetPatchBaselineResponseTypeDef(_ClientGetPatchBaselineResponseTypeDef):
    """
    Type definition for `ClientGetPatchBaseline` `Response`

    - **BaselineId** *(string) --*

      The ID of the retrieved patch baseline.

    - **Name** *(string) --*

      The name of the patch baseline.

    - **OperatingSystem** *(string) --*

      Returns the operating system specified for the patch baseline.

    - **GlobalFilters** *(dict) --*

      A set of global filters used to exclude patches from the baseline.

      - **PatchFilters** *(list) --*

        The set of patch filters that make up the group.

        - *(dict) --*

          Defines which patches should be included in a patch baseline.

          A patch filter consists of a key and a set of values. The filter key is a patch property.
          For example, the available filter keys for WINDOWS are PATCH_SET, PRODUCT,
          PRODUCT_FAMILY, CLASSIFICATION, and MSRC_SEVERITY. The filter values define a matching
          criterion for the patch property indicated by the key. For example, if the filter key is
          PRODUCT and the filter values are ["Office 2013", "Office 2016"], then the filter accepts
          all patches where product name is either "Office 2013" or "Office 2016". The filter
          values can be exact values for the patch property given as a key, or a wildcard (*),
          which matches all values.

          You can view lists of valid values for the patch properties by running the
          ``DescribePatchProperties`` command. For information about which patch properties can be
          used with each major operating system, see  DescribePatchProperties .

          - **Key** *(string) --*

            The key for the filter.

            Run the  DescribePatchProperties command to view lists of valid keys for each operating
            system type.

          - **Values** *(list) --*

            The value for the filter key.

            Run the  DescribePatchProperties command to view lists of valid values for each key
            based on operating system type.

            - *(string) --*

    - **ApprovalRules** *(dict) --*

      A set of rules used to include patches in the baseline.

      - **PatchRules** *(list) --*

        The rules that make up the rule group.

        - *(dict) --*

          Defines an approval rule for a patch baseline.

          - **PatchFilterGroup** *(dict) --*

            The patch filter group that defines the criteria for the rule.

            - **PatchFilters** *(list) --*

              The set of patch filters that make up the group.

              - *(dict) --*

                Defines which patches should be included in a patch baseline.

                A patch filter consists of a key and a set of values. The filter key is a patch
                property. For example, the available filter keys for WINDOWS are PATCH_SET,
                PRODUCT, PRODUCT_FAMILY, CLASSIFICATION, and MSRC_SEVERITY. The filter values
                define a matching criterion for the patch property indicated by the key. For
                example, if the filter key is PRODUCT and the filter values are ["Office 2013",
                "Office 2016"], then the filter accepts all patches where product name is either
                "Office 2013" or "Office 2016". The filter values can be exact values for the patch
                property given as a key, or a wildcard (*), which matches all values.

                You can view lists of valid values for the patch properties by running the
                ``DescribePatchProperties`` command. For information about which patch properties
                can be used with each major operating system, see  DescribePatchProperties .

                - **Key** *(string) --*

                  The key for the filter.

                  Run the  DescribePatchProperties command to view lists of valid keys for each
                  operating system type.

                - **Values** *(list) --*

                  The value for the filter key.

                  Run the  DescribePatchProperties command to view lists of valid values for each
                  key based on operating system type.

                  - *(string) --*

          - **ComplianceLevel** *(string) --*

            A compliance severity level for all approved patches in a patch baseline. Valid
            compliance severity levels include the following: Unspecified, Critical, High, Medium,
            Low, and Informational.

          - **ApproveAfterDays** *(integer) --*

            The number of days after the release date of each patch matched by the rule that the
            patch is marked as approved in the patch baseline. For example, a value of ``7`` means
            that patches are approved seven days after they are released.

          - **EnableNonSecurity** *(boolean) --*

            For instances identified by the approval rule filters, enables a patch baseline to
            apply non-security updates available in the specified repository. The default value is
            'false'. Applies to Linux instances only.

    - **ApprovedPatches** *(list) --*

      A list of explicitly approved patches for the baseline.

      - *(string) --*

    - **ApprovedPatchesComplianceLevel** *(string) --*

      Returns the specified compliance severity level for approved patches in the patch baseline.

    - **ApprovedPatchesEnableNonSecurity** *(boolean) --*

      Indicates whether the list of approved patches includes non-security updates that should be
      applied to the instances. The default value is 'false'. Applies to Linux instances only.

    - **RejectedPatches** *(list) --*

      A list of explicitly rejected patches for the baseline.

      - *(string) --*

    - **RejectedPatchesAction** *(string) --*

      The action specified to take on patches included in the RejectedPatches list. A patch can be
      allowed only if it is a dependency of another package, or blocked entirely along with
      packages that include it as a dependency.

    - **PatchGroups** *(list) --*

      Patch groups included in the patch baseline.

      - *(string) --*

    - **CreatedDate** *(datetime) --*

      The date the patch baseline was created.

    - **ModifiedDate** *(datetime) --*

      The date the patch baseline was last modified.

    - **Description** *(string) --*

      A description of the patch baseline.

    - **Sources** *(list) --*

      Information about the patches to use to update the instances, including target operating
      systems and source repositories. Applies to Linux instances only.

      - *(dict) --*

        Information about the patches to use to update the instances, including target operating
        systems and source repository. Applies to Linux instances only.

        - **Name** *(string) --*

          The name specified to identify the patch source.

        - **Products** *(list) --*

          The specific operating system versions a patch repository applies to, such as
          "Ubuntu16.04", "AmazonLinux2016.09", "RedhatEnterpriseLinux7.2" or "Suse12.7". For lists
          of supported product values, see  PatchFilter .

          - *(string) --*

        - **Configuration** *(string) --*

          The value of the yum repo configuration. For example:

           ``[main]``

           ``cachedir=/var/cache/yum/$basesearch$releasever``

           ``keepcache=0``

           ``debuglevel=2``
    """


_ClientGetServiceSettingResponseServiceSettingTypeDef = TypedDict(
    "_ClientGetServiceSettingResponseServiceSettingTypeDef",
    {
        "SettingId": str,
        "SettingValue": str,
        "LastModifiedDate": datetime,
        "LastModifiedUser": str,
        "ARN": str,
        "Status": str,
    },
    total=False,
)


class ClientGetServiceSettingResponseServiceSettingTypeDef(
    _ClientGetServiceSettingResponseServiceSettingTypeDef
):
    """
    Type definition for `ClientGetServiceSettingResponse` `ServiceSetting`

    The query result of the current service setting.

    - **SettingId** *(string) --*

      The ID of the service setting.

    - **SettingValue** *(string) --*

      The value of the service setting.

    - **LastModifiedDate** *(datetime) --*

      The last time the service setting was modified.

    - **LastModifiedUser** *(string) --*

      The ARN of the last modified user. This field is populated only if the setting value was
      overwritten.

    - **ARN** *(string) --*

      The ARN of the service setting.

    - **Status** *(string) --*

      The status of the service setting. The value can be Default, Customized or PendingUpdate.

      * Default: The current setting uses a default value provisioned by the AWS service team.

      * Customized: The current setting use a custom value specified by the customer.

      * PendingUpdate: The current setting uses a default or custom value, but a setting change
      request is pending approval.
    """


_ClientGetServiceSettingResponseTypeDef = TypedDict(
    "_ClientGetServiceSettingResponseTypeDef",
    {"ServiceSetting": ClientGetServiceSettingResponseServiceSettingTypeDef},
    total=False,
)


class ClientGetServiceSettingResponseTypeDef(_ClientGetServiceSettingResponseTypeDef):
    """
    Type definition for `ClientGetServiceSetting` `Response`

    The query result body of the GetServiceSetting API action.

    - **ServiceSetting** *(dict) --*

      The query result of the current service setting.

      - **SettingId** *(string) --*

        The ID of the service setting.

      - **SettingValue** *(string) --*

        The value of the service setting.

      - **LastModifiedDate** *(datetime) --*

        The last time the service setting was modified.

      - **LastModifiedUser** *(string) --*

        The ARN of the last modified user. This field is populated only if the setting value was
        overwritten.

      - **ARN** *(string) --*

        The ARN of the service setting.

      - **Status** *(string) --*

        The status of the service setting. The value can be Default, Customized or PendingUpdate.

        * Default: The current setting uses a default value provisioned by the AWS service team.

        * Customized: The current setting use a custom value specified by the customer.

        * PendingUpdate: The current setting uses a default or custom value, but a setting change
        request is pending approval.
    """


_ClientLabelParameterVersionResponseTypeDef = TypedDict(
    "_ClientLabelParameterVersionResponseTypeDef",
    {"InvalidLabels": List[str], "ParameterVersion": int},
    total=False,
)


class ClientLabelParameterVersionResponseTypeDef(
    _ClientLabelParameterVersionResponseTypeDef
):
    """
    Type definition for `ClientLabelParameterVersion` `Response`

    - **InvalidLabels** *(list) --*

      The label does not meet the requirements. For information about parameter label requirements,
      see `Labeling Parameters
      <http://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-paramstore-labels.html>`__
      in the *AWS Systems Manager User Guide* .

      - *(string) --*

    - **ParameterVersion** *(integer) --*

      The version of the parameter that has been labeled.
    """


_ClientListAssociationVersionsResponseAssociationVersionsOutputLocationS3LocationTypeDef = TypedDict(
    "_ClientListAssociationVersionsResponseAssociationVersionsOutputLocationS3LocationTypeDef",
    {"OutputS3Region": str, "OutputS3BucketName": str, "OutputS3KeyPrefix": str},
    total=False,
)


class ClientListAssociationVersionsResponseAssociationVersionsOutputLocationS3LocationTypeDef(
    _ClientListAssociationVersionsResponseAssociationVersionsOutputLocationS3LocationTypeDef
):
    """
    Type definition for `ClientListAssociationVersionsResponseAssociationVersionsOutputLocation` `S3Location`

    An Amazon S3 bucket where you want to store the results of this request.

    - **OutputS3Region** *(string) --*

      (Deprecated) You can no longer specify this parameter. The system ignores it.
      Instead, Systems Manager automatically determines the Amazon S3 bucket region.

    - **OutputS3BucketName** *(string) --*

      The name of the Amazon S3 bucket.

    - **OutputS3KeyPrefix** *(string) --*

      The Amazon S3 bucket subfolder.
    """


_ClientListAssociationVersionsResponseAssociationVersionsOutputLocationTypeDef = TypedDict(
    "_ClientListAssociationVersionsResponseAssociationVersionsOutputLocationTypeDef",
    {
        "S3Location": ClientListAssociationVersionsResponseAssociationVersionsOutputLocationS3LocationTypeDef
    },
    total=False,
)


class ClientListAssociationVersionsResponseAssociationVersionsOutputLocationTypeDef(
    _ClientListAssociationVersionsResponseAssociationVersionsOutputLocationTypeDef
):
    """
    Type definition for `ClientListAssociationVersionsResponseAssociationVersions` `OutputLocation`

    The location in Amazon S3 specified for the association when the association version was
    created.

    - **S3Location** *(dict) --*

      An Amazon S3 bucket where you want to store the results of this request.

      - **OutputS3Region** *(string) --*

        (Deprecated) You can no longer specify this parameter. The system ignores it.
        Instead, Systems Manager automatically determines the Amazon S3 bucket region.

      - **OutputS3BucketName** *(string) --*

        The name of the Amazon S3 bucket.

      - **OutputS3KeyPrefix** *(string) --*

        The Amazon S3 bucket subfolder.
    """


_ClientListAssociationVersionsResponseAssociationVersionsTargetsTypeDef = TypedDict(
    "_ClientListAssociationVersionsResponseAssociationVersionsTargetsTypeDef",
    {"Key": str, "Values": List[str]},
    total=False,
)


class ClientListAssociationVersionsResponseAssociationVersionsTargetsTypeDef(
    _ClientListAssociationVersionsResponseAssociationVersionsTargetsTypeDef
):
    """
    Type definition for `ClientListAssociationVersionsResponseAssociationVersions` `Targets`

    An array of search criteria that targets instances using a Key,Value combination that
    you specify.

    Supported formats include the following.

    * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

    * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

    * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

    * (Maintenance window targets only)
    ``Key=resource-groups:Name,Values=*resource-group-name* ``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

    For example:

    * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

    * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

    * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

    * (Maintenance window targets only)
    ``Key=resource-groups:Name,Values=ProductionResourceGroup``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC*
    ``

    For information about how to send commands that target instances using ``Key,Value``
    parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
    <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
    in the *AWS Systems Manager User Guide* .

    - **Key** *(string) --*

      User-defined criteria for sending commands that target instances that meet the
      criteria.

    - **Values** *(list) --*

      User-defined criteria that maps to ``Key`` . For example, if you specified
      ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
      instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

      - *(string) --*
    """


_ClientListAssociationVersionsResponseAssociationVersionsTypeDef = TypedDict(
    "_ClientListAssociationVersionsResponseAssociationVersionsTypeDef",
    {
        "AssociationId": str,
        "AssociationVersion": str,
        "CreatedDate": datetime,
        "Name": str,
        "DocumentVersion": str,
        "Parameters": Dict[str, List[str]],
        "Targets": List[
            ClientListAssociationVersionsResponseAssociationVersionsTargetsTypeDef
        ],
        "ScheduleExpression": str,
        "OutputLocation": ClientListAssociationVersionsResponseAssociationVersionsOutputLocationTypeDef,
        "AssociationName": str,
        "MaxErrors": str,
        "MaxConcurrency": str,
        "ComplianceSeverity": str,
    },
    total=False,
)


class ClientListAssociationVersionsResponseAssociationVersionsTypeDef(
    _ClientListAssociationVersionsResponseAssociationVersionsTypeDef
):
    """
    Type definition for `ClientListAssociationVersionsResponse` `AssociationVersions`

    Information about the association version.

    - **AssociationId** *(string) --*

      The ID created by the system when the association was created.

    - **AssociationVersion** *(string) --*

      The association version.

    - **CreatedDate** *(datetime) --*

      The date the association version was created.

    - **Name** *(string) --*

      The name specified when the association was created.

    - **DocumentVersion** *(string) --*

      The version of a Systems Manager document used when the association version was created.

    - **Parameters** *(dict) --*

      Parameters specified when the association version was created.

      - *(string) --*

        - *(list) --*

          - *(string) --*

    - **Targets** *(list) --*

      The targets specified for the association when the association version was created.

      - *(dict) --*

        An array of search criteria that targets instances using a Key,Value combination that
        you specify.

        Supported formats include the following.

        * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

        * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

        * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

        * (Maintenance window targets only)
        ``Key=resource-groups:Name,Values=*resource-group-name* ``

        * (Maintenance window targets only)
        ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

        For example:

        * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

        * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

        * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

        * (Maintenance window targets only)
        ``Key=resource-groups:Name,Values=ProductionResourceGroup``

        * (Maintenance window targets only)
        ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC*
        ``

        For information about how to send commands that target instances using ``Key,Value``
        parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
        <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
        in the *AWS Systems Manager User Guide* .

        - **Key** *(string) --*

          User-defined criteria for sending commands that target instances that meet the
          criteria.

        - **Values** *(list) --*

          User-defined criteria that maps to ``Key`` . For example, if you specified
          ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
          instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

          - *(string) --*

    - **ScheduleExpression** *(string) --*

      The cron or rate schedule specified for the association when the association version was
      created.

    - **OutputLocation** *(dict) --*

      The location in Amazon S3 specified for the association when the association version was
      created.

      - **S3Location** *(dict) --*

        An Amazon S3 bucket where you want to store the results of this request.

        - **OutputS3Region** *(string) --*

          (Deprecated) You can no longer specify this parameter. The system ignores it.
          Instead, Systems Manager automatically determines the Amazon S3 bucket region.

        - **OutputS3BucketName** *(string) --*

          The name of the Amazon S3 bucket.

        - **OutputS3KeyPrefix** *(string) --*

          The Amazon S3 bucket subfolder.

    - **AssociationName** *(string) --*

      The name specified for the association version when the association version was created.

    - **MaxErrors** *(string) --*

      The number of errors that are allowed before the system stops sending requests to run the
      association on additional targets. You can specify either an absolute number of errors,
      for example 10, or a percentage of the target set, for example 10%. If you specify 3, for
      example, the system stops sending requests when the fourth error is received. If you
      specify 0, then the system stops sending requests after the first error is returned. If
      you run an association on 50 instances and set MaxError to 10%, then the system stops
      sending the request when the sixth error is received.

      Executions that are already running an association when MaxErrors is reached are allowed
      to complete, but some of these executions may fail as well. If you need to ensure that
      there won't be more than max-errors failed executions, set MaxConcurrency to 1 so that
      executions proceed one at a time.

    - **MaxConcurrency** *(string) --*

      The maximum number of targets allowed to run the association at the same time. You can
      specify a number, for example 10, or a percentage of the target set, for example 10%. The
      default value is 100%, which means all targets run the association at the same time.

      If a new instance starts and attempts to run an association while Systems Manager is
      running MaxConcurrency associations, the association is allowed to run. During the next
      association interval, the new instance will process its association within the limit
      specified for MaxConcurrency.

    - **ComplianceSeverity** *(string) --*

      The severity level that is assigned to the association.
    """


_ClientListAssociationVersionsResponseTypeDef = TypedDict(
    "_ClientListAssociationVersionsResponseTypeDef",
    {
        "AssociationVersions": List[
            ClientListAssociationVersionsResponseAssociationVersionsTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)


class ClientListAssociationVersionsResponseTypeDef(
    _ClientListAssociationVersionsResponseTypeDef
):
    """
    Type definition for `ClientListAssociationVersions` `Response`

    - **AssociationVersions** *(list) --*

      Information about all versions of the association for the specified association ID.

      - *(dict) --*

        Information about the association version.

        - **AssociationId** *(string) --*

          The ID created by the system when the association was created.

        - **AssociationVersion** *(string) --*

          The association version.

        - **CreatedDate** *(datetime) --*

          The date the association version was created.

        - **Name** *(string) --*

          The name specified when the association was created.

        - **DocumentVersion** *(string) --*

          The version of a Systems Manager document used when the association version was created.

        - **Parameters** *(dict) --*

          Parameters specified when the association version was created.

          - *(string) --*

            - *(list) --*

              - *(string) --*

        - **Targets** *(list) --*

          The targets specified for the association when the association version was created.

          - *(dict) --*

            An array of search criteria that targets instances using a Key,Value combination that
            you specify.

            Supported formats include the following.

            * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

            * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

            * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

            * (Maintenance window targets only)
            ``Key=resource-groups:Name,Values=*resource-group-name* ``

            * (Maintenance window targets only)
            ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

            For example:

            * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

            * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

            * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

            * (Maintenance window targets only)
            ``Key=resource-groups:Name,Values=ProductionResourceGroup``

            * (Maintenance window targets only)
            ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC*
            ``

            For information about how to send commands that target instances using ``Key,Value``
            parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
            <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
            in the *AWS Systems Manager User Guide* .

            - **Key** *(string) --*

              User-defined criteria for sending commands that target instances that meet the
              criteria.

            - **Values** *(list) --*

              User-defined criteria that maps to ``Key`` . For example, if you specified
              ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
              instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

              - *(string) --*

        - **ScheduleExpression** *(string) --*

          The cron or rate schedule specified for the association when the association version was
          created.

        - **OutputLocation** *(dict) --*

          The location in Amazon S3 specified for the association when the association version was
          created.

          - **S3Location** *(dict) --*

            An Amazon S3 bucket where you want to store the results of this request.

            - **OutputS3Region** *(string) --*

              (Deprecated) You can no longer specify this parameter. The system ignores it.
              Instead, Systems Manager automatically determines the Amazon S3 bucket region.

            - **OutputS3BucketName** *(string) --*

              The name of the Amazon S3 bucket.

            - **OutputS3KeyPrefix** *(string) --*

              The Amazon S3 bucket subfolder.

        - **AssociationName** *(string) --*

          The name specified for the association version when the association version was created.

        - **MaxErrors** *(string) --*

          The number of errors that are allowed before the system stops sending requests to run the
          association on additional targets. You can specify either an absolute number of errors,
          for example 10, or a percentage of the target set, for example 10%. If you specify 3, for
          example, the system stops sending requests when the fourth error is received. If you
          specify 0, then the system stops sending requests after the first error is returned. If
          you run an association on 50 instances and set MaxError to 10%, then the system stops
          sending the request when the sixth error is received.

          Executions that are already running an association when MaxErrors is reached are allowed
          to complete, but some of these executions may fail as well. If you need to ensure that
          there won't be more than max-errors failed executions, set MaxConcurrency to 1 so that
          executions proceed one at a time.

        - **MaxConcurrency** *(string) --*

          The maximum number of targets allowed to run the association at the same time. You can
          specify a number, for example 10, or a percentage of the target set, for example 10%. The
          default value is 100%, which means all targets run the association at the same time.

          If a new instance starts and attempts to run an association while Systems Manager is
          running MaxConcurrency associations, the association is allowed to run. During the next
          association interval, the new instance will process its association within the limit
          specified for MaxConcurrency.

        - **ComplianceSeverity** *(string) --*

          The severity level that is assigned to the association.

    - **NextToken** *(string) --*

      The token for the next set of items to return. Use this token to get the next set of results.
    """


_ClientListAssociationsAssociationFilterListTypeDef = TypedDict(
    "_ClientListAssociationsAssociationFilterListTypeDef", {"key": str, "value": str}
)


class ClientListAssociationsAssociationFilterListTypeDef(
    _ClientListAssociationsAssociationFilterListTypeDef
):
    """
    Type definition for `ClientListAssociations` `AssociationFilterList`

    Describes a filter.

    - **key** *(string) --* **[REQUIRED]**

      The name of the filter.

    - **value** *(string) --* **[REQUIRED]**

      The filter value.
    """


_ClientListAssociationsResponseAssociationsOverviewTypeDef = TypedDict(
    "_ClientListAssociationsResponseAssociationsOverviewTypeDef",
    {
        "Status": str,
        "DetailedStatus": str,
        "AssociationStatusAggregatedCount": Dict[str, int],
    },
    total=False,
)


class ClientListAssociationsResponseAssociationsOverviewTypeDef(
    _ClientListAssociationsResponseAssociationsOverviewTypeDef
):
    """
    Type definition for `ClientListAssociationsResponseAssociations` `Overview`

    Information about the association.

    - **Status** *(string) --*

      The status of the association. Status can be: Pending, Success, or Failed.

    - **DetailedStatus** *(string) --*

      A detailed status of the association.

    - **AssociationStatusAggregatedCount** *(dict) --*

      Returns the number of targets for the association status. For example, if you created
      an association with two instances, and one of them was successful, this would return
      the count of instances by status.

      - *(string) --*

        - *(integer) --*
    """


_ClientListAssociationsResponseAssociationsTargetsTypeDef = TypedDict(
    "_ClientListAssociationsResponseAssociationsTargetsTypeDef",
    {"Key": str, "Values": List[str]},
    total=False,
)


class ClientListAssociationsResponseAssociationsTargetsTypeDef(
    _ClientListAssociationsResponseAssociationsTargetsTypeDef
):
    """
    Type definition for `ClientListAssociationsResponseAssociations` `Targets`

    An array of search criteria that targets instances using a Key,Value combination that
    you specify.

    Supported formats include the following.

    * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

    * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

    * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

    * (Maintenance window targets only)
    ``Key=resource-groups:Name,Values=*resource-group-name* ``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

    For example:

    * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

    * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

    * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

    * (Maintenance window targets only)
    ``Key=resource-groups:Name,Values=ProductionResourceGroup``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC*
    ``

    For information about how to send commands that target instances using ``Key,Value``
    parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
    <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
    in the *AWS Systems Manager User Guide* .

    - **Key** *(string) --*

      User-defined criteria for sending commands that target instances that meet the
      criteria.

    - **Values** *(list) --*

      User-defined criteria that maps to ``Key`` . For example, if you specified
      ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
      instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

      - *(string) --*
    """


_ClientListAssociationsResponseAssociationsTypeDef = TypedDict(
    "_ClientListAssociationsResponseAssociationsTypeDef",
    {
        "Name": str,
        "InstanceId": str,
        "AssociationId": str,
        "AssociationVersion": str,
        "DocumentVersion": str,
        "Targets": List[ClientListAssociationsResponseAssociationsTargetsTypeDef],
        "LastExecutionDate": datetime,
        "Overview": ClientListAssociationsResponseAssociationsOverviewTypeDef,
        "ScheduleExpression": str,
        "AssociationName": str,
    },
    total=False,
)


class ClientListAssociationsResponseAssociationsTypeDef(
    _ClientListAssociationsResponseAssociationsTypeDef
):
    """
    Type definition for `ClientListAssociationsResponse` `Associations`

    Describes an association of a Systems Manager document and an instance.

    - **Name** *(string) --*

      The name of the Systems Manager document.

    - **InstanceId** *(string) --*

      The ID of the instance.

    - **AssociationId** *(string) --*

      The ID created by the system when you create an association. An association is a binding
      between a document and a set of targets with a schedule.

    - **AssociationVersion** *(string) --*

      The association version.

    - **DocumentVersion** *(string) --*

      The version of the document used in the association.

    - **Targets** *(list) --*

      The instances targeted by the request to create an association.

      - *(dict) --*

        An array of search criteria that targets instances using a Key,Value combination that
        you specify.

        Supported formats include the following.

        * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

        * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

        * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

        * (Maintenance window targets only)
        ``Key=resource-groups:Name,Values=*resource-group-name* ``

        * (Maintenance window targets only)
        ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

        For example:

        * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

        * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

        * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

        * (Maintenance window targets only)
        ``Key=resource-groups:Name,Values=ProductionResourceGroup``

        * (Maintenance window targets only)
        ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC*
        ``

        For information about how to send commands that target instances using ``Key,Value``
        parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
        <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
        in the *AWS Systems Manager User Guide* .

        - **Key** *(string) --*

          User-defined criteria for sending commands that target instances that meet the
          criteria.

        - **Values** *(list) --*

          User-defined criteria that maps to ``Key`` . For example, if you specified
          ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
          instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

          - *(string) --*

    - **LastExecutionDate** *(datetime) --*

      The date on which the association was last run.

    - **Overview** *(dict) --*

      Information about the association.

      - **Status** *(string) --*

        The status of the association. Status can be: Pending, Success, or Failed.

      - **DetailedStatus** *(string) --*

        A detailed status of the association.

      - **AssociationStatusAggregatedCount** *(dict) --*

        Returns the number of targets for the association status. For example, if you created
        an association with two instances, and one of them was successful, this would return
        the count of instances by status.

        - *(string) --*

          - *(integer) --*

    - **ScheduleExpression** *(string) --*

      A cron expression that specifies a schedule when the association runs.

    - **AssociationName** *(string) --*

      The association name.
    """


_ClientListAssociationsResponseTypeDef = TypedDict(
    "_ClientListAssociationsResponseTypeDef",
    {
        "Associations": List[ClientListAssociationsResponseAssociationsTypeDef],
        "NextToken": str,
    },
    total=False,
)


class ClientListAssociationsResponseTypeDef(_ClientListAssociationsResponseTypeDef):
    """
    Type definition for `ClientListAssociations` `Response`

    - **Associations** *(list) --*

      The associations.

      - *(dict) --*

        Describes an association of a Systems Manager document and an instance.

        - **Name** *(string) --*

          The name of the Systems Manager document.

        - **InstanceId** *(string) --*

          The ID of the instance.

        - **AssociationId** *(string) --*

          The ID created by the system when you create an association. An association is a binding
          between a document and a set of targets with a schedule.

        - **AssociationVersion** *(string) --*

          The association version.

        - **DocumentVersion** *(string) --*

          The version of the document used in the association.

        - **Targets** *(list) --*

          The instances targeted by the request to create an association.

          - *(dict) --*

            An array of search criteria that targets instances using a Key,Value combination that
            you specify.

            Supported formats include the following.

            * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

            * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

            * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

            * (Maintenance window targets only)
            ``Key=resource-groups:Name,Values=*resource-group-name* ``

            * (Maintenance window targets only)
            ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

            For example:

            * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

            * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

            * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

            * (Maintenance window targets only)
            ``Key=resource-groups:Name,Values=ProductionResourceGroup``

            * (Maintenance window targets only)
            ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC*
            ``

            For information about how to send commands that target instances using ``Key,Value``
            parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
            <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
            in the *AWS Systems Manager User Guide* .

            - **Key** *(string) --*

              User-defined criteria for sending commands that target instances that meet the
              criteria.

            - **Values** *(list) --*

              User-defined criteria that maps to ``Key`` . For example, if you specified
              ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
              instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

              - *(string) --*

        - **LastExecutionDate** *(datetime) --*

          The date on which the association was last run.

        - **Overview** *(dict) --*

          Information about the association.

          - **Status** *(string) --*

            The status of the association. Status can be: Pending, Success, or Failed.

          - **DetailedStatus** *(string) --*

            A detailed status of the association.

          - **AssociationStatusAggregatedCount** *(dict) --*

            Returns the number of targets for the association status. For example, if you created
            an association with two instances, and one of them was successful, this would return
            the count of instances by status.

            - *(string) --*

              - *(integer) --*

        - **ScheduleExpression** *(string) --*

          A cron expression that specifies a schedule when the association runs.

        - **AssociationName** *(string) --*

          The association name.

    - **NextToken** *(string) --*

      The token to use when requesting the next set of items. If there are no additional items to
      return, the string is empty.
    """


_ClientListCommandInvocationsFiltersTypeDef = TypedDict(
    "_ClientListCommandInvocationsFiltersTypeDef", {"key": str, "value": str}
)


class ClientListCommandInvocationsFiltersTypeDef(
    _ClientListCommandInvocationsFiltersTypeDef
):
    """
    Type definition for `ClientListCommandInvocations` `Filters`

    Describes a command filter.

    - **key** *(string) --* **[REQUIRED]**

      The name of the filter.

    - **value** *(string) --* **[REQUIRED]**

      The filter value. Valid values for each filter key are as follows:

      * **InvokedAfter** : Specify a timestamp to limit your results. For example, specify
      ``2018-07-07T00:00:00Z`` to see a list of command executions occurring July 7, 2018, and
      later.

      * **InvokedBefore** : Specify a timestamp to limit your results. For example, specify
      ``2018-07-07T00:00:00Z`` to see a list of command executions from before July 7, 2018.

      * **Status** : Specify a valid command status to see a list of all command executions with
      that status. Status values you can specify include:

        * ``Pending``

        * ``InProgress``

        * ``Success``

        * ``Cancelled``

        * ``Failed``

        * ``TimedOut``

        * ``Cancelling``

      * **DocumentName** : Specify name of the SSM document for which you want to see command
      execution results. For example, specify ``AWS-RunPatchBaseline`` to see command executions
      that used this SSM document to perform security patching operations on instances.

      * **ExecutionStage** : Specify one of the following values:

        * ``Executing`` : Returns a list of command executions that are currently still running.

        * ``Complete`` : Returns a list of command executions that have already completed.
    """


_ClientListCommandInvocationsResponseCommandInvocationsCloudWatchOutputConfigTypeDef = TypedDict(
    "_ClientListCommandInvocationsResponseCommandInvocationsCloudWatchOutputConfigTypeDef",
    {"CloudWatchLogGroupName": str, "CloudWatchOutputEnabled": bool},
    total=False,
)


class ClientListCommandInvocationsResponseCommandInvocationsCloudWatchOutputConfigTypeDef(
    _ClientListCommandInvocationsResponseCommandInvocationsCloudWatchOutputConfigTypeDef
):
    """
    Type definition for `ClientListCommandInvocationsResponseCommandInvocations` `CloudWatchOutputConfig`

    CloudWatch Logs information where you want Systems Manager to send the command output.

    - **CloudWatchLogGroupName** *(string) --*

      The name of the CloudWatch log group where you want to send command output. If you
      don't specify a group name, Systems Manager automatically creates a log group for you.
      The log group uses the following naming format: aws/ssm/*SystemsManagerDocumentName* .

    - **CloudWatchOutputEnabled** *(boolean) --*

      Enables Systems Manager to send command output to CloudWatch Logs.
    """


_ClientListCommandInvocationsResponseCommandInvocationsCommandPluginsTypeDef = TypedDict(
    "_ClientListCommandInvocationsResponseCommandInvocationsCommandPluginsTypeDef",
    {
        "Name": str,
        "Status": str,
        "StatusDetails": str,
        "ResponseCode": int,
        "ResponseStartDateTime": datetime,
        "ResponseFinishDateTime": datetime,
        "Output": str,
        "StandardOutputUrl": str,
        "StandardErrorUrl": str,
        "OutputS3Region": str,
        "OutputS3BucketName": str,
        "OutputS3KeyPrefix": str,
    },
    total=False,
)


class ClientListCommandInvocationsResponseCommandInvocationsCommandPluginsTypeDef(
    _ClientListCommandInvocationsResponseCommandInvocationsCommandPluginsTypeDef
):
    """
    Type definition for `ClientListCommandInvocationsResponseCommandInvocations` `CommandPlugins`

    Describes plugin details.

    - **Name** *(string) --*

      The name of the plugin. Must be one of the following: aws:updateAgent,
      aws:domainjoin, aws:applications, aws:runPowerShellScript, aws:psmodule,
      aws:cloudWatch, aws:runShellScript, or aws:updateSSMAgent.

    - **Status** *(string) --*

      The status of this plugin. You can run a document with multiple plugins.

    - **StatusDetails** *(string) --*

      A detailed status of the plugin execution. StatusDetails includes more information
      than Status because it includes states resulting from error and concurrency control
      parameters. StatusDetails can show different results than Status. For more
      information about these statuses, see `Understanding Command Statuses
      <http://docs.aws.amazon.com/systems-manager/latest/userguide/monitor-commands.html>`__
      in the *AWS Systems Manager User Guide* . StatusDetails can be one of the following
      values:

      * Pending: The command has not been sent to the instance.

      * In Progress: The command has been sent to the instance but has not reached a
      terminal state.

      * Success: The execution of the command or plugin was successfully completed. This is
      a terminal state.

      * Delivery Timed Out: The command was not delivered to the instance before the
      delivery timeout expired. Delivery timeouts do not count against the parent command's
      MaxErrors limit, but they do contribute to whether the parent command status is
      Success or Incomplete. This is a terminal state.

      * Execution Timed Out: Command execution started on the instance, but the execution
      was not complete before the execution timeout expired. Execution timeouts count
      against the MaxErrors limit of the parent command. This is a terminal state.

      * Failed: The command was not successful on the instance. For a plugin, this
      indicates that the result code was not zero. For a command invocation, this indicates
      that the result code for one or more plugins was not zero. Invocation failures count
      against the MaxErrors limit of the parent command. This is a terminal state.

      * Canceled: The command was terminated before it was completed. This is a terminal
      state.

      * Undeliverable: The command can't be delivered to the instance. The instance might
      not exist, or it might not be responding. Undeliverable invocations don't count
      against the parent command's MaxErrors limit, and they don't contribute to whether
      the parent command status is Success or Incomplete. This is a terminal state.

      * Terminated: The parent command exceeded its MaxErrors limit and subsequent command
      invocations were canceled by the system. This is a terminal state.

    - **ResponseCode** *(integer) --*

      A numeric response code generated after running the plugin.

    - **ResponseStartDateTime** *(datetime) --*

      The time the plugin started running.

    - **ResponseFinishDateTime** *(datetime) --*

      The time the plugin stopped running. Could stop prematurely if, for example, a cancel
      command was sent.

    - **Output** *(string) --*

      Output of the plugin execution.

    - **StandardOutputUrl** *(string) --*

      The URL for the complete text written by the plugin to stdout in Amazon S3. If the
      Amazon S3 bucket for the command was not specified, then this string is empty.

    - **StandardErrorUrl** *(string) --*

      The URL for the complete text written by the plugin to stderr. If execution is not
      yet complete, then this string is empty.

    - **OutputS3Region** *(string) --*

      (Deprecated) You can no longer specify this parameter. The system ignores it.
      Instead, Systems Manager automatically determines the Amazon S3 bucket region.

    - **OutputS3BucketName** *(string) --*

      The S3 bucket where the responses to the command executions should be stored. This
      was requested when issuing the command. For example, in the following response:

      test_folder/ab19cb99-a030-46dd-9dfc-8eSAMPLEPre-Fix/i-1234567876543/awsrunShellScript

      test_folder is the name of the Amazon S3 bucket;

      ab19cb99-a030-46dd-9dfc-8eSAMPLEPre-Fix is the name of the S3 prefix;

      i-1234567876543 is the instance ID;

      awsrunShellScript is the name of the plugin.

    - **OutputS3KeyPrefix** *(string) --*

      The S3 directory path inside the bucket where the responses to the command executions
      should be stored. This was requested when issuing the command. For example, in the
      following response:

      test_folder/ab19cb99-a030-46dd-9dfc-8eSAMPLEPre-Fix/i-1234567876543/awsrunShellScript

      test_folder is the name of the Amazon S3 bucket;

      ab19cb99-a030-46dd-9dfc-8eSAMPLEPre-Fix is the name of the S3 prefix;

      i-1234567876543 is the instance ID;

      awsrunShellScript is the name of the plugin.
    """


_ClientListCommandInvocationsResponseCommandInvocationsNotificationConfigTypeDef = TypedDict(
    "_ClientListCommandInvocationsResponseCommandInvocationsNotificationConfigTypeDef",
    {"NotificationArn": str, "NotificationEvents": List[str], "NotificationType": str},
    total=False,
)


class ClientListCommandInvocationsResponseCommandInvocationsNotificationConfigTypeDef(
    _ClientListCommandInvocationsResponseCommandInvocationsNotificationConfigTypeDef
):
    """
    Type definition for `ClientListCommandInvocationsResponseCommandInvocations` `NotificationConfig`

    Configurations for sending notifications about command status changes on a per instance
    basis.

    - **NotificationArn** *(string) --*

      An Amazon Resource Name (ARN) for an Amazon Simple Notification Service (Amazon SNS)
      topic. Run Command pushes notifications about command status changes to this topic.

    - **NotificationEvents** *(list) --*

      The different events for which you can receive notifications. These events include the
      following: All (events), InProgress, Success, TimedOut, Cancelled, Failed. To learn
      more about these events, see `Configuring Amazon SNS Notifications for AWS Systems
      Manager
      <http://docs.aws.amazon.com/systems-manager/latest/userguide/monitoring-sns-notifications.html>`__
      in the *AWS Systems Manager User Guide* .

      - *(string) --*

    - **NotificationType** *(string) --*

      Command: Receive notification when the status of a command changes. Invocation: For
      commands sent to multiple instances, receive notification on a per-instance basis when
      the status of a command changes.
    """


_ClientListCommandInvocationsResponseCommandInvocationsTypeDef = TypedDict(
    "_ClientListCommandInvocationsResponseCommandInvocationsTypeDef",
    {
        "CommandId": str,
        "InstanceId": str,
        "InstanceName": str,
        "Comment": str,
        "DocumentName": str,
        "DocumentVersion": str,
        "RequestedDateTime": datetime,
        "Status": str,
        "StatusDetails": str,
        "TraceOutput": str,
        "StandardOutputUrl": str,
        "StandardErrorUrl": str,
        "CommandPlugins": List[
            ClientListCommandInvocationsResponseCommandInvocationsCommandPluginsTypeDef
        ],
        "ServiceRole": str,
        "NotificationConfig": ClientListCommandInvocationsResponseCommandInvocationsNotificationConfigTypeDef,
        "CloudWatchOutputConfig": ClientListCommandInvocationsResponseCommandInvocationsCloudWatchOutputConfigTypeDef,
    },
    total=False,
)


class ClientListCommandInvocationsResponseCommandInvocationsTypeDef(
    _ClientListCommandInvocationsResponseCommandInvocationsTypeDef
):
    """
    Type definition for `ClientListCommandInvocationsResponse` `CommandInvocations`

    An invocation is copy of a command sent to a specific instance. A command can apply to one
    or more instances. A command invocation applies to one instance. For example, if a user
    runs SendCommand against three instances, then a command invocation is created for each
    requested instance ID. A command invocation returns status and detail information about a
    command you ran.

    - **CommandId** *(string) --*

      The command against which this invocation was requested.

    - **InstanceId** *(string) --*

      The instance ID in which this invocation was requested.

    - **InstanceName** *(string) --*

      The name of the invocation target. For Amazon EC2 instances this is the value for the
      aws:Name tag. For on-premises instances, this is the name of the instance.

    - **Comment** *(string) --*

      User-specified information about the command, such as a brief description of what the
      command should do.

    - **DocumentName** *(string) --*

      The document name that was requested for execution.

    - **DocumentVersion** *(string) --*

      The SSM document version.

    - **RequestedDateTime** *(datetime) --*

      The time and date the request was sent to this instance.

    - **Status** *(string) --*

      Whether or not the invocation succeeded, failed, or is pending.

    - **StatusDetails** *(string) --*

      A detailed status of the command execution for each invocation (each instance targeted by
      the command). StatusDetails includes more information than Status because it includes
      states resulting from error and concurrency control parameters. StatusDetails can show
      different results than Status. For more information about these statuses, see
      `Understanding Command Statuses
      <http://docs.aws.amazon.com/systems-manager/latest/userguide/monitor-commands.html>`__ in
      the *AWS Systems Manager User Guide* . StatusDetails can be one of the following values:

      * Pending: The command has not been sent to the instance.

      * In Progress: The command has been sent to the instance but has not reached a terminal
      state.

      * Success: The execution of the command or plugin was successfully completed. This is a
      terminal state.

      * Delivery Timed Out: The command was not delivered to the instance before the delivery
      timeout expired. Delivery timeouts do not count against the parent command's MaxErrors
      limit, but they do contribute to whether the parent command status is Success or
      Incomplete. This is a terminal state.

      * Execution Timed Out: Command execution started on the instance, but the execution was
      not complete before the execution timeout expired. Execution timeouts count against the
      MaxErrors limit of the parent command. This is a terminal state.

      * Failed: The command was not successful on the instance. For a plugin, this indicates
      that the result code was not zero. For a command invocation, this indicates that the
      result code for one or more plugins was not zero. Invocation failures count against the
      MaxErrors limit of the parent command. This is a terminal state.

      * Canceled: The command was terminated before it was completed. This is a terminal state.

      * Undeliverable: The command can't be delivered to the instance. The instance might not
      exist or might not be responding. Undeliverable invocations don't count against the
      parent command's MaxErrors limit and don't contribute to whether the parent command
      status is Success or Incomplete. This is a terminal state.

      * Terminated: The parent command exceeded its MaxErrors limit and subsequent command
      invocations were canceled by the system. This is a terminal state.

    - **TraceOutput** *(string) --*

      Gets the trace output sent by the agent.

    - **StandardOutputUrl** *(string) --*

      The URL to the plugin's StdOut file in Amazon S3, if the Amazon S3 bucket was defined for
      the parent command. For an invocation, StandardOutputUrl is populated if there is just
      one plugin defined for the command, and the Amazon S3 bucket was defined for the command.

    - **StandardErrorUrl** *(string) --*

      The URL to the plugin's StdErr file in Amazon S3, if the Amazon S3 bucket was defined for
      the parent command. For an invocation, StandardErrorUrl is populated if there is just one
      plugin defined for the command, and the Amazon S3 bucket was defined for the command.

    - **CommandPlugins** *(list) --*

      - *(dict) --*

        Describes plugin details.

        - **Name** *(string) --*

          The name of the plugin. Must be one of the following: aws:updateAgent,
          aws:domainjoin, aws:applications, aws:runPowerShellScript, aws:psmodule,
          aws:cloudWatch, aws:runShellScript, or aws:updateSSMAgent.

        - **Status** *(string) --*

          The status of this plugin. You can run a document with multiple plugins.

        - **StatusDetails** *(string) --*

          A detailed status of the plugin execution. StatusDetails includes more information
          than Status because it includes states resulting from error and concurrency control
          parameters. StatusDetails can show different results than Status. For more
          information about these statuses, see `Understanding Command Statuses
          <http://docs.aws.amazon.com/systems-manager/latest/userguide/monitor-commands.html>`__
          in the *AWS Systems Manager User Guide* . StatusDetails can be one of the following
          values:

          * Pending: The command has not been sent to the instance.

          * In Progress: The command has been sent to the instance but has not reached a
          terminal state.

          * Success: The execution of the command or plugin was successfully completed. This is
          a terminal state.

          * Delivery Timed Out: The command was not delivered to the instance before the
          delivery timeout expired. Delivery timeouts do not count against the parent command's
          MaxErrors limit, but they do contribute to whether the parent command status is
          Success or Incomplete. This is a terminal state.

          * Execution Timed Out: Command execution started on the instance, but the execution
          was not complete before the execution timeout expired. Execution timeouts count
          against the MaxErrors limit of the parent command. This is a terminal state.

          * Failed: The command was not successful on the instance. For a plugin, this
          indicates that the result code was not zero. For a command invocation, this indicates
          that the result code for one or more plugins was not zero. Invocation failures count
          against the MaxErrors limit of the parent command. This is a terminal state.

          * Canceled: The command was terminated before it was completed. This is a terminal
          state.

          * Undeliverable: The command can't be delivered to the instance. The instance might
          not exist, or it might not be responding. Undeliverable invocations don't count
          against the parent command's MaxErrors limit, and they don't contribute to whether
          the parent command status is Success or Incomplete. This is a terminal state.

          * Terminated: The parent command exceeded its MaxErrors limit and subsequent command
          invocations were canceled by the system. This is a terminal state.

        - **ResponseCode** *(integer) --*

          A numeric response code generated after running the plugin.

        - **ResponseStartDateTime** *(datetime) --*

          The time the plugin started running.

        - **ResponseFinishDateTime** *(datetime) --*

          The time the plugin stopped running. Could stop prematurely if, for example, a cancel
          command was sent.

        - **Output** *(string) --*

          Output of the plugin execution.

        - **StandardOutputUrl** *(string) --*

          The URL for the complete text written by the plugin to stdout in Amazon S3. If the
          Amazon S3 bucket for the command was not specified, then this string is empty.

        - **StandardErrorUrl** *(string) --*

          The URL for the complete text written by the plugin to stderr. If execution is not
          yet complete, then this string is empty.

        - **OutputS3Region** *(string) --*

          (Deprecated) You can no longer specify this parameter. The system ignores it.
          Instead, Systems Manager automatically determines the Amazon S3 bucket region.

        - **OutputS3BucketName** *(string) --*

          The S3 bucket where the responses to the command executions should be stored. This
          was requested when issuing the command. For example, in the following response:

          test_folder/ab19cb99-a030-46dd-9dfc-8eSAMPLEPre-Fix/i-1234567876543/awsrunShellScript

          test_folder is the name of the Amazon S3 bucket;

          ab19cb99-a030-46dd-9dfc-8eSAMPLEPre-Fix is the name of the S3 prefix;

          i-1234567876543 is the instance ID;

          awsrunShellScript is the name of the plugin.

        - **OutputS3KeyPrefix** *(string) --*

          The S3 directory path inside the bucket where the responses to the command executions
          should be stored. This was requested when issuing the command. For example, in the
          following response:

          test_folder/ab19cb99-a030-46dd-9dfc-8eSAMPLEPre-Fix/i-1234567876543/awsrunShellScript

          test_folder is the name of the Amazon S3 bucket;

          ab19cb99-a030-46dd-9dfc-8eSAMPLEPre-Fix is the name of the S3 prefix;

          i-1234567876543 is the instance ID;

          awsrunShellScript is the name of the plugin.

    - **ServiceRole** *(string) --*

      The IAM service role that Run Command uses to act on your behalf when sending
      notifications about command status changes on a per instance basis.

    - **NotificationConfig** *(dict) --*

      Configurations for sending notifications about command status changes on a per instance
      basis.

      - **NotificationArn** *(string) --*

        An Amazon Resource Name (ARN) for an Amazon Simple Notification Service (Amazon SNS)
        topic. Run Command pushes notifications about command status changes to this topic.

      - **NotificationEvents** *(list) --*

        The different events for which you can receive notifications. These events include the
        following: All (events), InProgress, Success, TimedOut, Cancelled, Failed. To learn
        more about these events, see `Configuring Amazon SNS Notifications for AWS Systems
        Manager
        <http://docs.aws.amazon.com/systems-manager/latest/userguide/monitoring-sns-notifications.html>`__
        in the *AWS Systems Manager User Guide* .

        - *(string) --*

      - **NotificationType** *(string) --*

        Command: Receive notification when the status of a command changes. Invocation: For
        commands sent to multiple instances, receive notification on a per-instance basis when
        the status of a command changes.

    - **CloudWatchOutputConfig** *(dict) --*

      CloudWatch Logs information where you want Systems Manager to send the command output.

      - **CloudWatchLogGroupName** *(string) --*

        The name of the CloudWatch log group where you want to send command output. If you
        don't specify a group name, Systems Manager automatically creates a log group for you.
        The log group uses the following naming format: aws/ssm/*SystemsManagerDocumentName* .

      - **CloudWatchOutputEnabled** *(boolean) --*

        Enables Systems Manager to send command output to CloudWatch Logs.
    """


_ClientListCommandInvocationsResponseTypeDef = TypedDict(
    "_ClientListCommandInvocationsResponseTypeDef",
    {
        "CommandInvocations": List[
            ClientListCommandInvocationsResponseCommandInvocationsTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)


class ClientListCommandInvocationsResponseTypeDef(
    _ClientListCommandInvocationsResponseTypeDef
):
    """
    Type definition for `ClientListCommandInvocations` `Response`

    - **CommandInvocations** *(list) --*

      (Optional) A list of all invocations.

      - *(dict) --*

        An invocation is copy of a command sent to a specific instance. A command can apply to one
        or more instances. A command invocation applies to one instance. For example, if a user
        runs SendCommand against three instances, then a command invocation is created for each
        requested instance ID. A command invocation returns status and detail information about a
        command you ran.

        - **CommandId** *(string) --*

          The command against which this invocation was requested.

        - **InstanceId** *(string) --*

          The instance ID in which this invocation was requested.

        - **InstanceName** *(string) --*

          The name of the invocation target. For Amazon EC2 instances this is the value for the
          aws:Name tag. For on-premises instances, this is the name of the instance.

        - **Comment** *(string) --*

          User-specified information about the command, such as a brief description of what the
          command should do.

        - **DocumentName** *(string) --*

          The document name that was requested for execution.

        - **DocumentVersion** *(string) --*

          The SSM document version.

        - **RequestedDateTime** *(datetime) --*

          The time and date the request was sent to this instance.

        - **Status** *(string) --*

          Whether or not the invocation succeeded, failed, or is pending.

        - **StatusDetails** *(string) --*

          A detailed status of the command execution for each invocation (each instance targeted by
          the command). StatusDetails includes more information than Status because it includes
          states resulting from error and concurrency control parameters. StatusDetails can show
          different results than Status. For more information about these statuses, see
          `Understanding Command Statuses
          <http://docs.aws.amazon.com/systems-manager/latest/userguide/monitor-commands.html>`__ in
          the *AWS Systems Manager User Guide* . StatusDetails can be one of the following values:

          * Pending: The command has not been sent to the instance.

          * In Progress: The command has been sent to the instance but has not reached a terminal
          state.

          * Success: The execution of the command or plugin was successfully completed. This is a
          terminal state.

          * Delivery Timed Out: The command was not delivered to the instance before the delivery
          timeout expired. Delivery timeouts do not count against the parent command's MaxErrors
          limit, but they do contribute to whether the parent command status is Success or
          Incomplete. This is a terminal state.

          * Execution Timed Out: Command execution started on the instance, but the execution was
          not complete before the execution timeout expired. Execution timeouts count against the
          MaxErrors limit of the parent command. This is a terminal state.

          * Failed: The command was not successful on the instance. For a plugin, this indicates
          that the result code was not zero. For a command invocation, this indicates that the
          result code for one or more plugins was not zero. Invocation failures count against the
          MaxErrors limit of the parent command. This is a terminal state.

          * Canceled: The command was terminated before it was completed. This is a terminal state.

          * Undeliverable: The command can't be delivered to the instance. The instance might not
          exist or might not be responding. Undeliverable invocations don't count against the
          parent command's MaxErrors limit and don't contribute to whether the parent command
          status is Success or Incomplete. This is a terminal state.

          * Terminated: The parent command exceeded its MaxErrors limit and subsequent command
          invocations were canceled by the system. This is a terminal state.

        - **TraceOutput** *(string) --*

          Gets the trace output sent by the agent.

        - **StandardOutputUrl** *(string) --*

          The URL to the plugin's StdOut file in Amazon S3, if the Amazon S3 bucket was defined for
          the parent command. For an invocation, StandardOutputUrl is populated if there is just
          one plugin defined for the command, and the Amazon S3 bucket was defined for the command.

        - **StandardErrorUrl** *(string) --*

          The URL to the plugin's StdErr file in Amazon S3, if the Amazon S3 bucket was defined for
          the parent command. For an invocation, StandardErrorUrl is populated if there is just one
          plugin defined for the command, and the Amazon S3 bucket was defined for the command.

        - **CommandPlugins** *(list) --*

          - *(dict) --*

            Describes plugin details.

            - **Name** *(string) --*

              The name of the plugin. Must be one of the following: aws:updateAgent,
              aws:domainjoin, aws:applications, aws:runPowerShellScript, aws:psmodule,
              aws:cloudWatch, aws:runShellScript, or aws:updateSSMAgent.

            - **Status** *(string) --*

              The status of this plugin. You can run a document with multiple plugins.

            - **StatusDetails** *(string) --*

              A detailed status of the plugin execution. StatusDetails includes more information
              than Status because it includes states resulting from error and concurrency control
              parameters. StatusDetails can show different results than Status. For more
              information about these statuses, see `Understanding Command Statuses
              <http://docs.aws.amazon.com/systems-manager/latest/userguide/monitor-commands.html>`__
              in the *AWS Systems Manager User Guide* . StatusDetails can be one of the following
              values:

              * Pending: The command has not been sent to the instance.

              * In Progress: The command has been sent to the instance but has not reached a
              terminal state.

              * Success: The execution of the command or plugin was successfully completed. This is
              a terminal state.

              * Delivery Timed Out: The command was not delivered to the instance before the
              delivery timeout expired. Delivery timeouts do not count against the parent command's
              MaxErrors limit, but they do contribute to whether the parent command status is
              Success or Incomplete. This is a terminal state.

              * Execution Timed Out: Command execution started on the instance, but the execution
              was not complete before the execution timeout expired. Execution timeouts count
              against the MaxErrors limit of the parent command. This is a terminal state.

              * Failed: The command was not successful on the instance. For a plugin, this
              indicates that the result code was not zero. For a command invocation, this indicates
              that the result code for one or more plugins was not zero. Invocation failures count
              against the MaxErrors limit of the parent command. This is a terminal state.

              * Canceled: The command was terminated before it was completed. This is a terminal
              state.

              * Undeliverable: The command can't be delivered to the instance. The instance might
              not exist, or it might not be responding. Undeliverable invocations don't count
              against the parent command's MaxErrors limit, and they don't contribute to whether
              the parent command status is Success or Incomplete. This is a terminal state.

              * Terminated: The parent command exceeded its MaxErrors limit and subsequent command
              invocations were canceled by the system. This is a terminal state.

            - **ResponseCode** *(integer) --*

              A numeric response code generated after running the plugin.

            - **ResponseStartDateTime** *(datetime) --*

              The time the plugin started running.

            - **ResponseFinishDateTime** *(datetime) --*

              The time the plugin stopped running. Could stop prematurely if, for example, a cancel
              command was sent.

            - **Output** *(string) --*

              Output of the plugin execution.

            - **StandardOutputUrl** *(string) --*

              The URL for the complete text written by the plugin to stdout in Amazon S3. If the
              Amazon S3 bucket for the command was not specified, then this string is empty.

            - **StandardErrorUrl** *(string) --*

              The URL for the complete text written by the plugin to stderr. If execution is not
              yet complete, then this string is empty.

            - **OutputS3Region** *(string) --*

              (Deprecated) You can no longer specify this parameter. The system ignores it.
              Instead, Systems Manager automatically determines the Amazon S3 bucket region.

            - **OutputS3BucketName** *(string) --*

              The S3 bucket where the responses to the command executions should be stored. This
              was requested when issuing the command. For example, in the following response:

              test_folder/ab19cb99-a030-46dd-9dfc-8eSAMPLEPre-Fix/i-1234567876543/awsrunShellScript

              test_folder is the name of the Amazon S3 bucket;

              ab19cb99-a030-46dd-9dfc-8eSAMPLEPre-Fix is the name of the S3 prefix;

              i-1234567876543 is the instance ID;

              awsrunShellScript is the name of the plugin.

            - **OutputS3KeyPrefix** *(string) --*

              The S3 directory path inside the bucket where the responses to the command executions
              should be stored. This was requested when issuing the command. For example, in the
              following response:

              test_folder/ab19cb99-a030-46dd-9dfc-8eSAMPLEPre-Fix/i-1234567876543/awsrunShellScript

              test_folder is the name of the Amazon S3 bucket;

              ab19cb99-a030-46dd-9dfc-8eSAMPLEPre-Fix is the name of the S3 prefix;

              i-1234567876543 is the instance ID;

              awsrunShellScript is the name of the plugin.

        - **ServiceRole** *(string) --*

          The IAM service role that Run Command uses to act on your behalf when sending
          notifications about command status changes on a per instance basis.

        - **NotificationConfig** *(dict) --*

          Configurations for sending notifications about command status changes on a per instance
          basis.

          - **NotificationArn** *(string) --*

            An Amazon Resource Name (ARN) for an Amazon Simple Notification Service (Amazon SNS)
            topic. Run Command pushes notifications about command status changes to this topic.

          - **NotificationEvents** *(list) --*

            The different events for which you can receive notifications. These events include the
            following: All (events), InProgress, Success, TimedOut, Cancelled, Failed. To learn
            more about these events, see `Configuring Amazon SNS Notifications for AWS Systems
            Manager
            <http://docs.aws.amazon.com/systems-manager/latest/userguide/monitoring-sns-notifications.html>`__
            in the *AWS Systems Manager User Guide* .

            - *(string) --*

          - **NotificationType** *(string) --*

            Command: Receive notification when the status of a command changes. Invocation: For
            commands sent to multiple instances, receive notification on a per-instance basis when
            the status of a command changes.

        - **CloudWatchOutputConfig** *(dict) --*

          CloudWatch Logs information where you want Systems Manager to send the command output.

          - **CloudWatchLogGroupName** *(string) --*

            The name of the CloudWatch log group where you want to send command output. If you
            don't specify a group name, Systems Manager automatically creates a log group for you.
            The log group uses the following naming format: aws/ssm/*SystemsManagerDocumentName* .

          - **CloudWatchOutputEnabled** *(boolean) --*

            Enables Systems Manager to send command output to CloudWatch Logs.

    - **NextToken** *(string) --*

      (Optional) The token for the next set of items to return. (You received this token from a
      previous call.)
    """


_ClientListCommandsFiltersTypeDef = TypedDict(
    "_ClientListCommandsFiltersTypeDef", {"key": str, "value": str}
)


class ClientListCommandsFiltersTypeDef(_ClientListCommandsFiltersTypeDef):
    """
    Type definition for `ClientListCommands` `Filters`

    Describes a command filter.

    - **key** *(string) --* **[REQUIRED]**

      The name of the filter.

    - **value** *(string) --* **[REQUIRED]**

      The filter value. Valid values for each filter key are as follows:

      * **InvokedAfter** : Specify a timestamp to limit your results. For example, specify
      ``2018-07-07T00:00:00Z`` to see a list of command executions occurring July 7, 2018, and
      later.

      * **InvokedBefore** : Specify a timestamp to limit your results. For example, specify
      ``2018-07-07T00:00:00Z`` to see a list of command executions from before July 7, 2018.

      * **Status** : Specify a valid command status to see a list of all command executions with
      that status. Status values you can specify include:

        * ``Pending``

        * ``InProgress``

        * ``Success``

        * ``Cancelled``

        * ``Failed``

        * ``TimedOut``

        * ``Cancelling``

      * **DocumentName** : Specify name of the SSM document for which you want to see command
      execution results. For example, specify ``AWS-RunPatchBaseline`` to see command executions
      that used this SSM document to perform security patching operations on instances.

      * **ExecutionStage** : Specify one of the following values:

        * ``Executing`` : Returns a list of command executions that are currently still running.

        * ``Complete`` : Returns a list of command executions that have already completed.
    """


_ClientListCommandsResponseCommandsCloudWatchOutputConfigTypeDef = TypedDict(
    "_ClientListCommandsResponseCommandsCloudWatchOutputConfigTypeDef",
    {"CloudWatchLogGroupName": str, "CloudWatchOutputEnabled": bool},
    total=False,
)


class ClientListCommandsResponseCommandsCloudWatchOutputConfigTypeDef(
    _ClientListCommandsResponseCommandsCloudWatchOutputConfigTypeDef
):
    """
    Type definition for `ClientListCommandsResponseCommands` `CloudWatchOutputConfig`

    CloudWatch Logs information where you want Systems Manager to send the command output.

    - **CloudWatchLogGroupName** *(string) --*

      The name of the CloudWatch log group where you want to send command output. If you
      don't specify a group name, Systems Manager automatically creates a log group for you.
      The log group uses the following naming format: aws/ssm/*SystemsManagerDocumentName* .

    - **CloudWatchOutputEnabled** *(boolean) --*

      Enables Systems Manager to send command output to CloudWatch Logs.
    """


_ClientListCommandsResponseCommandsNotificationConfigTypeDef = TypedDict(
    "_ClientListCommandsResponseCommandsNotificationConfigTypeDef",
    {"NotificationArn": str, "NotificationEvents": List[str], "NotificationType": str},
    total=False,
)


class ClientListCommandsResponseCommandsNotificationConfigTypeDef(
    _ClientListCommandsResponseCommandsNotificationConfigTypeDef
):
    """
    Type definition for `ClientListCommandsResponseCommands` `NotificationConfig`

    Configurations for sending notifications about command status changes.

    - **NotificationArn** *(string) --*

      An Amazon Resource Name (ARN) for an Amazon Simple Notification Service (Amazon SNS)
      topic. Run Command pushes notifications about command status changes to this topic.

    - **NotificationEvents** *(list) --*

      The different events for which you can receive notifications. These events include the
      following: All (events), InProgress, Success, TimedOut, Cancelled, Failed. To learn
      more about these events, see `Configuring Amazon SNS Notifications for AWS Systems
      Manager
      <http://docs.aws.amazon.com/systems-manager/latest/userguide/monitoring-sns-notifications.html>`__
      in the *AWS Systems Manager User Guide* .

      - *(string) --*

    - **NotificationType** *(string) --*

      Command: Receive notification when the status of a command changes. Invocation: For
      commands sent to multiple instances, receive notification on a per-instance basis when
      the status of a command changes.
    """


_ClientListCommandsResponseCommandsTargetsTypeDef = TypedDict(
    "_ClientListCommandsResponseCommandsTargetsTypeDef",
    {"Key": str, "Values": List[str]},
    total=False,
)


class ClientListCommandsResponseCommandsTargetsTypeDef(
    _ClientListCommandsResponseCommandsTargetsTypeDef
):
    """
    Type definition for `ClientListCommandsResponseCommands` `Targets`

    An array of search criteria that targets instances using a Key,Value combination that
    you specify.

    Supported formats include the following.

    * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

    * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

    * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

    * (Maintenance window targets only)
    ``Key=resource-groups:Name,Values=*resource-group-name* ``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

    For example:

    * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

    * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

    * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

    * (Maintenance window targets only)
    ``Key=resource-groups:Name,Values=ProductionResourceGroup``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC*
    ``

    For information about how to send commands that target instances using ``Key,Value``
    parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
    <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
    in the *AWS Systems Manager User Guide* .

    - **Key** *(string) --*

      User-defined criteria for sending commands that target instances that meet the
      criteria.

    - **Values** *(list) --*

      User-defined criteria that maps to ``Key`` . For example, if you specified
      ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
      instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

      - *(string) --*
    """


_ClientListCommandsResponseCommandsTypeDef = TypedDict(
    "_ClientListCommandsResponseCommandsTypeDef",
    {
        "CommandId": str,
        "DocumentName": str,
        "DocumentVersion": str,
        "Comment": str,
        "ExpiresAfter": datetime,
        "Parameters": Dict[str, List[str]],
        "InstanceIds": List[str],
        "Targets": List[ClientListCommandsResponseCommandsTargetsTypeDef],
        "RequestedDateTime": datetime,
        "Status": str,
        "StatusDetails": str,
        "OutputS3Region": str,
        "OutputS3BucketName": str,
        "OutputS3KeyPrefix": str,
        "MaxConcurrency": str,
        "MaxErrors": str,
        "TargetCount": int,
        "CompletedCount": int,
        "ErrorCount": int,
        "DeliveryTimedOutCount": int,
        "ServiceRole": str,
        "NotificationConfig": ClientListCommandsResponseCommandsNotificationConfigTypeDef,
        "CloudWatchOutputConfig": ClientListCommandsResponseCommandsCloudWatchOutputConfigTypeDef,
    },
    total=False,
)


class ClientListCommandsResponseCommandsTypeDef(
    _ClientListCommandsResponseCommandsTypeDef
):
    """
    Type definition for `ClientListCommandsResponse` `Commands`

    Describes a command request.

    - **CommandId** *(string) --*

      A unique identifier for this command.

    - **DocumentName** *(string) --*

      The name of the document requested for execution.

    - **DocumentVersion** *(string) --*

      The SSM document version.

    - **Comment** *(string) --*

      User-specified information about the command, such as a brief description of what the
      command should do.

    - **ExpiresAfter** *(datetime) --*

      If this time is reached and the command has not already started running, it will not run.
      Calculated based on the ExpiresAfter user input provided as part of the SendCommand API.

    - **Parameters** *(dict) --*

      The parameter values to be inserted in the document when running the command.

      - *(string) --*

        - *(list) --*

          - *(string) --*

    - **InstanceIds** *(list) --*

      The instance IDs against which this command was requested.

      - *(string) --*

    - **Targets** *(list) --*

      An array of search criteria that targets instances using a Key,Value combination that you
      specify. Targets is required if you don't provide one or more instance IDs in the call.

      - *(dict) --*

        An array of search criteria that targets instances using a Key,Value combination that
        you specify.

        Supported formats include the following.

        * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

        * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

        * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

        * (Maintenance window targets only)
        ``Key=resource-groups:Name,Values=*resource-group-name* ``

        * (Maintenance window targets only)
        ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

        For example:

        * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

        * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

        * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

        * (Maintenance window targets only)
        ``Key=resource-groups:Name,Values=ProductionResourceGroup``

        * (Maintenance window targets only)
        ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC*
        ``

        For information about how to send commands that target instances using ``Key,Value``
        parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
        <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
        in the *AWS Systems Manager User Guide* .

        - **Key** *(string) --*

          User-defined criteria for sending commands that target instances that meet the
          criteria.

        - **Values** *(list) --*

          User-defined criteria that maps to ``Key`` . For example, if you specified
          ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
          instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

          - *(string) --*

    - **RequestedDateTime** *(datetime) --*

      The date and time the command was requested.

    - **Status** *(string) --*

      The status of the command.

    - **StatusDetails** *(string) --*

      A detailed status of the command execution. StatusDetails includes more information than
      Status because it includes states resulting from error and concurrency control
      parameters. StatusDetails can show different results than Status. For more information
      about these statuses, see `Understanding Command Statuses
      <http://docs.aws.amazon.com/systems-manager/latest/userguide/monitor-commands.html>`__ in
      the *AWS Systems Manager User Guide* . StatusDetails can be one of the following values:

      * Pending: The command has not been sent to any instances.

      * In Progress: The command has been sent to at least one instance but has not reached a
      final state on all instances.

      * Success: The command successfully ran on all invocations. This is a terminal state.

      * Delivery Timed Out: The value of MaxErrors or more command invocations shows a status
      of Delivery Timed Out. This is a terminal state.

      * Execution Timed Out: The value of MaxErrors or more command invocations shows a status
      of Execution Timed Out. This is a terminal state.

      * Failed: The value of MaxErrors or more command invocations shows a status of Failed.
      This is a terminal state.

      * Incomplete: The command was attempted on all instances and one or more invocations does
      not have a value of Success but not enough invocations failed for the status to be
      Failed. This is a terminal state.

      * Canceled: The command was terminated before it was completed. This is a terminal state.

      * Rate Exceeded: The number of instances targeted by the command exceeded the account
      limit for pending invocations. The system has canceled the command before running it on
      any instance. This is a terminal state.

    - **OutputS3Region** *(string) --*

      (Deprecated) You can no longer specify this parameter. The system ignores it. Instead,
      Systems Manager automatically determines the Amazon S3 bucket region.

    - **OutputS3BucketName** *(string) --*

      The S3 bucket where the responses to the command executions should be stored. This was
      requested when issuing the command.

    - **OutputS3KeyPrefix** *(string) --*

      The S3 directory path inside the bucket where the responses to the command executions
      should be stored. This was requested when issuing the command.

    - **MaxConcurrency** *(string) --*

      The maximum number of instances that are allowed to run the command at the same time. You
      can specify a number of instances, such as 10, or a percentage of instances, such as 10%.
      The default value is 50. For more information about how to use MaxConcurrency, see
      `Running Commands Using Systems Manager Run Command
      <http://docs.aws.amazon.com/systems-manager/latest/userguide/run-command.html>`__ in the
      *AWS Systems Manager User Guide* .

    - **MaxErrors** *(string) --*

      The maximum number of errors allowed before the system stops sending the command to
      additional targets. You can specify a number of errors, such as 10, or a percentage or
      errors, such as 10%. The default value is 0. For more information about how to use
      MaxErrors, see `Running Commands Using Systems Manager Run Command
      <http://docs.aws.amazon.com/systems-manager/latest/userguide/run-command.html>`__ in the
      *AWS Systems Manager User Guide* .

    - **TargetCount** *(integer) --*

      The number of targets for the command.

    - **CompletedCount** *(integer) --*

      The number of targets for which the command invocation reached a terminal state. Terminal
      states include the following: Success, Failed, Execution Timed Out, Delivery Timed Out,
      Canceled, Terminated, or Undeliverable.

    - **ErrorCount** *(integer) --*

      The number of targets for which the status is Failed or Execution Timed Out.

    - **DeliveryTimedOutCount** *(integer) --*

      The number of targets for which the status is Delivery Timed Out.

    - **ServiceRole** *(string) --*

      The IAM service role that Run Command uses to act on your behalf when sending
      notifications about command status changes.

    - **NotificationConfig** *(dict) --*

      Configurations for sending notifications about command status changes.

      - **NotificationArn** *(string) --*

        An Amazon Resource Name (ARN) for an Amazon Simple Notification Service (Amazon SNS)
        topic. Run Command pushes notifications about command status changes to this topic.

      - **NotificationEvents** *(list) --*

        The different events for which you can receive notifications. These events include the
        following: All (events), InProgress, Success, TimedOut, Cancelled, Failed. To learn
        more about these events, see `Configuring Amazon SNS Notifications for AWS Systems
        Manager
        <http://docs.aws.amazon.com/systems-manager/latest/userguide/monitoring-sns-notifications.html>`__
        in the *AWS Systems Manager User Guide* .

        - *(string) --*

      - **NotificationType** *(string) --*

        Command: Receive notification when the status of a command changes. Invocation: For
        commands sent to multiple instances, receive notification on a per-instance basis when
        the status of a command changes.

    - **CloudWatchOutputConfig** *(dict) --*

      CloudWatch Logs information where you want Systems Manager to send the command output.

      - **CloudWatchLogGroupName** *(string) --*

        The name of the CloudWatch log group where you want to send command output. If you
        don't specify a group name, Systems Manager automatically creates a log group for you.
        The log group uses the following naming format: aws/ssm/*SystemsManagerDocumentName* .

      - **CloudWatchOutputEnabled** *(boolean) --*

        Enables Systems Manager to send command output to CloudWatch Logs.
    """


_ClientListCommandsResponseTypeDef = TypedDict(
    "_ClientListCommandsResponseTypeDef",
    {"Commands": List[ClientListCommandsResponseCommandsTypeDef], "NextToken": str},
    total=False,
)


class ClientListCommandsResponseTypeDef(_ClientListCommandsResponseTypeDef):
    """
    Type definition for `ClientListCommands` `Response`

    - **Commands** *(list) --*

      (Optional) The list of commands requested by the user.

      - *(dict) --*

        Describes a command request.

        - **CommandId** *(string) --*

          A unique identifier for this command.

        - **DocumentName** *(string) --*

          The name of the document requested for execution.

        - **DocumentVersion** *(string) --*

          The SSM document version.

        - **Comment** *(string) --*

          User-specified information about the command, such as a brief description of what the
          command should do.

        - **ExpiresAfter** *(datetime) --*

          If this time is reached and the command has not already started running, it will not run.
          Calculated based on the ExpiresAfter user input provided as part of the SendCommand API.

        - **Parameters** *(dict) --*

          The parameter values to be inserted in the document when running the command.

          - *(string) --*

            - *(list) --*

              - *(string) --*

        - **InstanceIds** *(list) --*

          The instance IDs against which this command was requested.

          - *(string) --*

        - **Targets** *(list) --*

          An array of search criteria that targets instances using a Key,Value combination that you
          specify. Targets is required if you don't provide one or more instance IDs in the call.

          - *(dict) --*

            An array of search criteria that targets instances using a Key,Value combination that
            you specify.

            Supported formats include the following.

            * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

            * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

            * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

            * (Maintenance window targets only)
            ``Key=resource-groups:Name,Values=*resource-group-name* ``

            * (Maintenance window targets only)
            ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

            For example:

            * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

            * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

            * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

            * (Maintenance window targets only)
            ``Key=resource-groups:Name,Values=ProductionResourceGroup``

            * (Maintenance window targets only)
            ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC*
            ``

            For information about how to send commands that target instances using ``Key,Value``
            parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
            <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
            in the *AWS Systems Manager User Guide* .

            - **Key** *(string) --*

              User-defined criteria for sending commands that target instances that meet the
              criteria.

            - **Values** *(list) --*

              User-defined criteria that maps to ``Key`` . For example, if you specified
              ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
              instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

              - *(string) --*

        - **RequestedDateTime** *(datetime) --*

          The date and time the command was requested.

        - **Status** *(string) --*

          The status of the command.

        - **StatusDetails** *(string) --*

          A detailed status of the command execution. StatusDetails includes more information than
          Status because it includes states resulting from error and concurrency control
          parameters. StatusDetails can show different results than Status. For more information
          about these statuses, see `Understanding Command Statuses
          <http://docs.aws.amazon.com/systems-manager/latest/userguide/monitor-commands.html>`__ in
          the *AWS Systems Manager User Guide* . StatusDetails can be one of the following values:

          * Pending: The command has not been sent to any instances.

          * In Progress: The command has been sent to at least one instance but has not reached a
          final state on all instances.

          * Success: The command successfully ran on all invocations. This is a terminal state.

          * Delivery Timed Out: The value of MaxErrors or more command invocations shows a status
          of Delivery Timed Out. This is a terminal state.

          * Execution Timed Out: The value of MaxErrors or more command invocations shows a status
          of Execution Timed Out. This is a terminal state.

          * Failed: The value of MaxErrors or more command invocations shows a status of Failed.
          This is a terminal state.

          * Incomplete: The command was attempted on all instances and one or more invocations does
          not have a value of Success but not enough invocations failed for the status to be
          Failed. This is a terminal state.

          * Canceled: The command was terminated before it was completed. This is a terminal state.

          * Rate Exceeded: The number of instances targeted by the command exceeded the account
          limit for pending invocations. The system has canceled the command before running it on
          any instance. This is a terminal state.

        - **OutputS3Region** *(string) --*

          (Deprecated) You can no longer specify this parameter. The system ignores it. Instead,
          Systems Manager automatically determines the Amazon S3 bucket region.

        - **OutputS3BucketName** *(string) --*

          The S3 bucket where the responses to the command executions should be stored. This was
          requested when issuing the command.

        - **OutputS3KeyPrefix** *(string) --*

          The S3 directory path inside the bucket where the responses to the command executions
          should be stored. This was requested when issuing the command.

        - **MaxConcurrency** *(string) --*

          The maximum number of instances that are allowed to run the command at the same time. You
          can specify a number of instances, such as 10, or a percentage of instances, such as 10%.
          The default value is 50. For more information about how to use MaxConcurrency, see
          `Running Commands Using Systems Manager Run Command
          <http://docs.aws.amazon.com/systems-manager/latest/userguide/run-command.html>`__ in the
          *AWS Systems Manager User Guide* .

        - **MaxErrors** *(string) --*

          The maximum number of errors allowed before the system stops sending the command to
          additional targets. You can specify a number of errors, such as 10, or a percentage or
          errors, such as 10%. The default value is 0. For more information about how to use
          MaxErrors, see `Running Commands Using Systems Manager Run Command
          <http://docs.aws.amazon.com/systems-manager/latest/userguide/run-command.html>`__ in the
          *AWS Systems Manager User Guide* .

        - **TargetCount** *(integer) --*

          The number of targets for the command.

        - **CompletedCount** *(integer) --*

          The number of targets for which the command invocation reached a terminal state. Terminal
          states include the following: Success, Failed, Execution Timed Out, Delivery Timed Out,
          Canceled, Terminated, or Undeliverable.

        - **ErrorCount** *(integer) --*

          The number of targets for which the status is Failed or Execution Timed Out.

        - **DeliveryTimedOutCount** *(integer) --*

          The number of targets for which the status is Delivery Timed Out.

        - **ServiceRole** *(string) --*

          The IAM service role that Run Command uses to act on your behalf when sending
          notifications about command status changes.

        - **NotificationConfig** *(dict) --*

          Configurations for sending notifications about command status changes.

          - **NotificationArn** *(string) --*

            An Amazon Resource Name (ARN) for an Amazon Simple Notification Service (Amazon SNS)
            topic. Run Command pushes notifications about command status changes to this topic.

          - **NotificationEvents** *(list) --*

            The different events for which you can receive notifications. These events include the
            following: All (events), InProgress, Success, TimedOut, Cancelled, Failed. To learn
            more about these events, see `Configuring Amazon SNS Notifications for AWS Systems
            Manager
            <http://docs.aws.amazon.com/systems-manager/latest/userguide/monitoring-sns-notifications.html>`__
            in the *AWS Systems Manager User Guide* .

            - *(string) --*

          - **NotificationType** *(string) --*

            Command: Receive notification when the status of a command changes. Invocation: For
            commands sent to multiple instances, receive notification on a per-instance basis when
            the status of a command changes.

        - **CloudWatchOutputConfig** *(dict) --*

          CloudWatch Logs information where you want Systems Manager to send the command output.

          - **CloudWatchLogGroupName** *(string) --*

            The name of the CloudWatch log group where you want to send command output. If you
            don't specify a group name, Systems Manager automatically creates a log group for you.
            The log group uses the following naming format: aws/ssm/*SystemsManagerDocumentName* .

          - **CloudWatchOutputEnabled** *(boolean) --*

            Enables Systems Manager to send command output to CloudWatch Logs.

    - **NextToken** *(string) --*

      (Optional) The token for the next set of items to return. (You received this token from a
      previous call.)
    """


_ClientListComplianceItemsFiltersTypeDef = TypedDict(
    "_ClientListComplianceItemsFiltersTypeDef",
    {"Key": str, "Values": List[str], "Type": str},
    total=False,
)


class ClientListComplianceItemsFiltersTypeDef(_ClientListComplianceItemsFiltersTypeDef):
    """
    Type definition for `ClientListComplianceItems` `Filters`

    One or more filters. Use a filter to return a more specific list of results.

    - **Key** *(string) --*

      The name of the filter.

    - **Values** *(list) --*

      The value for which to search.

      - *(string) --*

    - **Type** *(string) --*

      The type of comparison that should be performed for the value: Equal, NotEqual, BeginWith,
      LessThan, or GreaterThan.
    """


_ClientListComplianceItemsResponseComplianceItemsExecutionSummaryTypeDef = TypedDict(
    "_ClientListComplianceItemsResponseComplianceItemsExecutionSummaryTypeDef",
    {"ExecutionTime": datetime, "ExecutionId": str, "ExecutionType": str},
    total=False,
)


class ClientListComplianceItemsResponseComplianceItemsExecutionSummaryTypeDef(
    _ClientListComplianceItemsResponseComplianceItemsExecutionSummaryTypeDef
):
    """
    Type definition for `ClientListComplianceItemsResponseComplianceItems` `ExecutionSummary`

    A summary for the compliance item. The summary includes an execution ID, the execution
    type (for example, command), and the execution time.

    - **ExecutionTime** *(datetime) --*

      The time the execution ran as a datetime object that is saved in the following format:
      yyyy-MM-dd'T'HH:mm:ss'Z'.

    - **ExecutionId** *(string) --*

      An ID created by the system when ``PutComplianceItems`` was called. For example,
      ``CommandID`` is a valid execution ID. You can use this ID in subsequent calls.

    - **ExecutionType** *(string) --*

      The type of execution. For example, ``Command`` is a valid execution type.
    """


_ClientListComplianceItemsResponseComplianceItemsTypeDef = TypedDict(
    "_ClientListComplianceItemsResponseComplianceItemsTypeDef",
    {
        "ComplianceType": str,
        "ResourceType": str,
        "ResourceId": str,
        "Id": str,
        "Title": str,
        "Status": str,
        "Severity": str,
        "ExecutionSummary": ClientListComplianceItemsResponseComplianceItemsExecutionSummaryTypeDef,
        "Details": Dict[str, str],
    },
    total=False,
)


class ClientListComplianceItemsResponseComplianceItemsTypeDef(
    _ClientListComplianceItemsResponseComplianceItemsTypeDef
):
    """
    Type definition for `ClientListComplianceItemsResponse` `ComplianceItems`

    Information about the compliance as defined by the resource type. For example, for a patch
    resource type, ``Items`` includes information about the PatchSeverity, Classification, etc.

    - **ComplianceType** *(string) --*

      The compliance type. For example, Association (for a State Manager association), Patch,
      or Custom:``string`` are all valid compliance types.

    - **ResourceType** *(string) --*

      The type of resource. ``ManagedInstance`` is currently the only supported resource type.

    - **ResourceId** *(string) --*

      An ID for the resource. For a managed instance, this is the instance ID.

    - **Id** *(string) --*

      An ID for the compliance item. For example, if the compliance item is a Windows patch,
      the ID could be the number of the KB article; for example: KB4010320.

    - **Title** *(string) --*

      A title for the compliance item. For example, if the compliance item is a Windows patch,
      the title could be the title of the KB article for the patch; for example: Security
      Update for Active Directory Federation Services.

    - **Status** *(string) --*

      The status of the compliance item. An item is either COMPLIANT or NON_COMPLIANT.

    - **Severity** *(string) --*

      The severity of the compliance status. Severity can be one of the following: Critical,
      High, Medium, Low, Informational, Unspecified.

    - **ExecutionSummary** *(dict) --*

      A summary for the compliance item. The summary includes an execution ID, the execution
      type (for example, command), and the execution time.

      - **ExecutionTime** *(datetime) --*

        The time the execution ran as a datetime object that is saved in the following format:
        yyyy-MM-dd'T'HH:mm:ss'Z'.

      - **ExecutionId** *(string) --*

        An ID created by the system when ``PutComplianceItems`` was called. For example,
        ``CommandID`` is a valid execution ID. You can use this ID in subsequent calls.

      - **ExecutionType** *(string) --*

        The type of execution. For example, ``Command`` is a valid execution type.

    - **Details** *(dict) --*

      A "Key": "Value" tag combination for the compliance item.

      - *(string) --*

        - *(string) --*
    """


_ClientListComplianceItemsResponseTypeDef = TypedDict(
    "_ClientListComplianceItemsResponseTypeDef",
    {
        "ComplianceItems": List[
            ClientListComplianceItemsResponseComplianceItemsTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)


class ClientListComplianceItemsResponseTypeDef(
    _ClientListComplianceItemsResponseTypeDef
):
    """
    Type definition for `ClientListComplianceItems` `Response`

    - **ComplianceItems** *(list) --*

      A list of compliance information for the specified resource ID.

      - *(dict) --*

        Information about the compliance as defined by the resource type. For example, for a patch
        resource type, ``Items`` includes information about the PatchSeverity, Classification, etc.

        - **ComplianceType** *(string) --*

          The compliance type. For example, Association (for a State Manager association), Patch,
          or Custom:``string`` are all valid compliance types.

        - **ResourceType** *(string) --*

          The type of resource. ``ManagedInstance`` is currently the only supported resource type.

        - **ResourceId** *(string) --*

          An ID for the resource. For a managed instance, this is the instance ID.

        - **Id** *(string) --*

          An ID for the compliance item. For example, if the compliance item is a Windows patch,
          the ID could be the number of the KB article; for example: KB4010320.

        - **Title** *(string) --*

          A title for the compliance item. For example, if the compliance item is a Windows patch,
          the title could be the title of the KB article for the patch; for example: Security
          Update for Active Directory Federation Services.

        - **Status** *(string) --*

          The status of the compliance item. An item is either COMPLIANT or NON_COMPLIANT.

        - **Severity** *(string) --*

          The severity of the compliance status. Severity can be one of the following: Critical,
          High, Medium, Low, Informational, Unspecified.

        - **ExecutionSummary** *(dict) --*

          A summary for the compliance item. The summary includes an execution ID, the execution
          type (for example, command), and the execution time.

          - **ExecutionTime** *(datetime) --*

            The time the execution ran as a datetime object that is saved in the following format:
            yyyy-MM-dd'T'HH:mm:ss'Z'.

          - **ExecutionId** *(string) --*

            An ID created by the system when ``PutComplianceItems`` was called. For example,
            ``CommandID`` is a valid execution ID. You can use this ID in subsequent calls.

          - **ExecutionType** *(string) --*

            The type of execution. For example, ``Command`` is a valid execution type.

        - **Details** *(dict) --*

          A "Key": "Value" tag combination for the compliance item.

          - *(string) --*

            - *(string) --*

    - **NextToken** *(string) --*

      The token for the next set of items to return. Use this token to get the next set of results.
    """


_ClientListComplianceSummariesFiltersTypeDef = TypedDict(
    "_ClientListComplianceSummariesFiltersTypeDef",
    {"Key": str, "Values": List[str], "Type": str},
    total=False,
)


class ClientListComplianceSummariesFiltersTypeDef(
    _ClientListComplianceSummariesFiltersTypeDef
):
    """
    Type definition for `ClientListComplianceSummaries` `Filters`

    One or more filters. Use a filter to return a more specific list of results.

    - **Key** *(string) --*

      The name of the filter.

    - **Values** *(list) --*

      The value for which to search.

      - *(string) --*

    - **Type** *(string) --*

      The type of comparison that should be performed for the value: Equal, NotEqual, BeginWith,
      LessThan, or GreaterThan.
    """


_ClientListComplianceSummariesResponseComplianceSummaryItemsCompliantSummarySeveritySummaryTypeDef = TypedDict(
    "_ClientListComplianceSummariesResponseComplianceSummaryItemsCompliantSummarySeveritySummaryTypeDef",
    {
        "CriticalCount": int,
        "HighCount": int,
        "MediumCount": int,
        "LowCount": int,
        "InformationalCount": int,
        "UnspecifiedCount": int,
    },
    total=False,
)


class ClientListComplianceSummariesResponseComplianceSummaryItemsCompliantSummarySeveritySummaryTypeDef(
    _ClientListComplianceSummariesResponseComplianceSummaryItemsCompliantSummarySeveritySummaryTypeDef
):
    """
    Type definition for `ClientListComplianceSummariesResponseComplianceSummaryItemsCompliantSummary` `SeveritySummary`

    A summary of the compliance severity by compliance type.

    - **CriticalCount** *(integer) --*

      The total number of resources or compliance items that have a severity level of
      critical. Critical severity is determined by the organization that published the
      compliance items.

    - **HighCount** *(integer) --*

      The total number of resources or compliance items that have a severity level of high.
      High severity is determined by the organization that published the compliance items.

    - **MediumCount** *(integer) --*

      The total number of resources or compliance items that have a severity level of
      medium. Medium severity is determined by the organization that published the
      compliance items.

    - **LowCount** *(integer) --*

      The total number of resources or compliance items that have a severity level of low.
      Low severity is determined by the organization that published the compliance items.

    - **InformationalCount** *(integer) --*

      The total number of resources or compliance items that have a severity level of
      informational. Informational severity is determined by the organization that
      published the compliance items.

    - **UnspecifiedCount** *(integer) --*

      The total number of resources or compliance items that have a severity level of
      unspecified. Unspecified severity is determined by the organization that published
      the compliance items.
    """


_ClientListComplianceSummariesResponseComplianceSummaryItemsCompliantSummaryTypeDef = TypedDict(
    "_ClientListComplianceSummariesResponseComplianceSummaryItemsCompliantSummaryTypeDef",
    {
        "CompliantCount": int,
        "SeveritySummary": ClientListComplianceSummariesResponseComplianceSummaryItemsCompliantSummarySeveritySummaryTypeDef,
    },
    total=False,
)


class ClientListComplianceSummariesResponseComplianceSummaryItemsCompliantSummaryTypeDef(
    _ClientListComplianceSummariesResponseComplianceSummaryItemsCompliantSummaryTypeDef
):
    """
    Type definition for `ClientListComplianceSummariesResponseComplianceSummaryItems` `CompliantSummary`

    A list of COMPLIANT items for the specified compliance type.

    - **CompliantCount** *(integer) --*

      The total number of resources that are compliant.

    - **SeveritySummary** *(dict) --*

      A summary of the compliance severity by compliance type.

      - **CriticalCount** *(integer) --*

        The total number of resources or compliance items that have a severity level of
        critical. Critical severity is determined by the organization that published the
        compliance items.

      - **HighCount** *(integer) --*

        The total number of resources or compliance items that have a severity level of high.
        High severity is determined by the organization that published the compliance items.

      - **MediumCount** *(integer) --*

        The total number of resources or compliance items that have a severity level of
        medium. Medium severity is determined by the organization that published the
        compliance items.

      - **LowCount** *(integer) --*

        The total number of resources or compliance items that have a severity level of low.
        Low severity is determined by the organization that published the compliance items.

      - **InformationalCount** *(integer) --*

        The total number of resources or compliance items that have a severity level of
        informational. Informational severity is determined by the organization that
        published the compliance items.

      - **UnspecifiedCount** *(integer) --*

        The total number of resources or compliance items that have a severity level of
        unspecified. Unspecified severity is determined by the organization that published
        the compliance items.
    """


_ClientListComplianceSummariesResponseComplianceSummaryItemsNonCompliantSummarySeveritySummaryTypeDef = TypedDict(
    "_ClientListComplianceSummariesResponseComplianceSummaryItemsNonCompliantSummarySeveritySummaryTypeDef",
    {
        "CriticalCount": int,
        "HighCount": int,
        "MediumCount": int,
        "LowCount": int,
        "InformationalCount": int,
        "UnspecifiedCount": int,
    },
    total=False,
)


class ClientListComplianceSummariesResponseComplianceSummaryItemsNonCompliantSummarySeveritySummaryTypeDef(
    _ClientListComplianceSummariesResponseComplianceSummaryItemsNonCompliantSummarySeveritySummaryTypeDef
):
    """
    Type definition for `ClientListComplianceSummariesResponseComplianceSummaryItemsNonCompliantSummary` `SeveritySummary`

    A summary of the non-compliance severity by compliance type

    - **CriticalCount** *(integer) --*

      The total number of resources or compliance items that have a severity level of
      critical. Critical severity is determined by the organization that published the
      compliance items.

    - **HighCount** *(integer) --*

      The total number of resources or compliance items that have a severity level of high.
      High severity is determined by the organization that published the compliance items.

    - **MediumCount** *(integer) --*

      The total number of resources or compliance items that have a severity level of
      medium. Medium severity is determined by the organization that published the
      compliance items.

    - **LowCount** *(integer) --*

      The total number of resources or compliance items that have a severity level of low.
      Low severity is determined by the organization that published the compliance items.

    - **InformationalCount** *(integer) --*

      The total number of resources or compliance items that have a severity level of
      informational. Informational severity is determined by the organization that
      published the compliance items.

    - **UnspecifiedCount** *(integer) --*

      The total number of resources or compliance items that have a severity level of
      unspecified. Unspecified severity is determined by the organization that published
      the compliance items.
    """


_ClientListComplianceSummariesResponseComplianceSummaryItemsNonCompliantSummaryTypeDef = TypedDict(
    "_ClientListComplianceSummariesResponseComplianceSummaryItemsNonCompliantSummaryTypeDef",
    {
        "NonCompliantCount": int,
        "SeveritySummary": ClientListComplianceSummariesResponseComplianceSummaryItemsNonCompliantSummarySeveritySummaryTypeDef,
    },
    total=False,
)


class ClientListComplianceSummariesResponseComplianceSummaryItemsNonCompliantSummaryTypeDef(
    _ClientListComplianceSummariesResponseComplianceSummaryItemsNonCompliantSummaryTypeDef
):
    """
    Type definition for `ClientListComplianceSummariesResponseComplianceSummaryItems` `NonCompliantSummary`

    A list of NON_COMPLIANT items for the specified compliance type.

    - **NonCompliantCount** *(integer) --*

      The total number of compliance items that are not compliant.

    - **SeveritySummary** *(dict) --*

      A summary of the non-compliance severity by compliance type

      - **CriticalCount** *(integer) --*

        The total number of resources or compliance items that have a severity level of
        critical. Critical severity is determined by the organization that published the
        compliance items.

      - **HighCount** *(integer) --*

        The total number of resources or compliance items that have a severity level of high.
        High severity is determined by the organization that published the compliance items.

      - **MediumCount** *(integer) --*

        The total number of resources or compliance items that have a severity level of
        medium. Medium severity is determined by the organization that published the
        compliance items.

      - **LowCount** *(integer) --*

        The total number of resources or compliance items that have a severity level of low.
        Low severity is determined by the organization that published the compliance items.

      - **InformationalCount** *(integer) --*

        The total number of resources or compliance items that have a severity level of
        informational. Informational severity is determined by the organization that
        published the compliance items.

      - **UnspecifiedCount** *(integer) --*

        The total number of resources or compliance items that have a severity level of
        unspecified. Unspecified severity is determined by the organization that published
        the compliance items.
    """


_ClientListComplianceSummariesResponseComplianceSummaryItemsTypeDef = TypedDict(
    "_ClientListComplianceSummariesResponseComplianceSummaryItemsTypeDef",
    {
        "ComplianceType": str,
        "CompliantSummary": ClientListComplianceSummariesResponseComplianceSummaryItemsCompliantSummaryTypeDef,
        "NonCompliantSummary": ClientListComplianceSummariesResponseComplianceSummaryItemsNonCompliantSummaryTypeDef,
    },
    total=False,
)


class ClientListComplianceSummariesResponseComplianceSummaryItemsTypeDef(
    _ClientListComplianceSummariesResponseComplianceSummaryItemsTypeDef
):
    """
    Type definition for `ClientListComplianceSummariesResponse` `ComplianceSummaryItems`

    A summary of compliance information by compliance type.

    - **ComplianceType** *(string) --*

      The type of compliance item. For example, the compliance type can be Association, Patch,
      or Custom:string.

    - **CompliantSummary** *(dict) --*

      A list of COMPLIANT items for the specified compliance type.

      - **CompliantCount** *(integer) --*

        The total number of resources that are compliant.

      - **SeveritySummary** *(dict) --*

        A summary of the compliance severity by compliance type.

        - **CriticalCount** *(integer) --*

          The total number of resources or compliance items that have a severity level of
          critical. Critical severity is determined by the organization that published the
          compliance items.

        - **HighCount** *(integer) --*

          The total number of resources or compliance items that have a severity level of high.
          High severity is determined by the organization that published the compliance items.

        - **MediumCount** *(integer) --*

          The total number of resources or compliance items that have a severity level of
          medium. Medium severity is determined by the organization that published the
          compliance items.

        - **LowCount** *(integer) --*

          The total number of resources or compliance items that have a severity level of low.
          Low severity is determined by the organization that published the compliance items.

        - **InformationalCount** *(integer) --*

          The total number of resources or compliance items that have a severity level of
          informational. Informational severity is determined by the organization that
          published the compliance items.

        - **UnspecifiedCount** *(integer) --*

          The total number of resources or compliance items that have a severity level of
          unspecified. Unspecified severity is determined by the organization that published
          the compliance items.

    - **NonCompliantSummary** *(dict) --*

      A list of NON_COMPLIANT items for the specified compliance type.

      - **NonCompliantCount** *(integer) --*

        The total number of compliance items that are not compliant.

      - **SeveritySummary** *(dict) --*

        A summary of the non-compliance severity by compliance type

        - **CriticalCount** *(integer) --*

          The total number of resources or compliance items that have a severity level of
          critical. Critical severity is determined by the organization that published the
          compliance items.

        - **HighCount** *(integer) --*

          The total number of resources or compliance items that have a severity level of high.
          High severity is determined by the organization that published the compliance items.

        - **MediumCount** *(integer) --*

          The total number of resources or compliance items that have a severity level of
          medium. Medium severity is determined by the organization that published the
          compliance items.

        - **LowCount** *(integer) --*

          The total number of resources or compliance items that have a severity level of low.
          Low severity is determined by the organization that published the compliance items.

        - **InformationalCount** *(integer) --*

          The total number of resources or compliance items that have a severity level of
          informational. Informational severity is determined by the organization that
          published the compliance items.

        - **UnspecifiedCount** *(integer) --*

          The total number of resources or compliance items that have a severity level of
          unspecified. Unspecified severity is determined by the organization that published
          the compliance items.
    """


_ClientListComplianceSummariesResponseTypeDef = TypedDict(
    "_ClientListComplianceSummariesResponseTypeDef",
    {
        "ComplianceSummaryItems": List[
            ClientListComplianceSummariesResponseComplianceSummaryItemsTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)


class ClientListComplianceSummariesResponseTypeDef(
    _ClientListComplianceSummariesResponseTypeDef
):
    """
    Type definition for `ClientListComplianceSummaries` `Response`

    - **ComplianceSummaryItems** *(list) --*

      A list of compliant and non-compliant summary counts based on compliance types. For example,
      this call returns State Manager associations, patches, or custom compliance types according
      to the filter criteria that you specified.

      - *(dict) --*

        A summary of compliance information by compliance type.

        - **ComplianceType** *(string) --*

          The type of compliance item. For example, the compliance type can be Association, Patch,
          or Custom:string.

        - **CompliantSummary** *(dict) --*

          A list of COMPLIANT items for the specified compliance type.

          - **CompliantCount** *(integer) --*

            The total number of resources that are compliant.

          - **SeveritySummary** *(dict) --*

            A summary of the compliance severity by compliance type.

            - **CriticalCount** *(integer) --*

              The total number of resources or compliance items that have a severity level of
              critical. Critical severity is determined by the organization that published the
              compliance items.

            - **HighCount** *(integer) --*

              The total number of resources or compliance items that have a severity level of high.
              High severity is determined by the organization that published the compliance items.

            - **MediumCount** *(integer) --*

              The total number of resources or compliance items that have a severity level of
              medium. Medium severity is determined by the organization that published the
              compliance items.

            - **LowCount** *(integer) --*

              The total number of resources or compliance items that have a severity level of low.
              Low severity is determined by the organization that published the compliance items.

            - **InformationalCount** *(integer) --*

              The total number of resources or compliance items that have a severity level of
              informational. Informational severity is determined by the organization that
              published the compliance items.

            - **UnspecifiedCount** *(integer) --*

              The total number of resources or compliance items that have a severity level of
              unspecified. Unspecified severity is determined by the organization that published
              the compliance items.

        - **NonCompliantSummary** *(dict) --*

          A list of NON_COMPLIANT items for the specified compliance type.

          - **NonCompliantCount** *(integer) --*

            The total number of compliance items that are not compliant.

          - **SeveritySummary** *(dict) --*

            A summary of the non-compliance severity by compliance type

            - **CriticalCount** *(integer) --*

              The total number of resources or compliance items that have a severity level of
              critical. Critical severity is determined by the organization that published the
              compliance items.

            - **HighCount** *(integer) --*

              The total number of resources or compliance items that have a severity level of high.
              High severity is determined by the organization that published the compliance items.

            - **MediumCount** *(integer) --*

              The total number of resources or compliance items that have a severity level of
              medium. Medium severity is determined by the organization that published the
              compliance items.

            - **LowCount** *(integer) --*

              The total number of resources or compliance items that have a severity level of low.
              Low severity is determined by the organization that published the compliance items.

            - **InformationalCount** *(integer) --*

              The total number of resources or compliance items that have a severity level of
              informational. Informational severity is determined by the organization that
              published the compliance items.

            - **UnspecifiedCount** *(integer) --*

              The total number of resources or compliance items that have a severity level of
              unspecified. Unspecified severity is determined by the organization that published
              the compliance items.

    - **NextToken** *(string) --*

      The token for the next set of items to return. Use this token to get the next set of results.
    """


_ClientListDocumentVersionsResponseDocumentVersionsTypeDef = TypedDict(
    "_ClientListDocumentVersionsResponseDocumentVersionsTypeDef",
    {
        "Name": str,
        "DocumentVersion": str,
        "VersionName": str,
        "CreatedDate": datetime,
        "IsDefaultVersion": bool,
        "DocumentFormat": str,
        "Status": str,
        "StatusInformation": str,
    },
    total=False,
)


class ClientListDocumentVersionsResponseDocumentVersionsTypeDef(
    _ClientListDocumentVersionsResponseDocumentVersionsTypeDef
):
    """
    Type definition for `ClientListDocumentVersionsResponse` `DocumentVersions`

    Version information about the document.

    - **Name** *(string) --*

      The document name.

    - **DocumentVersion** *(string) --*

      The document version.

    - **VersionName** *(string) --*

      The version of the artifact associated with the document. For example, "Release 12,
      Update 6". This value is unique across all versions of a document, and cannot be changed.

    - **CreatedDate** *(datetime) --*

      The date the document was created.

    - **IsDefaultVersion** *(boolean) --*

      An identifier for the default version of the document.

    - **DocumentFormat** *(string) --*

      The document format, either JSON or YAML.

    - **Status** *(string) --*

      The status of the Systems Manager document, such as ``Creating`` , ``Active`` ,
      ``Failed`` , and ``Deleting`` .

    - **StatusInformation** *(string) --*

      A message returned by AWS Systems Manager that explains the ``Status`` value. For
      example, a ``Failed`` status might be explained by the ``StatusInformation`` message,
      "The specified S3 bucket does not exist. Verify that the URL of the S3 bucket is correct."
    """


_ClientListDocumentVersionsResponseTypeDef = TypedDict(
    "_ClientListDocumentVersionsResponseTypeDef",
    {
        "DocumentVersions": List[
            ClientListDocumentVersionsResponseDocumentVersionsTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)


class ClientListDocumentVersionsResponseTypeDef(
    _ClientListDocumentVersionsResponseTypeDef
):
    """
    Type definition for `ClientListDocumentVersions` `Response`

    - **DocumentVersions** *(list) --*

      The document versions.

      - *(dict) --*

        Version information about the document.

        - **Name** *(string) --*

          The document name.

        - **DocumentVersion** *(string) --*

          The document version.

        - **VersionName** *(string) --*

          The version of the artifact associated with the document. For example, "Release 12,
          Update 6". This value is unique across all versions of a document, and cannot be changed.

        - **CreatedDate** *(datetime) --*

          The date the document was created.

        - **IsDefaultVersion** *(boolean) --*

          An identifier for the default version of the document.

        - **DocumentFormat** *(string) --*

          The document format, either JSON or YAML.

        - **Status** *(string) --*

          The status of the Systems Manager document, such as ``Creating`` , ``Active`` ,
          ``Failed`` , and ``Deleting`` .

        - **StatusInformation** *(string) --*

          A message returned by AWS Systems Manager that explains the ``Status`` value. For
          example, a ``Failed`` status might be explained by the ``StatusInformation`` message,
          "The specified S3 bucket does not exist. Verify that the URL of the S3 bucket is correct."

    - **NextToken** *(string) --*

      The token to use when requesting the next set of items. If there are no additional items to
      return, the string is empty.
    """


_ClientListDocumentsDocumentFilterListTypeDef = TypedDict(
    "_ClientListDocumentsDocumentFilterListTypeDef", {"key": str, "value": str}
)


class ClientListDocumentsDocumentFilterListTypeDef(
    _ClientListDocumentsDocumentFilterListTypeDef
):
    """
    Type definition for `ClientListDocuments` `DocumentFilterList`

    Describes a filter.

    - **key** *(string) --* **[REQUIRED]**

      The name of the filter.

    - **value** *(string) --* **[REQUIRED]**

      The value of the filter.
    """


_ClientListDocumentsFiltersTypeDef = TypedDict(
    "_ClientListDocumentsFiltersTypeDef", {"Key": str, "Values": List[str]}, total=False
)


class ClientListDocumentsFiltersTypeDef(_ClientListDocumentsFiltersTypeDef):
    """
    Type definition for `ClientListDocuments` `Filters`

    One or more filters. Use a filter to return a more specific list of documents.

    For keys, you can specify one or more tags that have been applied to a document.

    Other valid values include Owner, Name, PlatformTypes, and DocumentType.

    Note that only one Owner can be specified in a request. For example: ``Key=Owner,Values=Self`` .

    If you use Name as a key, you can use a name prefix to return a list of documents. For example,
    in the AWS CLI, to return a list of all documents that begin with ``Te`` , run the following
    command:

     ``aws ssm list-documents --filters Key=Name,Values=Te``

    If you specify more than two keys, only documents that are identified by all the tags are
    returned in the results. If you specify more than two values for a key, documents that are
    identified by any of the values are returned in the results.

    To specify a custom key and value pair, use the format ``Key=tag:[tagName],Values=[valueName]``
    .

    For example, if you created a Key called region and are using the AWS CLI to call the
    ``list-documents`` command:

     ``aws ssm list-documents --filters Key=tag:region,Values=east,west Key=Owner,Values=Self``

    - **Key** *(string) --*

      The name of the filter key.

    - **Values** *(list) --*

      The value for the filter key.

      - *(string) --*
    """


_ClientListDocumentsResponseDocumentIdentifiersTagsTypeDef = TypedDict(
    "_ClientListDocumentsResponseDocumentIdentifiersTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)


class ClientListDocumentsResponseDocumentIdentifiersTagsTypeDef(
    _ClientListDocumentsResponseDocumentIdentifiersTagsTypeDef
):
    """
    Type definition for `ClientListDocumentsResponseDocumentIdentifiers` `Tags`

    Metadata that you assign to your AWS resources. Tags enable you to categorize your
    resources in different ways, for example, by purpose, owner, or environment. In Systems
    Manager, you can apply tags to documents, managed instances, maintenance windows,
    Parameter Store parameters, and patch baselines.

    - **Key** *(string) --*

      The name of the tag.

    - **Value** *(string) --*

      The value of the tag.
    """


_ClientListDocumentsResponseDocumentIdentifiersTypeDef = TypedDict(
    "_ClientListDocumentsResponseDocumentIdentifiersTypeDef",
    {
        "Name": str,
        "Owner": str,
        "VersionName": str,
        "PlatformTypes": List[str],
        "DocumentVersion": str,
        "DocumentType": str,
        "SchemaVersion": str,
        "DocumentFormat": str,
        "TargetType": str,
        "Tags": List[ClientListDocumentsResponseDocumentIdentifiersTagsTypeDef],
    },
    total=False,
)


class ClientListDocumentsResponseDocumentIdentifiersTypeDef(
    _ClientListDocumentsResponseDocumentIdentifiersTypeDef
):
    """
    Type definition for `ClientListDocumentsResponse` `DocumentIdentifiers`

    Describes the name of a Systems Manager document.

    - **Name** *(string) --*

      The name of the Systems Manager document.

    - **Owner** *(string) --*

      The AWS user account that created the document.

    - **VersionName** *(string) --*

      An optional field specifying the version of the artifact associated with the document.
      For example, "Release 12, Update 6". This value is unique across all versions of a
      document, and cannot be changed.

    - **PlatformTypes** *(list) --*

      The operating system platform.

      - *(string) --*

    - **DocumentVersion** *(string) --*

      The document version.

    - **DocumentType** *(string) --*

      The document type.

    - **SchemaVersion** *(string) --*

      The schema version.

    - **DocumentFormat** *(string) --*

      The document format, either JSON or YAML.

    - **TargetType** *(string) --*

      The target type which defines the kinds of resources the document can run on. For
      example, /AWS::EC2::Instance. For a list of valid resource types, see `AWS Resource Types
      Reference
      <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html>`__
      in the *AWS CloudFormation User Guide* .

    - **Tags** *(list) --*

      The tags, or metadata, that have been applied to the document.

      - *(dict) --*

        Metadata that you assign to your AWS resources. Tags enable you to categorize your
        resources in different ways, for example, by purpose, owner, or environment. In Systems
        Manager, you can apply tags to documents, managed instances, maintenance windows,
        Parameter Store parameters, and patch baselines.

        - **Key** *(string) --*

          The name of the tag.

        - **Value** *(string) --*

          The value of the tag.
    """


_ClientListDocumentsResponseTypeDef = TypedDict(
    "_ClientListDocumentsResponseTypeDef",
    {
        "DocumentIdentifiers": List[
            ClientListDocumentsResponseDocumentIdentifiersTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)


class ClientListDocumentsResponseTypeDef(_ClientListDocumentsResponseTypeDef):
    """
    Type definition for `ClientListDocuments` `Response`

    - **DocumentIdentifiers** *(list) --*

      The names of the Systems Manager documents.

      - *(dict) --*

        Describes the name of a Systems Manager document.

        - **Name** *(string) --*

          The name of the Systems Manager document.

        - **Owner** *(string) --*

          The AWS user account that created the document.

        - **VersionName** *(string) --*

          An optional field specifying the version of the artifact associated with the document.
          For example, "Release 12, Update 6". This value is unique across all versions of a
          document, and cannot be changed.

        - **PlatformTypes** *(list) --*

          The operating system platform.

          - *(string) --*

        - **DocumentVersion** *(string) --*

          The document version.

        - **DocumentType** *(string) --*

          The document type.

        - **SchemaVersion** *(string) --*

          The schema version.

        - **DocumentFormat** *(string) --*

          The document format, either JSON or YAML.

        - **TargetType** *(string) --*

          The target type which defines the kinds of resources the document can run on. For
          example, /AWS::EC2::Instance. For a list of valid resource types, see `AWS Resource Types
          Reference
          <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html>`__
          in the *AWS CloudFormation User Guide* .

        - **Tags** *(list) --*

          The tags, or metadata, that have been applied to the document.

          - *(dict) --*

            Metadata that you assign to your AWS resources. Tags enable you to categorize your
            resources in different ways, for example, by purpose, owner, or environment. In Systems
            Manager, you can apply tags to documents, managed instances, maintenance windows,
            Parameter Store parameters, and patch baselines.

            - **Key** *(string) --*

              The name of the tag.

            - **Value** *(string) --*

              The value of the tag.

    - **NextToken** *(string) --*

      The token to use when requesting the next set of items. If there are no additional items to
      return, the string is empty.
    """


_RequiredClientListInventoryEntriesFiltersTypeDef = TypedDict(
    "_RequiredClientListInventoryEntriesFiltersTypeDef",
    {"Key": str, "Values": List[str]},
)
_OptionalClientListInventoryEntriesFiltersTypeDef = TypedDict(
    "_OptionalClientListInventoryEntriesFiltersTypeDef", {"Type": str}, total=False
)


class ClientListInventoryEntriesFiltersTypeDef(
    _RequiredClientListInventoryEntriesFiltersTypeDef,
    _OptionalClientListInventoryEntriesFiltersTypeDef,
):
    """
    Type definition for `ClientListInventoryEntries` `Filters`

    One or more filters. Use a filter to return a more specific list of results.

    - **Key** *(string) --* **[REQUIRED]**

      The name of the filter key.

    - **Values** *(list) --* **[REQUIRED]**

      Inventory filter values. Example: inventory filter where instance IDs are specified as values
      Key=AWS:InstanceInformation.InstanceId,Values= i-a12b3c4d5e6g, i-1a2b3c4d5e6,Type=Equal

      - *(string) --*

    - **Type** *(string) --*

      The type of filter. Valid values include the following:
      "Equal"|"NotEqual"|"BeginWith"|"LessThan"|"GreaterThan"
    """


_ClientListInventoryEntriesResponseTypeDef = TypedDict(
    "_ClientListInventoryEntriesResponseTypeDef",
    {
        "TypeName": str,
        "InstanceId": str,
        "SchemaVersion": str,
        "CaptureTime": str,
        "Entries": List[Dict[str, str]],
        "NextToken": str,
    },
    total=False,
)


class ClientListInventoryEntriesResponseTypeDef(
    _ClientListInventoryEntriesResponseTypeDef
):
    """
    Type definition for `ClientListInventoryEntries` `Response`

    - **TypeName** *(string) --*

      The type of inventory item returned by the request.

    - **InstanceId** *(string) --*

      The instance ID targeted by the request to query inventory information.

    - **SchemaVersion** *(string) --*

      The inventory schema version used by the instance(s).

    - **CaptureTime** *(string) --*

      The time that inventory information was collected for the instance(s).

    - **Entries** *(list) --*

      A list of inventory items on the instance(s).

      - *(dict) --*

        - *(string) --*

          - *(string) --*

    - **NextToken** *(string) --*

      The token to use when requesting the next set of items. If there are no additional items to
      return, the string is empty.
    """


_ClientListResourceComplianceSummariesFiltersTypeDef = TypedDict(
    "_ClientListResourceComplianceSummariesFiltersTypeDef",
    {"Key": str, "Values": List[str], "Type": str},
    total=False,
)


class ClientListResourceComplianceSummariesFiltersTypeDef(
    _ClientListResourceComplianceSummariesFiltersTypeDef
):
    """
    Type definition for `ClientListResourceComplianceSummaries` `Filters`

    One or more filters. Use a filter to return a more specific list of results.

    - **Key** *(string) --*

      The name of the filter.

    - **Values** *(list) --*

      The value for which to search.

      - *(string) --*

    - **Type** *(string) --*

      The type of comparison that should be performed for the value: Equal, NotEqual, BeginWith,
      LessThan, or GreaterThan.
    """


_ClientListResourceComplianceSummariesResponseResourceComplianceSummaryItemsCompliantSummarySeveritySummaryTypeDef = TypedDict(
    "_ClientListResourceComplianceSummariesResponseResourceComplianceSummaryItemsCompliantSummarySeveritySummaryTypeDef",
    {
        "CriticalCount": int,
        "HighCount": int,
        "MediumCount": int,
        "LowCount": int,
        "InformationalCount": int,
        "UnspecifiedCount": int,
    },
    total=False,
)


class ClientListResourceComplianceSummariesResponseResourceComplianceSummaryItemsCompliantSummarySeveritySummaryTypeDef(
    _ClientListResourceComplianceSummariesResponseResourceComplianceSummaryItemsCompliantSummarySeveritySummaryTypeDef
):
    """
    Type definition for `ClientListResourceComplianceSummariesResponseResourceComplianceSummaryItemsCompliantSummary` `SeveritySummary`

    A summary of the compliance severity by compliance type.

    - **CriticalCount** *(integer) --*

      The total number of resources or compliance items that have a severity level of
      critical. Critical severity is determined by the organization that published the
      compliance items.

    - **HighCount** *(integer) --*

      The total number of resources or compliance items that have a severity level of high.
      High severity is determined by the organization that published the compliance items.

    - **MediumCount** *(integer) --*

      The total number of resources or compliance items that have a severity level of
      medium. Medium severity is determined by the organization that published the
      compliance items.

    - **LowCount** *(integer) --*

      The total number of resources or compliance items that have a severity level of low.
      Low severity is determined by the organization that published the compliance items.

    - **InformationalCount** *(integer) --*

      The total number of resources or compliance items that have a severity level of
      informational. Informational severity is determined by the organization that
      published the compliance items.

    - **UnspecifiedCount** *(integer) --*

      The total number of resources or compliance items that have a severity level of
      unspecified. Unspecified severity is determined by the organization that published
      the compliance items.
    """


_ClientListResourceComplianceSummariesResponseResourceComplianceSummaryItemsCompliantSummaryTypeDef = TypedDict(
    "_ClientListResourceComplianceSummariesResponseResourceComplianceSummaryItemsCompliantSummaryTypeDef",
    {
        "CompliantCount": int,
        "SeveritySummary": ClientListResourceComplianceSummariesResponseResourceComplianceSummaryItemsCompliantSummarySeveritySummaryTypeDef,
    },
    total=False,
)


class ClientListResourceComplianceSummariesResponseResourceComplianceSummaryItemsCompliantSummaryTypeDef(
    _ClientListResourceComplianceSummariesResponseResourceComplianceSummaryItemsCompliantSummaryTypeDef
):
    """
    Type definition for `ClientListResourceComplianceSummariesResponseResourceComplianceSummaryItems` `CompliantSummary`

    A list of items that are compliant for the resource.

    - **CompliantCount** *(integer) --*

      The total number of resources that are compliant.

    - **SeveritySummary** *(dict) --*

      A summary of the compliance severity by compliance type.

      - **CriticalCount** *(integer) --*

        The total number of resources or compliance items that have a severity level of
        critical. Critical severity is determined by the organization that published the
        compliance items.

      - **HighCount** *(integer) --*

        The total number of resources or compliance items that have a severity level of high.
        High severity is determined by the organization that published the compliance items.

      - **MediumCount** *(integer) --*

        The total number of resources or compliance items that have a severity level of
        medium. Medium severity is determined by the organization that published the
        compliance items.

      - **LowCount** *(integer) --*

        The total number of resources or compliance items that have a severity level of low.
        Low severity is determined by the organization that published the compliance items.

      - **InformationalCount** *(integer) --*

        The total number of resources or compliance items that have a severity level of
        informational. Informational severity is determined by the organization that
        published the compliance items.

      - **UnspecifiedCount** *(integer) --*

        The total number of resources or compliance items that have a severity level of
        unspecified. Unspecified severity is determined by the organization that published
        the compliance items.
    """


_ClientListResourceComplianceSummariesResponseResourceComplianceSummaryItemsExecutionSummaryTypeDef = TypedDict(
    "_ClientListResourceComplianceSummariesResponseResourceComplianceSummaryItemsExecutionSummaryTypeDef",
    {"ExecutionTime": datetime, "ExecutionId": str, "ExecutionType": str},
    total=False,
)


class ClientListResourceComplianceSummariesResponseResourceComplianceSummaryItemsExecutionSummaryTypeDef(
    _ClientListResourceComplianceSummariesResponseResourceComplianceSummaryItemsExecutionSummaryTypeDef
):
    """
    Type definition for `ClientListResourceComplianceSummariesResponseResourceComplianceSummaryItems` `ExecutionSummary`

    Information about the execution.

    - **ExecutionTime** *(datetime) --*

      The time the execution ran as a datetime object that is saved in the following format:
      yyyy-MM-dd'T'HH:mm:ss'Z'.

    - **ExecutionId** *(string) --*

      An ID created by the system when ``PutComplianceItems`` was called. For example,
      ``CommandID`` is a valid execution ID. You can use this ID in subsequent calls.

    - **ExecutionType** *(string) --*

      The type of execution. For example, ``Command`` is a valid execution type.
    """


_ClientListResourceComplianceSummariesResponseResourceComplianceSummaryItemsNonCompliantSummarySeveritySummaryTypeDef = TypedDict(
    "_ClientListResourceComplianceSummariesResponseResourceComplianceSummaryItemsNonCompliantSummarySeveritySummaryTypeDef",
    {
        "CriticalCount": int,
        "HighCount": int,
        "MediumCount": int,
        "LowCount": int,
        "InformationalCount": int,
        "UnspecifiedCount": int,
    },
    total=False,
)


class ClientListResourceComplianceSummariesResponseResourceComplianceSummaryItemsNonCompliantSummarySeveritySummaryTypeDef(
    _ClientListResourceComplianceSummariesResponseResourceComplianceSummaryItemsNonCompliantSummarySeveritySummaryTypeDef
):
    """
    Type definition for `ClientListResourceComplianceSummariesResponseResourceComplianceSummaryItemsNonCompliantSummary` `SeveritySummary`

    A summary of the non-compliance severity by compliance type

    - **CriticalCount** *(integer) --*

      The total number of resources or compliance items that have a severity level of
      critical. Critical severity is determined by the organization that published the
      compliance items.

    - **HighCount** *(integer) --*

      The total number of resources or compliance items that have a severity level of high.
      High severity is determined by the organization that published the compliance items.

    - **MediumCount** *(integer) --*

      The total number of resources or compliance items that have a severity level of
      medium. Medium severity is determined by the organization that published the
      compliance items.

    - **LowCount** *(integer) --*

      The total number of resources or compliance items that have a severity level of low.
      Low severity is determined by the organization that published the compliance items.

    - **InformationalCount** *(integer) --*

      The total number of resources or compliance items that have a severity level of
      informational. Informational severity is determined by the organization that
      published the compliance items.

    - **UnspecifiedCount** *(integer) --*

      The total number of resources or compliance items that have a severity level of
      unspecified. Unspecified severity is determined by the organization that published
      the compliance items.
    """


_ClientListResourceComplianceSummariesResponseResourceComplianceSummaryItemsNonCompliantSummaryTypeDef = TypedDict(
    "_ClientListResourceComplianceSummariesResponseResourceComplianceSummaryItemsNonCompliantSummaryTypeDef",
    {
        "NonCompliantCount": int,
        "SeveritySummary": ClientListResourceComplianceSummariesResponseResourceComplianceSummaryItemsNonCompliantSummarySeveritySummaryTypeDef,
    },
    total=False,
)


class ClientListResourceComplianceSummariesResponseResourceComplianceSummaryItemsNonCompliantSummaryTypeDef(
    _ClientListResourceComplianceSummariesResponseResourceComplianceSummaryItemsNonCompliantSummaryTypeDef
):
    """
    Type definition for `ClientListResourceComplianceSummariesResponseResourceComplianceSummaryItems` `NonCompliantSummary`

    A list of items that aren't compliant for the resource.

    - **NonCompliantCount** *(integer) --*

      The total number of compliance items that are not compliant.

    - **SeveritySummary** *(dict) --*

      A summary of the non-compliance severity by compliance type

      - **CriticalCount** *(integer) --*

        The total number of resources or compliance items that have a severity level of
        critical. Critical severity is determined by the organization that published the
        compliance items.

      - **HighCount** *(integer) --*

        The total number of resources or compliance items that have a severity level of high.
        High severity is determined by the organization that published the compliance items.

      - **MediumCount** *(integer) --*

        The total number of resources or compliance items that have a severity level of
        medium. Medium severity is determined by the organization that published the
        compliance items.

      - **LowCount** *(integer) --*

        The total number of resources or compliance items that have a severity level of low.
        Low severity is determined by the organization that published the compliance items.

      - **InformationalCount** *(integer) --*

        The total number of resources or compliance items that have a severity level of
        informational. Informational severity is determined by the organization that
        published the compliance items.

      - **UnspecifiedCount** *(integer) --*

        The total number of resources or compliance items that have a severity level of
        unspecified. Unspecified severity is determined by the organization that published
        the compliance items.
    """


_ClientListResourceComplianceSummariesResponseResourceComplianceSummaryItemsTypeDef = TypedDict(
    "_ClientListResourceComplianceSummariesResponseResourceComplianceSummaryItemsTypeDef",
    {
        "ComplianceType": str,
        "ResourceType": str,
        "ResourceId": str,
        "Status": str,
        "OverallSeverity": str,
        "ExecutionSummary": ClientListResourceComplianceSummariesResponseResourceComplianceSummaryItemsExecutionSummaryTypeDef,
        "CompliantSummary": ClientListResourceComplianceSummariesResponseResourceComplianceSummaryItemsCompliantSummaryTypeDef,
        "NonCompliantSummary": ClientListResourceComplianceSummariesResponseResourceComplianceSummaryItemsNonCompliantSummaryTypeDef,
    },
    total=False,
)


class ClientListResourceComplianceSummariesResponseResourceComplianceSummaryItemsTypeDef(
    _ClientListResourceComplianceSummariesResponseResourceComplianceSummaryItemsTypeDef
):
    """
    Type definition for `ClientListResourceComplianceSummariesResponse` `ResourceComplianceSummaryItems`

    Compliance summary information for a specific resource.

    - **ComplianceType** *(string) --*

      The compliance type.

    - **ResourceType** *(string) --*

      The resource type.

    - **ResourceId** *(string) --*

      The resource ID.

    - **Status** *(string) --*

      The compliance status for the resource.

    - **OverallSeverity** *(string) --*

      The highest severity item found for the resource. The resource is compliant for this item.

    - **ExecutionSummary** *(dict) --*

      Information about the execution.

      - **ExecutionTime** *(datetime) --*

        The time the execution ran as a datetime object that is saved in the following format:
        yyyy-MM-dd'T'HH:mm:ss'Z'.

      - **ExecutionId** *(string) --*

        An ID created by the system when ``PutComplianceItems`` was called. For example,
        ``CommandID`` is a valid execution ID. You can use this ID in subsequent calls.

      - **ExecutionType** *(string) --*

        The type of execution. For example, ``Command`` is a valid execution type.

    - **CompliantSummary** *(dict) --*

      A list of items that are compliant for the resource.

      - **CompliantCount** *(integer) --*

        The total number of resources that are compliant.

      - **SeveritySummary** *(dict) --*

        A summary of the compliance severity by compliance type.

        - **CriticalCount** *(integer) --*

          The total number of resources or compliance items that have a severity level of
          critical. Critical severity is determined by the organization that published the
          compliance items.

        - **HighCount** *(integer) --*

          The total number of resources or compliance items that have a severity level of high.
          High severity is determined by the organization that published the compliance items.

        - **MediumCount** *(integer) --*

          The total number of resources or compliance items that have a severity level of
          medium. Medium severity is determined by the organization that published the
          compliance items.

        - **LowCount** *(integer) --*

          The total number of resources or compliance items that have a severity level of low.
          Low severity is determined by the organization that published the compliance items.

        - **InformationalCount** *(integer) --*

          The total number of resources or compliance items that have a severity level of
          informational. Informational severity is determined by the organization that
          published the compliance items.

        - **UnspecifiedCount** *(integer) --*

          The total number of resources or compliance items that have a severity level of
          unspecified. Unspecified severity is determined by the organization that published
          the compliance items.

    - **NonCompliantSummary** *(dict) --*

      A list of items that aren't compliant for the resource.

      - **NonCompliantCount** *(integer) --*

        The total number of compliance items that are not compliant.

      - **SeveritySummary** *(dict) --*

        A summary of the non-compliance severity by compliance type

        - **CriticalCount** *(integer) --*

          The total number of resources or compliance items that have a severity level of
          critical. Critical severity is determined by the organization that published the
          compliance items.

        - **HighCount** *(integer) --*

          The total number of resources or compliance items that have a severity level of high.
          High severity is determined by the organization that published the compliance items.

        - **MediumCount** *(integer) --*

          The total number of resources or compliance items that have a severity level of
          medium. Medium severity is determined by the organization that published the
          compliance items.

        - **LowCount** *(integer) --*

          The total number of resources or compliance items that have a severity level of low.
          Low severity is determined by the organization that published the compliance items.

        - **InformationalCount** *(integer) --*

          The total number of resources or compliance items that have a severity level of
          informational. Informational severity is determined by the organization that
          published the compliance items.

        - **UnspecifiedCount** *(integer) --*

          The total number of resources or compliance items that have a severity level of
          unspecified. Unspecified severity is determined by the organization that published
          the compliance items.
    """


_ClientListResourceComplianceSummariesResponseTypeDef = TypedDict(
    "_ClientListResourceComplianceSummariesResponseTypeDef",
    {
        "ResourceComplianceSummaryItems": List[
            ClientListResourceComplianceSummariesResponseResourceComplianceSummaryItemsTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)


class ClientListResourceComplianceSummariesResponseTypeDef(
    _ClientListResourceComplianceSummariesResponseTypeDef
):
    """
    Type definition for `ClientListResourceComplianceSummaries` `Response`

    - **ResourceComplianceSummaryItems** *(list) --*

      A summary count for specified or targeted managed instances. Summary count includes
      information about compliant and non-compliant State Manager associations, patch status, or
      custom items according to the filter criteria that you specify.

      - *(dict) --*

        Compliance summary information for a specific resource.

        - **ComplianceType** *(string) --*

          The compliance type.

        - **ResourceType** *(string) --*

          The resource type.

        - **ResourceId** *(string) --*

          The resource ID.

        - **Status** *(string) --*

          The compliance status for the resource.

        - **OverallSeverity** *(string) --*

          The highest severity item found for the resource. The resource is compliant for this item.

        - **ExecutionSummary** *(dict) --*

          Information about the execution.

          - **ExecutionTime** *(datetime) --*

            The time the execution ran as a datetime object that is saved in the following format:
            yyyy-MM-dd'T'HH:mm:ss'Z'.

          - **ExecutionId** *(string) --*

            An ID created by the system when ``PutComplianceItems`` was called. For example,
            ``CommandID`` is a valid execution ID. You can use this ID in subsequent calls.

          - **ExecutionType** *(string) --*

            The type of execution. For example, ``Command`` is a valid execution type.

        - **CompliantSummary** *(dict) --*

          A list of items that are compliant for the resource.

          - **CompliantCount** *(integer) --*

            The total number of resources that are compliant.

          - **SeveritySummary** *(dict) --*

            A summary of the compliance severity by compliance type.

            - **CriticalCount** *(integer) --*

              The total number of resources or compliance items that have a severity level of
              critical. Critical severity is determined by the organization that published the
              compliance items.

            - **HighCount** *(integer) --*

              The total number of resources or compliance items that have a severity level of high.
              High severity is determined by the organization that published the compliance items.

            - **MediumCount** *(integer) --*

              The total number of resources or compliance items that have a severity level of
              medium. Medium severity is determined by the organization that published the
              compliance items.

            - **LowCount** *(integer) --*

              The total number of resources or compliance items that have a severity level of low.
              Low severity is determined by the organization that published the compliance items.

            - **InformationalCount** *(integer) --*

              The total number of resources or compliance items that have a severity level of
              informational. Informational severity is determined by the organization that
              published the compliance items.

            - **UnspecifiedCount** *(integer) --*

              The total number of resources or compliance items that have a severity level of
              unspecified. Unspecified severity is determined by the organization that published
              the compliance items.

        - **NonCompliantSummary** *(dict) --*

          A list of items that aren't compliant for the resource.

          - **NonCompliantCount** *(integer) --*

            The total number of compliance items that are not compliant.

          - **SeveritySummary** *(dict) --*

            A summary of the non-compliance severity by compliance type

            - **CriticalCount** *(integer) --*

              The total number of resources or compliance items that have a severity level of
              critical. Critical severity is determined by the organization that published the
              compliance items.

            - **HighCount** *(integer) --*

              The total number of resources or compliance items that have a severity level of high.
              High severity is determined by the organization that published the compliance items.

            - **MediumCount** *(integer) --*

              The total number of resources or compliance items that have a severity level of
              medium. Medium severity is determined by the organization that published the
              compliance items.

            - **LowCount** *(integer) --*

              The total number of resources or compliance items that have a severity level of low.
              Low severity is determined by the organization that published the compliance items.

            - **InformationalCount** *(integer) --*

              The total number of resources or compliance items that have a severity level of
              informational. Informational severity is determined by the organization that
              published the compliance items.

            - **UnspecifiedCount** *(integer) --*

              The total number of resources or compliance items that have a severity level of
              unspecified. Unspecified severity is determined by the organization that published
              the compliance items.

    - **NextToken** *(string) --*

      The token for the next set of items to return. Use this token to get the next set of results.
    """


_ClientListResourceDataSyncResponseResourceDataSyncItemsS3DestinationTypeDef = TypedDict(
    "_ClientListResourceDataSyncResponseResourceDataSyncItemsS3DestinationTypeDef",
    {
        "BucketName": str,
        "Prefix": str,
        "SyncFormat": str,
        "Region": str,
        "AWSKMSKeyARN": str,
    },
    total=False,
)


class ClientListResourceDataSyncResponseResourceDataSyncItemsS3DestinationTypeDef(
    _ClientListResourceDataSyncResponseResourceDataSyncItemsS3DestinationTypeDef
):
    """
    Type definition for `ClientListResourceDataSyncResponseResourceDataSyncItems` `S3Destination`

    Configuration information for the target Amazon S3 bucket.

    - **BucketName** *(string) --*

      The name of the Amazon S3 bucket where the aggregated data is stored.

    - **Prefix** *(string) --*

      An Amazon S3 prefix for the bucket.

    - **SyncFormat** *(string) --*

      A supported sync format. The following format is currently supported: JsonSerDe

    - **Region** *(string) --*

      The AWS Region with the Amazon S3 bucket targeted by the Resource Data Sync.

    - **AWSKMSKeyARN** *(string) --*

      The ARN of an encryption key for a destination in Amazon S3. Must belong to the same
      Region as the destination Amazon S3 bucket.
    """


_ClientListResourceDataSyncResponseResourceDataSyncItemsTypeDef = TypedDict(
    "_ClientListResourceDataSyncResponseResourceDataSyncItemsTypeDef",
    {
        "SyncName": str,
        "S3Destination": ClientListResourceDataSyncResponseResourceDataSyncItemsS3DestinationTypeDef,
        "LastSyncTime": datetime,
        "LastSuccessfulSyncTime": datetime,
        "LastStatus": str,
        "SyncCreatedTime": datetime,
        "LastSyncStatusMessage": str,
    },
    total=False,
)


class ClientListResourceDataSyncResponseResourceDataSyncItemsTypeDef(
    _ClientListResourceDataSyncResponseResourceDataSyncItemsTypeDef
):
    """
    Type definition for `ClientListResourceDataSyncResponse` `ResourceDataSyncItems`

    Information about a Resource Data Sync configuration, including its current status and last
    successful sync.

    - **SyncName** *(string) --*

      The name of the Resource Data Sync.

    - **S3Destination** *(dict) --*

      Configuration information for the target Amazon S3 bucket.

      - **BucketName** *(string) --*

        The name of the Amazon S3 bucket where the aggregated data is stored.

      - **Prefix** *(string) --*

        An Amazon S3 prefix for the bucket.

      - **SyncFormat** *(string) --*

        A supported sync format. The following format is currently supported: JsonSerDe

      - **Region** *(string) --*

        The AWS Region with the Amazon S3 bucket targeted by the Resource Data Sync.

      - **AWSKMSKeyARN** *(string) --*

        The ARN of an encryption key for a destination in Amazon S3. Must belong to the same
        Region as the destination Amazon S3 bucket.

    - **LastSyncTime** *(datetime) --*

      The last time the configuration attempted to sync (UTC).

    - **LastSuccessfulSyncTime** *(datetime) --*

      The last time the sync operations returned a status of ``SUCCESSFUL`` (UTC).

    - **LastStatus** *(string) --*

      The status reported by the last sync.

    - **SyncCreatedTime** *(datetime) --*

      The date and time the configuration was created (UTC).

    - **LastSyncStatusMessage** *(string) --*

      The status message details reported by the last sync.
    """


_ClientListResourceDataSyncResponseTypeDef = TypedDict(
    "_ClientListResourceDataSyncResponseTypeDef",
    {
        "ResourceDataSyncItems": List[
            ClientListResourceDataSyncResponseResourceDataSyncItemsTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)


class ClientListResourceDataSyncResponseTypeDef(
    _ClientListResourceDataSyncResponseTypeDef
):
    """
    Type definition for `ClientListResourceDataSync` `Response`

    - **ResourceDataSyncItems** *(list) --*

      A list of your current Resource Data Sync configurations and their statuses.

      - *(dict) --*

        Information about a Resource Data Sync configuration, including its current status and last
        successful sync.

        - **SyncName** *(string) --*

          The name of the Resource Data Sync.

        - **S3Destination** *(dict) --*

          Configuration information for the target Amazon S3 bucket.

          - **BucketName** *(string) --*

            The name of the Amazon S3 bucket where the aggregated data is stored.

          - **Prefix** *(string) --*

            An Amazon S3 prefix for the bucket.

          - **SyncFormat** *(string) --*

            A supported sync format. The following format is currently supported: JsonSerDe

          - **Region** *(string) --*

            The AWS Region with the Amazon S3 bucket targeted by the Resource Data Sync.

          - **AWSKMSKeyARN** *(string) --*

            The ARN of an encryption key for a destination in Amazon S3. Must belong to the same
            Region as the destination Amazon S3 bucket.

        - **LastSyncTime** *(datetime) --*

          The last time the configuration attempted to sync (UTC).

        - **LastSuccessfulSyncTime** *(datetime) --*

          The last time the sync operations returned a status of ``SUCCESSFUL`` (UTC).

        - **LastStatus** *(string) --*

          The status reported by the last sync.

        - **SyncCreatedTime** *(datetime) --*

          The date and time the configuration was created (UTC).

        - **LastSyncStatusMessage** *(string) --*

          The status message details reported by the last sync.

    - **NextToken** *(string) --*

      The token for the next set of items to return. Use this token to get the next set of results.
    """


_ClientListTagsForResourceResponseTagListTypeDef = TypedDict(
    "_ClientListTagsForResourceResponseTagListTypeDef",
    {"Key": str, "Value": str},
    total=False,
)


class ClientListTagsForResourceResponseTagListTypeDef(
    _ClientListTagsForResourceResponseTagListTypeDef
):
    """
    Type definition for `ClientListTagsForResourceResponse` `TagList`

    Metadata that you assign to your AWS resources. Tags enable you to categorize your
    resources in different ways, for example, by purpose, owner, or environment. In Systems
    Manager, you can apply tags to documents, managed instances, maintenance windows, Parameter
    Store parameters, and patch baselines.

    - **Key** *(string) --*

      The name of the tag.

    - **Value** *(string) --*

      The value of the tag.
    """


_ClientListTagsForResourceResponseTypeDef = TypedDict(
    "_ClientListTagsForResourceResponseTypeDef",
    {"TagList": List[ClientListTagsForResourceResponseTagListTypeDef]},
    total=False,
)


class ClientListTagsForResourceResponseTypeDef(
    _ClientListTagsForResourceResponseTypeDef
):
    """
    Type definition for `ClientListTagsForResource` `Response`

    - **TagList** *(list) --*

      A list of tags.

      - *(dict) --*

        Metadata that you assign to your AWS resources. Tags enable you to categorize your
        resources in different ways, for example, by purpose, owner, or environment. In Systems
        Manager, you can apply tags to documents, managed instances, maintenance windows, Parameter
        Store parameters, and patch baselines.

        - **Key** *(string) --*

          The name of the tag.

        - **Value** *(string) --*

          The value of the tag.
    """


_RequiredClientPutComplianceItemsExecutionSummaryTypeDef = TypedDict(
    "_RequiredClientPutComplianceItemsExecutionSummaryTypeDef",
    {"ExecutionTime": datetime},
)
_OptionalClientPutComplianceItemsExecutionSummaryTypeDef = TypedDict(
    "_OptionalClientPutComplianceItemsExecutionSummaryTypeDef",
    {"ExecutionId": str, "ExecutionType": str},
    total=False,
)


class ClientPutComplianceItemsExecutionSummaryTypeDef(
    _RequiredClientPutComplianceItemsExecutionSummaryTypeDef,
    _OptionalClientPutComplianceItemsExecutionSummaryTypeDef,
):
    """
    Type definition for `ClientPutComplianceItems` `ExecutionSummary`

    A summary of the call execution that includes an execution ID, the type of execution (for
    example, ``Command`` ), and the date/time of the execution using a datetime object that is saved
    in the following format: yyyy-MM-dd'T'HH:mm:ss'Z'.

    - **ExecutionTime** *(datetime) --* **[REQUIRED]**

      The time the execution ran as a datetime object that is saved in the following format:
      yyyy-MM-dd'T'HH:mm:ss'Z'.

    - **ExecutionId** *(string) --*

      An ID created by the system when ``PutComplianceItems`` was called. For example, ``CommandID``
      is a valid execution ID. You can use this ID in subsequent calls.

    - **ExecutionType** *(string) --*

      The type of execution. For example, ``Command`` is a valid execution type.
    """


_RequiredClientPutComplianceItemsItemsTypeDef = TypedDict(
    "_RequiredClientPutComplianceItemsItemsTypeDef", {"Severity": str, "Status": str}
)
_OptionalClientPutComplianceItemsItemsTypeDef = TypedDict(
    "_OptionalClientPutComplianceItemsItemsTypeDef",
    {"Id": str, "Title": str, "Details": Dict[str, str]},
    total=False,
)


class ClientPutComplianceItemsItemsTypeDef(
    _RequiredClientPutComplianceItemsItemsTypeDef,
    _OptionalClientPutComplianceItemsItemsTypeDef,
):
    """
    Type definition for `ClientPutComplianceItems` `Items`

    Information about a compliance item.

    - **Id** *(string) --*

      The compliance item ID. For example, if the compliance item is a Windows patch, the ID could
      be the number of the KB article.

    - **Title** *(string) --*

      The title of the compliance item. For example, if the compliance item is a Windows patch, the
      title could be the title of the KB article for the patch; for example: Security Update for
      Active Directory Federation Services.

    - **Severity** *(string) --* **[REQUIRED]**

      The severity of the compliance status. Severity can be one of the following: Critical, High,
      Medium, Low, Informational, Unspecified.

    - **Status** *(string) --* **[REQUIRED]**

      The status of the compliance item. An item is either COMPLIANT or NON_COMPLIANT.

    - **Details** *(dict) --*

      A "Key": "Value" tag combination for the compliance item.

      - *(string) --*

        - *(string) --*
    """


_RequiredClientPutInventoryItemsTypeDef = TypedDict(
    "_RequiredClientPutInventoryItemsTypeDef",
    {"TypeName": str, "SchemaVersion": str, "CaptureTime": str},
)
_OptionalClientPutInventoryItemsTypeDef = TypedDict(
    "_OptionalClientPutInventoryItemsTypeDef",
    {"ContentHash": str, "Content": List[Dict[str, str]], "Context": Dict[str, str]},
    total=False,
)


class ClientPutInventoryItemsTypeDef(
    _RequiredClientPutInventoryItemsTypeDef, _OptionalClientPutInventoryItemsTypeDef
):
    """
    Type definition for `ClientPutInventory` `Items`

    Information collected from managed instances based on your inventory policy document

    - **TypeName** *(string) --* **[REQUIRED]**

      The name of the inventory type. Default inventory item type names start with AWS. Custom
      inventory type names will start with Custom. Default inventory item types include the
      following: AWS:AWSComponent, AWS:Application, AWS:InstanceInformation, AWS:Network, and
      AWS:WindowsUpdate.

    - **SchemaVersion** *(string) --* **[REQUIRED]**

      The schema version for the inventory item.

    - **CaptureTime** *(string) --* **[REQUIRED]**

      The time the inventory information was collected.

    - **ContentHash** *(string) --*

      MD5 hash of the inventory item type contents. The content hash is used to determine whether
      to update inventory information. The PutInventory API does not update the inventory item type
      contents if the MD5 hash has not changed since last update.

    - **Content** *(list) --*

      The inventory data of the inventory type.

      - *(dict) --*

        - *(string) --*

          - *(string) --*

    - **Context** *(dict) --*

      A map of associated properties for a specified inventory type. For example, with this
      attribute, you can specify the ``ExecutionId`` , ``ExecutionType`` , ``ComplianceType``
      properties of the ``AWS:ComplianceItem`` type.

      - *(string) --*

        - *(string) --*
    """


_ClientPutInventoryResponseTypeDef = TypedDict(
    "_ClientPutInventoryResponseTypeDef", {"Message": str}, total=False
)


class ClientPutInventoryResponseTypeDef(_ClientPutInventoryResponseTypeDef):
    """
    Type definition for `ClientPutInventory` `Response`

    - **Message** *(string) --*

      Information about the request.
    """


_ClientPutParameterResponseTypeDef = TypedDict(
    "_ClientPutParameterResponseTypeDef", {"Version": int, "Tier": str}, total=False
)


class ClientPutParameterResponseTypeDef(_ClientPutParameterResponseTypeDef):
    """
    Type definition for `ClientPutParameter` `Response`

    - **Version** *(integer) --*

      The new version number of a parameter. If you edit a parameter value, Parameter Store
      automatically creates a new version and assigns this new version a unique ID. You can
      reference a parameter version ID in API actions or in Systems Manager documents (SSM
      documents). By default, if you don't specify a specific version, the system returns the
      latest parameter value when a parameter is called.

    - **Tier** *(string) --*

      The tier assigned to the parameter.
    """


_ClientPutParameterTagsTypeDef = TypedDict(
    "_ClientPutParameterTagsTypeDef", {"Key": str, "Value": str}
)


class ClientPutParameterTagsTypeDef(_ClientPutParameterTagsTypeDef):
    """
    Type definition for `ClientPutParameter` `Tags`

    Metadata that you assign to your AWS resources. Tags enable you to categorize your resources in
    different ways, for example, by purpose, owner, or environment. In Systems Manager, you can
    apply tags to documents, managed instances, maintenance windows, Parameter Store parameters,
    and patch baselines.

    - **Key** *(string) --* **[REQUIRED]**

      The name of the tag.

    - **Value** *(string) --* **[REQUIRED]**

      The value of the tag.
    """


_ClientRegisterDefaultPatchBaselineResponseTypeDef = TypedDict(
    "_ClientRegisterDefaultPatchBaselineResponseTypeDef",
    {"BaselineId": str},
    total=False,
)


class ClientRegisterDefaultPatchBaselineResponseTypeDef(
    _ClientRegisterDefaultPatchBaselineResponseTypeDef
):
    """
    Type definition for `ClientRegisterDefaultPatchBaseline` `Response`

    - **BaselineId** *(string) --*

      The ID of the default patch baseline.
    """


_ClientRegisterPatchBaselineForPatchGroupResponseTypeDef = TypedDict(
    "_ClientRegisterPatchBaselineForPatchGroupResponseTypeDef",
    {"BaselineId": str, "PatchGroup": str},
    total=False,
)


class ClientRegisterPatchBaselineForPatchGroupResponseTypeDef(
    _ClientRegisterPatchBaselineForPatchGroupResponseTypeDef
):
    """
    Type definition for `ClientRegisterPatchBaselineForPatchGroup` `Response`

    - **BaselineId** *(string) --*

      The ID of the patch baseline the patch group was registered with.

    - **PatchGroup** *(string) --*

      The name of the patch group registered with the patch baseline.
    """


_ClientRegisterTargetWithMaintenanceWindowResponseTypeDef = TypedDict(
    "_ClientRegisterTargetWithMaintenanceWindowResponseTypeDef",
    {"WindowTargetId": str},
    total=False,
)


class ClientRegisterTargetWithMaintenanceWindowResponseTypeDef(
    _ClientRegisterTargetWithMaintenanceWindowResponseTypeDef
):
    """
    Type definition for `ClientRegisterTargetWithMaintenanceWindow` `Response`

    - **WindowTargetId** *(string) --*

      The ID of the target definition in this maintenance window.
    """


_ClientRegisterTargetWithMaintenanceWindowTargetsTypeDef = TypedDict(
    "_ClientRegisterTargetWithMaintenanceWindowTargetsTypeDef",
    {"Key": str, "Values": List[str]},
    total=False,
)


class ClientRegisterTargetWithMaintenanceWindowTargetsTypeDef(
    _ClientRegisterTargetWithMaintenanceWindowTargetsTypeDef
):
    """
    Type definition for `ClientRegisterTargetWithMaintenanceWindow` `Targets`

    An array of search criteria that targets instances using a Key,Value combination that you
    specify.

    Supported formats include the following.

    * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

    * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

    * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

    * (Maintenance window targets only) ``Key=resource-groups:Name,Values=*resource-group-name* ``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

    For example:

    * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

    * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

    * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

    * (Maintenance window targets only) ``Key=resource-groups:Name,Values=ProductionResourceGroup``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC* ``

    For information about how to send commands that target instances using ``Key,Value``
    parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
    <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
    in the *AWS Systems Manager User Guide* .

    - **Key** *(string) --*

      User-defined criteria for sending commands that target instances that meet the criteria.

    - **Values** *(list) --*

      User-defined criteria that maps to ``Key`` . For example, if you specified ``tag:ServerRole``
      , you could specify ``value:WebServer`` to run a command on instances that include Amazon EC2
      tags of ``ServerRole,WebServer`` .

      - *(string) --*
    """


_RequiredClientRegisterTaskWithMaintenanceWindowLoggingInfoTypeDef = TypedDict(
    "_RequiredClientRegisterTaskWithMaintenanceWindowLoggingInfoTypeDef",
    {"S3BucketName": str, "S3Region": str},
)
_OptionalClientRegisterTaskWithMaintenanceWindowLoggingInfoTypeDef = TypedDict(
    "_OptionalClientRegisterTaskWithMaintenanceWindowLoggingInfoTypeDef",
    {"S3KeyPrefix": str},
    total=False,
)


class ClientRegisterTaskWithMaintenanceWindowLoggingInfoTypeDef(
    _RequiredClientRegisterTaskWithMaintenanceWindowLoggingInfoTypeDef,
    _OptionalClientRegisterTaskWithMaintenanceWindowLoggingInfoTypeDef,
):
    """
    Type definition for `ClientRegisterTaskWithMaintenanceWindow` `LoggingInfo`

    A structure containing information about an Amazon S3 bucket to write instance-level logs to.

    .. note::

       ``LoggingInfo`` has been deprecated. To specify an S3 bucket to contain logs, instead use the
       ``OutputS3BucketName`` and ``OutputS3KeyPrefix`` options in the ``TaskInvocationParameters``
       structure. For information about how Systems Manager handles these options for the supported
       maintenance window task types, see  MaintenanceWindowTaskInvocationParameters .

    - **S3BucketName** *(string) --* **[REQUIRED]**

      The name of an Amazon S3 bucket where execution logs are stored .

    - **S3KeyPrefix** *(string) --*

      (Optional) The Amazon S3 bucket subfolder.

    - **S3Region** *(string) --* **[REQUIRED]**

      The region where the Amazon S3 bucket is located.
    """


_ClientRegisterTaskWithMaintenanceWindowResponseTypeDef = TypedDict(
    "_ClientRegisterTaskWithMaintenanceWindowResponseTypeDef",
    {"WindowTaskId": str},
    total=False,
)


class ClientRegisterTaskWithMaintenanceWindowResponseTypeDef(
    _ClientRegisterTaskWithMaintenanceWindowResponseTypeDef
):
    """
    Type definition for `ClientRegisterTaskWithMaintenanceWindow` `Response`

    - **WindowTaskId** *(string) --*

      The ID of the task in the maintenance window.
    """


_ClientRegisterTaskWithMaintenanceWindowTargetsTypeDef = TypedDict(
    "_ClientRegisterTaskWithMaintenanceWindowTargetsTypeDef",
    {"Key": str, "Values": List[str]},
    total=False,
)


class ClientRegisterTaskWithMaintenanceWindowTargetsTypeDef(
    _ClientRegisterTaskWithMaintenanceWindowTargetsTypeDef
):
    """
    Type definition for `ClientRegisterTaskWithMaintenanceWindow` `Targets`

    An array of search criteria that targets instances using a Key,Value combination that you
    specify.

    Supported formats include the following.

    * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

    * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

    * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

    * (Maintenance window targets only) ``Key=resource-groups:Name,Values=*resource-group-name* ``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

    For example:

    * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

    * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

    * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

    * (Maintenance window targets only) ``Key=resource-groups:Name,Values=ProductionResourceGroup``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC* ``

    For information about how to send commands that target instances using ``Key,Value``
    parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
    <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
    in the *AWS Systems Manager User Guide* .

    - **Key** *(string) --*

      User-defined criteria for sending commands that target instances that meet the criteria.

    - **Values** *(list) --*

      User-defined criteria that maps to ``Key`` . For example, if you specified ``tag:ServerRole``
      , you could specify ``value:WebServer`` to run a command on instances that include Amazon EC2
      tags of ``ServerRole,WebServer`` .

      - *(string) --*
    """


_ClientRegisterTaskWithMaintenanceWindowTaskInvocationParametersAutomationTypeDef = TypedDict(
    "_ClientRegisterTaskWithMaintenanceWindowTaskInvocationParametersAutomationTypeDef",
    {"DocumentVersion": str, "Parameters": Dict[str, List[str]]},
    total=False,
)


class ClientRegisterTaskWithMaintenanceWindowTaskInvocationParametersAutomationTypeDef(
    _ClientRegisterTaskWithMaintenanceWindowTaskInvocationParametersAutomationTypeDef
):
    """
    Type definition for `ClientRegisterTaskWithMaintenanceWindowTaskInvocationParameters` `Automation`

    The parameters for an AUTOMATION task type.

    - **DocumentVersion** *(string) --*

      The version of an Automation document to use during task execution.

    - **Parameters** *(dict) --*

      The parameters for the AUTOMATION task.

      For information about specifying and updating task parameters, see
      RegisterTaskWithMaintenanceWindow and  UpdateMaintenanceWindowTask .

      .. note::

         ``LoggingInfo`` has been deprecated. To specify an S3 bucket to contain logs, instead use
         the ``OutputS3BucketName`` and ``OutputS3KeyPrefix`` options in the
         ``TaskInvocationParameters`` structure. For information about how Systems Manager handles
         these options for the supported maintenance window task types, see
         MaintenanceWindowTaskInvocationParameters .

         ``TaskParameters`` has been deprecated. To specify parameters to pass to a task when it
         runs, instead use the ``Parameters`` option in the ``TaskInvocationParameters`` structure.
         For information about how Systems Manager handles these options for the supported
         maintenance window task types, see  MaintenanceWindowTaskInvocationParameters .

        For AUTOMATION task types, Systems Manager ignores any values specified for these
        parameters.

      - *(string) --*

        - *(list) --*

          - *(string) --*
    """


_ClientRegisterTaskWithMaintenanceWindowTaskInvocationParametersLambdaTypeDef = TypedDict(
    "_ClientRegisterTaskWithMaintenanceWindowTaskInvocationParametersLambdaTypeDef",
    {"ClientContext": str, "Qualifier": str, "Payload": bytes},
    total=False,
)


class ClientRegisterTaskWithMaintenanceWindowTaskInvocationParametersLambdaTypeDef(
    _ClientRegisterTaskWithMaintenanceWindowTaskInvocationParametersLambdaTypeDef
):
    """
    Type definition for `ClientRegisterTaskWithMaintenanceWindowTaskInvocationParameters` `Lambda`

    The parameters for a LAMBDA task type.

    - **ClientContext** *(string) --*

      Pass client-specific information to the Lambda function that you are invoking. You can then
      process the client information in your Lambda function as you choose through the context
      variable.

    - **Qualifier** *(string) --*

      (Optional) Specify a Lambda function version or alias name. If you specify a function
      version, the action uses the qualified function ARN to invoke a specific Lambda function. If
      you specify an alias name, the action uses the alias ARN to invoke the Lambda function
      version to which the alias points.

    - **Payload** *(bytes) --*

      JSON to provide to your Lambda function as input.
    """


_ClientRegisterTaskWithMaintenanceWindowTaskInvocationParametersRunCommandNotificationConfigTypeDef = TypedDict(
    "_ClientRegisterTaskWithMaintenanceWindowTaskInvocationParametersRunCommandNotificationConfigTypeDef",
    {"NotificationArn": str, "NotificationEvents": List[str], "NotificationType": str},
    total=False,
)


class ClientRegisterTaskWithMaintenanceWindowTaskInvocationParametersRunCommandNotificationConfigTypeDef(
    _ClientRegisterTaskWithMaintenanceWindowTaskInvocationParametersRunCommandNotificationConfigTypeDef
):
    """
    Type definition for `ClientRegisterTaskWithMaintenanceWindowTaskInvocationParametersRunCommand` `NotificationConfig`

    Configurations for sending notifications about command status changes on a per-instance basis.

    - **NotificationArn** *(string) --*

      An Amazon Resource Name (ARN) for an Amazon Simple Notification Service (Amazon SNS) topic.
      Run Command pushes notifications about command status changes to this topic.

    - **NotificationEvents** *(list) --*

      The different events for which you can receive notifications. These events include the
      following: All (events), InProgress, Success, TimedOut, Cancelled, Failed. To learn more
      about these events, see `Configuring Amazon SNS Notifications for AWS Systems Manager
      <http://docs.aws.amazon.com/systems-manager/latest/userguide/monitoring-sns-notifications.html>`__
      in the *AWS Systems Manager User Guide* .

      - *(string) --*

    - **NotificationType** *(string) --*

      Command: Receive notification when the status of a command changes. Invocation: For
      commands sent to multiple instances, receive notification on a per-instance basis when the
      status of a command changes.
    """


_ClientRegisterTaskWithMaintenanceWindowTaskInvocationParametersRunCommandTypeDef = TypedDict(
    "_ClientRegisterTaskWithMaintenanceWindowTaskInvocationParametersRunCommandTypeDef",
    {
        "Comment": str,
        "DocumentHash": str,
        "DocumentHashType": str,
        "NotificationConfig": ClientRegisterTaskWithMaintenanceWindowTaskInvocationParametersRunCommandNotificationConfigTypeDef,
        "OutputS3BucketName": str,
        "OutputS3KeyPrefix": str,
        "Parameters": Dict[str, List[str]],
        "ServiceRoleArn": str,
        "TimeoutSeconds": int,
    },
    total=False,
)


class ClientRegisterTaskWithMaintenanceWindowTaskInvocationParametersRunCommandTypeDef(
    _ClientRegisterTaskWithMaintenanceWindowTaskInvocationParametersRunCommandTypeDef
):
    """
    Type definition for `ClientRegisterTaskWithMaintenanceWindowTaskInvocationParameters` `RunCommand`

    The parameters for a RUN_COMMAND task type.

    - **Comment** *(string) --*

      Information about the commands to run.

    - **DocumentHash** *(string) --*

      The SHA-256 or SHA-1 hash created by the system when the document was created. SHA-1 hashes
      have been deprecated.

    - **DocumentHashType** *(string) --*

      SHA-256 or SHA-1. SHA-1 hashes have been deprecated.

    - **NotificationConfig** *(dict) --*

      Configurations for sending notifications about command status changes on a per-instance basis.

      - **NotificationArn** *(string) --*

        An Amazon Resource Name (ARN) for an Amazon Simple Notification Service (Amazon SNS) topic.
        Run Command pushes notifications about command status changes to this topic.

      - **NotificationEvents** *(list) --*

        The different events for which you can receive notifications. These events include the
        following: All (events), InProgress, Success, TimedOut, Cancelled, Failed. To learn more
        about these events, see `Configuring Amazon SNS Notifications for AWS Systems Manager
        <http://docs.aws.amazon.com/systems-manager/latest/userguide/monitoring-sns-notifications.html>`__
        in the *AWS Systems Manager User Guide* .

        - *(string) --*

      - **NotificationType** *(string) --*

        Command: Receive notification when the status of a command changes. Invocation: For
        commands sent to multiple instances, receive notification on a per-instance basis when the
        status of a command changes.

    - **OutputS3BucketName** *(string) --*

      The name of the Amazon S3 bucket.

    - **OutputS3KeyPrefix** *(string) --*

      The Amazon S3 bucket subfolder.

    - **Parameters** *(dict) --*

      The parameters for the RUN_COMMAND task execution.

      - *(string) --*

        - *(list) --*

          - *(string) --*

    - **ServiceRoleArn** *(string) --*

      The ARN of the IAM service role to use to publish Amazon Simple Notification Service (Amazon
      SNS) notifications for maintenance window Run Command tasks.

    - **TimeoutSeconds** *(integer) --*

      If this time is reached and the command has not already started running, it doesn't run.
    """


_ClientRegisterTaskWithMaintenanceWindowTaskInvocationParametersStepFunctionsTypeDef = TypedDict(
    "_ClientRegisterTaskWithMaintenanceWindowTaskInvocationParametersStepFunctionsTypeDef",
    {"Input": str, "Name": str},
    total=False,
)


class ClientRegisterTaskWithMaintenanceWindowTaskInvocationParametersStepFunctionsTypeDef(
    _ClientRegisterTaskWithMaintenanceWindowTaskInvocationParametersStepFunctionsTypeDef
):
    """
    Type definition for `ClientRegisterTaskWithMaintenanceWindowTaskInvocationParameters` `StepFunctions`

    The parameters for a STEP_FUNCTIONS task type.

    - **Input** *(string) --*

      The inputs for the STEP_FUNCTIONS task.

    - **Name** *(string) --*

      The name of the STEP_FUNCTIONS task.
    """


_ClientRegisterTaskWithMaintenanceWindowTaskInvocationParametersTypeDef = TypedDict(
    "_ClientRegisterTaskWithMaintenanceWindowTaskInvocationParametersTypeDef",
    {
        "RunCommand": ClientRegisterTaskWithMaintenanceWindowTaskInvocationParametersRunCommandTypeDef,
        "Automation": ClientRegisterTaskWithMaintenanceWindowTaskInvocationParametersAutomationTypeDef,
        "StepFunctions": ClientRegisterTaskWithMaintenanceWindowTaskInvocationParametersStepFunctionsTypeDef,
        "Lambda": ClientRegisterTaskWithMaintenanceWindowTaskInvocationParametersLambdaTypeDef,
    },
    total=False,
)


class ClientRegisterTaskWithMaintenanceWindowTaskInvocationParametersTypeDef(
    _ClientRegisterTaskWithMaintenanceWindowTaskInvocationParametersTypeDef
):
    """
    Type definition for `ClientRegisterTaskWithMaintenanceWindow` `TaskInvocationParameters`

    The parameters that the task should use during execution. Populate only the fields that match the
    task type. All other fields should be empty.

    - **RunCommand** *(dict) --*

      The parameters for a RUN_COMMAND task type.

      - **Comment** *(string) --*

        Information about the commands to run.

      - **DocumentHash** *(string) --*

        The SHA-256 or SHA-1 hash created by the system when the document was created. SHA-1 hashes
        have been deprecated.

      - **DocumentHashType** *(string) --*

        SHA-256 or SHA-1. SHA-1 hashes have been deprecated.

      - **NotificationConfig** *(dict) --*

        Configurations for sending notifications about command status changes on a per-instance basis.

        - **NotificationArn** *(string) --*

          An Amazon Resource Name (ARN) for an Amazon Simple Notification Service (Amazon SNS) topic.
          Run Command pushes notifications about command status changes to this topic.

        - **NotificationEvents** *(list) --*

          The different events for which you can receive notifications. These events include the
          following: All (events), InProgress, Success, TimedOut, Cancelled, Failed. To learn more
          about these events, see `Configuring Amazon SNS Notifications for AWS Systems Manager
          <http://docs.aws.amazon.com/systems-manager/latest/userguide/monitoring-sns-notifications.html>`__
          in the *AWS Systems Manager User Guide* .

          - *(string) --*

        - **NotificationType** *(string) --*

          Command: Receive notification when the status of a command changes. Invocation: For
          commands sent to multiple instances, receive notification on a per-instance basis when the
          status of a command changes.

      - **OutputS3BucketName** *(string) --*

        The name of the Amazon S3 bucket.

      - **OutputS3KeyPrefix** *(string) --*

        The Amazon S3 bucket subfolder.

      - **Parameters** *(dict) --*

        The parameters for the RUN_COMMAND task execution.

        - *(string) --*

          - *(list) --*

            - *(string) --*

      - **ServiceRoleArn** *(string) --*

        The ARN of the IAM service role to use to publish Amazon Simple Notification Service (Amazon
        SNS) notifications for maintenance window Run Command tasks.

      - **TimeoutSeconds** *(integer) --*

        If this time is reached and the command has not already started running, it doesn't run.

    - **Automation** *(dict) --*

      The parameters for an AUTOMATION task type.

      - **DocumentVersion** *(string) --*

        The version of an Automation document to use during task execution.

      - **Parameters** *(dict) --*

        The parameters for the AUTOMATION task.

        For information about specifying and updating task parameters, see
        RegisterTaskWithMaintenanceWindow and  UpdateMaintenanceWindowTask .

        .. note::

           ``LoggingInfo`` has been deprecated. To specify an S3 bucket to contain logs, instead use
           the ``OutputS3BucketName`` and ``OutputS3KeyPrefix`` options in the
           ``TaskInvocationParameters`` structure. For information about how Systems Manager handles
           these options for the supported maintenance window task types, see
           MaintenanceWindowTaskInvocationParameters .

           ``TaskParameters`` has been deprecated. To specify parameters to pass to a task when it
           runs, instead use the ``Parameters`` option in the ``TaskInvocationParameters`` structure.
           For information about how Systems Manager handles these options for the supported
           maintenance window task types, see  MaintenanceWindowTaskInvocationParameters .

          For AUTOMATION task types, Systems Manager ignores any values specified for these
          parameters.

        - *(string) --*

          - *(list) --*

            - *(string) --*

    - **StepFunctions** *(dict) --*

      The parameters for a STEP_FUNCTIONS task type.

      - **Input** *(string) --*

        The inputs for the STEP_FUNCTIONS task.

      - **Name** *(string) --*

        The name of the STEP_FUNCTIONS task.

    - **Lambda** *(dict) --*

      The parameters for a LAMBDA task type.

      - **ClientContext** *(string) --*

        Pass client-specific information to the Lambda function that you are invoking. You can then
        process the client information in your Lambda function as you choose through the context
        variable.

      - **Qualifier** *(string) --*

        (Optional) Specify a Lambda function version or alias name. If you specify a function
        version, the action uses the qualified function ARN to invoke a specific Lambda function. If
        you specify an alias name, the action uses the alias ARN to invoke the Lambda function
        version to which the alias points.

      - **Payload** *(bytes) --*

        JSON to provide to your Lambda function as input.
    """


_ClientRegisterTaskWithMaintenanceWindowTaskParametersTypeDef = TypedDict(
    "_ClientRegisterTaskWithMaintenanceWindowTaskParametersTypeDef",
    {"Values": List[str]},
    total=False,
)


class ClientRegisterTaskWithMaintenanceWindowTaskParametersTypeDef(
    _ClientRegisterTaskWithMaintenanceWindowTaskParametersTypeDef
):
    """
    Type definition for `ClientRegisterTaskWithMaintenanceWindow` `TaskParameters`

    Defines the values for a task parameter.

    - **Values** *(list) --*

      This field contains an array of 0 or more strings, each 1 to 255 characters in length.

      - *(string) --*
    """


_ClientResetServiceSettingResponseServiceSettingTypeDef = TypedDict(
    "_ClientResetServiceSettingResponseServiceSettingTypeDef",
    {
        "SettingId": str,
        "SettingValue": str,
        "LastModifiedDate": datetime,
        "LastModifiedUser": str,
        "ARN": str,
        "Status": str,
    },
    total=False,
)


class ClientResetServiceSettingResponseServiceSettingTypeDef(
    _ClientResetServiceSettingResponseServiceSettingTypeDef
):
    """
    Type definition for `ClientResetServiceSettingResponse` `ServiceSetting`

    The current, effective service setting after calling the ResetServiceSetting API action.

    - **SettingId** *(string) --*

      The ID of the service setting.

    - **SettingValue** *(string) --*

      The value of the service setting.

    - **LastModifiedDate** *(datetime) --*

      The last time the service setting was modified.

    - **LastModifiedUser** *(string) --*

      The ARN of the last modified user. This field is populated only if the setting value was
      overwritten.

    - **ARN** *(string) --*

      The ARN of the service setting.

    - **Status** *(string) --*

      The status of the service setting. The value can be Default, Customized or PendingUpdate.

      * Default: The current setting uses a default value provisioned by the AWS service team.

      * Customized: The current setting use a custom value specified by the customer.

      * PendingUpdate: The current setting uses a default or custom value, but a setting change
      request is pending approval.
    """


_ClientResetServiceSettingResponseTypeDef = TypedDict(
    "_ClientResetServiceSettingResponseTypeDef",
    {"ServiceSetting": ClientResetServiceSettingResponseServiceSettingTypeDef},
    total=False,
)


class ClientResetServiceSettingResponseTypeDef(
    _ClientResetServiceSettingResponseTypeDef
):
    """
    Type definition for `ClientResetServiceSetting` `Response`

    The result body of the ResetServiceSetting API action.

    - **ServiceSetting** *(dict) --*

      The current, effective service setting after calling the ResetServiceSetting API action.

      - **SettingId** *(string) --*

        The ID of the service setting.

      - **SettingValue** *(string) --*

        The value of the service setting.

      - **LastModifiedDate** *(datetime) --*

        The last time the service setting was modified.

      - **LastModifiedUser** *(string) --*

        The ARN of the last modified user. This field is populated only if the setting value was
        overwritten.

      - **ARN** *(string) --*

        The ARN of the service setting.

      - **Status** *(string) --*

        The status of the service setting. The value can be Default, Customized or PendingUpdate.

        * Default: The current setting uses a default value provisioned by the AWS service team.

        * Customized: The current setting use a custom value specified by the customer.

        * PendingUpdate: The current setting uses a default or custom value, but a setting change
        request is pending approval.
    """


_ClientResumeSessionResponseTypeDef = TypedDict(
    "_ClientResumeSessionResponseTypeDef",
    {"SessionId": str, "TokenValue": str, "StreamUrl": str},
    total=False,
)


class ClientResumeSessionResponseTypeDef(_ClientResumeSessionResponseTypeDef):
    """
    Type definition for `ClientResumeSession` `Response`

    - **SessionId** *(string) --*

      The ID of the session.

    - **TokenValue** *(string) --*

      An encrypted token value containing session and caller information. Used to authenticate the
      connection to the instance.

    - **StreamUrl** *(string) --*

      A URL back to SSM Agent on the instance that the Session Manager client uses to send commands
      and receive output from the instance. Format: ``wss://ssmmessages.**region**
      .amazonaws.com/v1/data-channel/**session-id** ?stream=(input|output)`` .

       **region** represents the Region identifier for an AWS Region supported by AWS Systems
       Manager, such as ``us-east-2`` for the US East (Ohio) Region. For a list of supported
       **region** values, see the **Region** column in the `AWS Systems Manager table of regions
       and endpoints <http://docs.aws.amazon.com/general/latest/gr/rande.html#ssm_region>`__ in the
       *AWS General Reference* .

       **session-id** represents the ID of a Session Manager session, such as ``1a2b3c4dEXAMPLE`` .
    """


_ClientSendCommandCloudWatchOutputConfigTypeDef = TypedDict(
    "_ClientSendCommandCloudWatchOutputConfigTypeDef",
    {"CloudWatchLogGroupName": str, "CloudWatchOutputEnabled": bool},
    total=False,
)


class ClientSendCommandCloudWatchOutputConfigTypeDef(
    _ClientSendCommandCloudWatchOutputConfigTypeDef
):
    """
    Type definition for `ClientSendCommand` `CloudWatchOutputConfig`

    Enables Systems Manager to send Run Command output to Amazon CloudWatch Logs.

    - **CloudWatchLogGroupName** *(string) --*

      The name of the CloudWatch log group where you want to send command output. If you don't
      specify a group name, Systems Manager automatically creates a log group for you. The log group
      uses the following naming format: aws/ssm/*SystemsManagerDocumentName* .

    - **CloudWatchOutputEnabled** *(boolean) --*

      Enables Systems Manager to send command output to CloudWatch Logs.
    """


_ClientSendCommandNotificationConfigTypeDef = TypedDict(
    "_ClientSendCommandNotificationConfigTypeDef",
    {"NotificationArn": str, "NotificationEvents": List[str], "NotificationType": str},
    total=False,
)


class ClientSendCommandNotificationConfigTypeDef(
    _ClientSendCommandNotificationConfigTypeDef
):
    """
    Type definition for `ClientSendCommand` `NotificationConfig`

    Configurations for sending notifications.

    - **NotificationArn** *(string) --*

      An Amazon Resource Name (ARN) for an Amazon Simple Notification Service (Amazon SNS) topic. Run
      Command pushes notifications about command status changes to this topic.

    - **NotificationEvents** *(list) --*

      The different events for which you can receive notifications. These events include the
      following: All (events), InProgress, Success, TimedOut, Cancelled, Failed. To learn more about
      these events, see `Configuring Amazon SNS Notifications for AWS Systems Manager
      <http://docs.aws.amazon.com/systems-manager/latest/userguide/monitoring-sns-notifications.html>`__
      in the *AWS Systems Manager User Guide* .

      - *(string) --*

    - **NotificationType** *(string) --*

      Command: Receive notification when the status of a command changes. Invocation: For commands
      sent to multiple instances, receive notification on a per-instance basis when the status of a
      command changes.
    """


_ClientSendCommandResponseCommandCloudWatchOutputConfigTypeDef = TypedDict(
    "_ClientSendCommandResponseCommandCloudWatchOutputConfigTypeDef",
    {"CloudWatchLogGroupName": str, "CloudWatchOutputEnabled": bool},
    total=False,
)


class ClientSendCommandResponseCommandCloudWatchOutputConfigTypeDef(
    _ClientSendCommandResponseCommandCloudWatchOutputConfigTypeDef
):
    """
    Type definition for `ClientSendCommandResponseCommand` `CloudWatchOutputConfig`

    CloudWatch Logs information where you want Systems Manager to send the command output.

    - **CloudWatchLogGroupName** *(string) --*

      The name of the CloudWatch log group where you want to send command output. If you don't
      specify a group name, Systems Manager automatically creates a log group for you. The log
      group uses the following naming format: aws/ssm/*SystemsManagerDocumentName* .

    - **CloudWatchOutputEnabled** *(boolean) --*

      Enables Systems Manager to send command output to CloudWatch Logs.
    """


_ClientSendCommandResponseCommandNotificationConfigTypeDef = TypedDict(
    "_ClientSendCommandResponseCommandNotificationConfigTypeDef",
    {"NotificationArn": str, "NotificationEvents": List[str], "NotificationType": str},
    total=False,
)


class ClientSendCommandResponseCommandNotificationConfigTypeDef(
    _ClientSendCommandResponseCommandNotificationConfigTypeDef
):
    """
    Type definition for `ClientSendCommandResponseCommand` `NotificationConfig`

    Configurations for sending notifications about command status changes.

    - **NotificationArn** *(string) --*

      An Amazon Resource Name (ARN) for an Amazon Simple Notification Service (Amazon SNS)
      topic. Run Command pushes notifications about command status changes to this topic.

    - **NotificationEvents** *(list) --*

      The different events for which you can receive notifications. These events include the
      following: All (events), InProgress, Success, TimedOut, Cancelled, Failed. To learn more
      about these events, see `Configuring Amazon SNS Notifications for AWS Systems Manager
      <http://docs.aws.amazon.com/systems-manager/latest/userguide/monitoring-sns-notifications.html>`__
      in the *AWS Systems Manager User Guide* .

      - *(string) --*

    - **NotificationType** *(string) --*

      Command: Receive notification when the status of a command changes. Invocation: For
      commands sent to multiple instances, receive notification on a per-instance basis when
      the status of a command changes.
    """


_ClientSendCommandResponseCommandTargetsTypeDef = TypedDict(
    "_ClientSendCommandResponseCommandTargetsTypeDef",
    {"Key": str, "Values": List[str]},
    total=False,
)


class ClientSendCommandResponseCommandTargetsTypeDef(
    _ClientSendCommandResponseCommandTargetsTypeDef
):
    """
    Type definition for `ClientSendCommandResponseCommand` `Targets`

    An array of search criteria that targets instances using a Key,Value combination that you
    specify.

    Supported formats include the following.

    * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

    * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

    * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

    * (Maintenance window targets only)
    ``Key=resource-groups:Name,Values=*resource-group-name* ``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

    For example:

    * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

    * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

    * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

    * (Maintenance window targets only)
    ``Key=resource-groups:Name,Values=ProductionResourceGroup``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC* ``

    For information about how to send commands that target instances using ``Key,Value``
    parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
    <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
    in the *AWS Systems Manager User Guide* .

    - **Key** *(string) --*

      User-defined criteria for sending commands that target instances that meet the criteria.

    - **Values** *(list) --*

      User-defined criteria that maps to ``Key`` . For example, if you specified
      ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
      instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

      - *(string) --*
    """


_ClientSendCommandResponseCommandTypeDef = TypedDict(
    "_ClientSendCommandResponseCommandTypeDef",
    {
        "CommandId": str,
        "DocumentName": str,
        "DocumentVersion": str,
        "Comment": str,
        "ExpiresAfter": datetime,
        "Parameters": Dict[str, List[str]],
        "InstanceIds": List[str],
        "Targets": List[ClientSendCommandResponseCommandTargetsTypeDef],
        "RequestedDateTime": datetime,
        "Status": str,
        "StatusDetails": str,
        "OutputS3Region": str,
        "OutputS3BucketName": str,
        "OutputS3KeyPrefix": str,
        "MaxConcurrency": str,
        "MaxErrors": str,
        "TargetCount": int,
        "CompletedCount": int,
        "ErrorCount": int,
        "DeliveryTimedOutCount": int,
        "ServiceRole": str,
        "NotificationConfig": ClientSendCommandResponseCommandNotificationConfigTypeDef,
        "CloudWatchOutputConfig": ClientSendCommandResponseCommandCloudWatchOutputConfigTypeDef,
    },
    total=False,
)


class ClientSendCommandResponseCommandTypeDef(_ClientSendCommandResponseCommandTypeDef):
    """
    Type definition for `ClientSendCommandResponse` `Command`

    The request as it was received by Systems Manager. Also provides the command ID which can be
    used future references to this request.

    - **CommandId** *(string) --*

      A unique identifier for this command.

    - **DocumentName** *(string) --*

      The name of the document requested for execution.

    - **DocumentVersion** *(string) --*

      The SSM document version.

    - **Comment** *(string) --*

      User-specified information about the command, such as a brief description of what the
      command should do.

    - **ExpiresAfter** *(datetime) --*

      If this time is reached and the command has not already started running, it will not run.
      Calculated based on the ExpiresAfter user input provided as part of the SendCommand API.

    - **Parameters** *(dict) --*

      The parameter values to be inserted in the document when running the command.

      - *(string) --*

        - *(list) --*

          - *(string) --*

    - **InstanceIds** *(list) --*

      The instance IDs against which this command was requested.

      - *(string) --*

    - **Targets** *(list) --*

      An array of search criteria that targets instances using a Key,Value combination that you
      specify. Targets is required if you don't provide one or more instance IDs in the call.

      - *(dict) --*

        An array of search criteria that targets instances using a Key,Value combination that you
        specify.

        Supported formats include the following.

        * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

        * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

        * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

        * (Maintenance window targets only)
        ``Key=resource-groups:Name,Values=*resource-group-name* ``

        * (Maintenance window targets only)
        ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

        For example:

        * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

        * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

        * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

        * (Maintenance window targets only)
        ``Key=resource-groups:Name,Values=ProductionResourceGroup``

        * (Maintenance window targets only)
        ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC* ``

        For information about how to send commands that target instances using ``Key,Value``
        parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
        <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
        in the *AWS Systems Manager User Guide* .

        - **Key** *(string) --*

          User-defined criteria for sending commands that target instances that meet the criteria.

        - **Values** *(list) --*

          User-defined criteria that maps to ``Key`` . For example, if you specified
          ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
          instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

          - *(string) --*

    - **RequestedDateTime** *(datetime) --*

      The date and time the command was requested.

    - **Status** *(string) --*

      The status of the command.

    - **StatusDetails** *(string) --*

      A detailed status of the command execution. StatusDetails includes more information than
      Status because it includes states resulting from error and concurrency control parameters.
      StatusDetails can show different results than Status. For more information about these
      statuses, see `Understanding Command Statuses
      <http://docs.aws.amazon.com/systems-manager/latest/userguide/monitor-commands.html>`__ in
      the *AWS Systems Manager User Guide* . StatusDetails can be one of the following values:

      * Pending: The command has not been sent to any instances.

      * In Progress: The command has been sent to at least one instance but has not reached a
      final state on all instances.

      * Success: The command successfully ran on all invocations. This is a terminal state.

      * Delivery Timed Out: The value of MaxErrors or more command invocations shows a status of
      Delivery Timed Out. This is a terminal state.

      * Execution Timed Out: The value of MaxErrors or more command invocations shows a status of
      Execution Timed Out. This is a terminal state.

      * Failed: The value of MaxErrors or more command invocations shows a status of Failed. This
      is a terminal state.

      * Incomplete: The command was attempted on all instances and one or more invocations does
      not have a value of Success but not enough invocations failed for the status to be Failed.
      This is a terminal state.

      * Canceled: The command was terminated before it was completed. This is a terminal state.

      * Rate Exceeded: The number of instances targeted by the command exceeded the account limit
      for pending invocations. The system has canceled the command before running it on any
      instance. This is a terminal state.

    - **OutputS3Region** *(string) --*

      (Deprecated) You can no longer specify this parameter. The system ignores it. Instead,
      Systems Manager automatically determines the Amazon S3 bucket region.

    - **OutputS3BucketName** *(string) --*

      The S3 bucket where the responses to the command executions should be stored. This was
      requested when issuing the command.

    - **OutputS3KeyPrefix** *(string) --*

      The S3 directory path inside the bucket where the responses to the command executions
      should be stored. This was requested when issuing the command.

    - **MaxConcurrency** *(string) --*

      The maximum number of instances that are allowed to run the command at the same time. You
      can specify a number of instances, such as 10, or a percentage of instances, such as 10%.
      The default value is 50. For more information about how to use MaxConcurrency, see `Running
      Commands Using Systems Manager Run Command
      <http://docs.aws.amazon.com/systems-manager/latest/userguide/run-command.html>`__ in the
      *AWS Systems Manager User Guide* .

    - **MaxErrors** *(string) --*

      The maximum number of errors allowed before the system stops sending the command to
      additional targets. You can specify a number of errors, such as 10, or a percentage or
      errors, such as 10%. The default value is 0. For more information about how to use
      MaxErrors, see `Running Commands Using Systems Manager Run Command
      <http://docs.aws.amazon.com/systems-manager/latest/userguide/run-command.html>`__ in the
      *AWS Systems Manager User Guide* .

    - **TargetCount** *(integer) --*

      The number of targets for the command.

    - **CompletedCount** *(integer) --*

      The number of targets for which the command invocation reached a terminal state. Terminal
      states include the following: Success, Failed, Execution Timed Out, Delivery Timed Out,
      Canceled, Terminated, or Undeliverable.

    - **ErrorCount** *(integer) --*

      The number of targets for which the status is Failed or Execution Timed Out.

    - **DeliveryTimedOutCount** *(integer) --*

      The number of targets for which the status is Delivery Timed Out.

    - **ServiceRole** *(string) --*

      The IAM service role that Run Command uses to act on your behalf when sending notifications
      about command status changes.

    - **NotificationConfig** *(dict) --*

      Configurations for sending notifications about command status changes.

      - **NotificationArn** *(string) --*

        An Amazon Resource Name (ARN) for an Amazon Simple Notification Service (Amazon SNS)
        topic. Run Command pushes notifications about command status changes to this topic.

      - **NotificationEvents** *(list) --*

        The different events for which you can receive notifications. These events include the
        following: All (events), InProgress, Success, TimedOut, Cancelled, Failed. To learn more
        about these events, see `Configuring Amazon SNS Notifications for AWS Systems Manager
        <http://docs.aws.amazon.com/systems-manager/latest/userguide/monitoring-sns-notifications.html>`__
        in the *AWS Systems Manager User Guide* .

        - *(string) --*

      - **NotificationType** *(string) --*

        Command: Receive notification when the status of a command changes. Invocation: For
        commands sent to multiple instances, receive notification on a per-instance basis when
        the status of a command changes.

    - **CloudWatchOutputConfig** *(dict) --*

      CloudWatch Logs information where you want Systems Manager to send the command output.

      - **CloudWatchLogGroupName** *(string) --*

        The name of the CloudWatch log group where you want to send command output. If you don't
        specify a group name, Systems Manager automatically creates a log group for you. The log
        group uses the following naming format: aws/ssm/*SystemsManagerDocumentName* .

      - **CloudWatchOutputEnabled** *(boolean) --*

        Enables Systems Manager to send command output to CloudWatch Logs.
    """


_ClientSendCommandResponseTypeDef = TypedDict(
    "_ClientSendCommandResponseTypeDef",
    {"Command": ClientSendCommandResponseCommandTypeDef},
    total=False,
)


class ClientSendCommandResponseTypeDef(_ClientSendCommandResponseTypeDef):
    """
    Type definition for `ClientSendCommand` `Response`

    - **Command** *(dict) --*

      The request as it was received by Systems Manager. Also provides the command ID which can be
      used future references to this request.

      - **CommandId** *(string) --*

        A unique identifier for this command.

      - **DocumentName** *(string) --*

        The name of the document requested for execution.

      - **DocumentVersion** *(string) --*

        The SSM document version.

      - **Comment** *(string) --*

        User-specified information about the command, such as a brief description of what the
        command should do.

      - **ExpiresAfter** *(datetime) --*

        If this time is reached and the command has not already started running, it will not run.
        Calculated based on the ExpiresAfter user input provided as part of the SendCommand API.

      - **Parameters** *(dict) --*

        The parameter values to be inserted in the document when running the command.

        - *(string) --*

          - *(list) --*

            - *(string) --*

      - **InstanceIds** *(list) --*

        The instance IDs against which this command was requested.

        - *(string) --*

      - **Targets** *(list) --*

        An array of search criteria that targets instances using a Key,Value combination that you
        specify. Targets is required if you don't provide one or more instance IDs in the call.

        - *(dict) --*

          An array of search criteria that targets instances using a Key,Value combination that you
          specify.

          Supported formats include the following.

          * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

          * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

          * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

          * (Maintenance window targets only)
          ``Key=resource-groups:Name,Values=*resource-group-name* ``

          * (Maintenance window targets only)
          ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

          For example:

          * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

          * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

          * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

          * (Maintenance window targets only)
          ``Key=resource-groups:Name,Values=ProductionResourceGroup``

          * (Maintenance window targets only)
          ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC* ``

          For information about how to send commands that target instances using ``Key,Value``
          parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
          <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
          in the *AWS Systems Manager User Guide* .

          - **Key** *(string) --*

            User-defined criteria for sending commands that target instances that meet the criteria.

          - **Values** *(list) --*

            User-defined criteria that maps to ``Key`` . For example, if you specified
            ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
            instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

            - *(string) --*

      - **RequestedDateTime** *(datetime) --*

        The date and time the command was requested.

      - **Status** *(string) --*

        The status of the command.

      - **StatusDetails** *(string) --*

        A detailed status of the command execution. StatusDetails includes more information than
        Status because it includes states resulting from error and concurrency control parameters.
        StatusDetails can show different results than Status. For more information about these
        statuses, see `Understanding Command Statuses
        <http://docs.aws.amazon.com/systems-manager/latest/userguide/monitor-commands.html>`__ in
        the *AWS Systems Manager User Guide* . StatusDetails can be one of the following values:

        * Pending: The command has not been sent to any instances.

        * In Progress: The command has been sent to at least one instance but has not reached a
        final state on all instances.

        * Success: The command successfully ran on all invocations. This is a terminal state.

        * Delivery Timed Out: The value of MaxErrors or more command invocations shows a status of
        Delivery Timed Out. This is a terminal state.

        * Execution Timed Out: The value of MaxErrors or more command invocations shows a status of
        Execution Timed Out. This is a terminal state.

        * Failed: The value of MaxErrors or more command invocations shows a status of Failed. This
        is a terminal state.

        * Incomplete: The command was attempted on all instances and one or more invocations does
        not have a value of Success but not enough invocations failed for the status to be Failed.
        This is a terminal state.

        * Canceled: The command was terminated before it was completed. This is a terminal state.

        * Rate Exceeded: The number of instances targeted by the command exceeded the account limit
        for pending invocations. The system has canceled the command before running it on any
        instance. This is a terminal state.

      - **OutputS3Region** *(string) --*

        (Deprecated) You can no longer specify this parameter. The system ignores it. Instead,
        Systems Manager automatically determines the Amazon S3 bucket region.

      - **OutputS3BucketName** *(string) --*

        The S3 bucket where the responses to the command executions should be stored. This was
        requested when issuing the command.

      - **OutputS3KeyPrefix** *(string) --*

        The S3 directory path inside the bucket where the responses to the command executions
        should be stored. This was requested when issuing the command.

      - **MaxConcurrency** *(string) --*

        The maximum number of instances that are allowed to run the command at the same time. You
        can specify a number of instances, such as 10, or a percentage of instances, such as 10%.
        The default value is 50. For more information about how to use MaxConcurrency, see `Running
        Commands Using Systems Manager Run Command
        <http://docs.aws.amazon.com/systems-manager/latest/userguide/run-command.html>`__ in the
        *AWS Systems Manager User Guide* .

      - **MaxErrors** *(string) --*

        The maximum number of errors allowed before the system stops sending the command to
        additional targets. You can specify a number of errors, such as 10, or a percentage or
        errors, such as 10%. The default value is 0. For more information about how to use
        MaxErrors, see `Running Commands Using Systems Manager Run Command
        <http://docs.aws.amazon.com/systems-manager/latest/userguide/run-command.html>`__ in the
        *AWS Systems Manager User Guide* .

      - **TargetCount** *(integer) --*

        The number of targets for the command.

      - **CompletedCount** *(integer) --*

        The number of targets for which the command invocation reached a terminal state. Terminal
        states include the following: Success, Failed, Execution Timed Out, Delivery Timed Out,
        Canceled, Terminated, or Undeliverable.

      - **ErrorCount** *(integer) --*

        The number of targets for which the status is Failed or Execution Timed Out.

      - **DeliveryTimedOutCount** *(integer) --*

        The number of targets for which the status is Delivery Timed Out.

      - **ServiceRole** *(string) --*

        The IAM service role that Run Command uses to act on your behalf when sending notifications
        about command status changes.

      - **NotificationConfig** *(dict) --*

        Configurations for sending notifications about command status changes.

        - **NotificationArn** *(string) --*

          An Amazon Resource Name (ARN) for an Amazon Simple Notification Service (Amazon SNS)
          topic. Run Command pushes notifications about command status changes to this topic.

        - **NotificationEvents** *(list) --*

          The different events for which you can receive notifications. These events include the
          following: All (events), InProgress, Success, TimedOut, Cancelled, Failed. To learn more
          about these events, see `Configuring Amazon SNS Notifications for AWS Systems Manager
          <http://docs.aws.amazon.com/systems-manager/latest/userguide/monitoring-sns-notifications.html>`__
          in the *AWS Systems Manager User Guide* .

          - *(string) --*

        - **NotificationType** *(string) --*

          Command: Receive notification when the status of a command changes. Invocation: For
          commands sent to multiple instances, receive notification on a per-instance basis when
          the status of a command changes.

      - **CloudWatchOutputConfig** *(dict) --*

        CloudWatch Logs information where you want Systems Manager to send the command output.

        - **CloudWatchLogGroupName** *(string) --*

          The name of the CloudWatch log group where you want to send command output. If you don't
          specify a group name, Systems Manager automatically creates a log group for you. The log
          group uses the following naming format: aws/ssm/*SystemsManagerDocumentName* .

        - **CloudWatchOutputEnabled** *(boolean) --*

          Enables Systems Manager to send command output to CloudWatch Logs.
    """


_ClientSendCommandTargetsTypeDef = TypedDict(
    "_ClientSendCommandTargetsTypeDef", {"Key": str, "Values": List[str]}, total=False
)


class ClientSendCommandTargetsTypeDef(_ClientSendCommandTargetsTypeDef):
    """
    Type definition for `ClientSendCommand` `Targets`

    An array of search criteria that targets instances using a Key,Value combination that you
    specify.

    Supported formats include the following.

    * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

    * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

    * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

    * (Maintenance window targets only) ``Key=resource-groups:Name,Values=*resource-group-name* ``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

    For example:

    * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

    * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

    * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

    * (Maintenance window targets only) ``Key=resource-groups:Name,Values=ProductionResourceGroup``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC* ``

    For information about how to send commands that target instances using ``Key,Value``
    parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
    <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
    in the *AWS Systems Manager User Guide* .

    - **Key** *(string) --*

      User-defined criteria for sending commands that target instances that meet the criteria.

    - **Values** *(list) --*

      User-defined criteria that maps to ``Key`` . For example, if you specified ``tag:ServerRole``
      , you could specify ``value:WebServer`` to run a command on instances that include Amazon EC2
      tags of ``ServerRole,WebServer`` .

      - *(string) --*
    """


_ClientStartAutomationExecutionResponseTypeDef = TypedDict(
    "_ClientStartAutomationExecutionResponseTypeDef",
    {"AutomationExecutionId": str},
    total=False,
)


class ClientStartAutomationExecutionResponseTypeDef(
    _ClientStartAutomationExecutionResponseTypeDef
):
    """
    Type definition for `ClientStartAutomationExecution` `Response`

    - **AutomationExecutionId** *(string) --*

      The unique ID of a newly scheduled automation execution.
    """


_ClientStartAutomationExecutionTargetLocationsTypeDef = TypedDict(
    "_ClientStartAutomationExecutionTargetLocationsTypeDef",
    {
        "Accounts": List[str],
        "Regions": List[str],
        "TargetLocationMaxConcurrency": str,
        "TargetLocationMaxErrors": str,
        "ExecutionRoleName": str,
    },
    total=False,
)


class ClientStartAutomationExecutionTargetLocationsTypeDef(
    _ClientStartAutomationExecutionTargetLocationsTypeDef
):
    """
    Type definition for `ClientStartAutomationExecution` `TargetLocations`

    The combination of AWS Regions and accounts targeted by the current Automation execution.

    - **Accounts** *(list) --*

      The AWS accounts targeted by the current Automation execution.

      - *(string) --*

    - **Regions** *(list) --*

      The AWS Regions targeted by the current Automation execution.

      - *(string) --*

    - **TargetLocationMaxConcurrency** *(string) --*

      The maximum number of AWS accounts and AWS regions allowed to run the Automation concurrently

    - **TargetLocationMaxErrors** *(string) --*

      The maximum number of errors allowed before the system stops queueing additional Automation
      executions for the currently running Automation.

    - **ExecutionRoleName** *(string) --*

      The Automation execution role used by the currently running Automation.
    """


_ClientStartAutomationExecutionTargetsTypeDef = TypedDict(
    "_ClientStartAutomationExecutionTargetsTypeDef",
    {"Key": str, "Values": List[str]},
    total=False,
)


class ClientStartAutomationExecutionTargetsTypeDef(
    _ClientStartAutomationExecutionTargetsTypeDef
):
    """
    Type definition for `ClientStartAutomationExecution` `Targets`

    An array of search criteria that targets instances using a Key,Value combination that you
    specify.

    Supported formats include the following.

    * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

    * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

    * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

    * (Maintenance window targets only) ``Key=resource-groups:Name,Values=*resource-group-name* ``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

    For example:

    * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

    * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

    * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

    * (Maintenance window targets only) ``Key=resource-groups:Name,Values=ProductionResourceGroup``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC* ``

    For information about how to send commands that target instances using ``Key,Value``
    parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
    <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
    in the *AWS Systems Manager User Guide* .

    - **Key** *(string) --*

      User-defined criteria for sending commands that target instances that meet the criteria.

    - **Values** *(list) --*

      User-defined criteria that maps to ``Key`` . For example, if you specified ``tag:ServerRole``
      , you could specify ``value:WebServer`` to run a command on instances that include Amazon EC2
      tags of ``ServerRole,WebServer`` .

      - *(string) --*
    """


_ClientStartSessionResponseTypeDef = TypedDict(
    "_ClientStartSessionResponseTypeDef",
    {"SessionId": str, "TokenValue": str, "StreamUrl": str},
    total=False,
)


class ClientStartSessionResponseTypeDef(_ClientStartSessionResponseTypeDef):
    """
    Type definition for `ClientStartSession` `Response`

    - **SessionId** *(string) --*

      The ID of the session.

    - **TokenValue** *(string) --*

      An encrypted token value containing session and caller information. Used to authenticate the
      connection to the instance.

    - **StreamUrl** *(string) --*

      A URL back to SSM Agent on the instance that the Session Manager client uses to send commands
      and receive output from the instance. Format: ``wss://ssmmessages.**region**
      .amazonaws.com/v1/data-channel/**session-id** ?stream=(input|output)``

       **region** represents the Region identifier for an AWS Region supported by AWS Systems
       Manager, such as ``us-east-2`` for the US East (Ohio) Region. For a list of supported
       **region** values, see the **Region** column in the `AWS Systems Manager table of regions
       and endpoints <http://docs.aws.amazon.com/general/latest/gr/rande.html#ssm_region>`__ in the
       *AWS General Reference* .

       **session-id** represents the ID of a Session Manager session, such as ``1a2b3c4dEXAMPLE`` .
    """


_ClientTerminateSessionResponseTypeDef = TypedDict(
    "_ClientTerminateSessionResponseTypeDef", {"SessionId": str}, total=False
)


class ClientTerminateSessionResponseTypeDef(_ClientTerminateSessionResponseTypeDef):
    """
    Type definition for `ClientTerminateSession` `Response`

    - **SessionId** *(string) --*

      The ID of the session that has been terminated.
    """


_ClientUpdateAssociationOutputLocationS3LocationTypeDef = TypedDict(
    "_ClientUpdateAssociationOutputLocationS3LocationTypeDef",
    {"OutputS3Region": str, "OutputS3BucketName": str, "OutputS3KeyPrefix": str},
    total=False,
)


class ClientUpdateAssociationOutputLocationS3LocationTypeDef(
    _ClientUpdateAssociationOutputLocationS3LocationTypeDef
):
    """
    Type definition for `ClientUpdateAssociationOutputLocation` `S3Location`

    An Amazon S3 bucket where you want to store the results of this request.

    - **OutputS3Region** *(string) --*

      (Deprecated) You can no longer specify this parameter. The system ignores it. Instead,
      Systems Manager automatically determines the Amazon S3 bucket region.

    - **OutputS3BucketName** *(string) --*

      The name of the Amazon S3 bucket.

    - **OutputS3KeyPrefix** *(string) --*

      The Amazon S3 bucket subfolder.
    """


_ClientUpdateAssociationOutputLocationTypeDef = TypedDict(
    "_ClientUpdateAssociationOutputLocationTypeDef",
    {"S3Location": ClientUpdateAssociationOutputLocationS3LocationTypeDef},
    total=False,
)


class ClientUpdateAssociationOutputLocationTypeDef(
    _ClientUpdateAssociationOutputLocationTypeDef
):
    """
    Type definition for `ClientUpdateAssociation` `OutputLocation`

    An Amazon S3 bucket where you want to store the results of this request.

    - **S3Location** *(dict) --*

      An Amazon S3 bucket where you want to store the results of this request.

      - **OutputS3Region** *(string) --*

        (Deprecated) You can no longer specify this parameter. The system ignores it. Instead,
        Systems Manager automatically determines the Amazon S3 bucket region.

      - **OutputS3BucketName** *(string) --*

        The name of the Amazon S3 bucket.

      - **OutputS3KeyPrefix** *(string) --*

        The Amazon S3 bucket subfolder.
    """


_ClientUpdateAssociationResponseAssociationDescriptionOutputLocationS3LocationTypeDef = TypedDict(
    "_ClientUpdateAssociationResponseAssociationDescriptionOutputLocationS3LocationTypeDef",
    {"OutputS3Region": str, "OutputS3BucketName": str, "OutputS3KeyPrefix": str},
    total=False,
)


class ClientUpdateAssociationResponseAssociationDescriptionOutputLocationS3LocationTypeDef(
    _ClientUpdateAssociationResponseAssociationDescriptionOutputLocationS3LocationTypeDef
):
    """
    Type definition for `ClientUpdateAssociationResponseAssociationDescriptionOutputLocation` `S3Location`

    An Amazon S3 bucket where you want to store the results of this request.

    - **OutputS3Region** *(string) --*

      (Deprecated) You can no longer specify this parameter. The system ignores it. Instead,
      Systems Manager automatically determines the Amazon S3 bucket region.

    - **OutputS3BucketName** *(string) --*

      The name of the Amazon S3 bucket.

    - **OutputS3KeyPrefix** *(string) --*

      The Amazon S3 bucket subfolder.
    """


_ClientUpdateAssociationResponseAssociationDescriptionOutputLocationTypeDef = TypedDict(
    "_ClientUpdateAssociationResponseAssociationDescriptionOutputLocationTypeDef",
    {
        "S3Location": ClientUpdateAssociationResponseAssociationDescriptionOutputLocationS3LocationTypeDef
    },
    total=False,
)


class ClientUpdateAssociationResponseAssociationDescriptionOutputLocationTypeDef(
    _ClientUpdateAssociationResponseAssociationDescriptionOutputLocationTypeDef
):
    """
    Type definition for `ClientUpdateAssociationResponseAssociationDescription` `OutputLocation`

    An Amazon S3 bucket where you want to store the output details of the request.

    - **S3Location** *(dict) --*

      An Amazon S3 bucket where you want to store the results of this request.

      - **OutputS3Region** *(string) --*

        (Deprecated) You can no longer specify this parameter. The system ignores it. Instead,
        Systems Manager automatically determines the Amazon S3 bucket region.

      - **OutputS3BucketName** *(string) --*

        The name of the Amazon S3 bucket.

      - **OutputS3KeyPrefix** *(string) --*

        The Amazon S3 bucket subfolder.
    """


_ClientUpdateAssociationResponseAssociationDescriptionOverviewTypeDef = TypedDict(
    "_ClientUpdateAssociationResponseAssociationDescriptionOverviewTypeDef",
    {
        "Status": str,
        "DetailedStatus": str,
        "AssociationStatusAggregatedCount": Dict[str, int],
    },
    total=False,
)


class ClientUpdateAssociationResponseAssociationDescriptionOverviewTypeDef(
    _ClientUpdateAssociationResponseAssociationDescriptionOverviewTypeDef
):
    """
    Type definition for `ClientUpdateAssociationResponseAssociationDescription` `Overview`

    Information about the association.

    - **Status** *(string) --*

      The status of the association. Status can be: Pending, Success, or Failed.

    - **DetailedStatus** *(string) --*

      A detailed status of the association.

    - **AssociationStatusAggregatedCount** *(dict) --*

      Returns the number of targets for the association status. For example, if you created an
      association with two instances, and one of them was successful, this would return the
      count of instances by status.

      - *(string) --*

        - *(integer) --*
    """


_ClientUpdateAssociationResponseAssociationDescriptionStatusTypeDef = TypedDict(
    "_ClientUpdateAssociationResponseAssociationDescriptionStatusTypeDef",
    {"Date": datetime, "Name": str, "Message": str, "AdditionalInfo": str},
    total=False,
)


class ClientUpdateAssociationResponseAssociationDescriptionStatusTypeDef(
    _ClientUpdateAssociationResponseAssociationDescriptionStatusTypeDef
):
    """
    Type definition for `ClientUpdateAssociationResponseAssociationDescription` `Status`

    The association status.

    - **Date** *(datetime) --*

      The date when the status changed.

    - **Name** *(string) --*

      The status.

    - **Message** *(string) --*

      The reason for the status.

    - **AdditionalInfo** *(string) --*

      A user-defined string.
    """


_ClientUpdateAssociationResponseAssociationDescriptionTargetsTypeDef = TypedDict(
    "_ClientUpdateAssociationResponseAssociationDescriptionTargetsTypeDef",
    {"Key": str, "Values": List[str]},
    total=False,
)


class ClientUpdateAssociationResponseAssociationDescriptionTargetsTypeDef(
    _ClientUpdateAssociationResponseAssociationDescriptionTargetsTypeDef
):
    """
    Type definition for `ClientUpdateAssociationResponseAssociationDescription` `Targets`

    An array of search criteria that targets instances using a Key,Value combination that you
    specify.

    Supported formats include the following.

    * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

    * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

    * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

    * (Maintenance window targets only)
    ``Key=resource-groups:Name,Values=*resource-group-name* ``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

    For example:

    * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

    * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

    * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

    * (Maintenance window targets only)
    ``Key=resource-groups:Name,Values=ProductionResourceGroup``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC* ``

    For information about how to send commands that target instances using ``Key,Value``
    parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
    <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
    in the *AWS Systems Manager User Guide* .

    - **Key** *(string) --*

      User-defined criteria for sending commands that target instances that meet the criteria.

    - **Values** *(list) --*

      User-defined criteria that maps to ``Key`` . For example, if you specified
      ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
      instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

      - *(string) --*
    """


_ClientUpdateAssociationResponseAssociationDescriptionTypeDef = TypedDict(
    "_ClientUpdateAssociationResponseAssociationDescriptionTypeDef",
    {
        "Name": str,
        "InstanceId": str,
        "AssociationVersion": str,
        "Date": datetime,
        "LastUpdateAssociationDate": datetime,
        "Status": ClientUpdateAssociationResponseAssociationDescriptionStatusTypeDef,
        "Overview": ClientUpdateAssociationResponseAssociationDescriptionOverviewTypeDef,
        "DocumentVersion": str,
        "AutomationTargetParameterName": str,
        "Parameters": Dict[str, List[str]],
        "AssociationId": str,
        "Targets": List[
            ClientUpdateAssociationResponseAssociationDescriptionTargetsTypeDef
        ],
        "ScheduleExpression": str,
        "OutputLocation": ClientUpdateAssociationResponseAssociationDescriptionOutputLocationTypeDef,
        "LastExecutionDate": datetime,
        "LastSuccessfulExecutionDate": datetime,
        "AssociationName": str,
        "MaxErrors": str,
        "MaxConcurrency": str,
        "ComplianceSeverity": str,
    },
    total=False,
)


class ClientUpdateAssociationResponseAssociationDescriptionTypeDef(
    _ClientUpdateAssociationResponseAssociationDescriptionTypeDef
):
    """
    Type definition for `ClientUpdateAssociationResponse` `AssociationDescription`

    The description of the association that was updated.

    - **Name** *(string) --*

      The name of the Systems Manager document.

    - **InstanceId** *(string) --*

      The ID of the instance.

    - **AssociationVersion** *(string) --*

      The association version.

    - **Date** *(datetime) --*

      The date when the association was made.

    - **LastUpdateAssociationDate** *(datetime) --*

      The date when the association was last updated.

    - **Status** *(dict) --*

      The association status.

      - **Date** *(datetime) --*

        The date when the status changed.

      - **Name** *(string) --*

        The status.

      - **Message** *(string) --*

        The reason for the status.

      - **AdditionalInfo** *(string) --*

        A user-defined string.

    - **Overview** *(dict) --*

      Information about the association.

      - **Status** *(string) --*

        The status of the association. Status can be: Pending, Success, or Failed.

      - **DetailedStatus** *(string) --*

        A detailed status of the association.

      - **AssociationStatusAggregatedCount** *(dict) --*

        Returns the number of targets for the association status. For example, if you created an
        association with two instances, and one of them was successful, this would return the
        count of instances by status.

        - *(string) --*

          - *(integer) --*

    - **DocumentVersion** *(string) --*

      The document version.

    - **AutomationTargetParameterName** *(string) --*

      Specify the target for the association. This target is required for associations that use
      an Automation document and target resources by using rate controls.

    - **Parameters** *(dict) --*

      A description of the parameters for a document.

      - *(string) --*

        - *(list) --*

          - *(string) --*

    - **AssociationId** *(string) --*

      The association ID.

    - **Targets** *(list) --*

      The instances targeted by the request.

      - *(dict) --*

        An array of search criteria that targets instances using a Key,Value combination that you
        specify.

        Supported formats include the following.

        * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

        * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

        * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

        * (Maintenance window targets only)
        ``Key=resource-groups:Name,Values=*resource-group-name* ``

        * (Maintenance window targets only)
        ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

        For example:

        * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

        * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

        * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

        * (Maintenance window targets only)
        ``Key=resource-groups:Name,Values=ProductionResourceGroup``

        * (Maintenance window targets only)
        ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC* ``

        For information about how to send commands that target instances using ``Key,Value``
        parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
        <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
        in the *AWS Systems Manager User Guide* .

        - **Key** *(string) --*

          User-defined criteria for sending commands that target instances that meet the criteria.

        - **Values** *(list) --*

          User-defined criteria that maps to ``Key`` . For example, if you specified
          ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
          instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

          - *(string) --*

    - **ScheduleExpression** *(string) --*

      A cron expression that specifies a schedule when the association runs.

    - **OutputLocation** *(dict) --*

      An Amazon S3 bucket where you want to store the output details of the request.

      - **S3Location** *(dict) --*

        An Amazon S3 bucket where you want to store the results of this request.

        - **OutputS3Region** *(string) --*

          (Deprecated) You can no longer specify this parameter. The system ignores it. Instead,
          Systems Manager automatically determines the Amazon S3 bucket region.

        - **OutputS3BucketName** *(string) --*

          The name of the Amazon S3 bucket.

        - **OutputS3KeyPrefix** *(string) --*

          The Amazon S3 bucket subfolder.

    - **LastExecutionDate** *(datetime) --*

      The date on which the association was last run.

    - **LastSuccessfulExecutionDate** *(datetime) --*

      The last date on which the association was successfully run.

    - **AssociationName** *(string) --*

      The association name.

    - **MaxErrors** *(string) --*

      The number of errors that are allowed before the system stops sending requests to run the
      association on additional targets. You can specify either an absolute number of errors, for
      example 10, or a percentage of the target set, for example 10%. If you specify 3, for
      example, the system stops sending requests when the fourth error is received. If you
      specify 0, then the system stops sending requests after the first error is returned. If you
      run an association on 50 instances and set MaxError to 10%, then the system stops sending
      the request when the sixth error is received.

      Executions that are already running an association when MaxErrors is reached are allowed to
      complete, but some of these executions may fail as well. If you need to ensure that there
      won't be more than max-errors failed executions, set MaxConcurrency to 1 so that executions
      proceed one at a time.

    - **MaxConcurrency** *(string) --*

      The maximum number of targets allowed to run the association at the same time. You can
      specify a number, for example 10, or a percentage of the target set, for example 10%. The
      default value is 100%, which means all targets run the association at the same time.

      If a new instance starts and attempts to run an association while Systems Manager is
      running MaxConcurrency associations, the association is allowed to run. During the next
      association interval, the new instance will process its association within the limit
      specified for MaxConcurrency.

    - **ComplianceSeverity** *(string) --*

      The severity level that is assigned to the association.
    """


_ClientUpdateAssociationResponseTypeDef = TypedDict(
    "_ClientUpdateAssociationResponseTypeDef",
    {
        "AssociationDescription": ClientUpdateAssociationResponseAssociationDescriptionTypeDef
    },
    total=False,
)


class ClientUpdateAssociationResponseTypeDef(_ClientUpdateAssociationResponseTypeDef):
    """
    Type definition for `ClientUpdateAssociation` `Response`

    - **AssociationDescription** *(dict) --*

      The description of the association that was updated.

      - **Name** *(string) --*

        The name of the Systems Manager document.

      - **InstanceId** *(string) --*

        The ID of the instance.

      - **AssociationVersion** *(string) --*

        The association version.

      - **Date** *(datetime) --*

        The date when the association was made.

      - **LastUpdateAssociationDate** *(datetime) --*

        The date when the association was last updated.

      - **Status** *(dict) --*

        The association status.

        - **Date** *(datetime) --*

          The date when the status changed.

        - **Name** *(string) --*

          The status.

        - **Message** *(string) --*

          The reason for the status.

        - **AdditionalInfo** *(string) --*

          A user-defined string.

      - **Overview** *(dict) --*

        Information about the association.

        - **Status** *(string) --*

          The status of the association. Status can be: Pending, Success, or Failed.

        - **DetailedStatus** *(string) --*

          A detailed status of the association.

        - **AssociationStatusAggregatedCount** *(dict) --*

          Returns the number of targets for the association status. For example, if you created an
          association with two instances, and one of them was successful, this would return the
          count of instances by status.

          - *(string) --*

            - *(integer) --*

      - **DocumentVersion** *(string) --*

        The document version.

      - **AutomationTargetParameterName** *(string) --*

        Specify the target for the association. This target is required for associations that use
        an Automation document and target resources by using rate controls.

      - **Parameters** *(dict) --*

        A description of the parameters for a document.

        - *(string) --*

          - *(list) --*

            - *(string) --*

      - **AssociationId** *(string) --*

        The association ID.

      - **Targets** *(list) --*

        The instances targeted by the request.

        - *(dict) --*

          An array of search criteria that targets instances using a Key,Value combination that you
          specify.

          Supported formats include the following.

          * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

          * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

          * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

          * (Maintenance window targets only)
          ``Key=resource-groups:Name,Values=*resource-group-name* ``

          * (Maintenance window targets only)
          ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

          For example:

          * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

          * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

          * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

          * (Maintenance window targets only)
          ``Key=resource-groups:Name,Values=ProductionResourceGroup``

          * (Maintenance window targets only)
          ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC* ``

          For information about how to send commands that target instances using ``Key,Value``
          parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
          <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
          in the *AWS Systems Manager User Guide* .

          - **Key** *(string) --*

            User-defined criteria for sending commands that target instances that meet the criteria.

          - **Values** *(list) --*

            User-defined criteria that maps to ``Key`` . For example, if you specified
            ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
            instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

            - *(string) --*

      - **ScheduleExpression** *(string) --*

        A cron expression that specifies a schedule when the association runs.

      - **OutputLocation** *(dict) --*

        An Amazon S3 bucket where you want to store the output details of the request.

        - **S3Location** *(dict) --*

          An Amazon S3 bucket where you want to store the results of this request.

          - **OutputS3Region** *(string) --*

            (Deprecated) You can no longer specify this parameter. The system ignores it. Instead,
            Systems Manager automatically determines the Amazon S3 bucket region.

          - **OutputS3BucketName** *(string) --*

            The name of the Amazon S3 bucket.

          - **OutputS3KeyPrefix** *(string) --*

            The Amazon S3 bucket subfolder.

      - **LastExecutionDate** *(datetime) --*

        The date on which the association was last run.

      - **LastSuccessfulExecutionDate** *(datetime) --*

        The last date on which the association was successfully run.

      - **AssociationName** *(string) --*

        The association name.

      - **MaxErrors** *(string) --*

        The number of errors that are allowed before the system stops sending requests to run the
        association on additional targets. You can specify either an absolute number of errors, for
        example 10, or a percentage of the target set, for example 10%. If you specify 3, for
        example, the system stops sending requests when the fourth error is received. If you
        specify 0, then the system stops sending requests after the first error is returned. If you
        run an association on 50 instances and set MaxError to 10%, then the system stops sending
        the request when the sixth error is received.

        Executions that are already running an association when MaxErrors is reached are allowed to
        complete, but some of these executions may fail as well. If you need to ensure that there
        won't be more than max-errors failed executions, set MaxConcurrency to 1 so that executions
        proceed one at a time.

      - **MaxConcurrency** *(string) --*

        The maximum number of targets allowed to run the association at the same time. You can
        specify a number, for example 10, or a percentage of the target set, for example 10%. The
        default value is 100%, which means all targets run the association at the same time.

        If a new instance starts and attempts to run an association while Systems Manager is
        running MaxConcurrency associations, the association is allowed to run. During the next
        association interval, the new instance will process its association within the limit
        specified for MaxConcurrency.

      - **ComplianceSeverity** *(string) --*

        The severity level that is assigned to the association.
    """


_RequiredClientUpdateAssociationStatusAssociationStatusTypeDef = TypedDict(
    "_RequiredClientUpdateAssociationStatusAssociationStatusTypeDef",
    {"Date": datetime, "Name": str, "Message": str},
)
_OptionalClientUpdateAssociationStatusAssociationStatusTypeDef = TypedDict(
    "_OptionalClientUpdateAssociationStatusAssociationStatusTypeDef",
    {"AdditionalInfo": str},
    total=False,
)


class ClientUpdateAssociationStatusAssociationStatusTypeDef(
    _RequiredClientUpdateAssociationStatusAssociationStatusTypeDef,
    _OptionalClientUpdateAssociationStatusAssociationStatusTypeDef,
):
    """
    Type definition for `ClientUpdateAssociationStatus` `AssociationStatus`

    The association status.

    - **Date** *(datetime) --* **[REQUIRED]**

      The date when the status changed.

    - **Name** *(string) --* **[REQUIRED]**

      The status.

    - **Message** *(string) --* **[REQUIRED]**

      The reason for the status.

    - **AdditionalInfo** *(string) --*

      A user-defined string.
    """


_ClientUpdateAssociationStatusResponseAssociationDescriptionOutputLocationS3LocationTypeDef = TypedDict(
    "_ClientUpdateAssociationStatusResponseAssociationDescriptionOutputLocationS3LocationTypeDef",
    {"OutputS3Region": str, "OutputS3BucketName": str, "OutputS3KeyPrefix": str},
    total=False,
)


class ClientUpdateAssociationStatusResponseAssociationDescriptionOutputLocationS3LocationTypeDef(
    _ClientUpdateAssociationStatusResponseAssociationDescriptionOutputLocationS3LocationTypeDef
):
    """
    Type definition for `ClientUpdateAssociationStatusResponseAssociationDescriptionOutputLocation` `S3Location`

    An Amazon S3 bucket where you want to store the results of this request.

    - **OutputS3Region** *(string) --*

      (Deprecated) You can no longer specify this parameter. The system ignores it. Instead,
      Systems Manager automatically determines the Amazon S3 bucket region.

    - **OutputS3BucketName** *(string) --*

      The name of the Amazon S3 bucket.

    - **OutputS3KeyPrefix** *(string) --*

      The Amazon S3 bucket subfolder.
    """


_ClientUpdateAssociationStatusResponseAssociationDescriptionOutputLocationTypeDef = TypedDict(
    "_ClientUpdateAssociationStatusResponseAssociationDescriptionOutputLocationTypeDef",
    {
        "S3Location": ClientUpdateAssociationStatusResponseAssociationDescriptionOutputLocationS3LocationTypeDef
    },
    total=False,
)


class ClientUpdateAssociationStatusResponseAssociationDescriptionOutputLocationTypeDef(
    _ClientUpdateAssociationStatusResponseAssociationDescriptionOutputLocationTypeDef
):
    """
    Type definition for `ClientUpdateAssociationStatusResponseAssociationDescription` `OutputLocation`

    An Amazon S3 bucket where you want to store the output details of the request.

    - **S3Location** *(dict) --*

      An Amazon S3 bucket where you want to store the results of this request.

      - **OutputS3Region** *(string) --*

        (Deprecated) You can no longer specify this parameter. The system ignores it. Instead,
        Systems Manager automatically determines the Amazon S3 bucket region.

      - **OutputS3BucketName** *(string) --*

        The name of the Amazon S3 bucket.

      - **OutputS3KeyPrefix** *(string) --*

        The Amazon S3 bucket subfolder.
    """


_ClientUpdateAssociationStatusResponseAssociationDescriptionOverviewTypeDef = TypedDict(
    "_ClientUpdateAssociationStatusResponseAssociationDescriptionOverviewTypeDef",
    {
        "Status": str,
        "DetailedStatus": str,
        "AssociationStatusAggregatedCount": Dict[str, int],
    },
    total=False,
)


class ClientUpdateAssociationStatusResponseAssociationDescriptionOverviewTypeDef(
    _ClientUpdateAssociationStatusResponseAssociationDescriptionOverviewTypeDef
):
    """
    Type definition for `ClientUpdateAssociationStatusResponseAssociationDescription` `Overview`

    Information about the association.

    - **Status** *(string) --*

      The status of the association. Status can be: Pending, Success, or Failed.

    - **DetailedStatus** *(string) --*

      A detailed status of the association.

    - **AssociationStatusAggregatedCount** *(dict) --*

      Returns the number of targets for the association status. For example, if you created an
      association with two instances, and one of them was successful, this would return the
      count of instances by status.

      - *(string) --*

        - *(integer) --*
    """


_ClientUpdateAssociationStatusResponseAssociationDescriptionStatusTypeDef = TypedDict(
    "_ClientUpdateAssociationStatusResponseAssociationDescriptionStatusTypeDef",
    {"Date": datetime, "Name": str, "Message": str, "AdditionalInfo": str},
    total=False,
)


class ClientUpdateAssociationStatusResponseAssociationDescriptionStatusTypeDef(
    _ClientUpdateAssociationStatusResponseAssociationDescriptionStatusTypeDef
):
    """
    Type definition for `ClientUpdateAssociationStatusResponseAssociationDescription` `Status`

    The association status.

    - **Date** *(datetime) --*

      The date when the status changed.

    - **Name** *(string) --*

      The status.

    - **Message** *(string) --*

      The reason for the status.

    - **AdditionalInfo** *(string) --*

      A user-defined string.
    """


_ClientUpdateAssociationStatusResponseAssociationDescriptionTargetsTypeDef = TypedDict(
    "_ClientUpdateAssociationStatusResponseAssociationDescriptionTargetsTypeDef",
    {"Key": str, "Values": List[str]},
    total=False,
)


class ClientUpdateAssociationStatusResponseAssociationDescriptionTargetsTypeDef(
    _ClientUpdateAssociationStatusResponseAssociationDescriptionTargetsTypeDef
):
    """
    Type definition for `ClientUpdateAssociationStatusResponseAssociationDescription` `Targets`

    An array of search criteria that targets instances using a Key,Value combination that you
    specify.

    Supported formats include the following.

    * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

    * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

    * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

    * (Maintenance window targets only)
    ``Key=resource-groups:Name,Values=*resource-group-name* ``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

    For example:

    * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

    * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

    * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

    * (Maintenance window targets only)
    ``Key=resource-groups:Name,Values=ProductionResourceGroup``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC* ``

    For information about how to send commands that target instances using ``Key,Value``
    parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
    <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
    in the *AWS Systems Manager User Guide* .

    - **Key** *(string) --*

      User-defined criteria for sending commands that target instances that meet the criteria.

    - **Values** *(list) --*

      User-defined criteria that maps to ``Key`` . For example, if you specified
      ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
      instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

      - *(string) --*
    """


_ClientUpdateAssociationStatusResponseAssociationDescriptionTypeDef = TypedDict(
    "_ClientUpdateAssociationStatusResponseAssociationDescriptionTypeDef",
    {
        "Name": str,
        "InstanceId": str,
        "AssociationVersion": str,
        "Date": datetime,
        "LastUpdateAssociationDate": datetime,
        "Status": ClientUpdateAssociationStatusResponseAssociationDescriptionStatusTypeDef,
        "Overview": ClientUpdateAssociationStatusResponseAssociationDescriptionOverviewTypeDef,
        "DocumentVersion": str,
        "AutomationTargetParameterName": str,
        "Parameters": Dict[str, List[str]],
        "AssociationId": str,
        "Targets": List[
            ClientUpdateAssociationStatusResponseAssociationDescriptionTargetsTypeDef
        ],
        "ScheduleExpression": str,
        "OutputLocation": ClientUpdateAssociationStatusResponseAssociationDescriptionOutputLocationTypeDef,
        "LastExecutionDate": datetime,
        "LastSuccessfulExecutionDate": datetime,
        "AssociationName": str,
        "MaxErrors": str,
        "MaxConcurrency": str,
        "ComplianceSeverity": str,
    },
    total=False,
)


class ClientUpdateAssociationStatusResponseAssociationDescriptionTypeDef(
    _ClientUpdateAssociationStatusResponseAssociationDescriptionTypeDef
):
    """
    Type definition for `ClientUpdateAssociationStatusResponse` `AssociationDescription`

    Information about the association.

    - **Name** *(string) --*

      The name of the Systems Manager document.

    - **InstanceId** *(string) --*

      The ID of the instance.

    - **AssociationVersion** *(string) --*

      The association version.

    - **Date** *(datetime) --*

      The date when the association was made.

    - **LastUpdateAssociationDate** *(datetime) --*

      The date when the association was last updated.

    - **Status** *(dict) --*

      The association status.

      - **Date** *(datetime) --*

        The date when the status changed.

      - **Name** *(string) --*

        The status.

      - **Message** *(string) --*

        The reason for the status.

      - **AdditionalInfo** *(string) --*

        A user-defined string.

    - **Overview** *(dict) --*

      Information about the association.

      - **Status** *(string) --*

        The status of the association. Status can be: Pending, Success, or Failed.

      - **DetailedStatus** *(string) --*

        A detailed status of the association.

      - **AssociationStatusAggregatedCount** *(dict) --*

        Returns the number of targets for the association status. For example, if you created an
        association with two instances, and one of them was successful, this would return the
        count of instances by status.

        - *(string) --*

          - *(integer) --*

    - **DocumentVersion** *(string) --*

      The document version.

    - **AutomationTargetParameterName** *(string) --*

      Specify the target for the association. This target is required for associations that use
      an Automation document and target resources by using rate controls.

    - **Parameters** *(dict) --*

      A description of the parameters for a document.

      - *(string) --*

        - *(list) --*

          - *(string) --*

    - **AssociationId** *(string) --*

      The association ID.

    - **Targets** *(list) --*

      The instances targeted by the request.

      - *(dict) --*

        An array of search criteria that targets instances using a Key,Value combination that you
        specify.

        Supported formats include the following.

        * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

        * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

        * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

        * (Maintenance window targets only)
        ``Key=resource-groups:Name,Values=*resource-group-name* ``

        * (Maintenance window targets only)
        ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

        For example:

        * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

        * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

        * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

        * (Maintenance window targets only)
        ``Key=resource-groups:Name,Values=ProductionResourceGroup``

        * (Maintenance window targets only)
        ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC* ``

        For information about how to send commands that target instances using ``Key,Value``
        parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
        <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
        in the *AWS Systems Manager User Guide* .

        - **Key** *(string) --*

          User-defined criteria for sending commands that target instances that meet the criteria.

        - **Values** *(list) --*

          User-defined criteria that maps to ``Key`` . For example, if you specified
          ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
          instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

          - *(string) --*

    - **ScheduleExpression** *(string) --*

      A cron expression that specifies a schedule when the association runs.

    - **OutputLocation** *(dict) --*

      An Amazon S3 bucket where you want to store the output details of the request.

      - **S3Location** *(dict) --*

        An Amazon S3 bucket where you want to store the results of this request.

        - **OutputS3Region** *(string) --*

          (Deprecated) You can no longer specify this parameter. The system ignores it. Instead,
          Systems Manager automatically determines the Amazon S3 bucket region.

        - **OutputS3BucketName** *(string) --*

          The name of the Amazon S3 bucket.

        - **OutputS3KeyPrefix** *(string) --*

          The Amazon S3 bucket subfolder.

    - **LastExecutionDate** *(datetime) --*

      The date on which the association was last run.

    - **LastSuccessfulExecutionDate** *(datetime) --*

      The last date on which the association was successfully run.

    - **AssociationName** *(string) --*

      The association name.

    - **MaxErrors** *(string) --*

      The number of errors that are allowed before the system stops sending requests to run the
      association on additional targets. You can specify either an absolute number of errors, for
      example 10, or a percentage of the target set, for example 10%. If you specify 3, for
      example, the system stops sending requests when the fourth error is received. If you
      specify 0, then the system stops sending requests after the first error is returned. If you
      run an association on 50 instances and set MaxError to 10%, then the system stops sending
      the request when the sixth error is received.

      Executions that are already running an association when MaxErrors is reached are allowed to
      complete, but some of these executions may fail as well. If you need to ensure that there
      won't be more than max-errors failed executions, set MaxConcurrency to 1 so that executions
      proceed one at a time.

    - **MaxConcurrency** *(string) --*

      The maximum number of targets allowed to run the association at the same time. You can
      specify a number, for example 10, or a percentage of the target set, for example 10%. The
      default value is 100%, which means all targets run the association at the same time.

      If a new instance starts and attempts to run an association while Systems Manager is
      running MaxConcurrency associations, the association is allowed to run. During the next
      association interval, the new instance will process its association within the limit
      specified for MaxConcurrency.

    - **ComplianceSeverity** *(string) --*

      The severity level that is assigned to the association.
    """


_ClientUpdateAssociationStatusResponseTypeDef = TypedDict(
    "_ClientUpdateAssociationStatusResponseTypeDef",
    {
        "AssociationDescription": ClientUpdateAssociationStatusResponseAssociationDescriptionTypeDef
    },
    total=False,
)


class ClientUpdateAssociationStatusResponseTypeDef(
    _ClientUpdateAssociationStatusResponseTypeDef
):
    """
    Type definition for `ClientUpdateAssociationStatus` `Response`

    - **AssociationDescription** *(dict) --*

      Information about the association.

      - **Name** *(string) --*

        The name of the Systems Manager document.

      - **InstanceId** *(string) --*

        The ID of the instance.

      - **AssociationVersion** *(string) --*

        The association version.

      - **Date** *(datetime) --*

        The date when the association was made.

      - **LastUpdateAssociationDate** *(datetime) --*

        The date when the association was last updated.

      - **Status** *(dict) --*

        The association status.

        - **Date** *(datetime) --*

          The date when the status changed.

        - **Name** *(string) --*

          The status.

        - **Message** *(string) --*

          The reason for the status.

        - **AdditionalInfo** *(string) --*

          A user-defined string.

      - **Overview** *(dict) --*

        Information about the association.

        - **Status** *(string) --*

          The status of the association. Status can be: Pending, Success, or Failed.

        - **DetailedStatus** *(string) --*

          A detailed status of the association.

        - **AssociationStatusAggregatedCount** *(dict) --*

          Returns the number of targets for the association status. For example, if you created an
          association with two instances, and one of them was successful, this would return the
          count of instances by status.

          - *(string) --*

            - *(integer) --*

      - **DocumentVersion** *(string) --*

        The document version.

      - **AutomationTargetParameterName** *(string) --*

        Specify the target for the association. This target is required for associations that use
        an Automation document and target resources by using rate controls.

      - **Parameters** *(dict) --*

        A description of the parameters for a document.

        - *(string) --*

          - *(list) --*

            - *(string) --*

      - **AssociationId** *(string) --*

        The association ID.

      - **Targets** *(list) --*

        The instances targeted by the request.

        - *(dict) --*

          An array of search criteria that targets instances using a Key,Value combination that you
          specify.

          Supported formats include the following.

          * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

          * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

          * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

          * (Maintenance window targets only)
          ``Key=resource-groups:Name,Values=*resource-group-name* ``

          * (Maintenance window targets only)
          ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

          For example:

          * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

          * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

          * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

          * (Maintenance window targets only)
          ``Key=resource-groups:Name,Values=ProductionResourceGroup``

          * (Maintenance window targets only)
          ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC* ``

          For information about how to send commands that target instances using ``Key,Value``
          parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
          <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
          in the *AWS Systems Manager User Guide* .

          - **Key** *(string) --*

            User-defined criteria for sending commands that target instances that meet the criteria.

          - **Values** *(list) --*

            User-defined criteria that maps to ``Key`` . For example, if you specified
            ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
            instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

            - *(string) --*

      - **ScheduleExpression** *(string) --*

        A cron expression that specifies a schedule when the association runs.

      - **OutputLocation** *(dict) --*

        An Amazon S3 bucket where you want to store the output details of the request.

        - **S3Location** *(dict) --*

          An Amazon S3 bucket where you want to store the results of this request.

          - **OutputS3Region** *(string) --*

            (Deprecated) You can no longer specify this parameter. The system ignores it. Instead,
            Systems Manager automatically determines the Amazon S3 bucket region.

          - **OutputS3BucketName** *(string) --*

            The name of the Amazon S3 bucket.

          - **OutputS3KeyPrefix** *(string) --*

            The Amazon S3 bucket subfolder.

      - **LastExecutionDate** *(datetime) --*

        The date on which the association was last run.

      - **LastSuccessfulExecutionDate** *(datetime) --*

        The last date on which the association was successfully run.

      - **AssociationName** *(string) --*

        The association name.

      - **MaxErrors** *(string) --*

        The number of errors that are allowed before the system stops sending requests to run the
        association on additional targets. You can specify either an absolute number of errors, for
        example 10, or a percentage of the target set, for example 10%. If you specify 3, for
        example, the system stops sending requests when the fourth error is received. If you
        specify 0, then the system stops sending requests after the first error is returned. If you
        run an association on 50 instances and set MaxError to 10%, then the system stops sending
        the request when the sixth error is received.

        Executions that are already running an association when MaxErrors is reached are allowed to
        complete, but some of these executions may fail as well. If you need to ensure that there
        won't be more than max-errors failed executions, set MaxConcurrency to 1 so that executions
        proceed one at a time.

      - **MaxConcurrency** *(string) --*

        The maximum number of targets allowed to run the association at the same time. You can
        specify a number, for example 10, or a percentage of the target set, for example 10%. The
        default value is 100%, which means all targets run the association at the same time.

        If a new instance starts and attempts to run an association while Systems Manager is
        running MaxConcurrency associations, the association is allowed to run. During the next
        association interval, the new instance will process its association within the limit
        specified for MaxConcurrency.

      - **ComplianceSeverity** *(string) --*

        The severity level that is assigned to the association.
    """


_ClientUpdateAssociationTargetsTypeDef = TypedDict(
    "_ClientUpdateAssociationTargetsTypeDef",
    {"Key": str, "Values": List[str]},
    total=False,
)


class ClientUpdateAssociationTargetsTypeDef(_ClientUpdateAssociationTargetsTypeDef):
    """
    Type definition for `ClientUpdateAssociation` `Targets`

    An array of search criteria that targets instances using a Key,Value combination that you
    specify.

    Supported formats include the following.

    * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

    * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

    * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

    * (Maintenance window targets only) ``Key=resource-groups:Name,Values=*resource-group-name* ``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

    For example:

    * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

    * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

    * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

    * (Maintenance window targets only) ``Key=resource-groups:Name,Values=ProductionResourceGroup``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC* ``

    For information about how to send commands that target instances using ``Key,Value``
    parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
    <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
    in the *AWS Systems Manager User Guide* .

    - **Key** *(string) --*

      User-defined criteria for sending commands that target instances that meet the criteria.

    - **Values** *(list) --*

      User-defined criteria that maps to ``Key`` . For example, if you specified ``tag:ServerRole``
      , you could specify ``value:WebServer`` to run a command on instances that include Amazon EC2
      tags of ``ServerRole,WebServer`` .

      - *(string) --*
    """


_ClientUpdateDocumentAttachmentsTypeDef = TypedDict(
    "_ClientUpdateDocumentAttachmentsTypeDef",
    {"Key": str, "Values": List[str], "Name": str},
    total=False,
)


class ClientUpdateDocumentAttachmentsTypeDef(_ClientUpdateDocumentAttachmentsTypeDef):
    """
    Type definition for `ClientUpdateDocument` `Attachments`

    Identifying information about a document attachment, including the file name and a key-value
    pair that identifies the location of an attachment to a document.

    - **Key** *(string) --*

      The key of a key-value pair that identifies the location of an attachment to a document.

    - **Values** *(list) --*

      The value of a key-value pair that identifies the location of an attachment to a document.
      The format is the URL of the location of a document attachment, such as the URL of an Amazon
      S3 bucket.

      - *(string) --*

    - **Name** *(string) --*

      The name of the document attachment file.
    """


_ClientUpdateDocumentDefaultVersionResponseDescriptionTypeDef = TypedDict(
    "_ClientUpdateDocumentDefaultVersionResponseDescriptionTypeDef",
    {"Name": str, "DefaultVersion": str, "DefaultVersionName": str},
    total=False,
)


class ClientUpdateDocumentDefaultVersionResponseDescriptionTypeDef(
    _ClientUpdateDocumentDefaultVersionResponseDescriptionTypeDef
):
    """
    Type definition for `ClientUpdateDocumentDefaultVersionResponse` `Description`

    The description of a custom document that you want to set as the default version.

    - **Name** *(string) --*

      The name of the document.

    - **DefaultVersion** *(string) --*

      The default version of the document.

    - **DefaultVersionName** *(string) --*

      The default version of the artifact associated with the document.
    """


_ClientUpdateDocumentDefaultVersionResponseTypeDef = TypedDict(
    "_ClientUpdateDocumentDefaultVersionResponseTypeDef",
    {"Description": ClientUpdateDocumentDefaultVersionResponseDescriptionTypeDef},
    total=False,
)


class ClientUpdateDocumentDefaultVersionResponseTypeDef(
    _ClientUpdateDocumentDefaultVersionResponseTypeDef
):
    """
    Type definition for `ClientUpdateDocumentDefaultVersion` `Response`

    - **Description** *(dict) --*

      The description of a custom document that you want to set as the default version.

      - **Name** *(string) --*

        The name of the document.

      - **DefaultVersion** *(string) --*

        The default version of the document.

      - **DefaultVersionName** *(string) --*

        The default version of the artifact associated with the document.
    """


_ClientUpdateDocumentResponseDocumentDescriptionAttachmentsInformationTypeDef = TypedDict(
    "_ClientUpdateDocumentResponseDocumentDescriptionAttachmentsInformationTypeDef",
    {"Name": str},
    total=False,
)


class ClientUpdateDocumentResponseDocumentDescriptionAttachmentsInformationTypeDef(
    _ClientUpdateDocumentResponseDocumentDescriptionAttachmentsInformationTypeDef
):
    """
    Type definition for `ClientUpdateDocumentResponseDocumentDescription` `AttachmentsInformation`

    An attribute of an attachment, such as the attachment name.

    - **Name** *(string) --*

      The name of the attachment.
    """


_ClientUpdateDocumentResponseDocumentDescriptionParametersTypeDef = TypedDict(
    "_ClientUpdateDocumentResponseDocumentDescriptionParametersTypeDef",
    {"Name": str, "Type": str, "Description": str, "DefaultValue": str},
    total=False,
)


class ClientUpdateDocumentResponseDocumentDescriptionParametersTypeDef(
    _ClientUpdateDocumentResponseDocumentDescriptionParametersTypeDef
):
    """
    Type definition for `ClientUpdateDocumentResponseDocumentDescription` `Parameters`

    Parameters specified in a System Manager document that run on the server when the command
    is run.

    - **Name** *(string) --*

      The name of the parameter.

    - **Type** *(string) --*

      The type of parameter. The type can be either String or StringList.

    - **Description** *(string) --*

      A description of what the parameter does, how to use it, the default value, and whether
      or not the parameter is optional.

    - **DefaultValue** *(string) --*

      If specified, the default values for the parameters. Parameters without a default value
      are required. Parameters with a default value are optional.
    """


_ClientUpdateDocumentResponseDocumentDescriptionTagsTypeDef = TypedDict(
    "_ClientUpdateDocumentResponseDocumentDescriptionTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)


class ClientUpdateDocumentResponseDocumentDescriptionTagsTypeDef(
    _ClientUpdateDocumentResponseDocumentDescriptionTagsTypeDef
):
    """
    Type definition for `ClientUpdateDocumentResponseDocumentDescription` `Tags`

    Metadata that you assign to your AWS resources. Tags enable you to categorize your
    resources in different ways, for example, by purpose, owner, or environment. In Systems
    Manager, you can apply tags to documents, managed instances, maintenance windows,
    Parameter Store parameters, and patch baselines.

    - **Key** *(string) --*

      The name of the tag.

    - **Value** *(string) --*

      The value of the tag.
    """


_ClientUpdateDocumentResponseDocumentDescriptionTypeDef = TypedDict(
    "_ClientUpdateDocumentResponseDocumentDescriptionTypeDef",
    {
        "Sha1": str,
        "Hash": str,
        "HashType": str,
        "Name": str,
        "VersionName": str,
        "Owner": str,
        "CreatedDate": datetime,
        "Status": str,
        "StatusInformation": str,
        "DocumentVersion": str,
        "Description": str,
        "Parameters": List[
            ClientUpdateDocumentResponseDocumentDescriptionParametersTypeDef
        ],
        "PlatformTypes": List[str],
        "DocumentType": str,
        "SchemaVersion": str,
        "LatestVersion": str,
        "DefaultVersion": str,
        "DocumentFormat": str,
        "TargetType": str,
        "Tags": List[ClientUpdateDocumentResponseDocumentDescriptionTagsTypeDef],
        "AttachmentsInformation": List[
            ClientUpdateDocumentResponseDocumentDescriptionAttachmentsInformationTypeDef
        ],
    },
    total=False,
)


class ClientUpdateDocumentResponseDocumentDescriptionTypeDef(
    _ClientUpdateDocumentResponseDocumentDescriptionTypeDef
):
    """
    Type definition for `ClientUpdateDocumentResponse` `DocumentDescription`

    A description of the document that was updated.

    - **Sha1** *(string) --*

      The SHA1 hash of the document, which you can use for verification.

    - **Hash** *(string) --*

      The Sha256 or Sha1 hash created by the system when the document was created.

      .. note::

        Sha1 hashes have been deprecated.

    - **HashType** *(string) --*

      The hash type of the document. Valid values include ``Sha256`` or ``Sha1`` .

      .. note::

        Sha1 hashes have been deprecated.

    - **Name** *(string) --*

      The name of the Systems Manager document.

    - **VersionName** *(string) --*

      The version of the artifact associated with the document.

    - **Owner** *(string) --*

      The AWS user account that created the document.

    - **CreatedDate** *(datetime) --*

      The date when the document was created.

    - **Status** *(string) --*

      The status of the Systems Manager document.

    - **StatusInformation** *(string) --*

      A message returned by AWS Systems Manager that explains the ``Status`` value. For example,
      a ``Failed`` status might be explained by the ``StatusInformation`` message, "The specified
      S3 bucket does not exist. Verify that the URL of the S3 bucket is correct."

    - **DocumentVersion** *(string) --*

      The document version.

    - **Description** *(string) --*

      A description of the document.

    - **Parameters** *(list) --*

      A description of the parameters for a document.

      - *(dict) --*

        Parameters specified in a System Manager document that run on the server when the command
        is run.

        - **Name** *(string) --*

          The name of the parameter.

        - **Type** *(string) --*

          The type of parameter. The type can be either String or StringList.

        - **Description** *(string) --*

          A description of what the parameter does, how to use it, the default value, and whether
          or not the parameter is optional.

        - **DefaultValue** *(string) --*

          If specified, the default values for the parameters. Parameters without a default value
          are required. Parameters with a default value are optional.

    - **PlatformTypes** *(list) --*

      The list of OS platforms compatible with this Systems Manager document.

      - *(string) --*

    - **DocumentType** *(string) --*

      The type of document.

    - **SchemaVersion** *(string) --*

      The schema version.

    - **LatestVersion** *(string) --*

      The latest version of the document.

    - **DefaultVersion** *(string) --*

      The default version.

    - **DocumentFormat** *(string) --*

      The document format, either JSON or YAML.

    - **TargetType** *(string) --*

      The target type which defines the kinds of resources the document can run on. For example,
      /AWS::EC2::Instance. For a list of valid resource types, see `AWS Resource Types Reference
      <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html>`__
      in the *AWS CloudFormation User Guide* .

    - **Tags** *(list) --*

      The tags, or metadata, that have been applied to the document.

      - *(dict) --*

        Metadata that you assign to your AWS resources. Tags enable you to categorize your
        resources in different ways, for example, by purpose, owner, or environment. In Systems
        Manager, you can apply tags to documents, managed instances, maintenance windows,
        Parameter Store parameters, and patch baselines.

        - **Key** *(string) --*

          The name of the tag.

        - **Value** *(string) --*

          The value of the tag.

    - **AttachmentsInformation** *(list) --*

      Details about the document attachments, including names, locations, sizes, etc.

      - *(dict) --*

        An attribute of an attachment, such as the attachment name.

        - **Name** *(string) --*

          The name of the attachment.
    """


_ClientUpdateDocumentResponseTypeDef = TypedDict(
    "_ClientUpdateDocumentResponseTypeDef",
    {"DocumentDescription": ClientUpdateDocumentResponseDocumentDescriptionTypeDef},
    total=False,
)


class ClientUpdateDocumentResponseTypeDef(_ClientUpdateDocumentResponseTypeDef):
    """
    Type definition for `ClientUpdateDocument` `Response`

    - **DocumentDescription** *(dict) --*

      A description of the document that was updated.

      - **Sha1** *(string) --*

        The SHA1 hash of the document, which you can use for verification.

      - **Hash** *(string) --*

        The Sha256 or Sha1 hash created by the system when the document was created.

        .. note::

          Sha1 hashes have been deprecated.

      - **HashType** *(string) --*

        The hash type of the document. Valid values include ``Sha256`` or ``Sha1`` .

        .. note::

          Sha1 hashes have been deprecated.

      - **Name** *(string) --*

        The name of the Systems Manager document.

      - **VersionName** *(string) --*

        The version of the artifact associated with the document.

      - **Owner** *(string) --*

        The AWS user account that created the document.

      - **CreatedDate** *(datetime) --*

        The date when the document was created.

      - **Status** *(string) --*

        The status of the Systems Manager document.

      - **StatusInformation** *(string) --*

        A message returned by AWS Systems Manager that explains the ``Status`` value. For example,
        a ``Failed`` status might be explained by the ``StatusInformation`` message, "The specified
        S3 bucket does not exist. Verify that the URL of the S3 bucket is correct."

      - **DocumentVersion** *(string) --*

        The document version.

      - **Description** *(string) --*

        A description of the document.

      - **Parameters** *(list) --*

        A description of the parameters for a document.

        - *(dict) --*

          Parameters specified in a System Manager document that run on the server when the command
          is run.

          - **Name** *(string) --*

            The name of the parameter.

          - **Type** *(string) --*

            The type of parameter. The type can be either String or StringList.

          - **Description** *(string) --*

            A description of what the parameter does, how to use it, the default value, and whether
            or not the parameter is optional.

          - **DefaultValue** *(string) --*

            If specified, the default values for the parameters. Parameters without a default value
            are required. Parameters with a default value are optional.

      - **PlatformTypes** *(list) --*

        The list of OS platforms compatible with this Systems Manager document.

        - *(string) --*

      - **DocumentType** *(string) --*

        The type of document.

      - **SchemaVersion** *(string) --*

        The schema version.

      - **LatestVersion** *(string) --*

        The latest version of the document.

      - **DefaultVersion** *(string) --*

        The default version.

      - **DocumentFormat** *(string) --*

        The document format, either JSON or YAML.

      - **TargetType** *(string) --*

        The target type which defines the kinds of resources the document can run on. For example,
        /AWS::EC2::Instance. For a list of valid resource types, see `AWS Resource Types Reference
        <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html>`__
        in the *AWS CloudFormation User Guide* .

      - **Tags** *(list) --*

        The tags, or metadata, that have been applied to the document.

        - *(dict) --*

          Metadata that you assign to your AWS resources. Tags enable you to categorize your
          resources in different ways, for example, by purpose, owner, or environment. In Systems
          Manager, you can apply tags to documents, managed instances, maintenance windows,
          Parameter Store parameters, and patch baselines.

          - **Key** *(string) --*

            The name of the tag.

          - **Value** *(string) --*

            The value of the tag.

      - **AttachmentsInformation** *(list) --*

        Details about the document attachments, including names, locations, sizes, etc.

        - *(dict) --*

          An attribute of an attachment, such as the attachment name.

          - **Name** *(string) --*

            The name of the attachment.
    """


_ClientUpdateMaintenanceWindowResponseTypeDef = TypedDict(
    "_ClientUpdateMaintenanceWindowResponseTypeDef",
    {
        "WindowId": str,
        "Name": str,
        "Description": str,
        "StartDate": str,
        "EndDate": str,
        "Schedule": str,
        "ScheduleTimezone": str,
        "Duration": int,
        "Cutoff": int,
        "AllowUnassociatedTargets": bool,
        "Enabled": bool,
    },
    total=False,
)


class ClientUpdateMaintenanceWindowResponseTypeDef(
    _ClientUpdateMaintenanceWindowResponseTypeDef
):
    """
    Type definition for `ClientUpdateMaintenanceWindow` `Response`

    - **WindowId** *(string) --*

      The ID of the created maintenance window.

    - **Name** *(string) --*

      The name of the maintenance window.

    - **Description** *(string) --*

      An optional description of the update.

    - **StartDate** *(string) --*

      The date and time, in ISO-8601 Extended format, for when the maintenance window is scheduled
      to become active. The maintenance window will not run before this specified time.

    - **EndDate** *(string) --*

      The date and time, in ISO-8601 Extended format, for when the maintenance window is scheduled
      to become inactive. The maintenance window will not run after this specified time.

    - **Schedule** *(string) --*

      The schedule of the maintenance window in the form of a cron or rate expression.

    - **ScheduleTimezone** *(string) --*

      The time zone that the scheduled maintenance window executions are based on, in Internet
      Assigned Numbers Authority (IANA) format. For example: "America/Los_Angeles", "etc/UTC", or
      "Asia/Seoul". For more information, see the `Time Zone Database
      <https://www.iana.org/time-zones>`__ on the IANA website.

    - **Duration** *(integer) --*

      The duration of the maintenance window in hours.

    - **Cutoff** *(integer) --*

      The number of hours before the end of the maintenance window that Systems Manager stops
      scheduling new tasks for execution.

    - **AllowUnassociatedTargets** *(boolean) --*

      Whether targets must be registered with the maintenance window before tasks can be defined
      for those targets.

    - **Enabled** *(boolean) --*

      Whether the maintenance window is enabled.
    """


_ClientUpdateMaintenanceWindowTargetResponseTargetsTypeDef = TypedDict(
    "_ClientUpdateMaintenanceWindowTargetResponseTargetsTypeDef",
    {"Key": str, "Values": List[str]},
    total=False,
)


class ClientUpdateMaintenanceWindowTargetResponseTargetsTypeDef(
    _ClientUpdateMaintenanceWindowTargetResponseTargetsTypeDef
):
    """
    Type definition for `ClientUpdateMaintenanceWindowTargetResponse` `Targets`

    An array of search criteria that targets instances using a Key,Value combination that you
    specify.

    Supported formats include the following.

    * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

    * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

    * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

    * (Maintenance window targets only) ``Key=resource-groups:Name,Values=*resource-group-name*
    ``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

    For example:

    * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

    * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

    * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

    * (Maintenance window targets only)
    ``Key=resource-groups:Name,Values=ProductionResourceGroup``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC* ``

    For information about how to send commands that target instances using ``Key,Value``
    parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
    <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
    in the *AWS Systems Manager User Guide* .

    - **Key** *(string) --*

      User-defined criteria for sending commands that target instances that meet the criteria.

    - **Values** *(list) --*

      User-defined criteria that maps to ``Key`` . For example, if you specified
      ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on instances
      that include Amazon EC2 tags of ``ServerRole,WebServer`` .

      - *(string) --*
    """


_ClientUpdateMaintenanceWindowTargetResponseTypeDef = TypedDict(
    "_ClientUpdateMaintenanceWindowTargetResponseTypeDef",
    {
        "WindowId": str,
        "WindowTargetId": str,
        "Targets": List[ClientUpdateMaintenanceWindowTargetResponseTargetsTypeDef],
        "OwnerInformation": str,
        "Name": str,
        "Description": str,
    },
    total=False,
)


class ClientUpdateMaintenanceWindowTargetResponseTypeDef(
    _ClientUpdateMaintenanceWindowTargetResponseTypeDef
):
    """
    Type definition for `ClientUpdateMaintenanceWindowTarget` `Response`

    - **WindowId** *(string) --*

      The maintenance window ID specified in the update request.

    - **WindowTargetId** *(string) --*

      The target ID specified in the update request.

    - **Targets** *(list) --*

      The updated targets.

      - *(dict) --*

        An array of search criteria that targets instances using a Key,Value combination that you
        specify.

        Supported formats include the following.

        * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

        * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

        * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

        * (Maintenance window targets only) ``Key=resource-groups:Name,Values=*resource-group-name*
        ``

        * (Maintenance window targets only)
        ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

        For example:

        * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

        * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

        * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

        * (Maintenance window targets only)
        ``Key=resource-groups:Name,Values=ProductionResourceGroup``

        * (Maintenance window targets only)
        ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC* ``

        For information about how to send commands that target instances using ``Key,Value``
        parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
        <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
        in the *AWS Systems Manager User Guide* .

        - **Key** *(string) --*

          User-defined criteria for sending commands that target instances that meet the criteria.

        - **Values** *(list) --*

          User-defined criteria that maps to ``Key`` . For example, if you specified
          ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on instances
          that include Amazon EC2 tags of ``ServerRole,WebServer`` .

          - *(string) --*

    - **OwnerInformation** *(string) --*

      The updated owner.

    - **Name** *(string) --*

      The updated name.

    - **Description** *(string) --*

      The updated description.
    """


_ClientUpdateMaintenanceWindowTargetTargetsTypeDef = TypedDict(
    "_ClientUpdateMaintenanceWindowTargetTargetsTypeDef",
    {"Key": str, "Values": List[str]},
    total=False,
)


class ClientUpdateMaintenanceWindowTargetTargetsTypeDef(
    _ClientUpdateMaintenanceWindowTargetTargetsTypeDef
):
    """
    Type definition for `ClientUpdateMaintenanceWindowTarget` `Targets`

    An array of search criteria that targets instances using a Key,Value combination that you
    specify.

    Supported formats include the following.

    * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

    * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

    * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

    * (Maintenance window targets only) ``Key=resource-groups:Name,Values=*resource-group-name* ``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

    For example:

    * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

    * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

    * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

    * (Maintenance window targets only) ``Key=resource-groups:Name,Values=ProductionResourceGroup``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC* ``

    For information about how to send commands that target instances using ``Key,Value``
    parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
    <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
    in the *AWS Systems Manager User Guide* .

    - **Key** *(string) --*

      User-defined criteria for sending commands that target instances that meet the criteria.

    - **Values** *(list) --*

      User-defined criteria that maps to ``Key`` . For example, if you specified ``tag:ServerRole``
      , you could specify ``value:WebServer`` to run a command on instances that include Amazon EC2
      tags of ``ServerRole,WebServer`` .

      - *(string) --*
    """


_RequiredClientUpdateMaintenanceWindowTaskLoggingInfoTypeDef = TypedDict(
    "_RequiredClientUpdateMaintenanceWindowTaskLoggingInfoTypeDef",
    {"S3BucketName": str, "S3Region": str},
)
_OptionalClientUpdateMaintenanceWindowTaskLoggingInfoTypeDef = TypedDict(
    "_OptionalClientUpdateMaintenanceWindowTaskLoggingInfoTypeDef",
    {"S3KeyPrefix": str},
    total=False,
)


class ClientUpdateMaintenanceWindowTaskLoggingInfoTypeDef(
    _RequiredClientUpdateMaintenanceWindowTaskLoggingInfoTypeDef,
    _OptionalClientUpdateMaintenanceWindowTaskLoggingInfoTypeDef,
):
    """
    Type definition for `ClientUpdateMaintenanceWindowTask` `LoggingInfo`

    The new logging location in Amazon S3 to specify.

    .. note::

       ``LoggingInfo`` has been deprecated. To specify an S3 bucket to contain logs, instead use the
       ``OutputS3BucketName`` and ``OutputS3KeyPrefix`` options in the ``TaskInvocationParameters``
       structure. For information about how Systems Manager handles these options for the supported
       maintenance window task types, see  MaintenanceWindowTaskInvocationParameters .

    - **S3BucketName** *(string) --* **[REQUIRED]**

      The name of an Amazon S3 bucket where execution logs are stored .

    - **S3KeyPrefix** *(string) --*

      (Optional) The Amazon S3 bucket subfolder.

    - **S3Region** *(string) --* **[REQUIRED]**

      The region where the Amazon S3 bucket is located.
    """


_ClientUpdateMaintenanceWindowTaskResponseLoggingInfoTypeDef = TypedDict(
    "_ClientUpdateMaintenanceWindowTaskResponseLoggingInfoTypeDef",
    {"S3BucketName": str, "S3KeyPrefix": str, "S3Region": str},
    total=False,
)


class ClientUpdateMaintenanceWindowTaskResponseLoggingInfoTypeDef(
    _ClientUpdateMaintenanceWindowTaskResponseLoggingInfoTypeDef
):
    """
    Type definition for `ClientUpdateMaintenanceWindowTaskResponse` `LoggingInfo`

    The updated logging information in Amazon S3.

    .. note::

       ``LoggingInfo`` has been deprecated. To specify an S3 bucket to contain logs, instead use
       the ``OutputS3BucketName`` and ``OutputS3KeyPrefix`` options in the
       ``TaskInvocationParameters`` structure. For information about how Systems Manager handles
       these options for the supported maintenance window task types, see
       MaintenanceWindowTaskInvocationParameters .

    - **S3BucketName** *(string) --*

      The name of an Amazon S3 bucket where execution logs are stored .

    - **S3KeyPrefix** *(string) --*

      (Optional) The Amazon S3 bucket subfolder.

    - **S3Region** *(string) --*

      The region where the Amazon S3 bucket is located.
    """


_ClientUpdateMaintenanceWindowTaskResponseTargetsTypeDef = TypedDict(
    "_ClientUpdateMaintenanceWindowTaskResponseTargetsTypeDef",
    {"Key": str, "Values": List[str]},
    total=False,
)


class ClientUpdateMaintenanceWindowTaskResponseTargetsTypeDef(
    _ClientUpdateMaintenanceWindowTaskResponseTargetsTypeDef
):
    """
    Type definition for `ClientUpdateMaintenanceWindowTaskResponse` `Targets`

    An array of search criteria that targets instances using a Key,Value combination that you
    specify.

    Supported formats include the following.

    * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

    * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

    * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

    * (Maintenance window targets only) ``Key=resource-groups:Name,Values=*resource-group-name*
    ``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

    For example:

    * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

    * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

    * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

    * (Maintenance window targets only)
    ``Key=resource-groups:Name,Values=ProductionResourceGroup``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC* ``

    For information about how to send commands that target instances using ``Key,Value``
    parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
    <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
    in the *AWS Systems Manager User Guide* .

    - **Key** *(string) --*

      User-defined criteria for sending commands that target instances that meet the criteria.

    - **Values** *(list) --*

      User-defined criteria that maps to ``Key`` . For example, if you specified
      ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on instances
      that include Amazon EC2 tags of ``ServerRole,WebServer`` .

      - *(string) --*
    """


_ClientUpdateMaintenanceWindowTaskResponseTaskInvocationParametersAutomationTypeDef = TypedDict(
    "_ClientUpdateMaintenanceWindowTaskResponseTaskInvocationParametersAutomationTypeDef",
    {"DocumentVersion": str, "Parameters": Dict[str, List[str]]},
    total=False,
)


class ClientUpdateMaintenanceWindowTaskResponseTaskInvocationParametersAutomationTypeDef(
    _ClientUpdateMaintenanceWindowTaskResponseTaskInvocationParametersAutomationTypeDef
):
    """
    Type definition for `ClientUpdateMaintenanceWindowTaskResponseTaskInvocationParameters` `Automation`

    The parameters for an AUTOMATION task type.

    - **DocumentVersion** *(string) --*

      The version of an Automation document to use during task execution.

    - **Parameters** *(dict) --*

      The parameters for the AUTOMATION task.

      For information about specifying and updating task parameters, see
      RegisterTaskWithMaintenanceWindow and  UpdateMaintenanceWindowTask .

      .. note::

         ``LoggingInfo`` has been deprecated. To specify an S3 bucket to contain logs, instead
         use the ``OutputS3BucketName`` and ``OutputS3KeyPrefix`` options in the
         ``TaskInvocationParameters`` structure. For information about how Systems Manager
         handles these options for the supported maintenance window task types, see
         MaintenanceWindowTaskInvocationParameters .

         ``TaskParameters`` has been deprecated. To specify parameters to pass to a task when
         it runs, instead use the ``Parameters`` option in the ``TaskInvocationParameters``
         structure. For information about how Systems Manager handles these options for the
         supported maintenance window task types, see
         MaintenanceWindowTaskInvocationParameters .

        For AUTOMATION task types, Systems Manager ignores any values specified for these
        parameters.

      - *(string) --*

        - *(list) --*

          - *(string) --*
    """


_ClientUpdateMaintenanceWindowTaskResponseTaskInvocationParametersLambdaTypeDef = TypedDict(
    "_ClientUpdateMaintenanceWindowTaskResponseTaskInvocationParametersLambdaTypeDef",
    {"ClientContext": str, "Qualifier": str, "Payload": bytes},
    total=False,
)


class ClientUpdateMaintenanceWindowTaskResponseTaskInvocationParametersLambdaTypeDef(
    _ClientUpdateMaintenanceWindowTaskResponseTaskInvocationParametersLambdaTypeDef
):
    """
    Type definition for `ClientUpdateMaintenanceWindowTaskResponseTaskInvocationParameters` `Lambda`

    The parameters for a LAMBDA task type.

    - **ClientContext** *(string) --*

      Pass client-specific information to the Lambda function that you are invoking. You can
      then process the client information in your Lambda function as you choose through the
      context variable.

    - **Qualifier** *(string) --*

      (Optional) Specify a Lambda function version or alias name. If you specify a function
      version, the action uses the qualified function ARN to invoke a specific Lambda function.
      If you specify an alias name, the action uses the alias ARN to invoke the Lambda function
      version to which the alias points.

    - **Payload** *(bytes) --*

      JSON to provide to your Lambda function as input.
    """


_ClientUpdateMaintenanceWindowTaskResponseTaskInvocationParametersRunCommandNotificationConfigTypeDef = TypedDict(
    "_ClientUpdateMaintenanceWindowTaskResponseTaskInvocationParametersRunCommandNotificationConfigTypeDef",
    {"NotificationArn": str, "NotificationEvents": List[str], "NotificationType": str},
    total=False,
)


class ClientUpdateMaintenanceWindowTaskResponseTaskInvocationParametersRunCommandNotificationConfigTypeDef(
    _ClientUpdateMaintenanceWindowTaskResponseTaskInvocationParametersRunCommandNotificationConfigTypeDef
):
    """
    Type definition for `ClientUpdateMaintenanceWindowTaskResponseTaskInvocationParametersRunCommand` `NotificationConfig`

    Configurations for sending notifications about command status changes on a per-instance
    basis.

    - **NotificationArn** *(string) --*

      An Amazon Resource Name (ARN) for an Amazon Simple Notification Service (Amazon SNS)
      topic. Run Command pushes notifications about command status changes to this topic.

    - **NotificationEvents** *(list) --*

      The different events for which you can receive notifications. These events include the
      following: All (events), InProgress, Success, TimedOut, Cancelled, Failed. To learn
      more about these events, see `Configuring Amazon SNS Notifications for AWS Systems
      Manager
      <http://docs.aws.amazon.com/systems-manager/latest/userguide/monitoring-sns-notifications.html>`__
      in the *AWS Systems Manager User Guide* .

      - *(string) --*

    - **NotificationType** *(string) --*

      Command: Receive notification when the status of a command changes. Invocation: For
      commands sent to multiple instances, receive notification on a per-instance basis when
      the status of a command changes.
    """


_ClientUpdateMaintenanceWindowTaskResponseTaskInvocationParametersRunCommandTypeDef = TypedDict(
    "_ClientUpdateMaintenanceWindowTaskResponseTaskInvocationParametersRunCommandTypeDef",
    {
        "Comment": str,
        "DocumentHash": str,
        "DocumentHashType": str,
        "NotificationConfig": ClientUpdateMaintenanceWindowTaskResponseTaskInvocationParametersRunCommandNotificationConfigTypeDef,
        "OutputS3BucketName": str,
        "OutputS3KeyPrefix": str,
        "Parameters": Dict[str, List[str]],
        "ServiceRoleArn": str,
        "TimeoutSeconds": int,
    },
    total=False,
)


class ClientUpdateMaintenanceWindowTaskResponseTaskInvocationParametersRunCommandTypeDef(
    _ClientUpdateMaintenanceWindowTaskResponseTaskInvocationParametersRunCommandTypeDef
):
    """
    Type definition for `ClientUpdateMaintenanceWindowTaskResponseTaskInvocationParameters` `RunCommand`

    The parameters for a RUN_COMMAND task type.

    - **Comment** *(string) --*

      Information about the commands to run.

    - **DocumentHash** *(string) --*

      The SHA-256 or SHA-1 hash created by the system when the document was created. SHA-1
      hashes have been deprecated.

    - **DocumentHashType** *(string) --*

      SHA-256 or SHA-1. SHA-1 hashes have been deprecated.

    - **NotificationConfig** *(dict) --*

      Configurations for sending notifications about command status changes on a per-instance
      basis.

      - **NotificationArn** *(string) --*

        An Amazon Resource Name (ARN) for an Amazon Simple Notification Service (Amazon SNS)
        topic. Run Command pushes notifications about command status changes to this topic.

      - **NotificationEvents** *(list) --*

        The different events for which you can receive notifications. These events include the
        following: All (events), InProgress, Success, TimedOut, Cancelled, Failed. To learn
        more about these events, see `Configuring Amazon SNS Notifications for AWS Systems
        Manager
        <http://docs.aws.amazon.com/systems-manager/latest/userguide/monitoring-sns-notifications.html>`__
        in the *AWS Systems Manager User Guide* .

        - *(string) --*

      - **NotificationType** *(string) --*

        Command: Receive notification when the status of a command changes. Invocation: For
        commands sent to multiple instances, receive notification on a per-instance basis when
        the status of a command changes.

    - **OutputS3BucketName** *(string) --*

      The name of the Amazon S3 bucket.

    - **OutputS3KeyPrefix** *(string) --*

      The Amazon S3 bucket subfolder.

    - **Parameters** *(dict) --*

      The parameters for the RUN_COMMAND task execution.

      - *(string) --*

        - *(list) --*

          - *(string) --*

    - **ServiceRoleArn** *(string) --*

      The ARN of the IAM service role to use to publish Amazon Simple Notification Service
      (Amazon SNS) notifications for maintenance window Run Command tasks.

    - **TimeoutSeconds** *(integer) --*

      If this time is reached and the command has not already started running, it doesn't run.
    """


_ClientUpdateMaintenanceWindowTaskResponseTaskInvocationParametersStepFunctionsTypeDef = TypedDict(
    "_ClientUpdateMaintenanceWindowTaskResponseTaskInvocationParametersStepFunctionsTypeDef",
    {"Input": str, "Name": str},
    total=False,
)


class ClientUpdateMaintenanceWindowTaskResponseTaskInvocationParametersStepFunctionsTypeDef(
    _ClientUpdateMaintenanceWindowTaskResponseTaskInvocationParametersStepFunctionsTypeDef
):
    """
    Type definition for `ClientUpdateMaintenanceWindowTaskResponseTaskInvocationParameters` `StepFunctions`

    The parameters for a STEP_FUNCTIONS task type.

    - **Input** *(string) --*

      The inputs for the STEP_FUNCTIONS task.

    - **Name** *(string) --*

      The name of the STEP_FUNCTIONS task.
    """


_ClientUpdateMaintenanceWindowTaskResponseTaskInvocationParametersTypeDef = TypedDict(
    "_ClientUpdateMaintenanceWindowTaskResponseTaskInvocationParametersTypeDef",
    {
        "RunCommand": ClientUpdateMaintenanceWindowTaskResponseTaskInvocationParametersRunCommandTypeDef,
        "Automation": ClientUpdateMaintenanceWindowTaskResponseTaskInvocationParametersAutomationTypeDef,
        "StepFunctions": ClientUpdateMaintenanceWindowTaskResponseTaskInvocationParametersStepFunctionsTypeDef,
        "Lambda": ClientUpdateMaintenanceWindowTaskResponseTaskInvocationParametersLambdaTypeDef,
    },
    total=False,
)


class ClientUpdateMaintenanceWindowTaskResponseTaskInvocationParametersTypeDef(
    _ClientUpdateMaintenanceWindowTaskResponseTaskInvocationParametersTypeDef
):
    """
    Type definition for `ClientUpdateMaintenanceWindowTaskResponse` `TaskInvocationParameters`

    The updated parameter values.

    - **RunCommand** *(dict) --*

      The parameters for a RUN_COMMAND task type.

      - **Comment** *(string) --*

        Information about the commands to run.

      - **DocumentHash** *(string) --*

        The SHA-256 or SHA-1 hash created by the system when the document was created. SHA-1
        hashes have been deprecated.

      - **DocumentHashType** *(string) --*

        SHA-256 or SHA-1. SHA-1 hashes have been deprecated.

      - **NotificationConfig** *(dict) --*

        Configurations for sending notifications about command status changes on a per-instance
        basis.

        - **NotificationArn** *(string) --*

          An Amazon Resource Name (ARN) for an Amazon Simple Notification Service (Amazon SNS)
          topic. Run Command pushes notifications about command status changes to this topic.

        - **NotificationEvents** *(list) --*

          The different events for which you can receive notifications. These events include the
          following: All (events), InProgress, Success, TimedOut, Cancelled, Failed. To learn
          more about these events, see `Configuring Amazon SNS Notifications for AWS Systems
          Manager
          <http://docs.aws.amazon.com/systems-manager/latest/userguide/monitoring-sns-notifications.html>`__
          in the *AWS Systems Manager User Guide* .

          - *(string) --*

        - **NotificationType** *(string) --*

          Command: Receive notification when the status of a command changes. Invocation: For
          commands sent to multiple instances, receive notification on a per-instance basis when
          the status of a command changes.

      - **OutputS3BucketName** *(string) --*

        The name of the Amazon S3 bucket.

      - **OutputS3KeyPrefix** *(string) --*

        The Amazon S3 bucket subfolder.

      - **Parameters** *(dict) --*

        The parameters for the RUN_COMMAND task execution.

        - *(string) --*

          - *(list) --*

            - *(string) --*

      - **ServiceRoleArn** *(string) --*

        The ARN of the IAM service role to use to publish Amazon Simple Notification Service
        (Amazon SNS) notifications for maintenance window Run Command tasks.

      - **TimeoutSeconds** *(integer) --*

        If this time is reached and the command has not already started running, it doesn't run.

    - **Automation** *(dict) --*

      The parameters for an AUTOMATION task type.

      - **DocumentVersion** *(string) --*

        The version of an Automation document to use during task execution.

      - **Parameters** *(dict) --*

        The parameters for the AUTOMATION task.

        For information about specifying and updating task parameters, see
        RegisterTaskWithMaintenanceWindow and  UpdateMaintenanceWindowTask .

        .. note::

           ``LoggingInfo`` has been deprecated. To specify an S3 bucket to contain logs, instead
           use the ``OutputS3BucketName`` and ``OutputS3KeyPrefix`` options in the
           ``TaskInvocationParameters`` structure. For information about how Systems Manager
           handles these options for the supported maintenance window task types, see
           MaintenanceWindowTaskInvocationParameters .

           ``TaskParameters`` has been deprecated. To specify parameters to pass to a task when
           it runs, instead use the ``Parameters`` option in the ``TaskInvocationParameters``
           structure. For information about how Systems Manager handles these options for the
           supported maintenance window task types, see
           MaintenanceWindowTaskInvocationParameters .

          For AUTOMATION task types, Systems Manager ignores any values specified for these
          parameters.

        - *(string) --*

          - *(list) --*

            - *(string) --*

    - **StepFunctions** *(dict) --*

      The parameters for a STEP_FUNCTIONS task type.

      - **Input** *(string) --*

        The inputs for the STEP_FUNCTIONS task.

      - **Name** *(string) --*

        The name of the STEP_FUNCTIONS task.

    - **Lambda** *(dict) --*

      The parameters for a LAMBDA task type.

      - **ClientContext** *(string) --*

        Pass client-specific information to the Lambda function that you are invoking. You can
        then process the client information in your Lambda function as you choose through the
        context variable.

      - **Qualifier** *(string) --*

        (Optional) Specify a Lambda function version or alias name. If you specify a function
        version, the action uses the qualified function ARN to invoke a specific Lambda function.
        If you specify an alias name, the action uses the alias ARN to invoke the Lambda function
        version to which the alias points.

      - **Payload** *(bytes) --*

        JSON to provide to your Lambda function as input.
    """


_ClientUpdateMaintenanceWindowTaskResponseTaskParametersTypeDef = TypedDict(
    "_ClientUpdateMaintenanceWindowTaskResponseTaskParametersTypeDef",
    {"Values": List[str]},
    total=False,
)


class ClientUpdateMaintenanceWindowTaskResponseTaskParametersTypeDef(
    _ClientUpdateMaintenanceWindowTaskResponseTaskParametersTypeDef
):
    """
    Type definition for `ClientUpdateMaintenanceWindowTaskResponse` `TaskParameters`

    Defines the values for a task parameter.

    - **Values** *(list) --*

      This field contains an array of 0 or more strings, each 1 to 255 characters in length.

      - *(string) --*
    """


_ClientUpdateMaintenanceWindowTaskResponseTypeDef = TypedDict(
    "_ClientUpdateMaintenanceWindowTaskResponseTypeDef",
    {
        "WindowId": str,
        "WindowTaskId": str,
        "Targets": List[ClientUpdateMaintenanceWindowTaskResponseTargetsTypeDef],
        "TaskArn": str,
        "ServiceRoleArn": str,
        "TaskParameters": Dict[
            str, ClientUpdateMaintenanceWindowTaskResponseTaskParametersTypeDef
        ],
        "TaskInvocationParameters": ClientUpdateMaintenanceWindowTaskResponseTaskInvocationParametersTypeDef,
        "Priority": int,
        "MaxConcurrency": str,
        "MaxErrors": str,
        "LoggingInfo": ClientUpdateMaintenanceWindowTaskResponseLoggingInfoTypeDef,
        "Name": str,
        "Description": str,
    },
    total=False,
)


class ClientUpdateMaintenanceWindowTaskResponseTypeDef(
    _ClientUpdateMaintenanceWindowTaskResponseTypeDef
):
    """
    Type definition for `ClientUpdateMaintenanceWindowTask` `Response`

    - **WindowId** *(string) --*

      The ID of the maintenance window that was updated.

    - **WindowTaskId** *(string) --*

      The task ID of the maintenance window that was updated.

    - **Targets** *(list) --*

      The updated target values.

      - *(dict) --*

        An array of search criteria that targets instances using a Key,Value combination that you
        specify.

        Supported formats include the following.

        * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

        * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

        * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

        * (Maintenance window targets only) ``Key=resource-groups:Name,Values=*resource-group-name*
        ``

        * (Maintenance window targets only)
        ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

        For example:

        * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

        * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

        * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

        * (Maintenance window targets only)
        ``Key=resource-groups:Name,Values=ProductionResourceGroup``

        * (Maintenance window targets only)
        ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC* ``

        For information about how to send commands that target instances using ``Key,Value``
        parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
        <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
        in the *AWS Systems Manager User Guide* .

        - **Key** *(string) --*

          User-defined criteria for sending commands that target instances that meet the criteria.

        - **Values** *(list) --*

          User-defined criteria that maps to ``Key`` . For example, if you specified
          ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on instances
          that include Amazon EC2 tags of ``ServerRole,WebServer`` .

          - *(string) --*

    - **TaskArn** *(string) --*

      The updated task ARN value.

    - **ServiceRoleArn** *(string) --*

      The ARN of the IAM service role to use to publish Amazon Simple Notification Service (Amazon
      SNS) notifications for maintenance window Run Command tasks.

    - **TaskParameters** *(dict) --*

      The updated parameter values.

      .. note::

         ``TaskParameters`` has been deprecated. To specify parameters to pass to a task when it
         runs, instead use the ``Parameters`` option in the ``TaskInvocationParameters`` structure.
         For information about how Systems Manager handles these options for the supported
         maintenance window task types, see  MaintenanceWindowTaskInvocationParameters .

      - *(string) --*

        - *(dict) --*

          Defines the values for a task parameter.

          - **Values** *(list) --*

            This field contains an array of 0 or more strings, each 1 to 255 characters in length.

            - *(string) --*

    - **TaskInvocationParameters** *(dict) --*

      The updated parameter values.

      - **RunCommand** *(dict) --*

        The parameters for a RUN_COMMAND task type.

        - **Comment** *(string) --*

          Information about the commands to run.

        - **DocumentHash** *(string) --*

          The SHA-256 or SHA-1 hash created by the system when the document was created. SHA-1
          hashes have been deprecated.

        - **DocumentHashType** *(string) --*

          SHA-256 or SHA-1. SHA-1 hashes have been deprecated.

        - **NotificationConfig** *(dict) --*

          Configurations for sending notifications about command status changes on a per-instance
          basis.

          - **NotificationArn** *(string) --*

            An Amazon Resource Name (ARN) for an Amazon Simple Notification Service (Amazon SNS)
            topic. Run Command pushes notifications about command status changes to this topic.

          - **NotificationEvents** *(list) --*

            The different events for which you can receive notifications. These events include the
            following: All (events), InProgress, Success, TimedOut, Cancelled, Failed. To learn
            more about these events, see `Configuring Amazon SNS Notifications for AWS Systems
            Manager
            <http://docs.aws.amazon.com/systems-manager/latest/userguide/monitoring-sns-notifications.html>`__
            in the *AWS Systems Manager User Guide* .

            - *(string) --*

          - **NotificationType** *(string) --*

            Command: Receive notification when the status of a command changes. Invocation: For
            commands sent to multiple instances, receive notification on a per-instance basis when
            the status of a command changes.

        - **OutputS3BucketName** *(string) --*

          The name of the Amazon S3 bucket.

        - **OutputS3KeyPrefix** *(string) --*

          The Amazon S3 bucket subfolder.

        - **Parameters** *(dict) --*

          The parameters for the RUN_COMMAND task execution.

          - *(string) --*

            - *(list) --*

              - *(string) --*

        - **ServiceRoleArn** *(string) --*

          The ARN of the IAM service role to use to publish Amazon Simple Notification Service
          (Amazon SNS) notifications for maintenance window Run Command tasks.

        - **TimeoutSeconds** *(integer) --*

          If this time is reached and the command has not already started running, it doesn't run.

      - **Automation** *(dict) --*

        The parameters for an AUTOMATION task type.

        - **DocumentVersion** *(string) --*

          The version of an Automation document to use during task execution.

        - **Parameters** *(dict) --*

          The parameters for the AUTOMATION task.

          For information about specifying and updating task parameters, see
          RegisterTaskWithMaintenanceWindow and  UpdateMaintenanceWindowTask .

          .. note::

             ``LoggingInfo`` has been deprecated. To specify an S3 bucket to contain logs, instead
             use the ``OutputS3BucketName`` and ``OutputS3KeyPrefix`` options in the
             ``TaskInvocationParameters`` structure. For information about how Systems Manager
             handles these options for the supported maintenance window task types, see
             MaintenanceWindowTaskInvocationParameters .

             ``TaskParameters`` has been deprecated. To specify parameters to pass to a task when
             it runs, instead use the ``Parameters`` option in the ``TaskInvocationParameters``
             structure. For information about how Systems Manager handles these options for the
             supported maintenance window task types, see
             MaintenanceWindowTaskInvocationParameters .

            For AUTOMATION task types, Systems Manager ignores any values specified for these
            parameters.

          - *(string) --*

            - *(list) --*

              - *(string) --*

      - **StepFunctions** *(dict) --*

        The parameters for a STEP_FUNCTIONS task type.

        - **Input** *(string) --*

          The inputs for the STEP_FUNCTIONS task.

        - **Name** *(string) --*

          The name of the STEP_FUNCTIONS task.

      - **Lambda** *(dict) --*

        The parameters for a LAMBDA task type.

        - **ClientContext** *(string) --*

          Pass client-specific information to the Lambda function that you are invoking. You can
          then process the client information in your Lambda function as you choose through the
          context variable.

        - **Qualifier** *(string) --*

          (Optional) Specify a Lambda function version or alias name. If you specify a function
          version, the action uses the qualified function ARN to invoke a specific Lambda function.
          If you specify an alias name, the action uses the alias ARN to invoke the Lambda function
          version to which the alias points.

        - **Payload** *(bytes) --*

          JSON to provide to your Lambda function as input.

    - **Priority** *(integer) --*

      The updated priority value.

    - **MaxConcurrency** *(string) --*

      The updated MaxConcurrency value.

    - **MaxErrors** *(string) --*

      The updated MaxErrors value.

    - **LoggingInfo** *(dict) --*

      The updated logging information in Amazon S3.

      .. note::

         ``LoggingInfo`` has been deprecated. To specify an S3 bucket to contain logs, instead use
         the ``OutputS3BucketName`` and ``OutputS3KeyPrefix`` options in the
         ``TaskInvocationParameters`` structure. For information about how Systems Manager handles
         these options for the supported maintenance window task types, see
         MaintenanceWindowTaskInvocationParameters .

      - **S3BucketName** *(string) --*

        The name of an Amazon S3 bucket where execution logs are stored .

      - **S3KeyPrefix** *(string) --*

        (Optional) The Amazon S3 bucket subfolder.

      - **S3Region** *(string) --*

        The region where the Amazon S3 bucket is located.

    - **Name** *(string) --*

      The updated task name.

    - **Description** *(string) --*

      The updated task description.
    """


_ClientUpdateMaintenanceWindowTaskTargetsTypeDef = TypedDict(
    "_ClientUpdateMaintenanceWindowTaskTargetsTypeDef",
    {"Key": str, "Values": List[str]},
    total=False,
)


class ClientUpdateMaintenanceWindowTaskTargetsTypeDef(
    _ClientUpdateMaintenanceWindowTaskTargetsTypeDef
):
    """
    Type definition for `ClientUpdateMaintenanceWindowTask` `Targets`

    An array of search criteria that targets instances using a Key,Value combination that you
    specify.

    Supported formats include the following.

    * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

    * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

    * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

    * (Maintenance window targets only) ``Key=resource-groups:Name,Values=*resource-group-name* ``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

    For example:

    * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

    * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

    * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

    * (Maintenance window targets only) ``Key=resource-groups:Name,Values=ProductionResourceGroup``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC* ``

    For information about how to send commands that target instances using ``Key,Value``
    parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
    <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
    in the *AWS Systems Manager User Guide* .

    - **Key** *(string) --*

      User-defined criteria for sending commands that target instances that meet the criteria.

    - **Values** *(list) --*

      User-defined criteria that maps to ``Key`` . For example, if you specified ``tag:ServerRole``
      , you could specify ``value:WebServer`` to run a command on instances that include Amazon EC2
      tags of ``ServerRole,WebServer`` .

      - *(string) --*
    """


_ClientUpdateMaintenanceWindowTaskTaskInvocationParametersAutomationTypeDef = TypedDict(
    "_ClientUpdateMaintenanceWindowTaskTaskInvocationParametersAutomationTypeDef",
    {"DocumentVersion": str, "Parameters": Dict[str, List[str]]},
    total=False,
)


class ClientUpdateMaintenanceWindowTaskTaskInvocationParametersAutomationTypeDef(
    _ClientUpdateMaintenanceWindowTaskTaskInvocationParametersAutomationTypeDef
):
    """
    Type definition for `ClientUpdateMaintenanceWindowTaskTaskInvocationParameters` `Automation`

    The parameters for an AUTOMATION task type.

    - **DocumentVersion** *(string) --*

      The version of an Automation document to use during task execution.

    - **Parameters** *(dict) --*

      The parameters for the AUTOMATION task.

      For information about specifying and updating task parameters, see
      RegisterTaskWithMaintenanceWindow and  UpdateMaintenanceWindowTask .

      .. note::

         ``LoggingInfo`` has been deprecated. To specify an S3 bucket to contain logs, instead use
         the ``OutputS3BucketName`` and ``OutputS3KeyPrefix`` options in the
         ``TaskInvocationParameters`` structure. For information about how Systems Manager handles
         these options for the supported maintenance window task types, see
         MaintenanceWindowTaskInvocationParameters .

         ``TaskParameters`` has been deprecated. To specify parameters to pass to a task when it
         runs, instead use the ``Parameters`` option in the ``TaskInvocationParameters`` structure.
         For information about how Systems Manager handles these options for the supported
         maintenance window task types, see  MaintenanceWindowTaskInvocationParameters .

        For AUTOMATION task types, Systems Manager ignores any values specified for these
        parameters.

      - *(string) --*

        - *(list) --*

          - *(string) --*
    """


_ClientUpdateMaintenanceWindowTaskTaskInvocationParametersLambdaTypeDef = TypedDict(
    "_ClientUpdateMaintenanceWindowTaskTaskInvocationParametersLambdaTypeDef",
    {"ClientContext": str, "Qualifier": str, "Payload": bytes},
    total=False,
)


class ClientUpdateMaintenanceWindowTaskTaskInvocationParametersLambdaTypeDef(
    _ClientUpdateMaintenanceWindowTaskTaskInvocationParametersLambdaTypeDef
):
    """
    Type definition for `ClientUpdateMaintenanceWindowTaskTaskInvocationParameters` `Lambda`

    The parameters for a LAMBDA task type.

    - **ClientContext** *(string) --*

      Pass client-specific information to the Lambda function that you are invoking. You can then
      process the client information in your Lambda function as you choose through the context
      variable.

    - **Qualifier** *(string) --*

      (Optional) Specify a Lambda function version or alias name. If you specify a function
      version, the action uses the qualified function ARN to invoke a specific Lambda function. If
      you specify an alias name, the action uses the alias ARN to invoke the Lambda function
      version to which the alias points.

    - **Payload** *(bytes) --*

      JSON to provide to your Lambda function as input.
    """


_ClientUpdateMaintenanceWindowTaskTaskInvocationParametersRunCommandNotificationConfigTypeDef = TypedDict(
    "_ClientUpdateMaintenanceWindowTaskTaskInvocationParametersRunCommandNotificationConfigTypeDef",
    {"NotificationArn": str, "NotificationEvents": List[str], "NotificationType": str},
    total=False,
)


class ClientUpdateMaintenanceWindowTaskTaskInvocationParametersRunCommandNotificationConfigTypeDef(
    _ClientUpdateMaintenanceWindowTaskTaskInvocationParametersRunCommandNotificationConfigTypeDef
):
    """
    Type definition for `ClientUpdateMaintenanceWindowTaskTaskInvocationParametersRunCommand` `NotificationConfig`

    Configurations for sending notifications about command status changes on a per-instance basis.

    - **NotificationArn** *(string) --*

      An Amazon Resource Name (ARN) for an Amazon Simple Notification Service (Amazon SNS) topic.
      Run Command pushes notifications about command status changes to this topic.

    - **NotificationEvents** *(list) --*

      The different events for which you can receive notifications. These events include the
      following: All (events), InProgress, Success, TimedOut, Cancelled, Failed. To learn more
      about these events, see `Configuring Amazon SNS Notifications for AWS Systems Manager
      <http://docs.aws.amazon.com/systems-manager/latest/userguide/monitoring-sns-notifications.html>`__
      in the *AWS Systems Manager User Guide* .

      - *(string) --*

    - **NotificationType** *(string) --*

      Command: Receive notification when the status of a command changes. Invocation: For
      commands sent to multiple instances, receive notification on a per-instance basis when the
      status of a command changes.
    """


_ClientUpdateMaintenanceWindowTaskTaskInvocationParametersRunCommandTypeDef = TypedDict(
    "_ClientUpdateMaintenanceWindowTaskTaskInvocationParametersRunCommandTypeDef",
    {
        "Comment": str,
        "DocumentHash": str,
        "DocumentHashType": str,
        "NotificationConfig": ClientUpdateMaintenanceWindowTaskTaskInvocationParametersRunCommandNotificationConfigTypeDef,
        "OutputS3BucketName": str,
        "OutputS3KeyPrefix": str,
        "Parameters": Dict[str, List[str]],
        "ServiceRoleArn": str,
        "TimeoutSeconds": int,
    },
    total=False,
)


class ClientUpdateMaintenanceWindowTaskTaskInvocationParametersRunCommandTypeDef(
    _ClientUpdateMaintenanceWindowTaskTaskInvocationParametersRunCommandTypeDef
):
    """
    Type definition for `ClientUpdateMaintenanceWindowTaskTaskInvocationParameters` `RunCommand`

    The parameters for a RUN_COMMAND task type.

    - **Comment** *(string) --*

      Information about the commands to run.

    - **DocumentHash** *(string) --*

      The SHA-256 or SHA-1 hash created by the system when the document was created. SHA-1 hashes
      have been deprecated.

    - **DocumentHashType** *(string) --*

      SHA-256 or SHA-1. SHA-1 hashes have been deprecated.

    - **NotificationConfig** *(dict) --*

      Configurations for sending notifications about command status changes on a per-instance basis.

      - **NotificationArn** *(string) --*

        An Amazon Resource Name (ARN) for an Amazon Simple Notification Service (Amazon SNS) topic.
        Run Command pushes notifications about command status changes to this topic.

      - **NotificationEvents** *(list) --*

        The different events for which you can receive notifications. These events include the
        following: All (events), InProgress, Success, TimedOut, Cancelled, Failed. To learn more
        about these events, see `Configuring Amazon SNS Notifications for AWS Systems Manager
        <http://docs.aws.amazon.com/systems-manager/latest/userguide/monitoring-sns-notifications.html>`__
        in the *AWS Systems Manager User Guide* .

        - *(string) --*

      - **NotificationType** *(string) --*

        Command: Receive notification when the status of a command changes. Invocation: For
        commands sent to multiple instances, receive notification on a per-instance basis when the
        status of a command changes.

    - **OutputS3BucketName** *(string) --*

      The name of the Amazon S3 bucket.

    - **OutputS3KeyPrefix** *(string) --*

      The Amazon S3 bucket subfolder.

    - **Parameters** *(dict) --*

      The parameters for the RUN_COMMAND task execution.

      - *(string) --*

        - *(list) --*

          - *(string) --*

    - **ServiceRoleArn** *(string) --*

      The ARN of the IAM service role to use to publish Amazon Simple Notification Service (Amazon
      SNS) notifications for maintenance window Run Command tasks.

    - **TimeoutSeconds** *(integer) --*

      If this time is reached and the command has not already started running, it doesn't run.
    """


_ClientUpdateMaintenanceWindowTaskTaskInvocationParametersStepFunctionsTypeDef = TypedDict(
    "_ClientUpdateMaintenanceWindowTaskTaskInvocationParametersStepFunctionsTypeDef",
    {"Input": str, "Name": str},
    total=False,
)


class ClientUpdateMaintenanceWindowTaskTaskInvocationParametersStepFunctionsTypeDef(
    _ClientUpdateMaintenanceWindowTaskTaskInvocationParametersStepFunctionsTypeDef
):
    """
    Type definition for `ClientUpdateMaintenanceWindowTaskTaskInvocationParameters` `StepFunctions`

    The parameters for a STEP_FUNCTIONS task type.

    - **Input** *(string) --*

      The inputs for the STEP_FUNCTIONS task.

    - **Name** *(string) --*

      The name of the STEP_FUNCTIONS task.
    """


_ClientUpdateMaintenanceWindowTaskTaskInvocationParametersTypeDef = TypedDict(
    "_ClientUpdateMaintenanceWindowTaskTaskInvocationParametersTypeDef",
    {
        "RunCommand": ClientUpdateMaintenanceWindowTaskTaskInvocationParametersRunCommandTypeDef,
        "Automation": ClientUpdateMaintenanceWindowTaskTaskInvocationParametersAutomationTypeDef,
        "StepFunctions": ClientUpdateMaintenanceWindowTaskTaskInvocationParametersStepFunctionsTypeDef,
        "Lambda": ClientUpdateMaintenanceWindowTaskTaskInvocationParametersLambdaTypeDef,
    },
    total=False,
)


class ClientUpdateMaintenanceWindowTaskTaskInvocationParametersTypeDef(
    _ClientUpdateMaintenanceWindowTaskTaskInvocationParametersTypeDef
):
    """
    Type definition for `ClientUpdateMaintenanceWindowTask` `TaskInvocationParameters`

    The parameters that the task should use during execution. Populate only the fields that match the
    task type. All other fields should be empty.

    - **RunCommand** *(dict) --*

      The parameters for a RUN_COMMAND task type.

      - **Comment** *(string) --*

        Information about the commands to run.

      - **DocumentHash** *(string) --*

        The SHA-256 or SHA-1 hash created by the system when the document was created. SHA-1 hashes
        have been deprecated.

      - **DocumentHashType** *(string) --*

        SHA-256 or SHA-1. SHA-1 hashes have been deprecated.

      - **NotificationConfig** *(dict) --*

        Configurations for sending notifications about command status changes on a per-instance basis.

        - **NotificationArn** *(string) --*

          An Amazon Resource Name (ARN) for an Amazon Simple Notification Service (Amazon SNS) topic.
          Run Command pushes notifications about command status changes to this topic.

        - **NotificationEvents** *(list) --*

          The different events for which you can receive notifications. These events include the
          following: All (events), InProgress, Success, TimedOut, Cancelled, Failed. To learn more
          about these events, see `Configuring Amazon SNS Notifications for AWS Systems Manager
          <http://docs.aws.amazon.com/systems-manager/latest/userguide/monitoring-sns-notifications.html>`__
          in the *AWS Systems Manager User Guide* .

          - *(string) --*

        - **NotificationType** *(string) --*

          Command: Receive notification when the status of a command changes. Invocation: For
          commands sent to multiple instances, receive notification on a per-instance basis when the
          status of a command changes.

      - **OutputS3BucketName** *(string) --*

        The name of the Amazon S3 bucket.

      - **OutputS3KeyPrefix** *(string) --*

        The Amazon S3 bucket subfolder.

      - **Parameters** *(dict) --*

        The parameters for the RUN_COMMAND task execution.

        - *(string) --*

          - *(list) --*

            - *(string) --*

      - **ServiceRoleArn** *(string) --*

        The ARN of the IAM service role to use to publish Amazon Simple Notification Service (Amazon
        SNS) notifications for maintenance window Run Command tasks.

      - **TimeoutSeconds** *(integer) --*

        If this time is reached and the command has not already started running, it doesn't run.

    - **Automation** *(dict) --*

      The parameters for an AUTOMATION task type.

      - **DocumentVersion** *(string) --*

        The version of an Automation document to use during task execution.

      - **Parameters** *(dict) --*

        The parameters for the AUTOMATION task.

        For information about specifying and updating task parameters, see
        RegisterTaskWithMaintenanceWindow and  UpdateMaintenanceWindowTask .

        .. note::

           ``LoggingInfo`` has been deprecated. To specify an S3 bucket to contain logs, instead use
           the ``OutputS3BucketName`` and ``OutputS3KeyPrefix`` options in the
           ``TaskInvocationParameters`` structure. For information about how Systems Manager handles
           these options for the supported maintenance window task types, see
           MaintenanceWindowTaskInvocationParameters .

           ``TaskParameters`` has been deprecated. To specify parameters to pass to a task when it
           runs, instead use the ``Parameters`` option in the ``TaskInvocationParameters`` structure.
           For information about how Systems Manager handles these options for the supported
           maintenance window task types, see  MaintenanceWindowTaskInvocationParameters .

          For AUTOMATION task types, Systems Manager ignores any values specified for these
          parameters.

        - *(string) --*

          - *(list) --*

            - *(string) --*

    - **StepFunctions** *(dict) --*

      The parameters for a STEP_FUNCTIONS task type.

      - **Input** *(string) --*

        The inputs for the STEP_FUNCTIONS task.

      - **Name** *(string) --*

        The name of the STEP_FUNCTIONS task.

    - **Lambda** *(dict) --*

      The parameters for a LAMBDA task type.

      - **ClientContext** *(string) --*

        Pass client-specific information to the Lambda function that you are invoking. You can then
        process the client information in your Lambda function as you choose through the context
        variable.

      - **Qualifier** *(string) --*

        (Optional) Specify a Lambda function version or alias name. If you specify a function
        version, the action uses the qualified function ARN to invoke a specific Lambda function. If
        you specify an alias name, the action uses the alias ARN to invoke the Lambda function
        version to which the alias points.

      - **Payload** *(bytes) --*

        JSON to provide to your Lambda function as input.
    """


_ClientUpdateMaintenanceWindowTaskTaskParametersTypeDef = TypedDict(
    "_ClientUpdateMaintenanceWindowTaskTaskParametersTypeDef",
    {"Values": List[str]},
    total=False,
)


class ClientUpdateMaintenanceWindowTaskTaskParametersTypeDef(
    _ClientUpdateMaintenanceWindowTaskTaskParametersTypeDef
):
    """
    Type definition for `ClientUpdateMaintenanceWindowTask` `TaskParameters`

    Defines the values for a task parameter.

    - **Values** *(list) --*

      This field contains an array of 0 or more strings, each 1 to 255 characters in length.

      - *(string) --*
    """


_ClientUpdateOpsItemNotificationsTypeDef = TypedDict(
    "_ClientUpdateOpsItemNotificationsTypeDef", {"Arn": str}, total=False
)


class ClientUpdateOpsItemNotificationsTypeDef(_ClientUpdateOpsItemNotificationsTypeDef):
    """
    Type definition for `ClientUpdateOpsItem` `Notifications`

    A notification about the OpsItem.

    - **Arn** *(string) --*

      The Amazon Resource Name (ARN) of an SNS topic where notifications are sent when this OpsItem
      is edited or changed.
    """


_ClientUpdateOpsItemOperationalDataTypeDef = TypedDict(
    "_ClientUpdateOpsItemOperationalDataTypeDef",
    {"Value": str, "Type": str},
    total=False,
)


class ClientUpdateOpsItemOperationalDataTypeDef(
    _ClientUpdateOpsItemOperationalDataTypeDef
):
    """
    Type definition for `ClientUpdateOpsItem` `OperationalData`

    An object that defines the value of the key and its type in the OperationalData map.

    - **Value** *(string) --*

      The value of the OperationalData key.

    - **Type** *(string) --*

      The type of key-value pair. Valid types include ``SearchableString`` and ``String`` .
    """


_ClientUpdateOpsItemRelatedOpsItemsTypeDef = TypedDict(
    "_ClientUpdateOpsItemRelatedOpsItemsTypeDef", {"OpsItemId": str}
)


class ClientUpdateOpsItemRelatedOpsItemsTypeDef(
    _ClientUpdateOpsItemRelatedOpsItemsTypeDef
):
    """
    Type definition for `ClientUpdateOpsItem` `RelatedOpsItems`

    An OpsItems that shares something in common with the current OpsItem. For example, related
    OpsItems can include OpsItems with similar error messages, impacted resources, or statuses for
    the impacted resource.

    - **OpsItemId** *(string) --* **[REQUIRED]**

      The ID of an OpsItem related to the current OpsItem.
    """


_ClientUpdatePatchBaselineApprovalRulesPatchRulesPatchFilterGroupPatchFiltersTypeDef = TypedDict(
    "_ClientUpdatePatchBaselineApprovalRulesPatchRulesPatchFilterGroupPatchFiltersTypeDef",
    {"Key": str, "Values": List[str]},
)


class ClientUpdatePatchBaselineApprovalRulesPatchRulesPatchFilterGroupPatchFiltersTypeDef(
    _ClientUpdatePatchBaselineApprovalRulesPatchRulesPatchFilterGroupPatchFiltersTypeDef
):
    """
    Type definition for `ClientUpdatePatchBaselineApprovalRulesPatchRulesPatchFilterGroup` `PatchFilters`

    Defines which patches should be included in a patch baseline.

    A patch filter consists of a key and a set of values. The filter key is a patch
    property. For example, the available filter keys for WINDOWS are PATCH_SET, PRODUCT,
    PRODUCT_FAMILY, CLASSIFICATION, and MSRC_SEVERITY. The filter values define a matching
    criterion for the patch property indicated by the key. For example, if the filter key
    is PRODUCT and the filter values are ["Office 2013", "Office 2016"], then the filter
    accepts all patches where product name is either "Office 2013" or "Office 2016". The
    filter values can be exact values for the patch property given as a key, or a wildcard
    (*), which matches all values.

    You can view lists of valid values for the patch properties by running the
    ``DescribePatchProperties`` command. For information about which patch properties can
    be used with each major operating system, see  DescribePatchProperties .

    - **Key** *(string) --* **[REQUIRED]**

      The key for the filter.

      Run the  DescribePatchProperties command to view lists of valid keys for each
      operating system type.

    - **Values** *(list) --* **[REQUIRED]**

      The value for the filter key.

      Run the  DescribePatchProperties command to view lists of valid values for each key
      based on operating system type.

      - *(string) --*
    """


_ClientUpdatePatchBaselineApprovalRulesPatchRulesPatchFilterGroupTypeDef = TypedDict(
    "_ClientUpdatePatchBaselineApprovalRulesPatchRulesPatchFilterGroupTypeDef",
    {
        "PatchFilters": List[
            ClientUpdatePatchBaselineApprovalRulesPatchRulesPatchFilterGroupPatchFiltersTypeDef
        ]
    },
)


class ClientUpdatePatchBaselineApprovalRulesPatchRulesPatchFilterGroupTypeDef(
    _ClientUpdatePatchBaselineApprovalRulesPatchRulesPatchFilterGroupTypeDef
):
    """
    Type definition for `ClientUpdatePatchBaselineApprovalRulesPatchRules` `PatchFilterGroup`

    The patch filter group that defines the criteria for the rule.

    - **PatchFilters** *(list) --* **[REQUIRED]**

      The set of patch filters that make up the group.

      - *(dict) --*

        Defines which patches should be included in a patch baseline.

        A patch filter consists of a key and a set of values. The filter key is a patch
        property. For example, the available filter keys for WINDOWS are PATCH_SET, PRODUCT,
        PRODUCT_FAMILY, CLASSIFICATION, and MSRC_SEVERITY. The filter values define a matching
        criterion for the patch property indicated by the key. For example, if the filter key
        is PRODUCT and the filter values are ["Office 2013", "Office 2016"], then the filter
        accepts all patches where product name is either "Office 2013" or "Office 2016". The
        filter values can be exact values for the patch property given as a key, or a wildcard
        (*), which matches all values.

        You can view lists of valid values for the patch properties by running the
        ``DescribePatchProperties`` command. For information about which patch properties can
        be used with each major operating system, see  DescribePatchProperties .

        - **Key** *(string) --* **[REQUIRED]**

          The key for the filter.

          Run the  DescribePatchProperties command to view lists of valid keys for each
          operating system type.

        - **Values** *(list) --* **[REQUIRED]**

          The value for the filter key.

          Run the  DescribePatchProperties command to view lists of valid values for each key
          based on operating system type.

          - *(string) --*
    """


_RequiredClientUpdatePatchBaselineApprovalRulesPatchRulesTypeDef = TypedDict(
    "_RequiredClientUpdatePatchBaselineApprovalRulesPatchRulesTypeDef",
    {
        "PatchFilterGroup": ClientUpdatePatchBaselineApprovalRulesPatchRulesPatchFilterGroupTypeDef,
        "ApproveAfterDays": int,
    },
)
_OptionalClientUpdatePatchBaselineApprovalRulesPatchRulesTypeDef = TypedDict(
    "_OptionalClientUpdatePatchBaselineApprovalRulesPatchRulesTypeDef",
    {"ComplianceLevel": str, "EnableNonSecurity": bool},
    total=False,
)


class ClientUpdatePatchBaselineApprovalRulesPatchRulesTypeDef(
    _RequiredClientUpdatePatchBaselineApprovalRulesPatchRulesTypeDef,
    _OptionalClientUpdatePatchBaselineApprovalRulesPatchRulesTypeDef,
):
    """
    Type definition for `ClientUpdatePatchBaselineApprovalRules` `PatchRules`

    Defines an approval rule for a patch baseline.

    - **PatchFilterGroup** *(dict) --* **[REQUIRED]**

      The patch filter group that defines the criteria for the rule.

      - **PatchFilters** *(list) --* **[REQUIRED]**

        The set of patch filters that make up the group.

        - *(dict) --*

          Defines which patches should be included in a patch baseline.

          A patch filter consists of a key and a set of values. The filter key is a patch
          property. For example, the available filter keys for WINDOWS are PATCH_SET, PRODUCT,
          PRODUCT_FAMILY, CLASSIFICATION, and MSRC_SEVERITY. The filter values define a matching
          criterion for the patch property indicated by the key. For example, if the filter key
          is PRODUCT and the filter values are ["Office 2013", "Office 2016"], then the filter
          accepts all patches where product name is either "Office 2013" or "Office 2016". The
          filter values can be exact values for the patch property given as a key, or a wildcard
          (*), which matches all values.

          You can view lists of valid values for the patch properties by running the
          ``DescribePatchProperties`` command. For information about which patch properties can
          be used with each major operating system, see  DescribePatchProperties .

          - **Key** *(string) --* **[REQUIRED]**

            The key for the filter.

            Run the  DescribePatchProperties command to view lists of valid keys for each
            operating system type.

          - **Values** *(list) --* **[REQUIRED]**

            The value for the filter key.

            Run the  DescribePatchProperties command to view lists of valid values for each key
            based on operating system type.

            - *(string) --*

    - **ComplianceLevel** *(string) --*

      A compliance severity level for all approved patches in a patch baseline. Valid compliance
      severity levels include the following: Unspecified, Critical, High, Medium, Low, and
      Informational.

    - **ApproveAfterDays** *(integer) --* **[REQUIRED]**

      The number of days after the release date of each patch matched by the rule that the patch
      is marked as approved in the patch baseline. For example, a value of ``7`` means that
      patches are approved seven days after they are released.

    - **EnableNonSecurity** *(boolean) --*

      For instances identified by the approval rule filters, enables a patch baseline to apply
      non-security updates available in the specified repository. The default value is 'false'.
      Applies to Linux instances only.
    """


_ClientUpdatePatchBaselineApprovalRulesTypeDef = TypedDict(
    "_ClientUpdatePatchBaselineApprovalRulesTypeDef",
    {"PatchRules": List[ClientUpdatePatchBaselineApprovalRulesPatchRulesTypeDef]},
)


class ClientUpdatePatchBaselineApprovalRulesTypeDef(
    _ClientUpdatePatchBaselineApprovalRulesTypeDef
):
    """
    Type definition for `ClientUpdatePatchBaseline` `ApprovalRules`

    A set of rules used to include patches in the baseline.

    - **PatchRules** *(list) --* **[REQUIRED]**

      The rules that make up the rule group.

      - *(dict) --*

        Defines an approval rule for a patch baseline.

        - **PatchFilterGroup** *(dict) --* **[REQUIRED]**

          The patch filter group that defines the criteria for the rule.

          - **PatchFilters** *(list) --* **[REQUIRED]**

            The set of patch filters that make up the group.

            - *(dict) --*

              Defines which patches should be included in a patch baseline.

              A patch filter consists of a key and a set of values. The filter key is a patch
              property. For example, the available filter keys for WINDOWS are PATCH_SET, PRODUCT,
              PRODUCT_FAMILY, CLASSIFICATION, and MSRC_SEVERITY. The filter values define a matching
              criterion for the patch property indicated by the key. For example, if the filter key
              is PRODUCT and the filter values are ["Office 2013", "Office 2016"], then the filter
              accepts all patches where product name is either "Office 2013" or "Office 2016". The
              filter values can be exact values for the patch property given as a key, or a wildcard
              (*), which matches all values.

              You can view lists of valid values for the patch properties by running the
              ``DescribePatchProperties`` command. For information about which patch properties can
              be used with each major operating system, see  DescribePatchProperties .

              - **Key** *(string) --* **[REQUIRED]**

                The key for the filter.

                Run the  DescribePatchProperties command to view lists of valid keys for each
                operating system type.

              - **Values** *(list) --* **[REQUIRED]**

                The value for the filter key.

                Run the  DescribePatchProperties command to view lists of valid values for each key
                based on operating system type.

                - *(string) --*

        - **ComplianceLevel** *(string) --*

          A compliance severity level for all approved patches in a patch baseline. Valid compliance
          severity levels include the following: Unspecified, Critical, High, Medium, Low, and
          Informational.

        - **ApproveAfterDays** *(integer) --* **[REQUIRED]**

          The number of days after the release date of each patch matched by the rule that the patch
          is marked as approved in the patch baseline. For example, a value of ``7`` means that
          patches are approved seven days after they are released.

        - **EnableNonSecurity** *(boolean) --*

          For instances identified by the approval rule filters, enables a patch baseline to apply
          non-security updates available in the specified repository. The default value is 'false'.
          Applies to Linux instances only.
    """


_ClientUpdatePatchBaselineGlobalFiltersPatchFiltersTypeDef = TypedDict(
    "_ClientUpdatePatchBaselineGlobalFiltersPatchFiltersTypeDef",
    {"Key": str, "Values": List[str]},
)


class ClientUpdatePatchBaselineGlobalFiltersPatchFiltersTypeDef(
    _ClientUpdatePatchBaselineGlobalFiltersPatchFiltersTypeDef
):
    """
    Type definition for `ClientUpdatePatchBaselineGlobalFilters` `PatchFilters`

    Defines which patches should be included in a patch baseline.

    A patch filter consists of a key and a set of values. The filter key is a patch property. For
    example, the available filter keys for WINDOWS are PATCH_SET, PRODUCT, PRODUCT_FAMILY,
    CLASSIFICATION, and MSRC_SEVERITY. The filter values define a matching criterion for the
    patch property indicated by the key. For example, if the filter key is PRODUCT and the filter
    values are ["Office 2013", "Office 2016"], then the filter accepts all patches where product
    name is either "Office 2013" or "Office 2016". The filter values can be exact values for the
    patch property given as a key, or a wildcard (*), which matches all values.

    You can view lists of valid values for the patch properties by running the
    ``DescribePatchProperties`` command. For information about which patch properties can be used
    with each major operating system, see  DescribePatchProperties .

    - **Key** *(string) --* **[REQUIRED]**

      The key for the filter.

      Run the  DescribePatchProperties command to view lists of valid keys for each operating
      system type.

    - **Values** *(list) --* **[REQUIRED]**

      The value for the filter key.

      Run the  DescribePatchProperties command to view lists of valid values for each key based
      on operating system type.

      - *(string) --*
    """


_ClientUpdatePatchBaselineGlobalFiltersTypeDef = TypedDict(
    "_ClientUpdatePatchBaselineGlobalFiltersTypeDef",
    {"PatchFilters": List[ClientUpdatePatchBaselineGlobalFiltersPatchFiltersTypeDef]},
)


class ClientUpdatePatchBaselineGlobalFiltersTypeDef(
    _ClientUpdatePatchBaselineGlobalFiltersTypeDef
):
    """
    Type definition for `ClientUpdatePatchBaseline` `GlobalFilters`

    A set of global filters used to include patches in the baseline.

    - **PatchFilters** *(list) --* **[REQUIRED]**

      The set of patch filters that make up the group.

      - *(dict) --*

        Defines which patches should be included in a patch baseline.

        A patch filter consists of a key and a set of values. The filter key is a patch property. For
        example, the available filter keys for WINDOWS are PATCH_SET, PRODUCT, PRODUCT_FAMILY,
        CLASSIFICATION, and MSRC_SEVERITY. The filter values define a matching criterion for the
        patch property indicated by the key. For example, if the filter key is PRODUCT and the filter
        values are ["Office 2013", "Office 2016"], then the filter accepts all patches where product
        name is either "Office 2013" or "Office 2016". The filter values can be exact values for the
        patch property given as a key, or a wildcard (*), which matches all values.

        You can view lists of valid values for the patch properties by running the
        ``DescribePatchProperties`` command. For information about which patch properties can be used
        with each major operating system, see  DescribePatchProperties .

        - **Key** *(string) --* **[REQUIRED]**

          The key for the filter.

          Run the  DescribePatchProperties command to view lists of valid keys for each operating
          system type.

        - **Values** *(list) --* **[REQUIRED]**

          The value for the filter key.

          Run the  DescribePatchProperties command to view lists of valid values for each key based
          on operating system type.

          - *(string) --*
    """


_ClientUpdatePatchBaselineResponseApprovalRulesPatchRulesPatchFilterGroupPatchFiltersTypeDef = TypedDict(
    "_ClientUpdatePatchBaselineResponseApprovalRulesPatchRulesPatchFilterGroupPatchFiltersTypeDef",
    {"Key": str, "Values": List[str]},
    total=False,
)


class ClientUpdatePatchBaselineResponseApprovalRulesPatchRulesPatchFilterGroupPatchFiltersTypeDef(
    _ClientUpdatePatchBaselineResponseApprovalRulesPatchRulesPatchFilterGroupPatchFiltersTypeDef
):
    """
    Type definition for `ClientUpdatePatchBaselineResponseApprovalRulesPatchRulesPatchFilterGroup` `PatchFilters`

    Defines which patches should be included in a patch baseline.

    A patch filter consists of a key and a set of values. The filter key is a patch
    property. For example, the available filter keys for WINDOWS are PATCH_SET,
    PRODUCT, PRODUCT_FAMILY, CLASSIFICATION, and MSRC_SEVERITY. The filter values
    define a matching criterion for the patch property indicated by the key. For
    example, if the filter key is PRODUCT and the filter values are ["Office 2013",
    "Office 2016"], then the filter accepts all patches where product name is either
    "Office 2013" or "Office 2016". The filter values can be exact values for the patch
    property given as a key, or a wildcard (*), which matches all values.

    You can view lists of valid values for the patch properties by running the
    ``DescribePatchProperties`` command. For information about which patch properties
    can be used with each major operating system, see  DescribePatchProperties .

    - **Key** *(string) --*

      The key for the filter.

      Run the  DescribePatchProperties command to view lists of valid keys for each
      operating system type.

    - **Values** *(list) --*

      The value for the filter key.

      Run the  DescribePatchProperties command to view lists of valid values for each
      key based on operating system type.

      - *(string) --*
    """


_ClientUpdatePatchBaselineResponseApprovalRulesPatchRulesPatchFilterGroupTypeDef = TypedDict(
    "_ClientUpdatePatchBaselineResponseApprovalRulesPatchRulesPatchFilterGroupTypeDef",
    {
        "PatchFilters": List[
            ClientUpdatePatchBaselineResponseApprovalRulesPatchRulesPatchFilterGroupPatchFiltersTypeDef
        ]
    },
    total=False,
)


class ClientUpdatePatchBaselineResponseApprovalRulesPatchRulesPatchFilterGroupTypeDef(
    _ClientUpdatePatchBaselineResponseApprovalRulesPatchRulesPatchFilterGroupTypeDef
):
    """
    Type definition for `ClientUpdatePatchBaselineResponseApprovalRulesPatchRules` `PatchFilterGroup`

    The patch filter group that defines the criteria for the rule.

    - **PatchFilters** *(list) --*

      The set of patch filters that make up the group.

      - *(dict) --*

        Defines which patches should be included in a patch baseline.

        A patch filter consists of a key and a set of values. The filter key is a patch
        property. For example, the available filter keys for WINDOWS are PATCH_SET,
        PRODUCT, PRODUCT_FAMILY, CLASSIFICATION, and MSRC_SEVERITY. The filter values
        define a matching criterion for the patch property indicated by the key. For
        example, if the filter key is PRODUCT and the filter values are ["Office 2013",
        "Office 2016"], then the filter accepts all patches where product name is either
        "Office 2013" or "Office 2016". The filter values can be exact values for the patch
        property given as a key, or a wildcard (*), which matches all values.

        You can view lists of valid values for the patch properties by running the
        ``DescribePatchProperties`` command. For information about which patch properties
        can be used with each major operating system, see  DescribePatchProperties .

        - **Key** *(string) --*

          The key for the filter.

          Run the  DescribePatchProperties command to view lists of valid keys for each
          operating system type.

        - **Values** *(list) --*

          The value for the filter key.

          Run the  DescribePatchProperties command to view lists of valid values for each
          key based on operating system type.

          - *(string) --*
    """


_ClientUpdatePatchBaselineResponseApprovalRulesPatchRulesTypeDef = TypedDict(
    "_ClientUpdatePatchBaselineResponseApprovalRulesPatchRulesTypeDef",
    {
        "PatchFilterGroup": ClientUpdatePatchBaselineResponseApprovalRulesPatchRulesPatchFilterGroupTypeDef,
        "ComplianceLevel": str,
        "ApproveAfterDays": int,
        "EnableNonSecurity": bool,
    },
    total=False,
)


class ClientUpdatePatchBaselineResponseApprovalRulesPatchRulesTypeDef(
    _ClientUpdatePatchBaselineResponseApprovalRulesPatchRulesTypeDef
):
    """
    Type definition for `ClientUpdatePatchBaselineResponseApprovalRules` `PatchRules`

    Defines an approval rule for a patch baseline.

    - **PatchFilterGroup** *(dict) --*

      The patch filter group that defines the criteria for the rule.

      - **PatchFilters** *(list) --*

        The set of patch filters that make up the group.

        - *(dict) --*

          Defines which patches should be included in a patch baseline.

          A patch filter consists of a key and a set of values. The filter key is a patch
          property. For example, the available filter keys for WINDOWS are PATCH_SET,
          PRODUCT, PRODUCT_FAMILY, CLASSIFICATION, and MSRC_SEVERITY. The filter values
          define a matching criterion for the patch property indicated by the key. For
          example, if the filter key is PRODUCT and the filter values are ["Office 2013",
          "Office 2016"], then the filter accepts all patches where product name is either
          "Office 2013" or "Office 2016". The filter values can be exact values for the patch
          property given as a key, or a wildcard (*), which matches all values.

          You can view lists of valid values for the patch properties by running the
          ``DescribePatchProperties`` command. For information about which patch properties
          can be used with each major operating system, see  DescribePatchProperties .

          - **Key** *(string) --*

            The key for the filter.

            Run the  DescribePatchProperties command to view lists of valid keys for each
            operating system type.

          - **Values** *(list) --*

            The value for the filter key.

            Run the  DescribePatchProperties command to view lists of valid values for each
            key based on operating system type.

            - *(string) --*

    - **ComplianceLevel** *(string) --*

      A compliance severity level for all approved patches in a patch baseline. Valid
      compliance severity levels include the following: Unspecified, Critical, High, Medium,
      Low, and Informational.

    - **ApproveAfterDays** *(integer) --*

      The number of days after the release date of each patch matched by the rule that the
      patch is marked as approved in the patch baseline. For example, a value of ``7`` means
      that patches are approved seven days after they are released.

    - **EnableNonSecurity** *(boolean) --*

      For instances identified by the approval rule filters, enables a patch baseline to
      apply non-security updates available in the specified repository. The default value is
      'false'. Applies to Linux instances only.
    """


_ClientUpdatePatchBaselineResponseApprovalRulesTypeDef = TypedDict(
    "_ClientUpdatePatchBaselineResponseApprovalRulesTypeDef",
    {
        "PatchRules": List[
            ClientUpdatePatchBaselineResponseApprovalRulesPatchRulesTypeDef
        ]
    },
    total=False,
)


class ClientUpdatePatchBaselineResponseApprovalRulesTypeDef(
    _ClientUpdatePatchBaselineResponseApprovalRulesTypeDef
):
    """
    Type definition for `ClientUpdatePatchBaselineResponse` `ApprovalRules`

    A set of rules used to include patches in the baseline.

    - **PatchRules** *(list) --*

      The rules that make up the rule group.

      - *(dict) --*

        Defines an approval rule for a patch baseline.

        - **PatchFilterGroup** *(dict) --*

          The patch filter group that defines the criteria for the rule.

          - **PatchFilters** *(list) --*

            The set of patch filters that make up the group.

            - *(dict) --*

              Defines which patches should be included in a patch baseline.

              A patch filter consists of a key and a set of values. The filter key is a patch
              property. For example, the available filter keys for WINDOWS are PATCH_SET,
              PRODUCT, PRODUCT_FAMILY, CLASSIFICATION, and MSRC_SEVERITY. The filter values
              define a matching criterion for the patch property indicated by the key. For
              example, if the filter key is PRODUCT and the filter values are ["Office 2013",
              "Office 2016"], then the filter accepts all patches where product name is either
              "Office 2013" or "Office 2016". The filter values can be exact values for the patch
              property given as a key, or a wildcard (*), which matches all values.

              You can view lists of valid values for the patch properties by running the
              ``DescribePatchProperties`` command. For information about which patch properties
              can be used with each major operating system, see  DescribePatchProperties .

              - **Key** *(string) --*

                The key for the filter.

                Run the  DescribePatchProperties command to view lists of valid keys for each
                operating system type.

              - **Values** *(list) --*

                The value for the filter key.

                Run the  DescribePatchProperties command to view lists of valid values for each
                key based on operating system type.

                - *(string) --*

        - **ComplianceLevel** *(string) --*

          A compliance severity level for all approved patches in a patch baseline. Valid
          compliance severity levels include the following: Unspecified, Critical, High, Medium,
          Low, and Informational.

        - **ApproveAfterDays** *(integer) --*

          The number of days after the release date of each patch matched by the rule that the
          patch is marked as approved in the patch baseline. For example, a value of ``7`` means
          that patches are approved seven days after they are released.

        - **EnableNonSecurity** *(boolean) --*

          For instances identified by the approval rule filters, enables a patch baseline to
          apply non-security updates available in the specified repository. The default value is
          'false'. Applies to Linux instances only.
    """


_ClientUpdatePatchBaselineResponseGlobalFiltersPatchFiltersTypeDef = TypedDict(
    "_ClientUpdatePatchBaselineResponseGlobalFiltersPatchFiltersTypeDef",
    {"Key": str, "Values": List[str]},
    total=False,
)


class ClientUpdatePatchBaselineResponseGlobalFiltersPatchFiltersTypeDef(
    _ClientUpdatePatchBaselineResponseGlobalFiltersPatchFiltersTypeDef
):
    """
    Type definition for `ClientUpdatePatchBaselineResponseGlobalFilters` `PatchFilters`

    Defines which patches should be included in a patch baseline.

    A patch filter consists of a key and a set of values. The filter key is a patch property.
    For example, the available filter keys for WINDOWS are PATCH_SET, PRODUCT,
    PRODUCT_FAMILY, CLASSIFICATION, and MSRC_SEVERITY. The filter values define a matching
    criterion for the patch property indicated by the key. For example, if the filter key is
    PRODUCT and the filter values are ["Office 2013", "Office 2016"], then the filter accepts
    all patches where product name is either "Office 2013" or "Office 2016". The filter
    values can be exact values for the patch property given as a key, or a wildcard (*),
    which matches all values.

    You can view lists of valid values for the patch properties by running the
    ``DescribePatchProperties`` command. For information about which patch properties can be
    used with each major operating system, see  DescribePatchProperties .

    - **Key** *(string) --*

      The key for the filter.

      Run the  DescribePatchProperties command to view lists of valid keys for each operating
      system type.

    - **Values** *(list) --*

      The value for the filter key.

      Run the  DescribePatchProperties command to view lists of valid values for each key
      based on operating system type.

      - *(string) --*
    """


_ClientUpdatePatchBaselineResponseGlobalFiltersTypeDef = TypedDict(
    "_ClientUpdatePatchBaselineResponseGlobalFiltersTypeDef",
    {
        "PatchFilters": List[
            ClientUpdatePatchBaselineResponseGlobalFiltersPatchFiltersTypeDef
        ]
    },
    total=False,
)


class ClientUpdatePatchBaselineResponseGlobalFiltersTypeDef(
    _ClientUpdatePatchBaselineResponseGlobalFiltersTypeDef
):
    """
    Type definition for `ClientUpdatePatchBaselineResponse` `GlobalFilters`

    A set of global filters used to exclude patches from the baseline.

    - **PatchFilters** *(list) --*

      The set of patch filters that make up the group.

      - *(dict) --*

        Defines which patches should be included in a patch baseline.

        A patch filter consists of a key and a set of values. The filter key is a patch property.
        For example, the available filter keys for WINDOWS are PATCH_SET, PRODUCT,
        PRODUCT_FAMILY, CLASSIFICATION, and MSRC_SEVERITY. The filter values define a matching
        criterion for the patch property indicated by the key. For example, if the filter key is
        PRODUCT and the filter values are ["Office 2013", "Office 2016"], then the filter accepts
        all patches where product name is either "Office 2013" or "Office 2016". The filter
        values can be exact values for the patch property given as a key, or a wildcard (*),
        which matches all values.

        You can view lists of valid values for the patch properties by running the
        ``DescribePatchProperties`` command. For information about which patch properties can be
        used with each major operating system, see  DescribePatchProperties .

        - **Key** *(string) --*

          The key for the filter.

          Run the  DescribePatchProperties command to view lists of valid keys for each operating
          system type.

        - **Values** *(list) --*

          The value for the filter key.

          Run the  DescribePatchProperties command to view lists of valid values for each key
          based on operating system type.

          - *(string) --*
    """


_ClientUpdatePatchBaselineResponseSourcesTypeDef = TypedDict(
    "_ClientUpdatePatchBaselineResponseSourcesTypeDef",
    {"Name": str, "Products": List[str], "Configuration": str},
    total=False,
)


class ClientUpdatePatchBaselineResponseSourcesTypeDef(
    _ClientUpdatePatchBaselineResponseSourcesTypeDef
):
    """
    Type definition for `ClientUpdatePatchBaselineResponse` `Sources`

    Information about the patches to use to update the instances, including target operating
    systems and source repository. Applies to Linux instances only.

    - **Name** *(string) --*

      The name specified to identify the patch source.

    - **Products** *(list) --*

      The specific operating system versions a patch repository applies to, such as
      "Ubuntu16.04", "AmazonLinux2016.09", "RedhatEnterpriseLinux7.2" or "Suse12.7". For lists
      of supported product values, see  PatchFilter .

      - *(string) --*

    - **Configuration** *(string) --*

      The value of the yum repo configuration. For example:

       ``[main]``

       ``cachedir=/var/cache/yum/$basesearch$releasever``

       ``keepcache=0``

       ``debuglevel=2``
    """


_ClientUpdatePatchBaselineResponseTypeDef = TypedDict(
    "_ClientUpdatePatchBaselineResponseTypeDef",
    {
        "BaselineId": str,
        "Name": str,
        "OperatingSystem": str,
        "GlobalFilters": ClientUpdatePatchBaselineResponseGlobalFiltersTypeDef,
        "ApprovalRules": ClientUpdatePatchBaselineResponseApprovalRulesTypeDef,
        "ApprovedPatches": List[str],
        "ApprovedPatchesComplianceLevel": str,
        "ApprovedPatchesEnableNonSecurity": bool,
        "RejectedPatches": List[str],
        "RejectedPatchesAction": str,
        "CreatedDate": datetime,
        "ModifiedDate": datetime,
        "Description": str,
        "Sources": List[ClientUpdatePatchBaselineResponseSourcesTypeDef],
    },
    total=False,
)


class ClientUpdatePatchBaselineResponseTypeDef(
    _ClientUpdatePatchBaselineResponseTypeDef
):
    """
    Type definition for `ClientUpdatePatchBaseline` `Response`

    - **BaselineId** *(string) --*

      The ID of the deleted patch baseline.

    - **Name** *(string) --*

      The name of the patch baseline.

    - **OperatingSystem** *(string) --*

      The operating system rule used by the updated patch baseline.

    - **GlobalFilters** *(dict) --*

      A set of global filters used to exclude patches from the baseline.

      - **PatchFilters** *(list) --*

        The set of patch filters that make up the group.

        - *(dict) --*

          Defines which patches should be included in a patch baseline.

          A patch filter consists of a key and a set of values. The filter key is a patch property.
          For example, the available filter keys for WINDOWS are PATCH_SET, PRODUCT,
          PRODUCT_FAMILY, CLASSIFICATION, and MSRC_SEVERITY. The filter values define a matching
          criterion for the patch property indicated by the key. For example, if the filter key is
          PRODUCT and the filter values are ["Office 2013", "Office 2016"], then the filter accepts
          all patches where product name is either "Office 2013" or "Office 2016". The filter
          values can be exact values for the patch property given as a key, or a wildcard (*),
          which matches all values.

          You can view lists of valid values for the patch properties by running the
          ``DescribePatchProperties`` command. For information about which patch properties can be
          used with each major operating system, see  DescribePatchProperties .

          - **Key** *(string) --*

            The key for the filter.

            Run the  DescribePatchProperties command to view lists of valid keys for each operating
            system type.

          - **Values** *(list) --*

            The value for the filter key.

            Run the  DescribePatchProperties command to view lists of valid values for each key
            based on operating system type.

            - *(string) --*

    - **ApprovalRules** *(dict) --*

      A set of rules used to include patches in the baseline.

      - **PatchRules** *(list) --*

        The rules that make up the rule group.

        - *(dict) --*

          Defines an approval rule for a patch baseline.

          - **PatchFilterGroup** *(dict) --*

            The patch filter group that defines the criteria for the rule.

            - **PatchFilters** *(list) --*

              The set of patch filters that make up the group.

              - *(dict) --*

                Defines which patches should be included in a patch baseline.

                A patch filter consists of a key and a set of values. The filter key is a patch
                property. For example, the available filter keys for WINDOWS are PATCH_SET,
                PRODUCT, PRODUCT_FAMILY, CLASSIFICATION, and MSRC_SEVERITY. The filter values
                define a matching criterion for the patch property indicated by the key. For
                example, if the filter key is PRODUCT and the filter values are ["Office 2013",
                "Office 2016"], then the filter accepts all patches where product name is either
                "Office 2013" or "Office 2016". The filter values can be exact values for the patch
                property given as a key, or a wildcard (*), which matches all values.

                You can view lists of valid values for the patch properties by running the
                ``DescribePatchProperties`` command. For information about which patch properties
                can be used with each major operating system, see  DescribePatchProperties .

                - **Key** *(string) --*

                  The key for the filter.

                  Run the  DescribePatchProperties command to view lists of valid keys for each
                  operating system type.

                - **Values** *(list) --*

                  The value for the filter key.

                  Run the  DescribePatchProperties command to view lists of valid values for each
                  key based on operating system type.

                  - *(string) --*

          - **ComplianceLevel** *(string) --*

            A compliance severity level for all approved patches in a patch baseline. Valid
            compliance severity levels include the following: Unspecified, Critical, High, Medium,
            Low, and Informational.

          - **ApproveAfterDays** *(integer) --*

            The number of days after the release date of each patch matched by the rule that the
            patch is marked as approved in the patch baseline. For example, a value of ``7`` means
            that patches are approved seven days after they are released.

          - **EnableNonSecurity** *(boolean) --*

            For instances identified by the approval rule filters, enables a patch baseline to
            apply non-security updates available in the specified repository. The default value is
            'false'. Applies to Linux instances only.

    - **ApprovedPatches** *(list) --*

      A list of explicitly approved patches for the baseline.

      - *(string) --*

    - **ApprovedPatchesComplianceLevel** *(string) --*

      The compliance severity level assigned to the patch baseline after the update completed.

    - **ApprovedPatchesEnableNonSecurity** *(boolean) --*

      Indicates whether the list of approved patches includes non-security updates that should be
      applied to the instances. The default value is 'false'. Applies to Linux instances only.

    - **RejectedPatches** *(list) --*

      A list of explicitly rejected patches for the baseline.

      - *(string) --*

    - **RejectedPatchesAction** *(string) --*

      The action specified to take on patches included in the RejectedPatches list. A patch can be
      allowed only if it is a dependency of another package, or blocked entirely along with
      packages that include it as a dependency.

    - **CreatedDate** *(datetime) --*

      The date when the patch baseline was created.

    - **ModifiedDate** *(datetime) --*

      The date when the patch baseline was last modified.

    - **Description** *(string) --*

      A description of the Patch Baseline.

    - **Sources** *(list) --*

      Information about the patches to use to update the instances, including target operating
      systems and source repositories. Applies to Linux instances only.

      - *(dict) --*

        Information about the patches to use to update the instances, including target operating
        systems and source repository. Applies to Linux instances only.

        - **Name** *(string) --*

          The name specified to identify the patch source.

        - **Products** *(list) --*

          The specific operating system versions a patch repository applies to, such as
          "Ubuntu16.04", "AmazonLinux2016.09", "RedhatEnterpriseLinux7.2" or "Suse12.7". For lists
          of supported product values, see  PatchFilter .

          - *(string) --*

        - **Configuration** *(string) --*

          The value of the yum repo configuration. For example:

           ``[main]``

           ``cachedir=/var/cache/yum/$basesearch$releasever``

           ``keepcache=0``

           ``debuglevel=2``
    """


_ClientUpdatePatchBaselineSourcesTypeDef = TypedDict(
    "_ClientUpdatePatchBaselineSourcesTypeDef",
    {"Name": str, "Products": List[str], "Configuration": str},
)


class ClientUpdatePatchBaselineSourcesTypeDef(_ClientUpdatePatchBaselineSourcesTypeDef):
    """
    Type definition for `ClientUpdatePatchBaseline` `Sources`

    Information about the patches to use to update the instances, including target operating
    systems and source repository. Applies to Linux instances only.

    - **Name** *(string) --* **[REQUIRED]**

      The name specified to identify the patch source.

    - **Products** *(list) --* **[REQUIRED]**

      The specific operating system versions a patch repository applies to, such as "Ubuntu16.04",
      "AmazonLinux2016.09", "RedhatEnterpriseLinux7.2" or "Suse12.7". For lists of supported
      product values, see  PatchFilter .

      - *(string) --*

    - **Configuration** *(string) --* **[REQUIRED]**

      The value of the yum repo configuration. For example:

       ``[main]``

       ``cachedir=/var/cache/yum/$basesearch$releasever``

       ``keepcache=0``

       ``debuglevel=2``
    """


_DescribeActivationsPaginateFiltersTypeDef = TypedDict(
    "_DescribeActivationsPaginateFiltersTypeDef",
    {"FilterKey": str, "FilterValues": List[str]},
    total=False,
)


class DescribeActivationsPaginateFiltersTypeDef(
    _DescribeActivationsPaginateFiltersTypeDef
):
    """
    Type definition for `DescribeActivationsPaginate` `Filters`

    Filter for the DescribeActivation API.

    - **FilterKey** *(string) --*

      The name of the filter.

    - **FilterValues** *(list) --*

      The filter values.

      - *(string) --*
    """


_DescribeActivationsPaginatePaginationConfigTypeDef = TypedDict(
    "_DescribeActivationsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class DescribeActivationsPaginatePaginationConfigTypeDef(
    _DescribeActivationsPaginatePaginationConfigTypeDef
):
    """
    Type definition for `DescribeActivationsPaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_DescribeActivationsPaginateResponseActivationListTagsTypeDef = TypedDict(
    "_DescribeActivationsPaginateResponseActivationListTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)


class DescribeActivationsPaginateResponseActivationListTagsTypeDef(
    _DescribeActivationsPaginateResponseActivationListTagsTypeDef
):
    """
    Type definition for `DescribeActivationsPaginateResponseActivationList` `Tags`

    Metadata that you assign to your AWS resources. Tags enable you to categorize your
    resources in different ways, for example, by purpose, owner, or environment. In Systems
    Manager, you can apply tags to documents, managed instances, maintenance windows,
    Parameter Store parameters, and patch baselines.

    - **Key** *(string) --*

      The name of the tag.

    - **Value** *(string) --*

      The value of the tag.
    """


_DescribeActivationsPaginateResponseActivationListTypeDef = TypedDict(
    "_DescribeActivationsPaginateResponseActivationListTypeDef",
    {
        "ActivationId": str,
        "Description": str,
        "DefaultInstanceName": str,
        "IamRole": str,
        "RegistrationLimit": int,
        "RegistrationsCount": int,
        "ExpirationDate": datetime,
        "Expired": bool,
        "CreatedDate": datetime,
        "Tags": List[DescribeActivationsPaginateResponseActivationListTagsTypeDef],
    },
    total=False,
)


class DescribeActivationsPaginateResponseActivationListTypeDef(
    _DescribeActivationsPaginateResponseActivationListTypeDef
):
    """
    Type definition for `DescribeActivationsPaginateResponse` `ActivationList`

    An activation registers one or more on-premises servers or virtual machines (VMs) with AWS
    so that you can configure those servers or VMs using Run Command. A server or VM that has
    been registered with AWS is called a managed instance.

    - **ActivationId** *(string) --*

      The ID created by Systems Manager when you submitted the activation.

    - **Description** *(string) --*

      A user defined description of the activation.

    - **DefaultInstanceName** *(string) --*

      A name for the managed instance when it is created.

    - **IamRole** *(string) --*

      The Amazon Identity and Access Management (IAM) role to assign to the managed instance.

    - **RegistrationLimit** *(integer) --*

      The maximum number of managed instances that can be registered using this activation.

    - **RegistrationsCount** *(integer) --*

      The number of managed instances already registered with this activation.

    - **ExpirationDate** *(datetime) --*

      The date when this activation can no longer be used to register managed instances.

    - **Expired** *(boolean) --*

      Whether or not the activation is expired.

    - **CreatedDate** *(datetime) --*

      The date the activation was created.

    - **Tags** *(list) --*

      Tags assigned to the activation.

      - *(dict) --*

        Metadata that you assign to your AWS resources. Tags enable you to categorize your
        resources in different ways, for example, by purpose, owner, or environment. In Systems
        Manager, you can apply tags to documents, managed instances, maintenance windows,
        Parameter Store parameters, and patch baselines.

        - **Key** *(string) --*

          The name of the tag.

        - **Value** *(string) --*

          The value of the tag.
    """


_DescribeActivationsPaginateResponseTypeDef = TypedDict(
    "_DescribeActivationsPaginateResponseTypeDef",
    {"ActivationList": List[DescribeActivationsPaginateResponseActivationListTypeDef]},
    total=False,
)


class DescribeActivationsPaginateResponseTypeDef(
    _DescribeActivationsPaginateResponseTypeDef
):
    """
    Type definition for `DescribeActivationsPaginate` `Response`

    - **ActivationList** *(list) --*

      A list of activations for your AWS account.

      - *(dict) --*

        An activation registers one or more on-premises servers or virtual machines (VMs) with AWS
        so that you can configure those servers or VMs using Run Command. A server or VM that has
        been registered with AWS is called a managed instance.

        - **ActivationId** *(string) --*

          The ID created by Systems Manager when you submitted the activation.

        - **Description** *(string) --*

          A user defined description of the activation.

        - **DefaultInstanceName** *(string) --*

          A name for the managed instance when it is created.

        - **IamRole** *(string) --*

          The Amazon Identity and Access Management (IAM) role to assign to the managed instance.

        - **RegistrationLimit** *(integer) --*

          The maximum number of managed instances that can be registered using this activation.

        - **RegistrationsCount** *(integer) --*

          The number of managed instances already registered with this activation.

        - **ExpirationDate** *(datetime) --*

          The date when this activation can no longer be used to register managed instances.

        - **Expired** *(boolean) --*

          Whether or not the activation is expired.

        - **CreatedDate** *(datetime) --*

          The date the activation was created.

        - **Tags** *(list) --*

          Tags assigned to the activation.

          - *(dict) --*

            Metadata that you assign to your AWS resources. Tags enable you to categorize your
            resources in different ways, for example, by purpose, owner, or environment. In Systems
            Manager, you can apply tags to documents, managed instances, maintenance windows,
            Parameter Store parameters, and patch baselines.

            - **Key** *(string) --*

              The name of the tag.

            - **Value** *(string) --*

              The value of the tag.
    """


_DescribeAssociationExecutionTargetsPaginateFiltersTypeDef = TypedDict(
    "_DescribeAssociationExecutionTargetsPaginateFiltersTypeDef",
    {"Key": str, "Value": str},
)


class DescribeAssociationExecutionTargetsPaginateFiltersTypeDef(
    _DescribeAssociationExecutionTargetsPaginateFiltersTypeDef
):
    """
    Type definition for `DescribeAssociationExecutionTargetsPaginate` `Filters`

    Filters for the association execution.

    - **Key** *(string) --* **[REQUIRED]**

      The key value used in the request.

    - **Value** *(string) --* **[REQUIRED]**

      The value specified for the key.
    """


_DescribeAssociationExecutionTargetsPaginatePaginationConfigTypeDef = TypedDict(
    "_DescribeAssociationExecutionTargetsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class DescribeAssociationExecutionTargetsPaginatePaginationConfigTypeDef(
    _DescribeAssociationExecutionTargetsPaginatePaginationConfigTypeDef
):
    """
    Type definition for `DescribeAssociationExecutionTargetsPaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_DescribeAssociationExecutionTargetsPaginateResponseAssociationExecutionTargetsOutputSourceTypeDef = TypedDict(
    "_DescribeAssociationExecutionTargetsPaginateResponseAssociationExecutionTargetsOutputSourceTypeDef",
    {"OutputSourceId": str, "OutputSourceType": str},
    total=False,
)


class DescribeAssociationExecutionTargetsPaginateResponseAssociationExecutionTargetsOutputSourceTypeDef(
    _DescribeAssociationExecutionTargetsPaginateResponseAssociationExecutionTargetsOutputSourceTypeDef
):
    """
    Type definition for `DescribeAssociationExecutionTargetsPaginateResponseAssociationExecutionTargets` `OutputSource`

    The location where the association details are saved.

    - **OutputSourceId** *(string) --*

      The ID of the output source, for example the URL of an Amazon S3 bucket.

    - **OutputSourceType** *(string) --*

      The type of source where the association execution details are stored, for example,
      Amazon S3.
    """


_DescribeAssociationExecutionTargetsPaginateResponseAssociationExecutionTargetsTypeDef = TypedDict(
    "_DescribeAssociationExecutionTargetsPaginateResponseAssociationExecutionTargetsTypeDef",
    {
        "AssociationId": str,
        "AssociationVersion": str,
        "ExecutionId": str,
        "ResourceId": str,
        "ResourceType": str,
        "Status": str,
        "DetailedStatus": str,
        "LastExecutionDate": datetime,
        "OutputSource": DescribeAssociationExecutionTargetsPaginateResponseAssociationExecutionTargetsOutputSourceTypeDef,
    },
    total=False,
)


class DescribeAssociationExecutionTargetsPaginateResponseAssociationExecutionTargetsTypeDef(
    _DescribeAssociationExecutionTargetsPaginateResponseAssociationExecutionTargetsTypeDef
):
    """
    Type definition for `DescribeAssociationExecutionTargetsPaginateResponse` `AssociationExecutionTargets`

    Includes information about the specified association execution.

    - **AssociationId** *(string) --*

      The association ID.

    - **AssociationVersion** *(string) --*

      The association version.

    - **ExecutionId** *(string) --*

      The execution ID.

    - **ResourceId** *(string) --*

      The resource ID, for example, the instance ID where the association ran.

    - **ResourceType** *(string) --*

      The resource type, for example, instance.

    - **Status** *(string) --*

      The association execution status.

    - **DetailedStatus** *(string) --*

      Detailed information about the execution status.

    - **LastExecutionDate** *(datetime) --*

      The date of the last execution.

    - **OutputSource** *(dict) --*

      The location where the association details are saved.

      - **OutputSourceId** *(string) --*

        The ID of the output source, for example the URL of an Amazon S3 bucket.

      - **OutputSourceType** *(string) --*

        The type of source where the association execution details are stored, for example,
        Amazon S3.
    """


_DescribeAssociationExecutionTargetsPaginateResponseTypeDef = TypedDict(
    "_DescribeAssociationExecutionTargetsPaginateResponseTypeDef",
    {
        "AssociationExecutionTargets": List[
            DescribeAssociationExecutionTargetsPaginateResponseAssociationExecutionTargetsTypeDef
        ]
    },
    total=False,
)


class DescribeAssociationExecutionTargetsPaginateResponseTypeDef(
    _DescribeAssociationExecutionTargetsPaginateResponseTypeDef
):
    """
    Type definition for `DescribeAssociationExecutionTargetsPaginate` `Response`

    - **AssociationExecutionTargets** *(list) --*

      Information about the execution.

      - *(dict) --*

        Includes information about the specified association execution.

        - **AssociationId** *(string) --*

          The association ID.

        - **AssociationVersion** *(string) --*

          The association version.

        - **ExecutionId** *(string) --*

          The execution ID.

        - **ResourceId** *(string) --*

          The resource ID, for example, the instance ID where the association ran.

        - **ResourceType** *(string) --*

          The resource type, for example, instance.

        - **Status** *(string) --*

          The association execution status.

        - **DetailedStatus** *(string) --*

          Detailed information about the execution status.

        - **LastExecutionDate** *(datetime) --*

          The date of the last execution.

        - **OutputSource** *(dict) --*

          The location where the association details are saved.

          - **OutputSourceId** *(string) --*

            The ID of the output source, for example the URL of an Amazon S3 bucket.

          - **OutputSourceType** *(string) --*

            The type of source where the association execution details are stored, for example,
            Amazon S3.
    """


_DescribeAssociationExecutionsPaginateFiltersTypeDef = TypedDict(
    "_DescribeAssociationExecutionsPaginateFiltersTypeDef",
    {"Key": str, "Value": str, "Type": str},
)


class DescribeAssociationExecutionsPaginateFiltersTypeDef(
    _DescribeAssociationExecutionsPaginateFiltersTypeDef
):
    """
    Type definition for `DescribeAssociationExecutionsPaginate` `Filters`

    Filters used in the request.

    - **Key** *(string) --* **[REQUIRED]**

      The key value used in the request.

    - **Value** *(string) --* **[REQUIRED]**

      The value specified for the key.

    - **Type** *(string) --* **[REQUIRED]**

      The filter type specified in the request.
    """


_DescribeAssociationExecutionsPaginatePaginationConfigTypeDef = TypedDict(
    "_DescribeAssociationExecutionsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class DescribeAssociationExecutionsPaginatePaginationConfigTypeDef(
    _DescribeAssociationExecutionsPaginatePaginationConfigTypeDef
):
    """
    Type definition for `DescribeAssociationExecutionsPaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_DescribeAssociationExecutionsPaginateResponseAssociationExecutionsTypeDef = TypedDict(
    "_DescribeAssociationExecutionsPaginateResponseAssociationExecutionsTypeDef",
    {
        "AssociationId": str,
        "AssociationVersion": str,
        "ExecutionId": str,
        "Status": str,
        "DetailedStatus": str,
        "CreatedTime": datetime,
        "LastExecutionDate": datetime,
        "ResourceCountByStatus": str,
    },
    total=False,
)


class DescribeAssociationExecutionsPaginateResponseAssociationExecutionsTypeDef(
    _DescribeAssociationExecutionsPaginateResponseAssociationExecutionsTypeDef
):
    """
    Type definition for `DescribeAssociationExecutionsPaginateResponse` `AssociationExecutions`

    Includes information about the specified association.

    - **AssociationId** *(string) --*

      The association ID.

    - **AssociationVersion** *(string) --*

      The association version.

    - **ExecutionId** *(string) --*

      The execution ID for the association.

    - **Status** *(string) --*

      The status of the association execution.

    - **DetailedStatus** *(string) --*

      Detailed status information about the execution.

    - **CreatedTime** *(datetime) --*

      The time the execution started.

    - **LastExecutionDate** *(datetime) --*

      The date of the last execution.

    - **ResourceCountByStatus** *(string) --*

      An aggregate status of the resources in the execution based on the status type.
    """


_DescribeAssociationExecutionsPaginateResponseTypeDef = TypedDict(
    "_DescribeAssociationExecutionsPaginateResponseTypeDef",
    {
        "AssociationExecutions": List[
            DescribeAssociationExecutionsPaginateResponseAssociationExecutionsTypeDef
        ]
    },
    total=False,
)


class DescribeAssociationExecutionsPaginateResponseTypeDef(
    _DescribeAssociationExecutionsPaginateResponseTypeDef
):
    """
    Type definition for `DescribeAssociationExecutionsPaginate` `Response`

    - **AssociationExecutions** *(list) --*

      A list of the executions for the specified association ID.

      - *(dict) --*

        Includes information about the specified association.

        - **AssociationId** *(string) --*

          The association ID.

        - **AssociationVersion** *(string) --*

          The association version.

        - **ExecutionId** *(string) --*

          The execution ID for the association.

        - **Status** *(string) --*

          The status of the association execution.

        - **DetailedStatus** *(string) --*

          Detailed status information about the execution.

        - **CreatedTime** *(datetime) --*

          The time the execution started.

        - **LastExecutionDate** *(datetime) --*

          The date of the last execution.

        - **ResourceCountByStatus** *(string) --*

          An aggregate status of the resources in the execution based on the status type.
    """


_DescribeAutomationExecutionsPaginateFiltersTypeDef = TypedDict(
    "_DescribeAutomationExecutionsPaginateFiltersTypeDef",
    {"Key": str, "Values": List[str]},
)


class DescribeAutomationExecutionsPaginateFiltersTypeDef(
    _DescribeAutomationExecutionsPaginateFiltersTypeDef
):
    """
    Type definition for `DescribeAutomationExecutionsPaginate` `Filters`

    A filter used to match specific automation executions. This is used to limit the scope of
    Automation execution information returned.

    - **Key** *(string) --* **[REQUIRED]**

      One or more keys to limit the results. Valid filter keys include the following:
      DocumentNamePrefix, ExecutionStatus, ExecutionId, ParentExecutionId, CurrentAction,
      StartTimeBefore, StartTimeAfter.

    - **Values** *(list) --* **[REQUIRED]**

      The values used to limit the execution information associated with the filter's key.

      - *(string) --*
    """


_DescribeAutomationExecutionsPaginatePaginationConfigTypeDef = TypedDict(
    "_DescribeAutomationExecutionsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class DescribeAutomationExecutionsPaginatePaginationConfigTypeDef(
    _DescribeAutomationExecutionsPaginatePaginationConfigTypeDef
):
    """
    Type definition for `DescribeAutomationExecutionsPaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_DescribeAutomationExecutionsPaginateResponseAutomationExecutionMetadataListResolvedTargetsTypeDef = TypedDict(
    "_DescribeAutomationExecutionsPaginateResponseAutomationExecutionMetadataListResolvedTargetsTypeDef",
    {"ParameterValues": List[str], "Truncated": bool},
    total=False,
)


class DescribeAutomationExecutionsPaginateResponseAutomationExecutionMetadataListResolvedTargetsTypeDef(
    _DescribeAutomationExecutionsPaginateResponseAutomationExecutionMetadataListResolvedTargetsTypeDef
):
    """
    Type definition for `DescribeAutomationExecutionsPaginateResponseAutomationExecutionMetadataList` `ResolvedTargets`

    A list of targets that resolved during the execution.

    - **ParameterValues** *(list) --*

      A list of parameter values sent to targets that resolved during the Automation
      execution.

      - *(string) --*

    - **Truncated** *(boolean) --*

      A boolean value indicating whether the resolved target list is truncated.
    """


_DescribeAutomationExecutionsPaginateResponseAutomationExecutionMetadataListTargetsTypeDef = TypedDict(
    "_DescribeAutomationExecutionsPaginateResponseAutomationExecutionMetadataListTargetsTypeDef",
    {"Key": str, "Values": List[str]},
    total=False,
)


class DescribeAutomationExecutionsPaginateResponseAutomationExecutionMetadataListTargetsTypeDef(
    _DescribeAutomationExecutionsPaginateResponseAutomationExecutionMetadataListTargetsTypeDef
):
    """
    Type definition for `DescribeAutomationExecutionsPaginateResponseAutomationExecutionMetadataList` `Targets`

    An array of search criteria that targets instances using a Key,Value combination that
    you specify.

    Supported formats include the following.

    * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

    * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

    * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

    * (Maintenance window targets only)
    ``Key=resource-groups:Name,Values=*resource-group-name* ``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

    For example:

    * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

    * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

    * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

    * (Maintenance window targets only)
    ``Key=resource-groups:Name,Values=ProductionResourceGroup``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC*
    ``

    For information about how to send commands that target instances using ``Key,Value``
    parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
    <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
    in the *AWS Systems Manager User Guide* .

    - **Key** *(string) --*

      User-defined criteria for sending commands that target instances that meet the
      criteria.

    - **Values** *(list) --*

      User-defined criteria that maps to ``Key`` . For example, if you specified
      ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
      instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

      - *(string) --*
    """


_DescribeAutomationExecutionsPaginateResponseAutomationExecutionMetadataListTypeDef = TypedDict(
    "_DescribeAutomationExecutionsPaginateResponseAutomationExecutionMetadataListTypeDef",
    {
        "AutomationExecutionId": str,
        "DocumentName": str,
        "DocumentVersion": str,
        "AutomationExecutionStatus": str,
        "ExecutionStartTime": datetime,
        "ExecutionEndTime": datetime,
        "ExecutedBy": str,
        "LogFile": str,
        "Outputs": Dict[str, List[str]],
        "Mode": str,
        "ParentAutomationExecutionId": str,
        "CurrentStepName": str,
        "CurrentAction": str,
        "FailureMessage": str,
        "TargetParameterName": str,
        "Targets": List[
            DescribeAutomationExecutionsPaginateResponseAutomationExecutionMetadataListTargetsTypeDef
        ],
        "TargetMaps": List[Dict[str, List[str]]],
        "ResolvedTargets": DescribeAutomationExecutionsPaginateResponseAutomationExecutionMetadataListResolvedTargetsTypeDef,
        "MaxConcurrency": str,
        "MaxErrors": str,
        "Target": str,
        "AutomationType": str,
    },
    total=False,
)


class DescribeAutomationExecutionsPaginateResponseAutomationExecutionMetadataListTypeDef(
    _DescribeAutomationExecutionsPaginateResponseAutomationExecutionMetadataListTypeDef
):
    """
    Type definition for `DescribeAutomationExecutionsPaginateResponse` `AutomationExecutionMetadataList`

    Details about a specific Automation execution.

    - **AutomationExecutionId** *(string) --*

      The execution ID.

    - **DocumentName** *(string) --*

      The name of the Automation document used during execution.

    - **DocumentVersion** *(string) --*

      The document version used during the execution.

    - **AutomationExecutionStatus** *(string) --*

      The status of the execution. Valid values include: Running, Succeeded, Failed, Timed out,
      or Cancelled.

    - **ExecutionStartTime** *(datetime) --*

      The time the execution started.>

    - **ExecutionEndTime** *(datetime) --*

      The time the execution finished. This is not populated if the execution is still in
      progress.

    - **ExecutedBy** *(string) --*

      The IAM role ARN of the user who ran the Automation.

    - **LogFile** *(string) --*

      An Amazon S3 bucket where execution information is stored.

    - **Outputs** *(dict) --*

      The list of execution outputs as defined in the Automation document.

      - *(string) --*

        - *(list) --*

          - *(string) --*

    - **Mode** *(string) --*

      The Automation execution mode.

    - **ParentAutomationExecutionId** *(string) --*

      The ExecutionId of the parent Automation.

    - **CurrentStepName** *(string) --*

      The name of the step that is currently running.

    - **CurrentAction** *(string) --*

      The action of the step that is currently running.

    - **FailureMessage** *(string) --*

      The list of execution outputs as defined in the Automation document.

    - **TargetParameterName** *(string) --*

      The list of execution outputs as defined in the Automation document.

    - **Targets** *(list) --*

      The targets defined by the user when starting the Automation.

      - *(dict) --*

        An array of search criteria that targets instances using a Key,Value combination that
        you specify.

        Supported formats include the following.

        * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

        * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

        * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

        * (Maintenance window targets only)
        ``Key=resource-groups:Name,Values=*resource-group-name* ``

        * (Maintenance window targets only)
        ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

        For example:

        * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

        * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

        * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

        * (Maintenance window targets only)
        ``Key=resource-groups:Name,Values=ProductionResourceGroup``

        * (Maintenance window targets only)
        ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC*
        ``

        For information about how to send commands that target instances using ``Key,Value``
        parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
        <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
        in the *AWS Systems Manager User Guide* .

        - **Key** *(string) --*

          User-defined criteria for sending commands that target instances that meet the
          criteria.

        - **Values** *(list) --*

          User-defined criteria that maps to ``Key`` . For example, if you specified
          ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
          instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

          - *(string) --*

    - **TargetMaps** *(list) --*

      The specified key-value mapping of document parameters to target resources.

      - *(dict) --*

        - *(string) --*

          - *(list) --*

            - *(string) --*

    - **ResolvedTargets** *(dict) --*

      A list of targets that resolved during the execution.

      - **ParameterValues** *(list) --*

        A list of parameter values sent to targets that resolved during the Automation
        execution.

        - *(string) --*

      - **Truncated** *(boolean) --*

        A boolean value indicating whether the resolved target list is truncated.

    - **MaxConcurrency** *(string) --*

      The MaxConcurrency value specified by the user when starting the Automation.

    - **MaxErrors** *(string) --*

      The MaxErrors value specified by the user when starting the Automation.

    - **Target** *(string) --*

      The list of execution outputs as defined in the Automation document.

    - **AutomationType** *(string) --*

      Use this filter with  DescribeAutomationExecutions . Specify either Local or
      CrossAccount. CrossAccount is an Automation that runs in multiple AWS Regions and
      accounts. For more information, see `Executing Automations in Multiple AWS Regions and
      Accounts
      <http://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-automation-multiple-accounts-and-regions.html>`__
      in the *AWS Systems Manager User Guide* .
    """


_DescribeAutomationExecutionsPaginateResponseTypeDef = TypedDict(
    "_DescribeAutomationExecutionsPaginateResponseTypeDef",
    {
        "AutomationExecutionMetadataList": List[
            DescribeAutomationExecutionsPaginateResponseAutomationExecutionMetadataListTypeDef
        ]
    },
    total=False,
)


class DescribeAutomationExecutionsPaginateResponseTypeDef(
    _DescribeAutomationExecutionsPaginateResponseTypeDef
):
    """
    Type definition for `DescribeAutomationExecutionsPaginate` `Response`

    - **AutomationExecutionMetadataList** *(list) --*

      The list of details about each automation execution which has occurred which matches the
      filter specification, if any.

      - *(dict) --*

        Details about a specific Automation execution.

        - **AutomationExecutionId** *(string) --*

          The execution ID.

        - **DocumentName** *(string) --*

          The name of the Automation document used during execution.

        - **DocumentVersion** *(string) --*

          The document version used during the execution.

        - **AutomationExecutionStatus** *(string) --*

          The status of the execution. Valid values include: Running, Succeeded, Failed, Timed out,
          or Cancelled.

        - **ExecutionStartTime** *(datetime) --*

          The time the execution started.>

        - **ExecutionEndTime** *(datetime) --*

          The time the execution finished. This is not populated if the execution is still in
          progress.

        - **ExecutedBy** *(string) --*

          The IAM role ARN of the user who ran the Automation.

        - **LogFile** *(string) --*

          An Amazon S3 bucket where execution information is stored.

        - **Outputs** *(dict) --*

          The list of execution outputs as defined in the Automation document.

          - *(string) --*

            - *(list) --*

              - *(string) --*

        - **Mode** *(string) --*

          The Automation execution mode.

        - **ParentAutomationExecutionId** *(string) --*

          The ExecutionId of the parent Automation.

        - **CurrentStepName** *(string) --*

          The name of the step that is currently running.

        - **CurrentAction** *(string) --*

          The action of the step that is currently running.

        - **FailureMessage** *(string) --*

          The list of execution outputs as defined in the Automation document.

        - **TargetParameterName** *(string) --*

          The list of execution outputs as defined in the Automation document.

        - **Targets** *(list) --*

          The targets defined by the user when starting the Automation.

          - *(dict) --*

            An array of search criteria that targets instances using a Key,Value combination that
            you specify.

            Supported formats include the following.

            * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

            * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

            * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

            * (Maintenance window targets only)
            ``Key=resource-groups:Name,Values=*resource-group-name* ``

            * (Maintenance window targets only)
            ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

            For example:

            * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

            * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

            * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

            * (Maintenance window targets only)
            ``Key=resource-groups:Name,Values=ProductionResourceGroup``

            * (Maintenance window targets only)
            ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC*
            ``

            For information about how to send commands that target instances using ``Key,Value``
            parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
            <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
            in the *AWS Systems Manager User Guide* .

            - **Key** *(string) --*

              User-defined criteria for sending commands that target instances that meet the
              criteria.

            - **Values** *(list) --*

              User-defined criteria that maps to ``Key`` . For example, if you specified
              ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
              instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

              - *(string) --*

        - **TargetMaps** *(list) --*

          The specified key-value mapping of document parameters to target resources.

          - *(dict) --*

            - *(string) --*

              - *(list) --*

                - *(string) --*

        - **ResolvedTargets** *(dict) --*

          A list of targets that resolved during the execution.

          - **ParameterValues** *(list) --*

            A list of parameter values sent to targets that resolved during the Automation
            execution.

            - *(string) --*

          - **Truncated** *(boolean) --*

            A boolean value indicating whether the resolved target list is truncated.

        - **MaxConcurrency** *(string) --*

          The MaxConcurrency value specified by the user when starting the Automation.

        - **MaxErrors** *(string) --*

          The MaxErrors value specified by the user when starting the Automation.

        - **Target** *(string) --*

          The list of execution outputs as defined in the Automation document.

        - **AutomationType** *(string) --*

          Use this filter with  DescribeAutomationExecutions . Specify either Local or
          CrossAccount. CrossAccount is an Automation that runs in multiple AWS Regions and
          accounts. For more information, see `Executing Automations in Multiple AWS Regions and
          Accounts
          <http://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-automation-multiple-accounts-and-regions.html>`__
          in the *AWS Systems Manager User Guide* .
    """


_DescribeAutomationStepExecutionsPaginateFiltersTypeDef = TypedDict(
    "_DescribeAutomationStepExecutionsPaginateFiltersTypeDef",
    {"Key": str, "Values": List[str]},
)


class DescribeAutomationStepExecutionsPaginateFiltersTypeDef(
    _DescribeAutomationStepExecutionsPaginateFiltersTypeDef
):
    """
    Type definition for `DescribeAutomationStepExecutionsPaginate` `Filters`

    A filter to limit the amount of step execution information returned by the call.

    - **Key** *(string) --* **[REQUIRED]**

      One or more keys to limit the results. Valid filter keys include the following: StepName,
      Action, StepExecutionId, StepExecutionStatus, StartTimeBefore, StartTimeAfter.

    - **Values** *(list) --* **[REQUIRED]**

      The values of the filter key.

      - *(string) --*
    """


_DescribeAutomationStepExecutionsPaginatePaginationConfigTypeDef = TypedDict(
    "_DescribeAutomationStepExecutionsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class DescribeAutomationStepExecutionsPaginatePaginationConfigTypeDef(
    _DescribeAutomationStepExecutionsPaginatePaginationConfigTypeDef
):
    """
    Type definition for `DescribeAutomationStepExecutionsPaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_DescribeAutomationStepExecutionsPaginateResponseStepExecutionsFailureDetailsTypeDef = TypedDict(
    "_DescribeAutomationStepExecutionsPaginateResponseStepExecutionsFailureDetailsTypeDef",
    {"FailureStage": str, "FailureType": str, "Details": Dict[str, List[str]]},
    total=False,
)


class DescribeAutomationStepExecutionsPaginateResponseStepExecutionsFailureDetailsTypeDef(
    _DescribeAutomationStepExecutionsPaginateResponseStepExecutionsFailureDetailsTypeDef
):
    """
    Type definition for `DescribeAutomationStepExecutionsPaginateResponseStepExecutions` `FailureDetails`

    Information about the Automation failure.

    - **FailureStage** *(string) --*

      The stage of the Automation execution when the failure occurred. The stages include the
      following: InputValidation, PreVerification, Invocation, PostVerification.

    - **FailureType** *(string) --*

      The type of Automation failure. Failure types include the following: Action,
      Permission, Throttling, Verification, Internal.

    - **Details** *(dict) --*

      Detailed information about the Automation step failure.

      - *(string) --*

        - *(list) --*

          - *(string) --*
    """


_DescribeAutomationStepExecutionsPaginateResponseStepExecutionsTargetLocationTypeDef = TypedDict(
    "_DescribeAutomationStepExecutionsPaginateResponseStepExecutionsTargetLocationTypeDef",
    {
        "Accounts": List[str],
        "Regions": List[str],
        "TargetLocationMaxConcurrency": str,
        "TargetLocationMaxErrors": str,
        "ExecutionRoleName": str,
    },
    total=False,
)


class DescribeAutomationStepExecutionsPaginateResponseStepExecutionsTargetLocationTypeDef(
    _DescribeAutomationStepExecutionsPaginateResponseStepExecutionsTargetLocationTypeDef
):
    """
    Type definition for `DescribeAutomationStepExecutionsPaginateResponseStepExecutions` `TargetLocation`

    The combination of AWS Regions and accounts targeted by the current Automation execution.

    - **Accounts** *(list) --*

      The AWS accounts targeted by the current Automation execution.

      - *(string) --*

    - **Regions** *(list) --*

      The AWS Regions targeted by the current Automation execution.

      - *(string) --*

    - **TargetLocationMaxConcurrency** *(string) --*

      The maximum number of AWS accounts and AWS regions allowed to run the Automation
      concurrently

    - **TargetLocationMaxErrors** *(string) --*

      The maximum number of errors allowed before the system stops queueing additional
      Automation executions for the currently running Automation.

    - **ExecutionRoleName** *(string) --*

      The Automation execution role used by the currently running Automation.
    """


_DescribeAutomationStepExecutionsPaginateResponseStepExecutionsTargetsTypeDef = TypedDict(
    "_DescribeAutomationStepExecutionsPaginateResponseStepExecutionsTargetsTypeDef",
    {"Key": str, "Values": List[str]},
    total=False,
)


class DescribeAutomationStepExecutionsPaginateResponseStepExecutionsTargetsTypeDef(
    _DescribeAutomationStepExecutionsPaginateResponseStepExecutionsTargetsTypeDef
):
    """
    Type definition for `DescribeAutomationStepExecutionsPaginateResponseStepExecutions` `Targets`

    An array of search criteria that targets instances using a Key,Value combination that
    you specify.

    Supported formats include the following.

    * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

    * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

    * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

    * (Maintenance window targets only)
    ``Key=resource-groups:Name,Values=*resource-group-name* ``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

    For example:

    * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

    * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

    * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

    * (Maintenance window targets only)
    ``Key=resource-groups:Name,Values=ProductionResourceGroup``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC*
    ``

    For information about how to send commands that target instances using ``Key,Value``
    parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
    <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
    in the *AWS Systems Manager User Guide* .

    - **Key** *(string) --*

      User-defined criteria for sending commands that target instances that meet the
      criteria.

    - **Values** *(list) --*

      User-defined criteria that maps to ``Key`` . For example, if you specified
      ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
      instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

      - *(string) --*
    """


_DescribeAutomationStepExecutionsPaginateResponseStepExecutionsTypeDef = TypedDict(
    "_DescribeAutomationStepExecutionsPaginateResponseStepExecutionsTypeDef",
    {
        "StepName": str,
        "Action": str,
        "TimeoutSeconds": int,
        "OnFailure": str,
        "MaxAttempts": int,
        "ExecutionStartTime": datetime,
        "ExecutionEndTime": datetime,
        "StepStatus": str,
        "ResponseCode": str,
        "Inputs": Dict[str, str],
        "Outputs": Dict[str, List[str]],
        "Response": str,
        "FailureMessage": str,
        "FailureDetails": DescribeAutomationStepExecutionsPaginateResponseStepExecutionsFailureDetailsTypeDef,
        "StepExecutionId": str,
        "OverriddenParameters": Dict[str, List[str]],
        "IsEnd": bool,
        "NextStep": str,
        "IsCritical": bool,
        "ValidNextSteps": List[str],
        "Targets": List[
            DescribeAutomationStepExecutionsPaginateResponseStepExecutionsTargetsTypeDef
        ],
        "TargetLocation": DescribeAutomationStepExecutionsPaginateResponseStepExecutionsTargetLocationTypeDef,
    },
    total=False,
)


class DescribeAutomationStepExecutionsPaginateResponseStepExecutionsTypeDef(
    _DescribeAutomationStepExecutionsPaginateResponseStepExecutionsTypeDef
):
    """
    Type definition for `DescribeAutomationStepExecutionsPaginateResponse` `StepExecutions`

    Detailed information about an the execution state of an Automation step.

    - **StepName** *(string) --*

      The name of this execution step.

    - **Action** *(string) --*

      The action this step performs. The action determines the behavior of the step.

    - **TimeoutSeconds** *(integer) --*

      The timeout seconds of the step.

    - **OnFailure** *(string) --*

      The action to take if the step fails. The default value is Abort.

    - **MaxAttempts** *(integer) --*

      The maximum number of tries to run the action of the step. The default value is 1.

    - **ExecutionStartTime** *(datetime) --*

      If a step has begun execution, this contains the time the step started. If the step is in
      Pending status, this field is not populated.

    - **ExecutionEndTime** *(datetime) --*

      If a step has finished execution, this contains the time the execution ended. If the step
      has not yet concluded, this field is not populated.

    - **StepStatus** *(string) --*

      The execution status for this step. Valid values include: Pending, InProgress, Success,
      Cancelled, Failed, and TimedOut.

    - **ResponseCode** *(string) --*

      The response code returned by the execution of the step.

    - **Inputs** *(dict) --*

      Fully-resolved values passed into the step before execution.

      - *(string) --*

        - *(string) --*

    - **Outputs** *(dict) --*

      Returned values from the execution of the step.

      - *(string) --*

        - *(list) --*

          - *(string) --*

    - **Response** *(string) --*

      A message associated with the response code for an execution.

    - **FailureMessage** *(string) --*

      If a step failed, this message explains why the execution failed.

    - **FailureDetails** *(dict) --*

      Information about the Automation failure.

      - **FailureStage** *(string) --*

        The stage of the Automation execution when the failure occurred. The stages include the
        following: InputValidation, PreVerification, Invocation, PostVerification.

      - **FailureType** *(string) --*

        The type of Automation failure. Failure types include the following: Action,
        Permission, Throttling, Verification, Internal.

      - **Details** *(dict) --*

        Detailed information about the Automation step failure.

        - *(string) --*

          - *(list) --*

            - *(string) --*

    - **StepExecutionId** *(string) --*

      The unique ID of a step execution.

    - **OverriddenParameters** *(dict) --*

      A user-specified list of parameters to override when running a step.

      - *(string) --*

        - *(list) --*

          - *(string) --*

    - **IsEnd** *(boolean) --*

      The flag which can be used to end automation no matter whether the step succeeds or fails.

    - **NextStep** *(string) --*

      The next step after the step succeeds.

    - **IsCritical** *(boolean) --*

      The flag which can be used to help decide whether the failure of current step leads to
      the Automation failure.

    - **ValidNextSteps** *(list) --*

      Strategies used when step fails, we support Continue and Abort. Abort will fail the
      automation when the step fails. Continue will ignore the failure of current step and
      allow automation to run the next step. With conditional branching, we add step:stepName
      to support the automation to go to another specific step.

      - *(string) --*

    - **Targets** *(list) --*

      The targets for the step execution.

      - *(dict) --*

        An array of search criteria that targets instances using a Key,Value combination that
        you specify.

        Supported formats include the following.

        * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

        * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

        * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

        * (Maintenance window targets only)
        ``Key=resource-groups:Name,Values=*resource-group-name* ``

        * (Maintenance window targets only)
        ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

        For example:

        * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

        * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

        * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

        * (Maintenance window targets only)
        ``Key=resource-groups:Name,Values=ProductionResourceGroup``

        * (Maintenance window targets only)
        ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC*
        ``

        For information about how to send commands that target instances using ``Key,Value``
        parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
        <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
        in the *AWS Systems Manager User Guide* .

        - **Key** *(string) --*

          User-defined criteria for sending commands that target instances that meet the
          criteria.

        - **Values** *(list) --*

          User-defined criteria that maps to ``Key`` . For example, if you specified
          ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
          instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

          - *(string) --*

    - **TargetLocation** *(dict) --*

      The combination of AWS Regions and accounts targeted by the current Automation execution.

      - **Accounts** *(list) --*

        The AWS accounts targeted by the current Automation execution.

        - *(string) --*

      - **Regions** *(list) --*

        The AWS Regions targeted by the current Automation execution.

        - *(string) --*

      - **TargetLocationMaxConcurrency** *(string) --*

        The maximum number of AWS accounts and AWS regions allowed to run the Automation
        concurrently

      - **TargetLocationMaxErrors** *(string) --*

        The maximum number of errors allowed before the system stops queueing additional
        Automation executions for the currently running Automation.

      - **ExecutionRoleName** *(string) --*

        The Automation execution role used by the currently running Automation.
    """


_DescribeAutomationStepExecutionsPaginateResponseTypeDef = TypedDict(
    "_DescribeAutomationStepExecutionsPaginateResponseTypeDef",
    {
        "StepExecutions": List[
            DescribeAutomationStepExecutionsPaginateResponseStepExecutionsTypeDef
        ]
    },
    total=False,
)


class DescribeAutomationStepExecutionsPaginateResponseTypeDef(
    _DescribeAutomationStepExecutionsPaginateResponseTypeDef
):
    """
    Type definition for `DescribeAutomationStepExecutionsPaginate` `Response`

    - **StepExecutions** *(list) --*

      A list of details about the current state of all steps that make up an execution.

      - *(dict) --*

        Detailed information about an the execution state of an Automation step.

        - **StepName** *(string) --*

          The name of this execution step.

        - **Action** *(string) --*

          The action this step performs. The action determines the behavior of the step.

        - **TimeoutSeconds** *(integer) --*

          The timeout seconds of the step.

        - **OnFailure** *(string) --*

          The action to take if the step fails. The default value is Abort.

        - **MaxAttempts** *(integer) --*

          The maximum number of tries to run the action of the step. The default value is 1.

        - **ExecutionStartTime** *(datetime) --*

          If a step has begun execution, this contains the time the step started. If the step is in
          Pending status, this field is not populated.

        - **ExecutionEndTime** *(datetime) --*

          If a step has finished execution, this contains the time the execution ended. If the step
          has not yet concluded, this field is not populated.

        - **StepStatus** *(string) --*

          The execution status for this step. Valid values include: Pending, InProgress, Success,
          Cancelled, Failed, and TimedOut.

        - **ResponseCode** *(string) --*

          The response code returned by the execution of the step.

        - **Inputs** *(dict) --*

          Fully-resolved values passed into the step before execution.

          - *(string) --*

            - *(string) --*

        - **Outputs** *(dict) --*

          Returned values from the execution of the step.

          - *(string) --*

            - *(list) --*

              - *(string) --*

        - **Response** *(string) --*

          A message associated with the response code for an execution.

        - **FailureMessage** *(string) --*

          If a step failed, this message explains why the execution failed.

        - **FailureDetails** *(dict) --*

          Information about the Automation failure.

          - **FailureStage** *(string) --*

            The stage of the Automation execution when the failure occurred. The stages include the
            following: InputValidation, PreVerification, Invocation, PostVerification.

          - **FailureType** *(string) --*

            The type of Automation failure. Failure types include the following: Action,
            Permission, Throttling, Verification, Internal.

          - **Details** *(dict) --*

            Detailed information about the Automation step failure.

            - *(string) --*

              - *(list) --*

                - *(string) --*

        - **StepExecutionId** *(string) --*

          The unique ID of a step execution.

        - **OverriddenParameters** *(dict) --*

          A user-specified list of parameters to override when running a step.

          - *(string) --*

            - *(list) --*

              - *(string) --*

        - **IsEnd** *(boolean) --*

          The flag which can be used to end automation no matter whether the step succeeds or fails.

        - **NextStep** *(string) --*

          The next step after the step succeeds.

        - **IsCritical** *(boolean) --*

          The flag which can be used to help decide whether the failure of current step leads to
          the Automation failure.

        - **ValidNextSteps** *(list) --*

          Strategies used when step fails, we support Continue and Abort. Abort will fail the
          automation when the step fails. Continue will ignore the failure of current step and
          allow automation to run the next step. With conditional branching, we add step:stepName
          to support the automation to go to another specific step.

          - *(string) --*

        - **Targets** *(list) --*

          The targets for the step execution.

          - *(dict) --*

            An array of search criteria that targets instances using a Key,Value combination that
            you specify.

            Supported formats include the following.

            * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

            * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

            * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

            * (Maintenance window targets only)
            ``Key=resource-groups:Name,Values=*resource-group-name* ``

            * (Maintenance window targets only)
            ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

            For example:

            * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

            * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

            * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

            * (Maintenance window targets only)
            ``Key=resource-groups:Name,Values=ProductionResourceGroup``

            * (Maintenance window targets only)
            ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC*
            ``

            For information about how to send commands that target instances using ``Key,Value``
            parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
            <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
            in the *AWS Systems Manager User Guide* .

            - **Key** *(string) --*

              User-defined criteria for sending commands that target instances that meet the
              criteria.

            - **Values** *(list) --*

              User-defined criteria that maps to ``Key`` . For example, if you specified
              ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
              instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

              - *(string) --*

        - **TargetLocation** *(dict) --*

          The combination of AWS Regions and accounts targeted by the current Automation execution.

          - **Accounts** *(list) --*

            The AWS accounts targeted by the current Automation execution.

            - *(string) --*

          - **Regions** *(list) --*

            The AWS Regions targeted by the current Automation execution.

            - *(string) --*

          - **TargetLocationMaxConcurrency** *(string) --*

            The maximum number of AWS accounts and AWS regions allowed to run the Automation
            concurrently

          - **TargetLocationMaxErrors** *(string) --*

            The maximum number of errors allowed before the system stops queueing additional
            Automation executions for the currently running Automation.

          - **ExecutionRoleName** *(string) --*

            The Automation execution role used by the currently running Automation.
    """


_DescribeAvailablePatchesPaginateFiltersTypeDef = TypedDict(
    "_DescribeAvailablePatchesPaginateFiltersTypeDef",
    {"Key": str, "Values": List[str]},
    total=False,
)


class DescribeAvailablePatchesPaginateFiltersTypeDef(
    _DescribeAvailablePatchesPaginateFiltersTypeDef
):
    """
    Type definition for `DescribeAvailablePatchesPaginate` `Filters`

    Defines a filter used in Patch Manager APIs.

    - **Key** *(string) --*

      The key for the filter.

    - **Values** *(list) --*

      The value for the filter.

      - *(string) --*
    """


_DescribeAvailablePatchesPaginatePaginationConfigTypeDef = TypedDict(
    "_DescribeAvailablePatchesPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class DescribeAvailablePatchesPaginatePaginationConfigTypeDef(
    _DescribeAvailablePatchesPaginatePaginationConfigTypeDef
):
    """
    Type definition for `DescribeAvailablePatchesPaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_DescribeAvailablePatchesPaginateResponsePatchesTypeDef = TypedDict(
    "_DescribeAvailablePatchesPaginateResponsePatchesTypeDef",
    {
        "Id": str,
        "ReleaseDate": datetime,
        "Title": str,
        "Description": str,
        "ContentUrl": str,
        "Vendor": str,
        "ProductFamily": str,
        "Product": str,
        "Classification": str,
        "MsrcSeverity": str,
        "KbNumber": str,
        "MsrcNumber": str,
        "Language": str,
    },
    total=False,
)


class DescribeAvailablePatchesPaginateResponsePatchesTypeDef(
    _DescribeAvailablePatchesPaginateResponsePatchesTypeDef
):
    """
    Type definition for `DescribeAvailablePatchesPaginateResponse` `Patches`

    Represents metadata about a patch.

    - **Id** *(string) --*

      The ID of the patch (this is different than the Microsoft Knowledge Base ID).

    - **ReleaseDate** *(datetime) --*

      The date the patch was released.

    - **Title** *(string) --*

      The title of the patch.

    - **Description** *(string) --*

      The description of the patch.

    - **ContentUrl** *(string) --*

      The URL where more information can be obtained about the patch.

    - **Vendor** *(string) --*

      The name of the vendor providing the patch.

    - **ProductFamily** *(string) --*

      The product family the patch is applicable for (for example, Windows).

    - **Product** *(string) --*

      The specific product the patch is applicable for (for example, WindowsServer2016).

    - **Classification** *(string) --*

      The classification of the patch (for example, SecurityUpdates, Updates, CriticalUpdates).

    - **MsrcSeverity** *(string) --*

      The severity of the patch (for example Critical, Important, Moderate).

    - **KbNumber** *(string) --*

      The Microsoft Knowledge Base ID of the patch.

    - **MsrcNumber** *(string) --*

      The ID of the MSRC bulletin the patch is related to.

    - **Language** *(string) --*

      The language of the patch if it's language-specific.
    """


_DescribeAvailablePatchesPaginateResponseTypeDef = TypedDict(
    "_DescribeAvailablePatchesPaginateResponseTypeDef",
    {"Patches": List[DescribeAvailablePatchesPaginateResponsePatchesTypeDef]},
    total=False,
)


class DescribeAvailablePatchesPaginateResponseTypeDef(
    _DescribeAvailablePatchesPaginateResponseTypeDef
):
    """
    Type definition for `DescribeAvailablePatchesPaginate` `Response`

    - **Patches** *(list) --*

      An array of patches. Each entry in the array is a patch structure.

      - *(dict) --*

        Represents metadata about a patch.

        - **Id** *(string) --*

          The ID of the patch (this is different than the Microsoft Knowledge Base ID).

        - **ReleaseDate** *(datetime) --*

          The date the patch was released.

        - **Title** *(string) --*

          The title of the patch.

        - **Description** *(string) --*

          The description of the patch.

        - **ContentUrl** *(string) --*

          The URL where more information can be obtained about the patch.

        - **Vendor** *(string) --*

          The name of the vendor providing the patch.

        - **ProductFamily** *(string) --*

          The product family the patch is applicable for (for example, Windows).

        - **Product** *(string) --*

          The specific product the patch is applicable for (for example, WindowsServer2016).

        - **Classification** *(string) --*

          The classification of the patch (for example, SecurityUpdates, Updates, CriticalUpdates).

        - **MsrcSeverity** *(string) --*

          The severity of the patch (for example Critical, Important, Moderate).

        - **KbNumber** *(string) --*

          The Microsoft Knowledge Base ID of the patch.

        - **MsrcNumber** *(string) --*

          The ID of the MSRC bulletin the patch is related to.

        - **Language** *(string) --*

          The language of the patch if it's language-specific.
    """


_DescribeEffectiveInstanceAssociationsPaginatePaginationConfigTypeDef = TypedDict(
    "_DescribeEffectiveInstanceAssociationsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class DescribeEffectiveInstanceAssociationsPaginatePaginationConfigTypeDef(
    _DescribeEffectiveInstanceAssociationsPaginatePaginationConfigTypeDef
):
    """
    Type definition for `DescribeEffectiveInstanceAssociationsPaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_DescribeEffectiveInstanceAssociationsPaginateResponseAssociationsTypeDef = TypedDict(
    "_DescribeEffectiveInstanceAssociationsPaginateResponseAssociationsTypeDef",
    {
        "AssociationId": str,
        "InstanceId": str,
        "Content": str,
        "AssociationVersion": str,
    },
    total=False,
)


class DescribeEffectiveInstanceAssociationsPaginateResponseAssociationsTypeDef(
    _DescribeEffectiveInstanceAssociationsPaginateResponseAssociationsTypeDef
):
    """
    Type definition for `DescribeEffectiveInstanceAssociationsPaginateResponse` `Associations`

    One or more association documents on the instance.

    - **AssociationId** *(string) --*

      The association ID.

    - **InstanceId** *(string) --*

      The instance ID.

    - **Content** *(string) --*

      The content of the association document for the instance(s).

    - **AssociationVersion** *(string) --*

      Version information for the association on the instance.
    """


_DescribeEffectiveInstanceAssociationsPaginateResponseTypeDef = TypedDict(
    "_DescribeEffectiveInstanceAssociationsPaginateResponseTypeDef",
    {
        "Associations": List[
            DescribeEffectiveInstanceAssociationsPaginateResponseAssociationsTypeDef
        ]
    },
    total=False,
)


class DescribeEffectiveInstanceAssociationsPaginateResponseTypeDef(
    _DescribeEffectiveInstanceAssociationsPaginateResponseTypeDef
):
    """
    Type definition for `DescribeEffectiveInstanceAssociationsPaginate` `Response`

    - **Associations** *(list) --*

      The associations for the requested instance.

      - *(dict) --*

        One or more association documents on the instance.

        - **AssociationId** *(string) --*

          The association ID.

        - **InstanceId** *(string) --*

          The instance ID.

        - **Content** *(string) --*

          The content of the association document for the instance(s).

        - **AssociationVersion** *(string) --*

          Version information for the association on the instance.
    """


_DescribeEffectivePatchesForPatchBaselinePaginatePaginationConfigTypeDef = TypedDict(
    "_DescribeEffectivePatchesForPatchBaselinePaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class DescribeEffectivePatchesForPatchBaselinePaginatePaginationConfigTypeDef(
    _DescribeEffectivePatchesForPatchBaselinePaginatePaginationConfigTypeDef
):
    """
    Type definition for `DescribeEffectivePatchesForPatchBaselinePaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_DescribeEffectivePatchesForPatchBaselinePaginateResponseEffectivePatchesPatchStatusTypeDef = TypedDict(
    "_DescribeEffectivePatchesForPatchBaselinePaginateResponseEffectivePatchesPatchStatusTypeDef",
    {"DeploymentStatus": str, "ComplianceLevel": str, "ApprovalDate": datetime},
    total=False,
)


class DescribeEffectivePatchesForPatchBaselinePaginateResponseEffectivePatchesPatchStatusTypeDef(
    _DescribeEffectivePatchesForPatchBaselinePaginateResponseEffectivePatchesPatchStatusTypeDef
):
    """
    Type definition for `DescribeEffectivePatchesForPatchBaselinePaginateResponseEffectivePatches` `PatchStatus`

    The status of the patch in a patch baseline. This includes information about whether the
    patch is currently approved, due to be approved by a rule, explicitly approved, or
    explicitly rejected and the date the patch was or will be approved.

    - **DeploymentStatus** *(string) --*

      The approval status of a patch (APPROVED, PENDING_APPROVAL, EXPLICIT_APPROVED,
      EXPLICIT_REJECTED).

    - **ComplianceLevel** *(string) --*

      The compliance severity level for a patch.

    - **ApprovalDate** *(datetime) --*

      The date the patch was approved (or will be approved if the status is PENDING_APPROVAL).
    """


_DescribeEffectivePatchesForPatchBaselinePaginateResponseEffectivePatchesPatchTypeDef = TypedDict(
    "_DescribeEffectivePatchesForPatchBaselinePaginateResponseEffectivePatchesPatchTypeDef",
    {
        "Id": str,
        "ReleaseDate": datetime,
        "Title": str,
        "Description": str,
        "ContentUrl": str,
        "Vendor": str,
        "ProductFamily": str,
        "Product": str,
        "Classification": str,
        "MsrcSeverity": str,
        "KbNumber": str,
        "MsrcNumber": str,
        "Language": str,
    },
    total=False,
)


class DescribeEffectivePatchesForPatchBaselinePaginateResponseEffectivePatchesPatchTypeDef(
    _DescribeEffectivePatchesForPatchBaselinePaginateResponseEffectivePatchesPatchTypeDef
):
    """
    Type definition for `DescribeEffectivePatchesForPatchBaselinePaginateResponseEffectivePatches` `Patch`

    Provides metadata for a patch, including information such as the KB ID, severity,
    classification and a URL for where more information can be obtained about the patch.

    - **Id** *(string) --*

      The ID of the patch (this is different than the Microsoft Knowledge Base ID).

    - **ReleaseDate** *(datetime) --*

      The date the patch was released.

    - **Title** *(string) --*

      The title of the patch.

    - **Description** *(string) --*

      The description of the patch.

    - **ContentUrl** *(string) --*

      The URL where more information can be obtained about the patch.

    - **Vendor** *(string) --*

      The name of the vendor providing the patch.

    - **ProductFamily** *(string) --*

      The product family the patch is applicable for (for example, Windows).

    - **Product** *(string) --*

      The specific product the patch is applicable for (for example, WindowsServer2016).

    - **Classification** *(string) --*

      The classification of the patch (for example, SecurityUpdates, Updates,
      CriticalUpdates).

    - **MsrcSeverity** *(string) --*

      The severity of the patch (for example Critical, Important, Moderate).

    - **KbNumber** *(string) --*

      The Microsoft Knowledge Base ID of the patch.

    - **MsrcNumber** *(string) --*

      The ID of the MSRC bulletin the patch is related to.

    - **Language** *(string) --*

      The language of the patch if it's language-specific.
    """


_DescribeEffectivePatchesForPatchBaselinePaginateResponseEffectivePatchesTypeDef = TypedDict(
    "_DescribeEffectivePatchesForPatchBaselinePaginateResponseEffectivePatchesTypeDef",
    {
        "Patch": DescribeEffectivePatchesForPatchBaselinePaginateResponseEffectivePatchesPatchTypeDef,
        "PatchStatus": DescribeEffectivePatchesForPatchBaselinePaginateResponseEffectivePatchesPatchStatusTypeDef,
    },
    total=False,
)


class DescribeEffectivePatchesForPatchBaselinePaginateResponseEffectivePatchesTypeDef(
    _DescribeEffectivePatchesForPatchBaselinePaginateResponseEffectivePatchesTypeDef
):
    """
    Type definition for `DescribeEffectivePatchesForPatchBaselinePaginateResponse` `EffectivePatches`

    The EffectivePatch structure defines metadata about a patch along with the approval state
    of the patch in a particular patch baseline. The approval state includes information about
    whether the patch is currently approved, due to be approved by a rule, explicitly approved,
    or explicitly rejected and the date the patch was or will be approved.

    - **Patch** *(dict) --*

      Provides metadata for a patch, including information such as the KB ID, severity,
      classification and a URL for where more information can be obtained about the patch.

      - **Id** *(string) --*

        The ID of the patch (this is different than the Microsoft Knowledge Base ID).

      - **ReleaseDate** *(datetime) --*

        The date the patch was released.

      - **Title** *(string) --*

        The title of the patch.

      - **Description** *(string) --*

        The description of the patch.

      - **ContentUrl** *(string) --*

        The URL where more information can be obtained about the patch.

      - **Vendor** *(string) --*

        The name of the vendor providing the patch.

      - **ProductFamily** *(string) --*

        The product family the patch is applicable for (for example, Windows).

      - **Product** *(string) --*

        The specific product the patch is applicable for (for example, WindowsServer2016).

      - **Classification** *(string) --*

        The classification of the patch (for example, SecurityUpdates, Updates,
        CriticalUpdates).

      - **MsrcSeverity** *(string) --*

        The severity of the patch (for example Critical, Important, Moderate).

      - **KbNumber** *(string) --*

        The Microsoft Knowledge Base ID of the patch.

      - **MsrcNumber** *(string) --*

        The ID of the MSRC bulletin the patch is related to.

      - **Language** *(string) --*

        The language of the patch if it's language-specific.

    - **PatchStatus** *(dict) --*

      The status of the patch in a patch baseline. This includes information about whether the
      patch is currently approved, due to be approved by a rule, explicitly approved, or
      explicitly rejected and the date the patch was or will be approved.

      - **DeploymentStatus** *(string) --*

        The approval status of a patch (APPROVED, PENDING_APPROVAL, EXPLICIT_APPROVED,
        EXPLICIT_REJECTED).

      - **ComplianceLevel** *(string) --*

        The compliance severity level for a patch.

      - **ApprovalDate** *(datetime) --*

        The date the patch was approved (or will be approved if the status is PENDING_APPROVAL).
    """


_DescribeEffectivePatchesForPatchBaselinePaginateResponseTypeDef = TypedDict(
    "_DescribeEffectivePatchesForPatchBaselinePaginateResponseTypeDef",
    {
        "EffectivePatches": List[
            DescribeEffectivePatchesForPatchBaselinePaginateResponseEffectivePatchesTypeDef
        ]
    },
    total=False,
)


class DescribeEffectivePatchesForPatchBaselinePaginateResponseTypeDef(
    _DescribeEffectivePatchesForPatchBaselinePaginateResponseTypeDef
):
    """
    Type definition for `DescribeEffectivePatchesForPatchBaselinePaginate` `Response`

    - **EffectivePatches** *(list) --*

      An array of patches and patch status.

      - *(dict) --*

        The EffectivePatch structure defines metadata about a patch along with the approval state
        of the patch in a particular patch baseline. The approval state includes information about
        whether the patch is currently approved, due to be approved by a rule, explicitly approved,
        or explicitly rejected and the date the patch was or will be approved.

        - **Patch** *(dict) --*

          Provides metadata for a patch, including information such as the KB ID, severity,
          classification and a URL for where more information can be obtained about the patch.

          - **Id** *(string) --*

            The ID of the patch (this is different than the Microsoft Knowledge Base ID).

          - **ReleaseDate** *(datetime) --*

            The date the patch was released.

          - **Title** *(string) --*

            The title of the patch.

          - **Description** *(string) --*

            The description of the patch.

          - **ContentUrl** *(string) --*

            The URL where more information can be obtained about the patch.

          - **Vendor** *(string) --*

            The name of the vendor providing the patch.

          - **ProductFamily** *(string) --*

            The product family the patch is applicable for (for example, Windows).

          - **Product** *(string) --*

            The specific product the patch is applicable for (for example, WindowsServer2016).

          - **Classification** *(string) --*

            The classification of the patch (for example, SecurityUpdates, Updates,
            CriticalUpdates).

          - **MsrcSeverity** *(string) --*

            The severity of the patch (for example Critical, Important, Moderate).

          - **KbNumber** *(string) --*

            The Microsoft Knowledge Base ID of the patch.

          - **MsrcNumber** *(string) --*

            The ID of the MSRC bulletin the patch is related to.

          - **Language** *(string) --*

            The language of the patch if it's language-specific.

        - **PatchStatus** *(dict) --*

          The status of the patch in a patch baseline. This includes information about whether the
          patch is currently approved, due to be approved by a rule, explicitly approved, or
          explicitly rejected and the date the patch was or will be approved.

          - **DeploymentStatus** *(string) --*

            The approval status of a patch (APPROVED, PENDING_APPROVAL, EXPLICIT_APPROVED,
            EXPLICIT_REJECTED).

          - **ComplianceLevel** *(string) --*

            The compliance severity level for a patch.

          - **ApprovalDate** *(datetime) --*

            The date the patch was approved (or will be approved if the status is PENDING_APPROVAL).
    """


_DescribeInstanceAssociationsStatusPaginatePaginationConfigTypeDef = TypedDict(
    "_DescribeInstanceAssociationsStatusPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class DescribeInstanceAssociationsStatusPaginatePaginationConfigTypeDef(
    _DescribeInstanceAssociationsStatusPaginatePaginationConfigTypeDef
):
    """
    Type definition for `DescribeInstanceAssociationsStatusPaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_DescribeInstanceAssociationsStatusPaginateResponseInstanceAssociationStatusInfosOutputUrlS3OutputUrlTypeDef = TypedDict(
    "_DescribeInstanceAssociationsStatusPaginateResponseInstanceAssociationStatusInfosOutputUrlS3OutputUrlTypeDef",
    {"OutputUrl": str},
    total=False,
)


class DescribeInstanceAssociationsStatusPaginateResponseInstanceAssociationStatusInfosOutputUrlS3OutputUrlTypeDef(
    _DescribeInstanceAssociationsStatusPaginateResponseInstanceAssociationStatusInfosOutputUrlS3OutputUrlTypeDef
):
    """
    Type definition for `DescribeInstanceAssociationsStatusPaginateResponseInstanceAssociationStatusInfosOutputUrl` `S3OutputUrl`

    The URL of Amazon S3 bucket where you want to store the results of this request.

    - **OutputUrl** *(string) --*

      A URL for an Amazon S3 bucket where you want to store the results of this request.
    """


_DescribeInstanceAssociationsStatusPaginateResponseInstanceAssociationStatusInfosOutputUrlTypeDef = TypedDict(
    "_DescribeInstanceAssociationsStatusPaginateResponseInstanceAssociationStatusInfosOutputUrlTypeDef",
    {
        "S3OutputUrl": DescribeInstanceAssociationsStatusPaginateResponseInstanceAssociationStatusInfosOutputUrlS3OutputUrlTypeDef
    },
    total=False,
)


class DescribeInstanceAssociationsStatusPaginateResponseInstanceAssociationStatusInfosOutputUrlTypeDef(
    _DescribeInstanceAssociationsStatusPaginateResponseInstanceAssociationStatusInfosOutputUrlTypeDef
):
    """
    Type definition for `DescribeInstanceAssociationsStatusPaginateResponseInstanceAssociationStatusInfos` `OutputUrl`

    A URL for an Amazon S3 bucket where you want to store the results of this request.

    - **S3OutputUrl** *(dict) --*

      The URL of Amazon S3 bucket where you want to store the results of this request.

      - **OutputUrl** *(string) --*

        A URL for an Amazon S3 bucket where you want to store the results of this request.
    """


_DescribeInstanceAssociationsStatusPaginateResponseInstanceAssociationStatusInfosTypeDef = TypedDict(
    "_DescribeInstanceAssociationsStatusPaginateResponseInstanceAssociationStatusInfosTypeDef",
    {
        "AssociationId": str,
        "Name": str,
        "DocumentVersion": str,
        "AssociationVersion": str,
        "InstanceId": str,
        "ExecutionDate": datetime,
        "Status": str,
        "DetailedStatus": str,
        "ExecutionSummary": str,
        "ErrorCode": str,
        "OutputUrl": DescribeInstanceAssociationsStatusPaginateResponseInstanceAssociationStatusInfosOutputUrlTypeDef,
        "AssociationName": str,
    },
    total=False,
)


class DescribeInstanceAssociationsStatusPaginateResponseInstanceAssociationStatusInfosTypeDef(
    _DescribeInstanceAssociationsStatusPaginateResponseInstanceAssociationStatusInfosTypeDef
):
    """
    Type definition for `DescribeInstanceAssociationsStatusPaginateResponse` `InstanceAssociationStatusInfos`

    Status information about the instance association.

    - **AssociationId** *(string) --*

      The association ID.

    - **Name** *(string) --*

      The name of the association.

    - **DocumentVersion** *(string) --*

      The association document versions.

    - **AssociationVersion** *(string) --*

      The version of the association applied to the instance.

    - **InstanceId** *(string) --*

      The instance ID where the association was created.

    - **ExecutionDate** *(datetime) --*

      The date the instance association ran.

    - **Status** *(string) --*

      Status information about the instance association.

    - **DetailedStatus** *(string) --*

      Detailed status information about the instance association.

    - **ExecutionSummary** *(string) --*

      Summary information about association execution.

    - **ErrorCode** *(string) --*

      An error code returned by the request to create the association.

    - **OutputUrl** *(dict) --*

      A URL for an Amazon S3 bucket where you want to store the results of this request.

      - **S3OutputUrl** *(dict) --*

        The URL of Amazon S3 bucket where you want to store the results of this request.

        - **OutputUrl** *(string) --*

          A URL for an Amazon S3 bucket where you want to store the results of this request.

    - **AssociationName** *(string) --*

      The name of the association applied to the instance.
    """


_DescribeInstanceAssociationsStatusPaginateResponseTypeDef = TypedDict(
    "_DescribeInstanceAssociationsStatusPaginateResponseTypeDef",
    {
        "InstanceAssociationStatusInfos": List[
            DescribeInstanceAssociationsStatusPaginateResponseInstanceAssociationStatusInfosTypeDef
        ]
    },
    total=False,
)


class DescribeInstanceAssociationsStatusPaginateResponseTypeDef(
    _DescribeInstanceAssociationsStatusPaginateResponseTypeDef
):
    """
    Type definition for `DescribeInstanceAssociationsStatusPaginate` `Response`

    - **InstanceAssociationStatusInfos** *(list) --*

      Status information about the association.

      - *(dict) --*

        Status information about the instance association.

        - **AssociationId** *(string) --*

          The association ID.

        - **Name** *(string) --*

          The name of the association.

        - **DocumentVersion** *(string) --*

          The association document versions.

        - **AssociationVersion** *(string) --*

          The version of the association applied to the instance.

        - **InstanceId** *(string) --*

          The instance ID where the association was created.

        - **ExecutionDate** *(datetime) --*

          The date the instance association ran.

        - **Status** *(string) --*

          Status information about the instance association.

        - **DetailedStatus** *(string) --*

          Detailed status information about the instance association.

        - **ExecutionSummary** *(string) --*

          Summary information about association execution.

        - **ErrorCode** *(string) --*

          An error code returned by the request to create the association.

        - **OutputUrl** *(dict) --*

          A URL for an Amazon S3 bucket where you want to store the results of this request.

          - **S3OutputUrl** *(dict) --*

            The URL of Amazon S3 bucket where you want to store the results of this request.

            - **OutputUrl** *(string) --*

              A URL for an Amazon S3 bucket where you want to store the results of this request.

        - **AssociationName** *(string) --*

          The name of the association applied to the instance.
    """


_DescribeInstanceInformationPaginateFiltersTypeDef = TypedDict(
    "_DescribeInstanceInformationPaginateFiltersTypeDef",
    {"Key": str, "Values": List[str]},
)


class DescribeInstanceInformationPaginateFiltersTypeDef(
    _DescribeInstanceInformationPaginateFiltersTypeDef
):
    """
    Type definition for `DescribeInstanceInformationPaginate` `Filters`

    The filters to describe or get information about your managed instances.

    - **Key** *(string) --* **[REQUIRED]**

      The filter key name to describe your instances. For example:

      "InstanceIds"|"AgentVersion"|"PingStatus"|"PlatformTypes"|"ActivationIds"|"IamRole"
      |"ResourceType"|"AssociationStatus"|"Tag Key"

    - **Values** *(list) --* **[REQUIRED]**

      The filter values.

      - *(string) --*
    """


_DescribeInstanceInformationPaginateInstanceInformationFilterListTypeDef = TypedDict(
    "_DescribeInstanceInformationPaginateInstanceInformationFilterListTypeDef",
    {"key": str, "valueSet": List[str]},
)


class DescribeInstanceInformationPaginateInstanceInformationFilterListTypeDef(
    _DescribeInstanceInformationPaginateInstanceInformationFilterListTypeDef
):
    """
    Type definition for `DescribeInstanceInformationPaginate` `InstanceInformationFilterList`

    Describes a filter for a specific list of instances. You can filter instances information by
    using tags. You specify tags by using a key-value mapping.

    Use this action instead of the
    DescribeInstanceInformationRequest$InstanceInformationFilterList method. The
    ``InstanceInformationFilterList`` method is a legacy method and does not support tags.

    - **key** *(string) --* **[REQUIRED]**

      The name of the filter.

    - **valueSet** *(list) --* **[REQUIRED]**

      The filter values.

      - *(string) --*
    """


_DescribeInstanceInformationPaginatePaginationConfigTypeDef = TypedDict(
    "_DescribeInstanceInformationPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class DescribeInstanceInformationPaginatePaginationConfigTypeDef(
    _DescribeInstanceInformationPaginatePaginationConfigTypeDef
):
    """
    Type definition for `DescribeInstanceInformationPaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_DescribeInstanceInformationPaginateResponseInstanceInformationListAssociationOverviewTypeDef = TypedDict(
    "_DescribeInstanceInformationPaginateResponseInstanceInformationListAssociationOverviewTypeDef",
    {"DetailedStatus": str, "InstanceAssociationStatusAggregatedCount": Dict[str, int]},
    total=False,
)


class DescribeInstanceInformationPaginateResponseInstanceInformationListAssociationOverviewTypeDef(
    _DescribeInstanceInformationPaginateResponseInstanceInformationListAssociationOverviewTypeDef
):
    """
    Type definition for `DescribeInstanceInformationPaginateResponseInstanceInformationList` `AssociationOverview`

    Information about the association.

    - **DetailedStatus** *(string) --*

      Detailed status information about the aggregated associations.

    - **InstanceAssociationStatusAggregatedCount** *(dict) --*

      The number of associations for the instance(s).

      - *(string) --*

        - *(integer) --*
    """


_DescribeInstanceInformationPaginateResponseInstanceInformationListTypeDef = TypedDict(
    "_DescribeInstanceInformationPaginateResponseInstanceInformationListTypeDef",
    {
        "InstanceId": str,
        "PingStatus": str,
        "LastPingDateTime": datetime,
        "AgentVersion": str,
        "IsLatestVersion": bool,
        "PlatformType": str,
        "PlatformName": str,
        "PlatformVersion": str,
        "ActivationId": str,
        "IamRole": str,
        "RegistrationDate": datetime,
        "ResourceType": str,
        "Name": str,
        "IPAddress": str,
        "ComputerName": str,
        "AssociationStatus": str,
        "LastAssociationExecutionDate": datetime,
        "LastSuccessfulAssociationExecutionDate": datetime,
        "AssociationOverview": DescribeInstanceInformationPaginateResponseInstanceInformationListAssociationOverviewTypeDef,
    },
    total=False,
)


class DescribeInstanceInformationPaginateResponseInstanceInformationListTypeDef(
    _DescribeInstanceInformationPaginateResponseInstanceInformationListTypeDef
):
    """
    Type definition for `DescribeInstanceInformationPaginateResponse` `InstanceInformationList`

    Describes a filter for a specific list of instances.

    - **InstanceId** *(string) --*

      The instance ID.

    - **PingStatus** *(string) --*

      Connection status of SSM Agent.

    - **LastPingDateTime** *(datetime) --*

      The date and time when agent last pinged Systems Manager service.

    - **AgentVersion** *(string) --*

      The version of SSM Agent running on your Linux instance.

    - **IsLatestVersion** *(boolean) --*

      Indicates whether the latest version of SSM Agent is running on your Linux Managed
      Instance. This field does not indicate whether or not the latest version is installed on
      Windows managed instances, because some older versions of Windows Server use the
      EC2Config service to process SSM requests.

    - **PlatformType** *(string) --*

      The operating system platform type.

    - **PlatformName** *(string) --*

      The name of the operating system platform running on your instance.

    - **PlatformVersion** *(string) --*

      The version of the OS platform running on your instance.

    - **ActivationId** *(string) --*

      The activation ID created by Systems Manager when the server or VM was registered.

    - **IamRole** *(string) --*

      The Amazon Identity and Access Management (IAM) role assigned to the on-premises Systems
      Manager managed instances. This call does not return the IAM role for Amazon EC2
      instances.

    - **RegistrationDate** *(datetime) --*

      The date the server or VM was registered with AWS as a managed instance.

    - **ResourceType** *(string) --*

      The type of instance. Instances are either EC2 instances or managed instances.

    - **Name** *(string) --*

      The name of the managed instance.

    - **IPAddress** *(string) --*

      The IP address of the managed instance.

    - **ComputerName** *(string) --*

      The fully qualified host name of the managed instance.

    - **AssociationStatus** *(string) --*

      The status of the association.

    - **LastAssociationExecutionDate** *(datetime) --*

      The date the association was last run.

    - **LastSuccessfulAssociationExecutionDate** *(datetime) --*

      The last date the association was successfully run.

    - **AssociationOverview** *(dict) --*

      Information about the association.

      - **DetailedStatus** *(string) --*

        Detailed status information about the aggregated associations.

      - **InstanceAssociationStatusAggregatedCount** *(dict) --*

        The number of associations for the instance(s).

        - *(string) --*

          - *(integer) --*
    """


_DescribeInstanceInformationPaginateResponseTypeDef = TypedDict(
    "_DescribeInstanceInformationPaginateResponseTypeDef",
    {
        "InstanceInformationList": List[
            DescribeInstanceInformationPaginateResponseInstanceInformationListTypeDef
        ]
    },
    total=False,
)


class DescribeInstanceInformationPaginateResponseTypeDef(
    _DescribeInstanceInformationPaginateResponseTypeDef
):
    """
    Type definition for `DescribeInstanceInformationPaginate` `Response`

    - **InstanceInformationList** *(list) --*

      The instance information list.

      - *(dict) --*

        Describes a filter for a specific list of instances.

        - **InstanceId** *(string) --*

          The instance ID.

        - **PingStatus** *(string) --*

          Connection status of SSM Agent.

        - **LastPingDateTime** *(datetime) --*

          The date and time when agent last pinged Systems Manager service.

        - **AgentVersion** *(string) --*

          The version of SSM Agent running on your Linux instance.

        - **IsLatestVersion** *(boolean) --*

          Indicates whether the latest version of SSM Agent is running on your Linux Managed
          Instance. This field does not indicate whether or not the latest version is installed on
          Windows managed instances, because some older versions of Windows Server use the
          EC2Config service to process SSM requests.

        - **PlatformType** *(string) --*

          The operating system platform type.

        - **PlatformName** *(string) --*

          The name of the operating system platform running on your instance.

        - **PlatformVersion** *(string) --*

          The version of the OS platform running on your instance.

        - **ActivationId** *(string) --*

          The activation ID created by Systems Manager when the server or VM was registered.

        - **IamRole** *(string) --*

          The Amazon Identity and Access Management (IAM) role assigned to the on-premises Systems
          Manager managed instances. This call does not return the IAM role for Amazon EC2
          instances.

        - **RegistrationDate** *(datetime) --*

          The date the server or VM was registered with AWS as a managed instance.

        - **ResourceType** *(string) --*

          The type of instance. Instances are either EC2 instances or managed instances.

        - **Name** *(string) --*

          The name of the managed instance.

        - **IPAddress** *(string) --*

          The IP address of the managed instance.

        - **ComputerName** *(string) --*

          The fully qualified host name of the managed instance.

        - **AssociationStatus** *(string) --*

          The status of the association.

        - **LastAssociationExecutionDate** *(datetime) --*

          The date the association was last run.

        - **LastSuccessfulAssociationExecutionDate** *(datetime) --*

          The last date the association was successfully run.

        - **AssociationOverview** *(dict) --*

          Information about the association.

          - **DetailedStatus** *(string) --*

            Detailed status information about the aggregated associations.

          - **InstanceAssociationStatusAggregatedCount** *(dict) --*

            The number of associations for the instance(s).

            - *(string) --*

              - *(integer) --*
    """


_DescribeInstancePatchStatesForPatchGroupPaginateFiltersTypeDef = TypedDict(
    "_DescribeInstancePatchStatesForPatchGroupPaginateFiltersTypeDef",
    {"Key": str, "Values": List[str], "Type": str},
)


class DescribeInstancePatchStatesForPatchGroupPaginateFiltersTypeDef(
    _DescribeInstancePatchStatesForPatchGroupPaginateFiltersTypeDef
):
    """
    Type definition for `DescribeInstancePatchStatesForPatchGroupPaginate` `Filters`

    Defines a filter used in DescribeInstancePatchStatesForPatchGroup used to scope down the
    information returned by the API.

    - **Key** *(string) --* **[REQUIRED]**

      The key for the filter. Supported values are FailedCount, InstalledCount,
      InstalledOtherCount, MissingCount and NotApplicableCount.

    - **Values** *(list) --* **[REQUIRED]**

      The value for the filter, must be an integer greater than or equal to 0.

      - *(string) --*

    - **Type** *(string) --* **[REQUIRED]**

      The type of comparison that should be performed for the value: Equal, NotEqual, LessThan or
      GreaterThan.
    """


_DescribeInstancePatchStatesForPatchGroupPaginatePaginationConfigTypeDef = TypedDict(
    "_DescribeInstancePatchStatesForPatchGroupPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class DescribeInstancePatchStatesForPatchGroupPaginatePaginationConfigTypeDef(
    _DescribeInstancePatchStatesForPatchGroupPaginatePaginationConfigTypeDef
):
    """
    Type definition for `DescribeInstancePatchStatesForPatchGroupPaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_DescribeInstancePatchStatesForPatchGroupPaginateResponseInstancePatchStatesTypeDef = TypedDict(
    "_DescribeInstancePatchStatesForPatchGroupPaginateResponseInstancePatchStatesTypeDef",
    {
        "InstanceId": str,
        "PatchGroup": str,
        "BaselineId": str,
        "SnapshotId": str,
        "InstallOverrideList": str,
        "OwnerInformation": str,
        "InstalledCount": int,
        "InstalledOtherCount": int,
        "InstalledRejectedCount": int,
        "MissingCount": int,
        "FailedCount": int,
        "UnreportedNotApplicableCount": int,
        "NotApplicableCount": int,
        "OperationStartTime": datetime,
        "OperationEndTime": datetime,
        "Operation": str,
    },
    total=False,
)


class DescribeInstancePatchStatesForPatchGroupPaginateResponseInstancePatchStatesTypeDef(
    _DescribeInstancePatchStatesForPatchGroupPaginateResponseInstancePatchStatesTypeDef
):
    """
    Type definition for `DescribeInstancePatchStatesForPatchGroupPaginateResponse` `InstancePatchStates`

    Defines the high-level patch compliance state for a managed instance, providing information
    about the number of installed, missing, not applicable, and failed patches along with
    metadata about the operation when this information was gathered for the instance.

    - **InstanceId** *(string) --*

      The ID of the managed instance the high-level patch compliance information was collected
      for.

    - **PatchGroup** *(string) --*

      The name of the patch group the managed instance belongs to.

    - **BaselineId** *(string) --*

      The ID of the patch baseline used to patch the instance.

    - **SnapshotId** *(string) --*

      The ID of the patch baseline snapshot used during the patching operation when this
      compliance data was collected.

    - **InstallOverrideList** *(string) --*

      An https URL or an Amazon S3 path-style URL to a list of patches to be installed. This
      patch installation list, which you maintain in an Amazon S3 bucket in YAML format and
      specify in the SSM document ``AWS-RunPatchBaseline`` , overrides the patches specified by
      the default patch baseline.

      For more information about the ``InstallOverrideList`` parameter, see `About the SSM
      Document AWS-RunPatchBaseline
      <http://docs.aws.amazon.com/systems-manager/latest/userguide/patch-manager-about-aws-runpatchbaseline.html>`__
      in the *AWS Systems Manager User Guide* .

    - **OwnerInformation** *(string) --*

      Placeholder information. This field will always be empty in the current release of the
      service.

    - **InstalledCount** *(integer) --*

      The number of patches from the patch baseline that are installed on the instance.

    - **InstalledOtherCount** *(integer) --*

      The number of patches not specified in the patch baseline that are installed on the
      instance.

    - **InstalledRejectedCount** *(integer) --*

      The number of instances with patches installed that are specified in a RejectedPatches
      list. Patches with a status of *InstalledRejected* were typically installed before they
      were added to a RejectedPatches list.

      .. note::

        If ALLOW_AS_DEPENDENCY is the specified option for RejectedPatchesAction, the value of
        InstalledRejectedCount will always be 0 (zero).

    - **MissingCount** *(integer) --*

      The number of patches from the patch baseline that are applicable for the instance but
      aren't currently installed.

    - **FailedCount** *(integer) --*

      The number of patches from the patch baseline that were attempted to be installed during
      the last patching operation, but failed to install.

    - **UnreportedNotApplicableCount** *(integer) --*

      The number of patches beyond the supported limit of ``NotApplicableCount`` that are not
      reported by name to Systems Manager Inventory.

    - **NotApplicableCount** *(integer) --*

      The number of patches from the patch baseline that aren't applicable for the instance and
      therefore aren't installed on the instance. This number may be truncated if the list of
      patch names is very large. The number of patches beyond this limit are reported in
      ``UnreportedNotApplicableCount`` .

    - **OperationStartTime** *(datetime) --*

      The time the most recent patching operation was started on the instance.

    - **OperationEndTime** *(datetime) --*

      The time the most recent patching operation completed on the instance.

    - **Operation** *(string) --*

      The type of patching operation that was performed: SCAN (assess patch compliance state)
      or INSTALL (install missing patches).
    """


_DescribeInstancePatchStatesForPatchGroupPaginateResponseTypeDef = TypedDict(
    "_DescribeInstancePatchStatesForPatchGroupPaginateResponseTypeDef",
    {
        "InstancePatchStates": List[
            DescribeInstancePatchStatesForPatchGroupPaginateResponseInstancePatchStatesTypeDef
        ]
    },
    total=False,
)


class DescribeInstancePatchStatesForPatchGroupPaginateResponseTypeDef(
    _DescribeInstancePatchStatesForPatchGroupPaginateResponseTypeDef
):
    """
    Type definition for `DescribeInstancePatchStatesForPatchGroupPaginate` `Response`

    - **InstancePatchStates** *(list) --*

      The high-level patch state for the requested instances.

      - *(dict) --*

        Defines the high-level patch compliance state for a managed instance, providing information
        about the number of installed, missing, not applicable, and failed patches along with
        metadata about the operation when this information was gathered for the instance.

        - **InstanceId** *(string) --*

          The ID of the managed instance the high-level patch compliance information was collected
          for.

        - **PatchGroup** *(string) --*

          The name of the patch group the managed instance belongs to.

        - **BaselineId** *(string) --*

          The ID of the patch baseline used to patch the instance.

        - **SnapshotId** *(string) --*

          The ID of the patch baseline snapshot used during the patching operation when this
          compliance data was collected.

        - **InstallOverrideList** *(string) --*

          An https URL or an Amazon S3 path-style URL to a list of patches to be installed. This
          patch installation list, which you maintain in an Amazon S3 bucket in YAML format and
          specify in the SSM document ``AWS-RunPatchBaseline`` , overrides the patches specified by
          the default patch baseline.

          For more information about the ``InstallOverrideList`` parameter, see `About the SSM
          Document AWS-RunPatchBaseline
          <http://docs.aws.amazon.com/systems-manager/latest/userguide/patch-manager-about-aws-runpatchbaseline.html>`__
          in the *AWS Systems Manager User Guide* .

        - **OwnerInformation** *(string) --*

          Placeholder information. This field will always be empty in the current release of the
          service.

        - **InstalledCount** *(integer) --*

          The number of patches from the patch baseline that are installed on the instance.

        - **InstalledOtherCount** *(integer) --*

          The number of patches not specified in the patch baseline that are installed on the
          instance.

        - **InstalledRejectedCount** *(integer) --*

          The number of instances with patches installed that are specified in a RejectedPatches
          list. Patches with a status of *InstalledRejected* were typically installed before they
          were added to a RejectedPatches list.

          .. note::

            If ALLOW_AS_DEPENDENCY is the specified option for RejectedPatchesAction, the value of
            InstalledRejectedCount will always be 0 (zero).

        - **MissingCount** *(integer) --*

          The number of patches from the patch baseline that are applicable for the instance but
          aren't currently installed.

        - **FailedCount** *(integer) --*

          The number of patches from the patch baseline that were attempted to be installed during
          the last patching operation, but failed to install.

        - **UnreportedNotApplicableCount** *(integer) --*

          The number of patches beyond the supported limit of ``NotApplicableCount`` that are not
          reported by name to Systems Manager Inventory.

        - **NotApplicableCount** *(integer) --*

          The number of patches from the patch baseline that aren't applicable for the instance and
          therefore aren't installed on the instance. This number may be truncated if the list of
          patch names is very large. The number of patches beyond this limit are reported in
          ``UnreportedNotApplicableCount`` .

        - **OperationStartTime** *(datetime) --*

          The time the most recent patching operation was started on the instance.

        - **OperationEndTime** *(datetime) --*

          The time the most recent patching operation completed on the instance.

        - **Operation** *(string) --*

          The type of patching operation that was performed: SCAN (assess patch compliance state)
          or INSTALL (install missing patches).
    """


_DescribeInstancePatchStatesPaginatePaginationConfigTypeDef = TypedDict(
    "_DescribeInstancePatchStatesPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class DescribeInstancePatchStatesPaginatePaginationConfigTypeDef(
    _DescribeInstancePatchStatesPaginatePaginationConfigTypeDef
):
    """
    Type definition for `DescribeInstancePatchStatesPaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_DescribeInstancePatchStatesPaginateResponseInstancePatchStatesTypeDef = TypedDict(
    "_DescribeInstancePatchStatesPaginateResponseInstancePatchStatesTypeDef",
    {
        "InstanceId": str,
        "PatchGroup": str,
        "BaselineId": str,
        "SnapshotId": str,
        "InstallOverrideList": str,
        "OwnerInformation": str,
        "InstalledCount": int,
        "InstalledOtherCount": int,
        "InstalledRejectedCount": int,
        "MissingCount": int,
        "FailedCount": int,
        "UnreportedNotApplicableCount": int,
        "NotApplicableCount": int,
        "OperationStartTime": datetime,
        "OperationEndTime": datetime,
        "Operation": str,
    },
    total=False,
)


class DescribeInstancePatchStatesPaginateResponseInstancePatchStatesTypeDef(
    _DescribeInstancePatchStatesPaginateResponseInstancePatchStatesTypeDef
):
    """
    Type definition for `DescribeInstancePatchStatesPaginateResponse` `InstancePatchStates`

    Defines the high-level patch compliance state for a managed instance, providing information
    about the number of installed, missing, not applicable, and failed patches along with
    metadata about the operation when this information was gathered for the instance.

    - **InstanceId** *(string) --*

      The ID of the managed instance the high-level patch compliance information was collected
      for.

    - **PatchGroup** *(string) --*

      The name of the patch group the managed instance belongs to.

    - **BaselineId** *(string) --*

      The ID of the patch baseline used to patch the instance.

    - **SnapshotId** *(string) --*

      The ID of the patch baseline snapshot used during the patching operation when this
      compliance data was collected.

    - **InstallOverrideList** *(string) --*

      An https URL or an Amazon S3 path-style URL to a list of patches to be installed. This
      patch installation list, which you maintain in an Amazon S3 bucket in YAML format and
      specify in the SSM document ``AWS-RunPatchBaseline`` , overrides the patches specified by
      the default patch baseline.

      For more information about the ``InstallOverrideList`` parameter, see `About the SSM
      Document AWS-RunPatchBaseline
      <http://docs.aws.amazon.com/systems-manager/latest/userguide/patch-manager-about-aws-runpatchbaseline.html>`__
      in the *AWS Systems Manager User Guide* .

    - **OwnerInformation** *(string) --*

      Placeholder information. This field will always be empty in the current release of the
      service.

    - **InstalledCount** *(integer) --*

      The number of patches from the patch baseline that are installed on the instance.

    - **InstalledOtherCount** *(integer) --*

      The number of patches not specified in the patch baseline that are installed on the
      instance.

    - **InstalledRejectedCount** *(integer) --*

      The number of instances with patches installed that are specified in a RejectedPatches
      list. Patches with a status of *InstalledRejected* were typically installed before they
      were added to a RejectedPatches list.

      .. note::

        If ALLOW_AS_DEPENDENCY is the specified option for RejectedPatchesAction, the value of
        InstalledRejectedCount will always be 0 (zero).

    - **MissingCount** *(integer) --*

      The number of patches from the patch baseline that are applicable for the instance but
      aren't currently installed.

    - **FailedCount** *(integer) --*

      The number of patches from the patch baseline that were attempted to be installed during
      the last patching operation, but failed to install.

    - **UnreportedNotApplicableCount** *(integer) --*

      The number of patches beyond the supported limit of ``NotApplicableCount`` that are not
      reported by name to Systems Manager Inventory.

    - **NotApplicableCount** *(integer) --*

      The number of patches from the patch baseline that aren't applicable for the instance and
      therefore aren't installed on the instance. This number may be truncated if the list of
      patch names is very large. The number of patches beyond this limit are reported in
      ``UnreportedNotApplicableCount`` .

    - **OperationStartTime** *(datetime) --*

      The time the most recent patching operation was started on the instance.

    - **OperationEndTime** *(datetime) --*

      The time the most recent patching operation completed on the instance.

    - **Operation** *(string) --*

      The type of patching operation that was performed: SCAN (assess patch compliance state)
      or INSTALL (install missing patches).
    """


_DescribeInstancePatchStatesPaginateResponseTypeDef = TypedDict(
    "_DescribeInstancePatchStatesPaginateResponseTypeDef",
    {
        "InstancePatchStates": List[
            DescribeInstancePatchStatesPaginateResponseInstancePatchStatesTypeDef
        ]
    },
    total=False,
)


class DescribeInstancePatchStatesPaginateResponseTypeDef(
    _DescribeInstancePatchStatesPaginateResponseTypeDef
):
    """
    Type definition for `DescribeInstancePatchStatesPaginate` `Response`

    - **InstancePatchStates** *(list) --*

      The high-level patch state for the requested instances.

      - *(dict) --*

        Defines the high-level patch compliance state for a managed instance, providing information
        about the number of installed, missing, not applicable, and failed patches along with
        metadata about the operation when this information was gathered for the instance.

        - **InstanceId** *(string) --*

          The ID of the managed instance the high-level patch compliance information was collected
          for.

        - **PatchGroup** *(string) --*

          The name of the patch group the managed instance belongs to.

        - **BaselineId** *(string) --*

          The ID of the patch baseline used to patch the instance.

        - **SnapshotId** *(string) --*

          The ID of the patch baseline snapshot used during the patching operation when this
          compliance data was collected.

        - **InstallOverrideList** *(string) --*

          An https URL or an Amazon S3 path-style URL to a list of patches to be installed. This
          patch installation list, which you maintain in an Amazon S3 bucket in YAML format and
          specify in the SSM document ``AWS-RunPatchBaseline`` , overrides the patches specified by
          the default patch baseline.

          For more information about the ``InstallOverrideList`` parameter, see `About the SSM
          Document AWS-RunPatchBaseline
          <http://docs.aws.amazon.com/systems-manager/latest/userguide/patch-manager-about-aws-runpatchbaseline.html>`__
          in the *AWS Systems Manager User Guide* .

        - **OwnerInformation** *(string) --*

          Placeholder information. This field will always be empty in the current release of the
          service.

        - **InstalledCount** *(integer) --*

          The number of patches from the patch baseline that are installed on the instance.

        - **InstalledOtherCount** *(integer) --*

          The number of patches not specified in the patch baseline that are installed on the
          instance.

        - **InstalledRejectedCount** *(integer) --*

          The number of instances with patches installed that are specified in a RejectedPatches
          list. Patches with a status of *InstalledRejected* were typically installed before they
          were added to a RejectedPatches list.

          .. note::

            If ALLOW_AS_DEPENDENCY is the specified option for RejectedPatchesAction, the value of
            InstalledRejectedCount will always be 0 (zero).

        - **MissingCount** *(integer) --*

          The number of patches from the patch baseline that are applicable for the instance but
          aren't currently installed.

        - **FailedCount** *(integer) --*

          The number of patches from the patch baseline that were attempted to be installed during
          the last patching operation, but failed to install.

        - **UnreportedNotApplicableCount** *(integer) --*

          The number of patches beyond the supported limit of ``NotApplicableCount`` that are not
          reported by name to Systems Manager Inventory.

        - **NotApplicableCount** *(integer) --*

          The number of patches from the patch baseline that aren't applicable for the instance and
          therefore aren't installed on the instance. This number may be truncated if the list of
          patch names is very large. The number of patches beyond this limit are reported in
          ``UnreportedNotApplicableCount`` .

        - **OperationStartTime** *(datetime) --*

          The time the most recent patching operation was started on the instance.

        - **OperationEndTime** *(datetime) --*

          The time the most recent patching operation completed on the instance.

        - **Operation** *(string) --*

          The type of patching operation that was performed: SCAN (assess patch compliance state)
          or INSTALL (install missing patches).
    """


_DescribeInstancePatchesPaginateFiltersTypeDef = TypedDict(
    "_DescribeInstancePatchesPaginateFiltersTypeDef",
    {"Key": str, "Values": List[str]},
    total=False,
)


class DescribeInstancePatchesPaginateFiltersTypeDef(
    _DescribeInstancePatchesPaginateFiltersTypeDef
):
    """
    Type definition for `DescribeInstancePatchesPaginate` `Filters`

    Defines a filter used in Patch Manager APIs.

    - **Key** *(string) --*

      The key for the filter.

    - **Values** *(list) --*

      The value for the filter.

      - *(string) --*
    """


_DescribeInstancePatchesPaginatePaginationConfigTypeDef = TypedDict(
    "_DescribeInstancePatchesPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class DescribeInstancePatchesPaginatePaginationConfigTypeDef(
    _DescribeInstancePatchesPaginatePaginationConfigTypeDef
):
    """
    Type definition for `DescribeInstancePatchesPaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_DescribeInstancePatchesPaginateResponsePatchesTypeDef = TypedDict(
    "_DescribeInstancePatchesPaginateResponsePatchesTypeDef",
    {
        "Title": str,
        "KBId": str,
        "Classification": str,
        "Severity": str,
        "State": str,
        "InstalledTime": datetime,
    },
    total=False,
)


class DescribeInstancePatchesPaginateResponsePatchesTypeDef(
    _DescribeInstancePatchesPaginateResponsePatchesTypeDef
):
    """
    Type definition for `DescribeInstancePatchesPaginateResponse` `Patches`

    Information about the state of a patch on a particular instance as it relates to the patch
    baseline used to patch the instance.

    - **Title** *(string) --*

      The title of the patch.

    - **KBId** *(string) --*

      The operating system-specific ID of the patch.

    - **Classification** *(string) --*

      The classification of the patch (for example, SecurityUpdates, Updates, CriticalUpdates).

    - **Severity** *(string) --*

      The severity of the patch (for example, Critical, Important, Moderate).

    - **State** *(string) --*

      The state of the patch on the instance, such as INSTALLED or FAILED.

      For descriptions of each patch state, see `About Patch Compliance
      <http://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-compliance-about.html#sysman-compliance-monitor-patch>`__
      in the *AWS Systems Manager User Guide* .

    - **InstalledTime** *(datetime) --*

      The date/time the patch was installed on the instance. Note that not all operating
      systems provide this level of information.
    """


_DescribeInstancePatchesPaginateResponseTypeDef = TypedDict(
    "_DescribeInstancePatchesPaginateResponseTypeDef",
    {"Patches": List[DescribeInstancePatchesPaginateResponsePatchesTypeDef]},
    total=False,
)


class DescribeInstancePatchesPaginateResponseTypeDef(
    _DescribeInstancePatchesPaginateResponseTypeDef
):
    """
    Type definition for `DescribeInstancePatchesPaginate` `Response`

    - **Patches** *(list) --*

      Each entry in the array is a structure containing:

      Title (string)

      KBId (string)

      Classification (string)

      Severity (string)

      State (string, such as "INSTALLED" or "FAILED")

      InstalledTime (DateTime)

      InstalledBy (string)

      - *(dict) --*

        Information about the state of a patch on a particular instance as it relates to the patch
        baseline used to patch the instance.

        - **Title** *(string) --*

          The title of the patch.

        - **KBId** *(string) --*

          The operating system-specific ID of the patch.

        - **Classification** *(string) --*

          The classification of the patch (for example, SecurityUpdates, Updates, CriticalUpdates).

        - **Severity** *(string) --*

          The severity of the patch (for example, Critical, Important, Moderate).

        - **State** *(string) --*

          The state of the patch on the instance, such as INSTALLED or FAILED.

          For descriptions of each patch state, see `About Patch Compliance
          <http://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-compliance-about.html#sysman-compliance-monitor-patch>`__
          in the *AWS Systems Manager User Guide* .

        - **InstalledTime** *(datetime) --*

          The date/time the patch was installed on the instance. Note that not all operating
          systems provide this level of information.
    """


_DescribeInventoryDeletionsPaginatePaginationConfigTypeDef = TypedDict(
    "_DescribeInventoryDeletionsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class DescribeInventoryDeletionsPaginatePaginationConfigTypeDef(
    _DescribeInventoryDeletionsPaginatePaginationConfigTypeDef
):
    """
    Type definition for `DescribeInventoryDeletionsPaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_DescribeInventoryDeletionsPaginateResponseInventoryDeletionsDeletionSummarySummaryItemsTypeDef = TypedDict(
    "_DescribeInventoryDeletionsPaginateResponseInventoryDeletionsDeletionSummarySummaryItemsTypeDef",
    {"Version": str, "Count": int, "RemainingCount": int},
    total=False,
)


class DescribeInventoryDeletionsPaginateResponseInventoryDeletionsDeletionSummarySummaryItemsTypeDef(
    _DescribeInventoryDeletionsPaginateResponseInventoryDeletionsDeletionSummarySummaryItemsTypeDef
):
    """
    Type definition for `DescribeInventoryDeletionsPaginateResponseInventoryDeletionsDeletionSummary` `SummaryItems`

    Either a count, remaining count, or a version number in a delete inventory summary.

    - **Version** *(string) --*

      The inventory type version.

    - **Count** *(integer) --*

      A count of the number of deleted items.

    - **RemainingCount** *(integer) --*

      The remaining number of items to delete.
    """


_DescribeInventoryDeletionsPaginateResponseInventoryDeletionsDeletionSummaryTypeDef = TypedDict(
    "_DescribeInventoryDeletionsPaginateResponseInventoryDeletionsDeletionSummaryTypeDef",
    {
        "TotalCount": int,
        "RemainingCount": int,
        "SummaryItems": List[
            DescribeInventoryDeletionsPaginateResponseInventoryDeletionsDeletionSummarySummaryItemsTypeDef
        ],
    },
    total=False,
)


class DescribeInventoryDeletionsPaginateResponseInventoryDeletionsDeletionSummaryTypeDef(
    _DescribeInventoryDeletionsPaginateResponseInventoryDeletionsDeletionSummaryTypeDef
):
    """
    Type definition for `DescribeInventoryDeletionsPaginateResponseInventoryDeletions` `DeletionSummary`

    Information about the delete operation. For more information about this summary, see
    `Understanding the Delete Inventory Summary
    <http://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-inventory-custom.html#sysman-inventory-delete>`__
    in the *AWS Systems Manager User Guide* .

    - **TotalCount** *(integer) --*

      The total number of items to delete. This count does not change during the delete
      operation.

    - **RemainingCount** *(integer) --*

      Remaining number of items to delete.

    - **SummaryItems** *(list) --*

      A list of counts and versions for deleted items.

      - *(dict) --*

        Either a count, remaining count, or a version number in a delete inventory summary.

        - **Version** *(string) --*

          The inventory type version.

        - **Count** *(integer) --*

          A count of the number of deleted items.

        - **RemainingCount** *(integer) --*

          The remaining number of items to delete.
    """


_DescribeInventoryDeletionsPaginateResponseInventoryDeletionsTypeDef = TypedDict(
    "_DescribeInventoryDeletionsPaginateResponseInventoryDeletionsTypeDef",
    {
        "DeletionId": str,
        "TypeName": str,
        "DeletionStartTime": datetime,
        "LastStatus": str,
        "LastStatusMessage": str,
        "DeletionSummary": DescribeInventoryDeletionsPaginateResponseInventoryDeletionsDeletionSummaryTypeDef,
        "LastStatusUpdateTime": datetime,
    },
    total=False,
)


class DescribeInventoryDeletionsPaginateResponseInventoryDeletionsTypeDef(
    _DescribeInventoryDeletionsPaginateResponseInventoryDeletionsTypeDef
):
    """
    Type definition for `DescribeInventoryDeletionsPaginateResponse` `InventoryDeletions`

    Status information returned by the ``DeleteInventory`` action.

    - **DeletionId** *(string) --*

      The deletion ID returned by the ``DeleteInventory`` action.

    - **TypeName** *(string) --*

      The name of the inventory data type.

    - **DeletionStartTime** *(datetime) --*

      The UTC timestamp when the delete operation started.

    - **LastStatus** *(string) --*

      The status of the operation. Possible values are InProgress and Complete.

    - **LastStatusMessage** *(string) --*

      Information about the status.

    - **DeletionSummary** *(dict) --*

      Information about the delete operation. For more information about this summary, see
      `Understanding the Delete Inventory Summary
      <http://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-inventory-custom.html#sysman-inventory-delete>`__
      in the *AWS Systems Manager User Guide* .

      - **TotalCount** *(integer) --*

        The total number of items to delete. This count does not change during the delete
        operation.

      - **RemainingCount** *(integer) --*

        Remaining number of items to delete.

      - **SummaryItems** *(list) --*

        A list of counts and versions for deleted items.

        - *(dict) --*

          Either a count, remaining count, or a version number in a delete inventory summary.

          - **Version** *(string) --*

            The inventory type version.

          - **Count** *(integer) --*

            A count of the number of deleted items.

          - **RemainingCount** *(integer) --*

            The remaining number of items to delete.

    - **LastStatusUpdateTime** *(datetime) --*

      The UTC timestamp of when the last status report.
    """


_DescribeInventoryDeletionsPaginateResponseTypeDef = TypedDict(
    "_DescribeInventoryDeletionsPaginateResponseTypeDef",
    {
        "InventoryDeletions": List[
            DescribeInventoryDeletionsPaginateResponseInventoryDeletionsTypeDef
        ]
    },
    total=False,
)


class DescribeInventoryDeletionsPaginateResponseTypeDef(
    _DescribeInventoryDeletionsPaginateResponseTypeDef
):
    """
    Type definition for `DescribeInventoryDeletionsPaginate` `Response`

    - **InventoryDeletions** *(list) --*

      A list of status items for deleted inventory.

      - *(dict) --*

        Status information returned by the ``DeleteInventory`` action.

        - **DeletionId** *(string) --*

          The deletion ID returned by the ``DeleteInventory`` action.

        - **TypeName** *(string) --*

          The name of the inventory data type.

        - **DeletionStartTime** *(datetime) --*

          The UTC timestamp when the delete operation started.

        - **LastStatus** *(string) --*

          The status of the operation. Possible values are InProgress and Complete.

        - **LastStatusMessage** *(string) --*

          Information about the status.

        - **DeletionSummary** *(dict) --*

          Information about the delete operation. For more information about this summary, see
          `Understanding the Delete Inventory Summary
          <http://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-inventory-custom.html#sysman-inventory-delete>`__
          in the *AWS Systems Manager User Guide* .

          - **TotalCount** *(integer) --*

            The total number of items to delete. This count does not change during the delete
            operation.

          - **RemainingCount** *(integer) --*

            Remaining number of items to delete.

          - **SummaryItems** *(list) --*

            A list of counts and versions for deleted items.

            - *(dict) --*

              Either a count, remaining count, or a version number in a delete inventory summary.

              - **Version** *(string) --*

                The inventory type version.

              - **Count** *(integer) --*

                A count of the number of deleted items.

              - **RemainingCount** *(integer) --*

                The remaining number of items to delete.

        - **LastStatusUpdateTime** *(datetime) --*

          The UTC timestamp of when the last status report.
    """


_DescribeMaintenanceWindowExecutionTaskInvocationsPaginateFiltersTypeDef = TypedDict(
    "_DescribeMaintenanceWindowExecutionTaskInvocationsPaginateFiltersTypeDef",
    {"Key": str, "Values": List[str]},
    total=False,
)


class DescribeMaintenanceWindowExecutionTaskInvocationsPaginateFiltersTypeDef(
    _DescribeMaintenanceWindowExecutionTaskInvocationsPaginateFiltersTypeDef
):
    """
    Type definition for `DescribeMaintenanceWindowExecutionTaskInvocationsPaginate` `Filters`

    Filter used in the request. Supported filter keys are Name and Enabled.

    - **Key** *(string) --*

      The name of the filter.

    - **Values** *(list) --*

      The filter values.

      - *(string) --*
    """


_DescribeMaintenanceWindowExecutionTaskInvocationsPaginatePaginationConfigTypeDef = TypedDict(
    "_DescribeMaintenanceWindowExecutionTaskInvocationsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class DescribeMaintenanceWindowExecutionTaskInvocationsPaginatePaginationConfigTypeDef(
    _DescribeMaintenanceWindowExecutionTaskInvocationsPaginatePaginationConfigTypeDef
):
    """
    Type definition for `DescribeMaintenanceWindowExecutionTaskInvocationsPaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_DescribeMaintenanceWindowExecutionTaskInvocationsPaginateResponseWindowExecutionTaskInvocationIdentitiesTypeDef = TypedDict(
    "_DescribeMaintenanceWindowExecutionTaskInvocationsPaginateResponseWindowExecutionTaskInvocationIdentitiesTypeDef",
    {
        "WindowExecutionId": str,
        "TaskExecutionId": str,
        "InvocationId": str,
        "ExecutionId": str,
        "TaskType": str,
        "Parameters": str,
        "Status": str,
        "StatusDetails": str,
        "StartTime": datetime,
        "EndTime": datetime,
        "OwnerInformation": str,
        "WindowTargetId": str,
    },
    total=False,
)


class DescribeMaintenanceWindowExecutionTaskInvocationsPaginateResponseWindowExecutionTaskInvocationIdentitiesTypeDef(
    _DescribeMaintenanceWindowExecutionTaskInvocationsPaginateResponseWindowExecutionTaskInvocationIdentitiesTypeDef
):
    """
    Type definition for `DescribeMaintenanceWindowExecutionTaskInvocationsPaginateResponse` `WindowExecutionTaskInvocationIdentities`

    Describes the information about a task invocation for a particular target as part of a task
    execution performed as part of a maintenance window execution.

    - **WindowExecutionId** *(string) --*

      The ID of the maintenance window execution that ran the task.

    - **TaskExecutionId** *(string) --*

      The ID of the specific task execution in the maintenance window execution.

    - **InvocationId** *(string) --*

      The ID of the task invocation.

    - **ExecutionId** *(string) --*

      The ID of the action performed in the service that actually handled the task invocation.
      If the task type is RUN_COMMAND, this value is the command ID.

    - **TaskType** *(string) --*

      The task type.

    - **Parameters** *(string) --*

      The parameters that were provided for the invocation when it was run.

    - **Status** *(string) --*

      The status of the task invocation.

    - **StatusDetails** *(string) --*

      The details explaining the status of the task invocation. Only available for certain
      Status values.

    - **StartTime** *(datetime) --*

      The time the invocation started.

    - **EndTime** *(datetime) --*

      The time the invocation finished.

    - **OwnerInformation** *(string) --*

      User-provided value that was specified when the target was registered with the
      maintenance window. This was also included in any CloudWatch events raised during the
      task invocation.

    - **WindowTargetId** *(string) --*

      The ID of the target definition in this maintenance window the invocation was performed
      for.
    """


_DescribeMaintenanceWindowExecutionTaskInvocationsPaginateResponseTypeDef = TypedDict(
    "_DescribeMaintenanceWindowExecutionTaskInvocationsPaginateResponseTypeDef",
    {
        "WindowExecutionTaskInvocationIdentities": List[
            DescribeMaintenanceWindowExecutionTaskInvocationsPaginateResponseWindowExecutionTaskInvocationIdentitiesTypeDef
        ]
    },
    total=False,
)


class DescribeMaintenanceWindowExecutionTaskInvocationsPaginateResponseTypeDef(
    _DescribeMaintenanceWindowExecutionTaskInvocationsPaginateResponseTypeDef
):
    """
    Type definition for `DescribeMaintenanceWindowExecutionTaskInvocationsPaginate` `Response`

    - **WindowExecutionTaskInvocationIdentities** *(list) --*

      Information about the task invocation results per invocation.

      - *(dict) --*

        Describes the information about a task invocation for a particular target as part of a task
        execution performed as part of a maintenance window execution.

        - **WindowExecutionId** *(string) --*

          The ID of the maintenance window execution that ran the task.

        - **TaskExecutionId** *(string) --*

          The ID of the specific task execution in the maintenance window execution.

        - **InvocationId** *(string) --*

          The ID of the task invocation.

        - **ExecutionId** *(string) --*

          The ID of the action performed in the service that actually handled the task invocation.
          If the task type is RUN_COMMAND, this value is the command ID.

        - **TaskType** *(string) --*

          The task type.

        - **Parameters** *(string) --*

          The parameters that were provided for the invocation when it was run.

        - **Status** *(string) --*

          The status of the task invocation.

        - **StatusDetails** *(string) --*

          The details explaining the status of the task invocation. Only available for certain
          Status values.

        - **StartTime** *(datetime) --*

          The time the invocation started.

        - **EndTime** *(datetime) --*

          The time the invocation finished.

        - **OwnerInformation** *(string) --*

          User-provided value that was specified when the target was registered with the
          maintenance window. This was also included in any CloudWatch events raised during the
          task invocation.

        - **WindowTargetId** *(string) --*

          The ID of the target definition in this maintenance window the invocation was performed
          for.
    """


_DescribeMaintenanceWindowExecutionTasksPaginateFiltersTypeDef = TypedDict(
    "_DescribeMaintenanceWindowExecutionTasksPaginateFiltersTypeDef",
    {"Key": str, "Values": List[str]},
    total=False,
)


class DescribeMaintenanceWindowExecutionTasksPaginateFiltersTypeDef(
    _DescribeMaintenanceWindowExecutionTasksPaginateFiltersTypeDef
):
    """
    Type definition for `DescribeMaintenanceWindowExecutionTasksPaginate` `Filters`

    Filter used in the request. Supported filter keys are Name and Enabled.

    - **Key** *(string) --*

      The name of the filter.

    - **Values** *(list) --*

      The filter values.

      - *(string) --*
    """


_DescribeMaintenanceWindowExecutionTasksPaginatePaginationConfigTypeDef = TypedDict(
    "_DescribeMaintenanceWindowExecutionTasksPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class DescribeMaintenanceWindowExecutionTasksPaginatePaginationConfigTypeDef(
    _DescribeMaintenanceWindowExecutionTasksPaginatePaginationConfigTypeDef
):
    """
    Type definition for `DescribeMaintenanceWindowExecutionTasksPaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_DescribeMaintenanceWindowExecutionTasksPaginateResponseWindowExecutionTaskIdentitiesTypeDef = TypedDict(
    "_DescribeMaintenanceWindowExecutionTasksPaginateResponseWindowExecutionTaskIdentitiesTypeDef",
    {
        "WindowExecutionId": str,
        "TaskExecutionId": str,
        "Status": str,
        "StatusDetails": str,
        "StartTime": datetime,
        "EndTime": datetime,
        "TaskArn": str,
        "TaskType": str,
    },
    total=False,
)


class DescribeMaintenanceWindowExecutionTasksPaginateResponseWindowExecutionTaskIdentitiesTypeDef(
    _DescribeMaintenanceWindowExecutionTasksPaginateResponseWindowExecutionTaskIdentitiesTypeDef
):
    """
    Type definition for `DescribeMaintenanceWindowExecutionTasksPaginateResponse` `WindowExecutionTaskIdentities`

    Information about a task execution performed as part of a maintenance window execution.

    - **WindowExecutionId** *(string) --*

      The ID of the maintenance window execution that ran the task.

    - **TaskExecutionId** *(string) --*

      The ID of the specific task execution in the maintenance window execution.

    - **Status** *(string) --*

      The status of the task execution.

    - **StatusDetails** *(string) --*

      The details explaining the status of the task execution. Only available for certain
      status values.

    - **StartTime** *(datetime) --*

      The time the task execution started.

    - **EndTime** *(datetime) --*

      The time the task execution finished.

    - **TaskArn** *(string) --*

      The ARN of the task that ran.

    - **TaskType** *(string) --*

      The type of task that ran.
    """


_DescribeMaintenanceWindowExecutionTasksPaginateResponseTypeDef = TypedDict(
    "_DescribeMaintenanceWindowExecutionTasksPaginateResponseTypeDef",
    {
        "WindowExecutionTaskIdentities": List[
            DescribeMaintenanceWindowExecutionTasksPaginateResponseWindowExecutionTaskIdentitiesTypeDef
        ]
    },
    total=False,
)


class DescribeMaintenanceWindowExecutionTasksPaginateResponseTypeDef(
    _DescribeMaintenanceWindowExecutionTasksPaginateResponseTypeDef
):
    """
    Type definition for `DescribeMaintenanceWindowExecutionTasksPaginate` `Response`

    - **WindowExecutionTaskIdentities** *(list) --*

      Information about the task executions.

      - *(dict) --*

        Information about a task execution performed as part of a maintenance window execution.

        - **WindowExecutionId** *(string) --*

          The ID of the maintenance window execution that ran the task.

        - **TaskExecutionId** *(string) --*

          The ID of the specific task execution in the maintenance window execution.

        - **Status** *(string) --*

          The status of the task execution.

        - **StatusDetails** *(string) --*

          The details explaining the status of the task execution. Only available for certain
          status values.

        - **StartTime** *(datetime) --*

          The time the task execution started.

        - **EndTime** *(datetime) --*

          The time the task execution finished.

        - **TaskArn** *(string) --*

          The ARN of the task that ran.

        - **TaskType** *(string) --*

          The type of task that ran.
    """


_DescribeMaintenanceWindowExecutionsPaginateFiltersTypeDef = TypedDict(
    "_DescribeMaintenanceWindowExecutionsPaginateFiltersTypeDef",
    {"Key": str, "Values": List[str]},
    total=False,
)


class DescribeMaintenanceWindowExecutionsPaginateFiltersTypeDef(
    _DescribeMaintenanceWindowExecutionsPaginateFiltersTypeDef
):
    """
    Type definition for `DescribeMaintenanceWindowExecutionsPaginate` `Filters`

    Filter used in the request. Supported filter keys are Name and Enabled.

    - **Key** *(string) --*

      The name of the filter.

    - **Values** *(list) --*

      The filter values.

      - *(string) --*
    """


_DescribeMaintenanceWindowExecutionsPaginatePaginationConfigTypeDef = TypedDict(
    "_DescribeMaintenanceWindowExecutionsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class DescribeMaintenanceWindowExecutionsPaginatePaginationConfigTypeDef(
    _DescribeMaintenanceWindowExecutionsPaginatePaginationConfigTypeDef
):
    """
    Type definition for `DescribeMaintenanceWindowExecutionsPaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_DescribeMaintenanceWindowExecutionsPaginateResponseWindowExecutionsTypeDef = TypedDict(
    "_DescribeMaintenanceWindowExecutionsPaginateResponseWindowExecutionsTypeDef",
    {
        "WindowId": str,
        "WindowExecutionId": str,
        "Status": str,
        "StatusDetails": str,
        "StartTime": datetime,
        "EndTime": datetime,
    },
    total=False,
)


class DescribeMaintenanceWindowExecutionsPaginateResponseWindowExecutionsTypeDef(
    _DescribeMaintenanceWindowExecutionsPaginateResponseWindowExecutionsTypeDef
):
    """
    Type definition for `DescribeMaintenanceWindowExecutionsPaginateResponse` `WindowExecutions`

    Describes the information about an execution of a maintenance window.

    - **WindowId** *(string) --*

      The ID of the maintenance window.

    - **WindowExecutionId** *(string) --*

      The ID of the maintenance window execution.

    - **Status** *(string) --*

      The status of the execution.

    - **StatusDetails** *(string) --*

      The details explaining the Status. Only available for certain status values.

    - **StartTime** *(datetime) --*

      The time the execution started.

    - **EndTime** *(datetime) --*

      The time the execution finished.
    """


_DescribeMaintenanceWindowExecutionsPaginateResponseTypeDef = TypedDict(
    "_DescribeMaintenanceWindowExecutionsPaginateResponseTypeDef",
    {
        "WindowExecutions": List[
            DescribeMaintenanceWindowExecutionsPaginateResponseWindowExecutionsTypeDef
        ]
    },
    total=False,
)


class DescribeMaintenanceWindowExecutionsPaginateResponseTypeDef(
    _DescribeMaintenanceWindowExecutionsPaginateResponseTypeDef
):
    """
    Type definition for `DescribeMaintenanceWindowExecutionsPaginate` `Response`

    - **WindowExecutions** *(list) --*

      Information about the maintenance window executions.

      - *(dict) --*

        Describes the information about an execution of a maintenance window.

        - **WindowId** *(string) --*

          The ID of the maintenance window.

        - **WindowExecutionId** *(string) --*

          The ID of the maintenance window execution.

        - **Status** *(string) --*

          The status of the execution.

        - **StatusDetails** *(string) --*

          The details explaining the Status. Only available for certain status values.

        - **StartTime** *(datetime) --*

          The time the execution started.

        - **EndTime** *(datetime) --*

          The time the execution finished.
    """


_DescribeMaintenanceWindowSchedulePaginateFiltersTypeDef = TypedDict(
    "_DescribeMaintenanceWindowSchedulePaginateFiltersTypeDef",
    {"Key": str, "Values": List[str]},
    total=False,
)


class DescribeMaintenanceWindowSchedulePaginateFiltersTypeDef(
    _DescribeMaintenanceWindowSchedulePaginateFiltersTypeDef
):
    """
    Type definition for `DescribeMaintenanceWindowSchedulePaginate` `Filters`

    Defines a filter used in Patch Manager APIs.

    - **Key** *(string) --*

      The key for the filter.

    - **Values** *(list) --*

      The value for the filter.

      - *(string) --*
    """


_DescribeMaintenanceWindowSchedulePaginatePaginationConfigTypeDef = TypedDict(
    "_DescribeMaintenanceWindowSchedulePaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class DescribeMaintenanceWindowSchedulePaginatePaginationConfigTypeDef(
    _DescribeMaintenanceWindowSchedulePaginatePaginationConfigTypeDef
):
    """
    Type definition for `DescribeMaintenanceWindowSchedulePaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_DescribeMaintenanceWindowSchedulePaginateResponseScheduledWindowExecutionsTypeDef = TypedDict(
    "_DescribeMaintenanceWindowSchedulePaginateResponseScheduledWindowExecutionsTypeDef",
    {"WindowId": str, "Name": str, "ExecutionTime": str},
    total=False,
)


class DescribeMaintenanceWindowSchedulePaginateResponseScheduledWindowExecutionsTypeDef(
    _DescribeMaintenanceWindowSchedulePaginateResponseScheduledWindowExecutionsTypeDef
):
    """
    Type definition for `DescribeMaintenanceWindowSchedulePaginateResponse` `ScheduledWindowExecutions`

    Information about a scheduled execution for a maintenance window.

    - **WindowId** *(string) --*

      The ID of the maintenance window to be run.

    - **Name** *(string) --*

      The name of the maintenance window to be run.

    - **ExecutionTime** *(string) --*

      The time, in ISO-8601 Extended format, that the maintenance window is scheduled to be run.
    """


_DescribeMaintenanceWindowSchedulePaginateResponseTypeDef = TypedDict(
    "_DescribeMaintenanceWindowSchedulePaginateResponseTypeDef",
    {
        "ScheduledWindowExecutions": List[
            DescribeMaintenanceWindowSchedulePaginateResponseScheduledWindowExecutionsTypeDef
        ]
    },
    total=False,
)


class DescribeMaintenanceWindowSchedulePaginateResponseTypeDef(
    _DescribeMaintenanceWindowSchedulePaginateResponseTypeDef
):
    """
    Type definition for `DescribeMaintenanceWindowSchedulePaginate` `Response`

    - **ScheduledWindowExecutions** *(list) --*

      Information about maintenance window executions scheduled for the specified time range.

      - *(dict) --*

        Information about a scheduled execution for a maintenance window.

        - **WindowId** *(string) --*

          The ID of the maintenance window to be run.

        - **Name** *(string) --*

          The name of the maintenance window to be run.

        - **ExecutionTime** *(string) --*

          The time, in ISO-8601 Extended format, that the maintenance window is scheduled to be run.
    """


_DescribeMaintenanceWindowSchedulePaginateTargetsTypeDef = TypedDict(
    "_DescribeMaintenanceWindowSchedulePaginateTargetsTypeDef",
    {"Key": str, "Values": List[str]},
    total=False,
)


class DescribeMaintenanceWindowSchedulePaginateTargetsTypeDef(
    _DescribeMaintenanceWindowSchedulePaginateTargetsTypeDef
):
    """
    Type definition for `DescribeMaintenanceWindowSchedulePaginate` `Targets`

    An array of search criteria that targets instances using a Key,Value combination that you
    specify.

    Supported formats include the following.

    * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

    * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

    * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

    * (Maintenance window targets only) ``Key=resource-groups:Name,Values=*resource-group-name* ``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

    For example:

    * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

    * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

    * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

    * (Maintenance window targets only) ``Key=resource-groups:Name,Values=ProductionResourceGroup``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC* ``

    For information about how to send commands that target instances using ``Key,Value``
    parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
    <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
    in the *AWS Systems Manager User Guide* .

    - **Key** *(string) --*

      User-defined criteria for sending commands that target instances that meet the criteria.

    - **Values** *(list) --*

      User-defined criteria that maps to ``Key`` . For example, if you specified ``tag:ServerRole``
      , you could specify ``value:WebServer`` to run a command on instances that include Amazon EC2
      tags of ``ServerRole,WebServer`` .

      - *(string) --*
    """


_DescribeMaintenanceWindowTargetsPaginateFiltersTypeDef = TypedDict(
    "_DescribeMaintenanceWindowTargetsPaginateFiltersTypeDef",
    {"Key": str, "Values": List[str]},
    total=False,
)


class DescribeMaintenanceWindowTargetsPaginateFiltersTypeDef(
    _DescribeMaintenanceWindowTargetsPaginateFiltersTypeDef
):
    """
    Type definition for `DescribeMaintenanceWindowTargetsPaginate` `Filters`

    Filter used in the request. Supported filter keys are Name and Enabled.

    - **Key** *(string) --*

      The name of the filter.

    - **Values** *(list) --*

      The filter values.

      - *(string) --*
    """


_DescribeMaintenanceWindowTargetsPaginatePaginationConfigTypeDef = TypedDict(
    "_DescribeMaintenanceWindowTargetsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class DescribeMaintenanceWindowTargetsPaginatePaginationConfigTypeDef(
    _DescribeMaintenanceWindowTargetsPaginatePaginationConfigTypeDef
):
    """
    Type definition for `DescribeMaintenanceWindowTargetsPaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_DescribeMaintenanceWindowTargetsPaginateResponseTargetsTargetsTypeDef = TypedDict(
    "_DescribeMaintenanceWindowTargetsPaginateResponseTargetsTargetsTypeDef",
    {"Key": str, "Values": List[str]},
    total=False,
)


class DescribeMaintenanceWindowTargetsPaginateResponseTargetsTargetsTypeDef(
    _DescribeMaintenanceWindowTargetsPaginateResponseTargetsTargetsTypeDef
):
    """
    Type definition for `DescribeMaintenanceWindowTargetsPaginateResponseTargets` `Targets`

    An array of search criteria that targets instances using a Key,Value combination that
    you specify.

    Supported formats include the following.

    * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

    * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

    * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

    * (Maintenance window targets only)
    ``Key=resource-groups:Name,Values=*resource-group-name* ``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

    For example:

    * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

    * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

    * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

    * (Maintenance window targets only)
    ``Key=resource-groups:Name,Values=ProductionResourceGroup``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC*
    ``

    For information about how to send commands that target instances using ``Key,Value``
    parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
    <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
    in the *AWS Systems Manager User Guide* .

    - **Key** *(string) --*

      User-defined criteria for sending commands that target instances that meet the
      criteria.

    - **Values** *(list) --*

      User-defined criteria that maps to ``Key`` . For example, if you specified
      ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
      instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

      - *(string) --*
    """


_DescribeMaintenanceWindowTargetsPaginateResponseTargetsTypeDef = TypedDict(
    "_DescribeMaintenanceWindowTargetsPaginateResponseTargetsTypeDef",
    {
        "WindowId": str,
        "WindowTargetId": str,
        "ResourceType": str,
        "Targets": List[
            DescribeMaintenanceWindowTargetsPaginateResponseTargetsTargetsTypeDef
        ],
        "OwnerInformation": str,
        "Name": str,
        "Description": str,
    },
    total=False,
)


class DescribeMaintenanceWindowTargetsPaginateResponseTargetsTypeDef(
    _DescribeMaintenanceWindowTargetsPaginateResponseTargetsTypeDef
):
    """
    Type definition for `DescribeMaintenanceWindowTargetsPaginateResponse` `Targets`

    The target registered with the maintenance window.

    - **WindowId** *(string) --*

      The ID of the maintenance window to register the target with.

    - **WindowTargetId** *(string) --*

      The ID of the target.

    - **ResourceType** *(string) --*

      The type of target that is being registered with the maintenance window.

    - **Targets** *(list) --*

      The targets, either instances or tags.

      Specify instances using the following format:

       ``Key=instanceids,Values=<instanceid1>,<instanceid2>``

      Tags are specified using the following format:

       ``Key=<tag name>,Values=<tag value>`` .

      - *(dict) --*

        An array of search criteria that targets instances using a Key,Value combination that
        you specify.

        Supported formats include the following.

        * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

        * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

        * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

        * (Maintenance window targets only)
        ``Key=resource-groups:Name,Values=*resource-group-name* ``

        * (Maintenance window targets only)
        ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

        For example:

        * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

        * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

        * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

        * (Maintenance window targets only)
        ``Key=resource-groups:Name,Values=ProductionResourceGroup``

        * (Maintenance window targets only)
        ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC*
        ``

        For information about how to send commands that target instances using ``Key,Value``
        parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
        <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
        in the *AWS Systems Manager User Guide* .

        - **Key** *(string) --*

          User-defined criteria for sending commands that target instances that meet the
          criteria.

        - **Values** *(list) --*

          User-defined criteria that maps to ``Key`` . For example, if you specified
          ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
          instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

          - *(string) --*

    - **OwnerInformation** *(string) --*

      A user-provided value that will be included in any CloudWatch events that are raised
      while running tasks for these targets in this maintenance window.

    - **Name** *(string) --*

      The name for the maintenance window target.

    - **Description** *(string) --*

      A description for the target.
    """


_DescribeMaintenanceWindowTargetsPaginateResponseTypeDef = TypedDict(
    "_DescribeMaintenanceWindowTargetsPaginateResponseTypeDef",
    {"Targets": List[DescribeMaintenanceWindowTargetsPaginateResponseTargetsTypeDef]},
    total=False,
)


class DescribeMaintenanceWindowTargetsPaginateResponseTypeDef(
    _DescribeMaintenanceWindowTargetsPaginateResponseTypeDef
):
    """
    Type definition for `DescribeMaintenanceWindowTargetsPaginate` `Response`

    - **Targets** *(list) --*

      Information about the targets in the maintenance window.

      - *(dict) --*

        The target registered with the maintenance window.

        - **WindowId** *(string) --*

          The ID of the maintenance window to register the target with.

        - **WindowTargetId** *(string) --*

          The ID of the target.

        - **ResourceType** *(string) --*

          The type of target that is being registered with the maintenance window.

        - **Targets** *(list) --*

          The targets, either instances or tags.

          Specify instances using the following format:

           ``Key=instanceids,Values=<instanceid1>,<instanceid2>``

          Tags are specified using the following format:

           ``Key=<tag name>,Values=<tag value>`` .

          - *(dict) --*

            An array of search criteria that targets instances using a Key,Value combination that
            you specify.

            Supported formats include the following.

            * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

            * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

            * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

            * (Maintenance window targets only)
            ``Key=resource-groups:Name,Values=*resource-group-name* ``

            * (Maintenance window targets only)
            ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

            For example:

            * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

            * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

            * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

            * (Maintenance window targets only)
            ``Key=resource-groups:Name,Values=ProductionResourceGroup``

            * (Maintenance window targets only)
            ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC*
            ``

            For information about how to send commands that target instances using ``Key,Value``
            parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
            <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
            in the *AWS Systems Manager User Guide* .

            - **Key** *(string) --*

              User-defined criteria for sending commands that target instances that meet the
              criteria.

            - **Values** *(list) --*

              User-defined criteria that maps to ``Key`` . For example, if you specified
              ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
              instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

              - *(string) --*

        - **OwnerInformation** *(string) --*

          A user-provided value that will be included in any CloudWatch events that are raised
          while running tasks for these targets in this maintenance window.

        - **Name** *(string) --*

          The name for the maintenance window target.

        - **Description** *(string) --*

          A description for the target.
    """


_DescribeMaintenanceWindowTasksPaginateFiltersTypeDef = TypedDict(
    "_DescribeMaintenanceWindowTasksPaginateFiltersTypeDef",
    {"Key": str, "Values": List[str]},
    total=False,
)


class DescribeMaintenanceWindowTasksPaginateFiltersTypeDef(
    _DescribeMaintenanceWindowTasksPaginateFiltersTypeDef
):
    """
    Type definition for `DescribeMaintenanceWindowTasksPaginate` `Filters`

    Filter used in the request. Supported filter keys are Name and Enabled.

    - **Key** *(string) --*

      The name of the filter.

    - **Values** *(list) --*

      The filter values.

      - *(string) --*
    """


_DescribeMaintenanceWindowTasksPaginatePaginationConfigTypeDef = TypedDict(
    "_DescribeMaintenanceWindowTasksPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class DescribeMaintenanceWindowTasksPaginatePaginationConfigTypeDef(
    _DescribeMaintenanceWindowTasksPaginatePaginationConfigTypeDef
):
    """
    Type definition for `DescribeMaintenanceWindowTasksPaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_DescribeMaintenanceWindowTasksPaginateResponseTasksLoggingInfoTypeDef = TypedDict(
    "_DescribeMaintenanceWindowTasksPaginateResponseTasksLoggingInfoTypeDef",
    {"S3BucketName": str, "S3KeyPrefix": str, "S3Region": str},
    total=False,
)


class DescribeMaintenanceWindowTasksPaginateResponseTasksLoggingInfoTypeDef(
    _DescribeMaintenanceWindowTasksPaginateResponseTasksLoggingInfoTypeDef
):
    """
    Type definition for `DescribeMaintenanceWindowTasksPaginateResponseTasks` `LoggingInfo`

    Information about an Amazon S3 bucket to write task-level logs to.

    .. note::

       ``LoggingInfo`` has been deprecated. To specify an S3 bucket to contain logs, instead
       use the ``OutputS3BucketName`` and ``OutputS3KeyPrefix`` options in the
       ``TaskInvocationParameters`` structure. For information about how Systems Manager
       handles these options for the supported maintenance window task types, see
       MaintenanceWindowTaskInvocationParameters .

    - **S3BucketName** *(string) --*

      The name of an Amazon S3 bucket where execution logs are stored .

    - **S3KeyPrefix** *(string) --*

      (Optional) The Amazon S3 bucket subfolder.

    - **S3Region** *(string) --*

      The region where the Amazon S3 bucket is located.
    """


_DescribeMaintenanceWindowTasksPaginateResponseTasksTargetsTypeDef = TypedDict(
    "_DescribeMaintenanceWindowTasksPaginateResponseTasksTargetsTypeDef",
    {"Key": str, "Values": List[str]},
    total=False,
)


class DescribeMaintenanceWindowTasksPaginateResponseTasksTargetsTypeDef(
    _DescribeMaintenanceWindowTasksPaginateResponseTasksTargetsTypeDef
):
    """
    Type definition for `DescribeMaintenanceWindowTasksPaginateResponseTasks` `Targets`

    An array of search criteria that targets instances using a Key,Value combination that
    you specify.

    Supported formats include the following.

    * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

    * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

    * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

    * (Maintenance window targets only)
    ``Key=resource-groups:Name,Values=*resource-group-name* ``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

    For example:

    * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

    * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

    * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

    * (Maintenance window targets only)
    ``Key=resource-groups:Name,Values=ProductionResourceGroup``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC*
    ``

    For information about how to send commands that target instances using ``Key,Value``
    parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
    <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
    in the *AWS Systems Manager User Guide* .

    - **Key** *(string) --*

      User-defined criteria for sending commands that target instances that meet the
      criteria.

    - **Values** *(list) --*

      User-defined criteria that maps to ``Key`` . For example, if you specified
      ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
      instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

      - *(string) --*
    """


_DescribeMaintenanceWindowTasksPaginateResponseTasksTaskParametersTypeDef = TypedDict(
    "_DescribeMaintenanceWindowTasksPaginateResponseTasksTaskParametersTypeDef",
    {"Values": List[str]},
    total=False,
)


class DescribeMaintenanceWindowTasksPaginateResponseTasksTaskParametersTypeDef(
    _DescribeMaintenanceWindowTasksPaginateResponseTasksTaskParametersTypeDef
):
    """
    Type definition for `DescribeMaintenanceWindowTasksPaginateResponseTasks` `TaskParameters`

    Defines the values for a task parameter.

    - **Values** *(list) --*

      This field contains an array of 0 or more strings, each 1 to 255 characters in
      length.

      - *(string) --*
    """


_DescribeMaintenanceWindowTasksPaginateResponseTasksTypeDef = TypedDict(
    "_DescribeMaintenanceWindowTasksPaginateResponseTasksTypeDef",
    {
        "WindowId": str,
        "WindowTaskId": str,
        "TaskArn": str,
        "Type": str,
        "Targets": List[
            DescribeMaintenanceWindowTasksPaginateResponseTasksTargetsTypeDef
        ],
        "TaskParameters": Dict[
            str,
            DescribeMaintenanceWindowTasksPaginateResponseTasksTaskParametersTypeDef,
        ],
        "Priority": int,
        "LoggingInfo": DescribeMaintenanceWindowTasksPaginateResponseTasksLoggingInfoTypeDef,
        "ServiceRoleArn": str,
        "MaxConcurrency": str,
        "MaxErrors": str,
        "Name": str,
        "Description": str,
    },
    total=False,
)


class DescribeMaintenanceWindowTasksPaginateResponseTasksTypeDef(
    _DescribeMaintenanceWindowTasksPaginateResponseTasksTypeDef
):
    """
    Type definition for `DescribeMaintenanceWindowTasksPaginateResponse` `Tasks`

    Information about a task defined for a maintenance window.

    - **WindowId** *(string) --*

      The ID of the maintenance window where the task is registered.

    - **WindowTaskId** *(string) --*

      The task ID.

    - **TaskArn** *(string) --*

      The resource that the task uses during execution. For RUN_COMMAND and AUTOMATION task
      types, ``TaskArn`` is the Systems Manager document name or ARN. For LAMBDA tasks, it's
      the function name or ARN. For STEP_FUNCTIONS tasks, it's the state machine ARN.

    - **Type** *(string) --*

      The type of task. The type can be one of the following: RUN_COMMAND, AUTOMATION, LAMBDA,
      or STEP_FUNCTIONS.

    - **Targets** *(list) --*

      The targets (either instances or tags). Instances are specified using
      Key=instanceids,Values=<instanceid1>,<instanceid2>. Tags are specified using Key=<tag
      name>,Values=<tag value>.

      - *(dict) --*

        An array of search criteria that targets instances using a Key,Value combination that
        you specify.

        Supported formats include the following.

        * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

        * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

        * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

        * (Maintenance window targets only)
        ``Key=resource-groups:Name,Values=*resource-group-name* ``

        * (Maintenance window targets only)
        ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

        For example:

        * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

        * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

        * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

        * (Maintenance window targets only)
        ``Key=resource-groups:Name,Values=ProductionResourceGroup``

        * (Maintenance window targets only)
        ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC*
        ``

        For information about how to send commands that target instances using ``Key,Value``
        parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
        <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
        in the *AWS Systems Manager User Guide* .

        - **Key** *(string) --*

          User-defined criteria for sending commands that target instances that meet the
          criteria.

        - **Values** *(list) --*

          User-defined criteria that maps to ``Key`` . For example, if you specified
          ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
          instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

          - *(string) --*

    - **TaskParameters** *(dict) --*

      The parameters that should be passed to the task when it is run.

      .. note::

         ``TaskParameters`` has been deprecated. To specify parameters to pass to a task when
         it runs, instead use the ``Parameters`` option in the ``TaskInvocationParameters``
         structure. For information about how Systems Manager handles these options for the
         supported maintenance window task types, see
         MaintenanceWindowTaskInvocationParameters .

      - *(string) --*

        - *(dict) --*

          Defines the values for a task parameter.

          - **Values** *(list) --*

            This field contains an array of 0 or more strings, each 1 to 255 characters in
            length.

            - *(string) --*

    - **Priority** *(integer) --*

      The priority of the task in the maintenance window. The lower the number, the higher the
      priority. Tasks that have the same priority are scheduled in parallel.

    - **LoggingInfo** *(dict) --*

      Information about an Amazon S3 bucket to write task-level logs to.

      .. note::

         ``LoggingInfo`` has been deprecated. To specify an S3 bucket to contain logs, instead
         use the ``OutputS3BucketName`` and ``OutputS3KeyPrefix`` options in the
         ``TaskInvocationParameters`` structure. For information about how Systems Manager
         handles these options for the supported maintenance window task types, see
         MaintenanceWindowTaskInvocationParameters .

      - **S3BucketName** *(string) --*

        The name of an Amazon S3 bucket where execution logs are stored .

      - **S3KeyPrefix** *(string) --*

        (Optional) The Amazon S3 bucket subfolder.

      - **S3Region** *(string) --*

        The region where the Amazon S3 bucket is located.

    - **ServiceRoleArn** *(string) --*

      The ARN of the IAM service role to use to publish Amazon Simple Notification Service
      (Amazon SNS) notifications for maintenance window Run Command tasks.

    - **MaxConcurrency** *(string) --*

      The maximum number of targets this task can be run for, in parallel.

    - **MaxErrors** *(string) --*

      The maximum number of errors allowed before this task stops being scheduled.

    - **Name** *(string) --*

      The task name.

    - **Description** *(string) --*

      A description of the task.
    """


_DescribeMaintenanceWindowTasksPaginateResponseTypeDef = TypedDict(
    "_DescribeMaintenanceWindowTasksPaginateResponseTypeDef",
    {"Tasks": List[DescribeMaintenanceWindowTasksPaginateResponseTasksTypeDef]},
    total=False,
)


class DescribeMaintenanceWindowTasksPaginateResponseTypeDef(
    _DescribeMaintenanceWindowTasksPaginateResponseTypeDef
):
    """
    Type definition for `DescribeMaintenanceWindowTasksPaginate` `Response`

    - **Tasks** *(list) --*

      Information about the tasks in the maintenance window.

      - *(dict) --*

        Information about a task defined for a maintenance window.

        - **WindowId** *(string) --*

          The ID of the maintenance window where the task is registered.

        - **WindowTaskId** *(string) --*

          The task ID.

        - **TaskArn** *(string) --*

          The resource that the task uses during execution. For RUN_COMMAND and AUTOMATION task
          types, ``TaskArn`` is the Systems Manager document name or ARN. For LAMBDA tasks, it's
          the function name or ARN. For STEP_FUNCTIONS tasks, it's the state machine ARN.

        - **Type** *(string) --*

          The type of task. The type can be one of the following: RUN_COMMAND, AUTOMATION, LAMBDA,
          or STEP_FUNCTIONS.

        - **Targets** *(list) --*

          The targets (either instances or tags). Instances are specified using
          Key=instanceids,Values=<instanceid1>,<instanceid2>. Tags are specified using Key=<tag
          name>,Values=<tag value>.

          - *(dict) --*

            An array of search criteria that targets instances using a Key,Value combination that
            you specify.

            Supported formats include the following.

            * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

            * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

            * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

            * (Maintenance window targets only)
            ``Key=resource-groups:Name,Values=*resource-group-name* ``

            * (Maintenance window targets only)
            ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

            For example:

            * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

            * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

            * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

            * (Maintenance window targets only)
            ``Key=resource-groups:Name,Values=ProductionResourceGroup``

            * (Maintenance window targets only)
            ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC*
            ``

            For information about how to send commands that target instances using ``Key,Value``
            parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
            <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
            in the *AWS Systems Manager User Guide* .

            - **Key** *(string) --*

              User-defined criteria for sending commands that target instances that meet the
              criteria.

            - **Values** *(list) --*

              User-defined criteria that maps to ``Key`` . For example, if you specified
              ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
              instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

              - *(string) --*

        - **TaskParameters** *(dict) --*

          The parameters that should be passed to the task when it is run.

          .. note::

             ``TaskParameters`` has been deprecated. To specify parameters to pass to a task when
             it runs, instead use the ``Parameters`` option in the ``TaskInvocationParameters``
             structure. For information about how Systems Manager handles these options for the
             supported maintenance window task types, see
             MaintenanceWindowTaskInvocationParameters .

          - *(string) --*

            - *(dict) --*

              Defines the values for a task parameter.

              - **Values** *(list) --*

                This field contains an array of 0 or more strings, each 1 to 255 characters in
                length.

                - *(string) --*

        - **Priority** *(integer) --*

          The priority of the task in the maintenance window. The lower the number, the higher the
          priority. Tasks that have the same priority are scheduled in parallel.

        - **LoggingInfo** *(dict) --*

          Information about an Amazon S3 bucket to write task-level logs to.

          .. note::

             ``LoggingInfo`` has been deprecated. To specify an S3 bucket to contain logs, instead
             use the ``OutputS3BucketName`` and ``OutputS3KeyPrefix`` options in the
             ``TaskInvocationParameters`` structure. For information about how Systems Manager
             handles these options for the supported maintenance window task types, see
             MaintenanceWindowTaskInvocationParameters .

          - **S3BucketName** *(string) --*

            The name of an Amazon S3 bucket where execution logs are stored .

          - **S3KeyPrefix** *(string) --*

            (Optional) The Amazon S3 bucket subfolder.

          - **S3Region** *(string) --*

            The region where the Amazon S3 bucket is located.

        - **ServiceRoleArn** *(string) --*

          The ARN of the IAM service role to use to publish Amazon Simple Notification Service
          (Amazon SNS) notifications for maintenance window Run Command tasks.

        - **MaxConcurrency** *(string) --*

          The maximum number of targets this task can be run for, in parallel.

        - **MaxErrors** *(string) --*

          The maximum number of errors allowed before this task stops being scheduled.

        - **Name** *(string) --*

          The task name.

        - **Description** *(string) --*

          A description of the task.
    """


_DescribeMaintenanceWindowsForTargetPaginatePaginationConfigTypeDef = TypedDict(
    "_DescribeMaintenanceWindowsForTargetPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class DescribeMaintenanceWindowsForTargetPaginatePaginationConfigTypeDef(
    _DescribeMaintenanceWindowsForTargetPaginatePaginationConfigTypeDef
):
    """
    Type definition for `DescribeMaintenanceWindowsForTargetPaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_DescribeMaintenanceWindowsForTargetPaginateResponseWindowIdentitiesTypeDef = TypedDict(
    "_DescribeMaintenanceWindowsForTargetPaginateResponseWindowIdentitiesTypeDef",
    {"WindowId": str, "Name": str},
    total=False,
)


class DescribeMaintenanceWindowsForTargetPaginateResponseWindowIdentitiesTypeDef(
    _DescribeMaintenanceWindowsForTargetPaginateResponseWindowIdentitiesTypeDef
):
    """
    Type definition for `DescribeMaintenanceWindowsForTargetPaginateResponse` `WindowIdentities`

    The maintenance window to which the specified target belongs.

    - **WindowId** *(string) --*

      The ID of the maintenance window.

    - **Name** *(string) --*

      The name of the maintenance window.
    """


_DescribeMaintenanceWindowsForTargetPaginateResponseTypeDef = TypedDict(
    "_DescribeMaintenanceWindowsForTargetPaginateResponseTypeDef",
    {
        "WindowIdentities": List[
            DescribeMaintenanceWindowsForTargetPaginateResponseWindowIdentitiesTypeDef
        ]
    },
    total=False,
)


class DescribeMaintenanceWindowsForTargetPaginateResponseTypeDef(
    _DescribeMaintenanceWindowsForTargetPaginateResponseTypeDef
):
    """
    Type definition for `DescribeMaintenanceWindowsForTargetPaginate` `Response`

    - **WindowIdentities** *(list) --*

      Information about the maintenance window targets and tasks an instance is associated with.

      - *(dict) --*

        The maintenance window to which the specified target belongs.

        - **WindowId** *(string) --*

          The ID of the maintenance window.

        - **Name** *(string) --*

          The name of the maintenance window.
    """


_DescribeMaintenanceWindowsForTargetPaginateTargetsTypeDef = TypedDict(
    "_DescribeMaintenanceWindowsForTargetPaginateTargetsTypeDef",
    {"Key": str, "Values": List[str]},
    total=False,
)


class DescribeMaintenanceWindowsForTargetPaginateTargetsTypeDef(
    _DescribeMaintenanceWindowsForTargetPaginateTargetsTypeDef
):
    """
    Type definition for `DescribeMaintenanceWindowsForTargetPaginate` `Targets`

    An array of search criteria that targets instances using a Key,Value combination that you
    specify.

    Supported formats include the following.

    * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

    * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

    * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

    * (Maintenance window targets only) ``Key=resource-groups:Name,Values=*resource-group-name* ``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

    For example:

    * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

    * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

    * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

    * (Maintenance window targets only) ``Key=resource-groups:Name,Values=ProductionResourceGroup``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC* ``

    For information about how to send commands that target instances using ``Key,Value``
    parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
    <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
    in the *AWS Systems Manager User Guide* .

    - **Key** *(string) --*

      User-defined criteria for sending commands that target instances that meet the criteria.

    - **Values** *(list) --*

      User-defined criteria that maps to ``Key`` . For example, if you specified ``tag:ServerRole``
      , you could specify ``value:WebServer`` to run a command on instances that include Amazon EC2
      tags of ``ServerRole,WebServer`` .

      - *(string) --*
    """


_DescribeMaintenanceWindowsPaginateFiltersTypeDef = TypedDict(
    "_DescribeMaintenanceWindowsPaginateFiltersTypeDef",
    {"Key": str, "Values": List[str]},
    total=False,
)


class DescribeMaintenanceWindowsPaginateFiltersTypeDef(
    _DescribeMaintenanceWindowsPaginateFiltersTypeDef
):
    """
    Type definition for `DescribeMaintenanceWindowsPaginate` `Filters`

    Filter used in the request. Supported filter keys are Name and Enabled.

    - **Key** *(string) --*

      The name of the filter.

    - **Values** *(list) --*

      The filter values.

      - *(string) --*
    """


_DescribeMaintenanceWindowsPaginatePaginationConfigTypeDef = TypedDict(
    "_DescribeMaintenanceWindowsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class DescribeMaintenanceWindowsPaginatePaginationConfigTypeDef(
    _DescribeMaintenanceWindowsPaginatePaginationConfigTypeDef
):
    """
    Type definition for `DescribeMaintenanceWindowsPaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_DescribeMaintenanceWindowsPaginateResponseWindowIdentitiesTypeDef = TypedDict(
    "_DescribeMaintenanceWindowsPaginateResponseWindowIdentitiesTypeDef",
    {
        "WindowId": str,
        "Name": str,
        "Description": str,
        "Enabled": bool,
        "Duration": int,
        "Cutoff": int,
        "Schedule": str,
        "ScheduleTimezone": str,
        "EndDate": str,
        "StartDate": str,
        "NextExecutionTime": str,
    },
    total=False,
)


class DescribeMaintenanceWindowsPaginateResponseWindowIdentitiesTypeDef(
    _DescribeMaintenanceWindowsPaginateResponseWindowIdentitiesTypeDef
):
    """
    Type definition for `DescribeMaintenanceWindowsPaginateResponse` `WindowIdentities`

    Information about the maintenance window.

    - **WindowId** *(string) --*

      The ID of the maintenance window.

    - **Name** *(string) --*

      The name of the maintenance window.

    - **Description** *(string) --*

      A description of the maintenance window.

    - **Enabled** *(boolean) --*

      Indicates whether the maintenance window is enabled.

    - **Duration** *(integer) --*

      The duration of the maintenance window in hours.

    - **Cutoff** *(integer) --*

      The number of hours before the end of the maintenance window that Systems Manager stops
      scheduling new tasks for execution.

    - **Schedule** *(string) --*

      The schedule of the maintenance window in the form of a cron or rate expression.

    - **ScheduleTimezone** *(string) --*

      The time zone that the scheduled maintenance window executions are based on, in Internet
      Assigned Numbers Authority (IANA) format.

    - **EndDate** *(string) --*

      The date and time, in ISO-8601 Extended format, for when the maintenance window is
      scheduled to become inactive.

    - **StartDate** *(string) --*

      The date and time, in ISO-8601 Extended format, for when the maintenance window is
      scheduled to become active.

    - **NextExecutionTime** *(string) --*

      The next time the maintenance window will actually run, taking into account any specified
      times for the maintenance window to become active or inactive.
    """


_DescribeMaintenanceWindowsPaginateResponseTypeDef = TypedDict(
    "_DescribeMaintenanceWindowsPaginateResponseTypeDef",
    {
        "WindowIdentities": List[
            DescribeMaintenanceWindowsPaginateResponseWindowIdentitiesTypeDef
        ]
    },
    total=False,
)


class DescribeMaintenanceWindowsPaginateResponseTypeDef(
    _DescribeMaintenanceWindowsPaginateResponseTypeDef
):
    """
    Type definition for `DescribeMaintenanceWindowsPaginate` `Response`

    - **WindowIdentities** *(list) --*

      Information about the maintenance windows.

      - *(dict) --*

        Information about the maintenance window.

        - **WindowId** *(string) --*

          The ID of the maintenance window.

        - **Name** *(string) --*

          The name of the maintenance window.

        - **Description** *(string) --*

          A description of the maintenance window.

        - **Enabled** *(boolean) --*

          Indicates whether the maintenance window is enabled.

        - **Duration** *(integer) --*

          The duration of the maintenance window in hours.

        - **Cutoff** *(integer) --*

          The number of hours before the end of the maintenance window that Systems Manager stops
          scheduling new tasks for execution.

        - **Schedule** *(string) --*

          The schedule of the maintenance window in the form of a cron or rate expression.

        - **ScheduleTimezone** *(string) --*

          The time zone that the scheduled maintenance window executions are based on, in Internet
          Assigned Numbers Authority (IANA) format.

        - **EndDate** *(string) --*

          The date and time, in ISO-8601 Extended format, for when the maintenance window is
          scheduled to become inactive.

        - **StartDate** *(string) --*

          The date and time, in ISO-8601 Extended format, for when the maintenance window is
          scheduled to become active.

        - **NextExecutionTime** *(string) --*

          The next time the maintenance window will actually run, taking into account any specified
          times for the maintenance window to become active or inactive.
    """


_DescribeParametersPaginateFiltersTypeDef = TypedDict(
    "_DescribeParametersPaginateFiltersTypeDef", {"Key": str, "Values": List[str]}
)


class DescribeParametersPaginateFiltersTypeDef(
    _DescribeParametersPaginateFiltersTypeDef
):
    """
    Type definition for `DescribeParametersPaginate` `Filters`

    This data type is deprecated. Instead, use  ParameterStringFilter .

    - **Key** *(string) --* **[REQUIRED]**

      The name of the filter.

    - **Values** *(list) --* **[REQUIRED]**

      The filter values.

      - *(string) --*
    """


_DescribeParametersPaginatePaginationConfigTypeDef = TypedDict(
    "_DescribeParametersPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class DescribeParametersPaginatePaginationConfigTypeDef(
    _DescribeParametersPaginatePaginationConfigTypeDef
):
    """
    Type definition for `DescribeParametersPaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_RequiredDescribeParametersPaginateParameterFiltersTypeDef = TypedDict(
    "_RequiredDescribeParametersPaginateParameterFiltersTypeDef", {"Key": str}
)
_OptionalDescribeParametersPaginateParameterFiltersTypeDef = TypedDict(
    "_OptionalDescribeParametersPaginateParameterFiltersTypeDef",
    {"Option": str, "Values": List[str]},
    total=False,
)


class DescribeParametersPaginateParameterFiltersTypeDef(
    _RequiredDescribeParametersPaginateParameterFiltersTypeDef,
    _OptionalDescribeParametersPaginateParameterFiltersTypeDef,
):
    """
    Type definition for `DescribeParametersPaginate` `ParameterFilters`

    One or more filters. Use a filter to return a more specific list of results.

    .. warning::

      The ``ParameterStringFilter`` object is used by the  DescribeParameters and
      GetParametersByPath API actions. However, not all of the pattern values listed for ``Key``
      can be used with both actions.

      For ``DescribeActions`` , all of the listed patterns are valid, with the exception of
      ``Label`` .

      For ``GetParametersByPath`` , the following patterns listed for ``Key`` are not valid:
      ``Name`` , ``Path`` , and ``Tier`` .

      For examples of CLI commands demonstrating valid parameter filter constructions, see
      `Searching for Systems Manager Parameters
      <http://docs.aws.amazon.com/systems-manager/latest/userguide/parameter-search.html>`__ in the
      *AWS Systems Manager User Guide* .

    - **Key** *(string) --* **[REQUIRED]**

      The name of the filter.

    - **Option** *(string) --*

      For all filters used with  DescribeParameters , valid options include ``Equals`` and
      ``BeginsWith`` . The ``Name`` filter additionally supports the ``Contains`` option.
      (Exception: For filters using the key ``Path`` , valid options include ``Recursive`` and
      ``OneLevel`` .)

      For filters used with  GetParametersByPath , valid options include ``Equals`` and
      ``BeginsWith`` . (Exception: For filters using the key ``Label`` , the only valid option is
      ``Equals`` .)

    - **Values** *(list) --*

      The value you want to search for.

      - *(string) --*
    """


_DescribeParametersPaginateResponseParametersPoliciesTypeDef = TypedDict(
    "_DescribeParametersPaginateResponseParametersPoliciesTypeDef",
    {"PolicyText": str, "PolicyType": str, "PolicyStatus": str},
    total=False,
)


class DescribeParametersPaginateResponseParametersPoliciesTypeDef(
    _DescribeParametersPaginateResponseParametersPoliciesTypeDef
):
    """
    Type definition for `DescribeParametersPaginateResponseParameters` `Policies`

    One or more policies assigned to a parameter.

    - **PolicyText** *(string) --*

      The JSON text of the policy.

    - **PolicyType** *(string) --*

      The type of policy. Parameter Store supports the following policy types: Expiration,
      ExpirationNotification, and NoChangeNotification.

    - **PolicyStatus** *(string) --*

      The status of the policy. Policies report the following statuses: Pending (the policy
      has not been enforced or applied yet), Finished (the policy was applied), Failed (the
      policy was not applied), or InProgress (the policy is being applied now).
    """


_DescribeParametersPaginateResponseParametersTypeDef = TypedDict(
    "_DescribeParametersPaginateResponseParametersTypeDef",
    {
        "Name": str,
        "Type": str,
        "KeyId": str,
        "LastModifiedDate": datetime,
        "LastModifiedUser": str,
        "Description": str,
        "AllowedPattern": str,
        "Version": int,
        "Tier": str,
        "Policies": List[DescribeParametersPaginateResponseParametersPoliciesTypeDef],
    },
    total=False,
)


class DescribeParametersPaginateResponseParametersTypeDef(
    _DescribeParametersPaginateResponseParametersTypeDef
):
    """
    Type definition for `DescribeParametersPaginateResponse` `Parameters`

    Metadata includes information like the ARN of the last user and the date/time the parameter
    was last used.

    - **Name** *(string) --*

      The parameter name.

    - **Type** *(string) --*

      The type of parameter. Valid parameter types include the following: String, String list,
      Secure string.

    - **KeyId** *(string) --*

      The ID of the query key used for this parameter.

    - **LastModifiedDate** *(datetime) --*

      Date the parameter was last changed or updated.

    - **LastModifiedUser** *(string) --*

      Amazon Resource Name (ARN) of the AWS user who last changed the parameter.

    - **Description** *(string) --*

      Description of the parameter actions.

    - **AllowedPattern** *(string) --*

      A parameter name can include only the following letters and symbols.

      a-zA-Z0-9_.-

    - **Version** *(integer) --*

      The parameter version.

    - **Tier** *(string) --*

      The parameter tier.

    - **Policies** *(list) --*

      A list of policies associated with a parameter.

      - *(dict) --*

        One or more policies assigned to a parameter.

        - **PolicyText** *(string) --*

          The JSON text of the policy.

        - **PolicyType** *(string) --*

          The type of policy. Parameter Store supports the following policy types: Expiration,
          ExpirationNotification, and NoChangeNotification.

        - **PolicyStatus** *(string) --*

          The status of the policy. Policies report the following statuses: Pending (the policy
          has not been enforced or applied yet), Finished (the policy was applied), Failed (the
          policy was not applied), or InProgress (the policy is being applied now).
    """


_DescribeParametersPaginateResponseTypeDef = TypedDict(
    "_DescribeParametersPaginateResponseTypeDef",
    {"Parameters": List[DescribeParametersPaginateResponseParametersTypeDef]},
    total=False,
)


class DescribeParametersPaginateResponseTypeDef(
    _DescribeParametersPaginateResponseTypeDef
):
    """
    Type definition for `DescribeParametersPaginate` `Response`

    - **Parameters** *(list) --*

      Parameters returned by the request.

      - *(dict) --*

        Metadata includes information like the ARN of the last user and the date/time the parameter
        was last used.

        - **Name** *(string) --*

          The parameter name.

        - **Type** *(string) --*

          The type of parameter. Valid parameter types include the following: String, String list,
          Secure string.

        - **KeyId** *(string) --*

          The ID of the query key used for this parameter.

        - **LastModifiedDate** *(datetime) --*

          Date the parameter was last changed or updated.

        - **LastModifiedUser** *(string) --*

          Amazon Resource Name (ARN) of the AWS user who last changed the parameter.

        - **Description** *(string) --*

          Description of the parameter actions.

        - **AllowedPattern** *(string) --*

          A parameter name can include only the following letters and symbols.

          a-zA-Z0-9_.-

        - **Version** *(integer) --*

          The parameter version.

        - **Tier** *(string) --*

          The parameter tier.

        - **Policies** *(list) --*

          A list of policies associated with a parameter.

          - *(dict) --*

            One or more policies assigned to a parameter.

            - **PolicyText** *(string) --*

              The JSON text of the policy.

            - **PolicyType** *(string) --*

              The type of policy. Parameter Store supports the following policy types: Expiration,
              ExpirationNotification, and NoChangeNotification.

            - **PolicyStatus** *(string) --*

              The status of the policy. Policies report the following statuses: Pending (the policy
              has not been enforced or applied yet), Finished (the policy was applied), Failed (the
              policy was not applied), or InProgress (the policy is being applied now).
    """


_DescribePatchBaselinesPaginateFiltersTypeDef = TypedDict(
    "_DescribePatchBaselinesPaginateFiltersTypeDef",
    {"Key": str, "Values": List[str]},
    total=False,
)


class DescribePatchBaselinesPaginateFiltersTypeDef(
    _DescribePatchBaselinesPaginateFiltersTypeDef
):
    """
    Type definition for `DescribePatchBaselinesPaginate` `Filters`

    Defines a filter used in Patch Manager APIs.

    - **Key** *(string) --*

      The key for the filter.

    - **Values** *(list) --*

      The value for the filter.

      - *(string) --*
    """


_DescribePatchBaselinesPaginatePaginationConfigTypeDef = TypedDict(
    "_DescribePatchBaselinesPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class DescribePatchBaselinesPaginatePaginationConfigTypeDef(
    _DescribePatchBaselinesPaginatePaginationConfigTypeDef
):
    """
    Type definition for `DescribePatchBaselinesPaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_DescribePatchBaselinesPaginateResponseBaselineIdentitiesTypeDef = TypedDict(
    "_DescribePatchBaselinesPaginateResponseBaselineIdentitiesTypeDef",
    {
        "BaselineId": str,
        "BaselineName": str,
        "OperatingSystem": str,
        "BaselineDescription": str,
        "DefaultBaseline": bool,
    },
    total=False,
)


class DescribePatchBaselinesPaginateResponseBaselineIdentitiesTypeDef(
    _DescribePatchBaselinesPaginateResponseBaselineIdentitiesTypeDef
):
    """
    Type definition for `DescribePatchBaselinesPaginateResponse` `BaselineIdentities`

    Defines the basic information about a patch baseline.

    - **BaselineId** *(string) --*

      The ID of the patch baseline.

    - **BaselineName** *(string) --*

      The name of the patch baseline.

    - **OperatingSystem** *(string) --*

      Defines the operating system the patch baseline applies to. The Default value is WINDOWS.

    - **BaselineDescription** *(string) --*

      The description of the patch baseline.

    - **DefaultBaseline** *(boolean) --*

      Whether this is the default baseline. Note that Systems Manager supports creating
      multiple default patch baselines. For example, you can create a default patch baseline
      for each operating system.
    """


_DescribePatchBaselinesPaginateResponseTypeDef = TypedDict(
    "_DescribePatchBaselinesPaginateResponseTypeDef",
    {
        "BaselineIdentities": List[
            DescribePatchBaselinesPaginateResponseBaselineIdentitiesTypeDef
        ]
    },
    total=False,
)


class DescribePatchBaselinesPaginateResponseTypeDef(
    _DescribePatchBaselinesPaginateResponseTypeDef
):
    """
    Type definition for `DescribePatchBaselinesPaginate` `Response`

    - **BaselineIdentities** *(list) --*

      An array of PatchBaselineIdentity elements.

      - *(dict) --*

        Defines the basic information about a patch baseline.

        - **BaselineId** *(string) --*

          The ID of the patch baseline.

        - **BaselineName** *(string) --*

          The name of the patch baseline.

        - **OperatingSystem** *(string) --*

          Defines the operating system the patch baseline applies to. The Default value is WINDOWS.

        - **BaselineDescription** *(string) --*

          The description of the patch baseline.

        - **DefaultBaseline** *(boolean) --*

          Whether this is the default baseline. Note that Systems Manager supports creating
          multiple default patch baselines. For example, you can create a default patch baseline
          for each operating system.
    """


_DescribePatchGroupsPaginateFiltersTypeDef = TypedDict(
    "_DescribePatchGroupsPaginateFiltersTypeDef",
    {"Key": str, "Values": List[str]},
    total=False,
)


class DescribePatchGroupsPaginateFiltersTypeDef(
    _DescribePatchGroupsPaginateFiltersTypeDef
):
    """
    Type definition for `DescribePatchGroupsPaginate` `Filters`

    Defines a filter used in Patch Manager APIs.

    - **Key** *(string) --*

      The key for the filter.

    - **Values** *(list) --*

      The value for the filter.

      - *(string) --*
    """


_DescribePatchGroupsPaginatePaginationConfigTypeDef = TypedDict(
    "_DescribePatchGroupsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class DescribePatchGroupsPaginatePaginationConfigTypeDef(
    _DescribePatchGroupsPaginatePaginationConfigTypeDef
):
    """
    Type definition for `DescribePatchGroupsPaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_DescribePatchGroupsPaginateResponseMappingsBaselineIdentityTypeDef = TypedDict(
    "_DescribePatchGroupsPaginateResponseMappingsBaselineIdentityTypeDef",
    {
        "BaselineId": str,
        "BaselineName": str,
        "OperatingSystem": str,
        "BaselineDescription": str,
        "DefaultBaseline": bool,
    },
    total=False,
)


class DescribePatchGroupsPaginateResponseMappingsBaselineIdentityTypeDef(
    _DescribePatchGroupsPaginateResponseMappingsBaselineIdentityTypeDef
):
    """
    Type definition for `DescribePatchGroupsPaginateResponseMappings` `BaselineIdentity`

    The patch baseline the patch group is registered with.

    - **BaselineId** *(string) --*

      The ID of the patch baseline.

    - **BaselineName** *(string) --*

      The name of the patch baseline.

    - **OperatingSystem** *(string) --*

      Defines the operating system the patch baseline applies to. The Default value is
      WINDOWS.

    - **BaselineDescription** *(string) --*

      The description of the patch baseline.

    - **DefaultBaseline** *(boolean) --*

      Whether this is the default baseline. Note that Systems Manager supports creating
      multiple default patch baselines. For example, you can create a default patch baseline
      for each operating system.
    """


_DescribePatchGroupsPaginateResponseMappingsTypeDef = TypedDict(
    "_DescribePatchGroupsPaginateResponseMappingsTypeDef",
    {
        "PatchGroup": str,
        "BaselineIdentity": DescribePatchGroupsPaginateResponseMappingsBaselineIdentityTypeDef,
    },
    total=False,
)


class DescribePatchGroupsPaginateResponseMappingsTypeDef(
    _DescribePatchGroupsPaginateResponseMappingsTypeDef
):
    """
    Type definition for `DescribePatchGroupsPaginateResponse` `Mappings`

    The mapping between a patch group and the patch baseline the patch group is registered with.

    - **PatchGroup** *(string) --*

      The name of the patch group registered with the patch baseline.

    - **BaselineIdentity** *(dict) --*

      The patch baseline the patch group is registered with.

      - **BaselineId** *(string) --*

        The ID of the patch baseline.

      - **BaselineName** *(string) --*

        The name of the patch baseline.

      - **OperatingSystem** *(string) --*

        Defines the operating system the patch baseline applies to. The Default value is
        WINDOWS.

      - **BaselineDescription** *(string) --*

        The description of the patch baseline.

      - **DefaultBaseline** *(boolean) --*

        Whether this is the default baseline. Note that Systems Manager supports creating
        multiple default patch baselines. For example, you can create a default patch baseline
        for each operating system.
    """


_DescribePatchGroupsPaginateResponseTypeDef = TypedDict(
    "_DescribePatchGroupsPaginateResponseTypeDef",
    {"Mappings": List[DescribePatchGroupsPaginateResponseMappingsTypeDef]},
    total=False,
)


class DescribePatchGroupsPaginateResponseTypeDef(
    _DescribePatchGroupsPaginateResponseTypeDef
):
    """
    Type definition for `DescribePatchGroupsPaginate` `Response`

    - **Mappings** *(list) --*

      Each entry in the array contains:

      PatchGroup: string (between 1 and 256 characters, Regex: ^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$)

      PatchBaselineIdentity: A PatchBaselineIdentity element.

      - *(dict) --*

        The mapping between a patch group and the patch baseline the patch group is registered with.

        - **PatchGroup** *(string) --*

          The name of the patch group registered with the patch baseline.

        - **BaselineIdentity** *(dict) --*

          The patch baseline the patch group is registered with.

          - **BaselineId** *(string) --*

            The ID of the patch baseline.

          - **BaselineName** *(string) --*

            The name of the patch baseline.

          - **OperatingSystem** *(string) --*

            Defines the operating system the patch baseline applies to. The Default value is
            WINDOWS.

          - **BaselineDescription** *(string) --*

            The description of the patch baseline.

          - **DefaultBaseline** *(boolean) --*

            Whether this is the default baseline. Note that Systems Manager supports creating
            multiple default patch baselines. For example, you can create a default patch baseline
            for each operating system.
    """


_DescribeSessionsPaginateFiltersTypeDef = TypedDict(
    "_DescribeSessionsPaginateFiltersTypeDef", {"key": str, "value": str}
)


class DescribeSessionsPaginateFiltersTypeDef(_DescribeSessionsPaginateFiltersTypeDef):
    """
    Type definition for `DescribeSessionsPaginate` `Filters`

    Describes a filter for Session Manager information.

    - **key** *(string) --* **[REQUIRED]**

      The name of the filter.

    - **value** *(string) --* **[REQUIRED]**

      The filter value. Valid values for each filter key are as follows:

      * InvokedAfter: Specify a timestamp to limit your results. For example, specify
      2018-08-29T00:00:00Z to see sessions that started August 29, 2018, and later.

      * InvokedBefore: Specify a timestamp to limit your results. For example, specify
      2018-08-29T00:00:00Z to see sessions that started before August 29, 2018.

      * Target: Specify an instance to which session connections have been made.

      * Owner: Specify an AWS user account to see a list of sessions started by that user.

      * Status: Specify a valid session status to see a list of all sessions with that status.
      Status values you can specify include:

        * Connected

        * Connecting

        * Disconnected

        * Terminated

        * Terminating

        * Failed
    """


_DescribeSessionsPaginatePaginationConfigTypeDef = TypedDict(
    "_DescribeSessionsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class DescribeSessionsPaginatePaginationConfigTypeDef(
    _DescribeSessionsPaginatePaginationConfigTypeDef
):
    """
    Type definition for `DescribeSessionsPaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_DescribeSessionsPaginateResponseSessionsOutputUrlTypeDef = TypedDict(
    "_DescribeSessionsPaginateResponseSessionsOutputUrlTypeDef",
    {"S3OutputUrl": str, "CloudWatchOutputUrl": str},
    total=False,
)


class DescribeSessionsPaginateResponseSessionsOutputUrlTypeDef(
    _DescribeSessionsPaginateResponseSessionsOutputUrlTypeDef
):
    """
    Type definition for `DescribeSessionsPaginateResponseSessions` `OutputUrl`

    Reserved for future use.

    - **S3OutputUrl** *(string) --*

      Reserved for future use.

    - **CloudWatchOutputUrl** *(string) --*

      Reserved for future use.
    """


_DescribeSessionsPaginateResponseSessionsTypeDef = TypedDict(
    "_DescribeSessionsPaginateResponseSessionsTypeDef",
    {
        "SessionId": str,
        "Target": str,
        "Status": str,
        "StartDate": datetime,
        "EndDate": datetime,
        "DocumentName": str,
        "Owner": str,
        "Details": str,
        "OutputUrl": DescribeSessionsPaginateResponseSessionsOutputUrlTypeDef,
    },
    total=False,
)


class DescribeSessionsPaginateResponseSessionsTypeDef(
    _DescribeSessionsPaginateResponseSessionsTypeDef
):
    """
    Type definition for `DescribeSessionsPaginateResponse` `Sessions`

    Information about a Session Manager connection to an instance.

    - **SessionId** *(string) --*

      The ID of the session.

    - **Target** *(string) --*

      The instance that the Session Manager session connected to.

    - **Status** *(string) --*

      The status of the session. For example, "Connected" or "Terminated".

    - **StartDate** *(datetime) --*

      The date and time, in ISO-8601 Extended format, when the session began.

    - **EndDate** *(datetime) --*

      The date and time, in ISO-8601 Extended format, when the session was terminated.

    - **DocumentName** *(string) --*

      The name of the Session Manager SSM document used to define the parameters and plugin
      settings for the session. For example, ``SSM-SessionManagerRunShell`` .

    - **Owner** *(string) --*

      The ID of the AWS user account that started the session.

    - **Details** *(string) --*

      Reserved for future use.

    - **OutputUrl** *(dict) --*

      Reserved for future use.

      - **S3OutputUrl** *(string) --*

        Reserved for future use.

      - **CloudWatchOutputUrl** *(string) --*

        Reserved for future use.
    """


_DescribeSessionsPaginateResponseTypeDef = TypedDict(
    "_DescribeSessionsPaginateResponseTypeDef",
    {"Sessions": List[DescribeSessionsPaginateResponseSessionsTypeDef]},
    total=False,
)


class DescribeSessionsPaginateResponseTypeDef(_DescribeSessionsPaginateResponseTypeDef):
    """
    Type definition for `DescribeSessionsPaginate` `Response`

    - **Sessions** *(list) --*

      A list of sessions meeting the request parameters.

      - *(dict) --*

        Information about a Session Manager connection to an instance.

        - **SessionId** *(string) --*

          The ID of the session.

        - **Target** *(string) --*

          The instance that the Session Manager session connected to.

        - **Status** *(string) --*

          The status of the session. For example, "Connected" or "Terminated".

        - **StartDate** *(datetime) --*

          The date and time, in ISO-8601 Extended format, when the session began.

        - **EndDate** *(datetime) --*

          The date and time, in ISO-8601 Extended format, when the session was terminated.

        - **DocumentName** *(string) --*

          The name of the Session Manager SSM document used to define the parameters and plugin
          settings for the session. For example, ``SSM-SessionManagerRunShell`` .

        - **Owner** *(string) --*

          The ID of the AWS user account that started the session.

        - **Details** *(string) --*

          Reserved for future use.

        - **OutputUrl** *(dict) --*

          Reserved for future use.

          - **S3OutputUrl** *(string) --*

            Reserved for future use.

          - **CloudWatchOutputUrl** *(string) --*

            Reserved for future use.
    """


_RequiredGetInventoryPaginateAggregatorsGroupsFiltersTypeDef = TypedDict(
    "_RequiredGetInventoryPaginateAggregatorsGroupsFiltersTypeDef",
    {"Key": str, "Values": List[str]},
)
_OptionalGetInventoryPaginateAggregatorsGroupsFiltersTypeDef = TypedDict(
    "_OptionalGetInventoryPaginateAggregatorsGroupsFiltersTypeDef",
    {"Type": str},
    total=False,
)


class GetInventoryPaginateAggregatorsGroupsFiltersTypeDef(
    _RequiredGetInventoryPaginateAggregatorsGroupsFiltersTypeDef,
    _OptionalGetInventoryPaginateAggregatorsGroupsFiltersTypeDef,
):
    """
    Type definition for `GetInventoryPaginateAggregatorsGroups` `Filters`

    One or more filters. Use a filter to return a more specific list of results.

    - **Key** *(string) --* **[REQUIRED]**

      The name of the filter key.

    - **Values** *(list) --* **[REQUIRED]**

      Inventory filter values. Example: inventory filter where instance IDs are specified
      as values Key=AWS:InstanceInformation.InstanceId,Values= i-a12b3c4d5e6g,
      i-1a2b3c4d5e6,Type=Equal

      - *(string) --*

    - **Type** *(string) --*

      The type of filter. Valid values include the following:
      "Equal"|"NotEqual"|"BeginWith"|"LessThan"|"GreaterThan"
    """


_GetInventoryPaginateAggregatorsGroupsTypeDef = TypedDict(
    "_GetInventoryPaginateAggregatorsGroupsTypeDef",
    {"Name": str, "Filters": List[GetInventoryPaginateAggregatorsGroupsFiltersTypeDef]},
)


class GetInventoryPaginateAggregatorsGroupsTypeDef(
    _GetInventoryPaginateAggregatorsGroupsTypeDef
):
    """
    Type definition for `GetInventoryPaginateAggregators` `Groups`

    A user-defined set of one or more filters on which to aggregate inventory data. Groups
    return a count of resources that match and don't match the specified criteria.

    - **Name** *(string) --* **[REQUIRED]**

      The name of the group.

    - **Filters** *(list) --* **[REQUIRED]**

      Filters define the criteria for the group. The ``matchingCount`` field displays the
      number of resources that match the criteria. The ``notMatchingCount`` field displays the
      number of resources that don't match the criteria.

      - *(dict) --*

        One or more filters. Use a filter to return a more specific list of results.

        - **Key** *(string) --* **[REQUIRED]**

          The name of the filter key.

        - **Values** *(list) --* **[REQUIRED]**

          Inventory filter values. Example: inventory filter where instance IDs are specified
          as values Key=AWS:InstanceInformation.InstanceId,Values= i-a12b3c4d5e6g,
          i-1a2b3c4d5e6,Type=Equal

          - *(string) --*

        - **Type** *(string) --*

          The type of filter. Valid values include the following:
          "Equal"|"NotEqual"|"BeginWith"|"LessThan"|"GreaterThan"
    """


_GetInventoryPaginateAggregatorsTypeDef = TypedDict(
    "_GetInventoryPaginateAggregatorsTypeDef",
    {
        "Expression": str,
        "Aggregators": List[Any],
        "Groups": List[GetInventoryPaginateAggregatorsGroupsTypeDef],
    },
    total=False,
)


class GetInventoryPaginateAggregatorsTypeDef(_GetInventoryPaginateAggregatorsTypeDef):
    """
    Type definition for `GetInventoryPaginate` `Aggregators`

    Specifies the inventory type and attribute for the aggregation execution.

    - **Expression** *(string) --*

      The inventory type and attribute name for aggregation.

    - **Aggregators** *(list) --*

      Nested aggregators to further refine aggregation for an inventory type.

    - **Groups** *(list) --*

      A user-defined set of one or more filters on which to aggregate inventory data. Groups return
      a count of resources that match and don't match the specified criteria.

      - *(dict) --*

        A user-defined set of one or more filters on which to aggregate inventory data. Groups
        return a count of resources that match and don't match the specified criteria.

        - **Name** *(string) --* **[REQUIRED]**

          The name of the group.

        - **Filters** *(list) --* **[REQUIRED]**

          Filters define the criteria for the group. The ``matchingCount`` field displays the
          number of resources that match the criteria. The ``notMatchingCount`` field displays the
          number of resources that don't match the criteria.

          - *(dict) --*

            One or more filters. Use a filter to return a more specific list of results.

            - **Key** *(string) --* **[REQUIRED]**

              The name of the filter key.

            - **Values** *(list) --* **[REQUIRED]**

              Inventory filter values. Example: inventory filter where instance IDs are specified
              as values Key=AWS:InstanceInformation.InstanceId,Values= i-a12b3c4d5e6g,
              i-1a2b3c4d5e6,Type=Equal

              - *(string) --*

            - **Type** *(string) --*

              The type of filter. Valid values include the following:
              "Equal"|"NotEqual"|"BeginWith"|"LessThan"|"GreaterThan"
    """


_RequiredGetInventoryPaginateFiltersTypeDef = TypedDict(
    "_RequiredGetInventoryPaginateFiltersTypeDef", {"Key": str, "Values": List[str]}
)
_OptionalGetInventoryPaginateFiltersTypeDef = TypedDict(
    "_OptionalGetInventoryPaginateFiltersTypeDef", {"Type": str}, total=False
)


class GetInventoryPaginateFiltersTypeDef(
    _RequiredGetInventoryPaginateFiltersTypeDef,
    _OptionalGetInventoryPaginateFiltersTypeDef,
):
    """
    Type definition for `GetInventoryPaginate` `Filters`

    One or more filters. Use a filter to return a more specific list of results.

    - **Key** *(string) --* **[REQUIRED]**

      The name of the filter key.

    - **Values** *(list) --* **[REQUIRED]**

      Inventory filter values. Example: inventory filter where instance IDs are specified as values
      Key=AWS:InstanceInformation.InstanceId,Values= i-a12b3c4d5e6g, i-1a2b3c4d5e6,Type=Equal

      - *(string) --*

    - **Type** *(string) --*

      The type of filter. Valid values include the following:
      "Equal"|"NotEqual"|"BeginWith"|"LessThan"|"GreaterThan"
    """


_GetInventoryPaginatePaginationConfigTypeDef = TypedDict(
    "_GetInventoryPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class GetInventoryPaginatePaginationConfigTypeDef(
    _GetInventoryPaginatePaginationConfigTypeDef
):
    """
    Type definition for `GetInventoryPaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_GetInventoryPaginateResponseEntitiesDataTypeDef = TypedDict(
    "_GetInventoryPaginateResponseEntitiesDataTypeDef",
    {
        "TypeName": str,
        "SchemaVersion": str,
        "CaptureTime": str,
        "ContentHash": str,
        "Content": List[Dict[str, str]],
    },
    total=False,
)


class GetInventoryPaginateResponseEntitiesDataTypeDef(
    _GetInventoryPaginateResponseEntitiesDataTypeDef
):
    """
    Type definition for `GetInventoryPaginateResponseEntities` `Data`

    The inventory result item.

    - **TypeName** *(string) --*

      The name of the inventory result item type.

    - **SchemaVersion** *(string) --*

      The schema version for the inventory result item/

    - **CaptureTime** *(string) --*

      The time inventory item data was captured.

    - **ContentHash** *(string) --*

      MD5 hash of the inventory item type contents. The content hash is used to determine
      whether to update inventory information. The PutInventory API does not update the
      inventory item type contents if the MD5 hash has not changed since last update.

    - **Content** *(list) --*

      Contains all the inventory data of the item type. Results include attribute names
      and values.

      - *(dict) --*

        - *(string) --*

          - *(string) --*
    """


_GetInventoryPaginateResponseEntitiesTypeDef = TypedDict(
    "_GetInventoryPaginateResponseEntitiesTypeDef",
    {"Id": str, "Data": Dict[str, GetInventoryPaginateResponseEntitiesDataTypeDef]},
    total=False,
)


class GetInventoryPaginateResponseEntitiesTypeDef(
    _GetInventoryPaginateResponseEntitiesTypeDef
):
    """
    Type definition for `GetInventoryPaginateResponse` `Entities`

    Inventory query results.

    - **Id** *(string) --*

      ID of the inventory result entity. For example, for managed instance inventory the result
      will be the managed instance ID. For EC2 instance inventory, the result will be the
      instance ID.

    - **Data** *(dict) --*

      The data section in the inventory result entity JSON.

      - *(string) --*

        - *(dict) --*

          The inventory result item.

          - **TypeName** *(string) --*

            The name of the inventory result item type.

          - **SchemaVersion** *(string) --*

            The schema version for the inventory result item/

          - **CaptureTime** *(string) --*

            The time inventory item data was captured.

          - **ContentHash** *(string) --*

            MD5 hash of the inventory item type contents. The content hash is used to determine
            whether to update inventory information. The PutInventory API does not update the
            inventory item type contents if the MD5 hash has not changed since last update.

          - **Content** *(list) --*

            Contains all the inventory data of the item type. Results include attribute names
            and values.

            - *(dict) --*

              - *(string) --*

                - *(string) --*
    """


_GetInventoryPaginateResponseTypeDef = TypedDict(
    "_GetInventoryPaginateResponseTypeDef",
    {"Entities": List[GetInventoryPaginateResponseEntitiesTypeDef]},
    total=False,
)


class GetInventoryPaginateResponseTypeDef(_GetInventoryPaginateResponseTypeDef):
    """
    Type definition for `GetInventoryPaginate` `Response`

    - **Entities** *(list) --*

      Collection of inventory entities such as a collection of instance inventory.

      - *(dict) --*

        Inventory query results.

        - **Id** *(string) --*

          ID of the inventory result entity. For example, for managed instance inventory the result
          will be the managed instance ID. For EC2 instance inventory, the result will be the
          instance ID.

        - **Data** *(dict) --*

          The data section in the inventory result entity JSON.

          - *(string) --*

            - *(dict) --*

              The inventory result item.

              - **TypeName** *(string) --*

                The name of the inventory result item type.

              - **SchemaVersion** *(string) --*

                The schema version for the inventory result item/

              - **CaptureTime** *(string) --*

                The time inventory item data was captured.

              - **ContentHash** *(string) --*

                MD5 hash of the inventory item type contents. The content hash is used to determine
                whether to update inventory information. The PutInventory API does not update the
                inventory item type contents if the MD5 hash has not changed since last update.

              - **Content** *(list) --*

                Contains all the inventory data of the item type. Results include attribute names
                and values.

                - *(dict) --*

                  - *(string) --*

                    - *(string) --*
    """


_GetInventoryPaginateResultAttributesTypeDef = TypedDict(
    "_GetInventoryPaginateResultAttributesTypeDef", {"TypeName": str}
)


class GetInventoryPaginateResultAttributesTypeDef(
    _GetInventoryPaginateResultAttributesTypeDef
):
    """
    Type definition for `GetInventoryPaginate` `ResultAttributes`

    The inventory item result attribute.

    - **TypeName** *(string) --* **[REQUIRED]**

      Name of the inventory item type. Valid value: AWS:InstanceInformation. Default Value:
      AWS:InstanceInformation.
    """


_GetInventorySchemaPaginatePaginationConfigTypeDef = TypedDict(
    "_GetInventorySchemaPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class GetInventorySchemaPaginatePaginationConfigTypeDef(
    _GetInventorySchemaPaginatePaginationConfigTypeDef
):
    """
    Type definition for `GetInventorySchemaPaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_GetInventorySchemaPaginateResponseSchemasAttributesTypeDef = TypedDict(
    "_GetInventorySchemaPaginateResponseSchemasAttributesTypeDef",
    {"Name": str, "DataType": str},
    total=False,
)


class GetInventorySchemaPaginateResponseSchemasAttributesTypeDef(
    _GetInventorySchemaPaginateResponseSchemasAttributesTypeDef
):
    """
    Type definition for `GetInventorySchemaPaginateResponseSchemas` `Attributes`

    Attributes are the entries within the inventory item content. It contains name and
    value.

    - **Name** *(string) --*

      Name of the inventory item attribute.

    - **DataType** *(string) --*

      The data type of the inventory item attribute.
    """


_GetInventorySchemaPaginateResponseSchemasTypeDef = TypedDict(
    "_GetInventorySchemaPaginateResponseSchemasTypeDef",
    {
        "TypeName": str,
        "Version": str,
        "Attributes": List[GetInventorySchemaPaginateResponseSchemasAttributesTypeDef],
        "DisplayName": str,
    },
    total=False,
)


class GetInventorySchemaPaginateResponseSchemasTypeDef(
    _GetInventorySchemaPaginateResponseSchemasTypeDef
):
    """
    Type definition for `GetInventorySchemaPaginateResponse` `Schemas`

    The inventory item schema definition. Users can use this to compose inventory query filters.

    - **TypeName** *(string) --*

      The name of the inventory type. Default inventory item type names start with AWS. Custom
      inventory type names will start with Custom. Default inventory item types include the
      following: AWS:AWSComponent, AWS:Application, AWS:InstanceInformation, AWS:Network, and
      AWS:WindowsUpdate.

    - **Version** *(string) --*

      The schema version for the inventory item.

    - **Attributes** *(list) --*

      The schema attributes for inventory. This contains data type and attribute name.

      - *(dict) --*

        Attributes are the entries within the inventory item content. It contains name and
        value.

        - **Name** *(string) --*

          Name of the inventory item attribute.

        - **DataType** *(string) --*

          The data type of the inventory item attribute.

    - **DisplayName** *(string) --*

      The alias name of the inventory type. The alias name is used for display purposes.
    """


_GetInventorySchemaPaginateResponseTypeDef = TypedDict(
    "_GetInventorySchemaPaginateResponseTypeDef",
    {"Schemas": List[GetInventorySchemaPaginateResponseSchemasTypeDef]},
    total=False,
)


class GetInventorySchemaPaginateResponseTypeDef(
    _GetInventorySchemaPaginateResponseTypeDef
):
    """
    Type definition for `GetInventorySchemaPaginate` `Response`

    - **Schemas** *(list) --*

      Inventory schemas returned by the request.

      - *(dict) --*

        The inventory item schema definition. Users can use this to compose inventory query filters.

        - **TypeName** *(string) --*

          The name of the inventory type. Default inventory item type names start with AWS. Custom
          inventory type names will start with Custom. Default inventory item types include the
          following: AWS:AWSComponent, AWS:Application, AWS:InstanceInformation, AWS:Network, and
          AWS:WindowsUpdate.

        - **Version** *(string) --*

          The schema version for the inventory item.

        - **Attributes** *(list) --*

          The schema attributes for inventory. This contains data type and attribute name.

          - *(dict) --*

            Attributes are the entries within the inventory item content. It contains name and
            value.

            - **Name** *(string) --*

              Name of the inventory item attribute.

            - **DataType** *(string) --*

              The data type of the inventory item attribute.

        - **DisplayName** *(string) --*

          The alias name of the inventory type. The alias name is used for display purposes.
    """


_GetParameterHistoryPaginatePaginationConfigTypeDef = TypedDict(
    "_GetParameterHistoryPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class GetParameterHistoryPaginatePaginationConfigTypeDef(
    _GetParameterHistoryPaginatePaginationConfigTypeDef
):
    """
    Type definition for `GetParameterHistoryPaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_GetParameterHistoryPaginateResponseParametersPoliciesTypeDef = TypedDict(
    "_GetParameterHistoryPaginateResponseParametersPoliciesTypeDef",
    {"PolicyText": str, "PolicyType": str, "PolicyStatus": str},
    total=False,
)


class GetParameterHistoryPaginateResponseParametersPoliciesTypeDef(
    _GetParameterHistoryPaginateResponseParametersPoliciesTypeDef
):
    """
    Type definition for `GetParameterHistoryPaginateResponseParameters` `Policies`

    One or more policies assigned to a parameter.

    - **PolicyText** *(string) --*

      The JSON text of the policy.

    - **PolicyType** *(string) --*

      The type of policy. Parameter Store supports the following policy types: Expiration,
      ExpirationNotification, and NoChangeNotification.

    - **PolicyStatus** *(string) --*

      The status of the policy. Policies report the following statuses: Pending (the policy
      has not been enforced or applied yet), Finished (the policy was applied), Failed (the
      policy was not applied), or InProgress (the policy is being applied now).
    """


_GetParameterHistoryPaginateResponseParametersTypeDef = TypedDict(
    "_GetParameterHistoryPaginateResponseParametersTypeDef",
    {
        "Name": str,
        "Type": str,
        "KeyId": str,
        "LastModifiedDate": datetime,
        "LastModifiedUser": str,
        "Description": str,
        "Value": str,
        "AllowedPattern": str,
        "Version": int,
        "Labels": List[str],
        "Tier": str,
        "Policies": List[GetParameterHistoryPaginateResponseParametersPoliciesTypeDef],
    },
    total=False,
)


class GetParameterHistoryPaginateResponseParametersTypeDef(
    _GetParameterHistoryPaginateResponseParametersTypeDef
):
    """
    Type definition for `GetParameterHistoryPaginateResponse` `Parameters`

    Information about parameter usage.

    - **Name** *(string) --*

      The name of the parameter.

    - **Type** *(string) --*

      The type of parameter used.

    - **KeyId** *(string) --*

      The ID of the query key used for this parameter.

    - **LastModifiedDate** *(datetime) --*

      Date the parameter was last changed or updated.

    - **LastModifiedUser** *(string) --*

      Amazon Resource Name (ARN) of the AWS user who last changed the parameter.

    - **Description** *(string) --*

      Information about the parameter.

    - **Value** *(string) --*

      The parameter value.

    - **AllowedPattern** *(string) --*

      Parameter names can include the following letters and symbols.

      a-zA-Z0-9_.-

    - **Version** *(integer) --*

      The parameter version.

    - **Labels** *(list) --*

      Labels assigned to the parameter version.

      - *(string) --*

    - **Tier** *(string) --*

      The parameter tier.

    - **Policies** *(list) --*

      Information about the policies assigned to a parameter.

       `Working with Parameter Policies
       <https://docs.aws.amazon.com/systems-manager/latest/userguide/parameter-store-policies.html>`__
       in the *AWS Systems Manager User Guide* .

      - *(dict) --*

        One or more policies assigned to a parameter.

        - **PolicyText** *(string) --*

          The JSON text of the policy.

        - **PolicyType** *(string) --*

          The type of policy. Parameter Store supports the following policy types: Expiration,
          ExpirationNotification, and NoChangeNotification.

        - **PolicyStatus** *(string) --*

          The status of the policy. Policies report the following statuses: Pending (the policy
          has not been enforced or applied yet), Finished (the policy was applied), Failed (the
          policy was not applied), or InProgress (the policy is being applied now).
    """


_GetParameterHistoryPaginateResponseTypeDef = TypedDict(
    "_GetParameterHistoryPaginateResponseTypeDef",
    {"Parameters": List[GetParameterHistoryPaginateResponseParametersTypeDef]},
    total=False,
)


class GetParameterHistoryPaginateResponseTypeDef(
    _GetParameterHistoryPaginateResponseTypeDef
):
    """
    Type definition for `GetParameterHistoryPaginate` `Response`

    - **Parameters** *(list) --*

      A list of parameters returned by the request.

      - *(dict) --*

        Information about parameter usage.

        - **Name** *(string) --*

          The name of the parameter.

        - **Type** *(string) --*

          The type of parameter used.

        - **KeyId** *(string) --*

          The ID of the query key used for this parameter.

        - **LastModifiedDate** *(datetime) --*

          Date the parameter was last changed or updated.

        - **LastModifiedUser** *(string) --*

          Amazon Resource Name (ARN) of the AWS user who last changed the parameter.

        - **Description** *(string) --*

          Information about the parameter.

        - **Value** *(string) --*

          The parameter value.

        - **AllowedPattern** *(string) --*

          Parameter names can include the following letters and symbols.

          a-zA-Z0-9_.-

        - **Version** *(integer) --*

          The parameter version.

        - **Labels** *(list) --*

          Labels assigned to the parameter version.

          - *(string) --*

        - **Tier** *(string) --*

          The parameter tier.

        - **Policies** *(list) --*

          Information about the policies assigned to a parameter.

           `Working with Parameter Policies
           <https://docs.aws.amazon.com/systems-manager/latest/userguide/parameter-store-policies.html>`__
           in the *AWS Systems Manager User Guide* .

          - *(dict) --*

            One or more policies assigned to a parameter.

            - **PolicyText** *(string) --*

              The JSON text of the policy.

            - **PolicyType** *(string) --*

              The type of policy. Parameter Store supports the following policy types: Expiration,
              ExpirationNotification, and NoChangeNotification.

            - **PolicyStatus** *(string) --*

              The status of the policy. Policies report the following statuses: Pending (the policy
              has not been enforced or applied yet), Finished (the policy was applied), Failed (the
              policy was not applied), or InProgress (the policy is being applied now).
    """


_GetParametersByPathPaginatePaginationConfigTypeDef = TypedDict(
    "_GetParametersByPathPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class GetParametersByPathPaginatePaginationConfigTypeDef(
    _GetParametersByPathPaginatePaginationConfigTypeDef
):
    """
    Type definition for `GetParametersByPathPaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_RequiredGetParametersByPathPaginateParameterFiltersTypeDef = TypedDict(
    "_RequiredGetParametersByPathPaginateParameterFiltersTypeDef", {"Key": str}
)
_OptionalGetParametersByPathPaginateParameterFiltersTypeDef = TypedDict(
    "_OptionalGetParametersByPathPaginateParameterFiltersTypeDef",
    {"Option": str, "Values": List[str]},
    total=False,
)


class GetParametersByPathPaginateParameterFiltersTypeDef(
    _RequiredGetParametersByPathPaginateParameterFiltersTypeDef,
    _OptionalGetParametersByPathPaginateParameterFiltersTypeDef,
):
    """
    Type definition for `GetParametersByPathPaginate` `ParameterFilters`

    One or more filters. Use a filter to return a more specific list of results.

    .. warning::

      The ``ParameterStringFilter`` object is used by the  DescribeParameters and
      GetParametersByPath API actions. However, not all of the pattern values listed for ``Key``
      can be used with both actions.

      For ``DescribeActions`` , all of the listed patterns are valid, with the exception of
      ``Label`` .

      For ``GetParametersByPath`` , the following patterns listed for ``Key`` are not valid:
      ``Name`` , ``Path`` , and ``Tier`` .

      For examples of CLI commands demonstrating valid parameter filter constructions, see
      `Searching for Systems Manager Parameters
      <http://docs.aws.amazon.com/systems-manager/latest/userguide/parameter-search.html>`__ in the
      *AWS Systems Manager User Guide* .

    - **Key** *(string) --* **[REQUIRED]**

      The name of the filter.

    - **Option** *(string) --*

      For all filters used with  DescribeParameters , valid options include ``Equals`` and
      ``BeginsWith`` . The ``Name`` filter additionally supports the ``Contains`` option.
      (Exception: For filters using the key ``Path`` , valid options include ``Recursive`` and
      ``OneLevel`` .)

      For filters used with  GetParametersByPath , valid options include ``Equals`` and
      ``BeginsWith`` . (Exception: For filters using the key ``Label`` , the only valid option is
      ``Equals`` .)

    - **Values** *(list) --*

      The value you want to search for.

      - *(string) --*
    """


_GetParametersByPathPaginateResponseParametersTypeDef = TypedDict(
    "_GetParametersByPathPaginateResponseParametersTypeDef",
    {
        "Name": str,
        "Type": str,
        "Value": str,
        "Version": int,
        "Selector": str,
        "SourceResult": str,
        "LastModifiedDate": datetime,
        "ARN": str,
    },
    total=False,
)


class GetParametersByPathPaginateResponseParametersTypeDef(
    _GetParametersByPathPaginateResponseParametersTypeDef
):
    """
    Type definition for `GetParametersByPathPaginateResponse` `Parameters`

    An Amazon EC2 Systems Manager parameter in Parameter Store.

    - **Name** *(string) --*

      The name of the parameter.

    - **Type** *(string) --*

      The type of parameter. Valid values include the following: String, String list, Secure
      string.

    - **Value** *(string) --*

      The parameter value.

    - **Version** *(integer) --*

      The parameter version.

    - **Selector** *(string) --*

      Either the version number or the label used to retrieve the parameter value. Specify
      selectors by using one of the following formats:

      parameter_name:version

      parameter_name:label

    - **SourceResult** *(string) --*

      Applies to parameters that reference information in other AWS services. SourceResult is
      the raw result or response from the source.

    - **LastModifiedDate** *(datetime) --*

      Date the parameter was last changed or updated and the parameter version was created.

    - **ARN** *(string) --*

      The Amazon Resource Name (ARN) of the parameter.
    """


_GetParametersByPathPaginateResponseTypeDef = TypedDict(
    "_GetParametersByPathPaginateResponseTypeDef",
    {"Parameters": List[GetParametersByPathPaginateResponseParametersTypeDef]},
    total=False,
)


class GetParametersByPathPaginateResponseTypeDef(
    _GetParametersByPathPaginateResponseTypeDef
):
    """
    Type definition for `GetParametersByPathPaginate` `Response`

    - **Parameters** *(list) --*

      A list of parameters found in the specified hierarchy.

      - *(dict) --*

        An Amazon EC2 Systems Manager parameter in Parameter Store.

        - **Name** *(string) --*

          The name of the parameter.

        - **Type** *(string) --*

          The type of parameter. Valid values include the following: String, String list, Secure
          string.

        - **Value** *(string) --*

          The parameter value.

        - **Version** *(integer) --*

          The parameter version.

        - **Selector** *(string) --*

          Either the version number or the label used to retrieve the parameter value. Specify
          selectors by using one of the following formats:

          parameter_name:version

          parameter_name:label

        - **SourceResult** *(string) --*

          Applies to parameters that reference information in other AWS services. SourceResult is
          the raw result or response from the source.

        - **LastModifiedDate** *(datetime) --*

          Date the parameter was last changed or updated and the parameter version was created.

        - **ARN** *(string) --*

          The Amazon Resource Name (ARN) of the parameter.
    """


_ListAssociationVersionsPaginatePaginationConfigTypeDef = TypedDict(
    "_ListAssociationVersionsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class ListAssociationVersionsPaginatePaginationConfigTypeDef(
    _ListAssociationVersionsPaginatePaginationConfigTypeDef
):
    """
    Type definition for `ListAssociationVersionsPaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_ListAssociationVersionsPaginateResponseAssociationVersionsOutputLocationS3LocationTypeDef = TypedDict(
    "_ListAssociationVersionsPaginateResponseAssociationVersionsOutputLocationS3LocationTypeDef",
    {"OutputS3Region": str, "OutputS3BucketName": str, "OutputS3KeyPrefix": str},
    total=False,
)


class ListAssociationVersionsPaginateResponseAssociationVersionsOutputLocationS3LocationTypeDef(
    _ListAssociationVersionsPaginateResponseAssociationVersionsOutputLocationS3LocationTypeDef
):
    """
    Type definition for `ListAssociationVersionsPaginateResponseAssociationVersionsOutputLocation` `S3Location`

    An Amazon S3 bucket where you want to store the results of this request.

    - **OutputS3Region** *(string) --*

      (Deprecated) You can no longer specify this parameter. The system ignores it.
      Instead, Systems Manager automatically determines the Amazon S3 bucket region.

    - **OutputS3BucketName** *(string) --*

      The name of the Amazon S3 bucket.

    - **OutputS3KeyPrefix** *(string) --*

      The Amazon S3 bucket subfolder.
    """


_ListAssociationVersionsPaginateResponseAssociationVersionsOutputLocationTypeDef = TypedDict(
    "_ListAssociationVersionsPaginateResponseAssociationVersionsOutputLocationTypeDef",
    {
        "S3Location": ListAssociationVersionsPaginateResponseAssociationVersionsOutputLocationS3LocationTypeDef
    },
    total=False,
)


class ListAssociationVersionsPaginateResponseAssociationVersionsOutputLocationTypeDef(
    _ListAssociationVersionsPaginateResponseAssociationVersionsOutputLocationTypeDef
):
    """
    Type definition for `ListAssociationVersionsPaginateResponseAssociationVersions` `OutputLocation`

    The location in Amazon S3 specified for the association when the association version was
    created.

    - **S3Location** *(dict) --*

      An Amazon S3 bucket where you want to store the results of this request.

      - **OutputS3Region** *(string) --*

        (Deprecated) You can no longer specify this parameter. The system ignores it.
        Instead, Systems Manager automatically determines the Amazon S3 bucket region.

      - **OutputS3BucketName** *(string) --*

        The name of the Amazon S3 bucket.

      - **OutputS3KeyPrefix** *(string) --*

        The Amazon S3 bucket subfolder.
    """


_ListAssociationVersionsPaginateResponseAssociationVersionsTargetsTypeDef = TypedDict(
    "_ListAssociationVersionsPaginateResponseAssociationVersionsTargetsTypeDef",
    {"Key": str, "Values": List[str]},
    total=False,
)


class ListAssociationVersionsPaginateResponseAssociationVersionsTargetsTypeDef(
    _ListAssociationVersionsPaginateResponseAssociationVersionsTargetsTypeDef
):
    """
    Type definition for `ListAssociationVersionsPaginateResponseAssociationVersions` `Targets`

    An array of search criteria that targets instances using a Key,Value combination that
    you specify.

    Supported formats include the following.

    * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

    * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

    * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

    * (Maintenance window targets only)
    ``Key=resource-groups:Name,Values=*resource-group-name* ``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

    For example:

    * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

    * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

    * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

    * (Maintenance window targets only)
    ``Key=resource-groups:Name,Values=ProductionResourceGroup``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC*
    ``

    For information about how to send commands that target instances using ``Key,Value``
    parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
    <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
    in the *AWS Systems Manager User Guide* .

    - **Key** *(string) --*

      User-defined criteria for sending commands that target instances that meet the
      criteria.

    - **Values** *(list) --*

      User-defined criteria that maps to ``Key`` . For example, if you specified
      ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
      instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

      - *(string) --*
    """


_ListAssociationVersionsPaginateResponseAssociationVersionsTypeDef = TypedDict(
    "_ListAssociationVersionsPaginateResponseAssociationVersionsTypeDef",
    {
        "AssociationId": str,
        "AssociationVersion": str,
        "CreatedDate": datetime,
        "Name": str,
        "DocumentVersion": str,
        "Parameters": Dict[str, List[str]],
        "Targets": List[
            ListAssociationVersionsPaginateResponseAssociationVersionsTargetsTypeDef
        ],
        "ScheduleExpression": str,
        "OutputLocation": ListAssociationVersionsPaginateResponseAssociationVersionsOutputLocationTypeDef,
        "AssociationName": str,
        "MaxErrors": str,
        "MaxConcurrency": str,
        "ComplianceSeverity": str,
    },
    total=False,
)


class ListAssociationVersionsPaginateResponseAssociationVersionsTypeDef(
    _ListAssociationVersionsPaginateResponseAssociationVersionsTypeDef
):
    """
    Type definition for `ListAssociationVersionsPaginateResponse` `AssociationVersions`

    Information about the association version.

    - **AssociationId** *(string) --*

      The ID created by the system when the association was created.

    - **AssociationVersion** *(string) --*

      The association version.

    - **CreatedDate** *(datetime) --*

      The date the association version was created.

    - **Name** *(string) --*

      The name specified when the association was created.

    - **DocumentVersion** *(string) --*

      The version of a Systems Manager document used when the association version was created.

    - **Parameters** *(dict) --*

      Parameters specified when the association version was created.

      - *(string) --*

        - *(list) --*

          - *(string) --*

    - **Targets** *(list) --*

      The targets specified for the association when the association version was created.

      - *(dict) --*

        An array of search criteria that targets instances using a Key,Value combination that
        you specify.

        Supported formats include the following.

        * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

        * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

        * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

        * (Maintenance window targets only)
        ``Key=resource-groups:Name,Values=*resource-group-name* ``

        * (Maintenance window targets only)
        ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

        For example:

        * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

        * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

        * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

        * (Maintenance window targets only)
        ``Key=resource-groups:Name,Values=ProductionResourceGroup``

        * (Maintenance window targets only)
        ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC*
        ``

        For information about how to send commands that target instances using ``Key,Value``
        parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
        <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
        in the *AWS Systems Manager User Guide* .

        - **Key** *(string) --*

          User-defined criteria for sending commands that target instances that meet the
          criteria.

        - **Values** *(list) --*

          User-defined criteria that maps to ``Key`` . For example, if you specified
          ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
          instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

          - *(string) --*

    - **ScheduleExpression** *(string) --*

      The cron or rate schedule specified for the association when the association version was
      created.

    - **OutputLocation** *(dict) --*

      The location in Amazon S3 specified for the association when the association version was
      created.

      - **S3Location** *(dict) --*

        An Amazon S3 bucket where you want to store the results of this request.

        - **OutputS3Region** *(string) --*

          (Deprecated) You can no longer specify this parameter. The system ignores it.
          Instead, Systems Manager automatically determines the Amazon S3 bucket region.

        - **OutputS3BucketName** *(string) --*

          The name of the Amazon S3 bucket.

        - **OutputS3KeyPrefix** *(string) --*

          The Amazon S3 bucket subfolder.

    - **AssociationName** *(string) --*

      The name specified for the association version when the association version was created.

    - **MaxErrors** *(string) --*

      The number of errors that are allowed before the system stops sending requests to run the
      association on additional targets. You can specify either an absolute number of errors,
      for example 10, or a percentage of the target set, for example 10%. If you specify 3, for
      example, the system stops sending requests when the fourth error is received. If you
      specify 0, then the system stops sending requests after the first error is returned. If
      you run an association on 50 instances and set MaxError to 10%, then the system stops
      sending the request when the sixth error is received.

      Executions that are already running an association when MaxErrors is reached are allowed
      to complete, but some of these executions may fail as well. If you need to ensure that
      there won't be more than max-errors failed executions, set MaxConcurrency to 1 so that
      executions proceed one at a time.

    - **MaxConcurrency** *(string) --*

      The maximum number of targets allowed to run the association at the same time. You can
      specify a number, for example 10, or a percentage of the target set, for example 10%. The
      default value is 100%, which means all targets run the association at the same time.

      If a new instance starts and attempts to run an association while Systems Manager is
      running MaxConcurrency associations, the association is allowed to run. During the next
      association interval, the new instance will process its association within the limit
      specified for MaxConcurrency.

    - **ComplianceSeverity** *(string) --*

      The severity level that is assigned to the association.
    """


_ListAssociationVersionsPaginateResponseTypeDef = TypedDict(
    "_ListAssociationVersionsPaginateResponseTypeDef",
    {
        "AssociationVersions": List[
            ListAssociationVersionsPaginateResponseAssociationVersionsTypeDef
        ]
    },
    total=False,
)


class ListAssociationVersionsPaginateResponseTypeDef(
    _ListAssociationVersionsPaginateResponseTypeDef
):
    """
    Type definition for `ListAssociationVersionsPaginate` `Response`

    - **AssociationVersions** *(list) --*

      Information about all versions of the association for the specified association ID.

      - *(dict) --*

        Information about the association version.

        - **AssociationId** *(string) --*

          The ID created by the system when the association was created.

        - **AssociationVersion** *(string) --*

          The association version.

        - **CreatedDate** *(datetime) --*

          The date the association version was created.

        - **Name** *(string) --*

          The name specified when the association was created.

        - **DocumentVersion** *(string) --*

          The version of a Systems Manager document used when the association version was created.

        - **Parameters** *(dict) --*

          Parameters specified when the association version was created.

          - *(string) --*

            - *(list) --*

              - *(string) --*

        - **Targets** *(list) --*

          The targets specified for the association when the association version was created.

          - *(dict) --*

            An array of search criteria that targets instances using a Key,Value combination that
            you specify.

            Supported formats include the following.

            * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

            * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

            * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

            * (Maintenance window targets only)
            ``Key=resource-groups:Name,Values=*resource-group-name* ``

            * (Maintenance window targets only)
            ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

            For example:

            * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

            * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

            * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

            * (Maintenance window targets only)
            ``Key=resource-groups:Name,Values=ProductionResourceGroup``

            * (Maintenance window targets only)
            ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC*
            ``

            For information about how to send commands that target instances using ``Key,Value``
            parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
            <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
            in the *AWS Systems Manager User Guide* .

            - **Key** *(string) --*

              User-defined criteria for sending commands that target instances that meet the
              criteria.

            - **Values** *(list) --*

              User-defined criteria that maps to ``Key`` . For example, if you specified
              ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
              instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

              - *(string) --*

        - **ScheduleExpression** *(string) --*

          The cron or rate schedule specified for the association when the association version was
          created.

        - **OutputLocation** *(dict) --*

          The location in Amazon S3 specified for the association when the association version was
          created.

          - **S3Location** *(dict) --*

            An Amazon S3 bucket where you want to store the results of this request.

            - **OutputS3Region** *(string) --*

              (Deprecated) You can no longer specify this parameter. The system ignores it.
              Instead, Systems Manager automatically determines the Amazon S3 bucket region.

            - **OutputS3BucketName** *(string) --*

              The name of the Amazon S3 bucket.

            - **OutputS3KeyPrefix** *(string) --*

              The Amazon S3 bucket subfolder.

        - **AssociationName** *(string) --*

          The name specified for the association version when the association version was created.

        - **MaxErrors** *(string) --*

          The number of errors that are allowed before the system stops sending requests to run the
          association on additional targets. You can specify either an absolute number of errors,
          for example 10, or a percentage of the target set, for example 10%. If you specify 3, for
          example, the system stops sending requests when the fourth error is received. If you
          specify 0, then the system stops sending requests after the first error is returned. If
          you run an association on 50 instances and set MaxError to 10%, then the system stops
          sending the request when the sixth error is received.

          Executions that are already running an association when MaxErrors is reached are allowed
          to complete, but some of these executions may fail as well. If you need to ensure that
          there won't be more than max-errors failed executions, set MaxConcurrency to 1 so that
          executions proceed one at a time.

        - **MaxConcurrency** *(string) --*

          The maximum number of targets allowed to run the association at the same time. You can
          specify a number, for example 10, or a percentage of the target set, for example 10%. The
          default value is 100%, which means all targets run the association at the same time.

          If a new instance starts and attempts to run an association while Systems Manager is
          running MaxConcurrency associations, the association is allowed to run. During the next
          association interval, the new instance will process its association within the limit
          specified for MaxConcurrency.

        - **ComplianceSeverity** *(string) --*

          The severity level that is assigned to the association.
    """


_ListAssociationsPaginateAssociationFilterListTypeDef = TypedDict(
    "_ListAssociationsPaginateAssociationFilterListTypeDef", {"key": str, "value": str}
)


class ListAssociationsPaginateAssociationFilterListTypeDef(
    _ListAssociationsPaginateAssociationFilterListTypeDef
):
    """
    Type definition for `ListAssociationsPaginate` `AssociationFilterList`

    Describes a filter.

    - **key** *(string) --* **[REQUIRED]**

      The name of the filter.

    - **value** *(string) --* **[REQUIRED]**

      The filter value.
    """


_ListAssociationsPaginatePaginationConfigTypeDef = TypedDict(
    "_ListAssociationsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class ListAssociationsPaginatePaginationConfigTypeDef(
    _ListAssociationsPaginatePaginationConfigTypeDef
):
    """
    Type definition for `ListAssociationsPaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_ListAssociationsPaginateResponseAssociationsOverviewTypeDef = TypedDict(
    "_ListAssociationsPaginateResponseAssociationsOverviewTypeDef",
    {
        "Status": str,
        "DetailedStatus": str,
        "AssociationStatusAggregatedCount": Dict[str, int],
    },
    total=False,
)


class ListAssociationsPaginateResponseAssociationsOverviewTypeDef(
    _ListAssociationsPaginateResponseAssociationsOverviewTypeDef
):
    """
    Type definition for `ListAssociationsPaginateResponseAssociations` `Overview`

    Information about the association.

    - **Status** *(string) --*

      The status of the association. Status can be: Pending, Success, or Failed.

    - **DetailedStatus** *(string) --*

      A detailed status of the association.

    - **AssociationStatusAggregatedCount** *(dict) --*

      Returns the number of targets for the association status. For example, if you created
      an association with two instances, and one of them was successful, this would return
      the count of instances by status.

      - *(string) --*

        - *(integer) --*
    """


_ListAssociationsPaginateResponseAssociationsTargetsTypeDef = TypedDict(
    "_ListAssociationsPaginateResponseAssociationsTargetsTypeDef",
    {"Key": str, "Values": List[str]},
    total=False,
)


class ListAssociationsPaginateResponseAssociationsTargetsTypeDef(
    _ListAssociationsPaginateResponseAssociationsTargetsTypeDef
):
    """
    Type definition for `ListAssociationsPaginateResponseAssociations` `Targets`

    An array of search criteria that targets instances using a Key,Value combination that
    you specify.

    Supported formats include the following.

    * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

    * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

    * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

    * (Maintenance window targets only)
    ``Key=resource-groups:Name,Values=*resource-group-name* ``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

    For example:

    * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

    * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

    * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

    * (Maintenance window targets only)
    ``Key=resource-groups:Name,Values=ProductionResourceGroup``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC*
    ``

    For information about how to send commands that target instances using ``Key,Value``
    parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
    <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
    in the *AWS Systems Manager User Guide* .

    - **Key** *(string) --*

      User-defined criteria for sending commands that target instances that meet the
      criteria.

    - **Values** *(list) --*

      User-defined criteria that maps to ``Key`` . For example, if you specified
      ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
      instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

      - *(string) --*
    """


_ListAssociationsPaginateResponseAssociationsTypeDef = TypedDict(
    "_ListAssociationsPaginateResponseAssociationsTypeDef",
    {
        "Name": str,
        "InstanceId": str,
        "AssociationId": str,
        "AssociationVersion": str,
        "DocumentVersion": str,
        "Targets": List[ListAssociationsPaginateResponseAssociationsTargetsTypeDef],
        "LastExecutionDate": datetime,
        "Overview": ListAssociationsPaginateResponseAssociationsOverviewTypeDef,
        "ScheduleExpression": str,
        "AssociationName": str,
    },
    total=False,
)


class ListAssociationsPaginateResponseAssociationsTypeDef(
    _ListAssociationsPaginateResponseAssociationsTypeDef
):
    """
    Type definition for `ListAssociationsPaginateResponse` `Associations`

    Describes an association of a Systems Manager document and an instance.

    - **Name** *(string) --*

      The name of the Systems Manager document.

    - **InstanceId** *(string) --*

      The ID of the instance.

    - **AssociationId** *(string) --*

      The ID created by the system when you create an association. An association is a binding
      between a document and a set of targets with a schedule.

    - **AssociationVersion** *(string) --*

      The association version.

    - **DocumentVersion** *(string) --*

      The version of the document used in the association.

    - **Targets** *(list) --*

      The instances targeted by the request to create an association.

      - *(dict) --*

        An array of search criteria that targets instances using a Key,Value combination that
        you specify.

        Supported formats include the following.

        * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

        * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

        * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

        * (Maintenance window targets only)
        ``Key=resource-groups:Name,Values=*resource-group-name* ``

        * (Maintenance window targets only)
        ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

        For example:

        * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

        * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

        * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

        * (Maintenance window targets only)
        ``Key=resource-groups:Name,Values=ProductionResourceGroup``

        * (Maintenance window targets only)
        ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC*
        ``

        For information about how to send commands that target instances using ``Key,Value``
        parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
        <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
        in the *AWS Systems Manager User Guide* .

        - **Key** *(string) --*

          User-defined criteria for sending commands that target instances that meet the
          criteria.

        - **Values** *(list) --*

          User-defined criteria that maps to ``Key`` . For example, if you specified
          ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
          instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

          - *(string) --*

    - **LastExecutionDate** *(datetime) --*

      The date on which the association was last run.

    - **Overview** *(dict) --*

      Information about the association.

      - **Status** *(string) --*

        The status of the association. Status can be: Pending, Success, or Failed.

      - **DetailedStatus** *(string) --*

        A detailed status of the association.

      - **AssociationStatusAggregatedCount** *(dict) --*

        Returns the number of targets for the association status. For example, if you created
        an association with two instances, and one of them was successful, this would return
        the count of instances by status.

        - *(string) --*

          - *(integer) --*

    - **ScheduleExpression** *(string) --*

      A cron expression that specifies a schedule when the association runs.

    - **AssociationName** *(string) --*

      The association name.
    """


_ListAssociationsPaginateResponseTypeDef = TypedDict(
    "_ListAssociationsPaginateResponseTypeDef",
    {"Associations": List[ListAssociationsPaginateResponseAssociationsTypeDef]},
    total=False,
)


class ListAssociationsPaginateResponseTypeDef(_ListAssociationsPaginateResponseTypeDef):
    """
    Type definition for `ListAssociationsPaginate` `Response`

    - **Associations** *(list) --*

      The associations.

      - *(dict) --*

        Describes an association of a Systems Manager document and an instance.

        - **Name** *(string) --*

          The name of the Systems Manager document.

        - **InstanceId** *(string) --*

          The ID of the instance.

        - **AssociationId** *(string) --*

          The ID created by the system when you create an association. An association is a binding
          between a document and a set of targets with a schedule.

        - **AssociationVersion** *(string) --*

          The association version.

        - **DocumentVersion** *(string) --*

          The version of the document used in the association.

        - **Targets** *(list) --*

          The instances targeted by the request to create an association.

          - *(dict) --*

            An array of search criteria that targets instances using a Key,Value combination that
            you specify.

            Supported formats include the following.

            * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

            * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

            * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

            * (Maintenance window targets only)
            ``Key=resource-groups:Name,Values=*resource-group-name* ``

            * (Maintenance window targets only)
            ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

            For example:

            * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

            * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

            * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

            * (Maintenance window targets only)
            ``Key=resource-groups:Name,Values=ProductionResourceGroup``

            * (Maintenance window targets only)
            ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC*
            ``

            For information about how to send commands that target instances using ``Key,Value``
            parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
            <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
            in the *AWS Systems Manager User Guide* .

            - **Key** *(string) --*

              User-defined criteria for sending commands that target instances that meet the
              criteria.

            - **Values** *(list) --*

              User-defined criteria that maps to ``Key`` . For example, if you specified
              ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
              instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

              - *(string) --*

        - **LastExecutionDate** *(datetime) --*

          The date on which the association was last run.

        - **Overview** *(dict) --*

          Information about the association.

          - **Status** *(string) --*

            The status of the association. Status can be: Pending, Success, or Failed.

          - **DetailedStatus** *(string) --*

            A detailed status of the association.

          - **AssociationStatusAggregatedCount** *(dict) --*

            Returns the number of targets for the association status. For example, if you created
            an association with two instances, and one of them was successful, this would return
            the count of instances by status.

            - *(string) --*

              - *(integer) --*

        - **ScheduleExpression** *(string) --*

          A cron expression that specifies a schedule when the association runs.

        - **AssociationName** *(string) --*

          The association name.
    """


_ListCommandInvocationsPaginateFiltersTypeDef = TypedDict(
    "_ListCommandInvocationsPaginateFiltersTypeDef", {"key": str, "value": str}
)


class ListCommandInvocationsPaginateFiltersTypeDef(
    _ListCommandInvocationsPaginateFiltersTypeDef
):
    """
    Type definition for `ListCommandInvocationsPaginate` `Filters`

    Describes a command filter.

    - **key** *(string) --* **[REQUIRED]**

      The name of the filter.

    - **value** *(string) --* **[REQUIRED]**

      The filter value. Valid values for each filter key are as follows:

      * **InvokedAfter** : Specify a timestamp to limit your results. For example, specify
      ``2018-07-07T00:00:00Z`` to see a list of command executions occurring July 7, 2018, and
      later.

      * **InvokedBefore** : Specify a timestamp to limit your results. For example, specify
      ``2018-07-07T00:00:00Z`` to see a list of command executions from before July 7, 2018.

      * **Status** : Specify a valid command status to see a list of all command executions with
      that status. Status values you can specify include:

        * ``Pending``

        * ``InProgress``

        * ``Success``

        * ``Cancelled``

        * ``Failed``

        * ``TimedOut``

        * ``Cancelling``

      * **DocumentName** : Specify name of the SSM document for which you want to see command
      execution results. For example, specify ``AWS-RunPatchBaseline`` to see command executions
      that used this SSM document to perform security patching operations on instances.

      * **ExecutionStage** : Specify one of the following values:

        * ``Executing`` : Returns a list of command executions that are currently still running.

        * ``Complete`` : Returns a list of command executions that have already completed.
    """


_ListCommandInvocationsPaginatePaginationConfigTypeDef = TypedDict(
    "_ListCommandInvocationsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class ListCommandInvocationsPaginatePaginationConfigTypeDef(
    _ListCommandInvocationsPaginatePaginationConfigTypeDef
):
    """
    Type definition for `ListCommandInvocationsPaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_ListCommandInvocationsPaginateResponseCommandInvocationsCloudWatchOutputConfigTypeDef = TypedDict(
    "_ListCommandInvocationsPaginateResponseCommandInvocationsCloudWatchOutputConfigTypeDef",
    {"CloudWatchLogGroupName": str, "CloudWatchOutputEnabled": bool},
    total=False,
)


class ListCommandInvocationsPaginateResponseCommandInvocationsCloudWatchOutputConfigTypeDef(
    _ListCommandInvocationsPaginateResponseCommandInvocationsCloudWatchOutputConfigTypeDef
):
    """
    Type definition for `ListCommandInvocationsPaginateResponseCommandInvocations` `CloudWatchOutputConfig`

    CloudWatch Logs information where you want Systems Manager to send the command output.

    - **CloudWatchLogGroupName** *(string) --*

      The name of the CloudWatch log group where you want to send command output. If you
      don't specify a group name, Systems Manager automatically creates a log group for you.
      The log group uses the following naming format: aws/ssm/*SystemsManagerDocumentName* .

    - **CloudWatchOutputEnabled** *(boolean) --*

      Enables Systems Manager to send command output to CloudWatch Logs.
    """


_ListCommandInvocationsPaginateResponseCommandInvocationsCommandPluginsTypeDef = TypedDict(
    "_ListCommandInvocationsPaginateResponseCommandInvocationsCommandPluginsTypeDef",
    {
        "Name": str,
        "Status": str,
        "StatusDetails": str,
        "ResponseCode": int,
        "ResponseStartDateTime": datetime,
        "ResponseFinishDateTime": datetime,
        "Output": str,
        "StandardOutputUrl": str,
        "StandardErrorUrl": str,
        "OutputS3Region": str,
        "OutputS3BucketName": str,
        "OutputS3KeyPrefix": str,
    },
    total=False,
)


class ListCommandInvocationsPaginateResponseCommandInvocationsCommandPluginsTypeDef(
    _ListCommandInvocationsPaginateResponseCommandInvocationsCommandPluginsTypeDef
):
    """
    Type definition for `ListCommandInvocationsPaginateResponseCommandInvocations` `CommandPlugins`

    Describes plugin details.

    - **Name** *(string) --*

      The name of the plugin. Must be one of the following: aws:updateAgent,
      aws:domainjoin, aws:applications, aws:runPowerShellScript, aws:psmodule,
      aws:cloudWatch, aws:runShellScript, or aws:updateSSMAgent.

    - **Status** *(string) --*

      The status of this plugin. You can run a document with multiple plugins.

    - **StatusDetails** *(string) --*

      A detailed status of the plugin execution. StatusDetails includes more information
      than Status because it includes states resulting from error and concurrency control
      parameters. StatusDetails can show different results than Status. For more
      information about these statuses, see `Understanding Command Statuses
      <http://docs.aws.amazon.com/systems-manager/latest/userguide/monitor-commands.html>`__
      in the *AWS Systems Manager User Guide* . StatusDetails can be one of the following
      values:

      * Pending: The command has not been sent to the instance.

      * In Progress: The command has been sent to the instance but has not reached a
      terminal state.

      * Success: The execution of the command or plugin was successfully completed. This is
      a terminal state.

      * Delivery Timed Out: The command was not delivered to the instance before the
      delivery timeout expired. Delivery timeouts do not count against the parent command's
      MaxErrors limit, but they do contribute to whether the parent command status is
      Success or Incomplete. This is a terminal state.

      * Execution Timed Out: Command execution started on the instance, but the execution
      was not complete before the execution timeout expired. Execution timeouts count
      against the MaxErrors limit of the parent command. This is a terminal state.

      * Failed: The command was not successful on the instance. For a plugin, this
      indicates that the result code was not zero. For a command invocation, this indicates
      that the result code for one or more plugins was not zero. Invocation failures count
      against the MaxErrors limit of the parent command. This is a terminal state.

      * Canceled: The command was terminated before it was completed. This is a terminal
      state.

      * Undeliverable: The command can't be delivered to the instance. The instance might
      not exist, or it might not be responding. Undeliverable invocations don't count
      against the parent command's MaxErrors limit, and they don't contribute to whether
      the parent command status is Success or Incomplete. This is a terminal state.

      * Terminated: The parent command exceeded its MaxErrors limit and subsequent command
      invocations were canceled by the system. This is a terminal state.

    - **ResponseCode** *(integer) --*

      A numeric response code generated after running the plugin.

    - **ResponseStartDateTime** *(datetime) --*

      The time the plugin started running.

    - **ResponseFinishDateTime** *(datetime) --*

      The time the plugin stopped running. Could stop prematurely if, for example, a cancel
      command was sent.

    - **Output** *(string) --*

      Output of the plugin execution.

    - **StandardOutputUrl** *(string) --*

      The URL for the complete text written by the plugin to stdout in Amazon S3. If the
      Amazon S3 bucket for the command was not specified, then this string is empty.

    - **StandardErrorUrl** *(string) --*

      The URL for the complete text written by the plugin to stderr. If execution is not
      yet complete, then this string is empty.

    - **OutputS3Region** *(string) --*

      (Deprecated) You can no longer specify this parameter. The system ignores it.
      Instead, Systems Manager automatically determines the Amazon S3 bucket region.

    - **OutputS3BucketName** *(string) --*

      The S3 bucket where the responses to the command executions should be stored. This
      was requested when issuing the command. For example, in the following response:

      test_folder/ab19cb99-a030-46dd-9dfc-8eSAMPLEPre-Fix/i-1234567876543/awsrunShellScript

      test_folder is the name of the Amazon S3 bucket;

      ab19cb99-a030-46dd-9dfc-8eSAMPLEPre-Fix is the name of the S3 prefix;

      i-1234567876543 is the instance ID;

      awsrunShellScript is the name of the plugin.

    - **OutputS3KeyPrefix** *(string) --*

      The S3 directory path inside the bucket where the responses to the command executions
      should be stored. This was requested when issuing the command. For example, in the
      following response:

      test_folder/ab19cb99-a030-46dd-9dfc-8eSAMPLEPre-Fix/i-1234567876543/awsrunShellScript

      test_folder is the name of the Amazon S3 bucket;

      ab19cb99-a030-46dd-9dfc-8eSAMPLEPre-Fix is the name of the S3 prefix;

      i-1234567876543 is the instance ID;

      awsrunShellScript is the name of the plugin.
    """


_ListCommandInvocationsPaginateResponseCommandInvocationsNotificationConfigTypeDef = TypedDict(
    "_ListCommandInvocationsPaginateResponseCommandInvocationsNotificationConfigTypeDef",
    {"NotificationArn": str, "NotificationEvents": List[str], "NotificationType": str},
    total=False,
)


class ListCommandInvocationsPaginateResponseCommandInvocationsNotificationConfigTypeDef(
    _ListCommandInvocationsPaginateResponseCommandInvocationsNotificationConfigTypeDef
):
    """
    Type definition for `ListCommandInvocationsPaginateResponseCommandInvocations` `NotificationConfig`

    Configurations for sending notifications about command status changes on a per instance
    basis.

    - **NotificationArn** *(string) --*

      An Amazon Resource Name (ARN) for an Amazon Simple Notification Service (Amazon SNS)
      topic. Run Command pushes notifications about command status changes to this topic.

    - **NotificationEvents** *(list) --*

      The different events for which you can receive notifications. These events include the
      following: All (events), InProgress, Success, TimedOut, Cancelled, Failed. To learn
      more about these events, see `Configuring Amazon SNS Notifications for AWS Systems
      Manager
      <http://docs.aws.amazon.com/systems-manager/latest/userguide/monitoring-sns-notifications.html>`__
      in the *AWS Systems Manager User Guide* .

      - *(string) --*

    - **NotificationType** *(string) --*

      Command: Receive notification when the status of a command changes. Invocation: For
      commands sent to multiple instances, receive notification on a per-instance basis when
      the status of a command changes.
    """


_ListCommandInvocationsPaginateResponseCommandInvocationsTypeDef = TypedDict(
    "_ListCommandInvocationsPaginateResponseCommandInvocationsTypeDef",
    {
        "CommandId": str,
        "InstanceId": str,
        "InstanceName": str,
        "Comment": str,
        "DocumentName": str,
        "DocumentVersion": str,
        "RequestedDateTime": datetime,
        "Status": str,
        "StatusDetails": str,
        "TraceOutput": str,
        "StandardOutputUrl": str,
        "StandardErrorUrl": str,
        "CommandPlugins": List[
            ListCommandInvocationsPaginateResponseCommandInvocationsCommandPluginsTypeDef
        ],
        "ServiceRole": str,
        "NotificationConfig": ListCommandInvocationsPaginateResponseCommandInvocationsNotificationConfigTypeDef,
        "CloudWatchOutputConfig": ListCommandInvocationsPaginateResponseCommandInvocationsCloudWatchOutputConfigTypeDef,
    },
    total=False,
)


class ListCommandInvocationsPaginateResponseCommandInvocationsTypeDef(
    _ListCommandInvocationsPaginateResponseCommandInvocationsTypeDef
):
    """
    Type definition for `ListCommandInvocationsPaginateResponse` `CommandInvocations`

    An invocation is copy of a command sent to a specific instance. A command can apply to one
    or more instances. A command invocation applies to one instance. For example, if a user
    runs SendCommand against three instances, then a command invocation is created for each
    requested instance ID. A command invocation returns status and detail information about a
    command you ran.

    - **CommandId** *(string) --*

      The command against which this invocation was requested.

    - **InstanceId** *(string) --*

      The instance ID in which this invocation was requested.

    - **InstanceName** *(string) --*

      The name of the invocation target. For Amazon EC2 instances this is the value for the
      aws:Name tag. For on-premises instances, this is the name of the instance.

    - **Comment** *(string) --*

      User-specified information about the command, such as a brief description of what the
      command should do.

    - **DocumentName** *(string) --*

      The document name that was requested for execution.

    - **DocumentVersion** *(string) --*

      The SSM document version.

    - **RequestedDateTime** *(datetime) --*

      The time and date the request was sent to this instance.

    - **Status** *(string) --*

      Whether or not the invocation succeeded, failed, or is pending.

    - **StatusDetails** *(string) --*

      A detailed status of the command execution for each invocation (each instance targeted by
      the command). StatusDetails includes more information than Status because it includes
      states resulting from error and concurrency control parameters. StatusDetails can show
      different results than Status. For more information about these statuses, see
      `Understanding Command Statuses
      <http://docs.aws.amazon.com/systems-manager/latest/userguide/monitor-commands.html>`__ in
      the *AWS Systems Manager User Guide* . StatusDetails can be one of the following values:

      * Pending: The command has not been sent to the instance.

      * In Progress: The command has been sent to the instance but has not reached a terminal
      state.

      * Success: The execution of the command or plugin was successfully completed. This is a
      terminal state.

      * Delivery Timed Out: The command was not delivered to the instance before the delivery
      timeout expired. Delivery timeouts do not count against the parent command's MaxErrors
      limit, but they do contribute to whether the parent command status is Success or
      Incomplete. This is a terminal state.

      * Execution Timed Out: Command execution started on the instance, but the execution was
      not complete before the execution timeout expired. Execution timeouts count against the
      MaxErrors limit of the parent command. This is a terminal state.

      * Failed: The command was not successful on the instance. For a plugin, this indicates
      that the result code was not zero. For a command invocation, this indicates that the
      result code for one or more plugins was not zero. Invocation failures count against the
      MaxErrors limit of the parent command. This is a terminal state.

      * Canceled: The command was terminated before it was completed. This is a terminal state.

      * Undeliverable: The command can't be delivered to the instance. The instance might not
      exist or might not be responding. Undeliverable invocations don't count against the
      parent command's MaxErrors limit and don't contribute to whether the parent command
      status is Success or Incomplete. This is a terminal state.

      * Terminated: The parent command exceeded its MaxErrors limit and subsequent command
      invocations were canceled by the system. This is a terminal state.

    - **TraceOutput** *(string) --*

      Gets the trace output sent by the agent.

    - **StandardOutputUrl** *(string) --*

      The URL to the plugin's StdOut file in Amazon S3, if the Amazon S3 bucket was defined for
      the parent command. For an invocation, StandardOutputUrl is populated if there is just
      one plugin defined for the command, and the Amazon S3 bucket was defined for the command.

    - **StandardErrorUrl** *(string) --*

      The URL to the plugin's StdErr file in Amazon S3, if the Amazon S3 bucket was defined for
      the parent command. For an invocation, StandardErrorUrl is populated if there is just one
      plugin defined for the command, and the Amazon S3 bucket was defined for the command.

    - **CommandPlugins** *(list) --*

      - *(dict) --*

        Describes plugin details.

        - **Name** *(string) --*

          The name of the plugin. Must be one of the following: aws:updateAgent,
          aws:domainjoin, aws:applications, aws:runPowerShellScript, aws:psmodule,
          aws:cloudWatch, aws:runShellScript, or aws:updateSSMAgent.

        - **Status** *(string) --*

          The status of this plugin. You can run a document with multiple plugins.

        - **StatusDetails** *(string) --*

          A detailed status of the plugin execution. StatusDetails includes more information
          than Status because it includes states resulting from error and concurrency control
          parameters. StatusDetails can show different results than Status. For more
          information about these statuses, see `Understanding Command Statuses
          <http://docs.aws.amazon.com/systems-manager/latest/userguide/monitor-commands.html>`__
          in the *AWS Systems Manager User Guide* . StatusDetails can be one of the following
          values:

          * Pending: The command has not been sent to the instance.

          * In Progress: The command has been sent to the instance but has not reached a
          terminal state.

          * Success: The execution of the command or plugin was successfully completed. This is
          a terminal state.

          * Delivery Timed Out: The command was not delivered to the instance before the
          delivery timeout expired. Delivery timeouts do not count against the parent command's
          MaxErrors limit, but they do contribute to whether the parent command status is
          Success or Incomplete. This is a terminal state.

          * Execution Timed Out: Command execution started on the instance, but the execution
          was not complete before the execution timeout expired. Execution timeouts count
          against the MaxErrors limit of the parent command. This is a terminal state.

          * Failed: The command was not successful on the instance. For a plugin, this
          indicates that the result code was not zero. For a command invocation, this indicates
          that the result code for one or more plugins was not zero. Invocation failures count
          against the MaxErrors limit of the parent command. This is a terminal state.

          * Canceled: The command was terminated before it was completed. This is a terminal
          state.

          * Undeliverable: The command can't be delivered to the instance. The instance might
          not exist, or it might not be responding. Undeliverable invocations don't count
          against the parent command's MaxErrors limit, and they don't contribute to whether
          the parent command status is Success or Incomplete. This is a terminal state.

          * Terminated: The parent command exceeded its MaxErrors limit and subsequent command
          invocations were canceled by the system. This is a terminal state.

        - **ResponseCode** *(integer) --*

          A numeric response code generated after running the plugin.

        - **ResponseStartDateTime** *(datetime) --*

          The time the plugin started running.

        - **ResponseFinishDateTime** *(datetime) --*

          The time the plugin stopped running. Could stop prematurely if, for example, a cancel
          command was sent.

        - **Output** *(string) --*

          Output of the plugin execution.

        - **StandardOutputUrl** *(string) --*

          The URL for the complete text written by the plugin to stdout in Amazon S3. If the
          Amazon S3 bucket for the command was not specified, then this string is empty.

        - **StandardErrorUrl** *(string) --*

          The URL for the complete text written by the plugin to stderr. If execution is not
          yet complete, then this string is empty.

        - **OutputS3Region** *(string) --*

          (Deprecated) You can no longer specify this parameter. The system ignores it.
          Instead, Systems Manager automatically determines the Amazon S3 bucket region.

        - **OutputS3BucketName** *(string) --*

          The S3 bucket where the responses to the command executions should be stored. This
          was requested when issuing the command. For example, in the following response:

          test_folder/ab19cb99-a030-46dd-9dfc-8eSAMPLEPre-Fix/i-1234567876543/awsrunShellScript

          test_folder is the name of the Amazon S3 bucket;

          ab19cb99-a030-46dd-9dfc-8eSAMPLEPre-Fix is the name of the S3 prefix;

          i-1234567876543 is the instance ID;

          awsrunShellScript is the name of the plugin.

        - **OutputS3KeyPrefix** *(string) --*

          The S3 directory path inside the bucket where the responses to the command executions
          should be stored. This was requested when issuing the command. For example, in the
          following response:

          test_folder/ab19cb99-a030-46dd-9dfc-8eSAMPLEPre-Fix/i-1234567876543/awsrunShellScript

          test_folder is the name of the Amazon S3 bucket;

          ab19cb99-a030-46dd-9dfc-8eSAMPLEPre-Fix is the name of the S3 prefix;

          i-1234567876543 is the instance ID;

          awsrunShellScript is the name of the plugin.

    - **ServiceRole** *(string) --*

      The IAM service role that Run Command uses to act on your behalf when sending
      notifications about command status changes on a per instance basis.

    - **NotificationConfig** *(dict) --*

      Configurations for sending notifications about command status changes on a per instance
      basis.

      - **NotificationArn** *(string) --*

        An Amazon Resource Name (ARN) for an Amazon Simple Notification Service (Amazon SNS)
        topic. Run Command pushes notifications about command status changes to this topic.

      - **NotificationEvents** *(list) --*

        The different events for which you can receive notifications. These events include the
        following: All (events), InProgress, Success, TimedOut, Cancelled, Failed. To learn
        more about these events, see `Configuring Amazon SNS Notifications for AWS Systems
        Manager
        <http://docs.aws.amazon.com/systems-manager/latest/userguide/monitoring-sns-notifications.html>`__
        in the *AWS Systems Manager User Guide* .

        - *(string) --*

      - **NotificationType** *(string) --*

        Command: Receive notification when the status of a command changes. Invocation: For
        commands sent to multiple instances, receive notification on a per-instance basis when
        the status of a command changes.

    - **CloudWatchOutputConfig** *(dict) --*

      CloudWatch Logs information where you want Systems Manager to send the command output.

      - **CloudWatchLogGroupName** *(string) --*

        The name of the CloudWatch log group where you want to send command output. If you
        don't specify a group name, Systems Manager automatically creates a log group for you.
        The log group uses the following naming format: aws/ssm/*SystemsManagerDocumentName* .

      - **CloudWatchOutputEnabled** *(boolean) --*

        Enables Systems Manager to send command output to CloudWatch Logs.
    """


_ListCommandInvocationsPaginateResponseTypeDef = TypedDict(
    "_ListCommandInvocationsPaginateResponseTypeDef",
    {
        "CommandInvocations": List[
            ListCommandInvocationsPaginateResponseCommandInvocationsTypeDef
        ]
    },
    total=False,
)


class ListCommandInvocationsPaginateResponseTypeDef(
    _ListCommandInvocationsPaginateResponseTypeDef
):
    """
    Type definition for `ListCommandInvocationsPaginate` `Response`

    - **CommandInvocations** *(list) --*

      (Optional) A list of all invocations.

      - *(dict) --*

        An invocation is copy of a command sent to a specific instance. A command can apply to one
        or more instances. A command invocation applies to one instance. For example, if a user
        runs SendCommand against three instances, then a command invocation is created for each
        requested instance ID. A command invocation returns status and detail information about a
        command you ran.

        - **CommandId** *(string) --*

          The command against which this invocation was requested.

        - **InstanceId** *(string) --*

          The instance ID in which this invocation was requested.

        - **InstanceName** *(string) --*

          The name of the invocation target. For Amazon EC2 instances this is the value for the
          aws:Name tag. For on-premises instances, this is the name of the instance.

        - **Comment** *(string) --*

          User-specified information about the command, such as a brief description of what the
          command should do.

        - **DocumentName** *(string) --*

          The document name that was requested for execution.

        - **DocumentVersion** *(string) --*

          The SSM document version.

        - **RequestedDateTime** *(datetime) --*

          The time and date the request was sent to this instance.

        - **Status** *(string) --*

          Whether or not the invocation succeeded, failed, or is pending.

        - **StatusDetails** *(string) --*

          A detailed status of the command execution for each invocation (each instance targeted by
          the command). StatusDetails includes more information than Status because it includes
          states resulting from error and concurrency control parameters. StatusDetails can show
          different results than Status. For more information about these statuses, see
          `Understanding Command Statuses
          <http://docs.aws.amazon.com/systems-manager/latest/userguide/monitor-commands.html>`__ in
          the *AWS Systems Manager User Guide* . StatusDetails can be one of the following values:

          * Pending: The command has not been sent to the instance.

          * In Progress: The command has been sent to the instance but has not reached a terminal
          state.

          * Success: The execution of the command or plugin was successfully completed. This is a
          terminal state.

          * Delivery Timed Out: The command was not delivered to the instance before the delivery
          timeout expired. Delivery timeouts do not count against the parent command's MaxErrors
          limit, but they do contribute to whether the parent command status is Success or
          Incomplete. This is a terminal state.

          * Execution Timed Out: Command execution started on the instance, but the execution was
          not complete before the execution timeout expired. Execution timeouts count against the
          MaxErrors limit of the parent command. This is a terminal state.

          * Failed: The command was not successful on the instance. For a plugin, this indicates
          that the result code was not zero. For a command invocation, this indicates that the
          result code for one or more plugins was not zero. Invocation failures count against the
          MaxErrors limit of the parent command. This is a terminal state.

          * Canceled: The command was terminated before it was completed. This is a terminal state.

          * Undeliverable: The command can't be delivered to the instance. The instance might not
          exist or might not be responding. Undeliverable invocations don't count against the
          parent command's MaxErrors limit and don't contribute to whether the parent command
          status is Success or Incomplete. This is a terminal state.

          * Terminated: The parent command exceeded its MaxErrors limit and subsequent command
          invocations were canceled by the system. This is a terminal state.

        - **TraceOutput** *(string) --*

          Gets the trace output sent by the agent.

        - **StandardOutputUrl** *(string) --*

          The URL to the plugin's StdOut file in Amazon S3, if the Amazon S3 bucket was defined for
          the parent command. For an invocation, StandardOutputUrl is populated if there is just
          one plugin defined for the command, and the Amazon S3 bucket was defined for the command.

        - **StandardErrorUrl** *(string) --*

          The URL to the plugin's StdErr file in Amazon S3, if the Amazon S3 bucket was defined for
          the parent command. For an invocation, StandardErrorUrl is populated if there is just one
          plugin defined for the command, and the Amazon S3 bucket was defined for the command.

        - **CommandPlugins** *(list) --*

          - *(dict) --*

            Describes plugin details.

            - **Name** *(string) --*

              The name of the plugin. Must be one of the following: aws:updateAgent,
              aws:domainjoin, aws:applications, aws:runPowerShellScript, aws:psmodule,
              aws:cloudWatch, aws:runShellScript, or aws:updateSSMAgent.

            - **Status** *(string) --*

              The status of this plugin. You can run a document with multiple plugins.

            - **StatusDetails** *(string) --*

              A detailed status of the plugin execution. StatusDetails includes more information
              than Status because it includes states resulting from error and concurrency control
              parameters. StatusDetails can show different results than Status. For more
              information about these statuses, see `Understanding Command Statuses
              <http://docs.aws.amazon.com/systems-manager/latest/userguide/monitor-commands.html>`__
              in the *AWS Systems Manager User Guide* . StatusDetails can be one of the following
              values:

              * Pending: The command has not been sent to the instance.

              * In Progress: The command has been sent to the instance but has not reached a
              terminal state.

              * Success: The execution of the command or plugin was successfully completed. This is
              a terminal state.

              * Delivery Timed Out: The command was not delivered to the instance before the
              delivery timeout expired. Delivery timeouts do not count against the parent command's
              MaxErrors limit, but they do contribute to whether the parent command status is
              Success or Incomplete. This is a terminal state.

              * Execution Timed Out: Command execution started on the instance, but the execution
              was not complete before the execution timeout expired. Execution timeouts count
              against the MaxErrors limit of the parent command. This is a terminal state.

              * Failed: The command was not successful on the instance. For a plugin, this
              indicates that the result code was not zero. For a command invocation, this indicates
              that the result code for one or more plugins was not zero. Invocation failures count
              against the MaxErrors limit of the parent command. This is a terminal state.

              * Canceled: The command was terminated before it was completed. This is a terminal
              state.

              * Undeliverable: The command can't be delivered to the instance. The instance might
              not exist, or it might not be responding. Undeliverable invocations don't count
              against the parent command's MaxErrors limit, and they don't contribute to whether
              the parent command status is Success or Incomplete. This is a terminal state.

              * Terminated: The parent command exceeded its MaxErrors limit and subsequent command
              invocations were canceled by the system. This is a terminal state.

            - **ResponseCode** *(integer) --*

              A numeric response code generated after running the plugin.

            - **ResponseStartDateTime** *(datetime) --*

              The time the plugin started running.

            - **ResponseFinishDateTime** *(datetime) --*

              The time the plugin stopped running. Could stop prematurely if, for example, a cancel
              command was sent.

            - **Output** *(string) --*

              Output of the plugin execution.

            - **StandardOutputUrl** *(string) --*

              The URL for the complete text written by the plugin to stdout in Amazon S3. If the
              Amazon S3 bucket for the command was not specified, then this string is empty.

            - **StandardErrorUrl** *(string) --*

              The URL for the complete text written by the plugin to stderr. If execution is not
              yet complete, then this string is empty.

            - **OutputS3Region** *(string) --*

              (Deprecated) You can no longer specify this parameter. The system ignores it.
              Instead, Systems Manager automatically determines the Amazon S3 bucket region.

            - **OutputS3BucketName** *(string) --*

              The S3 bucket where the responses to the command executions should be stored. This
              was requested when issuing the command. For example, in the following response:

              test_folder/ab19cb99-a030-46dd-9dfc-8eSAMPLEPre-Fix/i-1234567876543/awsrunShellScript

              test_folder is the name of the Amazon S3 bucket;

              ab19cb99-a030-46dd-9dfc-8eSAMPLEPre-Fix is the name of the S3 prefix;

              i-1234567876543 is the instance ID;

              awsrunShellScript is the name of the plugin.

            - **OutputS3KeyPrefix** *(string) --*

              The S3 directory path inside the bucket where the responses to the command executions
              should be stored. This was requested when issuing the command. For example, in the
              following response:

              test_folder/ab19cb99-a030-46dd-9dfc-8eSAMPLEPre-Fix/i-1234567876543/awsrunShellScript

              test_folder is the name of the Amazon S3 bucket;

              ab19cb99-a030-46dd-9dfc-8eSAMPLEPre-Fix is the name of the S3 prefix;

              i-1234567876543 is the instance ID;

              awsrunShellScript is the name of the plugin.

        - **ServiceRole** *(string) --*

          The IAM service role that Run Command uses to act on your behalf when sending
          notifications about command status changes on a per instance basis.

        - **NotificationConfig** *(dict) --*

          Configurations for sending notifications about command status changes on a per instance
          basis.

          - **NotificationArn** *(string) --*

            An Amazon Resource Name (ARN) for an Amazon Simple Notification Service (Amazon SNS)
            topic. Run Command pushes notifications about command status changes to this topic.

          - **NotificationEvents** *(list) --*

            The different events for which you can receive notifications. These events include the
            following: All (events), InProgress, Success, TimedOut, Cancelled, Failed. To learn
            more about these events, see `Configuring Amazon SNS Notifications for AWS Systems
            Manager
            <http://docs.aws.amazon.com/systems-manager/latest/userguide/monitoring-sns-notifications.html>`__
            in the *AWS Systems Manager User Guide* .

            - *(string) --*

          - **NotificationType** *(string) --*

            Command: Receive notification when the status of a command changes. Invocation: For
            commands sent to multiple instances, receive notification on a per-instance basis when
            the status of a command changes.

        - **CloudWatchOutputConfig** *(dict) --*

          CloudWatch Logs information where you want Systems Manager to send the command output.

          - **CloudWatchLogGroupName** *(string) --*

            The name of the CloudWatch log group where you want to send command output. If you
            don't specify a group name, Systems Manager automatically creates a log group for you.
            The log group uses the following naming format: aws/ssm/*SystemsManagerDocumentName* .

          - **CloudWatchOutputEnabled** *(boolean) --*

            Enables Systems Manager to send command output to CloudWatch Logs.
    """


_ListCommandsPaginateFiltersTypeDef = TypedDict(
    "_ListCommandsPaginateFiltersTypeDef", {"key": str, "value": str}
)


class ListCommandsPaginateFiltersTypeDef(_ListCommandsPaginateFiltersTypeDef):
    """
    Type definition for `ListCommandsPaginate` `Filters`

    Describes a command filter.

    - **key** *(string) --* **[REQUIRED]**

      The name of the filter.

    - **value** *(string) --* **[REQUIRED]**

      The filter value. Valid values for each filter key are as follows:

      * **InvokedAfter** : Specify a timestamp to limit your results. For example, specify
      ``2018-07-07T00:00:00Z`` to see a list of command executions occurring July 7, 2018, and
      later.

      * **InvokedBefore** : Specify a timestamp to limit your results. For example, specify
      ``2018-07-07T00:00:00Z`` to see a list of command executions from before July 7, 2018.

      * **Status** : Specify a valid command status to see a list of all command executions with
      that status. Status values you can specify include:

        * ``Pending``

        * ``InProgress``

        * ``Success``

        * ``Cancelled``

        * ``Failed``

        * ``TimedOut``

        * ``Cancelling``

      * **DocumentName** : Specify name of the SSM document for which you want to see command
      execution results. For example, specify ``AWS-RunPatchBaseline`` to see command executions
      that used this SSM document to perform security patching operations on instances.

      * **ExecutionStage** : Specify one of the following values:

        * ``Executing`` : Returns a list of command executions that are currently still running.

        * ``Complete`` : Returns a list of command executions that have already completed.
    """


_ListCommandsPaginatePaginationConfigTypeDef = TypedDict(
    "_ListCommandsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class ListCommandsPaginatePaginationConfigTypeDef(
    _ListCommandsPaginatePaginationConfigTypeDef
):
    """
    Type definition for `ListCommandsPaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_ListCommandsPaginateResponseCommandsCloudWatchOutputConfigTypeDef = TypedDict(
    "_ListCommandsPaginateResponseCommandsCloudWatchOutputConfigTypeDef",
    {"CloudWatchLogGroupName": str, "CloudWatchOutputEnabled": bool},
    total=False,
)


class ListCommandsPaginateResponseCommandsCloudWatchOutputConfigTypeDef(
    _ListCommandsPaginateResponseCommandsCloudWatchOutputConfigTypeDef
):
    """
    Type definition for `ListCommandsPaginateResponseCommands` `CloudWatchOutputConfig`

    CloudWatch Logs information where you want Systems Manager to send the command output.

    - **CloudWatchLogGroupName** *(string) --*

      The name of the CloudWatch log group where you want to send command output. If you
      don't specify a group name, Systems Manager automatically creates a log group for you.
      The log group uses the following naming format: aws/ssm/*SystemsManagerDocumentName* .

    - **CloudWatchOutputEnabled** *(boolean) --*

      Enables Systems Manager to send command output to CloudWatch Logs.
    """


_ListCommandsPaginateResponseCommandsNotificationConfigTypeDef = TypedDict(
    "_ListCommandsPaginateResponseCommandsNotificationConfigTypeDef",
    {"NotificationArn": str, "NotificationEvents": List[str], "NotificationType": str},
    total=False,
)


class ListCommandsPaginateResponseCommandsNotificationConfigTypeDef(
    _ListCommandsPaginateResponseCommandsNotificationConfigTypeDef
):
    """
    Type definition for `ListCommandsPaginateResponseCommands` `NotificationConfig`

    Configurations for sending notifications about command status changes.

    - **NotificationArn** *(string) --*

      An Amazon Resource Name (ARN) for an Amazon Simple Notification Service (Amazon SNS)
      topic. Run Command pushes notifications about command status changes to this topic.

    - **NotificationEvents** *(list) --*

      The different events for which you can receive notifications. These events include the
      following: All (events), InProgress, Success, TimedOut, Cancelled, Failed. To learn
      more about these events, see `Configuring Amazon SNS Notifications for AWS Systems
      Manager
      <http://docs.aws.amazon.com/systems-manager/latest/userguide/monitoring-sns-notifications.html>`__
      in the *AWS Systems Manager User Guide* .

      - *(string) --*

    - **NotificationType** *(string) --*

      Command: Receive notification when the status of a command changes. Invocation: For
      commands sent to multiple instances, receive notification on a per-instance basis when
      the status of a command changes.
    """


_ListCommandsPaginateResponseCommandsTargetsTypeDef = TypedDict(
    "_ListCommandsPaginateResponseCommandsTargetsTypeDef",
    {"Key": str, "Values": List[str]},
    total=False,
)


class ListCommandsPaginateResponseCommandsTargetsTypeDef(
    _ListCommandsPaginateResponseCommandsTargetsTypeDef
):
    """
    Type definition for `ListCommandsPaginateResponseCommands` `Targets`

    An array of search criteria that targets instances using a Key,Value combination that
    you specify.

    Supported formats include the following.

    * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

    * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

    * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

    * (Maintenance window targets only)
    ``Key=resource-groups:Name,Values=*resource-group-name* ``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

    For example:

    * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

    * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

    * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

    * (Maintenance window targets only)
    ``Key=resource-groups:Name,Values=ProductionResourceGroup``

    * (Maintenance window targets only)
    ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC*
    ``

    For information about how to send commands that target instances using ``Key,Value``
    parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
    <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
    in the *AWS Systems Manager User Guide* .

    - **Key** *(string) --*

      User-defined criteria for sending commands that target instances that meet the
      criteria.

    - **Values** *(list) --*

      User-defined criteria that maps to ``Key`` . For example, if you specified
      ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
      instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

      - *(string) --*
    """


_ListCommandsPaginateResponseCommandsTypeDef = TypedDict(
    "_ListCommandsPaginateResponseCommandsTypeDef",
    {
        "CommandId": str,
        "DocumentName": str,
        "DocumentVersion": str,
        "Comment": str,
        "ExpiresAfter": datetime,
        "Parameters": Dict[str, List[str]],
        "InstanceIds": List[str],
        "Targets": List[ListCommandsPaginateResponseCommandsTargetsTypeDef],
        "RequestedDateTime": datetime,
        "Status": str,
        "StatusDetails": str,
        "OutputS3Region": str,
        "OutputS3BucketName": str,
        "OutputS3KeyPrefix": str,
        "MaxConcurrency": str,
        "MaxErrors": str,
        "TargetCount": int,
        "CompletedCount": int,
        "ErrorCount": int,
        "DeliveryTimedOutCount": int,
        "ServiceRole": str,
        "NotificationConfig": ListCommandsPaginateResponseCommandsNotificationConfigTypeDef,
        "CloudWatchOutputConfig": ListCommandsPaginateResponseCommandsCloudWatchOutputConfigTypeDef,
    },
    total=False,
)


class ListCommandsPaginateResponseCommandsTypeDef(
    _ListCommandsPaginateResponseCommandsTypeDef
):
    """
    Type definition for `ListCommandsPaginateResponse` `Commands`

    Describes a command request.

    - **CommandId** *(string) --*

      A unique identifier for this command.

    - **DocumentName** *(string) --*

      The name of the document requested for execution.

    - **DocumentVersion** *(string) --*

      The SSM document version.

    - **Comment** *(string) --*

      User-specified information about the command, such as a brief description of what the
      command should do.

    - **ExpiresAfter** *(datetime) --*

      If this time is reached and the command has not already started running, it will not run.
      Calculated based on the ExpiresAfter user input provided as part of the SendCommand API.

    - **Parameters** *(dict) --*

      The parameter values to be inserted in the document when running the command.

      - *(string) --*

        - *(list) --*

          - *(string) --*

    - **InstanceIds** *(list) --*

      The instance IDs against which this command was requested.

      - *(string) --*

    - **Targets** *(list) --*

      An array of search criteria that targets instances using a Key,Value combination that you
      specify. Targets is required if you don't provide one or more instance IDs in the call.

      - *(dict) --*

        An array of search criteria that targets instances using a Key,Value combination that
        you specify.

        Supported formats include the following.

        * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

        * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

        * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

        * (Maintenance window targets only)
        ``Key=resource-groups:Name,Values=*resource-group-name* ``

        * (Maintenance window targets only)
        ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

        For example:

        * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

        * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

        * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

        * (Maintenance window targets only)
        ``Key=resource-groups:Name,Values=ProductionResourceGroup``

        * (Maintenance window targets only)
        ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC*
        ``

        For information about how to send commands that target instances using ``Key,Value``
        parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
        <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
        in the *AWS Systems Manager User Guide* .

        - **Key** *(string) --*

          User-defined criteria for sending commands that target instances that meet the
          criteria.

        - **Values** *(list) --*

          User-defined criteria that maps to ``Key`` . For example, if you specified
          ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
          instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

          - *(string) --*

    - **RequestedDateTime** *(datetime) --*

      The date and time the command was requested.

    - **Status** *(string) --*

      The status of the command.

    - **StatusDetails** *(string) --*

      A detailed status of the command execution. StatusDetails includes more information than
      Status because it includes states resulting from error and concurrency control
      parameters. StatusDetails can show different results than Status. For more information
      about these statuses, see `Understanding Command Statuses
      <http://docs.aws.amazon.com/systems-manager/latest/userguide/monitor-commands.html>`__ in
      the *AWS Systems Manager User Guide* . StatusDetails can be one of the following values:

      * Pending: The command has not been sent to any instances.

      * In Progress: The command has been sent to at least one instance but has not reached a
      final state on all instances.

      * Success: The command successfully ran on all invocations. This is a terminal state.

      * Delivery Timed Out: The value of MaxErrors or more command invocations shows a status
      of Delivery Timed Out. This is a terminal state.

      * Execution Timed Out: The value of MaxErrors or more command invocations shows a status
      of Execution Timed Out. This is a terminal state.

      * Failed: The value of MaxErrors or more command invocations shows a status of Failed.
      This is a terminal state.

      * Incomplete: The command was attempted on all instances and one or more invocations does
      not have a value of Success but not enough invocations failed for the status to be
      Failed. This is a terminal state.

      * Canceled: The command was terminated before it was completed. This is a terminal state.

      * Rate Exceeded: The number of instances targeted by the command exceeded the account
      limit for pending invocations. The system has canceled the command before running it on
      any instance. This is a terminal state.

    - **OutputS3Region** *(string) --*

      (Deprecated) You can no longer specify this parameter. The system ignores it. Instead,
      Systems Manager automatically determines the Amazon S3 bucket region.

    - **OutputS3BucketName** *(string) --*

      The S3 bucket where the responses to the command executions should be stored. This was
      requested when issuing the command.

    - **OutputS3KeyPrefix** *(string) --*

      The S3 directory path inside the bucket where the responses to the command executions
      should be stored. This was requested when issuing the command.

    - **MaxConcurrency** *(string) --*

      The maximum number of instances that are allowed to run the command at the same time. You
      can specify a number of instances, such as 10, or a percentage of instances, such as 10%.
      The default value is 50. For more information about how to use MaxConcurrency, see
      `Running Commands Using Systems Manager Run Command
      <http://docs.aws.amazon.com/systems-manager/latest/userguide/run-command.html>`__ in the
      *AWS Systems Manager User Guide* .

    - **MaxErrors** *(string) --*

      The maximum number of errors allowed before the system stops sending the command to
      additional targets. You can specify a number of errors, such as 10, or a percentage or
      errors, such as 10%. The default value is 0. For more information about how to use
      MaxErrors, see `Running Commands Using Systems Manager Run Command
      <http://docs.aws.amazon.com/systems-manager/latest/userguide/run-command.html>`__ in the
      *AWS Systems Manager User Guide* .

    - **TargetCount** *(integer) --*

      The number of targets for the command.

    - **CompletedCount** *(integer) --*

      The number of targets for which the command invocation reached a terminal state. Terminal
      states include the following: Success, Failed, Execution Timed Out, Delivery Timed Out,
      Canceled, Terminated, or Undeliverable.

    - **ErrorCount** *(integer) --*

      The number of targets for which the status is Failed or Execution Timed Out.

    - **DeliveryTimedOutCount** *(integer) --*

      The number of targets for which the status is Delivery Timed Out.

    - **ServiceRole** *(string) --*

      The IAM service role that Run Command uses to act on your behalf when sending
      notifications about command status changes.

    - **NotificationConfig** *(dict) --*

      Configurations for sending notifications about command status changes.

      - **NotificationArn** *(string) --*

        An Amazon Resource Name (ARN) for an Amazon Simple Notification Service (Amazon SNS)
        topic. Run Command pushes notifications about command status changes to this topic.

      - **NotificationEvents** *(list) --*

        The different events for which you can receive notifications. These events include the
        following: All (events), InProgress, Success, TimedOut, Cancelled, Failed. To learn
        more about these events, see `Configuring Amazon SNS Notifications for AWS Systems
        Manager
        <http://docs.aws.amazon.com/systems-manager/latest/userguide/monitoring-sns-notifications.html>`__
        in the *AWS Systems Manager User Guide* .

        - *(string) --*

      - **NotificationType** *(string) --*

        Command: Receive notification when the status of a command changes. Invocation: For
        commands sent to multiple instances, receive notification on a per-instance basis when
        the status of a command changes.

    - **CloudWatchOutputConfig** *(dict) --*

      CloudWatch Logs information where you want Systems Manager to send the command output.

      - **CloudWatchLogGroupName** *(string) --*

        The name of the CloudWatch log group where you want to send command output. If you
        don't specify a group name, Systems Manager automatically creates a log group for you.
        The log group uses the following naming format: aws/ssm/*SystemsManagerDocumentName* .

      - **CloudWatchOutputEnabled** *(boolean) --*

        Enables Systems Manager to send command output to CloudWatch Logs.
    """


_ListCommandsPaginateResponseTypeDef = TypedDict(
    "_ListCommandsPaginateResponseTypeDef",
    {"Commands": List[ListCommandsPaginateResponseCommandsTypeDef]},
    total=False,
)


class ListCommandsPaginateResponseTypeDef(_ListCommandsPaginateResponseTypeDef):
    """
    Type definition for `ListCommandsPaginate` `Response`

    - **Commands** *(list) --*

      (Optional) The list of commands requested by the user.

      - *(dict) --*

        Describes a command request.

        - **CommandId** *(string) --*

          A unique identifier for this command.

        - **DocumentName** *(string) --*

          The name of the document requested for execution.

        - **DocumentVersion** *(string) --*

          The SSM document version.

        - **Comment** *(string) --*

          User-specified information about the command, such as a brief description of what the
          command should do.

        - **ExpiresAfter** *(datetime) --*

          If this time is reached and the command has not already started running, it will not run.
          Calculated based on the ExpiresAfter user input provided as part of the SendCommand API.

        - **Parameters** *(dict) --*

          The parameter values to be inserted in the document when running the command.

          - *(string) --*

            - *(list) --*

              - *(string) --*

        - **InstanceIds** *(list) --*

          The instance IDs against which this command was requested.

          - *(string) --*

        - **Targets** *(list) --*

          An array of search criteria that targets instances using a Key,Value combination that you
          specify. Targets is required if you don't provide one or more instance IDs in the call.

          - *(dict) --*

            An array of search criteria that targets instances using a Key,Value combination that
            you specify.

            Supported formats include the following.

            * ``Key=InstanceIds,Values=*instance-id-1* ,*instance-id-2* ,*instance-id-3* ``

            * ``Key=tag:*my-tag-key* ,Values=*my-tag-value-1* ,*my-tag-value-2* ``

            * ``Key=tag-key,Values=*my-tag-key-1* ,*my-tag-key-2* ``

            * (Maintenance window targets only)
            ``Key=resource-groups:Name,Values=*resource-group-name* ``

            * (Maintenance window targets only)
            ``Key=resource-groups:ResourceTypeFilters,Values=*resource-type-1* ,*resource-type-2* ``

            For example:

            * ``Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE``

            * ``Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3``

            * ``Key=tag-key,Values=Name,Instance-Type,CostCenter``

            * (Maintenance window targets only)
            ``Key=resource-groups:Name,Values=ProductionResourceGroup``

            * (Maintenance window targets only)
            ``Key=resource-groups:ResourceTypeFilters,Values=*AWS::EC2::INSTANCE* ,*AWS::EC2::VPC*
            ``

            For information about how to send commands that target instances using ``Key,Value``
            parameters, see `Using Targets and Rate Controls to Send Commands to a Fleet
            <https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting>`__
            in the *AWS Systems Manager User Guide* .

            - **Key** *(string) --*

              User-defined criteria for sending commands that target instances that meet the
              criteria.

            - **Values** *(list) --*

              User-defined criteria that maps to ``Key`` . For example, if you specified
              ``tag:ServerRole`` , you could specify ``value:WebServer`` to run a command on
              instances that include Amazon EC2 tags of ``ServerRole,WebServer`` .

              - *(string) --*

        - **RequestedDateTime** *(datetime) --*

          The date and time the command was requested.

        - **Status** *(string) --*

          The status of the command.

        - **StatusDetails** *(string) --*

          A detailed status of the command execution. StatusDetails includes more information than
          Status because it includes states resulting from error and concurrency control
          parameters. StatusDetails can show different results than Status. For more information
          about these statuses, see `Understanding Command Statuses
          <http://docs.aws.amazon.com/systems-manager/latest/userguide/monitor-commands.html>`__ in
          the *AWS Systems Manager User Guide* . StatusDetails can be one of the following values:

          * Pending: The command has not been sent to any instances.

          * In Progress: The command has been sent to at least one instance but has not reached a
          final state on all instances.

          * Success: The command successfully ran on all invocations. This is a terminal state.

          * Delivery Timed Out: The value of MaxErrors or more command invocations shows a status
          of Delivery Timed Out. This is a terminal state.

          * Execution Timed Out: The value of MaxErrors or more command invocations shows a status
          of Execution Timed Out. This is a terminal state.

          * Failed: The value of MaxErrors or more command invocations shows a status of Failed.
          This is a terminal state.

          * Incomplete: The command was attempted on all instances and one or more invocations does
          not have a value of Success but not enough invocations failed for the status to be
          Failed. This is a terminal state.

          * Canceled: The command was terminated before it was completed. This is a terminal state.

          * Rate Exceeded: The number of instances targeted by the command exceeded the account
          limit for pending invocations. The system has canceled the command before running it on
          any instance. This is a terminal state.

        - **OutputS3Region** *(string) --*

          (Deprecated) You can no longer specify this parameter. The system ignores it. Instead,
          Systems Manager automatically determines the Amazon S3 bucket region.

        - **OutputS3BucketName** *(string) --*

          The S3 bucket where the responses to the command executions should be stored. This was
          requested when issuing the command.

        - **OutputS3KeyPrefix** *(string) --*

          The S3 directory path inside the bucket where the responses to the command executions
          should be stored. This was requested when issuing the command.

        - **MaxConcurrency** *(string) --*

          The maximum number of instances that are allowed to run the command at the same time. You
          can specify a number of instances, such as 10, or a percentage of instances, such as 10%.
          The default value is 50. For more information about how to use MaxConcurrency, see
          `Running Commands Using Systems Manager Run Command
          <http://docs.aws.amazon.com/systems-manager/latest/userguide/run-command.html>`__ in the
          *AWS Systems Manager User Guide* .

        - **MaxErrors** *(string) --*

          The maximum number of errors allowed before the system stops sending the command to
          additional targets. You can specify a number of errors, such as 10, or a percentage or
          errors, such as 10%. The default value is 0. For more information about how to use
          MaxErrors, see `Running Commands Using Systems Manager Run Command
          <http://docs.aws.amazon.com/systems-manager/latest/userguide/run-command.html>`__ in the
          *AWS Systems Manager User Guide* .

        - **TargetCount** *(integer) --*

          The number of targets for the command.

        - **CompletedCount** *(integer) --*

          The number of targets for which the command invocation reached a terminal state. Terminal
          states include the following: Success, Failed, Execution Timed Out, Delivery Timed Out,
          Canceled, Terminated, or Undeliverable.

        - **ErrorCount** *(integer) --*

          The number of targets for which the status is Failed or Execution Timed Out.

        - **DeliveryTimedOutCount** *(integer) --*

          The number of targets for which the status is Delivery Timed Out.

        - **ServiceRole** *(string) --*

          The IAM service role that Run Command uses to act on your behalf when sending
          notifications about command status changes.

        - **NotificationConfig** *(dict) --*

          Configurations for sending notifications about command status changes.

          - **NotificationArn** *(string) --*

            An Amazon Resource Name (ARN) for an Amazon Simple Notification Service (Amazon SNS)
            topic. Run Command pushes notifications about command status changes to this topic.

          - **NotificationEvents** *(list) --*

            The different events for which you can receive notifications. These events include the
            following: All (events), InProgress, Success, TimedOut, Cancelled, Failed. To learn
            more about these events, see `Configuring Amazon SNS Notifications for AWS Systems
            Manager
            <http://docs.aws.amazon.com/systems-manager/latest/userguide/monitoring-sns-notifications.html>`__
            in the *AWS Systems Manager User Guide* .

            - *(string) --*

          - **NotificationType** *(string) --*

            Command: Receive notification when the status of a command changes. Invocation: For
            commands sent to multiple instances, receive notification on a per-instance basis when
            the status of a command changes.

        - **CloudWatchOutputConfig** *(dict) --*

          CloudWatch Logs information where you want Systems Manager to send the command output.

          - **CloudWatchLogGroupName** *(string) --*

            The name of the CloudWatch log group where you want to send command output. If you
            don't specify a group name, Systems Manager automatically creates a log group for you.
            The log group uses the following naming format: aws/ssm/*SystemsManagerDocumentName* .

          - **CloudWatchOutputEnabled** *(boolean) --*

            Enables Systems Manager to send command output to CloudWatch Logs.
    """


_ListComplianceItemsPaginateFiltersTypeDef = TypedDict(
    "_ListComplianceItemsPaginateFiltersTypeDef",
    {"Key": str, "Values": List[str], "Type": str},
    total=False,
)


class ListComplianceItemsPaginateFiltersTypeDef(
    _ListComplianceItemsPaginateFiltersTypeDef
):
    """
    Type definition for `ListComplianceItemsPaginate` `Filters`

    One or more filters. Use a filter to return a more specific list of results.

    - **Key** *(string) --*

      The name of the filter.

    - **Values** *(list) --*

      The value for which to search.

      - *(string) --*

    - **Type** *(string) --*

      The type of comparison that should be performed for the value: Equal, NotEqual, BeginWith,
      LessThan, or GreaterThan.
    """


_ListComplianceItemsPaginatePaginationConfigTypeDef = TypedDict(
    "_ListComplianceItemsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class ListComplianceItemsPaginatePaginationConfigTypeDef(
    _ListComplianceItemsPaginatePaginationConfigTypeDef
):
    """
    Type definition for `ListComplianceItemsPaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_ListComplianceItemsPaginateResponseComplianceItemsExecutionSummaryTypeDef = TypedDict(
    "_ListComplianceItemsPaginateResponseComplianceItemsExecutionSummaryTypeDef",
    {"ExecutionTime": datetime, "ExecutionId": str, "ExecutionType": str},
    total=False,
)


class ListComplianceItemsPaginateResponseComplianceItemsExecutionSummaryTypeDef(
    _ListComplianceItemsPaginateResponseComplianceItemsExecutionSummaryTypeDef
):
    """
    Type definition for `ListComplianceItemsPaginateResponseComplianceItems` `ExecutionSummary`

    A summary for the compliance item. The summary includes an execution ID, the execution
    type (for example, command), and the execution time.

    - **ExecutionTime** *(datetime) --*

      The time the execution ran as a datetime object that is saved in the following format:
      yyyy-MM-dd'T'HH:mm:ss'Z'.

    - **ExecutionId** *(string) --*

      An ID created by the system when ``PutComplianceItems`` was called. For example,
      ``CommandID`` is a valid execution ID. You can use this ID in subsequent calls.

    - **ExecutionType** *(string) --*

      The type of execution. For example, ``Command`` is a valid execution type.
    """


_ListComplianceItemsPaginateResponseComplianceItemsTypeDef = TypedDict(
    "_ListComplianceItemsPaginateResponseComplianceItemsTypeDef",
    {
        "ComplianceType": str,
        "ResourceType": str,
        "ResourceId": str,
        "Id": str,
        "Title": str,
        "Status": str,
        "Severity": str,
        "ExecutionSummary": ListComplianceItemsPaginateResponseComplianceItemsExecutionSummaryTypeDef,
        "Details": Dict[str, str],
    },
    total=False,
)


class ListComplianceItemsPaginateResponseComplianceItemsTypeDef(
    _ListComplianceItemsPaginateResponseComplianceItemsTypeDef
):
    """
    Type definition for `ListComplianceItemsPaginateResponse` `ComplianceItems`

    Information about the compliance as defined by the resource type. For example, for a patch
    resource type, ``Items`` includes information about the PatchSeverity, Classification, etc.

    - **ComplianceType** *(string) --*

      The compliance type. For example, Association (for a State Manager association), Patch,
      or Custom:``string`` are all valid compliance types.

    - **ResourceType** *(string) --*

      The type of resource. ``ManagedInstance`` is currently the only supported resource type.

    - **ResourceId** *(string) --*

      An ID for the resource. For a managed instance, this is the instance ID.

    - **Id** *(string) --*

      An ID for the compliance item. For example, if the compliance item is a Windows patch,
      the ID could be the number of the KB article; for example: KB4010320.

    - **Title** *(string) --*

      A title for the compliance item. For example, if the compliance item is a Windows patch,
      the title could be the title of the KB article for the patch; for example: Security
      Update for Active Directory Federation Services.

    - **Status** *(string) --*

      The status of the compliance item. An item is either COMPLIANT or NON_COMPLIANT.

    - **Severity** *(string) --*

      The severity of the compliance status. Severity can be one of the following: Critical,
      High, Medium, Low, Informational, Unspecified.

    - **ExecutionSummary** *(dict) --*

      A summary for the compliance item. The summary includes an execution ID, the execution
      type (for example, command), and the execution time.

      - **ExecutionTime** *(datetime) --*

        The time the execution ran as a datetime object that is saved in the following format:
        yyyy-MM-dd'T'HH:mm:ss'Z'.

      - **ExecutionId** *(string) --*

        An ID created by the system when ``PutComplianceItems`` was called. For example,
        ``CommandID`` is a valid execution ID. You can use this ID in subsequent calls.

      - **ExecutionType** *(string) --*

        The type of execution. For example, ``Command`` is a valid execution type.

    - **Details** *(dict) --*

      A "Key": "Value" tag combination for the compliance item.

      - *(string) --*

        - *(string) --*
    """


_ListComplianceItemsPaginateResponseTypeDef = TypedDict(
    "_ListComplianceItemsPaginateResponseTypeDef",
    {
        "ComplianceItems": List[
            ListComplianceItemsPaginateResponseComplianceItemsTypeDef
        ]
    },
    total=False,
)


class ListComplianceItemsPaginateResponseTypeDef(
    _ListComplianceItemsPaginateResponseTypeDef
):
    """
    Type definition for `ListComplianceItemsPaginate` `Response`

    - **ComplianceItems** *(list) --*

      A list of compliance information for the specified resource ID.

      - *(dict) --*

        Information about the compliance as defined by the resource type. For example, for a patch
        resource type, ``Items`` includes information about the PatchSeverity, Classification, etc.

        - **ComplianceType** *(string) --*

          The compliance type. For example, Association (for a State Manager association), Patch,
          or Custom:``string`` are all valid compliance types.

        - **ResourceType** *(string) --*

          The type of resource. ``ManagedInstance`` is currently the only supported resource type.

        - **ResourceId** *(string) --*

          An ID for the resource. For a managed instance, this is the instance ID.

        - **Id** *(string) --*

          An ID for the compliance item. For example, if the compliance item is a Windows patch,
          the ID could be the number of the KB article; for example: KB4010320.

        - **Title** *(string) --*

          A title for the compliance item. For example, if the compliance item is a Windows patch,
          the title could be the title of the KB article for the patch; for example: Security
          Update for Active Directory Federation Services.

        - **Status** *(string) --*

          The status of the compliance item. An item is either COMPLIANT or NON_COMPLIANT.

        - **Severity** *(string) --*

          The severity of the compliance status. Severity can be one of the following: Critical,
          High, Medium, Low, Informational, Unspecified.

        - **ExecutionSummary** *(dict) --*

          A summary for the compliance item. The summary includes an execution ID, the execution
          type (for example, command), and the execution time.

          - **ExecutionTime** *(datetime) --*

            The time the execution ran as a datetime object that is saved in the following format:
            yyyy-MM-dd'T'HH:mm:ss'Z'.

          - **ExecutionId** *(string) --*

            An ID created by the system when ``PutComplianceItems`` was called. For example,
            ``CommandID`` is a valid execution ID. You can use this ID in subsequent calls.

          - **ExecutionType** *(string) --*

            The type of execution. For example, ``Command`` is a valid execution type.

        - **Details** *(dict) --*

          A "Key": "Value" tag combination for the compliance item.

          - *(string) --*

            - *(string) --*
    """


_ListComplianceSummariesPaginateFiltersTypeDef = TypedDict(
    "_ListComplianceSummariesPaginateFiltersTypeDef",
    {"Key": str, "Values": List[str], "Type": str},
    total=False,
)


class ListComplianceSummariesPaginateFiltersTypeDef(
    _ListComplianceSummariesPaginateFiltersTypeDef
):
    """
    Type definition for `ListComplianceSummariesPaginate` `Filters`

    One or more filters. Use a filter to return a more specific list of results.

    - **Key** *(string) --*

      The name of the filter.

    - **Values** *(list) --*

      The value for which to search.

      - *(string) --*

    - **Type** *(string) --*

      The type of comparison that should be performed for the value: Equal, NotEqual, BeginWith,
      LessThan, or GreaterThan.
    """


_ListComplianceSummariesPaginatePaginationConfigTypeDef = TypedDict(
    "_ListComplianceSummariesPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class ListComplianceSummariesPaginatePaginationConfigTypeDef(
    _ListComplianceSummariesPaginatePaginationConfigTypeDef
):
    """
    Type definition for `ListComplianceSummariesPaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_ListComplianceSummariesPaginateResponseComplianceSummaryItemsCompliantSummarySeveritySummaryTypeDef = TypedDict(
    "_ListComplianceSummariesPaginateResponseComplianceSummaryItemsCompliantSummarySeveritySummaryTypeDef",
    {
        "CriticalCount": int,
        "HighCount": int,
        "MediumCount": int,
        "LowCount": int,
        "InformationalCount": int,
        "UnspecifiedCount": int,
    },
    total=False,
)


class ListComplianceSummariesPaginateResponseComplianceSummaryItemsCompliantSummarySeveritySummaryTypeDef(
    _ListComplianceSummariesPaginateResponseComplianceSummaryItemsCompliantSummarySeveritySummaryTypeDef
):
    """
    Type definition for `ListComplianceSummariesPaginateResponseComplianceSummaryItemsCompliantSummary` `SeveritySummary`

    A summary of the compliance severity by compliance type.

    - **CriticalCount** *(integer) --*

      The total number of resources or compliance items that have a severity level of
      critical. Critical severity is determined by the organization that published the
      compliance items.

    - **HighCount** *(integer) --*

      The total number of resources or compliance items that have a severity level of high.
      High severity is determined by the organization that published the compliance items.

    - **MediumCount** *(integer) --*

      The total number of resources or compliance items that have a severity level of
      medium. Medium severity is determined by the organization that published the
      compliance items.

    - **LowCount** *(integer) --*

      The total number of resources or compliance items that have a severity level of low.
      Low severity is determined by the organization that published the compliance items.

    - **InformationalCount** *(integer) --*

      The total number of resources or compliance items that have a severity level of
      informational. Informational severity is determined by the organization that
      published the compliance items.

    - **UnspecifiedCount** *(integer) --*

      The total number of resources or compliance items that have a severity level of
      unspecified. Unspecified severity is determined by the organization that published
      the compliance items.
    """


_ListComplianceSummariesPaginateResponseComplianceSummaryItemsCompliantSummaryTypeDef = TypedDict(
    "_ListComplianceSummariesPaginateResponseComplianceSummaryItemsCompliantSummaryTypeDef",
    {
        "CompliantCount": int,
        "SeveritySummary": ListComplianceSummariesPaginateResponseComplianceSummaryItemsCompliantSummarySeveritySummaryTypeDef,
    },
    total=False,
)


class ListComplianceSummariesPaginateResponseComplianceSummaryItemsCompliantSummaryTypeDef(
    _ListComplianceSummariesPaginateResponseComplianceSummaryItemsCompliantSummaryTypeDef
):
    """
    Type definition for `ListComplianceSummariesPaginateResponseComplianceSummaryItems` `CompliantSummary`

    A list of COMPLIANT items for the specified compliance type.

    - **CompliantCount** *(integer) --*

      The total number of resources that are compliant.

    - **SeveritySummary** *(dict) --*

      A summary of the compliance severity by compliance type.

      - **CriticalCount** *(integer) --*

        The total number of resources or compliance items that have a severity level of
        critical. Critical severity is determined by the organization that published the
        compliance items.

      - **HighCount** *(integer) --*

        The total number of resources or compliance items that have a severity level of high.
        High severity is determined by the organization that published the compliance items.

      - **MediumCount** *(integer) --*

        The total number of resources or compliance items that have a severity level of
        medium. Medium severity is determined by the organization that published the
        compliance items.

      - **LowCount** *(integer) --*

        The total number of resources or compliance items that have a severity level of low.
        Low severity is determined by the organization that published the compliance items.

      - **InformationalCount** *(integer) --*

        The total number of resources or compliance items that have a severity level of
        informational. Informational severity is determined by the organization that
        published the compliance items.

      - **UnspecifiedCount** *(integer) --*

        The total number of resources or compliance items that have a severity level of
        unspecified. Unspecified severity is determined by the organization that published
        the compliance items.
    """


_ListComplianceSummariesPaginateResponseComplianceSummaryItemsNonCompliantSummarySeveritySummaryTypeDef = TypedDict(
    "_ListComplianceSummariesPaginateResponseComplianceSummaryItemsNonCompliantSummarySeveritySummaryTypeDef",
    {
        "CriticalCount": int,
        "HighCount": int,
        "MediumCount": int,
        "LowCount": int,
        "InformationalCount": int,
        "UnspecifiedCount": int,
    },
    total=False,
)


class ListComplianceSummariesPaginateResponseComplianceSummaryItemsNonCompliantSummarySeveritySummaryTypeDef(
    _ListComplianceSummariesPaginateResponseComplianceSummaryItemsNonCompliantSummarySeveritySummaryTypeDef
):
    """
    Type definition for `ListComplianceSummariesPaginateResponseComplianceSummaryItemsNonCompliantSummary` `SeveritySummary`

    A summary of the non-compliance severity by compliance type

    - **CriticalCount** *(integer) --*

      The total number of resources or compliance items that have a severity level of
      critical. Critical severity is determined by the organization that published the
      compliance items.

    - **HighCount** *(integer) --*

      The total number of resources or compliance items that have a severity level of high.
      High severity is determined by the organization that published the compliance items.

    - **MediumCount** *(integer) --*

      The total number of resources or compliance items that have a severity level of
      medium. Medium severity is determined by the organization that published the
      compliance items.

    - **LowCount** *(integer) --*

      The total number of resources or compliance items that have a severity level of low.
      Low severity is determined by the organization that published the compliance items.

    - **InformationalCount** *(integer) --*

      The total number of resources or compliance items that have a severity level of
      informational. Informational severity is determined by the organization that
      published the compliance items.

    - **UnspecifiedCount** *(integer) --*

      The total number of resources or compliance items that have a severity level of
      unspecified. Unspecified severity is determined by the organization that published
      the compliance items.
    """


_ListComplianceSummariesPaginateResponseComplianceSummaryItemsNonCompliantSummaryTypeDef = TypedDict(
    "_ListComplianceSummariesPaginateResponseComplianceSummaryItemsNonCompliantSummaryTypeDef",
    {
        "NonCompliantCount": int,
        "SeveritySummary": ListComplianceSummariesPaginateResponseComplianceSummaryItemsNonCompliantSummarySeveritySummaryTypeDef,
    },
    total=False,
)


class ListComplianceSummariesPaginateResponseComplianceSummaryItemsNonCompliantSummaryTypeDef(
    _ListComplianceSummariesPaginateResponseComplianceSummaryItemsNonCompliantSummaryTypeDef
):
    """
    Type definition for `ListComplianceSummariesPaginateResponseComplianceSummaryItems` `NonCompliantSummary`

    A list of NON_COMPLIANT items for the specified compliance type.

    - **NonCompliantCount** *(integer) --*

      The total number of compliance items that are not compliant.

    - **SeveritySummary** *(dict) --*

      A summary of the non-compliance severity by compliance type

      - **CriticalCount** *(integer) --*

        The total number of resources or compliance items that have a severity level of
        critical. Critical severity is determined by the organization that published the
        compliance items.

      - **HighCount** *(integer) --*

        The total number of resources or compliance items that have a severity level of high.
        High severity is determined by the organization that published the compliance items.

      - **MediumCount** *(integer) --*

        The total number of resources or compliance items that have a severity level of
        medium. Medium severity is determined by the organization that published the
        compliance items.

      - **LowCount** *(integer) --*

        The total number of resources or compliance items that have a severity level of low.
        Low severity is determined by the organization that published the compliance items.

      - **InformationalCount** *(integer) --*

        The total number of resources or compliance items that have a severity level of
        informational. Informational severity is determined by the organization that
        published the compliance items.

      - **UnspecifiedCount** *(integer) --*

        The total number of resources or compliance items that have a severity level of
        unspecified. Unspecified severity is determined by the organization that published
        the compliance items.
    """


_ListComplianceSummariesPaginateResponseComplianceSummaryItemsTypeDef = TypedDict(
    "_ListComplianceSummariesPaginateResponseComplianceSummaryItemsTypeDef",
    {
        "ComplianceType": str,
        "CompliantSummary": ListComplianceSummariesPaginateResponseComplianceSummaryItemsCompliantSummaryTypeDef,
        "NonCompliantSummary": ListComplianceSummariesPaginateResponseComplianceSummaryItemsNonCompliantSummaryTypeDef,
    },
    total=False,
)


class ListComplianceSummariesPaginateResponseComplianceSummaryItemsTypeDef(
    _ListComplianceSummariesPaginateResponseComplianceSummaryItemsTypeDef
):
    """
    Type definition for `ListComplianceSummariesPaginateResponse` `ComplianceSummaryItems`

    A summary of compliance information by compliance type.

    - **ComplianceType** *(string) --*

      The type of compliance item. For example, the compliance type can be Association, Patch,
      or Custom:string.

    - **CompliantSummary** *(dict) --*

      A list of COMPLIANT items for the specified compliance type.

      - **CompliantCount** *(integer) --*

        The total number of resources that are compliant.

      - **SeveritySummary** *(dict) --*

        A summary of the compliance severity by compliance type.

        - **CriticalCount** *(integer) --*

          The total number of resources or compliance items that have a severity level of
          critical. Critical severity is determined by the organization that published the
          compliance items.

        - **HighCount** *(integer) --*

          The total number of resources or compliance items that have a severity level of high.
          High severity is determined by the organization that published the compliance items.

        - **MediumCount** *(integer) --*

          The total number of resources or compliance items that have a severity level of
          medium. Medium severity is determined by the organization that published the
          compliance items.

        - **LowCount** *(integer) --*

          The total number of resources or compliance items that have a severity level of low.
          Low severity is determined by the organization that published the compliance items.

        - **InformationalCount** *(integer) --*

          The total number of resources or compliance items that have a severity level of
          informational. Informational severity is determined by the organization that
          published the compliance items.

        - **UnspecifiedCount** *(integer) --*

          The total number of resources or compliance items that have a severity level of
          unspecified. Unspecified severity is determined by the organization that published
          the compliance items.

    - **NonCompliantSummary** *(dict) --*

      A list of NON_COMPLIANT items for the specified compliance type.

      - **NonCompliantCount** *(integer) --*

        The total number of compliance items that are not compliant.

      - **SeveritySummary** *(dict) --*

        A summary of the non-compliance severity by compliance type

        - **CriticalCount** *(integer) --*

          The total number of resources or compliance items that have a severity level of
          critical. Critical severity is determined by the organization that published the
          compliance items.

        - **HighCount** *(integer) --*

          The total number of resources or compliance items that have a severity level of high.
          High severity is determined by the organization that published the compliance items.

        - **MediumCount** *(integer) --*

          The total number of resources or compliance items that have a severity level of
          medium. Medium severity is determined by the organization that published the
          compliance items.

        - **LowCount** *(integer) --*

          The total number of resources or compliance items that have a severity level of low.
          Low severity is determined by the organization that published the compliance items.

        - **InformationalCount** *(integer) --*

          The total number of resources or compliance items that have a severity level of
          informational. Informational severity is determined by the organization that
          published the compliance items.

        - **UnspecifiedCount** *(integer) --*

          The total number of resources or compliance items that have a severity level of
          unspecified. Unspecified severity is determined by the organization that published
          the compliance items.
    """


_ListComplianceSummariesPaginateResponseTypeDef = TypedDict(
    "_ListComplianceSummariesPaginateResponseTypeDef",
    {
        "ComplianceSummaryItems": List[
            ListComplianceSummariesPaginateResponseComplianceSummaryItemsTypeDef
        ]
    },
    total=False,
)


class ListComplianceSummariesPaginateResponseTypeDef(
    _ListComplianceSummariesPaginateResponseTypeDef
):
    """
    Type definition for `ListComplianceSummariesPaginate` `Response`

    - **ComplianceSummaryItems** *(list) --*

      A list of compliant and non-compliant summary counts based on compliance types. For example,
      this call returns State Manager associations, patches, or custom compliance types according
      to the filter criteria that you specified.

      - *(dict) --*

        A summary of compliance information by compliance type.

        - **ComplianceType** *(string) --*

          The type of compliance item. For example, the compliance type can be Association, Patch,
          or Custom:string.

        - **CompliantSummary** *(dict) --*

          A list of COMPLIANT items for the specified compliance type.

          - **CompliantCount** *(integer) --*

            The total number of resources that are compliant.

          - **SeveritySummary** *(dict) --*

            A summary of the compliance severity by compliance type.

            - **CriticalCount** *(integer) --*

              The total number of resources or compliance items that have a severity level of
              critical. Critical severity is determined by the organization that published the
              compliance items.

            - **HighCount** *(integer) --*

              The total number of resources or compliance items that have a severity level of high.
              High severity is determined by the organization that published the compliance items.

            - **MediumCount** *(integer) --*

              The total number of resources or compliance items that have a severity level of
              medium. Medium severity is determined by the organization that published the
              compliance items.

            - **LowCount** *(integer) --*

              The total number of resources or compliance items that have a severity level of low.
              Low severity is determined by the organization that published the compliance items.

            - **InformationalCount** *(integer) --*

              The total number of resources or compliance items that have a severity level of
              informational. Informational severity is determined by the organization that
              published the compliance items.

            - **UnspecifiedCount** *(integer) --*

              The total number of resources or compliance items that have a severity level of
              unspecified. Unspecified severity is determined by the organization that published
              the compliance items.

        - **NonCompliantSummary** *(dict) --*

          A list of NON_COMPLIANT items for the specified compliance type.

          - **NonCompliantCount** *(integer) --*

            The total number of compliance items that are not compliant.

          - **SeveritySummary** *(dict) --*

            A summary of the non-compliance severity by compliance type

            - **CriticalCount** *(integer) --*

              The total number of resources or compliance items that have a severity level of
              critical. Critical severity is determined by the organization that published the
              compliance items.

            - **HighCount** *(integer) --*

              The total number of resources or compliance items that have a severity level of high.
              High severity is determined by the organization that published the compliance items.

            - **MediumCount** *(integer) --*

              The total number of resources or compliance items that have a severity level of
              medium. Medium severity is determined by the organization that published the
              compliance items.

            - **LowCount** *(integer) --*

              The total number of resources or compliance items that have a severity level of low.
              Low severity is determined by the organization that published the compliance items.

            - **InformationalCount** *(integer) --*

              The total number of resources or compliance items that have a severity level of
              informational. Informational severity is determined by the organization that
              published the compliance items.

            - **UnspecifiedCount** *(integer) --*

              The total number of resources or compliance items that have a severity level of
              unspecified. Unspecified severity is determined by the organization that published
              the compliance items.
    """


_ListDocumentVersionsPaginatePaginationConfigTypeDef = TypedDict(
    "_ListDocumentVersionsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class ListDocumentVersionsPaginatePaginationConfigTypeDef(
    _ListDocumentVersionsPaginatePaginationConfigTypeDef
):
    """
    Type definition for `ListDocumentVersionsPaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_ListDocumentVersionsPaginateResponseDocumentVersionsTypeDef = TypedDict(
    "_ListDocumentVersionsPaginateResponseDocumentVersionsTypeDef",
    {
        "Name": str,
        "DocumentVersion": str,
        "VersionName": str,
        "CreatedDate": datetime,
        "IsDefaultVersion": bool,
        "DocumentFormat": str,
        "Status": str,
        "StatusInformation": str,
    },
    total=False,
)


class ListDocumentVersionsPaginateResponseDocumentVersionsTypeDef(
    _ListDocumentVersionsPaginateResponseDocumentVersionsTypeDef
):
    """
    Type definition for `ListDocumentVersionsPaginateResponse` `DocumentVersions`

    Version information about the document.

    - **Name** *(string) --*

      The document name.

    - **DocumentVersion** *(string) --*

      The document version.

    - **VersionName** *(string) --*

      The version of the artifact associated with the document. For example, "Release 12,
      Update 6". This value is unique across all versions of a document, and cannot be changed.

    - **CreatedDate** *(datetime) --*

      The date the document was created.

    - **IsDefaultVersion** *(boolean) --*

      An identifier for the default version of the document.

    - **DocumentFormat** *(string) --*

      The document format, either JSON or YAML.

    - **Status** *(string) --*

      The status of the Systems Manager document, such as ``Creating`` , ``Active`` ,
      ``Failed`` , and ``Deleting`` .

    - **StatusInformation** *(string) --*

      A message returned by AWS Systems Manager that explains the ``Status`` value. For
      example, a ``Failed`` status might be explained by the ``StatusInformation`` message,
      "The specified S3 bucket does not exist. Verify that the URL of the S3 bucket is correct."
    """


_ListDocumentVersionsPaginateResponseTypeDef = TypedDict(
    "_ListDocumentVersionsPaginateResponseTypeDef",
    {
        "DocumentVersions": List[
            ListDocumentVersionsPaginateResponseDocumentVersionsTypeDef
        ]
    },
    total=False,
)


class ListDocumentVersionsPaginateResponseTypeDef(
    _ListDocumentVersionsPaginateResponseTypeDef
):
    """
    Type definition for `ListDocumentVersionsPaginate` `Response`

    - **DocumentVersions** *(list) --*

      The document versions.

      - *(dict) --*

        Version information about the document.

        - **Name** *(string) --*

          The document name.

        - **DocumentVersion** *(string) --*

          The document version.

        - **VersionName** *(string) --*

          The version of the artifact associated with the document. For example, "Release 12,
          Update 6". This value is unique across all versions of a document, and cannot be changed.

        - **CreatedDate** *(datetime) --*

          The date the document was created.

        - **IsDefaultVersion** *(boolean) --*

          An identifier for the default version of the document.

        - **DocumentFormat** *(string) --*

          The document format, either JSON or YAML.

        - **Status** *(string) --*

          The status of the Systems Manager document, such as ``Creating`` , ``Active`` ,
          ``Failed`` , and ``Deleting`` .

        - **StatusInformation** *(string) --*

          A message returned by AWS Systems Manager that explains the ``Status`` value. For
          example, a ``Failed`` status might be explained by the ``StatusInformation`` message,
          "The specified S3 bucket does not exist. Verify that the URL of the S3 bucket is correct."
    """


_ListDocumentsPaginateDocumentFilterListTypeDef = TypedDict(
    "_ListDocumentsPaginateDocumentFilterListTypeDef", {"key": str, "value": str}
)


class ListDocumentsPaginateDocumentFilterListTypeDef(
    _ListDocumentsPaginateDocumentFilterListTypeDef
):
    """
    Type definition for `ListDocumentsPaginate` `DocumentFilterList`

    Describes a filter.

    - **key** *(string) --* **[REQUIRED]**

      The name of the filter.

    - **value** *(string) --* **[REQUIRED]**

      The value of the filter.
    """


_ListDocumentsPaginateFiltersTypeDef = TypedDict(
    "_ListDocumentsPaginateFiltersTypeDef",
    {"Key": str, "Values": List[str]},
    total=False,
)


class ListDocumentsPaginateFiltersTypeDef(_ListDocumentsPaginateFiltersTypeDef):
    """
    Type definition for `ListDocumentsPaginate` `Filters`

    One or more filters. Use a filter to return a more specific list of documents.

    For keys, you can specify one or more tags that have been applied to a document.

    Other valid values include Owner, Name, PlatformTypes, and DocumentType.

    Note that only one Owner can be specified in a request. For example: ``Key=Owner,Values=Self`` .

    If you use Name as a key, you can use a name prefix to return a list of documents. For example,
    in the AWS CLI, to return a list of all documents that begin with ``Te`` , run the following
    command:

     ``aws ssm list-documents --filters Key=Name,Values=Te``

    If you specify more than two keys, only documents that are identified by all the tags are
    returned in the results. If you specify more than two values for a key, documents that are
    identified by any of the values are returned in the results.

    To specify a custom key and value pair, use the format ``Key=tag:[tagName],Values=[valueName]``
    .

    For example, if you created a Key called region and are using the AWS CLI to call the
    ``list-documents`` command:

     ``aws ssm list-documents --filters Key=tag:region,Values=east,west Key=Owner,Values=Self``

    - **Key** *(string) --*

      The name of the filter key.

    - **Values** *(list) --*

      The value for the filter key.

      - *(string) --*
    """


_ListDocumentsPaginatePaginationConfigTypeDef = TypedDict(
    "_ListDocumentsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class ListDocumentsPaginatePaginationConfigTypeDef(
    _ListDocumentsPaginatePaginationConfigTypeDef
):
    """
    Type definition for `ListDocumentsPaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_ListDocumentsPaginateResponseDocumentIdentifiersTagsTypeDef = TypedDict(
    "_ListDocumentsPaginateResponseDocumentIdentifiersTagsTypeDef",
    {"Key": str, "Value": str},
    total=False,
)


class ListDocumentsPaginateResponseDocumentIdentifiersTagsTypeDef(
    _ListDocumentsPaginateResponseDocumentIdentifiersTagsTypeDef
):
    """
    Type definition for `ListDocumentsPaginateResponseDocumentIdentifiers` `Tags`

    Metadata that you assign to your AWS resources. Tags enable you to categorize your
    resources in different ways, for example, by purpose, owner, or environment. In Systems
    Manager, you can apply tags to documents, managed instances, maintenance windows,
    Parameter Store parameters, and patch baselines.

    - **Key** *(string) --*

      The name of the tag.

    - **Value** *(string) --*

      The value of the tag.
    """


_ListDocumentsPaginateResponseDocumentIdentifiersTypeDef = TypedDict(
    "_ListDocumentsPaginateResponseDocumentIdentifiersTypeDef",
    {
        "Name": str,
        "Owner": str,
        "VersionName": str,
        "PlatformTypes": List[str],
        "DocumentVersion": str,
        "DocumentType": str,
        "SchemaVersion": str,
        "DocumentFormat": str,
        "TargetType": str,
        "Tags": List[ListDocumentsPaginateResponseDocumentIdentifiersTagsTypeDef],
    },
    total=False,
)


class ListDocumentsPaginateResponseDocumentIdentifiersTypeDef(
    _ListDocumentsPaginateResponseDocumentIdentifiersTypeDef
):
    """
    Type definition for `ListDocumentsPaginateResponse` `DocumentIdentifiers`

    Describes the name of a Systems Manager document.

    - **Name** *(string) --*

      The name of the Systems Manager document.

    - **Owner** *(string) --*

      The AWS user account that created the document.

    - **VersionName** *(string) --*

      An optional field specifying the version of the artifact associated with the document.
      For example, "Release 12, Update 6". This value is unique across all versions of a
      document, and cannot be changed.

    - **PlatformTypes** *(list) --*

      The operating system platform.

      - *(string) --*

    - **DocumentVersion** *(string) --*

      The document version.

    - **DocumentType** *(string) --*

      The document type.

    - **SchemaVersion** *(string) --*

      The schema version.

    - **DocumentFormat** *(string) --*

      The document format, either JSON or YAML.

    - **TargetType** *(string) --*

      The target type which defines the kinds of resources the document can run on. For
      example, /AWS::EC2::Instance. For a list of valid resource types, see `AWS Resource Types
      Reference
      <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html>`__
      in the *AWS CloudFormation User Guide* .

    - **Tags** *(list) --*

      The tags, or metadata, that have been applied to the document.

      - *(dict) --*

        Metadata that you assign to your AWS resources. Tags enable you to categorize your
        resources in different ways, for example, by purpose, owner, or environment. In Systems
        Manager, you can apply tags to documents, managed instances, maintenance windows,
        Parameter Store parameters, and patch baselines.

        - **Key** *(string) --*

          The name of the tag.

        - **Value** *(string) --*

          The value of the tag.
    """


_ListDocumentsPaginateResponseTypeDef = TypedDict(
    "_ListDocumentsPaginateResponseTypeDef",
    {
        "DocumentIdentifiers": List[
            ListDocumentsPaginateResponseDocumentIdentifiersTypeDef
        ]
    },
    total=False,
)


class ListDocumentsPaginateResponseTypeDef(_ListDocumentsPaginateResponseTypeDef):
    """
    Type definition for `ListDocumentsPaginate` `Response`

    - **DocumentIdentifiers** *(list) --*

      The names of the Systems Manager documents.

      - *(dict) --*

        Describes the name of a Systems Manager document.

        - **Name** *(string) --*

          The name of the Systems Manager document.

        - **Owner** *(string) --*

          The AWS user account that created the document.

        - **VersionName** *(string) --*

          An optional field specifying the version of the artifact associated with the document.
          For example, "Release 12, Update 6". This value is unique across all versions of a
          document, and cannot be changed.

        - **PlatformTypes** *(list) --*

          The operating system platform.

          - *(string) --*

        - **DocumentVersion** *(string) --*

          The document version.

        - **DocumentType** *(string) --*

          The document type.

        - **SchemaVersion** *(string) --*

          The schema version.

        - **DocumentFormat** *(string) --*

          The document format, either JSON or YAML.

        - **TargetType** *(string) --*

          The target type which defines the kinds of resources the document can run on. For
          example, /AWS::EC2::Instance. For a list of valid resource types, see `AWS Resource Types
          Reference
          <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html>`__
          in the *AWS CloudFormation User Guide* .

        - **Tags** *(list) --*

          The tags, or metadata, that have been applied to the document.

          - *(dict) --*

            Metadata that you assign to your AWS resources. Tags enable you to categorize your
            resources in different ways, for example, by purpose, owner, or environment. In Systems
            Manager, you can apply tags to documents, managed instances, maintenance windows,
            Parameter Store parameters, and patch baselines.

            - **Key** *(string) --*

              The name of the tag.

            - **Value** *(string) --*

              The value of the tag.
    """


_ListResourceComplianceSummariesPaginateFiltersTypeDef = TypedDict(
    "_ListResourceComplianceSummariesPaginateFiltersTypeDef",
    {"Key": str, "Values": List[str], "Type": str},
    total=False,
)


class ListResourceComplianceSummariesPaginateFiltersTypeDef(
    _ListResourceComplianceSummariesPaginateFiltersTypeDef
):
    """
    Type definition for `ListResourceComplianceSummariesPaginate` `Filters`

    One or more filters. Use a filter to return a more specific list of results.

    - **Key** *(string) --*

      The name of the filter.

    - **Values** *(list) --*

      The value for which to search.

      - *(string) --*

    - **Type** *(string) --*

      The type of comparison that should be performed for the value: Equal, NotEqual, BeginWith,
      LessThan, or GreaterThan.
    """


_ListResourceComplianceSummariesPaginatePaginationConfigTypeDef = TypedDict(
    "_ListResourceComplianceSummariesPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class ListResourceComplianceSummariesPaginatePaginationConfigTypeDef(
    _ListResourceComplianceSummariesPaginatePaginationConfigTypeDef
):
    """
    Type definition for `ListResourceComplianceSummariesPaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_ListResourceComplianceSummariesPaginateResponseResourceComplianceSummaryItemsCompliantSummarySeveritySummaryTypeDef = TypedDict(
    "_ListResourceComplianceSummariesPaginateResponseResourceComplianceSummaryItemsCompliantSummarySeveritySummaryTypeDef",
    {
        "CriticalCount": int,
        "HighCount": int,
        "MediumCount": int,
        "LowCount": int,
        "InformationalCount": int,
        "UnspecifiedCount": int,
    },
    total=False,
)


class ListResourceComplianceSummariesPaginateResponseResourceComplianceSummaryItemsCompliantSummarySeveritySummaryTypeDef(
    _ListResourceComplianceSummariesPaginateResponseResourceComplianceSummaryItemsCompliantSummarySeveritySummaryTypeDef
):
    """
    Type definition for `ListResourceComplianceSummariesPaginateResponseResourceComplianceSummaryItemsCompliantSummary` `SeveritySummary`

    A summary of the compliance severity by compliance type.

    - **CriticalCount** *(integer) --*

      The total number of resources or compliance items that have a severity level of
      critical. Critical severity is determined by the organization that published the
      compliance items.

    - **HighCount** *(integer) --*

      The total number of resources or compliance items that have a severity level of high.
      High severity is determined by the organization that published the compliance items.

    - **MediumCount** *(integer) --*

      The total number of resources or compliance items that have a severity level of
      medium. Medium severity is determined by the organization that published the
      compliance items.

    - **LowCount** *(integer) --*

      The total number of resources or compliance items that have a severity level of low.
      Low severity is determined by the organization that published the compliance items.

    - **InformationalCount** *(integer) --*

      The total number of resources or compliance items that have a severity level of
      informational. Informational severity is determined by the organization that
      published the compliance items.

    - **UnspecifiedCount** *(integer) --*

      The total number of resources or compliance items that have a severity level of
      unspecified. Unspecified severity is determined by the organization that published
      the compliance items.
    """


_ListResourceComplianceSummariesPaginateResponseResourceComplianceSummaryItemsCompliantSummaryTypeDef = TypedDict(
    "_ListResourceComplianceSummariesPaginateResponseResourceComplianceSummaryItemsCompliantSummaryTypeDef",
    {
        "CompliantCount": int,
        "SeveritySummary": ListResourceComplianceSummariesPaginateResponseResourceComplianceSummaryItemsCompliantSummarySeveritySummaryTypeDef,
    },
    total=False,
)


class ListResourceComplianceSummariesPaginateResponseResourceComplianceSummaryItemsCompliantSummaryTypeDef(
    _ListResourceComplianceSummariesPaginateResponseResourceComplianceSummaryItemsCompliantSummaryTypeDef
):
    """
    Type definition for `ListResourceComplianceSummariesPaginateResponseResourceComplianceSummaryItems` `CompliantSummary`

    A list of items that are compliant for the resource.

    - **CompliantCount** *(integer) --*

      The total number of resources that are compliant.

    - **SeveritySummary** *(dict) --*

      A summary of the compliance severity by compliance type.

      - **CriticalCount** *(integer) --*

        The total number of resources or compliance items that have a severity level of
        critical. Critical severity is determined by the organization that published the
        compliance items.

      - **HighCount** *(integer) --*

        The total number of resources or compliance items that have a severity level of high.
        High severity is determined by the organization that published the compliance items.

      - **MediumCount** *(integer) --*

        The total number of resources or compliance items that have a severity level of
        medium. Medium severity is determined by the organization that published the
        compliance items.

      - **LowCount** *(integer) --*

        The total number of resources or compliance items that have a severity level of low.
        Low severity is determined by the organization that published the compliance items.

      - **InformationalCount** *(integer) --*

        The total number of resources or compliance items that have a severity level of
        informational. Informational severity is determined by the organization that
        published the compliance items.

      - **UnspecifiedCount** *(integer) --*

        The total number of resources or compliance items that have a severity level of
        unspecified. Unspecified severity is determined by the organization that published
        the compliance items.
    """


_ListResourceComplianceSummariesPaginateResponseResourceComplianceSummaryItemsExecutionSummaryTypeDef = TypedDict(
    "_ListResourceComplianceSummariesPaginateResponseResourceComplianceSummaryItemsExecutionSummaryTypeDef",
    {"ExecutionTime": datetime, "ExecutionId": str, "ExecutionType": str},
    total=False,
)


class ListResourceComplianceSummariesPaginateResponseResourceComplianceSummaryItemsExecutionSummaryTypeDef(
    _ListResourceComplianceSummariesPaginateResponseResourceComplianceSummaryItemsExecutionSummaryTypeDef
):
    """
    Type definition for `ListResourceComplianceSummariesPaginateResponseResourceComplianceSummaryItems` `ExecutionSummary`

    Information about the execution.

    - **ExecutionTime** *(datetime) --*

      The time the execution ran as a datetime object that is saved in the following format:
      yyyy-MM-dd'T'HH:mm:ss'Z'.

    - **ExecutionId** *(string) --*

      An ID created by the system when ``PutComplianceItems`` was called. For example,
      ``CommandID`` is a valid execution ID. You can use this ID in subsequent calls.

    - **ExecutionType** *(string) --*

      The type of execution. For example, ``Command`` is a valid execution type.
    """


_ListResourceComplianceSummariesPaginateResponseResourceComplianceSummaryItemsNonCompliantSummarySeveritySummaryTypeDef = TypedDict(
    "_ListResourceComplianceSummariesPaginateResponseResourceComplianceSummaryItemsNonCompliantSummarySeveritySummaryTypeDef",
    {
        "CriticalCount": int,
        "HighCount": int,
        "MediumCount": int,
        "LowCount": int,
        "InformationalCount": int,
        "UnspecifiedCount": int,
    },
    total=False,
)


class ListResourceComplianceSummariesPaginateResponseResourceComplianceSummaryItemsNonCompliantSummarySeveritySummaryTypeDef(
    _ListResourceComplianceSummariesPaginateResponseResourceComplianceSummaryItemsNonCompliantSummarySeveritySummaryTypeDef
):
    """
    Type definition for `ListResourceComplianceSummariesPaginateResponseResourceComplianceSummaryItemsNonCompliantSummary` `SeveritySummary`

    A summary of the non-compliance severity by compliance type

    - **CriticalCount** *(integer) --*

      The total number of resources or compliance items that have a severity level of
      critical. Critical severity is determined by the organization that published the
      compliance items.

    - **HighCount** *(integer) --*

      The total number of resources or compliance items that have a severity level of high.
      High severity is determined by the organization that published the compliance items.

    - **MediumCount** *(integer) --*

      The total number of resources or compliance items that have a severity level of
      medium. Medium severity is determined by the organization that published the
      compliance items.

    - **LowCount** *(integer) --*

      The total number of resources or compliance items that have a severity level of low.
      Low severity is determined by the organization that published the compliance items.

    - **InformationalCount** *(integer) --*

      The total number of resources or compliance items that have a severity level of
      informational. Informational severity is determined by the organization that
      published the compliance items.

    - **UnspecifiedCount** *(integer) --*

      The total number of resources or compliance items that have a severity level of
      unspecified. Unspecified severity is determined by the organization that published
      the compliance items.
    """


_ListResourceComplianceSummariesPaginateResponseResourceComplianceSummaryItemsNonCompliantSummaryTypeDef = TypedDict(
    "_ListResourceComplianceSummariesPaginateResponseResourceComplianceSummaryItemsNonCompliantSummaryTypeDef",
    {
        "NonCompliantCount": int,
        "SeveritySummary": ListResourceComplianceSummariesPaginateResponseResourceComplianceSummaryItemsNonCompliantSummarySeveritySummaryTypeDef,
    },
    total=False,
)


class ListResourceComplianceSummariesPaginateResponseResourceComplianceSummaryItemsNonCompliantSummaryTypeDef(
    _ListResourceComplianceSummariesPaginateResponseResourceComplianceSummaryItemsNonCompliantSummaryTypeDef
):
    """
    Type definition for `ListResourceComplianceSummariesPaginateResponseResourceComplianceSummaryItems` `NonCompliantSummary`

    A list of items that aren't compliant for the resource.

    - **NonCompliantCount** *(integer) --*

      The total number of compliance items that are not compliant.

    - **SeveritySummary** *(dict) --*

      A summary of the non-compliance severity by compliance type

      - **CriticalCount** *(integer) --*

        The total number of resources or compliance items that have a severity level of
        critical. Critical severity is determined by the organization that published the
        compliance items.

      - **HighCount** *(integer) --*

        The total number of resources or compliance items that have a severity level of high.
        High severity is determined by the organization that published the compliance items.

      - **MediumCount** *(integer) --*

        The total number of resources or compliance items that have a severity level of
        medium. Medium severity is determined by the organization that published the
        compliance items.

      - **LowCount** *(integer) --*

        The total number of resources or compliance items that have a severity level of low.
        Low severity is determined by the organization that published the compliance items.

      - **InformationalCount** *(integer) --*

        The total number of resources or compliance items that have a severity level of
        informational. Informational severity is determined by the organization that
        published the compliance items.

      - **UnspecifiedCount** *(integer) --*

        The total number of resources or compliance items that have a severity level of
        unspecified. Unspecified severity is determined by the organization that published
        the compliance items.
    """


_ListResourceComplianceSummariesPaginateResponseResourceComplianceSummaryItemsTypeDef = TypedDict(
    "_ListResourceComplianceSummariesPaginateResponseResourceComplianceSummaryItemsTypeDef",
    {
        "ComplianceType": str,
        "ResourceType": str,
        "ResourceId": str,
        "Status": str,
        "OverallSeverity": str,
        "ExecutionSummary": ListResourceComplianceSummariesPaginateResponseResourceComplianceSummaryItemsExecutionSummaryTypeDef,
        "CompliantSummary": ListResourceComplianceSummariesPaginateResponseResourceComplianceSummaryItemsCompliantSummaryTypeDef,
        "NonCompliantSummary": ListResourceComplianceSummariesPaginateResponseResourceComplianceSummaryItemsNonCompliantSummaryTypeDef,
    },
    total=False,
)


class ListResourceComplianceSummariesPaginateResponseResourceComplianceSummaryItemsTypeDef(
    _ListResourceComplianceSummariesPaginateResponseResourceComplianceSummaryItemsTypeDef
):
    """
    Type definition for `ListResourceComplianceSummariesPaginateResponse` `ResourceComplianceSummaryItems`

    Compliance summary information for a specific resource.

    - **ComplianceType** *(string) --*

      The compliance type.

    - **ResourceType** *(string) --*

      The resource type.

    - **ResourceId** *(string) --*

      The resource ID.

    - **Status** *(string) --*

      The compliance status for the resource.

    - **OverallSeverity** *(string) --*

      The highest severity item found for the resource. The resource is compliant for this item.

    - **ExecutionSummary** *(dict) --*

      Information about the execution.

      - **ExecutionTime** *(datetime) --*

        The time the execution ran as a datetime object that is saved in the following format:
        yyyy-MM-dd'T'HH:mm:ss'Z'.

      - **ExecutionId** *(string) --*

        An ID created by the system when ``PutComplianceItems`` was called. For example,
        ``CommandID`` is a valid execution ID. You can use this ID in subsequent calls.

      - **ExecutionType** *(string) --*

        The type of execution. For example, ``Command`` is a valid execution type.

    - **CompliantSummary** *(dict) --*

      A list of items that are compliant for the resource.

      - **CompliantCount** *(integer) --*

        The total number of resources that are compliant.

      - **SeveritySummary** *(dict) --*

        A summary of the compliance severity by compliance type.

        - **CriticalCount** *(integer) --*

          The total number of resources or compliance items that have a severity level of
          critical. Critical severity is determined by the organization that published the
          compliance items.

        - **HighCount** *(integer) --*

          The total number of resources or compliance items that have a severity level of high.
          High severity is determined by the organization that published the compliance items.

        - **MediumCount** *(integer) --*

          The total number of resources or compliance items that have a severity level of
          medium. Medium severity is determined by the organization that published the
          compliance items.

        - **LowCount** *(integer) --*

          The total number of resources or compliance items that have a severity level of low.
          Low severity is determined by the organization that published the compliance items.

        - **InformationalCount** *(integer) --*

          The total number of resources or compliance items that have a severity level of
          informational. Informational severity is determined by the organization that
          published the compliance items.

        - **UnspecifiedCount** *(integer) --*

          The total number of resources or compliance items that have a severity level of
          unspecified. Unspecified severity is determined by the organization that published
          the compliance items.

    - **NonCompliantSummary** *(dict) --*

      A list of items that aren't compliant for the resource.

      - **NonCompliantCount** *(integer) --*

        The total number of compliance items that are not compliant.

      - **SeveritySummary** *(dict) --*

        A summary of the non-compliance severity by compliance type

        - **CriticalCount** *(integer) --*

          The total number of resources or compliance items that have a severity level of
          critical. Critical severity is determined by the organization that published the
          compliance items.

        - **HighCount** *(integer) --*

          The total number of resources or compliance items that have a severity level of high.
          High severity is determined by the organization that published the compliance items.

        - **MediumCount** *(integer) --*

          The total number of resources or compliance items that have a severity level of
          medium. Medium severity is determined by the organization that published the
          compliance items.

        - **LowCount** *(integer) --*

          The total number of resources or compliance items that have a severity level of low.
          Low severity is determined by the organization that published the compliance items.

        - **InformationalCount** *(integer) --*

          The total number of resources or compliance items that have a severity level of
          informational. Informational severity is determined by the organization that
          published the compliance items.

        - **UnspecifiedCount** *(integer) --*

          The total number of resources or compliance items that have a severity level of
          unspecified. Unspecified severity is determined by the organization that published
          the compliance items.
    """


_ListResourceComplianceSummariesPaginateResponseTypeDef = TypedDict(
    "_ListResourceComplianceSummariesPaginateResponseTypeDef",
    {
        "ResourceComplianceSummaryItems": List[
            ListResourceComplianceSummariesPaginateResponseResourceComplianceSummaryItemsTypeDef
        ]
    },
    total=False,
)


class ListResourceComplianceSummariesPaginateResponseTypeDef(
    _ListResourceComplianceSummariesPaginateResponseTypeDef
):
    """
    Type definition for `ListResourceComplianceSummariesPaginate` `Response`

    - **ResourceComplianceSummaryItems** *(list) --*

      A summary count for specified or targeted managed instances. Summary count includes
      information about compliant and non-compliant State Manager associations, patch status, or
      custom items according to the filter criteria that you specify.

      - *(dict) --*

        Compliance summary information for a specific resource.

        - **ComplianceType** *(string) --*

          The compliance type.

        - **ResourceType** *(string) --*

          The resource type.

        - **ResourceId** *(string) --*

          The resource ID.

        - **Status** *(string) --*

          The compliance status for the resource.

        - **OverallSeverity** *(string) --*

          The highest severity item found for the resource. The resource is compliant for this item.

        - **ExecutionSummary** *(dict) --*

          Information about the execution.

          - **ExecutionTime** *(datetime) --*

            The time the execution ran as a datetime object that is saved in the following format:
            yyyy-MM-dd'T'HH:mm:ss'Z'.

          - **ExecutionId** *(string) --*

            An ID created by the system when ``PutComplianceItems`` was called. For example,
            ``CommandID`` is a valid execution ID. You can use this ID in subsequent calls.

          - **ExecutionType** *(string) --*

            The type of execution. For example, ``Command`` is a valid execution type.

        - **CompliantSummary** *(dict) --*

          A list of items that are compliant for the resource.

          - **CompliantCount** *(integer) --*

            The total number of resources that are compliant.

          - **SeveritySummary** *(dict) --*

            A summary of the compliance severity by compliance type.

            - **CriticalCount** *(integer) --*

              The total number of resources or compliance items that have a severity level of
              critical. Critical severity is determined by the organization that published the
              compliance items.

            - **HighCount** *(integer) --*

              The total number of resources or compliance items that have a severity level of high.
              High severity is determined by the organization that published the compliance items.

            - **MediumCount** *(integer) --*

              The total number of resources or compliance items that have a severity level of
              medium. Medium severity is determined by the organization that published the
              compliance items.

            - **LowCount** *(integer) --*

              The total number of resources or compliance items that have a severity level of low.
              Low severity is determined by the organization that published the compliance items.

            - **InformationalCount** *(integer) --*

              The total number of resources or compliance items that have a severity level of
              informational. Informational severity is determined by the organization that
              published the compliance items.

            - **UnspecifiedCount** *(integer) --*

              The total number of resources or compliance items that have a severity level of
              unspecified. Unspecified severity is determined by the organization that published
              the compliance items.

        - **NonCompliantSummary** *(dict) --*

          A list of items that aren't compliant for the resource.

          - **NonCompliantCount** *(integer) --*

            The total number of compliance items that are not compliant.

          - **SeveritySummary** *(dict) --*

            A summary of the non-compliance severity by compliance type

            - **CriticalCount** *(integer) --*

              The total number of resources or compliance items that have a severity level of
              critical. Critical severity is determined by the organization that published the
              compliance items.

            - **HighCount** *(integer) --*

              The total number of resources or compliance items that have a severity level of high.
              High severity is determined by the organization that published the compliance items.

            - **MediumCount** *(integer) --*

              The total number of resources or compliance items that have a severity level of
              medium. Medium severity is determined by the organization that published the
              compliance items.

            - **LowCount** *(integer) --*

              The total number of resources or compliance items that have a severity level of low.
              Low severity is determined by the organization that published the compliance items.

            - **InformationalCount** *(integer) --*

              The total number of resources or compliance items that have a severity level of
              informational. Informational severity is determined by the organization that
              published the compliance items.

            - **UnspecifiedCount** *(integer) --*

              The total number of resources or compliance items that have a severity level of
              unspecified. Unspecified severity is determined by the organization that published
              the compliance items.
    """


_ListResourceDataSyncPaginatePaginationConfigTypeDef = TypedDict(
    "_ListResourceDataSyncPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class ListResourceDataSyncPaginatePaginationConfigTypeDef(
    _ListResourceDataSyncPaginatePaginationConfigTypeDef
):
    """
    Type definition for `ListResourceDataSyncPaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_ListResourceDataSyncPaginateResponseResourceDataSyncItemsS3DestinationTypeDef = TypedDict(
    "_ListResourceDataSyncPaginateResponseResourceDataSyncItemsS3DestinationTypeDef",
    {
        "BucketName": str,
        "Prefix": str,
        "SyncFormat": str,
        "Region": str,
        "AWSKMSKeyARN": str,
    },
    total=False,
)


class ListResourceDataSyncPaginateResponseResourceDataSyncItemsS3DestinationTypeDef(
    _ListResourceDataSyncPaginateResponseResourceDataSyncItemsS3DestinationTypeDef
):
    """
    Type definition for `ListResourceDataSyncPaginateResponseResourceDataSyncItems` `S3Destination`

    Configuration information for the target Amazon S3 bucket.

    - **BucketName** *(string) --*

      The name of the Amazon S3 bucket where the aggregated data is stored.

    - **Prefix** *(string) --*

      An Amazon S3 prefix for the bucket.

    - **SyncFormat** *(string) --*

      A supported sync format. The following format is currently supported: JsonSerDe

    - **Region** *(string) --*

      The AWS Region with the Amazon S3 bucket targeted by the Resource Data Sync.

    - **AWSKMSKeyARN** *(string) --*

      The ARN of an encryption key for a destination in Amazon S3. Must belong to the same
      Region as the destination Amazon S3 bucket.
    """


_ListResourceDataSyncPaginateResponseResourceDataSyncItemsTypeDef = TypedDict(
    "_ListResourceDataSyncPaginateResponseResourceDataSyncItemsTypeDef",
    {
        "SyncName": str,
        "S3Destination": ListResourceDataSyncPaginateResponseResourceDataSyncItemsS3DestinationTypeDef,
        "LastSyncTime": datetime,
        "LastSuccessfulSyncTime": datetime,
        "LastStatus": str,
        "SyncCreatedTime": datetime,
        "LastSyncStatusMessage": str,
    },
    total=False,
)


class ListResourceDataSyncPaginateResponseResourceDataSyncItemsTypeDef(
    _ListResourceDataSyncPaginateResponseResourceDataSyncItemsTypeDef
):
    """
    Type definition for `ListResourceDataSyncPaginateResponse` `ResourceDataSyncItems`

    Information about a Resource Data Sync configuration, including its current status and last
    successful sync.

    - **SyncName** *(string) --*

      The name of the Resource Data Sync.

    - **S3Destination** *(dict) --*

      Configuration information for the target Amazon S3 bucket.

      - **BucketName** *(string) --*

        The name of the Amazon S3 bucket where the aggregated data is stored.

      - **Prefix** *(string) --*

        An Amazon S3 prefix for the bucket.

      - **SyncFormat** *(string) --*

        A supported sync format. The following format is currently supported: JsonSerDe

      - **Region** *(string) --*

        The AWS Region with the Amazon S3 bucket targeted by the Resource Data Sync.

      - **AWSKMSKeyARN** *(string) --*

        The ARN of an encryption key for a destination in Amazon S3. Must belong to the same
        Region as the destination Amazon S3 bucket.

    - **LastSyncTime** *(datetime) --*

      The last time the configuration attempted to sync (UTC).

    - **LastSuccessfulSyncTime** *(datetime) --*

      The last time the sync operations returned a status of ``SUCCESSFUL`` (UTC).

    - **LastStatus** *(string) --*

      The status reported by the last sync.

    - **SyncCreatedTime** *(datetime) --*

      The date and time the configuration was created (UTC).

    - **LastSyncStatusMessage** *(string) --*

      The status message details reported by the last sync.
    """


_ListResourceDataSyncPaginateResponseTypeDef = TypedDict(
    "_ListResourceDataSyncPaginateResponseTypeDef",
    {
        "ResourceDataSyncItems": List[
            ListResourceDataSyncPaginateResponseResourceDataSyncItemsTypeDef
        ]
    },
    total=False,
)


class ListResourceDataSyncPaginateResponseTypeDef(
    _ListResourceDataSyncPaginateResponseTypeDef
):
    """
    Type definition for `ListResourceDataSyncPaginate` `Response`

    - **ResourceDataSyncItems** *(list) --*

      A list of your current Resource Data Sync configurations and their statuses.

      - *(dict) --*

        Information about a Resource Data Sync configuration, including its current status and last
        successful sync.

        - **SyncName** *(string) --*

          The name of the Resource Data Sync.

        - **S3Destination** *(dict) --*

          Configuration information for the target Amazon S3 bucket.

          - **BucketName** *(string) --*

            The name of the Amazon S3 bucket where the aggregated data is stored.

          - **Prefix** *(string) --*

            An Amazon S3 prefix for the bucket.

          - **SyncFormat** *(string) --*

            A supported sync format. The following format is currently supported: JsonSerDe

          - **Region** *(string) --*

            The AWS Region with the Amazon S3 bucket targeted by the Resource Data Sync.

          - **AWSKMSKeyARN** *(string) --*

            The ARN of an encryption key for a destination in Amazon S3. Must belong to the same
            Region as the destination Amazon S3 bucket.

        - **LastSyncTime** *(datetime) --*

          The last time the configuration attempted to sync (UTC).

        - **LastSuccessfulSyncTime** *(datetime) --*

          The last time the sync operations returned a status of ``SUCCESSFUL`` (UTC).

        - **LastStatus** *(string) --*

          The status reported by the last sync.

        - **SyncCreatedTime** *(datetime) --*

          The date and time the configuration was created (UTC).

        - **LastSyncStatusMessage** *(string) --*

          The status message details reported by the last sync.
    """
