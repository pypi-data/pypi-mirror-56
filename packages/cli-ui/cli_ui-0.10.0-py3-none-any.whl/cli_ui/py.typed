from typing import Any, Callable, List, Optional, Sequence, Union, Iterable

def setup(*, verbose: bool = False, quiet: bool = False, color: str = "auto", title: str = "auto", timestamp: bool = False,) -> None: ...

class Color:
    def __init__(self, code: int, modifier: Optional[int] = None) -> None: ...

class UnicodeSequence:
    def __init__(self, color: Color, as_unicode: str, as_ascii: str) -> None: ...

class Symbol(UnicodeSequence):
    def __init__(self, as_unicode: str, as_ascii: str) -> None: ...

Token = Union[str, Color, UnicodeSequence, Symbol]

def using_colorama() -> bool: ...
def config_color(fileobj: Any) -> bool: ...
def update_title(mystr: str, fileobj: Any) -> None: ...

def message(*tokens: Token, **kwargs: Any) -> None: ...
def fatal(*tokens: Token, **kwargs: Any) -> None: ...
def warning(*tokens: Token, **kwargs: Any) -> None: ...
def info(*tokens: Token, **kwargs: Any) -> None: ...
def info_section(*tokens: Token, **kwargs: Any) -> None: ...
def info_1(*tokens: Token, **kwargs: Any) -> None: ...
def info_2(*tokens: Token, **kwargs: Any) -> None: ...
def dot(*, last: Optional[bool] = False, fileobj: Any = None) -> None: ...
def info_count(i: int, n: int, *rest: Token, **kwargs: Any) -> None: ...
def info_progress( prefix: str, value: Union[int, float], max_value: Union[int, float]) -> None: ...
def debug(*tokens: Token, **kwargs: Any) -> None: ...
def indent_iterable(elems: Iterable[str], num: int = 2) -> Sequence[str]: ...
def indent(text: str, num: int = 2) -> str: ...
def tabs(num: int) -> str: ...
def info_table(data: Any, *, headers: Optional[Sequence[str]] = None, fileobj: Any = None) -> None: ...
def message_for_exception(exception: Exception, message: str) -> Sequence[Token]: ...

def read_input() -> str: ...
def read_password() -> str: ...
def ask_string(question: str, default: Optional[str] = None) -> Optional[str]: ...
def ask_password(question: str) -> str: ...
FuncDesc = Callable[[Any], str]
def ask_choice(input_text: str, choices: List[Any], *, func_desc: Optional[FuncDesc] = None) -> Any: ...
def ask_yes_no(question: str, default: bool = False) -> bool: ...

class Timer:
    def __init__(self, description: str) -> None: ...

def did_you_mean(message: str, user_input: str, choices: List[str]) -> str: ...
