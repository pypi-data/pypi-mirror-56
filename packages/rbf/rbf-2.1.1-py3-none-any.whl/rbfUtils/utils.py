# -*- coding: utf-8 -*-

#  Copyright 2019-  DNB
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

from cryptography.fernet import Fernet
import importlib
from robot.api import logger
from robot.api.deco import keyword
from random import choice, randint
from string import ascii_uppercase, ascii_lowercase, digits
import arrow
import base64
import re
import rstr
import phonenumbers


class Utilities(object):
    """
    Utilities provide various keywords to the rbfUtil library
    """

    def __init__(self):
        """
        Initializes _dbconnection to None.
        """
        self.key = None

    
    @keyword
    def encrypt(self, input_file, output_file, write_key_to_location=None):
        """
        *Encrypts data from input file and writes output to a new file by generating a key.*
        
        *Arguments*

        ``input_file``: Location of text file with content (plan-text) to be encrypted
        
        ``output_file``: Location of text file with content (encrypted) to be written to
		
        ``write_key_to_location``: Location of key generated to be written to
        
        *Examples*
              
        | `Encrypt` | input_file=${CURDIR}/input.txt | output_file=${CURDIR}/output.txt |

        """
        logger.info("Encrypts data from input file: %s and writes output to a new file: %s by generating a key." % (input_file, output_file))
        if self.key is None:
            self.key = Fernet.generate_key()
            logger.info('Key doesnot exist, generating a new key')
            if write_key_to_location:
                with open(write_key_to_location, 'wb') as f:
                    f.write(self.key)
                    f.close()
                    logger.info('Generated key written at %s' % (write_key_to_location))
        
        with open(input_file, 'rb') as f:
            data = f.read()
            f.close()
        logger.debug("The data was read")

        fernet = Fernet(self.key)
        encrypted = fernet.encrypt(data)
        logger.debug("The data was encrypted")

        with open(output_file, 'wb') as f:
            f.write(encrypted)
            f.close()
        logger.debug("The encrypted data was put to the file %s" % (output_file))

        logger.info('Encrypted Data')

    
    @keyword
    def decrypt(self, input_file, output_file, key=None):
        """
        *Decrypts data from input file and writes output to a new file by generating a key.*
        
        *Arguments*

        ``input_file``: Location of file with content (encrypted)
        
        ``output_file``: Location of text file with content (decrypted) to be written to
		
		``key``: Optional. If provided, uses the key for decryption. Overrides the key generated by `Encrypt` keyword. 
		
        
        *Examples*
              
        | `Decrypt` | input_file=${CURDIR}/input.txt | output_file=${CURDIR}/output.txt |

        """
        logger.info("Decrypts data from input file: %s and writes output to a new file: %s by generating a key" % (input_file, output_file))
        if key:
            file = open(key, 'rb')
            self.key = file.read()
            file.close()
            fernet = Fernet(self.key)
            logger.info('Reading and Applying the key provided')

        if self.key is None:
            raise ValueError('Key doesnot exist, cannot decrypt')

        if key is None:
            fernet = Fernet(self.key)		
            logger.info('Applying the existing key generated by Encrypt')

        with open(input_file, 'rb') as f:
            data = f.read()
            f.close()
        logger.debug("The data was read")

        decrypted = fernet.decrypt(data)
        logger.debug("The data was decrypted")

        with open(output_file, 'wb') as f:
            f.write(decrypted)
            f.close()
        logger.debug("The decrypted data was put to the file %s" % (output_file))

        logger.info('Decrypted Data')


    @keyword
    def generate_email(self, prefix='name', domain='dnb.no', email_length=5):
        """
        *Generate random email from given prefix, domain and email_length.*
        
        *Arguments*

        ``prefix``: Optional. Prefix for the random email
        
        ``domain``: Optional. Domail for the random email. Like dnb.no
		
		``email_length``: Optional. If provided, len of the email will be equal to email_length. 
		
        
        *Examples*
              
        | `Generate Email` | prefix=family_name | domain=dnb.no | email_length=10 |

        """
        logger.info("Generate random email from given prefix: %s, domain: %s and email_length: %s" % (prefix, domain, email_length))
        email_letters = ''.join(choice(ascii_lowercase + ascii_uppercase + digits) for i in range(int(email_length)))
        generated_email = prefix + email_letters + str(randint(0,1000)) + "@" + domain
        logger.info("The email was generated %s" % (generated_email))
        return generated_email


    @keyword
    def generate_phone_number(self, countryprefix="+47", length=8):
        """
        *Generate random phone number for given countryprefix and length.*
        
        *Arguments*

        ``countryprefix``: Optional. Prefix for identifying contry. Norway by default.

        ``length``: Optional. Length of the phone number. 8 by default.
		

        *Examples*
              
        | `Generate Phone Number` | +47 | 8 |

        """
        logger.info("Generate random phone number for given countryprefix: %s and length: %s" % (countryprefix, length))
        phone_number = countryprefix
        for number in range(int(length)):
            phone_number = phone_number + str(randint(0,9))
        logger.info("The phone number was generated %s" % (phone_number))
        return phone_number


    @keyword
    def generate_phone_number_with_spaces(self, countryprefix="+47", length=6, start_of_the_number="48"):
        """
        *Generate random phone number with spaces.*
        
        *Arguments*

        ``countryprefix``: Optional. +47 by default

        ``length``: Optional. 6 by default

        ``start_of_the_number``: Optional. 48 by defulut
		

        *Examples*
              
        | `Generate Phone Number With Spaces` | +380 | 7 | 50 |

        """
        logger.info("Generate random phone number with spaces for countryprefix %s and length %s" % (countryprefix, length + len(start_of_the_number)))
        if "+" not in countryprefix: 
            phone_number_string = "+" + countryprefix + start_of_the_number
        else:
            phone_number_string = countryprefix + start_of_the_number
        for number in range(int(length)):
            phone_number_string = phone_number_string + str(randint(1,9))

        try:
            phone_number = phonenumbers.parse(phone_number_string)
        except phonenumbers.phonenumberutil.NumberParseException:
            raise ValueError('Generated phone number is invalid. Check countryprefix')
        if not phonenumbers.is_valid_number(phone_number):
            raise ValueError('Generated phone number is invalid. Check length and start of the phone number')
        
        generated_phone_number = phonenumbers.format_number(phone_number, phonenumbers.PhoneNumberFormat.INTERNATIONAL)
        logger.info("The phone number was generated %s" % (generated_phone_number))
        return generated_phone_number


    @keyword
    def generate_random_string(self, length):
        """
        *Generates a random string of given length*
        
        *Arguments*

        ``length``: Length of the random string to be generated
		
        
        *Examples*
              
        | `Generate Random String` | 15 |

        """
        logger.info("Generate random string for given length: %s" % (length))
        random_string = ''.join(choice(ascii_lowercase + ascii_uppercase + digits) for i in range(int(length)))
        logger.info("The random string was generated: %s" % (random_string))
        return random_string
   

    @keyword
    def generate_random_string_with_prefix(self, length, prefix):
        """
        *Generates a random string of given length with given prefix*
        
        *Arguments*

        ``length``:  Length of the random string to be generated

        ``prefix``: Prefix for the random string to be generated
		
        
        *Examples*
              
        | `Generate Random String With Prefix` | 15 | Email |

        """
        logger.info("Generate random string for given length: %s with given prefix: %s" % (length, prefix))
        random_string = prefix + (''.join(choice(ascii_lowercase + ascii_uppercase + digits) for i in range(int(length))))
        logger.info("The random string with prefix was generated: %s" % (random_string))
        return random_string


    @keyword
    def generate_random_string_of_pattern(self, pattern):
        """
        *Generates a random string of pattern*
        
        *Arguments*
		
        ``pattern``: Regular expression for the random string to be generated
		
        
        *Examples*
              
        | `Generate Random String Of Pattern` | \\d{4}-\\d{2}-\\d{2} |

        """
        
        logger.info("Generates a random string of pattern: %s" % (pattern))
        regexp = re.compile(pattern)
        random_srting = rstr.xeger(regexp)
        logger.info("Generated string: %s" % (random_srting))
        return random_srting


    @keyword
    def get_current_date(self, dateformat):
        """
        *Gives current date in the given dateformat*
        
        *Arguments*

        ``dateformat``: Date format to be aligned with 
        
        |--------------|-----------|-------------|   
        | Date         | = Token = | = Example = |
        |--------------|-----------|-------------|
        | Year         |    YYYY   |   2019      |
        |              |    YY     |   19        |
        | Month        |    MMMM   |   January   |
        |              |    MMM    |   Jan       |
        |              |    MM     |   01        |
        |              |    M      |   1         |
        | Day of Year  |    DDDD   |   052       |
        |              |    DDD    |   52        |
        | Day of Month |    DD     |   02        |
        |              |    D      |   2         |
        |              |    Do     |   2nd       |
        | Day of Week  |    dddd   |   Monday    |
        |              |    ddd    |   Mon       |
        |              |    d      |   1         |
        |              |    d      |   1         |
        |--------------|-----------|-------------|
        | Time         | = Token = | = Example = |
        |--------------|-----------|-------------|
        | Hour         |    HH     |   02        |
        |              |    H      |   2         |
        |              |    hh     |   02        |
        |              |    h      |   2         |
        | AM/PM        |    A      |   AM        |
        |              |    a      |   am        |
        | Minute       |    mm     |   02        |
        |              |    m      |   2         |
        | Second       |    ss     |   02        |
        |              |    s      |   2         |
        | Sub-second   |    S      |   2         |
        |--------------|-----------|-------------|

        *Examples*
              
        | `Get Current Date` | DDMMYYYY            |
        | `Get Current Date` | YYYY-MM-DD HH:mm:ss |

        """
        logger.info("Get current date based on the provided format: %s" % (dateformat))
        current_date = str(arrow.now().format(dateformat))
        logger.info("Current date: %s" % (current_date))
        return current_date


    @keyword
    def get_future_date(self, dateformat, number_of_days):
        """
        *Gives date in future in the given format*
        
        *Arguments*

        ``dateformat``: Date format see below
         
        ``number_of_days``: Number of days in future
         
        |--------------|-----------|-------------|   
        | Date         | = Token = | = Example = |
        |--------------|-----------|-------------|
        | Year         |    YYYY   |   2019      |
        |              |    YY     |   19        |
        | Month        |    MMMM   |   January   |
        |              |    MMM    |   Jan       |
        |              |    MM     |   01        |
        |              |    M      |   1         |
        | Day of Year  |    DDDD   |   052       |
        |              |    DDD    |   52        |
        | Day of Month |    DD     |   02        |
        |              |    D      |   2         |
        |              |    Do     |   2nd       |
        | Day of Week  |    dddd   |   Monday    |
        |              |    ddd    |   Mon       |
        |              |    d      |   1         |
        |              |    d      |   1         |
        |--------------|-----------|-------------|
        | Time         | = Token = | = Example = |
        |--------------|-----------|-------------|
        | Hour         |    HH     |   02        |
        |              |    H      |   2         |
        |              |    hh     |   02        |
        |              |    h      |   2         |
        | AM/PM        |    A      |   AM        |
        |              |    a      |   am        |
        | Minute       |    mm     |   02        |
        |              |    m      |   2         |
        | Second       |    ss     |   02        |
        |              |    s      |   2         |
        | Sub-second   |    S      |   2         |
        |--------------|-----------|-------------|

        *Examples*
              
        | `Get Future Date` | DDMMYYYY            | 2  |
        | `Get Future Date` | YYYY-MM-DD HH:mm:ss | 15 |

        """
        logger.info("Get future date based on the provided format: %s" % (dateformat))
        future_date = str(arrow.now().shift(days=int(number_of_days)).format(dateformat))
        logger.info("Future date: %s" % (future_date))
        return future_date


    @keyword
    def get_past_date(self, dateformat, number_of_days):
        """
        *Gives date in past in the given format*
        
        *Arguments*

        ``dateformat``: Date format see below
         
        ``number_of_days``: Number of days in future
         
        |--------------|-----------|-------------|   
        | Date         | = Token = | = Example = |
        |--------------|-----------|-------------|
        | Year         |    YYYY   |   2019      |
        |              |    YY     |   19        |
        | Month        |    MMMM   |   January   |
        |              |    MMM    |   Jan       |
        |              |    MM     |   01        |
        |              |    M      |   1         |
        | Day of Year  |    DDDD   |   052       |
        |              |    DDD    |   52        |
        | Day of Month |    DD     |   02        |
        |              |    D      |   2         |
        |              |    Do     |   2nd       |
        | Day of Week  |    dddd   |   Monday    |
        |              |    ddd    |   Mon       |
        |              |    d      |   1         |
        |              |    d      |   1         |
        |--------------|-----------|-------------|
        | Time         | = Token = | = Example = |
        |--------------|-----------|-------------|
        | Hour         |    HH     |   02        |
        |              |    H      |   2         |
        |              |    hh     |   02        |
        |              |    h      |   2         |
        | AM/PM        |    A      |   AM        |
        |              |    a      |   am        |
        | Minute       |    mm     |   02        |
        |              |    m      |   2         |
        | Second       |    ss     |   02        |
        |              |    s      |   2         |
        | Sub-second   |    S      |   2         |
        |--------------|-----------|-------------|

        *Examples*

        | `Get Past Date` | DDMMYYYY            | 2  |
        | `Get Past Date` | YYYY-MM-DD HH:mm:ss | 15 |

        """
        logger.info("Get past date based on the provided format: %s" % (dateformat))
        past_date = str(arrow.now().shift(days=-int(number_of_days)).format(dateformat))
        logger.info("Past date: %s" % (past_date))
        return past_date
    
    
    @keyword
    def base64_encoding(self, data_to_be_encoded):
        """
        *Converting provided data into a limited character set of 64 characters.*
        
        *Arguments*

        ``data_to_be_encoded``: Data to be encoded
		

        *Examples*
              
        | `Base64 Encoding` | data to be encoded |

        """

        logger.info("Converting provided data: %s into a limited character set of 64 characters" % (data_to_be_encoded))
        encoded = base64.b64encode(data_to_be_encoded.encode("UTF-8"))
        logger.info("The data was encoded into %s" % (encoded))
        return encoded


    @keyword
    def base64_decoding(self, data_to_be_decoded):
        """
        *Decode data from a limited character set of 64 characters.*
        
        *Arguments*

        ``data_to_be_decoded``: Data to be decoded
		

        *Examples*
              
        | `Base64 Decoding` | data to be decoded |

        """

        logger.info("Decode provided data: %s from a limited character set of 64 characters" % (data_to_be_decoded))
        decoded = base64.b64decode(data_to_be_decoded).decode('UTF-8')
        logger.info("The data was decoded into %s" % (decoded))
        return decoded