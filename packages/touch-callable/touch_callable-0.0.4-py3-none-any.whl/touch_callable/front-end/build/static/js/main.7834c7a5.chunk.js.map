{"version":3,"sources":["reducers.js","App.js","serviceWorker.js","index.js"],"names":["updateCallables","callables","type","setLocale","locale","changeModuleStatus","hasNew","initialState","enUS","hasNewModule","runCallableApp","state","action","Object","assign","Header","Layout","Content","Footer","Callables","setCallables","this","props","axios","get","then","response","data","itemLayout","dataSource","renderItem","item","Item","Meta","title","to","callable_name","description","Component","mapDispatchToProps","dispatch","bindActionCreators","ReduxCallables","connect","CallableForm","handleSubmit","e","preventDefault","form","validateFields","err","values","post","match","params","name","status","showSuccessModal","result","showErrorModal","setCallable","callableInfo","callableName","callable","buildFormItem","parameter","index","array","inputWidget","getFieldDecorator","parameterName","annotation","allowClear","parser","value","Math","floor","Group","buttonStyle","Button","showTime","enum_values","map","key","label","initialValue","buildDefaultValue","rules","required","message","default","moment","visible","Modal","success","content","error","style","border","onBack","history","push","layout","onSubmit","doc","parameters","length","wrapperCol","span","htmlType","block","React","WrappedCallableForm","Form","create","ReduxWrappedCallableForm","LanguageSelector","getLocaleText","zhCN","localeText","onChangeLocale","newLocale","setState","onClick","mapStateLocaleToProps","ReduxLanguageSelector","ModuleReloader","loading","reloadModule","queryNewModule","has_new","info","prevState","secondsElapsed","interval","setInterval","clearInterval","disabled","display","ReduxModuleReloader","App","document","className","minHeight","color","margin","width","exact","path","component","textAlign","ReduxApp","Boolean","window","location","hostname","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","trace","traceLimit","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7834c7a5.chunk.js","sourcesContent":["import enUS from 'antd/es/locale/en_US';\n\nexport function updateCallables(callables) {\n  return {\n    type: 'updateCallables',\n    callables\n  }\n}\n\nexport function setLocale(locale) {\n  return {\n    type: 'setLocale',\n    locale\n  }\n}\n\nexport function changeModuleStatus(hasNew) {\n  return {\n    type: 'changeModuleStatus',\n    hasNew\n  }\n}\n\nconst initialState = {\n  callables: [],\n  locale: enUS,\n  hasNewModule: false\n}\n\n\nfunction runCallableApp(state = initialState, action) {\n  switch (action.type) {\n    case 'updateCallables':\n      return Object.assign({}, state, {\n        callables: action.callables\n      })\n    case 'setLocale':\n      return Object.assign({}, state, {\n        locale: action.locale\n      })\n    case 'changeModuleStatus':\n      return Object.assign({}, state, {\n        hasNewModule: action.hasNew\n      })\n    default:\n      return state\n  }\n}\n\n\nexport default runCallableApp\n","import React, { Component } from 'react';\nimport { HashRouter, Route, Link, Switch } from 'react-router-dom';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { List, Form, Input, Button, message, DatePicker, TimePicker, Modal, Layout, Radio, Divider, PageHeader, InputNumber, ConfigProvider, Row, Col } from 'antd';\nimport enUS from 'antd/es/locale/en_US';\nimport zhCN from 'antd/es/locale/zh_CN';\nimport axios from 'axios';\nimport moment, { locales } from 'moment';\nimport 'moment/locale/zh-cn';\nimport './App.css';\n\nimport { updateCallables, setLocale, changeModuleStatus } from './reducers'\n\n\nconst { Header, Content, Footer } = Layout;\n\n\nclass Callables extends Component {\n\n  componentDidMount() {\n    const { setCallables } = this.props\n\n    axios.get('callable')\n      .then(response => {\n        setCallables(response.data)\n      });\n\n  }\n\n  render() {\n    return (\n      <List\n        itemLayout=\"horizontal\"\n        dataSource={this.props.callables}\n        renderItem={item => (\n          <List.Item>\n            <List.Item.Meta\n              title={<Link to={`/callable/${item.callable_name}`}>{item.callable_name}</Link>}\n              description={item.title}\n            />\n          </List.Item>\n        )}\n      />\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    callables: state.callables\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return bindActionCreators({\n    setCallables: updateCallables\n  }, dispatch)\n}\n\nconst ReduxCallables = connect(mapStateToProps, mapDispatchToProps)(Callables)\n\nclass CallableForm extends React.Component {\n\n  constructor(props) {\n    super(props)\n    const { callables } = this.props\n\n    this.state = {\n      visible: false,\n      response: null,\n      callables: callables,\n    };\n  }\n\n  componentDidMount() {\n    const { setCallables } = this.props\n\n    axios.get('callable')\n      .then(response => {\n        setCallables(response.data)\n      });\n\n  }\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        axios.post(`callable/${this.props.match.params.name}`, values)\n          .then((response) => {\n            if (response.data.status === 'success') {\n              this.showSuccessModal(response.data.result)\n            } else {\n              this.showErrorModal(response.data.result)\n            }\n          });\n      }\n\n    });\n  };\n\n  showSuccessModal(result) {\n    Modal.success({\n      title: '执行成功',\n      content: result,\n    });\n  }\n\n  showErrorModal(result) {\n    Modal.error({\n      title: '执行失败',\n      content: result,\n    });\n  }\n\n  setCallable = () => {\n    let callableName = this.props.match.params.name;\n    var callableInfo\n    for (callableInfo of this.props.callables) {\n      if (callableInfo.callable_name === callableName) {\n        this.callable = callableInfo\n        break\n      }\n    }\n  };\n\n  buildFormItem = (parameter, index, array) => {\n    const { getFieldDecorator } = this.props.form;\n\n    let parameterName = parameter.name\n    let inputWidget\n    switch (parameter.annotation) {\n      case 'str':\n        inputWidget = <Input allowClear />;\n        break\n      case 'float':\n        inputWidget = <InputNumber allowClear />;\n        break\n      case 'int':\n        inputWidget = <InputNumber parser={value => Math.floor(value)} allowClear />;\n        break\n      case 'bool':\n        inputWidget = <Radio.Group buttonStyle=\"solid\">\n          <Radio.Button value={true}>True</Radio.Button>\n          <Radio.Button value={false}>False</Radio.Button>\n        </Radio.Group>;\n        break\n      case 'datetime':\n        inputWidget = <DatePicker showTime />;\n        break\n      case 'date':\n        inputWidget = <DatePicker />;\n        break\n      case 'time':\n        inputWidget = <TimePicker />;\n        break\n      case 'Enum':\n        inputWidget = <Radio.Group buttonStyle=\"solid\">\n          {\n            parameter.enum_values.map((value, index, array) =>\n              <Radio.Button value={value} key={index}>{value}</Radio.Button>\n            )\n          }\n        </Radio.Group>;\n        break\n      default:\n        inputWidget = <Input />;\n    }\n\n    return <Form.Item label={parameterName} key={index}>\n      {getFieldDecorator(parameterName, {\n        initialValue: this.buildDefaultValue(parameter),\n        rules: [{ required: parameter['required'], message: `请输入${parameterName}!` }],\n      })(inputWidget)}\n    </Form.Item>\n  }\n\n  buildDefaultValue = parameter => {\n    if (parameter.annotation === 'time' && parameter.default) {\n      return moment(parameter.default, 'HH:mm:ss')\n    }\n    else if (parameter.annotation === 'date' && parameter.default) {\n      return moment(parameter.default, '\"YYYY-MM-DD\"')\n    }\n    else if (parameter.annotation === 'datetime' && parameter.default) {\n      return moment(parameter.default, '\"YYYY-MM-DDTHH:mm:ss\"')\n    }\n    else {\n      return parameter.default\n    }\n  }\n\n  render() {\n    this.setCallable()\n\n    return (\n      <PageHeader\n        style={{\n          border: '1px solid rgb(235, 237, 240)',\n        }}\n        onBack={() => this.props.history.push('/')}\n        title=\"功能列表\"\n      >\n        <Form layout=\"vertical\" onSubmit={this.handleSubmit}>\n          <Divider>{this.callable ? this.callable.callable_name : ''}</Divider>\n          <pre>{this.callable && this.callable.doc ? this.callable.doc : '没有文档'}</pre>\n          {\n            this.callable && this.callable.parameters.length ? <Divider>参数填写</Divider> : []\n          }\n\n          {\n            this.callable ? this.callable.parameters.map(this.buildFormItem) : []\n          }\n          <Form.Item wrapperCol={{ span: 24}}>\n            <Button type=\"primary\" htmlType=\"submit\" block>\n              运行\n            </Button>\n          </Form.Item>\n        </Form>\n      </PageHeader>\n    );\n  }\n}\n\nconst WrappedCallableForm = Form.create({ name: 'callablForm' })(CallableForm);\n\nconst mapStateToFormProps = state => {\n  return {\n    callables: state.callables\n  }\n}\n\nconst ReduxWrappedCallableForm = connect(mapStateToFormProps, mapDispatchToProps)(WrappedCallableForm)\n\n\nclass LanguageSelector extends Component {\n\n  getLocaleText = locale => {\n    if (locale === enUS) {\n      return 'English'\n    } else if (locale === zhCN){\n      return '中文'\n    }\n  }\n\n  state = {\n    localeText: this.getLocaleText(this.props.locale)\n  }\n\n  componentDidMount() {\n    const { setLocale, locale } = this.props\n\n    axios.get('locale')\n      .then(response => {\n        if (response.data.locale === locale.locale) {\n          return\n        }\n\n        if (response.data.locale === 'en') {\n          setLocale(enUS)\n        } else {\n          setLocale(zhCN)\n        }\n      });\n\n  }\n\n  onChangeLocale = e => {\n    const { setLocale, locale } = this.props\n    \n    let newLocale = null\n    if (locale === enUS) {\n      newLocale = zhCN\n    } else if (locale === zhCN) {\n      newLocale = enUS\n    }\n\n    axios.post('locale', { locale: newLocale.locale })\n\n    setLocale(newLocale);\n    this.setState({localeText: this.getLocaleText(newLocale)})\n\n    if (newLocale === enUS) {\n      moment.locale('en');\n    } else {\n      moment.locale('zh-cn');\n    }\n  };\n\n  render() {\n    return (\n      <Button onClick={this.onChangeLocale}>\n        {this.state.localeText}\n      </Button>\n    )\n  }\n}\n\n\nconst mapStateLocaleToProps = state => {\n  return {\n    locale: state.locale\n  }\n}\n\n\nconst mapDispatchLocaleToProps = dispatch => {\n  return bindActionCreators({\n    setLocale: setLocale\n  }, dispatch)\n}\n\n\nconst ReduxLanguageSelector = connect(mapStateLocaleToProps, mapDispatchLocaleToProps)(LanguageSelector)\n\n\nclass ModuleReloader extends Component {\n\n  state = {\n    loading: false,\n  }\n\n  reloadModule = e => {\n    const { updateCallables } = this.props\n    this.setState({loading: true})\n    axios.post('reload-module')\n\n    axios.get('callable')\n      .then(response => {\n        updateCallables(response.data)\n      });\n    this.setState({loading: false})\n    message.success('更新成功', 1);\n  }\n\n  queryNewModule = () => {\n    const { hasNewModule, changeModuleStatus } = this.props;\n\n    axios.get('module-status')\n      .then(response => {\n        if (response.data.has_new === hasNewModule) {\n          return\n        }\n        if (response.data.has_new) {\n          message.info('模块有更新！', 1);\n        }\n        changeModuleStatus(response.data.has_new)\n      });\n  }\n\n  tick() {\n    this.setState((prevState) => ({\n      secondsElapsed: prevState.secondsElapsed + 1\n    }));\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(() => this.queryNewModule(), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    return (\n      <Button\n        disabled={!this.props.hasNewModule}\n        loading={this.state.loading}\n        style={{ display: 'inline-block' }}\n        onClick={this.reloadModule}\n      >\n      Reload Module\n      </Button>\n    )\n  }\n}\n\n\nconst mapModuleStateToProps = state => {\n  return {\n    hasNewModule: state.hasNewModule\n  }\n}\n\n\nconst mapchangeModuleStatusToProps = dispatch => {\n  return bindActionCreators({\n    changeModuleStatus: changeModuleStatus,\n    updateCallables: updateCallables\n  }, dispatch)\n}\n\n\nconst ReduxModuleReloader = connect(mapModuleStateToProps, mapchangeModuleStatusToProps)(ModuleReloader)\n\n\nclass App extends Component {\n\n  componentDidMount() {\n    document.title = \"Touch-Callable\"\n  }\n\n  render() {\n    const { locale } = this.props;\n    return (\n      <ConfigProvider locale={locale}>\n        <Layout className=\"layout\" style={{ minHeight: '10000px' }} key={locale ? locale.locale : 'en' /* Have to refresh for production environment */}>\n          <Header>\n            <Row>\n              <Col span={8}><p style={{ color: 'white', display: 'inline-block' }}>Touch Callable</p></Col>\n              <Col span={8} push={5}><ReduxModuleReloader /></Col>\n              <Col span={8}><ReduxLanguageSelector /></Col>\n            </Row>\n          </Header>\n          <Content style={{ margin: '0 auto', width: '700px' }}>\n            <HashRouter>\n              <Switch>\n                <Route exact path='/' component={ReduxCallables} />\n                <Route path='/callable/:name' component={ReduxWrappedCallableForm} />\n              </Switch>\n            </HashRouter>\n          </Content>\n          <Footer style={{ textAlign: 'center' }}>Touch Callable</Footer>\n        </Layout>\n      </ConfigProvider >\n    )\n  }\n}\n\nconst ReduxApp = connect(mapStateLocaleToProps)(App)\n\nexport default ReduxApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport ReduxApp from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\n\nimport runCallableApp from './reducers'\n\n\nlet store = createStore(\n  runCallableApp,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__({ trace: true, traceLimit: 25 }));\n\nReactDOM.render(\n  <Provider store={store}>\n    <ReduxApp />\n  </Provider>, \n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}