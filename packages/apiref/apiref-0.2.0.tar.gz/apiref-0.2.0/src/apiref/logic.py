# Copyright 2019 Mateusz Klos
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
""" Core logic for apiref library. """
from collections import OrderedDict
from typing import Any, Dict, Set, Tuple, Union

from marshmallow import Schema

from . import types, util


SpecDict = Dict[Any, Any]


def spec_for_route(view_fn):
    """ Generate OpenAPI/Swagger spec from the given view function*.

    Route meta is generated by the decorators and saved on the view function.
    This function can be used to generate an OpenAPI spec out of that meta
    object.

    Example:

        >>> import apiref
        >>> from marshmallow import Schema, fields
        >>>
        >>> class FakeSchema(Schema):
        ...     value = fields.Int()
        >>>
        >>>
        >>> @apiref.payload(FakeSchema())
        ... @apiref.result(200, FakeSchema(), "Fake result")
        ... def fake_route(payload) -> Dict[str, Any]:
        ...     ''' Fake endpoint for testing. '''
        ...     return {'value': '32'}
        >>>
        >>>
        >>> spec, schemas = apiref.spec_for_route(fake_route)
        >>>
        >>> spec['summary']
        'Fake endpoint for testing.'
        >>> spec['requestBody'].keys()
        dict_keys(['description', 'content'])
        >>> spec['requestBody']['content']
        {'application/json': {'schema': 'FakeSchema'}}
        >>> spec['responses'][200]['description']
        'Fake result'
        >>> spec['responses'][200]['content']
        {'application/json': {'schema': 'FakeSchema'}}

    """
    meta = types.RouteMeta.load(view_fn)
    return spec_from_meta(meta)


def spec_from_meta(route_meta: types.RouteMeta) -> Tuple[SpecDict, Set[Schema]]:
    """ Generate OpenAPI/Swagger spec from the given *route_meta*.

    Route meta is generated by the decorators and saved on the view function.
    This function can be used to generate an OpenAPI spec out of that meta
    object.

    See:
        spec_for_route
    """
    spec = {}
    responses: Dict[Union[str, int], Any] = OrderedDict()
    schemas: Set[Schema] = set()   # List of all marshmallow schemas used.

    # Get response from route result.
    if route_meta.result:
        responses[route_meta.result.code] = route_meta.result.to_spec()
        if route_meta.result.schema:
            schemas.add(route_meta.result.schema)

    # Get remaining responses.
    for code, response in sorted(route_meta.responses.items(), key=lambda x: x[0]):
        responses[code] = response.to_spec()
        if response.schema:
            schemas.add(response.schema)

    # Get the expected request body definition.
    if route_meta.payload:
        spec['requestBody'] = route_meta.payload.to_spec()
        if route_meta.payload.schema:
            schemas.add(route_meta.payload.schema)

    # Only define those fields if there is any definition given.
    spec.update(util.dyn_dict([
        responses and ('responses', responses),
        route_meta.summary and ('summary', route_meta.summary),
        route_meta.description and ('description', route_meta.description),
        route_meta.tags and ('tags', route_meta.tags),
    ]))

    return spec, schemas
