#!/usr/bin/env python3
#
# Author:
#  Tamas Jos (@skelsec)
#
import io
import logging
from pypykatz.commons.common import *
from pypykatz.crypto.des import *
from pypykatz.crypto.aes import AESModeOfOperationCBC
from pypykatz.lsadecryptor.lsa_templates import *
from pypykatz.crypto.RC4 import RC4

class LsaDecryptor_NT5(PackageDecryptor):
	def __init__(self, reader, decryptor_template, sysinfo):
		super().__init__('LsaDecryptor', None, sysinfo, reader)
		self.decryptor_template = decryptor_template
		self.feedback = None
		self.feedback_offset = None
		self.des_key = None
		self.des_K = None
		self.random_key = None
		self.acquire_crypto_material()
		
	def acquire_crypto_material(self):
		self.log('Acquireing crypto stuff...')
		sigpos = self.find_signature()
		self.reader.move(sigpos)
		data = self.reader.peek(0x50)
		self.log('Memory looks like this around the signature\n%s' % hexdump(data, start = sigpos))
		
		for x in [self.decryptor_template.feedback_ptr_offset , self.decryptor_template.old_feedback_offset]:
			self.feedback_offset = x

			try:
				self.feedback = self.get_feedback(sigpos)
				self.log('Feedback bytes:\n%s' % hexdump(self.feedback, start = 0))

				
				self.des_key = self.get_key(sigpos)				
				self.random_key = self.get_random(sigpos)

				#self.generate_K()


				#self.log('deskey bytes:\n%s' % hexdump(self.des_key, start = 0))
				self.log('randomkey bytes:\n%s' % hexdump(self.random_key, start = 0))
			except:
				import traceback
				traceback.print_exc()
				input()
			else:
				break

	def generate_K(self):
		#for x in self.des_key.desKey:
		#	print(bin(x[0]))
		#	print(bin(x[1]))
		#input('DES! %s' % self.des_key.desKey)
	
		res1 = []
		res2 = []
		for x in self.des_key.desKey:
			r1 = ''
			r2 = ''
			for i, t in enumerate(zip(x[0], x[1])):
				c1, c2 = t
				if i%2 == 0:
					r1 += bin(c1)[2:].ljust(8,'0')[:6] + bin(c2)[2:].ljust(8,'0')[:6]
				else:
					r2 += bin(c1)[2:].ljust(8,'0')[:6] + bin(c2)[2:].ljust(8,'0')[:6]

			res1.append(r1)
			res2.append(r2)
		print(res1)
		print(res2)
		input()

			
		K = []
		for x in zip(res1, res2):
			K.append( [int(a) for a in x[0]] +  [int(a) for a in x[1]])
		
		self.des_K = K
		#print(K)
		#input('DES!')

	#def get_feedback(self, sigpos):
	#	if self.decryptor_template.arch == 'x86':
	#		ptr_feedback = self.reader.get_ptr_with_offset(sigpos + self.feedback_offset)
	#		self.reader.move(ptr_feedback)
	#	else:
	#		self.reader.move(sigpos + self.feedback_offset)
	#		offset = LONG(self.reader).value
	#		newpos = sigpos + self.feedback_offset + 4 + offset
	#		self.reader.move(newpos)
	#	return self.reader.read(8)

	def get_feedback(self, sigpos):
		if self.decryptor_template.arch == 'x86':
			new_ptr = self.reader.get_ptr_with_offset(sigpos + self.feedback_offset)
			self.reader.move(new_ptr)
			return self.reader.read(8)
		else:
			self.reader.move(sigpos + self.feedback_offset)
			offset = LONG(self.reader).value
			newpos = sigpos + self.feedback_offset + 4 + offset
			self.reader.move(newpos)
			return self.reader.read(8)

	def get_key(self, sigpos):
		#self.reader.move(sigpos + self.decryptor_template.DESXKey_ptr)
		#p = self.reader.read_uint()
		#self.reader.move(p)
		#
		#return b'\x00'
		#self.reader.move(sigpos + self.decryptor_template.desx_key_ptr_offset)

		if self.decryptor_template.arch == 'x86':
			new_ptr = self.reader.get_ptr_with_offset(sigpos + self.decryptor_template.desx_key_ptr_offset)
			self.reader.move(new_ptr)
			des_key_ptr = self.decryptor_template.key_struct_ptr(self.reader)
			des_key = des_key_ptr.read(self.reader)
		else:
			self.reader.move(sigpos + self.decryptor_template.desx_key_ptr_offset)
			offset = LONG(self.reader).value
			newpos = sigpos + self.decryptor_template.desx_key_ptr_offset + 4 + offset
			self.reader.move(newpos)
			des_key_ptr = self.decryptor_template.key_struct_ptr(self.reader)
			des_key = des_key_ptr.read(self.reader)

		return des_key
	
	def get_random(self, sigpos):
		if self.decryptor_template.arch == 'x86':
			random_key_ptr = self.reader.get_ptr_with_offset(sigpos + self.decryptor_template.randomkey_ptr_offset)
			random_key_ptr = self.reader.get_ptr_with_offset(random_key_ptr)
			self.reader.move(random_key_ptr)
		else:
			self.reader.move(sigpos + self.decryptor_template.randomkey_ptr_offset)
			offset = LONG(self.reader).value
			newpos = sigpos + self.decryptor_template.desx_key_ptr_offset + 4 + offset
			self.reader.move(newpos)
		
		return self.reader.read(256)

	def find_signature(self):
		self.log('Looking for main struct signature in memory...')
		fl = self.reader.find_in_module('lsasrv.dll', self.decryptor_template.signature)
		if len(fl) == 0:
			logging.warning('signature not found! %s' % self.decryptor_template.signature.hex())
			raise Exception('LSA signature not found!')
			
		self.log('Found candidates on the following positions: %s' % ' '.join(hex(x) for x in fl))
		self.log('Selecting first one @ 0x%08x' % fl[0])
		return fl[0]

	def decrypt(self, encrypted):
		# TODO: NT version specific, move from here in subclasses.
		input('Decrypting! %s' %encrypted)
		cleartext = b''
		size = len(encrypted)
		if size:
			if (size % 8) != 0:
				ctx = RC4(self.random_key)
				cleartext = ctx.decrypt(encrypted)
			else:
				#print('Decryption not implemented!')
				cleartext = self.__desx_decrypt(encrypted)
				#raise Exception('Not implemented!')

		print(hexdump(encrypted))
		print('')
		print(hexdump(cleartext))
		input()
		return cleartext

	def dump(self):
		self.log('Recovered LSA encryption keys\n')
		self.log('Feedback ({}): {}'.format(len(self.feedback), self.feedback.hex()))
		self.log('Random Key ({}): {}'.format(len(self.random_key), self.random_key.hex()))
		self.log('DESX Key ')

	def __desx_decrypt_internal_block(self, chunk):
		#ctx = des(b'\x1E'*8)
		#ctx.replace_K(self.des_K)
		chunk = xor(chunk, self.des_key.outputWhitening)
		chunk = self.__desx_internal_block(chunk, encrypt = False)
		chunk = xor(chunk, self.des_key.inputWhitening)
		return chunk

	def __desx_decrypt(self, data):
		res = b''
		i = 0
		
		IV = self.feedback
		while i != len(data):
			chunk = self.__desx_decrypt_internal_block(data[i:i+8])
			res += xor(chunk, IV)
			IV = data[i:i+8]
			i += 8

		return res

	def __desx_internal_block(self, data, encrypt = False):
		L = int.from_bytes(data[4:], 'little', signed = False)
		R = int.from_bytes(data[:4], 'little', signed = False)

		R = rol32(R, 4)
		Ta = (L ^ R) & 0xf0f0f0f0
		L = L ^ Ta
		R = R ^ Ta
		L = rol32(L, 20)
		Ta = (L ^ R) & 0xfff0000f
		L = L ^ Ta
		R = R ^ Ta
		L = rol32(L, 14)
		Ta = (L ^ R) & 0x33333333
		L = L ^ Ta
		R = R ^ Ta
		R = rol32(R, 22)
		Ta = (L ^ R) & 0x03fc03fc
		L = L ^ Ta
		R = R ^ Ta
		R = rol32(R, 9)
		Ta = (L ^ R) & 0xaaaaaaaa
		L ^= L ^ Ta
		R ^= R ^ Ta
		L = rol32(L, 1)

		input(hex(L))
		input(hex(R))

		if encrypt:
			for i in range(0,14, 2):
				L, R = F(L, R, self.des_key.desKey[i])
				R, L = F(R, L, self.des_key.desKey[i +1])

		else:
			for i in range(14, 0, -2):
				print(i)
				L, R = F(L, R, self.des_key.desKey[i + 1])
				R, L = F(R, L, self.des_key.desKey[i])

		R = ror32(R, 1)
		Ta = (L ^ R) & 0xaaaaaaaa
		L = L ^ Ta
		R = R ^ Ta
		L = ror32(L, 9)
		Ta = (L ^ R) & 0x03fc03fc
		L ^= Ta
		R ^= Ta
		L = ror32(L, 22)
		Ta = (L ^ R) & 0x33333333
		L ^= Ta
		R ^= Ta
		R = ror32(R, 14)
		Ta = (L ^ R) & 0xfff0000f
		L ^= Ta
		R ^= Ta
		R = ror32(R, 20)
		Ta = (L ^ R) & 0xf0f0f0f0
		L ^= Ta
		R ^= Ta
		L = ror32(L, 4)

		return L.to_bytes(4, 'little', signed = False) + R.to_bytes(4, 'little', signed = False)


SymCryptDesSpbox = [
	[
		0x02,0x08,0x08,0x00, 0x00,0x08,0x00,0x00, 0x02,0x00,0x00,0x02, 0x02,0x08,0x08,0x02, 0x02,0x00,0x00,0x00, 0x00,0x08,0x08,0x02, 0x00,0x08,0x00,0x02, 0x02,0x00,0x00,0x02, 0x00,0x08,0x08,0x02, 0x02,0x08,0x08,0x00, 0x02,0x08,0x00,0x00, 0x00,0x00,0x08,0x02, 0x02,0x00,0x08,0x02, 0x02,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, 0x00,0x08,0x00,0x02,
		0x00,0x08,0x00,0x00, 0x00,0x00,0x00,0x02, 0x02,0x00,0x08,0x00, 0x00,0x08,0x08,0x00, 0x02,0x08,0x08,0x02, 0x02,0x08,0x00,0x00, 0x00,0x00,0x08,0x02, 0x02,0x00,0x08,0x00, 0x00,0x00,0x00,0x02, 0x00,0x00,0x08,0x00, 0x00,0x08,0x08,0x00, 0x02,0x08,0x00,0x02, 0x00,0x00,0x08,0x00, 0x02,0x00,0x08,0x02, 0x02,0x08,0x00,0x02, 0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00, 0x02,0x08,0x08,0x02, 0x02,0x00,0x08,0x00, 0x00,0x08,0x00,0x02, 0x02,0x08,0x08,0x00, 0x00,0x08,0x00,0x00, 0x00,0x00,0x08,0x02, 0x02,0x00,0x08,0x00, 0x02,0x08,0x00,0x02, 0x00,0x00,0x08,0x00, 0x00,0x08,0x08,0x00, 0x02,0x00,0x00,0x02, 0x00,0x08,0x08,0x02, 0x00,0x00,0x00,0x02, 0x02,0x00,0x00,0x02, 0x02,0x08,0x00,0x00,
		0x02,0x08,0x08,0x02, 0x00,0x08,0x08,0x00, 0x02,0x08,0x00,0x00, 0x02,0x00,0x08,0x02, 0x02,0x00,0x00,0x00, 0x00,0x00,0x08,0x02, 0x00,0x08,0x00,0x02, 0x00,0x00,0x00,0x00, 0x00,0x08,0x00,0x00, 0x02,0x00,0x00,0x00, 0x02,0x00,0x08,0x02, 0x02,0x08,0x08,0x00, 0x00,0x00,0x00,0x02, 0x02,0x08,0x00,0x02, 0x00,0x00,0x08,0x00, 0x00,0x08,0x08,0x02],
	[	0x40,0x10,0x80,0x10, 0x00,0x00,0x00,0x00, 0x00,0x10,0x80,0x00, 0x40,0x10,0x00,0x00, 0x40,0x00,0x00,0x10, 0x00,0x00,0x80,0x10, 0x40,0x00,0x80,0x00, 0x00,0x10,0x80,0x00, 0x00,0x00,0x80,0x00, 0x40,0x10,0x00,0x10, 0x00,0x00,0x00,0x10, 0x40,0x00,0x80,0x00, 0x00,0x10,0x00,0x10, 0x40,0x10,0x80,0x00, 0x40,0x10,0x00,0x00, 0x00,0x00,0x00,0x10,
		0x00,0x10,0x00,0x00, 0x40,0x00,0x80,0x10, 0x40,0x10,0x00,0x10, 0x00,0x00,0x80,0x00, 0x00,0x10,0x80,0x10, 0x40,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, 0x00,0x10,0x00,0x10, 0x40,0x00,0x80,0x10, 0x00,0x10,0x80,0x10, 0x40,0x10,0x80,0x00, 0x40,0x00,0x00,0x10, 0x40,0x00,0x00,0x00, 0x00,0x10,0x00,0x00, 0x00,0x00,0x80,0x10, 0x40,0x10,0x80,0x10,
		0x00,0x10,0x00,0x10, 0x40,0x10,0x80,0x00, 0x40,0x00,0x80,0x00, 0x00,0x10,0x80,0x10, 0x40,0x10,0x80,0x10, 0x00,0x10,0x00,0x10, 0x40,0x00,0x00,0x10, 0x00,0x00,0x00,0x00, 0x40,0x00,0x00,0x00, 0x00,0x00,0x80,0x10, 0x00,0x10,0x00,0x00, 0x40,0x10,0x00,0x10, 0x00,0x00,0x80,0x00, 0x40,0x00,0x00,0x00, 0x00,0x10,0x80,0x10, 0x40,0x00,0x80,0x10,
		0x40,0x10,0x80,0x00, 0x00,0x00,0x80,0x00, 0x00,0x00,0x00,0x00, 0x40,0x00,0x00,0x10, 0x00,0x00,0x00,0x10, 0x40,0x10,0x80,0x10, 0x00,0x10,0x80,0x00, 0x40,0x10,0x00,0x00, 0x40,0x10,0x00,0x10, 0x00,0x10,0x00,0x00, 0x00,0x00,0x80,0x10, 0x40,0x00,0x80,0x00, 0x40,0x00,0x80,0x10, 0x00,0x00,0x00,0x10, 0x40,0x10,0x00,0x00, 0x00,0x10,0x80,0x00,],
	[	0x04,0x00,0x00,0x01, 0x04,0x04,0x01,0x00, 0x00,0x00,0x01,0x00, 0x04,0x00,0x01,0x01, 0x00,0x04,0x00,0x01, 0x04,0x00,0x00,0x00, 0x04,0x00,0x01,0x01, 0x00,0x04,0x01,0x00, 0x04,0x00,0x01,0x00, 0x00,0x04,0x00,0x00, 0x04,0x04,0x00,0x00, 0x00,0x00,0x00,0x01, 0x04,0x04,0x01,0x01, 0x00,0x00,0x01,0x01, 0x00,0x00,0x00,0x01, 0x04,0x04,0x00,0x01,
		0x00,0x00,0x00,0x00, 0x00,0x04,0x00,0x01, 0x04,0x04,0x01,0x00, 0x00,0x00,0x01,0x00, 0x00,0x00,0x01,0x01, 0x04,0x04,0x01,0x01, 0x00,0x04,0x00,0x00, 0x04,0x00,0x00,0x01, 0x04,0x04,0x00,0x01, 0x04,0x00,0x01,0x00, 0x00,0x04,0x01,0x01, 0x04,0x04,0x00,0x00, 0x00,0x04,0x01,0x00, 0x00,0x00,0x00,0x00, 0x04,0x00,0x00,0x00, 0x00,0x04,0x01,0x01,
		0x04,0x04,0x01,0x00, 0x00,0x00,0x01,0x00, 0x00,0x00,0x00,0x01, 0x00,0x04,0x00,0x00, 0x00,0x00,0x01,0x01, 0x00,0x04,0x00,0x01, 0x04,0x04,0x00,0x00, 0x04,0x00,0x01,0x01, 0x00,0x00,0x00,0x00, 0x04,0x04,0x01,0x00, 0x00,0x04,0x01,0x00, 0x04,0x04,0x00,0x01, 0x00,0x04,0x00,0x01, 0x04,0x00,0x00,0x00, 0x04,0x04,0x01,0x01, 0x00,0x00,0x00,0x01,
		0x00,0x04,0x01,0x01, 0x04,0x00,0x00,0x01, 0x04,0x00,0x00,0x00, 0x04,0x04,0x01,0x01, 0x00,0x04,0x00,0x00, 0x04,0x00,0x01,0x00, 0x04,0x00,0x01,0x01, 0x00,0x04,0x01,0x00, 0x04,0x00,0x01,0x00, 0x00,0x00,0x00,0x00, 0x04,0x04,0x00,0x01, 0x00,0x00,0x01,0x01, 0x04,0x00,0x00,0x01, 0x00,0x04,0x01,0x01, 0x00,0x00,0x01,0x00, 0x04,0x04,0x00,0x00,],
	[	0x00,0x40,0x10,0x08, 0x10,0x00,0x10,0x00, 0x00,0x00,0x00,0x08, 0x10,0x40,0x10,0x08, 0x00,0x00,0x00,0x00, 0x10,0x40,0x00,0x00, 0x10,0x00,0x10,0x08, 0x00,0x40,0x00,0x08, 0x10,0x40,0x10,0x00, 0x10,0x00,0x00,0x08, 0x10,0x00,0x00,0x00, 0x00,0x00,0x10,0x08, 0x10,0x00,0x00,0x08, 0x00,0x40,0x10,0x08, 0x00,0x40,0x00,0x00, 0x10,0x00,0x00,0x00,
		0x10,0x40,0x00,0x08, 0x00,0x40,0x10,0x00, 0x00,0x00,0x10,0x00, 0x00,0x00,0x00,0x08, 0x00,0x40,0x10,0x00, 0x10,0x00,0x10,0x08, 0x10,0x40,0x00,0x00, 0x00,0x00,0x10,0x00, 0x00,0x00,0x10,0x08, 0x00,0x00,0x00,0x00, 0x00,0x40,0x00,0x08, 0x10,0x40,0x10,0x00, 0x10,0x00,0x10,0x00, 0x10,0x40,0x00,0x08, 0x10,0x40,0x10,0x08, 0x00,0x40,0x00,0x00,
		0x10,0x40,0x00,0x08, 0x00,0x00,0x10,0x08, 0x00,0x40,0x00,0x00, 0x10,0x00,0x00,0x08, 0x00,0x40,0x10,0x00, 0x10,0x00,0x10,0x00, 0x00,0x00,0x00,0x08, 0x10,0x40,0x00,0x00, 0x10,0x00,0x10,0x08, 0x00,0x00,0x00,0x00, 0x00,0x00,0x10,0x00, 0x00,0x40,0x00,0x08, 0x00,0x00,0x00,0x00, 0x10,0x40,0x00,0x08, 0x10,0x40,0x10,0x00, 0x00,0x00,0x10,0x00,
		0x10,0x00,0x00,0x00, 0x10,0x40,0x10,0x08, 0x00,0x40,0x10,0x08, 0x00,0x40,0x00,0x00, 0x10,0x40,0x10,0x08, 0x00,0x00,0x00,0x08, 0x10,0x00,0x10,0x00, 0x00,0x40,0x10,0x08, 0x00,0x40,0x00,0x08, 0x00,0x40,0x10,0x00, 0x10,0x40,0x00,0x00, 0x10,0x00,0x10,0x08, 0x00,0x00,0x10,0x08, 0x10,0x00,0x00,0x00, 0x10,0x00,0x00,0x08, 0x10,0x40,0x10,0x00,],
	[	0x08,0x00,0x00,0x00, 0x00,0x01,0x00,0x00, 0x00,0x00,0x04,0x00, 0x08,0x01,0x04,0x20, 0x08,0x01,0x00,0x20, 0x08,0x00,0x04,0x00, 0x00,0x01,0x04,0x20, 0x08,0x01,0x00,0x00, 0x00,0x01,0x00,0x00, 0x00,0x00,0x00,0x20, 0x08,0x00,0x00,0x20, 0x00,0x01,0x04,0x00, 0x08,0x00,0x04,0x20, 0x08,0x01,0x00,0x20, 0x08,0x01,0x04,0x00, 0x00,0x00,0x00,0x00,
		0x00,0x01,0x04,0x00, 0x08,0x00,0x00,0x00, 0x00,0x01,0x00,0x20, 0x00,0x00,0x04,0x20, 0x08,0x00,0x04,0x00, 0x00,0x01,0x04,0x20, 0x00,0x00,0x00,0x00, 0x08,0x00,0x00,0x20, 0x00,0x00,0x00,0x20, 0x08,0x00,0x04,0x20, 0x08,0x01,0x04,0x20, 0x00,0x01,0x00,0x20, 0x08,0x01,0x00,0x00, 0x00,0x00,0x04,0x00, 0x00,0x00,0x04,0x20, 0x08,0x01,0x04,0x00,
		0x08,0x01,0x04,0x00, 0x08,0x00,0x04,0x20, 0x00,0x01,0x00,0x20, 0x08,0x01,0x00,0x00, 0x00,0x01,0x00,0x00, 0x00,0x00,0x00,0x20, 0x08,0x00,0x00,0x20, 0x08,0x00,0x04,0x00, 0x08,0x00,0x00,0x00, 0x00,0x01,0x04,0x00, 0x08,0x01,0x04,0x20, 0x00,0x00,0x00,0x00, 0x00,0x01,0x04,0x20, 0x08,0x00,0x00,0x00, 0x00,0x00,0x04,0x00, 0x00,0x01,0x00,0x20,
		0x08,0x00,0x04,0x20, 0x00,0x00,0x04,0x00, 0x00,0x00,0x00,0x00, 0x08,0x01,0x04,0x20, 0x08,0x01,0x00,0x20, 0x08,0x01,0x04,0x00, 0x00,0x00,0x04,0x20, 0x00,0x01,0x00,0x00, 0x00,0x01,0x04,0x00, 0x08,0x01,0x00,0x20, 0x08,0x00,0x04,0x00, 0x00,0x00,0x04,0x20, 0x00,0x00,0x00,0x20, 0x00,0x01,0x04,0x20, 0x08,0x01,0x00,0x00, 0x08,0x00,0x00,0x20,	],
	[	0x80,0x00,0x00,0x40, 0x00,0x20,0x00,0x40, 0x00,0x00,0x00,0x00, 0x80,0x20,0x20,0x00, 0x00,0x20,0x00,0x40, 0x00,0x00,0x20,0x00, 0x80,0x00,0x20,0x40, 0x00,0x20,0x00,0x00, 0x00,0x00,0x20,0x40, 0x80,0x20,0x20,0x40, 0x00,0x20,0x20,0x00, 0x80,0x00,0x00,0x00, 0x80,0x00,0x20,0x00, 0x80,0x00,0x00,0x40, 0x80,0x20,0x00,0x00, 0x00,0x20,0x20,0x40,
		0x00,0x20,0x00,0x00, 0x80,0x00,0x20,0x40, 0x80,0x20,0x00,0x40, 0x00,0x00,0x00,0x00, 0x00,0x00,0x20,0x00, 0x00,0x00,0x00,0x40, 0x80,0x20,0x20,0x00, 0x80,0x20,0x00,0x40, 0x80,0x20,0x20,0x40, 0x80,0x20,0x00,0x00, 0x80,0x00,0x00,0x00, 0x00,0x00,0x20,0x40, 0x00,0x00,0x00,0x40, 0x00,0x20,0x20,0x00, 0x00,0x20,0x20,0x40, 0x80,0x00,0x20,0x00,
		0x00,0x00,0x20,0x40, 0x80,0x00,0x00,0x00, 0x80,0x00,0x20,0x00, 0x00,0x20,0x20,0x40, 0x80,0x20,0x20,0x00, 0x00,0x20,0x00,0x40, 0x00,0x00,0x00,0x00, 0x80,0x00,0x20,0x00, 0x80,0x00,0x00,0x00, 0x00,0x00,0x20,0x00, 0x80,0x20,0x00,0x40, 0x00,0x20,0x00,0x00, 0x00,0x20,0x00,0x40, 0x80,0x20,0x20,0x40, 0x00,0x20,0x20,0x00, 0x00,0x00,0x00,0x40,
		0x80,0x20,0x20,0x40, 0x00,0x20,0x20,0x00, 0x00,0x20,0x00,0x00, 0x80,0x00,0x20,0x40, 0x80,0x00,0x00,0x40, 0x80,0x20,0x00,0x00, 0x00,0x20,0x20,0x40, 0x00,0x00,0x00,0x00, 0x00,0x00,0x20,0x00, 0x80,0x00,0x00,0x40, 0x80,0x00,0x20,0x40, 0x80,0x20,0x20,0x00, 0x80,0x20,0x00,0x00, 0x00,0x00,0x20,0x40, 0x00,0x00,0x00,0x40, 0x80,0x20,0x00,0x40,	],
	[	0x00,0x00,0x40,0x00, 0x00,0x00,0x02,0x00, 0x01,0x00,0x02,0x00, 0x01,0x00,0x00,0x04, 0x01,0x00,0x42,0x04, 0x00,0x00,0x40,0x04, 0x00,0x00,0x42,0x00, 0x00,0x00,0x00,0x00, 0x01,0x00,0x00,0x00, 0x01,0x00,0x02,0x04, 0x00,0x00,0x02,0x04, 0x01,0x00,0x40,0x00, 0x00,0x00,0x00,0x04, 0x01,0x00,0x42,0x00, 0x01,0x00,0x40,0x00, 0x00,0x00,0x02,0x04,
		0x01,0x00,0x02,0x04, 0x00,0x00,0x40,0x00, 0x00,0x00,0x40,0x04, 0x01,0x00,0x42,0x04, 0x00,0x00,0x00,0x00, 0x01,0x00,0x02,0x00, 0x01,0x00,0x00,0x04, 0x00,0x00,0x42,0x00, 0x01,0x00,0x40,0x04, 0x00,0x00,0x42,0x04, 0x01,0x00,0x42,0x00, 0x00,0x00,0x00,0x04, 0x00,0x00,0x42,0x04, 0x01,0x00,0x40,0x04, 0x00,0x00,0x02,0x00, 0x01,0x00,0x00,0x00,
		0x00,0x00,0x42,0x04, 0x01,0x00,0x40,0x00, 0x01,0x00,0x40,0x04, 0x00,0x00,0x02,0x04, 0x00,0x00,0x40,0x00, 0x00,0x00,0x02,0x00, 0x01,0x00,0x00,0x00, 0x01,0x00,0x40,0x04, 0x01,0x00,0x02,0x04, 0x00,0x00,0x42,0x04, 0x00,0x00,0x42,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00,0x02,0x00, 0x01,0x00,0x00,0x04, 0x00,0x00,0x00,0x04, 0x01,0x00,0x02,0x00,
		0x00,0x00,0x00,0x00, 0x01,0x00,0x02,0x04, 0x01,0x00,0x02,0x00, 0x00,0x00,0x42,0x00, 0x00,0x00,0x02,0x04, 0x00,0x00,0x40,0x00, 0x01,0x00,0x42,0x04, 0x01,0x00,0x00,0x00, 0x01,0x00,0x42,0x00, 0x00,0x00,0x00,0x04, 0x00,0x00,0x40,0x04, 0x01,0x00,0x42,0x04, 0x01,0x00,0x00,0x04, 0x01,0x00,0x42,0x00, 0x01,0x00,0x40,0x00, 0x00,0x00,0x40,0x04,	],
	[	0x20,0x80,0x00,0x80, 0x20,0x82,0x00,0x00, 0x00,0x02,0x00,0x80, 0x00,0x00,0x00,0x00, 0x20,0x02,0x00,0x00, 0x00,0x80,0x00,0x80, 0x20,0x80,0x00,0x00, 0x20,0x82,0x00,0x80, 0x00,0x00,0x00,0x80, 0x20,0x00,0x00,0x00, 0x00,0x82,0x00,0x00, 0x00,0x02,0x00,0x80, 0x00,0x82,0x00,0x80, 0x20,0x02,0x00,0x80, 0x20,0x00,0x00,0x80, 0x20,0x80,0x00,0x00,
		0x00,0x02,0x00,0x00, 0x00,0x82,0x00,0x80, 0x00,0x80,0x00,0x80, 0x20,0x02,0x00,0x00, 0x20,0x82,0x00,0x80, 0x20,0x00,0x00,0x80, 0x00,0x00,0x00,0x00, 0x00,0x82,0x00,0x00, 0x20,0x00,0x00,0x00, 0x00,0x80,0x00,0x00, 0x20,0x02,0x00,0x80, 0x20,0x80,0x00,0x80, 0x00,0x80,0x00,0x00, 0x00,0x02,0x00,0x00, 0x20,0x82,0x00,0x00, 0x00,0x00,0x00,0x80,
		0x00,0x80,0x00,0x00, 0x00,0x02,0x00,0x00, 0x20,0x00,0x00,0x80, 0x20,0x82,0x00,0x80, 0x00,0x02,0x00,0x80, 0x20,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, 0x00,0x82,0x00,0x00, 0x20,0x80,0x00,0x80, 0x20,0x02,0x00,0x80, 0x20,0x02,0x00,0x00, 0x00,0x80,0x00,0x80, 0x20,0x82,0x00,0x00, 0x00,0x00,0x00,0x80, 0x00,0x80,0x00,0x80, 0x20,0x02,0x00,0x00,
		0x20,0x82,0x00,0x80, 0x00,0x80,0x00,0x00, 0x20,0x80,0x00,0x00, 0x20,0x00,0x00,0x80, 0x00,0x82,0x00,0x00, 0x00,0x02,0x00,0x80, 0x20,0x02,0x00,0x80, 0x20,0x80,0x00,0x00, 0x00,0x00,0x00,0x80, 0x20,0x82,0x00,0x00, 0x00,0x82,0x00,0x80, 0x00,0x00,0x00,0x00, 0x20,0x00,0x00,0x00, 0x20,0x80,0x00,0x80, 0x00,0x02,0x00,0x00, 0x00,0x82,0x00,0x80,	]

]

def F(L, R, keya):
	#input(hex(keya[0]))
	#input(hex(keya[1]))
	Ta = keya[0] ^ R
	Tb = keya[1] ^ R
	Tb = ror32(Tb, 4)
	#print(Ta)
	#print(Ta     & 0xfc)
	#input()
	L ^= SymCryptDesSpbox[0][ Ta     & 0xfc]
	L ^= SymCryptDesSpbox[1][ Tb     & 0xfc]
	#print(hex((Ta>> 8)& 0xfc))
	L ^= SymCryptDesSpbox[2][(Ta>> 8)& 0xfc]
	L ^= SymCryptDesSpbox[3][(Tb>> 8)& 0xfc]
	L ^= SymCryptDesSpbox[4][(Ta>>16)& 0xfc]
	L ^= SymCryptDesSpbox[5][(Tb>>16)& 0xfc]
	L ^= SymCryptDesSpbox[6][(Ta>>24)& 0xfc]
	L ^= SymCryptDesSpbox[7][(Tb>>24)& 0xfc]
	return L, R


def rol32(n, d):
	return (n << d)|(n >> (32 - d))

def ror32(n, d):
	return (n >> d)|(n << (32 - d)) & 0xFFFFFFFF
	

# https://github.com/markokr/skytools/blob/11afc5210a92d4a2ccf701e4f92138488c31a3cb/python/skytools/hashtext.py#L38
def xor(d1, d2):
	return bytes(a ^ b for (a, b) in zip(d1, d2))

