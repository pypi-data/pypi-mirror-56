"Main interface for ecs type defs"
from __future__ import annotations

from datetime import datetime
from typing import Dict, List
from typing_extensions import TypedDict


__all__ = (
    "ClientCreateClusterResponseclustersettingsTypeDef",
    "ClientCreateClusterResponseclusterstatisticsTypeDef",
    "ClientCreateClusterResponseclustertagsTypeDef",
    "ClientCreateClusterResponseclusterTypeDef",
    "ClientCreateClusterResponseTypeDef",
    "ClientCreateClustersettingsTypeDef",
    "ClientCreateClustertagsTypeDef",
    "ClientCreateServiceResponseservicedeploymentConfigurationTypeDef",
    "ClientCreateServiceResponseservicedeploymentControllerTypeDef",
    "ClientCreateServiceResponseservicedeploymentsnetworkConfigurationawsvpcConfigurationTypeDef",
    "ClientCreateServiceResponseservicedeploymentsnetworkConfigurationTypeDef",
    "ClientCreateServiceResponseservicedeploymentsTypeDef",
    "ClientCreateServiceResponseserviceeventsTypeDef",
    "ClientCreateServiceResponseserviceloadBalancersTypeDef",
    "ClientCreateServiceResponseservicenetworkConfigurationawsvpcConfigurationTypeDef",
    "ClientCreateServiceResponseservicenetworkConfigurationTypeDef",
    "ClientCreateServiceResponseserviceplacementConstraintsTypeDef",
    "ClientCreateServiceResponseserviceplacementStrategyTypeDef",
    "ClientCreateServiceResponseserviceserviceRegistriesTypeDef",
    "ClientCreateServiceResponseservicetagsTypeDef",
    "ClientCreateServiceResponseservicetaskSetsloadBalancersTypeDef",
    "ClientCreateServiceResponseservicetaskSetsnetworkConfigurationawsvpcConfigurationTypeDef",
    "ClientCreateServiceResponseservicetaskSetsnetworkConfigurationTypeDef",
    "ClientCreateServiceResponseservicetaskSetsscaleTypeDef",
    "ClientCreateServiceResponseservicetaskSetsserviceRegistriesTypeDef",
    "ClientCreateServiceResponseservicetaskSetsTypeDef",
    "ClientCreateServiceResponseserviceTypeDef",
    "ClientCreateServiceResponseTypeDef",
    "ClientCreateServicedeploymentConfigurationTypeDef",
    "ClientCreateServicedeploymentControllerTypeDef",
    "ClientCreateServiceloadBalancersTypeDef",
    "ClientCreateServicenetworkConfigurationawsvpcConfigurationTypeDef",
    "ClientCreateServicenetworkConfigurationTypeDef",
    "ClientCreateServiceplacementConstraintsTypeDef",
    "ClientCreateServiceplacementStrategyTypeDef",
    "ClientCreateServiceserviceRegistriesTypeDef",
    "ClientCreateServicetagsTypeDef",
    "ClientCreateTaskSetResponsetaskSetloadBalancersTypeDef",
    "ClientCreateTaskSetResponsetaskSetnetworkConfigurationawsvpcConfigurationTypeDef",
    "ClientCreateTaskSetResponsetaskSetnetworkConfigurationTypeDef",
    "ClientCreateTaskSetResponsetaskSetscaleTypeDef",
    "ClientCreateTaskSetResponsetaskSetserviceRegistriesTypeDef",
    "ClientCreateTaskSetResponsetaskSetTypeDef",
    "ClientCreateTaskSetResponseTypeDef",
    "ClientCreateTaskSetloadBalancersTypeDef",
    "ClientCreateTaskSetnetworkConfigurationawsvpcConfigurationTypeDef",
    "ClientCreateTaskSetnetworkConfigurationTypeDef",
    "ClientCreateTaskSetscaleTypeDef",
    "ClientCreateTaskSetserviceRegistriesTypeDef",
    "ClientDeleteAccountSettingResponsesettingTypeDef",
    "ClientDeleteAccountSettingResponseTypeDef",
    "ClientDeleteAttributesResponseattributesTypeDef",
    "ClientDeleteAttributesResponseTypeDef",
    "ClientDeleteAttributesattributesTypeDef",
    "ClientDeleteClusterResponseclustersettingsTypeDef",
    "ClientDeleteClusterResponseclusterstatisticsTypeDef",
    "ClientDeleteClusterResponseclustertagsTypeDef",
    "ClientDeleteClusterResponseclusterTypeDef",
    "ClientDeleteClusterResponseTypeDef",
    "ClientDeleteServiceResponseservicedeploymentConfigurationTypeDef",
    "ClientDeleteServiceResponseservicedeploymentControllerTypeDef",
    "ClientDeleteServiceResponseservicedeploymentsnetworkConfigurationawsvpcConfigurationTypeDef",
    "ClientDeleteServiceResponseservicedeploymentsnetworkConfigurationTypeDef",
    "ClientDeleteServiceResponseservicedeploymentsTypeDef",
    "ClientDeleteServiceResponseserviceeventsTypeDef",
    "ClientDeleteServiceResponseserviceloadBalancersTypeDef",
    "ClientDeleteServiceResponseservicenetworkConfigurationawsvpcConfigurationTypeDef",
    "ClientDeleteServiceResponseservicenetworkConfigurationTypeDef",
    "ClientDeleteServiceResponseserviceplacementConstraintsTypeDef",
    "ClientDeleteServiceResponseserviceplacementStrategyTypeDef",
    "ClientDeleteServiceResponseserviceserviceRegistriesTypeDef",
    "ClientDeleteServiceResponseservicetagsTypeDef",
    "ClientDeleteServiceResponseservicetaskSetsloadBalancersTypeDef",
    "ClientDeleteServiceResponseservicetaskSetsnetworkConfigurationawsvpcConfigurationTypeDef",
    "ClientDeleteServiceResponseservicetaskSetsnetworkConfigurationTypeDef",
    "ClientDeleteServiceResponseservicetaskSetsscaleTypeDef",
    "ClientDeleteServiceResponseservicetaskSetsserviceRegistriesTypeDef",
    "ClientDeleteServiceResponseservicetaskSetsTypeDef",
    "ClientDeleteServiceResponseserviceTypeDef",
    "ClientDeleteServiceResponseTypeDef",
    "ClientDeleteTaskSetResponsetaskSetloadBalancersTypeDef",
    "ClientDeleteTaskSetResponsetaskSetnetworkConfigurationawsvpcConfigurationTypeDef",
    "ClientDeleteTaskSetResponsetaskSetnetworkConfigurationTypeDef",
    "ClientDeleteTaskSetResponsetaskSetscaleTypeDef",
    "ClientDeleteTaskSetResponsetaskSetserviceRegistriesTypeDef",
    "ClientDeleteTaskSetResponsetaskSetTypeDef",
    "ClientDeleteTaskSetResponseTypeDef",
    "ClientDeregisterContainerInstanceResponsecontainerInstanceattachmentsdetailsTypeDef",
    "ClientDeregisterContainerInstanceResponsecontainerInstanceattachmentsTypeDef",
    "ClientDeregisterContainerInstanceResponsecontainerInstanceattributesTypeDef",
    "ClientDeregisterContainerInstanceResponsecontainerInstanceregisteredResourcesTypeDef",
    "ClientDeregisterContainerInstanceResponsecontainerInstanceremainingResourcesTypeDef",
    "ClientDeregisterContainerInstanceResponsecontainerInstancetagsTypeDef",
    "ClientDeregisterContainerInstanceResponsecontainerInstanceversionInfoTypeDef",
    "ClientDeregisterContainerInstanceResponsecontainerInstanceTypeDef",
    "ClientDeregisterContainerInstanceResponseTypeDef",
    "ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsdependsOnTypeDef",
    "ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsenvironmentTypeDef",
    "ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsextraHostsTypeDef",
    "ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsfirelensConfigurationTypeDef",
    "ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionshealthCheckTypeDef",
    "ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParameterscapabilitiesTypeDef",
    "ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParametersdevicesTypeDef",
    "ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParameterstmpfsTypeDef",
    "ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParametersTypeDef",
    "ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslogConfigurationsecretOptionsTypeDef",
    "ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslogConfigurationTypeDef",
    "ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsmountPointsTypeDef",
    "ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsportMappingsTypeDef",
    "ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsrepositoryCredentialsTypeDef",
    "ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsresourceRequirementsTypeDef",
    "ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionssecretsTypeDef",
    "ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionssystemControlsTypeDef",
    "ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsulimitsTypeDef",
    "ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsvolumesFromTypeDef",
    "ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsTypeDef",
    "ClientDeregisterTaskDefinitionResponsetaskDefinitioninferenceAcceleratorsTypeDef",
    "ClientDeregisterTaskDefinitionResponsetaskDefinitionplacementConstraintsTypeDef",
    "ClientDeregisterTaskDefinitionResponsetaskDefinitionproxyConfigurationpropertiesTypeDef",
    "ClientDeregisterTaskDefinitionResponsetaskDefinitionproxyConfigurationTypeDef",
    "ClientDeregisterTaskDefinitionResponsetaskDefinitionrequiresAttributesTypeDef",
    "ClientDeregisterTaskDefinitionResponsetaskDefinitionvolumesdockerVolumeConfigurationTypeDef",
    "ClientDeregisterTaskDefinitionResponsetaskDefinitionvolumeshostTypeDef",
    "ClientDeregisterTaskDefinitionResponsetaskDefinitionvolumesTypeDef",
    "ClientDeregisterTaskDefinitionResponsetaskDefinitionTypeDef",
    "ClientDeregisterTaskDefinitionResponseTypeDef",
    "ClientDescribeClustersResponseclusterssettingsTypeDef",
    "ClientDescribeClustersResponseclustersstatisticsTypeDef",
    "ClientDescribeClustersResponseclusterstagsTypeDef",
    "ClientDescribeClustersResponseclustersTypeDef",
    "ClientDescribeClustersResponsefailuresTypeDef",
    "ClientDescribeClustersResponseTypeDef",
    "ClientDescribeContainerInstancesResponsecontainerInstancesattachmentsdetailsTypeDef",
    "ClientDescribeContainerInstancesResponsecontainerInstancesattachmentsTypeDef",
    "ClientDescribeContainerInstancesResponsecontainerInstancesattributesTypeDef",
    "ClientDescribeContainerInstancesResponsecontainerInstancesregisteredResourcesTypeDef",
    "ClientDescribeContainerInstancesResponsecontainerInstancesremainingResourcesTypeDef",
    "ClientDescribeContainerInstancesResponsecontainerInstancestagsTypeDef",
    "ClientDescribeContainerInstancesResponsecontainerInstancesversionInfoTypeDef",
    "ClientDescribeContainerInstancesResponsecontainerInstancesTypeDef",
    "ClientDescribeContainerInstancesResponsefailuresTypeDef",
    "ClientDescribeContainerInstancesResponseTypeDef",
    "ClientDescribeServicesResponsefailuresTypeDef",
    "ClientDescribeServicesResponseservicesdeploymentConfigurationTypeDef",
    "ClientDescribeServicesResponseservicesdeploymentControllerTypeDef",
    "ClientDescribeServicesResponseservicesdeploymentsnetworkConfigurationawsvpcConfigurationTypeDef",
    "ClientDescribeServicesResponseservicesdeploymentsnetworkConfigurationTypeDef",
    "ClientDescribeServicesResponseservicesdeploymentsTypeDef",
    "ClientDescribeServicesResponseserviceseventsTypeDef",
    "ClientDescribeServicesResponseservicesloadBalancersTypeDef",
    "ClientDescribeServicesResponseservicesnetworkConfigurationawsvpcConfigurationTypeDef",
    "ClientDescribeServicesResponseservicesnetworkConfigurationTypeDef",
    "ClientDescribeServicesResponseservicesplacementConstraintsTypeDef",
    "ClientDescribeServicesResponseservicesplacementStrategyTypeDef",
    "ClientDescribeServicesResponseservicesserviceRegistriesTypeDef",
    "ClientDescribeServicesResponseservicestagsTypeDef",
    "ClientDescribeServicesResponseservicestaskSetsloadBalancersTypeDef",
    "ClientDescribeServicesResponseservicestaskSetsnetworkConfigurationawsvpcConfigurationTypeDef",
    "ClientDescribeServicesResponseservicestaskSetsnetworkConfigurationTypeDef",
    "ClientDescribeServicesResponseservicestaskSetsscaleTypeDef",
    "ClientDescribeServicesResponseservicestaskSetsserviceRegistriesTypeDef",
    "ClientDescribeServicesResponseservicestaskSetsTypeDef",
    "ClientDescribeServicesResponseservicesTypeDef",
    "ClientDescribeServicesResponseTypeDef",
    "ClientDescribeTaskDefinitionResponsetagsTypeDef",
    "ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionsdependsOnTypeDef",
    "ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionsenvironmentTypeDef",
    "ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionsextraHostsTypeDef",
    "ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionsfirelensConfigurationTypeDef",
    "ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionshealthCheckTypeDef",
    "ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParameterscapabilitiesTypeDef",
    "ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParametersdevicesTypeDef",
    "ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParameterstmpfsTypeDef",
    "ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParametersTypeDef",
    "ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionslogConfigurationsecretOptionsTypeDef",
    "ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionslogConfigurationTypeDef",
    "ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionsmountPointsTypeDef",
    "ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionsportMappingsTypeDef",
    "ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionsrepositoryCredentialsTypeDef",
    "ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionsresourceRequirementsTypeDef",
    "ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionssecretsTypeDef",
    "ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionssystemControlsTypeDef",
    "ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionsulimitsTypeDef",
    "ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionsvolumesFromTypeDef",
    "ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionsTypeDef",
    "ClientDescribeTaskDefinitionResponsetaskDefinitioninferenceAcceleratorsTypeDef",
    "ClientDescribeTaskDefinitionResponsetaskDefinitionplacementConstraintsTypeDef",
    "ClientDescribeTaskDefinitionResponsetaskDefinitionproxyConfigurationpropertiesTypeDef",
    "ClientDescribeTaskDefinitionResponsetaskDefinitionproxyConfigurationTypeDef",
    "ClientDescribeTaskDefinitionResponsetaskDefinitionrequiresAttributesTypeDef",
    "ClientDescribeTaskDefinitionResponsetaskDefinitionvolumesdockerVolumeConfigurationTypeDef",
    "ClientDescribeTaskDefinitionResponsetaskDefinitionvolumeshostTypeDef",
    "ClientDescribeTaskDefinitionResponsetaskDefinitionvolumesTypeDef",
    "ClientDescribeTaskDefinitionResponsetaskDefinitionTypeDef",
    "ClientDescribeTaskDefinitionResponseTypeDef",
    "ClientDescribeTaskSetsResponsefailuresTypeDef",
    "ClientDescribeTaskSetsResponsetaskSetsloadBalancersTypeDef",
    "ClientDescribeTaskSetsResponsetaskSetsnetworkConfigurationawsvpcConfigurationTypeDef",
    "ClientDescribeTaskSetsResponsetaskSetsnetworkConfigurationTypeDef",
    "ClientDescribeTaskSetsResponsetaskSetsscaleTypeDef",
    "ClientDescribeTaskSetsResponsetaskSetsserviceRegistriesTypeDef",
    "ClientDescribeTaskSetsResponsetaskSetsTypeDef",
    "ClientDescribeTaskSetsResponseTypeDef",
    "ClientDescribeTasksResponsefailuresTypeDef",
    "ClientDescribeTasksResponsetasksattachmentsdetailsTypeDef",
    "ClientDescribeTasksResponsetasksattachmentsTypeDef",
    "ClientDescribeTasksResponsetasksattributesTypeDef",
    "ClientDescribeTasksResponsetaskscontainersnetworkBindingsTypeDef",
    "ClientDescribeTasksResponsetaskscontainersnetworkInterfacesTypeDef",
    "ClientDescribeTasksResponsetaskscontainersTypeDef",
    "ClientDescribeTasksResponsetasksinferenceAcceleratorsTypeDef",
    "ClientDescribeTasksResponsetasksoverridescontainerOverridesenvironmentTypeDef",
    "ClientDescribeTasksResponsetasksoverridescontainerOverridesresourceRequirementsTypeDef",
    "ClientDescribeTasksResponsetasksoverridescontainerOverridesTypeDef",
    "ClientDescribeTasksResponsetasksoverridesinferenceAcceleratorOverridesTypeDef",
    "ClientDescribeTasksResponsetasksoverridesTypeDef",
    "ClientDescribeTasksResponsetaskstagsTypeDef",
    "ClientDescribeTasksResponsetasksTypeDef",
    "ClientDescribeTasksResponseTypeDef",
    "ClientDiscoverPollEndpointResponseTypeDef",
    "ClientListAccountSettingsResponsesettingsTypeDef",
    "ClientListAccountSettingsResponseTypeDef",
    "ClientListAttributesResponseattributesTypeDef",
    "ClientListAttributesResponseTypeDef",
    "ClientListClustersResponseTypeDef",
    "ClientListContainerInstancesResponseTypeDef",
    "ClientListServicesResponseTypeDef",
    "ClientListTagsForResourceResponsetagsTypeDef",
    "ClientListTagsForResourceResponseTypeDef",
    "ClientListTaskDefinitionFamiliesResponseTypeDef",
    "ClientListTaskDefinitionsResponseTypeDef",
    "ClientListTasksResponseTypeDef",
    "ClientPutAccountSettingDefaultResponsesettingTypeDef",
    "ClientPutAccountSettingDefaultResponseTypeDef",
    "ClientPutAccountSettingResponsesettingTypeDef",
    "ClientPutAccountSettingResponseTypeDef",
    "ClientPutAttributesResponseattributesTypeDef",
    "ClientPutAttributesResponseTypeDef",
    "ClientPutAttributesattributesTypeDef",
    "ClientRegisterContainerInstanceResponsecontainerInstanceattachmentsdetailsTypeDef",
    "ClientRegisterContainerInstanceResponsecontainerInstanceattachmentsTypeDef",
    "ClientRegisterContainerInstanceResponsecontainerInstanceattributesTypeDef",
    "ClientRegisterContainerInstanceResponsecontainerInstanceregisteredResourcesTypeDef",
    "ClientRegisterContainerInstanceResponsecontainerInstanceremainingResourcesTypeDef",
    "ClientRegisterContainerInstanceResponsecontainerInstancetagsTypeDef",
    "ClientRegisterContainerInstanceResponsecontainerInstanceversionInfoTypeDef",
    "ClientRegisterContainerInstanceResponsecontainerInstanceTypeDef",
    "ClientRegisterContainerInstanceResponseTypeDef",
    "ClientRegisterContainerInstanceattributesTypeDef",
    "ClientRegisterContainerInstanceplatformDevicesTypeDef",
    "ClientRegisterContainerInstancetagsTypeDef",
    "ClientRegisterContainerInstancetotalResourcesTypeDef",
    "ClientRegisterContainerInstanceversionInfoTypeDef",
    "ClientRegisterTaskDefinitionResponsetagsTypeDef",
    "ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsdependsOnTypeDef",
    "ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsenvironmentTypeDef",
    "ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsextraHostsTypeDef",
    "ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsfirelensConfigurationTypeDef",
    "ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionshealthCheckTypeDef",
    "ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParameterscapabilitiesTypeDef",
    "ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParametersdevicesTypeDef",
    "ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParameterstmpfsTypeDef",
    "ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParametersTypeDef",
    "ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslogConfigurationsecretOptionsTypeDef",
    "ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslogConfigurationTypeDef",
    "ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsmountPointsTypeDef",
    "ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsportMappingsTypeDef",
    "ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsrepositoryCredentialsTypeDef",
    "ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsresourceRequirementsTypeDef",
    "ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionssecretsTypeDef",
    "ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionssystemControlsTypeDef",
    "ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsulimitsTypeDef",
    "ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsvolumesFromTypeDef",
    "ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsTypeDef",
    "ClientRegisterTaskDefinitionResponsetaskDefinitioninferenceAcceleratorsTypeDef",
    "ClientRegisterTaskDefinitionResponsetaskDefinitionplacementConstraintsTypeDef",
    "ClientRegisterTaskDefinitionResponsetaskDefinitionproxyConfigurationpropertiesTypeDef",
    "ClientRegisterTaskDefinitionResponsetaskDefinitionproxyConfigurationTypeDef",
    "ClientRegisterTaskDefinitionResponsetaskDefinitionrequiresAttributesTypeDef",
    "ClientRegisterTaskDefinitionResponsetaskDefinitionvolumesdockerVolumeConfigurationTypeDef",
    "ClientRegisterTaskDefinitionResponsetaskDefinitionvolumeshostTypeDef",
    "ClientRegisterTaskDefinitionResponsetaskDefinitionvolumesTypeDef",
    "ClientRegisterTaskDefinitionResponsetaskDefinitionTypeDef",
    "ClientRegisterTaskDefinitionResponseTypeDef",
    "ClientRegisterTaskDefinitioncontainerDefinitionsdependsOnTypeDef",
    "ClientRegisterTaskDefinitioncontainerDefinitionsenvironmentTypeDef",
    "ClientRegisterTaskDefinitioncontainerDefinitionsextraHostsTypeDef",
    "ClientRegisterTaskDefinitioncontainerDefinitionsfirelensConfigurationTypeDef",
    "ClientRegisterTaskDefinitioncontainerDefinitionshealthCheckTypeDef",
    "ClientRegisterTaskDefinitioncontainerDefinitionslinuxParameterscapabilitiesTypeDef",
    "ClientRegisterTaskDefinitioncontainerDefinitionslinuxParametersdevicesTypeDef",
    "ClientRegisterTaskDefinitioncontainerDefinitionslinuxParameterstmpfsTypeDef",
    "ClientRegisterTaskDefinitioncontainerDefinitionslinuxParametersTypeDef",
    "ClientRegisterTaskDefinitioncontainerDefinitionslogConfigurationsecretOptionsTypeDef",
    "ClientRegisterTaskDefinitioncontainerDefinitionslogConfigurationTypeDef",
    "ClientRegisterTaskDefinitioncontainerDefinitionsmountPointsTypeDef",
    "ClientRegisterTaskDefinitioncontainerDefinitionsportMappingsTypeDef",
    "ClientRegisterTaskDefinitioncontainerDefinitionsrepositoryCredentialsTypeDef",
    "ClientRegisterTaskDefinitioncontainerDefinitionsresourceRequirementsTypeDef",
    "ClientRegisterTaskDefinitioncontainerDefinitionssecretsTypeDef",
    "ClientRegisterTaskDefinitioncontainerDefinitionssystemControlsTypeDef",
    "ClientRegisterTaskDefinitioncontainerDefinitionsulimitsTypeDef",
    "ClientRegisterTaskDefinitioncontainerDefinitionsvolumesFromTypeDef",
    "ClientRegisterTaskDefinitioncontainerDefinitionsTypeDef",
    "ClientRegisterTaskDefinitioninferenceAcceleratorsTypeDef",
    "ClientRegisterTaskDefinitionplacementConstraintsTypeDef",
    "ClientRegisterTaskDefinitionproxyConfigurationpropertiesTypeDef",
    "ClientRegisterTaskDefinitionproxyConfigurationTypeDef",
    "ClientRegisterTaskDefinitiontagsTypeDef",
    "ClientRegisterTaskDefinitionvolumesdockerVolumeConfigurationTypeDef",
    "ClientRegisterTaskDefinitionvolumeshostTypeDef",
    "ClientRegisterTaskDefinitionvolumesTypeDef",
    "ClientRunTaskResponsefailuresTypeDef",
    "ClientRunTaskResponsetasksattachmentsdetailsTypeDef",
    "ClientRunTaskResponsetasksattachmentsTypeDef",
    "ClientRunTaskResponsetasksattributesTypeDef",
    "ClientRunTaskResponsetaskscontainersnetworkBindingsTypeDef",
    "ClientRunTaskResponsetaskscontainersnetworkInterfacesTypeDef",
    "ClientRunTaskResponsetaskscontainersTypeDef",
    "ClientRunTaskResponsetasksinferenceAcceleratorsTypeDef",
    "ClientRunTaskResponsetasksoverridescontainerOverridesenvironmentTypeDef",
    "ClientRunTaskResponsetasksoverridescontainerOverridesresourceRequirementsTypeDef",
    "ClientRunTaskResponsetasksoverridescontainerOverridesTypeDef",
    "ClientRunTaskResponsetasksoverridesinferenceAcceleratorOverridesTypeDef",
    "ClientRunTaskResponsetasksoverridesTypeDef",
    "ClientRunTaskResponsetaskstagsTypeDef",
    "ClientRunTaskResponsetasksTypeDef",
    "ClientRunTaskResponseTypeDef",
    "ClientRunTasknetworkConfigurationawsvpcConfigurationTypeDef",
    "ClientRunTasknetworkConfigurationTypeDef",
    "ClientRunTaskoverridescontainerOverridesenvironmentTypeDef",
    "ClientRunTaskoverridescontainerOverridesresourceRequirementsTypeDef",
    "ClientRunTaskoverridescontainerOverridesTypeDef",
    "ClientRunTaskoverridesinferenceAcceleratorOverridesTypeDef",
    "ClientRunTaskoverridesTypeDef",
    "ClientRunTaskplacementConstraintsTypeDef",
    "ClientRunTaskplacementStrategyTypeDef",
    "ClientRunTasktagsTypeDef",
    "ClientStartTaskResponsefailuresTypeDef",
    "ClientStartTaskResponsetasksattachmentsdetailsTypeDef",
    "ClientStartTaskResponsetasksattachmentsTypeDef",
    "ClientStartTaskResponsetasksattributesTypeDef",
    "ClientStartTaskResponsetaskscontainersnetworkBindingsTypeDef",
    "ClientStartTaskResponsetaskscontainersnetworkInterfacesTypeDef",
    "ClientStartTaskResponsetaskscontainersTypeDef",
    "ClientStartTaskResponsetasksinferenceAcceleratorsTypeDef",
    "ClientStartTaskResponsetasksoverridescontainerOverridesenvironmentTypeDef",
    "ClientStartTaskResponsetasksoverridescontainerOverridesresourceRequirementsTypeDef",
    "ClientStartTaskResponsetasksoverridescontainerOverridesTypeDef",
    "ClientStartTaskResponsetasksoverridesinferenceAcceleratorOverridesTypeDef",
    "ClientStartTaskResponsetasksoverridesTypeDef",
    "ClientStartTaskResponsetaskstagsTypeDef",
    "ClientStartTaskResponsetasksTypeDef",
    "ClientStartTaskResponseTypeDef",
    "ClientStartTasknetworkConfigurationawsvpcConfigurationTypeDef",
    "ClientStartTasknetworkConfigurationTypeDef",
    "ClientStartTaskoverridescontainerOverridesenvironmentTypeDef",
    "ClientStartTaskoverridescontainerOverridesresourceRequirementsTypeDef",
    "ClientStartTaskoverridescontainerOverridesTypeDef",
    "ClientStartTaskoverridesinferenceAcceleratorOverridesTypeDef",
    "ClientStartTaskoverridesTypeDef",
    "ClientStartTasktagsTypeDef",
    "ClientStopTaskResponsetaskattachmentsdetailsTypeDef",
    "ClientStopTaskResponsetaskattachmentsTypeDef",
    "ClientStopTaskResponsetaskattributesTypeDef",
    "ClientStopTaskResponsetaskcontainersnetworkBindingsTypeDef",
    "ClientStopTaskResponsetaskcontainersnetworkInterfacesTypeDef",
    "ClientStopTaskResponsetaskcontainersTypeDef",
    "ClientStopTaskResponsetaskinferenceAcceleratorsTypeDef",
    "ClientStopTaskResponsetaskoverridescontainerOverridesenvironmentTypeDef",
    "ClientStopTaskResponsetaskoverridescontainerOverridesresourceRequirementsTypeDef",
    "ClientStopTaskResponsetaskoverridescontainerOverridesTypeDef",
    "ClientStopTaskResponsetaskoverridesinferenceAcceleratorOverridesTypeDef",
    "ClientStopTaskResponsetaskoverridesTypeDef",
    "ClientStopTaskResponsetasktagsTypeDef",
    "ClientStopTaskResponsetaskTypeDef",
    "ClientStopTaskResponseTypeDef",
    "ClientSubmitAttachmentStateChangesResponseTypeDef",
    "ClientSubmitAttachmentStateChangesattachmentsTypeDef",
    "ClientSubmitContainerStateChangeResponseTypeDef",
    "ClientSubmitContainerStateChangenetworkBindingsTypeDef",
    "ClientSubmitTaskStateChangeResponseTypeDef",
    "ClientSubmitTaskStateChangeattachmentsTypeDef",
    "ClientSubmitTaskStateChangecontainersnetworkBindingsTypeDef",
    "ClientSubmitTaskStateChangecontainersTypeDef",
    "ClientTagResourcetagsTypeDef",
    "ClientUpdateClusterSettingsResponseclustersettingsTypeDef",
    "ClientUpdateClusterSettingsResponseclusterstatisticsTypeDef",
    "ClientUpdateClusterSettingsResponseclustertagsTypeDef",
    "ClientUpdateClusterSettingsResponseclusterTypeDef",
    "ClientUpdateClusterSettingsResponseTypeDef",
    "ClientUpdateClusterSettingssettingsTypeDef",
    "ClientUpdateContainerAgentResponsecontainerInstanceattachmentsdetailsTypeDef",
    "ClientUpdateContainerAgentResponsecontainerInstanceattachmentsTypeDef",
    "ClientUpdateContainerAgentResponsecontainerInstanceattributesTypeDef",
    "ClientUpdateContainerAgentResponsecontainerInstanceregisteredResourcesTypeDef",
    "ClientUpdateContainerAgentResponsecontainerInstanceremainingResourcesTypeDef",
    "ClientUpdateContainerAgentResponsecontainerInstancetagsTypeDef",
    "ClientUpdateContainerAgentResponsecontainerInstanceversionInfoTypeDef",
    "ClientUpdateContainerAgentResponsecontainerInstanceTypeDef",
    "ClientUpdateContainerAgentResponseTypeDef",
    "ClientUpdateContainerInstancesStateResponsecontainerInstancesattachmentsdetailsTypeDef",
    "ClientUpdateContainerInstancesStateResponsecontainerInstancesattachmentsTypeDef",
    "ClientUpdateContainerInstancesStateResponsecontainerInstancesattributesTypeDef",
    "ClientUpdateContainerInstancesStateResponsecontainerInstancesregisteredResourcesTypeDef",
    "ClientUpdateContainerInstancesStateResponsecontainerInstancesremainingResourcesTypeDef",
    "ClientUpdateContainerInstancesStateResponsecontainerInstancestagsTypeDef",
    "ClientUpdateContainerInstancesStateResponsecontainerInstancesversionInfoTypeDef",
    "ClientUpdateContainerInstancesStateResponsecontainerInstancesTypeDef",
    "ClientUpdateContainerInstancesStateResponsefailuresTypeDef",
    "ClientUpdateContainerInstancesStateResponseTypeDef",
    "ClientUpdateServicePrimaryTaskSetResponsetaskSetloadBalancersTypeDef",
    "ClientUpdateServicePrimaryTaskSetResponsetaskSetnetworkConfigurationawsvpcConfigurationTypeDef",
    "ClientUpdateServicePrimaryTaskSetResponsetaskSetnetworkConfigurationTypeDef",
    "ClientUpdateServicePrimaryTaskSetResponsetaskSetscaleTypeDef",
    "ClientUpdateServicePrimaryTaskSetResponsetaskSetserviceRegistriesTypeDef",
    "ClientUpdateServicePrimaryTaskSetResponsetaskSetTypeDef",
    "ClientUpdateServicePrimaryTaskSetResponseTypeDef",
    "ClientUpdateServiceResponseservicedeploymentConfigurationTypeDef",
    "ClientUpdateServiceResponseservicedeploymentControllerTypeDef",
    "ClientUpdateServiceResponseservicedeploymentsnetworkConfigurationawsvpcConfigurationTypeDef",
    "ClientUpdateServiceResponseservicedeploymentsnetworkConfigurationTypeDef",
    "ClientUpdateServiceResponseservicedeploymentsTypeDef",
    "ClientUpdateServiceResponseserviceeventsTypeDef",
    "ClientUpdateServiceResponseserviceloadBalancersTypeDef",
    "ClientUpdateServiceResponseservicenetworkConfigurationawsvpcConfigurationTypeDef",
    "ClientUpdateServiceResponseservicenetworkConfigurationTypeDef",
    "ClientUpdateServiceResponseserviceplacementConstraintsTypeDef",
    "ClientUpdateServiceResponseserviceplacementStrategyTypeDef",
    "ClientUpdateServiceResponseserviceserviceRegistriesTypeDef",
    "ClientUpdateServiceResponseservicetagsTypeDef",
    "ClientUpdateServiceResponseservicetaskSetsloadBalancersTypeDef",
    "ClientUpdateServiceResponseservicetaskSetsnetworkConfigurationawsvpcConfigurationTypeDef",
    "ClientUpdateServiceResponseservicetaskSetsnetworkConfigurationTypeDef",
    "ClientUpdateServiceResponseservicetaskSetsscaleTypeDef",
    "ClientUpdateServiceResponseservicetaskSetsserviceRegistriesTypeDef",
    "ClientUpdateServiceResponseservicetaskSetsTypeDef",
    "ClientUpdateServiceResponseserviceTypeDef",
    "ClientUpdateServiceResponseTypeDef",
    "ClientUpdateServicedeploymentConfigurationTypeDef",
    "ClientUpdateServicenetworkConfigurationawsvpcConfigurationTypeDef",
    "ClientUpdateServicenetworkConfigurationTypeDef",
    "ClientUpdateTaskSetResponsetaskSetloadBalancersTypeDef",
    "ClientUpdateTaskSetResponsetaskSetnetworkConfigurationawsvpcConfigurationTypeDef",
    "ClientUpdateTaskSetResponsetaskSetnetworkConfigurationTypeDef",
    "ClientUpdateTaskSetResponsetaskSetscaleTypeDef",
    "ClientUpdateTaskSetResponsetaskSetserviceRegistriesTypeDef",
    "ClientUpdateTaskSetResponsetaskSetTypeDef",
    "ClientUpdateTaskSetResponseTypeDef",
    "ClientUpdateTaskSetscaleTypeDef",
    "ListAccountSettingsPaginatePaginationConfigTypeDef",
    "ListAccountSettingsPaginateResponsesettingsTypeDef",
    "ListAccountSettingsPaginateResponseTypeDef",
    "ListAttributesPaginatePaginationConfigTypeDef",
    "ListAttributesPaginateResponseattributesTypeDef",
    "ListAttributesPaginateResponseTypeDef",
    "ListClustersPaginatePaginationConfigTypeDef",
    "ListClustersPaginateResponseTypeDef",
    "ListContainerInstancesPaginatePaginationConfigTypeDef",
    "ListContainerInstancesPaginateResponseTypeDef",
    "ListServicesPaginatePaginationConfigTypeDef",
    "ListServicesPaginateResponseTypeDef",
    "ListTaskDefinitionFamiliesPaginatePaginationConfigTypeDef",
    "ListTaskDefinitionFamiliesPaginateResponseTypeDef",
    "ListTaskDefinitionsPaginatePaginationConfigTypeDef",
    "ListTaskDefinitionsPaginateResponseTypeDef",
    "ListTasksPaginatePaginationConfigTypeDef",
    "ListTasksPaginateResponseTypeDef",
    "ServicesInactiveWaitWaiterConfigTypeDef",
    "ServicesStableWaitWaiterConfigTypeDef",
    "TasksRunningWaitWaiterConfigTypeDef",
    "TasksStoppedWaitWaiterConfigTypeDef",
)


_ClientCreateClusterResponseclustersettingsTypeDef = TypedDict(
    "_ClientCreateClusterResponseclustersettingsTypeDef",
    {"name": str, "value": str},
    total=False,
)


class ClientCreateClusterResponseclustersettingsTypeDef(
    _ClientCreateClusterResponseclustersettingsTypeDef
):
    """
    Type definition for `ClientCreateClusterResponsecluster` `settings`

    The settings to use when creating a cluster. This parameter is used to enable CloudWatch
    Container Insights for a cluster.

    - **name** *(string) --*

      The name of the cluster setting. The only supported value is ``containerInsights`` .

    - **value** *(string) --*

      The value to set for the cluster setting. The supported values are ``enabled`` and
      ``disabled`` . If ``enabled`` is specified, CloudWatch Container Insights will be
      enabled for the cluster, otherwise it will be disabled unless the ``containerInsights``
      account setting is enabled. If a cluster value is specified, it will override the
      ``containerInsights`` value set with  PutAccountSetting or  PutAccountSettingDefault .
    """


_ClientCreateClusterResponseclusterstatisticsTypeDef = TypedDict(
    "_ClientCreateClusterResponseclusterstatisticsTypeDef",
    {"name": str, "value": str},
    total=False,
)


class ClientCreateClusterResponseclusterstatisticsTypeDef(
    _ClientCreateClusterResponseclusterstatisticsTypeDef
):
    """
    Type definition for `ClientCreateClusterResponsecluster` `statistics`

    A key-value pair object.

    - **name** *(string) --*

      The name of the key-value pair. For environment variables, this is the name of the
      environment variable.

    - **value** *(string) --*

      The value of the key-value pair. For environment variables, this is the value of the
      environment variable.
    """


_ClientCreateClusterResponseclustertagsTypeDef = TypedDict(
    "_ClientCreateClusterResponseclustertagsTypeDef",
    {"key": str, "value": str},
    total=False,
)


class ClientCreateClusterResponseclustertagsTypeDef(
    _ClientCreateClusterResponseclustertagsTypeDef
):
    """
    Type definition for `ClientCreateClusterResponsecluster` `tags`

    The metadata that you apply to a resource to help you categorize and organize them. Each
    tag consists of a key and an optional value, both of which you define.

    The following basic restrictions apply to tags:

    * Maximum number of tags per resource - 50

    * For each resource, each tag key must be unique, and each tag key can have only one
    value.

    * Maximum key length - 128 Unicode characters in UTF-8

    * Maximum value length - 256 Unicode characters in UTF-8

    * If your tagging schema is used across multiple services and resources, remember that
    other services may have restrictions on allowed characters. Generally allowed characters
    are: letters, numbers, and spaces representable in UTF-8, and the following characters: +
    - = . _ : / @.

    * Tag keys and values are case-sensitive.

    * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
    prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
    tag keys or values with this prefix. Tags with this prefix do not count against your tags
    per resource limit.

    - **key** *(string) --*

      One part of a key-value pair that make up a tag. A ``key`` is a general label that acts
      like a category for more specific tag values.

    - **value** *(string) --*

      The optional part of a key-value pair that make up a tag. A ``value`` acts as a
      descriptor within a tag category (key).
    """


_ClientCreateClusterResponseclusterTypeDef = TypedDict(
    "_ClientCreateClusterResponseclusterTypeDef",
    {
        "clusterArn": str,
        "clusterName": str,
        "status": str,
        "registeredContainerInstancesCount": int,
        "runningTasksCount": int,
        "pendingTasksCount": int,
        "activeServicesCount": int,
        "statistics": List[ClientCreateClusterResponseclusterstatisticsTypeDef],
        "tags": List[ClientCreateClusterResponseclustertagsTypeDef],
        "settings": List[ClientCreateClusterResponseclustersettingsTypeDef],
    },
    total=False,
)


class ClientCreateClusterResponseclusterTypeDef(
    _ClientCreateClusterResponseclusterTypeDef
):
    """
    Type definition for `ClientCreateClusterResponse` `cluster`

    The full description of your new cluster.

    - **clusterArn** *(string) --*

      The Amazon Resource Name (ARN) that identifies the cluster. The ARN contains the
      ``arn:aws:ecs`` namespace, followed by the Region of the cluster, the AWS account ID of the
      cluster owner, the ``cluster`` namespace, and then the cluster name. For example,
      ``arn:aws:ecs:region:012345678910:cluster/test`` .

    - **clusterName** *(string) --*

      A user-generated string that you use to identify your cluster.

    - **status** *(string) --*

      The status of the cluster. The valid values are ``ACTIVE`` or ``INACTIVE`` . ``ACTIVE``
      indicates that you can register container instances with the cluster and the associated
      instances can accept tasks.

    - **registeredContainerInstancesCount** *(integer) --*

      The number of container instances registered into the cluster. This includes container
      instances in both ``ACTIVE`` and ``DRAINING`` status.

    - **runningTasksCount** *(integer) --*

      The number of tasks in the cluster that are in the ``RUNNING`` state.

    - **pendingTasksCount** *(integer) --*

      The number of tasks in the cluster that are in the ``PENDING`` state.

    - **activeServicesCount** *(integer) --*

      The number of services that are running on the cluster in an ``ACTIVE`` state. You can view
      these services with  ListServices .

    - **statistics** *(list) --*

      Additional information about your clusters that are separated by launch type, including:

      * runningEC2TasksCount

      * RunningFargateTasksCount

      * pendingEC2TasksCount

      * pendingFargateTasksCount

      * activeEC2ServiceCount

      * activeFargateServiceCount

      * drainingEC2ServiceCount

      * drainingFargateServiceCount

      - *(dict) --*

        A key-value pair object.

        - **name** *(string) --*

          The name of the key-value pair. For environment variables, this is the name of the
          environment variable.

        - **value** *(string) --*

          The value of the key-value pair. For environment variables, this is the value of the
          environment variable.

    - **tags** *(list) --*

      The metadata that you apply to the cluster to help you categorize and organize them. Each
      tag consists of a key and an optional value, both of which you define.

      The following basic restrictions apply to tags:

      * Maximum number of tags per resource - 50

      * For each resource, each tag key must be unique, and each tag key can have only one value.

      * Maximum key length - 128 Unicode characters in UTF-8

      * Maximum value length - 256 Unicode characters in UTF-8

      * If your tagging schema is used across multiple services and resources, remember that
      other services may have restrictions on allowed characters. Generally allowed characters
      are: letters, numbers, and spaces representable in UTF-8, and the following characters: + -
      = . _ : / @.

      * Tag keys and values are case-sensitive.

      * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
      prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
      tag keys or values with this prefix. Tags with this prefix do not count against your tags
      per resource limit.

      - *(dict) --*

        The metadata that you apply to a resource to help you categorize and organize them. Each
        tag consists of a key and an optional value, both of which you define.

        The following basic restrictions apply to tags:

        * Maximum number of tags per resource - 50

        * For each resource, each tag key must be unique, and each tag key can have only one
        value.

        * Maximum key length - 128 Unicode characters in UTF-8

        * Maximum value length - 256 Unicode characters in UTF-8

        * If your tagging schema is used across multiple services and resources, remember that
        other services may have restrictions on allowed characters. Generally allowed characters
        are: letters, numbers, and spaces representable in UTF-8, and the following characters: +
        - = . _ : / @.

        * Tag keys and values are case-sensitive.

        * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
        prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
        tag keys or values with this prefix. Tags with this prefix do not count against your tags
        per resource limit.

        - **key** *(string) --*

          One part of a key-value pair that make up a tag. A ``key`` is a general label that acts
          like a category for more specific tag values.

        - **value** *(string) --*

          The optional part of a key-value pair that make up a tag. A ``value`` acts as a
          descriptor within a tag category (key).

    - **settings** *(list) --*

      The settings for the cluster. This parameter indicates whether CloudWatch Container
      Insights is enabled or disabled for a cluster.

      - *(dict) --*

        The settings to use when creating a cluster. This parameter is used to enable CloudWatch
        Container Insights for a cluster.

        - **name** *(string) --*

          The name of the cluster setting. The only supported value is ``containerInsights`` .

        - **value** *(string) --*

          The value to set for the cluster setting. The supported values are ``enabled`` and
          ``disabled`` . If ``enabled`` is specified, CloudWatch Container Insights will be
          enabled for the cluster, otherwise it will be disabled unless the ``containerInsights``
          account setting is enabled. If a cluster value is specified, it will override the
          ``containerInsights`` value set with  PutAccountSetting or  PutAccountSettingDefault .
    """


_ClientCreateClusterResponseTypeDef = TypedDict(
    "_ClientCreateClusterResponseTypeDef",
    {"cluster": ClientCreateClusterResponseclusterTypeDef},
    total=False,
)


class ClientCreateClusterResponseTypeDef(_ClientCreateClusterResponseTypeDef):
    """
    Type definition for `ClientCreateCluster` `Response`

    - **cluster** *(dict) --*

      The full description of your new cluster.

      - **clusterArn** *(string) --*

        The Amazon Resource Name (ARN) that identifies the cluster. The ARN contains the
        ``arn:aws:ecs`` namespace, followed by the Region of the cluster, the AWS account ID of the
        cluster owner, the ``cluster`` namespace, and then the cluster name. For example,
        ``arn:aws:ecs:region:012345678910:cluster/test`` .

      - **clusterName** *(string) --*

        A user-generated string that you use to identify your cluster.

      - **status** *(string) --*

        The status of the cluster. The valid values are ``ACTIVE`` or ``INACTIVE`` . ``ACTIVE``
        indicates that you can register container instances with the cluster and the associated
        instances can accept tasks.

      - **registeredContainerInstancesCount** *(integer) --*

        The number of container instances registered into the cluster. This includes container
        instances in both ``ACTIVE`` and ``DRAINING`` status.

      - **runningTasksCount** *(integer) --*

        The number of tasks in the cluster that are in the ``RUNNING`` state.

      - **pendingTasksCount** *(integer) --*

        The number of tasks in the cluster that are in the ``PENDING`` state.

      - **activeServicesCount** *(integer) --*

        The number of services that are running on the cluster in an ``ACTIVE`` state. You can view
        these services with  ListServices .

      - **statistics** *(list) --*

        Additional information about your clusters that are separated by launch type, including:

        * runningEC2TasksCount

        * RunningFargateTasksCount

        * pendingEC2TasksCount

        * pendingFargateTasksCount

        * activeEC2ServiceCount

        * activeFargateServiceCount

        * drainingEC2ServiceCount

        * drainingFargateServiceCount

        - *(dict) --*

          A key-value pair object.

          - **name** *(string) --*

            The name of the key-value pair. For environment variables, this is the name of the
            environment variable.

          - **value** *(string) --*

            The value of the key-value pair. For environment variables, this is the value of the
            environment variable.

      - **tags** *(list) --*

        The metadata that you apply to the cluster to help you categorize and organize them. Each
        tag consists of a key and an optional value, both of which you define.

        The following basic restrictions apply to tags:

        * Maximum number of tags per resource - 50

        * For each resource, each tag key must be unique, and each tag key can have only one value.

        * Maximum key length - 128 Unicode characters in UTF-8

        * Maximum value length - 256 Unicode characters in UTF-8

        * If your tagging schema is used across multiple services and resources, remember that
        other services may have restrictions on allowed characters. Generally allowed characters
        are: letters, numbers, and spaces representable in UTF-8, and the following characters: + -
        = . _ : / @.

        * Tag keys and values are case-sensitive.

        * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
        prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
        tag keys or values with this prefix. Tags with this prefix do not count against your tags
        per resource limit.

        - *(dict) --*

          The metadata that you apply to a resource to help you categorize and organize them. Each
          tag consists of a key and an optional value, both of which you define.

          The following basic restrictions apply to tags:

          * Maximum number of tags per resource - 50

          * For each resource, each tag key must be unique, and each tag key can have only one
          value.

          * Maximum key length - 128 Unicode characters in UTF-8

          * Maximum value length - 256 Unicode characters in UTF-8

          * If your tagging schema is used across multiple services and resources, remember that
          other services may have restrictions on allowed characters. Generally allowed characters
          are: letters, numbers, and spaces representable in UTF-8, and the following characters: +
          - = . _ : / @.

          * Tag keys and values are case-sensitive.

          * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
          prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
          tag keys or values with this prefix. Tags with this prefix do not count against your tags
          per resource limit.

          - **key** *(string) --*

            One part of a key-value pair that make up a tag. A ``key`` is a general label that acts
            like a category for more specific tag values.

          - **value** *(string) --*

            The optional part of a key-value pair that make up a tag. A ``value`` acts as a
            descriptor within a tag category (key).

      - **settings** *(list) --*

        The settings for the cluster. This parameter indicates whether CloudWatch Container
        Insights is enabled or disabled for a cluster.

        - *(dict) --*

          The settings to use when creating a cluster. This parameter is used to enable CloudWatch
          Container Insights for a cluster.

          - **name** *(string) --*

            The name of the cluster setting. The only supported value is ``containerInsights`` .

          - **value** *(string) --*

            The value to set for the cluster setting. The supported values are ``enabled`` and
            ``disabled`` . If ``enabled`` is specified, CloudWatch Container Insights will be
            enabled for the cluster, otherwise it will be disabled unless the ``containerInsights``
            account setting is enabled. If a cluster value is specified, it will override the
            ``containerInsights`` value set with  PutAccountSetting or  PutAccountSettingDefault .
    """


_ClientCreateClustersettingsTypeDef = TypedDict(
    "_ClientCreateClustersettingsTypeDef", {"name": str, "value": str}, total=False
)


class ClientCreateClustersettingsTypeDef(_ClientCreateClustersettingsTypeDef):
    """
    Type definition for `ClientCreateCluster` `settings`

    The settings to use when creating a cluster. This parameter is used to enable CloudWatch
    Container Insights for a cluster.

    - **name** *(string) --*

      The name of the cluster setting. The only supported value is ``containerInsights`` .

    - **value** *(string) --*

      The value to set for the cluster setting. The supported values are ``enabled`` and
      ``disabled`` . If ``enabled`` is specified, CloudWatch Container Insights will be enabled for
      the cluster, otherwise it will be disabled unless the ``containerInsights`` account setting
      is enabled. If a cluster value is specified, it will override the ``containerInsights`` value
      set with  PutAccountSetting or  PutAccountSettingDefault .
    """


_ClientCreateClustertagsTypeDef = TypedDict(
    "_ClientCreateClustertagsTypeDef", {"key": str, "value": str}, total=False
)


class ClientCreateClustertagsTypeDef(_ClientCreateClustertagsTypeDef):
    """
    Type definition for `ClientCreateCluster` `tags`

    The metadata that you apply to a resource to help you categorize and organize them. Each tag
    consists of a key and an optional value, both of which you define.

    The following basic restrictions apply to tags:

    * Maximum number of tags per resource - 50

    * For each resource, each tag key must be unique, and each tag key can have only one value.

    * Maximum key length - 128 Unicode characters in UTF-8

    * Maximum value length - 256 Unicode characters in UTF-8

    * If your tagging schema is used across multiple services and resources, remember that other
    services may have restrictions on allowed characters. Generally allowed characters are:
    letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ :
    / @.

    * Tag keys and values are case-sensitive.

    * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a prefix
    for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys or
    values with this prefix. Tags with this prefix do not count against your tags per resource
    limit.

    - **key** *(string) --*

      One part of a key-value pair that make up a tag. A ``key`` is a general label that acts like
      a category for more specific tag values.

    - **value** *(string) --*

      The optional part of a key-value pair that make up a tag. A ``value`` acts as a descriptor
      within a tag category (key).
    """


_ClientCreateServiceResponseservicedeploymentConfigurationTypeDef = TypedDict(
    "_ClientCreateServiceResponseservicedeploymentConfigurationTypeDef",
    {"maximumPercent": int, "minimumHealthyPercent": int},
    total=False,
)


class ClientCreateServiceResponseservicedeploymentConfigurationTypeDef(
    _ClientCreateServiceResponseservicedeploymentConfigurationTypeDef
):
    """
    Type definition for `ClientCreateServiceResponseservice` `deploymentConfiguration`

    Optional deployment parameters that control how many tasks run during the deployment and
    the ordering of stopping and starting tasks.

    - **maximumPercent** *(integer) --*

      If a service is using the rolling update (``ECS`` ) deployment type, the **maximum
      percent** parameter represents an upper limit on the number of tasks in a service that
      are allowed in the ``RUNNING`` or ``PENDING`` state during a deployment, as a percentage
      of the desired number of tasks (rounded down to the nearest integer), and while any
      container instances are in the ``DRAINING`` state if the service contains tasks using the
      EC2 launch type. This parameter enables you to define the deployment batch size. For
      example, if your service has a desired number of four tasks and a maximum percent value
      of 200%, the scheduler may start four new tasks before stopping the four older tasks
      (provided that the cluster resources required to do this are available). The default
      value for maximum percent is 200%.

      If a service is using the blue/green (``CODE_DEPLOY`` ) or ``EXTERNAL`` deployment types
      and tasks that use the EC2 launch type, the **maximum percent** value is set to the
      default value and is used to define the upper limit on the number of the tasks in the
      service that remain in the ``RUNNING`` state while the container instances are in the
      ``DRAINING`` state. If the tasks in the service use the Fargate launch type, the maximum
      percent value is not used, although it is returned when describing your service.

    - **minimumHealthyPercent** *(integer) --*

      If a service is using the rolling update (``ECS`` ) deployment type, the **minimum
      healthy percent** represents a lower limit on the number of tasks in a service that must
      remain in the ``RUNNING`` state during a deployment, as a percentage of the desired
      number of tasks (rounded up to the nearest integer), and while any container instances
      are in the ``DRAINING`` state if the service contains tasks using the EC2 launch type.
      This parameter enables you to deploy without using additional cluster capacity. For
      example, if your service has a desired number of four tasks and a minimum healthy percent
      of 50%, the scheduler may stop two existing tasks to free up cluster capacity before
      starting two new tasks. Tasks for services that *do not* use a load balancer are
      considered healthy if they are in the ``RUNNING`` state; tasks for services that *do* use
      a load balancer are considered healthy if they are in the ``RUNNING`` state and they are
      reported as healthy by the load balancer. The default value for minimum healthy percent
      is 100%.

      If a service is using the blue/green (``CODE_DEPLOY`` ) or ``EXTERNAL`` deployment types
      and tasks that use the EC2 launch type, the **minimum healthy percent** value is set to
      the default value and is used to define the lower limit on the number of the tasks in the
      service that remain in the ``RUNNING`` state while the container instances are in the
      ``DRAINING`` state. If the tasks in the service use the Fargate launch type, the minimum
      healthy percent value is not used, although it is returned when describing your service.
    """


_ClientCreateServiceResponseservicedeploymentControllerTypeDef = TypedDict(
    "_ClientCreateServiceResponseservicedeploymentControllerTypeDef",
    {"type": str},
    total=False,
)


class ClientCreateServiceResponseservicedeploymentControllerTypeDef(
    _ClientCreateServiceResponseservicedeploymentControllerTypeDef
):
    """
    Type definition for `ClientCreateServiceResponseservice` `deploymentController`

    The deployment controller type the service is using. When using the DescribeServices API,
    this field is omitted if the service is using the ``ECS`` deployment controller type.

    - **type** *(string) --*

      The deployment controller type to use.

      There are three deployment controller types available:

        ECS

      The rolling update (``ECS`` ) deployment type involves replacing the current running
      version of the container with the latest version. The number of containers Amazon ECS
      adds or removes from the service during a rolling update is controlled by adjusting the
      minimum and maximum number of healthy tasks allowed during a service deployment, as
      specified in the  DeploymentConfiguration .

        CODE_DEPLOY

      The blue/green (``CODE_DEPLOY`` ) deployment type uses the blue/green deployment model
      powered by AWS CodeDeploy, which allows you to verify a new deployment of a service
      before sending production traffic to it.

        EXTERNAL

      The external (``EXTERNAL`` ) deployment type enables you to use any third-party
      deployment controller for full control over the deployment process for an Amazon ECS
      service.
    """


_ClientCreateServiceResponseservicedeploymentsnetworkConfigurationawsvpcConfigurationTypeDef = TypedDict(
    "_ClientCreateServiceResponseservicedeploymentsnetworkConfigurationawsvpcConfigurationTypeDef",
    {"subnets": List[str], "securityGroups": List[str], "assignPublicIp": str},
    total=False,
)


class ClientCreateServiceResponseservicedeploymentsnetworkConfigurationawsvpcConfigurationTypeDef(
    _ClientCreateServiceResponseservicedeploymentsnetworkConfigurationawsvpcConfigurationTypeDef
):
    """
    Type definition for `ClientCreateServiceResponseservicedeploymentsnetworkConfiguration` `awsvpcConfiguration`

    The VPC subnets and security groups associated with a task.

    .. note::

      All specified subnets and security groups must be from the same VPC.

    - **subnets** *(list) --*

      The subnets associated with the task or service. There is a limit of 16 subnets
      that can be specified per ``AwsVpcConfiguration`` .

      .. note::

        All specified subnets must be from the same VPC.

      - *(string) --*

    - **securityGroups** *(list) --*

      The security groups associated with the task or service. If you do not specify a
      security group, the default security group for the VPC is used. There is a limit of
      5 security groups that can be specified per ``AwsVpcConfiguration`` .

      .. note::

        All specified security groups must be from the same VPC.

      - *(string) --*

    - **assignPublicIp** *(string) --*

      Whether the task's elastic network interface receives a public IP address. The
      default value is ``DISABLED`` .
    """


_ClientCreateServiceResponseservicedeploymentsnetworkConfigurationTypeDef = TypedDict(
    "_ClientCreateServiceResponseservicedeploymentsnetworkConfigurationTypeDef",
    {
        "awsvpcConfiguration": ClientCreateServiceResponseservicedeploymentsnetworkConfigurationawsvpcConfigurationTypeDef
    },
    total=False,
)


class ClientCreateServiceResponseservicedeploymentsnetworkConfigurationTypeDef(
    _ClientCreateServiceResponseservicedeploymentsnetworkConfigurationTypeDef
):
    """
    Type definition for `ClientCreateServiceResponseservicedeployments` `networkConfiguration`

    The VPC subnet and security group configuration for tasks that receive their own
    elastic network interface by using the ``awsvpc`` networking mode.

    - **awsvpcConfiguration** *(dict) --*

      The VPC subnets and security groups associated with a task.

      .. note::

        All specified subnets and security groups must be from the same VPC.

      - **subnets** *(list) --*

        The subnets associated with the task or service. There is a limit of 16 subnets
        that can be specified per ``AwsVpcConfiguration`` .

        .. note::

          All specified subnets must be from the same VPC.

        - *(string) --*

      - **securityGroups** *(list) --*

        The security groups associated with the task or service. If you do not specify a
        security group, the default security group for the VPC is used. There is a limit of
        5 security groups that can be specified per ``AwsVpcConfiguration`` .

        .. note::

          All specified security groups must be from the same VPC.

        - *(string) --*

      - **assignPublicIp** *(string) --*

        Whether the task's elastic network interface receives a public IP address. The
        default value is ``DISABLED`` .
    """


_ClientCreateServiceResponseservicedeploymentsTypeDef = TypedDict(
    "_ClientCreateServiceResponseservicedeploymentsTypeDef",
    {
        "id": str,
        "status": str,
        "taskDefinition": str,
        "desiredCount": int,
        "pendingCount": int,
        "runningCount": int,
        "createdAt": datetime,
        "updatedAt": datetime,
        "launchType": str,
        "platformVersion": str,
        "networkConfiguration": ClientCreateServiceResponseservicedeploymentsnetworkConfigurationTypeDef,
    },
    total=False,
)


class ClientCreateServiceResponseservicedeploymentsTypeDef(
    _ClientCreateServiceResponseservicedeploymentsTypeDef
):
    """
    Type definition for `ClientCreateServiceResponseservice` `deployments`

    The details of an Amazon ECS service deployment. This is used only when a service uses
    the ``ECS`` deployment controller type.

    - **id** *(string) --*

      The ID of the deployment.

    - **status** *(string) --*

      The status of the deployment. The following describes each state:

        PRIMARY

      The most recent deployment of a service.

        ACTIVE

      A service deployment that still has running tasks, but are in the process of being
      replaced with a new ``PRIMARY`` deployment.

        INACTIVE

      A deployment that has been completely replaced.

    - **taskDefinition** *(string) --*

      The most recent task definition that was specified for the tasks in the service to use.

    - **desiredCount** *(integer) --*

      The most recent desired count of tasks that was specified for the service to deploy or
      maintain.

    - **pendingCount** *(integer) --*

      The number of tasks in the deployment that are in the ``PENDING`` status.

    - **runningCount** *(integer) --*

      The number of tasks in the deployment that are in the ``RUNNING`` status.

    - **createdAt** *(datetime) --*

      The Unix timestamp for when the service deployment was created.

    - **updatedAt** *(datetime) --*

      The Unix timestamp for when the service deployment was last updated.

    - **launchType** *(string) --*

      The launch type the tasks in the service are using. For more information, see `Amazon
      ECS Launch Types
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html>`__ in
      the *Amazon Elastic Container Service Developer Guide* .

    - **platformVersion** *(string) --*

      The platform version on which your tasks in the service are running. A platform version
      is only specified for tasks using the Fargate launch type. If one is not specified, the
      ``LATEST`` platform version is used by default. For more information, see `AWS Fargate
      Platform Versions
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

    - **networkConfiguration** *(dict) --*

      The VPC subnet and security group configuration for tasks that receive their own
      elastic network interface by using the ``awsvpc`` networking mode.

      - **awsvpcConfiguration** *(dict) --*

        The VPC subnets and security groups associated with a task.

        .. note::

          All specified subnets and security groups must be from the same VPC.

        - **subnets** *(list) --*

          The subnets associated with the task or service. There is a limit of 16 subnets
          that can be specified per ``AwsVpcConfiguration`` .

          .. note::

            All specified subnets must be from the same VPC.

          - *(string) --*

        - **securityGroups** *(list) --*

          The security groups associated with the task or service. If you do not specify a
          security group, the default security group for the VPC is used. There is a limit of
          5 security groups that can be specified per ``AwsVpcConfiguration`` .

          .. note::

            All specified security groups must be from the same VPC.

          - *(string) --*

        - **assignPublicIp** *(string) --*

          Whether the task's elastic network interface receives a public IP address. The
          default value is ``DISABLED`` .
    """


_ClientCreateServiceResponseserviceeventsTypeDef = TypedDict(
    "_ClientCreateServiceResponseserviceeventsTypeDef",
    {"id": str, "createdAt": datetime, "message": str},
    total=False,
)


class ClientCreateServiceResponseserviceeventsTypeDef(
    _ClientCreateServiceResponseserviceeventsTypeDef
):
    """
    Type definition for `ClientCreateServiceResponseservice` `events`

    Details on an event associated with a service.

    - **id** *(string) --*

      The ID string of the event.

    - **createdAt** *(datetime) --*

      The Unix timestamp for when the event was triggered.

    - **message** *(string) --*

      The event message.
    """


_ClientCreateServiceResponseserviceloadBalancersTypeDef = TypedDict(
    "_ClientCreateServiceResponseserviceloadBalancersTypeDef",
    {
        "targetGroupArn": str,
        "loadBalancerName": str,
        "containerName": str,
        "containerPort": int,
    },
    total=False,
)


class ClientCreateServiceResponseserviceloadBalancersTypeDef(
    _ClientCreateServiceResponseserviceloadBalancersTypeDef
):
    """
    Type definition for `ClientCreateServiceResponseservice` `loadBalancers`

    Details on the load balancer or load balancers to use with a service or task set.

    - **targetGroupArn** *(string) --*

      The full Amazon Resource Name (ARN) of the Elastic Load Balancing target group or
      groups associated with a service or task set.

      A target group ARN is only specified when using an Application Load Balancer or Network
      Load Balancer. If you are using a Classic Load Balancer this should be omitted.

      For services using the ``ECS`` deployment controller, you can specify one or multiple
      target groups. For more information, see `Registering Multiple Target Groups with a
      Service
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

      For services using the ``CODE_DEPLOY`` deployment controller, you are required to
      define two target groups for the load balancer. For more information, see `Blue/Green
      Deployment with CodeDeploy
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-bluegreen.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

      .. warning::

        If your service's task definition uses the ``awsvpc`` network mode (which is required
        for the Fargate launch type), you must choose ``ip`` as the target type, not
        ``instance`` , when creating your target groups because tasks that use the ``awsvpc``
        network mode are associated with an elastic network interface, not an Amazon EC2
        instance.

    - **loadBalancerName** *(string) --*

      The name of the load balancer to associate with the Amazon ECS service or task set.

      A load balancer name is only specified when using a Classic Load Balancer. If you are
      using an Application Load Balancer or a Network Load Balancer this should be omitted.

    - **containerName** *(string) --*

      The name of the container (as it appears in a container definition) to associate with
      the load balancer.

    - **containerPort** *(integer) --*

      The port on the container to associate with the load balancer. This port must
      correspond to a ``containerPort`` in the task definition the tasks in the service are
      using. For tasks that use the EC2 launch type, the container instance they are launched
      on must allow ingress traffic on the ``hostPort`` of the port mapping.
    """


_ClientCreateServiceResponseservicenetworkConfigurationawsvpcConfigurationTypeDef = TypedDict(
    "_ClientCreateServiceResponseservicenetworkConfigurationawsvpcConfigurationTypeDef",
    {"subnets": List[str], "securityGroups": List[str], "assignPublicIp": str},
    total=False,
)


class ClientCreateServiceResponseservicenetworkConfigurationawsvpcConfigurationTypeDef(
    _ClientCreateServiceResponseservicenetworkConfigurationawsvpcConfigurationTypeDef
):
    """
    Type definition for `ClientCreateServiceResponseservicenetworkConfiguration` `awsvpcConfiguration`

    The VPC subnets and security groups associated with a task.

    .. note::

      All specified subnets and security groups must be from the same VPC.

    - **subnets** *(list) --*

      The subnets associated with the task or service. There is a limit of 16 subnets that
      can be specified per ``AwsVpcConfiguration`` .

      .. note::

        All specified subnets must be from the same VPC.

      - *(string) --*

    - **securityGroups** *(list) --*

      The security groups associated with the task or service. If you do not specify a
      security group, the default security group for the VPC is used. There is a limit of 5
      security groups that can be specified per ``AwsVpcConfiguration`` .

      .. note::

        All specified security groups must be from the same VPC.

      - *(string) --*

    - **assignPublicIp** *(string) --*

      Whether the task's elastic network interface receives a public IP address. The default
      value is ``DISABLED`` .
    """


_ClientCreateServiceResponseservicenetworkConfigurationTypeDef = TypedDict(
    "_ClientCreateServiceResponseservicenetworkConfigurationTypeDef",
    {
        "awsvpcConfiguration": ClientCreateServiceResponseservicenetworkConfigurationawsvpcConfigurationTypeDef
    },
    total=False,
)


class ClientCreateServiceResponseservicenetworkConfigurationTypeDef(
    _ClientCreateServiceResponseservicenetworkConfigurationTypeDef
):
    """
    Type definition for `ClientCreateServiceResponseservice` `networkConfiguration`

    The VPC subnet and security group configuration for tasks that receive their own elastic
    network interface by using the ``awsvpc`` networking mode.

    - **awsvpcConfiguration** *(dict) --*

      The VPC subnets and security groups associated with a task.

      .. note::

        All specified subnets and security groups must be from the same VPC.

      - **subnets** *(list) --*

        The subnets associated with the task or service. There is a limit of 16 subnets that
        can be specified per ``AwsVpcConfiguration`` .

        .. note::

          All specified subnets must be from the same VPC.

        - *(string) --*

      - **securityGroups** *(list) --*

        The security groups associated with the task or service. If you do not specify a
        security group, the default security group for the VPC is used. There is a limit of 5
        security groups that can be specified per ``AwsVpcConfiguration`` .

        .. note::

          All specified security groups must be from the same VPC.

        - *(string) --*

      - **assignPublicIp** *(string) --*

        Whether the task's elastic network interface receives a public IP address. The default
        value is ``DISABLED`` .
    """


_ClientCreateServiceResponseserviceplacementConstraintsTypeDef = TypedDict(
    "_ClientCreateServiceResponseserviceplacementConstraintsTypeDef",
    {"type": str, "expression": str},
    total=False,
)


class ClientCreateServiceResponseserviceplacementConstraintsTypeDef(
    _ClientCreateServiceResponseserviceplacementConstraintsTypeDef
):
    """
    Type definition for `ClientCreateServiceResponseservice` `placementConstraints`

    An object representing a constraint on task placement. For more information, see `Task
    Placement Constraints
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html>`__
    in the *Amazon Elastic Container Service Developer Guide* .

    .. note::

      If you are using the Fargate launch type, task placement constraints are not supported.

    - **type** *(string) --*

      The type of constraint. Use ``distinctInstance`` to ensure that each task in a
      particular group is running on a different container instance. Use ``memberOf`` to
      restrict the selection to a group of valid candidates.

    - **expression** *(string) --*

      A cluster query language expression to apply to the constraint. You cannot specify an
      expression if the constraint type is ``distinctInstance`` . For more information, see
      `Cluster Query Language
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .
    """


_ClientCreateServiceResponseserviceplacementStrategyTypeDef = TypedDict(
    "_ClientCreateServiceResponseserviceplacementStrategyTypeDef",
    {"type": str, "field": str},
    total=False,
)


class ClientCreateServiceResponseserviceplacementStrategyTypeDef(
    _ClientCreateServiceResponseserviceplacementStrategyTypeDef
):
    """
    Type definition for `ClientCreateServiceResponseservice` `placementStrategy`

    The task placement strategy for a task or service. For more information, see `Task
    Placement Strategies
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-strategies.html>`__
    in the *Amazon Elastic Container Service Developer Guide* .

    - **type** *(string) --*

      The type of placement strategy. The ``random`` placement strategy randomly places tasks
      on available candidates. The ``spread`` placement strategy spreads placement across
      available candidates evenly based on the ``field`` parameter. The ``binpack`` strategy
      places tasks on available candidates that have the least available amount of the
      resource that is specified with the ``field`` parameter. For example, if you binpack on
      memory, a task is placed on the instance with the least amount of remaining memory (but
      still enough to run the task).

    - **field** *(string) --*

      The field to apply the placement strategy against. For the ``spread`` placement
      strategy, valid values are ``instanceId`` (or ``host`` , which has the same effect), or
      any platform or custom attribute that is applied to a container instance, such as
      ``attribute:ecs.availability-zone`` . For the ``binpack`` placement strategy, valid
      values are ``cpu`` and ``memory`` . For the ``random`` placement strategy, this field
      is not used.
    """


_ClientCreateServiceResponseserviceserviceRegistriesTypeDef = TypedDict(
    "_ClientCreateServiceResponseserviceserviceRegistriesTypeDef",
    {"registryArn": str, "port": int, "containerName": str, "containerPort": int},
    total=False,
)


class ClientCreateServiceResponseserviceserviceRegistriesTypeDef(
    _ClientCreateServiceResponseserviceserviceRegistriesTypeDef
):
    """
    Type definition for `ClientCreateServiceResponseservice` `serviceRegistries`

    Details of the service registry.

    - **registryArn** *(string) --*

      The Amazon Resource Name (ARN) of the service registry. The currently supported service
      registry is AWS Cloud Map. For more information, see `CreateService
      <https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html>`__ .

    - **port** *(integer) --*

      The port value used if your service discovery service specified an SRV record. This
      field may be used if both the ``awsvpc`` network mode and SRV records are used.

    - **containerName** *(string) --*

      The container name value, already specified in the task definition, to be used for your
      service discovery service. If the task definition that your service task specifies uses
      the ``bridge`` or ``host`` network mode, you must specify a ``containerName`` and
      ``containerPort`` combination from the task definition. If the task definition that
      your service task specifies uses the ``awsvpc`` network mode and a type SRV DNS record
      is used, you must specify either a ``containerName`` and ``containerPort`` combination
      or a ``port`` value, but not both.

    - **containerPort** *(integer) --*

      The port value, already specified in the task definition, to be used for your service
      discovery service. If the task definition your service task specifies uses the
      ``bridge`` or ``host`` network mode, you must specify a ``containerName`` and
      ``containerPort`` combination from the task definition. If the task definition your
      service task specifies uses the ``awsvpc`` network mode and a type SRV DNS record is
      used, you must specify either a ``containerName`` and ``containerPort`` combination or
      a ``port`` value, but not both.
    """


_ClientCreateServiceResponseservicetagsTypeDef = TypedDict(
    "_ClientCreateServiceResponseservicetagsTypeDef",
    {"key": str, "value": str},
    total=False,
)


class ClientCreateServiceResponseservicetagsTypeDef(
    _ClientCreateServiceResponseservicetagsTypeDef
):
    """
    Type definition for `ClientCreateServiceResponseservice` `tags`

    The metadata that you apply to a resource to help you categorize and organize them. Each
    tag consists of a key and an optional value, both of which you define.

    The following basic restrictions apply to tags:

    * Maximum number of tags per resource - 50

    * For each resource, each tag key must be unique, and each tag key can have only one
    value.

    * Maximum key length - 128 Unicode characters in UTF-8

    * Maximum value length - 256 Unicode characters in UTF-8

    * If your tagging schema is used across multiple services and resources, remember that
    other services may have restrictions on allowed characters. Generally allowed characters
    are: letters, numbers, and spaces representable in UTF-8, and the following characters: +
    - = . _ : / @.

    * Tag keys and values are case-sensitive.

    * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
    prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
    tag keys or values with this prefix. Tags with this prefix do not count against your tags
    per resource limit.

    - **key** *(string) --*

      One part of a key-value pair that make up a tag. A ``key`` is a general label that acts
      like a category for more specific tag values.

    - **value** *(string) --*

      The optional part of a key-value pair that make up a tag. A ``value`` acts as a
      descriptor within a tag category (key).
    """


_ClientCreateServiceResponseservicetaskSetsloadBalancersTypeDef = TypedDict(
    "_ClientCreateServiceResponseservicetaskSetsloadBalancersTypeDef",
    {
        "targetGroupArn": str,
        "loadBalancerName": str,
        "containerName": str,
        "containerPort": int,
    },
    total=False,
)


class ClientCreateServiceResponseservicetaskSetsloadBalancersTypeDef(
    _ClientCreateServiceResponseservicetaskSetsloadBalancersTypeDef
):
    """
    Type definition for `ClientCreateServiceResponseservicetaskSets` `loadBalancers`

    Details on the load balancer or load balancers to use with a service or task set.

    - **targetGroupArn** *(string) --*

      The full Amazon Resource Name (ARN) of the Elastic Load Balancing target group or
      groups associated with a service or task set.

      A target group ARN is only specified when using an Application Load Balancer or
      Network Load Balancer. If you are using a Classic Load Balancer this should be
      omitted.

      For services using the ``ECS`` deployment controller, you can specify one or
      multiple target groups. For more information, see `Registering Multiple Target
      Groups with a Service
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

      For services using the ``CODE_DEPLOY`` deployment controller, you are required to
      define two target groups for the load balancer. For more information, see
      `Blue/Green Deployment with CodeDeploy
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-bluegreen.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

      .. warning::

        If your service's task definition uses the ``awsvpc`` network mode (which is
        required for the Fargate launch type), you must choose ``ip`` as the target type,
        not ``instance`` , when creating your target groups because tasks that use the
        ``awsvpc`` network mode are associated with an elastic network interface, not an
        Amazon EC2 instance.

    - **loadBalancerName** *(string) --*

      The name of the load balancer to associate with the Amazon ECS service or task set.

      A load balancer name is only specified when using a Classic Load Balancer. If you
      are using an Application Load Balancer or a Network Load Balancer this should be
      omitted.

    - **containerName** *(string) --*

      The name of the container (as it appears in a container definition) to associate
      with the load balancer.

    - **containerPort** *(integer) --*

      The port on the container to associate with the load balancer. This port must
      correspond to a ``containerPort`` in the task definition the tasks in the service
      are using. For tasks that use the EC2 launch type, the container instance they are
      launched on must allow ingress traffic on the ``hostPort`` of the port mapping.
    """


_ClientCreateServiceResponseservicetaskSetsnetworkConfigurationawsvpcConfigurationTypeDef = TypedDict(
    "_ClientCreateServiceResponseservicetaskSetsnetworkConfigurationawsvpcConfigurationTypeDef",
    {"subnets": List[str], "securityGroups": List[str], "assignPublicIp": str},
    total=False,
)


class ClientCreateServiceResponseservicetaskSetsnetworkConfigurationawsvpcConfigurationTypeDef(
    _ClientCreateServiceResponseservicetaskSetsnetworkConfigurationawsvpcConfigurationTypeDef
):
    """
    Type definition for `ClientCreateServiceResponseservicetaskSetsnetworkConfiguration` `awsvpcConfiguration`

    The VPC subnets and security groups associated with a task.

    .. note::

      All specified subnets and security groups must be from the same VPC.

    - **subnets** *(list) --*

      The subnets associated with the task or service. There is a limit of 16 subnets
      that can be specified per ``AwsVpcConfiguration`` .

      .. note::

        All specified subnets must be from the same VPC.

      - *(string) --*

    - **securityGroups** *(list) --*

      The security groups associated with the task or service. If you do not specify a
      security group, the default security group for the VPC is used. There is a limit of
      5 security groups that can be specified per ``AwsVpcConfiguration`` .

      .. note::

        All specified security groups must be from the same VPC.

      - *(string) --*

    - **assignPublicIp** *(string) --*

      Whether the task's elastic network interface receives a public IP address. The
      default value is ``DISABLED`` .
    """


_ClientCreateServiceResponseservicetaskSetsnetworkConfigurationTypeDef = TypedDict(
    "_ClientCreateServiceResponseservicetaskSetsnetworkConfigurationTypeDef",
    {
        "awsvpcConfiguration": ClientCreateServiceResponseservicetaskSetsnetworkConfigurationawsvpcConfigurationTypeDef
    },
    total=False,
)


class ClientCreateServiceResponseservicetaskSetsnetworkConfigurationTypeDef(
    _ClientCreateServiceResponseservicetaskSetsnetworkConfigurationTypeDef
):
    """
    Type definition for `ClientCreateServiceResponseservicetaskSets` `networkConfiguration`

    The network configuration for the task set.

    - **awsvpcConfiguration** *(dict) --*

      The VPC subnets and security groups associated with a task.

      .. note::

        All specified subnets and security groups must be from the same VPC.

      - **subnets** *(list) --*

        The subnets associated with the task or service. There is a limit of 16 subnets
        that can be specified per ``AwsVpcConfiguration`` .

        .. note::

          All specified subnets must be from the same VPC.

        - *(string) --*

      - **securityGroups** *(list) --*

        The security groups associated with the task or service. If you do not specify a
        security group, the default security group for the VPC is used. There is a limit of
        5 security groups that can be specified per ``AwsVpcConfiguration`` .

        .. note::

          All specified security groups must be from the same VPC.

        - *(string) --*

      - **assignPublicIp** *(string) --*

        Whether the task's elastic network interface receives a public IP address. The
        default value is ``DISABLED`` .
    """


_ClientCreateServiceResponseservicetaskSetsscaleTypeDef = TypedDict(
    "_ClientCreateServiceResponseservicetaskSetsscaleTypeDef",
    {"value": float, "unit": str},
    total=False,
)


class ClientCreateServiceResponseservicetaskSetsscaleTypeDef(
    _ClientCreateServiceResponseservicetaskSetsscaleTypeDef
):
    """
    Type definition for `ClientCreateServiceResponseservicetaskSets` `scale`

    A floating-point percentage of the desired number of tasks to place and keep running in
    the task set.

    - **value** *(float) --*

      The value, specified as a percent total of a service's ``desiredCount`` , to scale
      the task set. Accepted values are numbers between 0 and 100.

    - **unit** *(string) --*

      The unit of measure for the scale value.
    """


_ClientCreateServiceResponseservicetaskSetsserviceRegistriesTypeDef = TypedDict(
    "_ClientCreateServiceResponseservicetaskSetsserviceRegistriesTypeDef",
    {"registryArn": str, "port": int, "containerName": str, "containerPort": int},
    total=False,
)


class ClientCreateServiceResponseservicetaskSetsserviceRegistriesTypeDef(
    _ClientCreateServiceResponseservicetaskSetsserviceRegistriesTypeDef
):
    """
    Type definition for `ClientCreateServiceResponseservicetaskSets` `serviceRegistries`

    Details of the service registry.

    - **registryArn** *(string) --*

      The Amazon Resource Name (ARN) of the service registry. The currently supported
      service registry is AWS Cloud Map. For more information, see `CreateService
      <https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html>`__ .

    - **port** *(integer) --*

      The port value used if your service discovery service specified an SRV record. This
      field may be used if both the ``awsvpc`` network mode and SRV records are used.

    - **containerName** *(string) --*

      The container name value, already specified in the task definition, to be used for
      your service discovery service. If the task definition that your service task
      specifies uses the ``bridge`` or ``host`` network mode, you must specify a
      ``containerName`` and ``containerPort`` combination from the task definition. If
      the task definition that your service task specifies uses the ``awsvpc`` network
      mode and a type SRV DNS record is used, you must specify either a ``containerName``
      and ``containerPort`` combination or a ``port`` value, but not both.

    - **containerPort** *(integer) --*

      The port value, already specified in the task definition, to be used for your
      service discovery service. If the task definition your service task specifies uses
      the ``bridge`` or ``host`` network mode, you must specify a ``containerName`` and
      ``containerPort`` combination from the task definition. If the task definition your
      service task specifies uses the ``awsvpc`` network mode and a type SRV DNS record
      is used, you must specify either a ``containerName`` and ``containerPort``
      combination or a ``port`` value, but not both.
    """


_ClientCreateServiceResponseservicetaskSetsTypeDef = TypedDict(
    "_ClientCreateServiceResponseservicetaskSetsTypeDef",
    {
        "id": str,
        "taskSetArn": str,
        "serviceArn": str,
        "clusterArn": str,
        "startedBy": str,
        "externalId": str,
        "status": str,
        "taskDefinition": str,
        "computedDesiredCount": int,
        "pendingCount": int,
        "runningCount": int,
        "createdAt": datetime,
        "updatedAt": datetime,
        "launchType": str,
        "platformVersion": str,
        "networkConfiguration": ClientCreateServiceResponseservicetaskSetsnetworkConfigurationTypeDef,
        "loadBalancers": List[
            ClientCreateServiceResponseservicetaskSetsloadBalancersTypeDef
        ],
        "serviceRegistries": List[
            ClientCreateServiceResponseservicetaskSetsserviceRegistriesTypeDef
        ],
        "scale": ClientCreateServiceResponseservicetaskSetsscaleTypeDef,
        "stabilityStatus": str,
        "stabilityStatusAt": datetime,
    },
    total=False,
)


class ClientCreateServiceResponseservicetaskSetsTypeDef(
    _ClientCreateServiceResponseservicetaskSetsTypeDef
):
    """
    Type definition for `ClientCreateServiceResponseservice` `taskSets`

    Information about a set of Amazon ECS tasks in either an AWS CodeDeploy or an
    ``EXTERNAL`` deployment. An Amazon ECS task set includes details such as the desired
    number of tasks, how many tasks are running, and whether the task set serves production
    traffic.

    - **id** *(string) --*

      The ID of the task set.

    - **taskSetArn** *(string) --*

      The Amazon Resource Name (ARN) of the task set.

    - **serviceArn** *(string) --*

      The Amazon Resource Name (ARN) of the service the task set exists in.

    - **clusterArn** *(string) --*

      The Amazon Resource Name (ARN) of the cluster that the service that hosts the task set
      exists in.

    - **startedBy** *(string) --*

      The tag specified when a task set is started. If the task set is created by an AWS
      CodeDeploy deployment, the ``startedBy`` parameter is ``CODE_DEPLOY`` . For a task set
      created for an external deployment, the startedBy field isn't used.

    - **externalId** *(string) --*

      The external ID associated with the task set.

      If a task set is created by an AWS CodeDeploy deployment, the ``externalId`` parameter
      contains the AWS CodeDeploy deployment ID.

      If a task set is created for an external deployment and is associated with a service
      discovery registry, the ``externalId`` parameter contains the
      ``ECS_TASK_SET_EXTERNAL_ID`` AWS Cloud Map attribute.

    - **status** *(string) --*

      The status of the task set. The following describes each state:

        PRIMARY

      The task set is serving production traffic.

        ACTIVE

      The task set is not serving production traffic.

        DRAINING

      The tasks in the task set are being stopped and their corresponding targets are being
      deregistered from their target group.

    - **taskDefinition** *(string) --*

      The task definition the task set is using.

    - **computedDesiredCount** *(integer) --*

      The computed desired count for the task set. This is calculated by multiplying the
      service's ``desiredCount`` by the task set's ``scale`` percentage. The result is always
      rounded up. For example, if the computed desired count is 1.2, it rounds up to 2 tasks.

    - **pendingCount** *(integer) --*

      The number of tasks in the task set that are in the ``PENDING`` status during a
      deployment. A task in the ``PENDING`` state is preparing to enter the ``RUNNING``
      state. A task set enters the ``PENDING`` status when it launches for the first time or
      when it is restarted after being in the ``STOPPED`` state.

    - **runningCount** *(integer) --*

      The number of tasks in the task set that are in the ``RUNNING`` status during a
      deployment. A task in the ``RUNNING`` state is running and ready for use.

    - **createdAt** *(datetime) --*

      The Unix timestamp for when the task set was created.

    - **updatedAt** *(datetime) --*

      The Unix timestamp for when the task set was last updated.

    - **launchType** *(string) --*

      The launch type the tasks in the task set are using. For more information, see `Amazon
      ECS Launch Types
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html>`__ in
      the *Amazon Elastic Container Service Developer Guide* .

    - **platformVersion** *(string) --*

      The platform version on which the tasks in the task set are running. A platform version
      is only specified for tasks using the Fargate launch type. If one is not specified, the
      ``LATEST`` platform version is used by default. For more information, see `AWS Fargate
      Platform Versions
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

    - **networkConfiguration** *(dict) --*

      The network configuration for the task set.

      - **awsvpcConfiguration** *(dict) --*

        The VPC subnets and security groups associated with a task.

        .. note::

          All specified subnets and security groups must be from the same VPC.

        - **subnets** *(list) --*

          The subnets associated with the task or service. There is a limit of 16 subnets
          that can be specified per ``AwsVpcConfiguration`` .

          .. note::

            All specified subnets must be from the same VPC.

          - *(string) --*

        - **securityGroups** *(list) --*

          The security groups associated with the task or service. If you do not specify a
          security group, the default security group for the VPC is used. There is a limit of
          5 security groups that can be specified per ``AwsVpcConfiguration`` .

          .. note::

            All specified security groups must be from the same VPC.

          - *(string) --*

        - **assignPublicIp** *(string) --*

          Whether the task's elastic network interface receives a public IP address. The
          default value is ``DISABLED`` .

    - **loadBalancers** *(list) --*

      Details on a load balancer that is used with a task set.

      - *(dict) --*

        Details on the load balancer or load balancers to use with a service or task set.

        - **targetGroupArn** *(string) --*

          The full Amazon Resource Name (ARN) of the Elastic Load Balancing target group or
          groups associated with a service or task set.

          A target group ARN is only specified when using an Application Load Balancer or
          Network Load Balancer. If you are using a Classic Load Balancer this should be
          omitted.

          For services using the ``ECS`` deployment controller, you can specify one or
          multiple target groups. For more information, see `Registering Multiple Target
          Groups with a Service
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

          For services using the ``CODE_DEPLOY`` deployment controller, you are required to
          define two target groups for the load balancer. For more information, see
          `Blue/Green Deployment with CodeDeploy
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-bluegreen.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

          .. warning::

            If your service's task definition uses the ``awsvpc`` network mode (which is
            required for the Fargate launch type), you must choose ``ip`` as the target type,
            not ``instance`` , when creating your target groups because tasks that use the
            ``awsvpc`` network mode are associated with an elastic network interface, not an
            Amazon EC2 instance.

        - **loadBalancerName** *(string) --*

          The name of the load balancer to associate with the Amazon ECS service or task set.

          A load balancer name is only specified when using a Classic Load Balancer. If you
          are using an Application Load Balancer or a Network Load Balancer this should be
          omitted.

        - **containerName** *(string) --*

          The name of the container (as it appears in a container definition) to associate
          with the load balancer.

        - **containerPort** *(integer) --*

          The port on the container to associate with the load balancer. This port must
          correspond to a ``containerPort`` in the task definition the tasks in the service
          are using. For tasks that use the EC2 launch type, the container instance they are
          launched on must allow ingress traffic on the ``hostPort`` of the port mapping.

    - **serviceRegistries** *(list) --*

      The details of the service discovery registries to assign to this task set. For more
      information, see `Service Discovery
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html>`__
      .

      - *(dict) --*

        Details of the service registry.

        - **registryArn** *(string) --*

          The Amazon Resource Name (ARN) of the service registry. The currently supported
          service registry is AWS Cloud Map. For more information, see `CreateService
          <https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html>`__ .

        - **port** *(integer) --*

          The port value used if your service discovery service specified an SRV record. This
          field may be used if both the ``awsvpc`` network mode and SRV records are used.

        - **containerName** *(string) --*

          The container name value, already specified in the task definition, to be used for
          your service discovery service. If the task definition that your service task
          specifies uses the ``bridge`` or ``host`` network mode, you must specify a
          ``containerName`` and ``containerPort`` combination from the task definition. If
          the task definition that your service task specifies uses the ``awsvpc`` network
          mode and a type SRV DNS record is used, you must specify either a ``containerName``
          and ``containerPort`` combination or a ``port`` value, but not both.

        - **containerPort** *(integer) --*

          The port value, already specified in the task definition, to be used for your
          service discovery service. If the task definition your service task specifies uses
          the ``bridge`` or ``host`` network mode, you must specify a ``containerName`` and
          ``containerPort`` combination from the task definition. If the task definition your
          service task specifies uses the ``awsvpc`` network mode and a type SRV DNS record
          is used, you must specify either a ``containerName`` and ``containerPort``
          combination or a ``port`` value, but not both.

    - **scale** *(dict) --*

      A floating-point percentage of the desired number of tasks to place and keep running in
      the task set.

      - **value** *(float) --*

        The value, specified as a percent total of a service's ``desiredCount`` , to scale
        the task set. Accepted values are numbers between 0 and 100.

      - **unit** *(string) --*

        The unit of measure for the scale value.

    - **stabilityStatus** *(string) --*

      The stability status, which indicates whether the task set has reached a steady state.
      If the following conditions are met, the task set will be in ``STEADY_STATE`` :

      * The task ``runningCount`` is equal to the ``computedDesiredCount`` .

      * The ``pendingCount`` is ``0`` .

      * There are no tasks running on container instances in the ``DRAINING`` status.

      * All tasks are reporting a healthy status from the load balancers, service discovery,
      and container health checks.

      If any of those conditions are not met, the stability status returns ``STABILIZING`` .

    - **stabilityStatusAt** *(datetime) --*

      The Unix timestamp for when the task set stability status was retrieved.
    """


_ClientCreateServiceResponseserviceTypeDef = TypedDict(
    "_ClientCreateServiceResponseserviceTypeDef",
    {
        "serviceArn": str,
        "serviceName": str,
        "clusterArn": str,
        "loadBalancers": List[ClientCreateServiceResponseserviceloadBalancersTypeDef],
        "serviceRegistries": List[
            ClientCreateServiceResponseserviceserviceRegistriesTypeDef
        ],
        "status": str,
        "desiredCount": int,
        "runningCount": int,
        "pendingCount": int,
        "launchType": str,
        "platformVersion": str,
        "taskDefinition": str,
        "deploymentConfiguration": ClientCreateServiceResponseservicedeploymentConfigurationTypeDef,
        "taskSets": List[ClientCreateServiceResponseservicetaskSetsTypeDef],
        "deployments": List[ClientCreateServiceResponseservicedeploymentsTypeDef],
        "roleArn": str,
        "events": List[ClientCreateServiceResponseserviceeventsTypeDef],
        "createdAt": datetime,
        "placementConstraints": List[
            ClientCreateServiceResponseserviceplacementConstraintsTypeDef
        ],
        "placementStrategy": List[
            ClientCreateServiceResponseserviceplacementStrategyTypeDef
        ],
        "networkConfiguration": ClientCreateServiceResponseservicenetworkConfigurationTypeDef,
        "healthCheckGracePeriodSeconds": int,
        "schedulingStrategy": str,
        "deploymentController": ClientCreateServiceResponseservicedeploymentControllerTypeDef,
        "tags": List[ClientCreateServiceResponseservicetagsTypeDef],
        "createdBy": str,
        "enableECSManagedTags": bool,
        "propagateTags": str,
    },
    total=False,
)


class ClientCreateServiceResponseserviceTypeDef(
    _ClientCreateServiceResponseserviceTypeDef
):
    """
    Type definition for `ClientCreateServiceResponse` `service`

    The full description of your service following the create call.

    If a service is using the ``ECS`` deployment controller, the ``deploymentController`` and
    ``taskSets`` parameters will not be returned.

    If the service is using the ``CODE_DEPLOY`` deployment controller, the
    ``deploymentController`` , ``taskSets`` and ``deployments`` parameters will be returned,
    however the ``deployments`` parameter will be an empty list.

    - **serviceArn** *(string) --*

      The ARN that identifies the service. The ARN contains the ``arn:aws:ecs`` namespace,
      followed by the Region of the service, the AWS account ID of the service owner, the
      ``service`` namespace, and then the service name. For example,
      ``arn:aws:ecs:region:012345678910:service/my-service`` .

    - **serviceName** *(string) --*

      The name of your service. Up to 255 letters (uppercase and lowercase), numbers, and hyphens
      are allowed. Service names must be unique within a cluster, but you can have similarly
      named services in multiple clusters within a Region or across multiple Regions.

    - **clusterArn** *(string) --*

      The Amazon Resource Name (ARN) of the cluster that hosts the service.

    - **loadBalancers** *(list) --*

      A list of Elastic Load Balancing load balancer objects, containing the load balancer name,
      the container name (as it appears in a container definition), and the container port to
      access from the load balancer.

      - *(dict) --*

        Details on the load balancer or load balancers to use with a service or task set.

        - **targetGroupArn** *(string) --*

          The full Amazon Resource Name (ARN) of the Elastic Load Balancing target group or
          groups associated with a service or task set.

          A target group ARN is only specified when using an Application Load Balancer or Network
          Load Balancer. If you are using a Classic Load Balancer this should be omitted.

          For services using the ``ECS`` deployment controller, you can specify one or multiple
          target groups. For more information, see `Registering Multiple Target Groups with a
          Service
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

          For services using the ``CODE_DEPLOY`` deployment controller, you are required to
          define two target groups for the load balancer. For more information, see `Blue/Green
          Deployment with CodeDeploy
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-bluegreen.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

          .. warning::

            If your service's task definition uses the ``awsvpc`` network mode (which is required
            for the Fargate launch type), you must choose ``ip`` as the target type, not
            ``instance`` , when creating your target groups because tasks that use the ``awsvpc``
            network mode are associated with an elastic network interface, not an Amazon EC2
            instance.

        - **loadBalancerName** *(string) --*

          The name of the load balancer to associate with the Amazon ECS service or task set.

          A load balancer name is only specified when using a Classic Load Balancer. If you are
          using an Application Load Balancer or a Network Load Balancer this should be omitted.

        - **containerName** *(string) --*

          The name of the container (as it appears in a container definition) to associate with
          the load balancer.

        - **containerPort** *(integer) --*

          The port on the container to associate with the load balancer. This port must
          correspond to a ``containerPort`` in the task definition the tasks in the service are
          using. For tasks that use the EC2 launch type, the container instance they are launched
          on must allow ingress traffic on the ``hostPort`` of the port mapping.

    - **serviceRegistries** *(list) --*

      The details of the service discovery registries to assign to this service. For more
      information, see `Service Discovery
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html>`__ .

      - *(dict) --*

        Details of the service registry.

        - **registryArn** *(string) --*

          The Amazon Resource Name (ARN) of the service registry. The currently supported service
          registry is AWS Cloud Map. For more information, see `CreateService
          <https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html>`__ .

        - **port** *(integer) --*

          The port value used if your service discovery service specified an SRV record. This
          field may be used if both the ``awsvpc`` network mode and SRV records are used.

        - **containerName** *(string) --*

          The container name value, already specified in the task definition, to be used for your
          service discovery service. If the task definition that your service task specifies uses
          the ``bridge`` or ``host`` network mode, you must specify a ``containerName`` and
          ``containerPort`` combination from the task definition. If the task definition that
          your service task specifies uses the ``awsvpc`` network mode and a type SRV DNS record
          is used, you must specify either a ``containerName`` and ``containerPort`` combination
          or a ``port`` value, but not both.

        - **containerPort** *(integer) --*

          The port value, already specified in the task definition, to be used for your service
          discovery service. If the task definition your service task specifies uses the
          ``bridge`` or ``host`` network mode, you must specify a ``containerName`` and
          ``containerPort`` combination from the task definition. If the task definition your
          service task specifies uses the ``awsvpc`` network mode and a type SRV DNS record is
          used, you must specify either a ``containerName`` and ``containerPort`` combination or
          a ``port`` value, but not both.

    - **status** *(string) --*

      The status of the service. The valid values are ``ACTIVE`` , ``DRAINING`` , or ``INACTIVE``
      .

    - **desiredCount** *(integer) --*

      The desired number of instantiations of the task definition to keep running on the service.
      This value is specified when the service is created with  CreateService , and it can be
      modified with  UpdateService .

    - **runningCount** *(integer) --*

      The number of tasks in the cluster that are in the ``RUNNING`` state.

    - **pendingCount** *(integer) --*

      The number of tasks in the cluster that are in the ``PENDING`` state.

    - **launchType** *(string) --*

      The launch type on which your service is running. If no value is specified, it will default
      to ``EC2`` . Valid values include ``EC2`` and ``FARGATE`` . For more information, see
      `Amazon ECS Launch Types
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html>`__ in the
      *Amazon Elastic Container Service Developer Guide* .

    - **platformVersion** *(string) --*

      The platform version on which to run your service. A platform version is only specified for
      tasks using the Fargate launch type. If one is not specified, the ``LATEST`` platform
      version is used by default. For more information, see `AWS Fargate Platform Versions
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html>`__ in
      the *Amazon Elastic Container Service Developer Guide* .

    - **taskDefinition** *(string) --*

      The task definition to use for tasks in the service. This value is specified when the
      service is created with  CreateService , and it can be modified with  UpdateService .

    - **deploymentConfiguration** *(dict) --*

      Optional deployment parameters that control how many tasks run during the deployment and
      the ordering of stopping and starting tasks.

      - **maximumPercent** *(integer) --*

        If a service is using the rolling update (``ECS`` ) deployment type, the **maximum
        percent** parameter represents an upper limit on the number of tasks in a service that
        are allowed in the ``RUNNING`` or ``PENDING`` state during a deployment, as a percentage
        of the desired number of tasks (rounded down to the nearest integer), and while any
        container instances are in the ``DRAINING`` state if the service contains tasks using the
        EC2 launch type. This parameter enables you to define the deployment batch size. For
        example, if your service has a desired number of four tasks and a maximum percent value
        of 200%, the scheduler may start four new tasks before stopping the four older tasks
        (provided that the cluster resources required to do this are available). The default
        value for maximum percent is 200%.

        If a service is using the blue/green (``CODE_DEPLOY`` ) or ``EXTERNAL`` deployment types
        and tasks that use the EC2 launch type, the **maximum percent** value is set to the
        default value and is used to define the upper limit on the number of the tasks in the
        service that remain in the ``RUNNING`` state while the container instances are in the
        ``DRAINING`` state. If the tasks in the service use the Fargate launch type, the maximum
        percent value is not used, although it is returned when describing your service.

      - **minimumHealthyPercent** *(integer) --*

        If a service is using the rolling update (``ECS`` ) deployment type, the **minimum
        healthy percent** represents a lower limit on the number of tasks in a service that must
        remain in the ``RUNNING`` state during a deployment, as a percentage of the desired
        number of tasks (rounded up to the nearest integer), and while any container instances
        are in the ``DRAINING`` state if the service contains tasks using the EC2 launch type.
        This parameter enables you to deploy without using additional cluster capacity. For
        example, if your service has a desired number of four tasks and a minimum healthy percent
        of 50%, the scheduler may stop two existing tasks to free up cluster capacity before
        starting two new tasks. Tasks for services that *do not* use a load balancer are
        considered healthy if they are in the ``RUNNING`` state; tasks for services that *do* use
        a load balancer are considered healthy if they are in the ``RUNNING`` state and they are
        reported as healthy by the load balancer. The default value for minimum healthy percent
        is 100%.

        If a service is using the blue/green (``CODE_DEPLOY`` ) or ``EXTERNAL`` deployment types
        and tasks that use the EC2 launch type, the **minimum healthy percent** value is set to
        the default value and is used to define the lower limit on the number of the tasks in the
        service that remain in the ``RUNNING`` state while the container instances are in the
        ``DRAINING`` state. If the tasks in the service use the Fargate launch type, the minimum
        healthy percent value is not used, although it is returned when describing your service.

    - **taskSets** *(list) --*

      Information about a set of Amazon ECS tasks in either an AWS CodeDeploy or an ``EXTERNAL``
      deployment. An Amazon ECS task set includes details such as the desired number of tasks,
      how many tasks are running, and whether the task set serves production traffic.

      - *(dict) --*

        Information about a set of Amazon ECS tasks in either an AWS CodeDeploy or an
        ``EXTERNAL`` deployment. An Amazon ECS task set includes details such as the desired
        number of tasks, how many tasks are running, and whether the task set serves production
        traffic.

        - **id** *(string) --*

          The ID of the task set.

        - **taskSetArn** *(string) --*

          The Amazon Resource Name (ARN) of the task set.

        - **serviceArn** *(string) --*

          The Amazon Resource Name (ARN) of the service the task set exists in.

        - **clusterArn** *(string) --*

          The Amazon Resource Name (ARN) of the cluster that the service that hosts the task set
          exists in.

        - **startedBy** *(string) --*

          The tag specified when a task set is started. If the task set is created by an AWS
          CodeDeploy deployment, the ``startedBy`` parameter is ``CODE_DEPLOY`` . For a task set
          created for an external deployment, the startedBy field isn't used.

        - **externalId** *(string) --*

          The external ID associated with the task set.

          If a task set is created by an AWS CodeDeploy deployment, the ``externalId`` parameter
          contains the AWS CodeDeploy deployment ID.

          If a task set is created for an external deployment and is associated with a service
          discovery registry, the ``externalId`` parameter contains the
          ``ECS_TASK_SET_EXTERNAL_ID`` AWS Cloud Map attribute.

        - **status** *(string) --*

          The status of the task set. The following describes each state:

            PRIMARY

          The task set is serving production traffic.

            ACTIVE

          The task set is not serving production traffic.

            DRAINING

          The tasks in the task set are being stopped and their corresponding targets are being
          deregistered from their target group.

        - **taskDefinition** *(string) --*

          The task definition the task set is using.

        - **computedDesiredCount** *(integer) --*

          The computed desired count for the task set. This is calculated by multiplying the
          service's ``desiredCount`` by the task set's ``scale`` percentage. The result is always
          rounded up. For example, if the computed desired count is 1.2, it rounds up to 2 tasks.

        - **pendingCount** *(integer) --*

          The number of tasks in the task set that are in the ``PENDING`` status during a
          deployment. A task in the ``PENDING`` state is preparing to enter the ``RUNNING``
          state. A task set enters the ``PENDING`` status when it launches for the first time or
          when it is restarted after being in the ``STOPPED`` state.

        - **runningCount** *(integer) --*

          The number of tasks in the task set that are in the ``RUNNING`` status during a
          deployment. A task in the ``RUNNING`` state is running and ready for use.

        - **createdAt** *(datetime) --*

          The Unix timestamp for when the task set was created.

        - **updatedAt** *(datetime) --*

          The Unix timestamp for when the task set was last updated.

        - **launchType** *(string) --*

          The launch type the tasks in the task set are using. For more information, see `Amazon
          ECS Launch Types
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html>`__ in
          the *Amazon Elastic Container Service Developer Guide* .

        - **platformVersion** *(string) --*

          The platform version on which the tasks in the task set are running. A platform version
          is only specified for tasks using the Fargate launch type. If one is not specified, the
          ``LATEST`` platform version is used by default. For more information, see `AWS Fargate
          Platform Versions
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

        - **networkConfiguration** *(dict) --*

          The network configuration for the task set.

          - **awsvpcConfiguration** *(dict) --*

            The VPC subnets and security groups associated with a task.

            .. note::

              All specified subnets and security groups must be from the same VPC.

            - **subnets** *(list) --*

              The subnets associated with the task or service. There is a limit of 16 subnets
              that can be specified per ``AwsVpcConfiguration`` .

              .. note::

                All specified subnets must be from the same VPC.

              - *(string) --*

            - **securityGroups** *(list) --*

              The security groups associated with the task or service. If you do not specify a
              security group, the default security group for the VPC is used. There is a limit of
              5 security groups that can be specified per ``AwsVpcConfiguration`` .

              .. note::

                All specified security groups must be from the same VPC.

              - *(string) --*

            - **assignPublicIp** *(string) --*

              Whether the task's elastic network interface receives a public IP address. The
              default value is ``DISABLED`` .

        - **loadBalancers** *(list) --*

          Details on a load balancer that is used with a task set.

          - *(dict) --*

            Details on the load balancer or load balancers to use with a service or task set.

            - **targetGroupArn** *(string) --*

              The full Amazon Resource Name (ARN) of the Elastic Load Balancing target group or
              groups associated with a service or task set.

              A target group ARN is only specified when using an Application Load Balancer or
              Network Load Balancer. If you are using a Classic Load Balancer this should be
              omitted.

              For services using the ``ECS`` deployment controller, you can specify one or
              multiple target groups. For more information, see `Registering Multiple Target
              Groups with a Service
              <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html>`__
              in the *Amazon Elastic Container Service Developer Guide* .

              For services using the ``CODE_DEPLOY`` deployment controller, you are required to
              define two target groups for the load balancer. For more information, see
              `Blue/Green Deployment with CodeDeploy
              <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-bluegreen.html>`__
              in the *Amazon Elastic Container Service Developer Guide* .

              .. warning::

                If your service's task definition uses the ``awsvpc`` network mode (which is
                required for the Fargate launch type), you must choose ``ip`` as the target type,
                not ``instance`` , when creating your target groups because tasks that use the
                ``awsvpc`` network mode are associated with an elastic network interface, not an
                Amazon EC2 instance.

            - **loadBalancerName** *(string) --*

              The name of the load balancer to associate with the Amazon ECS service or task set.

              A load balancer name is only specified when using a Classic Load Balancer. If you
              are using an Application Load Balancer or a Network Load Balancer this should be
              omitted.

            - **containerName** *(string) --*

              The name of the container (as it appears in a container definition) to associate
              with the load balancer.

            - **containerPort** *(integer) --*

              The port on the container to associate with the load balancer. This port must
              correspond to a ``containerPort`` in the task definition the tasks in the service
              are using. For tasks that use the EC2 launch type, the container instance they are
              launched on must allow ingress traffic on the ``hostPort`` of the port mapping.

        - **serviceRegistries** *(list) --*

          The details of the service discovery registries to assign to this task set. For more
          information, see `Service Discovery
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html>`__
          .

          - *(dict) --*

            Details of the service registry.

            - **registryArn** *(string) --*

              The Amazon Resource Name (ARN) of the service registry. The currently supported
              service registry is AWS Cloud Map. For more information, see `CreateService
              <https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html>`__ .

            - **port** *(integer) --*

              The port value used if your service discovery service specified an SRV record. This
              field may be used if both the ``awsvpc`` network mode and SRV records are used.

            - **containerName** *(string) --*

              The container name value, already specified in the task definition, to be used for
              your service discovery service. If the task definition that your service task
              specifies uses the ``bridge`` or ``host`` network mode, you must specify a
              ``containerName`` and ``containerPort`` combination from the task definition. If
              the task definition that your service task specifies uses the ``awsvpc`` network
              mode and a type SRV DNS record is used, you must specify either a ``containerName``
              and ``containerPort`` combination or a ``port`` value, but not both.

            - **containerPort** *(integer) --*

              The port value, already specified in the task definition, to be used for your
              service discovery service. If the task definition your service task specifies uses
              the ``bridge`` or ``host`` network mode, you must specify a ``containerName`` and
              ``containerPort`` combination from the task definition. If the task definition your
              service task specifies uses the ``awsvpc`` network mode and a type SRV DNS record
              is used, you must specify either a ``containerName`` and ``containerPort``
              combination or a ``port`` value, but not both.

        - **scale** *(dict) --*

          A floating-point percentage of the desired number of tasks to place and keep running in
          the task set.

          - **value** *(float) --*

            The value, specified as a percent total of a service's ``desiredCount`` , to scale
            the task set. Accepted values are numbers between 0 and 100.

          - **unit** *(string) --*

            The unit of measure for the scale value.

        - **stabilityStatus** *(string) --*

          The stability status, which indicates whether the task set has reached a steady state.
          If the following conditions are met, the task set will be in ``STEADY_STATE`` :

          * The task ``runningCount`` is equal to the ``computedDesiredCount`` .

          * The ``pendingCount`` is ``0`` .

          * There are no tasks running on container instances in the ``DRAINING`` status.

          * All tasks are reporting a healthy status from the load balancers, service discovery,
          and container health checks.

          If any of those conditions are not met, the stability status returns ``STABILIZING`` .

        - **stabilityStatusAt** *(datetime) --*

          The Unix timestamp for when the task set stability status was retrieved.

    - **deployments** *(list) --*

      The current state of deployments for the service.

      - *(dict) --*

        The details of an Amazon ECS service deployment. This is used only when a service uses
        the ``ECS`` deployment controller type.

        - **id** *(string) --*

          The ID of the deployment.

        - **status** *(string) --*

          The status of the deployment. The following describes each state:

            PRIMARY

          The most recent deployment of a service.

            ACTIVE

          A service deployment that still has running tasks, but are in the process of being
          replaced with a new ``PRIMARY`` deployment.

            INACTIVE

          A deployment that has been completely replaced.

        - **taskDefinition** *(string) --*

          The most recent task definition that was specified for the tasks in the service to use.

        - **desiredCount** *(integer) --*

          The most recent desired count of tasks that was specified for the service to deploy or
          maintain.

        - **pendingCount** *(integer) --*

          The number of tasks in the deployment that are in the ``PENDING`` status.

        - **runningCount** *(integer) --*

          The number of tasks in the deployment that are in the ``RUNNING`` status.

        - **createdAt** *(datetime) --*

          The Unix timestamp for when the service deployment was created.

        - **updatedAt** *(datetime) --*

          The Unix timestamp for when the service deployment was last updated.

        - **launchType** *(string) --*

          The launch type the tasks in the service are using. For more information, see `Amazon
          ECS Launch Types
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html>`__ in
          the *Amazon Elastic Container Service Developer Guide* .

        - **platformVersion** *(string) --*

          The platform version on which your tasks in the service are running. A platform version
          is only specified for tasks using the Fargate launch type. If one is not specified, the
          ``LATEST`` platform version is used by default. For more information, see `AWS Fargate
          Platform Versions
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

        - **networkConfiguration** *(dict) --*

          The VPC subnet and security group configuration for tasks that receive their own
          elastic network interface by using the ``awsvpc`` networking mode.

          - **awsvpcConfiguration** *(dict) --*

            The VPC subnets and security groups associated with a task.

            .. note::

              All specified subnets and security groups must be from the same VPC.

            - **subnets** *(list) --*

              The subnets associated with the task or service. There is a limit of 16 subnets
              that can be specified per ``AwsVpcConfiguration`` .

              .. note::

                All specified subnets must be from the same VPC.

              - *(string) --*

            - **securityGroups** *(list) --*

              The security groups associated with the task or service. If you do not specify a
              security group, the default security group for the VPC is used. There is a limit of
              5 security groups that can be specified per ``AwsVpcConfiguration`` .

              .. note::

                All specified security groups must be from the same VPC.

              - *(string) --*

            - **assignPublicIp** *(string) --*

              Whether the task's elastic network interface receives a public IP address. The
              default value is ``DISABLED`` .

    - **roleArn** *(string) --*

      The ARN of the IAM role associated with the service that allows the Amazon ECS container
      agent to register container instances with an Elastic Load Balancing load balancer.

    - **events** *(list) --*

      The event stream for your service. A maximum of 100 of the latest events are displayed.

      - *(dict) --*

        Details on an event associated with a service.

        - **id** *(string) --*

          The ID string of the event.

        - **createdAt** *(datetime) --*

          The Unix timestamp for when the event was triggered.

        - **message** *(string) --*

          The event message.

    - **createdAt** *(datetime) --*

      The Unix timestamp for when the service was created.

    - **placementConstraints** *(list) --*

      The placement constraints for the tasks in the service.

      - *(dict) --*

        An object representing a constraint on task placement. For more information, see `Task
        Placement Constraints
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html>`__
        in the *Amazon Elastic Container Service Developer Guide* .

        .. note::

          If you are using the Fargate launch type, task placement constraints are not supported.

        - **type** *(string) --*

          The type of constraint. Use ``distinctInstance`` to ensure that each task in a
          particular group is running on a different container instance. Use ``memberOf`` to
          restrict the selection to a group of valid candidates.

        - **expression** *(string) --*

          A cluster query language expression to apply to the constraint. You cannot specify an
          expression if the constraint type is ``distinctInstance`` . For more information, see
          `Cluster Query Language
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

    - **placementStrategy** *(list) --*

      The placement strategy that determines how tasks for the service are placed.

      - *(dict) --*

        The task placement strategy for a task or service. For more information, see `Task
        Placement Strategies
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-strategies.html>`__
        in the *Amazon Elastic Container Service Developer Guide* .

        - **type** *(string) --*

          The type of placement strategy. The ``random`` placement strategy randomly places tasks
          on available candidates. The ``spread`` placement strategy spreads placement across
          available candidates evenly based on the ``field`` parameter. The ``binpack`` strategy
          places tasks on available candidates that have the least available amount of the
          resource that is specified with the ``field`` parameter. For example, if you binpack on
          memory, a task is placed on the instance with the least amount of remaining memory (but
          still enough to run the task).

        - **field** *(string) --*

          The field to apply the placement strategy against. For the ``spread`` placement
          strategy, valid values are ``instanceId`` (or ``host`` , which has the same effect), or
          any platform or custom attribute that is applied to a container instance, such as
          ``attribute:ecs.availability-zone`` . For the ``binpack`` placement strategy, valid
          values are ``cpu`` and ``memory`` . For the ``random`` placement strategy, this field
          is not used.

    - **networkConfiguration** *(dict) --*

      The VPC subnet and security group configuration for tasks that receive their own elastic
      network interface by using the ``awsvpc`` networking mode.

      - **awsvpcConfiguration** *(dict) --*

        The VPC subnets and security groups associated with a task.

        .. note::

          All specified subnets and security groups must be from the same VPC.

        - **subnets** *(list) --*

          The subnets associated with the task or service. There is a limit of 16 subnets that
          can be specified per ``AwsVpcConfiguration`` .

          .. note::

            All specified subnets must be from the same VPC.

          - *(string) --*

        - **securityGroups** *(list) --*

          The security groups associated with the task or service. If you do not specify a
          security group, the default security group for the VPC is used. There is a limit of 5
          security groups that can be specified per ``AwsVpcConfiguration`` .

          .. note::

            All specified security groups must be from the same VPC.

          - *(string) --*

        - **assignPublicIp** *(string) --*

          Whether the task's elastic network interface receives a public IP address. The default
          value is ``DISABLED`` .

    - **healthCheckGracePeriodSeconds** *(integer) --*

      The period of time, in seconds, that the Amazon ECS service scheduler ignores unhealthy
      Elastic Load Balancing target health checks after a task has first started.

    - **schedulingStrategy** *(string) --*

      The scheduling strategy to use for the service. For more information, see `Services
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs_services.html>`__ .

      There are two service scheduler strategies available:

      * ``REPLICA`` -The replica scheduling strategy places and maintains the desired number of
      tasks across your cluster. By default, the service scheduler spreads tasks across
      Availability Zones. You can use task placement strategies and constraints to customize task
      placement decisions.

      * ``DAEMON`` -The daemon scheduling strategy deploys exactly one task on each container
      instance in your cluster. When you are using this strategy, do not specify a desired number
      of tasks or any task placement strategies.

      .. note::

         Fargate tasks do not support the ``DAEMON`` scheduling strategy.

    - **deploymentController** *(dict) --*

      The deployment controller type the service is using. When using the DescribeServices API,
      this field is omitted if the service is using the ``ECS`` deployment controller type.

      - **type** *(string) --*

        The deployment controller type to use.

        There are three deployment controller types available:

          ECS

        The rolling update (``ECS`` ) deployment type involves replacing the current running
        version of the container with the latest version. The number of containers Amazon ECS
        adds or removes from the service during a rolling update is controlled by adjusting the
        minimum and maximum number of healthy tasks allowed during a service deployment, as
        specified in the  DeploymentConfiguration .

          CODE_DEPLOY

        The blue/green (``CODE_DEPLOY`` ) deployment type uses the blue/green deployment model
        powered by AWS CodeDeploy, which allows you to verify a new deployment of a service
        before sending production traffic to it.

          EXTERNAL

        The external (``EXTERNAL`` ) deployment type enables you to use any third-party
        deployment controller for full control over the deployment process for an Amazon ECS
        service.

    - **tags** *(list) --*

      The metadata that you apply to the service to help you categorize and organize them. Each
      tag consists of a key and an optional value, both of which you define.

      The following basic restrictions apply to tags:

      * Maximum number of tags per resource - 50

      * For each resource, each tag key must be unique, and each tag key can have only one value.

      * Maximum key length - 128 Unicode characters in UTF-8

      * Maximum value length - 256 Unicode characters in UTF-8

      * If your tagging schema is used across multiple services and resources, remember that
      other services may have restrictions on allowed characters. Generally allowed characters
      are: letters, numbers, and spaces representable in UTF-8, and the following characters: + -
      = . _ : / @.

      * Tag keys and values are case-sensitive.

      * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
      prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
      tag keys or values with this prefix. Tags with this prefix do not count against your tags
      per resource limit.

      - *(dict) --*

        The metadata that you apply to a resource to help you categorize and organize them. Each
        tag consists of a key and an optional value, both of which you define.

        The following basic restrictions apply to tags:

        * Maximum number of tags per resource - 50

        * For each resource, each tag key must be unique, and each tag key can have only one
        value.

        * Maximum key length - 128 Unicode characters in UTF-8

        * Maximum value length - 256 Unicode characters in UTF-8

        * If your tagging schema is used across multiple services and resources, remember that
        other services may have restrictions on allowed characters. Generally allowed characters
        are: letters, numbers, and spaces representable in UTF-8, and the following characters: +
        - = . _ : / @.

        * Tag keys and values are case-sensitive.

        * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
        prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
        tag keys or values with this prefix. Tags with this prefix do not count against your tags
        per resource limit.

        - **key** *(string) --*

          One part of a key-value pair that make up a tag. A ``key`` is a general label that acts
          like a category for more specific tag values.

        - **value** *(string) --*

          The optional part of a key-value pair that make up a tag. A ``value`` acts as a
          descriptor within a tag category (key).

    - **createdBy** *(string) --*

      The principal that created the service.

    - **enableECSManagedTags** *(boolean) --*

      Specifies whether to enable Amazon ECS managed tags for the tasks in the service. For more
      information, see `Tagging Your Amazon ECS Resources
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html>`__ in the
      *Amazon Elastic Container Service Developer Guide* .

    - **propagateTags** *(string) --*

      Specifies whether to propagate the tags from the task definition or the service to the
      task. If no value is specified, the tags are not propagated.
    """


_ClientCreateServiceResponseTypeDef = TypedDict(
    "_ClientCreateServiceResponseTypeDef",
    {"service": ClientCreateServiceResponseserviceTypeDef},
    total=False,
)


class ClientCreateServiceResponseTypeDef(_ClientCreateServiceResponseTypeDef):
    """
    Type definition for `ClientCreateService` `Response`

    - **service** *(dict) --*

      The full description of your service following the create call.

      If a service is using the ``ECS`` deployment controller, the ``deploymentController`` and
      ``taskSets`` parameters will not be returned.

      If the service is using the ``CODE_DEPLOY`` deployment controller, the
      ``deploymentController`` , ``taskSets`` and ``deployments`` parameters will be returned,
      however the ``deployments`` parameter will be an empty list.

      - **serviceArn** *(string) --*

        The ARN that identifies the service. The ARN contains the ``arn:aws:ecs`` namespace,
        followed by the Region of the service, the AWS account ID of the service owner, the
        ``service`` namespace, and then the service name. For example,
        ``arn:aws:ecs:region:012345678910:service/my-service`` .

      - **serviceName** *(string) --*

        The name of your service. Up to 255 letters (uppercase and lowercase), numbers, and hyphens
        are allowed. Service names must be unique within a cluster, but you can have similarly
        named services in multiple clusters within a Region or across multiple Regions.

      - **clusterArn** *(string) --*

        The Amazon Resource Name (ARN) of the cluster that hosts the service.

      - **loadBalancers** *(list) --*

        A list of Elastic Load Balancing load balancer objects, containing the load balancer name,
        the container name (as it appears in a container definition), and the container port to
        access from the load balancer.

        - *(dict) --*

          Details on the load balancer or load balancers to use with a service or task set.

          - **targetGroupArn** *(string) --*

            The full Amazon Resource Name (ARN) of the Elastic Load Balancing target group or
            groups associated with a service or task set.

            A target group ARN is only specified when using an Application Load Balancer or Network
            Load Balancer. If you are using a Classic Load Balancer this should be omitted.

            For services using the ``ECS`` deployment controller, you can specify one or multiple
            target groups. For more information, see `Registering Multiple Target Groups with a
            Service
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html>`__
            in the *Amazon Elastic Container Service Developer Guide* .

            For services using the ``CODE_DEPLOY`` deployment controller, you are required to
            define two target groups for the load balancer. For more information, see `Blue/Green
            Deployment with CodeDeploy
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-bluegreen.html>`__
            in the *Amazon Elastic Container Service Developer Guide* .

            .. warning::

              If your service's task definition uses the ``awsvpc`` network mode (which is required
              for the Fargate launch type), you must choose ``ip`` as the target type, not
              ``instance`` , when creating your target groups because tasks that use the ``awsvpc``
              network mode are associated with an elastic network interface, not an Amazon EC2
              instance.

          - **loadBalancerName** *(string) --*

            The name of the load balancer to associate with the Amazon ECS service or task set.

            A load balancer name is only specified when using a Classic Load Balancer. If you are
            using an Application Load Balancer or a Network Load Balancer this should be omitted.

          - **containerName** *(string) --*

            The name of the container (as it appears in a container definition) to associate with
            the load balancer.

          - **containerPort** *(integer) --*

            The port on the container to associate with the load balancer. This port must
            correspond to a ``containerPort`` in the task definition the tasks in the service are
            using. For tasks that use the EC2 launch type, the container instance they are launched
            on must allow ingress traffic on the ``hostPort`` of the port mapping.

      - **serviceRegistries** *(list) --*

        The details of the service discovery registries to assign to this service. For more
        information, see `Service Discovery
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html>`__ .

        - *(dict) --*

          Details of the service registry.

          - **registryArn** *(string) --*

            The Amazon Resource Name (ARN) of the service registry. The currently supported service
            registry is AWS Cloud Map. For more information, see `CreateService
            <https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html>`__ .

          - **port** *(integer) --*

            The port value used if your service discovery service specified an SRV record. This
            field may be used if both the ``awsvpc`` network mode and SRV records are used.

          - **containerName** *(string) --*

            The container name value, already specified in the task definition, to be used for your
            service discovery service. If the task definition that your service task specifies uses
            the ``bridge`` or ``host`` network mode, you must specify a ``containerName`` and
            ``containerPort`` combination from the task definition. If the task definition that
            your service task specifies uses the ``awsvpc`` network mode and a type SRV DNS record
            is used, you must specify either a ``containerName`` and ``containerPort`` combination
            or a ``port`` value, but not both.

          - **containerPort** *(integer) --*

            The port value, already specified in the task definition, to be used for your service
            discovery service. If the task definition your service task specifies uses the
            ``bridge`` or ``host`` network mode, you must specify a ``containerName`` and
            ``containerPort`` combination from the task definition. If the task definition your
            service task specifies uses the ``awsvpc`` network mode and a type SRV DNS record is
            used, you must specify either a ``containerName`` and ``containerPort`` combination or
            a ``port`` value, but not both.

      - **status** *(string) --*

        The status of the service. The valid values are ``ACTIVE`` , ``DRAINING`` , or ``INACTIVE``
        .

      - **desiredCount** *(integer) --*

        The desired number of instantiations of the task definition to keep running on the service.
        This value is specified when the service is created with  CreateService , and it can be
        modified with  UpdateService .

      - **runningCount** *(integer) --*

        The number of tasks in the cluster that are in the ``RUNNING`` state.

      - **pendingCount** *(integer) --*

        The number of tasks in the cluster that are in the ``PENDING`` state.

      - **launchType** *(string) --*

        The launch type on which your service is running. If no value is specified, it will default
        to ``EC2`` . Valid values include ``EC2`` and ``FARGATE`` . For more information, see
        `Amazon ECS Launch Types
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html>`__ in the
        *Amazon Elastic Container Service Developer Guide* .

      - **platformVersion** *(string) --*

        The platform version on which to run your service. A platform version is only specified for
        tasks using the Fargate launch type. If one is not specified, the ``LATEST`` platform
        version is used by default. For more information, see `AWS Fargate Platform Versions
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html>`__ in
        the *Amazon Elastic Container Service Developer Guide* .

      - **taskDefinition** *(string) --*

        The task definition to use for tasks in the service. This value is specified when the
        service is created with  CreateService , and it can be modified with  UpdateService .

      - **deploymentConfiguration** *(dict) --*

        Optional deployment parameters that control how many tasks run during the deployment and
        the ordering of stopping and starting tasks.

        - **maximumPercent** *(integer) --*

          If a service is using the rolling update (``ECS`` ) deployment type, the **maximum
          percent** parameter represents an upper limit on the number of tasks in a service that
          are allowed in the ``RUNNING`` or ``PENDING`` state during a deployment, as a percentage
          of the desired number of tasks (rounded down to the nearest integer), and while any
          container instances are in the ``DRAINING`` state if the service contains tasks using the
          EC2 launch type. This parameter enables you to define the deployment batch size. For
          example, if your service has a desired number of four tasks and a maximum percent value
          of 200%, the scheduler may start four new tasks before stopping the four older tasks
          (provided that the cluster resources required to do this are available). The default
          value for maximum percent is 200%.

          If a service is using the blue/green (``CODE_DEPLOY`` ) or ``EXTERNAL`` deployment types
          and tasks that use the EC2 launch type, the **maximum percent** value is set to the
          default value and is used to define the upper limit on the number of the tasks in the
          service that remain in the ``RUNNING`` state while the container instances are in the
          ``DRAINING`` state. If the tasks in the service use the Fargate launch type, the maximum
          percent value is not used, although it is returned when describing your service.

        - **minimumHealthyPercent** *(integer) --*

          If a service is using the rolling update (``ECS`` ) deployment type, the **minimum
          healthy percent** represents a lower limit on the number of tasks in a service that must
          remain in the ``RUNNING`` state during a deployment, as a percentage of the desired
          number of tasks (rounded up to the nearest integer), and while any container instances
          are in the ``DRAINING`` state if the service contains tasks using the EC2 launch type.
          This parameter enables you to deploy without using additional cluster capacity. For
          example, if your service has a desired number of four tasks and a minimum healthy percent
          of 50%, the scheduler may stop two existing tasks to free up cluster capacity before
          starting two new tasks. Tasks for services that *do not* use a load balancer are
          considered healthy if they are in the ``RUNNING`` state; tasks for services that *do* use
          a load balancer are considered healthy if they are in the ``RUNNING`` state and they are
          reported as healthy by the load balancer. The default value for minimum healthy percent
          is 100%.

          If a service is using the blue/green (``CODE_DEPLOY`` ) or ``EXTERNAL`` deployment types
          and tasks that use the EC2 launch type, the **minimum healthy percent** value is set to
          the default value and is used to define the lower limit on the number of the tasks in the
          service that remain in the ``RUNNING`` state while the container instances are in the
          ``DRAINING`` state. If the tasks in the service use the Fargate launch type, the minimum
          healthy percent value is not used, although it is returned when describing your service.

      - **taskSets** *(list) --*

        Information about a set of Amazon ECS tasks in either an AWS CodeDeploy or an ``EXTERNAL``
        deployment. An Amazon ECS task set includes details such as the desired number of tasks,
        how many tasks are running, and whether the task set serves production traffic.

        - *(dict) --*

          Information about a set of Amazon ECS tasks in either an AWS CodeDeploy or an
          ``EXTERNAL`` deployment. An Amazon ECS task set includes details such as the desired
          number of tasks, how many tasks are running, and whether the task set serves production
          traffic.

          - **id** *(string) --*

            The ID of the task set.

          - **taskSetArn** *(string) --*

            The Amazon Resource Name (ARN) of the task set.

          - **serviceArn** *(string) --*

            The Amazon Resource Name (ARN) of the service the task set exists in.

          - **clusterArn** *(string) --*

            The Amazon Resource Name (ARN) of the cluster that the service that hosts the task set
            exists in.

          - **startedBy** *(string) --*

            The tag specified when a task set is started. If the task set is created by an AWS
            CodeDeploy deployment, the ``startedBy`` parameter is ``CODE_DEPLOY`` . For a task set
            created for an external deployment, the startedBy field isn't used.

          - **externalId** *(string) --*

            The external ID associated with the task set.

            If a task set is created by an AWS CodeDeploy deployment, the ``externalId`` parameter
            contains the AWS CodeDeploy deployment ID.

            If a task set is created for an external deployment and is associated with a service
            discovery registry, the ``externalId`` parameter contains the
            ``ECS_TASK_SET_EXTERNAL_ID`` AWS Cloud Map attribute.

          - **status** *(string) --*

            The status of the task set. The following describes each state:

              PRIMARY

            The task set is serving production traffic.

              ACTIVE

            The task set is not serving production traffic.

              DRAINING

            The tasks in the task set are being stopped and their corresponding targets are being
            deregistered from their target group.

          - **taskDefinition** *(string) --*

            The task definition the task set is using.

          - **computedDesiredCount** *(integer) --*

            The computed desired count for the task set. This is calculated by multiplying the
            service's ``desiredCount`` by the task set's ``scale`` percentage. The result is always
            rounded up. For example, if the computed desired count is 1.2, it rounds up to 2 tasks.

          - **pendingCount** *(integer) --*

            The number of tasks in the task set that are in the ``PENDING`` status during a
            deployment. A task in the ``PENDING`` state is preparing to enter the ``RUNNING``
            state. A task set enters the ``PENDING`` status when it launches for the first time or
            when it is restarted after being in the ``STOPPED`` state.

          - **runningCount** *(integer) --*

            The number of tasks in the task set that are in the ``RUNNING`` status during a
            deployment. A task in the ``RUNNING`` state is running and ready for use.

          - **createdAt** *(datetime) --*

            The Unix timestamp for when the task set was created.

          - **updatedAt** *(datetime) --*

            The Unix timestamp for when the task set was last updated.

          - **launchType** *(string) --*

            The launch type the tasks in the task set are using. For more information, see `Amazon
            ECS Launch Types
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html>`__ in
            the *Amazon Elastic Container Service Developer Guide* .

          - **platformVersion** *(string) --*

            The platform version on which the tasks in the task set are running. A platform version
            is only specified for tasks using the Fargate launch type. If one is not specified, the
            ``LATEST`` platform version is used by default. For more information, see `AWS Fargate
            Platform Versions
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html>`__
            in the *Amazon Elastic Container Service Developer Guide* .

          - **networkConfiguration** *(dict) --*

            The network configuration for the task set.

            - **awsvpcConfiguration** *(dict) --*

              The VPC subnets and security groups associated with a task.

              .. note::

                All specified subnets and security groups must be from the same VPC.

              - **subnets** *(list) --*

                The subnets associated with the task or service. There is a limit of 16 subnets
                that can be specified per ``AwsVpcConfiguration`` .

                .. note::

                  All specified subnets must be from the same VPC.

                - *(string) --*

              - **securityGroups** *(list) --*

                The security groups associated with the task or service. If you do not specify a
                security group, the default security group for the VPC is used. There is a limit of
                5 security groups that can be specified per ``AwsVpcConfiguration`` .

                .. note::

                  All specified security groups must be from the same VPC.

                - *(string) --*

              - **assignPublicIp** *(string) --*

                Whether the task's elastic network interface receives a public IP address. The
                default value is ``DISABLED`` .

          - **loadBalancers** *(list) --*

            Details on a load balancer that is used with a task set.

            - *(dict) --*

              Details on the load balancer or load balancers to use with a service or task set.

              - **targetGroupArn** *(string) --*

                The full Amazon Resource Name (ARN) of the Elastic Load Balancing target group or
                groups associated with a service or task set.

                A target group ARN is only specified when using an Application Load Balancer or
                Network Load Balancer. If you are using a Classic Load Balancer this should be
                omitted.

                For services using the ``ECS`` deployment controller, you can specify one or
                multiple target groups. For more information, see `Registering Multiple Target
                Groups with a Service
                <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html>`__
                in the *Amazon Elastic Container Service Developer Guide* .

                For services using the ``CODE_DEPLOY`` deployment controller, you are required to
                define two target groups for the load balancer. For more information, see
                `Blue/Green Deployment with CodeDeploy
                <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-bluegreen.html>`__
                in the *Amazon Elastic Container Service Developer Guide* .

                .. warning::

                  If your service's task definition uses the ``awsvpc`` network mode (which is
                  required for the Fargate launch type), you must choose ``ip`` as the target type,
                  not ``instance`` , when creating your target groups because tasks that use the
                  ``awsvpc`` network mode are associated with an elastic network interface, not an
                  Amazon EC2 instance.

              - **loadBalancerName** *(string) --*

                The name of the load balancer to associate with the Amazon ECS service or task set.

                A load balancer name is only specified when using a Classic Load Balancer. If you
                are using an Application Load Balancer or a Network Load Balancer this should be
                omitted.

              - **containerName** *(string) --*

                The name of the container (as it appears in a container definition) to associate
                with the load balancer.

              - **containerPort** *(integer) --*

                The port on the container to associate with the load balancer. This port must
                correspond to a ``containerPort`` in the task definition the tasks in the service
                are using. For tasks that use the EC2 launch type, the container instance they are
                launched on must allow ingress traffic on the ``hostPort`` of the port mapping.

          - **serviceRegistries** *(list) --*

            The details of the service discovery registries to assign to this task set. For more
            information, see `Service Discovery
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html>`__
            .

            - *(dict) --*

              Details of the service registry.

              - **registryArn** *(string) --*

                The Amazon Resource Name (ARN) of the service registry. The currently supported
                service registry is AWS Cloud Map. For more information, see `CreateService
                <https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html>`__ .

              - **port** *(integer) --*

                The port value used if your service discovery service specified an SRV record. This
                field may be used if both the ``awsvpc`` network mode and SRV records are used.

              - **containerName** *(string) --*

                The container name value, already specified in the task definition, to be used for
                your service discovery service. If the task definition that your service task
                specifies uses the ``bridge`` or ``host`` network mode, you must specify a
                ``containerName`` and ``containerPort`` combination from the task definition. If
                the task definition that your service task specifies uses the ``awsvpc`` network
                mode and a type SRV DNS record is used, you must specify either a ``containerName``
                and ``containerPort`` combination or a ``port`` value, but not both.

              - **containerPort** *(integer) --*

                The port value, already specified in the task definition, to be used for your
                service discovery service. If the task definition your service task specifies uses
                the ``bridge`` or ``host`` network mode, you must specify a ``containerName`` and
                ``containerPort`` combination from the task definition. If the task definition your
                service task specifies uses the ``awsvpc`` network mode and a type SRV DNS record
                is used, you must specify either a ``containerName`` and ``containerPort``
                combination or a ``port`` value, but not both.

          - **scale** *(dict) --*

            A floating-point percentage of the desired number of tasks to place and keep running in
            the task set.

            - **value** *(float) --*

              The value, specified as a percent total of a service's ``desiredCount`` , to scale
              the task set. Accepted values are numbers between 0 and 100.

            - **unit** *(string) --*

              The unit of measure for the scale value.

          - **stabilityStatus** *(string) --*

            The stability status, which indicates whether the task set has reached a steady state.
            If the following conditions are met, the task set will be in ``STEADY_STATE`` :

            * The task ``runningCount`` is equal to the ``computedDesiredCount`` .

            * The ``pendingCount`` is ``0`` .

            * There are no tasks running on container instances in the ``DRAINING`` status.

            * All tasks are reporting a healthy status from the load balancers, service discovery,
            and container health checks.

            If any of those conditions are not met, the stability status returns ``STABILIZING`` .

          - **stabilityStatusAt** *(datetime) --*

            The Unix timestamp for when the task set stability status was retrieved.

      - **deployments** *(list) --*

        The current state of deployments for the service.

        - *(dict) --*

          The details of an Amazon ECS service deployment. This is used only when a service uses
          the ``ECS`` deployment controller type.

          - **id** *(string) --*

            The ID of the deployment.

          - **status** *(string) --*

            The status of the deployment. The following describes each state:

              PRIMARY

            The most recent deployment of a service.

              ACTIVE

            A service deployment that still has running tasks, but are in the process of being
            replaced with a new ``PRIMARY`` deployment.

              INACTIVE

            A deployment that has been completely replaced.

          - **taskDefinition** *(string) --*

            The most recent task definition that was specified for the tasks in the service to use.

          - **desiredCount** *(integer) --*

            The most recent desired count of tasks that was specified for the service to deploy or
            maintain.

          - **pendingCount** *(integer) --*

            The number of tasks in the deployment that are in the ``PENDING`` status.

          - **runningCount** *(integer) --*

            The number of tasks in the deployment that are in the ``RUNNING`` status.

          - **createdAt** *(datetime) --*

            The Unix timestamp for when the service deployment was created.

          - **updatedAt** *(datetime) --*

            The Unix timestamp for when the service deployment was last updated.

          - **launchType** *(string) --*

            The launch type the tasks in the service are using. For more information, see `Amazon
            ECS Launch Types
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html>`__ in
            the *Amazon Elastic Container Service Developer Guide* .

          - **platformVersion** *(string) --*

            The platform version on which your tasks in the service are running. A platform version
            is only specified for tasks using the Fargate launch type. If one is not specified, the
            ``LATEST`` platform version is used by default. For more information, see `AWS Fargate
            Platform Versions
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html>`__
            in the *Amazon Elastic Container Service Developer Guide* .

          - **networkConfiguration** *(dict) --*

            The VPC subnet and security group configuration for tasks that receive their own
            elastic network interface by using the ``awsvpc`` networking mode.

            - **awsvpcConfiguration** *(dict) --*

              The VPC subnets and security groups associated with a task.

              .. note::

                All specified subnets and security groups must be from the same VPC.

              - **subnets** *(list) --*

                The subnets associated with the task or service. There is a limit of 16 subnets
                that can be specified per ``AwsVpcConfiguration`` .

                .. note::

                  All specified subnets must be from the same VPC.

                - *(string) --*

              - **securityGroups** *(list) --*

                The security groups associated with the task or service. If you do not specify a
                security group, the default security group for the VPC is used. There is a limit of
                5 security groups that can be specified per ``AwsVpcConfiguration`` .

                .. note::

                  All specified security groups must be from the same VPC.

                - *(string) --*

              - **assignPublicIp** *(string) --*

                Whether the task's elastic network interface receives a public IP address. The
                default value is ``DISABLED`` .

      - **roleArn** *(string) --*

        The ARN of the IAM role associated with the service that allows the Amazon ECS container
        agent to register container instances with an Elastic Load Balancing load balancer.

      - **events** *(list) --*

        The event stream for your service. A maximum of 100 of the latest events are displayed.

        - *(dict) --*

          Details on an event associated with a service.

          - **id** *(string) --*

            The ID string of the event.

          - **createdAt** *(datetime) --*

            The Unix timestamp for when the event was triggered.

          - **message** *(string) --*

            The event message.

      - **createdAt** *(datetime) --*

        The Unix timestamp for when the service was created.

      - **placementConstraints** *(list) --*

        The placement constraints for the tasks in the service.

        - *(dict) --*

          An object representing a constraint on task placement. For more information, see `Task
          Placement Constraints
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

          .. note::

            If you are using the Fargate launch type, task placement constraints are not supported.

          - **type** *(string) --*

            The type of constraint. Use ``distinctInstance`` to ensure that each task in a
            particular group is running on a different container instance. Use ``memberOf`` to
            restrict the selection to a group of valid candidates.

          - **expression** *(string) --*

            A cluster query language expression to apply to the constraint. You cannot specify an
            expression if the constraint type is ``distinctInstance`` . For more information, see
            `Cluster Query Language
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html>`__
            in the *Amazon Elastic Container Service Developer Guide* .

      - **placementStrategy** *(list) --*

        The placement strategy that determines how tasks for the service are placed.

        - *(dict) --*

          The task placement strategy for a task or service. For more information, see `Task
          Placement Strategies
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-strategies.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

          - **type** *(string) --*

            The type of placement strategy. The ``random`` placement strategy randomly places tasks
            on available candidates. The ``spread`` placement strategy spreads placement across
            available candidates evenly based on the ``field`` parameter. The ``binpack`` strategy
            places tasks on available candidates that have the least available amount of the
            resource that is specified with the ``field`` parameter. For example, if you binpack on
            memory, a task is placed on the instance with the least amount of remaining memory (but
            still enough to run the task).

          - **field** *(string) --*

            The field to apply the placement strategy against. For the ``spread`` placement
            strategy, valid values are ``instanceId`` (or ``host`` , which has the same effect), or
            any platform or custom attribute that is applied to a container instance, such as
            ``attribute:ecs.availability-zone`` . For the ``binpack`` placement strategy, valid
            values are ``cpu`` and ``memory`` . For the ``random`` placement strategy, this field
            is not used.

      - **networkConfiguration** *(dict) --*

        The VPC subnet and security group configuration for tasks that receive their own elastic
        network interface by using the ``awsvpc`` networking mode.

        - **awsvpcConfiguration** *(dict) --*

          The VPC subnets and security groups associated with a task.

          .. note::

            All specified subnets and security groups must be from the same VPC.

          - **subnets** *(list) --*

            The subnets associated with the task or service. There is a limit of 16 subnets that
            can be specified per ``AwsVpcConfiguration`` .

            .. note::

              All specified subnets must be from the same VPC.

            - *(string) --*

          - **securityGroups** *(list) --*

            The security groups associated with the task or service. If you do not specify a
            security group, the default security group for the VPC is used. There is a limit of 5
            security groups that can be specified per ``AwsVpcConfiguration`` .

            .. note::

              All specified security groups must be from the same VPC.

            - *(string) --*

          - **assignPublicIp** *(string) --*

            Whether the task's elastic network interface receives a public IP address. The default
            value is ``DISABLED`` .

      - **healthCheckGracePeriodSeconds** *(integer) --*

        The period of time, in seconds, that the Amazon ECS service scheduler ignores unhealthy
        Elastic Load Balancing target health checks after a task has first started.

      - **schedulingStrategy** *(string) --*

        The scheduling strategy to use for the service. For more information, see `Services
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs_services.html>`__ .

        There are two service scheduler strategies available:

        * ``REPLICA`` -The replica scheduling strategy places and maintains the desired number of
        tasks across your cluster. By default, the service scheduler spreads tasks across
        Availability Zones. You can use task placement strategies and constraints to customize task
        placement decisions.

        * ``DAEMON`` -The daemon scheduling strategy deploys exactly one task on each container
        instance in your cluster. When you are using this strategy, do not specify a desired number
        of tasks or any task placement strategies.

        .. note::

           Fargate tasks do not support the ``DAEMON`` scheduling strategy.

      - **deploymentController** *(dict) --*

        The deployment controller type the service is using. When using the DescribeServices API,
        this field is omitted if the service is using the ``ECS`` deployment controller type.

        - **type** *(string) --*

          The deployment controller type to use.

          There are three deployment controller types available:

            ECS

          The rolling update (``ECS`` ) deployment type involves replacing the current running
          version of the container with the latest version. The number of containers Amazon ECS
          adds or removes from the service during a rolling update is controlled by adjusting the
          minimum and maximum number of healthy tasks allowed during a service deployment, as
          specified in the  DeploymentConfiguration .

            CODE_DEPLOY

          The blue/green (``CODE_DEPLOY`` ) deployment type uses the blue/green deployment model
          powered by AWS CodeDeploy, which allows you to verify a new deployment of a service
          before sending production traffic to it.

            EXTERNAL

          The external (``EXTERNAL`` ) deployment type enables you to use any third-party
          deployment controller for full control over the deployment process for an Amazon ECS
          service.

      - **tags** *(list) --*

        The metadata that you apply to the service to help you categorize and organize them. Each
        tag consists of a key and an optional value, both of which you define.

        The following basic restrictions apply to tags:

        * Maximum number of tags per resource - 50

        * For each resource, each tag key must be unique, and each tag key can have only one value.

        * Maximum key length - 128 Unicode characters in UTF-8

        * Maximum value length - 256 Unicode characters in UTF-8

        * If your tagging schema is used across multiple services and resources, remember that
        other services may have restrictions on allowed characters. Generally allowed characters
        are: letters, numbers, and spaces representable in UTF-8, and the following characters: + -
        = . _ : / @.

        * Tag keys and values are case-sensitive.

        * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
        prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
        tag keys or values with this prefix. Tags with this prefix do not count against your tags
        per resource limit.

        - *(dict) --*

          The metadata that you apply to a resource to help you categorize and organize them. Each
          tag consists of a key and an optional value, both of which you define.

          The following basic restrictions apply to tags:

          * Maximum number of tags per resource - 50

          * For each resource, each tag key must be unique, and each tag key can have only one
          value.

          * Maximum key length - 128 Unicode characters in UTF-8

          * Maximum value length - 256 Unicode characters in UTF-8

          * If your tagging schema is used across multiple services and resources, remember that
          other services may have restrictions on allowed characters. Generally allowed characters
          are: letters, numbers, and spaces representable in UTF-8, and the following characters: +
          - = . _ : / @.

          * Tag keys and values are case-sensitive.

          * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
          prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
          tag keys or values with this prefix. Tags with this prefix do not count against your tags
          per resource limit.

          - **key** *(string) --*

            One part of a key-value pair that make up a tag. A ``key`` is a general label that acts
            like a category for more specific tag values.

          - **value** *(string) --*

            The optional part of a key-value pair that make up a tag. A ``value`` acts as a
            descriptor within a tag category (key).

      - **createdBy** *(string) --*

        The principal that created the service.

      - **enableECSManagedTags** *(boolean) --*

        Specifies whether to enable Amazon ECS managed tags for the tasks in the service. For more
        information, see `Tagging Your Amazon ECS Resources
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html>`__ in the
        *Amazon Elastic Container Service Developer Guide* .

      - **propagateTags** *(string) --*

        Specifies whether to propagate the tags from the task definition or the service to the
        task. If no value is specified, the tags are not propagated.
    """


_ClientCreateServicedeploymentConfigurationTypeDef = TypedDict(
    "_ClientCreateServicedeploymentConfigurationTypeDef",
    {"maximumPercent": int, "minimumHealthyPercent": int},
    total=False,
)


class ClientCreateServicedeploymentConfigurationTypeDef(
    _ClientCreateServicedeploymentConfigurationTypeDef
):
    """
    Type definition for `ClientCreateService` `deploymentConfiguration`

    Optional deployment parameters that control how many tasks run during the deployment and the
    ordering of stopping and starting tasks.

    - **maximumPercent** *(integer) --*

      If a service is using the rolling update (``ECS`` ) deployment type, the **maximum percent**
      parameter represents an upper limit on the number of tasks in a service that are allowed in the
      ``RUNNING`` or ``PENDING`` state during a deployment, as a percentage of the desired number of
      tasks (rounded down to the nearest integer), and while any container instances are in the
      ``DRAINING`` state if the service contains tasks using the EC2 launch type. This parameter
      enables you to define the deployment batch size. For example, if your service has a desired
      number of four tasks and a maximum percent value of 200%, the scheduler may start four new
      tasks before stopping the four older tasks (provided that the cluster resources required to do
      this are available). The default value for maximum percent is 200%.

      If a service is using the blue/green (``CODE_DEPLOY`` ) or ``EXTERNAL`` deployment types and
      tasks that use the EC2 launch type, the **maximum percent** value is set to the default value
      and is used to define the upper limit on the number of the tasks in the service that remain in
      the ``RUNNING`` state while the container instances are in the ``DRAINING`` state. If the tasks
      in the service use the Fargate launch type, the maximum percent value is not used, although it
      is returned when describing your service.

    - **minimumHealthyPercent** *(integer) --*

      If a service is using the rolling update (``ECS`` ) deployment type, the **minimum healthy
      percent** represents a lower limit on the number of tasks in a service that must remain in the
      ``RUNNING`` state during a deployment, as a percentage of the desired number of tasks (rounded
      up to the nearest integer), and while any container instances are in the ``DRAINING`` state if
      the service contains tasks using the EC2 launch type. This parameter enables you to deploy
      without using additional cluster capacity. For example, if your service has a desired number of
      four tasks and a minimum healthy percent of 50%, the scheduler may stop two existing tasks to
      free up cluster capacity before starting two new tasks. Tasks for services that *do not* use a
      load balancer are considered healthy if they are in the ``RUNNING`` state; tasks for services
      that *do* use a load balancer are considered healthy if they are in the ``RUNNING`` state and
      they are reported as healthy by the load balancer. The default value for minimum healthy
      percent is 100%.

      If a service is using the blue/green (``CODE_DEPLOY`` ) or ``EXTERNAL`` deployment types and
      tasks that use the EC2 launch type, the **minimum healthy percent** value is set to the default
      value and is used to define the lower limit on the number of the tasks in the service that
      remain in the ``RUNNING`` state while the container instances are in the ``DRAINING`` state. If
      the tasks in the service use the Fargate launch type, the minimum healthy percent value is not
      used, although it is returned when describing your service.
    """


_ClientCreateServicedeploymentControllerTypeDef = TypedDict(
    "_ClientCreateServicedeploymentControllerTypeDef", {"type": str}
)


class ClientCreateServicedeploymentControllerTypeDef(
    _ClientCreateServicedeploymentControllerTypeDef
):
    """
    Type definition for `ClientCreateService` `deploymentController`

    The deployment controller to use for the service.

    - **type** *(string) --* **[REQUIRED]**

      The deployment controller type to use.

      There are three deployment controller types available:

        ECS

      The rolling update (``ECS`` ) deployment type involves replacing the current running version of
      the container with the latest version. The number of containers Amazon ECS adds or removes from
      the service during a rolling update is controlled by adjusting the minimum and maximum number
      of healthy tasks allowed during a service deployment, as specified in the
      DeploymentConfiguration .

        CODE_DEPLOY

      The blue/green (``CODE_DEPLOY`` ) deployment type uses the blue/green deployment model powered
      by AWS CodeDeploy, which allows you to verify a new deployment of a service before sending
      production traffic to it.

        EXTERNAL

      The external (``EXTERNAL`` ) deployment type enables you to use any third-party deployment
      controller for full control over the deployment process for an Amazon ECS service.
    """


_ClientCreateServiceloadBalancersTypeDef = TypedDict(
    "_ClientCreateServiceloadBalancersTypeDef",
    {
        "targetGroupArn": str,
        "loadBalancerName": str,
        "containerName": str,
        "containerPort": int,
    },
    total=False,
)


class ClientCreateServiceloadBalancersTypeDef(_ClientCreateServiceloadBalancersTypeDef):
    """
    Type definition for `ClientCreateService` `loadBalancers`

    Details on the load balancer or load balancers to use with a service or task set.

    - **targetGroupArn** *(string) --*

      The full Amazon Resource Name (ARN) of the Elastic Load Balancing target group or groups
      associated with a service or task set.

      A target group ARN is only specified when using an Application Load Balancer or Network Load
      Balancer. If you are using a Classic Load Balancer this should be omitted.

      For services using the ``ECS`` deployment controller, you can specify one or multiple target
      groups. For more information, see `Registering Multiple Target Groups with a Service
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

      For services using the ``CODE_DEPLOY`` deployment controller, you are required to define two
      target groups for the load balancer. For more information, see `Blue/Green Deployment with
      CodeDeploy
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-bluegreen.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

      .. warning::

        If your service's task definition uses the ``awsvpc`` network mode (which is required for
        the Fargate launch type), you must choose ``ip`` as the target type, not ``instance`` ,
        when creating your target groups because tasks that use the ``awsvpc`` network mode are
        associated with an elastic network interface, not an Amazon EC2 instance.

    - **loadBalancerName** *(string) --*

      The name of the load balancer to associate with the Amazon ECS service or task set.

      A load balancer name is only specified when using a Classic Load Balancer. If you are using
      an Application Load Balancer or a Network Load Balancer this should be omitted.

    - **containerName** *(string) --*

      The name of the container (as it appears in a container definition) to associate with the
      load balancer.

    - **containerPort** *(integer) --*

      The port on the container to associate with the load balancer. This port must correspond to a
      ``containerPort`` in the task definition the tasks in the service are using. For tasks that
      use the EC2 launch type, the container instance they are launched on must allow ingress
      traffic on the ``hostPort`` of the port mapping.
    """


_RequiredClientCreateServicenetworkConfigurationawsvpcConfigurationTypeDef = TypedDict(
    "_RequiredClientCreateServicenetworkConfigurationawsvpcConfigurationTypeDef",
    {"subnets": List[str]},
)
_OptionalClientCreateServicenetworkConfigurationawsvpcConfigurationTypeDef = TypedDict(
    "_OptionalClientCreateServicenetworkConfigurationawsvpcConfigurationTypeDef",
    {"securityGroups": List[str], "assignPublicIp": str},
    total=False,
)


class ClientCreateServicenetworkConfigurationawsvpcConfigurationTypeDef(
    _RequiredClientCreateServicenetworkConfigurationawsvpcConfigurationTypeDef,
    _OptionalClientCreateServicenetworkConfigurationawsvpcConfigurationTypeDef,
):
    """
    Type definition for `ClientCreateServicenetworkConfiguration` `awsvpcConfiguration`

    The VPC subnets and security groups associated with a task.

    .. note::

      All specified subnets and security groups must be from the same VPC.

    - **subnets** *(list) --* **[REQUIRED]**

      The subnets associated with the task or service. There is a limit of 16 subnets that can be
      specified per ``AwsVpcConfiguration`` .

      .. note::

        All specified subnets must be from the same VPC.

      - *(string) --*

    - **securityGroups** *(list) --*

      The security groups associated with the task or service. If you do not specify a security
      group, the default security group for the VPC is used. There is a limit of 5 security groups
      that can be specified per ``AwsVpcConfiguration`` .

      .. note::

        All specified security groups must be from the same VPC.

      - *(string) --*

    - **assignPublicIp** *(string) --*

      Whether the task's elastic network interface receives a public IP address. The default value
      is ``DISABLED`` .
    """


_ClientCreateServicenetworkConfigurationTypeDef = TypedDict(
    "_ClientCreateServicenetworkConfigurationTypeDef",
    {
        "awsvpcConfiguration": ClientCreateServicenetworkConfigurationawsvpcConfigurationTypeDef
    },
    total=False,
)


class ClientCreateServicenetworkConfigurationTypeDef(
    _ClientCreateServicenetworkConfigurationTypeDef
):
    """
    Type definition for `ClientCreateService` `networkConfiguration`

    The network configuration for the service. This parameter is required for task definitions that
    use the ``awsvpc`` network mode to receive their own elastic network interface, and it is not
    supported for other network modes. For more information, see `Task Networking
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html>`__ in the
    *Amazon Elastic Container Service Developer Guide* .

    - **awsvpcConfiguration** *(dict) --*

      The VPC subnets and security groups associated with a task.

      .. note::

        All specified subnets and security groups must be from the same VPC.

      - **subnets** *(list) --* **[REQUIRED]**

        The subnets associated with the task or service. There is a limit of 16 subnets that can be
        specified per ``AwsVpcConfiguration`` .

        .. note::

          All specified subnets must be from the same VPC.

        - *(string) --*

      - **securityGroups** *(list) --*

        The security groups associated with the task or service. If you do not specify a security
        group, the default security group for the VPC is used. There is a limit of 5 security groups
        that can be specified per ``AwsVpcConfiguration`` .

        .. note::

          All specified security groups must be from the same VPC.

        - *(string) --*

      - **assignPublicIp** *(string) --*

        Whether the task's elastic network interface receives a public IP address. The default value
        is ``DISABLED`` .
    """


_ClientCreateServiceplacementConstraintsTypeDef = TypedDict(
    "_ClientCreateServiceplacementConstraintsTypeDef",
    {"type": str, "expression": str},
    total=False,
)


class ClientCreateServiceplacementConstraintsTypeDef(
    _ClientCreateServiceplacementConstraintsTypeDef
):
    """
    Type definition for `ClientCreateService` `placementConstraints`

    An object representing a constraint on task placement. For more information, see `Task
    Placement Constraints
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html>`__
    in the *Amazon Elastic Container Service Developer Guide* .

    .. note::

      If you are using the Fargate launch type, task placement constraints are not supported.

    - **type** *(string) --*

      The type of constraint. Use ``distinctInstance`` to ensure that each task in a particular
      group is running on a different container instance. Use ``memberOf`` to restrict the
      selection to a group of valid candidates.

    - **expression** *(string) --*

      A cluster query language expression to apply to the constraint. You cannot specify an
      expression if the constraint type is ``distinctInstance`` . For more information, see
      `Cluster Query Language
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .
    """


_ClientCreateServiceplacementStrategyTypeDef = TypedDict(
    "_ClientCreateServiceplacementStrategyTypeDef",
    {"type": str, "field": str},
    total=False,
)


class ClientCreateServiceplacementStrategyTypeDef(
    _ClientCreateServiceplacementStrategyTypeDef
):
    """
    Type definition for `ClientCreateService` `placementStrategy`

    The task placement strategy for a task or service. For more information, see `Task Placement
    Strategies
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-strategies.html>`__
    in the *Amazon Elastic Container Service Developer Guide* .

    - **type** *(string) --*

      The type of placement strategy. The ``random`` placement strategy randomly places tasks on
      available candidates. The ``spread`` placement strategy spreads placement across available
      candidates evenly based on the ``field`` parameter. The ``binpack`` strategy places tasks on
      available candidates that have the least available amount of the resource that is specified
      with the ``field`` parameter. For example, if you binpack on memory, a task is placed on the
      instance with the least amount of remaining memory (but still enough to run the task).

    - **field** *(string) --*

      The field to apply the placement strategy against. For the ``spread`` placement strategy,
      valid values are ``instanceId`` (or ``host`` , which has the same effect), or any platform or
      custom attribute that is applied to a container instance, such as
      ``attribute:ecs.availability-zone`` . For the ``binpack`` placement strategy, valid values
      are ``cpu`` and ``memory`` . For the ``random`` placement strategy, this field is not used.
    """


_ClientCreateServiceserviceRegistriesTypeDef = TypedDict(
    "_ClientCreateServiceserviceRegistriesTypeDef",
    {"registryArn": str, "port": int, "containerName": str, "containerPort": int},
    total=False,
)


class ClientCreateServiceserviceRegistriesTypeDef(
    _ClientCreateServiceserviceRegistriesTypeDef
):
    """
    Type definition for `ClientCreateService` `serviceRegistries`

    Details of the service registry.

    - **registryArn** *(string) --*

      The Amazon Resource Name (ARN) of the service registry. The currently supported service
      registry is AWS Cloud Map. For more information, see `CreateService
      <https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html>`__ .

    - **port** *(integer) --*

      The port value used if your service discovery service specified an SRV record. This field may
      be used if both the ``awsvpc`` network mode and SRV records are used.

    - **containerName** *(string) --*

      The container name value, already specified in the task definition, to be used for your
      service discovery service. If the task definition that your service task specifies uses the
      ``bridge`` or ``host`` network mode, you must specify a ``containerName`` and
      ``containerPort`` combination from the task definition. If the task definition that your
      service task specifies uses the ``awsvpc`` network mode and a type SRV DNS record is used,
      you must specify either a ``containerName`` and ``containerPort`` combination or a ``port``
      value, but not both.

    - **containerPort** *(integer) --*

      The port value, already specified in the task definition, to be used for your service
      discovery service. If the task definition your service task specifies uses the ``bridge`` or
      ``host`` network mode, you must specify a ``containerName`` and ``containerPort`` combination
      from the task definition. If the task definition your service task specifies uses the
      ``awsvpc`` network mode and a type SRV DNS record is used, you must specify either a
      ``containerName`` and ``containerPort`` combination or a ``port`` value, but not both.
    """


_ClientCreateServicetagsTypeDef = TypedDict(
    "_ClientCreateServicetagsTypeDef", {"key": str, "value": str}, total=False
)


class ClientCreateServicetagsTypeDef(_ClientCreateServicetagsTypeDef):
    """
    Type definition for `ClientCreateService` `tags`

    The metadata that you apply to a resource to help you categorize and organize them. Each tag
    consists of a key and an optional value, both of which you define.

    The following basic restrictions apply to tags:

    * Maximum number of tags per resource - 50

    * For each resource, each tag key must be unique, and each tag key can have only one value.

    * Maximum key length - 128 Unicode characters in UTF-8

    * Maximum value length - 256 Unicode characters in UTF-8

    * If your tagging schema is used across multiple services and resources, remember that other
    services may have restrictions on allowed characters. Generally allowed characters are:
    letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ :
    / @.

    * Tag keys and values are case-sensitive.

    * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a prefix
    for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys or
    values with this prefix. Tags with this prefix do not count against your tags per resource
    limit.

    - **key** *(string) --*

      One part of a key-value pair that make up a tag. A ``key`` is a general label that acts like
      a category for more specific tag values.

    - **value** *(string) --*

      The optional part of a key-value pair that make up a tag. A ``value`` acts as a descriptor
      within a tag category (key).
    """


_ClientCreateTaskSetResponsetaskSetloadBalancersTypeDef = TypedDict(
    "_ClientCreateTaskSetResponsetaskSetloadBalancersTypeDef",
    {
        "targetGroupArn": str,
        "loadBalancerName": str,
        "containerName": str,
        "containerPort": int,
    },
    total=False,
)


class ClientCreateTaskSetResponsetaskSetloadBalancersTypeDef(
    _ClientCreateTaskSetResponsetaskSetloadBalancersTypeDef
):
    """
    Type definition for `ClientCreateTaskSetResponsetaskSet` `loadBalancers`

    Details on the load balancer or load balancers to use with a service or task set.

    - **targetGroupArn** *(string) --*

      The full Amazon Resource Name (ARN) of the Elastic Load Balancing target group or
      groups associated with a service or task set.

      A target group ARN is only specified when using an Application Load Balancer or Network
      Load Balancer. If you are using a Classic Load Balancer this should be omitted.

      For services using the ``ECS`` deployment controller, you can specify one or multiple
      target groups. For more information, see `Registering Multiple Target Groups with a
      Service
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

      For services using the ``CODE_DEPLOY`` deployment controller, you are required to
      define two target groups for the load balancer. For more information, see `Blue/Green
      Deployment with CodeDeploy
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-bluegreen.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

      .. warning::

        If your service's task definition uses the ``awsvpc`` network mode (which is required
        for the Fargate launch type), you must choose ``ip`` as the target type, not
        ``instance`` , when creating your target groups because tasks that use the ``awsvpc``
        network mode are associated with an elastic network interface, not an Amazon EC2
        instance.

    - **loadBalancerName** *(string) --*

      The name of the load balancer to associate with the Amazon ECS service or task set.

      A load balancer name is only specified when using a Classic Load Balancer. If you are
      using an Application Load Balancer or a Network Load Balancer this should be omitted.

    - **containerName** *(string) --*

      The name of the container (as it appears in a container definition) to associate with
      the load balancer.

    - **containerPort** *(integer) --*

      The port on the container to associate with the load balancer. This port must
      correspond to a ``containerPort`` in the task definition the tasks in the service are
      using. For tasks that use the EC2 launch type, the container instance they are launched
      on must allow ingress traffic on the ``hostPort`` of the port mapping.
    """


_ClientCreateTaskSetResponsetaskSetnetworkConfigurationawsvpcConfigurationTypeDef = TypedDict(
    "_ClientCreateTaskSetResponsetaskSetnetworkConfigurationawsvpcConfigurationTypeDef",
    {"subnets": List[str], "securityGroups": List[str], "assignPublicIp": str},
    total=False,
)


class ClientCreateTaskSetResponsetaskSetnetworkConfigurationawsvpcConfigurationTypeDef(
    _ClientCreateTaskSetResponsetaskSetnetworkConfigurationawsvpcConfigurationTypeDef
):
    """
    Type definition for `ClientCreateTaskSetResponsetaskSetnetworkConfiguration` `awsvpcConfiguration`

    The VPC subnets and security groups associated with a task.

    .. note::

      All specified subnets and security groups must be from the same VPC.

    - **subnets** *(list) --*

      The subnets associated with the task or service. There is a limit of 16 subnets that
      can be specified per ``AwsVpcConfiguration`` .

      .. note::

        All specified subnets must be from the same VPC.

      - *(string) --*

    - **securityGroups** *(list) --*

      The security groups associated with the task or service. If you do not specify a
      security group, the default security group for the VPC is used. There is a limit of 5
      security groups that can be specified per ``AwsVpcConfiguration`` .

      .. note::

        All specified security groups must be from the same VPC.

      - *(string) --*

    - **assignPublicIp** *(string) --*

      Whether the task's elastic network interface receives a public IP address. The default
      value is ``DISABLED`` .
    """


_ClientCreateTaskSetResponsetaskSetnetworkConfigurationTypeDef = TypedDict(
    "_ClientCreateTaskSetResponsetaskSetnetworkConfigurationTypeDef",
    {
        "awsvpcConfiguration": ClientCreateTaskSetResponsetaskSetnetworkConfigurationawsvpcConfigurationTypeDef
    },
    total=False,
)


class ClientCreateTaskSetResponsetaskSetnetworkConfigurationTypeDef(
    _ClientCreateTaskSetResponsetaskSetnetworkConfigurationTypeDef
):
    """
    Type definition for `ClientCreateTaskSetResponsetaskSet` `networkConfiguration`

    The network configuration for the task set.

    - **awsvpcConfiguration** *(dict) --*

      The VPC subnets and security groups associated with a task.

      .. note::

        All specified subnets and security groups must be from the same VPC.

      - **subnets** *(list) --*

        The subnets associated with the task or service. There is a limit of 16 subnets that
        can be specified per ``AwsVpcConfiguration`` .

        .. note::

          All specified subnets must be from the same VPC.

        - *(string) --*

      - **securityGroups** *(list) --*

        The security groups associated with the task or service. If you do not specify a
        security group, the default security group for the VPC is used. There is a limit of 5
        security groups that can be specified per ``AwsVpcConfiguration`` .

        .. note::

          All specified security groups must be from the same VPC.

        - *(string) --*

      - **assignPublicIp** *(string) --*

        Whether the task's elastic network interface receives a public IP address. The default
        value is ``DISABLED`` .
    """


_ClientCreateTaskSetResponsetaskSetscaleTypeDef = TypedDict(
    "_ClientCreateTaskSetResponsetaskSetscaleTypeDef",
    {"value": float, "unit": str},
    total=False,
)


class ClientCreateTaskSetResponsetaskSetscaleTypeDef(
    _ClientCreateTaskSetResponsetaskSetscaleTypeDef
):
    """
    Type definition for `ClientCreateTaskSetResponsetaskSet` `scale`

    A floating-point percentage of the desired number of tasks to place and keep running in the
    task set.

    - **value** *(float) --*

      The value, specified as a percent total of a service's ``desiredCount`` , to scale the
      task set. Accepted values are numbers between 0 and 100.

    - **unit** *(string) --*

      The unit of measure for the scale value.
    """


_ClientCreateTaskSetResponsetaskSetserviceRegistriesTypeDef = TypedDict(
    "_ClientCreateTaskSetResponsetaskSetserviceRegistriesTypeDef",
    {"registryArn": str, "port": int, "containerName": str, "containerPort": int},
    total=False,
)


class ClientCreateTaskSetResponsetaskSetserviceRegistriesTypeDef(
    _ClientCreateTaskSetResponsetaskSetserviceRegistriesTypeDef
):
    """
    Type definition for `ClientCreateTaskSetResponsetaskSet` `serviceRegistries`

    Details of the service registry.

    - **registryArn** *(string) --*

      The Amazon Resource Name (ARN) of the service registry. The currently supported service
      registry is AWS Cloud Map. For more information, see `CreateService
      <https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html>`__ .

    - **port** *(integer) --*

      The port value used if your service discovery service specified an SRV record. This
      field may be used if both the ``awsvpc`` network mode and SRV records are used.

    - **containerName** *(string) --*

      The container name value, already specified in the task definition, to be used for your
      service discovery service. If the task definition that your service task specifies uses
      the ``bridge`` or ``host`` network mode, you must specify a ``containerName`` and
      ``containerPort`` combination from the task definition. If the task definition that
      your service task specifies uses the ``awsvpc`` network mode and a type SRV DNS record
      is used, you must specify either a ``containerName`` and ``containerPort`` combination
      or a ``port`` value, but not both.

    - **containerPort** *(integer) --*

      The port value, already specified in the task definition, to be used for your service
      discovery service. If the task definition your service task specifies uses the
      ``bridge`` or ``host`` network mode, you must specify a ``containerName`` and
      ``containerPort`` combination from the task definition. If the task definition your
      service task specifies uses the ``awsvpc`` network mode and a type SRV DNS record is
      used, you must specify either a ``containerName`` and ``containerPort`` combination or
      a ``port`` value, but not both.
    """


_ClientCreateTaskSetResponsetaskSetTypeDef = TypedDict(
    "_ClientCreateTaskSetResponsetaskSetTypeDef",
    {
        "id": str,
        "taskSetArn": str,
        "serviceArn": str,
        "clusterArn": str,
        "startedBy": str,
        "externalId": str,
        "status": str,
        "taskDefinition": str,
        "computedDesiredCount": int,
        "pendingCount": int,
        "runningCount": int,
        "createdAt": datetime,
        "updatedAt": datetime,
        "launchType": str,
        "platformVersion": str,
        "networkConfiguration": ClientCreateTaskSetResponsetaskSetnetworkConfigurationTypeDef,
        "loadBalancers": List[ClientCreateTaskSetResponsetaskSetloadBalancersTypeDef],
        "serviceRegistries": List[
            ClientCreateTaskSetResponsetaskSetserviceRegistriesTypeDef
        ],
        "scale": ClientCreateTaskSetResponsetaskSetscaleTypeDef,
        "stabilityStatus": str,
        "stabilityStatusAt": datetime,
    },
    total=False,
)


class ClientCreateTaskSetResponsetaskSetTypeDef(
    _ClientCreateTaskSetResponsetaskSetTypeDef
):
    """
    Type definition for `ClientCreateTaskSetResponse` `taskSet`

    Information about a set of Amazon ECS tasks in either an AWS CodeDeploy or an ``EXTERNAL``
    deployment. An Amazon ECS task set includes details such as the desired number of tasks, how
    many tasks are running, and whether the task set serves production traffic.

    - **id** *(string) --*

      The ID of the task set.

    - **taskSetArn** *(string) --*

      The Amazon Resource Name (ARN) of the task set.

    - **serviceArn** *(string) --*

      The Amazon Resource Name (ARN) of the service the task set exists in.

    - **clusterArn** *(string) --*

      The Amazon Resource Name (ARN) of the cluster that the service that hosts the task set
      exists in.

    - **startedBy** *(string) --*

      The tag specified when a task set is started. If the task set is created by an AWS
      CodeDeploy deployment, the ``startedBy`` parameter is ``CODE_DEPLOY`` . For a task set
      created for an external deployment, the startedBy field isn't used.

    - **externalId** *(string) --*

      The external ID associated with the task set.

      If a task set is created by an AWS CodeDeploy deployment, the ``externalId`` parameter
      contains the AWS CodeDeploy deployment ID.

      If a task set is created for an external deployment and is associated with a service
      discovery registry, the ``externalId`` parameter contains the ``ECS_TASK_SET_EXTERNAL_ID``
      AWS Cloud Map attribute.

    - **status** *(string) --*

      The status of the task set. The following describes each state:

        PRIMARY

      The task set is serving production traffic.

        ACTIVE

      The task set is not serving production traffic.

        DRAINING

      The tasks in the task set are being stopped and their corresponding targets are being
      deregistered from their target group.

    - **taskDefinition** *(string) --*

      The task definition the task set is using.

    - **computedDesiredCount** *(integer) --*

      The computed desired count for the task set. This is calculated by multiplying the
      service's ``desiredCount`` by the task set's ``scale`` percentage. The result is always
      rounded up. For example, if the computed desired count is 1.2, it rounds up to 2 tasks.

    - **pendingCount** *(integer) --*

      The number of tasks in the task set that are in the ``PENDING`` status during a deployment.
      A task in the ``PENDING`` state is preparing to enter the ``RUNNING`` state. A task set
      enters the ``PENDING`` status when it launches for the first time or when it is restarted
      after being in the ``STOPPED`` state.

    - **runningCount** *(integer) --*

      The number of tasks in the task set that are in the ``RUNNING`` status during a deployment.
      A task in the ``RUNNING`` state is running and ready for use.

    - **createdAt** *(datetime) --*

      The Unix timestamp for when the task set was created.

    - **updatedAt** *(datetime) --*

      The Unix timestamp for when the task set was last updated.

    - **launchType** *(string) --*

      The launch type the tasks in the task set are using. For more information, see `Amazon ECS
      Launch Types
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html>`__ in the
      *Amazon Elastic Container Service Developer Guide* .

    - **platformVersion** *(string) --*

      The platform version on which the tasks in the task set are running. A platform version is
      only specified for tasks using the Fargate launch type. If one is not specified, the
      ``LATEST`` platform version is used by default. For more information, see `AWS Fargate
      Platform Versions
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html>`__ in
      the *Amazon Elastic Container Service Developer Guide* .

    - **networkConfiguration** *(dict) --*

      The network configuration for the task set.

      - **awsvpcConfiguration** *(dict) --*

        The VPC subnets and security groups associated with a task.

        .. note::

          All specified subnets and security groups must be from the same VPC.

        - **subnets** *(list) --*

          The subnets associated with the task or service. There is a limit of 16 subnets that
          can be specified per ``AwsVpcConfiguration`` .

          .. note::

            All specified subnets must be from the same VPC.

          - *(string) --*

        - **securityGroups** *(list) --*

          The security groups associated with the task or service. If you do not specify a
          security group, the default security group for the VPC is used. There is a limit of 5
          security groups that can be specified per ``AwsVpcConfiguration`` .

          .. note::

            All specified security groups must be from the same VPC.

          - *(string) --*

        - **assignPublicIp** *(string) --*

          Whether the task's elastic network interface receives a public IP address. The default
          value is ``DISABLED`` .

    - **loadBalancers** *(list) --*

      Details on a load balancer that is used with a task set.

      - *(dict) --*

        Details on the load balancer or load balancers to use with a service or task set.

        - **targetGroupArn** *(string) --*

          The full Amazon Resource Name (ARN) of the Elastic Load Balancing target group or
          groups associated with a service or task set.

          A target group ARN is only specified when using an Application Load Balancer or Network
          Load Balancer. If you are using a Classic Load Balancer this should be omitted.

          For services using the ``ECS`` deployment controller, you can specify one or multiple
          target groups. For more information, see `Registering Multiple Target Groups with a
          Service
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

          For services using the ``CODE_DEPLOY`` deployment controller, you are required to
          define two target groups for the load balancer. For more information, see `Blue/Green
          Deployment with CodeDeploy
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-bluegreen.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

          .. warning::

            If your service's task definition uses the ``awsvpc`` network mode (which is required
            for the Fargate launch type), you must choose ``ip`` as the target type, not
            ``instance`` , when creating your target groups because tasks that use the ``awsvpc``
            network mode are associated with an elastic network interface, not an Amazon EC2
            instance.

        - **loadBalancerName** *(string) --*

          The name of the load balancer to associate with the Amazon ECS service or task set.

          A load balancer name is only specified when using a Classic Load Balancer. If you are
          using an Application Load Balancer or a Network Load Balancer this should be omitted.

        - **containerName** *(string) --*

          The name of the container (as it appears in a container definition) to associate with
          the load balancer.

        - **containerPort** *(integer) --*

          The port on the container to associate with the load balancer. This port must
          correspond to a ``containerPort`` in the task definition the tasks in the service are
          using. For tasks that use the EC2 launch type, the container instance they are launched
          on must allow ingress traffic on the ``hostPort`` of the port mapping.

    - **serviceRegistries** *(list) --*

      The details of the service discovery registries to assign to this task set. For more
      information, see `Service Discovery
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html>`__ .

      - *(dict) --*

        Details of the service registry.

        - **registryArn** *(string) --*

          The Amazon Resource Name (ARN) of the service registry. The currently supported service
          registry is AWS Cloud Map. For more information, see `CreateService
          <https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html>`__ .

        - **port** *(integer) --*

          The port value used if your service discovery service specified an SRV record. This
          field may be used if both the ``awsvpc`` network mode and SRV records are used.

        - **containerName** *(string) --*

          The container name value, already specified in the task definition, to be used for your
          service discovery service. If the task definition that your service task specifies uses
          the ``bridge`` or ``host`` network mode, you must specify a ``containerName`` and
          ``containerPort`` combination from the task definition. If the task definition that
          your service task specifies uses the ``awsvpc`` network mode and a type SRV DNS record
          is used, you must specify either a ``containerName`` and ``containerPort`` combination
          or a ``port`` value, but not both.

        - **containerPort** *(integer) --*

          The port value, already specified in the task definition, to be used for your service
          discovery service. If the task definition your service task specifies uses the
          ``bridge`` or ``host`` network mode, you must specify a ``containerName`` and
          ``containerPort`` combination from the task definition. If the task definition your
          service task specifies uses the ``awsvpc`` network mode and a type SRV DNS record is
          used, you must specify either a ``containerName`` and ``containerPort`` combination or
          a ``port`` value, but not both.

    - **scale** *(dict) --*

      A floating-point percentage of the desired number of tasks to place and keep running in the
      task set.

      - **value** *(float) --*

        The value, specified as a percent total of a service's ``desiredCount`` , to scale the
        task set. Accepted values are numbers between 0 and 100.

      - **unit** *(string) --*

        The unit of measure for the scale value.

    - **stabilityStatus** *(string) --*

      The stability status, which indicates whether the task set has reached a steady state. If
      the following conditions are met, the task set will be in ``STEADY_STATE`` :

      * The task ``runningCount`` is equal to the ``computedDesiredCount`` .

      * The ``pendingCount`` is ``0`` .

      * There are no tasks running on container instances in the ``DRAINING`` status.

      * All tasks are reporting a healthy status from the load balancers, service discovery, and
      container health checks.

      If any of those conditions are not met, the stability status returns ``STABILIZING`` .

    - **stabilityStatusAt** *(datetime) --*

      The Unix timestamp for when the task set stability status was retrieved.
    """


_ClientCreateTaskSetResponseTypeDef = TypedDict(
    "_ClientCreateTaskSetResponseTypeDef",
    {"taskSet": ClientCreateTaskSetResponsetaskSetTypeDef},
    total=False,
)


class ClientCreateTaskSetResponseTypeDef(_ClientCreateTaskSetResponseTypeDef):
    """
    Type definition for `ClientCreateTaskSet` `Response`

    - **taskSet** *(dict) --*

      Information about a set of Amazon ECS tasks in either an AWS CodeDeploy or an ``EXTERNAL``
      deployment. An Amazon ECS task set includes details such as the desired number of tasks, how
      many tasks are running, and whether the task set serves production traffic.

      - **id** *(string) --*

        The ID of the task set.

      - **taskSetArn** *(string) --*

        The Amazon Resource Name (ARN) of the task set.

      - **serviceArn** *(string) --*

        The Amazon Resource Name (ARN) of the service the task set exists in.

      - **clusterArn** *(string) --*

        The Amazon Resource Name (ARN) of the cluster that the service that hosts the task set
        exists in.

      - **startedBy** *(string) --*

        The tag specified when a task set is started. If the task set is created by an AWS
        CodeDeploy deployment, the ``startedBy`` parameter is ``CODE_DEPLOY`` . For a task set
        created for an external deployment, the startedBy field isn't used.

      - **externalId** *(string) --*

        The external ID associated with the task set.

        If a task set is created by an AWS CodeDeploy deployment, the ``externalId`` parameter
        contains the AWS CodeDeploy deployment ID.

        If a task set is created for an external deployment and is associated with a service
        discovery registry, the ``externalId`` parameter contains the ``ECS_TASK_SET_EXTERNAL_ID``
        AWS Cloud Map attribute.

      - **status** *(string) --*

        The status of the task set. The following describes each state:

          PRIMARY

        The task set is serving production traffic.

          ACTIVE

        The task set is not serving production traffic.

          DRAINING

        The tasks in the task set are being stopped and their corresponding targets are being
        deregistered from their target group.

      - **taskDefinition** *(string) --*

        The task definition the task set is using.

      - **computedDesiredCount** *(integer) --*

        The computed desired count for the task set. This is calculated by multiplying the
        service's ``desiredCount`` by the task set's ``scale`` percentage. The result is always
        rounded up. For example, if the computed desired count is 1.2, it rounds up to 2 tasks.

      - **pendingCount** *(integer) --*

        The number of tasks in the task set that are in the ``PENDING`` status during a deployment.
        A task in the ``PENDING`` state is preparing to enter the ``RUNNING`` state. A task set
        enters the ``PENDING`` status when it launches for the first time or when it is restarted
        after being in the ``STOPPED`` state.

      - **runningCount** *(integer) --*

        The number of tasks in the task set that are in the ``RUNNING`` status during a deployment.
        A task in the ``RUNNING`` state is running and ready for use.

      - **createdAt** *(datetime) --*

        The Unix timestamp for when the task set was created.

      - **updatedAt** *(datetime) --*

        The Unix timestamp for when the task set was last updated.

      - **launchType** *(string) --*

        The launch type the tasks in the task set are using. For more information, see `Amazon ECS
        Launch Types
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html>`__ in the
        *Amazon Elastic Container Service Developer Guide* .

      - **platformVersion** *(string) --*

        The platform version on which the tasks in the task set are running. A platform version is
        only specified for tasks using the Fargate launch type. If one is not specified, the
        ``LATEST`` platform version is used by default. For more information, see `AWS Fargate
        Platform Versions
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html>`__ in
        the *Amazon Elastic Container Service Developer Guide* .

      - **networkConfiguration** *(dict) --*

        The network configuration for the task set.

        - **awsvpcConfiguration** *(dict) --*

          The VPC subnets and security groups associated with a task.

          .. note::

            All specified subnets and security groups must be from the same VPC.

          - **subnets** *(list) --*

            The subnets associated with the task or service. There is a limit of 16 subnets that
            can be specified per ``AwsVpcConfiguration`` .

            .. note::

              All specified subnets must be from the same VPC.

            - *(string) --*

          - **securityGroups** *(list) --*

            The security groups associated with the task or service. If you do not specify a
            security group, the default security group for the VPC is used. There is a limit of 5
            security groups that can be specified per ``AwsVpcConfiguration`` .

            .. note::

              All specified security groups must be from the same VPC.

            - *(string) --*

          - **assignPublicIp** *(string) --*

            Whether the task's elastic network interface receives a public IP address. The default
            value is ``DISABLED`` .

      - **loadBalancers** *(list) --*

        Details on a load balancer that is used with a task set.

        - *(dict) --*

          Details on the load balancer or load balancers to use with a service or task set.

          - **targetGroupArn** *(string) --*

            The full Amazon Resource Name (ARN) of the Elastic Load Balancing target group or
            groups associated with a service or task set.

            A target group ARN is only specified when using an Application Load Balancer or Network
            Load Balancer. If you are using a Classic Load Balancer this should be omitted.

            For services using the ``ECS`` deployment controller, you can specify one or multiple
            target groups. For more information, see `Registering Multiple Target Groups with a
            Service
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html>`__
            in the *Amazon Elastic Container Service Developer Guide* .

            For services using the ``CODE_DEPLOY`` deployment controller, you are required to
            define two target groups for the load balancer. For more information, see `Blue/Green
            Deployment with CodeDeploy
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-bluegreen.html>`__
            in the *Amazon Elastic Container Service Developer Guide* .

            .. warning::

              If your service's task definition uses the ``awsvpc`` network mode (which is required
              for the Fargate launch type), you must choose ``ip`` as the target type, not
              ``instance`` , when creating your target groups because tasks that use the ``awsvpc``
              network mode are associated with an elastic network interface, not an Amazon EC2
              instance.

          - **loadBalancerName** *(string) --*

            The name of the load balancer to associate with the Amazon ECS service or task set.

            A load balancer name is only specified when using a Classic Load Balancer. If you are
            using an Application Load Balancer or a Network Load Balancer this should be omitted.

          - **containerName** *(string) --*

            The name of the container (as it appears in a container definition) to associate with
            the load balancer.

          - **containerPort** *(integer) --*

            The port on the container to associate with the load balancer. This port must
            correspond to a ``containerPort`` in the task definition the tasks in the service are
            using. For tasks that use the EC2 launch type, the container instance they are launched
            on must allow ingress traffic on the ``hostPort`` of the port mapping.

      - **serviceRegistries** *(list) --*

        The details of the service discovery registries to assign to this task set. For more
        information, see `Service Discovery
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html>`__ .

        - *(dict) --*

          Details of the service registry.

          - **registryArn** *(string) --*

            The Amazon Resource Name (ARN) of the service registry. The currently supported service
            registry is AWS Cloud Map. For more information, see `CreateService
            <https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html>`__ .

          - **port** *(integer) --*

            The port value used if your service discovery service specified an SRV record. This
            field may be used if both the ``awsvpc`` network mode and SRV records are used.

          - **containerName** *(string) --*

            The container name value, already specified in the task definition, to be used for your
            service discovery service. If the task definition that your service task specifies uses
            the ``bridge`` or ``host`` network mode, you must specify a ``containerName`` and
            ``containerPort`` combination from the task definition. If the task definition that
            your service task specifies uses the ``awsvpc`` network mode and a type SRV DNS record
            is used, you must specify either a ``containerName`` and ``containerPort`` combination
            or a ``port`` value, but not both.

          - **containerPort** *(integer) --*

            The port value, already specified in the task definition, to be used for your service
            discovery service. If the task definition your service task specifies uses the
            ``bridge`` or ``host`` network mode, you must specify a ``containerName`` and
            ``containerPort`` combination from the task definition. If the task definition your
            service task specifies uses the ``awsvpc`` network mode and a type SRV DNS record is
            used, you must specify either a ``containerName`` and ``containerPort`` combination or
            a ``port`` value, but not both.

      - **scale** *(dict) --*

        A floating-point percentage of the desired number of tasks to place and keep running in the
        task set.

        - **value** *(float) --*

          The value, specified as a percent total of a service's ``desiredCount`` , to scale the
          task set. Accepted values are numbers between 0 and 100.

        - **unit** *(string) --*

          The unit of measure for the scale value.

      - **stabilityStatus** *(string) --*

        The stability status, which indicates whether the task set has reached a steady state. If
        the following conditions are met, the task set will be in ``STEADY_STATE`` :

        * The task ``runningCount`` is equal to the ``computedDesiredCount`` .

        * The ``pendingCount`` is ``0`` .

        * There are no tasks running on container instances in the ``DRAINING`` status.

        * All tasks are reporting a healthy status from the load balancers, service discovery, and
        container health checks.

        If any of those conditions are not met, the stability status returns ``STABILIZING`` .

      - **stabilityStatusAt** *(datetime) --*

        The Unix timestamp for when the task set stability status was retrieved.
    """


_ClientCreateTaskSetloadBalancersTypeDef = TypedDict(
    "_ClientCreateTaskSetloadBalancersTypeDef",
    {
        "targetGroupArn": str,
        "loadBalancerName": str,
        "containerName": str,
        "containerPort": int,
    },
    total=False,
)


class ClientCreateTaskSetloadBalancersTypeDef(_ClientCreateTaskSetloadBalancersTypeDef):
    """
    Type definition for `ClientCreateTaskSet` `loadBalancers`

    Details on the load balancer or load balancers to use with a service or task set.

    - **targetGroupArn** *(string) --*

      The full Amazon Resource Name (ARN) of the Elastic Load Balancing target group or groups
      associated with a service or task set.

      A target group ARN is only specified when using an Application Load Balancer or Network Load
      Balancer. If you are using a Classic Load Balancer this should be omitted.

      For services using the ``ECS`` deployment controller, you can specify one or multiple target
      groups. For more information, see `Registering Multiple Target Groups with a Service
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

      For services using the ``CODE_DEPLOY`` deployment controller, you are required to define two
      target groups for the load balancer. For more information, see `Blue/Green Deployment with
      CodeDeploy
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-bluegreen.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

      .. warning::

        If your service's task definition uses the ``awsvpc`` network mode (which is required for
        the Fargate launch type), you must choose ``ip`` as the target type, not ``instance`` ,
        when creating your target groups because tasks that use the ``awsvpc`` network mode are
        associated with an elastic network interface, not an Amazon EC2 instance.

    - **loadBalancerName** *(string) --*

      The name of the load balancer to associate with the Amazon ECS service or task set.

      A load balancer name is only specified when using a Classic Load Balancer. If you are using
      an Application Load Balancer or a Network Load Balancer this should be omitted.

    - **containerName** *(string) --*

      The name of the container (as it appears in a container definition) to associate with the
      load balancer.

    - **containerPort** *(integer) --*

      The port on the container to associate with the load balancer. This port must correspond to a
      ``containerPort`` in the task definition the tasks in the service are using. For tasks that
      use the EC2 launch type, the container instance they are launched on must allow ingress
      traffic on the ``hostPort`` of the port mapping.
    """


_RequiredClientCreateTaskSetnetworkConfigurationawsvpcConfigurationTypeDef = TypedDict(
    "_RequiredClientCreateTaskSetnetworkConfigurationawsvpcConfigurationTypeDef",
    {"subnets": List[str]},
)
_OptionalClientCreateTaskSetnetworkConfigurationawsvpcConfigurationTypeDef = TypedDict(
    "_OptionalClientCreateTaskSetnetworkConfigurationawsvpcConfigurationTypeDef",
    {"securityGroups": List[str], "assignPublicIp": str},
    total=False,
)


class ClientCreateTaskSetnetworkConfigurationawsvpcConfigurationTypeDef(
    _RequiredClientCreateTaskSetnetworkConfigurationawsvpcConfigurationTypeDef,
    _OptionalClientCreateTaskSetnetworkConfigurationawsvpcConfigurationTypeDef,
):
    """
    Type definition for `ClientCreateTaskSetnetworkConfiguration` `awsvpcConfiguration`

    The VPC subnets and security groups associated with a task.

    .. note::

      All specified subnets and security groups must be from the same VPC.

    - **subnets** *(list) --* **[REQUIRED]**

      The subnets associated with the task or service. There is a limit of 16 subnets that can be
      specified per ``AwsVpcConfiguration`` .

      .. note::

        All specified subnets must be from the same VPC.

      - *(string) --*

    - **securityGroups** *(list) --*

      The security groups associated with the task or service. If you do not specify a security
      group, the default security group for the VPC is used. There is a limit of 5 security groups
      that can be specified per ``AwsVpcConfiguration`` .

      .. note::

        All specified security groups must be from the same VPC.

      - *(string) --*

    - **assignPublicIp** *(string) --*

      Whether the task's elastic network interface receives a public IP address. The default value
      is ``DISABLED`` .
    """


_ClientCreateTaskSetnetworkConfigurationTypeDef = TypedDict(
    "_ClientCreateTaskSetnetworkConfigurationTypeDef",
    {
        "awsvpcConfiguration": ClientCreateTaskSetnetworkConfigurationawsvpcConfigurationTypeDef
    },
    total=False,
)


class ClientCreateTaskSetnetworkConfigurationTypeDef(
    _ClientCreateTaskSetnetworkConfigurationTypeDef
):
    """
    Type definition for `ClientCreateTaskSet` `networkConfiguration`

    An object representing the network configuration for a task or service.

    - **awsvpcConfiguration** *(dict) --*

      The VPC subnets and security groups associated with a task.

      .. note::

        All specified subnets and security groups must be from the same VPC.

      - **subnets** *(list) --* **[REQUIRED]**

        The subnets associated with the task or service. There is a limit of 16 subnets that can be
        specified per ``AwsVpcConfiguration`` .

        .. note::

          All specified subnets must be from the same VPC.

        - *(string) --*

      - **securityGroups** *(list) --*

        The security groups associated with the task or service. If you do not specify a security
        group, the default security group for the VPC is used. There is a limit of 5 security groups
        that can be specified per ``AwsVpcConfiguration`` .

        .. note::

          All specified security groups must be from the same VPC.

        - *(string) --*

      - **assignPublicIp** *(string) --*

        Whether the task's elastic network interface receives a public IP address. The default value
        is ``DISABLED`` .
    """


_ClientCreateTaskSetscaleTypeDef = TypedDict(
    "_ClientCreateTaskSetscaleTypeDef", {"value": float, "unit": str}, total=False
)


class ClientCreateTaskSetscaleTypeDef(_ClientCreateTaskSetscaleTypeDef):
    """
    Type definition for `ClientCreateTaskSet` `scale`

    A floating-point percentage of the desired number of tasks to place and keep running in the task
    set.

    - **value** *(float) --*

      The value, specified as a percent total of a service's ``desiredCount`` , to scale the task
      set. Accepted values are numbers between 0 and 100.

    - **unit** *(string) --*

      The unit of measure for the scale value.
    """


_ClientCreateTaskSetserviceRegistriesTypeDef = TypedDict(
    "_ClientCreateTaskSetserviceRegistriesTypeDef",
    {"registryArn": str, "port": int, "containerName": str, "containerPort": int},
    total=False,
)


class ClientCreateTaskSetserviceRegistriesTypeDef(
    _ClientCreateTaskSetserviceRegistriesTypeDef
):
    """
    Type definition for `ClientCreateTaskSet` `serviceRegistries`

    Details of the service registry.

    - **registryArn** *(string) --*

      The Amazon Resource Name (ARN) of the service registry. The currently supported service
      registry is AWS Cloud Map. For more information, see `CreateService
      <https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html>`__ .

    - **port** *(integer) --*

      The port value used if your service discovery service specified an SRV record. This field may
      be used if both the ``awsvpc`` network mode and SRV records are used.

    - **containerName** *(string) --*

      The container name value, already specified in the task definition, to be used for your
      service discovery service. If the task definition that your service task specifies uses the
      ``bridge`` or ``host`` network mode, you must specify a ``containerName`` and
      ``containerPort`` combination from the task definition. If the task definition that your
      service task specifies uses the ``awsvpc`` network mode and a type SRV DNS record is used,
      you must specify either a ``containerName`` and ``containerPort`` combination or a ``port``
      value, but not both.

    - **containerPort** *(integer) --*

      The port value, already specified in the task definition, to be used for your service
      discovery service. If the task definition your service task specifies uses the ``bridge`` or
      ``host`` network mode, you must specify a ``containerName`` and ``containerPort`` combination
      from the task definition. If the task definition your service task specifies uses the
      ``awsvpc`` network mode and a type SRV DNS record is used, you must specify either a
      ``containerName`` and ``containerPort`` combination or a ``port`` value, but not both.
    """


_ClientDeleteAccountSettingResponsesettingTypeDef = TypedDict(
    "_ClientDeleteAccountSettingResponsesettingTypeDef",
    {"name": str, "value": str, "principalArn": str},
    total=False,
)


class ClientDeleteAccountSettingResponsesettingTypeDef(
    _ClientDeleteAccountSettingResponsesettingTypeDef
):
    """
    Type definition for `ClientDeleteAccountSettingResponse` `setting`

    The account setting for the specified principal ARN.

    - **name** *(string) --*

      The Amazon ECS resource name.

    - **value** *(string) --*

      Whether the account setting is enabled or disabled for the specified resource.

    - **principalArn** *(string) --*

      The ARN of the principal, which can be an IAM user, IAM role, or the root user. If this
      field is omitted, the authenticated user is assumed.
    """


_ClientDeleteAccountSettingResponseTypeDef = TypedDict(
    "_ClientDeleteAccountSettingResponseTypeDef",
    {"setting": ClientDeleteAccountSettingResponsesettingTypeDef},
    total=False,
)


class ClientDeleteAccountSettingResponseTypeDef(
    _ClientDeleteAccountSettingResponseTypeDef
):
    """
    Type definition for `ClientDeleteAccountSetting` `Response`

    - **setting** *(dict) --*

      The account setting for the specified principal ARN.

      - **name** *(string) --*

        The Amazon ECS resource name.

      - **value** *(string) --*

        Whether the account setting is enabled or disabled for the specified resource.

      - **principalArn** *(string) --*

        The ARN of the principal, which can be an IAM user, IAM role, or the root user. If this
        field is omitted, the authenticated user is assumed.
    """


_ClientDeleteAttributesResponseattributesTypeDef = TypedDict(
    "_ClientDeleteAttributesResponseattributesTypeDef",
    {"name": str, "value": str, "targetType": str, "targetId": str},
    total=False,
)


class ClientDeleteAttributesResponseattributesTypeDef(
    _ClientDeleteAttributesResponseattributesTypeDef
):
    """
    Type definition for `ClientDeleteAttributesResponse` `attributes`

    An attribute is a name-value pair associated with an Amazon ECS object. Attributes enable
    you to extend the Amazon ECS data model by adding custom metadata to your resources. For
    more information, see `Attributes
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html#attributes>`__
    in the *Amazon Elastic Container Service Developer Guide* .

    - **name** *(string) --*

      The name of the attribute. Up to 128 letters (uppercase and lowercase), numbers, hyphens,
      underscores, and periods are allowed.

    - **value** *(string) --*

      The value of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
      hyphens, underscores, periods, at signs (@), forward slashes, colons, and spaces are
      allowed.

    - **targetType** *(string) --*

      The type of the target with which to attach the attribute. This parameter is required if
      you use the short form ID for a resource instead of the full ARN.

    - **targetId** *(string) --*

      The ID of the target. You can specify the short form ID for a resource or the full Amazon
      Resource Name (ARN).
    """


_ClientDeleteAttributesResponseTypeDef = TypedDict(
    "_ClientDeleteAttributesResponseTypeDef",
    {"attributes": List[ClientDeleteAttributesResponseattributesTypeDef]},
    total=False,
)


class ClientDeleteAttributesResponseTypeDef(_ClientDeleteAttributesResponseTypeDef):
    """
    Type definition for `ClientDeleteAttributes` `Response`

    - **attributes** *(list) --*

      A list of attribute objects that were successfully deleted from your resource.

      - *(dict) --*

        An attribute is a name-value pair associated with an Amazon ECS object. Attributes enable
        you to extend the Amazon ECS data model by adding custom metadata to your resources. For
        more information, see `Attributes
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html#attributes>`__
        in the *Amazon Elastic Container Service Developer Guide* .

        - **name** *(string) --*

          The name of the attribute. Up to 128 letters (uppercase and lowercase), numbers, hyphens,
          underscores, and periods are allowed.

        - **value** *(string) --*

          The value of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
          hyphens, underscores, periods, at signs (@), forward slashes, colons, and spaces are
          allowed.

        - **targetType** *(string) --*

          The type of the target with which to attach the attribute. This parameter is required if
          you use the short form ID for a resource instead of the full ARN.

        - **targetId** *(string) --*

          The ID of the target. You can specify the short form ID for a resource or the full Amazon
          Resource Name (ARN).
    """


_RequiredClientDeleteAttributesattributesTypeDef = TypedDict(
    "_RequiredClientDeleteAttributesattributesTypeDef", {"name": str}
)
_OptionalClientDeleteAttributesattributesTypeDef = TypedDict(
    "_OptionalClientDeleteAttributesattributesTypeDef",
    {"value": str, "targetType": str, "targetId": str},
    total=False,
)


class ClientDeleteAttributesattributesTypeDef(
    _RequiredClientDeleteAttributesattributesTypeDef,
    _OptionalClientDeleteAttributesattributesTypeDef,
):
    """
    Type definition for `ClientDeleteAttributes` `attributes`

    An attribute is a name-value pair associated with an Amazon ECS object. Attributes enable you
    to extend the Amazon ECS data model by adding custom metadata to your resources. For more
    information, see `Attributes
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html#attributes>`__
    in the *Amazon Elastic Container Service Developer Guide* .

    - **name** *(string) --* **[REQUIRED]**

      The name of the attribute. Up to 128 letters (uppercase and lowercase), numbers, hyphens,
      underscores, and periods are allowed.

    - **value** *(string) --*

      The value of the attribute. Up to 128 letters (uppercase and lowercase), numbers, hyphens,
      underscores, periods, at signs (@), forward slashes, colons, and spaces are allowed.

    - **targetType** *(string) --*

      The type of the target with which to attach the attribute. This parameter is required if you
      use the short form ID for a resource instead of the full ARN.

    - **targetId** *(string) --*

      The ID of the target. You can specify the short form ID for a resource or the full Amazon
      Resource Name (ARN).
    """


_ClientDeleteClusterResponseclustersettingsTypeDef = TypedDict(
    "_ClientDeleteClusterResponseclustersettingsTypeDef",
    {"name": str, "value": str},
    total=False,
)


class ClientDeleteClusterResponseclustersettingsTypeDef(
    _ClientDeleteClusterResponseclustersettingsTypeDef
):
    """
    Type definition for `ClientDeleteClusterResponsecluster` `settings`

    The settings to use when creating a cluster. This parameter is used to enable CloudWatch
    Container Insights for a cluster.

    - **name** *(string) --*

      The name of the cluster setting. The only supported value is ``containerInsights`` .

    - **value** *(string) --*

      The value to set for the cluster setting. The supported values are ``enabled`` and
      ``disabled`` . If ``enabled`` is specified, CloudWatch Container Insights will be
      enabled for the cluster, otherwise it will be disabled unless the ``containerInsights``
      account setting is enabled. If a cluster value is specified, it will override the
      ``containerInsights`` value set with  PutAccountSetting or  PutAccountSettingDefault .
    """


_ClientDeleteClusterResponseclusterstatisticsTypeDef = TypedDict(
    "_ClientDeleteClusterResponseclusterstatisticsTypeDef",
    {"name": str, "value": str},
    total=False,
)


class ClientDeleteClusterResponseclusterstatisticsTypeDef(
    _ClientDeleteClusterResponseclusterstatisticsTypeDef
):
    """
    Type definition for `ClientDeleteClusterResponsecluster` `statistics`

    A key-value pair object.

    - **name** *(string) --*

      The name of the key-value pair. For environment variables, this is the name of the
      environment variable.

    - **value** *(string) --*

      The value of the key-value pair. For environment variables, this is the value of the
      environment variable.
    """


_ClientDeleteClusterResponseclustertagsTypeDef = TypedDict(
    "_ClientDeleteClusterResponseclustertagsTypeDef",
    {"key": str, "value": str},
    total=False,
)


class ClientDeleteClusterResponseclustertagsTypeDef(
    _ClientDeleteClusterResponseclustertagsTypeDef
):
    """
    Type definition for `ClientDeleteClusterResponsecluster` `tags`

    The metadata that you apply to a resource to help you categorize and organize them. Each
    tag consists of a key and an optional value, both of which you define.

    The following basic restrictions apply to tags:

    * Maximum number of tags per resource - 50

    * For each resource, each tag key must be unique, and each tag key can have only one
    value.

    * Maximum key length - 128 Unicode characters in UTF-8

    * Maximum value length - 256 Unicode characters in UTF-8

    * If your tagging schema is used across multiple services and resources, remember that
    other services may have restrictions on allowed characters. Generally allowed characters
    are: letters, numbers, and spaces representable in UTF-8, and the following characters: +
    - = . _ : / @.

    * Tag keys and values are case-sensitive.

    * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
    prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
    tag keys or values with this prefix. Tags with this prefix do not count against your tags
    per resource limit.

    - **key** *(string) --*

      One part of a key-value pair that make up a tag. A ``key`` is a general label that acts
      like a category for more specific tag values.

    - **value** *(string) --*

      The optional part of a key-value pair that make up a tag. A ``value`` acts as a
      descriptor within a tag category (key).
    """


_ClientDeleteClusterResponseclusterTypeDef = TypedDict(
    "_ClientDeleteClusterResponseclusterTypeDef",
    {
        "clusterArn": str,
        "clusterName": str,
        "status": str,
        "registeredContainerInstancesCount": int,
        "runningTasksCount": int,
        "pendingTasksCount": int,
        "activeServicesCount": int,
        "statistics": List[ClientDeleteClusterResponseclusterstatisticsTypeDef],
        "tags": List[ClientDeleteClusterResponseclustertagsTypeDef],
        "settings": List[ClientDeleteClusterResponseclustersettingsTypeDef],
    },
    total=False,
)


class ClientDeleteClusterResponseclusterTypeDef(
    _ClientDeleteClusterResponseclusterTypeDef
):
    """
    Type definition for `ClientDeleteClusterResponse` `cluster`

    The full description of the deleted cluster.

    - **clusterArn** *(string) --*

      The Amazon Resource Name (ARN) that identifies the cluster. The ARN contains the
      ``arn:aws:ecs`` namespace, followed by the Region of the cluster, the AWS account ID of the
      cluster owner, the ``cluster`` namespace, and then the cluster name. For example,
      ``arn:aws:ecs:region:012345678910:cluster/test`` .

    - **clusterName** *(string) --*

      A user-generated string that you use to identify your cluster.

    - **status** *(string) --*

      The status of the cluster. The valid values are ``ACTIVE`` or ``INACTIVE`` . ``ACTIVE``
      indicates that you can register container instances with the cluster and the associated
      instances can accept tasks.

    - **registeredContainerInstancesCount** *(integer) --*

      The number of container instances registered into the cluster. This includes container
      instances in both ``ACTIVE`` and ``DRAINING`` status.

    - **runningTasksCount** *(integer) --*

      The number of tasks in the cluster that are in the ``RUNNING`` state.

    - **pendingTasksCount** *(integer) --*

      The number of tasks in the cluster that are in the ``PENDING`` state.

    - **activeServicesCount** *(integer) --*

      The number of services that are running on the cluster in an ``ACTIVE`` state. You can view
      these services with  ListServices .

    - **statistics** *(list) --*

      Additional information about your clusters that are separated by launch type, including:

      * runningEC2TasksCount

      * RunningFargateTasksCount

      * pendingEC2TasksCount

      * pendingFargateTasksCount

      * activeEC2ServiceCount

      * activeFargateServiceCount

      * drainingEC2ServiceCount

      * drainingFargateServiceCount

      - *(dict) --*

        A key-value pair object.

        - **name** *(string) --*

          The name of the key-value pair. For environment variables, this is the name of the
          environment variable.

        - **value** *(string) --*

          The value of the key-value pair. For environment variables, this is the value of the
          environment variable.

    - **tags** *(list) --*

      The metadata that you apply to the cluster to help you categorize and organize them. Each
      tag consists of a key and an optional value, both of which you define.

      The following basic restrictions apply to tags:

      * Maximum number of tags per resource - 50

      * For each resource, each tag key must be unique, and each tag key can have only one value.

      * Maximum key length - 128 Unicode characters in UTF-8

      * Maximum value length - 256 Unicode characters in UTF-8

      * If your tagging schema is used across multiple services and resources, remember that
      other services may have restrictions on allowed characters. Generally allowed characters
      are: letters, numbers, and spaces representable in UTF-8, and the following characters: + -
      = . _ : / @.

      * Tag keys and values are case-sensitive.

      * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
      prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
      tag keys or values with this prefix. Tags with this prefix do not count against your tags
      per resource limit.

      - *(dict) --*

        The metadata that you apply to a resource to help you categorize and organize them. Each
        tag consists of a key and an optional value, both of which you define.

        The following basic restrictions apply to tags:

        * Maximum number of tags per resource - 50

        * For each resource, each tag key must be unique, and each tag key can have only one
        value.

        * Maximum key length - 128 Unicode characters in UTF-8

        * Maximum value length - 256 Unicode characters in UTF-8

        * If your tagging schema is used across multiple services and resources, remember that
        other services may have restrictions on allowed characters. Generally allowed characters
        are: letters, numbers, and spaces representable in UTF-8, and the following characters: +
        - = . _ : / @.

        * Tag keys and values are case-sensitive.

        * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
        prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
        tag keys or values with this prefix. Tags with this prefix do not count against your tags
        per resource limit.

        - **key** *(string) --*

          One part of a key-value pair that make up a tag. A ``key`` is a general label that acts
          like a category for more specific tag values.

        - **value** *(string) --*

          The optional part of a key-value pair that make up a tag. A ``value`` acts as a
          descriptor within a tag category (key).

    - **settings** *(list) --*

      The settings for the cluster. This parameter indicates whether CloudWatch Container
      Insights is enabled or disabled for a cluster.

      - *(dict) --*

        The settings to use when creating a cluster. This parameter is used to enable CloudWatch
        Container Insights for a cluster.

        - **name** *(string) --*

          The name of the cluster setting. The only supported value is ``containerInsights`` .

        - **value** *(string) --*

          The value to set for the cluster setting. The supported values are ``enabled`` and
          ``disabled`` . If ``enabled`` is specified, CloudWatch Container Insights will be
          enabled for the cluster, otherwise it will be disabled unless the ``containerInsights``
          account setting is enabled. If a cluster value is specified, it will override the
          ``containerInsights`` value set with  PutAccountSetting or  PutAccountSettingDefault .
    """


_ClientDeleteClusterResponseTypeDef = TypedDict(
    "_ClientDeleteClusterResponseTypeDef",
    {"cluster": ClientDeleteClusterResponseclusterTypeDef},
    total=False,
)


class ClientDeleteClusterResponseTypeDef(_ClientDeleteClusterResponseTypeDef):
    """
    Type definition for `ClientDeleteCluster` `Response`

    - **cluster** *(dict) --*

      The full description of the deleted cluster.

      - **clusterArn** *(string) --*

        The Amazon Resource Name (ARN) that identifies the cluster. The ARN contains the
        ``arn:aws:ecs`` namespace, followed by the Region of the cluster, the AWS account ID of the
        cluster owner, the ``cluster`` namespace, and then the cluster name. For example,
        ``arn:aws:ecs:region:012345678910:cluster/test`` .

      - **clusterName** *(string) --*

        A user-generated string that you use to identify your cluster.

      - **status** *(string) --*

        The status of the cluster. The valid values are ``ACTIVE`` or ``INACTIVE`` . ``ACTIVE``
        indicates that you can register container instances with the cluster and the associated
        instances can accept tasks.

      - **registeredContainerInstancesCount** *(integer) --*

        The number of container instances registered into the cluster. This includes container
        instances in both ``ACTIVE`` and ``DRAINING`` status.

      - **runningTasksCount** *(integer) --*

        The number of tasks in the cluster that are in the ``RUNNING`` state.

      - **pendingTasksCount** *(integer) --*

        The number of tasks in the cluster that are in the ``PENDING`` state.

      - **activeServicesCount** *(integer) --*

        The number of services that are running on the cluster in an ``ACTIVE`` state. You can view
        these services with  ListServices .

      - **statistics** *(list) --*

        Additional information about your clusters that are separated by launch type, including:

        * runningEC2TasksCount

        * RunningFargateTasksCount

        * pendingEC2TasksCount

        * pendingFargateTasksCount

        * activeEC2ServiceCount

        * activeFargateServiceCount

        * drainingEC2ServiceCount

        * drainingFargateServiceCount

        - *(dict) --*

          A key-value pair object.

          - **name** *(string) --*

            The name of the key-value pair. For environment variables, this is the name of the
            environment variable.

          - **value** *(string) --*

            The value of the key-value pair. For environment variables, this is the value of the
            environment variable.

      - **tags** *(list) --*

        The metadata that you apply to the cluster to help you categorize and organize them. Each
        tag consists of a key and an optional value, both of which you define.

        The following basic restrictions apply to tags:

        * Maximum number of tags per resource - 50

        * For each resource, each tag key must be unique, and each tag key can have only one value.

        * Maximum key length - 128 Unicode characters in UTF-8

        * Maximum value length - 256 Unicode characters in UTF-8

        * If your tagging schema is used across multiple services and resources, remember that
        other services may have restrictions on allowed characters. Generally allowed characters
        are: letters, numbers, and spaces representable in UTF-8, and the following characters: + -
        = . _ : / @.

        * Tag keys and values are case-sensitive.

        * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
        prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
        tag keys or values with this prefix. Tags with this prefix do not count against your tags
        per resource limit.

        - *(dict) --*

          The metadata that you apply to a resource to help you categorize and organize them. Each
          tag consists of a key and an optional value, both of which you define.

          The following basic restrictions apply to tags:

          * Maximum number of tags per resource - 50

          * For each resource, each tag key must be unique, and each tag key can have only one
          value.

          * Maximum key length - 128 Unicode characters in UTF-8

          * Maximum value length - 256 Unicode characters in UTF-8

          * If your tagging schema is used across multiple services and resources, remember that
          other services may have restrictions on allowed characters. Generally allowed characters
          are: letters, numbers, and spaces representable in UTF-8, and the following characters: +
          - = . _ : / @.

          * Tag keys and values are case-sensitive.

          * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
          prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
          tag keys or values with this prefix. Tags with this prefix do not count against your tags
          per resource limit.

          - **key** *(string) --*

            One part of a key-value pair that make up a tag. A ``key`` is a general label that acts
            like a category for more specific tag values.

          - **value** *(string) --*

            The optional part of a key-value pair that make up a tag. A ``value`` acts as a
            descriptor within a tag category (key).

      - **settings** *(list) --*

        The settings for the cluster. This parameter indicates whether CloudWatch Container
        Insights is enabled or disabled for a cluster.

        - *(dict) --*

          The settings to use when creating a cluster. This parameter is used to enable CloudWatch
          Container Insights for a cluster.

          - **name** *(string) --*

            The name of the cluster setting. The only supported value is ``containerInsights`` .

          - **value** *(string) --*

            The value to set for the cluster setting. The supported values are ``enabled`` and
            ``disabled`` . If ``enabled`` is specified, CloudWatch Container Insights will be
            enabled for the cluster, otherwise it will be disabled unless the ``containerInsights``
            account setting is enabled. If a cluster value is specified, it will override the
            ``containerInsights`` value set with  PutAccountSetting or  PutAccountSettingDefault .
    """


_ClientDeleteServiceResponseservicedeploymentConfigurationTypeDef = TypedDict(
    "_ClientDeleteServiceResponseservicedeploymentConfigurationTypeDef",
    {"maximumPercent": int, "minimumHealthyPercent": int},
    total=False,
)


class ClientDeleteServiceResponseservicedeploymentConfigurationTypeDef(
    _ClientDeleteServiceResponseservicedeploymentConfigurationTypeDef
):
    """
    Type definition for `ClientDeleteServiceResponseservice` `deploymentConfiguration`

    Optional deployment parameters that control how many tasks run during the deployment and
    the ordering of stopping and starting tasks.

    - **maximumPercent** *(integer) --*

      If a service is using the rolling update (``ECS`` ) deployment type, the **maximum
      percent** parameter represents an upper limit on the number of tasks in a service that
      are allowed in the ``RUNNING`` or ``PENDING`` state during a deployment, as a percentage
      of the desired number of tasks (rounded down to the nearest integer), and while any
      container instances are in the ``DRAINING`` state if the service contains tasks using the
      EC2 launch type. This parameter enables you to define the deployment batch size. For
      example, if your service has a desired number of four tasks and a maximum percent value
      of 200%, the scheduler may start four new tasks before stopping the four older tasks
      (provided that the cluster resources required to do this are available). The default
      value for maximum percent is 200%.

      If a service is using the blue/green (``CODE_DEPLOY`` ) or ``EXTERNAL`` deployment types
      and tasks that use the EC2 launch type, the **maximum percent** value is set to the
      default value and is used to define the upper limit on the number of the tasks in the
      service that remain in the ``RUNNING`` state while the container instances are in the
      ``DRAINING`` state. If the tasks in the service use the Fargate launch type, the maximum
      percent value is not used, although it is returned when describing your service.

    - **minimumHealthyPercent** *(integer) --*

      If a service is using the rolling update (``ECS`` ) deployment type, the **minimum
      healthy percent** represents a lower limit on the number of tasks in a service that must
      remain in the ``RUNNING`` state during a deployment, as a percentage of the desired
      number of tasks (rounded up to the nearest integer), and while any container instances
      are in the ``DRAINING`` state if the service contains tasks using the EC2 launch type.
      This parameter enables you to deploy without using additional cluster capacity. For
      example, if your service has a desired number of four tasks and a minimum healthy percent
      of 50%, the scheduler may stop two existing tasks to free up cluster capacity before
      starting two new tasks. Tasks for services that *do not* use a load balancer are
      considered healthy if they are in the ``RUNNING`` state; tasks for services that *do* use
      a load balancer are considered healthy if they are in the ``RUNNING`` state and they are
      reported as healthy by the load balancer. The default value for minimum healthy percent
      is 100%.

      If a service is using the blue/green (``CODE_DEPLOY`` ) or ``EXTERNAL`` deployment types
      and tasks that use the EC2 launch type, the **minimum healthy percent** value is set to
      the default value and is used to define the lower limit on the number of the tasks in the
      service that remain in the ``RUNNING`` state while the container instances are in the
      ``DRAINING`` state. If the tasks in the service use the Fargate launch type, the minimum
      healthy percent value is not used, although it is returned when describing your service.
    """


_ClientDeleteServiceResponseservicedeploymentControllerTypeDef = TypedDict(
    "_ClientDeleteServiceResponseservicedeploymentControllerTypeDef",
    {"type": str},
    total=False,
)


class ClientDeleteServiceResponseservicedeploymentControllerTypeDef(
    _ClientDeleteServiceResponseservicedeploymentControllerTypeDef
):
    """
    Type definition for `ClientDeleteServiceResponseservice` `deploymentController`

    The deployment controller type the service is using. When using the DescribeServices API,
    this field is omitted if the service is using the ``ECS`` deployment controller type.

    - **type** *(string) --*

      The deployment controller type to use.

      There are three deployment controller types available:

        ECS

      The rolling update (``ECS`` ) deployment type involves replacing the current running
      version of the container with the latest version. The number of containers Amazon ECS
      adds or removes from the service during a rolling update is controlled by adjusting the
      minimum and maximum number of healthy tasks allowed during a service deployment, as
      specified in the  DeploymentConfiguration .

        CODE_DEPLOY

      The blue/green (``CODE_DEPLOY`` ) deployment type uses the blue/green deployment model
      powered by AWS CodeDeploy, which allows you to verify a new deployment of a service
      before sending production traffic to it.

        EXTERNAL

      The external (``EXTERNAL`` ) deployment type enables you to use any third-party
      deployment controller for full control over the deployment process for an Amazon ECS
      service.
    """


_ClientDeleteServiceResponseservicedeploymentsnetworkConfigurationawsvpcConfigurationTypeDef = TypedDict(
    "_ClientDeleteServiceResponseservicedeploymentsnetworkConfigurationawsvpcConfigurationTypeDef",
    {"subnets": List[str], "securityGroups": List[str], "assignPublicIp": str},
    total=False,
)


class ClientDeleteServiceResponseservicedeploymentsnetworkConfigurationawsvpcConfigurationTypeDef(
    _ClientDeleteServiceResponseservicedeploymentsnetworkConfigurationawsvpcConfigurationTypeDef
):
    """
    Type definition for `ClientDeleteServiceResponseservicedeploymentsnetworkConfiguration` `awsvpcConfiguration`

    The VPC subnets and security groups associated with a task.

    .. note::

      All specified subnets and security groups must be from the same VPC.

    - **subnets** *(list) --*

      The subnets associated with the task or service. There is a limit of 16 subnets
      that can be specified per ``AwsVpcConfiguration`` .

      .. note::

        All specified subnets must be from the same VPC.

      - *(string) --*

    - **securityGroups** *(list) --*

      The security groups associated with the task or service. If you do not specify a
      security group, the default security group for the VPC is used. There is a limit of
      5 security groups that can be specified per ``AwsVpcConfiguration`` .

      .. note::

        All specified security groups must be from the same VPC.

      - *(string) --*

    - **assignPublicIp** *(string) --*

      Whether the task's elastic network interface receives a public IP address. The
      default value is ``DISABLED`` .
    """


_ClientDeleteServiceResponseservicedeploymentsnetworkConfigurationTypeDef = TypedDict(
    "_ClientDeleteServiceResponseservicedeploymentsnetworkConfigurationTypeDef",
    {
        "awsvpcConfiguration": ClientDeleteServiceResponseservicedeploymentsnetworkConfigurationawsvpcConfigurationTypeDef
    },
    total=False,
)


class ClientDeleteServiceResponseservicedeploymentsnetworkConfigurationTypeDef(
    _ClientDeleteServiceResponseservicedeploymentsnetworkConfigurationTypeDef
):
    """
    Type definition for `ClientDeleteServiceResponseservicedeployments` `networkConfiguration`

    The VPC subnet and security group configuration for tasks that receive their own
    elastic network interface by using the ``awsvpc`` networking mode.

    - **awsvpcConfiguration** *(dict) --*

      The VPC subnets and security groups associated with a task.

      .. note::

        All specified subnets and security groups must be from the same VPC.

      - **subnets** *(list) --*

        The subnets associated with the task or service. There is a limit of 16 subnets
        that can be specified per ``AwsVpcConfiguration`` .

        .. note::

          All specified subnets must be from the same VPC.

        - *(string) --*

      - **securityGroups** *(list) --*

        The security groups associated with the task or service. If you do not specify a
        security group, the default security group for the VPC is used. There is a limit of
        5 security groups that can be specified per ``AwsVpcConfiguration`` .

        .. note::

          All specified security groups must be from the same VPC.

        - *(string) --*

      - **assignPublicIp** *(string) --*

        Whether the task's elastic network interface receives a public IP address. The
        default value is ``DISABLED`` .
    """


_ClientDeleteServiceResponseservicedeploymentsTypeDef = TypedDict(
    "_ClientDeleteServiceResponseservicedeploymentsTypeDef",
    {
        "id": str,
        "status": str,
        "taskDefinition": str,
        "desiredCount": int,
        "pendingCount": int,
        "runningCount": int,
        "createdAt": datetime,
        "updatedAt": datetime,
        "launchType": str,
        "platformVersion": str,
        "networkConfiguration": ClientDeleteServiceResponseservicedeploymentsnetworkConfigurationTypeDef,
    },
    total=False,
)


class ClientDeleteServiceResponseservicedeploymentsTypeDef(
    _ClientDeleteServiceResponseservicedeploymentsTypeDef
):
    """
    Type definition for `ClientDeleteServiceResponseservice` `deployments`

    The details of an Amazon ECS service deployment. This is used only when a service uses
    the ``ECS`` deployment controller type.

    - **id** *(string) --*

      The ID of the deployment.

    - **status** *(string) --*

      The status of the deployment. The following describes each state:

        PRIMARY

      The most recent deployment of a service.

        ACTIVE

      A service deployment that still has running tasks, but are in the process of being
      replaced with a new ``PRIMARY`` deployment.

        INACTIVE

      A deployment that has been completely replaced.

    - **taskDefinition** *(string) --*

      The most recent task definition that was specified for the tasks in the service to use.

    - **desiredCount** *(integer) --*

      The most recent desired count of tasks that was specified for the service to deploy or
      maintain.

    - **pendingCount** *(integer) --*

      The number of tasks in the deployment that are in the ``PENDING`` status.

    - **runningCount** *(integer) --*

      The number of tasks in the deployment that are in the ``RUNNING`` status.

    - **createdAt** *(datetime) --*

      The Unix timestamp for when the service deployment was created.

    - **updatedAt** *(datetime) --*

      The Unix timestamp for when the service deployment was last updated.

    - **launchType** *(string) --*

      The launch type the tasks in the service are using. For more information, see `Amazon
      ECS Launch Types
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html>`__ in
      the *Amazon Elastic Container Service Developer Guide* .

    - **platformVersion** *(string) --*

      The platform version on which your tasks in the service are running. A platform version
      is only specified for tasks using the Fargate launch type. If one is not specified, the
      ``LATEST`` platform version is used by default. For more information, see `AWS Fargate
      Platform Versions
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

    - **networkConfiguration** *(dict) --*

      The VPC subnet and security group configuration for tasks that receive their own
      elastic network interface by using the ``awsvpc`` networking mode.

      - **awsvpcConfiguration** *(dict) --*

        The VPC subnets and security groups associated with a task.

        .. note::

          All specified subnets and security groups must be from the same VPC.

        - **subnets** *(list) --*

          The subnets associated with the task or service. There is a limit of 16 subnets
          that can be specified per ``AwsVpcConfiguration`` .

          .. note::

            All specified subnets must be from the same VPC.

          - *(string) --*

        - **securityGroups** *(list) --*

          The security groups associated with the task or service. If you do not specify a
          security group, the default security group for the VPC is used. There is a limit of
          5 security groups that can be specified per ``AwsVpcConfiguration`` .

          .. note::

            All specified security groups must be from the same VPC.

          - *(string) --*

        - **assignPublicIp** *(string) --*

          Whether the task's elastic network interface receives a public IP address. The
          default value is ``DISABLED`` .
    """


_ClientDeleteServiceResponseserviceeventsTypeDef = TypedDict(
    "_ClientDeleteServiceResponseserviceeventsTypeDef",
    {"id": str, "createdAt": datetime, "message": str},
    total=False,
)


class ClientDeleteServiceResponseserviceeventsTypeDef(
    _ClientDeleteServiceResponseserviceeventsTypeDef
):
    """
    Type definition for `ClientDeleteServiceResponseservice` `events`

    Details on an event associated with a service.

    - **id** *(string) --*

      The ID string of the event.

    - **createdAt** *(datetime) --*

      The Unix timestamp for when the event was triggered.

    - **message** *(string) --*

      The event message.
    """


_ClientDeleteServiceResponseserviceloadBalancersTypeDef = TypedDict(
    "_ClientDeleteServiceResponseserviceloadBalancersTypeDef",
    {
        "targetGroupArn": str,
        "loadBalancerName": str,
        "containerName": str,
        "containerPort": int,
    },
    total=False,
)


class ClientDeleteServiceResponseserviceloadBalancersTypeDef(
    _ClientDeleteServiceResponseserviceloadBalancersTypeDef
):
    """
    Type definition for `ClientDeleteServiceResponseservice` `loadBalancers`

    Details on the load balancer or load balancers to use with a service or task set.

    - **targetGroupArn** *(string) --*

      The full Amazon Resource Name (ARN) of the Elastic Load Balancing target group or
      groups associated with a service or task set.

      A target group ARN is only specified when using an Application Load Balancer or Network
      Load Balancer. If you are using a Classic Load Balancer this should be omitted.

      For services using the ``ECS`` deployment controller, you can specify one or multiple
      target groups. For more information, see `Registering Multiple Target Groups with a
      Service
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

      For services using the ``CODE_DEPLOY`` deployment controller, you are required to
      define two target groups for the load balancer. For more information, see `Blue/Green
      Deployment with CodeDeploy
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-bluegreen.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

      .. warning::

        If your service's task definition uses the ``awsvpc`` network mode (which is required
        for the Fargate launch type), you must choose ``ip`` as the target type, not
        ``instance`` , when creating your target groups because tasks that use the ``awsvpc``
        network mode are associated with an elastic network interface, not an Amazon EC2
        instance.

    - **loadBalancerName** *(string) --*

      The name of the load balancer to associate with the Amazon ECS service or task set.

      A load balancer name is only specified when using a Classic Load Balancer. If you are
      using an Application Load Balancer or a Network Load Balancer this should be omitted.

    - **containerName** *(string) --*

      The name of the container (as it appears in a container definition) to associate with
      the load balancer.

    - **containerPort** *(integer) --*

      The port on the container to associate with the load balancer. This port must
      correspond to a ``containerPort`` in the task definition the tasks in the service are
      using. For tasks that use the EC2 launch type, the container instance they are launched
      on must allow ingress traffic on the ``hostPort`` of the port mapping.
    """


_ClientDeleteServiceResponseservicenetworkConfigurationawsvpcConfigurationTypeDef = TypedDict(
    "_ClientDeleteServiceResponseservicenetworkConfigurationawsvpcConfigurationTypeDef",
    {"subnets": List[str], "securityGroups": List[str], "assignPublicIp": str},
    total=False,
)


class ClientDeleteServiceResponseservicenetworkConfigurationawsvpcConfigurationTypeDef(
    _ClientDeleteServiceResponseservicenetworkConfigurationawsvpcConfigurationTypeDef
):
    """
    Type definition for `ClientDeleteServiceResponseservicenetworkConfiguration` `awsvpcConfiguration`

    The VPC subnets and security groups associated with a task.

    .. note::

      All specified subnets and security groups must be from the same VPC.

    - **subnets** *(list) --*

      The subnets associated with the task or service. There is a limit of 16 subnets that
      can be specified per ``AwsVpcConfiguration`` .

      .. note::

        All specified subnets must be from the same VPC.

      - *(string) --*

    - **securityGroups** *(list) --*

      The security groups associated with the task or service. If you do not specify a
      security group, the default security group for the VPC is used. There is a limit of 5
      security groups that can be specified per ``AwsVpcConfiguration`` .

      .. note::

        All specified security groups must be from the same VPC.

      - *(string) --*

    - **assignPublicIp** *(string) --*

      Whether the task's elastic network interface receives a public IP address. The default
      value is ``DISABLED`` .
    """


_ClientDeleteServiceResponseservicenetworkConfigurationTypeDef = TypedDict(
    "_ClientDeleteServiceResponseservicenetworkConfigurationTypeDef",
    {
        "awsvpcConfiguration": ClientDeleteServiceResponseservicenetworkConfigurationawsvpcConfigurationTypeDef
    },
    total=False,
)


class ClientDeleteServiceResponseservicenetworkConfigurationTypeDef(
    _ClientDeleteServiceResponseservicenetworkConfigurationTypeDef
):
    """
    Type definition for `ClientDeleteServiceResponseservice` `networkConfiguration`

    The VPC subnet and security group configuration for tasks that receive their own elastic
    network interface by using the ``awsvpc`` networking mode.

    - **awsvpcConfiguration** *(dict) --*

      The VPC subnets and security groups associated with a task.

      .. note::

        All specified subnets and security groups must be from the same VPC.

      - **subnets** *(list) --*

        The subnets associated with the task or service. There is a limit of 16 subnets that
        can be specified per ``AwsVpcConfiguration`` .

        .. note::

          All specified subnets must be from the same VPC.

        - *(string) --*

      - **securityGroups** *(list) --*

        The security groups associated with the task or service. If you do not specify a
        security group, the default security group for the VPC is used. There is a limit of 5
        security groups that can be specified per ``AwsVpcConfiguration`` .

        .. note::

          All specified security groups must be from the same VPC.

        - *(string) --*

      - **assignPublicIp** *(string) --*

        Whether the task's elastic network interface receives a public IP address. The default
        value is ``DISABLED`` .
    """


_ClientDeleteServiceResponseserviceplacementConstraintsTypeDef = TypedDict(
    "_ClientDeleteServiceResponseserviceplacementConstraintsTypeDef",
    {"type": str, "expression": str},
    total=False,
)


class ClientDeleteServiceResponseserviceplacementConstraintsTypeDef(
    _ClientDeleteServiceResponseserviceplacementConstraintsTypeDef
):
    """
    Type definition for `ClientDeleteServiceResponseservice` `placementConstraints`

    An object representing a constraint on task placement. For more information, see `Task
    Placement Constraints
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html>`__
    in the *Amazon Elastic Container Service Developer Guide* .

    .. note::

      If you are using the Fargate launch type, task placement constraints are not supported.

    - **type** *(string) --*

      The type of constraint. Use ``distinctInstance`` to ensure that each task in a
      particular group is running on a different container instance. Use ``memberOf`` to
      restrict the selection to a group of valid candidates.

    - **expression** *(string) --*

      A cluster query language expression to apply to the constraint. You cannot specify an
      expression if the constraint type is ``distinctInstance`` . For more information, see
      `Cluster Query Language
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .
    """


_ClientDeleteServiceResponseserviceplacementStrategyTypeDef = TypedDict(
    "_ClientDeleteServiceResponseserviceplacementStrategyTypeDef",
    {"type": str, "field": str},
    total=False,
)


class ClientDeleteServiceResponseserviceplacementStrategyTypeDef(
    _ClientDeleteServiceResponseserviceplacementStrategyTypeDef
):
    """
    Type definition for `ClientDeleteServiceResponseservice` `placementStrategy`

    The task placement strategy for a task or service. For more information, see `Task
    Placement Strategies
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-strategies.html>`__
    in the *Amazon Elastic Container Service Developer Guide* .

    - **type** *(string) --*

      The type of placement strategy. The ``random`` placement strategy randomly places tasks
      on available candidates. The ``spread`` placement strategy spreads placement across
      available candidates evenly based on the ``field`` parameter. The ``binpack`` strategy
      places tasks on available candidates that have the least available amount of the
      resource that is specified with the ``field`` parameter. For example, if you binpack on
      memory, a task is placed on the instance with the least amount of remaining memory (but
      still enough to run the task).

    - **field** *(string) --*

      The field to apply the placement strategy against. For the ``spread`` placement
      strategy, valid values are ``instanceId`` (or ``host`` , which has the same effect), or
      any platform or custom attribute that is applied to a container instance, such as
      ``attribute:ecs.availability-zone`` . For the ``binpack`` placement strategy, valid
      values are ``cpu`` and ``memory`` . For the ``random`` placement strategy, this field
      is not used.
    """


_ClientDeleteServiceResponseserviceserviceRegistriesTypeDef = TypedDict(
    "_ClientDeleteServiceResponseserviceserviceRegistriesTypeDef",
    {"registryArn": str, "port": int, "containerName": str, "containerPort": int},
    total=False,
)


class ClientDeleteServiceResponseserviceserviceRegistriesTypeDef(
    _ClientDeleteServiceResponseserviceserviceRegistriesTypeDef
):
    """
    Type definition for `ClientDeleteServiceResponseservice` `serviceRegistries`

    Details of the service registry.

    - **registryArn** *(string) --*

      The Amazon Resource Name (ARN) of the service registry. The currently supported service
      registry is AWS Cloud Map. For more information, see `CreateService
      <https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html>`__ .

    - **port** *(integer) --*

      The port value used if your service discovery service specified an SRV record. This
      field may be used if both the ``awsvpc`` network mode and SRV records are used.

    - **containerName** *(string) --*

      The container name value, already specified in the task definition, to be used for your
      service discovery service. If the task definition that your service task specifies uses
      the ``bridge`` or ``host`` network mode, you must specify a ``containerName`` and
      ``containerPort`` combination from the task definition. If the task definition that
      your service task specifies uses the ``awsvpc`` network mode and a type SRV DNS record
      is used, you must specify either a ``containerName`` and ``containerPort`` combination
      or a ``port`` value, but not both.

    - **containerPort** *(integer) --*

      The port value, already specified in the task definition, to be used for your service
      discovery service. If the task definition your service task specifies uses the
      ``bridge`` or ``host`` network mode, you must specify a ``containerName`` and
      ``containerPort`` combination from the task definition. If the task definition your
      service task specifies uses the ``awsvpc`` network mode and a type SRV DNS record is
      used, you must specify either a ``containerName`` and ``containerPort`` combination or
      a ``port`` value, but not both.
    """


_ClientDeleteServiceResponseservicetagsTypeDef = TypedDict(
    "_ClientDeleteServiceResponseservicetagsTypeDef",
    {"key": str, "value": str},
    total=False,
)


class ClientDeleteServiceResponseservicetagsTypeDef(
    _ClientDeleteServiceResponseservicetagsTypeDef
):
    """
    Type definition for `ClientDeleteServiceResponseservice` `tags`

    The metadata that you apply to a resource to help you categorize and organize them. Each
    tag consists of a key and an optional value, both of which you define.

    The following basic restrictions apply to tags:

    * Maximum number of tags per resource - 50

    * For each resource, each tag key must be unique, and each tag key can have only one
    value.

    * Maximum key length - 128 Unicode characters in UTF-8

    * Maximum value length - 256 Unicode characters in UTF-8

    * If your tagging schema is used across multiple services and resources, remember that
    other services may have restrictions on allowed characters. Generally allowed characters
    are: letters, numbers, and spaces representable in UTF-8, and the following characters: +
    - = . _ : / @.

    * Tag keys and values are case-sensitive.

    * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
    prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
    tag keys or values with this prefix. Tags with this prefix do not count against your tags
    per resource limit.

    - **key** *(string) --*

      One part of a key-value pair that make up a tag. A ``key`` is a general label that acts
      like a category for more specific tag values.

    - **value** *(string) --*

      The optional part of a key-value pair that make up a tag. A ``value`` acts as a
      descriptor within a tag category (key).
    """


_ClientDeleteServiceResponseservicetaskSetsloadBalancersTypeDef = TypedDict(
    "_ClientDeleteServiceResponseservicetaskSetsloadBalancersTypeDef",
    {
        "targetGroupArn": str,
        "loadBalancerName": str,
        "containerName": str,
        "containerPort": int,
    },
    total=False,
)


class ClientDeleteServiceResponseservicetaskSetsloadBalancersTypeDef(
    _ClientDeleteServiceResponseservicetaskSetsloadBalancersTypeDef
):
    """
    Type definition for `ClientDeleteServiceResponseservicetaskSets` `loadBalancers`

    Details on the load balancer or load balancers to use with a service or task set.

    - **targetGroupArn** *(string) --*

      The full Amazon Resource Name (ARN) of the Elastic Load Balancing target group or
      groups associated with a service or task set.

      A target group ARN is only specified when using an Application Load Balancer or
      Network Load Balancer. If you are using a Classic Load Balancer this should be
      omitted.

      For services using the ``ECS`` deployment controller, you can specify one or
      multiple target groups. For more information, see `Registering Multiple Target
      Groups with a Service
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

      For services using the ``CODE_DEPLOY`` deployment controller, you are required to
      define two target groups for the load balancer. For more information, see
      `Blue/Green Deployment with CodeDeploy
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-bluegreen.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

      .. warning::

        If your service's task definition uses the ``awsvpc`` network mode (which is
        required for the Fargate launch type), you must choose ``ip`` as the target type,
        not ``instance`` , when creating your target groups because tasks that use the
        ``awsvpc`` network mode are associated with an elastic network interface, not an
        Amazon EC2 instance.

    - **loadBalancerName** *(string) --*

      The name of the load balancer to associate with the Amazon ECS service or task set.

      A load balancer name is only specified when using a Classic Load Balancer. If you
      are using an Application Load Balancer or a Network Load Balancer this should be
      omitted.

    - **containerName** *(string) --*

      The name of the container (as it appears in a container definition) to associate
      with the load balancer.

    - **containerPort** *(integer) --*

      The port on the container to associate with the load balancer. This port must
      correspond to a ``containerPort`` in the task definition the tasks in the service
      are using. For tasks that use the EC2 launch type, the container instance they are
      launched on must allow ingress traffic on the ``hostPort`` of the port mapping.
    """


_ClientDeleteServiceResponseservicetaskSetsnetworkConfigurationawsvpcConfigurationTypeDef = TypedDict(
    "_ClientDeleteServiceResponseservicetaskSetsnetworkConfigurationawsvpcConfigurationTypeDef",
    {"subnets": List[str], "securityGroups": List[str], "assignPublicIp": str},
    total=False,
)


class ClientDeleteServiceResponseservicetaskSetsnetworkConfigurationawsvpcConfigurationTypeDef(
    _ClientDeleteServiceResponseservicetaskSetsnetworkConfigurationawsvpcConfigurationTypeDef
):
    """
    Type definition for `ClientDeleteServiceResponseservicetaskSetsnetworkConfiguration` `awsvpcConfiguration`

    The VPC subnets and security groups associated with a task.

    .. note::

      All specified subnets and security groups must be from the same VPC.

    - **subnets** *(list) --*

      The subnets associated with the task or service. There is a limit of 16 subnets
      that can be specified per ``AwsVpcConfiguration`` .

      .. note::

        All specified subnets must be from the same VPC.

      - *(string) --*

    - **securityGroups** *(list) --*

      The security groups associated with the task or service. If you do not specify a
      security group, the default security group for the VPC is used. There is a limit of
      5 security groups that can be specified per ``AwsVpcConfiguration`` .

      .. note::

        All specified security groups must be from the same VPC.

      - *(string) --*

    - **assignPublicIp** *(string) --*

      Whether the task's elastic network interface receives a public IP address. The
      default value is ``DISABLED`` .
    """


_ClientDeleteServiceResponseservicetaskSetsnetworkConfigurationTypeDef = TypedDict(
    "_ClientDeleteServiceResponseservicetaskSetsnetworkConfigurationTypeDef",
    {
        "awsvpcConfiguration": ClientDeleteServiceResponseservicetaskSetsnetworkConfigurationawsvpcConfigurationTypeDef
    },
    total=False,
)


class ClientDeleteServiceResponseservicetaskSetsnetworkConfigurationTypeDef(
    _ClientDeleteServiceResponseservicetaskSetsnetworkConfigurationTypeDef
):
    """
    Type definition for `ClientDeleteServiceResponseservicetaskSets` `networkConfiguration`

    The network configuration for the task set.

    - **awsvpcConfiguration** *(dict) --*

      The VPC subnets and security groups associated with a task.

      .. note::

        All specified subnets and security groups must be from the same VPC.

      - **subnets** *(list) --*

        The subnets associated with the task or service. There is a limit of 16 subnets
        that can be specified per ``AwsVpcConfiguration`` .

        .. note::

          All specified subnets must be from the same VPC.

        - *(string) --*

      - **securityGroups** *(list) --*

        The security groups associated with the task or service. If you do not specify a
        security group, the default security group for the VPC is used. There is a limit of
        5 security groups that can be specified per ``AwsVpcConfiguration`` .

        .. note::

          All specified security groups must be from the same VPC.

        - *(string) --*

      - **assignPublicIp** *(string) --*

        Whether the task's elastic network interface receives a public IP address. The
        default value is ``DISABLED`` .
    """


_ClientDeleteServiceResponseservicetaskSetsscaleTypeDef = TypedDict(
    "_ClientDeleteServiceResponseservicetaskSetsscaleTypeDef",
    {"value": float, "unit": str},
    total=False,
)


class ClientDeleteServiceResponseservicetaskSetsscaleTypeDef(
    _ClientDeleteServiceResponseservicetaskSetsscaleTypeDef
):
    """
    Type definition for `ClientDeleteServiceResponseservicetaskSets` `scale`

    A floating-point percentage of the desired number of tasks to place and keep running in
    the task set.

    - **value** *(float) --*

      The value, specified as a percent total of a service's ``desiredCount`` , to scale
      the task set. Accepted values are numbers between 0 and 100.

    - **unit** *(string) --*

      The unit of measure for the scale value.
    """


_ClientDeleteServiceResponseservicetaskSetsserviceRegistriesTypeDef = TypedDict(
    "_ClientDeleteServiceResponseservicetaskSetsserviceRegistriesTypeDef",
    {"registryArn": str, "port": int, "containerName": str, "containerPort": int},
    total=False,
)


class ClientDeleteServiceResponseservicetaskSetsserviceRegistriesTypeDef(
    _ClientDeleteServiceResponseservicetaskSetsserviceRegistriesTypeDef
):
    """
    Type definition for `ClientDeleteServiceResponseservicetaskSets` `serviceRegistries`

    Details of the service registry.

    - **registryArn** *(string) --*

      The Amazon Resource Name (ARN) of the service registry. The currently supported
      service registry is AWS Cloud Map. For more information, see `CreateService
      <https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html>`__ .

    - **port** *(integer) --*

      The port value used if your service discovery service specified an SRV record. This
      field may be used if both the ``awsvpc`` network mode and SRV records are used.

    - **containerName** *(string) --*

      The container name value, already specified in the task definition, to be used for
      your service discovery service. If the task definition that your service task
      specifies uses the ``bridge`` or ``host`` network mode, you must specify a
      ``containerName`` and ``containerPort`` combination from the task definition. If
      the task definition that your service task specifies uses the ``awsvpc`` network
      mode and a type SRV DNS record is used, you must specify either a ``containerName``
      and ``containerPort`` combination or a ``port`` value, but not both.

    - **containerPort** *(integer) --*

      The port value, already specified in the task definition, to be used for your
      service discovery service. If the task definition your service task specifies uses
      the ``bridge`` or ``host`` network mode, you must specify a ``containerName`` and
      ``containerPort`` combination from the task definition. If the task definition your
      service task specifies uses the ``awsvpc`` network mode and a type SRV DNS record
      is used, you must specify either a ``containerName`` and ``containerPort``
      combination or a ``port`` value, but not both.
    """


_ClientDeleteServiceResponseservicetaskSetsTypeDef = TypedDict(
    "_ClientDeleteServiceResponseservicetaskSetsTypeDef",
    {
        "id": str,
        "taskSetArn": str,
        "serviceArn": str,
        "clusterArn": str,
        "startedBy": str,
        "externalId": str,
        "status": str,
        "taskDefinition": str,
        "computedDesiredCount": int,
        "pendingCount": int,
        "runningCount": int,
        "createdAt": datetime,
        "updatedAt": datetime,
        "launchType": str,
        "platformVersion": str,
        "networkConfiguration": ClientDeleteServiceResponseservicetaskSetsnetworkConfigurationTypeDef,
        "loadBalancers": List[
            ClientDeleteServiceResponseservicetaskSetsloadBalancersTypeDef
        ],
        "serviceRegistries": List[
            ClientDeleteServiceResponseservicetaskSetsserviceRegistriesTypeDef
        ],
        "scale": ClientDeleteServiceResponseservicetaskSetsscaleTypeDef,
        "stabilityStatus": str,
        "stabilityStatusAt": datetime,
    },
    total=False,
)


class ClientDeleteServiceResponseservicetaskSetsTypeDef(
    _ClientDeleteServiceResponseservicetaskSetsTypeDef
):
    """
    Type definition for `ClientDeleteServiceResponseservice` `taskSets`

    Information about a set of Amazon ECS tasks in either an AWS CodeDeploy or an
    ``EXTERNAL`` deployment. An Amazon ECS task set includes details such as the desired
    number of tasks, how many tasks are running, and whether the task set serves production
    traffic.

    - **id** *(string) --*

      The ID of the task set.

    - **taskSetArn** *(string) --*

      The Amazon Resource Name (ARN) of the task set.

    - **serviceArn** *(string) --*

      The Amazon Resource Name (ARN) of the service the task set exists in.

    - **clusterArn** *(string) --*

      The Amazon Resource Name (ARN) of the cluster that the service that hosts the task set
      exists in.

    - **startedBy** *(string) --*

      The tag specified when a task set is started. If the task set is created by an AWS
      CodeDeploy deployment, the ``startedBy`` parameter is ``CODE_DEPLOY`` . For a task set
      created for an external deployment, the startedBy field isn't used.

    - **externalId** *(string) --*

      The external ID associated with the task set.

      If a task set is created by an AWS CodeDeploy deployment, the ``externalId`` parameter
      contains the AWS CodeDeploy deployment ID.

      If a task set is created for an external deployment and is associated with a service
      discovery registry, the ``externalId`` parameter contains the
      ``ECS_TASK_SET_EXTERNAL_ID`` AWS Cloud Map attribute.

    - **status** *(string) --*

      The status of the task set. The following describes each state:

        PRIMARY

      The task set is serving production traffic.

        ACTIVE

      The task set is not serving production traffic.

        DRAINING

      The tasks in the task set are being stopped and their corresponding targets are being
      deregistered from their target group.

    - **taskDefinition** *(string) --*

      The task definition the task set is using.

    - **computedDesiredCount** *(integer) --*

      The computed desired count for the task set. This is calculated by multiplying the
      service's ``desiredCount`` by the task set's ``scale`` percentage. The result is always
      rounded up. For example, if the computed desired count is 1.2, it rounds up to 2 tasks.

    - **pendingCount** *(integer) --*

      The number of tasks in the task set that are in the ``PENDING`` status during a
      deployment. A task in the ``PENDING`` state is preparing to enter the ``RUNNING``
      state. A task set enters the ``PENDING`` status when it launches for the first time or
      when it is restarted after being in the ``STOPPED`` state.

    - **runningCount** *(integer) --*

      The number of tasks in the task set that are in the ``RUNNING`` status during a
      deployment. A task in the ``RUNNING`` state is running and ready for use.

    - **createdAt** *(datetime) --*

      The Unix timestamp for when the task set was created.

    - **updatedAt** *(datetime) --*

      The Unix timestamp for when the task set was last updated.

    - **launchType** *(string) --*

      The launch type the tasks in the task set are using. For more information, see `Amazon
      ECS Launch Types
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html>`__ in
      the *Amazon Elastic Container Service Developer Guide* .

    - **platformVersion** *(string) --*

      The platform version on which the tasks in the task set are running. A platform version
      is only specified for tasks using the Fargate launch type. If one is not specified, the
      ``LATEST`` platform version is used by default. For more information, see `AWS Fargate
      Platform Versions
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

    - **networkConfiguration** *(dict) --*

      The network configuration for the task set.

      - **awsvpcConfiguration** *(dict) --*

        The VPC subnets and security groups associated with a task.

        .. note::

          All specified subnets and security groups must be from the same VPC.

        - **subnets** *(list) --*

          The subnets associated with the task or service. There is a limit of 16 subnets
          that can be specified per ``AwsVpcConfiguration`` .

          .. note::

            All specified subnets must be from the same VPC.

          - *(string) --*

        - **securityGroups** *(list) --*

          The security groups associated with the task or service. If you do not specify a
          security group, the default security group for the VPC is used. There is a limit of
          5 security groups that can be specified per ``AwsVpcConfiguration`` .

          .. note::

            All specified security groups must be from the same VPC.

          - *(string) --*

        - **assignPublicIp** *(string) --*

          Whether the task's elastic network interface receives a public IP address. The
          default value is ``DISABLED`` .

    - **loadBalancers** *(list) --*

      Details on a load balancer that is used with a task set.

      - *(dict) --*

        Details on the load balancer or load balancers to use with a service or task set.

        - **targetGroupArn** *(string) --*

          The full Amazon Resource Name (ARN) of the Elastic Load Balancing target group or
          groups associated with a service or task set.

          A target group ARN is only specified when using an Application Load Balancer or
          Network Load Balancer. If you are using a Classic Load Balancer this should be
          omitted.

          For services using the ``ECS`` deployment controller, you can specify one or
          multiple target groups. For more information, see `Registering Multiple Target
          Groups with a Service
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

          For services using the ``CODE_DEPLOY`` deployment controller, you are required to
          define two target groups for the load balancer. For more information, see
          `Blue/Green Deployment with CodeDeploy
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-bluegreen.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

          .. warning::

            If your service's task definition uses the ``awsvpc`` network mode (which is
            required for the Fargate launch type), you must choose ``ip`` as the target type,
            not ``instance`` , when creating your target groups because tasks that use the
            ``awsvpc`` network mode are associated with an elastic network interface, not an
            Amazon EC2 instance.

        - **loadBalancerName** *(string) --*

          The name of the load balancer to associate with the Amazon ECS service or task set.

          A load balancer name is only specified when using a Classic Load Balancer. If you
          are using an Application Load Balancer or a Network Load Balancer this should be
          omitted.

        - **containerName** *(string) --*

          The name of the container (as it appears in a container definition) to associate
          with the load balancer.

        - **containerPort** *(integer) --*

          The port on the container to associate with the load balancer. This port must
          correspond to a ``containerPort`` in the task definition the tasks in the service
          are using. For tasks that use the EC2 launch type, the container instance they are
          launched on must allow ingress traffic on the ``hostPort`` of the port mapping.

    - **serviceRegistries** *(list) --*

      The details of the service discovery registries to assign to this task set. For more
      information, see `Service Discovery
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html>`__
      .

      - *(dict) --*

        Details of the service registry.

        - **registryArn** *(string) --*

          The Amazon Resource Name (ARN) of the service registry. The currently supported
          service registry is AWS Cloud Map. For more information, see `CreateService
          <https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html>`__ .

        - **port** *(integer) --*

          The port value used if your service discovery service specified an SRV record. This
          field may be used if both the ``awsvpc`` network mode and SRV records are used.

        - **containerName** *(string) --*

          The container name value, already specified in the task definition, to be used for
          your service discovery service. If the task definition that your service task
          specifies uses the ``bridge`` or ``host`` network mode, you must specify a
          ``containerName`` and ``containerPort`` combination from the task definition. If
          the task definition that your service task specifies uses the ``awsvpc`` network
          mode and a type SRV DNS record is used, you must specify either a ``containerName``
          and ``containerPort`` combination or a ``port`` value, but not both.

        - **containerPort** *(integer) --*

          The port value, already specified in the task definition, to be used for your
          service discovery service. If the task definition your service task specifies uses
          the ``bridge`` or ``host`` network mode, you must specify a ``containerName`` and
          ``containerPort`` combination from the task definition. If the task definition your
          service task specifies uses the ``awsvpc`` network mode and a type SRV DNS record
          is used, you must specify either a ``containerName`` and ``containerPort``
          combination or a ``port`` value, but not both.

    - **scale** *(dict) --*

      A floating-point percentage of the desired number of tasks to place and keep running in
      the task set.

      - **value** *(float) --*

        The value, specified as a percent total of a service's ``desiredCount`` , to scale
        the task set. Accepted values are numbers between 0 and 100.

      - **unit** *(string) --*

        The unit of measure for the scale value.

    - **stabilityStatus** *(string) --*

      The stability status, which indicates whether the task set has reached a steady state.
      If the following conditions are met, the task set will be in ``STEADY_STATE`` :

      * The task ``runningCount`` is equal to the ``computedDesiredCount`` .

      * The ``pendingCount`` is ``0`` .

      * There are no tasks running on container instances in the ``DRAINING`` status.

      * All tasks are reporting a healthy status from the load balancers, service discovery,
      and container health checks.

      If any of those conditions are not met, the stability status returns ``STABILIZING`` .

    - **stabilityStatusAt** *(datetime) --*

      The Unix timestamp for when the task set stability status was retrieved.
    """


_ClientDeleteServiceResponseserviceTypeDef = TypedDict(
    "_ClientDeleteServiceResponseserviceTypeDef",
    {
        "serviceArn": str,
        "serviceName": str,
        "clusterArn": str,
        "loadBalancers": List[ClientDeleteServiceResponseserviceloadBalancersTypeDef],
        "serviceRegistries": List[
            ClientDeleteServiceResponseserviceserviceRegistriesTypeDef
        ],
        "status": str,
        "desiredCount": int,
        "runningCount": int,
        "pendingCount": int,
        "launchType": str,
        "platformVersion": str,
        "taskDefinition": str,
        "deploymentConfiguration": ClientDeleteServiceResponseservicedeploymentConfigurationTypeDef,
        "taskSets": List[ClientDeleteServiceResponseservicetaskSetsTypeDef],
        "deployments": List[ClientDeleteServiceResponseservicedeploymentsTypeDef],
        "roleArn": str,
        "events": List[ClientDeleteServiceResponseserviceeventsTypeDef],
        "createdAt": datetime,
        "placementConstraints": List[
            ClientDeleteServiceResponseserviceplacementConstraintsTypeDef
        ],
        "placementStrategy": List[
            ClientDeleteServiceResponseserviceplacementStrategyTypeDef
        ],
        "networkConfiguration": ClientDeleteServiceResponseservicenetworkConfigurationTypeDef,
        "healthCheckGracePeriodSeconds": int,
        "schedulingStrategy": str,
        "deploymentController": ClientDeleteServiceResponseservicedeploymentControllerTypeDef,
        "tags": List[ClientDeleteServiceResponseservicetagsTypeDef],
        "createdBy": str,
        "enableECSManagedTags": bool,
        "propagateTags": str,
    },
    total=False,
)


class ClientDeleteServiceResponseserviceTypeDef(
    _ClientDeleteServiceResponseserviceTypeDef
):
    """
    Type definition for `ClientDeleteServiceResponse` `service`

    The full description of the deleted service.

    - **serviceArn** *(string) --*

      The ARN that identifies the service. The ARN contains the ``arn:aws:ecs`` namespace,
      followed by the Region of the service, the AWS account ID of the service owner, the
      ``service`` namespace, and then the service name. For example,
      ``arn:aws:ecs:region:012345678910:service/my-service`` .

    - **serviceName** *(string) --*

      The name of your service. Up to 255 letters (uppercase and lowercase), numbers, and hyphens
      are allowed. Service names must be unique within a cluster, but you can have similarly
      named services in multiple clusters within a Region or across multiple Regions.

    - **clusterArn** *(string) --*

      The Amazon Resource Name (ARN) of the cluster that hosts the service.

    - **loadBalancers** *(list) --*

      A list of Elastic Load Balancing load balancer objects, containing the load balancer name,
      the container name (as it appears in a container definition), and the container port to
      access from the load balancer.

      - *(dict) --*

        Details on the load balancer or load balancers to use with a service or task set.

        - **targetGroupArn** *(string) --*

          The full Amazon Resource Name (ARN) of the Elastic Load Balancing target group or
          groups associated with a service or task set.

          A target group ARN is only specified when using an Application Load Balancer or Network
          Load Balancer. If you are using a Classic Load Balancer this should be omitted.

          For services using the ``ECS`` deployment controller, you can specify one or multiple
          target groups. For more information, see `Registering Multiple Target Groups with a
          Service
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

          For services using the ``CODE_DEPLOY`` deployment controller, you are required to
          define two target groups for the load balancer. For more information, see `Blue/Green
          Deployment with CodeDeploy
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-bluegreen.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

          .. warning::

            If your service's task definition uses the ``awsvpc`` network mode (which is required
            for the Fargate launch type), you must choose ``ip`` as the target type, not
            ``instance`` , when creating your target groups because tasks that use the ``awsvpc``
            network mode are associated with an elastic network interface, not an Amazon EC2
            instance.

        - **loadBalancerName** *(string) --*

          The name of the load balancer to associate with the Amazon ECS service or task set.

          A load balancer name is only specified when using a Classic Load Balancer. If you are
          using an Application Load Balancer or a Network Load Balancer this should be omitted.

        - **containerName** *(string) --*

          The name of the container (as it appears in a container definition) to associate with
          the load balancer.

        - **containerPort** *(integer) --*

          The port on the container to associate with the load balancer. This port must
          correspond to a ``containerPort`` in the task definition the tasks in the service are
          using. For tasks that use the EC2 launch type, the container instance they are launched
          on must allow ingress traffic on the ``hostPort`` of the port mapping.

    - **serviceRegistries** *(list) --*

      The details of the service discovery registries to assign to this service. For more
      information, see `Service Discovery
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html>`__ .

      - *(dict) --*

        Details of the service registry.

        - **registryArn** *(string) --*

          The Amazon Resource Name (ARN) of the service registry. The currently supported service
          registry is AWS Cloud Map. For more information, see `CreateService
          <https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html>`__ .

        - **port** *(integer) --*

          The port value used if your service discovery service specified an SRV record. This
          field may be used if both the ``awsvpc`` network mode and SRV records are used.

        - **containerName** *(string) --*

          The container name value, already specified in the task definition, to be used for your
          service discovery service. If the task definition that your service task specifies uses
          the ``bridge`` or ``host`` network mode, you must specify a ``containerName`` and
          ``containerPort`` combination from the task definition. If the task definition that
          your service task specifies uses the ``awsvpc`` network mode and a type SRV DNS record
          is used, you must specify either a ``containerName`` and ``containerPort`` combination
          or a ``port`` value, but not both.

        - **containerPort** *(integer) --*

          The port value, already specified in the task definition, to be used for your service
          discovery service. If the task definition your service task specifies uses the
          ``bridge`` or ``host`` network mode, you must specify a ``containerName`` and
          ``containerPort`` combination from the task definition. If the task definition your
          service task specifies uses the ``awsvpc`` network mode and a type SRV DNS record is
          used, you must specify either a ``containerName`` and ``containerPort`` combination or
          a ``port`` value, but not both.

    - **status** *(string) --*

      The status of the service. The valid values are ``ACTIVE`` , ``DRAINING`` , or ``INACTIVE``
      .

    - **desiredCount** *(integer) --*

      The desired number of instantiations of the task definition to keep running on the service.
      This value is specified when the service is created with  CreateService , and it can be
      modified with  UpdateService .

    - **runningCount** *(integer) --*

      The number of tasks in the cluster that are in the ``RUNNING`` state.

    - **pendingCount** *(integer) --*

      The number of tasks in the cluster that are in the ``PENDING`` state.

    - **launchType** *(string) --*

      The launch type on which your service is running. If no value is specified, it will default
      to ``EC2`` . Valid values include ``EC2`` and ``FARGATE`` . For more information, see
      `Amazon ECS Launch Types
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html>`__ in the
      *Amazon Elastic Container Service Developer Guide* .

    - **platformVersion** *(string) --*

      The platform version on which to run your service. A platform version is only specified for
      tasks using the Fargate launch type. If one is not specified, the ``LATEST`` platform
      version is used by default. For more information, see `AWS Fargate Platform Versions
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html>`__ in
      the *Amazon Elastic Container Service Developer Guide* .

    - **taskDefinition** *(string) --*

      The task definition to use for tasks in the service. This value is specified when the
      service is created with  CreateService , and it can be modified with  UpdateService .

    - **deploymentConfiguration** *(dict) --*

      Optional deployment parameters that control how many tasks run during the deployment and
      the ordering of stopping and starting tasks.

      - **maximumPercent** *(integer) --*

        If a service is using the rolling update (``ECS`` ) deployment type, the **maximum
        percent** parameter represents an upper limit on the number of tasks in a service that
        are allowed in the ``RUNNING`` or ``PENDING`` state during a deployment, as a percentage
        of the desired number of tasks (rounded down to the nearest integer), and while any
        container instances are in the ``DRAINING`` state if the service contains tasks using the
        EC2 launch type. This parameter enables you to define the deployment batch size. For
        example, if your service has a desired number of four tasks and a maximum percent value
        of 200%, the scheduler may start four new tasks before stopping the four older tasks
        (provided that the cluster resources required to do this are available). The default
        value for maximum percent is 200%.

        If a service is using the blue/green (``CODE_DEPLOY`` ) or ``EXTERNAL`` deployment types
        and tasks that use the EC2 launch type, the **maximum percent** value is set to the
        default value and is used to define the upper limit on the number of the tasks in the
        service that remain in the ``RUNNING`` state while the container instances are in the
        ``DRAINING`` state. If the tasks in the service use the Fargate launch type, the maximum
        percent value is not used, although it is returned when describing your service.

      - **minimumHealthyPercent** *(integer) --*

        If a service is using the rolling update (``ECS`` ) deployment type, the **minimum
        healthy percent** represents a lower limit on the number of tasks in a service that must
        remain in the ``RUNNING`` state during a deployment, as a percentage of the desired
        number of tasks (rounded up to the nearest integer), and while any container instances
        are in the ``DRAINING`` state if the service contains tasks using the EC2 launch type.
        This parameter enables you to deploy without using additional cluster capacity. For
        example, if your service has a desired number of four tasks and a minimum healthy percent
        of 50%, the scheduler may stop two existing tasks to free up cluster capacity before
        starting two new tasks. Tasks for services that *do not* use a load balancer are
        considered healthy if they are in the ``RUNNING`` state; tasks for services that *do* use
        a load balancer are considered healthy if they are in the ``RUNNING`` state and they are
        reported as healthy by the load balancer. The default value for minimum healthy percent
        is 100%.

        If a service is using the blue/green (``CODE_DEPLOY`` ) or ``EXTERNAL`` deployment types
        and tasks that use the EC2 launch type, the **minimum healthy percent** value is set to
        the default value and is used to define the lower limit on the number of the tasks in the
        service that remain in the ``RUNNING`` state while the container instances are in the
        ``DRAINING`` state. If the tasks in the service use the Fargate launch type, the minimum
        healthy percent value is not used, although it is returned when describing your service.

    - **taskSets** *(list) --*

      Information about a set of Amazon ECS tasks in either an AWS CodeDeploy or an ``EXTERNAL``
      deployment. An Amazon ECS task set includes details such as the desired number of tasks,
      how many tasks are running, and whether the task set serves production traffic.

      - *(dict) --*

        Information about a set of Amazon ECS tasks in either an AWS CodeDeploy or an
        ``EXTERNAL`` deployment. An Amazon ECS task set includes details such as the desired
        number of tasks, how many tasks are running, and whether the task set serves production
        traffic.

        - **id** *(string) --*

          The ID of the task set.

        - **taskSetArn** *(string) --*

          The Amazon Resource Name (ARN) of the task set.

        - **serviceArn** *(string) --*

          The Amazon Resource Name (ARN) of the service the task set exists in.

        - **clusterArn** *(string) --*

          The Amazon Resource Name (ARN) of the cluster that the service that hosts the task set
          exists in.

        - **startedBy** *(string) --*

          The tag specified when a task set is started. If the task set is created by an AWS
          CodeDeploy deployment, the ``startedBy`` parameter is ``CODE_DEPLOY`` . For a task set
          created for an external deployment, the startedBy field isn't used.

        - **externalId** *(string) --*

          The external ID associated with the task set.

          If a task set is created by an AWS CodeDeploy deployment, the ``externalId`` parameter
          contains the AWS CodeDeploy deployment ID.

          If a task set is created for an external deployment and is associated with a service
          discovery registry, the ``externalId`` parameter contains the
          ``ECS_TASK_SET_EXTERNAL_ID`` AWS Cloud Map attribute.

        - **status** *(string) --*

          The status of the task set. The following describes each state:

            PRIMARY

          The task set is serving production traffic.

            ACTIVE

          The task set is not serving production traffic.

            DRAINING

          The tasks in the task set are being stopped and their corresponding targets are being
          deregistered from their target group.

        - **taskDefinition** *(string) --*

          The task definition the task set is using.

        - **computedDesiredCount** *(integer) --*

          The computed desired count for the task set. This is calculated by multiplying the
          service's ``desiredCount`` by the task set's ``scale`` percentage. The result is always
          rounded up. For example, if the computed desired count is 1.2, it rounds up to 2 tasks.

        - **pendingCount** *(integer) --*

          The number of tasks in the task set that are in the ``PENDING`` status during a
          deployment. A task in the ``PENDING`` state is preparing to enter the ``RUNNING``
          state. A task set enters the ``PENDING`` status when it launches for the first time or
          when it is restarted after being in the ``STOPPED`` state.

        - **runningCount** *(integer) --*

          The number of tasks in the task set that are in the ``RUNNING`` status during a
          deployment. A task in the ``RUNNING`` state is running and ready for use.

        - **createdAt** *(datetime) --*

          The Unix timestamp for when the task set was created.

        - **updatedAt** *(datetime) --*

          The Unix timestamp for when the task set was last updated.

        - **launchType** *(string) --*

          The launch type the tasks in the task set are using. For more information, see `Amazon
          ECS Launch Types
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html>`__ in
          the *Amazon Elastic Container Service Developer Guide* .

        - **platformVersion** *(string) --*

          The platform version on which the tasks in the task set are running. A platform version
          is only specified for tasks using the Fargate launch type. If one is not specified, the
          ``LATEST`` platform version is used by default. For more information, see `AWS Fargate
          Platform Versions
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

        - **networkConfiguration** *(dict) --*

          The network configuration for the task set.

          - **awsvpcConfiguration** *(dict) --*

            The VPC subnets and security groups associated with a task.

            .. note::

              All specified subnets and security groups must be from the same VPC.

            - **subnets** *(list) --*

              The subnets associated with the task or service. There is a limit of 16 subnets
              that can be specified per ``AwsVpcConfiguration`` .

              .. note::

                All specified subnets must be from the same VPC.

              - *(string) --*

            - **securityGroups** *(list) --*

              The security groups associated with the task or service. If you do not specify a
              security group, the default security group for the VPC is used. There is a limit of
              5 security groups that can be specified per ``AwsVpcConfiguration`` .

              .. note::

                All specified security groups must be from the same VPC.

              - *(string) --*

            - **assignPublicIp** *(string) --*

              Whether the task's elastic network interface receives a public IP address. The
              default value is ``DISABLED`` .

        - **loadBalancers** *(list) --*

          Details on a load balancer that is used with a task set.

          - *(dict) --*

            Details on the load balancer or load balancers to use with a service or task set.

            - **targetGroupArn** *(string) --*

              The full Amazon Resource Name (ARN) of the Elastic Load Balancing target group or
              groups associated with a service or task set.

              A target group ARN is only specified when using an Application Load Balancer or
              Network Load Balancer. If you are using a Classic Load Balancer this should be
              omitted.

              For services using the ``ECS`` deployment controller, you can specify one or
              multiple target groups. For more information, see `Registering Multiple Target
              Groups with a Service
              <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html>`__
              in the *Amazon Elastic Container Service Developer Guide* .

              For services using the ``CODE_DEPLOY`` deployment controller, you are required to
              define two target groups for the load balancer. For more information, see
              `Blue/Green Deployment with CodeDeploy
              <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-bluegreen.html>`__
              in the *Amazon Elastic Container Service Developer Guide* .

              .. warning::

                If your service's task definition uses the ``awsvpc`` network mode (which is
                required for the Fargate launch type), you must choose ``ip`` as the target type,
                not ``instance`` , when creating your target groups because tasks that use the
                ``awsvpc`` network mode are associated with an elastic network interface, not an
                Amazon EC2 instance.

            - **loadBalancerName** *(string) --*

              The name of the load balancer to associate with the Amazon ECS service or task set.

              A load balancer name is only specified when using a Classic Load Balancer. If you
              are using an Application Load Balancer or a Network Load Balancer this should be
              omitted.

            - **containerName** *(string) --*

              The name of the container (as it appears in a container definition) to associate
              with the load balancer.

            - **containerPort** *(integer) --*

              The port on the container to associate with the load balancer. This port must
              correspond to a ``containerPort`` in the task definition the tasks in the service
              are using. For tasks that use the EC2 launch type, the container instance they are
              launched on must allow ingress traffic on the ``hostPort`` of the port mapping.

        - **serviceRegistries** *(list) --*

          The details of the service discovery registries to assign to this task set. For more
          information, see `Service Discovery
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html>`__
          .

          - *(dict) --*

            Details of the service registry.

            - **registryArn** *(string) --*

              The Amazon Resource Name (ARN) of the service registry. The currently supported
              service registry is AWS Cloud Map. For more information, see `CreateService
              <https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html>`__ .

            - **port** *(integer) --*

              The port value used if your service discovery service specified an SRV record. This
              field may be used if both the ``awsvpc`` network mode and SRV records are used.

            - **containerName** *(string) --*

              The container name value, already specified in the task definition, to be used for
              your service discovery service. If the task definition that your service task
              specifies uses the ``bridge`` or ``host`` network mode, you must specify a
              ``containerName`` and ``containerPort`` combination from the task definition. If
              the task definition that your service task specifies uses the ``awsvpc`` network
              mode and a type SRV DNS record is used, you must specify either a ``containerName``
              and ``containerPort`` combination or a ``port`` value, but not both.

            - **containerPort** *(integer) --*

              The port value, already specified in the task definition, to be used for your
              service discovery service. If the task definition your service task specifies uses
              the ``bridge`` or ``host`` network mode, you must specify a ``containerName`` and
              ``containerPort`` combination from the task definition. If the task definition your
              service task specifies uses the ``awsvpc`` network mode and a type SRV DNS record
              is used, you must specify either a ``containerName`` and ``containerPort``
              combination or a ``port`` value, but not both.

        - **scale** *(dict) --*

          A floating-point percentage of the desired number of tasks to place and keep running in
          the task set.

          - **value** *(float) --*

            The value, specified as a percent total of a service's ``desiredCount`` , to scale
            the task set. Accepted values are numbers between 0 and 100.

          - **unit** *(string) --*

            The unit of measure for the scale value.

        - **stabilityStatus** *(string) --*

          The stability status, which indicates whether the task set has reached a steady state.
          If the following conditions are met, the task set will be in ``STEADY_STATE`` :

          * The task ``runningCount`` is equal to the ``computedDesiredCount`` .

          * The ``pendingCount`` is ``0`` .

          * There are no tasks running on container instances in the ``DRAINING`` status.

          * All tasks are reporting a healthy status from the load balancers, service discovery,
          and container health checks.

          If any of those conditions are not met, the stability status returns ``STABILIZING`` .

        - **stabilityStatusAt** *(datetime) --*

          The Unix timestamp for when the task set stability status was retrieved.

    - **deployments** *(list) --*

      The current state of deployments for the service.

      - *(dict) --*

        The details of an Amazon ECS service deployment. This is used only when a service uses
        the ``ECS`` deployment controller type.

        - **id** *(string) --*

          The ID of the deployment.

        - **status** *(string) --*

          The status of the deployment. The following describes each state:

            PRIMARY

          The most recent deployment of a service.

            ACTIVE

          A service deployment that still has running tasks, but are in the process of being
          replaced with a new ``PRIMARY`` deployment.

            INACTIVE

          A deployment that has been completely replaced.

        - **taskDefinition** *(string) --*

          The most recent task definition that was specified for the tasks in the service to use.

        - **desiredCount** *(integer) --*

          The most recent desired count of tasks that was specified for the service to deploy or
          maintain.

        - **pendingCount** *(integer) --*

          The number of tasks in the deployment that are in the ``PENDING`` status.

        - **runningCount** *(integer) --*

          The number of tasks in the deployment that are in the ``RUNNING`` status.

        - **createdAt** *(datetime) --*

          The Unix timestamp for when the service deployment was created.

        - **updatedAt** *(datetime) --*

          The Unix timestamp for when the service deployment was last updated.

        - **launchType** *(string) --*

          The launch type the tasks in the service are using. For more information, see `Amazon
          ECS Launch Types
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html>`__ in
          the *Amazon Elastic Container Service Developer Guide* .

        - **platformVersion** *(string) --*

          The platform version on which your tasks in the service are running. A platform version
          is only specified for tasks using the Fargate launch type. If one is not specified, the
          ``LATEST`` platform version is used by default. For more information, see `AWS Fargate
          Platform Versions
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

        - **networkConfiguration** *(dict) --*

          The VPC subnet and security group configuration for tasks that receive their own
          elastic network interface by using the ``awsvpc`` networking mode.

          - **awsvpcConfiguration** *(dict) --*

            The VPC subnets and security groups associated with a task.

            .. note::

              All specified subnets and security groups must be from the same VPC.

            - **subnets** *(list) --*

              The subnets associated with the task or service. There is a limit of 16 subnets
              that can be specified per ``AwsVpcConfiguration`` .

              .. note::

                All specified subnets must be from the same VPC.

              - *(string) --*

            - **securityGroups** *(list) --*

              The security groups associated with the task or service. If you do not specify a
              security group, the default security group for the VPC is used. There is a limit of
              5 security groups that can be specified per ``AwsVpcConfiguration`` .

              .. note::

                All specified security groups must be from the same VPC.

              - *(string) --*

            - **assignPublicIp** *(string) --*

              Whether the task's elastic network interface receives a public IP address. The
              default value is ``DISABLED`` .

    - **roleArn** *(string) --*

      The ARN of the IAM role associated with the service that allows the Amazon ECS container
      agent to register container instances with an Elastic Load Balancing load balancer.

    - **events** *(list) --*

      The event stream for your service. A maximum of 100 of the latest events are displayed.

      - *(dict) --*

        Details on an event associated with a service.

        - **id** *(string) --*

          The ID string of the event.

        - **createdAt** *(datetime) --*

          The Unix timestamp for when the event was triggered.

        - **message** *(string) --*

          The event message.

    - **createdAt** *(datetime) --*

      The Unix timestamp for when the service was created.

    - **placementConstraints** *(list) --*

      The placement constraints for the tasks in the service.

      - *(dict) --*

        An object representing a constraint on task placement. For more information, see `Task
        Placement Constraints
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html>`__
        in the *Amazon Elastic Container Service Developer Guide* .

        .. note::

          If you are using the Fargate launch type, task placement constraints are not supported.

        - **type** *(string) --*

          The type of constraint. Use ``distinctInstance`` to ensure that each task in a
          particular group is running on a different container instance. Use ``memberOf`` to
          restrict the selection to a group of valid candidates.

        - **expression** *(string) --*

          A cluster query language expression to apply to the constraint. You cannot specify an
          expression if the constraint type is ``distinctInstance`` . For more information, see
          `Cluster Query Language
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

    - **placementStrategy** *(list) --*

      The placement strategy that determines how tasks for the service are placed.

      - *(dict) --*

        The task placement strategy for a task or service. For more information, see `Task
        Placement Strategies
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-strategies.html>`__
        in the *Amazon Elastic Container Service Developer Guide* .

        - **type** *(string) --*

          The type of placement strategy. The ``random`` placement strategy randomly places tasks
          on available candidates. The ``spread`` placement strategy spreads placement across
          available candidates evenly based on the ``field`` parameter. The ``binpack`` strategy
          places tasks on available candidates that have the least available amount of the
          resource that is specified with the ``field`` parameter. For example, if you binpack on
          memory, a task is placed on the instance with the least amount of remaining memory (but
          still enough to run the task).

        - **field** *(string) --*

          The field to apply the placement strategy against. For the ``spread`` placement
          strategy, valid values are ``instanceId`` (or ``host`` , which has the same effect), or
          any platform or custom attribute that is applied to a container instance, such as
          ``attribute:ecs.availability-zone`` . For the ``binpack`` placement strategy, valid
          values are ``cpu`` and ``memory`` . For the ``random`` placement strategy, this field
          is not used.

    - **networkConfiguration** *(dict) --*

      The VPC subnet and security group configuration for tasks that receive their own elastic
      network interface by using the ``awsvpc`` networking mode.

      - **awsvpcConfiguration** *(dict) --*

        The VPC subnets and security groups associated with a task.

        .. note::

          All specified subnets and security groups must be from the same VPC.

        - **subnets** *(list) --*

          The subnets associated with the task or service. There is a limit of 16 subnets that
          can be specified per ``AwsVpcConfiguration`` .

          .. note::

            All specified subnets must be from the same VPC.

          - *(string) --*

        - **securityGroups** *(list) --*

          The security groups associated with the task or service. If you do not specify a
          security group, the default security group for the VPC is used. There is a limit of 5
          security groups that can be specified per ``AwsVpcConfiguration`` .

          .. note::

            All specified security groups must be from the same VPC.

          - *(string) --*

        - **assignPublicIp** *(string) --*

          Whether the task's elastic network interface receives a public IP address. The default
          value is ``DISABLED`` .

    - **healthCheckGracePeriodSeconds** *(integer) --*

      The period of time, in seconds, that the Amazon ECS service scheduler ignores unhealthy
      Elastic Load Balancing target health checks after a task has first started.

    - **schedulingStrategy** *(string) --*

      The scheduling strategy to use for the service. For more information, see `Services
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs_services.html>`__ .

      There are two service scheduler strategies available:

      * ``REPLICA`` -The replica scheduling strategy places and maintains the desired number of
      tasks across your cluster. By default, the service scheduler spreads tasks across
      Availability Zones. You can use task placement strategies and constraints to customize task
      placement decisions.

      * ``DAEMON`` -The daemon scheduling strategy deploys exactly one task on each container
      instance in your cluster. When you are using this strategy, do not specify a desired number
      of tasks or any task placement strategies.

      .. note::

         Fargate tasks do not support the ``DAEMON`` scheduling strategy.

    - **deploymentController** *(dict) --*

      The deployment controller type the service is using. When using the DescribeServices API,
      this field is omitted if the service is using the ``ECS`` deployment controller type.

      - **type** *(string) --*

        The deployment controller type to use.

        There are three deployment controller types available:

          ECS

        The rolling update (``ECS`` ) deployment type involves replacing the current running
        version of the container with the latest version. The number of containers Amazon ECS
        adds or removes from the service during a rolling update is controlled by adjusting the
        minimum and maximum number of healthy tasks allowed during a service deployment, as
        specified in the  DeploymentConfiguration .

          CODE_DEPLOY

        The blue/green (``CODE_DEPLOY`` ) deployment type uses the blue/green deployment model
        powered by AWS CodeDeploy, which allows you to verify a new deployment of a service
        before sending production traffic to it.

          EXTERNAL

        The external (``EXTERNAL`` ) deployment type enables you to use any third-party
        deployment controller for full control over the deployment process for an Amazon ECS
        service.

    - **tags** *(list) --*

      The metadata that you apply to the service to help you categorize and organize them. Each
      tag consists of a key and an optional value, both of which you define.

      The following basic restrictions apply to tags:

      * Maximum number of tags per resource - 50

      * For each resource, each tag key must be unique, and each tag key can have only one value.

      * Maximum key length - 128 Unicode characters in UTF-8

      * Maximum value length - 256 Unicode characters in UTF-8

      * If your tagging schema is used across multiple services and resources, remember that
      other services may have restrictions on allowed characters. Generally allowed characters
      are: letters, numbers, and spaces representable in UTF-8, and the following characters: + -
      = . _ : / @.

      * Tag keys and values are case-sensitive.

      * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
      prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
      tag keys or values with this prefix. Tags with this prefix do not count against your tags
      per resource limit.

      - *(dict) --*

        The metadata that you apply to a resource to help you categorize and organize them. Each
        tag consists of a key and an optional value, both of which you define.

        The following basic restrictions apply to tags:

        * Maximum number of tags per resource - 50

        * For each resource, each tag key must be unique, and each tag key can have only one
        value.

        * Maximum key length - 128 Unicode characters in UTF-8

        * Maximum value length - 256 Unicode characters in UTF-8

        * If your tagging schema is used across multiple services and resources, remember that
        other services may have restrictions on allowed characters. Generally allowed characters
        are: letters, numbers, and spaces representable in UTF-8, and the following characters: +
        - = . _ : / @.

        * Tag keys and values are case-sensitive.

        * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
        prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
        tag keys or values with this prefix. Tags with this prefix do not count against your tags
        per resource limit.

        - **key** *(string) --*

          One part of a key-value pair that make up a tag. A ``key`` is a general label that acts
          like a category for more specific tag values.

        - **value** *(string) --*

          The optional part of a key-value pair that make up a tag. A ``value`` acts as a
          descriptor within a tag category (key).

    - **createdBy** *(string) --*

      The principal that created the service.

    - **enableECSManagedTags** *(boolean) --*

      Specifies whether to enable Amazon ECS managed tags for the tasks in the service. For more
      information, see `Tagging Your Amazon ECS Resources
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html>`__ in the
      *Amazon Elastic Container Service Developer Guide* .

    - **propagateTags** *(string) --*

      Specifies whether to propagate the tags from the task definition or the service to the
      task. If no value is specified, the tags are not propagated.
    """


_ClientDeleteServiceResponseTypeDef = TypedDict(
    "_ClientDeleteServiceResponseTypeDef",
    {"service": ClientDeleteServiceResponseserviceTypeDef},
    total=False,
)


class ClientDeleteServiceResponseTypeDef(_ClientDeleteServiceResponseTypeDef):
    """
    Type definition for `ClientDeleteService` `Response`

    - **service** *(dict) --*

      The full description of the deleted service.

      - **serviceArn** *(string) --*

        The ARN that identifies the service. The ARN contains the ``arn:aws:ecs`` namespace,
        followed by the Region of the service, the AWS account ID of the service owner, the
        ``service`` namespace, and then the service name. For example,
        ``arn:aws:ecs:region:012345678910:service/my-service`` .

      - **serviceName** *(string) --*

        The name of your service. Up to 255 letters (uppercase and lowercase), numbers, and hyphens
        are allowed. Service names must be unique within a cluster, but you can have similarly
        named services in multiple clusters within a Region or across multiple Regions.

      - **clusterArn** *(string) --*

        The Amazon Resource Name (ARN) of the cluster that hosts the service.

      - **loadBalancers** *(list) --*

        A list of Elastic Load Balancing load balancer objects, containing the load balancer name,
        the container name (as it appears in a container definition), and the container port to
        access from the load balancer.

        - *(dict) --*

          Details on the load balancer or load balancers to use with a service or task set.

          - **targetGroupArn** *(string) --*

            The full Amazon Resource Name (ARN) of the Elastic Load Balancing target group or
            groups associated with a service or task set.

            A target group ARN is only specified when using an Application Load Balancer or Network
            Load Balancer. If you are using a Classic Load Balancer this should be omitted.

            For services using the ``ECS`` deployment controller, you can specify one or multiple
            target groups. For more information, see `Registering Multiple Target Groups with a
            Service
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html>`__
            in the *Amazon Elastic Container Service Developer Guide* .

            For services using the ``CODE_DEPLOY`` deployment controller, you are required to
            define two target groups for the load balancer. For more information, see `Blue/Green
            Deployment with CodeDeploy
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-bluegreen.html>`__
            in the *Amazon Elastic Container Service Developer Guide* .

            .. warning::

              If your service's task definition uses the ``awsvpc`` network mode (which is required
              for the Fargate launch type), you must choose ``ip`` as the target type, not
              ``instance`` , when creating your target groups because tasks that use the ``awsvpc``
              network mode are associated with an elastic network interface, not an Amazon EC2
              instance.

          - **loadBalancerName** *(string) --*

            The name of the load balancer to associate with the Amazon ECS service or task set.

            A load balancer name is only specified when using a Classic Load Balancer. If you are
            using an Application Load Balancer or a Network Load Balancer this should be omitted.

          - **containerName** *(string) --*

            The name of the container (as it appears in a container definition) to associate with
            the load balancer.

          - **containerPort** *(integer) --*

            The port on the container to associate with the load balancer. This port must
            correspond to a ``containerPort`` in the task definition the tasks in the service are
            using. For tasks that use the EC2 launch type, the container instance they are launched
            on must allow ingress traffic on the ``hostPort`` of the port mapping.

      - **serviceRegistries** *(list) --*

        The details of the service discovery registries to assign to this service. For more
        information, see `Service Discovery
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html>`__ .

        - *(dict) --*

          Details of the service registry.

          - **registryArn** *(string) --*

            The Amazon Resource Name (ARN) of the service registry. The currently supported service
            registry is AWS Cloud Map. For more information, see `CreateService
            <https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html>`__ .

          - **port** *(integer) --*

            The port value used if your service discovery service specified an SRV record. This
            field may be used if both the ``awsvpc`` network mode and SRV records are used.

          - **containerName** *(string) --*

            The container name value, already specified in the task definition, to be used for your
            service discovery service. If the task definition that your service task specifies uses
            the ``bridge`` or ``host`` network mode, you must specify a ``containerName`` and
            ``containerPort`` combination from the task definition. If the task definition that
            your service task specifies uses the ``awsvpc`` network mode and a type SRV DNS record
            is used, you must specify either a ``containerName`` and ``containerPort`` combination
            or a ``port`` value, but not both.

          - **containerPort** *(integer) --*

            The port value, already specified in the task definition, to be used for your service
            discovery service. If the task definition your service task specifies uses the
            ``bridge`` or ``host`` network mode, you must specify a ``containerName`` and
            ``containerPort`` combination from the task definition. If the task definition your
            service task specifies uses the ``awsvpc`` network mode and a type SRV DNS record is
            used, you must specify either a ``containerName`` and ``containerPort`` combination or
            a ``port`` value, but not both.

      - **status** *(string) --*

        The status of the service. The valid values are ``ACTIVE`` , ``DRAINING`` , or ``INACTIVE``
        .

      - **desiredCount** *(integer) --*

        The desired number of instantiations of the task definition to keep running on the service.
        This value is specified when the service is created with  CreateService , and it can be
        modified with  UpdateService .

      - **runningCount** *(integer) --*

        The number of tasks in the cluster that are in the ``RUNNING`` state.

      - **pendingCount** *(integer) --*

        The number of tasks in the cluster that are in the ``PENDING`` state.

      - **launchType** *(string) --*

        The launch type on which your service is running. If no value is specified, it will default
        to ``EC2`` . Valid values include ``EC2`` and ``FARGATE`` . For more information, see
        `Amazon ECS Launch Types
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html>`__ in the
        *Amazon Elastic Container Service Developer Guide* .

      - **platformVersion** *(string) --*

        The platform version on which to run your service. A platform version is only specified for
        tasks using the Fargate launch type. If one is not specified, the ``LATEST`` platform
        version is used by default. For more information, see `AWS Fargate Platform Versions
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html>`__ in
        the *Amazon Elastic Container Service Developer Guide* .

      - **taskDefinition** *(string) --*

        The task definition to use for tasks in the service. This value is specified when the
        service is created with  CreateService , and it can be modified with  UpdateService .

      - **deploymentConfiguration** *(dict) --*

        Optional deployment parameters that control how many tasks run during the deployment and
        the ordering of stopping and starting tasks.

        - **maximumPercent** *(integer) --*

          If a service is using the rolling update (``ECS`` ) deployment type, the **maximum
          percent** parameter represents an upper limit on the number of tasks in a service that
          are allowed in the ``RUNNING`` or ``PENDING`` state during a deployment, as a percentage
          of the desired number of tasks (rounded down to the nearest integer), and while any
          container instances are in the ``DRAINING`` state if the service contains tasks using the
          EC2 launch type. This parameter enables you to define the deployment batch size. For
          example, if your service has a desired number of four tasks and a maximum percent value
          of 200%, the scheduler may start four new tasks before stopping the four older tasks
          (provided that the cluster resources required to do this are available). The default
          value for maximum percent is 200%.

          If a service is using the blue/green (``CODE_DEPLOY`` ) or ``EXTERNAL`` deployment types
          and tasks that use the EC2 launch type, the **maximum percent** value is set to the
          default value and is used to define the upper limit on the number of the tasks in the
          service that remain in the ``RUNNING`` state while the container instances are in the
          ``DRAINING`` state. If the tasks in the service use the Fargate launch type, the maximum
          percent value is not used, although it is returned when describing your service.

        - **minimumHealthyPercent** *(integer) --*

          If a service is using the rolling update (``ECS`` ) deployment type, the **minimum
          healthy percent** represents a lower limit on the number of tasks in a service that must
          remain in the ``RUNNING`` state during a deployment, as a percentage of the desired
          number of tasks (rounded up to the nearest integer), and while any container instances
          are in the ``DRAINING`` state if the service contains tasks using the EC2 launch type.
          This parameter enables you to deploy without using additional cluster capacity. For
          example, if your service has a desired number of four tasks and a minimum healthy percent
          of 50%, the scheduler may stop two existing tasks to free up cluster capacity before
          starting two new tasks. Tasks for services that *do not* use a load balancer are
          considered healthy if they are in the ``RUNNING`` state; tasks for services that *do* use
          a load balancer are considered healthy if they are in the ``RUNNING`` state and they are
          reported as healthy by the load balancer. The default value for minimum healthy percent
          is 100%.

          If a service is using the blue/green (``CODE_DEPLOY`` ) or ``EXTERNAL`` deployment types
          and tasks that use the EC2 launch type, the **minimum healthy percent** value is set to
          the default value and is used to define the lower limit on the number of the tasks in the
          service that remain in the ``RUNNING`` state while the container instances are in the
          ``DRAINING`` state. If the tasks in the service use the Fargate launch type, the minimum
          healthy percent value is not used, although it is returned when describing your service.

      - **taskSets** *(list) --*

        Information about a set of Amazon ECS tasks in either an AWS CodeDeploy or an ``EXTERNAL``
        deployment. An Amazon ECS task set includes details such as the desired number of tasks,
        how many tasks are running, and whether the task set serves production traffic.

        - *(dict) --*

          Information about a set of Amazon ECS tasks in either an AWS CodeDeploy or an
          ``EXTERNAL`` deployment. An Amazon ECS task set includes details such as the desired
          number of tasks, how many tasks are running, and whether the task set serves production
          traffic.

          - **id** *(string) --*

            The ID of the task set.

          - **taskSetArn** *(string) --*

            The Amazon Resource Name (ARN) of the task set.

          - **serviceArn** *(string) --*

            The Amazon Resource Name (ARN) of the service the task set exists in.

          - **clusterArn** *(string) --*

            The Amazon Resource Name (ARN) of the cluster that the service that hosts the task set
            exists in.

          - **startedBy** *(string) --*

            The tag specified when a task set is started. If the task set is created by an AWS
            CodeDeploy deployment, the ``startedBy`` parameter is ``CODE_DEPLOY`` . For a task set
            created for an external deployment, the startedBy field isn't used.

          - **externalId** *(string) --*

            The external ID associated with the task set.

            If a task set is created by an AWS CodeDeploy deployment, the ``externalId`` parameter
            contains the AWS CodeDeploy deployment ID.

            If a task set is created for an external deployment and is associated with a service
            discovery registry, the ``externalId`` parameter contains the
            ``ECS_TASK_SET_EXTERNAL_ID`` AWS Cloud Map attribute.

          - **status** *(string) --*

            The status of the task set. The following describes each state:

              PRIMARY

            The task set is serving production traffic.

              ACTIVE

            The task set is not serving production traffic.

              DRAINING

            The tasks in the task set are being stopped and their corresponding targets are being
            deregistered from their target group.

          - **taskDefinition** *(string) --*

            The task definition the task set is using.

          - **computedDesiredCount** *(integer) --*

            The computed desired count for the task set. This is calculated by multiplying the
            service's ``desiredCount`` by the task set's ``scale`` percentage. The result is always
            rounded up. For example, if the computed desired count is 1.2, it rounds up to 2 tasks.

          - **pendingCount** *(integer) --*

            The number of tasks in the task set that are in the ``PENDING`` status during a
            deployment. A task in the ``PENDING`` state is preparing to enter the ``RUNNING``
            state. A task set enters the ``PENDING`` status when it launches for the first time or
            when it is restarted after being in the ``STOPPED`` state.

          - **runningCount** *(integer) --*

            The number of tasks in the task set that are in the ``RUNNING`` status during a
            deployment. A task in the ``RUNNING`` state is running and ready for use.

          - **createdAt** *(datetime) --*

            The Unix timestamp for when the task set was created.

          - **updatedAt** *(datetime) --*

            The Unix timestamp for when the task set was last updated.

          - **launchType** *(string) --*

            The launch type the tasks in the task set are using. For more information, see `Amazon
            ECS Launch Types
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html>`__ in
            the *Amazon Elastic Container Service Developer Guide* .

          - **platformVersion** *(string) --*

            The platform version on which the tasks in the task set are running. A platform version
            is only specified for tasks using the Fargate launch type. If one is not specified, the
            ``LATEST`` platform version is used by default. For more information, see `AWS Fargate
            Platform Versions
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html>`__
            in the *Amazon Elastic Container Service Developer Guide* .

          - **networkConfiguration** *(dict) --*

            The network configuration for the task set.

            - **awsvpcConfiguration** *(dict) --*

              The VPC subnets and security groups associated with a task.

              .. note::

                All specified subnets and security groups must be from the same VPC.

              - **subnets** *(list) --*

                The subnets associated with the task or service. There is a limit of 16 subnets
                that can be specified per ``AwsVpcConfiguration`` .

                .. note::

                  All specified subnets must be from the same VPC.

                - *(string) --*

              - **securityGroups** *(list) --*

                The security groups associated with the task or service. If you do not specify a
                security group, the default security group for the VPC is used. There is a limit of
                5 security groups that can be specified per ``AwsVpcConfiguration`` .

                .. note::

                  All specified security groups must be from the same VPC.

                - *(string) --*

              - **assignPublicIp** *(string) --*

                Whether the task's elastic network interface receives a public IP address. The
                default value is ``DISABLED`` .

          - **loadBalancers** *(list) --*

            Details on a load balancer that is used with a task set.

            - *(dict) --*

              Details on the load balancer or load balancers to use with a service or task set.

              - **targetGroupArn** *(string) --*

                The full Amazon Resource Name (ARN) of the Elastic Load Balancing target group or
                groups associated with a service or task set.

                A target group ARN is only specified when using an Application Load Balancer or
                Network Load Balancer. If you are using a Classic Load Balancer this should be
                omitted.

                For services using the ``ECS`` deployment controller, you can specify one or
                multiple target groups. For more information, see `Registering Multiple Target
                Groups with a Service
                <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html>`__
                in the *Amazon Elastic Container Service Developer Guide* .

                For services using the ``CODE_DEPLOY`` deployment controller, you are required to
                define two target groups for the load balancer. For more information, see
                `Blue/Green Deployment with CodeDeploy
                <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-bluegreen.html>`__
                in the *Amazon Elastic Container Service Developer Guide* .

                .. warning::

                  If your service's task definition uses the ``awsvpc`` network mode (which is
                  required for the Fargate launch type), you must choose ``ip`` as the target type,
                  not ``instance`` , when creating your target groups because tasks that use the
                  ``awsvpc`` network mode are associated with an elastic network interface, not an
                  Amazon EC2 instance.

              - **loadBalancerName** *(string) --*

                The name of the load balancer to associate with the Amazon ECS service or task set.

                A load balancer name is only specified when using a Classic Load Balancer. If you
                are using an Application Load Balancer or a Network Load Balancer this should be
                omitted.

              - **containerName** *(string) --*

                The name of the container (as it appears in a container definition) to associate
                with the load balancer.

              - **containerPort** *(integer) --*

                The port on the container to associate with the load balancer. This port must
                correspond to a ``containerPort`` in the task definition the tasks in the service
                are using. For tasks that use the EC2 launch type, the container instance they are
                launched on must allow ingress traffic on the ``hostPort`` of the port mapping.

          - **serviceRegistries** *(list) --*

            The details of the service discovery registries to assign to this task set. For more
            information, see `Service Discovery
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html>`__
            .

            - *(dict) --*

              Details of the service registry.

              - **registryArn** *(string) --*

                The Amazon Resource Name (ARN) of the service registry. The currently supported
                service registry is AWS Cloud Map. For more information, see `CreateService
                <https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html>`__ .

              - **port** *(integer) --*

                The port value used if your service discovery service specified an SRV record. This
                field may be used if both the ``awsvpc`` network mode and SRV records are used.

              - **containerName** *(string) --*

                The container name value, already specified in the task definition, to be used for
                your service discovery service. If the task definition that your service task
                specifies uses the ``bridge`` or ``host`` network mode, you must specify a
                ``containerName`` and ``containerPort`` combination from the task definition. If
                the task definition that your service task specifies uses the ``awsvpc`` network
                mode and a type SRV DNS record is used, you must specify either a ``containerName``
                and ``containerPort`` combination or a ``port`` value, but not both.

              - **containerPort** *(integer) --*

                The port value, already specified in the task definition, to be used for your
                service discovery service. If the task definition your service task specifies uses
                the ``bridge`` or ``host`` network mode, you must specify a ``containerName`` and
                ``containerPort`` combination from the task definition. If the task definition your
                service task specifies uses the ``awsvpc`` network mode and a type SRV DNS record
                is used, you must specify either a ``containerName`` and ``containerPort``
                combination or a ``port`` value, but not both.

          - **scale** *(dict) --*

            A floating-point percentage of the desired number of tasks to place and keep running in
            the task set.

            - **value** *(float) --*

              The value, specified as a percent total of a service's ``desiredCount`` , to scale
              the task set. Accepted values are numbers between 0 and 100.

            - **unit** *(string) --*

              The unit of measure for the scale value.

          - **stabilityStatus** *(string) --*

            The stability status, which indicates whether the task set has reached a steady state.
            If the following conditions are met, the task set will be in ``STEADY_STATE`` :

            * The task ``runningCount`` is equal to the ``computedDesiredCount`` .

            * The ``pendingCount`` is ``0`` .

            * There are no tasks running on container instances in the ``DRAINING`` status.

            * All tasks are reporting a healthy status from the load balancers, service discovery,
            and container health checks.

            If any of those conditions are not met, the stability status returns ``STABILIZING`` .

          - **stabilityStatusAt** *(datetime) --*

            The Unix timestamp for when the task set stability status was retrieved.

      - **deployments** *(list) --*

        The current state of deployments for the service.

        - *(dict) --*

          The details of an Amazon ECS service deployment. This is used only when a service uses
          the ``ECS`` deployment controller type.

          - **id** *(string) --*

            The ID of the deployment.

          - **status** *(string) --*

            The status of the deployment. The following describes each state:

              PRIMARY

            The most recent deployment of a service.

              ACTIVE

            A service deployment that still has running tasks, but are in the process of being
            replaced with a new ``PRIMARY`` deployment.

              INACTIVE

            A deployment that has been completely replaced.

          - **taskDefinition** *(string) --*

            The most recent task definition that was specified for the tasks in the service to use.

          - **desiredCount** *(integer) --*

            The most recent desired count of tasks that was specified for the service to deploy or
            maintain.

          - **pendingCount** *(integer) --*

            The number of tasks in the deployment that are in the ``PENDING`` status.

          - **runningCount** *(integer) --*

            The number of tasks in the deployment that are in the ``RUNNING`` status.

          - **createdAt** *(datetime) --*

            The Unix timestamp for when the service deployment was created.

          - **updatedAt** *(datetime) --*

            The Unix timestamp for when the service deployment was last updated.

          - **launchType** *(string) --*

            The launch type the tasks in the service are using. For more information, see `Amazon
            ECS Launch Types
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html>`__ in
            the *Amazon Elastic Container Service Developer Guide* .

          - **platformVersion** *(string) --*

            The platform version on which your tasks in the service are running. A platform version
            is only specified for tasks using the Fargate launch type. If one is not specified, the
            ``LATEST`` platform version is used by default. For more information, see `AWS Fargate
            Platform Versions
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html>`__
            in the *Amazon Elastic Container Service Developer Guide* .

          - **networkConfiguration** *(dict) --*

            The VPC subnet and security group configuration for tasks that receive their own
            elastic network interface by using the ``awsvpc`` networking mode.

            - **awsvpcConfiguration** *(dict) --*

              The VPC subnets and security groups associated with a task.

              .. note::

                All specified subnets and security groups must be from the same VPC.

              - **subnets** *(list) --*

                The subnets associated with the task or service. There is a limit of 16 subnets
                that can be specified per ``AwsVpcConfiguration`` .

                .. note::

                  All specified subnets must be from the same VPC.

                - *(string) --*

              - **securityGroups** *(list) --*

                The security groups associated with the task or service. If you do not specify a
                security group, the default security group for the VPC is used. There is a limit of
                5 security groups that can be specified per ``AwsVpcConfiguration`` .

                .. note::

                  All specified security groups must be from the same VPC.

                - *(string) --*

              - **assignPublicIp** *(string) --*

                Whether the task's elastic network interface receives a public IP address. The
                default value is ``DISABLED`` .

      - **roleArn** *(string) --*

        The ARN of the IAM role associated with the service that allows the Amazon ECS container
        agent to register container instances with an Elastic Load Balancing load balancer.

      - **events** *(list) --*

        The event stream for your service. A maximum of 100 of the latest events are displayed.

        - *(dict) --*

          Details on an event associated with a service.

          - **id** *(string) --*

            The ID string of the event.

          - **createdAt** *(datetime) --*

            The Unix timestamp for when the event was triggered.

          - **message** *(string) --*

            The event message.

      - **createdAt** *(datetime) --*

        The Unix timestamp for when the service was created.

      - **placementConstraints** *(list) --*

        The placement constraints for the tasks in the service.

        - *(dict) --*

          An object representing a constraint on task placement. For more information, see `Task
          Placement Constraints
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

          .. note::

            If you are using the Fargate launch type, task placement constraints are not supported.

          - **type** *(string) --*

            The type of constraint. Use ``distinctInstance`` to ensure that each task in a
            particular group is running on a different container instance. Use ``memberOf`` to
            restrict the selection to a group of valid candidates.

          - **expression** *(string) --*

            A cluster query language expression to apply to the constraint. You cannot specify an
            expression if the constraint type is ``distinctInstance`` . For more information, see
            `Cluster Query Language
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html>`__
            in the *Amazon Elastic Container Service Developer Guide* .

      - **placementStrategy** *(list) --*

        The placement strategy that determines how tasks for the service are placed.

        - *(dict) --*

          The task placement strategy for a task or service. For more information, see `Task
          Placement Strategies
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-strategies.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

          - **type** *(string) --*

            The type of placement strategy. The ``random`` placement strategy randomly places tasks
            on available candidates. The ``spread`` placement strategy spreads placement across
            available candidates evenly based on the ``field`` parameter. The ``binpack`` strategy
            places tasks on available candidates that have the least available amount of the
            resource that is specified with the ``field`` parameter. For example, if you binpack on
            memory, a task is placed on the instance with the least amount of remaining memory (but
            still enough to run the task).

          - **field** *(string) --*

            The field to apply the placement strategy against. For the ``spread`` placement
            strategy, valid values are ``instanceId`` (or ``host`` , which has the same effect), or
            any platform or custom attribute that is applied to a container instance, such as
            ``attribute:ecs.availability-zone`` . For the ``binpack`` placement strategy, valid
            values are ``cpu`` and ``memory`` . For the ``random`` placement strategy, this field
            is not used.

      - **networkConfiguration** *(dict) --*

        The VPC subnet and security group configuration for tasks that receive their own elastic
        network interface by using the ``awsvpc`` networking mode.

        - **awsvpcConfiguration** *(dict) --*

          The VPC subnets and security groups associated with a task.

          .. note::

            All specified subnets and security groups must be from the same VPC.

          - **subnets** *(list) --*

            The subnets associated with the task or service. There is a limit of 16 subnets that
            can be specified per ``AwsVpcConfiguration`` .

            .. note::

              All specified subnets must be from the same VPC.

            - *(string) --*

          - **securityGroups** *(list) --*

            The security groups associated with the task or service. If you do not specify a
            security group, the default security group for the VPC is used. There is a limit of 5
            security groups that can be specified per ``AwsVpcConfiguration`` .

            .. note::

              All specified security groups must be from the same VPC.

            - *(string) --*

          - **assignPublicIp** *(string) --*

            Whether the task's elastic network interface receives a public IP address. The default
            value is ``DISABLED`` .

      - **healthCheckGracePeriodSeconds** *(integer) --*

        The period of time, in seconds, that the Amazon ECS service scheduler ignores unhealthy
        Elastic Load Balancing target health checks after a task has first started.

      - **schedulingStrategy** *(string) --*

        The scheduling strategy to use for the service. For more information, see `Services
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs_services.html>`__ .

        There are two service scheduler strategies available:

        * ``REPLICA`` -The replica scheduling strategy places and maintains the desired number of
        tasks across your cluster. By default, the service scheduler spreads tasks across
        Availability Zones. You can use task placement strategies and constraints to customize task
        placement decisions.

        * ``DAEMON`` -The daemon scheduling strategy deploys exactly one task on each container
        instance in your cluster. When you are using this strategy, do not specify a desired number
        of tasks or any task placement strategies.

        .. note::

           Fargate tasks do not support the ``DAEMON`` scheduling strategy.

      - **deploymentController** *(dict) --*

        The deployment controller type the service is using. When using the DescribeServices API,
        this field is omitted if the service is using the ``ECS`` deployment controller type.

        - **type** *(string) --*

          The deployment controller type to use.

          There are three deployment controller types available:

            ECS

          The rolling update (``ECS`` ) deployment type involves replacing the current running
          version of the container with the latest version. The number of containers Amazon ECS
          adds or removes from the service during a rolling update is controlled by adjusting the
          minimum and maximum number of healthy tasks allowed during a service deployment, as
          specified in the  DeploymentConfiguration .

            CODE_DEPLOY

          The blue/green (``CODE_DEPLOY`` ) deployment type uses the blue/green deployment model
          powered by AWS CodeDeploy, which allows you to verify a new deployment of a service
          before sending production traffic to it.

            EXTERNAL

          The external (``EXTERNAL`` ) deployment type enables you to use any third-party
          deployment controller for full control over the deployment process for an Amazon ECS
          service.

      - **tags** *(list) --*

        The metadata that you apply to the service to help you categorize and organize them. Each
        tag consists of a key and an optional value, both of which you define.

        The following basic restrictions apply to tags:

        * Maximum number of tags per resource - 50

        * For each resource, each tag key must be unique, and each tag key can have only one value.

        * Maximum key length - 128 Unicode characters in UTF-8

        * Maximum value length - 256 Unicode characters in UTF-8

        * If your tagging schema is used across multiple services and resources, remember that
        other services may have restrictions on allowed characters. Generally allowed characters
        are: letters, numbers, and spaces representable in UTF-8, and the following characters: + -
        = . _ : / @.

        * Tag keys and values are case-sensitive.

        * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
        prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
        tag keys or values with this prefix. Tags with this prefix do not count against your tags
        per resource limit.

        - *(dict) --*

          The metadata that you apply to a resource to help you categorize and organize them. Each
          tag consists of a key and an optional value, both of which you define.

          The following basic restrictions apply to tags:

          * Maximum number of tags per resource - 50

          * For each resource, each tag key must be unique, and each tag key can have only one
          value.

          * Maximum key length - 128 Unicode characters in UTF-8

          * Maximum value length - 256 Unicode characters in UTF-8

          * If your tagging schema is used across multiple services and resources, remember that
          other services may have restrictions on allowed characters. Generally allowed characters
          are: letters, numbers, and spaces representable in UTF-8, and the following characters: +
          - = . _ : / @.

          * Tag keys and values are case-sensitive.

          * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
          prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
          tag keys or values with this prefix. Tags with this prefix do not count against your tags
          per resource limit.

          - **key** *(string) --*

            One part of a key-value pair that make up a tag. A ``key`` is a general label that acts
            like a category for more specific tag values.

          - **value** *(string) --*

            The optional part of a key-value pair that make up a tag. A ``value`` acts as a
            descriptor within a tag category (key).

      - **createdBy** *(string) --*

        The principal that created the service.

      - **enableECSManagedTags** *(boolean) --*

        Specifies whether to enable Amazon ECS managed tags for the tasks in the service. For more
        information, see `Tagging Your Amazon ECS Resources
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html>`__ in the
        *Amazon Elastic Container Service Developer Guide* .

      - **propagateTags** *(string) --*

        Specifies whether to propagate the tags from the task definition or the service to the
        task. If no value is specified, the tags are not propagated.
    """


_ClientDeleteTaskSetResponsetaskSetloadBalancersTypeDef = TypedDict(
    "_ClientDeleteTaskSetResponsetaskSetloadBalancersTypeDef",
    {
        "targetGroupArn": str,
        "loadBalancerName": str,
        "containerName": str,
        "containerPort": int,
    },
    total=False,
)


class ClientDeleteTaskSetResponsetaskSetloadBalancersTypeDef(
    _ClientDeleteTaskSetResponsetaskSetloadBalancersTypeDef
):
    """
    Type definition for `ClientDeleteTaskSetResponsetaskSet` `loadBalancers`

    Details on the load balancer or load balancers to use with a service or task set.

    - **targetGroupArn** *(string) --*

      The full Amazon Resource Name (ARN) of the Elastic Load Balancing target group or
      groups associated with a service or task set.

      A target group ARN is only specified when using an Application Load Balancer or Network
      Load Balancer. If you are using a Classic Load Balancer this should be omitted.

      For services using the ``ECS`` deployment controller, you can specify one or multiple
      target groups. For more information, see `Registering Multiple Target Groups with a
      Service
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

      For services using the ``CODE_DEPLOY`` deployment controller, you are required to
      define two target groups for the load balancer. For more information, see `Blue/Green
      Deployment with CodeDeploy
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-bluegreen.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

      .. warning::

        If your service's task definition uses the ``awsvpc`` network mode (which is required
        for the Fargate launch type), you must choose ``ip`` as the target type, not
        ``instance`` , when creating your target groups because tasks that use the ``awsvpc``
        network mode are associated with an elastic network interface, not an Amazon EC2
        instance.

    - **loadBalancerName** *(string) --*

      The name of the load balancer to associate with the Amazon ECS service or task set.

      A load balancer name is only specified when using a Classic Load Balancer. If you are
      using an Application Load Balancer or a Network Load Balancer this should be omitted.

    - **containerName** *(string) --*

      The name of the container (as it appears in a container definition) to associate with
      the load balancer.

    - **containerPort** *(integer) --*

      The port on the container to associate with the load balancer. This port must
      correspond to a ``containerPort`` in the task definition the tasks in the service are
      using. For tasks that use the EC2 launch type, the container instance they are launched
      on must allow ingress traffic on the ``hostPort`` of the port mapping.
    """


_ClientDeleteTaskSetResponsetaskSetnetworkConfigurationawsvpcConfigurationTypeDef = TypedDict(
    "_ClientDeleteTaskSetResponsetaskSetnetworkConfigurationawsvpcConfigurationTypeDef",
    {"subnets": List[str], "securityGroups": List[str], "assignPublicIp": str},
    total=False,
)


class ClientDeleteTaskSetResponsetaskSetnetworkConfigurationawsvpcConfigurationTypeDef(
    _ClientDeleteTaskSetResponsetaskSetnetworkConfigurationawsvpcConfigurationTypeDef
):
    """
    Type definition for `ClientDeleteTaskSetResponsetaskSetnetworkConfiguration` `awsvpcConfiguration`

    The VPC subnets and security groups associated with a task.

    .. note::

      All specified subnets and security groups must be from the same VPC.

    - **subnets** *(list) --*

      The subnets associated with the task or service. There is a limit of 16 subnets that
      can be specified per ``AwsVpcConfiguration`` .

      .. note::

        All specified subnets must be from the same VPC.

      - *(string) --*

    - **securityGroups** *(list) --*

      The security groups associated with the task or service. If you do not specify a
      security group, the default security group for the VPC is used. There is a limit of 5
      security groups that can be specified per ``AwsVpcConfiguration`` .

      .. note::

        All specified security groups must be from the same VPC.

      - *(string) --*

    - **assignPublicIp** *(string) --*

      Whether the task's elastic network interface receives a public IP address. The default
      value is ``DISABLED`` .
    """


_ClientDeleteTaskSetResponsetaskSetnetworkConfigurationTypeDef = TypedDict(
    "_ClientDeleteTaskSetResponsetaskSetnetworkConfigurationTypeDef",
    {
        "awsvpcConfiguration": ClientDeleteTaskSetResponsetaskSetnetworkConfigurationawsvpcConfigurationTypeDef
    },
    total=False,
)


class ClientDeleteTaskSetResponsetaskSetnetworkConfigurationTypeDef(
    _ClientDeleteTaskSetResponsetaskSetnetworkConfigurationTypeDef
):
    """
    Type definition for `ClientDeleteTaskSetResponsetaskSet` `networkConfiguration`

    The network configuration for the task set.

    - **awsvpcConfiguration** *(dict) --*

      The VPC subnets and security groups associated with a task.

      .. note::

        All specified subnets and security groups must be from the same VPC.

      - **subnets** *(list) --*

        The subnets associated with the task or service. There is a limit of 16 subnets that
        can be specified per ``AwsVpcConfiguration`` .

        .. note::

          All specified subnets must be from the same VPC.

        - *(string) --*

      - **securityGroups** *(list) --*

        The security groups associated with the task or service. If you do not specify a
        security group, the default security group for the VPC is used. There is a limit of 5
        security groups that can be specified per ``AwsVpcConfiguration`` .

        .. note::

          All specified security groups must be from the same VPC.

        - *(string) --*

      - **assignPublicIp** *(string) --*

        Whether the task's elastic network interface receives a public IP address. The default
        value is ``DISABLED`` .
    """


_ClientDeleteTaskSetResponsetaskSetscaleTypeDef = TypedDict(
    "_ClientDeleteTaskSetResponsetaskSetscaleTypeDef",
    {"value": float, "unit": str},
    total=False,
)


class ClientDeleteTaskSetResponsetaskSetscaleTypeDef(
    _ClientDeleteTaskSetResponsetaskSetscaleTypeDef
):
    """
    Type definition for `ClientDeleteTaskSetResponsetaskSet` `scale`

    A floating-point percentage of the desired number of tasks to place and keep running in the
    task set.

    - **value** *(float) --*

      The value, specified as a percent total of a service's ``desiredCount`` , to scale the
      task set. Accepted values are numbers between 0 and 100.

    - **unit** *(string) --*

      The unit of measure for the scale value.
    """


_ClientDeleteTaskSetResponsetaskSetserviceRegistriesTypeDef = TypedDict(
    "_ClientDeleteTaskSetResponsetaskSetserviceRegistriesTypeDef",
    {"registryArn": str, "port": int, "containerName": str, "containerPort": int},
    total=False,
)


class ClientDeleteTaskSetResponsetaskSetserviceRegistriesTypeDef(
    _ClientDeleteTaskSetResponsetaskSetserviceRegistriesTypeDef
):
    """
    Type definition for `ClientDeleteTaskSetResponsetaskSet` `serviceRegistries`

    Details of the service registry.

    - **registryArn** *(string) --*

      The Amazon Resource Name (ARN) of the service registry. The currently supported service
      registry is AWS Cloud Map. For more information, see `CreateService
      <https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html>`__ .

    - **port** *(integer) --*

      The port value used if your service discovery service specified an SRV record. This
      field may be used if both the ``awsvpc`` network mode and SRV records are used.

    - **containerName** *(string) --*

      The container name value, already specified in the task definition, to be used for your
      service discovery service. If the task definition that your service task specifies uses
      the ``bridge`` or ``host`` network mode, you must specify a ``containerName`` and
      ``containerPort`` combination from the task definition. If the task definition that
      your service task specifies uses the ``awsvpc`` network mode and a type SRV DNS record
      is used, you must specify either a ``containerName`` and ``containerPort`` combination
      or a ``port`` value, but not both.

    - **containerPort** *(integer) --*

      The port value, already specified in the task definition, to be used for your service
      discovery service. If the task definition your service task specifies uses the
      ``bridge`` or ``host`` network mode, you must specify a ``containerName`` and
      ``containerPort`` combination from the task definition. If the task definition your
      service task specifies uses the ``awsvpc`` network mode and a type SRV DNS record is
      used, you must specify either a ``containerName`` and ``containerPort`` combination or
      a ``port`` value, but not both.
    """


_ClientDeleteTaskSetResponsetaskSetTypeDef = TypedDict(
    "_ClientDeleteTaskSetResponsetaskSetTypeDef",
    {
        "id": str,
        "taskSetArn": str,
        "serviceArn": str,
        "clusterArn": str,
        "startedBy": str,
        "externalId": str,
        "status": str,
        "taskDefinition": str,
        "computedDesiredCount": int,
        "pendingCount": int,
        "runningCount": int,
        "createdAt": datetime,
        "updatedAt": datetime,
        "launchType": str,
        "platformVersion": str,
        "networkConfiguration": ClientDeleteTaskSetResponsetaskSetnetworkConfigurationTypeDef,
        "loadBalancers": List[ClientDeleteTaskSetResponsetaskSetloadBalancersTypeDef],
        "serviceRegistries": List[
            ClientDeleteTaskSetResponsetaskSetserviceRegistriesTypeDef
        ],
        "scale": ClientDeleteTaskSetResponsetaskSetscaleTypeDef,
        "stabilityStatus": str,
        "stabilityStatusAt": datetime,
    },
    total=False,
)


class ClientDeleteTaskSetResponsetaskSetTypeDef(
    _ClientDeleteTaskSetResponsetaskSetTypeDef
):
    """
    Type definition for `ClientDeleteTaskSetResponse` `taskSet`

    Information about a set of Amazon ECS tasks in either an AWS CodeDeploy or an ``EXTERNAL``
    deployment. An Amazon ECS task set includes details such as the desired number of tasks, how
    many tasks are running, and whether the task set serves production traffic.

    - **id** *(string) --*

      The ID of the task set.

    - **taskSetArn** *(string) --*

      The Amazon Resource Name (ARN) of the task set.

    - **serviceArn** *(string) --*

      The Amazon Resource Name (ARN) of the service the task set exists in.

    - **clusterArn** *(string) --*

      The Amazon Resource Name (ARN) of the cluster that the service that hosts the task set
      exists in.

    - **startedBy** *(string) --*

      The tag specified when a task set is started. If the task set is created by an AWS
      CodeDeploy deployment, the ``startedBy`` parameter is ``CODE_DEPLOY`` . For a task set
      created for an external deployment, the startedBy field isn't used.

    - **externalId** *(string) --*

      The external ID associated with the task set.

      If a task set is created by an AWS CodeDeploy deployment, the ``externalId`` parameter
      contains the AWS CodeDeploy deployment ID.

      If a task set is created for an external deployment and is associated with a service
      discovery registry, the ``externalId`` parameter contains the ``ECS_TASK_SET_EXTERNAL_ID``
      AWS Cloud Map attribute.

    - **status** *(string) --*

      The status of the task set. The following describes each state:

        PRIMARY

      The task set is serving production traffic.

        ACTIVE

      The task set is not serving production traffic.

        DRAINING

      The tasks in the task set are being stopped and their corresponding targets are being
      deregistered from their target group.

    - **taskDefinition** *(string) --*

      The task definition the task set is using.

    - **computedDesiredCount** *(integer) --*

      The computed desired count for the task set. This is calculated by multiplying the
      service's ``desiredCount`` by the task set's ``scale`` percentage. The result is always
      rounded up. For example, if the computed desired count is 1.2, it rounds up to 2 tasks.

    - **pendingCount** *(integer) --*

      The number of tasks in the task set that are in the ``PENDING`` status during a deployment.
      A task in the ``PENDING`` state is preparing to enter the ``RUNNING`` state. A task set
      enters the ``PENDING`` status when it launches for the first time or when it is restarted
      after being in the ``STOPPED`` state.

    - **runningCount** *(integer) --*

      The number of tasks in the task set that are in the ``RUNNING`` status during a deployment.
      A task in the ``RUNNING`` state is running and ready for use.

    - **createdAt** *(datetime) --*

      The Unix timestamp for when the task set was created.

    - **updatedAt** *(datetime) --*

      The Unix timestamp for when the task set was last updated.

    - **launchType** *(string) --*

      The launch type the tasks in the task set are using. For more information, see `Amazon ECS
      Launch Types
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html>`__ in the
      *Amazon Elastic Container Service Developer Guide* .

    - **platformVersion** *(string) --*

      The platform version on which the tasks in the task set are running. A platform version is
      only specified for tasks using the Fargate launch type. If one is not specified, the
      ``LATEST`` platform version is used by default. For more information, see `AWS Fargate
      Platform Versions
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html>`__ in
      the *Amazon Elastic Container Service Developer Guide* .

    - **networkConfiguration** *(dict) --*

      The network configuration for the task set.

      - **awsvpcConfiguration** *(dict) --*

        The VPC subnets and security groups associated with a task.

        .. note::

          All specified subnets and security groups must be from the same VPC.

        - **subnets** *(list) --*

          The subnets associated with the task or service. There is a limit of 16 subnets that
          can be specified per ``AwsVpcConfiguration`` .

          .. note::

            All specified subnets must be from the same VPC.

          - *(string) --*

        - **securityGroups** *(list) --*

          The security groups associated with the task or service. If you do not specify a
          security group, the default security group for the VPC is used. There is a limit of 5
          security groups that can be specified per ``AwsVpcConfiguration`` .

          .. note::

            All specified security groups must be from the same VPC.

          - *(string) --*

        - **assignPublicIp** *(string) --*

          Whether the task's elastic network interface receives a public IP address. The default
          value is ``DISABLED`` .

    - **loadBalancers** *(list) --*

      Details on a load balancer that is used with a task set.

      - *(dict) --*

        Details on the load balancer or load balancers to use with a service or task set.

        - **targetGroupArn** *(string) --*

          The full Amazon Resource Name (ARN) of the Elastic Load Balancing target group or
          groups associated with a service or task set.

          A target group ARN is only specified when using an Application Load Balancer or Network
          Load Balancer. If you are using a Classic Load Balancer this should be omitted.

          For services using the ``ECS`` deployment controller, you can specify one or multiple
          target groups. For more information, see `Registering Multiple Target Groups with a
          Service
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

          For services using the ``CODE_DEPLOY`` deployment controller, you are required to
          define two target groups for the load balancer. For more information, see `Blue/Green
          Deployment with CodeDeploy
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-bluegreen.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

          .. warning::

            If your service's task definition uses the ``awsvpc`` network mode (which is required
            for the Fargate launch type), you must choose ``ip`` as the target type, not
            ``instance`` , when creating your target groups because tasks that use the ``awsvpc``
            network mode are associated with an elastic network interface, not an Amazon EC2
            instance.

        - **loadBalancerName** *(string) --*

          The name of the load balancer to associate with the Amazon ECS service or task set.

          A load balancer name is only specified when using a Classic Load Balancer. If you are
          using an Application Load Balancer or a Network Load Balancer this should be omitted.

        - **containerName** *(string) --*

          The name of the container (as it appears in a container definition) to associate with
          the load balancer.

        - **containerPort** *(integer) --*

          The port on the container to associate with the load balancer. This port must
          correspond to a ``containerPort`` in the task definition the tasks in the service are
          using. For tasks that use the EC2 launch type, the container instance they are launched
          on must allow ingress traffic on the ``hostPort`` of the port mapping.

    - **serviceRegistries** *(list) --*

      The details of the service discovery registries to assign to this task set. For more
      information, see `Service Discovery
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html>`__ .

      - *(dict) --*

        Details of the service registry.

        - **registryArn** *(string) --*

          The Amazon Resource Name (ARN) of the service registry. The currently supported service
          registry is AWS Cloud Map. For more information, see `CreateService
          <https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html>`__ .

        - **port** *(integer) --*

          The port value used if your service discovery service specified an SRV record. This
          field may be used if both the ``awsvpc`` network mode and SRV records are used.

        - **containerName** *(string) --*

          The container name value, already specified in the task definition, to be used for your
          service discovery service. If the task definition that your service task specifies uses
          the ``bridge`` or ``host`` network mode, you must specify a ``containerName`` and
          ``containerPort`` combination from the task definition. If the task definition that
          your service task specifies uses the ``awsvpc`` network mode and a type SRV DNS record
          is used, you must specify either a ``containerName`` and ``containerPort`` combination
          or a ``port`` value, but not both.

        - **containerPort** *(integer) --*

          The port value, already specified in the task definition, to be used for your service
          discovery service. If the task definition your service task specifies uses the
          ``bridge`` or ``host`` network mode, you must specify a ``containerName`` and
          ``containerPort`` combination from the task definition. If the task definition your
          service task specifies uses the ``awsvpc`` network mode and a type SRV DNS record is
          used, you must specify either a ``containerName`` and ``containerPort`` combination or
          a ``port`` value, but not both.

    - **scale** *(dict) --*

      A floating-point percentage of the desired number of tasks to place and keep running in the
      task set.

      - **value** *(float) --*

        The value, specified as a percent total of a service's ``desiredCount`` , to scale the
        task set. Accepted values are numbers between 0 and 100.

      - **unit** *(string) --*

        The unit of measure for the scale value.

    - **stabilityStatus** *(string) --*

      The stability status, which indicates whether the task set has reached a steady state. If
      the following conditions are met, the task set will be in ``STEADY_STATE`` :

      * The task ``runningCount`` is equal to the ``computedDesiredCount`` .

      * The ``pendingCount`` is ``0`` .

      * There are no tasks running on container instances in the ``DRAINING`` status.

      * All tasks are reporting a healthy status from the load balancers, service discovery, and
      container health checks.

      If any of those conditions are not met, the stability status returns ``STABILIZING`` .

    - **stabilityStatusAt** *(datetime) --*

      The Unix timestamp for when the task set stability status was retrieved.
    """


_ClientDeleteTaskSetResponseTypeDef = TypedDict(
    "_ClientDeleteTaskSetResponseTypeDef",
    {"taskSet": ClientDeleteTaskSetResponsetaskSetTypeDef},
    total=False,
)


class ClientDeleteTaskSetResponseTypeDef(_ClientDeleteTaskSetResponseTypeDef):
    """
    Type definition for `ClientDeleteTaskSet` `Response`

    - **taskSet** *(dict) --*

      Information about a set of Amazon ECS tasks in either an AWS CodeDeploy or an ``EXTERNAL``
      deployment. An Amazon ECS task set includes details such as the desired number of tasks, how
      many tasks are running, and whether the task set serves production traffic.

      - **id** *(string) --*

        The ID of the task set.

      - **taskSetArn** *(string) --*

        The Amazon Resource Name (ARN) of the task set.

      - **serviceArn** *(string) --*

        The Amazon Resource Name (ARN) of the service the task set exists in.

      - **clusterArn** *(string) --*

        The Amazon Resource Name (ARN) of the cluster that the service that hosts the task set
        exists in.

      - **startedBy** *(string) --*

        The tag specified when a task set is started. If the task set is created by an AWS
        CodeDeploy deployment, the ``startedBy`` parameter is ``CODE_DEPLOY`` . For a task set
        created for an external deployment, the startedBy field isn't used.

      - **externalId** *(string) --*

        The external ID associated with the task set.

        If a task set is created by an AWS CodeDeploy deployment, the ``externalId`` parameter
        contains the AWS CodeDeploy deployment ID.

        If a task set is created for an external deployment and is associated with a service
        discovery registry, the ``externalId`` parameter contains the ``ECS_TASK_SET_EXTERNAL_ID``
        AWS Cloud Map attribute.

      - **status** *(string) --*

        The status of the task set. The following describes each state:

          PRIMARY

        The task set is serving production traffic.

          ACTIVE

        The task set is not serving production traffic.

          DRAINING

        The tasks in the task set are being stopped and their corresponding targets are being
        deregistered from their target group.

      - **taskDefinition** *(string) --*

        The task definition the task set is using.

      - **computedDesiredCount** *(integer) --*

        The computed desired count for the task set. This is calculated by multiplying the
        service's ``desiredCount`` by the task set's ``scale`` percentage. The result is always
        rounded up. For example, if the computed desired count is 1.2, it rounds up to 2 tasks.

      - **pendingCount** *(integer) --*

        The number of tasks in the task set that are in the ``PENDING`` status during a deployment.
        A task in the ``PENDING`` state is preparing to enter the ``RUNNING`` state. A task set
        enters the ``PENDING`` status when it launches for the first time or when it is restarted
        after being in the ``STOPPED`` state.

      - **runningCount** *(integer) --*

        The number of tasks in the task set that are in the ``RUNNING`` status during a deployment.
        A task in the ``RUNNING`` state is running and ready for use.

      - **createdAt** *(datetime) --*

        The Unix timestamp for when the task set was created.

      - **updatedAt** *(datetime) --*

        The Unix timestamp for when the task set was last updated.

      - **launchType** *(string) --*

        The launch type the tasks in the task set are using. For more information, see `Amazon ECS
        Launch Types
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html>`__ in the
        *Amazon Elastic Container Service Developer Guide* .

      - **platformVersion** *(string) --*

        The platform version on which the tasks in the task set are running. A platform version is
        only specified for tasks using the Fargate launch type. If one is not specified, the
        ``LATEST`` platform version is used by default. For more information, see `AWS Fargate
        Platform Versions
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html>`__ in
        the *Amazon Elastic Container Service Developer Guide* .

      - **networkConfiguration** *(dict) --*

        The network configuration for the task set.

        - **awsvpcConfiguration** *(dict) --*

          The VPC subnets and security groups associated with a task.

          .. note::

            All specified subnets and security groups must be from the same VPC.

          - **subnets** *(list) --*

            The subnets associated with the task or service. There is a limit of 16 subnets that
            can be specified per ``AwsVpcConfiguration`` .

            .. note::

              All specified subnets must be from the same VPC.

            - *(string) --*

          - **securityGroups** *(list) --*

            The security groups associated with the task or service. If you do not specify a
            security group, the default security group for the VPC is used. There is a limit of 5
            security groups that can be specified per ``AwsVpcConfiguration`` .

            .. note::

              All specified security groups must be from the same VPC.

            - *(string) --*

          - **assignPublicIp** *(string) --*

            Whether the task's elastic network interface receives a public IP address. The default
            value is ``DISABLED`` .

      - **loadBalancers** *(list) --*

        Details on a load balancer that is used with a task set.

        - *(dict) --*

          Details on the load balancer or load balancers to use with a service or task set.

          - **targetGroupArn** *(string) --*

            The full Amazon Resource Name (ARN) of the Elastic Load Balancing target group or
            groups associated with a service or task set.

            A target group ARN is only specified when using an Application Load Balancer or Network
            Load Balancer. If you are using a Classic Load Balancer this should be omitted.

            For services using the ``ECS`` deployment controller, you can specify one or multiple
            target groups. For more information, see `Registering Multiple Target Groups with a
            Service
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html>`__
            in the *Amazon Elastic Container Service Developer Guide* .

            For services using the ``CODE_DEPLOY`` deployment controller, you are required to
            define two target groups for the load balancer. For more information, see `Blue/Green
            Deployment with CodeDeploy
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-bluegreen.html>`__
            in the *Amazon Elastic Container Service Developer Guide* .

            .. warning::

              If your service's task definition uses the ``awsvpc`` network mode (which is required
              for the Fargate launch type), you must choose ``ip`` as the target type, not
              ``instance`` , when creating your target groups because tasks that use the ``awsvpc``
              network mode are associated with an elastic network interface, not an Amazon EC2
              instance.

          - **loadBalancerName** *(string) --*

            The name of the load balancer to associate with the Amazon ECS service or task set.

            A load balancer name is only specified when using a Classic Load Balancer. If you are
            using an Application Load Balancer or a Network Load Balancer this should be omitted.

          - **containerName** *(string) --*

            The name of the container (as it appears in a container definition) to associate with
            the load balancer.

          - **containerPort** *(integer) --*

            The port on the container to associate with the load balancer. This port must
            correspond to a ``containerPort`` in the task definition the tasks in the service are
            using. For tasks that use the EC2 launch type, the container instance they are launched
            on must allow ingress traffic on the ``hostPort`` of the port mapping.

      - **serviceRegistries** *(list) --*

        The details of the service discovery registries to assign to this task set. For more
        information, see `Service Discovery
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html>`__ .

        - *(dict) --*

          Details of the service registry.

          - **registryArn** *(string) --*

            The Amazon Resource Name (ARN) of the service registry. The currently supported service
            registry is AWS Cloud Map. For more information, see `CreateService
            <https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html>`__ .

          - **port** *(integer) --*

            The port value used if your service discovery service specified an SRV record. This
            field may be used if both the ``awsvpc`` network mode and SRV records are used.

          - **containerName** *(string) --*

            The container name value, already specified in the task definition, to be used for your
            service discovery service. If the task definition that your service task specifies uses
            the ``bridge`` or ``host`` network mode, you must specify a ``containerName`` and
            ``containerPort`` combination from the task definition. If the task definition that
            your service task specifies uses the ``awsvpc`` network mode and a type SRV DNS record
            is used, you must specify either a ``containerName`` and ``containerPort`` combination
            or a ``port`` value, but not both.

          - **containerPort** *(integer) --*

            The port value, already specified in the task definition, to be used for your service
            discovery service. If the task definition your service task specifies uses the
            ``bridge`` or ``host`` network mode, you must specify a ``containerName`` and
            ``containerPort`` combination from the task definition. If the task definition your
            service task specifies uses the ``awsvpc`` network mode and a type SRV DNS record is
            used, you must specify either a ``containerName`` and ``containerPort`` combination or
            a ``port`` value, but not both.

      - **scale** *(dict) --*

        A floating-point percentage of the desired number of tasks to place and keep running in the
        task set.

        - **value** *(float) --*

          The value, specified as a percent total of a service's ``desiredCount`` , to scale the
          task set. Accepted values are numbers between 0 and 100.

        - **unit** *(string) --*

          The unit of measure for the scale value.

      - **stabilityStatus** *(string) --*

        The stability status, which indicates whether the task set has reached a steady state. If
        the following conditions are met, the task set will be in ``STEADY_STATE`` :

        * The task ``runningCount`` is equal to the ``computedDesiredCount`` .

        * The ``pendingCount`` is ``0`` .

        * There are no tasks running on container instances in the ``DRAINING`` status.

        * All tasks are reporting a healthy status from the load balancers, service discovery, and
        container health checks.

        If any of those conditions are not met, the stability status returns ``STABILIZING`` .

      - **stabilityStatusAt** *(datetime) --*

        The Unix timestamp for when the task set stability status was retrieved.
    """


_ClientDeregisterContainerInstanceResponsecontainerInstanceattachmentsdetailsTypeDef = TypedDict(
    "_ClientDeregisterContainerInstanceResponsecontainerInstanceattachmentsdetailsTypeDef",
    {"name": str, "value": str},
    total=False,
)


class ClientDeregisterContainerInstanceResponsecontainerInstanceattachmentsdetailsTypeDef(
    _ClientDeregisterContainerInstanceResponsecontainerInstanceattachmentsdetailsTypeDef
):
    """
    Type definition for `ClientDeregisterContainerInstanceResponsecontainerInstanceattachments` `details`

    A key-value pair object.

    - **name** *(string) --*

      The name of the key-value pair. For environment variables, this is the name of the
      environment variable.

    - **value** *(string) --*

      The value of the key-value pair. For environment variables, this is the value of
      the environment variable.
    """


_ClientDeregisterContainerInstanceResponsecontainerInstanceattachmentsTypeDef = TypedDict(
    "_ClientDeregisterContainerInstanceResponsecontainerInstanceattachmentsTypeDef",
    {
        "id": str,
        "type": str,
        "status": str,
        "details": List[
            ClientDeregisterContainerInstanceResponsecontainerInstanceattachmentsdetailsTypeDef
        ],
    },
    total=False,
)


class ClientDeregisterContainerInstanceResponsecontainerInstanceattachmentsTypeDef(
    _ClientDeregisterContainerInstanceResponsecontainerInstanceattachmentsTypeDef
):
    """
    Type definition for `ClientDeregisterContainerInstanceResponsecontainerInstance` `attachments`

    An object representing a container instance or task attachment.

    - **id** *(string) --*

      The unique identifier for the attachment.

    - **type** *(string) --*

      The type of the attachment, such as ``ElasticNetworkInterface`` .

    - **status** *(string) --*

      The status of the attachment. Valid values are ``PRECREATED`` , ``CREATED`` ,
      ``ATTACHING`` , ``ATTACHED`` , ``DETACHING`` , ``DETACHED`` , and ``DELETED`` .

    - **details** *(list) --*

      Details of the attachment. For elastic network interfaces, this includes the network
      interface ID, the MAC address, the subnet ID, and the private IPv4 address.

      - *(dict) --*

        A key-value pair object.

        - **name** *(string) --*

          The name of the key-value pair. For environment variables, this is the name of the
          environment variable.

        - **value** *(string) --*

          The value of the key-value pair. For environment variables, this is the value of
          the environment variable.
    """


_ClientDeregisterContainerInstanceResponsecontainerInstanceattributesTypeDef = TypedDict(
    "_ClientDeregisterContainerInstanceResponsecontainerInstanceattributesTypeDef",
    {"name": str, "value": str, "targetType": str, "targetId": str},
    total=False,
)


class ClientDeregisterContainerInstanceResponsecontainerInstanceattributesTypeDef(
    _ClientDeregisterContainerInstanceResponsecontainerInstanceattributesTypeDef
):
    """
    Type definition for `ClientDeregisterContainerInstanceResponsecontainerInstance` `attributes`

    An attribute is a name-value pair associated with an Amazon ECS object. Attributes enable
    you to extend the Amazon ECS data model by adding custom metadata to your resources. For
    more information, see `Attributes
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html#attributes>`__
    in the *Amazon Elastic Container Service Developer Guide* .

    - **name** *(string) --*

      The name of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
      hyphens, underscores, and periods are allowed.

    - **value** *(string) --*

      The value of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
      hyphens, underscores, periods, at signs (@), forward slashes, colons, and spaces are
      allowed.

    - **targetType** *(string) --*

      The type of the target with which to attach the attribute. This parameter is required
      if you use the short form ID for a resource instead of the full ARN.

    - **targetId** *(string) --*

      The ID of the target. You can specify the short form ID for a resource or the full
      Amazon Resource Name (ARN).
    """


_ClientDeregisterContainerInstanceResponsecontainerInstanceregisteredResourcesTypeDef = TypedDict(
    "_ClientDeregisterContainerInstanceResponsecontainerInstanceregisteredResourcesTypeDef",
    {
        "name": str,
        "type": str,
        "doubleValue": float,
        "longValue": int,
        "integerValue": int,
        "stringSetValue": List[str],
    },
    total=False,
)


class ClientDeregisterContainerInstanceResponsecontainerInstanceregisteredResourcesTypeDef(
    _ClientDeregisterContainerInstanceResponsecontainerInstanceregisteredResourcesTypeDef
):
    """
    Type definition for `ClientDeregisterContainerInstanceResponsecontainerInstance` `registeredResources`

    Describes the resources available for a container instance.

    - **name** *(string) --*

      The name of the resource, such as ``CPU`` , ``MEMORY`` , ``PORTS`` , ``PORTS_UDP`` , or
      a user-defined resource.

    - **type** *(string) --*

      The type of the resource, such as ``INTEGER`` , ``DOUBLE`` , ``LONG`` , or
      ``STRINGSET`` .

    - **doubleValue** *(float) --*

      When the ``doubleValue`` type is set, the value of the resource must be a double
      precision floating-point type.

    - **longValue** *(integer) --*

      When the ``longValue`` type is set, the value of the resource must be an extended
      precision floating-point type.

    - **integerValue** *(integer) --*

      When the ``integerValue`` type is set, the value of the resource must be an integer.

    - **stringSetValue** *(list) --*

      When the ``stringSetValue`` type is set, the value of the resource must be a string
      type.

      - *(string) --*
    """


_ClientDeregisterContainerInstanceResponsecontainerInstanceremainingResourcesTypeDef = TypedDict(
    "_ClientDeregisterContainerInstanceResponsecontainerInstanceremainingResourcesTypeDef",
    {
        "name": str,
        "type": str,
        "doubleValue": float,
        "longValue": int,
        "integerValue": int,
        "stringSetValue": List[str],
    },
    total=False,
)


class ClientDeregisterContainerInstanceResponsecontainerInstanceremainingResourcesTypeDef(
    _ClientDeregisterContainerInstanceResponsecontainerInstanceremainingResourcesTypeDef
):
    """
    Type definition for `ClientDeregisterContainerInstanceResponsecontainerInstance` `remainingResources`

    Describes the resources available for a container instance.

    - **name** *(string) --*

      The name of the resource, such as ``CPU`` , ``MEMORY`` , ``PORTS`` , ``PORTS_UDP`` , or
      a user-defined resource.

    - **type** *(string) --*

      The type of the resource, such as ``INTEGER`` , ``DOUBLE`` , ``LONG`` , or
      ``STRINGSET`` .

    - **doubleValue** *(float) --*

      When the ``doubleValue`` type is set, the value of the resource must be a double
      precision floating-point type.

    - **longValue** *(integer) --*

      When the ``longValue`` type is set, the value of the resource must be an extended
      precision floating-point type.

    - **integerValue** *(integer) --*

      When the ``integerValue`` type is set, the value of the resource must be an integer.

    - **stringSetValue** *(list) --*

      When the ``stringSetValue`` type is set, the value of the resource must be a string
      type.

      - *(string) --*
    """


_ClientDeregisterContainerInstanceResponsecontainerInstancetagsTypeDef = TypedDict(
    "_ClientDeregisterContainerInstanceResponsecontainerInstancetagsTypeDef",
    {"key": str, "value": str},
    total=False,
)


class ClientDeregisterContainerInstanceResponsecontainerInstancetagsTypeDef(
    _ClientDeregisterContainerInstanceResponsecontainerInstancetagsTypeDef
):
    """
    Type definition for `ClientDeregisterContainerInstanceResponsecontainerInstance` `tags`

    The metadata that you apply to a resource to help you categorize and organize them. Each
    tag consists of a key and an optional value, both of which you define.

    The following basic restrictions apply to tags:

    * Maximum number of tags per resource - 50

    * For each resource, each tag key must be unique, and each tag key can have only one
    value.

    * Maximum key length - 128 Unicode characters in UTF-8

    * Maximum value length - 256 Unicode characters in UTF-8

    * If your tagging schema is used across multiple services and resources, remember that
    other services may have restrictions on allowed characters. Generally allowed characters
    are: letters, numbers, and spaces representable in UTF-8, and the following characters: +
    - = . _ : / @.

    * Tag keys and values are case-sensitive.

    * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
    prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
    tag keys or values with this prefix. Tags with this prefix do not count against your tags
    per resource limit.

    - **key** *(string) --*

      One part of a key-value pair that make up a tag. A ``key`` is a general label that acts
      like a category for more specific tag values.

    - **value** *(string) --*

      The optional part of a key-value pair that make up a tag. A ``value`` acts as a
      descriptor within a tag category (key).
    """


_ClientDeregisterContainerInstanceResponsecontainerInstanceversionInfoTypeDef = TypedDict(
    "_ClientDeregisterContainerInstanceResponsecontainerInstanceversionInfoTypeDef",
    {"agentVersion": str, "agentHash": str, "dockerVersion": str},
    total=False,
)


class ClientDeregisterContainerInstanceResponsecontainerInstanceversionInfoTypeDef(
    _ClientDeregisterContainerInstanceResponsecontainerInstanceversionInfoTypeDef
):
    """
    Type definition for `ClientDeregisterContainerInstanceResponsecontainerInstance` `versionInfo`

    The version information for the Amazon ECS container agent and Docker daemon running on the
    container instance.

    - **agentVersion** *(string) --*

      The version number of the Amazon ECS container agent.

    - **agentHash** *(string) --*

      The Git commit hash for the Amazon ECS container agent build on the `amazon-ecs-agent
      <https://github.com/aws/amazon-ecs-agent/commits/master>`__ GitHub repository.

    - **dockerVersion** *(string) --*

      The Docker version running on the container instance.
    """


_ClientDeregisterContainerInstanceResponsecontainerInstanceTypeDef = TypedDict(
    "_ClientDeregisterContainerInstanceResponsecontainerInstanceTypeDef",
    {
        "containerInstanceArn": str,
        "ec2InstanceId": str,
        "version": int,
        "versionInfo": ClientDeregisterContainerInstanceResponsecontainerInstanceversionInfoTypeDef,
        "remainingResources": List[
            ClientDeregisterContainerInstanceResponsecontainerInstanceremainingResourcesTypeDef
        ],
        "registeredResources": List[
            ClientDeregisterContainerInstanceResponsecontainerInstanceregisteredResourcesTypeDef
        ],
        "status": str,
        "statusReason": str,
        "agentConnected": bool,
        "runningTasksCount": int,
        "pendingTasksCount": int,
        "agentUpdateStatus": str,
        "attributes": List[
            ClientDeregisterContainerInstanceResponsecontainerInstanceattributesTypeDef
        ],
        "registeredAt": datetime,
        "attachments": List[
            ClientDeregisterContainerInstanceResponsecontainerInstanceattachmentsTypeDef
        ],
        "tags": List[
            ClientDeregisterContainerInstanceResponsecontainerInstancetagsTypeDef
        ],
    },
    total=False,
)


class ClientDeregisterContainerInstanceResponsecontainerInstanceTypeDef(
    _ClientDeregisterContainerInstanceResponsecontainerInstanceTypeDef
):
    """
    Type definition for `ClientDeregisterContainerInstanceResponse` `containerInstance`

    The container instance that was deregistered.

    - **containerInstanceArn** *(string) --*

      The Amazon Resource Name (ARN) of the container instance. The ARN contains the
      ``arn:aws:ecs`` namespace, followed by the Region of the container instance, the AWS
      account ID of the container instance owner, the ``container-instance`` namespace, and then
      the container instance ID. For example,
      ``arn:aws:ecs:region:aws_account_id:container-instance/container_instance_ID`` .

    - **ec2InstanceId** *(string) --*

      The EC2 instance ID of the container instance.

    - **version** *(integer) --*

      The version counter for the container instance. Every time a container instance experiences
      a change that triggers a CloudWatch event, the version counter is incremented. If you are
      replicating your Amazon ECS container instance state with CloudWatch Events, you can
      compare the version of a container instance reported by the Amazon ECS APIs with the
      version reported in CloudWatch Events for the container instance (inside the ``detail``
      object) to verify that the version in your event stream is current.

    - **versionInfo** *(dict) --*

      The version information for the Amazon ECS container agent and Docker daemon running on the
      container instance.

      - **agentVersion** *(string) --*

        The version number of the Amazon ECS container agent.

      - **agentHash** *(string) --*

        The Git commit hash for the Amazon ECS container agent build on the `amazon-ecs-agent
        <https://github.com/aws/amazon-ecs-agent/commits/master>`__ GitHub repository.

      - **dockerVersion** *(string) --*

        The Docker version running on the container instance.

    - **remainingResources** *(list) --*

      For CPU and memory resource types, this parameter describes the remaining CPU and memory
      that has not already been allocated to tasks and is therefore available for new tasks. For
      port resource types, this parameter describes the ports that were reserved by the Amazon
      ECS container agent (at instance registration time) and any task containers that have
      reserved port mappings on the host (with the ``host`` or ``bridge`` network mode). Any port
      that is not specified here is available for new tasks.

      - *(dict) --*

        Describes the resources available for a container instance.

        - **name** *(string) --*

          The name of the resource, such as ``CPU`` , ``MEMORY`` , ``PORTS`` , ``PORTS_UDP`` , or
          a user-defined resource.

        - **type** *(string) --*

          The type of the resource, such as ``INTEGER`` , ``DOUBLE`` , ``LONG`` , or
          ``STRINGSET`` .

        - **doubleValue** *(float) --*

          When the ``doubleValue`` type is set, the value of the resource must be a double
          precision floating-point type.

        - **longValue** *(integer) --*

          When the ``longValue`` type is set, the value of the resource must be an extended
          precision floating-point type.

        - **integerValue** *(integer) --*

          When the ``integerValue`` type is set, the value of the resource must be an integer.

        - **stringSetValue** *(list) --*

          When the ``stringSetValue`` type is set, the value of the resource must be a string
          type.

          - *(string) --*

    - **registeredResources** *(list) --*

      For CPU and memory resource types, this parameter describes the amount of each resource
      that was available on the container instance when the container agent registered it with
      Amazon ECS. This value represents the total amount of CPU and memory that can be allocated
      on this container instance to tasks. For port resource types, this parameter describes the
      ports that were reserved by the Amazon ECS container agent when it registered the container
      instance with Amazon ECS.

      - *(dict) --*

        Describes the resources available for a container instance.

        - **name** *(string) --*

          The name of the resource, such as ``CPU`` , ``MEMORY`` , ``PORTS`` , ``PORTS_UDP`` , or
          a user-defined resource.

        - **type** *(string) --*

          The type of the resource, such as ``INTEGER`` , ``DOUBLE`` , ``LONG`` , or
          ``STRINGSET`` .

        - **doubleValue** *(float) --*

          When the ``doubleValue`` type is set, the value of the resource must be a double
          precision floating-point type.

        - **longValue** *(integer) --*

          When the ``longValue`` type is set, the value of the resource must be an extended
          precision floating-point type.

        - **integerValue** *(integer) --*

          When the ``integerValue`` type is set, the value of the resource must be an integer.

        - **stringSetValue** *(list) --*

          When the ``stringSetValue`` type is set, the value of the resource must be a string
          type.

          - *(string) --*

    - **status** *(string) --*

      The status of the container instance. The valid values are ``REGISTERING`` ,
      ``REGISTRATION_FAILED`` , ``ACTIVE`` , ``INACTIVE`` , ``DEREGISTERING`` , or ``DRAINING`` .

      If your account has opted in to the ``awsvpcTrunking`` account setting, then any newly
      registered container instance will transition to a ``REGISTERING`` status while the trunk
      elastic network interface is provisioned for the instance. If the registration fails, the
      instance will transition to a ``REGISTRATION_FAILED`` status. You can describe the
      container instance and see the reason for failure in the ``statusReason`` parameter. Once
      the container instance is terminated, the instance transitions to a ``DEREGISTERING``
      status while the trunk elastic network interface is deprovisioned. The instance then
      transitions to an ``INACTIVE`` status.

      The ``ACTIVE`` status indicates that the container instance can accept tasks. The
      ``DRAINING`` indicates that new tasks are not placed on the container instance and any
      service tasks running on the container instance are removed if possible. For more
      information, see `Container Instance Draining
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/container-instance-draining.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

    - **statusReason** *(string) --*

      The reason that the container instance reached its current status.

    - **agentConnected** *(boolean) --*

      This parameter returns ``true`` if the agent is connected to Amazon ECS. Registered
      instances with an agent that may be unhealthy or stopped return ``false`` . Only instances
      connected to an agent can accept placement requests.

    - **runningTasksCount** *(integer) --*

      The number of tasks on the container instance that are in the ``RUNNING`` status.

    - **pendingTasksCount** *(integer) --*

      The number of tasks on the container instance that are in the ``PENDING`` status.

    - **agentUpdateStatus** *(string) --*

      The status of the most recent agent update. If an update has never been requested, this
      value is ``NULL`` .

    - **attributes** *(list) --*

      The attributes set for the container instance, either by the Amazon ECS container agent at
      instance registration or manually with the  PutAttributes operation.

      - *(dict) --*

        An attribute is a name-value pair associated with an Amazon ECS object. Attributes enable
        you to extend the Amazon ECS data model by adding custom metadata to your resources. For
        more information, see `Attributes
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html#attributes>`__
        in the *Amazon Elastic Container Service Developer Guide* .

        - **name** *(string) --*

          The name of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
          hyphens, underscores, and periods are allowed.

        - **value** *(string) --*

          The value of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
          hyphens, underscores, periods, at signs (@), forward slashes, colons, and spaces are
          allowed.

        - **targetType** *(string) --*

          The type of the target with which to attach the attribute. This parameter is required
          if you use the short form ID for a resource instead of the full ARN.

        - **targetId** *(string) --*

          The ID of the target. You can specify the short form ID for a resource or the full
          Amazon Resource Name (ARN).

    - **registeredAt** *(datetime) --*

      The Unix timestamp for when the container instance was registered.

    - **attachments** *(list) --*

      The resources attached to a container instance, such as elastic network interfaces.

      - *(dict) --*

        An object representing a container instance or task attachment.

        - **id** *(string) --*

          The unique identifier for the attachment.

        - **type** *(string) --*

          The type of the attachment, such as ``ElasticNetworkInterface`` .

        - **status** *(string) --*

          The status of the attachment. Valid values are ``PRECREATED`` , ``CREATED`` ,
          ``ATTACHING`` , ``ATTACHED`` , ``DETACHING`` , ``DETACHED`` , and ``DELETED`` .

        - **details** *(list) --*

          Details of the attachment. For elastic network interfaces, this includes the network
          interface ID, the MAC address, the subnet ID, and the private IPv4 address.

          - *(dict) --*

            A key-value pair object.

            - **name** *(string) --*

              The name of the key-value pair. For environment variables, this is the name of the
              environment variable.

            - **value** *(string) --*

              The value of the key-value pair. For environment variables, this is the value of
              the environment variable.

    - **tags** *(list) --*

      The metadata that you apply to the container instance to help you categorize and organize
      them. Each tag consists of a key and an optional value, both of which you define.

      The following basic restrictions apply to tags:

      * Maximum number of tags per resource - 50

      * For each resource, each tag key must be unique, and each tag key can have only one value.

      * Maximum key length - 128 Unicode characters in UTF-8

      * Maximum value length - 256 Unicode characters in UTF-8

      * If your tagging schema is used across multiple services and resources, remember that
      other services may have restrictions on allowed characters. Generally allowed characters
      are: letters, numbers, and spaces representable in UTF-8, and the following characters: + -
      = . _ : / @.

      * Tag keys and values are case-sensitive.

      * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
      prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
      tag keys or values with this prefix. Tags with this prefix do not count against your tags
      per resource limit.

      - *(dict) --*

        The metadata that you apply to a resource to help you categorize and organize them. Each
        tag consists of a key and an optional value, both of which you define.

        The following basic restrictions apply to tags:

        * Maximum number of tags per resource - 50

        * For each resource, each tag key must be unique, and each tag key can have only one
        value.

        * Maximum key length - 128 Unicode characters in UTF-8

        * Maximum value length - 256 Unicode characters in UTF-8

        * If your tagging schema is used across multiple services and resources, remember that
        other services may have restrictions on allowed characters. Generally allowed characters
        are: letters, numbers, and spaces representable in UTF-8, and the following characters: +
        - = . _ : / @.

        * Tag keys and values are case-sensitive.

        * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
        prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
        tag keys or values with this prefix. Tags with this prefix do not count against your tags
        per resource limit.

        - **key** *(string) --*

          One part of a key-value pair that make up a tag. A ``key`` is a general label that acts
          like a category for more specific tag values.

        - **value** *(string) --*

          The optional part of a key-value pair that make up a tag. A ``value`` acts as a
          descriptor within a tag category (key).
    """


_ClientDeregisterContainerInstanceResponseTypeDef = TypedDict(
    "_ClientDeregisterContainerInstanceResponseTypeDef",
    {
        "containerInstance": ClientDeregisterContainerInstanceResponsecontainerInstanceTypeDef
    },
    total=False,
)


class ClientDeregisterContainerInstanceResponseTypeDef(
    _ClientDeregisterContainerInstanceResponseTypeDef
):
    """
    Type definition for `ClientDeregisterContainerInstance` `Response`

    - **containerInstance** *(dict) --*

      The container instance that was deregistered.

      - **containerInstanceArn** *(string) --*

        The Amazon Resource Name (ARN) of the container instance. The ARN contains the
        ``arn:aws:ecs`` namespace, followed by the Region of the container instance, the AWS
        account ID of the container instance owner, the ``container-instance`` namespace, and then
        the container instance ID. For example,
        ``arn:aws:ecs:region:aws_account_id:container-instance/container_instance_ID`` .

      - **ec2InstanceId** *(string) --*

        The EC2 instance ID of the container instance.

      - **version** *(integer) --*

        The version counter for the container instance. Every time a container instance experiences
        a change that triggers a CloudWatch event, the version counter is incremented. If you are
        replicating your Amazon ECS container instance state with CloudWatch Events, you can
        compare the version of a container instance reported by the Amazon ECS APIs with the
        version reported in CloudWatch Events for the container instance (inside the ``detail``
        object) to verify that the version in your event stream is current.

      - **versionInfo** *(dict) --*

        The version information for the Amazon ECS container agent and Docker daemon running on the
        container instance.

        - **agentVersion** *(string) --*

          The version number of the Amazon ECS container agent.

        - **agentHash** *(string) --*

          The Git commit hash for the Amazon ECS container agent build on the `amazon-ecs-agent
          <https://github.com/aws/amazon-ecs-agent/commits/master>`__ GitHub repository.

        - **dockerVersion** *(string) --*

          The Docker version running on the container instance.

      - **remainingResources** *(list) --*

        For CPU and memory resource types, this parameter describes the remaining CPU and memory
        that has not already been allocated to tasks and is therefore available for new tasks. For
        port resource types, this parameter describes the ports that were reserved by the Amazon
        ECS container agent (at instance registration time) and any task containers that have
        reserved port mappings on the host (with the ``host`` or ``bridge`` network mode). Any port
        that is not specified here is available for new tasks.

        - *(dict) --*

          Describes the resources available for a container instance.

          - **name** *(string) --*

            The name of the resource, such as ``CPU`` , ``MEMORY`` , ``PORTS`` , ``PORTS_UDP`` , or
            a user-defined resource.

          - **type** *(string) --*

            The type of the resource, such as ``INTEGER`` , ``DOUBLE`` , ``LONG`` , or
            ``STRINGSET`` .

          - **doubleValue** *(float) --*

            When the ``doubleValue`` type is set, the value of the resource must be a double
            precision floating-point type.

          - **longValue** *(integer) --*

            When the ``longValue`` type is set, the value of the resource must be an extended
            precision floating-point type.

          - **integerValue** *(integer) --*

            When the ``integerValue`` type is set, the value of the resource must be an integer.

          - **stringSetValue** *(list) --*

            When the ``stringSetValue`` type is set, the value of the resource must be a string
            type.

            - *(string) --*

      - **registeredResources** *(list) --*

        For CPU and memory resource types, this parameter describes the amount of each resource
        that was available on the container instance when the container agent registered it with
        Amazon ECS. This value represents the total amount of CPU and memory that can be allocated
        on this container instance to tasks. For port resource types, this parameter describes the
        ports that were reserved by the Amazon ECS container agent when it registered the container
        instance with Amazon ECS.

        - *(dict) --*

          Describes the resources available for a container instance.

          - **name** *(string) --*

            The name of the resource, such as ``CPU`` , ``MEMORY`` , ``PORTS`` , ``PORTS_UDP`` , or
            a user-defined resource.

          - **type** *(string) --*

            The type of the resource, such as ``INTEGER`` , ``DOUBLE`` , ``LONG`` , or
            ``STRINGSET`` .

          - **doubleValue** *(float) --*

            When the ``doubleValue`` type is set, the value of the resource must be a double
            precision floating-point type.

          - **longValue** *(integer) --*

            When the ``longValue`` type is set, the value of the resource must be an extended
            precision floating-point type.

          - **integerValue** *(integer) --*

            When the ``integerValue`` type is set, the value of the resource must be an integer.

          - **stringSetValue** *(list) --*

            When the ``stringSetValue`` type is set, the value of the resource must be a string
            type.

            - *(string) --*

      - **status** *(string) --*

        The status of the container instance. The valid values are ``REGISTERING`` ,
        ``REGISTRATION_FAILED`` , ``ACTIVE`` , ``INACTIVE`` , ``DEREGISTERING`` , or ``DRAINING`` .

        If your account has opted in to the ``awsvpcTrunking`` account setting, then any newly
        registered container instance will transition to a ``REGISTERING`` status while the trunk
        elastic network interface is provisioned for the instance. If the registration fails, the
        instance will transition to a ``REGISTRATION_FAILED`` status. You can describe the
        container instance and see the reason for failure in the ``statusReason`` parameter. Once
        the container instance is terminated, the instance transitions to a ``DEREGISTERING``
        status while the trunk elastic network interface is deprovisioned. The instance then
        transitions to an ``INACTIVE`` status.

        The ``ACTIVE`` status indicates that the container instance can accept tasks. The
        ``DRAINING`` indicates that new tasks are not placed on the container instance and any
        service tasks running on the container instance are removed if possible. For more
        information, see `Container Instance Draining
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/container-instance-draining.html>`__
        in the *Amazon Elastic Container Service Developer Guide* .

      - **statusReason** *(string) --*

        The reason that the container instance reached its current status.

      - **agentConnected** *(boolean) --*

        This parameter returns ``true`` if the agent is connected to Amazon ECS. Registered
        instances with an agent that may be unhealthy or stopped return ``false`` . Only instances
        connected to an agent can accept placement requests.

      - **runningTasksCount** *(integer) --*

        The number of tasks on the container instance that are in the ``RUNNING`` status.

      - **pendingTasksCount** *(integer) --*

        The number of tasks on the container instance that are in the ``PENDING`` status.

      - **agentUpdateStatus** *(string) --*

        The status of the most recent agent update. If an update has never been requested, this
        value is ``NULL`` .

      - **attributes** *(list) --*

        The attributes set for the container instance, either by the Amazon ECS container agent at
        instance registration or manually with the  PutAttributes operation.

        - *(dict) --*

          An attribute is a name-value pair associated with an Amazon ECS object. Attributes enable
          you to extend the Amazon ECS data model by adding custom metadata to your resources. For
          more information, see `Attributes
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html#attributes>`__
          in the *Amazon Elastic Container Service Developer Guide* .

          - **name** *(string) --*

            The name of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
            hyphens, underscores, and periods are allowed.

          - **value** *(string) --*

            The value of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
            hyphens, underscores, periods, at signs (@), forward slashes, colons, and spaces are
            allowed.

          - **targetType** *(string) --*

            The type of the target with which to attach the attribute. This parameter is required
            if you use the short form ID for a resource instead of the full ARN.

          - **targetId** *(string) --*

            The ID of the target. You can specify the short form ID for a resource or the full
            Amazon Resource Name (ARN).

      - **registeredAt** *(datetime) --*

        The Unix timestamp for when the container instance was registered.

      - **attachments** *(list) --*

        The resources attached to a container instance, such as elastic network interfaces.

        - *(dict) --*

          An object representing a container instance or task attachment.

          - **id** *(string) --*

            The unique identifier for the attachment.

          - **type** *(string) --*

            The type of the attachment, such as ``ElasticNetworkInterface`` .

          - **status** *(string) --*

            The status of the attachment. Valid values are ``PRECREATED`` , ``CREATED`` ,
            ``ATTACHING`` , ``ATTACHED`` , ``DETACHING`` , ``DETACHED`` , and ``DELETED`` .

          - **details** *(list) --*

            Details of the attachment. For elastic network interfaces, this includes the network
            interface ID, the MAC address, the subnet ID, and the private IPv4 address.

            - *(dict) --*

              A key-value pair object.

              - **name** *(string) --*

                The name of the key-value pair. For environment variables, this is the name of the
                environment variable.

              - **value** *(string) --*

                The value of the key-value pair. For environment variables, this is the value of
                the environment variable.

      - **tags** *(list) --*

        The metadata that you apply to the container instance to help you categorize and organize
        them. Each tag consists of a key and an optional value, both of which you define.

        The following basic restrictions apply to tags:

        * Maximum number of tags per resource - 50

        * For each resource, each tag key must be unique, and each tag key can have only one value.

        * Maximum key length - 128 Unicode characters in UTF-8

        * Maximum value length - 256 Unicode characters in UTF-8

        * If your tagging schema is used across multiple services and resources, remember that
        other services may have restrictions on allowed characters. Generally allowed characters
        are: letters, numbers, and spaces representable in UTF-8, and the following characters: + -
        = . _ : / @.

        * Tag keys and values are case-sensitive.

        * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
        prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
        tag keys or values with this prefix. Tags with this prefix do not count against your tags
        per resource limit.

        - *(dict) --*

          The metadata that you apply to a resource to help you categorize and organize them. Each
          tag consists of a key and an optional value, both of which you define.

          The following basic restrictions apply to tags:

          * Maximum number of tags per resource - 50

          * For each resource, each tag key must be unique, and each tag key can have only one
          value.

          * Maximum key length - 128 Unicode characters in UTF-8

          * Maximum value length - 256 Unicode characters in UTF-8

          * If your tagging schema is used across multiple services and resources, remember that
          other services may have restrictions on allowed characters. Generally allowed characters
          are: letters, numbers, and spaces representable in UTF-8, and the following characters: +
          - = . _ : / @.

          * Tag keys and values are case-sensitive.

          * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
          prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
          tag keys or values with this prefix. Tags with this prefix do not count against your tags
          per resource limit.

          - **key** *(string) --*

            One part of a key-value pair that make up a tag. A ``key`` is a general label that acts
            like a category for more specific tag values.

          - **value** *(string) --*

            The optional part of a key-value pair that make up a tag. A ``value`` acts as a
            descriptor within a tag category (key).
    """


_ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsdependsOnTypeDef = TypedDict(
    "_ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsdependsOnTypeDef",
    {"containerName": str, "condition": str},
    total=False,
)


class ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsdependsOnTypeDef(
    _ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsdependsOnTypeDef
):
    """
    Type definition for `ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitions` `dependsOn`

    The dependencies defined for container startup and shutdown. A container can contain
    multiple dependencies. When a dependency is defined for container startup, for
    container shutdown it is reversed.

    Your Amazon ECS container instances require at least version 1.26.0 of the container
    agent to enable container dependencies. However, we recommend using the latest
    container agent version. For information about checking your agent version and
    updating to the latest version, see `Updating the Amazon ECS Container Agent
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html>`__
    in the *Amazon Elastic Container Service Developer Guide* . If you are using an
    Amazon ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the
    ``ecs-init`` package. If your container instances are launched from version
    ``20190301`` or later, then they contain the required versions of the container agent
    and ``ecs-init`` . For more information, see `Amazon ECS-optimized Linux AMI
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html>`__
    in the *Amazon Elastic Container Service Developer Guide* .

    .. note::

      If you are using tasks that use the Fargate launch type, container dependency
      parameters are not supported.

    - **containerName** *(string) --*

      The name of a container.

    - **condition** *(string) --*

      The dependency condition of the container. The following are the available
      conditions and their behavior:

      * ``START`` - This condition emulates the behavior of links and volumes today. It
      validates that a dependent container is started before permitting other containers
      to start.

      * ``COMPLETE`` - This condition validates that a dependent container runs to
      completion (exits) before permitting other containers to start. This can be useful
      for nonessential containers that run a script and then exit.

      * ``SUCCESS`` - This condition is the same as ``COMPLETE`` , but it also requires
      that the container exits with a ``zero`` status.

      * ``HEALTHY`` - This condition validates that the dependent container passes its
      Docker health check before permitting other containers to start. This requires that
      the dependent container has health checks configured. This condition is confirmed
      only at task startup.
    """


_ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsenvironmentTypeDef = TypedDict(
    "_ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsenvironmentTypeDef",
    {"name": str, "value": str},
    total=False,
)


class ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsenvironmentTypeDef(
    _ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsenvironmentTypeDef
):
    """
    Type definition for `ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitions` `environment`

    A key-value pair object.

    - **name** *(string) --*

      The name of the key-value pair. For environment variables, this is the name of the
      environment variable.

    - **value** *(string) --*

      The value of the key-value pair. For environment variables, this is the value of
      the environment variable.
    """


_ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsextraHostsTypeDef = TypedDict(
    "_ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsextraHostsTypeDef",
    {"hostname": str, "ipAddress": str},
    total=False,
)


class ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsextraHostsTypeDef(
    _ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsextraHostsTypeDef
):
    """
    Type definition for `ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitions` `extraHosts`

    Hostnames and IP address entries that are added to the ``/etc/hosts`` file of a
    container via the ``extraHosts`` parameter of its  ContainerDefinition .

    - **hostname** *(string) --*

      The hostname to use in the ``/etc/hosts`` entry.

    - **ipAddress** *(string) --*

      The IP address to use in the ``/etc/hosts`` entry.
    """


_ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsfirelensConfigurationTypeDef = TypedDict(
    "_ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsfirelensConfigurationTypeDef",
    {"type": str, "options": Dict[str, str]},
    total=False,
)


class ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsfirelensConfigurationTypeDef(
    _ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsfirelensConfigurationTypeDef
):
    """
    Type definition for `ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitions` `firelensConfiguration`

    The FireLens configuration for the container. This is used to specify and configure a
    log router for container logs. For more information, see `Custom Log Routing
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html>`__ in
    the *Amazon Elastic Container Service Developer Guide* .

    - **type** *(string) --*

      The log router to use. The valid values are ``fluentd`` or ``fluentbit`` .

    - **options** *(dict) --*

      The options to use when configuring the log router. This field is optional and can be
      used to add additional metadata, such as the task, task definition, cluster, and
      container instance details to the log event. If specified, the syntax to use is
      ``"options":{"enable-ecs-log-metadata":"true|false"}`` .

      - *(string) --*

        - *(string) --*
    """


_ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionshealthCheckTypeDef = TypedDict(
    "_ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionshealthCheckTypeDef",
    {
        "command": List[str],
        "interval": int,
        "timeout": int,
        "retries": int,
        "startPeriod": int,
    },
    total=False,
)


class ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionshealthCheckTypeDef(
    _ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionshealthCheckTypeDef
):
    """
    Type definition for `ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitions` `healthCheck`

    The health check command and associated configuration parameters for the container.
    This parameter maps to ``HealthCheck`` in the `Create a container
    <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
    `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
    ``HEALTHCHECK`` parameter of `docker run
    <https://docs.docker.com/engine/reference/run/>`__ .

    - **command** *(list) --*

      A string array representing the command that the container runs to determine if it is
      healthy. The string array must start with ``CMD`` to execute the command arguments
      directly, or ``CMD-SHELL`` to run the command with the container's default shell. For
      example:

       ``[ "CMD-SHELL", "curl -f http://localhost/ || exit 1" ]``

      An exit code of 0 indicates success, and non-zero exit code indicates failure. For
      more information, see ``HealthCheck`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of
      the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ .

      - *(string) --*

    - **interval** *(integer) --*

      The time period in seconds between each health check execution. You may specify
      between 5 and 300 seconds. The default value is 30 seconds.

    - **timeout** *(integer) --*

      The time period in seconds to wait for a health check to succeed before it is
      considered a failure. You may specify between 2 and 60 seconds. The default value is
      5.

    - **retries** *(integer) --*

      The number of times to retry a failed health check before the container is considered
      unhealthy. You may specify between 1 and 10 retries. The default value is 3.

    - **startPeriod** *(integer) --*

      The optional grace period within which to provide containers time to bootstrap before
      failed health checks count towards the maximum number of retries. You may specify
      between 0 and 300 seconds. The ``startPeriod`` is disabled by default.

      .. note::

        If a health check succeeds within the ``startPeriod`` , then the container is
        considered healthy and any subsequent failures count toward the maximum number of
        retries.
    """


_ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParameterscapabilitiesTypeDef = TypedDict(
    "_ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParameterscapabilitiesTypeDef",
    {"add": List[str], "drop": List[str]},
    total=False,
)


class ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParameterscapabilitiesTypeDef(
    _ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParameterscapabilitiesTypeDef
):
    """
    Type definition for `ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParameters` `capabilities`

    The Linux capabilities for the container that are added to or dropped from the
    default configuration provided by Docker.

    .. note::

      If you are using tasks that use the Fargate launch type, ``capabilities`` is
      supported but the ``add`` parameter is not supported.

    - **add** *(list) --*

      The Linux capabilities for the container that have been added to the default
      configuration provided by Docker. This parameter maps to ``CapAdd`` in the `Create
      a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of
      the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
      ``--cap-add`` option to `docker run
      <https://docs.docker.com/engine/reference/run/>`__ .

      .. note::

        If you are using tasks that use the Fargate launch type, the ``add`` parameter is
        not supported.

      Valid values: ``"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" | "BLOCK_SUSPEND" | "CHOWN"
      | "DAC_OVERRIDE" | "DAC_READ_SEARCH" | "FOWNER" | "FSETID" | "IPC_LOCK" |
      "IPC_OWNER" | "KILL" | "LEASE" | "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" |
      "MKNOD" | "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" |
      "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT" |
      "SYS_CHROOT" | "SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" | "SYS_PTRACE" | "SYS_RAWIO"
      | "SYS_RESOURCE" | "SYS_TIME" | "SYS_TTY_CONFIG" | "SYSLOG" | "WAKE_ALARM"``

      - *(string) --*

    - **drop** *(list) --*

      The Linux capabilities for the container that have been removed from the default
      configuration provided by Docker. This parameter maps to ``CapDrop`` in the `Create
      a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of
      the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
      ``--cap-drop`` option to `docker run
      <https://docs.docker.com/engine/reference/run/>`__ .

      Valid values: ``"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" | "BLOCK_SUSPEND" | "CHOWN"
      | "DAC_OVERRIDE" | "DAC_READ_SEARCH" | "FOWNER" | "FSETID" | "IPC_LOCK" |
      "IPC_OWNER" | "KILL" | "LEASE" | "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" |
      "MKNOD" | "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" |
      "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT" |
      "SYS_CHROOT" | "SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" | "SYS_PTRACE" | "SYS_RAWIO"
      | "SYS_RESOURCE" | "SYS_TIME" | "SYS_TTY_CONFIG" | "SYSLOG" | "WAKE_ALARM"``

      - *(string) --*
    """


_ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParametersdevicesTypeDef = TypedDict(
    "_ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParametersdevicesTypeDef",
    {"hostPath": str, "containerPath": str, "permissions": List[str]},
    total=False,
)


class ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParametersdevicesTypeDef(
    _ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParametersdevicesTypeDef
):
    """
    Type definition for `ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParameters` `devices`

    An object representing a container instance host device.

    - **hostPath** *(string) --*

      The path for the device on the host container instance.

    - **containerPath** *(string) --*

      The path inside the container at which to expose the host device.

    - **permissions** *(list) --*

      The explicit permissions to provide to the container for the device. By default,
      the container has permissions for ``read`` , ``write`` , and ``mknod`` for the
      device.

      - *(string) --*
    """


_ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParameterstmpfsTypeDef = TypedDict(
    "_ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParameterstmpfsTypeDef",
    {"containerPath": str, "size": int, "mountOptions": List[str]},
    total=False,
)


class ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParameterstmpfsTypeDef(
    _ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParameterstmpfsTypeDef
):
    """
    Type definition for `ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParameters` `tmpfs`

    The container path, mount options, and size of the tmpfs mount.

    - **containerPath** *(string) --*

      The absolute file path where the tmpfs volume is to be mounted.

    - **size** *(integer) --*

      The size (in MiB) of the tmpfs volume.

    - **mountOptions** *(list) --*

      The list of tmpfs volume mount options.

      Valid values: ``"defaults" | "ro" | "rw" | "suid" | "nosuid" | "dev" | "nodev" |
      "exec" | "noexec" | "sync" | "async" | "dirsync" | "remount" | "mand" | "nomand"
      | "atime" | "noatime" | "diratime" | "nodiratime" | "bind" | "rbind" |
      "unbindable" | "runbindable" | "private" | "rprivate" | "shared" | "rshared" |
      "slave" | "rslave" | "relatime" | "norelatime" | "strictatime" | "nostrictatime"
      | "mode" | "uid" | "gid" | "nr_inodes" | "nr_blocks" | "mpol"``

      - *(string) --*
    """


_ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParametersTypeDef = TypedDict(
    "_ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParametersTypeDef",
    {
        "capabilities": ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParameterscapabilitiesTypeDef,
        "devices": List[
            ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParametersdevicesTypeDef
        ],
        "initProcessEnabled": bool,
        "sharedMemorySize": int,
        "tmpfs": List[
            ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParameterstmpfsTypeDef
        ],
        "maxSwap": int,
        "swappiness": int,
    },
    total=False,
)


class ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParametersTypeDef(
    _ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParametersTypeDef
):
    """
    Type definition for `ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitions` `linuxParameters`

    Linux-specific modifications that are applied to the container, such as Linux kernel
    capabilities. For more information see  KernelCapabilities .

    .. note::

      This parameter is not supported for Windows containers.

    - **capabilities** *(dict) --*

      The Linux capabilities for the container that are added to or dropped from the
      default configuration provided by Docker.

      .. note::

        If you are using tasks that use the Fargate launch type, ``capabilities`` is
        supported but the ``add`` parameter is not supported.

      - **add** *(list) --*

        The Linux capabilities for the container that have been added to the default
        configuration provided by Docker. This parameter maps to ``CapAdd`` in the `Create
        a container
        <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of
        the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
        ``--cap-add`` option to `docker run
        <https://docs.docker.com/engine/reference/run/>`__ .

        .. note::

          If you are using tasks that use the Fargate launch type, the ``add`` parameter is
          not supported.

        Valid values: ``"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" | "BLOCK_SUSPEND" | "CHOWN"
        | "DAC_OVERRIDE" | "DAC_READ_SEARCH" | "FOWNER" | "FSETID" | "IPC_LOCK" |
        "IPC_OWNER" | "KILL" | "LEASE" | "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" |
        "MKNOD" | "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" |
        "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT" |
        "SYS_CHROOT" | "SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" | "SYS_PTRACE" | "SYS_RAWIO"
        | "SYS_RESOURCE" | "SYS_TIME" | "SYS_TTY_CONFIG" | "SYSLOG" | "WAKE_ALARM"``

        - *(string) --*

      - **drop** *(list) --*

        The Linux capabilities for the container that have been removed from the default
        configuration provided by Docker. This parameter maps to ``CapDrop`` in the `Create
        a container
        <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of
        the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
        ``--cap-drop`` option to `docker run
        <https://docs.docker.com/engine/reference/run/>`__ .

        Valid values: ``"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" | "BLOCK_SUSPEND" | "CHOWN"
        | "DAC_OVERRIDE" | "DAC_READ_SEARCH" | "FOWNER" | "FSETID" | "IPC_LOCK" |
        "IPC_OWNER" | "KILL" | "LEASE" | "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" |
        "MKNOD" | "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" |
        "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT" |
        "SYS_CHROOT" | "SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" | "SYS_PTRACE" | "SYS_RAWIO"
        | "SYS_RESOURCE" | "SYS_TIME" | "SYS_TTY_CONFIG" | "SYSLOG" | "WAKE_ALARM"``

        - *(string) --*

    - **devices** *(list) --*

      Any host devices to expose to the container. This parameter maps to ``Devices`` in
      the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of
      the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
      ``--device`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__
      .

      .. note::

        If you are using tasks that use the Fargate launch type, the ``devices`` parameter
        is not supported.

      - *(dict) --*

        An object representing a container instance host device.

        - **hostPath** *(string) --*

          The path for the device on the host container instance.

        - **containerPath** *(string) --*

          The path inside the container at which to expose the host device.

        - **permissions** *(list) --*

          The explicit permissions to provide to the container for the device. By default,
          the container has permissions for ``read`` , ``write`` , and ``mknod`` for the
          device.

          - *(string) --*

    - **initProcessEnabled** *(boolean) --*

      Run an ``init`` process inside the container that forwards signals and reaps
      processes. This parameter maps to the ``--init`` option to `docker run
      <https://docs.docker.com/engine/reference/run/>`__ . This parameter requires version
      1.25 of the Docker Remote API or greater on your container instance. To check the
      Docker Remote API version on your container instance, log in to your container
      instance and run the following command: ``sudo docker version --format
      '{{.Server.APIVersion}}'``

    - **sharedMemorySize** *(integer) --*

      The value for the size (in MiB) of the ``/dev/shm`` volume. This parameter maps to
      the ``--shm-size`` option to `docker run
      <https://docs.docker.com/engine/reference/run/>`__ .

      .. note::

        If you are using tasks that use the Fargate launch type, the ``sharedMemorySize``
        parameter is not supported.

    - **tmpfs** *(list) --*

      The container path, mount options, and size (in MiB) of the tmpfs mount. This
      parameter maps to the ``--tmpfs`` option to `docker run
      <https://docs.docker.com/engine/reference/run/>`__ .

      .. note::

        If you are using tasks that use the Fargate launch type, the ``tmpfs`` parameter is
        not supported.

      - *(dict) --*

        The container path, mount options, and size of the tmpfs mount.

        - **containerPath** *(string) --*

          The absolute file path where the tmpfs volume is to be mounted.

        - **size** *(integer) --*

          The size (in MiB) of the tmpfs volume.

        - **mountOptions** *(list) --*

          The list of tmpfs volume mount options.

          Valid values: ``"defaults" | "ro" | "rw" | "suid" | "nosuid" | "dev" | "nodev" |
          "exec" | "noexec" | "sync" | "async" | "dirsync" | "remount" | "mand" | "nomand"
          | "atime" | "noatime" | "diratime" | "nodiratime" | "bind" | "rbind" |
          "unbindable" | "runbindable" | "private" | "rprivate" | "shared" | "rshared" |
          "slave" | "rslave" | "relatime" | "norelatime" | "strictatime" | "nostrictatime"
          | "mode" | "uid" | "gid" | "nr_inodes" | "nr_blocks" | "mpol"``

          - *(string) --*

    - **maxSwap** *(integer) --*

      The total amount of swap memory (in MiB) a container can use. This parameter will be
      translated to the ``--memory-swap`` option to `docker run
      <https://docs.docker.com/engine/reference/run/>`__ where the value would be the sum
      of the container memory plus the ``maxSwap`` value.

      If a ``maxSwap`` value of ``0`` is specified, the container will not use swap.
      Accepted values are ``0`` or any positive integer. If the ``maxSwap`` parameter is
      omitted, the container will use the swap configuration for the container instance it
      is running on. A ``maxSwap`` value must be set for the ``swappiness`` parameter to be
      used.

      .. note::

        If you are using tasks that use the Fargate launch type, the ``maxSwap`` parameter
        is not supported.

    - **swappiness** *(integer) --*

      This allows you to tune a container's memory swappiness behavior. A ``swappiness``
      value of ``0`` will cause swapping to not happen unless absolutely necessary. A
      ``swappiness`` value of ``100`` will cause pages to be swapped very aggressively.
      Accepted values are whole numbers between ``0`` and ``100`` . If the ``swappiness``
      parameter is not specified, a default value of ``60`` is used. If a value is not
      specified for ``maxSwap`` then this parameter is ignored. This parameter maps to the
      ``--memory-swappiness`` option to `docker run
      <https://docs.docker.com/engine/reference/run/>`__ .

      .. note::

        If you are using tasks that use the Fargate launch type, the ``swappiness``
        parameter is not supported.
    """


_ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslogConfigurationsecretOptionsTypeDef = TypedDict(
    "_ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslogConfigurationsecretOptionsTypeDef",
    {"name": str, "valueFrom": str},
    total=False,
)


class ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslogConfigurationsecretOptionsTypeDef(
    _ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslogConfigurationsecretOptionsTypeDef
):
    """
    Type definition for `ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslogConfiguration` `secretOptions`

    An object representing the secret to expose to your container. Secrets can be
    exposed to a container in the following ways:

    * To inject sensitive data into your containers as environment variables, use the
    ``secrets`` container definition parameter.

    * To reference sensitive information in the log configuration of a container, use
    the ``secretOptions`` container definition parameter.

    For more information, see `Specifying Sensitive Data
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html>`__
    in the *Amazon Elastic Container Service Developer Guide* .

    - **name** *(string) --*

      The name of the secret.

    - **valueFrom** *(string) --*

      The secret to expose to the container. The supported values are either the full
      ARN of the AWS Secrets Manager secret or the full ARN of the parameter in the AWS
      Systems Manager Parameter Store.

      .. note::

        If the AWS Systems Manager Parameter Store parameter exists in the same Region
        as the task you are launching, then you can use either the full ARN or name of
        the parameter. If the parameter exists in a different Region, then the full ARN
        must be specified.
    """


_ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslogConfigurationTypeDef = TypedDict(
    "_ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslogConfigurationTypeDef",
    {
        "logDriver": str,
        "options": Dict[str, str],
        "secretOptions": List[
            ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslogConfigurationsecretOptionsTypeDef
        ],
    },
    total=False,
)


class ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslogConfigurationTypeDef(
    _ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslogConfigurationTypeDef
):
    """
    Type definition for `ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitions` `logConfiguration`

    The log configuration specification for the container.

    This parameter maps to ``LogConfig`` in the `Create a container
    <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
    `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
    ``--log-driver`` option to `docker run
    <https://docs.docker.com/engine/reference/run/>`__ . By default, containers use the
    same logging driver that the Docker daemon uses. However the container may use a
    different logging driver than the Docker daemon by specifying a log driver with this
    parameter in the container definition. To use a different logging driver for a
    container, the log system must be configured properly on the container instance (or on
    a different log server for remote logging options). For more information on the options
    for different supported log drivers, see `Configure logging drivers
    <https://docs.docker.com/engine/admin/logging/overview/>`__ in the Docker documentation.

    .. note::

      Amazon ECS currently supports a subset of the logging drivers available to the Docker
      daemon (shown in the  LogConfiguration data type). Additional log drivers may be
      available in future releases of the Amazon ECS container agent.

    This parameter requires version 1.18 of the Docker Remote API or greater on your
    container instance. To check the Docker Remote API version on your container instance,
    log in to your container instance and run the following command: ``sudo docker version
    --format '{{.Server.APIVersion}}'``

    .. note::

      The Amazon ECS container agent running on a container instance must register the
      logging drivers available on that instance with the ``ECS_AVAILABLE_LOGGING_DRIVERS``
      environment variable before containers placed on that instance can use these log
      configuration options. For more information, see `Amazon ECS Container Agent
      Configuration
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

    - **logDriver** *(string) --*

      The log driver to use for the container. The valid values listed for this parameter
      are log drivers that the Amazon ECS container agent can communicate with by default.

      For tasks using the Fargate launch type, the supported log drivers are ``awslogs``
      and ``splunk`` .

      For tasks using the EC2 launch type, the supported log drivers are ``awslogs`` ,
      ``fluentd`` , ``gelf`` , ``json-file`` , ``journald`` , ``logentries`` , ``syslog`` ,
      and ``splunk`` .

      For more information about using the ``awslogs`` log driver, see `Using the awslogs
      Log Driver
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_awslogs.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

      .. note::

        If you have a custom driver that is not listed above that you would like to work
        with the Amazon ECS container agent, you can fork the Amazon ECS container agent
        project that is `available on GitHub <https://github.com/aws/amazon-ecs-agent>`__
        and customize it to work with that driver. We encourage you to submit pull requests
        for changes that you would like to have included. However, Amazon Web Services does
        not currently support running modified copies of this software.

      This parameter requires version 1.18 of the Docker Remote API or greater on your
      container instance. To check the Docker Remote API version on your container
      instance, log in to your container instance and run the following command: ``sudo
      docker version --format '{{.Server.APIVersion}}'``

    - **options** *(dict) --*

      The configuration options to send to the log driver. This parameter requires version
      1.19 of the Docker Remote API or greater on your container instance. To check the
      Docker Remote API version on your container instance, log in to your container
      instance and run the following command: ``sudo docker version --format
      '{{.Server.APIVersion}}'``

      - *(string) --*

        - *(string) --*

    - **secretOptions** *(list) --*

      The secrets to pass to the log configuration. For more information, see `Specifying
      Sensitive Data
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

      - *(dict) --*

        An object representing the secret to expose to your container. Secrets can be
        exposed to a container in the following ways:

        * To inject sensitive data into your containers as environment variables, use the
        ``secrets`` container definition parameter.

        * To reference sensitive information in the log configuration of a container, use
        the ``secretOptions`` container definition parameter.

        For more information, see `Specifying Sensitive Data
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html>`__
        in the *Amazon Elastic Container Service Developer Guide* .

        - **name** *(string) --*

          The name of the secret.

        - **valueFrom** *(string) --*

          The secret to expose to the container. The supported values are either the full
          ARN of the AWS Secrets Manager secret or the full ARN of the parameter in the AWS
          Systems Manager Parameter Store.

          .. note::

            If the AWS Systems Manager Parameter Store parameter exists in the same Region
            as the task you are launching, then you can use either the full ARN or name of
            the parameter. If the parameter exists in a different Region, then the full ARN
            must be specified.
    """


_ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsmountPointsTypeDef = TypedDict(
    "_ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsmountPointsTypeDef",
    {"sourceVolume": str, "containerPath": str, "readOnly": bool},
    total=False,
)


class ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsmountPointsTypeDef(
    _ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsmountPointsTypeDef
):
    """
    Type definition for `ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitions` `mountPoints`

    Details on a volume mount point that is used in a container definition.

    - **sourceVolume** *(string) --*

      The name of the volume to mount. Must be a volume name referenced in the ``name``
      parameter of task definition ``volume`` .

    - **containerPath** *(string) --*

      The path on the container to mount the host volume at.

    - **readOnly** *(boolean) --*

      If this value is ``true`` , the container has read-only access to the volume. If
      this value is ``false`` , then the container can write to the volume. The default
      value is ``false`` .
    """


_ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsportMappingsTypeDef = TypedDict(
    "_ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsportMappingsTypeDef",
    {"containerPort": int, "hostPort": int, "protocol": str},
    total=False,
)


class ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsportMappingsTypeDef(
    _ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsportMappingsTypeDef
):
    """
    Type definition for `ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitions` `portMappings`

    Port mappings allow containers to access ports on the host container instance to send
    or receive traffic. Port mappings are specified as part of the container definition.

    If you are using containers in a task with the ``awsvpc`` or ``host`` network mode,
    exposed ports should be specified using ``containerPort`` . The ``hostPort`` can be
    left blank or it must be the same value as the ``containerPort`` .

    After a task reaches the ``RUNNING`` status, manual and automatic host and container
    port assignments are visible in the ``networkBindings`` section of  DescribeTasks API
    responses.

    - **containerPort** *(integer) --*

      The port number on the container that is bound to the user-specified or
      automatically assigned host port.

      If you are using containers in a task with the ``awsvpc`` or ``host`` network mode,
      exposed ports should be specified using ``containerPort`` .

      If you are using containers in a task with the ``bridge`` network mode and you
      specify a container port and not a host port, your container automatically receives
      a host port in the ephemeral port range. For more information, see ``hostPort`` .
      Port mappings that are automatically assigned in this way do not count toward the
      100 reserved ports limit of a container instance.

      .. warning::

        You cannot expose the same container port for multiple protocols. An error will
        be returned if this is attempted.

    - **hostPort** *(integer) --*

      The port number on the container instance to reserve for your container.

      If you are using containers in a task with the ``awsvpc`` or ``host`` network mode,
      the ``hostPort`` can either be left blank or set to the same value as the
      ``containerPort`` .

      If you are using containers in a task with the ``bridge`` network mode, you can
      specify a non-reserved host port for your container port mapping, or you can omit
      the ``hostPort`` (or set it to ``0`` ) while specifying a ``containerPort`` and
      your container automatically receives a port in the ephemeral port range for your
      container instance operating system and Docker version.

      The default ephemeral port range for Docker version 1.6.0 and later is listed on
      the instance under ``/proc/sys/net/ipv4/ip_local_port_range`` . If this kernel
      parameter is unavailable, the default ephemeral port range from 49153 through 65535
      is used. Do not attempt to specify a host port in the ephemeral port range as these
      are reserved for automatic assignment. In general, ports below 32768 are outside of
      the ephemeral port range.

      .. note::

        The default ephemeral port range from 49153 through 65535 is always used for
        Docker versions before 1.6.0.

      The default reserved ports are 22 for SSH, the Docker ports 2375 and 2376, and the
      Amazon ECS container agent ports 51678-51680. Any host port that was previously
      specified in a running task is also reserved while the task is running (after a
      task stops, the host port is released). The current reserved ports are displayed in
      the ``remainingResources`` of  DescribeContainerInstances output. A container
      instance can have up to 100 reserved ports at a time, including the default
      reserved ports. Automatically assigned ports don't count toward the 100 reserved
      ports limit.

    - **protocol** *(string) --*

      The protocol used for the port mapping. Valid values are ``tcp`` and ``udp`` . The
      default is ``tcp`` .
    """


_ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsrepositoryCredentialsTypeDef = TypedDict(
    "_ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsrepositoryCredentialsTypeDef",
    {"credentialsParameter": str},
    total=False,
)


class ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsrepositoryCredentialsTypeDef(
    _ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsrepositoryCredentialsTypeDef
):
    """
    Type definition for `ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitions` `repositoryCredentials`

    The private repository authentication credentials to use.

    - **credentialsParameter** *(string) --*

      The Amazon Resource Name (ARN) of the secret containing the private repository
      credentials.

      .. note::

        When you are using the Amazon ECS API, AWS CLI, or AWS SDK, if the secret exists in
        the same Region as the task that you are launching then you can use either the full
        ARN or the name of the secret. When you are using the AWS Management Console, you
        must specify the full ARN of the secret.
    """


_ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsresourceRequirementsTypeDef = TypedDict(
    "_ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsresourceRequirementsTypeDef",
    {"value": str, "type": str},
    total=False,
)


class ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsresourceRequirementsTypeDef(
    _ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsresourceRequirementsTypeDef
):
    """
    Type definition for `ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitions` `resourceRequirements`

    The type and amount of a resource to assign to a container. The supported resource
    types are GPUs and Elastic Inference accelerators. For more information, see `Working
    with GPUs on Amazon ECS
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-gpu.html>`__ or
    `Working with Amazon Elastic Inference on Amazon ECS
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in the
    *Amazon Elastic Container Service Developer Guide*

    - **value** *(string) --*

      The value for the specified resource type.

      If the ``GPU`` type is used, the value is the number of physical ``GPUs`` the
      Amazon ECS container agent will reserve for the container. The number of GPUs
      reserved for all containers in a task should not exceed the number of available
      GPUs on the container instance the task is launched on.

      If the ``InferenceAccelerator`` type is used, the ``value`` should match the
      ``deviceName`` for an  InferenceAccelerator specified in a task definition.

    - **type** *(string) --*

      The type of resource to assign to a container. The supported values are ``GPU`` or
      ``InferenceAccelerator`` .
    """


_ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionssecretsTypeDef = TypedDict(
    "_ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionssecretsTypeDef",
    {"name": str, "valueFrom": str},
    total=False,
)


class ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionssecretsTypeDef(
    _ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionssecretsTypeDef
):
    """
    Type definition for `ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitions` `secrets`

    An object representing the secret to expose to your container. Secrets can be exposed
    to a container in the following ways:

    * To inject sensitive data into your containers as environment variables, use the
    ``secrets`` container definition parameter.

    * To reference sensitive information in the log configuration of a container, use the
    ``secretOptions`` container definition parameter.

    For more information, see `Specifying Sensitive Data
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html>`__
    in the *Amazon Elastic Container Service Developer Guide* .

    - **name** *(string) --*

      The name of the secret.

    - **valueFrom** *(string) --*

      The secret to expose to the container. The supported values are either the full ARN
      of the AWS Secrets Manager secret or the full ARN of the parameter in the AWS
      Systems Manager Parameter Store.

      .. note::

        If the AWS Systems Manager Parameter Store parameter exists in the same Region as
        the task you are launching, then you can use either the full ARN or name of the
        parameter. If the parameter exists in a different Region, then the full ARN must
        be specified.
    """


_ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionssystemControlsTypeDef = TypedDict(
    "_ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionssystemControlsTypeDef",
    {"namespace": str, "value": str},
    total=False,
)


class ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionssystemControlsTypeDef(
    _ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionssystemControlsTypeDef
):
    """
    Type definition for `ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitions` `systemControls`

    A list of namespaced kernel parameters to set in the container. This parameter maps
    to ``Sysctls`` in the `Create a container
    <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of
    the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
    ``--sysctl`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__
    .

    It is not recommended that you specify network-related ``systemControls`` parameters
    for multiple containers in a single task that also uses either the ``awsvpc`` or
    ``host`` network mode for the following reasons:

    * For tasks that use the ``awsvpc`` network mode, if you set ``systemControls`` for
    any container, it applies to all containers in the task. If you set different
    ``systemControls`` for multiple containers in a single task, the container that is
    started last determines which ``systemControls`` take effect.

    * For tasks that use the ``host`` network mode, the ``systemControls`` parameter
    applies to the container instance's kernel parameter as well as that of all
    containers of any tasks running on that container instance.

    - **namespace** *(string) --*

      The namespaced kernel parameter for which to set a ``value`` .

    - **value** *(string) --*

      The value for the namespaced kernel parameter specified in ``namespace`` .
    """


_ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsulimitsTypeDef = TypedDict(
    "_ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsulimitsTypeDef",
    {"name": str, "softLimit": int, "hardLimit": int},
    total=False,
)


class ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsulimitsTypeDef(
    _ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsulimitsTypeDef
):
    """
    Type definition for `ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitions` `ulimits`

    The ``ulimit`` settings to pass to the container.

    - **name** *(string) --*

      The ``type`` of the ``ulimit`` .

    - **softLimit** *(integer) --*

      The soft limit for the ulimit type.

    - **hardLimit** *(integer) --*

      The hard limit for the ulimit type.
    """


_ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsvolumesFromTypeDef = TypedDict(
    "_ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsvolumesFromTypeDef",
    {"sourceContainer": str, "readOnly": bool},
    total=False,
)


class ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsvolumesFromTypeDef(
    _ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsvolumesFromTypeDef
):
    """
    Type definition for `ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitions` `volumesFrom`

    Details on a data volume from another container in the same task definition.

    - **sourceContainer** *(string) --*

      The name of another container within the same task definition from which to mount
      volumes.

    - **readOnly** *(boolean) --*

      If this value is ``true`` , the container has read-only access to the volume. If
      this value is ``false`` , then the container can write to the volume. The default
      value is ``false`` .
    """


_ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsTypeDef = TypedDict(
    "_ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsTypeDef",
    {
        "name": str,
        "image": str,
        "repositoryCredentials": ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsrepositoryCredentialsTypeDef,
        "cpu": int,
        "memory": int,
        "memoryReservation": int,
        "links": List[str],
        "portMappings": List[
            ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsportMappingsTypeDef
        ],
        "essential": bool,
        "entryPoint": List[str],
        "command": List[str],
        "environment": List[
            ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsenvironmentTypeDef
        ],
        "mountPoints": List[
            ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsmountPointsTypeDef
        ],
        "volumesFrom": List[
            ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsvolumesFromTypeDef
        ],
        "linuxParameters": ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParametersTypeDef,
        "secrets": List[
            ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionssecretsTypeDef
        ],
        "dependsOn": List[
            ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsdependsOnTypeDef
        ],
        "startTimeout": int,
        "stopTimeout": int,
        "hostname": str,
        "user": str,
        "workingDirectory": str,
        "disableNetworking": bool,
        "privileged": bool,
        "readonlyRootFilesystem": bool,
        "dnsServers": List[str],
        "dnsSearchDomains": List[str],
        "extraHosts": List[
            ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsextraHostsTypeDef
        ],
        "dockerSecurityOptions": List[str],
        "interactive": bool,
        "pseudoTerminal": bool,
        "dockerLabels": Dict[str, str],
        "ulimits": List[
            ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsulimitsTypeDef
        ],
        "logConfiguration": ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslogConfigurationTypeDef,
        "healthCheck": ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionshealthCheckTypeDef,
        "systemControls": List[
            ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionssystemControlsTypeDef
        ],
        "resourceRequirements": List[
            ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsresourceRequirementsTypeDef
        ],
        "firelensConfiguration": ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsfirelensConfigurationTypeDef,
    },
    total=False,
)


class ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsTypeDef(
    _ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsTypeDef
):
    """
    Type definition for `ClientDeregisterTaskDefinitionResponsetaskDefinition` `containerDefinitions`

    Container definitions are used in task definitions to describe the different containers
    that are launched as part of a task.

    - **name** *(string) --*

      The name of a container. If you are linking multiple containers together in a task
      definition, the ``name`` of one container can be entered in the ``links`` of another
      container to connect the containers. Up to 255 letters (uppercase and lowercase),
      numbers, and hyphens are allowed. This parameter maps to ``name`` in the `Create a
      container <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__
      section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and
      the ``--name`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__
      .

    - **image** *(string) --*

      The image used to start a container. This string is passed directly to the Docker
      daemon. Images in the Docker Hub registry are available by default. Other repositories
      are specified with either `` *repository-url* /*image* :*tag* `` or `` *repository-url*
      /*image* @*digest* `` . Up to 255 letters (uppercase and lowercase), numbers, hyphens,
      underscores, colons, periods, forward slashes, and number signs are allowed. This
      parameter maps to ``Image`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``IMAGE``
      parameter of `docker run <https://docs.docker.com/engine/reference/run/>`__ .

      * When a new task starts, the Amazon ECS container agent pulls the latest version of
      the specified image and tag for the container to use. However, subsequent updates to a
      repository image are not propagated to already running tasks.

      * Images in Amazon ECR repositories can be specified by either using the full
      ``registry/repository:tag`` or ``registry/repository@digest`` . For example,
      ``012345678910.dkr.ecr.<region-name>.amazonaws.com/<repository-name>:latest`` or
      ``012345678910.dkr.ecr.<region-name>.amazonaws.com/<repository-name>@sha256:94afd1f2e64d908bc90dbca0035a5b567EXAMPLE``
      .

      * Images in official repositories on Docker Hub use a single name (for example,
      ``ubuntu`` or ``mongo`` ).

      * Images in other repositories on Docker Hub are qualified with an organization name
      (for example, ``amazon/amazon-ecs-agent`` ).

      * Images in other online repositories are qualified further by a domain name (for
      example, ``quay.io/assemblyline/ubuntu`` ).

    - **repositoryCredentials** *(dict) --*

      The private repository authentication credentials to use.

      - **credentialsParameter** *(string) --*

        The Amazon Resource Name (ARN) of the secret containing the private repository
        credentials.

        .. note::

          When you are using the Amazon ECS API, AWS CLI, or AWS SDK, if the secret exists in
          the same Region as the task that you are launching then you can use either the full
          ARN or the name of the secret. When you are using the AWS Management Console, you
          must specify the full ARN of the secret.

    - **cpu** *(integer) --*

      The number of ``cpu`` units reserved for the container. This parameter maps to
      ``CpuShares`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
      ``--cpu-shares`` option to `docker run
      <https://docs.docker.com/engine/reference/run/>`__ .

      This field is optional for tasks using the Fargate launch type, and the only
      requirement is that the total amount of CPU reserved for all containers within a task
      be lower than the task-level ``cpu`` value.

      .. note::

        You can determine the number of CPU units that are available per EC2 instance type by
        multiplying the vCPUs listed for that instance type on the `Amazon EC2 Instances
        <http://aws.amazon.com/ec2/instance-types/>`__ detail page by 1,024.

      For example, if you run a single-container task on a single-core instance type with 512
      CPU units specified for that container, and that is the only task running on the
      container instance, that container could use the full 1,024 CPU unit share at any given
      time. However, if you launched another copy of the same task on that container
      instance, each task would be guaranteed a minimum of 512 CPU units when needed, and
      each container could float to higher CPU usage if the other container was not using it,
      but if both tasks were 100% active all of the time, they would be limited to 512 CPU
      units.

      Linux containers share unallocated CPU units with other containers on the container
      instance with the same ratio as their allocated amount. For example, if you run a
      single-container task on a single-core instance type with 512 CPU units specified for
      that container, and that is the only task running on the container instance, that
      container could use the full 1,024 CPU unit share at any given time. However, if you
      launched another copy of the same task on that container instance, each task would be
      guaranteed a minimum of 512 CPU units when needed, and each container could float to
      higher CPU usage if the other container was not using it, but if both tasks were 100%
      active all of the time, they would be limited to 512 CPU units.

      On Linux container instances, the Docker daemon on the container instance uses the CPU
      value to calculate the relative CPU share ratios for running containers. For more
      information, see `CPU share constraint
      <https://docs.docker.com/engine/reference/run/#cpu-share-constraint>`__ in the Docker
      documentation. The minimum valid CPU share value that the Linux kernel allows is 2.
      However, the CPU parameter is not required, and you can use CPU values below 2 in your
      container definitions. For CPU values below 2 (including null), the behavior varies
      based on your Amazon ECS container agent version:

      * **Agent versions less than or equal to 1.1.0:** Null and zero CPU values are passed
      to Docker as 0, which Docker then converts to 1,024 CPU shares. CPU values of 1 are
      passed to Docker as 1, which the Linux kernel converts to two CPU shares.

      * **Agent versions greater than or equal to 1.2.0:** Null, zero, and CPU values of 1
      are passed to Docker as 2.

      On Windows container instances, the CPU limit is enforced as an absolute limit, or a
      quota. Windows containers only have access to the specified amount of CPU that is
      described in the task definition.

    - **memory** *(integer) --*

      The amount (in MiB) of memory to present to the container. If your container attempts
      to exceed the memory specified here, the container is killed. The total amount of
      memory reserved for all containers within a task must be lower than the task ``memory``
      value, if one is specified. This parameter maps to ``Memory`` in the `Create a
      container <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__
      section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and
      the ``--memory`` option to `docker run
      <https://docs.docker.com/engine/reference/run/>`__ .

      If using the Fargate launch type, this parameter is optional.

      If using the EC2 launch type, you must specify either a task-level memory value or a
      container-level memory value. If you specify both a container-level ``memory`` and
      ``memoryReservation`` value, ``memory`` must be greater than ``memoryReservation`` . If
      you specify ``memoryReservation`` , then that value is subtracted from the available
      memory resources for the container instance on which the container is placed.
      Otherwise, the value of ``memory`` is used.

      The Docker daemon reserves a minimum of 4 MiB of memory for a container, so you should
      not specify fewer than 4 MiB of memory for your containers.

    - **memoryReservation** *(integer) --*

      The soft limit (in MiB) of memory to reserve for the container. When system memory is
      under heavy contention, Docker attempts to keep the container memory to this soft
      limit. However, your container can consume more memory when it needs to, up to either
      the hard limit specified with the ``memory`` parameter (if applicable), or all of the
      available memory on the container instance, whichever comes first. This parameter maps
      to ``MemoryReservation`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
      ``--memory-reservation`` option to `docker run
      <https://docs.docker.com/engine/reference/run/>`__ .

      If a task-level memory value is not specified, you must specify a non-zero integer for
      one or both of ``memory`` or ``memoryReservation`` in a container definition. If you
      specify both, ``memory`` must be greater than ``memoryReservation`` . If you specify
      ``memoryReservation`` , then that value is subtracted from the available memory
      resources for the container instance on which the container is placed. Otherwise, the
      value of ``memory`` is used.

      For example, if your container normally uses 128 MiB of memory, but occasionally bursts
      to 256 MiB of memory for short periods of time, you can set a ``memoryReservation`` of
      128 MiB, and a ``memory`` hard limit of 300 MiB. This configuration would allow the
      container to only reserve 128 MiB of memory from the remaining resources on the
      container instance, but also allow the container to consume more memory resources when
      needed.

      The Docker daemon reserves a minimum of 4 MiB of memory for a container, so you should
      not specify fewer than 4 MiB of memory for your containers.

    - **links** *(list) --*

      The ``links`` parameter allows containers to communicate with each other without the
      need for port mappings. This parameter is only supported if the network mode of a task
      definition is ``bridge`` . The ``name:internalName`` construct is analogous to
      ``name:alias`` in Docker links. Up to 255 letters (uppercase and lowercase), numbers,
      and hyphens are allowed. For more information about linking Docker containers, go to
      `Legacy container links <https://docs.docker.com/network/links/>`__ in the Docker
      documentation. This parameter maps to ``Links`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--link``
      option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

      .. note::

        This parameter is not supported for Windows containers.

      .. warning::

        Containers that are collocated on a single container instance may be able to
        communicate with each other without requiring links or host port mappings. Network
        isolation is achieved on the container instance using security groups and VPC
        settings.

      - *(string) --*

    - **portMappings** *(list) --*

      The list of port mappings for the container. Port mappings allow containers to access
      ports on the host container instance to send or receive traffic.

      For task definitions that use the ``awsvpc`` network mode, you should only specify the
      ``containerPort`` . The ``hostPort`` can be left blank or it must be the same value as
      the ``containerPort`` .

      Port mappings on Windows use the ``NetNAT`` gateway address rather than ``localhost`` .
      There is no loopback for port mappings on Windows, so you cannot access a container's
      mapped port from the host itself.

      This parameter maps to ``PortBindings`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--publish``
      option to `docker run <https://docs.docker.com/engine/reference/run/>`__ . If the
      network mode of a task definition is set to ``none`` , then you can't specify port
      mappings. If the network mode of a task definition is set to ``host`` , then host ports
      must either be undefined or they must match the container port in the port mapping.

      .. note::

        After a task reaches the ``RUNNING`` status, manual and automatic host and container
        port assignments are visible in the **Network Bindings** section of a container
        description for a selected task in the Amazon ECS console. The assignments are also
        visible in the ``networkBindings`` section  DescribeTasks responses.

      - *(dict) --*

        Port mappings allow containers to access ports on the host container instance to send
        or receive traffic. Port mappings are specified as part of the container definition.

        If you are using containers in a task with the ``awsvpc`` or ``host`` network mode,
        exposed ports should be specified using ``containerPort`` . The ``hostPort`` can be
        left blank or it must be the same value as the ``containerPort`` .

        After a task reaches the ``RUNNING`` status, manual and automatic host and container
        port assignments are visible in the ``networkBindings`` section of  DescribeTasks API
        responses.

        - **containerPort** *(integer) --*

          The port number on the container that is bound to the user-specified or
          automatically assigned host port.

          If you are using containers in a task with the ``awsvpc`` or ``host`` network mode,
          exposed ports should be specified using ``containerPort`` .

          If you are using containers in a task with the ``bridge`` network mode and you
          specify a container port and not a host port, your container automatically receives
          a host port in the ephemeral port range. For more information, see ``hostPort`` .
          Port mappings that are automatically assigned in this way do not count toward the
          100 reserved ports limit of a container instance.

          .. warning::

            You cannot expose the same container port for multiple protocols. An error will
            be returned if this is attempted.

        - **hostPort** *(integer) --*

          The port number on the container instance to reserve for your container.

          If you are using containers in a task with the ``awsvpc`` or ``host`` network mode,
          the ``hostPort`` can either be left blank or set to the same value as the
          ``containerPort`` .

          If you are using containers in a task with the ``bridge`` network mode, you can
          specify a non-reserved host port for your container port mapping, or you can omit
          the ``hostPort`` (or set it to ``0`` ) while specifying a ``containerPort`` and
          your container automatically receives a port in the ephemeral port range for your
          container instance operating system and Docker version.

          The default ephemeral port range for Docker version 1.6.0 and later is listed on
          the instance under ``/proc/sys/net/ipv4/ip_local_port_range`` . If this kernel
          parameter is unavailable, the default ephemeral port range from 49153 through 65535
          is used. Do not attempt to specify a host port in the ephemeral port range as these
          are reserved for automatic assignment. In general, ports below 32768 are outside of
          the ephemeral port range.

          .. note::

            The default ephemeral port range from 49153 through 65535 is always used for
            Docker versions before 1.6.0.

          The default reserved ports are 22 for SSH, the Docker ports 2375 and 2376, and the
          Amazon ECS container agent ports 51678-51680. Any host port that was previously
          specified in a running task is also reserved while the task is running (after a
          task stops, the host port is released). The current reserved ports are displayed in
          the ``remainingResources`` of  DescribeContainerInstances output. A container
          instance can have up to 100 reserved ports at a time, including the default
          reserved ports. Automatically assigned ports don't count toward the 100 reserved
          ports limit.

        - **protocol** *(string) --*

          The protocol used for the port mapping. Valid values are ``tcp`` and ``udp`` . The
          default is ``tcp`` .

    - **essential** *(boolean) --*

      If the ``essential`` parameter of a container is marked as ``true`` , and that
      container fails or stops for any reason, all other containers that are part of the task
      are stopped. If the ``essential`` parameter of a container is marked as ``false`` ,
      then its failure does not affect the rest of the containers in a task. If this
      parameter is omitted, a container is assumed to be essential.

      All tasks must have at least one essential container. If you have an application that
      is composed of multiple containers, you should group containers that are used for a
      common purpose into components, and separate the different components into multiple
      task definitions. For more information, see `Application Architecture
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/application_architecture.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

    - **entryPoint** *(list) --*

      .. warning::

        Early versions of the Amazon ECS container agent do not properly handle
        ``entryPoint`` parameters. If you have problems using ``entryPoint`` , update your
        container agent or enter your commands and arguments as ``command`` array items
        instead.

      The entry point that is passed to the container. This parameter maps to ``Entrypoint``
      in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
      ``--entrypoint`` option to `docker run
      <https://docs.docker.com/engine/reference/run/>`__ . For more information, see
      `https\\://docs.docker.com/engine/reference/builder/#entrypoint
      <https://docs.docker.com/engine/reference/builder/#entrypoint>`__ .

      - *(string) --*

    - **command** *(list) --*

      The command that is passed to the container. This parameter maps to ``Cmd`` in the
      `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``COMMAND``
      parameter to `docker run <https://docs.docker.com/engine/reference/run/>`__ . For more
      information, see `https\\://docs.docker.com/engine/reference/builder/#cmd
      <https://docs.docker.com/engine/reference/builder/#cmd>`__ . If there are multiple
      arguments, each argument should be a separated string in the array.

      - *(string) --*

    - **environment** *(list) --*

      The environment variables to pass to a container. This parameter maps to ``Env`` in the
      `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--env``
      option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

      .. warning::

        We do not recommend using plaintext environment variables for sensitive information,
        such as credential data.

      - *(dict) --*

        A key-value pair object.

        - **name** *(string) --*

          The name of the key-value pair. For environment variables, this is the name of the
          environment variable.

        - **value** *(string) --*

          The value of the key-value pair. For environment variables, this is the value of
          the environment variable.

    - **mountPoints** *(list) --*

      The mount points for data volumes in your container.

      This parameter maps to ``Volumes`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--volume``
      option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

      Windows containers can mount whole directories on the same drive as
      ``$env:ProgramData`` . Windows containers cannot mount directories on a different
      drive, and mount point cannot be across drives.

      - *(dict) --*

        Details on a volume mount point that is used in a container definition.

        - **sourceVolume** *(string) --*

          The name of the volume to mount. Must be a volume name referenced in the ``name``
          parameter of task definition ``volume`` .

        - **containerPath** *(string) --*

          The path on the container to mount the host volume at.

        - **readOnly** *(boolean) --*

          If this value is ``true`` , the container has read-only access to the volume. If
          this value is ``false`` , then the container can write to the volume. The default
          value is ``false`` .

    - **volumesFrom** *(list) --*

      Data volumes to mount from another container. This parameter maps to ``VolumesFrom`` in
      the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
      ``--volumes-from`` option to `docker run
      <https://docs.docker.com/engine/reference/run/>`__ .

      - *(dict) --*

        Details on a data volume from another container in the same task definition.

        - **sourceContainer** *(string) --*

          The name of another container within the same task definition from which to mount
          volumes.

        - **readOnly** *(boolean) --*

          If this value is ``true`` , the container has read-only access to the volume. If
          this value is ``false`` , then the container can write to the volume. The default
          value is ``false`` .

    - **linuxParameters** *(dict) --*

      Linux-specific modifications that are applied to the container, such as Linux kernel
      capabilities. For more information see  KernelCapabilities .

      .. note::

        This parameter is not supported for Windows containers.

      - **capabilities** *(dict) --*

        The Linux capabilities for the container that are added to or dropped from the
        default configuration provided by Docker.

        .. note::

          If you are using tasks that use the Fargate launch type, ``capabilities`` is
          supported but the ``add`` parameter is not supported.

        - **add** *(list) --*

          The Linux capabilities for the container that have been added to the default
          configuration provided by Docker. This parameter maps to ``CapAdd`` in the `Create
          a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of
          the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
          ``--cap-add`` option to `docker run
          <https://docs.docker.com/engine/reference/run/>`__ .

          .. note::

            If you are using tasks that use the Fargate launch type, the ``add`` parameter is
            not supported.

          Valid values: ``"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" | "BLOCK_SUSPEND" | "CHOWN"
          | "DAC_OVERRIDE" | "DAC_READ_SEARCH" | "FOWNER" | "FSETID" | "IPC_LOCK" |
          "IPC_OWNER" | "KILL" | "LEASE" | "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" |
          "MKNOD" | "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" |
          "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT" |
          "SYS_CHROOT" | "SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" | "SYS_PTRACE" | "SYS_RAWIO"
          | "SYS_RESOURCE" | "SYS_TIME" | "SYS_TTY_CONFIG" | "SYSLOG" | "WAKE_ALARM"``

          - *(string) --*

        - **drop** *(list) --*

          The Linux capabilities for the container that have been removed from the default
          configuration provided by Docker. This parameter maps to ``CapDrop`` in the `Create
          a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of
          the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
          ``--cap-drop`` option to `docker run
          <https://docs.docker.com/engine/reference/run/>`__ .

          Valid values: ``"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" | "BLOCK_SUSPEND" | "CHOWN"
          | "DAC_OVERRIDE" | "DAC_READ_SEARCH" | "FOWNER" | "FSETID" | "IPC_LOCK" |
          "IPC_OWNER" | "KILL" | "LEASE" | "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" |
          "MKNOD" | "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" |
          "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT" |
          "SYS_CHROOT" | "SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" | "SYS_PTRACE" | "SYS_RAWIO"
          | "SYS_RESOURCE" | "SYS_TIME" | "SYS_TTY_CONFIG" | "SYSLOG" | "WAKE_ALARM"``

          - *(string) --*

      - **devices** *(list) --*

        Any host devices to expose to the container. This parameter maps to ``Devices`` in
        the `Create a container
        <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of
        the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
        ``--device`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__
        .

        .. note::

          If you are using tasks that use the Fargate launch type, the ``devices`` parameter
          is not supported.

        - *(dict) --*

          An object representing a container instance host device.

          - **hostPath** *(string) --*

            The path for the device on the host container instance.

          - **containerPath** *(string) --*

            The path inside the container at which to expose the host device.

          - **permissions** *(list) --*

            The explicit permissions to provide to the container for the device. By default,
            the container has permissions for ``read`` , ``write`` , and ``mknod`` for the
            device.

            - *(string) --*

      - **initProcessEnabled** *(boolean) --*

        Run an ``init`` process inside the container that forwards signals and reaps
        processes. This parameter maps to the ``--init`` option to `docker run
        <https://docs.docker.com/engine/reference/run/>`__ . This parameter requires version
        1.25 of the Docker Remote API or greater on your container instance. To check the
        Docker Remote API version on your container instance, log in to your container
        instance and run the following command: ``sudo docker version --format
        '{{.Server.APIVersion}}'``

      - **sharedMemorySize** *(integer) --*

        The value for the size (in MiB) of the ``/dev/shm`` volume. This parameter maps to
        the ``--shm-size`` option to `docker run
        <https://docs.docker.com/engine/reference/run/>`__ .

        .. note::

          If you are using tasks that use the Fargate launch type, the ``sharedMemorySize``
          parameter is not supported.

      - **tmpfs** *(list) --*

        The container path, mount options, and size (in MiB) of the tmpfs mount. This
        parameter maps to the ``--tmpfs`` option to `docker run
        <https://docs.docker.com/engine/reference/run/>`__ .

        .. note::

          If you are using tasks that use the Fargate launch type, the ``tmpfs`` parameter is
          not supported.

        - *(dict) --*

          The container path, mount options, and size of the tmpfs mount.

          - **containerPath** *(string) --*

            The absolute file path where the tmpfs volume is to be mounted.

          - **size** *(integer) --*

            The size (in MiB) of the tmpfs volume.

          - **mountOptions** *(list) --*

            The list of tmpfs volume mount options.

            Valid values: ``"defaults" | "ro" | "rw" | "suid" | "nosuid" | "dev" | "nodev" |
            "exec" | "noexec" | "sync" | "async" | "dirsync" | "remount" | "mand" | "nomand"
            | "atime" | "noatime" | "diratime" | "nodiratime" | "bind" | "rbind" |
            "unbindable" | "runbindable" | "private" | "rprivate" | "shared" | "rshared" |
            "slave" | "rslave" | "relatime" | "norelatime" | "strictatime" | "nostrictatime"
            | "mode" | "uid" | "gid" | "nr_inodes" | "nr_blocks" | "mpol"``

            - *(string) --*

      - **maxSwap** *(integer) --*

        The total amount of swap memory (in MiB) a container can use. This parameter will be
        translated to the ``--memory-swap`` option to `docker run
        <https://docs.docker.com/engine/reference/run/>`__ where the value would be the sum
        of the container memory plus the ``maxSwap`` value.

        If a ``maxSwap`` value of ``0`` is specified, the container will not use swap.
        Accepted values are ``0`` or any positive integer. If the ``maxSwap`` parameter is
        omitted, the container will use the swap configuration for the container instance it
        is running on. A ``maxSwap`` value must be set for the ``swappiness`` parameter to be
        used.

        .. note::

          If you are using tasks that use the Fargate launch type, the ``maxSwap`` parameter
          is not supported.

      - **swappiness** *(integer) --*

        This allows you to tune a container's memory swappiness behavior. A ``swappiness``
        value of ``0`` will cause swapping to not happen unless absolutely necessary. A
        ``swappiness`` value of ``100`` will cause pages to be swapped very aggressively.
        Accepted values are whole numbers between ``0`` and ``100`` . If the ``swappiness``
        parameter is not specified, a default value of ``60`` is used. If a value is not
        specified for ``maxSwap`` then this parameter is ignored. This parameter maps to the
        ``--memory-swappiness`` option to `docker run
        <https://docs.docker.com/engine/reference/run/>`__ .

        .. note::

          If you are using tasks that use the Fargate launch type, the ``swappiness``
          parameter is not supported.

    - **secrets** *(list) --*

      The secrets to pass to the container. For more information, see `Specifying Sensitive
      Data
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

      - *(dict) --*

        An object representing the secret to expose to your container. Secrets can be exposed
        to a container in the following ways:

        * To inject sensitive data into your containers as environment variables, use the
        ``secrets`` container definition parameter.

        * To reference sensitive information in the log configuration of a container, use the
        ``secretOptions`` container definition parameter.

        For more information, see `Specifying Sensitive Data
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html>`__
        in the *Amazon Elastic Container Service Developer Guide* .

        - **name** *(string) --*

          The name of the secret.

        - **valueFrom** *(string) --*

          The secret to expose to the container. The supported values are either the full ARN
          of the AWS Secrets Manager secret or the full ARN of the parameter in the AWS
          Systems Manager Parameter Store.

          .. note::

            If the AWS Systems Manager Parameter Store parameter exists in the same Region as
            the task you are launching, then you can use either the full ARN or name of the
            parameter. If the parameter exists in a different Region, then the full ARN must
            be specified.

    - **dependsOn** *(list) --*

      The dependencies defined for container startup and shutdown. A container can contain
      multiple dependencies. When a dependency is defined for container startup, for
      container shutdown it is reversed.

      For tasks using the EC2 launch type, the container instances require at least version
      1.26.0 of the container agent to enable container dependencies. However, we recommend
      using the latest container agent version. For information about checking your agent
      version and updating to the latest version, see `Updating the Amazon ECS Container
      Agent
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html>`__
      in the *Amazon Elastic Container Service Developer Guide* . If you are using an Amazon
      ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the
      ``ecs-init`` package. If your container instances are launched from version
      ``20190301`` or later, then they contain the required versions of the container agent
      and ``ecs-init`` . For more information, see `Amazon ECS-optimized Linux AMI
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

      For tasks using the Fargate launch type, the task or service requires platform version
      ``1.3.0`` or later.

      - *(dict) --*

        The dependencies defined for container startup and shutdown. A container can contain
        multiple dependencies. When a dependency is defined for container startup, for
        container shutdown it is reversed.

        Your Amazon ECS container instances require at least version 1.26.0 of the container
        agent to enable container dependencies. However, we recommend using the latest
        container agent version. For information about checking your agent version and
        updating to the latest version, see `Updating the Amazon ECS Container Agent
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html>`__
        in the *Amazon Elastic Container Service Developer Guide* . If you are using an
        Amazon ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the
        ``ecs-init`` package. If your container instances are launched from version
        ``20190301`` or later, then they contain the required versions of the container agent
        and ``ecs-init`` . For more information, see `Amazon ECS-optimized Linux AMI
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html>`__
        in the *Amazon Elastic Container Service Developer Guide* .

        .. note::

          If you are using tasks that use the Fargate launch type, container dependency
          parameters are not supported.

        - **containerName** *(string) --*

          The name of a container.

        - **condition** *(string) --*

          The dependency condition of the container. The following are the available
          conditions and their behavior:

          * ``START`` - This condition emulates the behavior of links and volumes today. It
          validates that a dependent container is started before permitting other containers
          to start.

          * ``COMPLETE`` - This condition validates that a dependent container runs to
          completion (exits) before permitting other containers to start. This can be useful
          for nonessential containers that run a script and then exit.

          * ``SUCCESS`` - This condition is the same as ``COMPLETE`` , but it also requires
          that the container exits with a ``zero`` status.

          * ``HEALTHY`` - This condition validates that the dependent container passes its
          Docker health check before permitting other containers to start. This requires that
          the dependent container has health checks configured. This condition is confirmed
          only at task startup.

    - **startTimeout** *(integer) --*

      Time duration (in seconds) to wait before giving up on resolving dependencies for a
      container. For example, you specify two containers in a task definition with containerA
      having a dependency on containerB reaching a ``COMPLETE`` , ``SUCCESS`` , or
      ``HEALTHY`` status. If a ``startTimeout`` value is specified for containerB and it does
      not reach the desired status within that time then containerA will give up and not
      start. This results in the task transitioning to a ``STOPPED`` state.

      For tasks using the EC2 launch type, the container instances require at least version
      1.26.0 of the container agent to enable a container start timeout value. However, we
      recommend using the latest container agent version. For information about checking your
      agent version and updating to the latest version, see `Updating the Amazon ECS
      Container Agent
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html>`__
      in the *Amazon Elastic Container Service Developer Guide* . If you are using an Amazon
      ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the
      ``ecs-init`` package. If your container instances are launched from version
      ``20190301`` or later, then they contain the required versions of the container agent
      and ``ecs-init`` . For more information, see `Amazon ECS-optimized Linux AMI
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

      For tasks using the Fargate launch type, the task or service requires platform version
      ``1.3.0`` or later.

    - **stopTimeout** *(integer) --*

      Time duration (in seconds) to wait before the container is forcefully killed if it
      doesn't exit normally on its own.

      For tasks using the Fargate launch type, the max ``stopTimeout`` value is 2 minutes and
      the task or service requires platform version ``1.3.0`` or later.

      For tasks using the EC2 launch type, the stop timeout value for the container takes
      precedence over the ``ECS_CONTAINER_STOP_TIMEOUT`` container agent configuration
      parameter, if used. Container instances require at least version 1.26.0 of the
      container agent to enable a container stop timeout value. However, we recommend using
      the latest container agent version. For information about checking your agent version
      and updating to the latest version, see `Updating the Amazon ECS Container Agent
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html>`__
      in the *Amazon Elastic Container Service Developer Guide* . If you are using an Amazon
      ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the
      ``ecs-init`` package. If your container instances are launched from version
      ``20190301`` or later, then they contain the required versions of the container agent
      and ``ecs-init`` . For more information, see `Amazon ECS-optimized Linux AMI
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

    - **hostname** *(string) --*

      The hostname to use for your container. This parameter maps to ``Hostname`` in the
      `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
      ``--hostname`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__
      .

      .. note::

        The ``hostname`` parameter is not supported if you are using the ``awsvpc`` network
        mode.

    - **user** *(string) --*

      The user name to use inside the container. This parameter maps to ``User`` in the
      `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--user``
      option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

      You can use the following formats. If specifying a UID or GID, you must specify it as a
      positive integer.

      * ``user``

      * ``user:group``

      * ``uid``

      * ``uid:gid``

      * ``user:gid``

      * ``uid:group``

      .. note::

        This parameter is not supported for Windows containers.

    - **workingDirectory** *(string) --*

      The working directory in which to run commands inside the container. This parameter
      maps to ``WorkingDir`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--workdir``
      option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

    - **disableNetworking** *(boolean) --*

      When this parameter is true, networking is disabled within the container. This
      parameter maps to ``NetworkDisabled`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ .

      .. note::

        This parameter is not supported for Windows containers.

    - **privileged** *(boolean) --*

      When this parameter is true, the container is given elevated privileges on the host
      container instance (similar to the ``root`` user). This parameter maps to
      ``Privileged`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
      ``--privileged`` option to `docker run
      <https://docs.docker.com/engine/reference/run/>`__ .

      .. note::

        This parameter is not supported for Windows containers or tasks using the Fargate
        launch type.

    - **readonlyRootFilesystem** *(boolean) --*

      When this parameter is true, the container is given read-only access to its root file
      system. This parameter maps to ``ReadonlyRootfs`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
      ``--read-only`` option to `docker run
      <https://docs.docker.com/engine/reference/run/>`__ .

      .. note::

        This parameter is not supported for Windows containers.

    - **dnsServers** *(list) --*

      A list of DNS servers that are presented to the container. This parameter maps to
      ``Dns`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--dns``
      option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

      .. note::

        This parameter is not supported for Windows containers.

      - *(string) --*

    - **dnsSearchDomains** *(list) --*

      A list of DNS search domains that are presented to the container. This parameter maps
      to ``DnsSearch`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
      ``--dns-search`` option to `docker run
      <https://docs.docker.com/engine/reference/run/>`__ .

      .. note::

        This parameter is not supported for Windows containers.

      - *(string) --*

    - **extraHosts** *(list) --*

      A list of hostnames and IP address mappings to append to the ``/etc/hosts`` file on the
      container. This parameter maps to ``ExtraHosts`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
      ``--add-host`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__
      .

      .. note::

        This parameter is not supported for Windows containers or tasks that use the
        ``awsvpc`` network mode.

      - *(dict) --*

        Hostnames and IP address entries that are added to the ``/etc/hosts`` file of a
        container via the ``extraHosts`` parameter of its  ContainerDefinition .

        - **hostname** *(string) --*

          The hostname to use in the ``/etc/hosts`` entry.

        - **ipAddress** *(string) --*

          The IP address to use in the ``/etc/hosts`` entry.

    - **dockerSecurityOptions** *(list) --*

      A list of strings to provide custom labels for SELinux and AppArmor multi-level
      security systems. This field is not valid for containers in tasks using the Fargate
      launch type.

      This parameter maps to ``SecurityOpt`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
      ``--security-opt`` option to `docker run
      <https://docs.docker.com/engine/reference/run/>`__ .

      .. note::

        The Amazon ECS container agent running on a container instance must register with the
        ``ECS_SELINUX_CAPABLE=true`` or ``ECS_APPARMOR_CAPABLE=true`` environment variables
        before containers placed on that instance can use these security options. For more
        information, see `Amazon ECS Container Agent Configuration
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html>`__
        in the *Amazon Elastic Container Service Developer Guide* .

      .. note::

        This parameter is not supported for Windows containers.

      - *(string) --*

    - **interactive** *(boolean) --*

      When this parameter is ``true`` , this allows you to deploy containerized applications
      that require ``stdin`` or a ``tty`` to be allocated. This parameter maps to
      ``OpenStdin`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
      ``--interactive`` option to `docker run
      <https://docs.docker.com/engine/reference/run/>`__ .

    - **pseudoTerminal** *(boolean) --*

      When this parameter is ``true`` , a TTY is allocated. This parameter maps to ``Tty`` in
      the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--tty``
      option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

    - **dockerLabels** *(dict) --*

      A key/value map of labels to add to the container. This parameter maps to ``Labels`` in
      the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--label``
      option to `docker run <https://docs.docker.com/engine/reference/run/>`__ . This
      parameter requires version 1.18 of the Docker Remote API or greater on your container
      instance. To check the Docker Remote API version on your container instance, log in to
      your container instance and run the following command: ``sudo docker version --format
      '{{.Server.APIVersion}}'``

      - *(string) --*

        - *(string) --*

    - **ulimits** *(list) --*

      A list of ``ulimits`` to set in the container. This parameter maps to ``Ulimits`` in
      the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--ulimit``
      option to `docker run <https://docs.docker.com/engine/reference/run/>`__ . Valid naming
      values are displayed in the  Ulimit data type. This parameter requires version 1.18 of
      the Docker Remote API or greater on your container instance. To check the Docker Remote
      API version on your container instance, log in to your container instance and run the
      following command: ``sudo docker version --format '{{.Server.APIVersion}}'``

      .. note::

        This parameter is not supported for Windows containers.

      - *(dict) --*

        The ``ulimit`` settings to pass to the container.

        - **name** *(string) --*

          The ``type`` of the ``ulimit`` .

        - **softLimit** *(integer) --*

          The soft limit for the ulimit type.

        - **hardLimit** *(integer) --*

          The hard limit for the ulimit type.

    - **logConfiguration** *(dict) --*

      The log configuration specification for the container.

      This parameter maps to ``LogConfig`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
      ``--log-driver`` option to `docker run
      <https://docs.docker.com/engine/reference/run/>`__ . By default, containers use the
      same logging driver that the Docker daemon uses. However the container may use a
      different logging driver than the Docker daemon by specifying a log driver with this
      parameter in the container definition. To use a different logging driver for a
      container, the log system must be configured properly on the container instance (or on
      a different log server for remote logging options). For more information on the options
      for different supported log drivers, see `Configure logging drivers
      <https://docs.docker.com/engine/admin/logging/overview/>`__ in the Docker documentation.

      .. note::

        Amazon ECS currently supports a subset of the logging drivers available to the Docker
        daemon (shown in the  LogConfiguration data type). Additional log drivers may be
        available in future releases of the Amazon ECS container agent.

      This parameter requires version 1.18 of the Docker Remote API or greater on your
      container instance. To check the Docker Remote API version on your container instance,
      log in to your container instance and run the following command: ``sudo docker version
      --format '{{.Server.APIVersion}}'``

      .. note::

        The Amazon ECS container agent running on a container instance must register the
        logging drivers available on that instance with the ``ECS_AVAILABLE_LOGGING_DRIVERS``
        environment variable before containers placed on that instance can use these log
        configuration options. For more information, see `Amazon ECS Container Agent
        Configuration
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html>`__
        in the *Amazon Elastic Container Service Developer Guide* .

      - **logDriver** *(string) --*

        The log driver to use for the container. The valid values listed for this parameter
        are log drivers that the Amazon ECS container agent can communicate with by default.

        For tasks using the Fargate launch type, the supported log drivers are ``awslogs``
        and ``splunk`` .

        For tasks using the EC2 launch type, the supported log drivers are ``awslogs`` ,
        ``fluentd`` , ``gelf`` , ``json-file`` , ``journald`` , ``logentries`` , ``syslog`` ,
        and ``splunk`` .

        For more information about using the ``awslogs`` log driver, see `Using the awslogs
        Log Driver
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_awslogs.html>`__
        in the *Amazon Elastic Container Service Developer Guide* .

        .. note::

          If you have a custom driver that is not listed above that you would like to work
          with the Amazon ECS container agent, you can fork the Amazon ECS container agent
          project that is `available on GitHub <https://github.com/aws/amazon-ecs-agent>`__
          and customize it to work with that driver. We encourage you to submit pull requests
          for changes that you would like to have included. However, Amazon Web Services does
          not currently support running modified copies of this software.

        This parameter requires version 1.18 of the Docker Remote API or greater on your
        container instance. To check the Docker Remote API version on your container
        instance, log in to your container instance and run the following command: ``sudo
        docker version --format '{{.Server.APIVersion}}'``

      - **options** *(dict) --*

        The configuration options to send to the log driver. This parameter requires version
        1.19 of the Docker Remote API or greater on your container instance. To check the
        Docker Remote API version on your container instance, log in to your container
        instance and run the following command: ``sudo docker version --format
        '{{.Server.APIVersion}}'``

        - *(string) --*

          - *(string) --*

      - **secretOptions** *(list) --*

        The secrets to pass to the log configuration. For more information, see `Specifying
        Sensitive Data
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html>`__
        in the *Amazon Elastic Container Service Developer Guide* .

        - *(dict) --*

          An object representing the secret to expose to your container. Secrets can be
          exposed to a container in the following ways:

          * To inject sensitive data into your containers as environment variables, use the
          ``secrets`` container definition parameter.

          * To reference sensitive information in the log configuration of a container, use
          the ``secretOptions`` container definition parameter.

          For more information, see `Specifying Sensitive Data
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

          - **name** *(string) --*

            The name of the secret.

          - **valueFrom** *(string) --*

            The secret to expose to the container. The supported values are either the full
            ARN of the AWS Secrets Manager secret or the full ARN of the parameter in the AWS
            Systems Manager Parameter Store.

            .. note::

              If the AWS Systems Manager Parameter Store parameter exists in the same Region
              as the task you are launching, then you can use either the full ARN or name of
              the parameter. If the parameter exists in a different Region, then the full ARN
              must be specified.

    - **healthCheck** *(dict) --*

      The health check command and associated configuration parameters for the container.
      This parameter maps to ``HealthCheck`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
      ``HEALTHCHECK`` parameter of `docker run
      <https://docs.docker.com/engine/reference/run/>`__ .

      - **command** *(list) --*

        A string array representing the command that the container runs to determine if it is
        healthy. The string array must start with ``CMD`` to execute the command arguments
        directly, or ``CMD-SHELL`` to run the command with the container's default shell. For
        example:

         ``[ "CMD-SHELL", "curl -f http://localhost/ || exit 1" ]``

        An exit code of 0 indicates success, and non-zero exit code indicates failure. For
        more information, see ``HealthCheck`` in the `Create a container
        <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of
        the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ .

        - *(string) --*

      - **interval** *(integer) --*

        The time period in seconds between each health check execution. You may specify
        between 5 and 300 seconds. The default value is 30 seconds.

      - **timeout** *(integer) --*

        The time period in seconds to wait for a health check to succeed before it is
        considered a failure. You may specify between 2 and 60 seconds. The default value is
        5.

      - **retries** *(integer) --*

        The number of times to retry a failed health check before the container is considered
        unhealthy. You may specify between 1 and 10 retries. The default value is 3.

      - **startPeriod** *(integer) --*

        The optional grace period within which to provide containers time to bootstrap before
        failed health checks count towards the maximum number of retries. You may specify
        between 0 and 300 seconds. The ``startPeriod`` is disabled by default.

        .. note::

          If a health check succeeds within the ``startPeriod`` , then the container is
          considered healthy and any subsequent failures count toward the maximum number of
          retries.

    - **systemControls** *(list) --*

      A list of namespaced kernel parameters to set in the container. This parameter maps to
      ``Sysctls`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--sysctl``
      option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

      .. note::

        It is not recommended that you specify network-related ``systemControls`` parameters
        for multiple containers in a single task that also uses either the ``awsvpc`` or
        ``host`` network modes. For tasks that use the ``awsvpc`` network mode, the container
        that is started last determines which ``systemControls`` parameters take effect. For
        tasks that use the ``host`` network mode, it changes the container instance's
        namespaced kernel parameters as well as the containers.

      - *(dict) --*

        A list of namespaced kernel parameters to set in the container. This parameter maps
        to ``Sysctls`` in the `Create a container
        <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of
        the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
        ``--sysctl`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__
        .

        It is not recommended that you specify network-related ``systemControls`` parameters
        for multiple containers in a single task that also uses either the ``awsvpc`` or
        ``host`` network mode for the following reasons:

        * For tasks that use the ``awsvpc`` network mode, if you set ``systemControls`` for
        any container, it applies to all containers in the task. If you set different
        ``systemControls`` for multiple containers in a single task, the container that is
        started last determines which ``systemControls`` take effect.

        * For tasks that use the ``host`` network mode, the ``systemControls`` parameter
        applies to the container instance's kernel parameter as well as that of all
        containers of any tasks running on that container instance.

        - **namespace** *(string) --*

          The namespaced kernel parameter for which to set a ``value`` .

        - **value** *(string) --*

          The value for the namespaced kernel parameter specified in ``namespace`` .

    - **resourceRequirements** *(list) --*

      The type and amount of a resource to assign to a container. The only supported resource
      is a GPU.

      - *(dict) --*

        The type and amount of a resource to assign to a container. The supported resource
        types are GPUs and Elastic Inference accelerators. For more information, see `Working
        with GPUs on Amazon ECS
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-gpu.html>`__ or
        `Working with Amazon Elastic Inference on Amazon ECS
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in the
        *Amazon Elastic Container Service Developer Guide*

        - **value** *(string) --*

          The value for the specified resource type.

          If the ``GPU`` type is used, the value is the number of physical ``GPUs`` the
          Amazon ECS container agent will reserve for the container. The number of GPUs
          reserved for all containers in a task should not exceed the number of available
          GPUs on the container instance the task is launched on.

          If the ``InferenceAccelerator`` type is used, the ``value`` should match the
          ``deviceName`` for an  InferenceAccelerator specified in a task definition.

        - **type** *(string) --*

          The type of resource to assign to a container. The supported values are ``GPU`` or
          ``InferenceAccelerator`` .

    - **firelensConfiguration** *(dict) --*

      The FireLens configuration for the container. This is used to specify and configure a
      log router for container logs. For more information, see `Custom Log Routing
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html>`__ in
      the *Amazon Elastic Container Service Developer Guide* .

      - **type** *(string) --*

        The log router to use. The valid values are ``fluentd`` or ``fluentbit`` .

      - **options** *(dict) --*

        The options to use when configuring the log router. This field is optional and can be
        used to add additional metadata, such as the task, task definition, cluster, and
        container instance details to the log event. If specified, the syntax to use is
        ``"options":{"enable-ecs-log-metadata":"true|false"}`` .

        - *(string) --*

          - *(string) --*
    """


_ClientDeregisterTaskDefinitionResponsetaskDefinitioninferenceAcceleratorsTypeDef = TypedDict(
    "_ClientDeregisterTaskDefinitionResponsetaskDefinitioninferenceAcceleratorsTypeDef",
    {"deviceName": str, "deviceType": str},
    total=False,
)


class ClientDeregisterTaskDefinitionResponsetaskDefinitioninferenceAcceleratorsTypeDef(
    _ClientDeregisterTaskDefinitionResponsetaskDefinitioninferenceAcceleratorsTypeDef
):
    """
    Type definition for `ClientDeregisterTaskDefinitionResponsetaskDefinition` `inferenceAccelerators`

    Details on a Elastic Inference accelerator. For more information, see `Working with
    Amazon Elastic Inference on Amazon ECS
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in the
    *Amazon Elastic Container Service Developer Guide* .

    - **deviceName** *(string) --*

      The Elastic Inference accelerator device name. The ``deviceName`` must also be
      referenced in a container definition as a  ResourceRequirement .

    - **deviceType** *(string) --*

      The Elastic Inference accelerator type to use.
    """


_ClientDeregisterTaskDefinitionResponsetaskDefinitionplacementConstraintsTypeDef = TypedDict(
    "_ClientDeregisterTaskDefinitionResponsetaskDefinitionplacementConstraintsTypeDef",
    {"type": str, "expression": str},
    total=False,
)


class ClientDeregisterTaskDefinitionResponsetaskDefinitionplacementConstraintsTypeDef(
    _ClientDeregisterTaskDefinitionResponsetaskDefinitionplacementConstraintsTypeDef
):
    """
    Type definition for `ClientDeregisterTaskDefinitionResponsetaskDefinition` `placementConstraints`

    An object representing a constraint on task placement in the task definition. For more
    information, see `Task Placement Constraints
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html>`__
    in the *Amazon Elastic Container Service Developer Guide* .

    .. note::

      If you are using the Fargate launch type, task placement constraints are not supported.

    - **type** *(string) --*

      The type of constraint. The ``MemberOf`` constraint restricts selection to be from a
      group of valid candidates.

    - **expression** *(string) --*

      A cluster query language expression to apply to the constraint. For more information,
      see `Cluster Query Language
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .
    """


_ClientDeregisterTaskDefinitionResponsetaskDefinitionproxyConfigurationpropertiesTypeDef = TypedDict(
    "_ClientDeregisterTaskDefinitionResponsetaskDefinitionproxyConfigurationpropertiesTypeDef",
    {"name": str, "value": str},
    total=False,
)


class ClientDeregisterTaskDefinitionResponsetaskDefinitionproxyConfigurationpropertiesTypeDef(
    _ClientDeregisterTaskDefinitionResponsetaskDefinitionproxyConfigurationpropertiesTypeDef
):
    """
    Type definition for `ClientDeregisterTaskDefinitionResponsetaskDefinitionproxyConfiguration` `properties`

    A key-value pair object.

    - **name** *(string) --*

      The name of the key-value pair. For environment variables, this is the name of the
      environment variable.

    - **value** *(string) --*

      The value of the key-value pair. For environment variables, this is the value of the
      environment variable.
    """


_ClientDeregisterTaskDefinitionResponsetaskDefinitionproxyConfigurationTypeDef = TypedDict(
    "_ClientDeregisterTaskDefinitionResponsetaskDefinitionproxyConfigurationTypeDef",
    {
        "type": str,
        "containerName": str,
        "properties": List[
            ClientDeregisterTaskDefinitionResponsetaskDefinitionproxyConfigurationpropertiesTypeDef
        ],
    },
    total=False,
)


class ClientDeregisterTaskDefinitionResponsetaskDefinitionproxyConfigurationTypeDef(
    _ClientDeregisterTaskDefinitionResponsetaskDefinitionproxyConfigurationTypeDef
):
    """
    Type definition for `ClientDeregisterTaskDefinitionResponsetaskDefinition` `proxyConfiguration`

    The configuration details for the App Mesh proxy.

    Your Amazon ECS container instances require at least version 1.26.0 of the container agent
    and at least version 1.26.0-1 of the ``ecs-init`` package to enable a proxy configuration.
    If your container instances are launched from the Amazon ECS-optimized AMI version
    ``20190301`` or later, then they contain the required versions of the container agent and
    ``ecs-init`` . For more information, see `Amazon ECS-optimized Linux AMI
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html>`__ in
    the *Amazon Elastic Container Service Developer Guide* .

    - **type** *(string) --*

      The proxy type. The only supported value is ``APPMESH`` .

    - **containerName** *(string) --*

      The name of the container that will serve as the App Mesh proxy.

    - **properties** *(list) --*

      The set of network configuration parameters to provide the Container Network Interface
      (CNI) plugin, specified as key-value pairs.

      * ``IgnoredUID`` - (Required) The user ID (UID) of the proxy container as defined by the
      ``user`` parameter in a container definition. This is used to ensure the proxy ignores
      its own traffic. If ``IgnoredGID`` is specified, this field can be empty.

      * ``IgnoredGID`` - (Required) The group ID (GID) of the proxy container as defined by the
      ``user`` parameter in a container definition. This is used to ensure the proxy ignores
      its own traffic. If ``IgnoredUID`` is specified, this field can be empty.

      * ``AppPorts`` - (Required) The list of ports that the application uses. Network traffic
      to these ports is forwarded to the ``ProxyIngressPort`` and ``ProxyEgressPort`` .

      * ``ProxyIngressPort`` - (Required) Specifies the port that incoming traffic to the
      ``AppPorts`` is directed to.

      * ``ProxyEgressPort`` - (Required) Specifies the port that outgoing traffic from the
      ``AppPorts`` is directed to.

      * ``EgressIgnoredPorts`` - (Required) The egress traffic going to the specified ports is
      ignored and not redirected to the ``ProxyEgressPort`` . It can be an empty list.

      * ``EgressIgnoredIPs`` - (Required) The egress traffic going to the specified IP
      addresses is ignored and not redirected to the ``ProxyEgressPort`` . It can be an empty
      list.

      - *(dict) --*

        A key-value pair object.

        - **name** *(string) --*

          The name of the key-value pair. For environment variables, this is the name of the
          environment variable.

        - **value** *(string) --*

          The value of the key-value pair. For environment variables, this is the value of the
          environment variable.
    """


_ClientDeregisterTaskDefinitionResponsetaskDefinitionrequiresAttributesTypeDef = TypedDict(
    "_ClientDeregisterTaskDefinitionResponsetaskDefinitionrequiresAttributesTypeDef",
    {"name": str, "value": str, "targetType": str, "targetId": str},
    total=False,
)


class ClientDeregisterTaskDefinitionResponsetaskDefinitionrequiresAttributesTypeDef(
    _ClientDeregisterTaskDefinitionResponsetaskDefinitionrequiresAttributesTypeDef
):
    """
    Type definition for `ClientDeregisterTaskDefinitionResponsetaskDefinition` `requiresAttributes`

    An attribute is a name-value pair associated with an Amazon ECS object. Attributes enable
    you to extend the Amazon ECS data model by adding custom metadata to your resources. For
    more information, see `Attributes
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html#attributes>`__
    in the *Amazon Elastic Container Service Developer Guide* .

    - **name** *(string) --*

      The name of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
      hyphens, underscores, and periods are allowed.

    - **value** *(string) --*

      The value of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
      hyphens, underscores, periods, at signs (@), forward slashes, colons, and spaces are
      allowed.

    - **targetType** *(string) --*

      The type of the target with which to attach the attribute. This parameter is required
      if you use the short form ID for a resource instead of the full ARN.

    - **targetId** *(string) --*

      The ID of the target. You can specify the short form ID for a resource or the full
      Amazon Resource Name (ARN).
    """


_ClientDeregisterTaskDefinitionResponsetaskDefinitionvolumesdockerVolumeConfigurationTypeDef = TypedDict(
    "_ClientDeregisterTaskDefinitionResponsetaskDefinitionvolumesdockerVolumeConfigurationTypeDef",
    {
        "scope": str,
        "autoprovision": bool,
        "driver": str,
        "driverOpts": Dict[str, str],
        "labels": Dict[str, str],
    },
    total=False,
)


class ClientDeregisterTaskDefinitionResponsetaskDefinitionvolumesdockerVolumeConfigurationTypeDef(
    _ClientDeregisterTaskDefinitionResponsetaskDefinitionvolumesdockerVolumeConfigurationTypeDef
):
    """
    Type definition for `ClientDeregisterTaskDefinitionResponsetaskDefinitionvolumes` `dockerVolumeConfiguration`

    This parameter is specified when you are using Docker volumes. Docker volumes are only
    supported when you are using the EC2 launch type. Windows containers only support the
    use of the ``local`` driver. To use bind mounts, specify a ``host`` instead.

    - **scope** *(string) --*

      The scope for the Docker volume that determines its lifecycle. Docker volumes that
      are scoped to a ``task`` are automatically provisioned when the task starts and
      destroyed when the task stops. Docker volumes that are scoped as ``shared`` persist
      after the task stops.

    - **autoprovision** *(boolean) --*

      If this value is ``true`` , the Docker volume is created if it does not already exist.

      .. note::

        This field is only used if the ``scope`` is ``shared`` .

    - **driver** *(string) --*

      The Docker volume driver to use. The driver value must match the driver name provided
      by Docker because it is used for task placement. If the driver was installed using
      the Docker plugin CLI, use ``docker plugin ls`` to retrieve the driver name from your
      container instance. If the driver was installed using another method, use Docker
      plugin discovery to retrieve the driver name. For more information, see `Docker
      plugin discovery
      <https://docs.docker.com/engine/extend/plugin_api/#plugin-discovery>`__ . This
      parameter maps to ``Driver`` in the `Create a volume
      <https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
      ``xxdriver`` option to `docker volume create
      <https://docs.docker.com/engine/reference/commandline/volume_create/>`__ .

    - **driverOpts** *(dict) --*

      A map of Docker driver-specific options passed through. This parameter maps to
      ``DriverOpts`` in the `Create a volume
      <https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``xxopt``
      option to `docker volume create
      <https://docs.docker.com/engine/reference/commandline/volume_create/>`__ .

      - *(string) --*

        - *(string) --*

    - **labels** *(dict) --*

      Custom metadata to add to your Docker volume. This parameter maps to ``Labels`` in
      the `Create a volume
      <https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``xxlabel``
      option to `docker volume create
      <https://docs.docker.com/engine/reference/commandline/volume_create/>`__ .

      - *(string) --*

        - *(string) --*
    """


_ClientDeregisterTaskDefinitionResponsetaskDefinitionvolumeshostTypeDef = TypedDict(
    "_ClientDeregisterTaskDefinitionResponsetaskDefinitionvolumeshostTypeDef",
    {"sourcePath": str},
    total=False,
)


class ClientDeregisterTaskDefinitionResponsetaskDefinitionvolumeshostTypeDef(
    _ClientDeregisterTaskDefinitionResponsetaskDefinitionvolumeshostTypeDef
):
    """
    Type definition for `ClientDeregisterTaskDefinitionResponsetaskDefinitionvolumes` `host`

    This parameter is specified when you are using bind mount host volumes. Bind mount host
    volumes are supported when you are using either the EC2 or Fargate launch types. The
    contents of the ``host`` parameter determine whether your bind mount host volume
    persists on the host container instance and where it is stored. If the ``host``
    parameter is empty, then the Docker daemon assigns a host path for your data volume.
    However, the data is not guaranteed to persist after the containers associated with it
    stop running.

    Windows containers can mount whole directories on the same drive as
    ``$env:ProgramData`` . Windows containers cannot mount directories on a different
    drive, and mount point cannot be across drives. For example, you can mount
    ``C:\\my\\path:C:\\my\\path`` and ``D:\\:D:\\`` , but not ``D:\\my\\path:C:\\my\\path``
    or ``D:\\:C:\\my\\path`` .

    - **sourcePath** *(string) --*

      When the ``host`` parameter is used, specify a ``sourcePath`` to declare the path on
      the host container instance that is presented to the container. If this parameter is
      empty, then the Docker daemon has assigned a host path for you. If the ``host``
      parameter contains a ``sourcePath`` file location, then the data volume persists at
      the specified location on the host container instance until you delete it manually.
      If the ``sourcePath`` value does not exist on the host container instance, the Docker
      daemon creates it. If the location does exist, the contents of the source path folder
      are exported.

      If you are using the Fargate launch type, the ``sourcePath`` parameter is not
      supported.
    """


_ClientDeregisterTaskDefinitionResponsetaskDefinitionvolumesTypeDef = TypedDict(
    "_ClientDeregisterTaskDefinitionResponsetaskDefinitionvolumesTypeDef",
    {
        "name": str,
        "host": ClientDeregisterTaskDefinitionResponsetaskDefinitionvolumeshostTypeDef,
        "dockerVolumeConfiguration": ClientDeregisterTaskDefinitionResponsetaskDefinitionvolumesdockerVolumeConfigurationTypeDef,
    },
    total=False,
)


class ClientDeregisterTaskDefinitionResponsetaskDefinitionvolumesTypeDef(
    _ClientDeregisterTaskDefinitionResponsetaskDefinitionvolumesTypeDef
):
    """
    Type definition for `ClientDeregisterTaskDefinitionResponsetaskDefinition` `volumes`

    A data volume used in a task definition. For tasks that use a Docker volume, specify a
    ``DockerVolumeConfiguration`` . For tasks that use a bind mount host volume, specify a
    ``host`` and optional ``sourcePath`` . For more information, see `Using Data Volumes in
    Tasks
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_data_volumes.html>`__ .

    - **name** *(string) --*

      The name of the volume. Up to 255 letters (uppercase and lowercase), numbers, and
      hyphens are allowed. This name is referenced in the ``sourceVolume`` parameter of
      container definition ``mountPoints`` .

    - **host** *(dict) --*

      This parameter is specified when you are using bind mount host volumes. Bind mount host
      volumes are supported when you are using either the EC2 or Fargate launch types. The
      contents of the ``host`` parameter determine whether your bind mount host volume
      persists on the host container instance and where it is stored. If the ``host``
      parameter is empty, then the Docker daemon assigns a host path for your data volume.
      However, the data is not guaranteed to persist after the containers associated with it
      stop running.

      Windows containers can mount whole directories on the same drive as
      ``$env:ProgramData`` . Windows containers cannot mount directories on a different
      drive, and mount point cannot be across drives. For example, you can mount
      ``C:\\my\\path:C:\\my\\path`` and ``D:\\:D:\\`` , but not ``D:\\my\\path:C:\\my\\path``
      or ``D:\\:C:\\my\\path`` .

      - **sourcePath** *(string) --*

        When the ``host`` parameter is used, specify a ``sourcePath`` to declare the path on
        the host container instance that is presented to the container. If this parameter is
        empty, then the Docker daemon has assigned a host path for you. If the ``host``
        parameter contains a ``sourcePath`` file location, then the data volume persists at
        the specified location on the host container instance until you delete it manually.
        If the ``sourcePath`` value does not exist on the host container instance, the Docker
        daemon creates it. If the location does exist, the contents of the source path folder
        are exported.

        If you are using the Fargate launch type, the ``sourcePath`` parameter is not
        supported.

    - **dockerVolumeConfiguration** *(dict) --*

      This parameter is specified when you are using Docker volumes. Docker volumes are only
      supported when you are using the EC2 launch type. Windows containers only support the
      use of the ``local`` driver. To use bind mounts, specify a ``host`` instead.

      - **scope** *(string) --*

        The scope for the Docker volume that determines its lifecycle. Docker volumes that
        are scoped to a ``task`` are automatically provisioned when the task starts and
        destroyed when the task stops. Docker volumes that are scoped as ``shared`` persist
        after the task stops.

      - **autoprovision** *(boolean) --*

        If this value is ``true`` , the Docker volume is created if it does not already exist.

        .. note::

          This field is only used if the ``scope`` is ``shared`` .

      - **driver** *(string) --*

        The Docker volume driver to use. The driver value must match the driver name provided
        by Docker because it is used for task placement. If the driver was installed using
        the Docker plugin CLI, use ``docker plugin ls`` to retrieve the driver name from your
        container instance. If the driver was installed using another method, use Docker
        plugin discovery to retrieve the driver name. For more information, see `Docker
        plugin discovery
        <https://docs.docker.com/engine/extend/plugin_api/#plugin-discovery>`__ . This
        parameter maps to ``Driver`` in the `Create a volume
        <https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate>`__ section of the
        `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
        ``xxdriver`` option to `docker volume create
        <https://docs.docker.com/engine/reference/commandline/volume_create/>`__ .

      - **driverOpts** *(dict) --*

        A map of Docker driver-specific options passed through. This parameter maps to
        ``DriverOpts`` in the `Create a volume
        <https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate>`__ section of the
        `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``xxopt``
        option to `docker volume create
        <https://docs.docker.com/engine/reference/commandline/volume_create/>`__ .

        - *(string) --*

          - *(string) --*

      - **labels** *(dict) --*

        Custom metadata to add to your Docker volume. This parameter maps to ``Labels`` in
        the `Create a volume
        <https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate>`__ section of the
        `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``xxlabel``
        option to `docker volume create
        <https://docs.docker.com/engine/reference/commandline/volume_create/>`__ .

        - *(string) --*

          - *(string) --*
    """


_ClientDeregisterTaskDefinitionResponsetaskDefinitionTypeDef = TypedDict(
    "_ClientDeregisterTaskDefinitionResponsetaskDefinitionTypeDef",
    {
        "taskDefinitionArn": str,
        "containerDefinitions": List[
            ClientDeregisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsTypeDef
        ],
        "family": str,
        "taskRoleArn": str,
        "executionRoleArn": str,
        "networkMode": str,
        "revision": int,
        "volumes": List[
            ClientDeregisterTaskDefinitionResponsetaskDefinitionvolumesTypeDef
        ],
        "status": str,
        "requiresAttributes": List[
            ClientDeregisterTaskDefinitionResponsetaskDefinitionrequiresAttributesTypeDef
        ],
        "placementConstraints": List[
            ClientDeregisterTaskDefinitionResponsetaskDefinitionplacementConstraintsTypeDef
        ],
        "compatibilities": List[str],
        "requiresCompatibilities": List[str],
        "cpu": str,
        "memory": str,
        "inferenceAccelerators": List[
            ClientDeregisterTaskDefinitionResponsetaskDefinitioninferenceAcceleratorsTypeDef
        ],
        "pidMode": str,
        "ipcMode": str,
        "proxyConfiguration": ClientDeregisterTaskDefinitionResponsetaskDefinitionproxyConfigurationTypeDef,
    },
    total=False,
)


class ClientDeregisterTaskDefinitionResponsetaskDefinitionTypeDef(
    _ClientDeregisterTaskDefinitionResponsetaskDefinitionTypeDef
):
    """
    Type definition for `ClientDeregisterTaskDefinitionResponse` `taskDefinition`

    The full description of the deregistered task.

    - **taskDefinitionArn** *(string) --*

      The full Amazon Resource Name (ARN) of the task definition.

    - **containerDefinitions** *(list) --*

      A list of container definitions in JSON format that describe the different containers that
      make up your task. For more information about container definition parameters and defaults,
      see `Amazon ECS Task Definitions
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_defintions.html>`__ in
      the *Amazon Elastic Container Service Developer Guide* .

      - *(dict) --*

        Container definitions are used in task definitions to describe the different containers
        that are launched as part of a task.

        - **name** *(string) --*

          The name of a container. If you are linking multiple containers together in a task
          definition, the ``name`` of one container can be entered in the ``links`` of another
          container to connect the containers. Up to 255 letters (uppercase and lowercase),
          numbers, and hyphens are allowed. This parameter maps to ``name`` in the `Create a
          container <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__
          section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and
          the ``--name`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__
          .

        - **image** *(string) --*

          The image used to start a container. This string is passed directly to the Docker
          daemon. Images in the Docker Hub registry are available by default. Other repositories
          are specified with either `` *repository-url* /*image* :*tag* `` or `` *repository-url*
          /*image* @*digest* `` . Up to 255 letters (uppercase and lowercase), numbers, hyphens,
          underscores, colons, periods, forward slashes, and number signs are allowed. This
          parameter maps to ``Image`` in the `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``IMAGE``
          parameter of `docker run <https://docs.docker.com/engine/reference/run/>`__ .

          * When a new task starts, the Amazon ECS container agent pulls the latest version of
          the specified image and tag for the container to use. However, subsequent updates to a
          repository image are not propagated to already running tasks.

          * Images in Amazon ECR repositories can be specified by either using the full
          ``registry/repository:tag`` or ``registry/repository@digest`` . For example,
          ``012345678910.dkr.ecr.<region-name>.amazonaws.com/<repository-name>:latest`` or
          ``012345678910.dkr.ecr.<region-name>.amazonaws.com/<repository-name>@sha256:94afd1f2e64d908bc90dbca0035a5b567EXAMPLE``
          .

          * Images in official repositories on Docker Hub use a single name (for example,
          ``ubuntu`` or ``mongo`` ).

          * Images in other repositories on Docker Hub are qualified with an organization name
          (for example, ``amazon/amazon-ecs-agent`` ).

          * Images in other online repositories are qualified further by a domain name (for
          example, ``quay.io/assemblyline/ubuntu`` ).

        - **repositoryCredentials** *(dict) --*

          The private repository authentication credentials to use.

          - **credentialsParameter** *(string) --*

            The Amazon Resource Name (ARN) of the secret containing the private repository
            credentials.

            .. note::

              When you are using the Amazon ECS API, AWS CLI, or AWS SDK, if the secret exists in
              the same Region as the task that you are launching then you can use either the full
              ARN or the name of the secret. When you are using the AWS Management Console, you
              must specify the full ARN of the secret.

        - **cpu** *(integer) --*

          The number of ``cpu`` units reserved for the container. This parameter maps to
          ``CpuShares`` in the `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
          ``--cpu-shares`` option to `docker run
          <https://docs.docker.com/engine/reference/run/>`__ .

          This field is optional for tasks using the Fargate launch type, and the only
          requirement is that the total amount of CPU reserved for all containers within a task
          be lower than the task-level ``cpu`` value.

          .. note::

            You can determine the number of CPU units that are available per EC2 instance type by
            multiplying the vCPUs listed for that instance type on the `Amazon EC2 Instances
            <http://aws.amazon.com/ec2/instance-types/>`__ detail page by 1,024.

          For example, if you run a single-container task on a single-core instance type with 512
          CPU units specified for that container, and that is the only task running on the
          container instance, that container could use the full 1,024 CPU unit share at any given
          time. However, if you launched another copy of the same task on that container
          instance, each task would be guaranteed a minimum of 512 CPU units when needed, and
          each container could float to higher CPU usage if the other container was not using it,
          but if both tasks were 100% active all of the time, they would be limited to 512 CPU
          units.

          Linux containers share unallocated CPU units with other containers on the container
          instance with the same ratio as their allocated amount. For example, if you run a
          single-container task on a single-core instance type with 512 CPU units specified for
          that container, and that is the only task running on the container instance, that
          container could use the full 1,024 CPU unit share at any given time. However, if you
          launched another copy of the same task on that container instance, each task would be
          guaranteed a minimum of 512 CPU units when needed, and each container could float to
          higher CPU usage if the other container was not using it, but if both tasks were 100%
          active all of the time, they would be limited to 512 CPU units.

          On Linux container instances, the Docker daemon on the container instance uses the CPU
          value to calculate the relative CPU share ratios for running containers. For more
          information, see `CPU share constraint
          <https://docs.docker.com/engine/reference/run/#cpu-share-constraint>`__ in the Docker
          documentation. The minimum valid CPU share value that the Linux kernel allows is 2.
          However, the CPU parameter is not required, and you can use CPU values below 2 in your
          container definitions. For CPU values below 2 (including null), the behavior varies
          based on your Amazon ECS container agent version:

          * **Agent versions less than or equal to 1.1.0:** Null and zero CPU values are passed
          to Docker as 0, which Docker then converts to 1,024 CPU shares. CPU values of 1 are
          passed to Docker as 1, which the Linux kernel converts to two CPU shares.

          * **Agent versions greater than or equal to 1.2.0:** Null, zero, and CPU values of 1
          are passed to Docker as 2.

          On Windows container instances, the CPU limit is enforced as an absolute limit, or a
          quota. Windows containers only have access to the specified amount of CPU that is
          described in the task definition.

        - **memory** *(integer) --*

          The amount (in MiB) of memory to present to the container. If your container attempts
          to exceed the memory specified here, the container is killed. The total amount of
          memory reserved for all containers within a task must be lower than the task ``memory``
          value, if one is specified. This parameter maps to ``Memory`` in the `Create a
          container <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__
          section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and
          the ``--memory`` option to `docker run
          <https://docs.docker.com/engine/reference/run/>`__ .

          If using the Fargate launch type, this parameter is optional.

          If using the EC2 launch type, you must specify either a task-level memory value or a
          container-level memory value. If you specify both a container-level ``memory`` and
          ``memoryReservation`` value, ``memory`` must be greater than ``memoryReservation`` . If
          you specify ``memoryReservation`` , then that value is subtracted from the available
          memory resources for the container instance on which the container is placed.
          Otherwise, the value of ``memory`` is used.

          The Docker daemon reserves a minimum of 4 MiB of memory for a container, so you should
          not specify fewer than 4 MiB of memory for your containers.

        - **memoryReservation** *(integer) --*

          The soft limit (in MiB) of memory to reserve for the container. When system memory is
          under heavy contention, Docker attempts to keep the container memory to this soft
          limit. However, your container can consume more memory when it needs to, up to either
          the hard limit specified with the ``memory`` parameter (if applicable), or all of the
          available memory on the container instance, whichever comes first. This parameter maps
          to ``MemoryReservation`` in the `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
          ``--memory-reservation`` option to `docker run
          <https://docs.docker.com/engine/reference/run/>`__ .

          If a task-level memory value is not specified, you must specify a non-zero integer for
          one or both of ``memory`` or ``memoryReservation`` in a container definition. If you
          specify both, ``memory`` must be greater than ``memoryReservation`` . If you specify
          ``memoryReservation`` , then that value is subtracted from the available memory
          resources for the container instance on which the container is placed. Otherwise, the
          value of ``memory`` is used.

          For example, if your container normally uses 128 MiB of memory, but occasionally bursts
          to 256 MiB of memory for short periods of time, you can set a ``memoryReservation`` of
          128 MiB, and a ``memory`` hard limit of 300 MiB. This configuration would allow the
          container to only reserve 128 MiB of memory from the remaining resources on the
          container instance, but also allow the container to consume more memory resources when
          needed.

          The Docker daemon reserves a minimum of 4 MiB of memory for a container, so you should
          not specify fewer than 4 MiB of memory for your containers.

        - **links** *(list) --*

          The ``links`` parameter allows containers to communicate with each other without the
          need for port mappings. This parameter is only supported if the network mode of a task
          definition is ``bridge`` . The ``name:internalName`` construct is analogous to
          ``name:alias`` in Docker links. Up to 255 letters (uppercase and lowercase), numbers,
          and hyphens are allowed. For more information about linking Docker containers, go to
          `Legacy container links <https://docs.docker.com/network/links/>`__ in the Docker
          documentation. This parameter maps to ``Links`` in the `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--link``
          option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

          .. note::

            This parameter is not supported for Windows containers.

          .. warning::

            Containers that are collocated on a single container instance may be able to
            communicate with each other without requiring links or host port mappings. Network
            isolation is achieved on the container instance using security groups and VPC
            settings.

          - *(string) --*

        - **portMappings** *(list) --*

          The list of port mappings for the container. Port mappings allow containers to access
          ports on the host container instance to send or receive traffic.

          For task definitions that use the ``awsvpc`` network mode, you should only specify the
          ``containerPort`` . The ``hostPort`` can be left blank or it must be the same value as
          the ``containerPort`` .

          Port mappings on Windows use the ``NetNAT`` gateway address rather than ``localhost`` .
          There is no loopback for port mappings on Windows, so you cannot access a container's
          mapped port from the host itself.

          This parameter maps to ``PortBindings`` in the `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--publish``
          option to `docker run <https://docs.docker.com/engine/reference/run/>`__ . If the
          network mode of a task definition is set to ``none`` , then you can't specify port
          mappings. If the network mode of a task definition is set to ``host`` , then host ports
          must either be undefined or they must match the container port in the port mapping.

          .. note::

            After a task reaches the ``RUNNING`` status, manual and automatic host and container
            port assignments are visible in the **Network Bindings** section of a container
            description for a selected task in the Amazon ECS console. The assignments are also
            visible in the ``networkBindings`` section  DescribeTasks responses.

          - *(dict) --*

            Port mappings allow containers to access ports on the host container instance to send
            or receive traffic. Port mappings are specified as part of the container definition.

            If you are using containers in a task with the ``awsvpc`` or ``host`` network mode,
            exposed ports should be specified using ``containerPort`` . The ``hostPort`` can be
            left blank or it must be the same value as the ``containerPort`` .

            After a task reaches the ``RUNNING`` status, manual and automatic host and container
            port assignments are visible in the ``networkBindings`` section of  DescribeTasks API
            responses.

            - **containerPort** *(integer) --*

              The port number on the container that is bound to the user-specified or
              automatically assigned host port.

              If you are using containers in a task with the ``awsvpc`` or ``host`` network mode,
              exposed ports should be specified using ``containerPort`` .

              If you are using containers in a task with the ``bridge`` network mode and you
              specify a container port and not a host port, your container automatically receives
              a host port in the ephemeral port range. For more information, see ``hostPort`` .
              Port mappings that are automatically assigned in this way do not count toward the
              100 reserved ports limit of a container instance.

              .. warning::

                You cannot expose the same container port for multiple protocols. An error will
                be returned if this is attempted.

            - **hostPort** *(integer) --*

              The port number on the container instance to reserve for your container.

              If you are using containers in a task with the ``awsvpc`` or ``host`` network mode,
              the ``hostPort`` can either be left blank or set to the same value as the
              ``containerPort`` .

              If you are using containers in a task with the ``bridge`` network mode, you can
              specify a non-reserved host port for your container port mapping, or you can omit
              the ``hostPort`` (or set it to ``0`` ) while specifying a ``containerPort`` and
              your container automatically receives a port in the ephemeral port range for your
              container instance operating system and Docker version.

              The default ephemeral port range for Docker version 1.6.0 and later is listed on
              the instance under ``/proc/sys/net/ipv4/ip_local_port_range`` . If this kernel
              parameter is unavailable, the default ephemeral port range from 49153 through 65535
              is used. Do not attempt to specify a host port in the ephemeral port range as these
              are reserved for automatic assignment. In general, ports below 32768 are outside of
              the ephemeral port range.

              .. note::

                The default ephemeral port range from 49153 through 65535 is always used for
                Docker versions before 1.6.0.

              The default reserved ports are 22 for SSH, the Docker ports 2375 and 2376, and the
              Amazon ECS container agent ports 51678-51680. Any host port that was previously
              specified in a running task is also reserved while the task is running (after a
              task stops, the host port is released). The current reserved ports are displayed in
              the ``remainingResources`` of  DescribeContainerInstances output. A container
              instance can have up to 100 reserved ports at a time, including the default
              reserved ports. Automatically assigned ports don't count toward the 100 reserved
              ports limit.

            - **protocol** *(string) --*

              The protocol used for the port mapping. Valid values are ``tcp`` and ``udp`` . The
              default is ``tcp`` .

        - **essential** *(boolean) --*

          If the ``essential`` parameter of a container is marked as ``true`` , and that
          container fails or stops for any reason, all other containers that are part of the task
          are stopped. If the ``essential`` parameter of a container is marked as ``false`` ,
          then its failure does not affect the rest of the containers in a task. If this
          parameter is omitted, a container is assumed to be essential.

          All tasks must have at least one essential container. If you have an application that
          is composed of multiple containers, you should group containers that are used for a
          common purpose into components, and separate the different components into multiple
          task definitions. For more information, see `Application Architecture
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/application_architecture.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

        - **entryPoint** *(list) --*

          .. warning::

            Early versions of the Amazon ECS container agent do not properly handle
            ``entryPoint`` parameters. If you have problems using ``entryPoint`` , update your
            container agent or enter your commands and arguments as ``command`` array items
            instead.

          The entry point that is passed to the container. This parameter maps to ``Entrypoint``
          in the `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
          ``--entrypoint`` option to `docker run
          <https://docs.docker.com/engine/reference/run/>`__ . For more information, see
          `https\\://docs.docker.com/engine/reference/builder/#entrypoint
          <https://docs.docker.com/engine/reference/builder/#entrypoint>`__ .

          - *(string) --*

        - **command** *(list) --*

          The command that is passed to the container. This parameter maps to ``Cmd`` in the
          `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``COMMAND``
          parameter to `docker run <https://docs.docker.com/engine/reference/run/>`__ . For more
          information, see `https\\://docs.docker.com/engine/reference/builder/#cmd
          <https://docs.docker.com/engine/reference/builder/#cmd>`__ . If there are multiple
          arguments, each argument should be a separated string in the array.

          - *(string) --*

        - **environment** *(list) --*

          The environment variables to pass to a container. This parameter maps to ``Env`` in the
          `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--env``
          option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

          .. warning::

            We do not recommend using plaintext environment variables for sensitive information,
            such as credential data.

          - *(dict) --*

            A key-value pair object.

            - **name** *(string) --*

              The name of the key-value pair. For environment variables, this is the name of the
              environment variable.

            - **value** *(string) --*

              The value of the key-value pair. For environment variables, this is the value of
              the environment variable.

        - **mountPoints** *(list) --*

          The mount points for data volumes in your container.

          This parameter maps to ``Volumes`` in the `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--volume``
          option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

          Windows containers can mount whole directories on the same drive as
          ``$env:ProgramData`` . Windows containers cannot mount directories on a different
          drive, and mount point cannot be across drives.

          - *(dict) --*

            Details on a volume mount point that is used in a container definition.

            - **sourceVolume** *(string) --*

              The name of the volume to mount. Must be a volume name referenced in the ``name``
              parameter of task definition ``volume`` .

            - **containerPath** *(string) --*

              The path on the container to mount the host volume at.

            - **readOnly** *(boolean) --*

              If this value is ``true`` , the container has read-only access to the volume. If
              this value is ``false`` , then the container can write to the volume. The default
              value is ``false`` .

        - **volumesFrom** *(list) --*

          Data volumes to mount from another container. This parameter maps to ``VolumesFrom`` in
          the `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
          ``--volumes-from`` option to `docker run
          <https://docs.docker.com/engine/reference/run/>`__ .

          - *(dict) --*

            Details on a data volume from another container in the same task definition.

            - **sourceContainer** *(string) --*

              The name of another container within the same task definition from which to mount
              volumes.

            - **readOnly** *(boolean) --*

              If this value is ``true`` , the container has read-only access to the volume. If
              this value is ``false`` , then the container can write to the volume. The default
              value is ``false`` .

        - **linuxParameters** *(dict) --*

          Linux-specific modifications that are applied to the container, such as Linux kernel
          capabilities. For more information see  KernelCapabilities .

          .. note::

            This parameter is not supported for Windows containers.

          - **capabilities** *(dict) --*

            The Linux capabilities for the container that are added to or dropped from the
            default configuration provided by Docker.

            .. note::

              If you are using tasks that use the Fargate launch type, ``capabilities`` is
              supported but the ``add`` parameter is not supported.

            - **add** *(list) --*

              The Linux capabilities for the container that have been added to the default
              configuration provided by Docker. This parameter maps to ``CapAdd`` in the `Create
              a container
              <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of
              the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
              ``--cap-add`` option to `docker run
              <https://docs.docker.com/engine/reference/run/>`__ .

              .. note::

                If you are using tasks that use the Fargate launch type, the ``add`` parameter is
                not supported.

              Valid values: ``"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" | "BLOCK_SUSPEND" | "CHOWN"
              | "DAC_OVERRIDE" | "DAC_READ_SEARCH" | "FOWNER" | "FSETID" | "IPC_LOCK" |
              "IPC_OWNER" | "KILL" | "LEASE" | "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" |
              "MKNOD" | "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" |
              "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT" |
              "SYS_CHROOT" | "SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" | "SYS_PTRACE" | "SYS_RAWIO"
              | "SYS_RESOURCE" | "SYS_TIME" | "SYS_TTY_CONFIG" | "SYSLOG" | "WAKE_ALARM"``

              - *(string) --*

            - **drop** *(list) --*

              The Linux capabilities for the container that have been removed from the default
              configuration provided by Docker. This parameter maps to ``CapDrop`` in the `Create
              a container
              <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of
              the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
              ``--cap-drop`` option to `docker run
              <https://docs.docker.com/engine/reference/run/>`__ .

              Valid values: ``"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" | "BLOCK_SUSPEND" | "CHOWN"
              | "DAC_OVERRIDE" | "DAC_READ_SEARCH" | "FOWNER" | "FSETID" | "IPC_LOCK" |
              "IPC_OWNER" | "KILL" | "LEASE" | "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" |
              "MKNOD" | "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" |
              "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT" |
              "SYS_CHROOT" | "SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" | "SYS_PTRACE" | "SYS_RAWIO"
              | "SYS_RESOURCE" | "SYS_TIME" | "SYS_TTY_CONFIG" | "SYSLOG" | "WAKE_ALARM"``

              - *(string) --*

          - **devices** *(list) --*

            Any host devices to expose to the container. This parameter maps to ``Devices`` in
            the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of
            the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
            ``--device`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__
            .

            .. note::

              If you are using tasks that use the Fargate launch type, the ``devices`` parameter
              is not supported.

            - *(dict) --*

              An object representing a container instance host device.

              - **hostPath** *(string) --*

                The path for the device on the host container instance.

              - **containerPath** *(string) --*

                The path inside the container at which to expose the host device.

              - **permissions** *(list) --*

                The explicit permissions to provide to the container for the device. By default,
                the container has permissions for ``read`` , ``write`` , and ``mknod`` for the
                device.

                - *(string) --*

          - **initProcessEnabled** *(boolean) --*

            Run an ``init`` process inside the container that forwards signals and reaps
            processes. This parameter maps to the ``--init`` option to `docker run
            <https://docs.docker.com/engine/reference/run/>`__ . This parameter requires version
            1.25 of the Docker Remote API or greater on your container instance. To check the
            Docker Remote API version on your container instance, log in to your container
            instance and run the following command: ``sudo docker version --format
            '{{.Server.APIVersion}}'``

          - **sharedMemorySize** *(integer) --*

            The value for the size (in MiB) of the ``/dev/shm`` volume. This parameter maps to
            the ``--shm-size`` option to `docker run
            <https://docs.docker.com/engine/reference/run/>`__ .

            .. note::

              If you are using tasks that use the Fargate launch type, the ``sharedMemorySize``
              parameter is not supported.

          - **tmpfs** *(list) --*

            The container path, mount options, and size (in MiB) of the tmpfs mount. This
            parameter maps to the ``--tmpfs`` option to `docker run
            <https://docs.docker.com/engine/reference/run/>`__ .

            .. note::

              If you are using tasks that use the Fargate launch type, the ``tmpfs`` parameter is
              not supported.

            - *(dict) --*

              The container path, mount options, and size of the tmpfs mount.

              - **containerPath** *(string) --*

                The absolute file path where the tmpfs volume is to be mounted.

              - **size** *(integer) --*

                The size (in MiB) of the tmpfs volume.

              - **mountOptions** *(list) --*

                The list of tmpfs volume mount options.

                Valid values: ``"defaults" | "ro" | "rw" | "suid" | "nosuid" | "dev" | "nodev" |
                "exec" | "noexec" | "sync" | "async" | "dirsync" | "remount" | "mand" | "nomand"
                | "atime" | "noatime" | "diratime" | "nodiratime" | "bind" | "rbind" |
                "unbindable" | "runbindable" | "private" | "rprivate" | "shared" | "rshared" |
                "slave" | "rslave" | "relatime" | "norelatime" | "strictatime" | "nostrictatime"
                | "mode" | "uid" | "gid" | "nr_inodes" | "nr_blocks" | "mpol"``

                - *(string) --*

          - **maxSwap** *(integer) --*

            The total amount of swap memory (in MiB) a container can use. This parameter will be
            translated to the ``--memory-swap`` option to `docker run
            <https://docs.docker.com/engine/reference/run/>`__ where the value would be the sum
            of the container memory plus the ``maxSwap`` value.

            If a ``maxSwap`` value of ``0`` is specified, the container will not use swap.
            Accepted values are ``0`` or any positive integer. If the ``maxSwap`` parameter is
            omitted, the container will use the swap configuration for the container instance it
            is running on. A ``maxSwap`` value must be set for the ``swappiness`` parameter to be
            used.

            .. note::

              If you are using tasks that use the Fargate launch type, the ``maxSwap`` parameter
              is not supported.

          - **swappiness** *(integer) --*

            This allows you to tune a container's memory swappiness behavior. A ``swappiness``
            value of ``0`` will cause swapping to not happen unless absolutely necessary. A
            ``swappiness`` value of ``100`` will cause pages to be swapped very aggressively.
            Accepted values are whole numbers between ``0`` and ``100`` . If the ``swappiness``
            parameter is not specified, a default value of ``60`` is used. If a value is not
            specified for ``maxSwap`` then this parameter is ignored. This parameter maps to the
            ``--memory-swappiness`` option to `docker run
            <https://docs.docker.com/engine/reference/run/>`__ .

            .. note::

              If you are using tasks that use the Fargate launch type, the ``swappiness``
              parameter is not supported.

        - **secrets** *(list) --*

          The secrets to pass to the container. For more information, see `Specifying Sensitive
          Data
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

          - *(dict) --*

            An object representing the secret to expose to your container. Secrets can be exposed
            to a container in the following ways:

            * To inject sensitive data into your containers as environment variables, use the
            ``secrets`` container definition parameter.

            * To reference sensitive information in the log configuration of a container, use the
            ``secretOptions`` container definition parameter.

            For more information, see `Specifying Sensitive Data
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html>`__
            in the *Amazon Elastic Container Service Developer Guide* .

            - **name** *(string) --*

              The name of the secret.

            - **valueFrom** *(string) --*

              The secret to expose to the container. The supported values are either the full ARN
              of the AWS Secrets Manager secret or the full ARN of the parameter in the AWS
              Systems Manager Parameter Store.

              .. note::

                If the AWS Systems Manager Parameter Store parameter exists in the same Region as
                the task you are launching, then you can use either the full ARN or name of the
                parameter. If the parameter exists in a different Region, then the full ARN must
                be specified.

        - **dependsOn** *(list) --*

          The dependencies defined for container startup and shutdown. A container can contain
          multiple dependencies. When a dependency is defined for container startup, for
          container shutdown it is reversed.

          For tasks using the EC2 launch type, the container instances require at least version
          1.26.0 of the container agent to enable container dependencies. However, we recommend
          using the latest container agent version. For information about checking your agent
          version and updating to the latest version, see `Updating the Amazon ECS Container
          Agent
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html>`__
          in the *Amazon Elastic Container Service Developer Guide* . If you are using an Amazon
          ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the
          ``ecs-init`` package. If your container instances are launched from version
          ``20190301`` or later, then they contain the required versions of the container agent
          and ``ecs-init`` . For more information, see `Amazon ECS-optimized Linux AMI
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

          For tasks using the Fargate launch type, the task or service requires platform version
          ``1.3.0`` or later.

          - *(dict) --*

            The dependencies defined for container startup and shutdown. A container can contain
            multiple dependencies. When a dependency is defined for container startup, for
            container shutdown it is reversed.

            Your Amazon ECS container instances require at least version 1.26.0 of the container
            agent to enable container dependencies. However, we recommend using the latest
            container agent version. For information about checking your agent version and
            updating to the latest version, see `Updating the Amazon ECS Container Agent
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html>`__
            in the *Amazon Elastic Container Service Developer Guide* . If you are using an
            Amazon ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the
            ``ecs-init`` package. If your container instances are launched from version
            ``20190301`` or later, then they contain the required versions of the container agent
            and ``ecs-init`` . For more information, see `Amazon ECS-optimized Linux AMI
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html>`__
            in the *Amazon Elastic Container Service Developer Guide* .

            .. note::

              If you are using tasks that use the Fargate launch type, container dependency
              parameters are not supported.

            - **containerName** *(string) --*

              The name of a container.

            - **condition** *(string) --*

              The dependency condition of the container. The following are the available
              conditions and their behavior:

              * ``START`` - This condition emulates the behavior of links and volumes today. It
              validates that a dependent container is started before permitting other containers
              to start.

              * ``COMPLETE`` - This condition validates that a dependent container runs to
              completion (exits) before permitting other containers to start. This can be useful
              for nonessential containers that run a script and then exit.

              * ``SUCCESS`` - This condition is the same as ``COMPLETE`` , but it also requires
              that the container exits with a ``zero`` status.

              * ``HEALTHY`` - This condition validates that the dependent container passes its
              Docker health check before permitting other containers to start. This requires that
              the dependent container has health checks configured. This condition is confirmed
              only at task startup.

        - **startTimeout** *(integer) --*

          Time duration (in seconds) to wait before giving up on resolving dependencies for a
          container. For example, you specify two containers in a task definition with containerA
          having a dependency on containerB reaching a ``COMPLETE`` , ``SUCCESS`` , or
          ``HEALTHY`` status. If a ``startTimeout`` value is specified for containerB and it does
          not reach the desired status within that time then containerA will give up and not
          start. This results in the task transitioning to a ``STOPPED`` state.

          For tasks using the EC2 launch type, the container instances require at least version
          1.26.0 of the container agent to enable a container start timeout value. However, we
          recommend using the latest container agent version. For information about checking your
          agent version and updating to the latest version, see `Updating the Amazon ECS
          Container Agent
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html>`__
          in the *Amazon Elastic Container Service Developer Guide* . If you are using an Amazon
          ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the
          ``ecs-init`` package. If your container instances are launched from version
          ``20190301`` or later, then they contain the required versions of the container agent
          and ``ecs-init`` . For more information, see `Amazon ECS-optimized Linux AMI
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

          For tasks using the Fargate launch type, the task or service requires platform version
          ``1.3.0`` or later.

        - **stopTimeout** *(integer) --*

          Time duration (in seconds) to wait before the container is forcefully killed if it
          doesn't exit normally on its own.

          For tasks using the Fargate launch type, the max ``stopTimeout`` value is 2 minutes and
          the task or service requires platform version ``1.3.0`` or later.

          For tasks using the EC2 launch type, the stop timeout value for the container takes
          precedence over the ``ECS_CONTAINER_STOP_TIMEOUT`` container agent configuration
          parameter, if used. Container instances require at least version 1.26.0 of the
          container agent to enable a container stop timeout value. However, we recommend using
          the latest container agent version. For information about checking your agent version
          and updating to the latest version, see `Updating the Amazon ECS Container Agent
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html>`__
          in the *Amazon Elastic Container Service Developer Guide* . If you are using an Amazon
          ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the
          ``ecs-init`` package. If your container instances are launched from version
          ``20190301`` or later, then they contain the required versions of the container agent
          and ``ecs-init`` . For more information, see `Amazon ECS-optimized Linux AMI
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

        - **hostname** *(string) --*

          The hostname to use for your container. This parameter maps to ``Hostname`` in the
          `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
          ``--hostname`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__
          .

          .. note::

            The ``hostname`` parameter is not supported if you are using the ``awsvpc`` network
            mode.

        - **user** *(string) --*

          The user name to use inside the container. This parameter maps to ``User`` in the
          `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--user``
          option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

          You can use the following formats. If specifying a UID or GID, you must specify it as a
          positive integer.

          * ``user``

          * ``user:group``

          * ``uid``

          * ``uid:gid``

          * ``user:gid``

          * ``uid:group``

          .. note::

            This parameter is not supported for Windows containers.

        - **workingDirectory** *(string) --*

          The working directory in which to run commands inside the container. This parameter
          maps to ``WorkingDir`` in the `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--workdir``
          option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

        - **disableNetworking** *(boolean) --*

          When this parameter is true, networking is disabled within the container. This
          parameter maps to ``NetworkDisabled`` in the `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ .

          .. note::

            This parameter is not supported for Windows containers.

        - **privileged** *(boolean) --*

          When this parameter is true, the container is given elevated privileges on the host
          container instance (similar to the ``root`` user). This parameter maps to
          ``Privileged`` in the `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
          ``--privileged`` option to `docker run
          <https://docs.docker.com/engine/reference/run/>`__ .

          .. note::

            This parameter is not supported for Windows containers or tasks using the Fargate
            launch type.

        - **readonlyRootFilesystem** *(boolean) --*

          When this parameter is true, the container is given read-only access to its root file
          system. This parameter maps to ``ReadonlyRootfs`` in the `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
          ``--read-only`` option to `docker run
          <https://docs.docker.com/engine/reference/run/>`__ .

          .. note::

            This parameter is not supported for Windows containers.

        - **dnsServers** *(list) --*

          A list of DNS servers that are presented to the container. This parameter maps to
          ``Dns`` in the `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--dns``
          option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

          .. note::

            This parameter is not supported for Windows containers.

          - *(string) --*

        - **dnsSearchDomains** *(list) --*

          A list of DNS search domains that are presented to the container. This parameter maps
          to ``DnsSearch`` in the `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
          ``--dns-search`` option to `docker run
          <https://docs.docker.com/engine/reference/run/>`__ .

          .. note::

            This parameter is not supported for Windows containers.

          - *(string) --*

        - **extraHosts** *(list) --*

          A list of hostnames and IP address mappings to append to the ``/etc/hosts`` file on the
          container. This parameter maps to ``ExtraHosts`` in the `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
          ``--add-host`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__
          .

          .. note::

            This parameter is not supported for Windows containers or tasks that use the
            ``awsvpc`` network mode.

          - *(dict) --*

            Hostnames and IP address entries that are added to the ``/etc/hosts`` file of a
            container via the ``extraHosts`` parameter of its  ContainerDefinition .

            - **hostname** *(string) --*

              The hostname to use in the ``/etc/hosts`` entry.

            - **ipAddress** *(string) --*

              The IP address to use in the ``/etc/hosts`` entry.

        - **dockerSecurityOptions** *(list) --*

          A list of strings to provide custom labels for SELinux and AppArmor multi-level
          security systems. This field is not valid for containers in tasks using the Fargate
          launch type.

          This parameter maps to ``SecurityOpt`` in the `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
          ``--security-opt`` option to `docker run
          <https://docs.docker.com/engine/reference/run/>`__ .

          .. note::

            The Amazon ECS container agent running on a container instance must register with the
            ``ECS_SELINUX_CAPABLE=true`` or ``ECS_APPARMOR_CAPABLE=true`` environment variables
            before containers placed on that instance can use these security options. For more
            information, see `Amazon ECS Container Agent Configuration
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html>`__
            in the *Amazon Elastic Container Service Developer Guide* .

          .. note::

            This parameter is not supported for Windows containers.

          - *(string) --*

        - **interactive** *(boolean) --*

          When this parameter is ``true`` , this allows you to deploy containerized applications
          that require ``stdin`` or a ``tty`` to be allocated. This parameter maps to
          ``OpenStdin`` in the `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
          ``--interactive`` option to `docker run
          <https://docs.docker.com/engine/reference/run/>`__ .

        - **pseudoTerminal** *(boolean) --*

          When this parameter is ``true`` , a TTY is allocated. This parameter maps to ``Tty`` in
          the `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--tty``
          option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

        - **dockerLabels** *(dict) --*

          A key/value map of labels to add to the container. This parameter maps to ``Labels`` in
          the `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--label``
          option to `docker run <https://docs.docker.com/engine/reference/run/>`__ . This
          parameter requires version 1.18 of the Docker Remote API or greater on your container
          instance. To check the Docker Remote API version on your container instance, log in to
          your container instance and run the following command: ``sudo docker version --format
          '{{.Server.APIVersion}}'``

          - *(string) --*

            - *(string) --*

        - **ulimits** *(list) --*

          A list of ``ulimits`` to set in the container. This parameter maps to ``Ulimits`` in
          the `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--ulimit``
          option to `docker run <https://docs.docker.com/engine/reference/run/>`__ . Valid naming
          values are displayed in the  Ulimit data type. This parameter requires version 1.18 of
          the Docker Remote API or greater on your container instance. To check the Docker Remote
          API version on your container instance, log in to your container instance and run the
          following command: ``sudo docker version --format '{{.Server.APIVersion}}'``

          .. note::

            This parameter is not supported for Windows containers.

          - *(dict) --*

            The ``ulimit`` settings to pass to the container.

            - **name** *(string) --*

              The ``type`` of the ``ulimit`` .

            - **softLimit** *(integer) --*

              The soft limit for the ulimit type.

            - **hardLimit** *(integer) --*

              The hard limit for the ulimit type.

        - **logConfiguration** *(dict) --*

          The log configuration specification for the container.

          This parameter maps to ``LogConfig`` in the `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
          ``--log-driver`` option to `docker run
          <https://docs.docker.com/engine/reference/run/>`__ . By default, containers use the
          same logging driver that the Docker daemon uses. However the container may use a
          different logging driver than the Docker daemon by specifying a log driver with this
          parameter in the container definition. To use a different logging driver for a
          container, the log system must be configured properly on the container instance (or on
          a different log server for remote logging options). For more information on the options
          for different supported log drivers, see `Configure logging drivers
          <https://docs.docker.com/engine/admin/logging/overview/>`__ in the Docker documentation.

          .. note::

            Amazon ECS currently supports a subset of the logging drivers available to the Docker
            daemon (shown in the  LogConfiguration data type). Additional log drivers may be
            available in future releases of the Amazon ECS container agent.

          This parameter requires version 1.18 of the Docker Remote API or greater on your
          container instance. To check the Docker Remote API version on your container instance,
          log in to your container instance and run the following command: ``sudo docker version
          --format '{{.Server.APIVersion}}'``

          .. note::

            The Amazon ECS container agent running on a container instance must register the
            logging drivers available on that instance with the ``ECS_AVAILABLE_LOGGING_DRIVERS``
            environment variable before containers placed on that instance can use these log
            configuration options. For more information, see `Amazon ECS Container Agent
            Configuration
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html>`__
            in the *Amazon Elastic Container Service Developer Guide* .

          - **logDriver** *(string) --*

            The log driver to use for the container. The valid values listed for this parameter
            are log drivers that the Amazon ECS container agent can communicate with by default.

            For tasks using the Fargate launch type, the supported log drivers are ``awslogs``
            and ``splunk`` .

            For tasks using the EC2 launch type, the supported log drivers are ``awslogs`` ,
            ``fluentd`` , ``gelf`` , ``json-file`` , ``journald`` , ``logentries`` , ``syslog`` ,
            and ``splunk`` .

            For more information about using the ``awslogs`` log driver, see `Using the awslogs
            Log Driver
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_awslogs.html>`__
            in the *Amazon Elastic Container Service Developer Guide* .

            .. note::

              If you have a custom driver that is not listed above that you would like to work
              with the Amazon ECS container agent, you can fork the Amazon ECS container agent
              project that is `available on GitHub <https://github.com/aws/amazon-ecs-agent>`__
              and customize it to work with that driver. We encourage you to submit pull requests
              for changes that you would like to have included. However, Amazon Web Services does
              not currently support running modified copies of this software.

            This parameter requires version 1.18 of the Docker Remote API or greater on your
            container instance. To check the Docker Remote API version on your container
            instance, log in to your container instance and run the following command: ``sudo
            docker version --format '{{.Server.APIVersion}}'``

          - **options** *(dict) --*

            The configuration options to send to the log driver. This parameter requires version
            1.19 of the Docker Remote API or greater on your container instance. To check the
            Docker Remote API version on your container instance, log in to your container
            instance and run the following command: ``sudo docker version --format
            '{{.Server.APIVersion}}'``

            - *(string) --*

              - *(string) --*

          - **secretOptions** *(list) --*

            The secrets to pass to the log configuration. For more information, see `Specifying
            Sensitive Data
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html>`__
            in the *Amazon Elastic Container Service Developer Guide* .

            - *(dict) --*

              An object representing the secret to expose to your container. Secrets can be
              exposed to a container in the following ways:

              * To inject sensitive data into your containers as environment variables, use the
              ``secrets`` container definition parameter.

              * To reference sensitive information in the log configuration of a container, use
              the ``secretOptions`` container definition parameter.

              For more information, see `Specifying Sensitive Data
              <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html>`__
              in the *Amazon Elastic Container Service Developer Guide* .

              - **name** *(string) --*

                The name of the secret.

              - **valueFrom** *(string) --*

                The secret to expose to the container. The supported values are either the full
                ARN of the AWS Secrets Manager secret or the full ARN of the parameter in the AWS
                Systems Manager Parameter Store.

                .. note::

                  If the AWS Systems Manager Parameter Store parameter exists in the same Region
                  as the task you are launching, then you can use either the full ARN or name of
                  the parameter. If the parameter exists in a different Region, then the full ARN
                  must be specified.

        - **healthCheck** *(dict) --*

          The health check command and associated configuration parameters for the container.
          This parameter maps to ``HealthCheck`` in the `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
          ``HEALTHCHECK`` parameter of `docker run
          <https://docs.docker.com/engine/reference/run/>`__ .

          - **command** *(list) --*

            A string array representing the command that the container runs to determine if it is
            healthy. The string array must start with ``CMD`` to execute the command arguments
            directly, or ``CMD-SHELL`` to run the command with the container's default shell. For
            example:

             ``[ "CMD-SHELL", "curl -f http://localhost/ || exit 1" ]``

            An exit code of 0 indicates success, and non-zero exit code indicates failure. For
            more information, see ``HealthCheck`` in the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of
            the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ .

            - *(string) --*

          - **interval** *(integer) --*

            The time period in seconds between each health check execution. You may specify
            between 5 and 300 seconds. The default value is 30 seconds.

          - **timeout** *(integer) --*

            The time period in seconds to wait for a health check to succeed before it is
            considered a failure. You may specify between 2 and 60 seconds. The default value is
            5.

          - **retries** *(integer) --*

            The number of times to retry a failed health check before the container is considered
            unhealthy. You may specify between 1 and 10 retries. The default value is 3.

          - **startPeriod** *(integer) --*

            The optional grace period within which to provide containers time to bootstrap before
            failed health checks count towards the maximum number of retries. You may specify
            between 0 and 300 seconds. The ``startPeriod`` is disabled by default.

            .. note::

              If a health check succeeds within the ``startPeriod`` , then the container is
              considered healthy and any subsequent failures count toward the maximum number of
              retries.

        - **systemControls** *(list) --*

          A list of namespaced kernel parameters to set in the container. This parameter maps to
          ``Sysctls`` in the `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--sysctl``
          option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

          .. note::

            It is not recommended that you specify network-related ``systemControls`` parameters
            for multiple containers in a single task that also uses either the ``awsvpc`` or
            ``host`` network modes. For tasks that use the ``awsvpc`` network mode, the container
            that is started last determines which ``systemControls`` parameters take effect. For
            tasks that use the ``host`` network mode, it changes the container instance's
            namespaced kernel parameters as well as the containers.

          - *(dict) --*

            A list of namespaced kernel parameters to set in the container. This parameter maps
            to ``Sysctls`` in the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of
            the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
            ``--sysctl`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__
            .

            It is not recommended that you specify network-related ``systemControls`` parameters
            for multiple containers in a single task that also uses either the ``awsvpc`` or
            ``host`` network mode for the following reasons:

            * For tasks that use the ``awsvpc`` network mode, if you set ``systemControls`` for
            any container, it applies to all containers in the task. If you set different
            ``systemControls`` for multiple containers in a single task, the container that is
            started last determines which ``systemControls`` take effect.

            * For tasks that use the ``host`` network mode, the ``systemControls`` parameter
            applies to the container instance's kernel parameter as well as that of all
            containers of any tasks running on that container instance.

            - **namespace** *(string) --*

              The namespaced kernel parameter for which to set a ``value`` .

            - **value** *(string) --*

              The value for the namespaced kernel parameter specified in ``namespace`` .

        - **resourceRequirements** *(list) --*

          The type and amount of a resource to assign to a container. The only supported resource
          is a GPU.

          - *(dict) --*

            The type and amount of a resource to assign to a container. The supported resource
            types are GPUs and Elastic Inference accelerators. For more information, see `Working
            with GPUs on Amazon ECS
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-gpu.html>`__ or
            `Working with Amazon Elastic Inference on Amazon ECS
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in the
            *Amazon Elastic Container Service Developer Guide*

            - **value** *(string) --*

              The value for the specified resource type.

              If the ``GPU`` type is used, the value is the number of physical ``GPUs`` the
              Amazon ECS container agent will reserve for the container. The number of GPUs
              reserved for all containers in a task should not exceed the number of available
              GPUs on the container instance the task is launched on.

              If the ``InferenceAccelerator`` type is used, the ``value`` should match the
              ``deviceName`` for an  InferenceAccelerator specified in a task definition.

            - **type** *(string) --*

              The type of resource to assign to a container. The supported values are ``GPU`` or
              ``InferenceAccelerator`` .

        - **firelensConfiguration** *(dict) --*

          The FireLens configuration for the container. This is used to specify and configure a
          log router for container logs. For more information, see `Custom Log Routing
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html>`__ in
          the *Amazon Elastic Container Service Developer Guide* .

          - **type** *(string) --*

            The log router to use. The valid values are ``fluentd`` or ``fluentbit`` .

          - **options** *(dict) --*

            The options to use when configuring the log router. This field is optional and can be
            used to add additional metadata, such as the task, task definition, cluster, and
            container instance details to the log event. If specified, the syntax to use is
            ``"options":{"enable-ecs-log-metadata":"true|false"}`` .

            - *(string) --*

              - *(string) --*

    - **family** *(string) --*

      The name of a family that this task definition is registered to. A family groups multiple
      versions of a task definition. Amazon ECS gives the first task definition that you
      registered to a family a revision number of 1. Amazon ECS gives sequential revision numbers
      to each task definition that you add.

    - **taskRoleArn** *(string) --*

      The short name or full Amazon Resource Name (ARN) of the AWS Identity and Access Management
      (IAM) role that grants containers in the task permission to call AWS APIs on your behalf.
      For more information, see `Amazon ECS Task Role
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_IAM_role.html>`__ in the
      *Amazon Elastic Container Service Developer Guide* .

      IAM roles for tasks on Windows require that the ``-EnableTaskIAMRole`` option is set when
      you launch the Amazon ECS-optimized Windows AMI. Your containers must also run some
      configuration code in order to take advantage of the feature. For more information, see
      `Windows IAM Roles for Tasks
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/windows_task_IAM_roles.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

    - **executionRoleArn** *(string) --*

      The Amazon Resource Name (ARN) of the task execution role that containers in this task can
      assume. All containers in this task are granted the permissions that are specified in this
      role.

    - **networkMode** *(string) --*

      The Docker networking mode to use for the containers in the task. The valid values are
      ``none`` , ``bridge`` , ``awsvpc`` , and ``host`` . The default Docker network mode is
      ``bridge`` . If you are using the Fargate launch type, the ``awsvpc`` network mode is
      required. If you are using the EC2 launch type, any network mode can be used. If the
      network mode is set to ``none`` , you cannot specify port mappings in your container
      definitions, and the tasks containers do not have external connectivity. The ``host`` and
      ``awsvpc`` network modes offer the highest networking performance for containers because
      they use the EC2 network stack instead of the virtualized network stack provided by the
      ``bridge`` mode.

      With the ``host`` and ``awsvpc`` network modes, exposed container ports are mapped directly
      to the corresponding host port (for the ``host`` network mode) or the attached elastic
      network interface port (for the ``awsvpc`` network mode), so you cannot take advantage of
      dynamic host port mappings.

      If the network mode is ``awsvpc`` , the task is allocated an elastic network interface, and
      you must specify a  NetworkConfiguration value when you create a service or run a task with
      the task definition. For more information, see `Task Networking
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html>`__ in
      the *Amazon Elastic Container Service Developer Guide* .

      .. note::

        Currently, only Amazon ECS-optimized AMIs, other Amazon Linux variants with the
        ``ecs-init`` package, or AWS Fargate infrastructure support the ``awsvpc`` network mode.

      If the network mode is ``host`` , you cannot run multiple instantiations of the same task
      on a single container instance when port mappings are used.

      Docker for Windows uses different network modes than Docker for Linux. When you register a
      task definition with Windows containers, you must not specify a network mode. If you use
      the console to register a task definition with Windows containers, you must choose the
      ``<default>`` network mode object.

      For more information, see `Network settings
      <https://docs.docker.com/engine/reference/run/#network-settings>`__ in the *Docker run
      reference* .

    - **revision** *(integer) --*

      The revision of the task in a particular family. The revision is a version number of a task
      definition in a family. When you register a task definition for the first time, the
      revision is ``1`` . Each time that you register a new revision of a task definition in the
      same family, the revision value always increases by one, even if you have deregistered
      previous revisions in this family.

    - **volumes** *(list) --*

      The list of volume definitions for the task.

      If your tasks are using the Fargate launch type, the ``host`` and ``sourcePath`` parameters
      are not supported.

      For more information about volume definition parameters and defaults, see `Amazon ECS Task
      Definitions
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definitions.html>`__ in
      the *Amazon Elastic Container Service Developer Guide* .

      - *(dict) --*

        A data volume used in a task definition. For tasks that use a Docker volume, specify a
        ``DockerVolumeConfiguration`` . For tasks that use a bind mount host volume, specify a
        ``host`` and optional ``sourcePath`` . For more information, see `Using Data Volumes in
        Tasks
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_data_volumes.html>`__ .

        - **name** *(string) --*

          The name of the volume. Up to 255 letters (uppercase and lowercase), numbers, and
          hyphens are allowed. This name is referenced in the ``sourceVolume`` parameter of
          container definition ``mountPoints`` .

        - **host** *(dict) --*

          This parameter is specified when you are using bind mount host volumes. Bind mount host
          volumes are supported when you are using either the EC2 or Fargate launch types. The
          contents of the ``host`` parameter determine whether your bind mount host volume
          persists on the host container instance and where it is stored. If the ``host``
          parameter is empty, then the Docker daemon assigns a host path for your data volume.
          However, the data is not guaranteed to persist after the containers associated with it
          stop running.

          Windows containers can mount whole directories on the same drive as
          ``$env:ProgramData`` . Windows containers cannot mount directories on a different
          drive, and mount point cannot be across drives. For example, you can mount
          ``C:\\my\\path:C:\\my\\path`` and ``D:\\:D:\\`` , but not ``D:\\my\\path:C:\\my\\path``
          or ``D:\\:C:\\my\\path`` .

          - **sourcePath** *(string) --*

            When the ``host`` parameter is used, specify a ``sourcePath`` to declare the path on
            the host container instance that is presented to the container. If this parameter is
            empty, then the Docker daemon has assigned a host path for you. If the ``host``
            parameter contains a ``sourcePath`` file location, then the data volume persists at
            the specified location on the host container instance until you delete it manually.
            If the ``sourcePath`` value does not exist on the host container instance, the Docker
            daemon creates it. If the location does exist, the contents of the source path folder
            are exported.

            If you are using the Fargate launch type, the ``sourcePath`` parameter is not
            supported.

        - **dockerVolumeConfiguration** *(dict) --*

          This parameter is specified when you are using Docker volumes. Docker volumes are only
          supported when you are using the EC2 launch type. Windows containers only support the
          use of the ``local`` driver. To use bind mounts, specify a ``host`` instead.

          - **scope** *(string) --*

            The scope for the Docker volume that determines its lifecycle. Docker volumes that
            are scoped to a ``task`` are automatically provisioned when the task starts and
            destroyed when the task stops. Docker volumes that are scoped as ``shared`` persist
            after the task stops.

          - **autoprovision** *(boolean) --*

            If this value is ``true`` , the Docker volume is created if it does not already exist.

            .. note::

              This field is only used if the ``scope`` is ``shared`` .

          - **driver** *(string) --*

            The Docker volume driver to use. The driver value must match the driver name provided
            by Docker because it is used for task placement. If the driver was installed using
            the Docker plugin CLI, use ``docker plugin ls`` to retrieve the driver name from your
            container instance. If the driver was installed using another method, use Docker
            plugin discovery to retrieve the driver name. For more information, see `Docker
            plugin discovery
            <https://docs.docker.com/engine/extend/plugin_api/#plugin-discovery>`__ . This
            parameter maps to ``Driver`` in the `Create a volume
            <https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
            ``xxdriver`` option to `docker volume create
            <https://docs.docker.com/engine/reference/commandline/volume_create/>`__ .

          - **driverOpts** *(dict) --*

            A map of Docker driver-specific options passed through. This parameter maps to
            ``DriverOpts`` in the `Create a volume
            <https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``xxopt``
            option to `docker volume create
            <https://docs.docker.com/engine/reference/commandline/volume_create/>`__ .

            - *(string) --*

              - *(string) --*

          - **labels** *(dict) --*

            Custom metadata to add to your Docker volume. This parameter maps to ``Labels`` in
            the `Create a volume
            <https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``xxlabel``
            option to `docker volume create
            <https://docs.docker.com/engine/reference/commandline/volume_create/>`__ .

            - *(string) --*

              - *(string) --*

    - **status** *(string) --*

      The status of the task definition.

    - **requiresAttributes** *(list) --*

      The container instance attributes required by your task. This field is not valid if you are
      using the Fargate launch type for your task.

      - *(dict) --*

        An attribute is a name-value pair associated with an Amazon ECS object. Attributes enable
        you to extend the Amazon ECS data model by adding custom metadata to your resources. For
        more information, see `Attributes
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html#attributes>`__
        in the *Amazon Elastic Container Service Developer Guide* .

        - **name** *(string) --*

          The name of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
          hyphens, underscores, and periods are allowed.

        - **value** *(string) --*

          The value of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
          hyphens, underscores, periods, at signs (@), forward slashes, colons, and spaces are
          allowed.

        - **targetType** *(string) --*

          The type of the target with which to attach the attribute. This parameter is required
          if you use the short form ID for a resource instead of the full ARN.

        - **targetId** *(string) --*

          The ID of the target. You can specify the short form ID for a resource or the full
          Amazon Resource Name (ARN).

    - **placementConstraints** *(list) --*

      An array of placement constraint objects to use for tasks. This field is not valid if you
      are using the Fargate launch type for your task.

      - *(dict) --*

        An object representing a constraint on task placement in the task definition. For more
        information, see `Task Placement Constraints
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html>`__
        in the *Amazon Elastic Container Service Developer Guide* .

        .. note::

          If you are using the Fargate launch type, task placement constraints are not supported.

        - **type** *(string) --*

          The type of constraint. The ``MemberOf`` constraint restricts selection to be from a
          group of valid candidates.

        - **expression** *(string) --*

          A cluster query language expression to apply to the constraint. For more information,
          see `Cluster Query Language
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

    - **compatibilities** *(list) --*

      The launch type to use with your task. For more information, see `Amazon ECS Launch Types
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html>`__ in the
      *Amazon Elastic Container Service Developer Guide* .

      - *(string) --*

    - **requiresCompatibilities** *(list) --*

      The launch type the task requires. If no value is specified, it will default to ``EC2`` .
      Valid values include ``EC2`` and ``FARGATE`` .

      - *(string) --*

    - **cpu** *(string) --*

      The number of ``cpu`` units used by the task. If you are using the EC2 launch type, this
      field is optional and any value can be used. If you are using the Fargate launch type, this
      field is required and you must use one of the following values, which determines your range
      of valid values for the ``memory`` parameter:

      * 256 (.25 vCPU) - Available ``memory`` values: 512 (0.5 GB), 1024 (1 GB), 2048 (2 GB)

      * 512 (.5 vCPU) - Available ``memory`` values: 1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096
      (4 GB)

      * 1024 (1 vCPU) - Available ``memory`` values: 2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120
      (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB)

      * 2048 (2 vCPU) - Available ``memory`` values: Between 4096 (4 GB) and 16384 (16 GB) in
      increments of 1024 (1 GB)

      * 4096 (4 vCPU) - Available ``memory`` values: Between 8192 (8 GB) and 30720 (30 GB) in
      increments of 1024 (1 GB)

    - **memory** *(string) --*

      The amount (in MiB) of memory used by the task.

      If using the EC2 launch type, this field is optional and any value can be used. If a
      task-level memory value is specified then the container-level memory value is optional.

      If using the Fargate launch type, this field is required and you must use one of the
      following values, which determines your range of valid values for the ``cpu`` parameter:

      * 512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) - Available ``cpu`` values: 256 (.25 vCPU)

      * 1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available ``cpu`` values: 512 (.5
      vCPU)

      * 2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB)
      - Available ``cpu`` values: 1024 (1 vCPU)

      * Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB) - Available ``cpu``
      values: 2048 (2 vCPU)

      * Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB) - Available ``cpu``
      values: 4096 (4 vCPU)

    - **inferenceAccelerators** *(list) --*

      The Elastic Inference accelerator associated with the task.

      - *(dict) --*

        Details on a Elastic Inference accelerator. For more information, see `Working with
        Amazon Elastic Inference on Amazon ECS
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in the
        *Amazon Elastic Container Service Developer Guide* .

        - **deviceName** *(string) --*

          The Elastic Inference accelerator device name. The ``deviceName`` must also be
          referenced in a container definition as a  ResourceRequirement .

        - **deviceType** *(string) --*

          The Elastic Inference accelerator type to use.

    - **pidMode** *(string) --*

      The process namespace to use for the containers in the task. The valid values are ``host``
      or ``task`` . If ``host`` is specified, then all containers within the tasks that specified
      the ``host`` PID mode on the same container instance share the same process namespace with
      the host Amazon EC2 instance. If ``task`` is specified, all containers within the specified
      task share the same process namespace. If no value is specified, the default is a private
      namespace. For more information, see `PID settings
      <https://docs.docker.com/engine/reference/run/#pid-settings---pid>`__ in the *Docker run
      reference* .

      If the ``host`` PID mode is used, be aware that there is a heightened risk of undesired
      process namespace expose. For more information, see `Docker security
      <https://docs.docker.com/engine/security/security/>`__ .

      .. note::

        This parameter is not supported for Windows containers or tasks using the Fargate launch
        type.

    - **ipcMode** *(string) --*

      The IPC resource namespace to use for the containers in the task. The valid values are
      ``host`` , ``task`` , or ``none`` . If ``host`` is specified, then all containers within
      the tasks that specified the ``host`` IPC mode on the same container instance share the
      same IPC resources with the host Amazon EC2 instance. If ``task`` is specified, all
      containers within the specified task share the same IPC resources. If ``none`` is
      specified, then IPC resources within the containers of a task are private and not shared
      with other containers in a task or on the container instance. If no value is specified,
      then the IPC resource namespace sharing depends on the Docker daemon setting on the
      container instance. For more information, see `IPC settings
      <https://docs.docker.com/engine/reference/run/#ipc-settings---ipc>`__ in the *Docker run
      reference* .

      If the ``host`` IPC mode is used, be aware that there is a heightened risk of undesired IPC
      namespace expose. For more information, see `Docker security
      <https://docs.docker.com/engine/security/security/>`__ .

      If you are setting namespaced kernel parameters using ``systemControls`` for the containers
      in the task, the following will apply to your IPC resource namespace. For more information,
      see `System Controls
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

      * For tasks that use the ``host`` IPC mode, IPC namespace related ``systemControls`` are
      not supported.

      * For tasks that use the ``task`` IPC mode, IPC namespace related ``systemControls`` will
      apply to all containers within a task.

      .. note::

        This parameter is not supported for Windows containers or tasks using the Fargate launch
        type.

    - **proxyConfiguration** *(dict) --*

      The configuration details for the App Mesh proxy.

      Your Amazon ECS container instances require at least version 1.26.0 of the container agent
      and at least version 1.26.0-1 of the ``ecs-init`` package to enable a proxy configuration.
      If your container instances are launched from the Amazon ECS-optimized AMI version
      ``20190301`` or later, then they contain the required versions of the container agent and
      ``ecs-init`` . For more information, see `Amazon ECS-optimized Linux AMI
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html>`__ in
      the *Amazon Elastic Container Service Developer Guide* .

      - **type** *(string) --*

        The proxy type. The only supported value is ``APPMESH`` .

      - **containerName** *(string) --*

        The name of the container that will serve as the App Mesh proxy.

      - **properties** *(list) --*

        The set of network configuration parameters to provide the Container Network Interface
        (CNI) plugin, specified as key-value pairs.

        * ``IgnoredUID`` - (Required) The user ID (UID) of the proxy container as defined by the
        ``user`` parameter in a container definition. This is used to ensure the proxy ignores
        its own traffic. If ``IgnoredGID`` is specified, this field can be empty.

        * ``IgnoredGID`` - (Required) The group ID (GID) of the proxy container as defined by the
        ``user`` parameter in a container definition. This is used to ensure the proxy ignores
        its own traffic. If ``IgnoredUID`` is specified, this field can be empty.

        * ``AppPorts`` - (Required) The list of ports that the application uses. Network traffic
        to these ports is forwarded to the ``ProxyIngressPort`` and ``ProxyEgressPort`` .

        * ``ProxyIngressPort`` - (Required) Specifies the port that incoming traffic to the
        ``AppPorts`` is directed to.

        * ``ProxyEgressPort`` - (Required) Specifies the port that outgoing traffic from the
        ``AppPorts`` is directed to.

        * ``EgressIgnoredPorts`` - (Required) The egress traffic going to the specified ports is
        ignored and not redirected to the ``ProxyEgressPort`` . It can be an empty list.

        * ``EgressIgnoredIPs`` - (Required) The egress traffic going to the specified IP
        addresses is ignored and not redirected to the ``ProxyEgressPort`` . It can be an empty
        list.

        - *(dict) --*

          A key-value pair object.

          - **name** *(string) --*

            The name of the key-value pair. For environment variables, this is the name of the
            environment variable.

          - **value** *(string) --*

            The value of the key-value pair. For environment variables, this is the value of the
            environment variable.
    """


_ClientDeregisterTaskDefinitionResponseTypeDef = TypedDict(
    "_ClientDeregisterTaskDefinitionResponseTypeDef",
    {"taskDefinition": ClientDeregisterTaskDefinitionResponsetaskDefinitionTypeDef},
    total=False,
)


class ClientDeregisterTaskDefinitionResponseTypeDef(
    _ClientDeregisterTaskDefinitionResponseTypeDef
):
    """
    Type definition for `ClientDeregisterTaskDefinition` `Response`

    - **taskDefinition** *(dict) --*

      The full description of the deregistered task.

      - **taskDefinitionArn** *(string) --*

        The full Amazon Resource Name (ARN) of the task definition.

      - **containerDefinitions** *(list) --*

        A list of container definitions in JSON format that describe the different containers that
        make up your task. For more information about container definition parameters and defaults,
        see `Amazon ECS Task Definitions
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_defintions.html>`__ in
        the *Amazon Elastic Container Service Developer Guide* .

        - *(dict) --*

          Container definitions are used in task definitions to describe the different containers
          that are launched as part of a task.

          - **name** *(string) --*

            The name of a container. If you are linking multiple containers together in a task
            definition, the ``name`` of one container can be entered in the ``links`` of another
            container to connect the containers. Up to 255 letters (uppercase and lowercase),
            numbers, and hyphens are allowed. This parameter maps to ``name`` in the `Create a
            container <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__
            section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and
            the ``--name`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__
            .

          - **image** *(string) --*

            The image used to start a container. This string is passed directly to the Docker
            daemon. Images in the Docker Hub registry are available by default. Other repositories
            are specified with either `` *repository-url* /*image* :*tag* `` or `` *repository-url*
            /*image* @*digest* `` . Up to 255 letters (uppercase and lowercase), numbers, hyphens,
            underscores, colons, periods, forward slashes, and number signs are allowed. This
            parameter maps to ``Image`` in the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``IMAGE``
            parameter of `docker run <https://docs.docker.com/engine/reference/run/>`__ .

            * When a new task starts, the Amazon ECS container agent pulls the latest version of
            the specified image and tag for the container to use. However, subsequent updates to a
            repository image are not propagated to already running tasks.

            * Images in Amazon ECR repositories can be specified by either using the full
            ``registry/repository:tag`` or ``registry/repository@digest`` . For example,
            ``012345678910.dkr.ecr.<region-name>.amazonaws.com/<repository-name>:latest`` or
            ``012345678910.dkr.ecr.<region-name>.amazonaws.com/<repository-name>@sha256:94afd1f2e64d908bc90dbca0035a5b567EXAMPLE``
            .

            * Images in official repositories on Docker Hub use a single name (for example,
            ``ubuntu`` or ``mongo`` ).

            * Images in other repositories on Docker Hub are qualified with an organization name
            (for example, ``amazon/amazon-ecs-agent`` ).

            * Images in other online repositories are qualified further by a domain name (for
            example, ``quay.io/assemblyline/ubuntu`` ).

          - **repositoryCredentials** *(dict) --*

            The private repository authentication credentials to use.

            - **credentialsParameter** *(string) --*

              The Amazon Resource Name (ARN) of the secret containing the private repository
              credentials.

              .. note::

                When you are using the Amazon ECS API, AWS CLI, or AWS SDK, if the secret exists in
                the same Region as the task that you are launching then you can use either the full
                ARN or the name of the secret. When you are using the AWS Management Console, you
                must specify the full ARN of the secret.

          - **cpu** *(integer) --*

            The number of ``cpu`` units reserved for the container. This parameter maps to
            ``CpuShares`` in the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
            ``--cpu-shares`` option to `docker run
            <https://docs.docker.com/engine/reference/run/>`__ .

            This field is optional for tasks using the Fargate launch type, and the only
            requirement is that the total amount of CPU reserved for all containers within a task
            be lower than the task-level ``cpu`` value.

            .. note::

              You can determine the number of CPU units that are available per EC2 instance type by
              multiplying the vCPUs listed for that instance type on the `Amazon EC2 Instances
              <http://aws.amazon.com/ec2/instance-types/>`__ detail page by 1,024.

            For example, if you run a single-container task on a single-core instance type with 512
            CPU units specified for that container, and that is the only task running on the
            container instance, that container could use the full 1,024 CPU unit share at any given
            time. However, if you launched another copy of the same task on that container
            instance, each task would be guaranteed a minimum of 512 CPU units when needed, and
            each container could float to higher CPU usage if the other container was not using it,
            but if both tasks were 100% active all of the time, they would be limited to 512 CPU
            units.

            Linux containers share unallocated CPU units with other containers on the container
            instance with the same ratio as their allocated amount. For example, if you run a
            single-container task on a single-core instance type with 512 CPU units specified for
            that container, and that is the only task running on the container instance, that
            container could use the full 1,024 CPU unit share at any given time. However, if you
            launched another copy of the same task on that container instance, each task would be
            guaranteed a minimum of 512 CPU units when needed, and each container could float to
            higher CPU usage if the other container was not using it, but if both tasks were 100%
            active all of the time, they would be limited to 512 CPU units.

            On Linux container instances, the Docker daemon on the container instance uses the CPU
            value to calculate the relative CPU share ratios for running containers. For more
            information, see `CPU share constraint
            <https://docs.docker.com/engine/reference/run/#cpu-share-constraint>`__ in the Docker
            documentation. The minimum valid CPU share value that the Linux kernel allows is 2.
            However, the CPU parameter is not required, and you can use CPU values below 2 in your
            container definitions. For CPU values below 2 (including null), the behavior varies
            based on your Amazon ECS container agent version:

            * **Agent versions less than or equal to 1.1.0:** Null and zero CPU values are passed
            to Docker as 0, which Docker then converts to 1,024 CPU shares. CPU values of 1 are
            passed to Docker as 1, which the Linux kernel converts to two CPU shares.

            * **Agent versions greater than or equal to 1.2.0:** Null, zero, and CPU values of 1
            are passed to Docker as 2.

            On Windows container instances, the CPU limit is enforced as an absolute limit, or a
            quota. Windows containers only have access to the specified amount of CPU that is
            described in the task definition.

          - **memory** *(integer) --*

            The amount (in MiB) of memory to present to the container. If your container attempts
            to exceed the memory specified here, the container is killed. The total amount of
            memory reserved for all containers within a task must be lower than the task ``memory``
            value, if one is specified. This parameter maps to ``Memory`` in the `Create a
            container <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__
            section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and
            the ``--memory`` option to `docker run
            <https://docs.docker.com/engine/reference/run/>`__ .

            If using the Fargate launch type, this parameter is optional.

            If using the EC2 launch type, you must specify either a task-level memory value or a
            container-level memory value. If you specify both a container-level ``memory`` and
            ``memoryReservation`` value, ``memory`` must be greater than ``memoryReservation`` . If
            you specify ``memoryReservation`` , then that value is subtracted from the available
            memory resources for the container instance on which the container is placed.
            Otherwise, the value of ``memory`` is used.

            The Docker daemon reserves a minimum of 4 MiB of memory for a container, so you should
            not specify fewer than 4 MiB of memory for your containers.

          - **memoryReservation** *(integer) --*

            The soft limit (in MiB) of memory to reserve for the container. When system memory is
            under heavy contention, Docker attempts to keep the container memory to this soft
            limit. However, your container can consume more memory when it needs to, up to either
            the hard limit specified with the ``memory`` parameter (if applicable), or all of the
            available memory on the container instance, whichever comes first. This parameter maps
            to ``MemoryReservation`` in the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
            ``--memory-reservation`` option to `docker run
            <https://docs.docker.com/engine/reference/run/>`__ .

            If a task-level memory value is not specified, you must specify a non-zero integer for
            one or both of ``memory`` or ``memoryReservation`` in a container definition. If you
            specify both, ``memory`` must be greater than ``memoryReservation`` . If you specify
            ``memoryReservation`` , then that value is subtracted from the available memory
            resources for the container instance on which the container is placed. Otherwise, the
            value of ``memory`` is used.

            For example, if your container normally uses 128 MiB of memory, but occasionally bursts
            to 256 MiB of memory for short periods of time, you can set a ``memoryReservation`` of
            128 MiB, and a ``memory`` hard limit of 300 MiB. This configuration would allow the
            container to only reserve 128 MiB of memory from the remaining resources on the
            container instance, but also allow the container to consume more memory resources when
            needed.

            The Docker daemon reserves a minimum of 4 MiB of memory for a container, so you should
            not specify fewer than 4 MiB of memory for your containers.

          - **links** *(list) --*

            The ``links`` parameter allows containers to communicate with each other without the
            need for port mappings. This parameter is only supported if the network mode of a task
            definition is ``bridge`` . The ``name:internalName`` construct is analogous to
            ``name:alias`` in Docker links. Up to 255 letters (uppercase and lowercase), numbers,
            and hyphens are allowed. For more information about linking Docker containers, go to
            `Legacy container links <https://docs.docker.com/network/links/>`__ in the Docker
            documentation. This parameter maps to ``Links`` in the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--link``
            option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

            .. note::

              This parameter is not supported for Windows containers.

            .. warning::

              Containers that are collocated on a single container instance may be able to
              communicate with each other without requiring links or host port mappings. Network
              isolation is achieved on the container instance using security groups and VPC
              settings.

            - *(string) --*

          - **portMappings** *(list) --*

            The list of port mappings for the container. Port mappings allow containers to access
            ports on the host container instance to send or receive traffic.

            For task definitions that use the ``awsvpc`` network mode, you should only specify the
            ``containerPort`` . The ``hostPort`` can be left blank or it must be the same value as
            the ``containerPort`` .

            Port mappings on Windows use the ``NetNAT`` gateway address rather than ``localhost`` .
            There is no loopback for port mappings on Windows, so you cannot access a container's
            mapped port from the host itself.

            This parameter maps to ``PortBindings`` in the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--publish``
            option to `docker run <https://docs.docker.com/engine/reference/run/>`__ . If the
            network mode of a task definition is set to ``none`` , then you can't specify port
            mappings. If the network mode of a task definition is set to ``host`` , then host ports
            must either be undefined or they must match the container port in the port mapping.

            .. note::

              After a task reaches the ``RUNNING`` status, manual and automatic host and container
              port assignments are visible in the **Network Bindings** section of a container
              description for a selected task in the Amazon ECS console. The assignments are also
              visible in the ``networkBindings`` section  DescribeTasks responses.

            - *(dict) --*

              Port mappings allow containers to access ports on the host container instance to send
              or receive traffic. Port mappings are specified as part of the container definition.

              If you are using containers in a task with the ``awsvpc`` or ``host`` network mode,
              exposed ports should be specified using ``containerPort`` . The ``hostPort`` can be
              left blank or it must be the same value as the ``containerPort`` .

              After a task reaches the ``RUNNING`` status, manual and automatic host and container
              port assignments are visible in the ``networkBindings`` section of  DescribeTasks API
              responses.

              - **containerPort** *(integer) --*

                The port number on the container that is bound to the user-specified or
                automatically assigned host port.

                If you are using containers in a task with the ``awsvpc`` or ``host`` network mode,
                exposed ports should be specified using ``containerPort`` .

                If you are using containers in a task with the ``bridge`` network mode and you
                specify a container port and not a host port, your container automatically receives
                a host port in the ephemeral port range. For more information, see ``hostPort`` .
                Port mappings that are automatically assigned in this way do not count toward the
                100 reserved ports limit of a container instance.

                .. warning::

                  You cannot expose the same container port for multiple protocols. An error will
                  be returned if this is attempted.

              - **hostPort** *(integer) --*

                The port number on the container instance to reserve for your container.

                If you are using containers in a task with the ``awsvpc`` or ``host`` network mode,
                the ``hostPort`` can either be left blank or set to the same value as the
                ``containerPort`` .

                If you are using containers in a task with the ``bridge`` network mode, you can
                specify a non-reserved host port for your container port mapping, or you can omit
                the ``hostPort`` (or set it to ``0`` ) while specifying a ``containerPort`` and
                your container automatically receives a port in the ephemeral port range for your
                container instance operating system and Docker version.

                The default ephemeral port range for Docker version 1.6.0 and later is listed on
                the instance under ``/proc/sys/net/ipv4/ip_local_port_range`` . If this kernel
                parameter is unavailable, the default ephemeral port range from 49153 through 65535
                is used. Do not attempt to specify a host port in the ephemeral port range as these
                are reserved for automatic assignment. In general, ports below 32768 are outside of
                the ephemeral port range.

                .. note::

                  The default ephemeral port range from 49153 through 65535 is always used for
                  Docker versions before 1.6.0.

                The default reserved ports are 22 for SSH, the Docker ports 2375 and 2376, and the
                Amazon ECS container agent ports 51678-51680. Any host port that was previously
                specified in a running task is also reserved while the task is running (after a
                task stops, the host port is released). The current reserved ports are displayed in
                the ``remainingResources`` of  DescribeContainerInstances output. A container
                instance can have up to 100 reserved ports at a time, including the default
                reserved ports. Automatically assigned ports don't count toward the 100 reserved
                ports limit.

              - **protocol** *(string) --*

                The protocol used for the port mapping. Valid values are ``tcp`` and ``udp`` . The
                default is ``tcp`` .

          - **essential** *(boolean) --*

            If the ``essential`` parameter of a container is marked as ``true`` , and that
            container fails or stops for any reason, all other containers that are part of the task
            are stopped. If the ``essential`` parameter of a container is marked as ``false`` ,
            then its failure does not affect the rest of the containers in a task. If this
            parameter is omitted, a container is assumed to be essential.

            All tasks must have at least one essential container. If you have an application that
            is composed of multiple containers, you should group containers that are used for a
            common purpose into components, and separate the different components into multiple
            task definitions. For more information, see `Application Architecture
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/application_architecture.html>`__
            in the *Amazon Elastic Container Service Developer Guide* .

          - **entryPoint** *(list) --*

            .. warning::

              Early versions of the Amazon ECS container agent do not properly handle
              ``entryPoint`` parameters. If you have problems using ``entryPoint`` , update your
              container agent or enter your commands and arguments as ``command`` array items
              instead.

            The entry point that is passed to the container. This parameter maps to ``Entrypoint``
            in the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
            ``--entrypoint`` option to `docker run
            <https://docs.docker.com/engine/reference/run/>`__ . For more information, see
            `https\\://docs.docker.com/engine/reference/builder/#entrypoint
            <https://docs.docker.com/engine/reference/builder/#entrypoint>`__ .

            - *(string) --*

          - **command** *(list) --*

            The command that is passed to the container. This parameter maps to ``Cmd`` in the
            `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``COMMAND``
            parameter to `docker run <https://docs.docker.com/engine/reference/run/>`__ . For more
            information, see `https\\://docs.docker.com/engine/reference/builder/#cmd
            <https://docs.docker.com/engine/reference/builder/#cmd>`__ . If there are multiple
            arguments, each argument should be a separated string in the array.

            - *(string) --*

          - **environment** *(list) --*

            The environment variables to pass to a container. This parameter maps to ``Env`` in the
            `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--env``
            option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

            .. warning::

              We do not recommend using plaintext environment variables for sensitive information,
              such as credential data.

            - *(dict) --*

              A key-value pair object.

              - **name** *(string) --*

                The name of the key-value pair. For environment variables, this is the name of the
                environment variable.

              - **value** *(string) --*

                The value of the key-value pair. For environment variables, this is the value of
                the environment variable.

          - **mountPoints** *(list) --*

            The mount points for data volumes in your container.

            This parameter maps to ``Volumes`` in the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--volume``
            option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

            Windows containers can mount whole directories on the same drive as
            ``$env:ProgramData`` . Windows containers cannot mount directories on a different
            drive, and mount point cannot be across drives.

            - *(dict) --*

              Details on a volume mount point that is used in a container definition.

              - **sourceVolume** *(string) --*

                The name of the volume to mount. Must be a volume name referenced in the ``name``
                parameter of task definition ``volume`` .

              - **containerPath** *(string) --*

                The path on the container to mount the host volume at.

              - **readOnly** *(boolean) --*

                If this value is ``true`` , the container has read-only access to the volume. If
                this value is ``false`` , then the container can write to the volume. The default
                value is ``false`` .

          - **volumesFrom** *(list) --*

            Data volumes to mount from another container. This parameter maps to ``VolumesFrom`` in
            the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
            ``--volumes-from`` option to `docker run
            <https://docs.docker.com/engine/reference/run/>`__ .

            - *(dict) --*

              Details on a data volume from another container in the same task definition.

              - **sourceContainer** *(string) --*

                The name of another container within the same task definition from which to mount
                volumes.

              - **readOnly** *(boolean) --*

                If this value is ``true`` , the container has read-only access to the volume. If
                this value is ``false`` , then the container can write to the volume. The default
                value is ``false`` .

          - **linuxParameters** *(dict) --*

            Linux-specific modifications that are applied to the container, such as Linux kernel
            capabilities. For more information see  KernelCapabilities .

            .. note::

              This parameter is not supported for Windows containers.

            - **capabilities** *(dict) --*

              The Linux capabilities for the container that are added to or dropped from the
              default configuration provided by Docker.

              .. note::

                If you are using tasks that use the Fargate launch type, ``capabilities`` is
                supported but the ``add`` parameter is not supported.

              - **add** *(list) --*

                The Linux capabilities for the container that have been added to the default
                configuration provided by Docker. This parameter maps to ``CapAdd`` in the `Create
                a container
                <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of
                the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
                ``--cap-add`` option to `docker run
                <https://docs.docker.com/engine/reference/run/>`__ .

                .. note::

                  If you are using tasks that use the Fargate launch type, the ``add`` parameter is
                  not supported.

                Valid values: ``"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" | "BLOCK_SUSPEND" | "CHOWN"
                | "DAC_OVERRIDE" | "DAC_READ_SEARCH" | "FOWNER" | "FSETID" | "IPC_LOCK" |
                "IPC_OWNER" | "KILL" | "LEASE" | "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" |
                "MKNOD" | "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" |
                "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT" |
                "SYS_CHROOT" | "SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" | "SYS_PTRACE" | "SYS_RAWIO"
                | "SYS_RESOURCE" | "SYS_TIME" | "SYS_TTY_CONFIG" | "SYSLOG" | "WAKE_ALARM"``

                - *(string) --*

              - **drop** *(list) --*

                The Linux capabilities for the container that have been removed from the default
                configuration provided by Docker. This parameter maps to ``CapDrop`` in the `Create
                a container
                <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of
                the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
                ``--cap-drop`` option to `docker run
                <https://docs.docker.com/engine/reference/run/>`__ .

                Valid values: ``"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" | "BLOCK_SUSPEND" | "CHOWN"
                | "DAC_OVERRIDE" | "DAC_READ_SEARCH" | "FOWNER" | "FSETID" | "IPC_LOCK" |
                "IPC_OWNER" | "KILL" | "LEASE" | "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" |
                "MKNOD" | "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" |
                "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT" |
                "SYS_CHROOT" | "SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" | "SYS_PTRACE" | "SYS_RAWIO"
                | "SYS_RESOURCE" | "SYS_TIME" | "SYS_TTY_CONFIG" | "SYSLOG" | "WAKE_ALARM"``

                - *(string) --*

            - **devices** *(list) --*

              Any host devices to expose to the container. This parameter maps to ``Devices`` in
              the `Create a container
              <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of
              the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
              ``--device`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__
              .

              .. note::

                If you are using tasks that use the Fargate launch type, the ``devices`` parameter
                is not supported.

              - *(dict) --*

                An object representing a container instance host device.

                - **hostPath** *(string) --*

                  The path for the device on the host container instance.

                - **containerPath** *(string) --*

                  The path inside the container at which to expose the host device.

                - **permissions** *(list) --*

                  The explicit permissions to provide to the container for the device. By default,
                  the container has permissions for ``read`` , ``write`` , and ``mknod`` for the
                  device.

                  - *(string) --*

            - **initProcessEnabled** *(boolean) --*

              Run an ``init`` process inside the container that forwards signals and reaps
              processes. This parameter maps to the ``--init`` option to `docker run
              <https://docs.docker.com/engine/reference/run/>`__ . This parameter requires version
              1.25 of the Docker Remote API or greater on your container instance. To check the
              Docker Remote API version on your container instance, log in to your container
              instance and run the following command: ``sudo docker version --format
              '{{.Server.APIVersion}}'``

            - **sharedMemorySize** *(integer) --*

              The value for the size (in MiB) of the ``/dev/shm`` volume. This parameter maps to
              the ``--shm-size`` option to `docker run
              <https://docs.docker.com/engine/reference/run/>`__ .

              .. note::

                If you are using tasks that use the Fargate launch type, the ``sharedMemorySize``
                parameter is not supported.

            - **tmpfs** *(list) --*

              The container path, mount options, and size (in MiB) of the tmpfs mount. This
              parameter maps to the ``--tmpfs`` option to `docker run
              <https://docs.docker.com/engine/reference/run/>`__ .

              .. note::

                If you are using tasks that use the Fargate launch type, the ``tmpfs`` parameter is
                not supported.

              - *(dict) --*

                The container path, mount options, and size of the tmpfs mount.

                - **containerPath** *(string) --*

                  The absolute file path where the tmpfs volume is to be mounted.

                - **size** *(integer) --*

                  The size (in MiB) of the tmpfs volume.

                - **mountOptions** *(list) --*

                  The list of tmpfs volume mount options.

                  Valid values: ``"defaults" | "ro" | "rw" | "suid" | "nosuid" | "dev" | "nodev" |
                  "exec" | "noexec" | "sync" | "async" | "dirsync" | "remount" | "mand" | "nomand"
                  | "atime" | "noatime" | "diratime" | "nodiratime" | "bind" | "rbind" |
                  "unbindable" | "runbindable" | "private" | "rprivate" | "shared" | "rshared" |
                  "slave" | "rslave" | "relatime" | "norelatime" | "strictatime" | "nostrictatime"
                  | "mode" | "uid" | "gid" | "nr_inodes" | "nr_blocks" | "mpol"``

                  - *(string) --*

            - **maxSwap** *(integer) --*

              The total amount of swap memory (in MiB) a container can use. This parameter will be
              translated to the ``--memory-swap`` option to `docker run
              <https://docs.docker.com/engine/reference/run/>`__ where the value would be the sum
              of the container memory plus the ``maxSwap`` value.

              If a ``maxSwap`` value of ``0`` is specified, the container will not use swap.
              Accepted values are ``0`` or any positive integer. If the ``maxSwap`` parameter is
              omitted, the container will use the swap configuration for the container instance it
              is running on. A ``maxSwap`` value must be set for the ``swappiness`` parameter to be
              used.

              .. note::

                If you are using tasks that use the Fargate launch type, the ``maxSwap`` parameter
                is not supported.

            - **swappiness** *(integer) --*

              This allows you to tune a container's memory swappiness behavior. A ``swappiness``
              value of ``0`` will cause swapping to not happen unless absolutely necessary. A
              ``swappiness`` value of ``100`` will cause pages to be swapped very aggressively.
              Accepted values are whole numbers between ``0`` and ``100`` . If the ``swappiness``
              parameter is not specified, a default value of ``60`` is used. If a value is not
              specified for ``maxSwap`` then this parameter is ignored. This parameter maps to the
              ``--memory-swappiness`` option to `docker run
              <https://docs.docker.com/engine/reference/run/>`__ .

              .. note::

                If you are using tasks that use the Fargate launch type, the ``swappiness``
                parameter is not supported.

          - **secrets** *(list) --*

            The secrets to pass to the container. For more information, see `Specifying Sensitive
            Data
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html>`__
            in the *Amazon Elastic Container Service Developer Guide* .

            - *(dict) --*

              An object representing the secret to expose to your container. Secrets can be exposed
              to a container in the following ways:

              * To inject sensitive data into your containers as environment variables, use the
              ``secrets`` container definition parameter.

              * To reference sensitive information in the log configuration of a container, use the
              ``secretOptions`` container definition parameter.

              For more information, see `Specifying Sensitive Data
              <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html>`__
              in the *Amazon Elastic Container Service Developer Guide* .

              - **name** *(string) --*

                The name of the secret.

              - **valueFrom** *(string) --*

                The secret to expose to the container. The supported values are either the full ARN
                of the AWS Secrets Manager secret or the full ARN of the parameter in the AWS
                Systems Manager Parameter Store.

                .. note::

                  If the AWS Systems Manager Parameter Store parameter exists in the same Region as
                  the task you are launching, then you can use either the full ARN or name of the
                  parameter. If the parameter exists in a different Region, then the full ARN must
                  be specified.

          - **dependsOn** *(list) --*

            The dependencies defined for container startup and shutdown. A container can contain
            multiple dependencies. When a dependency is defined for container startup, for
            container shutdown it is reversed.

            For tasks using the EC2 launch type, the container instances require at least version
            1.26.0 of the container agent to enable container dependencies. However, we recommend
            using the latest container agent version. For information about checking your agent
            version and updating to the latest version, see `Updating the Amazon ECS Container
            Agent
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html>`__
            in the *Amazon Elastic Container Service Developer Guide* . If you are using an Amazon
            ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the
            ``ecs-init`` package. If your container instances are launched from version
            ``20190301`` or later, then they contain the required versions of the container agent
            and ``ecs-init`` . For more information, see `Amazon ECS-optimized Linux AMI
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html>`__
            in the *Amazon Elastic Container Service Developer Guide* .

            For tasks using the Fargate launch type, the task or service requires platform version
            ``1.3.0`` or later.

            - *(dict) --*

              The dependencies defined for container startup and shutdown. A container can contain
              multiple dependencies. When a dependency is defined for container startup, for
              container shutdown it is reversed.

              Your Amazon ECS container instances require at least version 1.26.0 of the container
              agent to enable container dependencies. However, we recommend using the latest
              container agent version. For information about checking your agent version and
              updating to the latest version, see `Updating the Amazon ECS Container Agent
              <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html>`__
              in the *Amazon Elastic Container Service Developer Guide* . If you are using an
              Amazon ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the
              ``ecs-init`` package. If your container instances are launched from version
              ``20190301`` or later, then they contain the required versions of the container agent
              and ``ecs-init`` . For more information, see `Amazon ECS-optimized Linux AMI
              <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html>`__
              in the *Amazon Elastic Container Service Developer Guide* .

              .. note::

                If you are using tasks that use the Fargate launch type, container dependency
                parameters are not supported.

              - **containerName** *(string) --*

                The name of a container.

              - **condition** *(string) --*

                The dependency condition of the container. The following are the available
                conditions and their behavior:

                * ``START`` - This condition emulates the behavior of links and volumes today. It
                validates that a dependent container is started before permitting other containers
                to start.

                * ``COMPLETE`` - This condition validates that a dependent container runs to
                completion (exits) before permitting other containers to start. This can be useful
                for nonessential containers that run a script and then exit.

                * ``SUCCESS`` - This condition is the same as ``COMPLETE`` , but it also requires
                that the container exits with a ``zero`` status.

                * ``HEALTHY`` - This condition validates that the dependent container passes its
                Docker health check before permitting other containers to start. This requires that
                the dependent container has health checks configured. This condition is confirmed
                only at task startup.

          - **startTimeout** *(integer) --*

            Time duration (in seconds) to wait before giving up on resolving dependencies for a
            container. For example, you specify two containers in a task definition with containerA
            having a dependency on containerB reaching a ``COMPLETE`` , ``SUCCESS`` , or
            ``HEALTHY`` status. If a ``startTimeout`` value is specified for containerB and it does
            not reach the desired status within that time then containerA will give up and not
            start. This results in the task transitioning to a ``STOPPED`` state.

            For tasks using the EC2 launch type, the container instances require at least version
            1.26.0 of the container agent to enable a container start timeout value. However, we
            recommend using the latest container agent version. For information about checking your
            agent version and updating to the latest version, see `Updating the Amazon ECS
            Container Agent
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html>`__
            in the *Amazon Elastic Container Service Developer Guide* . If you are using an Amazon
            ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the
            ``ecs-init`` package. If your container instances are launched from version
            ``20190301`` or later, then they contain the required versions of the container agent
            and ``ecs-init`` . For more information, see `Amazon ECS-optimized Linux AMI
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html>`__
            in the *Amazon Elastic Container Service Developer Guide* .

            For tasks using the Fargate launch type, the task or service requires platform version
            ``1.3.0`` or later.

          - **stopTimeout** *(integer) --*

            Time duration (in seconds) to wait before the container is forcefully killed if it
            doesn't exit normally on its own.

            For tasks using the Fargate launch type, the max ``stopTimeout`` value is 2 minutes and
            the task or service requires platform version ``1.3.0`` or later.

            For tasks using the EC2 launch type, the stop timeout value for the container takes
            precedence over the ``ECS_CONTAINER_STOP_TIMEOUT`` container agent configuration
            parameter, if used. Container instances require at least version 1.26.0 of the
            container agent to enable a container stop timeout value. However, we recommend using
            the latest container agent version. For information about checking your agent version
            and updating to the latest version, see `Updating the Amazon ECS Container Agent
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html>`__
            in the *Amazon Elastic Container Service Developer Guide* . If you are using an Amazon
            ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the
            ``ecs-init`` package. If your container instances are launched from version
            ``20190301`` or later, then they contain the required versions of the container agent
            and ``ecs-init`` . For more information, see `Amazon ECS-optimized Linux AMI
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html>`__
            in the *Amazon Elastic Container Service Developer Guide* .

          - **hostname** *(string) --*

            The hostname to use for your container. This parameter maps to ``Hostname`` in the
            `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
            ``--hostname`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__
            .

            .. note::

              The ``hostname`` parameter is not supported if you are using the ``awsvpc`` network
              mode.

          - **user** *(string) --*

            The user name to use inside the container. This parameter maps to ``User`` in the
            `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--user``
            option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

            You can use the following formats. If specifying a UID or GID, you must specify it as a
            positive integer.

            * ``user``

            * ``user:group``

            * ``uid``

            * ``uid:gid``

            * ``user:gid``

            * ``uid:group``

            .. note::

              This parameter is not supported for Windows containers.

          - **workingDirectory** *(string) --*

            The working directory in which to run commands inside the container. This parameter
            maps to ``WorkingDir`` in the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--workdir``
            option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

          - **disableNetworking** *(boolean) --*

            When this parameter is true, networking is disabled within the container. This
            parameter maps to ``NetworkDisabled`` in the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ .

            .. note::

              This parameter is not supported for Windows containers.

          - **privileged** *(boolean) --*

            When this parameter is true, the container is given elevated privileges on the host
            container instance (similar to the ``root`` user). This parameter maps to
            ``Privileged`` in the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
            ``--privileged`` option to `docker run
            <https://docs.docker.com/engine/reference/run/>`__ .

            .. note::

              This parameter is not supported for Windows containers or tasks using the Fargate
              launch type.

          - **readonlyRootFilesystem** *(boolean) --*

            When this parameter is true, the container is given read-only access to its root file
            system. This parameter maps to ``ReadonlyRootfs`` in the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
            ``--read-only`` option to `docker run
            <https://docs.docker.com/engine/reference/run/>`__ .

            .. note::

              This parameter is not supported for Windows containers.

          - **dnsServers** *(list) --*

            A list of DNS servers that are presented to the container. This parameter maps to
            ``Dns`` in the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--dns``
            option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

            .. note::

              This parameter is not supported for Windows containers.

            - *(string) --*

          - **dnsSearchDomains** *(list) --*

            A list of DNS search domains that are presented to the container. This parameter maps
            to ``DnsSearch`` in the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
            ``--dns-search`` option to `docker run
            <https://docs.docker.com/engine/reference/run/>`__ .

            .. note::

              This parameter is not supported for Windows containers.

            - *(string) --*

          - **extraHosts** *(list) --*

            A list of hostnames and IP address mappings to append to the ``/etc/hosts`` file on the
            container. This parameter maps to ``ExtraHosts`` in the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
            ``--add-host`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__
            .

            .. note::

              This parameter is not supported for Windows containers or tasks that use the
              ``awsvpc`` network mode.

            - *(dict) --*

              Hostnames and IP address entries that are added to the ``/etc/hosts`` file of a
              container via the ``extraHosts`` parameter of its  ContainerDefinition .

              - **hostname** *(string) --*

                The hostname to use in the ``/etc/hosts`` entry.

              - **ipAddress** *(string) --*

                The IP address to use in the ``/etc/hosts`` entry.

          - **dockerSecurityOptions** *(list) --*

            A list of strings to provide custom labels for SELinux and AppArmor multi-level
            security systems. This field is not valid for containers in tasks using the Fargate
            launch type.

            This parameter maps to ``SecurityOpt`` in the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
            ``--security-opt`` option to `docker run
            <https://docs.docker.com/engine/reference/run/>`__ .

            .. note::

              The Amazon ECS container agent running on a container instance must register with the
              ``ECS_SELINUX_CAPABLE=true`` or ``ECS_APPARMOR_CAPABLE=true`` environment variables
              before containers placed on that instance can use these security options. For more
              information, see `Amazon ECS Container Agent Configuration
              <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html>`__
              in the *Amazon Elastic Container Service Developer Guide* .

            .. note::

              This parameter is not supported for Windows containers.

            - *(string) --*

          - **interactive** *(boolean) --*

            When this parameter is ``true`` , this allows you to deploy containerized applications
            that require ``stdin`` or a ``tty`` to be allocated. This parameter maps to
            ``OpenStdin`` in the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
            ``--interactive`` option to `docker run
            <https://docs.docker.com/engine/reference/run/>`__ .

          - **pseudoTerminal** *(boolean) --*

            When this parameter is ``true`` , a TTY is allocated. This parameter maps to ``Tty`` in
            the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--tty``
            option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

          - **dockerLabels** *(dict) --*

            A key/value map of labels to add to the container. This parameter maps to ``Labels`` in
            the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--label``
            option to `docker run <https://docs.docker.com/engine/reference/run/>`__ . This
            parameter requires version 1.18 of the Docker Remote API or greater on your container
            instance. To check the Docker Remote API version on your container instance, log in to
            your container instance and run the following command: ``sudo docker version --format
            '{{.Server.APIVersion}}'``

            - *(string) --*

              - *(string) --*

          - **ulimits** *(list) --*

            A list of ``ulimits`` to set in the container. This parameter maps to ``Ulimits`` in
            the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--ulimit``
            option to `docker run <https://docs.docker.com/engine/reference/run/>`__ . Valid naming
            values are displayed in the  Ulimit data type. This parameter requires version 1.18 of
            the Docker Remote API or greater on your container instance. To check the Docker Remote
            API version on your container instance, log in to your container instance and run the
            following command: ``sudo docker version --format '{{.Server.APIVersion}}'``

            .. note::

              This parameter is not supported for Windows containers.

            - *(dict) --*

              The ``ulimit`` settings to pass to the container.

              - **name** *(string) --*

                The ``type`` of the ``ulimit`` .

              - **softLimit** *(integer) --*

                The soft limit for the ulimit type.

              - **hardLimit** *(integer) --*

                The hard limit for the ulimit type.

          - **logConfiguration** *(dict) --*

            The log configuration specification for the container.

            This parameter maps to ``LogConfig`` in the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
            ``--log-driver`` option to `docker run
            <https://docs.docker.com/engine/reference/run/>`__ . By default, containers use the
            same logging driver that the Docker daemon uses. However the container may use a
            different logging driver than the Docker daemon by specifying a log driver with this
            parameter in the container definition. To use a different logging driver for a
            container, the log system must be configured properly on the container instance (or on
            a different log server for remote logging options). For more information on the options
            for different supported log drivers, see `Configure logging drivers
            <https://docs.docker.com/engine/admin/logging/overview/>`__ in the Docker documentation.

            .. note::

              Amazon ECS currently supports a subset of the logging drivers available to the Docker
              daemon (shown in the  LogConfiguration data type). Additional log drivers may be
              available in future releases of the Amazon ECS container agent.

            This parameter requires version 1.18 of the Docker Remote API or greater on your
            container instance. To check the Docker Remote API version on your container instance,
            log in to your container instance and run the following command: ``sudo docker version
            --format '{{.Server.APIVersion}}'``

            .. note::

              The Amazon ECS container agent running on a container instance must register the
              logging drivers available on that instance with the ``ECS_AVAILABLE_LOGGING_DRIVERS``
              environment variable before containers placed on that instance can use these log
              configuration options. For more information, see `Amazon ECS Container Agent
              Configuration
              <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html>`__
              in the *Amazon Elastic Container Service Developer Guide* .

            - **logDriver** *(string) --*

              The log driver to use for the container. The valid values listed for this parameter
              are log drivers that the Amazon ECS container agent can communicate with by default.

              For tasks using the Fargate launch type, the supported log drivers are ``awslogs``
              and ``splunk`` .

              For tasks using the EC2 launch type, the supported log drivers are ``awslogs`` ,
              ``fluentd`` , ``gelf`` , ``json-file`` , ``journald`` , ``logentries`` , ``syslog`` ,
              and ``splunk`` .

              For more information about using the ``awslogs`` log driver, see `Using the awslogs
              Log Driver
              <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_awslogs.html>`__
              in the *Amazon Elastic Container Service Developer Guide* .

              .. note::

                If you have a custom driver that is not listed above that you would like to work
                with the Amazon ECS container agent, you can fork the Amazon ECS container agent
                project that is `available on GitHub <https://github.com/aws/amazon-ecs-agent>`__
                and customize it to work with that driver. We encourage you to submit pull requests
                for changes that you would like to have included. However, Amazon Web Services does
                not currently support running modified copies of this software.

              This parameter requires version 1.18 of the Docker Remote API or greater on your
              container instance. To check the Docker Remote API version on your container
              instance, log in to your container instance and run the following command: ``sudo
              docker version --format '{{.Server.APIVersion}}'``

            - **options** *(dict) --*

              The configuration options to send to the log driver. This parameter requires version
              1.19 of the Docker Remote API or greater on your container instance. To check the
              Docker Remote API version on your container instance, log in to your container
              instance and run the following command: ``sudo docker version --format
              '{{.Server.APIVersion}}'``

              - *(string) --*

                - *(string) --*

            - **secretOptions** *(list) --*

              The secrets to pass to the log configuration. For more information, see `Specifying
              Sensitive Data
              <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html>`__
              in the *Amazon Elastic Container Service Developer Guide* .

              - *(dict) --*

                An object representing the secret to expose to your container. Secrets can be
                exposed to a container in the following ways:

                * To inject sensitive data into your containers as environment variables, use the
                ``secrets`` container definition parameter.

                * To reference sensitive information in the log configuration of a container, use
                the ``secretOptions`` container definition parameter.

                For more information, see `Specifying Sensitive Data
                <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html>`__
                in the *Amazon Elastic Container Service Developer Guide* .

                - **name** *(string) --*

                  The name of the secret.

                - **valueFrom** *(string) --*

                  The secret to expose to the container. The supported values are either the full
                  ARN of the AWS Secrets Manager secret or the full ARN of the parameter in the AWS
                  Systems Manager Parameter Store.

                  .. note::

                    If the AWS Systems Manager Parameter Store parameter exists in the same Region
                    as the task you are launching, then you can use either the full ARN or name of
                    the parameter. If the parameter exists in a different Region, then the full ARN
                    must be specified.

          - **healthCheck** *(dict) --*

            The health check command and associated configuration parameters for the container.
            This parameter maps to ``HealthCheck`` in the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
            ``HEALTHCHECK`` parameter of `docker run
            <https://docs.docker.com/engine/reference/run/>`__ .

            - **command** *(list) --*

              A string array representing the command that the container runs to determine if it is
              healthy. The string array must start with ``CMD`` to execute the command arguments
              directly, or ``CMD-SHELL`` to run the command with the container's default shell. For
              example:

               ``[ "CMD-SHELL", "curl -f http://localhost/ || exit 1" ]``

              An exit code of 0 indicates success, and non-zero exit code indicates failure. For
              more information, see ``HealthCheck`` in the `Create a container
              <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of
              the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ .

              - *(string) --*

            - **interval** *(integer) --*

              The time period in seconds between each health check execution. You may specify
              between 5 and 300 seconds. The default value is 30 seconds.

            - **timeout** *(integer) --*

              The time period in seconds to wait for a health check to succeed before it is
              considered a failure. You may specify between 2 and 60 seconds. The default value is
              5.

            - **retries** *(integer) --*

              The number of times to retry a failed health check before the container is considered
              unhealthy. You may specify between 1 and 10 retries. The default value is 3.

            - **startPeriod** *(integer) --*

              The optional grace period within which to provide containers time to bootstrap before
              failed health checks count towards the maximum number of retries. You may specify
              between 0 and 300 seconds. The ``startPeriod`` is disabled by default.

              .. note::

                If a health check succeeds within the ``startPeriod`` , then the container is
                considered healthy and any subsequent failures count toward the maximum number of
                retries.

          - **systemControls** *(list) --*

            A list of namespaced kernel parameters to set in the container. This parameter maps to
            ``Sysctls`` in the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--sysctl``
            option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

            .. note::

              It is not recommended that you specify network-related ``systemControls`` parameters
              for multiple containers in a single task that also uses either the ``awsvpc`` or
              ``host`` network modes. For tasks that use the ``awsvpc`` network mode, the container
              that is started last determines which ``systemControls`` parameters take effect. For
              tasks that use the ``host`` network mode, it changes the container instance's
              namespaced kernel parameters as well as the containers.

            - *(dict) --*

              A list of namespaced kernel parameters to set in the container. This parameter maps
              to ``Sysctls`` in the `Create a container
              <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of
              the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
              ``--sysctl`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__
              .

              It is not recommended that you specify network-related ``systemControls`` parameters
              for multiple containers in a single task that also uses either the ``awsvpc`` or
              ``host`` network mode for the following reasons:

              * For tasks that use the ``awsvpc`` network mode, if you set ``systemControls`` for
              any container, it applies to all containers in the task. If you set different
              ``systemControls`` for multiple containers in a single task, the container that is
              started last determines which ``systemControls`` take effect.

              * For tasks that use the ``host`` network mode, the ``systemControls`` parameter
              applies to the container instance's kernel parameter as well as that of all
              containers of any tasks running on that container instance.

              - **namespace** *(string) --*

                The namespaced kernel parameter for which to set a ``value`` .

              - **value** *(string) --*

                The value for the namespaced kernel parameter specified in ``namespace`` .

          - **resourceRequirements** *(list) --*

            The type and amount of a resource to assign to a container. The only supported resource
            is a GPU.

            - *(dict) --*

              The type and amount of a resource to assign to a container. The supported resource
              types are GPUs and Elastic Inference accelerators. For more information, see `Working
              with GPUs on Amazon ECS
              <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-gpu.html>`__ or
              `Working with Amazon Elastic Inference on Amazon ECS
              <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in the
              *Amazon Elastic Container Service Developer Guide*

              - **value** *(string) --*

                The value for the specified resource type.

                If the ``GPU`` type is used, the value is the number of physical ``GPUs`` the
                Amazon ECS container agent will reserve for the container. The number of GPUs
                reserved for all containers in a task should not exceed the number of available
                GPUs on the container instance the task is launched on.

                If the ``InferenceAccelerator`` type is used, the ``value`` should match the
                ``deviceName`` for an  InferenceAccelerator specified in a task definition.

              - **type** *(string) --*

                The type of resource to assign to a container. The supported values are ``GPU`` or
                ``InferenceAccelerator`` .

          - **firelensConfiguration** *(dict) --*

            The FireLens configuration for the container. This is used to specify and configure a
            log router for container logs. For more information, see `Custom Log Routing
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html>`__ in
            the *Amazon Elastic Container Service Developer Guide* .

            - **type** *(string) --*

              The log router to use. The valid values are ``fluentd`` or ``fluentbit`` .

            - **options** *(dict) --*

              The options to use when configuring the log router. This field is optional and can be
              used to add additional metadata, such as the task, task definition, cluster, and
              container instance details to the log event. If specified, the syntax to use is
              ``"options":{"enable-ecs-log-metadata":"true|false"}`` .

              - *(string) --*

                - *(string) --*

      - **family** *(string) --*

        The name of a family that this task definition is registered to. A family groups multiple
        versions of a task definition. Amazon ECS gives the first task definition that you
        registered to a family a revision number of 1. Amazon ECS gives sequential revision numbers
        to each task definition that you add.

      - **taskRoleArn** *(string) --*

        The short name or full Amazon Resource Name (ARN) of the AWS Identity and Access Management
        (IAM) role that grants containers in the task permission to call AWS APIs on your behalf.
        For more information, see `Amazon ECS Task Role
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_IAM_role.html>`__ in the
        *Amazon Elastic Container Service Developer Guide* .

        IAM roles for tasks on Windows require that the ``-EnableTaskIAMRole`` option is set when
        you launch the Amazon ECS-optimized Windows AMI. Your containers must also run some
        configuration code in order to take advantage of the feature. For more information, see
        `Windows IAM Roles for Tasks
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/windows_task_IAM_roles.html>`__
        in the *Amazon Elastic Container Service Developer Guide* .

      - **executionRoleArn** *(string) --*

        The Amazon Resource Name (ARN) of the task execution role that containers in this task can
        assume. All containers in this task are granted the permissions that are specified in this
        role.

      - **networkMode** *(string) --*

        The Docker networking mode to use for the containers in the task. The valid values are
        ``none`` , ``bridge`` , ``awsvpc`` , and ``host`` . The default Docker network mode is
        ``bridge`` . If you are using the Fargate launch type, the ``awsvpc`` network mode is
        required. If you are using the EC2 launch type, any network mode can be used. If the
        network mode is set to ``none`` , you cannot specify port mappings in your container
        definitions, and the tasks containers do not have external connectivity. The ``host`` and
        ``awsvpc`` network modes offer the highest networking performance for containers because
        they use the EC2 network stack instead of the virtualized network stack provided by the
        ``bridge`` mode.

        With the ``host`` and ``awsvpc`` network modes, exposed container ports are mapped directly
        to the corresponding host port (for the ``host`` network mode) or the attached elastic
        network interface port (for the ``awsvpc`` network mode), so you cannot take advantage of
        dynamic host port mappings.

        If the network mode is ``awsvpc`` , the task is allocated an elastic network interface, and
        you must specify a  NetworkConfiguration value when you create a service or run a task with
        the task definition. For more information, see `Task Networking
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html>`__ in
        the *Amazon Elastic Container Service Developer Guide* .

        .. note::

          Currently, only Amazon ECS-optimized AMIs, other Amazon Linux variants with the
          ``ecs-init`` package, or AWS Fargate infrastructure support the ``awsvpc`` network mode.

        If the network mode is ``host`` , you cannot run multiple instantiations of the same task
        on a single container instance when port mappings are used.

        Docker for Windows uses different network modes than Docker for Linux. When you register a
        task definition with Windows containers, you must not specify a network mode. If you use
        the console to register a task definition with Windows containers, you must choose the
        ``<default>`` network mode object.

        For more information, see `Network settings
        <https://docs.docker.com/engine/reference/run/#network-settings>`__ in the *Docker run
        reference* .

      - **revision** *(integer) --*

        The revision of the task in a particular family. The revision is a version number of a task
        definition in a family. When you register a task definition for the first time, the
        revision is ``1`` . Each time that you register a new revision of a task definition in the
        same family, the revision value always increases by one, even if you have deregistered
        previous revisions in this family.

      - **volumes** *(list) --*

        The list of volume definitions for the task.

        If your tasks are using the Fargate launch type, the ``host`` and ``sourcePath`` parameters
        are not supported.

        For more information about volume definition parameters and defaults, see `Amazon ECS Task
        Definitions
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definitions.html>`__ in
        the *Amazon Elastic Container Service Developer Guide* .

        - *(dict) --*

          A data volume used in a task definition. For tasks that use a Docker volume, specify a
          ``DockerVolumeConfiguration`` . For tasks that use a bind mount host volume, specify a
          ``host`` and optional ``sourcePath`` . For more information, see `Using Data Volumes in
          Tasks
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_data_volumes.html>`__ .

          - **name** *(string) --*

            The name of the volume. Up to 255 letters (uppercase and lowercase), numbers, and
            hyphens are allowed. This name is referenced in the ``sourceVolume`` parameter of
            container definition ``mountPoints`` .

          - **host** *(dict) --*

            This parameter is specified when you are using bind mount host volumes. Bind mount host
            volumes are supported when you are using either the EC2 or Fargate launch types. The
            contents of the ``host`` parameter determine whether your bind mount host volume
            persists on the host container instance and where it is stored. If the ``host``
            parameter is empty, then the Docker daemon assigns a host path for your data volume.
            However, the data is not guaranteed to persist after the containers associated with it
            stop running.

            Windows containers can mount whole directories on the same drive as
            ``$env:ProgramData`` . Windows containers cannot mount directories on a different
            drive, and mount point cannot be across drives. For example, you can mount
            ``C:\\my\\path:C:\\my\\path`` and ``D:\\:D:\\`` , but not ``D:\\my\\path:C:\\my\\path``
            or ``D:\\:C:\\my\\path`` .

            - **sourcePath** *(string) --*

              When the ``host`` parameter is used, specify a ``sourcePath`` to declare the path on
              the host container instance that is presented to the container. If this parameter is
              empty, then the Docker daemon has assigned a host path for you. If the ``host``
              parameter contains a ``sourcePath`` file location, then the data volume persists at
              the specified location on the host container instance until you delete it manually.
              If the ``sourcePath`` value does not exist on the host container instance, the Docker
              daemon creates it. If the location does exist, the contents of the source path folder
              are exported.

              If you are using the Fargate launch type, the ``sourcePath`` parameter is not
              supported.

          - **dockerVolumeConfiguration** *(dict) --*

            This parameter is specified when you are using Docker volumes. Docker volumes are only
            supported when you are using the EC2 launch type. Windows containers only support the
            use of the ``local`` driver. To use bind mounts, specify a ``host`` instead.

            - **scope** *(string) --*

              The scope for the Docker volume that determines its lifecycle. Docker volumes that
              are scoped to a ``task`` are automatically provisioned when the task starts and
              destroyed when the task stops. Docker volumes that are scoped as ``shared`` persist
              after the task stops.

            - **autoprovision** *(boolean) --*

              If this value is ``true`` , the Docker volume is created if it does not already exist.

              .. note::

                This field is only used if the ``scope`` is ``shared`` .

            - **driver** *(string) --*

              The Docker volume driver to use. The driver value must match the driver name provided
              by Docker because it is used for task placement. If the driver was installed using
              the Docker plugin CLI, use ``docker plugin ls`` to retrieve the driver name from your
              container instance. If the driver was installed using another method, use Docker
              plugin discovery to retrieve the driver name. For more information, see `Docker
              plugin discovery
              <https://docs.docker.com/engine/extend/plugin_api/#plugin-discovery>`__ . This
              parameter maps to ``Driver`` in the `Create a volume
              <https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate>`__ section of the
              `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
              ``xxdriver`` option to `docker volume create
              <https://docs.docker.com/engine/reference/commandline/volume_create/>`__ .

            - **driverOpts** *(dict) --*

              A map of Docker driver-specific options passed through. This parameter maps to
              ``DriverOpts`` in the `Create a volume
              <https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate>`__ section of the
              `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``xxopt``
              option to `docker volume create
              <https://docs.docker.com/engine/reference/commandline/volume_create/>`__ .

              - *(string) --*

                - *(string) --*

            - **labels** *(dict) --*

              Custom metadata to add to your Docker volume. This parameter maps to ``Labels`` in
              the `Create a volume
              <https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate>`__ section of the
              `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``xxlabel``
              option to `docker volume create
              <https://docs.docker.com/engine/reference/commandline/volume_create/>`__ .

              - *(string) --*

                - *(string) --*

      - **status** *(string) --*

        The status of the task definition.

      - **requiresAttributes** *(list) --*

        The container instance attributes required by your task. This field is not valid if you are
        using the Fargate launch type for your task.

        - *(dict) --*

          An attribute is a name-value pair associated with an Amazon ECS object. Attributes enable
          you to extend the Amazon ECS data model by adding custom metadata to your resources. For
          more information, see `Attributes
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html#attributes>`__
          in the *Amazon Elastic Container Service Developer Guide* .

          - **name** *(string) --*

            The name of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
            hyphens, underscores, and periods are allowed.

          - **value** *(string) --*

            The value of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
            hyphens, underscores, periods, at signs (@), forward slashes, colons, and spaces are
            allowed.

          - **targetType** *(string) --*

            The type of the target with which to attach the attribute. This parameter is required
            if you use the short form ID for a resource instead of the full ARN.

          - **targetId** *(string) --*

            The ID of the target. You can specify the short form ID for a resource or the full
            Amazon Resource Name (ARN).

      - **placementConstraints** *(list) --*

        An array of placement constraint objects to use for tasks. This field is not valid if you
        are using the Fargate launch type for your task.

        - *(dict) --*

          An object representing a constraint on task placement in the task definition. For more
          information, see `Task Placement Constraints
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

          .. note::

            If you are using the Fargate launch type, task placement constraints are not supported.

          - **type** *(string) --*

            The type of constraint. The ``MemberOf`` constraint restricts selection to be from a
            group of valid candidates.

          - **expression** *(string) --*

            A cluster query language expression to apply to the constraint. For more information,
            see `Cluster Query Language
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html>`__
            in the *Amazon Elastic Container Service Developer Guide* .

      - **compatibilities** *(list) --*

        The launch type to use with your task. For more information, see `Amazon ECS Launch Types
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html>`__ in the
        *Amazon Elastic Container Service Developer Guide* .

        - *(string) --*

      - **requiresCompatibilities** *(list) --*

        The launch type the task requires. If no value is specified, it will default to ``EC2`` .
        Valid values include ``EC2`` and ``FARGATE`` .

        - *(string) --*

      - **cpu** *(string) --*

        The number of ``cpu`` units used by the task. If you are using the EC2 launch type, this
        field is optional and any value can be used. If you are using the Fargate launch type, this
        field is required and you must use one of the following values, which determines your range
        of valid values for the ``memory`` parameter:

        * 256 (.25 vCPU) - Available ``memory`` values: 512 (0.5 GB), 1024 (1 GB), 2048 (2 GB)

        * 512 (.5 vCPU) - Available ``memory`` values: 1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096
        (4 GB)

        * 1024 (1 vCPU) - Available ``memory`` values: 2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120
        (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB)

        * 2048 (2 vCPU) - Available ``memory`` values: Between 4096 (4 GB) and 16384 (16 GB) in
        increments of 1024 (1 GB)

        * 4096 (4 vCPU) - Available ``memory`` values: Between 8192 (8 GB) and 30720 (30 GB) in
        increments of 1024 (1 GB)

      - **memory** *(string) --*

        The amount (in MiB) of memory used by the task.

        If using the EC2 launch type, this field is optional and any value can be used. If a
        task-level memory value is specified then the container-level memory value is optional.

        If using the Fargate launch type, this field is required and you must use one of the
        following values, which determines your range of valid values for the ``cpu`` parameter:

        * 512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) - Available ``cpu`` values: 256 (.25 vCPU)

        * 1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available ``cpu`` values: 512 (.5
        vCPU)

        * 2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB)
        - Available ``cpu`` values: 1024 (1 vCPU)

        * Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB) - Available ``cpu``
        values: 2048 (2 vCPU)

        * Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB) - Available ``cpu``
        values: 4096 (4 vCPU)

      - **inferenceAccelerators** *(list) --*

        The Elastic Inference accelerator associated with the task.

        - *(dict) --*

          Details on a Elastic Inference accelerator. For more information, see `Working with
          Amazon Elastic Inference on Amazon ECS
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in the
          *Amazon Elastic Container Service Developer Guide* .

          - **deviceName** *(string) --*

            The Elastic Inference accelerator device name. The ``deviceName`` must also be
            referenced in a container definition as a  ResourceRequirement .

          - **deviceType** *(string) --*

            The Elastic Inference accelerator type to use.

      - **pidMode** *(string) --*

        The process namespace to use for the containers in the task. The valid values are ``host``
        or ``task`` . If ``host`` is specified, then all containers within the tasks that specified
        the ``host`` PID mode on the same container instance share the same process namespace with
        the host Amazon EC2 instance. If ``task`` is specified, all containers within the specified
        task share the same process namespace. If no value is specified, the default is a private
        namespace. For more information, see `PID settings
        <https://docs.docker.com/engine/reference/run/#pid-settings---pid>`__ in the *Docker run
        reference* .

        If the ``host`` PID mode is used, be aware that there is a heightened risk of undesired
        process namespace expose. For more information, see `Docker security
        <https://docs.docker.com/engine/security/security/>`__ .

        .. note::

          This parameter is not supported for Windows containers or tasks using the Fargate launch
          type.

      - **ipcMode** *(string) --*

        The IPC resource namespace to use for the containers in the task. The valid values are
        ``host`` , ``task`` , or ``none`` . If ``host`` is specified, then all containers within
        the tasks that specified the ``host`` IPC mode on the same container instance share the
        same IPC resources with the host Amazon EC2 instance. If ``task`` is specified, all
        containers within the specified task share the same IPC resources. If ``none`` is
        specified, then IPC resources within the containers of a task are private and not shared
        with other containers in a task or on the container instance. If no value is specified,
        then the IPC resource namespace sharing depends on the Docker daemon setting on the
        container instance. For more information, see `IPC settings
        <https://docs.docker.com/engine/reference/run/#ipc-settings---ipc>`__ in the *Docker run
        reference* .

        If the ``host`` IPC mode is used, be aware that there is a heightened risk of undesired IPC
        namespace expose. For more information, see `Docker security
        <https://docs.docker.com/engine/security/security/>`__ .

        If you are setting namespaced kernel parameters using ``systemControls`` for the containers
        in the task, the following will apply to your IPC resource namespace. For more information,
        see `System Controls
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html>`__
        in the *Amazon Elastic Container Service Developer Guide* .

        * For tasks that use the ``host`` IPC mode, IPC namespace related ``systemControls`` are
        not supported.

        * For tasks that use the ``task`` IPC mode, IPC namespace related ``systemControls`` will
        apply to all containers within a task.

        .. note::

          This parameter is not supported for Windows containers or tasks using the Fargate launch
          type.

      - **proxyConfiguration** *(dict) --*

        The configuration details for the App Mesh proxy.

        Your Amazon ECS container instances require at least version 1.26.0 of the container agent
        and at least version 1.26.0-1 of the ``ecs-init`` package to enable a proxy configuration.
        If your container instances are launched from the Amazon ECS-optimized AMI version
        ``20190301`` or later, then they contain the required versions of the container agent and
        ``ecs-init`` . For more information, see `Amazon ECS-optimized Linux AMI
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html>`__ in
        the *Amazon Elastic Container Service Developer Guide* .

        - **type** *(string) --*

          The proxy type. The only supported value is ``APPMESH`` .

        - **containerName** *(string) --*

          The name of the container that will serve as the App Mesh proxy.

        - **properties** *(list) --*

          The set of network configuration parameters to provide the Container Network Interface
          (CNI) plugin, specified as key-value pairs.

          * ``IgnoredUID`` - (Required) The user ID (UID) of the proxy container as defined by the
          ``user`` parameter in a container definition. This is used to ensure the proxy ignores
          its own traffic. If ``IgnoredGID`` is specified, this field can be empty.

          * ``IgnoredGID`` - (Required) The group ID (GID) of the proxy container as defined by the
          ``user`` parameter in a container definition. This is used to ensure the proxy ignores
          its own traffic. If ``IgnoredUID`` is specified, this field can be empty.

          * ``AppPorts`` - (Required) The list of ports that the application uses. Network traffic
          to these ports is forwarded to the ``ProxyIngressPort`` and ``ProxyEgressPort`` .

          * ``ProxyIngressPort`` - (Required) Specifies the port that incoming traffic to the
          ``AppPorts`` is directed to.

          * ``ProxyEgressPort`` - (Required) Specifies the port that outgoing traffic from the
          ``AppPorts`` is directed to.

          * ``EgressIgnoredPorts`` - (Required) The egress traffic going to the specified ports is
          ignored and not redirected to the ``ProxyEgressPort`` . It can be an empty list.

          * ``EgressIgnoredIPs`` - (Required) The egress traffic going to the specified IP
          addresses is ignored and not redirected to the ``ProxyEgressPort`` . It can be an empty
          list.

          - *(dict) --*

            A key-value pair object.

            - **name** *(string) --*

              The name of the key-value pair. For environment variables, this is the name of the
              environment variable.

            - **value** *(string) --*

              The value of the key-value pair. For environment variables, this is the value of the
              environment variable.
    """


_ClientDescribeClustersResponseclusterssettingsTypeDef = TypedDict(
    "_ClientDescribeClustersResponseclusterssettingsTypeDef",
    {"name": str, "value": str},
    total=False,
)


class ClientDescribeClustersResponseclusterssettingsTypeDef(
    _ClientDescribeClustersResponseclusterssettingsTypeDef
):
    """
    Type definition for `ClientDescribeClustersResponseclusters` `settings`

    The settings to use when creating a cluster. This parameter is used to enable
    CloudWatch Container Insights for a cluster.

    - **name** *(string) --*

      The name of the cluster setting. The only supported value is ``containerInsights`` .

    - **value** *(string) --*

      The value to set for the cluster setting. The supported values are ``enabled`` and
      ``disabled`` . If ``enabled`` is specified, CloudWatch Container Insights will be
      enabled for the cluster, otherwise it will be disabled unless the
      ``containerInsights`` account setting is enabled. If a cluster value is specified, it
      will override the ``containerInsights`` value set with  PutAccountSetting or
      PutAccountSettingDefault .
    """


_ClientDescribeClustersResponseclustersstatisticsTypeDef = TypedDict(
    "_ClientDescribeClustersResponseclustersstatisticsTypeDef",
    {"name": str, "value": str},
    total=False,
)


class ClientDescribeClustersResponseclustersstatisticsTypeDef(
    _ClientDescribeClustersResponseclustersstatisticsTypeDef
):
    """
    Type definition for `ClientDescribeClustersResponseclusters` `statistics`

    A key-value pair object.

    - **name** *(string) --*

      The name of the key-value pair. For environment variables, this is the name of the
      environment variable.

    - **value** *(string) --*

      The value of the key-value pair. For environment variables, this is the value of the
      environment variable.
    """


_ClientDescribeClustersResponseclusterstagsTypeDef = TypedDict(
    "_ClientDescribeClustersResponseclusterstagsTypeDef",
    {"key": str, "value": str},
    total=False,
)


class ClientDescribeClustersResponseclusterstagsTypeDef(
    _ClientDescribeClustersResponseclusterstagsTypeDef
):
    """
    Type definition for `ClientDescribeClustersResponseclusters` `tags`

    The metadata that you apply to a resource to help you categorize and organize them.
    Each tag consists of a key and an optional value, both of which you define.

    The following basic restrictions apply to tags:

    * Maximum number of tags per resource - 50

    * For each resource, each tag key must be unique, and each tag key can have only one
    value.

    * Maximum key length - 128 Unicode characters in UTF-8

    * Maximum value length - 256 Unicode characters in UTF-8

    * If your tagging schema is used across multiple services and resources, remember that
    other services may have restrictions on allowed characters. Generally allowed
    characters are: letters, numbers, and spaces representable in UTF-8, and the following
    characters: + - = . _ : / @.

    * Tag keys and values are case-sensitive.

    * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
    prefix for either keys or values as it is reserved for AWS use. You cannot edit or
    delete tag keys or values with this prefix. Tags with this prefix do not count against
    your tags per resource limit.

    - **key** *(string) --*

      One part of a key-value pair that make up a tag. A ``key`` is a general label that
      acts like a category for more specific tag values.

    - **value** *(string) --*

      The optional part of a key-value pair that make up a tag. A ``value`` acts as a
      descriptor within a tag category (key).
    """


_ClientDescribeClustersResponseclustersTypeDef = TypedDict(
    "_ClientDescribeClustersResponseclustersTypeDef",
    {
        "clusterArn": str,
        "clusterName": str,
        "status": str,
        "registeredContainerInstancesCount": int,
        "runningTasksCount": int,
        "pendingTasksCount": int,
        "activeServicesCount": int,
        "statistics": List[ClientDescribeClustersResponseclustersstatisticsTypeDef],
        "tags": List[ClientDescribeClustersResponseclusterstagsTypeDef],
        "settings": List[ClientDescribeClustersResponseclusterssettingsTypeDef],
    },
    total=False,
)


class ClientDescribeClustersResponseclustersTypeDef(
    _ClientDescribeClustersResponseclustersTypeDef
):
    """
    Type definition for `ClientDescribeClustersResponse` `clusters`

    A regional grouping of one or more container instances on which you can run task requests.
    Each account receives a default cluster the first time you use the Amazon ECS service, but
    you may also create other clusters. Clusters may contain more than one instance type
    simultaneously.

    - **clusterArn** *(string) --*

      The Amazon Resource Name (ARN) that identifies the cluster. The ARN contains the
      ``arn:aws:ecs`` namespace, followed by the Region of the cluster, the AWS account ID of
      the cluster owner, the ``cluster`` namespace, and then the cluster name. For example,
      ``arn:aws:ecs:region:012345678910:cluster/test`` .

    - **clusterName** *(string) --*

      A user-generated string that you use to identify your cluster.

    - **status** *(string) --*

      The status of the cluster. The valid values are ``ACTIVE`` or ``INACTIVE`` . ``ACTIVE``
      indicates that you can register container instances with the cluster and the associated
      instances can accept tasks.

    - **registeredContainerInstancesCount** *(integer) --*

      The number of container instances registered into the cluster. This includes container
      instances in both ``ACTIVE`` and ``DRAINING`` status.

    - **runningTasksCount** *(integer) --*

      The number of tasks in the cluster that are in the ``RUNNING`` state.

    - **pendingTasksCount** *(integer) --*

      The number of tasks in the cluster that are in the ``PENDING`` state.

    - **activeServicesCount** *(integer) --*

      The number of services that are running on the cluster in an ``ACTIVE`` state. You can
      view these services with  ListServices .

    - **statistics** *(list) --*

      Additional information about your clusters that are separated by launch type, including:

      * runningEC2TasksCount

      * RunningFargateTasksCount

      * pendingEC2TasksCount

      * pendingFargateTasksCount

      * activeEC2ServiceCount

      * activeFargateServiceCount

      * drainingEC2ServiceCount

      * drainingFargateServiceCount

      - *(dict) --*

        A key-value pair object.

        - **name** *(string) --*

          The name of the key-value pair. For environment variables, this is the name of the
          environment variable.

        - **value** *(string) --*

          The value of the key-value pair. For environment variables, this is the value of the
          environment variable.

    - **tags** *(list) --*

      The metadata that you apply to the cluster to help you categorize and organize them. Each
      tag consists of a key and an optional value, both of which you define.

      The following basic restrictions apply to tags:

      * Maximum number of tags per resource - 50

      * For each resource, each tag key must be unique, and each tag key can have only one
      value.

      * Maximum key length - 128 Unicode characters in UTF-8

      * Maximum value length - 256 Unicode characters in UTF-8

      * If your tagging schema is used across multiple services and resources, remember that
      other services may have restrictions on allowed characters. Generally allowed characters
      are: letters, numbers, and spaces representable in UTF-8, and the following characters: +
      - = . _ : / @.

      * Tag keys and values are case-sensitive.

      * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
      prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
      tag keys or values with this prefix. Tags with this prefix do not count against your tags
      per resource limit.

      - *(dict) --*

        The metadata that you apply to a resource to help you categorize and organize them.
        Each tag consists of a key and an optional value, both of which you define.

        The following basic restrictions apply to tags:

        * Maximum number of tags per resource - 50

        * For each resource, each tag key must be unique, and each tag key can have only one
        value.

        * Maximum key length - 128 Unicode characters in UTF-8

        * Maximum value length - 256 Unicode characters in UTF-8

        * If your tagging schema is used across multiple services and resources, remember that
        other services may have restrictions on allowed characters. Generally allowed
        characters are: letters, numbers, and spaces representable in UTF-8, and the following
        characters: + - = . _ : / @.

        * Tag keys and values are case-sensitive.

        * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
        prefix for either keys or values as it is reserved for AWS use. You cannot edit or
        delete tag keys or values with this prefix. Tags with this prefix do not count against
        your tags per resource limit.

        - **key** *(string) --*

          One part of a key-value pair that make up a tag. A ``key`` is a general label that
          acts like a category for more specific tag values.

        - **value** *(string) --*

          The optional part of a key-value pair that make up a tag. A ``value`` acts as a
          descriptor within a tag category (key).

    - **settings** *(list) --*

      The settings for the cluster. This parameter indicates whether CloudWatch Container
      Insights is enabled or disabled for a cluster.

      - *(dict) --*

        The settings to use when creating a cluster. This parameter is used to enable
        CloudWatch Container Insights for a cluster.

        - **name** *(string) --*

          The name of the cluster setting. The only supported value is ``containerInsights`` .

        - **value** *(string) --*

          The value to set for the cluster setting. The supported values are ``enabled`` and
          ``disabled`` . If ``enabled`` is specified, CloudWatch Container Insights will be
          enabled for the cluster, otherwise it will be disabled unless the
          ``containerInsights`` account setting is enabled. If a cluster value is specified, it
          will override the ``containerInsights`` value set with  PutAccountSetting or
          PutAccountSettingDefault .
    """


_ClientDescribeClustersResponsefailuresTypeDef = TypedDict(
    "_ClientDescribeClustersResponsefailuresTypeDef",
    {"arn": str, "reason": str, "detail": str},
    total=False,
)


class ClientDescribeClustersResponsefailuresTypeDef(
    _ClientDescribeClustersResponsefailuresTypeDef
):
    """
    Type definition for `ClientDescribeClustersResponse` `failures`

    A failed resource.

    - **arn** *(string) --*

      The Amazon Resource Name (ARN) of the failed resource.

    - **reason** *(string) --*

      The reason for the failure.

    - **detail** *(string) --*

      The details of the failure.
    """


_ClientDescribeClustersResponseTypeDef = TypedDict(
    "_ClientDescribeClustersResponseTypeDef",
    {
        "clusters": List[ClientDescribeClustersResponseclustersTypeDef],
        "failures": List[ClientDescribeClustersResponsefailuresTypeDef],
    },
    total=False,
)


class ClientDescribeClustersResponseTypeDef(_ClientDescribeClustersResponseTypeDef):
    """
    Type definition for `ClientDescribeClusters` `Response`

    - **clusters** *(list) --*

      The list of clusters.

      - *(dict) --*

        A regional grouping of one or more container instances on which you can run task requests.
        Each account receives a default cluster the first time you use the Amazon ECS service, but
        you may also create other clusters. Clusters may contain more than one instance type
        simultaneously.

        - **clusterArn** *(string) --*

          The Amazon Resource Name (ARN) that identifies the cluster. The ARN contains the
          ``arn:aws:ecs`` namespace, followed by the Region of the cluster, the AWS account ID of
          the cluster owner, the ``cluster`` namespace, and then the cluster name. For example,
          ``arn:aws:ecs:region:012345678910:cluster/test`` .

        - **clusterName** *(string) --*

          A user-generated string that you use to identify your cluster.

        - **status** *(string) --*

          The status of the cluster. The valid values are ``ACTIVE`` or ``INACTIVE`` . ``ACTIVE``
          indicates that you can register container instances with the cluster and the associated
          instances can accept tasks.

        - **registeredContainerInstancesCount** *(integer) --*

          The number of container instances registered into the cluster. This includes container
          instances in both ``ACTIVE`` and ``DRAINING`` status.

        - **runningTasksCount** *(integer) --*

          The number of tasks in the cluster that are in the ``RUNNING`` state.

        - **pendingTasksCount** *(integer) --*

          The number of tasks in the cluster that are in the ``PENDING`` state.

        - **activeServicesCount** *(integer) --*

          The number of services that are running on the cluster in an ``ACTIVE`` state. You can
          view these services with  ListServices .

        - **statistics** *(list) --*

          Additional information about your clusters that are separated by launch type, including:

          * runningEC2TasksCount

          * RunningFargateTasksCount

          * pendingEC2TasksCount

          * pendingFargateTasksCount

          * activeEC2ServiceCount

          * activeFargateServiceCount

          * drainingEC2ServiceCount

          * drainingFargateServiceCount

          - *(dict) --*

            A key-value pair object.

            - **name** *(string) --*

              The name of the key-value pair. For environment variables, this is the name of the
              environment variable.

            - **value** *(string) --*

              The value of the key-value pair. For environment variables, this is the value of the
              environment variable.

        - **tags** *(list) --*

          The metadata that you apply to the cluster to help you categorize and organize them. Each
          tag consists of a key and an optional value, both of which you define.

          The following basic restrictions apply to tags:

          * Maximum number of tags per resource - 50

          * For each resource, each tag key must be unique, and each tag key can have only one
          value.

          * Maximum key length - 128 Unicode characters in UTF-8

          * Maximum value length - 256 Unicode characters in UTF-8

          * If your tagging schema is used across multiple services and resources, remember that
          other services may have restrictions on allowed characters. Generally allowed characters
          are: letters, numbers, and spaces representable in UTF-8, and the following characters: +
          - = . _ : / @.

          * Tag keys and values are case-sensitive.

          * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
          prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
          tag keys or values with this prefix. Tags with this prefix do not count against your tags
          per resource limit.

          - *(dict) --*

            The metadata that you apply to a resource to help you categorize and organize them.
            Each tag consists of a key and an optional value, both of which you define.

            The following basic restrictions apply to tags:

            * Maximum number of tags per resource - 50

            * For each resource, each tag key must be unique, and each tag key can have only one
            value.

            * Maximum key length - 128 Unicode characters in UTF-8

            * Maximum value length - 256 Unicode characters in UTF-8

            * If your tagging schema is used across multiple services and resources, remember that
            other services may have restrictions on allowed characters. Generally allowed
            characters are: letters, numbers, and spaces representable in UTF-8, and the following
            characters: + - = . _ : / @.

            * Tag keys and values are case-sensitive.

            * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
            prefix for either keys or values as it is reserved for AWS use. You cannot edit or
            delete tag keys or values with this prefix. Tags with this prefix do not count against
            your tags per resource limit.

            - **key** *(string) --*

              One part of a key-value pair that make up a tag. A ``key`` is a general label that
              acts like a category for more specific tag values.

            - **value** *(string) --*

              The optional part of a key-value pair that make up a tag. A ``value`` acts as a
              descriptor within a tag category (key).

        - **settings** *(list) --*

          The settings for the cluster. This parameter indicates whether CloudWatch Container
          Insights is enabled or disabled for a cluster.

          - *(dict) --*

            The settings to use when creating a cluster. This parameter is used to enable
            CloudWatch Container Insights for a cluster.

            - **name** *(string) --*

              The name of the cluster setting. The only supported value is ``containerInsights`` .

            - **value** *(string) --*

              The value to set for the cluster setting. The supported values are ``enabled`` and
              ``disabled`` . If ``enabled`` is specified, CloudWatch Container Insights will be
              enabled for the cluster, otherwise it will be disabled unless the
              ``containerInsights`` account setting is enabled. If a cluster value is specified, it
              will override the ``containerInsights`` value set with  PutAccountSetting or
              PutAccountSettingDefault .

    - **failures** *(list) --*

      Any failures associated with the call.

      - *(dict) --*

        A failed resource.

        - **arn** *(string) --*

          The Amazon Resource Name (ARN) of the failed resource.

        - **reason** *(string) --*

          The reason for the failure.

        - **detail** *(string) --*

          The details of the failure.
    """


_ClientDescribeContainerInstancesResponsecontainerInstancesattachmentsdetailsTypeDef = TypedDict(
    "_ClientDescribeContainerInstancesResponsecontainerInstancesattachmentsdetailsTypeDef",
    {"name": str, "value": str},
    total=False,
)


class ClientDescribeContainerInstancesResponsecontainerInstancesattachmentsdetailsTypeDef(
    _ClientDescribeContainerInstancesResponsecontainerInstancesattachmentsdetailsTypeDef
):
    """
    Type definition for `ClientDescribeContainerInstancesResponsecontainerInstancesattachments` `details`

    A key-value pair object.

    - **name** *(string) --*

      The name of the key-value pair. For environment variables, this is the name of
      the environment variable.

    - **value** *(string) --*

      The value of the key-value pair. For environment variables, this is the value of
      the environment variable.
    """


_ClientDescribeContainerInstancesResponsecontainerInstancesattachmentsTypeDef = TypedDict(
    "_ClientDescribeContainerInstancesResponsecontainerInstancesattachmentsTypeDef",
    {
        "id": str,
        "type": str,
        "status": str,
        "details": List[
            ClientDescribeContainerInstancesResponsecontainerInstancesattachmentsdetailsTypeDef
        ],
    },
    total=False,
)


class ClientDescribeContainerInstancesResponsecontainerInstancesattachmentsTypeDef(
    _ClientDescribeContainerInstancesResponsecontainerInstancesattachmentsTypeDef
):
    """
    Type definition for `ClientDescribeContainerInstancesResponsecontainerInstances` `attachments`

    An object representing a container instance or task attachment.

    - **id** *(string) --*

      The unique identifier for the attachment.

    - **type** *(string) --*

      The type of the attachment, such as ``ElasticNetworkInterface`` .

    - **status** *(string) --*

      The status of the attachment. Valid values are ``PRECREATED`` , ``CREATED`` ,
      ``ATTACHING`` , ``ATTACHED`` , ``DETACHING`` , ``DETACHED`` , and ``DELETED`` .

    - **details** *(list) --*

      Details of the attachment. For elastic network interfaces, this includes the network
      interface ID, the MAC address, the subnet ID, and the private IPv4 address.

      - *(dict) --*

        A key-value pair object.

        - **name** *(string) --*

          The name of the key-value pair. For environment variables, this is the name of
          the environment variable.

        - **value** *(string) --*

          The value of the key-value pair. For environment variables, this is the value of
          the environment variable.
    """


_ClientDescribeContainerInstancesResponsecontainerInstancesattributesTypeDef = TypedDict(
    "_ClientDescribeContainerInstancesResponsecontainerInstancesattributesTypeDef",
    {"name": str, "value": str, "targetType": str, "targetId": str},
    total=False,
)


class ClientDescribeContainerInstancesResponsecontainerInstancesattributesTypeDef(
    _ClientDescribeContainerInstancesResponsecontainerInstancesattributesTypeDef
):
    """
    Type definition for `ClientDescribeContainerInstancesResponsecontainerInstances` `attributes`

    An attribute is a name-value pair associated with an Amazon ECS object. Attributes
    enable you to extend the Amazon ECS data model by adding custom metadata to your
    resources. For more information, see `Attributes
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html#attributes>`__
    in the *Amazon Elastic Container Service Developer Guide* .

    - **name** *(string) --*

      The name of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
      hyphens, underscores, and periods are allowed.

    - **value** *(string) --*

      The value of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
      hyphens, underscores, periods, at signs (@), forward slashes, colons, and spaces are
      allowed.

    - **targetType** *(string) --*

      The type of the target with which to attach the attribute. This parameter is required
      if you use the short form ID for a resource instead of the full ARN.

    - **targetId** *(string) --*

      The ID of the target. You can specify the short form ID for a resource or the full
      Amazon Resource Name (ARN).
    """


_ClientDescribeContainerInstancesResponsecontainerInstancesregisteredResourcesTypeDef = TypedDict(
    "_ClientDescribeContainerInstancesResponsecontainerInstancesregisteredResourcesTypeDef",
    {
        "name": str,
        "type": str,
        "doubleValue": float,
        "longValue": int,
        "integerValue": int,
        "stringSetValue": List[str],
    },
    total=False,
)


class ClientDescribeContainerInstancesResponsecontainerInstancesregisteredResourcesTypeDef(
    _ClientDescribeContainerInstancesResponsecontainerInstancesregisteredResourcesTypeDef
):
    """
    Type definition for `ClientDescribeContainerInstancesResponsecontainerInstances` `registeredResources`

    Describes the resources available for a container instance.

    - **name** *(string) --*

      The name of the resource, such as ``CPU`` , ``MEMORY`` , ``PORTS`` , ``PORTS_UDP`` ,
      or a user-defined resource.

    - **type** *(string) --*

      The type of the resource, such as ``INTEGER`` , ``DOUBLE`` , ``LONG`` , or
      ``STRINGSET`` .

    - **doubleValue** *(float) --*

      When the ``doubleValue`` type is set, the value of the resource must be a double
      precision floating-point type.

    - **longValue** *(integer) --*

      When the ``longValue`` type is set, the value of the resource must be an extended
      precision floating-point type.

    - **integerValue** *(integer) --*

      When the ``integerValue`` type is set, the value of the resource must be an integer.

    - **stringSetValue** *(list) --*

      When the ``stringSetValue`` type is set, the value of the resource must be a string
      type.

      - *(string) --*
    """


_ClientDescribeContainerInstancesResponsecontainerInstancesremainingResourcesTypeDef = TypedDict(
    "_ClientDescribeContainerInstancesResponsecontainerInstancesremainingResourcesTypeDef",
    {
        "name": str,
        "type": str,
        "doubleValue": float,
        "longValue": int,
        "integerValue": int,
        "stringSetValue": List[str],
    },
    total=False,
)


class ClientDescribeContainerInstancesResponsecontainerInstancesremainingResourcesTypeDef(
    _ClientDescribeContainerInstancesResponsecontainerInstancesremainingResourcesTypeDef
):
    """
    Type definition for `ClientDescribeContainerInstancesResponsecontainerInstances` `remainingResources`

    Describes the resources available for a container instance.

    - **name** *(string) --*

      The name of the resource, such as ``CPU`` , ``MEMORY`` , ``PORTS`` , ``PORTS_UDP`` ,
      or a user-defined resource.

    - **type** *(string) --*

      The type of the resource, such as ``INTEGER`` , ``DOUBLE`` , ``LONG`` , or
      ``STRINGSET`` .

    - **doubleValue** *(float) --*

      When the ``doubleValue`` type is set, the value of the resource must be a double
      precision floating-point type.

    - **longValue** *(integer) --*

      When the ``longValue`` type is set, the value of the resource must be an extended
      precision floating-point type.

    - **integerValue** *(integer) --*

      When the ``integerValue`` type is set, the value of the resource must be an integer.

    - **stringSetValue** *(list) --*

      When the ``stringSetValue`` type is set, the value of the resource must be a string
      type.

      - *(string) --*
    """


_ClientDescribeContainerInstancesResponsecontainerInstancestagsTypeDef = TypedDict(
    "_ClientDescribeContainerInstancesResponsecontainerInstancestagsTypeDef",
    {"key": str, "value": str},
    total=False,
)


class ClientDescribeContainerInstancesResponsecontainerInstancestagsTypeDef(
    _ClientDescribeContainerInstancesResponsecontainerInstancestagsTypeDef
):
    """
    Type definition for `ClientDescribeContainerInstancesResponsecontainerInstances` `tags`

    The metadata that you apply to a resource to help you categorize and organize them.
    Each tag consists of a key and an optional value, both of which you define.

    The following basic restrictions apply to tags:

    * Maximum number of tags per resource - 50

    * For each resource, each tag key must be unique, and each tag key can have only one
    value.

    * Maximum key length - 128 Unicode characters in UTF-8

    * Maximum value length - 256 Unicode characters in UTF-8

    * If your tagging schema is used across multiple services and resources, remember that
    other services may have restrictions on allowed characters. Generally allowed
    characters are: letters, numbers, and spaces representable in UTF-8, and the following
    characters: + - = . _ : / @.

    * Tag keys and values are case-sensitive.

    * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
    prefix for either keys or values as it is reserved for AWS use. You cannot edit or
    delete tag keys or values with this prefix. Tags with this prefix do not count against
    your tags per resource limit.

    - **key** *(string) --*

      One part of a key-value pair that make up a tag. A ``key`` is a general label that
      acts like a category for more specific tag values.

    - **value** *(string) --*

      The optional part of a key-value pair that make up a tag. A ``value`` acts as a
      descriptor within a tag category (key).
    """


_ClientDescribeContainerInstancesResponsecontainerInstancesversionInfoTypeDef = TypedDict(
    "_ClientDescribeContainerInstancesResponsecontainerInstancesversionInfoTypeDef",
    {"agentVersion": str, "agentHash": str, "dockerVersion": str},
    total=False,
)


class ClientDescribeContainerInstancesResponsecontainerInstancesversionInfoTypeDef(
    _ClientDescribeContainerInstancesResponsecontainerInstancesversionInfoTypeDef
):
    """
    Type definition for `ClientDescribeContainerInstancesResponsecontainerInstances` `versionInfo`

    The version information for the Amazon ECS container agent and Docker daemon running on
    the container instance.

    - **agentVersion** *(string) --*

      The version number of the Amazon ECS container agent.

    - **agentHash** *(string) --*

      The Git commit hash for the Amazon ECS container agent build on the `amazon-ecs-agent
      <https://github.com/aws/amazon-ecs-agent/commits/master>`__ GitHub repository.

    - **dockerVersion** *(string) --*

      The Docker version running on the container instance.
    """


_ClientDescribeContainerInstancesResponsecontainerInstancesTypeDef = TypedDict(
    "_ClientDescribeContainerInstancesResponsecontainerInstancesTypeDef",
    {
        "containerInstanceArn": str,
        "ec2InstanceId": str,
        "version": int,
        "versionInfo": ClientDescribeContainerInstancesResponsecontainerInstancesversionInfoTypeDef,
        "remainingResources": List[
            ClientDescribeContainerInstancesResponsecontainerInstancesremainingResourcesTypeDef
        ],
        "registeredResources": List[
            ClientDescribeContainerInstancesResponsecontainerInstancesregisteredResourcesTypeDef
        ],
        "status": str,
        "statusReason": str,
        "agentConnected": bool,
        "runningTasksCount": int,
        "pendingTasksCount": int,
        "agentUpdateStatus": str,
        "attributes": List[
            ClientDescribeContainerInstancesResponsecontainerInstancesattributesTypeDef
        ],
        "registeredAt": datetime,
        "attachments": List[
            ClientDescribeContainerInstancesResponsecontainerInstancesattachmentsTypeDef
        ],
        "tags": List[
            ClientDescribeContainerInstancesResponsecontainerInstancestagsTypeDef
        ],
    },
    total=False,
)


class ClientDescribeContainerInstancesResponsecontainerInstancesTypeDef(
    _ClientDescribeContainerInstancesResponsecontainerInstancesTypeDef
):
    """
    Type definition for `ClientDescribeContainerInstancesResponse` `containerInstances`

    An EC2 instance that is running the Amazon ECS agent and has been registered with a cluster.

    - **containerInstanceArn** *(string) --*

      The Amazon Resource Name (ARN) of the container instance. The ARN contains the
      ``arn:aws:ecs`` namespace, followed by the Region of the container instance, the AWS
      account ID of the container instance owner, the ``container-instance`` namespace, and
      then the container instance ID. For example,
      ``arn:aws:ecs:region:aws_account_id:container-instance/container_instance_ID`` .

    - **ec2InstanceId** *(string) --*

      The EC2 instance ID of the container instance.

    - **version** *(integer) --*

      The version counter for the container instance. Every time a container instance
      experiences a change that triggers a CloudWatch event, the version counter is
      incremented. If you are replicating your Amazon ECS container instance state with
      CloudWatch Events, you can compare the version of a container instance reported by the
      Amazon ECS APIs with the version reported in CloudWatch Events for the container instance
      (inside the ``detail`` object) to verify that the version in your event stream is current.

    - **versionInfo** *(dict) --*

      The version information for the Amazon ECS container agent and Docker daemon running on
      the container instance.

      - **agentVersion** *(string) --*

        The version number of the Amazon ECS container agent.

      - **agentHash** *(string) --*

        The Git commit hash for the Amazon ECS container agent build on the `amazon-ecs-agent
        <https://github.com/aws/amazon-ecs-agent/commits/master>`__ GitHub repository.

      - **dockerVersion** *(string) --*

        The Docker version running on the container instance.

    - **remainingResources** *(list) --*

      For CPU and memory resource types, this parameter describes the remaining CPU and memory
      that has not already been allocated to tasks and is therefore available for new tasks.
      For port resource types, this parameter describes the ports that were reserved by the
      Amazon ECS container agent (at instance registration time) and any task containers that
      have reserved port mappings on the host (with the ``host`` or ``bridge`` network mode).
      Any port that is not specified here is available for new tasks.

      - *(dict) --*

        Describes the resources available for a container instance.

        - **name** *(string) --*

          The name of the resource, such as ``CPU`` , ``MEMORY`` , ``PORTS`` , ``PORTS_UDP`` ,
          or a user-defined resource.

        - **type** *(string) --*

          The type of the resource, such as ``INTEGER`` , ``DOUBLE`` , ``LONG`` , or
          ``STRINGSET`` .

        - **doubleValue** *(float) --*

          When the ``doubleValue`` type is set, the value of the resource must be a double
          precision floating-point type.

        - **longValue** *(integer) --*

          When the ``longValue`` type is set, the value of the resource must be an extended
          precision floating-point type.

        - **integerValue** *(integer) --*

          When the ``integerValue`` type is set, the value of the resource must be an integer.

        - **stringSetValue** *(list) --*

          When the ``stringSetValue`` type is set, the value of the resource must be a string
          type.

          - *(string) --*

    - **registeredResources** *(list) --*

      For CPU and memory resource types, this parameter describes the amount of each resource
      that was available on the container instance when the container agent registered it with
      Amazon ECS. This value represents the total amount of CPU and memory that can be
      allocated on this container instance to tasks. For port resource types, this parameter
      describes the ports that were reserved by the Amazon ECS container agent when it
      registered the container instance with Amazon ECS.

      - *(dict) --*

        Describes the resources available for a container instance.

        - **name** *(string) --*

          The name of the resource, such as ``CPU`` , ``MEMORY`` , ``PORTS`` , ``PORTS_UDP`` ,
          or a user-defined resource.

        - **type** *(string) --*

          The type of the resource, such as ``INTEGER`` , ``DOUBLE`` , ``LONG`` , or
          ``STRINGSET`` .

        - **doubleValue** *(float) --*

          When the ``doubleValue`` type is set, the value of the resource must be a double
          precision floating-point type.

        - **longValue** *(integer) --*

          When the ``longValue`` type is set, the value of the resource must be an extended
          precision floating-point type.

        - **integerValue** *(integer) --*

          When the ``integerValue`` type is set, the value of the resource must be an integer.

        - **stringSetValue** *(list) --*

          When the ``stringSetValue`` type is set, the value of the resource must be a string
          type.

          - *(string) --*

    - **status** *(string) --*

      The status of the container instance. The valid values are ``REGISTERING`` ,
      ``REGISTRATION_FAILED`` , ``ACTIVE`` , ``INACTIVE`` , ``DEREGISTERING`` , or ``DRAINING``
      .

      If your account has opted in to the ``awsvpcTrunking`` account setting, then any newly
      registered container instance will transition to a ``REGISTERING`` status while the trunk
      elastic network interface is provisioned for the instance. If the registration fails, the
      instance will transition to a ``REGISTRATION_FAILED`` status. You can describe the
      container instance and see the reason for failure in the ``statusReason`` parameter. Once
      the container instance is terminated, the instance transitions to a ``DEREGISTERING``
      status while the trunk elastic network interface is deprovisioned. The instance then
      transitions to an ``INACTIVE`` status.

      The ``ACTIVE`` status indicates that the container instance can accept tasks. The
      ``DRAINING`` indicates that new tasks are not placed on the container instance and any
      service tasks running on the container instance are removed if possible. For more
      information, see `Container Instance Draining
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/container-instance-draining.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

    - **statusReason** *(string) --*

      The reason that the container instance reached its current status.

    - **agentConnected** *(boolean) --*

      This parameter returns ``true`` if the agent is connected to Amazon ECS. Registered
      instances with an agent that may be unhealthy or stopped return ``false`` . Only
      instances connected to an agent can accept placement requests.

    - **runningTasksCount** *(integer) --*

      The number of tasks on the container instance that are in the ``RUNNING`` status.

    - **pendingTasksCount** *(integer) --*

      The number of tasks on the container instance that are in the ``PENDING`` status.

    - **agentUpdateStatus** *(string) --*

      The status of the most recent agent update. If an update has never been requested, this
      value is ``NULL`` .

    - **attributes** *(list) --*

      The attributes set for the container instance, either by the Amazon ECS container agent
      at instance registration or manually with the  PutAttributes operation.

      - *(dict) --*

        An attribute is a name-value pair associated with an Amazon ECS object. Attributes
        enable you to extend the Amazon ECS data model by adding custom metadata to your
        resources. For more information, see `Attributes
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html#attributes>`__
        in the *Amazon Elastic Container Service Developer Guide* .

        - **name** *(string) --*

          The name of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
          hyphens, underscores, and periods are allowed.

        - **value** *(string) --*

          The value of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
          hyphens, underscores, periods, at signs (@), forward slashes, colons, and spaces are
          allowed.

        - **targetType** *(string) --*

          The type of the target with which to attach the attribute. This parameter is required
          if you use the short form ID for a resource instead of the full ARN.

        - **targetId** *(string) --*

          The ID of the target. You can specify the short form ID for a resource or the full
          Amazon Resource Name (ARN).

    - **registeredAt** *(datetime) --*

      The Unix timestamp for when the container instance was registered.

    - **attachments** *(list) --*

      The resources attached to a container instance, such as elastic network interfaces.

      - *(dict) --*

        An object representing a container instance or task attachment.

        - **id** *(string) --*

          The unique identifier for the attachment.

        - **type** *(string) --*

          The type of the attachment, such as ``ElasticNetworkInterface`` .

        - **status** *(string) --*

          The status of the attachment. Valid values are ``PRECREATED`` , ``CREATED`` ,
          ``ATTACHING`` , ``ATTACHED`` , ``DETACHING`` , ``DETACHED`` , and ``DELETED`` .

        - **details** *(list) --*

          Details of the attachment. For elastic network interfaces, this includes the network
          interface ID, the MAC address, the subnet ID, and the private IPv4 address.

          - *(dict) --*

            A key-value pair object.

            - **name** *(string) --*

              The name of the key-value pair. For environment variables, this is the name of
              the environment variable.

            - **value** *(string) --*

              The value of the key-value pair. For environment variables, this is the value of
              the environment variable.

    - **tags** *(list) --*

      The metadata that you apply to the container instance to help you categorize and organize
      them. Each tag consists of a key and an optional value, both of which you define.

      The following basic restrictions apply to tags:

      * Maximum number of tags per resource - 50

      * For each resource, each tag key must be unique, and each tag key can have only one
      value.

      * Maximum key length - 128 Unicode characters in UTF-8

      * Maximum value length - 256 Unicode characters in UTF-8

      * If your tagging schema is used across multiple services and resources, remember that
      other services may have restrictions on allowed characters. Generally allowed characters
      are: letters, numbers, and spaces representable in UTF-8, and the following characters: +
      - = . _ : / @.

      * Tag keys and values are case-sensitive.

      * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
      prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
      tag keys or values with this prefix. Tags with this prefix do not count against your tags
      per resource limit.

      - *(dict) --*

        The metadata that you apply to a resource to help you categorize and organize them.
        Each tag consists of a key and an optional value, both of which you define.

        The following basic restrictions apply to tags:

        * Maximum number of tags per resource - 50

        * For each resource, each tag key must be unique, and each tag key can have only one
        value.

        * Maximum key length - 128 Unicode characters in UTF-8

        * Maximum value length - 256 Unicode characters in UTF-8

        * If your tagging schema is used across multiple services and resources, remember that
        other services may have restrictions on allowed characters. Generally allowed
        characters are: letters, numbers, and spaces representable in UTF-8, and the following
        characters: + - = . _ : / @.

        * Tag keys and values are case-sensitive.

        * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
        prefix for either keys or values as it is reserved for AWS use. You cannot edit or
        delete tag keys or values with this prefix. Tags with this prefix do not count against
        your tags per resource limit.

        - **key** *(string) --*

          One part of a key-value pair that make up a tag. A ``key`` is a general label that
          acts like a category for more specific tag values.

        - **value** *(string) --*

          The optional part of a key-value pair that make up a tag. A ``value`` acts as a
          descriptor within a tag category (key).
    """


_ClientDescribeContainerInstancesResponsefailuresTypeDef = TypedDict(
    "_ClientDescribeContainerInstancesResponsefailuresTypeDef",
    {"arn": str, "reason": str, "detail": str},
    total=False,
)


class ClientDescribeContainerInstancesResponsefailuresTypeDef(
    _ClientDescribeContainerInstancesResponsefailuresTypeDef
):
    """
    Type definition for `ClientDescribeContainerInstancesResponse` `failures`

    A failed resource.

    - **arn** *(string) --*

      The Amazon Resource Name (ARN) of the failed resource.

    - **reason** *(string) --*

      The reason for the failure.

    - **detail** *(string) --*

      The details of the failure.
    """


_ClientDescribeContainerInstancesResponseTypeDef = TypedDict(
    "_ClientDescribeContainerInstancesResponseTypeDef",
    {
        "containerInstances": List[
            ClientDescribeContainerInstancesResponsecontainerInstancesTypeDef
        ],
        "failures": List[ClientDescribeContainerInstancesResponsefailuresTypeDef],
    },
    total=False,
)


class ClientDescribeContainerInstancesResponseTypeDef(
    _ClientDescribeContainerInstancesResponseTypeDef
):
    """
    Type definition for `ClientDescribeContainerInstances` `Response`

    - **containerInstances** *(list) --*

      The list of container instances.

      - *(dict) --*

        An EC2 instance that is running the Amazon ECS agent and has been registered with a cluster.

        - **containerInstanceArn** *(string) --*

          The Amazon Resource Name (ARN) of the container instance. The ARN contains the
          ``arn:aws:ecs`` namespace, followed by the Region of the container instance, the AWS
          account ID of the container instance owner, the ``container-instance`` namespace, and
          then the container instance ID. For example,
          ``arn:aws:ecs:region:aws_account_id:container-instance/container_instance_ID`` .

        - **ec2InstanceId** *(string) --*

          The EC2 instance ID of the container instance.

        - **version** *(integer) --*

          The version counter for the container instance. Every time a container instance
          experiences a change that triggers a CloudWatch event, the version counter is
          incremented. If you are replicating your Amazon ECS container instance state with
          CloudWatch Events, you can compare the version of a container instance reported by the
          Amazon ECS APIs with the version reported in CloudWatch Events for the container instance
          (inside the ``detail`` object) to verify that the version in your event stream is current.

        - **versionInfo** *(dict) --*

          The version information for the Amazon ECS container agent and Docker daemon running on
          the container instance.

          - **agentVersion** *(string) --*

            The version number of the Amazon ECS container agent.

          - **agentHash** *(string) --*

            The Git commit hash for the Amazon ECS container agent build on the `amazon-ecs-agent
            <https://github.com/aws/amazon-ecs-agent/commits/master>`__ GitHub repository.

          - **dockerVersion** *(string) --*

            The Docker version running on the container instance.

        - **remainingResources** *(list) --*

          For CPU and memory resource types, this parameter describes the remaining CPU and memory
          that has not already been allocated to tasks and is therefore available for new tasks.
          For port resource types, this parameter describes the ports that were reserved by the
          Amazon ECS container agent (at instance registration time) and any task containers that
          have reserved port mappings on the host (with the ``host`` or ``bridge`` network mode).
          Any port that is not specified here is available for new tasks.

          - *(dict) --*

            Describes the resources available for a container instance.

            - **name** *(string) --*

              The name of the resource, such as ``CPU`` , ``MEMORY`` , ``PORTS`` , ``PORTS_UDP`` ,
              or a user-defined resource.

            - **type** *(string) --*

              The type of the resource, such as ``INTEGER`` , ``DOUBLE`` , ``LONG`` , or
              ``STRINGSET`` .

            - **doubleValue** *(float) --*

              When the ``doubleValue`` type is set, the value of the resource must be a double
              precision floating-point type.

            - **longValue** *(integer) --*

              When the ``longValue`` type is set, the value of the resource must be an extended
              precision floating-point type.

            - **integerValue** *(integer) --*

              When the ``integerValue`` type is set, the value of the resource must be an integer.

            - **stringSetValue** *(list) --*

              When the ``stringSetValue`` type is set, the value of the resource must be a string
              type.

              - *(string) --*

        - **registeredResources** *(list) --*

          For CPU and memory resource types, this parameter describes the amount of each resource
          that was available on the container instance when the container agent registered it with
          Amazon ECS. This value represents the total amount of CPU and memory that can be
          allocated on this container instance to tasks. For port resource types, this parameter
          describes the ports that were reserved by the Amazon ECS container agent when it
          registered the container instance with Amazon ECS.

          - *(dict) --*

            Describes the resources available for a container instance.

            - **name** *(string) --*

              The name of the resource, such as ``CPU`` , ``MEMORY`` , ``PORTS`` , ``PORTS_UDP`` ,
              or a user-defined resource.

            - **type** *(string) --*

              The type of the resource, such as ``INTEGER`` , ``DOUBLE`` , ``LONG`` , or
              ``STRINGSET`` .

            - **doubleValue** *(float) --*

              When the ``doubleValue`` type is set, the value of the resource must be a double
              precision floating-point type.

            - **longValue** *(integer) --*

              When the ``longValue`` type is set, the value of the resource must be an extended
              precision floating-point type.

            - **integerValue** *(integer) --*

              When the ``integerValue`` type is set, the value of the resource must be an integer.

            - **stringSetValue** *(list) --*

              When the ``stringSetValue`` type is set, the value of the resource must be a string
              type.

              - *(string) --*

        - **status** *(string) --*

          The status of the container instance. The valid values are ``REGISTERING`` ,
          ``REGISTRATION_FAILED`` , ``ACTIVE`` , ``INACTIVE`` , ``DEREGISTERING`` , or ``DRAINING``
          .

          If your account has opted in to the ``awsvpcTrunking`` account setting, then any newly
          registered container instance will transition to a ``REGISTERING`` status while the trunk
          elastic network interface is provisioned for the instance. If the registration fails, the
          instance will transition to a ``REGISTRATION_FAILED`` status. You can describe the
          container instance and see the reason for failure in the ``statusReason`` parameter. Once
          the container instance is terminated, the instance transitions to a ``DEREGISTERING``
          status while the trunk elastic network interface is deprovisioned. The instance then
          transitions to an ``INACTIVE`` status.

          The ``ACTIVE`` status indicates that the container instance can accept tasks. The
          ``DRAINING`` indicates that new tasks are not placed on the container instance and any
          service tasks running on the container instance are removed if possible. For more
          information, see `Container Instance Draining
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/container-instance-draining.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

        - **statusReason** *(string) --*

          The reason that the container instance reached its current status.

        - **agentConnected** *(boolean) --*

          This parameter returns ``true`` if the agent is connected to Amazon ECS. Registered
          instances with an agent that may be unhealthy or stopped return ``false`` . Only
          instances connected to an agent can accept placement requests.

        - **runningTasksCount** *(integer) --*

          The number of tasks on the container instance that are in the ``RUNNING`` status.

        - **pendingTasksCount** *(integer) --*

          The number of tasks on the container instance that are in the ``PENDING`` status.

        - **agentUpdateStatus** *(string) --*

          The status of the most recent agent update. If an update has never been requested, this
          value is ``NULL`` .

        - **attributes** *(list) --*

          The attributes set for the container instance, either by the Amazon ECS container agent
          at instance registration or manually with the  PutAttributes operation.

          - *(dict) --*

            An attribute is a name-value pair associated with an Amazon ECS object. Attributes
            enable you to extend the Amazon ECS data model by adding custom metadata to your
            resources. For more information, see `Attributes
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html#attributes>`__
            in the *Amazon Elastic Container Service Developer Guide* .

            - **name** *(string) --*

              The name of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
              hyphens, underscores, and periods are allowed.

            - **value** *(string) --*

              The value of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
              hyphens, underscores, periods, at signs (@), forward slashes, colons, and spaces are
              allowed.

            - **targetType** *(string) --*

              The type of the target with which to attach the attribute. This parameter is required
              if you use the short form ID for a resource instead of the full ARN.

            - **targetId** *(string) --*

              The ID of the target. You can specify the short form ID for a resource or the full
              Amazon Resource Name (ARN).

        - **registeredAt** *(datetime) --*

          The Unix timestamp for when the container instance was registered.

        - **attachments** *(list) --*

          The resources attached to a container instance, such as elastic network interfaces.

          - *(dict) --*

            An object representing a container instance or task attachment.

            - **id** *(string) --*

              The unique identifier for the attachment.

            - **type** *(string) --*

              The type of the attachment, such as ``ElasticNetworkInterface`` .

            - **status** *(string) --*

              The status of the attachment. Valid values are ``PRECREATED`` , ``CREATED`` ,
              ``ATTACHING`` , ``ATTACHED`` , ``DETACHING`` , ``DETACHED`` , and ``DELETED`` .

            - **details** *(list) --*

              Details of the attachment. For elastic network interfaces, this includes the network
              interface ID, the MAC address, the subnet ID, and the private IPv4 address.

              - *(dict) --*

                A key-value pair object.

                - **name** *(string) --*

                  The name of the key-value pair. For environment variables, this is the name of
                  the environment variable.

                - **value** *(string) --*

                  The value of the key-value pair. For environment variables, this is the value of
                  the environment variable.

        - **tags** *(list) --*

          The metadata that you apply to the container instance to help you categorize and organize
          them. Each tag consists of a key and an optional value, both of which you define.

          The following basic restrictions apply to tags:

          * Maximum number of tags per resource - 50

          * For each resource, each tag key must be unique, and each tag key can have only one
          value.

          * Maximum key length - 128 Unicode characters in UTF-8

          * Maximum value length - 256 Unicode characters in UTF-8

          * If your tagging schema is used across multiple services and resources, remember that
          other services may have restrictions on allowed characters. Generally allowed characters
          are: letters, numbers, and spaces representable in UTF-8, and the following characters: +
          - = . _ : / @.

          * Tag keys and values are case-sensitive.

          * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
          prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
          tag keys or values with this prefix. Tags with this prefix do not count against your tags
          per resource limit.

          - *(dict) --*

            The metadata that you apply to a resource to help you categorize and organize them.
            Each tag consists of a key and an optional value, both of which you define.

            The following basic restrictions apply to tags:

            * Maximum number of tags per resource - 50

            * For each resource, each tag key must be unique, and each tag key can have only one
            value.

            * Maximum key length - 128 Unicode characters in UTF-8

            * Maximum value length - 256 Unicode characters in UTF-8

            * If your tagging schema is used across multiple services and resources, remember that
            other services may have restrictions on allowed characters. Generally allowed
            characters are: letters, numbers, and spaces representable in UTF-8, and the following
            characters: + - = . _ : / @.

            * Tag keys and values are case-sensitive.

            * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
            prefix for either keys or values as it is reserved for AWS use. You cannot edit or
            delete tag keys or values with this prefix. Tags with this prefix do not count against
            your tags per resource limit.

            - **key** *(string) --*

              One part of a key-value pair that make up a tag. A ``key`` is a general label that
              acts like a category for more specific tag values.

            - **value** *(string) --*

              The optional part of a key-value pair that make up a tag. A ``value`` acts as a
              descriptor within a tag category (key).

    - **failures** *(list) --*

      Any failures associated with the call.

      - *(dict) --*

        A failed resource.

        - **arn** *(string) --*

          The Amazon Resource Name (ARN) of the failed resource.

        - **reason** *(string) --*

          The reason for the failure.

        - **detail** *(string) --*

          The details of the failure.
    """


_ClientDescribeServicesResponsefailuresTypeDef = TypedDict(
    "_ClientDescribeServicesResponsefailuresTypeDef",
    {"arn": str, "reason": str, "detail": str},
    total=False,
)


class ClientDescribeServicesResponsefailuresTypeDef(
    _ClientDescribeServicesResponsefailuresTypeDef
):
    """
    Type definition for `ClientDescribeServicesResponse` `failures`

    A failed resource.

    - **arn** *(string) --*

      The Amazon Resource Name (ARN) of the failed resource.

    - **reason** *(string) --*

      The reason for the failure.

    - **detail** *(string) --*

      The details of the failure.
    """


_ClientDescribeServicesResponseservicesdeploymentConfigurationTypeDef = TypedDict(
    "_ClientDescribeServicesResponseservicesdeploymentConfigurationTypeDef",
    {"maximumPercent": int, "minimumHealthyPercent": int},
    total=False,
)


class ClientDescribeServicesResponseservicesdeploymentConfigurationTypeDef(
    _ClientDescribeServicesResponseservicesdeploymentConfigurationTypeDef
):
    """
    Type definition for `ClientDescribeServicesResponseservices` `deploymentConfiguration`

    Optional deployment parameters that control how many tasks run during the deployment and
    the ordering of stopping and starting tasks.

    - **maximumPercent** *(integer) --*

      If a service is using the rolling update (``ECS`` ) deployment type, the **maximum
      percent** parameter represents an upper limit on the number of tasks in a service that
      are allowed in the ``RUNNING`` or ``PENDING`` state during a deployment, as a
      percentage of the desired number of tasks (rounded down to the nearest integer), and
      while any container instances are in the ``DRAINING`` state if the service contains
      tasks using the EC2 launch type. This parameter enables you to define the deployment
      batch size. For example, if your service has a desired number of four tasks and a
      maximum percent value of 200%, the scheduler may start four new tasks before stopping
      the four older tasks (provided that the cluster resources required to do this are
      available). The default value for maximum percent is 200%.

      If a service is using the blue/green (``CODE_DEPLOY`` ) or ``EXTERNAL`` deployment
      types and tasks that use the EC2 launch type, the **maximum percent** value is set to
      the default value and is used to define the upper limit on the number of the tasks in
      the service that remain in the ``RUNNING`` state while the container instances are in
      the ``DRAINING`` state. If the tasks in the service use the Fargate launch type, the
      maximum percent value is not used, although it is returned when describing your service.

    - **minimumHealthyPercent** *(integer) --*

      If a service is using the rolling update (``ECS`` ) deployment type, the **minimum
      healthy percent** represents a lower limit on the number of tasks in a service that
      must remain in the ``RUNNING`` state during a deployment, as a percentage of the
      desired number of tasks (rounded up to the nearest integer), and while any container
      instances are in the ``DRAINING`` state if the service contains tasks using the EC2
      launch type. This parameter enables you to deploy without using additional cluster
      capacity. For example, if your service has a desired number of four tasks and a minimum
      healthy percent of 50%, the scheduler may stop two existing tasks to free up cluster
      capacity before starting two new tasks. Tasks for services that *do not* use a load
      balancer are considered healthy if they are in the ``RUNNING`` state; tasks for
      services that *do* use a load balancer are considered healthy if they are in the
      ``RUNNING`` state and they are reported as healthy by the load balancer. The default
      value for minimum healthy percent is 100%.

      If a service is using the blue/green (``CODE_DEPLOY`` ) or ``EXTERNAL`` deployment
      types and tasks that use the EC2 launch type, the **minimum healthy percent** value is
      set to the default value and is used to define the lower limit on the number of the
      tasks in the service that remain in the ``RUNNING`` state while the container instances
      are in the ``DRAINING`` state. If the tasks in the service use the Fargate launch type,
      the minimum healthy percent value is not used, although it is returned when describing
      your service.
    """


_ClientDescribeServicesResponseservicesdeploymentControllerTypeDef = TypedDict(
    "_ClientDescribeServicesResponseservicesdeploymentControllerTypeDef",
    {"type": str},
    total=False,
)


class ClientDescribeServicesResponseservicesdeploymentControllerTypeDef(
    _ClientDescribeServicesResponseservicesdeploymentControllerTypeDef
):
    """
    Type definition for `ClientDescribeServicesResponseservices` `deploymentController`

    The deployment controller type the service is using. When using the DescribeServices API,
    this field is omitted if the service is using the ``ECS`` deployment controller type.

    - **type** *(string) --*

      The deployment controller type to use.

      There are three deployment controller types available:

        ECS

      The rolling update (``ECS`` ) deployment type involves replacing the current running
      version of the container with the latest version. The number of containers Amazon ECS
      adds or removes from the service during a rolling update is controlled by adjusting the
      minimum and maximum number of healthy tasks allowed during a service deployment, as
      specified in the  DeploymentConfiguration .

        CODE_DEPLOY

      The blue/green (``CODE_DEPLOY`` ) deployment type uses the blue/green deployment model
      powered by AWS CodeDeploy, which allows you to verify a new deployment of a service
      before sending production traffic to it.

        EXTERNAL

      The external (``EXTERNAL`` ) deployment type enables you to use any third-party
      deployment controller for full control over the deployment process for an Amazon ECS
      service.
    """


_ClientDescribeServicesResponseservicesdeploymentsnetworkConfigurationawsvpcConfigurationTypeDef = TypedDict(
    "_ClientDescribeServicesResponseservicesdeploymentsnetworkConfigurationawsvpcConfigurationTypeDef",
    {"subnets": List[str], "securityGroups": List[str], "assignPublicIp": str},
    total=False,
)


class ClientDescribeServicesResponseservicesdeploymentsnetworkConfigurationawsvpcConfigurationTypeDef(
    _ClientDescribeServicesResponseservicesdeploymentsnetworkConfigurationawsvpcConfigurationTypeDef
):
    """
    Type definition for `ClientDescribeServicesResponseservicesdeploymentsnetworkConfiguration` `awsvpcConfiguration`

    The VPC subnets and security groups associated with a task.

    .. note::

      All specified subnets and security groups must be from the same VPC.

    - **subnets** *(list) --*

      The subnets associated with the task or service. There is a limit of 16 subnets
      that can be specified per ``AwsVpcConfiguration`` .

      .. note::

        All specified subnets must be from the same VPC.

      - *(string) --*

    - **securityGroups** *(list) --*

      The security groups associated with the task or service. If you do not specify a
      security group, the default security group for the VPC is used. There is a limit
      of 5 security groups that can be specified per ``AwsVpcConfiguration`` .

      .. note::

        All specified security groups must be from the same VPC.

      - *(string) --*

    - **assignPublicIp** *(string) --*

      Whether the task's elastic network interface receives a public IP address. The
      default value is ``DISABLED`` .
    """


_ClientDescribeServicesResponseservicesdeploymentsnetworkConfigurationTypeDef = TypedDict(
    "_ClientDescribeServicesResponseservicesdeploymentsnetworkConfigurationTypeDef",
    {
        "awsvpcConfiguration": ClientDescribeServicesResponseservicesdeploymentsnetworkConfigurationawsvpcConfigurationTypeDef
    },
    total=False,
)


class ClientDescribeServicesResponseservicesdeploymentsnetworkConfigurationTypeDef(
    _ClientDescribeServicesResponseservicesdeploymentsnetworkConfigurationTypeDef
):
    """
    Type definition for `ClientDescribeServicesResponseservicesdeployments` `networkConfiguration`

    The VPC subnet and security group configuration for tasks that receive their own
    elastic network interface by using the ``awsvpc`` networking mode.

    - **awsvpcConfiguration** *(dict) --*

      The VPC subnets and security groups associated with a task.

      .. note::

        All specified subnets and security groups must be from the same VPC.

      - **subnets** *(list) --*

        The subnets associated with the task or service. There is a limit of 16 subnets
        that can be specified per ``AwsVpcConfiguration`` .

        .. note::

          All specified subnets must be from the same VPC.

        - *(string) --*

      - **securityGroups** *(list) --*

        The security groups associated with the task or service. If you do not specify a
        security group, the default security group for the VPC is used. There is a limit
        of 5 security groups that can be specified per ``AwsVpcConfiguration`` .

        .. note::

          All specified security groups must be from the same VPC.

        - *(string) --*

      - **assignPublicIp** *(string) --*

        Whether the task's elastic network interface receives a public IP address. The
        default value is ``DISABLED`` .
    """


_ClientDescribeServicesResponseservicesdeploymentsTypeDef = TypedDict(
    "_ClientDescribeServicesResponseservicesdeploymentsTypeDef",
    {
        "id": str,
        "status": str,
        "taskDefinition": str,
        "desiredCount": int,
        "pendingCount": int,
        "runningCount": int,
        "createdAt": datetime,
        "updatedAt": datetime,
        "launchType": str,
        "platformVersion": str,
        "networkConfiguration": ClientDescribeServicesResponseservicesdeploymentsnetworkConfigurationTypeDef,
    },
    total=False,
)


class ClientDescribeServicesResponseservicesdeploymentsTypeDef(
    _ClientDescribeServicesResponseservicesdeploymentsTypeDef
):
    """
    Type definition for `ClientDescribeServicesResponseservices` `deployments`

    The details of an Amazon ECS service deployment. This is used only when a service uses
    the ``ECS`` deployment controller type.

    - **id** *(string) --*

      The ID of the deployment.

    - **status** *(string) --*

      The status of the deployment. The following describes each state:

        PRIMARY

      The most recent deployment of a service.

        ACTIVE

      A service deployment that still has running tasks, but are in the process of being
      replaced with a new ``PRIMARY`` deployment.

        INACTIVE

      A deployment that has been completely replaced.

    - **taskDefinition** *(string) --*

      The most recent task definition that was specified for the tasks in the service to
      use.

    - **desiredCount** *(integer) --*

      The most recent desired count of tasks that was specified for the service to deploy
      or maintain.

    - **pendingCount** *(integer) --*

      The number of tasks in the deployment that are in the ``PENDING`` status.

    - **runningCount** *(integer) --*

      The number of tasks in the deployment that are in the ``RUNNING`` status.

    - **createdAt** *(datetime) --*

      The Unix timestamp for when the service deployment was created.

    - **updatedAt** *(datetime) --*

      The Unix timestamp for when the service deployment was last updated.

    - **launchType** *(string) --*

      The launch type the tasks in the service are using. For more information, see `Amazon
      ECS Launch Types
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html>`__ in
      the *Amazon Elastic Container Service Developer Guide* .

    - **platformVersion** *(string) --*

      The platform version on which your tasks in the service are running. A platform
      version is only specified for tasks using the Fargate launch type. If one is not
      specified, the ``LATEST`` platform version is used by default. For more information,
      see `AWS Fargate Platform Versions
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

    - **networkConfiguration** *(dict) --*

      The VPC subnet and security group configuration for tasks that receive their own
      elastic network interface by using the ``awsvpc`` networking mode.

      - **awsvpcConfiguration** *(dict) --*

        The VPC subnets and security groups associated with a task.

        .. note::

          All specified subnets and security groups must be from the same VPC.

        - **subnets** *(list) --*

          The subnets associated with the task or service. There is a limit of 16 subnets
          that can be specified per ``AwsVpcConfiguration`` .

          .. note::

            All specified subnets must be from the same VPC.

          - *(string) --*

        - **securityGroups** *(list) --*

          The security groups associated with the task or service. If you do not specify a
          security group, the default security group for the VPC is used. There is a limit
          of 5 security groups that can be specified per ``AwsVpcConfiguration`` .

          .. note::

            All specified security groups must be from the same VPC.

          - *(string) --*

        - **assignPublicIp** *(string) --*

          Whether the task's elastic network interface receives a public IP address. The
          default value is ``DISABLED`` .
    """


_ClientDescribeServicesResponseserviceseventsTypeDef = TypedDict(
    "_ClientDescribeServicesResponseserviceseventsTypeDef",
    {"id": str, "createdAt": datetime, "message": str},
    total=False,
)


class ClientDescribeServicesResponseserviceseventsTypeDef(
    _ClientDescribeServicesResponseserviceseventsTypeDef
):
    """
    Type definition for `ClientDescribeServicesResponseservices` `events`

    Details on an event associated with a service.

    - **id** *(string) --*

      The ID string of the event.

    - **createdAt** *(datetime) --*

      The Unix timestamp for when the event was triggered.

    - **message** *(string) --*

      The event message.
    """


_ClientDescribeServicesResponseservicesloadBalancersTypeDef = TypedDict(
    "_ClientDescribeServicesResponseservicesloadBalancersTypeDef",
    {
        "targetGroupArn": str,
        "loadBalancerName": str,
        "containerName": str,
        "containerPort": int,
    },
    total=False,
)


class ClientDescribeServicesResponseservicesloadBalancersTypeDef(
    _ClientDescribeServicesResponseservicesloadBalancersTypeDef
):
    """
    Type definition for `ClientDescribeServicesResponseservices` `loadBalancers`

    Details on the load balancer or load balancers to use with a service or task set.

    - **targetGroupArn** *(string) --*

      The full Amazon Resource Name (ARN) of the Elastic Load Balancing target group or
      groups associated with a service or task set.

      A target group ARN is only specified when using an Application Load Balancer or
      Network Load Balancer. If you are using a Classic Load Balancer this should be
      omitted.

      For services using the ``ECS`` deployment controller, you can specify one or multiple
      target groups. For more information, see `Registering Multiple Target Groups with a
      Service
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

      For services using the ``CODE_DEPLOY`` deployment controller, you are required to
      define two target groups for the load balancer. For more information, see `Blue/Green
      Deployment with CodeDeploy
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-bluegreen.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

      .. warning::

        If your service's task definition uses the ``awsvpc`` network mode (which is
        required for the Fargate launch type), you must choose ``ip`` as the target type,
        not ``instance`` , when creating your target groups because tasks that use the
        ``awsvpc`` network mode are associated with an elastic network interface, not an
        Amazon EC2 instance.

    - **loadBalancerName** *(string) --*

      The name of the load balancer to associate with the Amazon ECS service or task set.

      A load balancer name is only specified when using a Classic Load Balancer. If you are
      using an Application Load Balancer or a Network Load Balancer this should be omitted.

    - **containerName** *(string) --*

      The name of the container (as it appears in a container definition) to associate with
      the load balancer.

    - **containerPort** *(integer) --*

      The port on the container to associate with the load balancer. This port must
      correspond to a ``containerPort`` in the task definition the tasks in the service are
      using. For tasks that use the EC2 launch type, the container instance they are
      launched on must allow ingress traffic on the ``hostPort`` of the port mapping.
    """


_ClientDescribeServicesResponseservicesnetworkConfigurationawsvpcConfigurationTypeDef = TypedDict(
    "_ClientDescribeServicesResponseservicesnetworkConfigurationawsvpcConfigurationTypeDef",
    {"subnets": List[str], "securityGroups": List[str], "assignPublicIp": str},
    total=False,
)


class ClientDescribeServicesResponseservicesnetworkConfigurationawsvpcConfigurationTypeDef(
    _ClientDescribeServicesResponseservicesnetworkConfigurationawsvpcConfigurationTypeDef
):
    """
    Type definition for `ClientDescribeServicesResponseservicesnetworkConfiguration` `awsvpcConfiguration`

    The VPC subnets and security groups associated with a task.

    .. note::

      All specified subnets and security groups must be from the same VPC.

    - **subnets** *(list) --*

      The subnets associated with the task or service. There is a limit of 16 subnets that
      can be specified per ``AwsVpcConfiguration`` .

      .. note::

        All specified subnets must be from the same VPC.

      - *(string) --*

    - **securityGroups** *(list) --*

      The security groups associated with the task or service. If you do not specify a
      security group, the default security group for the VPC is used. There is a limit of 5
      security groups that can be specified per ``AwsVpcConfiguration`` .

      .. note::

        All specified security groups must be from the same VPC.

      - *(string) --*

    - **assignPublicIp** *(string) --*

      Whether the task's elastic network interface receives a public IP address. The
      default value is ``DISABLED`` .
    """


_ClientDescribeServicesResponseservicesnetworkConfigurationTypeDef = TypedDict(
    "_ClientDescribeServicesResponseservicesnetworkConfigurationTypeDef",
    {
        "awsvpcConfiguration": ClientDescribeServicesResponseservicesnetworkConfigurationawsvpcConfigurationTypeDef
    },
    total=False,
)


class ClientDescribeServicesResponseservicesnetworkConfigurationTypeDef(
    _ClientDescribeServicesResponseservicesnetworkConfigurationTypeDef
):
    """
    Type definition for `ClientDescribeServicesResponseservices` `networkConfiguration`

    The VPC subnet and security group configuration for tasks that receive their own elastic
    network interface by using the ``awsvpc`` networking mode.

    - **awsvpcConfiguration** *(dict) --*

      The VPC subnets and security groups associated with a task.

      .. note::

        All specified subnets and security groups must be from the same VPC.

      - **subnets** *(list) --*

        The subnets associated with the task or service. There is a limit of 16 subnets that
        can be specified per ``AwsVpcConfiguration`` .

        .. note::

          All specified subnets must be from the same VPC.

        - *(string) --*

      - **securityGroups** *(list) --*

        The security groups associated with the task or service. If you do not specify a
        security group, the default security group for the VPC is used. There is a limit of 5
        security groups that can be specified per ``AwsVpcConfiguration`` .

        .. note::

          All specified security groups must be from the same VPC.

        - *(string) --*

      - **assignPublicIp** *(string) --*

        Whether the task's elastic network interface receives a public IP address. The
        default value is ``DISABLED`` .
    """


_ClientDescribeServicesResponseservicesplacementConstraintsTypeDef = TypedDict(
    "_ClientDescribeServicesResponseservicesplacementConstraintsTypeDef",
    {"type": str, "expression": str},
    total=False,
)


class ClientDescribeServicesResponseservicesplacementConstraintsTypeDef(
    _ClientDescribeServicesResponseservicesplacementConstraintsTypeDef
):
    """
    Type definition for `ClientDescribeServicesResponseservices` `placementConstraints`

    An object representing a constraint on task placement. For more information, see `Task
    Placement Constraints
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html>`__
    in the *Amazon Elastic Container Service Developer Guide* .

    .. note::

      If you are using the Fargate launch type, task placement constraints are not
      supported.

    - **type** *(string) --*

      The type of constraint. Use ``distinctInstance`` to ensure that each task in a
      particular group is running on a different container instance. Use ``memberOf`` to
      restrict the selection to a group of valid candidates.

    - **expression** *(string) --*

      A cluster query language expression to apply to the constraint. You cannot specify an
      expression if the constraint type is ``distinctInstance`` . For more information, see
      `Cluster Query Language
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .
    """


_ClientDescribeServicesResponseservicesplacementStrategyTypeDef = TypedDict(
    "_ClientDescribeServicesResponseservicesplacementStrategyTypeDef",
    {"type": str, "field": str},
    total=False,
)


class ClientDescribeServicesResponseservicesplacementStrategyTypeDef(
    _ClientDescribeServicesResponseservicesplacementStrategyTypeDef
):
    """
    Type definition for `ClientDescribeServicesResponseservices` `placementStrategy`

    The task placement strategy for a task or service. For more information, see `Task
    Placement Strategies
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-strategies.html>`__
    in the *Amazon Elastic Container Service Developer Guide* .

    - **type** *(string) --*

      The type of placement strategy. The ``random`` placement strategy randomly places
      tasks on available candidates. The ``spread`` placement strategy spreads placement
      across available candidates evenly based on the ``field`` parameter. The ``binpack``
      strategy places tasks on available candidates that have the least available amount of
      the resource that is specified with the ``field`` parameter. For example, if you
      binpack on memory, a task is placed on the instance with the least amount of
      remaining memory (but still enough to run the task).

    - **field** *(string) --*

      The field to apply the placement strategy against. For the ``spread`` placement
      strategy, valid values are ``instanceId`` (or ``host`` , which has the same effect),
      or any platform or custom attribute that is applied to a container instance, such as
      ``attribute:ecs.availability-zone`` . For the ``binpack`` placement strategy, valid
      values are ``cpu`` and ``memory`` . For the ``random`` placement strategy, this field
      is not used.
    """


_ClientDescribeServicesResponseservicesserviceRegistriesTypeDef = TypedDict(
    "_ClientDescribeServicesResponseservicesserviceRegistriesTypeDef",
    {"registryArn": str, "port": int, "containerName": str, "containerPort": int},
    total=False,
)


class ClientDescribeServicesResponseservicesserviceRegistriesTypeDef(
    _ClientDescribeServicesResponseservicesserviceRegistriesTypeDef
):
    """
    Type definition for `ClientDescribeServicesResponseservices` `serviceRegistries`

    Details of the service registry.

    - **registryArn** *(string) --*

      The Amazon Resource Name (ARN) of the service registry. The currently supported
      service registry is AWS Cloud Map. For more information, see `CreateService
      <https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html>`__ .

    - **port** *(integer) --*

      The port value used if your service discovery service specified an SRV record. This
      field may be used if both the ``awsvpc`` network mode and SRV records are used.

    - **containerName** *(string) --*

      The container name value, already specified in the task definition, to be used for
      your service discovery service. If the task definition that your service task
      specifies uses the ``bridge`` or ``host`` network mode, you must specify a
      ``containerName`` and ``containerPort`` combination from the task definition. If the
      task definition that your service task specifies uses the ``awsvpc`` network mode and
      a type SRV DNS record is used, you must specify either a ``containerName`` and
      ``containerPort`` combination or a ``port`` value, but not both.

    - **containerPort** *(integer) --*

      The port value, already specified in the task definition, to be used for your service
      discovery service. If the task definition your service task specifies uses the
      ``bridge`` or ``host`` network mode, you must specify a ``containerName`` and
      ``containerPort`` combination from the task definition. If the task definition your
      service task specifies uses the ``awsvpc`` network mode and a type SRV DNS record is
      used, you must specify either a ``containerName`` and ``containerPort`` combination
      or a ``port`` value, but not both.
    """


_ClientDescribeServicesResponseservicestagsTypeDef = TypedDict(
    "_ClientDescribeServicesResponseservicestagsTypeDef",
    {"key": str, "value": str},
    total=False,
)


class ClientDescribeServicesResponseservicestagsTypeDef(
    _ClientDescribeServicesResponseservicestagsTypeDef
):
    """
    Type definition for `ClientDescribeServicesResponseservices` `tags`

    The metadata that you apply to a resource to help you categorize and organize them.
    Each tag consists of a key and an optional value, both of which you define.

    The following basic restrictions apply to tags:

    * Maximum number of tags per resource - 50

    * For each resource, each tag key must be unique, and each tag key can have only one
    value.

    * Maximum key length - 128 Unicode characters in UTF-8

    * Maximum value length - 256 Unicode characters in UTF-8

    * If your tagging schema is used across multiple services and resources, remember that
    other services may have restrictions on allowed characters. Generally allowed
    characters are: letters, numbers, and spaces representable in UTF-8, and the following
    characters: + - = . _ : / @.

    * Tag keys and values are case-sensitive.

    * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
    prefix for either keys or values as it is reserved for AWS use. You cannot edit or
    delete tag keys or values with this prefix. Tags with this prefix do not count against
    your tags per resource limit.

    - **key** *(string) --*

      One part of a key-value pair that make up a tag. A ``key`` is a general label that
      acts like a category for more specific tag values.

    - **value** *(string) --*

      The optional part of a key-value pair that make up a tag. A ``value`` acts as a
      descriptor within a tag category (key).
    """


_ClientDescribeServicesResponseservicestaskSetsloadBalancersTypeDef = TypedDict(
    "_ClientDescribeServicesResponseservicestaskSetsloadBalancersTypeDef",
    {
        "targetGroupArn": str,
        "loadBalancerName": str,
        "containerName": str,
        "containerPort": int,
    },
    total=False,
)


class ClientDescribeServicesResponseservicestaskSetsloadBalancersTypeDef(
    _ClientDescribeServicesResponseservicestaskSetsloadBalancersTypeDef
):
    """
    Type definition for `ClientDescribeServicesResponseservicestaskSets` `loadBalancers`

    Details on the load balancer or load balancers to use with a service or task set.

    - **targetGroupArn** *(string) --*

      The full Amazon Resource Name (ARN) of the Elastic Load Balancing target group or
      groups associated with a service or task set.

      A target group ARN is only specified when using an Application Load Balancer or
      Network Load Balancer. If you are using a Classic Load Balancer this should be
      omitted.

      For services using the ``ECS`` deployment controller, you can specify one or
      multiple target groups. For more information, see `Registering Multiple Target
      Groups with a Service
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

      For services using the ``CODE_DEPLOY`` deployment controller, you are required to
      define two target groups for the load balancer. For more information, see
      `Blue/Green Deployment with CodeDeploy
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-bluegreen.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

      .. warning::

        If your service's task definition uses the ``awsvpc`` network mode (which is
        required for the Fargate launch type), you must choose ``ip`` as the target
        type, not ``instance`` , when creating your target groups because tasks that
        use the ``awsvpc`` network mode are associated with an elastic network
        interface, not an Amazon EC2 instance.

    - **loadBalancerName** *(string) --*

      The name of the load balancer to associate with the Amazon ECS service or task
      set.

      A load balancer name is only specified when using a Classic Load Balancer. If you
      are using an Application Load Balancer or a Network Load Balancer this should be
      omitted.

    - **containerName** *(string) --*

      The name of the container (as it appears in a container definition) to associate
      with the load balancer.

    - **containerPort** *(integer) --*

      The port on the container to associate with the load balancer. This port must
      correspond to a ``containerPort`` in the task definition the tasks in the service
      are using. For tasks that use the EC2 launch type, the container instance they
      are launched on must allow ingress traffic on the ``hostPort`` of the port
      mapping.
    """


_ClientDescribeServicesResponseservicestaskSetsnetworkConfigurationawsvpcConfigurationTypeDef = TypedDict(
    "_ClientDescribeServicesResponseservicestaskSetsnetworkConfigurationawsvpcConfigurationTypeDef",
    {"subnets": List[str], "securityGroups": List[str], "assignPublicIp": str},
    total=False,
)


class ClientDescribeServicesResponseservicestaskSetsnetworkConfigurationawsvpcConfigurationTypeDef(
    _ClientDescribeServicesResponseservicestaskSetsnetworkConfigurationawsvpcConfigurationTypeDef
):
    """
    Type definition for `ClientDescribeServicesResponseservicestaskSetsnetworkConfiguration` `awsvpcConfiguration`

    The VPC subnets and security groups associated with a task.

    .. note::

      All specified subnets and security groups must be from the same VPC.

    - **subnets** *(list) --*

      The subnets associated with the task or service. There is a limit of 16 subnets
      that can be specified per ``AwsVpcConfiguration`` .

      .. note::

        All specified subnets must be from the same VPC.

      - *(string) --*

    - **securityGroups** *(list) --*

      The security groups associated with the task or service. If you do not specify a
      security group, the default security group for the VPC is used. There is a limit
      of 5 security groups that can be specified per ``AwsVpcConfiguration`` .

      .. note::

        All specified security groups must be from the same VPC.

      - *(string) --*

    - **assignPublicIp** *(string) --*

      Whether the task's elastic network interface receives a public IP address. The
      default value is ``DISABLED`` .
    """


_ClientDescribeServicesResponseservicestaskSetsnetworkConfigurationTypeDef = TypedDict(
    "_ClientDescribeServicesResponseservicestaskSetsnetworkConfigurationTypeDef",
    {
        "awsvpcConfiguration": ClientDescribeServicesResponseservicestaskSetsnetworkConfigurationawsvpcConfigurationTypeDef
    },
    total=False,
)


class ClientDescribeServicesResponseservicestaskSetsnetworkConfigurationTypeDef(
    _ClientDescribeServicesResponseservicestaskSetsnetworkConfigurationTypeDef
):
    """
    Type definition for `ClientDescribeServicesResponseservicestaskSets` `networkConfiguration`

    The network configuration for the task set.

    - **awsvpcConfiguration** *(dict) --*

      The VPC subnets and security groups associated with a task.

      .. note::

        All specified subnets and security groups must be from the same VPC.

      - **subnets** *(list) --*

        The subnets associated with the task or service. There is a limit of 16 subnets
        that can be specified per ``AwsVpcConfiguration`` .

        .. note::

          All specified subnets must be from the same VPC.

        - *(string) --*

      - **securityGroups** *(list) --*

        The security groups associated with the task or service. If you do not specify a
        security group, the default security group for the VPC is used. There is a limit
        of 5 security groups that can be specified per ``AwsVpcConfiguration`` .

        .. note::

          All specified security groups must be from the same VPC.

        - *(string) --*

      - **assignPublicIp** *(string) --*

        Whether the task's elastic network interface receives a public IP address. The
        default value is ``DISABLED`` .
    """


_ClientDescribeServicesResponseservicestaskSetsscaleTypeDef = TypedDict(
    "_ClientDescribeServicesResponseservicestaskSetsscaleTypeDef",
    {"value": float, "unit": str},
    total=False,
)


class ClientDescribeServicesResponseservicestaskSetsscaleTypeDef(
    _ClientDescribeServicesResponseservicestaskSetsscaleTypeDef
):
    """
    Type definition for `ClientDescribeServicesResponseservicestaskSets` `scale`

    A floating-point percentage of the desired number of tasks to place and keep running
    in the task set.

    - **value** *(float) --*

      The value, specified as a percent total of a service's ``desiredCount`` , to scale
      the task set. Accepted values are numbers between 0 and 100.

    - **unit** *(string) --*

      The unit of measure for the scale value.
    """


_ClientDescribeServicesResponseservicestaskSetsserviceRegistriesTypeDef = TypedDict(
    "_ClientDescribeServicesResponseservicestaskSetsserviceRegistriesTypeDef",
    {"registryArn": str, "port": int, "containerName": str, "containerPort": int},
    total=False,
)


class ClientDescribeServicesResponseservicestaskSetsserviceRegistriesTypeDef(
    _ClientDescribeServicesResponseservicestaskSetsserviceRegistriesTypeDef
):
    """
    Type definition for `ClientDescribeServicesResponseservicestaskSets` `serviceRegistries`

    Details of the service registry.

    - **registryArn** *(string) --*

      The Amazon Resource Name (ARN) of the service registry. The currently supported
      service registry is AWS Cloud Map. For more information, see `CreateService
      <https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html>`__ .

    - **port** *(integer) --*

      The port value used if your service discovery service specified an SRV record.
      This field may be used if both the ``awsvpc`` network mode and SRV records are
      used.

    - **containerName** *(string) --*

      The container name value, already specified in the task definition, to be used
      for your service discovery service. If the task definition that your service task
      specifies uses the ``bridge`` or ``host`` network mode, you must specify a
      ``containerName`` and ``containerPort`` combination from the task definition. If
      the task definition that your service task specifies uses the ``awsvpc`` network
      mode and a type SRV DNS record is used, you must specify either a
      ``containerName`` and ``containerPort`` combination or a ``port`` value, but not
      both.

    - **containerPort** *(integer) --*

      The port value, already specified in the task definition, to be used for your
      service discovery service. If the task definition your service task specifies
      uses the ``bridge`` or ``host`` network mode, you must specify a
      ``containerName`` and ``containerPort`` combination from the task definition. If
      the task definition your service task specifies uses the ``awsvpc`` network mode
      and a type SRV DNS record is used, you must specify either a ``containerName``
      and ``containerPort`` combination or a ``port`` value, but not both.
    """


_ClientDescribeServicesResponseservicestaskSetsTypeDef = TypedDict(
    "_ClientDescribeServicesResponseservicestaskSetsTypeDef",
    {
        "id": str,
        "taskSetArn": str,
        "serviceArn": str,
        "clusterArn": str,
        "startedBy": str,
        "externalId": str,
        "status": str,
        "taskDefinition": str,
        "computedDesiredCount": int,
        "pendingCount": int,
        "runningCount": int,
        "createdAt": datetime,
        "updatedAt": datetime,
        "launchType": str,
        "platformVersion": str,
        "networkConfiguration": ClientDescribeServicesResponseservicestaskSetsnetworkConfigurationTypeDef,
        "loadBalancers": List[
            ClientDescribeServicesResponseservicestaskSetsloadBalancersTypeDef
        ],
        "serviceRegistries": List[
            ClientDescribeServicesResponseservicestaskSetsserviceRegistriesTypeDef
        ],
        "scale": ClientDescribeServicesResponseservicestaskSetsscaleTypeDef,
        "stabilityStatus": str,
        "stabilityStatusAt": datetime,
    },
    total=False,
)


class ClientDescribeServicesResponseservicestaskSetsTypeDef(
    _ClientDescribeServicesResponseservicestaskSetsTypeDef
):
    """
    Type definition for `ClientDescribeServicesResponseservices` `taskSets`

    Information about a set of Amazon ECS tasks in either an AWS CodeDeploy or an
    ``EXTERNAL`` deployment. An Amazon ECS task set includes details such as the desired
    number of tasks, how many tasks are running, and whether the task set serves production
    traffic.

    - **id** *(string) --*

      The ID of the task set.

    - **taskSetArn** *(string) --*

      The Amazon Resource Name (ARN) of the task set.

    - **serviceArn** *(string) --*

      The Amazon Resource Name (ARN) of the service the task set exists in.

    - **clusterArn** *(string) --*

      The Amazon Resource Name (ARN) of the cluster that the service that hosts the task
      set exists in.

    - **startedBy** *(string) --*

      The tag specified when a task set is started. If the task set is created by an AWS
      CodeDeploy deployment, the ``startedBy`` parameter is ``CODE_DEPLOY`` . For a task
      set created for an external deployment, the startedBy field isn't used.

    - **externalId** *(string) --*

      The external ID associated with the task set.

      If a task set is created by an AWS CodeDeploy deployment, the ``externalId``
      parameter contains the AWS CodeDeploy deployment ID.

      If a task set is created for an external deployment and is associated with a service
      discovery registry, the ``externalId`` parameter contains the
      ``ECS_TASK_SET_EXTERNAL_ID`` AWS Cloud Map attribute.

    - **status** *(string) --*

      The status of the task set. The following describes each state:

        PRIMARY

      The task set is serving production traffic.

        ACTIVE

      The task set is not serving production traffic.

        DRAINING

      The tasks in the task set are being stopped and their corresponding targets are being
      deregistered from their target group.

    - **taskDefinition** *(string) --*

      The task definition the task set is using.

    - **computedDesiredCount** *(integer) --*

      The computed desired count for the task set. This is calculated by multiplying the
      service's ``desiredCount`` by the task set's ``scale`` percentage. The result is
      always rounded up. For example, if the computed desired count is 1.2, it rounds up to
      2 tasks.

    - **pendingCount** *(integer) --*

      The number of tasks in the task set that are in the ``PENDING`` status during a
      deployment. A task in the ``PENDING`` state is preparing to enter the ``RUNNING``
      state. A task set enters the ``PENDING`` status when it launches for the first time
      or when it is restarted after being in the ``STOPPED`` state.

    - **runningCount** *(integer) --*

      The number of tasks in the task set that are in the ``RUNNING`` status during a
      deployment. A task in the ``RUNNING`` state is running and ready for use.

    - **createdAt** *(datetime) --*

      The Unix timestamp for when the task set was created.

    - **updatedAt** *(datetime) --*

      The Unix timestamp for when the task set was last updated.

    - **launchType** *(string) --*

      The launch type the tasks in the task set are using. For more information, see
      `Amazon ECS Launch Types
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html>`__ in
      the *Amazon Elastic Container Service Developer Guide* .

    - **platformVersion** *(string) --*

      The platform version on which the tasks in the task set are running. A platform
      version is only specified for tasks using the Fargate launch type. If one is not
      specified, the ``LATEST`` platform version is used by default. For more information,
      see `AWS Fargate Platform Versions
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

    - **networkConfiguration** *(dict) --*

      The network configuration for the task set.

      - **awsvpcConfiguration** *(dict) --*

        The VPC subnets and security groups associated with a task.

        .. note::

          All specified subnets and security groups must be from the same VPC.

        - **subnets** *(list) --*

          The subnets associated with the task or service. There is a limit of 16 subnets
          that can be specified per ``AwsVpcConfiguration`` .

          .. note::

            All specified subnets must be from the same VPC.

          - *(string) --*

        - **securityGroups** *(list) --*

          The security groups associated with the task or service. If you do not specify a
          security group, the default security group for the VPC is used. There is a limit
          of 5 security groups that can be specified per ``AwsVpcConfiguration`` .

          .. note::

            All specified security groups must be from the same VPC.

          - *(string) --*

        - **assignPublicIp** *(string) --*

          Whether the task's elastic network interface receives a public IP address. The
          default value is ``DISABLED`` .

    - **loadBalancers** *(list) --*

      Details on a load balancer that is used with a task set.

      - *(dict) --*

        Details on the load balancer or load balancers to use with a service or task set.

        - **targetGroupArn** *(string) --*

          The full Amazon Resource Name (ARN) of the Elastic Load Balancing target group or
          groups associated with a service or task set.

          A target group ARN is only specified when using an Application Load Balancer or
          Network Load Balancer. If you are using a Classic Load Balancer this should be
          omitted.

          For services using the ``ECS`` deployment controller, you can specify one or
          multiple target groups. For more information, see `Registering Multiple Target
          Groups with a Service
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

          For services using the ``CODE_DEPLOY`` deployment controller, you are required to
          define two target groups for the load balancer. For more information, see
          `Blue/Green Deployment with CodeDeploy
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-bluegreen.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

          .. warning::

            If your service's task definition uses the ``awsvpc`` network mode (which is
            required for the Fargate launch type), you must choose ``ip`` as the target
            type, not ``instance`` , when creating your target groups because tasks that
            use the ``awsvpc`` network mode are associated with an elastic network
            interface, not an Amazon EC2 instance.

        - **loadBalancerName** *(string) --*

          The name of the load balancer to associate with the Amazon ECS service or task
          set.

          A load balancer name is only specified when using a Classic Load Balancer. If you
          are using an Application Load Balancer or a Network Load Balancer this should be
          omitted.

        - **containerName** *(string) --*

          The name of the container (as it appears in a container definition) to associate
          with the load balancer.

        - **containerPort** *(integer) --*

          The port on the container to associate with the load balancer. This port must
          correspond to a ``containerPort`` in the task definition the tasks in the service
          are using. For tasks that use the EC2 launch type, the container instance they
          are launched on must allow ingress traffic on the ``hostPort`` of the port
          mapping.

    - **serviceRegistries** *(list) --*

      The details of the service discovery registries to assign to this task set. For more
      information, see `Service Discovery
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html>`__
      .

      - *(dict) --*

        Details of the service registry.

        - **registryArn** *(string) --*

          The Amazon Resource Name (ARN) of the service registry. The currently supported
          service registry is AWS Cloud Map. For more information, see `CreateService
          <https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html>`__ .

        - **port** *(integer) --*

          The port value used if your service discovery service specified an SRV record.
          This field may be used if both the ``awsvpc`` network mode and SRV records are
          used.

        - **containerName** *(string) --*

          The container name value, already specified in the task definition, to be used
          for your service discovery service. If the task definition that your service task
          specifies uses the ``bridge`` or ``host`` network mode, you must specify a
          ``containerName`` and ``containerPort`` combination from the task definition. If
          the task definition that your service task specifies uses the ``awsvpc`` network
          mode and a type SRV DNS record is used, you must specify either a
          ``containerName`` and ``containerPort`` combination or a ``port`` value, but not
          both.

        - **containerPort** *(integer) --*

          The port value, already specified in the task definition, to be used for your
          service discovery service. If the task definition your service task specifies
          uses the ``bridge`` or ``host`` network mode, you must specify a
          ``containerName`` and ``containerPort`` combination from the task definition. If
          the task definition your service task specifies uses the ``awsvpc`` network mode
          and a type SRV DNS record is used, you must specify either a ``containerName``
          and ``containerPort`` combination or a ``port`` value, but not both.

    - **scale** *(dict) --*

      A floating-point percentage of the desired number of tasks to place and keep running
      in the task set.

      - **value** *(float) --*

        The value, specified as a percent total of a service's ``desiredCount`` , to scale
        the task set. Accepted values are numbers between 0 and 100.

      - **unit** *(string) --*

        The unit of measure for the scale value.

    - **stabilityStatus** *(string) --*

      The stability status, which indicates whether the task set has reached a steady
      state. If the following conditions are met, the task set will be in ``STEADY_STATE`` :

      * The task ``runningCount`` is equal to the ``computedDesiredCount`` .

      * The ``pendingCount`` is ``0`` .

      * There are no tasks running on container instances in the ``DRAINING`` status.

      * All tasks are reporting a healthy status from the load balancers, service
      discovery, and container health checks.

      If any of those conditions are not met, the stability status returns ``STABILIZING`` .

    - **stabilityStatusAt** *(datetime) --*

      The Unix timestamp for when the task set stability status was retrieved.
    """


_ClientDescribeServicesResponseservicesTypeDef = TypedDict(
    "_ClientDescribeServicesResponseservicesTypeDef",
    {
        "serviceArn": str,
        "serviceName": str,
        "clusterArn": str,
        "loadBalancers": List[
            ClientDescribeServicesResponseservicesloadBalancersTypeDef
        ],
        "serviceRegistries": List[
            ClientDescribeServicesResponseservicesserviceRegistriesTypeDef
        ],
        "status": str,
        "desiredCount": int,
        "runningCount": int,
        "pendingCount": int,
        "launchType": str,
        "platformVersion": str,
        "taskDefinition": str,
        "deploymentConfiguration": ClientDescribeServicesResponseservicesdeploymentConfigurationTypeDef,
        "taskSets": List[ClientDescribeServicesResponseservicestaskSetsTypeDef],
        "deployments": List[ClientDescribeServicesResponseservicesdeploymentsTypeDef],
        "roleArn": str,
        "events": List[ClientDescribeServicesResponseserviceseventsTypeDef],
        "createdAt": datetime,
        "placementConstraints": List[
            ClientDescribeServicesResponseservicesplacementConstraintsTypeDef
        ],
        "placementStrategy": List[
            ClientDescribeServicesResponseservicesplacementStrategyTypeDef
        ],
        "networkConfiguration": ClientDescribeServicesResponseservicesnetworkConfigurationTypeDef,
        "healthCheckGracePeriodSeconds": int,
        "schedulingStrategy": str,
        "deploymentController": ClientDescribeServicesResponseservicesdeploymentControllerTypeDef,
        "tags": List[ClientDescribeServicesResponseservicestagsTypeDef],
        "createdBy": str,
        "enableECSManagedTags": bool,
        "propagateTags": str,
    },
    total=False,
)


class ClientDescribeServicesResponseservicesTypeDef(
    _ClientDescribeServicesResponseservicesTypeDef
):
    """
    Type definition for `ClientDescribeServicesResponse` `services`

    Details on a service within a cluster

    - **serviceArn** *(string) --*

      The ARN that identifies the service. The ARN contains the ``arn:aws:ecs`` namespace,
      followed by the Region of the service, the AWS account ID of the service owner, the
      ``service`` namespace, and then the service name. For example,
      ``arn:aws:ecs:region:012345678910:service/my-service`` .

    - **serviceName** *(string) --*

      The name of your service. Up to 255 letters (uppercase and lowercase), numbers, and
      hyphens are allowed. Service names must be unique within a cluster, but you can have
      similarly named services in multiple clusters within a Region or across multiple Regions.

    - **clusterArn** *(string) --*

      The Amazon Resource Name (ARN) of the cluster that hosts the service.

    - **loadBalancers** *(list) --*

      A list of Elastic Load Balancing load balancer objects, containing the load balancer
      name, the container name (as it appears in a container definition), and the container
      port to access from the load balancer.

      - *(dict) --*

        Details on the load balancer or load balancers to use with a service or task set.

        - **targetGroupArn** *(string) --*

          The full Amazon Resource Name (ARN) of the Elastic Load Balancing target group or
          groups associated with a service or task set.

          A target group ARN is only specified when using an Application Load Balancer or
          Network Load Balancer. If you are using a Classic Load Balancer this should be
          omitted.

          For services using the ``ECS`` deployment controller, you can specify one or multiple
          target groups. For more information, see `Registering Multiple Target Groups with a
          Service
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

          For services using the ``CODE_DEPLOY`` deployment controller, you are required to
          define two target groups for the load balancer. For more information, see `Blue/Green
          Deployment with CodeDeploy
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-bluegreen.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

          .. warning::

            If your service's task definition uses the ``awsvpc`` network mode (which is
            required for the Fargate launch type), you must choose ``ip`` as the target type,
            not ``instance`` , when creating your target groups because tasks that use the
            ``awsvpc`` network mode are associated with an elastic network interface, not an
            Amazon EC2 instance.

        - **loadBalancerName** *(string) --*

          The name of the load balancer to associate with the Amazon ECS service or task set.

          A load balancer name is only specified when using a Classic Load Balancer. If you are
          using an Application Load Balancer or a Network Load Balancer this should be omitted.

        - **containerName** *(string) --*

          The name of the container (as it appears in a container definition) to associate with
          the load balancer.

        - **containerPort** *(integer) --*

          The port on the container to associate with the load balancer. This port must
          correspond to a ``containerPort`` in the task definition the tasks in the service are
          using. For tasks that use the EC2 launch type, the container instance they are
          launched on must allow ingress traffic on the ``hostPort`` of the port mapping.

    - **serviceRegistries** *(list) --*

      The details of the service discovery registries to assign to this service. For more
      information, see `Service Discovery
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html>`__ .

      - *(dict) --*

        Details of the service registry.

        - **registryArn** *(string) --*

          The Amazon Resource Name (ARN) of the service registry. The currently supported
          service registry is AWS Cloud Map. For more information, see `CreateService
          <https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html>`__ .

        - **port** *(integer) --*

          The port value used if your service discovery service specified an SRV record. This
          field may be used if both the ``awsvpc`` network mode and SRV records are used.

        - **containerName** *(string) --*

          The container name value, already specified in the task definition, to be used for
          your service discovery service. If the task definition that your service task
          specifies uses the ``bridge`` or ``host`` network mode, you must specify a
          ``containerName`` and ``containerPort`` combination from the task definition. If the
          task definition that your service task specifies uses the ``awsvpc`` network mode and
          a type SRV DNS record is used, you must specify either a ``containerName`` and
          ``containerPort`` combination or a ``port`` value, but not both.

        - **containerPort** *(integer) --*

          The port value, already specified in the task definition, to be used for your service
          discovery service. If the task definition your service task specifies uses the
          ``bridge`` or ``host`` network mode, you must specify a ``containerName`` and
          ``containerPort`` combination from the task definition. If the task definition your
          service task specifies uses the ``awsvpc`` network mode and a type SRV DNS record is
          used, you must specify either a ``containerName`` and ``containerPort`` combination
          or a ``port`` value, but not both.

    - **status** *(string) --*

      The status of the service. The valid values are ``ACTIVE`` , ``DRAINING`` , or
      ``INACTIVE`` .

    - **desiredCount** *(integer) --*

      The desired number of instantiations of the task definition to keep running on the
      service. This value is specified when the service is created with  CreateService , and it
      can be modified with  UpdateService .

    - **runningCount** *(integer) --*

      The number of tasks in the cluster that are in the ``RUNNING`` state.

    - **pendingCount** *(integer) --*

      The number of tasks in the cluster that are in the ``PENDING`` state.

    - **launchType** *(string) --*

      The launch type on which your service is running. If no value is specified, it will
      default to ``EC2`` . Valid values include ``EC2`` and ``FARGATE`` . For more information,
      see `Amazon ECS Launch Types
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html>`__ in the
      *Amazon Elastic Container Service Developer Guide* .

    - **platformVersion** *(string) --*

      The platform version on which to run your service. A platform version is only specified
      for tasks using the Fargate launch type. If one is not specified, the ``LATEST`` platform
      version is used by default. For more information, see `AWS Fargate Platform Versions
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

    - **taskDefinition** *(string) --*

      The task definition to use for tasks in the service. This value is specified when the
      service is created with  CreateService , and it can be modified with  UpdateService .

    - **deploymentConfiguration** *(dict) --*

      Optional deployment parameters that control how many tasks run during the deployment and
      the ordering of stopping and starting tasks.

      - **maximumPercent** *(integer) --*

        If a service is using the rolling update (``ECS`` ) deployment type, the **maximum
        percent** parameter represents an upper limit on the number of tasks in a service that
        are allowed in the ``RUNNING`` or ``PENDING`` state during a deployment, as a
        percentage of the desired number of tasks (rounded down to the nearest integer), and
        while any container instances are in the ``DRAINING`` state if the service contains
        tasks using the EC2 launch type. This parameter enables you to define the deployment
        batch size. For example, if your service has a desired number of four tasks and a
        maximum percent value of 200%, the scheduler may start four new tasks before stopping
        the four older tasks (provided that the cluster resources required to do this are
        available). The default value for maximum percent is 200%.

        If a service is using the blue/green (``CODE_DEPLOY`` ) or ``EXTERNAL`` deployment
        types and tasks that use the EC2 launch type, the **maximum percent** value is set to
        the default value and is used to define the upper limit on the number of the tasks in
        the service that remain in the ``RUNNING`` state while the container instances are in
        the ``DRAINING`` state. If the tasks in the service use the Fargate launch type, the
        maximum percent value is not used, although it is returned when describing your service.

      - **minimumHealthyPercent** *(integer) --*

        If a service is using the rolling update (``ECS`` ) deployment type, the **minimum
        healthy percent** represents a lower limit on the number of tasks in a service that
        must remain in the ``RUNNING`` state during a deployment, as a percentage of the
        desired number of tasks (rounded up to the nearest integer), and while any container
        instances are in the ``DRAINING`` state if the service contains tasks using the EC2
        launch type. This parameter enables you to deploy without using additional cluster
        capacity. For example, if your service has a desired number of four tasks and a minimum
        healthy percent of 50%, the scheduler may stop two existing tasks to free up cluster
        capacity before starting two new tasks. Tasks for services that *do not* use a load
        balancer are considered healthy if they are in the ``RUNNING`` state; tasks for
        services that *do* use a load balancer are considered healthy if they are in the
        ``RUNNING`` state and they are reported as healthy by the load balancer. The default
        value for minimum healthy percent is 100%.

        If a service is using the blue/green (``CODE_DEPLOY`` ) or ``EXTERNAL`` deployment
        types and tasks that use the EC2 launch type, the **minimum healthy percent** value is
        set to the default value and is used to define the lower limit on the number of the
        tasks in the service that remain in the ``RUNNING`` state while the container instances
        are in the ``DRAINING`` state. If the tasks in the service use the Fargate launch type,
        the minimum healthy percent value is not used, although it is returned when describing
        your service.

    - **taskSets** *(list) --*

      Information about a set of Amazon ECS tasks in either an AWS CodeDeploy or an
      ``EXTERNAL`` deployment. An Amazon ECS task set includes details such as the desired
      number of tasks, how many tasks are running, and whether the task set serves production
      traffic.

      - *(dict) --*

        Information about a set of Amazon ECS tasks in either an AWS CodeDeploy or an
        ``EXTERNAL`` deployment. An Amazon ECS task set includes details such as the desired
        number of tasks, how many tasks are running, and whether the task set serves production
        traffic.

        - **id** *(string) --*

          The ID of the task set.

        - **taskSetArn** *(string) --*

          The Amazon Resource Name (ARN) of the task set.

        - **serviceArn** *(string) --*

          The Amazon Resource Name (ARN) of the service the task set exists in.

        - **clusterArn** *(string) --*

          The Amazon Resource Name (ARN) of the cluster that the service that hosts the task
          set exists in.

        - **startedBy** *(string) --*

          The tag specified when a task set is started. If the task set is created by an AWS
          CodeDeploy deployment, the ``startedBy`` parameter is ``CODE_DEPLOY`` . For a task
          set created for an external deployment, the startedBy field isn't used.

        - **externalId** *(string) --*

          The external ID associated with the task set.

          If a task set is created by an AWS CodeDeploy deployment, the ``externalId``
          parameter contains the AWS CodeDeploy deployment ID.

          If a task set is created for an external deployment and is associated with a service
          discovery registry, the ``externalId`` parameter contains the
          ``ECS_TASK_SET_EXTERNAL_ID`` AWS Cloud Map attribute.

        - **status** *(string) --*

          The status of the task set. The following describes each state:

            PRIMARY

          The task set is serving production traffic.

            ACTIVE

          The task set is not serving production traffic.

            DRAINING

          The tasks in the task set are being stopped and their corresponding targets are being
          deregistered from their target group.

        - **taskDefinition** *(string) --*

          The task definition the task set is using.

        - **computedDesiredCount** *(integer) --*

          The computed desired count for the task set. This is calculated by multiplying the
          service's ``desiredCount`` by the task set's ``scale`` percentage. The result is
          always rounded up. For example, if the computed desired count is 1.2, it rounds up to
          2 tasks.

        - **pendingCount** *(integer) --*

          The number of tasks in the task set that are in the ``PENDING`` status during a
          deployment. A task in the ``PENDING`` state is preparing to enter the ``RUNNING``
          state. A task set enters the ``PENDING`` status when it launches for the first time
          or when it is restarted after being in the ``STOPPED`` state.

        - **runningCount** *(integer) --*

          The number of tasks in the task set that are in the ``RUNNING`` status during a
          deployment. A task in the ``RUNNING`` state is running and ready for use.

        - **createdAt** *(datetime) --*

          The Unix timestamp for when the task set was created.

        - **updatedAt** *(datetime) --*

          The Unix timestamp for when the task set was last updated.

        - **launchType** *(string) --*

          The launch type the tasks in the task set are using. For more information, see
          `Amazon ECS Launch Types
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html>`__ in
          the *Amazon Elastic Container Service Developer Guide* .

        - **platformVersion** *(string) --*

          The platform version on which the tasks in the task set are running. A platform
          version is only specified for tasks using the Fargate launch type. If one is not
          specified, the ``LATEST`` platform version is used by default. For more information,
          see `AWS Fargate Platform Versions
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

        - **networkConfiguration** *(dict) --*

          The network configuration for the task set.

          - **awsvpcConfiguration** *(dict) --*

            The VPC subnets and security groups associated with a task.

            .. note::

              All specified subnets and security groups must be from the same VPC.

            - **subnets** *(list) --*

              The subnets associated with the task or service. There is a limit of 16 subnets
              that can be specified per ``AwsVpcConfiguration`` .

              .. note::

                All specified subnets must be from the same VPC.

              - *(string) --*

            - **securityGroups** *(list) --*

              The security groups associated with the task or service. If you do not specify a
              security group, the default security group for the VPC is used. There is a limit
              of 5 security groups that can be specified per ``AwsVpcConfiguration`` .

              .. note::

                All specified security groups must be from the same VPC.

              - *(string) --*

            - **assignPublicIp** *(string) --*

              Whether the task's elastic network interface receives a public IP address. The
              default value is ``DISABLED`` .

        - **loadBalancers** *(list) --*

          Details on a load balancer that is used with a task set.

          - *(dict) --*

            Details on the load balancer or load balancers to use with a service or task set.

            - **targetGroupArn** *(string) --*

              The full Amazon Resource Name (ARN) of the Elastic Load Balancing target group or
              groups associated with a service or task set.

              A target group ARN is only specified when using an Application Load Balancer or
              Network Load Balancer. If you are using a Classic Load Balancer this should be
              omitted.

              For services using the ``ECS`` deployment controller, you can specify one or
              multiple target groups. For more information, see `Registering Multiple Target
              Groups with a Service
              <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html>`__
              in the *Amazon Elastic Container Service Developer Guide* .

              For services using the ``CODE_DEPLOY`` deployment controller, you are required to
              define two target groups for the load balancer. For more information, see
              `Blue/Green Deployment with CodeDeploy
              <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-bluegreen.html>`__
              in the *Amazon Elastic Container Service Developer Guide* .

              .. warning::

                If your service's task definition uses the ``awsvpc`` network mode (which is
                required for the Fargate launch type), you must choose ``ip`` as the target
                type, not ``instance`` , when creating your target groups because tasks that
                use the ``awsvpc`` network mode are associated with an elastic network
                interface, not an Amazon EC2 instance.

            - **loadBalancerName** *(string) --*

              The name of the load balancer to associate with the Amazon ECS service or task
              set.

              A load balancer name is only specified when using a Classic Load Balancer. If you
              are using an Application Load Balancer or a Network Load Balancer this should be
              omitted.

            - **containerName** *(string) --*

              The name of the container (as it appears in a container definition) to associate
              with the load balancer.

            - **containerPort** *(integer) --*

              The port on the container to associate with the load balancer. This port must
              correspond to a ``containerPort`` in the task definition the tasks in the service
              are using. For tasks that use the EC2 launch type, the container instance they
              are launched on must allow ingress traffic on the ``hostPort`` of the port
              mapping.

        - **serviceRegistries** *(list) --*

          The details of the service discovery registries to assign to this task set. For more
          information, see `Service Discovery
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html>`__
          .

          - *(dict) --*

            Details of the service registry.

            - **registryArn** *(string) --*

              The Amazon Resource Name (ARN) of the service registry. The currently supported
              service registry is AWS Cloud Map. For more information, see `CreateService
              <https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html>`__ .

            - **port** *(integer) --*

              The port value used if your service discovery service specified an SRV record.
              This field may be used if both the ``awsvpc`` network mode and SRV records are
              used.

            - **containerName** *(string) --*

              The container name value, already specified in the task definition, to be used
              for your service discovery service. If the task definition that your service task
              specifies uses the ``bridge`` or ``host`` network mode, you must specify a
              ``containerName`` and ``containerPort`` combination from the task definition. If
              the task definition that your service task specifies uses the ``awsvpc`` network
              mode and a type SRV DNS record is used, you must specify either a
              ``containerName`` and ``containerPort`` combination or a ``port`` value, but not
              both.

            - **containerPort** *(integer) --*

              The port value, already specified in the task definition, to be used for your
              service discovery service. If the task definition your service task specifies
              uses the ``bridge`` or ``host`` network mode, you must specify a
              ``containerName`` and ``containerPort`` combination from the task definition. If
              the task definition your service task specifies uses the ``awsvpc`` network mode
              and a type SRV DNS record is used, you must specify either a ``containerName``
              and ``containerPort`` combination or a ``port`` value, but not both.

        - **scale** *(dict) --*

          A floating-point percentage of the desired number of tasks to place and keep running
          in the task set.

          - **value** *(float) --*

            The value, specified as a percent total of a service's ``desiredCount`` , to scale
            the task set. Accepted values are numbers between 0 and 100.

          - **unit** *(string) --*

            The unit of measure for the scale value.

        - **stabilityStatus** *(string) --*

          The stability status, which indicates whether the task set has reached a steady
          state. If the following conditions are met, the task set will be in ``STEADY_STATE`` :

          * The task ``runningCount`` is equal to the ``computedDesiredCount`` .

          * The ``pendingCount`` is ``0`` .

          * There are no tasks running on container instances in the ``DRAINING`` status.

          * All tasks are reporting a healthy status from the load balancers, service
          discovery, and container health checks.

          If any of those conditions are not met, the stability status returns ``STABILIZING`` .

        - **stabilityStatusAt** *(datetime) --*

          The Unix timestamp for when the task set stability status was retrieved.

    - **deployments** *(list) --*

      The current state of deployments for the service.

      - *(dict) --*

        The details of an Amazon ECS service deployment. This is used only when a service uses
        the ``ECS`` deployment controller type.

        - **id** *(string) --*

          The ID of the deployment.

        - **status** *(string) --*

          The status of the deployment. The following describes each state:

            PRIMARY

          The most recent deployment of a service.

            ACTIVE

          A service deployment that still has running tasks, but are in the process of being
          replaced with a new ``PRIMARY`` deployment.

            INACTIVE

          A deployment that has been completely replaced.

        - **taskDefinition** *(string) --*

          The most recent task definition that was specified for the tasks in the service to
          use.

        - **desiredCount** *(integer) --*

          The most recent desired count of tasks that was specified for the service to deploy
          or maintain.

        - **pendingCount** *(integer) --*

          The number of tasks in the deployment that are in the ``PENDING`` status.

        - **runningCount** *(integer) --*

          The number of tasks in the deployment that are in the ``RUNNING`` status.

        - **createdAt** *(datetime) --*

          The Unix timestamp for when the service deployment was created.

        - **updatedAt** *(datetime) --*

          The Unix timestamp for when the service deployment was last updated.

        - **launchType** *(string) --*

          The launch type the tasks in the service are using. For more information, see `Amazon
          ECS Launch Types
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html>`__ in
          the *Amazon Elastic Container Service Developer Guide* .

        - **platformVersion** *(string) --*

          The platform version on which your tasks in the service are running. A platform
          version is only specified for tasks using the Fargate launch type. If one is not
          specified, the ``LATEST`` platform version is used by default. For more information,
          see `AWS Fargate Platform Versions
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

        - **networkConfiguration** *(dict) --*

          The VPC subnet and security group configuration for tasks that receive their own
          elastic network interface by using the ``awsvpc`` networking mode.

          - **awsvpcConfiguration** *(dict) --*

            The VPC subnets and security groups associated with a task.

            .. note::

              All specified subnets and security groups must be from the same VPC.

            - **subnets** *(list) --*

              The subnets associated with the task or service. There is a limit of 16 subnets
              that can be specified per ``AwsVpcConfiguration`` .

              .. note::

                All specified subnets must be from the same VPC.

              - *(string) --*

            - **securityGroups** *(list) --*

              The security groups associated with the task or service. If you do not specify a
              security group, the default security group for the VPC is used. There is a limit
              of 5 security groups that can be specified per ``AwsVpcConfiguration`` .

              .. note::

                All specified security groups must be from the same VPC.

              - *(string) --*

            - **assignPublicIp** *(string) --*

              Whether the task's elastic network interface receives a public IP address. The
              default value is ``DISABLED`` .

    - **roleArn** *(string) --*

      The ARN of the IAM role associated with the service that allows the Amazon ECS container
      agent to register container instances with an Elastic Load Balancing load balancer.

    - **events** *(list) --*

      The event stream for your service. A maximum of 100 of the latest events are displayed.

      - *(dict) --*

        Details on an event associated with a service.

        - **id** *(string) --*

          The ID string of the event.

        - **createdAt** *(datetime) --*

          The Unix timestamp for when the event was triggered.

        - **message** *(string) --*

          The event message.

    - **createdAt** *(datetime) --*

      The Unix timestamp for when the service was created.

    - **placementConstraints** *(list) --*

      The placement constraints for the tasks in the service.

      - *(dict) --*

        An object representing a constraint on task placement. For more information, see `Task
        Placement Constraints
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html>`__
        in the *Amazon Elastic Container Service Developer Guide* .

        .. note::

          If you are using the Fargate launch type, task placement constraints are not
          supported.

        - **type** *(string) --*

          The type of constraint. Use ``distinctInstance`` to ensure that each task in a
          particular group is running on a different container instance. Use ``memberOf`` to
          restrict the selection to a group of valid candidates.

        - **expression** *(string) --*

          A cluster query language expression to apply to the constraint. You cannot specify an
          expression if the constraint type is ``distinctInstance`` . For more information, see
          `Cluster Query Language
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

    - **placementStrategy** *(list) --*

      The placement strategy that determines how tasks for the service are placed.

      - *(dict) --*

        The task placement strategy for a task or service. For more information, see `Task
        Placement Strategies
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-strategies.html>`__
        in the *Amazon Elastic Container Service Developer Guide* .

        - **type** *(string) --*

          The type of placement strategy. The ``random`` placement strategy randomly places
          tasks on available candidates. The ``spread`` placement strategy spreads placement
          across available candidates evenly based on the ``field`` parameter. The ``binpack``
          strategy places tasks on available candidates that have the least available amount of
          the resource that is specified with the ``field`` parameter. For example, if you
          binpack on memory, a task is placed on the instance with the least amount of
          remaining memory (but still enough to run the task).

        - **field** *(string) --*

          The field to apply the placement strategy against. For the ``spread`` placement
          strategy, valid values are ``instanceId`` (or ``host`` , which has the same effect),
          or any platform or custom attribute that is applied to a container instance, such as
          ``attribute:ecs.availability-zone`` . For the ``binpack`` placement strategy, valid
          values are ``cpu`` and ``memory`` . For the ``random`` placement strategy, this field
          is not used.

    - **networkConfiguration** *(dict) --*

      The VPC subnet and security group configuration for tasks that receive their own elastic
      network interface by using the ``awsvpc`` networking mode.

      - **awsvpcConfiguration** *(dict) --*

        The VPC subnets and security groups associated with a task.

        .. note::

          All specified subnets and security groups must be from the same VPC.

        - **subnets** *(list) --*

          The subnets associated with the task or service. There is a limit of 16 subnets that
          can be specified per ``AwsVpcConfiguration`` .

          .. note::

            All specified subnets must be from the same VPC.

          - *(string) --*

        - **securityGroups** *(list) --*

          The security groups associated with the task or service. If you do not specify a
          security group, the default security group for the VPC is used. There is a limit of 5
          security groups that can be specified per ``AwsVpcConfiguration`` .

          .. note::

            All specified security groups must be from the same VPC.

          - *(string) --*

        - **assignPublicIp** *(string) --*

          Whether the task's elastic network interface receives a public IP address. The
          default value is ``DISABLED`` .

    - **healthCheckGracePeriodSeconds** *(integer) --*

      The period of time, in seconds, that the Amazon ECS service scheduler ignores unhealthy
      Elastic Load Balancing target health checks after a task has first started.

    - **schedulingStrategy** *(string) --*

      The scheduling strategy to use for the service. For more information, see `Services
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs_services.html>`__ .

      There are two service scheduler strategies available:

      * ``REPLICA`` -The replica scheduling strategy places and maintains the desired number of
      tasks across your cluster. By default, the service scheduler spreads tasks across
      Availability Zones. You can use task placement strategies and constraints to customize
      task placement decisions.

      * ``DAEMON`` -The daemon scheduling strategy deploys exactly one task on each container
      instance in your cluster. When you are using this strategy, do not specify a desired
      number of tasks or any task placement strategies.

      .. note::

         Fargate tasks do not support the ``DAEMON`` scheduling strategy.

    - **deploymentController** *(dict) --*

      The deployment controller type the service is using. When using the DescribeServices API,
      this field is omitted if the service is using the ``ECS`` deployment controller type.

      - **type** *(string) --*

        The deployment controller type to use.

        There are three deployment controller types available:

          ECS

        The rolling update (``ECS`` ) deployment type involves replacing the current running
        version of the container with the latest version. The number of containers Amazon ECS
        adds or removes from the service during a rolling update is controlled by adjusting the
        minimum and maximum number of healthy tasks allowed during a service deployment, as
        specified in the  DeploymentConfiguration .

          CODE_DEPLOY

        The blue/green (``CODE_DEPLOY`` ) deployment type uses the blue/green deployment model
        powered by AWS CodeDeploy, which allows you to verify a new deployment of a service
        before sending production traffic to it.

          EXTERNAL

        The external (``EXTERNAL`` ) deployment type enables you to use any third-party
        deployment controller for full control over the deployment process for an Amazon ECS
        service.

    - **tags** *(list) --*

      The metadata that you apply to the service to help you categorize and organize them. Each
      tag consists of a key and an optional value, both of which you define.

      The following basic restrictions apply to tags:

      * Maximum number of tags per resource - 50

      * For each resource, each tag key must be unique, and each tag key can have only one
      value.

      * Maximum key length - 128 Unicode characters in UTF-8

      * Maximum value length - 256 Unicode characters in UTF-8

      * If your tagging schema is used across multiple services and resources, remember that
      other services may have restrictions on allowed characters. Generally allowed characters
      are: letters, numbers, and spaces representable in UTF-8, and the following characters: +
      - = . _ : / @.

      * Tag keys and values are case-sensitive.

      * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
      prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
      tag keys or values with this prefix. Tags with this prefix do not count against your tags
      per resource limit.

      - *(dict) --*

        The metadata that you apply to a resource to help you categorize and organize them.
        Each tag consists of a key and an optional value, both of which you define.

        The following basic restrictions apply to tags:

        * Maximum number of tags per resource - 50

        * For each resource, each tag key must be unique, and each tag key can have only one
        value.

        * Maximum key length - 128 Unicode characters in UTF-8

        * Maximum value length - 256 Unicode characters in UTF-8

        * If your tagging schema is used across multiple services and resources, remember that
        other services may have restrictions on allowed characters. Generally allowed
        characters are: letters, numbers, and spaces representable in UTF-8, and the following
        characters: + - = . _ : / @.

        * Tag keys and values are case-sensitive.

        * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
        prefix for either keys or values as it is reserved for AWS use. You cannot edit or
        delete tag keys or values with this prefix. Tags with this prefix do not count against
        your tags per resource limit.

        - **key** *(string) --*

          One part of a key-value pair that make up a tag. A ``key`` is a general label that
          acts like a category for more specific tag values.

        - **value** *(string) --*

          The optional part of a key-value pair that make up a tag. A ``value`` acts as a
          descriptor within a tag category (key).

    - **createdBy** *(string) --*

      The principal that created the service.

    - **enableECSManagedTags** *(boolean) --*

      Specifies whether to enable Amazon ECS managed tags for the tasks in the service. For
      more information, see `Tagging Your Amazon ECS Resources
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html>`__ in
      the *Amazon Elastic Container Service Developer Guide* .

    - **propagateTags** *(string) --*

      Specifies whether to propagate the tags from the task definition or the service to the
      task. If no value is specified, the tags are not propagated.
    """


_ClientDescribeServicesResponseTypeDef = TypedDict(
    "_ClientDescribeServicesResponseTypeDef",
    {
        "services": List[ClientDescribeServicesResponseservicesTypeDef],
        "failures": List[ClientDescribeServicesResponsefailuresTypeDef],
    },
    total=False,
)


class ClientDescribeServicesResponseTypeDef(_ClientDescribeServicesResponseTypeDef):
    """
    Type definition for `ClientDescribeServices` `Response`

    - **services** *(list) --*

      The list of services described.

      - *(dict) --*

        Details on a service within a cluster

        - **serviceArn** *(string) --*

          The ARN that identifies the service. The ARN contains the ``arn:aws:ecs`` namespace,
          followed by the Region of the service, the AWS account ID of the service owner, the
          ``service`` namespace, and then the service name. For example,
          ``arn:aws:ecs:region:012345678910:service/my-service`` .

        - **serviceName** *(string) --*

          The name of your service. Up to 255 letters (uppercase and lowercase), numbers, and
          hyphens are allowed. Service names must be unique within a cluster, but you can have
          similarly named services in multiple clusters within a Region or across multiple Regions.

        - **clusterArn** *(string) --*

          The Amazon Resource Name (ARN) of the cluster that hosts the service.

        - **loadBalancers** *(list) --*

          A list of Elastic Load Balancing load balancer objects, containing the load balancer
          name, the container name (as it appears in a container definition), and the container
          port to access from the load balancer.

          - *(dict) --*

            Details on the load balancer or load balancers to use with a service or task set.

            - **targetGroupArn** *(string) --*

              The full Amazon Resource Name (ARN) of the Elastic Load Balancing target group or
              groups associated with a service or task set.

              A target group ARN is only specified when using an Application Load Balancer or
              Network Load Balancer. If you are using a Classic Load Balancer this should be
              omitted.

              For services using the ``ECS`` deployment controller, you can specify one or multiple
              target groups. For more information, see `Registering Multiple Target Groups with a
              Service
              <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html>`__
              in the *Amazon Elastic Container Service Developer Guide* .

              For services using the ``CODE_DEPLOY`` deployment controller, you are required to
              define two target groups for the load balancer. For more information, see `Blue/Green
              Deployment with CodeDeploy
              <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-bluegreen.html>`__
              in the *Amazon Elastic Container Service Developer Guide* .

              .. warning::

                If your service's task definition uses the ``awsvpc`` network mode (which is
                required for the Fargate launch type), you must choose ``ip`` as the target type,
                not ``instance`` , when creating your target groups because tasks that use the
                ``awsvpc`` network mode are associated with an elastic network interface, not an
                Amazon EC2 instance.

            - **loadBalancerName** *(string) --*

              The name of the load balancer to associate with the Amazon ECS service or task set.

              A load balancer name is only specified when using a Classic Load Balancer. If you are
              using an Application Load Balancer or a Network Load Balancer this should be omitted.

            - **containerName** *(string) --*

              The name of the container (as it appears in a container definition) to associate with
              the load balancer.

            - **containerPort** *(integer) --*

              The port on the container to associate with the load balancer. This port must
              correspond to a ``containerPort`` in the task definition the tasks in the service are
              using. For tasks that use the EC2 launch type, the container instance they are
              launched on must allow ingress traffic on the ``hostPort`` of the port mapping.

        - **serviceRegistries** *(list) --*

          The details of the service discovery registries to assign to this service. For more
          information, see `Service Discovery
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html>`__ .

          - *(dict) --*

            Details of the service registry.

            - **registryArn** *(string) --*

              The Amazon Resource Name (ARN) of the service registry. The currently supported
              service registry is AWS Cloud Map. For more information, see `CreateService
              <https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html>`__ .

            - **port** *(integer) --*

              The port value used if your service discovery service specified an SRV record. This
              field may be used if both the ``awsvpc`` network mode and SRV records are used.

            - **containerName** *(string) --*

              The container name value, already specified in the task definition, to be used for
              your service discovery service. If the task definition that your service task
              specifies uses the ``bridge`` or ``host`` network mode, you must specify a
              ``containerName`` and ``containerPort`` combination from the task definition. If the
              task definition that your service task specifies uses the ``awsvpc`` network mode and
              a type SRV DNS record is used, you must specify either a ``containerName`` and
              ``containerPort`` combination or a ``port`` value, but not both.

            - **containerPort** *(integer) --*

              The port value, already specified in the task definition, to be used for your service
              discovery service. If the task definition your service task specifies uses the
              ``bridge`` or ``host`` network mode, you must specify a ``containerName`` and
              ``containerPort`` combination from the task definition. If the task definition your
              service task specifies uses the ``awsvpc`` network mode and a type SRV DNS record is
              used, you must specify either a ``containerName`` and ``containerPort`` combination
              or a ``port`` value, but not both.

        - **status** *(string) --*

          The status of the service. The valid values are ``ACTIVE`` , ``DRAINING`` , or
          ``INACTIVE`` .

        - **desiredCount** *(integer) --*

          The desired number of instantiations of the task definition to keep running on the
          service. This value is specified when the service is created with  CreateService , and it
          can be modified with  UpdateService .

        - **runningCount** *(integer) --*

          The number of tasks in the cluster that are in the ``RUNNING`` state.

        - **pendingCount** *(integer) --*

          The number of tasks in the cluster that are in the ``PENDING`` state.

        - **launchType** *(string) --*

          The launch type on which your service is running. If no value is specified, it will
          default to ``EC2`` . Valid values include ``EC2`` and ``FARGATE`` . For more information,
          see `Amazon ECS Launch Types
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html>`__ in the
          *Amazon Elastic Container Service Developer Guide* .

        - **platformVersion** *(string) --*

          The platform version on which to run your service. A platform version is only specified
          for tasks using the Fargate launch type. If one is not specified, the ``LATEST`` platform
          version is used by default. For more information, see `AWS Fargate Platform Versions
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

        - **taskDefinition** *(string) --*

          The task definition to use for tasks in the service. This value is specified when the
          service is created with  CreateService , and it can be modified with  UpdateService .

        - **deploymentConfiguration** *(dict) --*

          Optional deployment parameters that control how many tasks run during the deployment and
          the ordering of stopping and starting tasks.

          - **maximumPercent** *(integer) --*

            If a service is using the rolling update (``ECS`` ) deployment type, the **maximum
            percent** parameter represents an upper limit on the number of tasks in a service that
            are allowed in the ``RUNNING`` or ``PENDING`` state during a deployment, as a
            percentage of the desired number of tasks (rounded down to the nearest integer), and
            while any container instances are in the ``DRAINING`` state if the service contains
            tasks using the EC2 launch type. This parameter enables you to define the deployment
            batch size. For example, if your service has a desired number of four tasks and a
            maximum percent value of 200%, the scheduler may start four new tasks before stopping
            the four older tasks (provided that the cluster resources required to do this are
            available). The default value for maximum percent is 200%.

            If a service is using the blue/green (``CODE_DEPLOY`` ) or ``EXTERNAL`` deployment
            types and tasks that use the EC2 launch type, the **maximum percent** value is set to
            the default value and is used to define the upper limit on the number of the tasks in
            the service that remain in the ``RUNNING`` state while the container instances are in
            the ``DRAINING`` state. If the tasks in the service use the Fargate launch type, the
            maximum percent value is not used, although it is returned when describing your service.

          - **minimumHealthyPercent** *(integer) --*

            If a service is using the rolling update (``ECS`` ) deployment type, the **minimum
            healthy percent** represents a lower limit on the number of tasks in a service that
            must remain in the ``RUNNING`` state during a deployment, as a percentage of the
            desired number of tasks (rounded up to the nearest integer), and while any container
            instances are in the ``DRAINING`` state if the service contains tasks using the EC2
            launch type. This parameter enables you to deploy without using additional cluster
            capacity. For example, if your service has a desired number of four tasks and a minimum
            healthy percent of 50%, the scheduler may stop two existing tasks to free up cluster
            capacity before starting two new tasks. Tasks for services that *do not* use a load
            balancer are considered healthy if they are in the ``RUNNING`` state; tasks for
            services that *do* use a load balancer are considered healthy if they are in the
            ``RUNNING`` state and they are reported as healthy by the load balancer. The default
            value for minimum healthy percent is 100%.

            If a service is using the blue/green (``CODE_DEPLOY`` ) or ``EXTERNAL`` deployment
            types and tasks that use the EC2 launch type, the **minimum healthy percent** value is
            set to the default value and is used to define the lower limit on the number of the
            tasks in the service that remain in the ``RUNNING`` state while the container instances
            are in the ``DRAINING`` state. If the tasks in the service use the Fargate launch type,
            the minimum healthy percent value is not used, although it is returned when describing
            your service.

        - **taskSets** *(list) --*

          Information about a set of Amazon ECS tasks in either an AWS CodeDeploy or an
          ``EXTERNAL`` deployment. An Amazon ECS task set includes details such as the desired
          number of tasks, how many tasks are running, and whether the task set serves production
          traffic.

          - *(dict) --*

            Information about a set of Amazon ECS tasks in either an AWS CodeDeploy or an
            ``EXTERNAL`` deployment. An Amazon ECS task set includes details such as the desired
            number of tasks, how many tasks are running, and whether the task set serves production
            traffic.

            - **id** *(string) --*

              The ID of the task set.

            - **taskSetArn** *(string) --*

              The Amazon Resource Name (ARN) of the task set.

            - **serviceArn** *(string) --*

              The Amazon Resource Name (ARN) of the service the task set exists in.

            - **clusterArn** *(string) --*

              The Amazon Resource Name (ARN) of the cluster that the service that hosts the task
              set exists in.

            - **startedBy** *(string) --*

              The tag specified when a task set is started. If the task set is created by an AWS
              CodeDeploy deployment, the ``startedBy`` parameter is ``CODE_DEPLOY`` . For a task
              set created for an external deployment, the startedBy field isn't used.

            - **externalId** *(string) --*

              The external ID associated with the task set.

              If a task set is created by an AWS CodeDeploy deployment, the ``externalId``
              parameter contains the AWS CodeDeploy deployment ID.

              If a task set is created for an external deployment and is associated with a service
              discovery registry, the ``externalId`` parameter contains the
              ``ECS_TASK_SET_EXTERNAL_ID`` AWS Cloud Map attribute.

            - **status** *(string) --*

              The status of the task set. The following describes each state:

                PRIMARY

              The task set is serving production traffic.

                ACTIVE

              The task set is not serving production traffic.

                DRAINING

              The tasks in the task set are being stopped and their corresponding targets are being
              deregistered from their target group.

            - **taskDefinition** *(string) --*

              The task definition the task set is using.

            - **computedDesiredCount** *(integer) --*

              The computed desired count for the task set. This is calculated by multiplying the
              service's ``desiredCount`` by the task set's ``scale`` percentage. The result is
              always rounded up. For example, if the computed desired count is 1.2, it rounds up to
              2 tasks.

            - **pendingCount** *(integer) --*

              The number of tasks in the task set that are in the ``PENDING`` status during a
              deployment. A task in the ``PENDING`` state is preparing to enter the ``RUNNING``
              state. A task set enters the ``PENDING`` status when it launches for the first time
              or when it is restarted after being in the ``STOPPED`` state.

            - **runningCount** *(integer) --*

              The number of tasks in the task set that are in the ``RUNNING`` status during a
              deployment. A task in the ``RUNNING`` state is running and ready for use.

            - **createdAt** *(datetime) --*

              The Unix timestamp for when the task set was created.

            - **updatedAt** *(datetime) --*

              The Unix timestamp for when the task set was last updated.

            - **launchType** *(string) --*

              The launch type the tasks in the task set are using. For more information, see
              `Amazon ECS Launch Types
              <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html>`__ in
              the *Amazon Elastic Container Service Developer Guide* .

            - **platformVersion** *(string) --*

              The platform version on which the tasks in the task set are running. A platform
              version is only specified for tasks using the Fargate launch type. If one is not
              specified, the ``LATEST`` platform version is used by default. For more information,
              see `AWS Fargate Platform Versions
              <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html>`__
              in the *Amazon Elastic Container Service Developer Guide* .

            - **networkConfiguration** *(dict) --*

              The network configuration for the task set.

              - **awsvpcConfiguration** *(dict) --*

                The VPC subnets and security groups associated with a task.

                .. note::

                  All specified subnets and security groups must be from the same VPC.

                - **subnets** *(list) --*

                  The subnets associated with the task or service. There is a limit of 16 subnets
                  that can be specified per ``AwsVpcConfiguration`` .

                  .. note::

                    All specified subnets must be from the same VPC.

                  - *(string) --*

                - **securityGroups** *(list) --*

                  The security groups associated with the task or service. If you do not specify a
                  security group, the default security group for the VPC is used. There is a limit
                  of 5 security groups that can be specified per ``AwsVpcConfiguration`` .

                  .. note::

                    All specified security groups must be from the same VPC.

                  - *(string) --*

                - **assignPublicIp** *(string) --*

                  Whether the task's elastic network interface receives a public IP address. The
                  default value is ``DISABLED`` .

            - **loadBalancers** *(list) --*

              Details on a load balancer that is used with a task set.

              - *(dict) --*

                Details on the load balancer or load balancers to use with a service or task set.

                - **targetGroupArn** *(string) --*

                  The full Amazon Resource Name (ARN) of the Elastic Load Balancing target group or
                  groups associated with a service or task set.

                  A target group ARN is only specified when using an Application Load Balancer or
                  Network Load Balancer. If you are using a Classic Load Balancer this should be
                  omitted.

                  For services using the ``ECS`` deployment controller, you can specify one or
                  multiple target groups. For more information, see `Registering Multiple Target
                  Groups with a Service
                  <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html>`__
                  in the *Amazon Elastic Container Service Developer Guide* .

                  For services using the ``CODE_DEPLOY`` deployment controller, you are required to
                  define two target groups for the load balancer. For more information, see
                  `Blue/Green Deployment with CodeDeploy
                  <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-bluegreen.html>`__
                  in the *Amazon Elastic Container Service Developer Guide* .

                  .. warning::

                    If your service's task definition uses the ``awsvpc`` network mode (which is
                    required for the Fargate launch type), you must choose ``ip`` as the target
                    type, not ``instance`` , when creating your target groups because tasks that
                    use the ``awsvpc`` network mode are associated with an elastic network
                    interface, not an Amazon EC2 instance.

                - **loadBalancerName** *(string) --*

                  The name of the load balancer to associate with the Amazon ECS service or task
                  set.

                  A load balancer name is only specified when using a Classic Load Balancer. If you
                  are using an Application Load Balancer or a Network Load Balancer this should be
                  omitted.

                - **containerName** *(string) --*

                  The name of the container (as it appears in a container definition) to associate
                  with the load balancer.

                - **containerPort** *(integer) --*

                  The port on the container to associate with the load balancer. This port must
                  correspond to a ``containerPort`` in the task definition the tasks in the service
                  are using. For tasks that use the EC2 launch type, the container instance they
                  are launched on must allow ingress traffic on the ``hostPort`` of the port
                  mapping.

            - **serviceRegistries** *(list) --*

              The details of the service discovery registries to assign to this task set. For more
              information, see `Service Discovery
              <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html>`__
              .

              - *(dict) --*

                Details of the service registry.

                - **registryArn** *(string) --*

                  The Amazon Resource Name (ARN) of the service registry. The currently supported
                  service registry is AWS Cloud Map. For more information, see `CreateService
                  <https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html>`__ .

                - **port** *(integer) --*

                  The port value used if your service discovery service specified an SRV record.
                  This field may be used if both the ``awsvpc`` network mode and SRV records are
                  used.

                - **containerName** *(string) --*

                  The container name value, already specified in the task definition, to be used
                  for your service discovery service. If the task definition that your service task
                  specifies uses the ``bridge`` or ``host`` network mode, you must specify a
                  ``containerName`` and ``containerPort`` combination from the task definition. If
                  the task definition that your service task specifies uses the ``awsvpc`` network
                  mode and a type SRV DNS record is used, you must specify either a
                  ``containerName`` and ``containerPort`` combination or a ``port`` value, but not
                  both.

                - **containerPort** *(integer) --*

                  The port value, already specified in the task definition, to be used for your
                  service discovery service. If the task definition your service task specifies
                  uses the ``bridge`` or ``host`` network mode, you must specify a
                  ``containerName`` and ``containerPort`` combination from the task definition. If
                  the task definition your service task specifies uses the ``awsvpc`` network mode
                  and a type SRV DNS record is used, you must specify either a ``containerName``
                  and ``containerPort`` combination or a ``port`` value, but not both.

            - **scale** *(dict) --*

              A floating-point percentage of the desired number of tasks to place and keep running
              in the task set.

              - **value** *(float) --*

                The value, specified as a percent total of a service's ``desiredCount`` , to scale
                the task set. Accepted values are numbers between 0 and 100.

              - **unit** *(string) --*

                The unit of measure for the scale value.

            - **stabilityStatus** *(string) --*

              The stability status, which indicates whether the task set has reached a steady
              state. If the following conditions are met, the task set will be in ``STEADY_STATE`` :

              * The task ``runningCount`` is equal to the ``computedDesiredCount`` .

              * The ``pendingCount`` is ``0`` .

              * There are no tasks running on container instances in the ``DRAINING`` status.

              * All tasks are reporting a healthy status from the load balancers, service
              discovery, and container health checks.

              If any of those conditions are not met, the stability status returns ``STABILIZING`` .

            - **stabilityStatusAt** *(datetime) --*

              The Unix timestamp for when the task set stability status was retrieved.

        - **deployments** *(list) --*

          The current state of deployments for the service.

          - *(dict) --*

            The details of an Amazon ECS service deployment. This is used only when a service uses
            the ``ECS`` deployment controller type.

            - **id** *(string) --*

              The ID of the deployment.

            - **status** *(string) --*

              The status of the deployment. The following describes each state:

                PRIMARY

              The most recent deployment of a service.

                ACTIVE

              A service deployment that still has running tasks, but are in the process of being
              replaced with a new ``PRIMARY`` deployment.

                INACTIVE

              A deployment that has been completely replaced.

            - **taskDefinition** *(string) --*

              The most recent task definition that was specified for the tasks in the service to
              use.

            - **desiredCount** *(integer) --*

              The most recent desired count of tasks that was specified for the service to deploy
              or maintain.

            - **pendingCount** *(integer) --*

              The number of tasks in the deployment that are in the ``PENDING`` status.

            - **runningCount** *(integer) --*

              The number of tasks in the deployment that are in the ``RUNNING`` status.

            - **createdAt** *(datetime) --*

              The Unix timestamp for when the service deployment was created.

            - **updatedAt** *(datetime) --*

              The Unix timestamp for when the service deployment was last updated.

            - **launchType** *(string) --*

              The launch type the tasks in the service are using. For more information, see `Amazon
              ECS Launch Types
              <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html>`__ in
              the *Amazon Elastic Container Service Developer Guide* .

            - **platformVersion** *(string) --*

              The platform version on which your tasks in the service are running. A platform
              version is only specified for tasks using the Fargate launch type. If one is not
              specified, the ``LATEST`` platform version is used by default. For more information,
              see `AWS Fargate Platform Versions
              <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html>`__
              in the *Amazon Elastic Container Service Developer Guide* .

            - **networkConfiguration** *(dict) --*

              The VPC subnet and security group configuration for tasks that receive their own
              elastic network interface by using the ``awsvpc`` networking mode.

              - **awsvpcConfiguration** *(dict) --*

                The VPC subnets and security groups associated with a task.

                .. note::

                  All specified subnets and security groups must be from the same VPC.

                - **subnets** *(list) --*

                  The subnets associated with the task or service. There is a limit of 16 subnets
                  that can be specified per ``AwsVpcConfiguration`` .

                  .. note::

                    All specified subnets must be from the same VPC.

                  - *(string) --*

                - **securityGroups** *(list) --*

                  The security groups associated with the task or service. If you do not specify a
                  security group, the default security group for the VPC is used. There is a limit
                  of 5 security groups that can be specified per ``AwsVpcConfiguration`` .

                  .. note::

                    All specified security groups must be from the same VPC.

                  - *(string) --*

                - **assignPublicIp** *(string) --*

                  Whether the task's elastic network interface receives a public IP address. The
                  default value is ``DISABLED`` .

        - **roleArn** *(string) --*

          The ARN of the IAM role associated with the service that allows the Amazon ECS container
          agent to register container instances with an Elastic Load Balancing load balancer.

        - **events** *(list) --*

          The event stream for your service. A maximum of 100 of the latest events are displayed.

          - *(dict) --*

            Details on an event associated with a service.

            - **id** *(string) --*

              The ID string of the event.

            - **createdAt** *(datetime) --*

              The Unix timestamp for when the event was triggered.

            - **message** *(string) --*

              The event message.

        - **createdAt** *(datetime) --*

          The Unix timestamp for when the service was created.

        - **placementConstraints** *(list) --*

          The placement constraints for the tasks in the service.

          - *(dict) --*

            An object representing a constraint on task placement. For more information, see `Task
            Placement Constraints
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html>`__
            in the *Amazon Elastic Container Service Developer Guide* .

            .. note::

              If you are using the Fargate launch type, task placement constraints are not
              supported.

            - **type** *(string) --*

              The type of constraint. Use ``distinctInstance`` to ensure that each task in a
              particular group is running on a different container instance. Use ``memberOf`` to
              restrict the selection to a group of valid candidates.

            - **expression** *(string) --*

              A cluster query language expression to apply to the constraint. You cannot specify an
              expression if the constraint type is ``distinctInstance`` . For more information, see
              `Cluster Query Language
              <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html>`__
              in the *Amazon Elastic Container Service Developer Guide* .

        - **placementStrategy** *(list) --*

          The placement strategy that determines how tasks for the service are placed.

          - *(dict) --*

            The task placement strategy for a task or service. For more information, see `Task
            Placement Strategies
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-strategies.html>`__
            in the *Amazon Elastic Container Service Developer Guide* .

            - **type** *(string) --*

              The type of placement strategy. The ``random`` placement strategy randomly places
              tasks on available candidates. The ``spread`` placement strategy spreads placement
              across available candidates evenly based on the ``field`` parameter. The ``binpack``
              strategy places tasks on available candidates that have the least available amount of
              the resource that is specified with the ``field`` parameter. For example, if you
              binpack on memory, a task is placed on the instance with the least amount of
              remaining memory (but still enough to run the task).

            - **field** *(string) --*

              The field to apply the placement strategy against. For the ``spread`` placement
              strategy, valid values are ``instanceId`` (or ``host`` , which has the same effect),
              or any platform or custom attribute that is applied to a container instance, such as
              ``attribute:ecs.availability-zone`` . For the ``binpack`` placement strategy, valid
              values are ``cpu`` and ``memory`` . For the ``random`` placement strategy, this field
              is not used.

        - **networkConfiguration** *(dict) --*

          The VPC subnet and security group configuration for tasks that receive their own elastic
          network interface by using the ``awsvpc`` networking mode.

          - **awsvpcConfiguration** *(dict) --*

            The VPC subnets and security groups associated with a task.

            .. note::

              All specified subnets and security groups must be from the same VPC.

            - **subnets** *(list) --*

              The subnets associated with the task or service. There is a limit of 16 subnets that
              can be specified per ``AwsVpcConfiguration`` .

              .. note::

                All specified subnets must be from the same VPC.

              - *(string) --*

            - **securityGroups** *(list) --*

              The security groups associated with the task or service. If you do not specify a
              security group, the default security group for the VPC is used. There is a limit of 5
              security groups that can be specified per ``AwsVpcConfiguration`` .

              .. note::

                All specified security groups must be from the same VPC.

              - *(string) --*

            - **assignPublicIp** *(string) --*

              Whether the task's elastic network interface receives a public IP address. The
              default value is ``DISABLED`` .

        - **healthCheckGracePeriodSeconds** *(integer) --*

          The period of time, in seconds, that the Amazon ECS service scheduler ignores unhealthy
          Elastic Load Balancing target health checks after a task has first started.

        - **schedulingStrategy** *(string) --*

          The scheduling strategy to use for the service. For more information, see `Services
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs_services.html>`__ .

          There are two service scheduler strategies available:

          * ``REPLICA`` -The replica scheduling strategy places and maintains the desired number of
          tasks across your cluster. By default, the service scheduler spreads tasks across
          Availability Zones. You can use task placement strategies and constraints to customize
          task placement decisions.

          * ``DAEMON`` -The daemon scheduling strategy deploys exactly one task on each container
          instance in your cluster. When you are using this strategy, do not specify a desired
          number of tasks or any task placement strategies.

          .. note::

             Fargate tasks do not support the ``DAEMON`` scheduling strategy.

        - **deploymentController** *(dict) --*

          The deployment controller type the service is using. When using the DescribeServices API,
          this field is omitted if the service is using the ``ECS`` deployment controller type.

          - **type** *(string) --*

            The deployment controller type to use.

            There are three deployment controller types available:

              ECS

            The rolling update (``ECS`` ) deployment type involves replacing the current running
            version of the container with the latest version. The number of containers Amazon ECS
            adds or removes from the service during a rolling update is controlled by adjusting the
            minimum and maximum number of healthy tasks allowed during a service deployment, as
            specified in the  DeploymentConfiguration .

              CODE_DEPLOY

            The blue/green (``CODE_DEPLOY`` ) deployment type uses the blue/green deployment model
            powered by AWS CodeDeploy, which allows you to verify a new deployment of a service
            before sending production traffic to it.

              EXTERNAL

            The external (``EXTERNAL`` ) deployment type enables you to use any third-party
            deployment controller for full control over the deployment process for an Amazon ECS
            service.

        - **tags** *(list) --*

          The metadata that you apply to the service to help you categorize and organize them. Each
          tag consists of a key and an optional value, both of which you define.

          The following basic restrictions apply to tags:

          * Maximum number of tags per resource - 50

          * For each resource, each tag key must be unique, and each tag key can have only one
          value.

          * Maximum key length - 128 Unicode characters in UTF-8

          * Maximum value length - 256 Unicode characters in UTF-8

          * If your tagging schema is used across multiple services and resources, remember that
          other services may have restrictions on allowed characters. Generally allowed characters
          are: letters, numbers, and spaces representable in UTF-8, and the following characters: +
          - = . _ : / @.

          * Tag keys and values are case-sensitive.

          * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
          prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
          tag keys or values with this prefix. Tags with this prefix do not count against your tags
          per resource limit.

          - *(dict) --*

            The metadata that you apply to a resource to help you categorize and organize them.
            Each tag consists of a key and an optional value, both of which you define.

            The following basic restrictions apply to tags:

            * Maximum number of tags per resource - 50

            * For each resource, each tag key must be unique, and each tag key can have only one
            value.

            * Maximum key length - 128 Unicode characters in UTF-8

            * Maximum value length - 256 Unicode characters in UTF-8

            * If your tagging schema is used across multiple services and resources, remember that
            other services may have restrictions on allowed characters. Generally allowed
            characters are: letters, numbers, and spaces representable in UTF-8, and the following
            characters: + - = . _ : / @.

            * Tag keys and values are case-sensitive.

            * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
            prefix for either keys or values as it is reserved for AWS use. You cannot edit or
            delete tag keys or values with this prefix. Tags with this prefix do not count against
            your tags per resource limit.

            - **key** *(string) --*

              One part of a key-value pair that make up a tag. A ``key`` is a general label that
              acts like a category for more specific tag values.

            - **value** *(string) --*

              The optional part of a key-value pair that make up a tag. A ``value`` acts as a
              descriptor within a tag category (key).

        - **createdBy** *(string) --*

          The principal that created the service.

        - **enableECSManagedTags** *(boolean) --*

          Specifies whether to enable Amazon ECS managed tags for the tasks in the service. For
          more information, see `Tagging Your Amazon ECS Resources
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html>`__ in
          the *Amazon Elastic Container Service Developer Guide* .

        - **propagateTags** *(string) --*

          Specifies whether to propagate the tags from the task definition or the service to the
          task. If no value is specified, the tags are not propagated.

    - **failures** *(list) --*

      Any failures associated with the call.

      - *(dict) --*

        A failed resource.

        - **arn** *(string) --*

          The Amazon Resource Name (ARN) of the failed resource.

        - **reason** *(string) --*

          The reason for the failure.

        - **detail** *(string) --*

          The details of the failure.
    """


_ClientDescribeTaskDefinitionResponsetagsTypeDef = TypedDict(
    "_ClientDescribeTaskDefinitionResponsetagsTypeDef",
    {"key": str, "value": str},
    total=False,
)


class ClientDescribeTaskDefinitionResponsetagsTypeDef(
    _ClientDescribeTaskDefinitionResponsetagsTypeDef
):
    """
    Type definition for `ClientDescribeTaskDefinitionResponse` `tags`

    The metadata that you apply to a resource to help you categorize and organize them. Each
    tag consists of a key and an optional value, both of which you define.

    The following basic restrictions apply to tags:

    * Maximum number of tags per resource - 50

    * For each resource, each tag key must be unique, and each tag key can have only one value.

    * Maximum key length - 128 Unicode characters in UTF-8

    * Maximum value length - 256 Unicode characters in UTF-8

    * If your tagging schema is used across multiple services and resources, remember that
    other services may have restrictions on allowed characters. Generally allowed characters
    are: letters, numbers, and spaces representable in UTF-8, and the following characters: + -
    = . _ : / @.

    * Tag keys and values are case-sensitive.

    * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
    prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
    tag keys or values with this prefix. Tags with this prefix do not count against your tags
    per resource limit.

    - **key** *(string) --*

      One part of a key-value pair that make up a tag. A ``key`` is a general label that acts
      like a category for more specific tag values.

    - **value** *(string) --*

      The optional part of a key-value pair that make up a tag. A ``value`` acts as a
      descriptor within a tag category (key).
    """


_ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionsdependsOnTypeDef = TypedDict(
    "_ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionsdependsOnTypeDef",
    {"containerName": str, "condition": str},
    total=False,
)


class ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionsdependsOnTypeDef(
    _ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionsdependsOnTypeDef
):
    """
    Type definition for `ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitions` `dependsOn`

    The dependencies defined for container startup and shutdown. A container can contain
    multiple dependencies. When a dependency is defined for container startup, for
    container shutdown it is reversed.

    Your Amazon ECS container instances require at least version 1.26.0 of the container
    agent to enable container dependencies. However, we recommend using the latest
    container agent version. For information about checking your agent version and
    updating to the latest version, see `Updating the Amazon ECS Container Agent
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html>`__
    in the *Amazon Elastic Container Service Developer Guide* . If you are using an
    Amazon ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the
    ``ecs-init`` package. If your container instances are launched from version
    ``20190301`` or later, then they contain the required versions of the container agent
    and ``ecs-init`` . For more information, see `Amazon ECS-optimized Linux AMI
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html>`__
    in the *Amazon Elastic Container Service Developer Guide* .

    .. note::

      If you are using tasks that use the Fargate launch type, container dependency
      parameters are not supported.

    - **containerName** *(string) --*

      The name of a container.

    - **condition** *(string) --*

      The dependency condition of the container. The following are the available
      conditions and their behavior:

      * ``START`` - This condition emulates the behavior of links and volumes today. It
      validates that a dependent container is started before permitting other containers
      to start.

      * ``COMPLETE`` - This condition validates that a dependent container runs to
      completion (exits) before permitting other containers to start. This can be useful
      for nonessential containers that run a script and then exit.

      * ``SUCCESS`` - This condition is the same as ``COMPLETE`` , but it also requires
      that the container exits with a ``zero`` status.

      * ``HEALTHY`` - This condition validates that the dependent container passes its
      Docker health check before permitting other containers to start. This requires that
      the dependent container has health checks configured. This condition is confirmed
      only at task startup.
    """


_ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionsenvironmentTypeDef = TypedDict(
    "_ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionsenvironmentTypeDef",
    {"name": str, "value": str},
    total=False,
)


class ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionsenvironmentTypeDef(
    _ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionsenvironmentTypeDef
):
    """
    Type definition for `ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitions` `environment`

    A key-value pair object.

    - **name** *(string) --*

      The name of the key-value pair. For environment variables, this is the name of the
      environment variable.

    - **value** *(string) --*

      The value of the key-value pair. For environment variables, this is the value of
      the environment variable.
    """


_ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionsextraHostsTypeDef = TypedDict(
    "_ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionsextraHostsTypeDef",
    {"hostname": str, "ipAddress": str},
    total=False,
)


class ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionsextraHostsTypeDef(
    _ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionsextraHostsTypeDef
):
    """
    Type definition for `ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitions` `extraHosts`

    Hostnames and IP address entries that are added to the ``/etc/hosts`` file of a
    container via the ``extraHosts`` parameter of its  ContainerDefinition .

    - **hostname** *(string) --*

      The hostname to use in the ``/etc/hosts`` entry.

    - **ipAddress** *(string) --*

      The IP address to use in the ``/etc/hosts`` entry.
    """


_ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionsfirelensConfigurationTypeDef = TypedDict(
    "_ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionsfirelensConfigurationTypeDef",
    {"type": str, "options": Dict[str, str]},
    total=False,
)


class ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionsfirelensConfigurationTypeDef(
    _ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionsfirelensConfigurationTypeDef
):
    """
    Type definition for `ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitions` `firelensConfiguration`

    The FireLens configuration for the container. This is used to specify and configure a
    log router for container logs. For more information, see `Custom Log Routing
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html>`__ in
    the *Amazon Elastic Container Service Developer Guide* .

    - **type** *(string) --*

      The log router to use. The valid values are ``fluentd`` or ``fluentbit`` .

    - **options** *(dict) --*

      The options to use when configuring the log router. This field is optional and can be
      used to add additional metadata, such as the task, task definition, cluster, and
      container instance details to the log event. If specified, the syntax to use is
      ``"options":{"enable-ecs-log-metadata":"true|false"}`` .

      - *(string) --*

        - *(string) --*
    """


_ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionshealthCheckTypeDef = TypedDict(
    "_ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionshealthCheckTypeDef",
    {
        "command": List[str],
        "interval": int,
        "timeout": int,
        "retries": int,
        "startPeriod": int,
    },
    total=False,
)


class ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionshealthCheckTypeDef(
    _ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionshealthCheckTypeDef
):
    """
    Type definition for `ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitions` `healthCheck`

    The health check command and associated configuration parameters for the container.
    This parameter maps to ``HealthCheck`` in the `Create a container
    <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
    `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
    ``HEALTHCHECK`` parameter of `docker run
    <https://docs.docker.com/engine/reference/run/>`__ .

    - **command** *(list) --*

      A string array representing the command that the container runs to determine if it is
      healthy. The string array must start with ``CMD`` to execute the command arguments
      directly, or ``CMD-SHELL`` to run the command with the container's default shell. For
      example:

       ``[ "CMD-SHELL", "curl -f http://localhost/ || exit 1" ]``

      An exit code of 0 indicates success, and non-zero exit code indicates failure. For
      more information, see ``HealthCheck`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of
      the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ .

      - *(string) --*

    - **interval** *(integer) --*

      The time period in seconds between each health check execution. You may specify
      between 5 and 300 seconds. The default value is 30 seconds.

    - **timeout** *(integer) --*

      The time period in seconds to wait for a health check to succeed before it is
      considered a failure. You may specify between 2 and 60 seconds. The default value is
      5.

    - **retries** *(integer) --*

      The number of times to retry a failed health check before the container is considered
      unhealthy. You may specify between 1 and 10 retries. The default value is 3.

    - **startPeriod** *(integer) --*

      The optional grace period within which to provide containers time to bootstrap before
      failed health checks count towards the maximum number of retries. You may specify
      between 0 and 300 seconds. The ``startPeriod`` is disabled by default.

      .. note::

        If a health check succeeds within the ``startPeriod`` , then the container is
        considered healthy and any subsequent failures count toward the maximum number of
        retries.
    """


_ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParameterscapabilitiesTypeDef = TypedDict(
    "_ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParameterscapabilitiesTypeDef",
    {"add": List[str], "drop": List[str]},
    total=False,
)


class ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParameterscapabilitiesTypeDef(
    _ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParameterscapabilitiesTypeDef
):
    """
    Type definition for `ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParameters` `capabilities`

    The Linux capabilities for the container that are added to or dropped from the
    default configuration provided by Docker.

    .. note::

      If you are using tasks that use the Fargate launch type, ``capabilities`` is
      supported but the ``add`` parameter is not supported.

    - **add** *(list) --*

      The Linux capabilities for the container that have been added to the default
      configuration provided by Docker. This parameter maps to ``CapAdd`` in the `Create
      a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of
      the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
      ``--cap-add`` option to `docker run
      <https://docs.docker.com/engine/reference/run/>`__ .

      .. note::

        If you are using tasks that use the Fargate launch type, the ``add`` parameter is
        not supported.

      Valid values: ``"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" | "BLOCK_SUSPEND" | "CHOWN"
      | "DAC_OVERRIDE" | "DAC_READ_SEARCH" | "FOWNER" | "FSETID" | "IPC_LOCK" |
      "IPC_OWNER" | "KILL" | "LEASE" | "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" |
      "MKNOD" | "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" |
      "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT" |
      "SYS_CHROOT" | "SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" | "SYS_PTRACE" | "SYS_RAWIO"
      | "SYS_RESOURCE" | "SYS_TIME" | "SYS_TTY_CONFIG" | "SYSLOG" | "WAKE_ALARM"``

      - *(string) --*

    - **drop** *(list) --*

      The Linux capabilities for the container that have been removed from the default
      configuration provided by Docker. This parameter maps to ``CapDrop`` in the `Create
      a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of
      the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
      ``--cap-drop`` option to `docker run
      <https://docs.docker.com/engine/reference/run/>`__ .

      Valid values: ``"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" | "BLOCK_SUSPEND" | "CHOWN"
      | "DAC_OVERRIDE" | "DAC_READ_SEARCH" | "FOWNER" | "FSETID" | "IPC_LOCK" |
      "IPC_OWNER" | "KILL" | "LEASE" | "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" |
      "MKNOD" | "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" |
      "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT" |
      "SYS_CHROOT" | "SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" | "SYS_PTRACE" | "SYS_RAWIO"
      | "SYS_RESOURCE" | "SYS_TIME" | "SYS_TTY_CONFIG" | "SYSLOG" | "WAKE_ALARM"``

      - *(string) --*
    """


_ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParametersdevicesTypeDef = TypedDict(
    "_ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParametersdevicesTypeDef",
    {"hostPath": str, "containerPath": str, "permissions": List[str]},
    total=False,
)


class ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParametersdevicesTypeDef(
    _ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParametersdevicesTypeDef
):
    """
    Type definition for `ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParameters` `devices`

    An object representing a container instance host device.

    - **hostPath** *(string) --*

      The path for the device on the host container instance.

    - **containerPath** *(string) --*

      The path inside the container at which to expose the host device.

    - **permissions** *(list) --*

      The explicit permissions to provide to the container for the device. By default,
      the container has permissions for ``read`` , ``write`` , and ``mknod`` for the
      device.

      - *(string) --*
    """


_ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParameterstmpfsTypeDef = TypedDict(
    "_ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParameterstmpfsTypeDef",
    {"containerPath": str, "size": int, "mountOptions": List[str]},
    total=False,
)


class ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParameterstmpfsTypeDef(
    _ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParameterstmpfsTypeDef
):
    """
    Type definition for `ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParameters` `tmpfs`

    The container path, mount options, and size of the tmpfs mount.

    - **containerPath** *(string) --*

      The absolute file path where the tmpfs volume is to be mounted.

    - **size** *(integer) --*

      The size (in MiB) of the tmpfs volume.

    - **mountOptions** *(list) --*

      The list of tmpfs volume mount options.

      Valid values: ``"defaults" | "ro" | "rw" | "suid" | "nosuid" | "dev" | "nodev" |
      "exec" | "noexec" | "sync" | "async" | "dirsync" | "remount" | "mand" | "nomand"
      | "atime" | "noatime" | "diratime" | "nodiratime" | "bind" | "rbind" |
      "unbindable" | "runbindable" | "private" | "rprivate" | "shared" | "rshared" |
      "slave" | "rslave" | "relatime" | "norelatime" | "strictatime" | "nostrictatime"
      | "mode" | "uid" | "gid" | "nr_inodes" | "nr_blocks" | "mpol"``

      - *(string) --*
    """


_ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParametersTypeDef = TypedDict(
    "_ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParametersTypeDef",
    {
        "capabilities": ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParameterscapabilitiesTypeDef,
        "devices": List[
            ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParametersdevicesTypeDef
        ],
        "initProcessEnabled": bool,
        "sharedMemorySize": int,
        "tmpfs": List[
            ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParameterstmpfsTypeDef
        ],
        "maxSwap": int,
        "swappiness": int,
    },
    total=False,
)


class ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParametersTypeDef(
    _ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParametersTypeDef
):
    """
    Type definition for `ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitions` `linuxParameters`

    Linux-specific modifications that are applied to the container, such as Linux kernel
    capabilities. For more information see  KernelCapabilities .

    .. note::

      This parameter is not supported for Windows containers.

    - **capabilities** *(dict) --*

      The Linux capabilities for the container that are added to or dropped from the
      default configuration provided by Docker.

      .. note::

        If you are using tasks that use the Fargate launch type, ``capabilities`` is
        supported but the ``add`` parameter is not supported.

      - **add** *(list) --*

        The Linux capabilities for the container that have been added to the default
        configuration provided by Docker. This parameter maps to ``CapAdd`` in the `Create
        a container
        <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of
        the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
        ``--cap-add`` option to `docker run
        <https://docs.docker.com/engine/reference/run/>`__ .

        .. note::

          If you are using tasks that use the Fargate launch type, the ``add`` parameter is
          not supported.

        Valid values: ``"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" | "BLOCK_SUSPEND" | "CHOWN"
        | "DAC_OVERRIDE" | "DAC_READ_SEARCH" | "FOWNER" | "FSETID" | "IPC_LOCK" |
        "IPC_OWNER" | "KILL" | "LEASE" | "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" |
        "MKNOD" | "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" |
        "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT" |
        "SYS_CHROOT" | "SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" | "SYS_PTRACE" | "SYS_RAWIO"
        | "SYS_RESOURCE" | "SYS_TIME" | "SYS_TTY_CONFIG" | "SYSLOG" | "WAKE_ALARM"``

        - *(string) --*

      - **drop** *(list) --*

        The Linux capabilities for the container that have been removed from the default
        configuration provided by Docker. This parameter maps to ``CapDrop`` in the `Create
        a container
        <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of
        the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
        ``--cap-drop`` option to `docker run
        <https://docs.docker.com/engine/reference/run/>`__ .

        Valid values: ``"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" | "BLOCK_SUSPEND" | "CHOWN"
        | "DAC_OVERRIDE" | "DAC_READ_SEARCH" | "FOWNER" | "FSETID" | "IPC_LOCK" |
        "IPC_OWNER" | "KILL" | "LEASE" | "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" |
        "MKNOD" | "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" |
        "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT" |
        "SYS_CHROOT" | "SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" | "SYS_PTRACE" | "SYS_RAWIO"
        | "SYS_RESOURCE" | "SYS_TIME" | "SYS_TTY_CONFIG" | "SYSLOG" | "WAKE_ALARM"``

        - *(string) --*

    - **devices** *(list) --*

      Any host devices to expose to the container. This parameter maps to ``Devices`` in
      the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of
      the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
      ``--device`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__
      .

      .. note::

        If you are using tasks that use the Fargate launch type, the ``devices`` parameter
        is not supported.

      - *(dict) --*

        An object representing a container instance host device.

        - **hostPath** *(string) --*

          The path for the device on the host container instance.

        - **containerPath** *(string) --*

          The path inside the container at which to expose the host device.

        - **permissions** *(list) --*

          The explicit permissions to provide to the container for the device. By default,
          the container has permissions for ``read`` , ``write`` , and ``mknod`` for the
          device.

          - *(string) --*

    - **initProcessEnabled** *(boolean) --*

      Run an ``init`` process inside the container that forwards signals and reaps
      processes. This parameter maps to the ``--init`` option to `docker run
      <https://docs.docker.com/engine/reference/run/>`__ . This parameter requires version
      1.25 of the Docker Remote API or greater on your container instance. To check the
      Docker Remote API version on your container instance, log in to your container
      instance and run the following command: ``sudo docker version --format
      '{{.Server.APIVersion}}'``

    - **sharedMemorySize** *(integer) --*

      The value for the size (in MiB) of the ``/dev/shm`` volume. This parameter maps to
      the ``--shm-size`` option to `docker run
      <https://docs.docker.com/engine/reference/run/>`__ .

      .. note::

        If you are using tasks that use the Fargate launch type, the ``sharedMemorySize``
        parameter is not supported.

    - **tmpfs** *(list) --*

      The container path, mount options, and size (in MiB) of the tmpfs mount. This
      parameter maps to the ``--tmpfs`` option to `docker run
      <https://docs.docker.com/engine/reference/run/>`__ .

      .. note::

        If you are using tasks that use the Fargate launch type, the ``tmpfs`` parameter is
        not supported.

      - *(dict) --*

        The container path, mount options, and size of the tmpfs mount.

        - **containerPath** *(string) --*

          The absolute file path where the tmpfs volume is to be mounted.

        - **size** *(integer) --*

          The size (in MiB) of the tmpfs volume.

        - **mountOptions** *(list) --*

          The list of tmpfs volume mount options.

          Valid values: ``"defaults" | "ro" | "rw" | "suid" | "nosuid" | "dev" | "nodev" |
          "exec" | "noexec" | "sync" | "async" | "dirsync" | "remount" | "mand" | "nomand"
          | "atime" | "noatime" | "diratime" | "nodiratime" | "bind" | "rbind" |
          "unbindable" | "runbindable" | "private" | "rprivate" | "shared" | "rshared" |
          "slave" | "rslave" | "relatime" | "norelatime" | "strictatime" | "nostrictatime"
          | "mode" | "uid" | "gid" | "nr_inodes" | "nr_blocks" | "mpol"``

          - *(string) --*

    - **maxSwap** *(integer) --*

      The total amount of swap memory (in MiB) a container can use. This parameter will be
      translated to the ``--memory-swap`` option to `docker run
      <https://docs.docker.com/engine/reference/run/>`__ where the value would be the sum
      of the container memory plus the ``maxSwap`` value.

      If a ``maxSwap`` value of ``0`` is specified, the container will not use swap.
      Accepted values are ``0`` or any positive integer. If the ``maxSwap`` parameter is
      omitted, the container will use the swap configuration for the container instance it
      is running on. A ``maxSwap`` value must be set for the ``swappiness`` parameter to be
      used.

      .. note::

        If you are using tasks that use the Fargate launch type, the ``maxSwap`` parameter
        is not supported.

    - **swappiness** *(integer) --*

      This allows you to tune a container's memory swappiness behavior. A ``swappiness``
      value of ``0`` will cause swapping to not happen unless absolutely necessary. A
      ``swappiness`` value of ``100`` will cause pages to be swapped very aggressively.
      Accepted values are whole numbers between ``0`` and ``100`` . If the ``swappiness``
      parameter is not specified, a default value of ``60`` is used. If a value is not
      specified for ``maxSwap`` then this parameter is ignored. This parameter maps to the
      ``--memory-swappiness`` option to `docker run
      <https://docs.docker.com/engine/reference/run/>`__ .

      .. note::

        If you are using tasks that use the Fargate launch type, the ``swappiness``
        parameter is not supported.
    """


_ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionslogConfigurationsecretOptionsTypeDef = TypedDict(
    "_ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionslogConfigurationsecretOptionsTypeDef",
    {"name": str, "valueFrom": str},
    total=False,
)


class ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionslogConfigurationsecretOptionsTypeDef(
    _ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionslogConfigurationsecretOptionsTypeDef
):
    """
    Type definition for `ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionslogConfiguration` `secretOptions`

    An object representing the secret to expose to your container. Secrets can be
    exposed to a container in the following ways:

    * To inject sensitive data into your containers as environment variables, use the
    ``secrets`` container definition parameter.

    * To reference sensitive information in the log configuration of a container, use
    the ``secretOptions`` container definition parameter.

    For more information, see `Specifying Sensitive Data
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html>`__
    in the *Amazon Elastic Container Service Developer Guide* .

    - **name** *(string) --*

      The name of the secret.

    - **valueFrom** *(string) --*

      The secret to expose to the container. The supported values are either the full
      ARN of the AWS Secrets Manager secret or the full ARN of the parameter in the AWS
      Systems Manager Parameter Store.

      .. note::

        If the AWS Systems Manager Parameter Store parameter exists in the same Region
        as the task you are launching, then you can use either the full ARN or name of
        the parameter. If the parameter exists in a different Region, then the full ARN
        must be specified.
    """


_ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionslogConfigurationTypeDef = TypedDict(
    "_ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionslogConfigurationTypeDef",
    {
        "logDriver": str,
        "options": Dict[str, str],
        "secretOptions": List[
            ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionslogConfigurationsecretOptionsTypeDef
        ],
    },
    total=False,
)


class ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionslogConfigurationTypeDef(
    _ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionslogConfigurationTypeDef
):
    """
    Type definition for `ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitions` `logConfiguration`

    The log configuration specification for the container.

    This parameter maps to ``LogConfig`` in the `Create a container
    <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
    `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
    ``--log-driver`` option to `docker run
    <https://docs.docker.com/engine/reference/run/>`__ . By default, containers use the
    same logging driver that the Docker daemon uses. However the container may use a
    different logging driver than the Docker daemon by specifying a log driver with this
    parameter in the container definition. To use a different logging driver for a
    container, the log system must be configured properly on the container instance (or on
    a different log server for remote logging options). For more information on the options
    for different supported log drivers, see `Configure logging drivers
    <https://docs.docker.com/engine/admin/logging/overview/>`__ in the Docker documentation.

    .. note::

      Amazon ECS currently supports a subset of the logging drivers available to the Docker
      daemon (shown in the  LogConfiguration data type). Additional log drivers may be
      available in future releases of the Amazon ECS container agent.

    This parameter requires version 1.18 of the Docker Remote API or greater on your
    container instance. To check the Docker Remote API version on your container instance,
    log in to your container instance and run the following command: ``sudo docker version
    --format '{{.Server.APIVersion}}'``

    .. note::

      The Amazon ECS container agent running on a container instance must register the
      logging drivers available on that instance with the ``ECS_AVAILABLE_LOGGING_DRIVERS``
      environment variable before containers placed on that instance can use these log
      configuration options. For more information, see `Amazon ECS Container Agent
      Configuration
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

    - **logDriver** *(string) --*

      The log driver to use for the container. The valid values listed for this parameter
      are log drivers that the Amazon ECS container agent can communicate with by default.

      For tasks using the Fargate launch type, the supported log drivers are ``awslogs``
      and ``splunk`` .

      For tasks using the EC2 launch type, the supported log drivers are ``awslogs`` ,
      ``fluentd`` , ``gelf`` , ``json-file`` , ``journald`` , ``logentries`` , ``syslog`` ,
      and ``splunk`` .

      For more information about using the ``awslogs`` log driver, see `Using the awslogs
      Log Driver
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_awslogs.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

      .. note::

        If you have a custom driver that is not listed above that you would like to work
        with the Amazon ECS container agent, you can fork the Amazon ECS container agent
        project that is `available on GitHub <https://github.com/aws/amazon-ecs-agent>`__
        and customize it to work with that driver. We encourage you to submit pull requests
        for changes that you would like to have included. However, Amazon Web Services does
        not currently support running modified copies of this software.

      This parameter requires version 1.18 of the Docker Remote API or greater on your
      container instance. To check the Docker Remote API version on your container
      instance, log in to your container instance and run the following command: ``sudo
      docker version --format '{{.Server.APIVersion}}'``

    - **options** *(dict) --*

      The configuration options to send to the log driver. This parameter requires version
      1.19 of the Docker Remote API or greater on your container instance. To check the
      Docker Remote API version on your container instance, log in to your container
      instance and run the following command: ``sudo docker version --format
      '{{.Server.APIVersion}}'``

      - *(string) --*

        - *(string) --*

    - **secretOptions** *(list) --*

      The secrets to pass to the log configuration. For more information, see `Specifying
      Sensitive Data
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

      - *(dict) --*

        An object representing the secret to expose to your container. Secrets can be
        exposed to a container in the following ways:

        * To inject sensitive data into your containers as environment variables, use the
        ``secrets`` container definition parameter.

        * To reference sensitive information in the log configuration of a container, use
        the ``secretOptions`` container definition parameter.

        For more information, see `Specifying Sensitive Data
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html>`__
        in the *Amazon Elastic Container Service Developer Guide* .

        - **name** *(string) --*

          The name of the secret.

        - **valueFrom** *(string) --*

          The secret to expose to the container. The supported values are either the full
          ARN of the AWS Secrets Manager secret or the full ARN of the parameter in the AWS
          Systems Manager Parameter Store.

          .. note::

            If the AWS Systems Manager Parameter Store parameter exists in the same Region
            as the task you are launching, then you can use either the full ARN or name of
            the parameter. If the parameter exists in a different Region, then the full ARN
            must be specified.
    """


_ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionsmountPointsTypeDef = TypedDict(
    "_ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionsmountPointsTypeDef",
    {"sourceVolume": str, "containerPath": str, "readOnly": bool},
    total=False,
)


class ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionsmountPointsTypeDef(
    _ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionsmountPointsTypeDef
):
    """
    Type definition for `ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitions` `mountPoints`

    Details on a volume mount point that is used in a container definition.

    - **sourceVolume** *(string) --*

      The name of the volume to mount. Must be a volume name referenced in the ``name``
      parameter of task definition ``volume`` .

    - **containerPath** *(string) --*

      The path on the container to mount the host volume at.

    - **readOnly** *(boolean) --*

      If this value is ``true`` , the container has read-only access to the volume. If
      this value is ``false`` , then the container can write to the volume. The default
      value is ``false`` .
    """


_ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionsportMappingsTypeDef = TypedDict(
    "_ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionsportMappingsTypeDef",
    {"containerPort": int, "hostPort": int, "protocol": str},
    total=False,
)


class ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionsportMappingsTypeDef(
    _ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionsportMappingsTypeDef
):
    """
    Type definition for `ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitions` `portMappings`

    Port mappings allow containers to access ports on the host container instance to send
    or receive traffic. Port mappings are specified as part of the container definition.

    If you are using containers in a task with the ``awsvpc`` or ``host`` network mode,
    exposed ports should be specified using ``containerPort`` . The ``hostPort`` can be
    left blank or it must be the same value as the ``containerPort`` .

    After a task reaches the ``RUNNING`` status, manual and automatic host and container
    port assignments are visible in the ``networkBindings`` section of  DescribeTasks API
    responses.

    - **containerPort** *(integer) --*

      The port number on the container that is bound to the user-specified or
      automatically assigned host port.

      If you are using containers in a task with the ``awsvpc`` or ``host`` network mode,
      exposed ports should be specified using ``containerPort`` .

      If you are using containers in a task with the ``bridge`` network mode and you
      specify a container port and not a host port, your container automatically receives
      a host port in the ephemeral port range. For more information, see ``hostPort`` .
      Port mappings that are automatically assigned in this way do not count toward the
      100 reserved ports limit of a container instance.

      .. warning::

        You cannot expose the same container port for multiple protocols. An error will
        be returned if this is attempted.

    - **hostPort** *(integer) --*

      The port number on the container instance to reserve for your container.

      If you are using containers in a task with the ``awsvpc`` or ``host`` network mode,
      the ``hostPort`` can either be left blank or set to the same value as the
      ``containerPort`` .

      If you are using containers in a task with the ``bridge`` network mode, you can
      specify a non-reserved host port for your container port mapping, or you can omit
      the ``hostPort`` (or set it to ``0`` ) while specifying a ``containerPort`` and
      your container automatically receives a port in the ephemeral port range for your
      container instance operating system and Docker version.

      The default ephemeral port range for Docker version 1.6.0 and later is listed on
      the instance under ``/proc/sys/net/ipv4/ip_local_port_range`` . If this kernel
      parameter is unavailable, the default ephemeral port range from 49153 through 65535
      is used. Do not attempt to specify a host port in the ephemeral port range as these
      are reserved for automatic assignment. In general, ports below 32768 are outside of
      the ephemeral port range.

      .. note::

        The default ephemeral port range from 49153 through 65535 is always used for
        Docker versions before 1.6.0.

      The default reserved ports are 22 for SSH, the Docker ports 2375 and 2376, and the
      Amazon ECS container agent ports 51678-51680. Any host port that was previously
      specified in a running task is also reserved while the task is running (after a
      task stops, the host port is released). The current reserved ports are displayed in
      the ``remainingResources`` of  DescribeContainerInstances output. A container
      instance can have up to 100 reserved ports at a time, including the default
      reserved ports. Automatically assigned ports don't count toward the 100 reserved
      ports limit.

    - **protocol** *(string) --*

      The protocol used for the port mapping. Valid values are ``tcp`` and ``udp`` . The
      default is ``tcp`` .
    """


_ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionsrepositoryCredentialsTypeDef = TypedDict(
    "_ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionsrepositoryCredentialsTypeDef",
    {"credentialsParameter": str},
    total=False,
)


class ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionsrepositoryCredentialsTypeDef(
    _ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionsrepositoryCredentialsTypeDef
):
    """
    Type definition for `ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitions` `repositoryCredentials`

    The private repository authentication credentials to use.

    - **credentialsParameter** *(string) --*

      The Amazon Resource Name (ARN) of the secret containing the private repository
      credentials.

      .. note::

        When you are using the Amazon ECS API, AWS CLI, or AWS SDK, if the secret exists in
        the same Region as the task that you are launching then you can use either the full
        ARN or the name of the secret. When you are using the AWS Management Console, you
        must specify the full ARN of the secret.
    """


_ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionsresourceRequirementsTypeDef = TypedDict(
    "_ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionsresourceRequirementsTypeDef",
    {"value": str, "type": str},
    total=False,
)


class ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionsresourceRequirementsTypeDef(
    _ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionsresourceRequirementsTypeDef
):
    """
    Type definition for `ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitions` `resourceRequirements`

    The type and amount of a resource to assign to a container. The supported resource
    types are GPUs and Elastic Inference accelerators. For more information, see `Working
    with GPUs on Amazon ECS
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-gpu.html>`__ or
    `Working with Amazon Elastic Inference on Amazon ECS
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in the
    *Amazon Elastic Container Service Developer Guide*

    - **value** *(string) --*

      The value for the specified resource type.

      If the ``GPU`` type is used, the value is the number of physical ``GPUs`` the
      Amazon ECS container agent will reserve for the container. The number of GPUs
      reserved for all containers in a task should not exceed the number of available
      GPUs on the container instance the task is launched on.

      If the ``InferenceAccelerator`` type is used, the ``value`` should match the
      ``deviceName`` for an  InferenceAccelerator specified in a task definition.

    - **type** *(string) --*

      The type of resource to assign to a container. The supported values are ``GPU`` or
      ``InferenceAccelerator`` .
    """


_ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionssecretsTypeDef = TypedDict(
    "_ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionssecretsTypeDef",
    {"name": str, "valueFrom": str},
    total=False,
)


class ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionssecretsTypeDef(
    _ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionssecretsTypeDef
):
    """
    Type definition for `ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitions` `secrets`

    An object representing the secret to expose to your container. Secrets can be exposed
    to a container in the following ways:

    * To inject sensitive data into your containers as environment variables, use the
    ``secrets`` container definition parameter.

    * To reference sensitive information in the log configuration of a container, use the
    ``secretOptions`` container definition parameter.

    For more information, see `Specifying Sensitive Data
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html>`__
    in the *Amazon Elastic Container Service Developer Guide* .

    - **name** *(string) --*

      The name of the secret.

    - **valueFrom** *(string) --*

      The secret to expose to the container. The supported values are either the full ARN
      of the AWS Secrets Manager secret or the full ARN of the parameter in the AWS
      Systems Manager Parameter Store.

      .. note::

        If the AWS Systems Manager Parameter Store parameter exists in the same Region as
        the task you are launching, then you can use either the full ARN or name of the
        parameter. If the parameter exists in a different Region, then the full ARN must
        be specified.
    """


_ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionssystemControlsTypeDef = TypedDict(
    "_ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionssystemControlsTypeDef",
    {"namespace": str, "value": str},
    total=False,
)


class ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionssystemControlsTypeDef(
    _ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionssystemControlsTypeDef
):
    """
    Type definition for `ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitions` `systemControls`

    A list of namespaced kernel parameters to set in the container. This parameter maps
    to ``Sysctls`` in the `Create a container
    <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of
    the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
    ``--sysctl`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__
    .

    It is not recommended that you specify network-related ``systemControls`` parameters
    for multiple containers in a single task that also uses either the ``awsvpc`` or
    ``host`` network mode for the following reasons:

    * For tasks that use the ``awsvpc`` network mode, if you set ``systemControls`` for
    any container, it applies to all containers in the task. If you set different
    ``systemControls`` for multiple containers in a single task, the container that is
    started last determines which ``systemControls`` take effect.

    * For tasks that use the ``host`` network mode, the ``systemControls`` parameter
    applies to the container instance's kernel parameter as well as that of all
    containers of any tasks running on that container instance.

    - **namespace** *(string) --*

      The namespaced kernel parameter for which to set a ``value`` .

    - **value** *(string) --*

      The value for the namespaced kernel parameter specified in ``namespace`` .
    """


_ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionsulimitsTypeDef = TypedDict(
    "_ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionsulimitsTypeDef",
    {"name": str, "softLimit": int, "hardLimit": int},
    total=False,
)


class ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionsulimitsTypeDef(
    _ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionsulimitsTypeDef
):
    """
    Type definition for `ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitions` `ulimits`

    The ``ulimit`` settings to pass to the container.

    - **name** *(string) --*

      The ``type`` of the ``ulimit`` .

    - **softLimit** *(integer) --*

      The soft limit for the ulimit type.

    - **hardLimit** *(integer) --*

      The hard limit for the ulimit type.
    """


_ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionsvolumesFromTypeDef = TypedDict(
    "_ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionsvolumesFromTypeDef",
    {"sourceContainer": str, "readOnly": bool},
    total=False,
)


class ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionsvolumesFromTypeDef(
    _ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionsvolumesFromTypeDef
):
    """
    Type definition for `ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitions` `volumesFrom`

    Details on a data volume from another container in the same task definition.

    - **sourceContainer** *(string) --*

      The name of another container within the same task definition from which to mount
      volumes.

    - **readOnly** *(boolean) --*

      If this value is ``true`` , the container has read-only access to the volume. If
      this value is ``false`` , then the container can write to the volume. The default
      value is ``false`` .
    """


_ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionsTypeDef = TypedDict(
    "_ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionsTypeDef",
    {
        "name": str,
        "image": str,
        "repositoryCredentials": ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionsrepositoryCredentialsTypeDef,
        "cpu": int,
        "memory": int,
        "memoryReservation": int,
        "links": List[str],
        "portMappings": List[
            ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionsportMappingsTypeDef
        ],
        "essential": bool,
        "entryPoint": List[str],
        "command": List[str],
        "environment": List[
            ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionsenvironmentTypeDef
        ],
        "mountPoints": List[
            ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionsmountPointsTypeDef
        ],
        "volumesFrom": List[
            ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionsvolumesFromTypeDef
        ],
        "linuxParameters": ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParametersTypeDef,
        "secrets": List[
            ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionssecretsTypeDef
        ],
        "dependsOn": List[
            ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionsdependsOnTypeDef
        ],
        "startTimeout": int,
        "stopTimeout": int,
        "hostname": str,
        "user": str,
        "workingDirectory": str,
        "disableNetworking": bool,
        "privileged": bool,
        "readonlyRootFilesystem": bool,
        "dnsServers": List[str],
        "dnsSearchDomains": List[str],
        "extraHosts": List[
            ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionsextraHostsTypeDef
        ],
        "dockerSecurityOptions": List[str],
        "interactive": bool,
        "pseudoTerminal": bool,
        "dockerLabels": Dict[str, str],
        "ulimits": List[
            ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionsulimitsTypeDef
        ],
        "logConfiguration": ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionslogConfigurationTypeDef,
        "healthCheck": ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionshealthCheckTypeDef,
        "systemControls": List[
            ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionssystemControlsTypeDef
        ],
        "resourceRequirements": List[
            ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionsresourceRequirementsTypeDef
        ],
        "firelensConfiguration": ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionsfirelensConfigurationTypeDef,
    },
    total=False,
)


class ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionsTypeDef(
    _ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionsTypeDef
):
    """
    Type definition for `ClientDescribeTaskDefinitionResponsetaskDefinition` `containerDefinitions`

    Container definitions are used in task definitions to describe the different containers
    that are launched as part of a task.

    - **name** *(string) --*

      The name of a container. If you are linking multiple containers together in a task
      definition, the ``name`` of one container can be entered in the ``links`` of another
      container to connect the containers. Up to 255 letters (uppercase and lowercase),
      numbers, and hyphens are allowed. This parameter maps to ``name`` in the `Create a
      container <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__
      section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and
      the ``--name`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__
      .

    - **image** *(string) --*

      The image used to start a container. This string is passed directly to the Docker
      daemon. Images in the Docker Hub registry are available by default. Other repositories
      are specified with either `` *repository-url* /*image* :*tag* `` or `` *repository-url*
      /*image* @*digest* `` . Up to 255 letters (uppercase and lowercase), numbers, hyphens,
      underscores, colons, periods, forward slashes, and number signs are allowed. This
      parameter maps to ``Image`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``IMAGE``
      parameter of `docker run <https://docs.docker.com/engine/reference/run/>`__ .

      * When a new task starts, the Amazon ECS container agent pulls the latest version of
      the specified image and tag for the container to use. However, subsequent updates to a
      repository image are not propagated to already running tasks.

      * Images in Amazon ECR repositories can be specified by either using the full
      ``registry/repository:tag`` or ``registry/repository@digest`` . For example,
      ``012345678910.dkr.ecr.<region-name>.amazonaws.com/<repository-name>:latest`` or
      ``012345678910.dkr.ecr.<region-name>.amazonaws.com/<repository-name>@sha256:94afd1f2e64d908bc90dbca0035a5b567EXAMPLE``
      .

      * Images in official repositories on Docker Hub use a single name (for example,
      ``ubuntu`` or ``mongo`` ).

      * Images in other repositories on Docker Hub are qualified with an organization name
      (for example, ``amazon/amazon-ecs-agent`` ).

      * Images in other online repositories are qualified further by a domain name (for
      example, ``quay.io/assemblyline/ubuntu`` ).

    - **repositoryCredentials** *(dict) --*

      The private repository authentication credentials to use.

      - **credentialsParameter** *(string) --*

        The Amazon Resource Name (ARN) of the secret containing the private repository
        credentials.

        .. note::

          When you are using the Amazon ECS API, AWS CLI, or AWS SDK, if the secret exists in
          the same Region as the task that you are launching then you can use either the full
          ARN or the name of the secret. When you are using the AWS Management Console, you
          must specify the full ARN of the secret.

    - **cpu** *(integer) --*

      The number of ``cpu`` units reserved for the container. This parameter maps to
      ``CpuShares`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
      ``--cpu-shares`` option to `docker run
      <https://docs.docker.com/engine/reference/run/>`__ .

      This field is optional for tasks using the Fargate launch type, and the only
      requirement is that the total amount of CPU reserved for all containers within a task
      be lower than the task-level ``cpu`` value.

      .. note::

        You can determine the number of CPU units that are available per EC2 instance type by
        multiplying the vCPUs listed for that instance type on the `Amazon EC2 Instances
        <http://aws.amazon.com/ec2/instance-types/>`__ detail page by 1,024.

      For example, if you run a single-container task on a single-core instance type with 512
      CPU units specified for that container, and that is the only task running on the
      container instance, that container could use the full 1,024 CPU unit share at any given
      time. However, if you launched another copy of the same task on that container
      instance, each task would be guaranteed a minimum of 512 CPU units when needed, and
      each container could float to higher CPU usage if the other container was not using it,
      but if both tasks were 100% active all of the time, they would be limited to 512 CPU
      units.

      Linux containers share unallocated CPU units with other containers on the container
      instance with the same ratio as their allocated amount. For example, if you run a
      single-container task on a single-core instance type with 512 CPU units specified for
      that container, and that is the only task running on the container instance, that
      container could use the full 1,024 CPU unit share at any given time. However, if you
      launched another copy of the same task on that container instance, each task would be
      guaranteed a minimum of 512 CPU units when needed, and each container could float to
      higher CPU usage if the other container was not using it, but if both tasks were 100%
      active all of the time, they would be limited to 512 CPU units.

      On Linux container instances, the Docker daemon on the container instance uses the CPU
      value to calculate the relative CPU share ratios for running containers. For more
      information, see `CPU share constraint
      <https://docs.docker.com/engine/reference/run/#cpu-share-constraint>`__ in the Docker
      documentation. The minimum valid CPU share value that the Linux kernel allows is 2.
      However, the CPU parameter is not required, and you can use CPU values below 2 in your
      container definitions. For CPU values below 2 (including null), the behavior varies
      based on your Amazon ECS container agent version:

      * **Agent versions less than or equal to 1.1.0:** Null and zero CPU values are passed
      to Docker as 0, which Docker then converts to 1,024 CPU shares. CPU values of 1 are
      passed to Docker as 1, which the Linux kernel converts to two CPU shares.

      * **Agent versions greater than or equal to 1.2.0:** Null, zero, and CPU values of 1
      are passed to Docker as 2.

      On Windows container instances, the CPU limit is enforced as an absolute limit, or a
      quota. Windows containers only have access to the specified amount of CPU that is
      described in the task definition.

    - **memory** *(integer) --*

      The amount (in MiB) of memory to present to the container. If your container attempts
      to exceed the memory specified here, the container is killed. The total amount of
      memory reserved for all containers within a task must be lower than the task ``memory``
      value, if one is specified. This parameter maps to ``Memory`` in the `Create a
      container <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__
      section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and
      the ``--memory`` option to `docker run
      <https://docs.docker.com/engine/reference/run/>`__ .

      If using the Fargate launch type, this parameter is optional.

      If using the EC2 launch type, you must specify either a task-level memory value or a
      container-level memory value. If you specify both a container-level ``memory`` and
      ``memoryReservation`` value, ``memory`` must be greater than ``memoryReservation`` . If
      you specify ``memoryReservation`` , then that value is subtracted from the available
      memory resources for the container instance on which the container is placed.
      Otherwise, the value of ``memory`` is used.

      The Docker daemon reserves a minimum of 4 MiB of memory for a container, so you should
      not specify fewer than 4 MiB of memory for your containers.

    - **memoryReservation** *(integer) --*

      The soft limit (in MiB) of memory to reserve for the container. When system memory is
      under heavy contention, Docker attempts to keep the container memory to this soft
      limit. However, your container can consume more memory when it needs to, up to either
      the hard limit specified with the ``memory`` parameter (if applicable), or all of the
      available memory on the container instance, whichever comes first. This parameter maps
      to ``MemoryReservation`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
      ``--memory-reservation`` option to `docker run
      <https://docs.docker.com/engine/reference/run/>`__ .

      If a task-level memory value is not specified, you must specify a non-zero integer for
      one or both of ``memory`` or ``memoryReservation`` in a container definition. If you
      specify both, ``memory`` must be greater than ``memoryReservation`` . If you specify
      ``memoryReservation`` , then that value is subtracted from the available memory
      resources for the container instance on which the container is placed. Otherwise, the
      value of ``memory`` is used.

      For example, if your container normally uses 128 MiB of memory, but occasionally bursts
      to 256 MiB of memory for short periods of time, you can set a ``memoryReservation`` of
      128 MiB, and a ``memory`` hard limit of 300 MiB. This configuration would allow the
      container to only reserve 128 MiB of memory from the remaining resources on the
      container instance, but also allow the container to consume more memory resources when
      needed.

      The Docker daemon reserves a minimum of 4 MiB of memory for a container, so you should
      not specify fewer than 4 MiB of memory for your containers.

    - **links** *(list) --*

      The ``links`` parameter allows containers to communicate with each other without the
      need for port mappings. This parameter is only supported if the network mode of a task
      definition is ``bridge`` . The ``name:internalName`` construct is analogous to
      ``name:alias`` in Docker links. Up to 255 letters (uppercase and lowercase), numbers,
      and hyphens are allowed. For more information about linking Docker containers, go to
      `Legacy container links <https://docs.docker.com/network/links/>`__ in the Docker
      documentation. This parameter maps to ``Links`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--link``
      option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

      .. note::

        This parameter is not supported for Windows containers.

      .. warning::

        Containers that are collocated on a single container instance may be able to
        communicate with each other without requiring links or host port mappings. Network
        isolation is achieved on the container instance using security groups and VPC
        settings.

      - *(string) --*

    - **portMappings** *(list) --*

      The list of port mappings for the container. Port mappings allow containers to access
      ports on the host container instance to send or receive traffic.

      For task definitions that use the ``awsvpc`` network mode, you should only specify the
      ``containerPort`` . The ``hostPort`` can be left blank or it must be the same value as
      the ``containerPort`` .

      Port mappings on Windows use the ``NetNAT`` gateway address rather than ``localhost`` .
      There is no loopback for port mappings on Windows, so you cannot access a container's
      mapped port from the host itself.

      This parameter maps to ``PortBindings`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--publish``
      option to `docker run <https://docs.docker.com/engine/reference/run/>`__ . If the
      network mode of a task definition is set to ``none`` , then you can't specify port
      mappings. If the network mode of a task definition is set to ``host`` , then host ports
      must either be undefined or they must match the container port in the port mapping.

      .. note::

        After a task reaches the ``RUNNING`` status, manual and automatic host and container
        port assignments are visible in the **Network Bindings** section of a container
        description for a selected task in the Amazon ECS console. The assignments are also
        visible in the ``networkBindings`` section  DescribeTasks responses.

      - *(dict) --*

        Port mappings allow containers to access ports on the host container instance to send
        or receive traffic. Port mappings are specified as part of the container definition.

        If you are using containers in a task with the ``awsvpc`` or ``host`` network mode,
        exposed ports should be specified using ``containerPort`` . The ``hostPort`` can be
        left blank or it must be the same value as the ``containerPort`` .

        After a task reaches the ``RUNNING`` status, manual and automatic host and container
        port assignments are visible in the ``networkBindings`` section of  DescribeTasks API
        responses.

        - **containerPort** *(integer) --*

          The port number on the container that is bound to the user-specified or
          automatically assigned host port.

          If you are using containers in a task with the ``awsvpc`` or ``host`` network mode,
          exposed ports should be specified using ``containerPort`` .

          If you are using containers in a task with the ``bridge`` network mode and you
          specify a container port and not a host port, your container automatically receives
          a host port in the ephemeral port range. For more information, see ``hostPort`` .
          Port mappings that are automatically assigned in this way do not count toward the
          100 reserved ports limit of a container instance.

          .. warning::

            You cannot expose the same container port for multiple protocols. An error will
            be returned if this is attempted.

        - **hostPort** *(integer) --*

          The port number on the container instance to reserve for your container.

          If you are using containers in a task with the ``awsvpc`` or ``host`` network mode,
          the ``hostPort`` can either be left blank or set to the same value as the
          ``containerPort`` .

          If you are using containers in a task with the ``bridge`` network mode, you can
          specify a non-reserved host port for your container port mapping, or you can omit
          the ``hostPort`` (or set it to ``0`` ) while specifying a ``containerPort`` and
          your container automatically receives a port in the ephemeral port range for your
          container instance operating system and Docker version.

          The default ephemeral port range for Docker version 1.6.0 and later is listed on
          the instance under ``/proc/sys/net/ipv4/ip_local_port_range`` . If this kernel
          parameter is unavailable, the default ephemeral port range from 49153 through 65535
          is used. Do not attempt to specify a host port in the ephemeral port range as these
          are reserved for automatic assignment. In general, ports below 32768 are outside of
          the ephemeral port range.

          .. note::

            The default ephemeral port range from 49153 through 65535 is always used for
            Docker versions before 1.6.0.

          The default reserved ports are 22 for SSH, the Docker ports 2375 and 2376, and the
          Amazon ECS container agent ports 51678-51680. Any host port that was previously
          specified in a running task is also reserved while the task is running (after a
          task stops, the host port is released). The current reserved ports are displayed in
          the ``remainingResources`` of  DescribeContainerInstances output. A container
          instance can have up to 100 reserved ports at a time, including the default
          reserved ports. Automatically assigned ports don't count toward the 100 reserved
          ports limit.

        - **protocol** *(string) --*

          The protocol used for the port mapping. Valid values are ``tcp`` and ``udp`` . The
          default is ``tcp`` .

    - **essential** *(boolean) --*

      If the ``essential`` parameter of a container is marked as ``true`` , and that
      container fails or stops for any reason, all other containers that are part of the task
      are stopped. If the ``essential`` parameter of a container is marked as ``false`` ,
      then its failure does not affect the rest of the containers in a task. If this
      parameter is omitted, a container is assumed to be essential.

      All tasks must have at least one essential container. If you have an application that
      is composed of multiple containers, you should group containers that are used for a
      common purpose into components, and separate the different components into multiple
      task definitions. For more information, see `Application Architecture
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/application_architecture.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

    - **entryPoint** *(list) --*

      .. warning::

        Early versions of the Amazon ECS container agent do not properly handle
        ``entryPoint`` parameters. If you have problems using ``entryPoint`` , update your
        container agent or enter your commands and arguments as ``command`` array items
        instead.

      The entry point that is passed to the container. This parameter maps to ``Entrypoint``
      in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
      ``--entrypoint`` option to `docker run
      <https://docs.docker.com/engine/reference/run/>`__ . For more information, see
      `https\\://docs.docker.com/engine/reference/builder/#entrypoint
      <https://docs.docker.com/engine/reference/builder/#entrypoint>`__ .

      - *(string) --*

    - **command** *(list) --*

      The command that is passed to the container. This parameter maps to ``Cmd`` in the
      `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``COMMAND``
      parameter to `docker run <https://docs.docker.com/engine/reference/run/>`__ . For more
      information, see `https\\://docs.docker.com/engine/reference/builder/#cmd
      <https://docs.docker.com/engine/reference/builder/#cmd>`__ . If there are multiple
      arguments, each argument should be a separated string in the array.

      - *(string) --*

    - **environment** *(list) --*

      The environment variables to pass to a container. This parameter maps to ``Env`` in the
      `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--env``
      option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

      .. warning::

        We do not recommend using plaintext environment variables for sensitive information,
        such as credential data.

      - *(dict) --*

        A key-value pair object.

        - **name** *(string) --*

          The name of the key-value pair. For environment variables, this is the name of the
          environment variable.

        - **value** *(string) --*

          The value of the key-value pair. For environment variables, this is the value of
          the environment variable.

    - **mountPoints** *(list) --*

      The mount points for data volumes in your container.

      This parameter maps to ``Volumes`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--volume``
      option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

      Windows containers can mount whole directories on the same drive as
      ``$env:ProgramData`` . Windows containers cannot mount directories on a different
      drive, and mount point cannot be across drives.

      - *(dict) --*

        Details on a volume mount point that is used in a container definition.

        - **sourceVolume** *(string) --*

          The name of the volume to mount. Must be a volume name referenced in the ``name``
          parameter of task definition ``volume`` .

        - **containerPath** *(string) --*

          The path on the container to mount the host volume at.

        - **readOnly** *(boolean) --*

          If this value is ``true`` , the container has read-only access to the volume. If
          this value is ``false`` , then the container can write to the volume. The default
          value is ``false`` .

    - **volumesFrom** *(list) --*

      Data volumes to mount from another container. This parameter maps to ``VolumesFrom`` in
      the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
      ``--volumes-from`` option to `docker run
      <https://docs.docker.com/engine/reference/run/>`__ .

      - *(dict) --*

        Details on a data volume from another container in the same task definition.

        - **sourceContainer** *(string) --*

          The name of another container within the same task definition from which to mount
          volumes.

        - **readOnly** *(boolean) --*

          If this value is ``true`` , the container has read-only access to the volume. If
          this value is ``false`` , then the container can write to the volume. The default
          value is ``false`` .

    - **linuxParameters** *(dict) --*

      Linux-specific modifications that are applied to the container, such as Linux kernel
      capabilities. For more information see  KernelCapabilities .

      .. note::

        This parameter is not supported for Windows containers.

      - **capabilities** *(dict) --*

        The Linux capabilities for the container that are added to or dropped from the
        default configuration provided by Docker.

        .. note::

          If you are using tasks that use the Fargate launch type, ``capabilities`` is
          supported but the ``add`` parameter is not supported.

        - **add** *(list) --*

          The Linux capabilities for the container that have been added to the default
          configuration provided by Docker. This parameter maps to ``CapAdd`` in the `Create
          a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of
          the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
          ``--cap-add`` option to `docker run
          <https://docs.docker.com/engine/reference/run/>`__ .

          .. note::

            If you are using tasks that use the Fargate launch type, the ``add`` parameter is
            not supported.

          Valid values: ``"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" | "BLOCK_SUSPEND" | "CHOWN"
          | "DAC_OVERRIDE" | "DAC_READ_SEARCH" | "FOWNER" | "FSETID" | "IPC_LOCK" |
          "IPC_OWNER" | "KILL" | "LEASE" | "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" |
          "MKNOD" | "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" |
          "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT" |
          "SYS_CHROOT" | "SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" | "SYS_PTRACE" | "SYS_RAWIO"
          | "SYS_RESOURCE" | "SYS_TIME" | "SYS_TTY_CONFIG" | "SYSLOG" | "WAKE_ALARM"``

          - *(string) --*

        - **drop** *(list) --*

          The Linux capabilities for the container that have been removed from the default
          configuration provided by Docker. This parameter maps to ``CapDrop`` in the `Create
          a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of
          the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
          ``--cap-drop`` option to `docker run
          <https://docs.docker.com/engine/reference/run/>`__ .

          Valid values: ``"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" | "BLOCK_SUSPEND" | "CHOWN"
          | "DAC_OVERRIDE" | "DAC_READ_SEARCH" | "FOWNER" | "FSETID" | "IPC_LOCK" |
          "IPC_OWNER" | "KILL" | "LEASE" | "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" |
          "MKNOD" | "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" |
          "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT" |
          "SYS_CHROOT" | "SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" | "SYS_PTRACE" | "SYS_RAWIO"
          | "SYS_RESOURCE" | "SYS_TIME" | "SYS_TTY_CONFIG" | "SYSLOG" | "WAKE_ALARM"``

          - *(string) --*

      - **devices** *(list) --*

        Any host devices to expose to the container. This parameter maps to ``Devices`` in
        the `Create a container
        <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of
        the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
        ``--device`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__
        .

        .. note::

          If you are using tasks that use the Fargate launch type, the ``devices`` parameter
          is not supported.

        - *(dict) --*

          An object representing a container instance host device.

          - **hostPath** *(string) --*

            The path for the device on the host container instance.

          - **containerPath** *(string) --*

            The path inside the container at which to expose the host device.

          - **permissions** *(list) --*

            The explicit permissions to provide to the container for the device. By default,
            the container has permissions for ``read`` , ``write`` , and ``mknod`` for the
            device.

            - *(string) --*

      - **initProcessEnabled** *(boolean) --*

        Run an ``init`` process inside the container that forwards signals and reaps
        processes. This parameter maps to the ``--init`` option to `docker run
        <https://docs.docker.com/engine/reference/run/>`__ . This parameter requires version
        1.25 of the Docker Remote API or greater on your container instance. To check the
        Docker Remote API version on your container instance, log in to your container
        instance and run the following command: ``sudo docker version --format
        '{{.Server.APIVersion}}'``

      - **sharedMemorySize** *(integer) --*

        The value for the size (in MiB) of the ``/dev/shm`` volume. This parameter maps to
        the ``--shm-size`` option to `docker run
        <https://docs.docker.com/engine/reference/run/>`__ .

        .. note::

          If you are using tasks that use the Fargate launch type, the ``sharedMemorySize``
          parameter is not supported.

      - **tmpfs** *(list) --*

        The container path, mount options, and size (in MiB) of the tmpfs mount. This
        parameter maps to the ``--tmpfs`` option to `docker run
        <https://docs.docker.com/engine/reference/run/>`__ .

        .. note::

          If you are using tasks that use the Fargate launch type, the ``tmpfs`` parameter is
          not supported.

        - *(dict) --*

          The container path, mount options, and size of the tmpfs mount.

          - **containerPath** *(string) --*

            The absolute file path where the tmpfs volume is to be mounted.

          - **size** *(integer) --*

            The size (in MiB) of the tmpfs volume.

          - **mountOptions** *(list) --*

            The list of tmpfs volume mount options.

            Valid values: ``"defaults" | "ro" | "rw" | "suid" | "nosuid" | "dev" | "nodev" |
            "exec" | "noexec" | "sync" | "async" | "dirsync" | "remount" | "mand" | "nomand"
            | "atime" | "noatime" | "diratime" | "nodiratime" | "bind" | "rbind" |
            "unbindable" | "runbindable" | "private" | "rprivate" | "shared" | "rshared" |
            "slave" | "rslave" | "relatime" | "norelatime" | "strictatime" | "nostrictatime"
            | "mode" | "uid" | "gid" | "nr_inodes" | "nr_blocks" | "mpol"``

            - *(string) --*

      - **maxSwap** *(integer) --*

        The total amount of swap memory (in MiB) a container can use. This parameter will be
        translated to the ``--memory-swap`` option to `docker run
        <https://docs.docker.com/engine/reference/run/>`__ where the value would be the sum
        of the container memory plus the ``maxSwap`` value.

        If a ``maxSwap`` value of ``0`` is specified, the container will not use swap.
        Accepted values are ``0`` or any positive integer. If the ``maxSwap`` parameter is
        omitted, the container will use the swap configuration for the container instance it
        is running on. A ``maxSwap`` value must be set for the ``swappiness`` parameter to be
        used.

        .. note::

          If you are using tasks that use the Fargate launch type, the ``maxSwap`` parameter
          is not supported.

      - **swappiness** *(integer) --*

        This allows you to tune a container's memory swappiness behavior. A ``swappiness``
        value of ``0`` will cause swapping to not happen unless absolutely necessary. A
        ``swappiness`` value of ``100`` will cause pages to be swapped very aggressively.
        Accepted values are whole numbers between ``0`` and ``100`` . If the ``swappiness``
        parameter is not specified, a default value of ``60`` is used. If a value is not
        specified for ``maxSwap`` then this parameter is ignored. This parameter maps to the
        ``--memory-swappiness`` option to `docker run
        <https://docs.docker.com/engine/reference/run/>`__ .

        .. note::

          If you are using tasks that use the Fargate launch type, the ``swappiness``
          parameter is not supported.

    - **secrets** *(list) --*

      The secrets to pass to the container. For more information, see `Specifying Sensitive
      Data
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

      - *(dict) --*

        An object representing the secret to expose to your container. Secrets can be exposed
        to a container in the following ways:

        * To inject sensitive data into your containers as environment variables, use the
        ``secrets`` container definition parameter.

        * To reference sensitive information in the log configuration of a container, use the
        ``secretOptions`` container definition parameter.

        For more information, see `Specifying Sensitive Data
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html>`__
        in the *Amazon Elastic Container Service Developer Guide* .

        - **name** *(string) --*

          The name of the secret.

        - **valueFrom** *(string) --*

          The secret to expose to the container. The supported values are either the full ARN
          of the AWS Secrets Manager secret or the full ARN of the parameter in the AWS
          Systems Manager Parameter Store.

          .. note::

            If the AWS Systems Manager Parameter Store parameter exists in the same Region as
            the task you are launching, then you can use either the full ARN or name of the
            parameter. If the parameter exists in a different Region, then the full ARN must
            be specified.

    - **dependsOn** *(list) --*

      The dependencies defined for container startup and shutdown. A container can contain
      multiple dependencies. When a dependency is defined for container startup, for
      container shutdown it is reversed.

      For tasks using the EC2 launch type, the container instances require at least version
      1.26.0 of the container agent to enable container dependencies. However, we recommend
      using the latest container agent version. For information about checking your agent
      version and updating to the latest version, see `Updating the Amazon ECS Container
      Agent
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html>`__
      in the *Amazon Elastic Container Service Developer Guide* . If you are using an Amazon
      ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the
      ``ecs-init`` package. If your container instances are launched from version
      ``20190301`` or later, then they contain the required versions of the container agent
      and ``ecs-init`` . For more information, see `Amazon ECS-optimized Linux AMI
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

      For tasks using the Fargate launch type, the task or service requires platform version
      ``1.3.0`` or later.

      - *(dict) --*

        The dependencies defined for container startup and shutdown. A container can contain
        multiple dependencies. When a dependency is defined for container startup, for
        container shutdown it is reversed.

        Your Amazon ECS container instances require at least version 1.26.0 of the container
        agent to enable container dependencies. However, we recommend using the latest
        container agent version. For information about checking your agent version and
        updating to the latest version, see `Updating the Amazon ECS Container Agent
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html>`__
        in the *Amazon Elastic Container Service Developer Guide* . If you are using an
        Amazon ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the
        ``ecs-init`` package. If your container instances are launched from version
        ``20190301`` or later, then they contain the required versions of the container agent
        and ``ecs-init`` . For more information, see `Amazon ECS-optimized Linux AMI
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html>`__
        in the *Amazon Elastic Container Service Developer Guide* .

        .. note::

          If you are using tasks that use the Fargate launch type, container dependency
          parameters are not supported.

        - **containerName** *(string) --*

          The name of a container.

        - **condition** *(string) --*

          The dependency condition of the container. The following are the available
          conditions and their behavior:

          * ``START`` - This condition emulates the behavior of links and volumes today. It
          validates that a dependent container is started before permitting other containers
          to start.

          * ``COMPLETE`` - This condition validates that a dependent container runs to
          completion (exits) before permitting other containers to start. This can be useful
          for nonessential containers that run a script and then exit.

          * ``SUCCESS`` - This condition is the same as ``COMPLETE`` , but it also requires
          that the container exits with a ``zero`` status.

          * ``HEALTHY`` - This condition validates that the dependent container passes its
          Docker health check before permitting other containers to start. This requires that
          the dependent container has health checks configured. This condition is confirmed
          only at task startup.

    - **startTimeout** *(integer) --*

      Time duration (in seconds) to wait before giving up on resolving dependencies for a
      container. For example, you specify two containers in a task definition with containerA
      having a dependency on containerB reaching a ``COMPLETE`` , ``SUCCESS`` , or
      ``HEALTHY`` status. If a ``startTimeout`` value is specified for containerB and it does
      not reach the desired status within that time then containerA will give up and not
      start. This results in the task transitioning to a ``STOPPED`` state.

      For tasks using the EC2 launch type, the container instances require at least version
      1.26.0 of the container agent to enable a container start timeout value. However, we
      recommend using the latest container agent version. For information about checking your
      agent version and updating to the latest version, see `Updating the Amazon ECS
      Container Agent
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html>`__
      in the *Amazon Elastic Container Service Developer Guide* . If you are using an Amazon
      ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the
      ``ecs-init`` package. If your container instances are launched from version
      ``20190301`` or later, then they contain the required versions of the container agent
      and ``ecs-init`` . For more information, see `Amazon ECS-optimized Linux AMI
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

      For tasks using the Fargate launch type, the task or service requires platform version
      ``1.3.0`` or later.

    - **stopTimeout** *(integer) --*

      Time duration (in seconds) to wait before the container is forcefully killed if it
      doesn't exit normally on its own.

      For tasks using the Fargate launch type, the max ``stopTimeout`` value is 2 minutes and
      the task or service requires platform version ``1.3.0`` or later.

      For tasks using the EC2 launch type, the stop timeout value for the container takes
      precedence over the ``ECS_CONTAINER_STOP_TIMEOUT`` container agent configuration
      parameter, if used. Container instances require at least version 1.26.0 of the
      container agent to enable a container stop timeout value. However, we recommend using
      the latest container agent version. For information about checking your agent version
      and updating to the latest version, see `Updating the Amazon ECS Container Agent
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html>`__
      in the *Amazon Elastic Container Service Developer Guide* . If you are using an Amazon
      ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the
      ``ecs-init`` package. If your container instances are launched from version
      ``20190301`` or later, then they contain the required versions of the container agent
      and ``ecs-init`` . For more information, see `Amazon ECS-optimized Linux AMI
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

    - **hostname** *(string) --*

      The hostname to use for your container. This parameter maps to ``Hostname`` in the
      `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
      ``--hostname`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__
      .

      .. note::

        The ``hostname`` parameter is not supported if you are using the ``awsvpc`` network
        mode.

    - **user** *(string) --*

      The user name to use inside the container. This parameter maps to ``User`` in the
      `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--user``
      option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

      You can use the following formats. If specifying a UID or GID, you must specify it as a
      positive integer.

      * ``user``

      * ``user:group``

      * ``uid``

      * ``uid:gid``

      * ``user:gid``

      * ``uid:group``

      .. note::

        This parameter is not supported for Windows containers.

    - **workingDirectory** *(string) --*

      The working directory in which to run commands inside the container. This parameter
      maps to ``WorkingDir`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--workdir``
      option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

    - **disableNetworking** *(boolean) --*

      When this parameter is true, networking is disabled within the container. This
      parameter maps to ``NetworkDisabled`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ .

      .. note::

        This parameter is not supported for Windows containers.

    - **privileged** *(boolean) --*

      When this parameter is true, the container is given elevated privileges on the host
      container instance (similar to the ``root`` user). This parameter maps to
      ``Privileged`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
      ``--privileged`` option to `docker run
      <https://docs.docker.com/engine/reference/run/>`__ .

      .. note::

        This parameter is not supported for Windows containers or tasks using the Fargate
        launch type.

    - **readonlyRootFilesystem** *(boolean) --*

      When this parameter is true, the container is given read-only access to its root file
      system. This parameter maps to ``ReadonlyRootfs`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
      ``--read-only`` option to `docker run
      <https://docs.docker.com/engine/reference/run/>`__ .

      .. note::

        This parameter is not supported for Windows containers.

    - **dnsServers** *(list) --*

      A list of DNS servers that are presented to the container. This parameter maps to
      ``Dns`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--dns``
      option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

      .. note::

        This parameter is not supported for Windows containers.

      - *(string) --*

    - **dnsSearchDomains** *(list) --*

      A list of DNS search domains that are presented to the container. This parameter maps
      to ``DnsSearch`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
      ``--dns-search`` option to `docker run
      <https://docs.docker.com/engine/reference/run/>`__ .

      .. note::

        This parameter is not supported for Windows containers.

      - *(string) --*

    - **extraHosts** *(list) --*

      A list of hostnames and IP address mappings to append to the ``/etc/hosts`` file on the
      container. This parameter maps to ``ExtraHosts`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
      ``--add-host`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__
      .

      .. note::

        This parameter is not supported for Windows containers or tasks that use the
        ``awsvpc`` network mode.

      - *(dict) --*

        Hostnames and IP address entries that are added to the ``/etc/hosts`` file of a
        container via the ``extraHosts`` parameter of its  ContainerDefinition .

        - **hostname** *(string) --*

          The hostname to use in the ``/etc/hosts`` entry.

        - **ipAddress** *(string) --*

          The IP address to use in the ``/etc/hosts`` entry.

    - **dockerSecurityOptions** *(list) --*

      A list of strings to provide custom labels for SELinux and AppArmor multi-level
      security systems. This field is not valid for containers in tasks using the Fargate
      launch type.

      This parameter maps to ``SecurityOpt`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
      ``--security-opt`` option to `docker run
      <https://docs.docker.com/engine/reference/run/>`__ .

      .. note::

        The Amazon ECS container agent running on a container instance must register with the
        ``ECS_SELINUX_CAPABLE=true`` or ``ECS_APPARMOR_CAPABLE=true`` environment variables
        before containers placed on that instance can use these security options. For more
        information, see `Amazon ECS Container Agent Configuration
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html>`__
        in the *Amazon Elastic Container Service Developer Guide* .

      .. note::

        This parameter is not supported for Windows containers.

      - *(string) --*

    - **interactive** *(boolean) --*

      When this parameter is ``true`` , this allows you to deploy containerized applications
      that require ``stdin`` or a ``tty`` to be allocated. This parameter maps to
      ``OpenStdin`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
      ``--interactive`` option to `docker run
      <https://docs.docker.com/engine/reference/run/>`__ .

    - **pseudoTerminal** *(boolean) --*

      When this parameter is ``true`` , a TTY is allocated. This parameter maps to ``Tty`` in
      the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--tty``
      option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

    - **dockerLabels** *(dict) --*

      A key/value map of labels to add to the container. This parameter maps to ``Labels`` in
      the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--label``
      option to `docker run <https://docs.docker.com/engine/reference/run/>`__ . This
      parameter requires version 1.18 of the Docker Remote API or greater on your container
      instance. To check the Docker Remote API version on your container instance, log in to
      your container instance and run the following command: ``sudo docker version --format
      '{{.Server.APIVersion}}'``

      - *(string) --*

        - *(string) --*

    - **ulimits** *(list) --*

      A list of ``ulimits`` to set in the container. This parameter maps to ``Ulimits`` in
      the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--ulimit``
      option to `docker run <https://docs.docker.com/engine/reference/run/>`__ . Valid naming
      values are displayed in the  Ulimit data type. This parameter requires version 1.18 of
      the Docker Remote API or greater on your container instance. To check the Docker Remote
      API version on your container instance, log in to your container instance and run the
      following command: ``sudo docker version --format '{{.Server.APIVersion}}'``

      .. note::

        This parameter is not supported for Windows containers.

      - *(dict) --*

        The ``ulimit`` settings to pass to the container.

        - **name** *(string) --*

          The ``type`` of the ``ulimit`` .

        - **softLimit** *(integer) --*

          The soft limit for the ulimit type.

        - **hardLimit** *(integer) --*

          The hard limit for the ulimit type.

    - **logConfiguration** *(dict) --*

      The log configuration specification for the container.

      This parameter maps to ``LogConfig`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
      ``--log-driver`` option to `docker run
      <https://docs.docker.com/engine/reference/run/>`__ . By default, containers use the
      same logging driver that the Docker daemon uses. However the container may use a
      different logging driver than the Docker daemon by specifying a log driver with this
      parameter in the container definition. To use a different logging driver for a
      container, the log system must be configured properly on the container instance (or on
      a different log server for remote logging options). For more information on the options
      for different supported log drivers, see `Configure logging drivers
      <https://docs.docker.com/engine/admin/logging/overview/>`__ in the Docker documentation.

      .. note::

        Amazon ECS currently supports a subset of the logging drivers available to the Docker
        daemon (shown in the  LogConfiguration data type). Additional log drivers may be
        available in future releases of the Amazon ECS container agent.

      This parameter requires version 1.18 of the Docker Remote API or greater on your
      container instance. To check the Docker Remote API version on your container instance,
      log in to your container instance and run the following command: ``sudo docker version
      --format '{{.Server.APIVersion}}'``

      .. note::

        The Amazon ECS container agent running on a container instance must register the
        logging drivers available on that instance with the ``ECS_AVAILABLE_LOGGING_DRIVERS``
        environment variable before containers placed on that instance can use these log
        configuration options. For more information, see `Amazon ECS Container Agent
        Configuration
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html>`__
        in the *Amazon Elastic Container Service Developer Guide* .

      - **logDriver** *(string) --*

        The log driver to use for the container. The valid values listed for this parameter
        are log drivers that the Amazon ECS container agent can communicate with by default.

        For tasks using the Fargate launch type, the supported log drivers are ``awslogs``
        and ``splunk`` .

        For tasks using the EC2 launch type, the supported log drivers are ``awslogs`` ,
        ``fluentd`` , ``gelf`` , ``json-file`` , ``journald`` , ``logentries`` , ``syslog`` ,
        and ``splunk`` .

        For more information about using the ``awslogs`` log driver, see `Using the awslogs
        Log Driver
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_awslogs.html>`__
        in the *Amazon Elastic Container Service Developer Guide* .

        .. note::

          If you have a custom driver that is not listed above that you would like to work
          with the Amazon ECS container agent, you can fork the Amazon ECS container agent
          project that is `available on GitHub <https://github.com/aws/amazon-ecs-agent>`__
          and customize it to work with that driver. We encourage you to submit pull requests
          for changes that you would like to have included. However, Amazon Web Services does
          not currently support running modified copies of this software.

        This parameter requires version 1.18 of the Docker Remote API or greater on your
        container instance. To check the Docker Remote API version on your container
        instance, log in to your container instance and run the following command: ``sudo
        docker version --format '{{.Server.APIVersion}}'``

      - **options** *(dict) --*

        The configuration options to send to the log driver. This parameter requires version
        1.19 of the Docker Remote API or greater on your container instance. To check the
        Docker Remote API version on your container instance, log in to your container
        instance and run the following command: ``sudo docker version --format
        '{{.Server.APIVersion}}'``

        - *(string) --*

          - *(string) --*

      - **secretOptions** *(list) --*

        The secrets to pass to the log configuration. For more information, see `Specifying
        Sensitive Data
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html>`__
        in the *Amazon Elastic Container Service Developer Guide* .

        - *(dict) --*

          An object representing the secret to expose to your container. Secrets can be
          exposed to a container in the following ways:

          * To inject sensitive data into your containers as environment variables, use the
          ``secrets`` container definition parameter.

          * To reference sensitive information in the log configuration of a container, use
          the ``secretOptions`` container definition parameter.

          For more information, see `Specifying Sensitive Data
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

          - **name** *(string) --*

            The name of the secret.

          - **valueFrom** *(string) --*

            The secret to expose to the container. The supported values are either the full
            ARN of the AWS Secrets Manager secret or the full ARN of the parameter in the AWS
            Systems Manager Parameter Store.

            .. note::

              If the AWS Systems Manager Parameter Store parameter exists in the same Region
              as the task you are launching, then you can use either the full ARN or name of
              the parameter. If the parameter exists in a different Region, then the full ARN
              must be specified.

    - **healthCheck** *(dict) --*

      The health check command and associated configuration parameters for the container.
      This parameter maps to ``HealthCheck`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
      ``HEALTHCHECK`` parameter of `docker run
      <https://docs.docker.com/engine/reference/run/>`__ .

      - **command** *(list) --*

        A string array representing the command that the container runs to determine if it is
        healthy. The string array must start with ``CMD`` to execute the command arguments
        directly, or ``CMD-SHELL`` to run the command with the container's default shell. For
        example:

         ``[ "CMD-SHELL", "curl -f http://localhost/ || exit 1" ]``

        An exit code of 0 indicates success, and non-zero exit code indicates failure. For
        more information, see ``HealthCheck`` in the `Create a container
        <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of
        the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ .

        - *(string) --*

      - **interval** *(integer) --*

        The time period in seconds between each health check execution. You may specify
        between 5 and 300 seconds. The default value is 30 seconds.

      - **timeout** *(integer) --*

        The time period in seconds to wait for a health check to succeed before it is
        considered a failure. You may specify between 2 and 60 seconds. The default value is
        5.

      - **retries** *(integer) --*

        The number of times to retry a failed health check before the container is considered
        unhealthy. You may specify between 1 and 10 retries. The default value is 3.

      - **startPeriod** *(integer) --*

        The optional grace period within which to provide containers time to bootstrap before
        failed health checks count towards the maximum number of retries. You may specify
        between 0 and 300 seconds. The ``startPeriod`` is disabled by default.

        .. note::

          If a health check succeeds within the ``startPeriod`` , then the container is
          considered healthy and any subsequent failures count toward the maximum number of
          retries.

    - **systemControls** *(list) --*

      A list of namespaced kernel parameters to set in the container. This parameter maps to
      ``Sysctls`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--sysctl``
      option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

      .. note::

        It is not recommended that you specify network-related ``systemControls`` parameters
        for multiple containers in a single task that also uses either the ``awsvpc`` or
        ``host`` network modes. For tasks that use the ``awsvpc`` network mode, the container
        that is started last determines which ``systemControls`` parameters take effect. For
        tasks that use the ``host`` network mode, it changes the container instance's
        namespaced kernel parameters as well as the containers.

      - *(dict) --*

        A list of namespaced kernel parameters to set in the container. This parameter maps
        to ``Sysctls`` in the `Create a container
        <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of
        the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
        ``--sysctl`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__
        .

        It is not recommended that you specify network-related ``systemControls`` parameters
        for multiple containers in a single task that also uses either the ``awsvpc`` or
        ``host`` network mode for the following reasons:

        * For tasks that use the ``awsvpc`` network mode, if you set ``systemControls`` for
        any container, it applies to all containers in the task. If you set different
        ``systemControls`` for multiple containers in a single task, the container that is
        started last determines which ``systemControls`` take effect.

        * For tasks that use the ``host`` network mode, the ``systemControls`` parameter
        applies to the container instance's kernel parameter as well as that of all
        containers of any tasks running on that container instance.

        - **namespace** *(string) --*

          The namespaced kernel parameter for which to set a ``value`` .

        - **value** *(string) --*

          The value for the namespaced kernel parameter specified in ``namespace`` .

    - **resourceRequirements** *(list) --*

      The type and amount of a resource to assign to a container. The only supported resource
      is a GPU.

      - *(dict) --*

        The type and amount of a resource to assign to a container. The supported resource
        types are GPUs and Elastic Inference accelerators. For more information, see `Working
        with GPUs on Amazon ECS
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-gpu.html>`__ or
        `Working with Amazon Elastic Inference on Amazon ECS
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in the
        *Amazon Elastic Container Service Developer Guide*

        - **value** *(string) --*

          The value for the specified resource type.

          If the ``GPU`` type is used, the value is the number of physical ``GPUs`` the
          Amazon ECS container agent will reserve for the container. The number of GPUs
          reserved for all containers in a task should not exceed the number of available
          GPUs on the container instance the task is launched on.

          If the ``InferenceAccelerator`` type is used, the ``value`` should match the
          ``deviceName`` for an  InferenceAccelerator specified in a task definition.

        - **type** *(string) --*

          The type of resource to assign to a container. The supported values are ``GPU`` or
          ``InferenceAccelerator`` .

    - **firelensConfiguration** *(dict) --*

      The FireLens configuration for the container. This is used to specify and configure a
      log router for container logs. For more information, see `Custom Log Routing
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html>`__ in
      the *Amazon Elastic Container Service Developer Guide* .

      - **type** *(string) --*

        The log router to use. The valid values are ``fluentd`` or ``fluentbit`` .

      - **options** *(dict) --*

        The options to use when configuring the log router. This field is optional and can be
        used to add additional metadata, such as the task, task definition, cluster, and
        container instance details to the log event. If specified, the syntax to use is
        ``"options":{"enable-ecs-log-metadata":"true|false"}`` .

        - *(string) --*

          - *(string) --*
    """


_ClientDescribeTaskDefinitionResponsetaskDefinitioninferenceAcceleratorsTypeDef = TypedDict(
    "_ClientDescribeTaskDefinitionResponsetaskDefinitioninferenceAcceleratorsTypeDef",
    {"deviceName": str, "deviceType": str},
    total=False,
)


class ClientDescribeTaskDefinitionResponsetaskDefinitioninferenceAcceleratorsTypeDef(
    _ClientDescribeTaskDefinitionResponsetaskDefinitioninferenceAcceleratorsTypeDef
):
    """
    Type definition for `ClientDescribeTaskDefinitionResponsetaskDefinition` `inferenceAccelerators`

    Details on a Elastic Inference accelerator. For more information, see `Working with
    Amazon Elastic Inference on Amazon ECS
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in the
    *Amazon Elastic Container Service Developer Guide* .

    - **deviceName** *(string) --*

      The Elastic Inference accelerator device name. The ``deviceName`` must also be
      referenced in a container definition as a  ResourceRequirement .

    - **deviceType** *(string) --*

      The Elastic Inference accelerator type to use.
    """


_ClientDescribeTaskDefinitionResponsetaskDefinitionplacementConstraintsTypeDef = TypedDict(
    "_ClientDescribeTaskDefinitionResponsetaskDefinitionplacementConstraintsTypeDef",
    {"type": str, "expression": str},
    total=False,
)


class ClientDescribeTaskDefinitionResponsetaskDefinitionplacementConstraintsTypeDef(
    _ClientDescribeTaskDefinitionResponsetaskDefinitionplacementConstraintsTypeDef
):
    """
    Type definition for `ClientDescribeTaskDefinitionResponsetaskDefinition` `placementConstraints`

    An object representing a constraint on task placement in the task definition. For more
    information, see `Task Placement Constraints
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html>`__
    in the *Amazon Elastic Container Service Developer Guide* .

    .. note::

      If you are using the Fargate launch type, task placement constraints are not supported.

    - **type** *(string) --*

      The type of constraint. The ``MemberOf`` constraint restricts selection to be from a
      group of valid candidates.

    - **expression** *(string) --*

      A cluster query language expression to apply to the constraint. For more information,
      see `Cluster Query Language
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .
    """


_ClientDescribeTaskDefinitionResponsetaskDefinitionproxyConfigurationpropertiesTypeDef = TypedDict(
    "_ClientDescribeTaskDefinitionResponsetaskDefinitionproxyConfigurationpropertiesTypeDef",
    {"name": str, "value": str},
    total=False,
)


class ClientDescribeTaskDefinitionResponsetaskDefinitionproxyConfigurationpropertiesTypeDef(
    _ClientDescribeTaskDefinitionResponsetaskDefinitionproxyConfigurationpropertiesTypeDef
):
    """
    Type definition for `ClientDescribeTaskDefinitionResponsetaskDefinitionproxyConfiguration` `properties`

    A key-value pair object.

    - **name** *(string) --*

      The name of the key-value pair. For environment variables, this is the name of the
      environment variable.

    - **value** *(string) --*

      The value of the key-value pair. For environment variables, this is the value of the
      environment variable.
    """


_ClientDescribeTaskDefinitionResponsetaskDefinitionproxyConfigurationTypeDef = TypedDict(
    "_ClientDescribeTaskDefinitionResponsetaskDefinitionproxyConfigurationTypeDef",
    {
        "type": str,
        "containerName": str,
        "properties": List[
            ClientDescribeTaskDefinitionResponsetaskDefinitionproxyConfigurationpropertiesTypeDef
        ],
    },
    total=False,
)


class ClientDescribeTaskDefinitionResponsetaskDefinitionproxyConfigurationTypeDef(
    _ClientDescribeTaskDefinitionResponsetaskDefinitionproxyConfigurationTypeDef
):
    """
    Type definition for `ClientDescribeTaskDefinitionResponsetaskDefinition` `proxyConfiguration`

    The configuration details for the App Mesh proxy.

    Your Amazon ECS container instances require at least version 1.26.0 of the container agent
    and at least version 1.26.0-1 of the ``ecs-init`` package to enable a proxy configuration.
    If your container instances are launched from the Amazon ECS-optimized AMI version
    ``20190301`` or later, then they contain the required versions of the container agent and
    ``ecs-init`` . For more information, see `Amazon ECS-optimized Linux AMI
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html>`__ in
    the *Amazon Elastic Container Service Developer Guide* .

    - **type** *(string) --*

      The proxy type. The only supported value is ``APPMESH`` .

    - **containerName** *(string) --*

      The name of the container that will serve as the App Mesh proxy.

    - **properties** *(list) --*

      The set of network configuration parameters to provide the Container Network Interface
      (CNI) plugin, specified as key-value pairs.

      * ``IgnoredUID`` - (Required) The user ID (UID) of the proxy container as defined by the
      ``user`` parameter in a container definition. This is used to ensure the proxy ignores
      its own traffic. If ``IgnoredGID`` is specified, this field can be empty.

      * ``IgnoredGID`` - (Required) The group ID (GID) of the proxy container as defined by the
      ``user`` parameter in a container definition. This is used to ensure the proxy ignores
      its own traffic. If ``IgnoredUID`` is specified, this field can be empty.

      * ``AppPorts`` - (Required) The list of ports that the application uses. Network traffic
      to these ports is forwarded to the ``ProxyIngressPort`` and ``ProxyEgressPort`` .

      * ``ProxyIngressPort`` - (Required) Specifies the port that incoming traffic to the
      ``AppPorts`` is directed to.

      * ``ProxyEgressPort`` - (Required) Specifies the port that outgoing traffic from the
      ``AppPorts`` is directed to.

      * ``EgressIgnoredPorts`` - (Required) The egress traffic going to the specified ports is
      ignored and not redirected to the ``ProxyEgressPort`` . It can be an empty list.

      * ``EgressIgnoredIPs`` - (Required) The egress traffic going to the specified IP
      addresses is ignored and not redirected to the ``ProxyEgressPort`` . It can be an empty
      list.

      - *(dict) --*

        A key-value pair object.

        - **name** *(string) --*

          The name of the key-value pair. For environment variables, this is the name of the
          environment variable.

        - **value** *(string) --*

          The value of the key-value pair. For environment variables, this is the value of the
          environment variable.
    """


_ClientDescribeTaskDefinitionResponsetaskDefinitionrequiresAttributesTypeDef = TypedDict(
    "_ClientDescribeTaskDefinitionResponsetaskDefinitionrequiresAttributesTypeDef",
    {"name": str, "value": str, "targetType": str, "targetId": str},
    total=False,
)


class ClientDescribeTaskDefinitionResponsetaskDefinitionrequiresAttributesTypeDef(
    _ClientDescribeTaskDefinitionResponsetaskDefinitionrequiresAttributesTypeDef
):
    """
    Type definition for `ClientDescribeTaskDefinitionResponsetaskDefinition` `requiresAttributes`

    An attribute is a name-value pair associated with an Amazon ECS object. Attributes enable
    you to extend the Amazon ECS data model by adding custom metadata to your resources. For
    more information, see `Attributes
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html#attributes>`__
    in the *Amazon Elastic Container Service Developer Guide* .

    - **name** *(string) --*

      The name of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
      hyphens, underscores, and periods are allowed.

    - **value** *(string) --*

      The value of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
      hyphens, underscores, periods, at signs (@), forward slashes, colons, and spaces are
      allowed.

    - **targetType** *(string) --*

      The type of the target with which to attach the attribute. This parameter is required
      if you use the short form ID for a resource instead of the full ARN.

    - **targetId** *(string) --*

      The ID of the target. You can specify the short form ID for a resource or the full
      Amazon Resource Name (ARN).
    """


_ClientDescribeTaskDefinitionResponsetaskDefinitionvolumesdockerVolumeConfigurationTypeDef = TypedDict(
    "_ClientDescribeTaskDefinitionResponsetaskDefinitionvolumesdockerVolumeConfigurationTypeDef",
    {
        "scope": str,
        "autoprovision": bool,
        "driver": str,
        "driverOpts": Dict[str, str],
        "labels": Dict[str, str],
    },
    total=False,
)


class ClientDescribeTaskDefinitionResponsetaskDefinitionvolumesdockerVolumeConfigurationTypeDef(
    _ClientDescribeTaskDefinitionResponsetaskDefinitionvolumesdockerVolumeConfigurationTypeDef
):
    """
    Type definition for `ClientDescribeTaskDefinitionResponsetaskDefinitionvolumes` `dockerVolumeConfiguration`

    This parameter is specified when you are using Docker volumes. Docker volumes are only
    supported when you are using the EC2 launch type. Windows containers only support the
    use of the ``local`` driver. To use bind mounts, specify a ``host`` instead.

    - **scope** *(string) --*

      The scope for the Docker volume that determines its lifecycle. Docker volumes that
      are scoped to a ``task`` are automatically provisioned when the task starts and
      destroyed when the task stops. Docker volumes that are scoped as ``shared`` persist
      after the task stops.

    - **autoprovision** *(boolean) --*

      If this value is ``true`` , the Docker volume is created if it does not already exist.

      .. note::

        This field is only used if the ``scope`` is ``shared`` .

    - **driver** *(string) --*

      The Docker volume driver to use. The driver value must match the driver name provided
      by Docker because it is used for task placement. If the driver was installed using
      the Docker plugin CLI, use ``docker plugin ls`` to retrieve the driver name from your
      container instance. If the driver was installed using another method, use Docker
      plugin discovery to retrieve the driver name. For more information, see `Docker
      plugin discovery
      <https://docs.docker.com/engine/extend/plugin_api/#plugin-discovery>`__ . This
      parameter maps to ``Driver`` in the `Create a volume
      <https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
      ``xxdriver`` option to `docker volume create
      <https://docs.docker.com/engine/reference/commandline/volume_create/>`__ .

    - **driverOpts** *(dict) --*

      A map of Docker driver-specific options passed through. This parameter maps to
      ``DriverOpts`` in the `Create a volume
      <https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``xxopt``
      option to `docker volume create
      <https://docs.docker.com/engine/reference/commandline/volume_create/>`__ .

      - *(string) --*

        - *(string) --*

    - **labels** *(dict) --*

      Custom metadata to add to your Docker volume. This parameter maps to ``Labels`` in
      the `Create a volume
      <https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``xxlabel``
      option to `docker volume create
      <https://docs.docker.com/engine/reference/commandline/volume_create/>`__ .

      - *(string) --*

        - *(string) --*
    """


_ClientDescribeTaskDefinitionResponsetaskDefinitionvolumeshostTypeDef = TypedDict(
    "_ClientDescribeTaskDefinitionResponsetaskDefinitionvolumeshostTypeDef",
    {"sourcePath": str},
    total=False,
)


class ClientDescribeTaskDefinitionResponsetaskDefinitionvolumeshostTypeDef(
    _ClientDescribeTaskDefinitionResponsetaskDefinitionvolumeshostTypeDef
):
    """
    Type definition for `ClientDescribeTaskDefinitionResponsetaskDefinitionvolumes` `host`

    This parameter is specified when you are using bind mount host volumes. Bind mount host
    volumes are supported when you are using either the EC2 or Fargate launch types. The
    contents of the ``host`` parameter determine whether your bind mount host volume
    persists on the host container instance and where it is stored. If the ``host``
    parameter is empty, then the Docker daemon assigns a host path for your data volume.
    However, the data is not guaranteed to persist after the containers associated with it
    stop running.

    Windows containers can mount whole directories on the same drive as
    ``$env:ProgramData`` . Windows containers cannot mount directories on a different
    drive, and mount point cannot be across drives. For example, you can mount
    ``C:\\my\\path:C:\\my\\path`` and ``D:\\:D:\\`` , but not ``D:\\my\\path:C:\\my\\path``
    or ``D:\\:C:\\my\\path`` .

    - **sourcePath** *(string) --*

      When the ``host`` parameter is used, specify a ``sourcePath`` to declare the path on
      the host container instance that is presented to the container. If this parameter is
      empty, then the Docker daemon has assigned a host path for you. If the ``host``
      parameter contains a ``sourcePath`` file location, then the data volume persists at
      the specified location on the host container instance until you delete it manually.
      If the ``sourcePath`` value does not exist on the host container instance, the Docker
      daemon creates it. If the location does exist, the contents of the source path folder
      are exported.

      If you are using the Fargate launch type, the ``sourcePath`` parameter is not
      supported.
    """


_ClientDescribeTaskDefinitionResponsetaskDefinitionvolumesTypeDef = TypedDict(
    "_ClientDescribeTaskDefinitionResponsetaskDefinitionvolumesTypeDef",
    {
        "name": str,
        "host": ClientDescribeTaskDefinitionResponsetaskDefinitionvolumeshostTypeDef,
        "dockerVolumeConfiguration": ClientDescribeTaskDefinitionResponsetaskDefinitionvolumesdockerVolumeConfigurationTypeDef,
    },
    total=False,
)


class ClientDescribeTaskDefinitionResponsetaskDefinitionvolumesTypeDef(
    _ClientDescribeTaskDefinitionResponsetaskDefinitionvolumesTypeDef
):
    """
    Type definition for `ClientDescribeTaskDefinitionResponsetaskDefinition` `volumes`

    A data volume used in a task definition. For tasks that use a Docker volume, specify a
    ``DockerVolumeConfiguration`` . For tasks that use a bind mount host volume, specify a
    ``host`` and optional ``sourcePath`` . For more information, see `Using Data Volumes in
    Tasks
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_data_volumes.html>`__ .

    - **name** *(string) --*

      The name of the volume. Up to 255 letters (uppercase and lowercase), numbers, and
      hyphens are allowed. This name is referenced in the ``sourceVolume`` parameter of
      container definition ``mountPoints`` .

    - **host** *(dict) --*

      This parameter is specified when you are using bind mount host volumes. Bind mount host
      volumes are supported when you are using either the EC2 or Fargate launch types. The
      contents of the ``host`` parameter determine whether your bind mount host volume
      persists on the host container instance and where it is stored. If the ``host``
      parameter is empty, then the Docker daemon assigns a host path for your data volume.
      However, the data is not guaranteed to persist after the containers associated with it
      stop running.

      Windows containers can mount whole directories on the same drive as
      ``$env:ProgramData`` . Windows containers cannot mount directories on a different
      drive, and mount point cannot be across drives. For example, you can mount
      ``C:\\my\\path:C:\\my\\path`` and ``D:\\:D:\\`` , but not ``D:\\my\\path:C:\\my\\path``
      or ``D:\\:C:\\my\\path`` .

      - **sourcePath** *(string) --*

        When the ``host`` parameter is used, specify a ``sourcePath`` to declare the path on
        the host container instance that is presented to the container. If this parameter is
        empty, then the Docker daemon has assigned a host path for you. If the ``host``
        parameter contains a ``sourcePath`` file location, then the data volume persists at
        the specified location on the host container instance until you delete it manually.
        If the ``sourcePath`` value does not exist on the host container instance, the Docker
        daemon creates it. If the location does exist, the contents of the source path folder
        are exported.

        If you are using the Fargate launch type, the ``sourcePath`` parameter is not
        supported.

    - **dockerVolumeConfiguration** *(dict) --*

      This parameter is specified when you are using Docker volumes. Docker volumes are only
      supported when you are using the EC2 launch type. Windows containers only support the
      use of the ``local`` driver. To use bind mounts, specify a ``host`` instead.

      - **scope** *(string) --*

        The scope for the Docker volume that determines its lifecycle. Docker volumes that
        are scoped to a ``task`` are automatically provisioned when the task starts and
        destroyed when the task stops. Docker volumes that are scoped as ``shared`` persist
        after the task stops.

      - **autoprovision** *(boolean) --*

        If this value is ``true`` , the Docker volume is created if it does not already exist.

        .. note::

          This field is only used if the ``scope`` is ``shared`` .

      - **driver** *(string) --*

        The Docker volume driver to use. The driver value must match the driver name provided
        by Docker because it is used for task placement. If the driver was installed using
        the Docker plugin CLI, use ``docker plugin ls`` to retrieve the driver name from your
        container instance. If the driver was installed using another method, use Docker
        plugin discovery to retrieve the driver name. For more information, see `Docker
        plugin discovery
        <https://docs.docker.com/engine/extend/plugin_api/#plugin-discovery>`__ . This
        parameter maps to ``Driver`` in the `Create a volume
        <https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate>`__ section of the
        `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
        ``xxdriver`` option to `docker volume create
        <https://docs.docker.com/engine/reference/commandline/volume_create/>`__ .

      - **driverOpts** *(dict) --*

        A map of Docker driver-specific options passed through. This parameter maps to
        ``DriverOpts`` in the `Create a volume
        <https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate>`__ section of the
        `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``xxopt``
        option to `docker volume create
        <https://docs.docker.com/engine/reference/commandline/volume_create/>`__ .

        - *(string) --*

          - *(string) --*

      - **labels** *(dict) --*

        Custom metadata to add to your Docker volume. This parameter maps to ``Labels`` in
        the `Create a volume
        <https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate>`__ section of the
        `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``xxlabel``
        option to `docker volume create
        <https://docs.docker.com/engine/reference/commandline/volume_create/>`__ .

        - *(string) --*

          - *(string) --*
    """


_ClientDescribeTaskDefinitionResponsetaskDefinitionTypeDef = TypedDict(
    "_ClientDescribeTaskDefinitionResponsetaskDefinitionTypeDef",
    {
        "taskDefinitionArn": str,
        "containerDefinitions": List[
            ClientDescribeTaskDefinitionResponsetaskDefinitioncontainerDefinitionsTypeDef
        ],
        "family": str,
        "taskRoleArn": str,
        "executionRoleArn": str,
        "networkMode": str,
        "revision": int,
        "volumes": List[
            ClientDescribeTaskDefinitionResponsetaskDefinitionvolumesTypeDef
        ],
        "status": str,
        "requiresAttributes": List[
            ClientDescribeTaskDefinitionResponsetaskDefinitionrequiresAttributesTypeDef
        ],
        "placementConstraints": List[
            ClientDescribeTaskDefinitionResponsetaskDefinitionplacementConstraintsTypeDef
        ],
        "compatibilities": List[str],
        "requiresCompatibilities": List[str],
        "cpu": str,
        "memory": str,
        "inferenceAccelerators": List[
            ClientDescribeTaskDefinitionResponsetaskDefinitioninferenceAcceleratorsTypeDef
        ],
        "pidMode": str,
        "ipcMode": str,
        "proxyConfiguration": ClientDescribeTaskDefinitionResponsetaskDefinitionproxyConfigurationTypeDef,
    },
    total=False,
)


class ClientDescribeTaskDefinitionResponsetaskDefinitionTypeDef(
    _ClientDescribeTaskDefinitionResponsetaskDefinitionTypeDef
):
    """
    Type definition for `ClientDescribeTaskDefinitionResponse` `taskDefinition`

    The full task definition description.

    - **taskDefinitionArn** *(string) --*

      The full Amazon Resource Name (ARN) of the task definition.

    - **containerDefinitions** *(list) --*

      A list of container definitions in JSON format that describe the different containers that
      make up your task. For more information about container definition parameters and defaults,
      see `Amazon ECS Task Definitions
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_defintions.html>`__ in
      the *Amazon Elastic Container Service Developer Guide* .

      - *(dict) --*

        Container definitions are used in task definitions to describe the different containers
        that are launched as part of a task.

        - **name** *(string) --*

          The name of a container. If you are linking multiple containers together in a task
          definition, the ``name`` of one container can be entered in the ``links`` of another
          container to connect the containers. Up to 255 letters (uppercase and lowercase),
          numbers, and hyphens are allowed. This parameter maps to ``name`` in the `Create a
          container <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__
          section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and
          the ``--name`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__
          .

        - **image** *(string) --*

          The image used to start a container. This string is passed directly to the Docker
          daemon. Images in the Docker Hub registry are available by default. Other repositories
          are specified with either `` *repository-url* /*image* :*tag* `` or `` *repository-url*
          /*image* @*digest* `` . Up to 255 letters (uppercase and lowercase), numbers, hyphens,
          underscores, colons, periods, forward slashes, and number signs are allowed. This
          parameter maps to ``Image`` in the `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``IMAGE``
          parameter of `docker run <https://docs.docker.com/engine/reference/run/>`__ .

          * When a new task starts, the Amazon ECS container agent pulls the latest version of
          the specified image and tag for the container to use. However, subsequent updates to a
          repository image are not propagated to already running tasks.

          * Images in Amazon ECR repositories can be specified by either using the full
          ``registry/repository:tag`` or ``registry/repository@digest`` . For example,
          ``012345678910.dkr.ecr.<region-name>.amazonaws.com/<repository-name>:latest`` or
          ``012345678910.dkr.ecr.<region-name>.amazonaws.com/<repository-name>@sha256:94afd1f2e64d908bc90dbca0035a5b567EXAMPLE``
          .

          * Images in official repositories on Docker Hub use a single name (for example,
          ``ubuntu`` or ``mongo`` ).

          * Images in other repositories on Docker Hub are qualified with an organization name
          (for example, ``amazon/amazon-ecs-agent`` ).

          * Images in other online repositories are qualified further by a domain name (for
          example, ``quay.io/assemblyline/ubuntu`` ).

        - **repositoryCredentials** *(dict) --*

          The private repository authentication credentials to use.

          - **credentialsParameter** *(string) --*

            The Amazon Resource Name (ARN) of the secret containing the private repository
            credentials.

            .. note::

              When you are using the Amazon ECS API, AWS CLI, or AWS SDK, if the secret exists in
              the same Region as the task that you are launching then you can use either the full
              ARN or the name of the secret. When you are using the AWS Management Console, you
              must specify the full ARN of the secret.

        - **cpu** *(integer) --*

          The number of ``cpu`` units reserved for the container. This parameter maps to
          ``CpuShares`` in the `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
          ``--cpu-shares`` option to `docker run
          <https://docs.docker.com/engine/reference/run/>`__ .

          This field is optional for tasks using the Fargate launch type, and the only
          requirement is that the total amount of CPU reserved for all containers within a task
          be lower than the task-level ``cpu`` value.

          .. note::

            You can determine the number of CPU units that are available per EC2 instance type by
            multiplying the vCPUs listed for that instance type on the `Amazon EC2 Instances
            <http://aws.amazon.com/ec2/instance-types/>`__ detail page by 1,024.

          For example, if you run a single-container task on a single-core instance type with 512
          CPU units specified for that container, and that is the only task running on the
          container instance, that container could use the full 1,024 CPU unit share at any given
          time. However, if you launched another copy of the same task on that container
          instance, each task would be guaranteed a minimum of 512 CPU units when needed, and
          each container could float to higher CPU usage if the other container was not using it,
          but if both tasks were 100% active all of the time, they would be limited to 512 CPU
          units.

          Linux containers share unallocated CPU units with other containers on the container
          instance with the same ratio as their allocated amount. For example, if you run a
          single-container task on a single-core instance type with 512 CPU units specified for
          that container, and that is the only task running on the container instance, that
          container could use the full 1,024 CPU unit share at any given time. However, if you
          launched another copy of the same task on that container instance, each task would be
          guaranteed a minimum of 512 CPU units when needed, and each container could float to
          higher CPU usage if the other container was not using it, but if both tasks were 100%
          active all of the time, they would be limited to 512 CPU units.

          On Linux container instances, the Docker daemon on the container instance uses the CPU
          value to calculate the relative CPU share ratios for running containers. For more
          information, see `CPU share constraint
          <https://docs.docker.com/engine/reference/run/#cpu-share-constraint>`__ in the Docker
          documentation. The minimum valid CPU share value that the Linux kernel allows is 2.
          However, the CPU parameter is not required, and you can use CPU values below 2 in your
          container definitions. For CPU values below 2 (including null), the behavior varies
          based on your Amazon ECS container agent version:

          * **Agent versions less than or equal to 1.1.0:** Null and zero CPU values are passed
          to Docker as 0, which Docker then converts to 1,024 CPU shares. CPU values of 1 are
          passed to Docker as 1, which the Linux kernel converts to two CPU shares.

          * **Agent versions greater than or equal to 1.2.0:** Null, zero, and CPU values of 1
          are passed to Docker as 2.

          On Windows container instances, the CPU limit is enforced as an absolute limit, or a
          quota. Windows containers only have access to the specified amount of CPU that is
          described in the task definition.

        - **memory** *(integer) --*

          The amount (in MiB) of memory to present to the container. If your container attempts
          to exceed the memory specified here, the container is killed. The total amount of
          memory reserved for all containers within a task must be lower than the task ``memory``
          value, if one is specified. This parameter maps to ``Memory`` in the `Create a
          container <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__
          section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and
          the ``--memory`` option to `docker run
          <https://docs.docker.com/engine/reference/run/>`__ .

          If using the Fargate launch type, this parameter is optional.

          If using the EC2 launch type, you must specify either a task-level memory value or a
          container-level memory value. If you specify both a container-level ``memory`` and
          ``memoryReservation`` value, ``memory`` must be greater than ``memoryReservation`` . If
          you specify ``memoryReservation`` , then that value is subtracted from the available
          memory resources for the container instance on which the container is placed.
          Otherwise, the value of ``memory`` is used.

          The Docker daemon reserves a minimum of 4 MiB of memory for a container, so you should
          not specify fewer than 4 MiB of memory for your containers.

        - **memoryReservation** *(integer) --*

          The soft limit (in MiB) of memory to reserve for the container. When system memory is
          under heavy contention, Docker attempts to keep the container memory to this soft
          limit. However, your container can consume more memory when it needs to, up to either
          the hard limit specified with the ``memory`` parameter (if applicable), or all of the
          available memory on the container instance, whichever comes first. This parameter maps
          to ``MemoryReservation`` in the `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
          ``--memory-reservation`` option to `docker run
          <https://docs.docker.com/engine/reference/run/>`__ .

          If a task-level memory value is not specified, you must specify a non-zero integer for
          one or both of ``memory`` or ``memoryReservation`` in a container definition. If you
          specify both, ``memory`` must be greater than ``memoryReservation`` . If you specify
          ``memoryReservation`` , then that value is subtracted from the available memory
          resources for the container instance on which the container is placed. Otherwise, the
          value of ``memory`` is used.

          For example, if your container normally uses 128 MiB of memory, but occasionally bursts
          to 256 MiB of memory for short periods of time, you can set a ``memoryReservation`` of
          128 MiB, and a ``memory`` hard limit of 300 MiB. This configuration would allow the
          container to only reserve 128 MiB of memory from the remaining resources on the
          container instance, but also allow the container to consume more memory resources when
          needed.

          The Docker daemon reserves a minimum of 4 MiB of memory for a container, so you should
          not specify fewer than 4 MiB of memory for your containers.

        - **links** *(list) --*

          The ``links`` parameter allows containers to communicate with each other without the
          need for port mappings. This parameter is only supported if the network mode of a task
          definition is ``bridge`` . The ``name:internalName`` construct is analogous to
          ``name:alias`` in Docker links. Up to 255 letters (uppercase and lowercase), numbers,
          and hyphens are allowed. For more information about linking Docker containers, go to
          `Legacy container links <https://docs.docker.com/network/links/>`__ in the Docker
          documentation. This parameter maps to ``Links`` in the `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--link``
          option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

          .. note::

            This parameter is not supported for Windows containers.

          .. warning::

            Containers that are collocated on a single container instance may be able to
            communicate with each other without requiring links or host port mappings. Network
            isolation is achieved on the container instance using security groups and VPC
            settings.

          - *(string) --*

        - **portMappings** *(list) --*

          The list of port mappings for the container. Port mappings allow containers to access
          ports on the host container instance to send or receive traffic.

          For task definitions that use the ``awsvpc`` network mode, you should only specify the
          ``containerPort`` . The ``hostPort`` can be left blank or it must be the same value as
          the ``containerPort`` .

          Port mappings on Windows use the ``NetNAT`` gateway address rather than ``localhost`` .
          There is no loopback for port mappings on Windows, so you cannot access a container's
          mapped port from the host itself.

          This parameter maps to ``PortBindings`` in the `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--publish``
          option to `docker run <https://docs.docker.com/engine/reference/run/>`__ . If the
          network mode of a task definition is set to ``none`` , then you can't specify port
          mappings. If the network mode of a task definition is set to ``host`` , then host ports
          must either be undefined or they must match the container port in the port mapping.

          .. note::

            After a task reaches the ``RUNNING`` status, manual and automatic host and container
            port assignments are visible in the **Network Bindings** section of a container
            description for a selected task in the Amazon ECS console. The assignments are also
            visible in the ``networkBindings`` section  DescribeTasks responses.

          - *(dict) --*

            Port mappings allow containers to access ports on the host container instance to send
            or receive traffic. Port mappings are specified as part of the container definition.

            If you are using containers in a task with the ``awsvpc`` or ``host`` network mode,
            exposed ports should be specified using ``containerPort`` . The ``hostPort`` can be
            left blank or it must be the same value as the ``containerPort`` .

            After a task reaches the ``RUNNING`` status, manual and automatic host and container
            port assignments are visible in the ``networkBindings`` section of  DescribeTasks API
            responses.

            - **containerPort** *(integer) --*

              The port number on the container that is bound to the user-specified or
              automatically assigned host port.

              If you are using containers in a task with the ``awsvpc`` or ``host`` network mode,
              exposed ports should be specified using ``containerPort`` .

              If you are using containers in a task with the ``bridge`` network mode and you
              specify a container port and not a host port, your container automatically receives
              a host port in the ephemeral port range. For more information, see ``hostPort`` .
              Port mappings that are automatically assigned in this way do not count toward the
              100 reserved ports limit of a container instance.

              .. warning::

                You cannot expose the same container port for multiple protocols. An error will
                be returned if this is attempted.

            - **hostPort** *(integer) --*

              The port number on the container instance to reserve for your container.

              If you are using containers in a task with the ``awsvpc`` or ``host`` network mode,
              the ``hostPort`` can either be left blank or set to the same value as the
              ``containerPort`` .

              If you are using containers in a task with the ``bridge`` network mode, you can
              specify a non-reserved host port for your container port mapping, or you can omit
              the ``hostPort`` (or set it to ``0`` ) while specifying a ``containerPort`` and
              your container automatically receives a port in the ephemeral port range for your
              container instance operating system and Docker version.

              The default ephemeral port range for Docker version 1.6.0 and later is listed on
              the instance under ``/proc/sys/net/ipv4/ip_local_port_range`` . If this kernel
              parameter is unavailable, the default ephemeral port range from 49153 through 65535
              is used. Do not attempt to specify a host port in the ephemeral port range as these
              are reserved for automatic assignment. In general, ports below 32768 are outside of
              the ephemeral port range.

              .. note::

                The default ephemeral port range from 49153 through 65535 is always used for
                Docker versions before 1.6.0.

              The default reserved ports are 22 for SSH, the Docker ports 2375 and 2376, and the
              Amazon ECS container agent ports 51678-51680. Any host port that was previously
              specified in a running task is also reserved while the task is running (after a
              task stops, the host port is released). The current reserved ports are displayed in
              the ``remainingResources`` of  DescribeContainerInstances output. A container
              instance can have up to 100 reserved ports at a time, including the default
              reserved ports. Automatically assigned ports don't count toward the 100 reserved
              ports limit.

            - **protocol** *(string) --*

              The protocol used for the port mapping. Valid values are ``tcp`` and ``udp`` . The
              default is ``tcp`` .

        - **essential** *(boolean) --*

          If the ``essential`` parameter of a container is marked as ``true`` , and that
          container fails or stops for any reason, all other containers that are part of the task
          are stopped. If the ``essential`` parameter of a container is marked as ``false`` ,
          then its failure does not affect the rest of the containers in a task. If this
          parameter is omitted, a container is assumed to be essential.

          All tasks must have at least one essential container. If you have an application that
          is composed of multiple containers, you should group containers that are used for a
          common purpose into components, and separate the different components into multiple
          task definitions. For more information, see `Application Architecture
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/application_architecture.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

        - **entryPoint** *(list) --*

          .. warning::

            Early versions of the Amazon ECS container agent do not properly handle
            ``entryPoint`` parameters. If you have problems using ``entryPoint`` , update your
            container agent or enter your commands and arguments as ``command`` array items
            instead.

          The entry point that is passed to the container. This parameter maps to ``Entrypoint``
          in the `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
          ``--entrypoint`` option to `docker run
          <https://docs.docker.com/engine/reference/run/>`__ . For more information, see
          `https\\://docs.docker.com/engine/reference/builder/#entrypoint
          <https://docs.docker.com/engine/reference/builder/#entrypoint>`__ .

          - *(string) --*

        - **command** *(list) --*

          The command that is passed to the container. This parameter maps to ``Cmd`` in the
          `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``COMMAND``
          parameter to `docker run <https://docs.docker.com/engine/reference/run/>`__ . For more
          information, see `https\\://docs.docker.com/engine/reference/builder/#cmd
          <https://docs.docker.com/engine/reference/builder/#cmd>`__ . If there are multiple
          arguments, each argument should be a separated string in the array.

          - *(string) --*

        - **environment** *(list) --*

          The environment variables to pass to a container. This parameter maps to ``Env`` in the
          `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--env``
          option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

          .. warning::

            We do not recommend using plaintext environment variables for sensitive information,
            such as credential data.

          - *(dict) --*

            A key-value pair object.

            - **name** *(string) --*

              The name of the key-value pair. For environment variables, this is the name of the
              environment variable.

            - **value** *(string) --*

              The value of the key-value pair. For environment variables, this is the value of
              the environment variable.

        - **mountPoints** *(list) --*

          The mount points for data volumes in your container.

          This parameter maps to ``Volumes`` in the `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--volume``
          option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

          Windows containers can mount whole directories on the same drive as
          ``$env:ProgramData`` . Windows containers cannot mount directories on a different
          drive, and mount point cannot be across drives.

          - *(dict) --*

            Details on a volume mount point that is used in a container definition.

            - **sourceVolume** *(string) --*

              The name of the volume to mount. Must be a volume name referenced in the ``name``
              parameter of task definition ``volume`` .

            - **containerPath** *(string) --*

              The path on the container to mount the host volume at.

            - **readOnly** *(boolean) --*

              If this value is ``true`` , the container has read-only access to the volume. If
              this value is ``false`` , then the container can write to the volume. The default
              value is ``false`` .

        - **volumesFrom** *(list) --*

          Data volumes to mount from another container. This parameter maps to ``VolumesFrom`` in
          the `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
          ``--volumes-from`` option to `docker run
          <https://docs.docker.com/engine/reference/run/>`__ .

          - *(dict) --*

            Details on a data volume from another container in the same task definition.

            - **sourceContainer** *(string) --*

              The name of another container within the same task definition from which to mount
              volumes.

            - **readOnly** *(boolean) --*

              If this value is ``true`` , the container has read-only access to the volume. If
              this value is ``false`` , then the container can write to the volume. The default
              value is ``false`` .

        - **linuxParameters** *(dict) --*

          Linux-specific modifications that are applied to the container, such as Linux kernel
          capabilities. For more information see  KernelCapabilities .

          .. note::

            This parameter is not supported for Windows containers.

          - **capabilities** *(dict) --*

            The Linux capabilities for the container that are added to or dropped from the
            default configuration provided by Docker.

            .. note::

              If you are using tasks that use the Fargate launch type, ``capabilities`` is
              supported but the ``add`` parameter is not supported.

            - **add** *(list) --*

              The Linux capabilities for the container that have been added to the default
              configuration provided by Docker. This parameter maps to ``CapAdd`` in the `Create
              a container
              <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of
              the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
              ``--cap-add`` option to `docker run
              <https://docs.docker.com/engine/reference/run/>`__ .

              .. note::

                If you are using tasks that use the Fargate launch type, the ``add`` parameter is
                not supported.

              Valid values: ``"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" | "BLOCK_SUSPEND" | "CHOWN"
              | "DAC_OVERRIDE" | "DAC_READ_SEARCH" | "FOWNER" | "FSETID" | "IPC_LOCK" |
              "IPC_OWNER" | "KILL" | "LEASE" | "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" |
              "MKNOD" | "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" |
              "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT" |
              "SYS_CHROOT" | "SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" | "SYS_PTRACE" | "SYS_RAWIO"
              | "SYS_RESOURCE" | "SYS_TIME" | "SYS_TTY_CONFIG" | "SYSLOG" | "WAKE_ALARM"``

              - *(string) --*

            - **drop** *(list) --*

              The Linux capabilities for the container that have been removed from the default
              configuration provided by Docker. This parameter maps to ``CapDrop`` in the `Create
              a container
              <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of
              the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
              ``--cap-drop`` option to `docker run
              <https://docs.docker.com/engine/reference/run/>`__ .

              Valid values: ``"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" | "BLOCK_SUSPEND" | "CHOWN"
              | "DAC_OVERRIDE" | "DAC_READ_SEARCH" | "FOWNER" | "FSETID" | "IPC_LOCK" |
              "IPC_OWNER" | "KILL" | "LEASE" | "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" |
              "MKNOD" | "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" |
              "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT" |
              "SYS_CHROOT" | "SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" | "SYS_PTRACE" | "SYS_RAWIO"
              | "SYS_RESOURCE" | "SYS_TIME" | "SYS_TTY_CONFIG" | "SYSLOG" | "WAKE_ALARM"``

              - *(string) --*

          - **devices** *(list) --*

            Any host devices to expose to the container. This parameter maps to ``Devices`` in
            the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of
            the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
            ``--device`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__
            .

            .. note::

              If you are using tasks that use the Fargate launch type, the ``devices`` parameter
              is not supported.

            - *(dict) --*

              An object representing a container instance host device.

              - **hostPath** *(string) --*

                The path for the device on the host container instance.

              - **containerPath** *(string) --*

                The path inside the container at which to expose the host device.

              - **permissions** *(list) --*

                The explicit permissions to provide to the container for the device. By default,
                the container has permissions for ``read`` , ``write`` , and ``mknod`` for the
                device.

                - *(string) --*

          - **initProcessEnabled** *(boolean) --*

            Run an ``init`` process inside the container that forwards signals and reaps
            processes. This parameter maps to the ``--init`` option to `docker run
            <https://docs.docker.com/engine/reference/run/>`__ . This parameter requires version
            1.25 of the Docker Remote API or greater on your container instance. To check the
            Docker Remote API version on your container instance, log in to your container
            instance and run the following command: ``sudo docker version --format
            '{{.Server.APIVersion}}'``

          - **sharedMemorySize** *(integer) --*

            The value for the size (in MiB) of the ``/dev/shm`` volume. This parameter maps to
            the ``--shm-size`` option to `docker run
            <https://docs.docker.com/engine/reference/run/>`__ .

            .. note::

              If you are using tasks that use the Fargate launch type, the ``sharedMemorySize``
              parameter is not supported.

          - **tmpfs** *(list) --*

            The container path, mount options, and size (in MiB) of the tmpfs mount. This
            parameter maps to the ``--tmpfs`` option to `docker run
            <https://docs.docker.com/engine/reference/run/>`__ .

            .. note::

              If you are using tasks that use the Fargate launch type, the ``tmpfs`` parameter is
              not supported.

            - *(dict) --*

              The container path, mount options, and size of the tmpfs mount.

              - **containerPath** *(string) --*

                The absolute file path where the tmpfs volume is to be mounted.

              - **size** *(integer) --*

                The size (in MiB) of the tmpfs volume.

              - **mountOptions** *(list) --*

                The list of tmpfs volume mount options.

                Valid values: ``"defaults" | "ro" | "rw" | "suid" | "nosuid" | "dev" | "nodev" |
                "exec" | "noexec" | "sync" | "async" | "dirsync" | "remount" | "mand" | "nomand"
                | "atime" | "noatime" | "diratime" | "nodiratime" | "bind" | "rbind" |
                "unbindable" | "runbindable" | "private" | "rprivate" | "shared" | "rshared" |
                "slave" | "rslave" | "relatime" | "norelatime" | "strictatime" | "nostrictatime"
                | "mode" | "uid" | "gid" | "nr_inodes" | "nr_blocks" | "mpol"``

                - *(string) --*

          - **maxSwap** *(integer) --*

            The total amount of swap memory (in MiB) a container can use. This parameter will be
            translated to the ``--memory-swap`` option to `docker run
            <https://docs.docker.com/engine/reference/run/>`__ where the value would be the sum
            of the container memory plus the ``maxSwap`` value.

            If a ``maxSwap`` value of ``0`` is specified, the container will not use swap.
            Accepted values are ``0`` or any positive integer. If the ``maxSwap`` parameter is
            omitted, the container will use the swap configuration for the container instance it
            is running on. A ``maxSwap`` value must be set for the ``swappiness`` parameter to be
            used.

            .. note::

              If you are using tasks that use the Fargate launch type, the ``maxSwap`` parameter
              is not supported.

          - **swappiness** *(integer) --*

            This allows you to tune a container's memory swappiness behavior. A ``swappiness``
            value of ``0`` will cause swapping to not happen unless absolutely necessary. A
            ``swappiness`` value of ``100`` will cause pages to be swapped very aggressively.
            Accepted values are whole numbers between ``0`` and ``100`` . If the ``swappiness``
            parameter is not specified, a default value of ``60`` is used. If a value is not
            specified for ``maxSwap`` then this parameter is ignored. This parameter maps to the
            ``--memory-swappiness`` option to `docker run
            <https://docs.docker.com/engine/reference/run/>`__ .

            .. note::

              If you are using tasks that use the Fargate launch type, the ``swappiness``
              parameter is not supported.

        - **secrets** *(list) --*

          The secrets to pass to the container. For more information, see `Specifying Sensitive
          Data
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

          - *(dict) --*

            An object representing the secret to expose to your container. Secrets can be exposed
            to a container in the following ways:

            * To inject sensitive data into your containers as environment variables, use the
            ``secrets`` container definition parameter.

            * To reference sensitive information in the log configuration of a container, use the
            ``secretOptions`` container definition parameter.

            For more information, see `Specifying Sensitive Data
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html>`__
            in the *Amazon Elastic Container Service Developer Guide* .

            - **name** *(string) --*

              The name of the secret.

            - **valueFrom** *(string) --*

              The secret to expose to the container. The supported values are either the full ARN
              of the AWS Secrets Manager secret or the full ARN of the parameter in the AWS
              Systems Manager Parameter Store.

              .. note::

                If the AWS Systems Manager Parameter Store parameter exists in the same Region as
                the task you are launching, then you can use either the full ARN or name of the
                parameter. If the parameter exists in a different Region, then the full ARN must
                be specified.

        - **dependsOn** *(list) --*

          The dependencies defined for container startup and shutdown. A container can contain
          multiple dependencies. When a dependency is defined for container startup, for
          container shutdown it is reversed.

          For tasks using the EC2 launch type, the container instances require at least version
          1.26.0 of the container agent to enable container dependencies. However, we recommend
          using the latest container agent version. For information about checking your agent
          version and updating to the latest version, see `Updating the Amazon ECS Container
          Agent
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html>`__
          in the *Amazon Elastic Container Service Developer Guide* . If you are using an Amazon
          ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the
          ``ecs-init`` package. If your container instances are launched from version
          ``20190301`` or later, then they contain the required versions of the container agent
          and ``ecs-init`` . For more information, see `Amazon ECS-optimized Linux AMI
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

          For tasks using the Fargate launch type, the task or service requires platform version
          ``1.3.0`` or later.

          - *(dict) --*

            The dependencies defined for container startup and shutdown. A container can contain
            multiple dependencies. When a dependency is defined for container startup, for
            container shutdown it is reversed.

            Your Amazon ECS container instances require at least version 1.26.0 of the container
            agent to enable container dependencies. However, we recommend using the latest
            container agent version. For information about checking your agent version and
            updating to the latest version, see `Updating the Amazon ECS Container Agent
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html>`__
            in the *Amazon Elastic Container Service Developer Guide* . If you are using an
            Amazon ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the
            ``ecs-init`` package. If your container instances are launched from version
            ``20190301`` or later, then they contain the required versions of the container agent
            and ``ecs-init`` . For more information, see `Amazon ECS-optimized Linux AMI
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html>`__
            in the *Amazon Elastic Container Service Developer Guide* .

            .. note::

              If you are using tasks that use the Fargate launch type, container dependency
              parameters are not supported.

            - **containerName** *(string) --*

              The name of a container.

            - **condition** *(string) --*

              The dependency condition of the container. The following are the available
              conditions and their behavior:

              * ``START`` - This condition emulates the behavior of links and volumes today. It
              validates that a dependent container is started before permitting other containers
              to start.

              * ``COMPLETE`` - This condition validates that a dependent container runs to
              completion (exits) before permitting other containers to start. This can be useful
              for nonessential containers that run a script and then exit.

              * ``SUCCESS`` - This condition is the same as ``COMPLETE`` , but it also requires
              that the container exits with a ``zero`` status.

              * ``HEALTHY`` - This condition validates that the dependent container passes its
              Docker health check before permitting other containers to start. This requires that
              the dependent container has health checks configured. This condition is confirmed
              only at task startup.

        - **startTimeout** *(integer) --*

          Time duration (in seconds) to wait before giving up on resolving dependencies for a
          container. For example, you specify two containers in a task definition with containerA
          having a dependency on containerB reaching a ``COMPLETE`` , ``SUCCESS`` , or
          ``HEALTHY`` status. If a ``startTimeout`` value is specified for containerB and it does
          not reach the desired status within that time then containerA will give up and not
          start. This results in the task transitioning to a ``STOPPED`` state.

          For tasks using the EC2 launch type, the container instances require at least version
          1.26.0 of the container agent to enable a container start timeout value. However, we
          recommend using the latest container agent version. For information about checking your
          agent version and updating to the latest version, see `Updating the Amazon ECS
          Container Agent
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html>`__
          in the *Amazon Elastic Container Service Developer Guide* . If you are using an Amazon
          ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the
          ``ecs-init`` package. If your container instances are launched from version
          ``20190301`` or later, then they contain the required versions of the container agent
          and ``ecs-init`` . For more information, see `Amazon ECS-optimized Linux AMI
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

          For tasks using the Fargate launch type, the task or service requires platform version
          ``1.3.0`` or later.

        - **stopTimeout** *(integer) --*

          Time duration (in seconds) to wait before the container is forcefully killed if it
          doesn't exit normally on its own.

          For tasks using the Fargate launch type, the max ``stopTimeout`` value is 2 minutes and
          the task or service requires platform version ``1.3.0`` or later.

          For tasks using the EC2 launch type, the stop timeout value for the container takes
          precedence over the ``ECS_CONTAINER_STOP_TIMEOUT`` container agent configuration
          parameter, if used. Container instances require at least version 1.26.0 of the
          container agent to enable a container stop timeout value. However, we recommend using
          the latest container agent version. For information about checking your agent version
          and updating to the latest version, see `Updating the Amazon ECS Container Agent
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html>`__
          in the *Amazon Elastic Container Service Developer Guide* . If you are using an Amazon
          ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the
          ``ecs-init`` package. If your container instances are launched from version
          ``20190301`` or later, then they contain the required versions of the container agent
          and ``ecs-init`` . For more information, see `Amazon ECS-optimized Linux AMI
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

        - **hostname** *(string) --*

          The hostname to use for your container. This parameter maps to ``Hostname`` in the
          `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
          ``--hostname`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__
          .

          .. note::

            The ``hostname`` parameter is not supported if you are using the ``awsvpc`` network
            mode.

        - **user** *(string) --*

          The user name to use inside the container. This parameter maps to ``User`` in the
          `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--user``
          option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

          You can use the following formats. If specifying a UID or GID, you must specify it as a
          positive integer.

          * ``user``

          * ``user:group``

          * ``uid``

          * ``uid:gid``

          * ``user:gid``

          * ``uid:group``

          .. note::

            This parameter is not supported for Windows containers.

        - **workingDirectory** *(string) --*

          The working directory in which to run commands inside the container. This parameter
          maps to ``WorkingDir`` in the `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--workdir``
          option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

        - **disableNetworking** *(boolean) --*

          When this parameter is true, networking is disabled within the container. This
          parameter maps to ``NetworkDisabled`` in the `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ .

          .. note::

            This parameter is not supported for Windows containers.

        - **privileged** *(boolean) --*

          When this parameter is true, the container is given elevated privileges on the host
          container instance (similar to the ``root`` user). This parameter maps to
          ``Privileged`` in the `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
          ``--privileged`` option to `docker run
          <https://docs.docker.com/engine/reference/run/>`__ .

          .. note::

            This parameter is not supported for Windows containers or tasks using the Fargate
            launch type.

        - **readonlyRootFilesystem** *(boolean) --*

          When this parameter is true, the container is given read-only access to its root file
          system. This parameter maps to ``ReadonlyRootfs`` in the `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
          ``--read-only`` option to `docker run
          <https://docs.docker.com/engine/reference/run/>`__ .

          .. note::

            This parameter is not supported for Windows containers.

        - **dnsServers** *(list) --*

          A list of DNS servers that are presented to the container. This parameter maps to
          ``Dns`` in the `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--dns``
          option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

          .. note::

            This parameter is not supported for Windows containers.

          - *(string) --*

        - **dnsSearchDomains** *(list) --*

          A list of DNS search domains that are presented to the container. This parameter maps
          to ``DnsSearch`` in the `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
          ``--dns-search`` option to `docker run
          <https://docs.docker.com/engine/reference/run/>`__ .

          .. note::

            This parameter is not supported for Windows containers.

          - *(string) --*

        - **extraHosts** *(list) --*

          A list of hostnames and IP address mappings to append to the ``/etc/hosts`` file on the
          container. This parameter maps to ``ExtraHosts`` in the `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
          ``--add-host`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__
          .

          .. note::

            This parameter is not supported for Windows containers or tasks that use the
            ``awsvpc`` network mode.

          - *(dict) --*

            Hostnames and IP address entries that are added to the ``/etc/hosts`` file of a
            container via the ``extraHosts`` parameter of its  ContainerDefinition .

            - **hostname** *(string) --*

              The hostname to use in the ``/etc/hosts`` entry.

            - **ipAddress** *(string) --*

              The IP address to use in the ``/etc/hosts`` entry.

        - **dockerSecurityOptions** *(list) --*

          A list of strings to provide custom labels for SELinux and AppArmor multi-level
          security systems. This field is not valid for containers in tasks using the Fargate
          launch type.

          This parameter maps to ``SecurityOpt`` in the `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
          ``--security-opt`` option to `docker run
          <https://docs.docker.com/engine/reference/run/>`__ .

          .. note::

            The Amazon ECS container agent running on a container instance must register with the
            ``ECS_SELINUX_CAPABLE=true`` or ``ECS_APPARMOR_CAPABLE=true`` environment variables
            before containers placed on that instance can use these security options. For more
            information, see `Amazon ECS Container Agent Configuration
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html>`__
            in the *Amazon Elastic Container Service Developer Guide* .

          .. note::

            This parameter is not supported for Windows containers.

          - *(string) --*

        - **interactive** *(boolean) --*

          When this parameter is ``true`` , this allows you to deploy containerized applications
          that require ``stdin`` or a ``tty`` to be allocated. This parameter maps to
          ``OpenStdin`` in the `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
          ``--interactive`` option to `docker run
          <https://docs.docker.com/engine/reference/run/>`__ .

        - **pseudoTerminal** *(boolean) --*

          When this parameter is ``true`` , a TTY is allocated. This parameter maps to ``Tty`` in
          the `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--tty``
          option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

        - **dockerLabels** *(dict) --*

          A key/value map of labels to add to the container. This parameter maps to ``Labels`` in
          the `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--label``
          option to `docker run <https://docs.docker.com/engine/reference/run/>`__ . This
          parameter requires version 1.18 of the Docker Remote API or greater on your container
          instance. To check the Docker Remote API version on your container instance, log in to
          your container instance and run the following command: ``sudo docker version --format
          '{{.Server.APIVersion}}'``

          - *(string) --*

            - *(string) --*

        - **ulimits** *(list) --*

          A list of ``ulimits`` to set in the container. This parameter maps to ``Ulimits`` in
          the `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--ulimit``
          option to `docker run <https://docs.docker.com/engine/reference/run/>`__ . Valid naming
          values are displayed in the  Ulimit data type. This parameter requires version 1.18 of
          the Docker Remote API or greater on your container instance. To check the Docker Remote
          API version on your container instance, log in to your container instance and run the
          following command: ``sudo docker version --format '{{.Server.APIVersion}}'``

          .. note::

            This parameter is not supported for Windows containers.

          - *(dict) --*

            The ``ulimit`` settings to pass to the container.

            - **name** *(string) --*

              The ``type`` of the ``ulimit`` .

            - **softLimit** *(integer) --*

              The soft limit for the ulimit type.

            - **hardLimit** *(integer) --*

              The hard limit for the ulimit type.

        - **logConfiguration** *(dict) --*

          The log configuration specification for the container.

          This parameter maps to ``LogConfig`` in the `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
          ``--log-driver`` option to `docker run
          <https://docs.docker.com/engine/reference/run/>`__ . By default, containers use the
          same logging driver that the Docker daemon uses. However the container may use a
          different logging driver than the Docker daemon by specifying a log driver with this
          parameter in the container definition. To use a different logging driver for a
          container, the log system must be configured properly on the container instance (or on
          a different log server for remote logging options). For more information on the options
          for different supported log drivers, see `Configure logging drivers
          <https://docs.docker.com/engine/admin/logging/overview/>`__ in the Docker documentation.

          .. note::

            Amazon ECS currently supports a subset of the logging drivers available to the Docker
            daemon (shown in the  LogConfiguration data type). Additional log drivers may be
            available in future releases of the Amazon ECS container agent.

          This parameter requires version 1.18 of the Docker Remote API or greater on your
          container instance. To check the Docker Remote API version on your container instance,
          log in to your container instance and run the following command: ``sudo docker version
          --format '{{.Server.APIVersion}}'``

          .. note::

            The Amazon ECS container agent running on a container instance must register the
            logging drivers available on that instance with the ``ECS_AVAILABLE_LOGGING_DRIVERS``
            environment variable before containers placed on that instance can use these log
            configuration options. For more information, see `Amazon ECS Container Agent
            Configuration
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html>`__
            in the *Amazon Elastic Container Service Developer Guide* .

          - **logDriver** *(string) --*

            The log driver to use for the container. The valid values listed for this parameter
            are log drivers that the Amazon ECS container agent can communicate with by default.

            For tasks using the Fargate launch type, the supported log drivers are ``awslogs``
            and ``splunk`` .

            For tasks using the EC2 launch type, the supported log drivers are ``awslogs`` ,
            ``fluentd`` , ``gelf`` , ``json-file`` , ``journald`` , ``logentries`` , ``syslog`` ,
            and ``splunk`` .

            For more information about using the ``awslogs`` log driver, see `Using the awslogs
            Log Driver
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_awslogs.html>`__
            in the *Amazon Elastic Container Service Developer Guide* .

            .. note::

              If you have a custom driver that is not listed above that you would like to work
              with the Amazon ECS container agent, you can fork the Amazon ECS container agent
              project that is `available on GitHub <https://github.com/aws/amazon-ecs-agent>`__
              and customize it to work with that driver. We encourage you to submit pull requests
              for changes that you would like to have included. However, Amazon Web Services does
              not currently support running modified copies of this software.

            This parameter requires version 1.18 of the Docker Remote API or greater on your
            container instance. To check the Docker Remote API version on your container
            instance, log in to your container instance and run the following command: ``sudo
            docker version --format '{{.Server.APIVersion}}'``

          - **options** *(dict) --*

            The configuration options to send to the log driver. This parameter requires version
            1.19 of the Docker Remote API or greater on your container instance. To check the
            Docker Remote API version on your container instance, log in to your container
            instance and run the following command: ``sudo docker version --format
            '{{.Server.APIVersion}}'``

            - *(string) --*

              - *(string) --*

          - **secretOptions** *(list) --*

            The secrets to pass to the log configuration. For more information, see `Specifying
            Sensitive Data
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html>`__
            in the *Amazon Elastic Container Service Developer Guide* .

            - *(dict) --*

              An object representing the secret to expose to your container. Secrets can be
              exposed to a container in the following ways:

              * To inject sensitive data into your containers as environment variables, use the
              ``secrets`` container definition parameter.

              * To reference sensitive information in the log configuration of a container, use
              the ``secretOptions`` container definition parameter.

              For more information, see `Specifying Sensitive Data
              <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html>`__
              in the *Amazon Elastic Container Service Developer Guide* .

              - **name** *(string) --*

                The name of the secret.

              - **valueFrom** *(string) --*

                The secret to expose to the container. The supported values are either the full
                ARN of the AWS Secrets Manager secret or the full ARN of the parameter in the AWS
                Systems Manager Parameter Store.

                .. note::

                  If the AWS Systems Manager Parameter Store parameter exists in the same Region
                  as the task you are launching, then you can use either the full ARN or name of
                  the parameter. If the parameter exists in a different Region, then the full ARN
                  must be specified.

        - **healthCheck** *(dict) --*

          The health check command and associated configuration parameters for the container.
          This parameter maps to ``HealthCheck`` in the `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
          ``HEALTHCHECK`` parameter of `docker run
          <https://docs.docker.com/engine/reference/run/>`__ .

          - **command** *(list) --*

            A string array representing the command that the container runs to determine if it is
            healthy. The string array must start with ``CMD`` to execute the command arguments
            directly, or ``CMD-SHELL`` to run the command with the container's default shell. For
            example:

             ``[ "CMD-SHELL", "curl -f http://localhost/ || exit 1" ]``

            An exit code of 0 indicates success, and non-zero exit code indicates failure. For
            more information, see ``HealthCheck`` in the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of
            the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ .

            - *(string) --*

          - **interval** *(integer) --*

            The time period in seconds between each health check execution. You may specify
            between 5 and 300 seconds. The default value is 30 seconds.

          - **timeout** *(integer) --*

            The time period in seconds to wait for a health check to succeed before it is
            considered a failure. You may specify between 2 and 60 seconds. The default value is
            5.

          - **retries** *(integer) --*

            The number of times to retry a failed health check before the container is considered
            unhealthy. You may specify between 1 and 10 retries. The default value is 3.

          - **startPeriod** *(integer) --*

            The optional grace period within which to provide containers time to bootstrap before
            failed health checks count towards the maximum number of retries. You may specify
            between 0 and 300 seconds. The ``startPeriod`` is disabled by default.

            .. note::

              If a health check succeeds within the ``startPeriod`` , then the container is
              considered healthy and any subsequent failures count toward the maximum number of
              retries.

        - **systemControls** *(list) --*

          A list of namespaced kernel parameters to set in the container. This parameter maps to
          ``Sysctls`` in the `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--sysctl``
          option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

          .. note::

            It is not recommended that you specify network-related ``systemControls`` parameters
            for multiple containers in a single task that also uses either the ``awsvpc`` or
            ``host`` network modes. For tasks that use the ``awsvpc`` network mode, the container
            that is started last determines which ``systemControls`` parameters take effect. For
            tasks that use the ``host`` network mode, it changes the container instance's
            namespaced kernel parameters as well as the containers.

          - *(dict) --*

            A list of namespaced kernel parameters to set in the container. This parameter maps
            to ``Sysctls`` in the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of
            the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
            ``--sysctl`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__
            .

            It is not recommended that you specify network-related ``systemControls`` parameters
            for multiple containers in a single task that also uses either the ``awsvpc`` or
            ``host`` network mode for the following reasons:

            * For tasks that use the ``awsvpc`` network mode, if you set ``systemControls`` for
            any container, it applies to all containers in the task. If you set different
            ``systemControls`` for multiple containers in a single task, the container that is
            started last determines which ``systemControls`` take effect.

            * For tasks that use the ``host`` network mode, the ``systemControls`` parameter
            applies to the container instance's kernel parameter as well as that of all
            containers of any tasks running on that container instance.

            - **namespace** *(string) --*

              The namespaced kernel parameter for which to set a ``value`` .

            - **value** *(string) --*

              The value for the namespaced kernel parameter specified in ``namespace`` .

        - **resourceRequirements** *(list) --*

          The type and amount of a resource to assign to a container. The only supported resource
          is a GPU.

          - *(dict) --*

            The type and amount of a resource to assign to a container. The supported resource
            types are GPUs and Elastic Inference accelerators. For more information, see `Working
            with GPUs on Amazon ECS
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-gpu.html>`__ or
            `Working with Amazon Elastic Inference on Amazon ECS
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in the
            *Amazon Elastic Container Service Developer Guide*

            - **value** *(string) --*

              The value for the specified resource type.

              If the ``GPU`` type is used, the value is the number of physical ``GPUs`` the
              Amazon ECS container agent will reserve for the container. The number of GPUs
              reserved for all containers in a task should not exceed the number of available
              GPUs on the container instance the task is launched on.

              If the ``InferenceAccelerator`` type is used, the ``value`` should match the
              ``deviceName`` for an  InferenceAccelerator specified in a task definition.

            - **type** *(string) --*

              The type of resource to assign to a container. The supported values are ``GPU`` or
              ``InferenceAccelerator`` .

        - **firelensConfiguration** *(dict) --*

          The FireLens configuration for the container. This is used to specify and configure a
          log router for container logs. For more information, see `Custom Log Routing
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html>`__ in
          the *Amazon Elastic Container Service Developer Guide* .

          - **type** *(string) --*

            The log router to use. The valid values are ``fluentd`` or ``fluentbit`` .

          - **options** *(dict) --*

            The options to use when configuring the log router. This field is optional and can be
            used to add additional metadata, such as the task, task definition, cluster, and
            container instance details to the log event. If specified, the syntax to use is
            ``"options":{"enable-ecs-log-metadata":"true|false"}`` .

            - *(string) --*

              - *(string) --*

    - **family** *(string) --*

      The name of a family that this task definition is registered to. A family groups multiple
      versions of a task definition. Amazon ECS gives the first task definition that you
      registered to a family a revision number of 1. Amazon ECS gives sequential revision numbers
      to each task definition that you add.

    - **taskRoleArn** *(string) --*

      The short name or full Amazon Resource Name (ARN) of the AWS Identity and Access Management
      (IAM) role that grants containers in the task permission to call AWS APIs on your behalf.
      For more information, see `Amazon ECS Task Role
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_IAM_role.html>`__ in the
      *Amazon Elastic Container Service Developer Guide* .

      IAM roles for tasks on Windows require that the ``-EnableTaskIAMRole`` option is set when
      you launch the Amazon ECS-optimized Windows AMI. Your containers must also run some
      configuration code in order to take advantage of the feature. For more information, see
      `Windows IAM Roles for Tasks
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/windows_task_IAM_roles.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

    - **executionRoleArn** *(string) --*

      The Amazon Resource Name (ARN) of the task execution role that containers in this task can
      assume. All containers in this task are granted the permissions that are specified in this
      role.

    - **networkMode** *(string) --*

      The Docker networking mode to use for the containers in the task. The valid values are
      ``none`` , ``bridge`` , ``awsvpc`` , and ``host`` . The default Docker network mode is
      ``bridge`` . If you are using the Fargate launch type, the ``awsvpc`` network mode is
      required. If you are using the EC2 launch type, any network mode can be used. If the
      network mode is set to ``none`` , you cannot specify port mappings in your container
      definitions, and the tasks containers do not have external connectivity. The ``host`` and
      ``awsvpc`` network modes offer the highest networking performance for containers because
      they use the EC2 network stack instead of the virtualized network stack provided by the
      ``bridge`` mode.

      With the ``host`` and ``awsvpc`` network modes, exposed container ports are mapped directly
      to the corresponding host port (for the ``host`` network mode) or the attached elastic
      network interface port (for the ``awsvpc`` network mode), so you cannot take advantage of
      dynamic host port mappings.

      If the network mode is ``awsvpc`` , the task is allocated an elastic network interface, and
      you must specify a  NetworkConfiguration value when you create a service or run a task with
      the task definition. For more information, see `Task Networking
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html>`__ in
      the *Amazon Elastic Container Service Developer Guide* .

      .. note::

        Currently, only Amazon ECS-optimized AMIs, other Amazon Linux variants with the
        ``ecs-init`` package, or AWS Fargate infrastructure support the ``awsvpc`` network mode.

      If the network mode is ``host`` , you cannot run multiple instantiations of the same task
      on a single container instance when port mappings are used.

      Docker for Windows uses different network modes than Docker for Linux. When you register a
      task definition with Windows containers, you must not specify a network mode. If you use
      the console to register a task definition with Windows containers, you must choose the
      ``<default>`` network mode object.

      For more information, see `Network settings
      <https://docs.docker.com/engine/reference/run/#network-settings>`__ in the *Docker run
      reference* .

    - **revision** *(integer) --*

      The revision of the task in a particular family. The revision is a version number of a task
      definition in a family. When you register a task definition for the first time, the
      revision is ``1`` . Each time that you register a new revision of a task definition in the
      same family, the revision value always increases by one, even if you have deregistered
      previous revisions in this family.

    - **volumes** *(list) --*

      The list of volume definitions for the task.

      If your tasks are using the Fargate launch type, the ``host`` and ``sourcePath`` parameters
      are not supported.

      For more information about volume definition parameters and defaults, see `Amazon ECS Task
      Definitions
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definitions.html>`__ in
      the *Amazon Elastic Container Service Developer Guide* .

      - *(dict) --*

        A data volume used in a task definition. For tasks that use a Docker volume, specify a
        ``DockerVolumeConfiguration`` . For tasks that use a bind mount host volume, specify a
        ``host`` and optional ``sourcePath`` . For more information, see `Using Data Volumes in
        Tasks
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_data_volumes.html>`__ .

        - **name** *(string) --*

          The name of the volume. Up to 255 letters (uppercase and lowercase), numbers, and
          hyphens are allowed. This name is referenced in the ``sourceVolume`` parameter of
          container definition ``mountPoints`` .

        - **host** *(dict) --*

          This parameter is specified when you are using bind mount host volumes. Bind mount host
          volumes are supported when you are using either the EC2 or Fargate launch types. The
          contents of the ``host`` parameter determine whether your bind mount host volume
          persists on the host container instance and where it is stored. If the ``host``
          parameter is empty, then the Docker daemon assigns a host path for your data volume.
          However, the data is not guaranteed to persist after the containers associated with it
          stop running.

          Windows containers can mount whole directories on the same drive as
          ``$env:ProgramData`` . Windows containers cannot mount directories on a different
          drive, and mount point cannot be across drives. For example, you can mount
          ``C:\\my\\path:C:\\my\\path`` and ``D:\\:D:\\`` , but not ``D:\\my\\path:C:\\my\\path``
          or ``D:\\:C:\\my\\path`` .

          - **sourcePath** *(string) --*

            When the ``host`` parameter is used, specify a ``sourcePath`` to declare the path on
            the host container instance that is presented to the container. If this parameter is
            empty, then the Docker daemon has assigned a host path for you. If the ``host``
            parameter contains a ``sourcePath`` file location, then the data volume persists at
            the specified location on the host container instance until you delete it manually.
            If the ``sourcePath`` value does not exist on the host container instance, the Docker
            daemon creates it. If the location does exist, the contents of the source path folder
            are exported.

            If you are using the Fargate launch type, the ``sourcePath`` parameter is not
            supported.

        - **dockerVolumeConfiguration** *(dict) --*

          This parameter is specified when you are using Docker volumes. Docker volumes are only
          supported when you are using the EC2 launch type. Windows containers only support the
          use of the ``local`` driver. To use bind mounts, specify a ``host`` instead.

          - **scope** *(string) --*

            The scope for the Docker volume that determines its lifecycle. Docker volumes that
            are scoped to a ``task`` are automatically provisioned when the task starts and
            destroyed when the task stops. Docker volumes that are scoped as ``shared`` persist
            after the task stops.

          - **autoprovision** *(boolean) --*

            If this value is ``true`` , the Docker volume is created if it does not already exist.

            .. note::

              This field is only used if the ``scope`` is ``shared`` .

          - **driver** *(string) --*

            The Docker volume driver to use. The driver value must match the driver name provided
            by Docker because it is used for task placement. If the driver was installed using
            the Docker plugin CLI, use ``docker plugin ls`` to retrieve the driver name from your
            container instance. If the driver was installed using another method, use Docker
            plugin discovery to retrieve the driver name. For more information, see `Docker
            plugin discovery
            <https://docs.docker.com/engine/extend/plugin_api/#plugin-discovery>`__ . This
            parameter maps to ``Driver`` in the `Create a volume
            <https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
            ``xxdriver`` option to `docker volume create
            <https://docs.docker.com/engine/reference/commandline/volume_create/>`__ .

          - **driverOpts** *(dict) --*

            A map of Docker driver-specific options passed through. This parameter maps to
            ``DriverOpts`` in the `Create a volume
            <https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``xxopt``
            option to `docker volume create
            <https://docs.docker.com/engine/reference/commandline/volume_create/>`__ .

            - *(string) --*

              - *(string) --*

          - **labels** *(dict) --*

            Custom metadata to add to your Docker volume. This parameter maps to ``Labels`` in
            the `Create a volume
            <https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``xxlabel``
            option to `docker volume create
            <https://docs.docker.com/engine/reference/commandline/volume_create/>`__ .

            - *(string) --*

              - *(string) --*

    - **status** *(string) --*

      The status of the task definition.

    - **requiresAttributes** *(list) --*

      The container instance attributes required by your task. This field is not valid if you are
      using the Fargate launch type for your task.

      - *(dict) --*

        An attribute is a name-value pair associated with an Amazon ECS object. Attributes enable
        you to extend the Amazon ECS data model by adding custom metadata to your resources. For
        more information, see `Attributes
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html#attributes>`__
        in the *Amazon Elastic Container Service Developer Guide* .

        - **name** *(string) --*

          The name of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
          hyphens, underscores, and periods are allowed.

        - **value** *(string) --*

          The value of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
          hyphens, underscores, periods, at signs (@), forward slashes, colons, and spaces are
          allowed.

        - **targetType** *(string) --*

          The type of the target with which to attach the attribute. This parameter is required
          if you use the short form ID for a resource instead of the full ARN.

        - **targetId** *(string) --*

          The ID of the target. You can specify the short form ID for a resource or the full
          Amazon Resource Name (ARN).

    - **placementConstraints** *(list) --*

      An array of placement constraint objects to use for tasks. This field is not valid if you
      are using the Fargate launch type for your task.

      - *(dict) --*

        An object representing a constraint on task placement in the task definition. For more
        information, see `Task Placement Constraints
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html>`__
        in the *Amazon Elastic Container Service Developer Guide* .

        .. note::

          If you are using the Fargate launch type, task placement constraints are not supported.

        - **type** *(string) --*

          The type of constraint. The ``MemberOf`` constraint restricts selection to be from a
          group of valid candidates.

        - **expression** *(string) --*

          A cluster query language expression to apply to the constraint. For more information,
          see `Cluster Query Language
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

    - **compatibilities** *(list) --*

      The launch type to use with your task. For more information, see `Amazon ECS Launch Types
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html>`__ in the
      *Amazon Elastic Container Service Developer Guide* .

      - *(string) --*

    - **requiresCompatibilities** *(list) --*

      The launch type the task requires. If no value is specified, it will default to ``EC2`` .
      Valid values include ``EC2`` and ``FARGATE`` .

      - *(string) --*

    - **cpu** *(string) --*

      The number of ``cpu`` units used by the task. If you are using the EC2 launch type, this
      field is optional and any value can be used. If you are using the Fargate launch type, this
      field is required and you must use one of the following values, which determines your range
      of valid values for the ``memory`` parameter:

      * 256 (.25 vCPU) - Available ``memory`` values: 512 (0.5 GB), 1024 (1 GB), 2048 (2 GB)

      * 512 (.5 vCPU) - Available ``memory`` values: 1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096
      (4 GB)

      * 1024 (1 vCPU) - Available ``memory`` values: 2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120
      (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB)

      * 2048 (2 vCPU) - Available ``memory`` values: Between 4096 (4 GB) and 16384 (16 GB) in
      increments of 1024 (1 GB)

      * 4096 (4 vCPU) - Available ``memory`` values: Between 8192 (8 GB) and 30720 (30 GB) in
      increments of 1024 (1 GB)

    - **memory** *(string) --*

      The amount (in MiB) of memory used by the task.

      If using the EC2 launch type, this field is optional and any value can be used. If a
      task-level memory value is specified then the container-level memory value is optional.

      If using the Fargate launch type, this field is required and you must use one of the
      following values, which determines your range of valid values for the ``cpu`` parameter:

      * 512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) - Available ``cpu`` values: 256 (.25 vCPU)

      * 1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available ``cpu`` values: 512 (.5
      vCPU)

      * 2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB)
      - Available ``cpu`` values: 1024 (1 vCPU)

      * Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB) - Available ``cpu``
      values: 2048 (2 vCPU)

      * Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB) - Available ``cpu``
      values: 4096 (4 vCPU)

    - **inferenceAccelerators** *(list) --*

      The Elastic Inference accelerator associated with the task.

      - *(dict) --*

        Details on a Elastic Inference accelerator. For more information, see `Working with
        Amazon Elastic Inference on Amazon ECS
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in the
        *Amazon Elastic Container Service Developer Guide* .

        - **deviceName** *(string) --*

          The Elastic Inference accelerator device name. The ``deviceName`` must also be
          referenced in a container definition as a  ResourceRequirement .

        - **deviceType** *(string) --*

          The Elastic Inference accelerator type to use.

    - **pidMode** *(string) --*

      The process namespace to use for the containers in the task. The valid values are ``host``
      or ``task`` . If ``host`` is specified, then all containers within the tasks that specified
      the ``host`` PID mode on the same container instance share the same process namespace with
      the host Amazon EC2 instance. If ``task`` is specified, all containers within the specified
      task share the same process namespace. If no value is specified, the default is a private
      namespace. For more information, see `PID settings
      <https://docs.docker.com/engine/reference/run/#pid-settings---pid>`__ in the *Docker run
      reference* .

      If the ``host`` PID mode is used, be aware that there is a heightened risk of undesired
      process namespace expose. For more information, see `Docker security
      <https://docs.docker.com/engine/security/security/>`__ .

      .. note::

        This parameter is not supported for Windows containers or tasks using the Fargate launch
        type.

    - **ipcMode** *(string) --*

      The IPC resource namespace to use for the containers in the task. The valid values are
      ``host`` , ``task`` , or ``none`` . If ``host`` is specified, then all containers within
      the tasks that specified the ``host`` IPC mode on the same container instance share the
      same IPC resources with the host Amazon EC2 instance. If ``task`` is specified, all
      containers within the specified task share the same IPC resources. If ``none`` is
      specified, then IPC resources within the containers of a task are private and not shared
      with other containers in a task or on the container instance. If no value is specified,
      then the IPC resource namespace sharing depends on the Docker daemon setting on the
      container instance. For more information, see `IPC settings
      <https://docs.docker.com/engine/reference/run/#ipc-settings---ipc>`__ in the *Docker run
      reference* .

      If the ``host`` IPC mode is used, be aware that there is a heightened risk of undesired IPC
      namespace expose. For more information, see `Docker security
      <https://docs.docker.com/engine/security/security/>`__ .

      If you are setting namespaced kernel parameters using ``systemControls`` for the containers
      in the task, the following will apply to your IPC resource namespace. For more information,
      see `System Controls
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

      * For tasks that use the ``host`` IPC mode, IPC namespace related ``systemControls`` are
      not supported.

      * For tasks that use the ``task`` IPC mode, IPC namespace related ``systemControls`` will
      apply to all containers within a task.

      .. note::

        This parameter is not supported for Windows containers or tasks using the Fargate launch
        type.

    - **proxyConfiguration** *(dict) --*

      The configuration details for the App Mesh proxy.

      Your Amazon ECS container instances require at least version 1.26.0 of the container agent
      and at least version 1.26.0-1 of the ``ecs-init`` package to enable a proxy configuration.
      If your container instances are launched from the Amazon ECS-optimized AMI version
      ``20190301`` or later, then they contain the required versions of the container agent and
      ``ecs-init`` . For more information, see `Amazon ECS-optimized Linux AMI
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html>`__ in
      the *Amazon Elastic Container Service Developer Guide* .

      - **type** *(string) --*

        The proxy type. The only supported value is ``APPMESH`` .

      - **containerName** *(string) --*

        The name of the container that will serve as the App Mesh proxy.

      - **properties** *(list) --*

        The set of network configuration parameters to provide the Container Network Interface
        (CNI) plugin, specified as key-value pairs.

        * ``IgnoredUID`` - (Required) The user ID (UID) of the proxy container as defined by the
        ``user`` parameter in a container definition. This is used to ensure the proxy ignores
        its own traffic. If ``IgnoredGID`` is specified, this field can be empty.

        * ``IgnoredGID`` - (Required) The group ID (GID) of the proxy container as defined by the
        ``user`` parameter in a container definition. This is used to ensure the proxy ignores
        its own traffic. If ``IgnoredUID`` is specified, this field can be empty.

        * ``AppPorts`` - (Required) The list of ports that the application uses. Network traffic
        to these ports is forwarded to the ``ProxyIngressPort`` and ``ProxyEgressPort`` .

        * ``ProxyIngressPort`` - (Required) Specifies the port that incoming traffic to the
        ``AppPorts`` is directed to.

        * ``ProxyEgressPort`` - (Required) Specifies the port that outgoing traffic from the
        ``AppPorts`` is directed to.

        * ``EgressIgnoredPorts`` - (Required) The egress traffic going to the specified ports is
        ignored and not redirected to the ``ProxyEgressPort`` . It can be an empty list.

        * ``EgressIgnoredIPs`` - (Required) The egress traffic going to the specified IP
        addresses is ignored and not redirected to the ``ProxyEgressPort`` . It can be an empty
        list.

        - *(dict) --*

          A key-value pair object.

          - **name** *(string) --*

            The name of the key-value pair. For environment variables, this is the name of the
            environment variable.

          - **value** *(string) --*

            The value of the key-value pair. For environment variables, this is the value of the
            environment variable.
    """


_ClientDescribeTaskDefinitionResponseTypeDef = TypedDict(
    "_ClientDescribeTaskDefinitionResponseTypeDef",
    {
        "taskDefinition": ClientDescribeTaskDefinitionResponsetaskDefinitionTypeDef,
        "tags": List[ClientDescribeTaskDefinitionResponsetagsTypeDef],
    },
    total=False,
)


class ClientDescribeTaskDefinitionResponseTypeDef(
    _ClientDescribeTaskDefinitionResponseTypeDef
):
    """
    Type definition for `ClientDescribeTaskDefinition` `Response`

    - **taskDefinition** *(dict) --*

      The full task definition description.

      - **taskDefinitionArn** *(string) --*

        The full Amazon Resource Name (ARN) of the task definition.

      - **containerDefinitions** *(list) --*

        A list of container definitions in JSON format that describe the different containers that
        make up your task. For more information about container definition parameters and defaults,
        see `Amazon ECS Task Definitions
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_defintions.html>`__ in
        the *Amazon Elastic Container Service Developer Guide* .

        - *(dict) --*

          Container definitions are used in task definitions to describe the different containers
          that are launched as part of a task.

          - **name** *(string) --*

            The name of a container. If you are linking multiple containers together in a task
            definition, the ``name`` of one container can be entered in the ``links`` of another
            container to connect the containers. Up to 255 letters (uppercase and lowercase),
            numbers, and hyphens are allowed. This parameter maps to ``name`` in the `Create a
            container <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__
            section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and
            the ``--name`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__
            .

          - **image** *(string) --*

            The image used to start a container. This string is passed directly to the Docker
            daemon. Images in the Docker Hub registry are available by default. Other repositories
            are specified with either `` *repository-url* /*image* :*tag* `` or `` *repository-url*
            /*image* @*digest* `` . Up to 255 letters (uppercase and lowercase), numbers, hyphens,
            underscores, colons, periods, forward slashes, and number signs are allowed. This
            parameter maps to ``Image`` in the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``IMAGE``
            parameter of `docker run <https://docs.docker.com/engine/reference/run/>`__ .

            * When a new task starts, the Amazon ECS container agent pulls the latest version of
            the specified image and tag for the container to use. However, subsequent updates to a
            repository image are not propagated to already running tasks.

            * Images in Amazon ECR repositories can be specified by either using the full
            ``registry/repository:tag`` or ``registry/repository@digest`` . For example,
            ``012345678910.dkr.ecr.<region-name>.amazonaws.com/<repository-name>:latest`` or
            ``012345678910.dkr.ecr.<region-name>.amazonaws.com/<repository-name>@sha256:94afd1f2e64d908bc90dbca0035a5b567EXAMPLE``
            .

            * Images in official repositories on Docker Hub use a single name (for example,
            ``ubuntu`` or ``mongo`` ).

            * Images in other repositories on Docker Hub are qualified with an organization name
            (for example, ``amazon/amazon-ecs-agent`` ).

            * Images in other online repositories are qualified further by a domain name (for
            example, ``quay.io/assemblyline/ubuntu`` ).

          - **repositoryCredentials** *(dict) --*

            The private repository authentication credentials to use.

            - **credentialsParameter** *(string) --*

              The Amazon Resource Name (ARN) of the secret containing the private repository
              credentials.

              .. note::

                When you are using the Amazon ECS API, AWS CLI, or AWS SDK, if the secret exists in
                the same Region as the task that you are launching then you can use either the full
                ARN or the name of the secret. When you are using the AWS Management Console, you
                must specify the full ARN of the secret.

          - **cpu** *(integer) --*

            The number of ``cpu`` units reserved for the container. This parameter maps to
            ``CpuShares`` in the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
            ``--cpu-shares`` option to `docker run
            <https://docs.docker.com/engine/reference/run/>`__ .

            This field is optional for tasks using the Fargate launch type, and the only
            requirement is that the total amount of CPU reserved for all containers within a task
            be lower than the task-level ``cpu`` value.

            .. note::

              You can determine the number of CPU units that are available per EC2 instance type by
              multiplying the vCPUs listed for that instance type on the `Amazon EC2 Instances
              <http://aws.amazon.com/ec2/instance-types/>`__ detail page by 1,024.

            For example, if you run a single-container task on a single-core instance type with 512
            CPU units specified for that container, and that is the only task running on the
            container instance, that container could use the full 1,024 CPU unit share at any given
            time. However, if you launched another copy of the same task on that container
            instance, each task would be guaranteed a minimum of 512 CPU units when needed, and
            each container could float to higher CPU usage if the other container was not using it,
            but if both tasks were 100% active all of the time, they would be limited to 512 CPU
            units.

            Linux containers share unallocated CPU units with other containers on the container
            instance with the same ratio as their allocated amount. For example, if you run a
            single-container task on a single-core instance type with 512 CPU units specified for
            that container, and that is the only task running on the container instance, that
            container could use the full 1,024 CPU unit share at any given time. However, if you
            launched another copy of the same task on that container instance, each task would be
            guaranteed a minimum of 512 CPU units when needed, and each container could float to
            higher CPU usage if the other container was not using it, but if both tasks were 100%
            active all of the time, they would be limited to 512 CPU units.

            On Linux container instances, the Docker daemon on the container instance uses the CPU
            value to calculate the relative CPU share ratios for running containers. For more
            information, see `CPU share constraint
            <https://docs.docker.com/engine/reference/run/#cpu-share-constraint>`__ in the Docker
            documentation. The minimum valid CPU share value that the Linux kernel allows is 2.
            However, the CPU parameter is not required, and you can use CPU values below 2 in your
            container definitions. For CPU values below 2 (including null), the behavior varies
            based on your Amazon ECS container agent version:

            * **Agent versions less than or equal to 1.1.0:** Null and zero CPU values are passed
            to Docker as 0, which Docker then converts to 1,024 CPU shares. CPU values of 1 are
            passed to Docker as 1, which the Linux kernel converts to two CPU shares.

            * **Agent versions greater than or equal to 1.2.0:** Null, zero, and CPU values of 1
            are passed to Docker as 2.

            On Windows container instances, the CPU limit is enforced as an absolute limit, or a
            quota. Windows containers only have access to the specified amount of CPU that is
            described in the task definition.

          - **memory** *(integer) --*

            The amount (in MiB) of memory to present to the container. If your container attempts
            to exceed the memory specified here, the container is killed. The total amount of
            memory reserved for all containers within a task must be lower than the task ``memory``
            value, if one is specified. This parameter maps to ``Memory`` in the `Create a
            container <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__
            section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and
            the ``--memory`` option to `docker run
            <https://docs.docker.com/engine/reference/run/>`__ .

            If using the Fargate launch type, this parameter is optional.

            If using the EC2 launch type, you must specify either a task-level memory value or a
            container-level memory value. If you specify both a container-level ``memory`` and
            ``memoryReservation`` value, ``memory`` must be greater than ``memoryReservation`` . If
            you specify ``memoryReservation`` , then that value is subtracted from the available
            memory resources for the container instance on which the container is placed.
            Otherwise, the value of ``memory`` is used.

            The Docker daemon reserves a minimum of 4 MiB of memory for a container, so you should
            not specify fewer than 4 MiB of memory for your containers.

          - **memoryReservation** *(integer) --*

            The soft limit (in MiB) of memory to reserve for the container. When system memory is
            under heavy contention, Docker attempts to keep the container memory to this soft
            limit. However, your container can consume more memory when it needs to, up to either
            the hard limit specified with the ``memory`` parameter (if applicable), or all of the
            available memory on the container instance, whichever comes first. This parameter maps
            to ``MemoryReservation`` in the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
            ``--memory-reservation`` option to `docker run
            <https://docs.docker.com/engine/reference/run/>`__ .

            If a task-level memory value is not specified, you must specify a non-zero integer for
            one or both of ``memory`` or ``memoryReservation`` in a container definition. If you
            specify both, ``memory`` must be greater than ``memoryReservation`` . If you specify
            ``memoryReservation`` , then that value is subtracted from the available memory
            resources for the container instance on which the container is placed. Otherwise, the
            value of ``memory`` is used.

            For example, if your container normally uses 128 MiB of memory, but occasionally bursts
            to 256 MiB of memory for short periods of time, you can set a ``memoryReservation`` of
            128 MiB, and a ``memory`` hard limit of 300 MiB. This configuration would allow the
            container to only reserve 128 MiB of memory from the remaining resources on the
            container instance, but also allow the container to consume more memory resources when
            needed.

            The Docker daemon reserves a minimum of 4 MiB of memory for a container, so you should
            not specify fewer than 4 MiB of memory for your containers.

          - **links** *(list) --*

            The ``links`` parameter allows containers to communicate with each other without the
            need for port mappings. This parameter is only supported if the network mode of a task
            definition is ``bridge`` . The ``name:internalName`` construct is analogous to
            ``name:alias`` in Docker links. Up to 255 letters (uppercase and lowercase), numbers,
            and hyphens are allowed. For more information about linking Docker containers, go to
            `Legacy container links <https://docs.docker.com/network/links/>`__ in the Docker
            documentation. This parameter maps to ``Links`` in the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--link``
            option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

            .. note::

              This parameter is not supported for Windows containers.

            .. warning::

              Containers that are collocated on a single container instance may be able to
              communicate with each other without requiring links or host port mappings. Network
              isolation is achieved on the container instance using security groups and VPC
              settings.

            - *(string) --*

          - **portMappings** *(list) --*

            The list of port mappings for the container. Port mappings allow containers to access
            ports on the host container instance to send or receive traffic.

            For task definitions that use the ``awsvpc`` network mode, you should only specify the
            ``containerPort`` . The ``hostPort`` can be left blank or it must be the same value as
            the ``containerPort`` .

            Port mappings on Windows use the ``NetNAT`` gateway address rather than ``localhost`` .
            There is no loopback for port mappings on Windows, so you cannot access a container's
            mapped port from the host itself.

            This parameter maps to ``PortBindings`` in the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--publish``
            option to `docker run <https://docs.docker.com/engine/reference/run/>`__ . If the
            network mode of a task definition is set to ``none`` , then you can't specify port
            mappings. If the network mode of a task definition is set to ``host`` , then host ports
            must either be undefined or they must match the container port in the port mapping.

            .. note::

              After a task reaches the ``RUNNING`` status, manual and automatic host and container
              port assignments are visible in the **Network Bindings** section of a container
              description for a selected task in the Amazon ECS console. The assignments are also
              visible in the ``networkBindings`` section  DescribeTasks responses.

            - *(dict) --*

              Port mappings allow containers to access ports on the host container instance to send
              or receive traffic. Port mappings are specified as part of the container definition.

              If you are using containers in a task with the ``awsvpc`` or ``host`` network mode,
              exposed ports should be specified using ``containerPort`` . The ``hostPort`` can be
              left blank or it must be the same value as the ``containerPort`` .

              After a task reaches the ``RUNNING`` status, manual and automatic host and container
              port assignments are visible in the ``networkBindings`` section of  DescribeTasks API
              responses.

              - **containerPort** *(integer) --*

                The port number on the container that is bound to the user-specified or
                automatically assigned host port.

                If you are using containers in a task with the ``awsvpc`` or ``host`` network mode,
                exposed ports should be specified using ``containerPort`` .

                If you are using containers in a task with the ``bridge`` network mode and you
                specify a container port and not a host port, your container automatically receives
                a host port in the ephemeral port range. For more information, see ``hostPort`` .
                Port mappings that are automatically assigned in this way do not count toward the
                100 reserved ports limit of a container instance.

                .. warning::

                  You cannot expose the same container port for multiple protocols. An error will
                  be returned if this is attempted.

              - **hostPort** *(integer) --*

                The port number on the container instance to reserve for your container.

                If you are using containers in a task with the ``awsvpc`` or ``host`` network mode,
                the ``hostPort`` can either be left blank or set to the same value as the
                ``containerPort`` .

                If you are using containers in a task with the ``bridge`` network mode, you can
                specify a non-reserved host port for your container port mapping, or you can omit
                the ``hostPort`` (or set it to ``0`` ) while specifying a ``containerPort`` and
                your container automatically receives a port in the ephemeral port range for your
                container instance operating system and Docker version.

                The default ephemeral port range for Docker version 1.6.0 and later is listed on
                the instance under ``/proc/sys/net/ipv4/ip_local_port_range`` . If this kernel
                parameter is unavailable, the default ephemeral port range from 49153 through 65535
                is used. Do not attempt to specify a host port in the ephemeral port range as these
                are reserved for automatic assignment. In general, ports below 32768 are outside of
                the ephemeral port range.

                .. note::

                  The default ephemeral port range from 49153 through 65535 is always used for
                  Docker versions before 1.6.0.

                The default reserved ports are 22 for SSH, the Docker ports 2375 and 2376, and the
                Amazon ECS container agent ports 51678-51680. Any host port that was previously
                specified in a running task is also reserved while the task is running (after a
                task stops, the host port is released). The current reserved ports are displayed in
                the ``remainingResources`` of  DescribeContainerInstances output. A container
                instance can have up to 100 reserved ports at a time, including the default
                reserved ports. Automatically assigned ports don't count toward the 100 reserved
                ports limit.

              - **protocol** *(string) --*

                The protocol used for the port mapping. Valid values are ``tcp`` and ``udp`` . The
                default is ``tcp`` .

          - **essential** *(boolean) --*

            If the ``essential`` parameter of a container is marked as ``true`` , and that
            container fails or stops for any reason, all other containers that are part of the task
            are stopped. If the ``essential`` parameter of a container is marked as ``false`` ,
            then its failure does not affect the rest of the containers in a task. If this
            parameter is omitted, a container is assumed to be essential.

            All tasks must have at least one essential container. If you have an application that
            is composed of multiple containers, you should group containers that are used for a
            common purpose into components, and separate the different components into multiple
            task definitions. For more information, see `Application Architecture
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/application_architecture.html>`__
            in the *Amazon Elastic Container Service Developer Guide* .

          - **entryPoint** *(list) --*

            .. warning::

              Early versions of the Amazon ECS container agent do not properly handle
              ``entryPoint`` parameters. If you have problems using ``entryPoint`` , update your
              container agent or enter your commands and arguments as ``command`` array items
              instead.

            The entry point that is passed to the container. This parameter maps to ``Entrypoint``
            in the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
            ``--entrypoint`` option to `docker run
            <https://docs.docker.com/engine/reference/run/>`__ . For more information, see
            `https\\://docs.docker.com/engine/reference/builder/#entrypoint
            <https://docs.docker.com/engine/reference/builder/#entrypoint>`__ .

            - *(string) --*

          - **command** *(list) --*

            The command that is passed to the container. This parameter maps to ``Cmd`` in the
            `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``COMMAND``
            parameter to `docker run <https://docs.docker.com/engine/reference/run/>`__ . For more
            information, see `https\\://docs.docker.com/engine/reference/builder/#cmd
            <https://docs.docker.com/engine/reference/builder/#cmd>`__ . If there are multiple
            arguments, each argument should be a separated string in the array.

            - *(string) --*

          - **environment** *(list) --*

            The environment variables to pass to a container. This parameter maps to ``Env`` in the
            `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--env``
            option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

            .. warning::

              We do not recommend using plaintext environment variables for sensitive information,
              such as credential data.

            - *(dict) --*

              A key-value pair object.

              - **name** *(string) --*

                The name of the key-value pair. For environment variables, this is the name of the
                environment variable.

              - **value** *(string) --*

                The value of the key-value pair. For environment variables, this is the value of
                the environment variable.

          - **mountPoints** *(list) --*

            The mount points for data volumes in your container.

            This parameter maps to ``Volumes`` in the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--volume``
            option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

            Windows containers can mount whole directories on the same drive as
            ``$env:ProgramData`` . Windows containers cannot mount directories on a different
            drive, and mount point cannot be across drives.

            - *(dict) --*

              Details on a volume mount point that is used in a container definition.

              - **sourceVolume** *(string) --*

                The name of the volume to mount. Must be a volume name referenced in the ``name``
                parameter of task definition ``volume`` .

              - **containerPath** *(string) --*

                The path on the container to mount the host volume at.

              - **readOnly** *(boolean) --*

                If this value is ``true`` , the container has read-only access to the volume. If
                this value is ``false`` , then the container can write to the volume. The default
                value is ``false`` .

          - **volumesFrom** *(list) --*

            Data volumes to mount from another container. This parameter maps to ``VolumesFrom`` in
            the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
            ``--volumes-from`` option to `docker run
            <https://docs.docker.com/engine/reference/run/>`__ .

            - *(dict) --*

              Details on a data volume from another container in the same task definition.

              - **sourceContainer** *(string) --*

                The name of another container within the same task definition from which to mount
                volumes.

              - **readOnly** *(boolean) --*

                If this value is ``true`` , the container has read-only access to the volume. If
                this value is ``false`` , then the container can write to the volume. The default
                value is ``false`` .

          - **linuxParameters** *(dict) --*

            Linux-specific modifications that are applied to the container, such as Linux kernel
            capabilities. For more information see  KernelCapabilities .

            .. note::

              This parameter is not supported for Windows containers.

            - **capabilities** *(dict) --*

              The Linux capabilities for the container that are added to or dropped from the
              default configuration provided by Docker.

              .. note::

                If you are using tasks that use the Fargate launch type, ``capabilities`` is
                supported but the ``add`` parameter is not supported.

              - **add** *(list) --*

                The Linux capabilities for the container that have been added to the default
                configuration provided by Docker. This parameter maps to ``CapAdd`` in the `Create
                a container
                <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of
                the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
                ``--cap-add`` option to `docker run
                <https://docs.docker.com/engine/reference/run/>`__ .

                .. note::

                  If you are using tasks that use the Fargate launch type, the ``add`` parameter is
                  not supported.

                Valid values: ``"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" | "BLOCK_SUSPEND" | "CHOWN"
                | "DAC_OVERRIDE" | "DAC_READ_SEARCH" | "FOWNER" | "FSETID" | "IPC_LOCK" |
                "IPC_OWNER" | "KILL" | "LEASE" | "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" |
                "MKNOD" | "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" |
                "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT" |
                "SYS_CHROOT" | "SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" | "SYS_PTRACE" | "SYS_RAWIO"
                | "SYS_RESOURCE" | "SYS_TIME" | "SYS_TTY_CONFIG" | "SYSLOG" | "WAKE_ALARM"``

                - *(string) --*

              - **drop** *(list) --*

                The Linux capabilities for the container that have been removed from the default
                configuration provided by Docker. This parameter maps to ``CapDrop`` in the `Create
                a container
                <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of
                the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
                ``--cap-drop`` option to `docker run
                <https://docs.docker.com/engine/reference/run/>`__ .

                Valid values: ``"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" | "BLOCK_SUSPEND" | "CHOWN"
                | "DAC_OVERRIDE" | "DAC_READ_SEARCH" | "FOWNER" | "FSETID" | "IPC_LOCK" |
                "IPC_OWNER" | "KILL" | "LEASE" | "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" |
                "MKNOD" | "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" |
                "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT" |
                "SYS_CHROOT" | "SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" | "SYS_PTRACE" | "SYS_RAWIO"
                | "SYS_RESOURCE" | "SYS_TIME" | "SYS_TTY_CONFIG" | "SYSLOG" | "WAKE_ALARM"``

                - *(string) --*

            - **devices** *(list) --*

              Any host devices to expose to the container. This parameter maps to ``Devices`` in
              the `Create a container
              <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of
              the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
              ``--device`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__
              .

              .. note::

                If you are using tasks that use the Fargate launch type, the ``devices`` parameter
                is not supported.

              - *(dict) --*

                An object representing a container instance host device.

                - **hostPath** *(string) --*

                  The path for the device on the host container instance.

                - **containerPath** *(string) --*

                  The path inside the container at which to expose the host device.

                - **permissions** *(list) --*

                  The explicit permissions to provide to the container for the device. By default,
                  the container has permissions for ``read`` , ``write`` , and ``mknod`` for the
                  device.

                  - *(string) --*

            - **initProcessEnabled** *(boolean) --*

              Run an ``init`` process inside the container that forwards signals and reaps
              processes. This parameter maps to the ``--init`` option to `docker run
              <https://docs.docker.com/engine/reference/run/>`__ . This parameter requires version
              1.25 of the Docker Remote API or greater on your container instance. To check the
              Docker Remote API version on your container instance, log in to your container
              instance and run the following command: ``sudo docker version --format
              '{{.Server.APIVersion}}'``

            - **sharedMemorySize** *(integer) --*

              The value for the size (in MiB) of the ``/dev/shm`` volume. This parameter maps to
              the ``--shm-size`` option to `docker run
              <https://docs.docker.com/engine/reference/run/>`__ .

              .. note::

                If you are using tasks that use the Fargate launch type, the ``sharedMemorySize``
                parameter is not supported.

            - **tmpfs** *(list) --*

              The container path, mount options, and size (in MiB) of the tmpfs mount. This
              parameter maps to the ``--tmpfs`` option to `docker run
              <https://docs.docker.com/engine/reference/run/>`__ .

              .. note::

                If you are using tasks that use the Fargate launch type, the ``tmpfs`` parameter is
                not supported.

              - *(dict) --*

                The container path, mount options, and size of the tmpfs mount.

                - **containerPath** *(string) --*

                  The absolute file path where the tmpfs volume is to be mounted.

                - **size** *(integer) --*

                  The size (in MiB) of the tmpfs volume.

                - **mountOptions** *(list) --*

                  The list of tmpfs volume mount options.

                  Valid values: ``"defaults" | "ro" | "rw" | "suid" | "nosuid" | "dev" | "nodev" |
                  "exec" | "noexec" | "sync" | "async" | "dirsync" | "remount" | "mand" | "nomand"
                  | "atime" | "noatime" | "diratime" | "nodiratime" | "bind" | "rbind" |
                  "unbindable" | "runbindable" | "private" | "rprivate" | "shared" | "rshared" |
                  "slave" | "rslave" | "relatime" | "norelatime" | "strictatime" | "nostrictatime"
                  | "mode" | "uid" | "gid" | "nr_inodes" | "nr_blocks" | "mpol"``

                  - *(string) --*

            - **maxSwap** *(integer) --*

              The total amount of swap memory (in MiB) a container can use. This parameter will be
              translated to the ``--memory-swap`` option to `docker run
              <https://docs.docker.com/engine/reference/run/>`__ where the value would be the sum
              of the container memory plus the ``maxSwap`` value.

              If a ``maxSwap`` value of ``0`` is specified, the container will not use swap.
              Accepted values are ``0`` or any positive integer. If the ``maxSwap`` parameter is
              omitted, the container will use the swap configuration for the container instance it
              is running on. A ``maxSwap`` value must be set for the ``swappiness`` parameter to be
              used.

              .. note::

                If you are using tasks that use the Fargate launch type, the ``maxSwap`` parameter
                is not supported.

            - **swappiness** *(integer) --*

              This allows you to tune a container's memory swappiness behavior. A ``swappiness``
              value of ``0`` will cause swapping to not happen unless absolutely necessary. A
              ``swappiness`` value of ``100`` will cause pages to be swapped very aggressively.
              Accepted values are whole numbers between ``0`` and ``100`` . If the ``swappiness``
              parameter is not specified, a default value of ``60`` is used. If a value is not
              specified for ``maxSwap`` then this parameter is ignored. This parameter maps to the
              ``--memory-swappiness`` option to `docker run
              <https://docs.docker.com/engine/reference/run/>`__ .

              .. note::

                If you are using tasks that use the Fargate launch type, the ``swappiness``
                parameter is not supported.

          - **secrets** *(list) --*

            The secrets to pass to the container. For more information, see `Specifying Sensitive
            Data
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html>`__
            in the *Amazon Elastic Container Service Developer Guide* .

            - *(dict) --*

              An object representing the secret to expose to your container. Secrets can be exposed
              to a container in the following ways:

              * To inject sensitive data into your containers as environment variables, use the
              ``secrets`` container definition parameter.

              * To reference sensitive information in the log configuration of a container, use the
              ``secretOptions`` container definition parameter.

              For more information, see `Specifying Sensitive Data
              <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html>`__
              in the *Amazon Elastic Container Service Developer Guide* .

              - **name** *(string) --*

                The name of the secret.

              - **valueFrom** *(string) --*

                The secret to expose to the container. The supported values are either the full ARN
                of the AWS Secrets Manager secret or the full ARN of the parameter in the AWS
                Systems Manager Parameter Store.

                .. note::

                  If the AWS Systems Manager Parameter Store parameter exists in the same Region as
                  the task you are launching, then you can use either the full ARN or name of the
                  parameter. If the parameter exists in a different Region, then the full ARN must
                  be specified.

          - **dependsOn** *(list) --*

            The dependencies defined for container startup and shutdown. A container can contain
            multiple dependencies. When a dependency is defined for container startup, for
            container shutdown it is reversed.

            For tasks using the EC2 launch type, the container instances require at least version
            1.26.0 of the container agent to enable container dependencies. However, we recommend
            using the latest container agent version. For information about checking your agent
            version and updating to the latest version, see `Updating the Amazon ECS Container
            Agent
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html>`__
            in the *Amazon Elastic Container Service Developer Guide* . If you are using an Amazon
            ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the
            ``ecs-init`` package. If your container instances are launched from version
            ``20190301`` or later, then they contain the required versions of the container agent
            and ``ecs-init`` . For more information, see `Amazon ECS-optimized Linux AMI
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html>`__
            in the *Amazon Elastic Container Service Developer Guide* .

            For tasks using the Fargate launch type, the task or service requires platform version
            ``1.3.0`` or later.

            - *(dict) --*

              The dependencies defined for container startup and shutdown. A container can contain
              multiple dependencies. When a dependency is defined for container startup, for
              container shutdown it is reversed.

              Your Amazon ECS container instances require at least version 1.26.0 of the container
              agent to enable container dependencies. However, we recommend using the latest
              container agent version. For information about checking your agent version and
              updating to the latest version, see `Updating the Amazon ECS Container Agent
              <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html>`__
              in the *Amazon Elastic Container Service Developer Guide* . If you are using an
              Amazon ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the
              ``ecs-init`` package. If your container instances are launched from version
              ``20190301`` or later, then they contain the required versions of the container agent
              and ``ecs-init`` . For more information, see `Amazon ECS-optimized Linux AMI
              <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html>`__
              in the *Amazon Elastic Container Service Developer Guide* .

              .. note::

                If you are using tasks that use the Fargate launch type, container dependency
                parameters are not supported.

              - **containerName** *(string) --*

                The name of a container.

              - **condition** *(string) --*

                The dependency condition of the container. The following are the available
                conditions and their behavior:

                * ``START`` - This condition emulates the behavior of links and volumes today. It
                validates that a dependent container is started before permitting other containers
                to start.

                * ``COMPLETE`` - This condition validates that a dependent container runs to
                completion (exits) before permitting other containers to start. This can be useful
                for nonessential containers that run a script and then exit.

                * ``SUCCESS`` - This condition is the same as ``COMPLETE`` , but it also requires
                that the container exits with a ``zero`` status.

                * ``HEALTHY`` - This condition validates that the dependent container passes its
                Docker health check before permitting other containers to start. This requires that
                the dependent container has health checks configured. This condition is confirmed
                only at task startup.

          - **startTimeout** *(integer) --*

            Time duration (in seconds) to wait before giving up on resolving dependencies for a
            container. For example, you specify two containers in a task definition with containerA
            having a dependency on containerB reaching a ``COMPLETE`` , ``SUCCESS`` , or
            ``HEALTHY`` status. If a ``startTimeout`` value is specified for containerB and it does
            not reach the desired status within that time then containerA will give up and not
            start. This results in the task transitioning to a ``STOPPED`` state.

            For tasks using the EC2 launch type, the container instances require at least version
            1.26.0 of the container agent to enable a container start timeout value. However, we
            recommend using the latest container agent version. For information about checking your
            agent version and updating to the latest version, see `Updating the Amazon ECS
            Container Agent
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html>`__
            in the *Amazon Elastic Container Service Developer Guide* . If you are using an Amazon
            ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the
            ``ecs-init`` package. If your container instances are launched from version
            ``20190301`` or later, then they contain the required versions of the container agent
            and ``ecs-init`` . For more information, see `Amazon ECS-optimized Linux AMI
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html>`__
            in the *Amazon Elastic Container Service Developer Guide* .

            For tasks using the Fargate launch type, the task or service requires platform version
            ``1.3.0`` or later.

          - **stopTimeout** *(integer) --*

            Time duration (in seconds) to wait before the container is forcefully killed if it
            doesn't exit normally on its own.

            For tasks using the Fargate launch type, the max ``stopTimeout`` value is 2 minutes and
            the task or service requires platform version ``1.3.0`` or later.

            For tasks using the EC2 launch type, the stop timeout value for the container takes
            precedence over the ``ECS_CONTAINER_STOP_TIMEOUT`` container agent configuration
            parameter, if used. Container instances require at least version 1.26.0 of the
            container agent to enable a container stop timeout value. However, we recommend using
            the latest container agent version. For information about checking your agent version
            and updating to the latest version, see `Updating the Amazon ECS Container Agent
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html>`__
            in the *Amazon Elastic Container Service Developer Guide* . If you are using an Amazon
            ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the
            ``ecs-init`` package. If your container instances are launched from version
            ``20190301`` or later, then they contain the required versions of the container agent
            and ``ecs-init`` . For more information, see `Amazon ECS-optimized Linux AMI
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html>`__
            in the *Amazon Elastic Container Service Developer Guide* .

          - **hostname** *(string) --*

            The hostname to use for your container. This parameter maps to ``Hostname`` in the
            `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
            ``--hostname`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__
            .

            .. note::

              The ``hostname`` parameter is not supported if you are using the ``awsvpc`` network
              mode.

          - **user** *(string) --*

            The user name to use inside the container. This parameter maps to ``User`` in the
            `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--user``
            option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

            You can use the following formats. If specifying a UID or GID, you must specify it as a
            positive integer.

            * ``user``

            * ``user:group``

            * ``uid``

            * ``uid:gid``

            * ``user:gid``

            * ``uid:group``

            .. note::

              This parameter is not supported for Windows containers.

          - **workingDirectory** *(string) --*

            The working directory in which to run commands inside the container. This parameter
            maps to ``WorkingDir`` in the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--workdir``
            option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

          - **disableNetworking** *(boolean) --*

            When this parameter is true, networking is disabled within the container. This
            parameter maps to ``NetworkDisabled`` in the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ .

            .. note::

              This parameter is not supported for Windows containers.

          - **privileged** *(boolean) --*

            When this parameter is true, the container is given elevated privileges on the host
            container instance (similar to the ``root`` user). This parameter maps to
            ``Privileged`` in the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
            ``--privileged`` option to `docker run
            <https://docs.docker.com/engine/reference/run/>`__ .

            .. note::

              This parameter is not supported for Windows containers or tasks using the Fargate
              launch type.

          - **readonlyRootFilesystem** *(boolean) --*

            When this parameter is true, the container is given read-only access to its root file
            system. This parameter maps to ``ReadonlyRootfs`` in the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
            ``--read-only`` option to `docker run
            <https://docs.docker.com/engine/reference/run/>`__ .

            .. note::

              This parameter is not supported for Windows containers.

          - **dnsServers** *(list) --*

            A list of DNS servers that are presented to the container. This parameter maps to
            ``Dns`` in the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--dns``
            option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

            .. note::

              This parameter is not supported for Windows containers.

            - *(string) --*

          - **dnsSearchDomains** *(list) --*

            A list of DNS search domains that are presented to the container. This parameter maps
            to ``DnsSearch`` in the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
            ``--dns-search`` option to `docker run
            <https://docs.docker.com/engine/reference/run/>`__ .

            .. note::

              This parameter is not supported for Windows containers.

            - *(string) --*

          - **extraHosts** *(list) --*

            A list of hostnames and IP address mappings to append to the ``/etc/hosts`` file on the
            container. This parameter maps to ``ExtraHosts`` in the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
            ``--add-host`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__
            .

            .. note::

              This parameter is not supported for Windows containers or tasks that use the
              ``awsvpc`` network mode.

            - *(dict) --*

              Hostnames and IP address entries that are added to the ``/etc/hosts`` file of a
              container via the ``extraHosts`` parameter of its  ContainerDefinition .

              - **hostname** *(string) --*

                The hostname to use in the ``/etc/hosts`` entry.

              - **ipAddress** *(string) --*

                The IP address to use in the ``/etc/hosts`` entry.

          - **dockerSecurityOptions** *(list) --*

            A list of strings to provide custom labels for SELinux and AppArmor multi-level
            security systems. This field is not valid for containers in tasks using the Fargate
            launch type.

            This parameter maps to ``SecurityOpt`` in the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
            ``--security-opt`` option to `docker run
            <https://docs.docker.com/engine/reference/run/>`__ .

            .. note::

              The Amazon ECS container agent running on a container instance must register with the
              ``ECS_SELINUX_CAPABLE=true`` or ``ECS_APPARMOR_CAPABLE=true`` environment variables
              before containers placed on that instance can use these security options. For more
              information, see `Amazon ECS Container Agent Configuration
              <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html>`__
              in the *Amazon Elastic Container Service Developer Guide* .

            .. note::

              This parameter is not supported for Windows containers.

            - *(string) --*

          - **interactive** *(boolean) --*

            When this parameter is ``true`` , this allows you to deploy containerized applications
            that require ``stdin`` or a ``tty`` to be allocated. This parameter maps to
            ``OpenStdin`` in the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
            ``--interactive`` option to `docker run
            <https://docs.docker.com/engine/reference/run/>`__ .

          - **pseudoTerminal** *(boolean) --*

            When this parameter is ``true`` , a TTY is allocated. This parameter maps to ``Tty`` in
            the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--tty``
            option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

          - **dockerLabels** *(dict) --*

            A key/value map of labels to add to the container. This parameter maps to ``Labels`` in
            the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--label``
            option to `docker run <https://docs.docker.com/engine/reference/run/>`__ . This
            parameter requires version 1.18 of the Docker Remote API or greater on your container
            instance. To check the Docker Remote API version on your container instance, log in to
            your container instance and run the following command: ``sudo docker version --format
            '{{.Server.APIVersion}}'``

            - *(string) --*

              - *(string) --*

          - **ulimits** *(list) --*

            A list of ``ulimits`` to set in the container. This parameter maps to ``Ulimits`` in
            the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--ulimit``
            option to `docker run <https://docs.docker.com/engine/reference/run/>`__ . Valid naming
            values are displayed in the  Ulimit data type. This parameter requires version 1.18 of
            the Docker Remote API or greater on your container instance. To check the Docker Remote
            API version on your container instance, log in to your container instance and run the
            following command: ``sudo docker version --format '{{.Server.APIVersion}}'``

            .. note::

              This parameter is not supported for Windows containers.

            - *(dict) --*

              The ``ulimit`` settings to pass to the container.

              - **name** *(string) --*

                The ``type`` of the ``ulimit`` .

              - **softLimit** *(integer) --*

                The soft limit for the ulimit type.

              - **hardLimit** *(integer) --*

                The hard limit for the ulimit type.

          - **logConfiguration** *(dict) --*

            The log configuration specification for the container.

            This parameter maps to ``LogConfig`` in the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
            ``--log-driver`` option to `docker run
            <https://docs.docker.com/engine/reference/run/>`__ . By default, containers use the
            same logging driver that the Docker daemon uses. However the container may use a
            different logging driver than the Docker daemon by specifying a log driver with this
            parameter in the container definition. To use a different logging driver for a
            container, the log system must be configured properly on the container instance (or on
            a different log server for remote logging options). For more information on the options
            for different supported log drivers, see `Configure logging drivers
            <https://docs.docker.com/engine/admin/logging/overview/>`__ in the Docker documentation.

            .. note::

              Amazon ECS currently supports a subset of the logging drivers available to the Docker
              daemon (shown in the  LogConfiguration data type). Additional log drivers may be
              available in future releases of the Amazon ECS container agent.

            This parameter requires version 1.18 of the Docker Remote API or greater on your
            container instance. To check the Docker Remote API version on your container instance,
            log in to your container instance and run the following command: ``sudo docker version
            --format '{{.Server.APIVersion}}'``

            .. note::

              The Amazon ECS container agent running on a container instance must register the
              logging drivers available on that instance with the ``ECS_AVAILABLE_LOGGING_DRIVERS``
              environment variable before containers placed on that instance can use these log
              configuration options. For more information, see `Amazon ECS Container Agent
              Configuration
              <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html>`__
              in the *Amazon Elastic Container Service Developer Guide* .

            - **logDriver** *(string) --*

              The log driver to use for the container. The valid values listed for this parameter
              are log drivers that the Amazon ECS container agent can communicate with by default.

              For tasks using the Fargate launch type, the supported log drivers are ``awslogs``
              and ``splunk`` .

              For tasks using the EC2 launch type, the supported log drivers are ``awslogs`` ,
              ``fluentd`` , ``gelf`` , ``json-file`` , ``journald`` , ``logentries`` , ``syslog`` ,
              and ``splunk`` .

              For more information about using the ``awslogs`` log driver, see `Using the awslogs
              Log Driver
              <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_awslogs.html>`__
              in the *Amazon Elastic Container Service Developer Guide* .

              .. note::

                If you have a custom driver that is not listed above that you would like to work
                with the Amazon ECS container agent, you can fork the Amazon ECS container agent
                project that is `available on GitHub <https://github.com/aws/amazon-ecs-agent>`__
                and customize it to work with that driver. We encourage you to submit pull requests
                for changes that you would like to have included. However, Amazon Web Services does
                not currently support running modified copies of this software.

              This parameter requires version 1.18 of the Docker Remote API or greater on your
              container instance. To check the Docker Remote API version on your container
              instance, log in to your container instance and run the following command: ``sudo
              docker version --format '{{.Server.APIVersion}}'``

            - **options** *(dict) --*

              The configuration options to send to the log driver. This parameter requires version
              1.19 of the Docker Remote API or greater on your container instance. To check the
              Docker Remote API version on your container instance, log in to your container
              instance and run the following command: ``sudo docker version --format
              '{{.Server.APIVersion}}'``

              - *(string) --*

                - *(string) --*

            - **secretOptions** *(list) --*

              The secrets to pass to the log configuration. For more information, see `Specifying
              Sensitive Data
              <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html>`__
              in the *Amazon Elastic Container Service Developer Guide* .

              - *(dict) --*

                An object representing the secret to expose to your container. Secrets can be
                exposed to a container in the following ways:

                * To inject sensitive data into your containers as environment variables, use the
                ``secrets`` container definition parameter.

                * To reference sensitive information in the log configuration of a container, use
                the ``secretOptions`` container definition parameter.

                For more information, see `Specifying Sensitive Data
                <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html>`__
                in the *Amazon Elastic Container Service Developer Guide* .

                - **name** *(string) --*

                  The name of the secret.

                - **valueFrom** *(string) --*

                  The secret to expose to the container. The supported values are either the full
                  ARN of the AWS Secrets Manager secret or the full ARN of the parameter in the AWS
                  Systems Manager Parameter Store.

                  .. note::

                    If the AWS Systems Manager Parameter Store parameter exists in the same Region
                    as the task you are launching, then you can use either the full ARN or name of
                    the parameter. If the parameter exists in a different Region, then the full ARN
                    must be specified.

          - **healthCheck** *(dict) --*

            The health check command and associated configuration parameters for the container.
            This parameter maps to ``HealthCheck`` in the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
            ``HEALTHCHECK`` parameter of `docker run
            <https://docs.docker.com/engine/reference/run/>`__ .

            - **command** *(list) --*

              A string array representing the command that the container runs to determine if it is
              healthy. The string array must start with ``CMD`` to execute the command arguments
              directly, or ``CMD-SHELL`` to run the command with the container's default shell. For
              example:

               ``[ "CMD-SHELL", "curl -f http://localhost/ || exit 1" ]``

              An exit code of 0 indicates success, and non-zero exit code indicates failure. For
              more information, see ``HealthCheck`` in the `Create a container
              <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of
              the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ .

              - *(string) --*

            - **interval** *(integer) --*

              The time period in seconds between each health check execution. You may specify
              between 5 and 300 seconds. The default value is 30 seconds.

            - **timeout** *(integer) --*

              The time period in seconds to wait for a health check to succeed before it is
              considered a failure. You may specify between 2 and 60 seconds. The default value is
              5.

            - **retries** *(integer) --*

              The number of times to retry a failed health check before the container is considered
              unhealthy. You may specify between 1 and 10 retries. The default value is 3.

            - **startPeriod** *(integer) --*

              The optional grace period within which to provide containers time to bootstrap before
              failed health checks count towards the maximum number of retries. You may specify
              between 0 and 300 seconds. The ``startPeriod`` is disabled by default.

              .. note::

                If a health check succeeds within the ``startPeriod`` , then the container is
                considered healthy and any subsequent failures count toward the maximum number of
                retries.

          - **systemControls** *(list) --*

            A list of namespaced kernel parameters to set in the container. This parameter maps to
            ``Sysctls`` in the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--sysctl``
            option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

            .. note::

              It is not recommended that you specify network-related ``systemControls`` parameters
              for multiple containers in a single task that also uses either the ``awsvpc`` or
              ``host`` network modes. For tasks that use the ``awsvpc`` network mode, the container
              that is started last determines which ``systemControls`` parameters take effect. For
              tasks that use the ``host`` network mode, it changes the container instance's
              namespaced kernel parameters as well as the containers.

            - *(dict) --*

              A list of namespaced kernel parameters to set in the container. This parameter maps
              to ``Sysctls`` in the `Create a container
              <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of
              the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
              ``--sysctl`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__
              .

              It is not recommended that you specify network-related ``systemControls`` parameters
              for multiple containers in a single task that also uses either the ``awsvpc`` or
              ``host`` network mode for the following reasons:

              * For tasks that use the ``awsvpc`` network mode, if you set ``systemControls`` for
              any container, it applies to all containers in the task. If you set different
              ``systemControls`` for multiple containers in a single task, the container that is
              started last determines which ``systemControls`` take effect.

              * For tasks that use the ``host`` network mode, the ``systemControls`` parameter
              applies to the container instance's kernel parameter as well as that of all
              containers of any tasks running on that container instance.

              - **namespace** *(string) --*

                The namespaced kernel parameter for which to set a ``value`` .

              - **value** *(string) --*

                The value for the namespaced kernel parameter specified in ``namespace`` .

          - **resourceRequirements** *(list) --*

            The type and amount of a resource to assign to a container. The only supported resource
            is a GPU.

            - *(dict) --*

              The type and amount of a resource to assign to a container. The supported resource
              types are GPUs and Elastic Inference accelerators. For more information, see `Working
              with GPUs on Amazon ECS
              <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-gpu.html>`__ or
              `Working with Amazon Elastic Inference on Amazon ECS
              <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in the
              *Amazon Elastic Container Service Developer Guide*

              - **value** *(string) --*

                The value for the specified resource type.

                If the ``GPU`` type is used, the value is the number of physical ``GPUs`` the
                Amazon ECS container agent will reserve for the container. The number of GPUs
                reserved for all containers in a task should not exceed the number of available
                GPUs on the container instance the task is launched on.

                If the ``InferenceAccelerator`` type is used, the ``value`` should match the
                ``deviceName`` for an  InferenceAccelerator specified in a task definition.

              - **type** *(string) --*

                The type of resource to assign to a container. The supported values are ``GPU`` or
                ``InferenceAccelerator`` .

          - **firelensConfiguration** *(dict) --*

            The FireLens configuration for the container. This is used to specify and configure a
            log router for container logs. For more information, see `Custom Log Routing
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html>`__ in
            the *Amazon Elastic Container Service Developer Guide* .

            - **type** *(string) --*

              The log router to use. The valid values are ``fluentd`` or ``fluentbit`` .

            - **options** *(dict) --*

              The options to use when configuring the log router. This field is optional and can be
              used to add additional metadata, such as the task, task definition, cluster, and
              container instance details to the log event. If specified, the syntax to use is
              ``"options":{"enable-ecs-log-metadata":"true|false"}`` .

              - *(string) --*

                - *(string) --*

      - **family** *(string) --*

        The name of a family that this task definition is registered to. A family groups multiple
        versions of a task definition. Amazon ECS gives the first task definition that you
        registered to a family a revision number of 1. Amazon ECS gives sequential revision numbers
        to each task definition that you add.

      - **taskRoleArn** *(string) --*

        The short name or full Amazon Resource Name (ARN) of the AWS Identity and Access Management
        (IAM) role that grants containers in the task permission to call AWS APIs on your behalf.
        For more information, see `Amazon ECS Task Role
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_IAM_role.html>`__ in the
        *Amazon Elastic Container Service Developer Guide* .

        IAM roles for tasks on Windows require that the ``-EnableTaskIAMRole`` option is set when
        you launch the Amazon ECS-optimized Windows AMI. Your containers must also run some
        configuration code in order to take advantage of the feature. For more information, see
        `Windows IAM Roles for Tasks
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/windows_task_IAM_roles.html>`__
        in the *Amazon Elastic Container Service Developer Guide* .

      - **executionRoleArn** *(string) --*

        The Amazon Resource Name (ARN) of the task execution role that containers in this task can
        assume. All containers in this task are granted the permissions that are specified in this
        role.

      - **networkMode** *(string) --*

        The Docker networking mode to use for the containers in the task. The valid values are
        ``none`` , ``bridge`` , ``awsvpc`` , and ``host`` . The default Docker network mode is
        ``bridge`` . If you are using the Fargate launch type, the ``awsvpc`` network mode is
        required. If you are using the EC2 launch type, any network mode can be used. If the
        network mode is set to ``none`` , you cannot specify port mappings in your container
        definitions, and the tasks containers do not have external connectivity. The ``host`` and
        ``awsvpc`` network modes offer the highest networking performance for containers because
        they use the EC2 network stack instead of the virtualized network stack provided by the
        ``bridge`` mode.

        With the ``host`` and ``awsvpc`` network modes, exposed container ports are mapped directly
        to the corresponding host port (for the ``host`` network mode) or the attached elastic
        network interface port (for the ``awsvpc`` network mode), so you cannot take advantage of
        dynamic host port mappings.

        If the network mode is ``awsvpc`` , the task is allocated an elastic network interface, and
        you must specify a  NetworkConfiguration value when you create a service or run a task with
        the task definition. For more information, see `Task Networking
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html>`__ in
        the *Amazon Elastic Container Service Developer Guide* .

        .. note::

          Currently, only Amazon ECS-optimized AMIs, other Amazon Linux variants with the
          ``ecs-init`` package, or AWS Fargate infrastructure support the ``awsvpc`` network mode.

        If the network mode is ``host`` , you cannot run multiple instantiations of the same task
        on a single container instance when port mappings are used.

        Docker for Windows uses different network modes than Docker for Linux. When you register a
        task definition with Windows containers, you must not specify a network mode. If you use
        the console to register a task definition with Windows containers, you must choose the
        ``<default>`` network mode object.

        For more information, see `Network settings
        <https://docs.docker.com/engine/reference/run/#network-settings>`__ in the *Docker run
        reference* .

      - **revision** *(integer) --*

        The revision of the task in a particular family. The revision is a version number of a task
        definition in a family. When you register a task definition for the first time, the
        revision is ``1`` . Each time that you register a new revision of a task definition in the
        same family, the revision value always increases by one, even if you have deregistered
        previous revisions in this family.

      - **volumes** *(list) --*

        The list of volume definitions for the task.

        If your tasks are using the Fargate launch type, the ``host`` and ``sourcePath`` parameters
        are not supported.

        For more information about volume definition parameters and defaults, see `Amazon ECS Task
        Definitions
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definitions.html>`__ in
        the *Amazon Elastic Container Service Developer Guide* .

        - *(dict) --*

          A data volume used in a task definition. For tasks that use a Docker volume, specify a
          ``DockerVolumeConfiguration`` . For tasks that use a bind mount host volume, specify a
          ``host`` and optional ``sourcePath`` . For more information, see `Using Data Volumes in
          Tasks
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_data_volumes.html>`__ .

          - **name** *(string) --*

            The name of the volume. Up to 255 letters (uppercase and lowercase), numbers, and
            hyphens are allowed. This name is referenced in the ``sourceVolume`` parameter of
            container definition ``mountPoints`` .

          - **host** *(dict) --*

            This parameter is specified when you are using bind mount host volumes. Bind mount host
            volumes are supported when you are using either the EC2 or Fargate launch types. The
            contents of the ``host`` parameter determine whether your bind mount host volume
            persists on the host container instance and where it is stored. If the ``host``
            parameter is empty, then the Docker daemon assigns a host path for your data volume.
            However, the data is not guaranteed to persist after the containers associated with it
            stop running.

            Windows containers can mount whole directories on the same drive as
            ``$env:ProgramData`` . Windows containers cannot mount directories on a different
            drive, and mount point cannot be across drives. For example, you can mount
            ``C:\\my\\path:C:\\my\\path`` and ``D:\\:D:\\`` , but not ``D:\\my\\path:C:\\my\\path``
            or ``D:\\:C:\\my\\path`` .

            - **sourcePath** *(string) --*

              When the ``host`` parameter is used, specify a ``sourcePath`` to declare the path on
              the host container instance that is presented to the container. If this parameter is
              empty, then the Docker daemon has assigned a host path for you. If the ``host``
              parameter contains a ``sourcePath`` file location, then the data volume persists at
              the specified location on the host container instance until you delete it manually.
              If the ``sourcePath`` value does not exist on the host container instance, the Docker
              daemon creates it. If the location does exist, the contents of the source path folder
              are exported.

              If you are using the Fargate launch type, the ``sourcePath`` parameter is not
              supported.

          - **dockerVolumeConfiguration** *(dict) --*

            This parameter is specified when you are using Docker volumes. Docker volumes are only
            supported when you are using the EC2 launch type. Windows containers only support the
            use of the ``local`` driver. To use bind mounts, specify a ``host`` instead.

            - **scope** *(string) --*

              The scope for the Docker volume that determines its lifecycle. Docker volumes that
              are scoped to a ``task`` are automatically provisioned when the task starts and
              destroyed when the task stops. Docker volumes that are scoped as ``shared`` persist
              after the task stops.

            - **autoprovision** *(boolean) --*

              If this value is ``true`` , the Docker volume is created if it does not already exist.

              .. note::

                This field is only used if the ``scope`` is ``shared`` .

            - **driver** *(string) --*

              The Docker volume driver to use. The driver value must match the driver name provided
              by Docker because it is used for task placement. If the driver was installed using
              the Docker plugin CLI, use ``docker plugin ls`` to retrieve the driver name from your
              container instance. If the driver was installed using another method, use Docker
              plugin discovery to retrieve the driver name. For more information, see `Docker
              plugin discovery
              <https://docs.docker.com/engine/extend/plugin_api/#plugin-discovery>`__ . This
              parameter maps to ``Driver`` in the `Create a volume
              <https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate>`__ section of the
              `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
              ``xxdriver`` option to `docker volume create
              <https://docs.docker.com/engine/reference/commandline/volume_create/>`__ .

            - **driverOpts** *(dict) --*

              A map of Docker driver-specific options passed through. This parameter maps to
              ``DriverOpts`` in the `Create a volume
              <https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate>`__ section of the
              `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``xxopt``
              option to `docker volume create
              <https://docs.docker.com/engine/reference/commandline/volume_create/>`__ .

              - *(string) --*

                - *(string) --*

            - **labels** *(dict) --*

              Custom metadata to add to your Docker volume. This parameter maps to ``Labels`` in
              the `Create a volume
              <https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate>`__ section of the
              `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``xxlabel``
              option to `docker volume create
              <https://docs.docker.com/engine/reference/commandline/volume_create/>`__ .

              - *(string) --*

                - *(string) --*

      - **status** *(string) --*

        The status of the task definition.

      - **requiresAttributes** *(list) --*

        The container instance attributes required by your task. This field is not valid if you are
        using the Fargate launch type for your task.

        - *(dict) --*

          An attribute is a name-value pair associated with an Amazon ECS object. Attributes enable
          you to extend the Amazon ECS data model by adding custom metadata to your resources. For
          more information, see `Attributes
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html#attributes>`__
          in the *Amazon Elastic Container Service Developer Guide* .

          - **name** *(string) --*

            The name of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
            hyphens, underscores, and periods are allowed.

          - **value** *(string) --*

            The value of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
            hyphens, underscores, periods, at signs (@), forward slashes, colons, and spaces are
            allowed.

          - **targetType** *(string) --*

            The type of the target with which to attach the attribute. This parameter is required
            if you use the short form ID for a resource instead of the full ARN.

          - **targetId** *(string) --*

            The ID of the target. You can specify the short form ID for a resource or the full
            Amazon Resource Name (ARN).

      - **placementConstraints** *(list) --*

        An array of placement constraint objects to use for tasks. This field is not valid if you
        are using the Fargate launch type for your task.

        - *(dict) --*

          An object representing a constraint on task placement in the task definition. For more
          information, see `Task Placement Constraints
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

          .. note::

            If you are using the Fargate launch type, task placement constraints are not supported.

          - **type** *(string) --*

            The type of constraint. The ``MemberOf`` constraint restricts selection to be from a
            group of valid candidates.

          - **expression** *(string) --*

            A cluster query language expression to apply to the constraint. For more information,
            see `Cluster Query Language
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html>`__
            in the *Amazon Elastic Container Service Developer Guide* .

      - **compatibilities** *(list) --*

        The launch type to use with your task. For more information, see `Amazon ECS Launch Types
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html>`__ in the
        *Amazon Elastic Container Service Developer Guide* .

        - *(string) --*

      - **requiresCompatibilities** *(list) --*

        The launch type the task requires. If no value is specified, it will default to ``EC2`` .
        Valid values include ``EC2`` and ``FARGATE`` .

        - *(string) --*

      - **cpu** *(string) --*

        The number of ``cpu`` units used by the task. If you are using the EC2 launch type, this
        field is optional and any value can be used. If you are using the Fargate launch type, this
        field is required and you must use one of the following values, which determines your range
        of valid values for the ``memory`` parameter:

        * 256 (.25 vCPU) - Available ``memory`` values: 512 (0.5 GB), 1024 (1 GB), 2048 (2 GB)

        * 512 (.5 vCPU) - Available ``memory`` values: 1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096
        (4 GB)

        * 1024 (1 vCPU) - Available ``memory`` values: 2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120
        (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB)

        * 2048 (2 vCPU) - Available ``memory`` values: Between 4096 (4 GB) and 16384 (16 GB) in
        increments of 1024 (1 GB)

        * 4096 (4 vCPU) - Available ``memory`` values: Between 8192 (8 GB) and 30720 (30 GB) in
        increments of 1024 (1 GB)

      - **memory** *(string) --*

        The amount (in MiB) of memory used by the task.

        If using the EC2 launch type, this field is optional and any value can be used. If a
        task-level memory value is specified then the container-level memory value is optional.

        If using the Fargate launch type, this field is required and you must use one of the
        following values, which determines your range of valid values for the ``cpu`` parameter:

        * 512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) - Available ``cpu`` values: 256 (.25 vCPU)

        * 1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available ``cpu`` values: 512 (.5
        vCPU)

        * 2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB)
        - Available ``cpu`` values: 1024 (1 vCPU)

        * Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB) - Available ``cpu``
        values: 2048 (2 vCPU)

        * Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB) - Available ``cpu``
        values: 4096 (4 vCPU)

      - **inferenceAccelerators** *(list) --*

        The Elastic Inference accelerator associated with the task.

        - *(dict) --*

          Details on a Elastic Inference accelerator. For more information, see `Working with
          Amazon Elastic Inference on Amazon ECS
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in the
          *Amazon Elastic Container Service Developer Guide* .

          - **deviceName** *(string) --*

            The Elastic Inference accelerator device name. The ``deviceName`` must also be
            referenced in a container definition as a  ResourceRequirement .

          - **deviceType** *(string) --*

            The Elastic Inference accelerator type to use.

      - **pidMode** *(string) --*

        The process namespace to use for the containers in the task. The valid values are ``host``
        or ``task`` . If ``host`` is specified, then all containers within the tasks that specified
        the ``host`` PID mode on the same container instance share the same process namespace with
        the host Amazon EC2 instance. If ``task`` is specified, all containers within the specified
        task share the same process namespace. If no value is specified, the default is a private
        namespace. For more information, see `PID settings
        <https://docs.docker.com/engine/reference/run/#pid-settings---pid>`__ in the *Docker run
        reference* .

        If the ``host`` PID mode is used, be aware that there is a heightened risk of undesired
        process namespace expose. For more information, see `Docker security
        <https://docs.docker.com/engine/security/security/>`__ .

        .. note::

          This parameter is not supported for Windows containers or tasks using the Fargate launch
          type.

      - **ipcMode** *(string) --*

        The IPC resource namespace to use for the containers in the task. The valid values are
        ``host`` , ``task`` , or ``none`` . If ``host`` is specified, then all containers within
        the tasks that specified the ``host`` IPC mode on the same container instance share the
        same IPC resources with the host Amazon EC2 instance. If ``task`` is specified, all
        containers within the specified task share the same IPC resources. If ``none`` is
        specified, then IPC resources within the containers of a task are private and not shared
        with other containers in a task or on the container instance. If no value is specified,
        then the IPC resource namespace sharing depends on the Docker daemon setting on the
        container instance. For more information, see `IPC settings
        <https://docs.docker.com/engine/reference/run/#ipc-settings---ipc>`__ in the *Docker run
        reference* .

        If the ``host`` IPC mode is used, be aware that there is a heightened risk of undesired IPC
        namespace expose. For more information, see `Docker security
        <https://docs.docker.com/engine/security/security/>`__ .

        If you are setting namespaced kernel parameters using ``systemControls`` for the containers
        in the task, the following will apply to your IPC resource namespace. For more information,
        see `System Controls
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html>`__
        in the *Amazon Elastic Container Service Developer Guide* .

        * For tasks that use the ``host`` IPC mode, IPC namespace related ``systemControls`` are
        not supported.

        * For tasks that use the ``task`` IPC mode, IPC namespace related ``systemControls`` will
        apply to all containers within a task.

        .. note::

          This parameter is not supported for Windows containers or tasks using the Fargate launch
          type.

      - **proxyConfiguration** *(dict) --*

        The configuration details for the App Mesh proxy.

        Your Amazon ECS container instances require at least version 1.26.0 of the container agent
        and at least version 1.26.0-1 of the ``ecs-init`` package to enable a proxy configuration.
        If your container instances are launched from the Amazon ECS-optimized AMI version
        ``20190301`` or later, then they contain the required versions of the container agent and
        ``ecs-init`` . For more information, see `Amazon ECS-optimized Linux AMI
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html>`__ in
        the *Amazon Elastic Container Service Developer Guide* .

        - **type** *(string) --*

          The proxy type. The only supported value is ``APPMESH`` .

        - **containerName** *(string) --*

          The name of the container that will serve as the App Mesh proxy.

        - **properties** *(list) --*

          The set of network configuration parameters to provide the Container Network Interface
          (CNI) plugin, specified as key-value pairs.

          * ``IgnoredUID`` - (Required) The user ID (UID) of the proxy container as defined by the
          ``user`` parameter in a container definition. This is used to ensure the proxy ignores
          its own traffic. If ``IgnoredGID`` is specified, this field can be empty.

          * ``IgnoredGID`` - (Required) The group ID (GID) of the proxy container as defined by the
          ``user`` parameter in a container definition. This is used to ensure the proxy ignores
          its own traffic. If ``IgnoredUID`` is specified, this field can be empty.

          * ``AppPorts`` - (Required) The list of ports that the application uses. Network traffic
          to these ports is forwarded to the ``ProxyIngressPort`` and ``ProxyEgressPort`` .

          * ``ProxyIngressPort`` - (Required) Specifies the port that incoming traffic to the
          ``AppPorts`` is directed to.

          * ``ProxyEgressPort`` - (Required) Specifies the port that outgoing traffic from the
          ``AppPorts`` is directed to.

          * ``EgressIgnoredPorts`` - (Required) The egress traffic going to the specified ports is
          ignored and not redirected to the ``ProxyEgressPort`` . It can be an empty list.

          * ``EgressIgnoredIPs`` - (Required) The egress traffic going to the specified IP
          addresses is ignored and not redirected to the ``ProxyEgressPort`` . It can be an empty
          list.

          - *(dict) --*

            A key-value pair object.

            - **name** *(string) --*

              The name of the key-value pair. For environment variables, this is the name of the
              environment variable.

            - **value** *(string) --*

              The value of the key-value pair. For environment variables, this is the value of the
              environment variable.

    - **tags** *(list) --*

      The metadata that is applied to the task definition to help you categorize and organize them.
      Each tag consists of a key and an optional value, both of which you define.

      The following basic restrictions apply to tags:

      * Maximum number of tags per resource - 50

      * For each resource, each tag key must be unique, and each tag key can have only one value.

      * Maximum key length - 128 Unicode characters in UTF-8

      * Maximum value length - 256 Unicode characters in UTF-8

      * If your tagging schema is used across multiple services and resources, remember that other
      services may have restrictions on allowed characters. Generally allowed characters are:
      letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _
      : / @.

      * Tag keys and values are case-sensitive.

      * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a prefix
      for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys
      or values with this prefix. Tags with this prefix do not count against your tags per resource
      limit.

      - *(dict) --*

        The metadata that you apply to a resource to help you categorize and organize them. Each
        tag consists of a key and an optional value, both of which you define.

        The following basic restrictions apply to tags:

        * Maximum number of tags per resource - 50

        * For each resource, each tag key must be unique, and each tag key can have only one value.

        * Maximum key length - 128 Unicode characters in UTF-8

        * Maximum value length - 256 Unicode characters in UTF-8

        * If your tagging schema is used across multiple services and resources, remember that
        other services may have restrictions on allowed characters. Generally allowed characters
        are: letters, numbers, and spaces representable in UTF-8, and the following characters: + -
        = . _ : / @.

        * Tag keys and values are case-sensitive.

        * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
        prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
        tag keys or values with this prefix. Tags with this prefix do not count against your tags
        per resource limit.

        - **key** *(string) --*

          One part of a key-value pair that make up a tag. A ``key`` is a general label that acts
          like a category for more specific tag values.

        - **value** *(string) --*

          The optional part of a key-value pair that make up a tag. A ``value`` acts as a
          descriptor within a tag category (key).
    """


_ClientDescribeTaskSetsResponsefailuresTypeDef = TypedDict(
    "_ClientDescribeTaskSetsResponsefailuresTypeDef",
    {"arn": str, "reason": str, "detail": str},
    total=False,
)


class ClientDescribeTaskSetsResponsefailuresTypeDef(
    _ClientDescribeTaskSetsResponsefailuresTypeDef
):
    """
    Type definition for `ClientDescribeTaskSetsResponse` `failures`

    A failed resource.

    - **arn** *(string) --*

      The Amazon Resource Name (ARN) of the failed resource.

    - **reason** *(string) --*

      The reason for the failure.

    - **detail** *(string) --*

      The details of the failure.
    """


_ClientDescribeTaskSetsResponsetaskSetsloadBalancersTypeDef = TypedDict(
    "_ClientDescribeTaskSetsResponsetaskSetsloadBalancersTypeDef",
    {
        "targetGroupArn": str,
        "loadBalancerName": str,
        "containerName": str,
        "containerPort": int,
    },
    total=False,
)


class ClientDescribeTaskSetsResponsetaskSetsloadBalancersTypeDef(
    _ClientDescribeTaskSetsResponsetaskSetsloadBalancersTypeDef
):
    """
    Type definition for `ClientDescribeTaskSetsResponsetaskSets` `loadBalancers`

    Details on the load balancer or load balancers to use with a service or task set.

    - **targetGroupArn** *(string) --*

      The full Amazon Resource Name (ARN) of the Elastic Load Balancing target group or
      groups associated with a service or task set.

      A target group ARN is only specified when using an Application Load Balancer or
      Network Load Balancer. If you are using a Classic Load Balancer this should be
      omitted.

      For services using the ``ECS`` deployment controller, you can specify one or multiple
      target groups. For more information, see `Registering Multiple Target Groups with a
      Service
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

      For services using the ``CODE_DEPLOY`` deployment controller, you are required to
      define two target groups for the load balancer. For more information, see `Blue/Green
      Deployment with CodeDeploy
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-bluegreen.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

      .. warning::

        If your service's task definition uses the ``awsvpc`` network mode (which is
        required for the Fargate launch type), you must choose ``ip`` as the target type,
        not ``instance`` , when creating your target groups because tasks that use the
        ``awsvpc`` network mode are associated with an elastic network interface, not an
        Amazon EC2 instance.

    - **loadBalancerName** *(string) --*

      The name of the load balancer to associate with the Amazon ECS service or task set.

      A load balancer name is only specified when using a Classic Load Balancer. If you are
      using an Application Load Balancer or a Network Load Balancer this should be omitted.

    - **containerName** *(string) --*

      The name of the container (as it appears in a container definition) to associate with
      the load balancer.

    - **containerPort** *(integer) --*

      The port on the container to associate with the load balancer. This port must
      correspond to a ``containerPort`` in the task definition the tasks in the service are
      using. For tasks that use the EC2 launch type, the container instance they are
      launched on must allow ingress traffic on the ``hostPort`` of the port mapping.
    """


_ClientDescribeTaskSetsResponsetaskSetsnetworkConfigurationawsvpcConfigurationTypeDef = TypedDict(
    "_ClientDescribeTaskSetsResponsetaskSetsnetworkConfigurationawsvpcConfigurationTypeDef",
    {"subnets": List[str], "securityGroups": List[str], "assignPublicIp": str},
    total=False,
)


class ClientDescribeTaskSetsResponsetaskSetsnetworkConfigurationawsvpcConfigurationTypeDef(
    _ClientDescribeTaskSetsResponsetaskSetsnetworkConfigurationawsvpcConfigurationTypeDef
):
    """
    Type definition for `ClientDescribeTaskSetsResponsetaskSetsnetworkConfiguration` `awsvpcConfiguration`

    The VPC subnets and security groups associated with a task.

    .. note::

      All specified subnets and security groups must be from the same VPC.

    - **subnets** *(list) --*

      The subnets associated with the task or service. There is a limit of 16 subnets that
      can be specified per ``AwsVpcConfiguration`` .

      .. note::

        All specified subnets must be from the same VPC.

      - *(string) --*

    - **securityGroups** *(list) --*

      The security groups associated with the task or service. If you do not specify a
      security group, the default security group for the VPC is used. There is a limit of 5
      security groups that can be specified per ``AwsVpcConfiguration`` .

      .. note::

        All specified security groups must be from the same VPC.

      - *(string) --*

    - **assignPublicIp** *(string) --*

      Whether the task's elastic network interface receives a public IP address. The
      default value is ``DISABLED`` .
    """


_ClientDescribeTaskSetsResponsetaskSetsnetworkConfigurationTypeDef = TypedDict(
    "_ClientDescribeTaskSetsResponsetaskSetsnetworkConfigurationTypeDef",
    {
        "awsvpcConfiguration": ClientDescribeTaskSetsResponsetaskSetsnetworkConfigurationawsvpcConfigurationTypeDef
    },
    total=False,
)


class ClientDescribeTaskSetsResponsetaskSetsnetworkConfigurationTypeDef(
    _ClientDescribeTaskSetsResponsetaskSetsnetworkConfigurationTypeDef
):
    """
    Type definition for `ClientDescribeTaskSetsResponsetaskSets` `networkConfiguration`

    The network configuration for the task set.

    - **awsvpcConfiguration** *(dict) --*

      The VPC subnets and security groups associated with a task.

      .. note::

        All specified subnets and security groups must be from the same VPC.

      - **subnets** *(list) --*

        The subnets associated with the task or service. There is a limit of 16 subnets that
        can be specified per ``AwsVpcConfiguration`` .

        .. note::

          All specified subnets must be from the same VPC.

        - *(string) --*

      - **securityGroups** *(list) --*

        The security groups associated with the task or service. If you do not specify a
        security group, the default security group for the VPC is used. There is a limit of 5
        security groups that can be specified per ``AwsVpcConfiguration`` .

        .. note::

          All specified security groups must be from the same VPC.

        - *(string) --*

      - **assignPublicIp** *(string) --*

        Whether the task's elastic network interface receives a public IP address. The
        default value is ``DISABLED`` .
    """


_ClientDescribeTaskSetsResponsetaskSetsscaleTypeDef = TypedDict(
    "_ClientDescribeTaskSetsResponsetaskSetsscaleTypeDef",
    {"value": float, "unit": str},
    total=False,
)


class ClientDescribeTaskSetsResponsetaskSetsscaleTypeDef(
    _ClientDescribeTaskSetsResponsetaskSetsscaleTypeDef
):
    """
    Type definition for `ClientDescribeTaskSetsResponsetaskSets` `scale`

    A floating-point percentage of the desired number of tasks to place and keep running in
    the task set.

    - **value** *(float) --*

      The value, specified as a percent total of a service's ``desiredCount`` , to scale the
      task set. Accepted values are numbers between 0 and 100.

    - **unit** *(string) --*

      The unit of measure for the scale value.
    """


_ClientDescribeTaskSetsResponsetaskSetsserviceRegistriesTypeDef = TypedDict(
    "_ClientDescribeTaskSetsResponsetaskSetsserviceRegistriesTypeDef",
    {"registryArn": str, "port": int, "containerName": str, "containerPort": int},
    total=False,
)


class ClientDescribeTaskSetsResponsetaskSetsserviceRegistriesTypeDef(
    _ClientDescribeTaskSetsResponsetaskSetsserviceRegistriesTypeDef
):
    """
    Type definition for `ClientDescribeTaskSetsResponsetaskSets` `serviceRegistries`

    Details of the service registry.

    - **registryArn** *(string) --*

      The Amazon Resource Name (ARN) of the service registry. The currently supported
      service registry is AWS Cloud Map. For more information, see `CreateService
      <https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html>`__ .

    - **port** *(integer) --*

      The port value used if your service discovery service specified an SRV record. This
      field may be used if both the ``awsvpc`` network mode and SRV records are used.

    - **containerName** *(string) --*

      The container name value, already specified in the task definition, to be used for
      your service discovery service. If the task definition that your service task
      specifies uses the ``bridge`` or ``host`` network mode, you must specify a
      ``containerName`` and ``containerPort`` combination from the task definition. If the
      task definition that your service task specifies uses the ``awsvpc`` network mode and
      a type SRV DNS record is used, you must specify either a ``containerName`` and
      ``containerPort`` combination or a ``port`` value, but not both.

    - **containerPort** *(integer) --*

      The port value, already specified in the task definition, to be used for your service
      discovery service. If the task definition your service task specifies uses the
      ``bridge`` or ``host`` network mode, you must specify a ``containerName`` and
      ``containerPort`` combination from the task definition. If the task definition your
      service task specifies uses the ``awsvpc`` network mode and a type SRV DNS record is
      used, you must specify either a ``containerName`` and ``containerPort`` combination
      or a ``port`` value, but not both.
    """


_ClientDescribeTaskSetsResponsetaskSetsTypeDef = TypedDict(
    "_ClientDescribeTaskSetsResponsetaskSetsTypeDef",
    {
        "id": str,
        "taskSetArn": str,
        "serviceArn": str,
        "clusterArn": str,
        "startedBy": str,
        "externalId": str,
        "status": str,
        "taskDefinition": str,
        "computedDesiredCount": int,
        "pendingCount": int,
        "runningCount": int,
        "createdAt": datetime,
        "updatedAt": datetime,
        "launchType": str,
        "platformVersion": str,
        "networkConfiguration": ClientDescribeTaskSetsResponsetaskSetsnetworkConfigurationTypeDef,
        "loadBalancers": List[
            ClientDescribeTaskSetsResponsetaskSetsloadBalancersTypeDef
        ],
        "serviceRegistries": List[
            ClientDescribeTaskSetsResponsetaskSetsserviceRegistriesTypeDef
        ],
        "scale": ClientDescribeTaskSetsResponsetaskSetsscaleTypeDef,
        "stabilityStatus": str,
        "stabilityStatusAt": datetime,
    },
    total=False,
)


class ClientDescribeTaskSetsResponsetaskSetsTypeDef(
    _ClientDescribeTaskSetsResponsetaskSetsTypeDef
):
    """
    Type definition for `ClientDescribeTaskSetsResponse` `taskSets`

    Information about a set of Amazon ECS tasks in either an AWS CodeDeploy or an ``EXTERNAL``
    deployment. An Amazon ECS task set includes details such as the desired number of tasks,
    how many tasks are running, and whether the task set serves production traffic.

    - **id** *(string) --*

      The ID of the task set.

    - **taskSetArn** *(string) --*

      The Amazon Resource Name (ARN) of the task set.

    - **serviceArn** *(string) --*

      The Amazon Resource Name (ARN) of the service the task set exists in.

    - **clusterArn** *(string) --*

      The Amazon Resource Name (ARN) of the cluster that the service that hosts the task set
      exists in.

    - **startedBy** *(string) --*

      The tag specified when a task set is started. If the task set is created by an AWS
      CodeDeploy deployment, the ``startedBy`` parameter is ``CODE_DEPLOY`` . For a task set
      created for an external deployment, the startedBy field isn't used.

    - **externalId** *(string) --*

      The external ID associated with the task set.

      If a task set is created by an AWS CodeDeploy deployment, the ``externalId`` parameter
      contains the AWS CodeDeploy deployment ID.

      If a task set is created for an external deployment and is associated with a service
      discovery registry, the ``externalId`` parameter contains the
      ``ECS_TASK_SET_EXTERNAL_ID`` AWS Cloud Map attribute.

    - **status** *(string) --*

      The status of the task set. The following describes each state:

        PRIMARY

      The task set is serving production traffic.

        ACTIVE

      The task set is not serving production traffic.

        DRAINING

      The tasks in the task set are being stopped and their corresponding targets are being
      deregistered from their target group.

    - **taskDefinition** *(string) --*

      The task definition the task set is using.

    - **computedDesiredCount** *(integer) --*

      The computed desired count for the task set. This is calculated by multiplying the
      service's ``desiredCount`` by the task set's ``scale`` percentage. The result is always
      rounded up. For example, if the computed desired count is 1.2, it rounds up to 2 tasks.

    - **pendingCount** *(integer) --*

      The number of tasks in the task set that are in the ``PENDING`` status during a
      deployment. A task in the ``PENDING`` state is preparing to enter the ``RUNNING`` state.
      A task set enters the ``PENDING`` status when it launches for the first time or when it
      is restarted after being in the ``STOPPED`` state.

    - **runningCount** *(integer) --*

      The number of tasks in the task set that are in the ``RUNNING`` status during a
      deployment. A task in the ``RUNNING`` state is running and ready for use.

    - **createdAt** *(datetime) --*

      The Unix timestamp for when the task set was created.

    - **updatedAt** *(datetime) --*

      The Unix timestamp for when the task set was last updated.

    - **launchType** *(string) --*

      The launch type the tasks in the task set are using. For more information, see `Amazon
      ECS Launch Types
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html>`__ in the
      *Amazon Elastic Container Service Developer Guide* .

    - **platformVersion** *(string) --*

      The platform version on which the tasks in the task set are running. A platform version
      is only specified for tasks using the Fargate launch type. If one is not specified, the
      ``LATEST`` platform version is used by default. For more information, see `AWS Fargate
      Platform Versions
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

    - **networkConfiguration** *(dict) --*

      The network configuration for the task set.

      - **awsvpcConfiguration** *(dict) --*

        The VPC subnets and security groups associated with a task.

        .. note::

          All specified subnets and security groups must be from the same VPC.

        - **subnets** *(list) --*

          The subnets associated with the task or service. There is a limit of 16 subnets that
          can be specified per ``AwsVpcConfiguration`` .

          .. note::

            All specified subnets must be from the same VPC.

          - *(string) --*

        - **securityGroups** *(list) --*

          The security groups associated with the task or service. If you do not specify a
          security group, the default security group for the VPC is used. There is a limit of 5
          security groups that can be specified per ``AwsVpcConfiguration`` .

          .. note::

            All specified security groups must be from the same VPC.

          - *(string) --*

        - **assignPublicIp** *(string) --*

          Whether the task's elastic network interface receives a public IP address. The
          default value is ``DISABLED`` .

    - **loadBalancers** *(list) --*

      Details on a load balancer that is used with a task set.

      - *(dict) --*

        Details on the load balancer or load balancers to use with a service or task set.

        - **targetGroupArn** *(string) --*

          The full Amazon Resource Name (ARN) of the Elastic Load Balancing target group or
          groups associated with a service or task set.

          A target group ARN is only specified when using an Application Load Balancer or
          Network Load Balancer. If you are using a Classic Load Balancer this should be
          omitted.

          For services using the ``ECS`` deployment controller, you can specify one or multiple
          target groups. For more information, see `Registering Multiple Target Groups with a
          Service
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

          For services using the ``CODE_DEPLOY`` deployment controller, you are required to
          define two target groups for the load balancer. For more information, see `Blue/Green
          Deployment with CodeDeploy
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-bluegreen.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

          .. warning::

            If your service's task definition uses the ``awsvpc`` network mode (which is
            required for the Fargate launch type), you must choose ``ip`` as the target type,
            not ``instance`` , when creating your target groups because tasks that use the
            ``awsvpc`` network mode are associated with an elastic network interface, not an
            Amazon EC2 instance.

        - **loadBalancerName** *(string) --*

          The name of the load balancer to associate with the Amazon ECS service or task set.

          A load balancer name is only specified when using a Classic Load Balancer. If you are
          using an Application Load Balancer or a Network Load Balancer this should be omitted.

        - **containerName** *(string) --*

          The name of the container (as it appears in a container definition) to associate with
          the load balancer.

        - **containerPort** *(integer) --*

          The port on the container to associate with the load balancer. This port must
          correspond to a ``containerPort`` in the task definition the tasks in the service are
          using. For tasks that use the EC2 launch type, the container instance they are
          launched on must allow ingress traffic on the ``hostPort`` of the port mapping.

    - **serviceRegistries** *(list) --*

      The details of the service discovery registries to assign to this task set. For more
      information, see `Service Discovery
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html>`__ .

      - *(dict) --*

        Details of the service registry.

        - **registryArn** *(string) --*

          The Amazon Resource Name (ARN) of the service registry. The currently supported
          service registry is AWS Cloud Map. For more information, see `CreateService
          <https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html>`__ .

        - **port** *(integer) --*

          The port value used if your service discovery service specified an SRV record. This
          field may be used if both the ``awsvpc`` network mode and SRV records are used.

        - **containerName** *(string) --*

          The container name value, already specified in the task definition, to be used for
          your service discovery service. If the task definition that your service task
          specifies uses the ``bridge`` or ``host`` network mode, you must specify a
          ``containerName`` and ``containerPort`` combination from the task definition. If the
          task definition that your service task specifies uses the ``awsvpc`` network mode and
          a type SRV DNS record is used, you must specify either a ``containerName`` and
          ``containerPort`` combination or a ``port`` value, but not both.

        - **containerPort** *(integer) --*

          The port value, already specified in the task definition, to be used for your service
          discovery service. If the task definition your service task specifies uses the
          ``bridge`` or ``host`` network mode, you must specify a ``containerName`` and
          ``containerPort`` combination from the task definition. If the task definition your
          service task specifies uses the ``awsvpc`` network mode and a type SRV DNS record is
          used, you must specify either a ``containerName`` and ``containerPort`` combination
          or a ``port`` value, but not both.

    - **scale** *(dict) --*

      A floating-point percentage of the desired number of tasks to place and keep running in
      the task set.

      - **value** *(float) --*

        The value, specified as a percent total of a service's ``desiredCount`` , to scale the
        task set. Accepted values are numbers between 0 and 100.

      - **unit** *(string) --*

        The unit of measure for the scale value.

    - **stabilityStatus** *(string) --*

      The stability status, which indicates whether the task set has reached a steady state. If
      the following conditions are met, the task set will be in ``STEADY_STATE`` :

      * The task ``runningCount`` is equal to the ``computedDesiredCount`` .

      * The ``pendingCount`` is ``0`` .

      * There are no tasks running on container instances in the ``DRAINING`` status.

      * All tasks are reporting a healthy status from the load balancers, service discovery,
      and container health checks.

      If any of those conditions are not met, the stability status returns ``STABILIZING`` .

    - **stabilityStatusAt** *(datetime) --*

      The Unix timestamp for when the task set stability status was retrieved.
    """


_ClientDescribeTaskSetsResponseTypeDef = TypedDict(
    "_ClientDescribeTaskSetsResponseTypeDef",
    {
        "taskSets": List[ClientDescribeTaskSetsResponsetaskSetsTypeDef],
        "failures": List[ClientDescribeTaskSetsResponsefailuresTypeDef],
    },
    total=False,
)


class ClientDescribeTaskSetsResponseTypeDef(_ClientDescribeTaskSetsResponseTypeDef):
    """
    Type definition for `ClientDescribeTaskSets` `Response`

    - **taskSets** *(list) --*

      The list of task sets described.

      - *(dict) --*

        Information about a set of Amazon ECS tasks in either an AWS CodeDeploy or an ``EXTERNAL``
        deployment. An Amazon ECS task set includes details such as the desired number of tasks,
        how many tasks are running, and whether the task set serves production traffic.

        - **id** *(string) --*

          The ID of the task set.

        - **taskSetArn** *(string) --*

          The Amazon Resource Name (ARN) of the task set.

        - **serviceArn** *(string) --*

          The Amazon Resource Name (ARN) of the service the task set exists in.

        - **clusterArn** *(string) --*

          The Amazon Resource Name (ARN) of the cluster that the service that hosts the task set
          exists in.

        - **startedBy** *(string) --*

          The tag specified when a task set is started. If the task set is created by an AWS
          CodeDeploy deployment, the ``startedBy`` parameter is ``CODE_DEPLOY`` . For a task set
          created for an external deployment, the startedBy field isn't used.

        - **externalId** *(string) --*

          The external ID associated with the task set.

          If a task set is created by an AWS CodeDeploy deployment, the ``externalId`` parameter
          contains the AWS CodeDeploy deployment ID.

          If a task set is created for an external deployment and is associated with a service
          discovery registry, the ``externalId`` parameter contains the
          ``ECS_TASK_SET_EXTERNAL_ID`` AWS Cloud Map attribute.

        - **status** *(string) --*

          The status of the task set. The following describes each state:

            PRIMARY

          The task set is serving production traffic.

            ACTIVE

          The task set is not serving production traffic.

            DRAINING

          The tasks in the task set are being stopped and their corresponding targets are being
          deregistered from their target group.

        - **taskDefinition** *(string) --*

          The task definition the task set is using.

        - **computedDesiredCount** *(integer) --*

          The computed desired count for the task set. This is calculated by multiplying the
          service's ``desiredCount`` by the task set's ``scale`` percentage. The result is always
          rounded up. For example, if the computed desired count is 1.2, it rounds up to 2 tasks.

        - **pendingCount** *(integer) --*

          The number of tasks in the task set that are in the ``PENDING`` status during a
          deployment. A task in the ``PENDING`` state is preparing to enter the ``RUNNING`` state.
          A task set enters the ``PENDING`` status when it launches for the first time or when it
          is restarted after being in the ``STOPPED`` state.

        - **runningCount** *(integer) --*

          The number of tasks in the task set that are in the ``RUNNING`` status during a
          deployment. A task in the ``RUNNING`` state is running and ready for use.

        - **createdAt** *(datetime) --*

          The Unix timestamp for when the task set was created.

        - **updatedAt** *(datetime) --*

          The Unix timestamp for when the task set was last updated.

        - **launchType** *(string) --*

          The launch type the tasks in the task set are using. For more information, see `Amazon
          ECS Launch Types
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html>`__ in the
          *Amazon Elastic Container Service Developer Guide* .

        - **platformVersion** *(string) --*

          The platform version on which the tasks in the task set are running. A platform version
          is only specified for tasks using the Fargate launch type. If one is not specified, the
          ``LATEST`` platform version is used by default. For more information, see `AWS Fargate
          Platform Versions
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

        - **networkConfiguration** *(dict) --*

          The network configuration for the task set.

          - **awsvpcConfiguration** *(dict) --*

            The VPC subnets and security groups associated with a task.

            .. note::

              All specified subnets and security groups must be from the same VPC.

            - **subnets** *(list) --*

              The subnets associated with the task or service. There is a limit of 16 subnets that
              can be specified per ``AwsVpcConfiguration`` .

              .. note::

                All specified subnets must be from the same VPC.

              - *(string) --*

            - **securityGroups** *(list) --*

              The security groups associated with the task or service. If you do not specify a
              security group, the default security group for the VPC is used. There is a limit of 5
              security groups that can be specified per ``AwsVpcConfiguration`` .

              .. note::

                All specified security groups must be from the same VPC.

              - *(string) --*

            - **assignPublicIp** *(string) --*

              Whether the task's elastic network interface receives a public IP address. The
              default value is ``DISABLED`` .

        - **loadBalancers** *(list) --*

          Details on a load balancer that is used with a task set.

          - *(dict) --*

            Details on the load balancer or load balancers to use with a service or task set.

            - **targetGroupArn** *(string) --*

              The full Amazon Resource Name (ARN) of the Elastic Load Balancing target group or
              groups associated with a service or task set.

              A target group ARN is only specified when using an Application Load Balancer or
              Network Load Balancer. If you are using a Classic Load Balancer this should be
              omitted.

              For services using the ``ECS`` deployment controller, you can specify one or multiple
              target groups. For more information, see `Registering Multiple Target Groups with a
              Service
              <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html>`__
              in the *Amazon Elastic Container Service Developer Guide* .

              For services using the ``CODE_DEPLOY`` deployment controller, you are required to
              define two target groups for the load balancer. For more information, see `Blue/Green
              Deployment with CodeDeploy
              <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-bluegreen.html>`__
              in the *Amazon Elastic Container Service Developer Guide* .

              .. warning::

                If your service's task definition uses the ``awsvpc`` network mode (which is
                required for the Fargate launch type), you must choose ``ip`` as the target type,
                not ``instance`` , when creating your target groups because tasks that use the
                ``awsvpc`` network mode are associated with an elastic network interface, not an
                Amazon EC2 instance.

            - **loadBalancerName** *(string) --*

              The name of the load balancer to associate with the Amazon ECS service or task set.

              A load balancer name is only specified when using a Classic Load Balancer. If you are
              using an Application Load Balancer or a Network Load Balancer this should be omitted.

            - **containerName** *(string) --*

              The name of the container (as it appears in a container definition) to associate with
              the load balancer.

            - **containerPort** *(integer) --*

              The port on the container to associate with the load balancer. This port must
              correspond to a ``containerPort`` in the task definition the tasks in the service are
              using. For tasks that use the EC2 launch type, the container instance they are
              launched on must allow ingress traffic on the ``hostPort`` of the port mapping.

        - **serviceRegistries** *(list) --*

          The details of the service discovery registries to assign to this task set. For more
          information, see `Service Discovery
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html>`__ .

          - *(dict) --*

            Details of the service registry.

            - **registryArn** *(string) --*

              The Amazon Resource Name (ARN) of the service registry. The currently supported
              service registry is AWS Cloud Map. For more information, see `CreateService
              <https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html>`__ .

            - **port** *(integer) --*

              The port value used if your service discovery service specified an SRV record. This
              field may be used if both the ``awsvpc`` network mode and SRV records are used.

            - **containerName** *(string) --*

              The container name value, already specified in the task definition, to be used for
              your service discovery service. If the task definition that your service task
              specifies uses the ``bridge`` or ``host`` network mode, you must specify a
              ``containerName`` and ``containerPort`` combination from the task definition. If the
              task definition that your service task specifies uses the ``awsvpc`` network mode and
              a type SRV DNS record is used, you must specify either a ``containerName`` and
              ``containerPort`` combination or a ``port`` value, but not both.

            - **containerPort** *(integer) --*

              The port value, already specified in the task definition, to be used for your service
              discovery service. If the task definition your service task specifies uses the
              ``bridge`` or ``host`` network mode, you must specify a ``containerName`` and
              ``containerPort`` combination from the task definition. If the task definition your
              service task specifies uses the ``awsvpc`` network mode and a type SRV DNS record is
              used, you must specify either a ``containerName`` and ``containerPort`` combination
              or a ``port`` value, but not both.

        - **scale** *(dict) --*

          A floating-point percentage of the desired number of tasks to place and keep running in
          the task set.

          - **value** *(float) --*

            The value, specified as a percent total of a service's ``desiredCount`` , to scale the
            task set. Accepted values are numbers between 0 and 100.

          - **unit** *(string) --*

            The unit of measure for the scale value.

        - **stabilityStatus** *(string) --*

          The stability status, which indicates whether the task set has reached a steady state. If
          the following conditions are met, the task set will be in ``STEADY_STATE`` :

          * The task ``runningCount`` is equal to the ``computedDesiredCount`` .

          * The ``pendingCount`` is ``0`` .

          * There are no tasks running on container instances in the ``DRAINING`` status.

          * All tasks are reporting a healthy status from the load balancers, service discovery,
          and container health checks.

          If any of those conditions are not met, the stability status returns ``STABILIZING`` .

        - **stabilityStatusAt** *(datetime) --*

          The Unix timestamp for when the task set stability status was retrieved.

    - **failures** *(list) --*

      Any failures associated with the call.

      - *(dict) --*

        A failed resource.

        - **arn** *(string) --*

          The Amazon Resource Name (ARN) of the failed resource.

        - **reason** *(string) --*

          The reason for the failure.

        - **detail** *(string) --*

          The details of the failure.
    """


_ClientDescribeTasksResponsefailuresTypeDef = TypedDict(
    "_ClientDescribeTasksResponsefailuresTypeDef",
    {"arn": str, "reason": str, "detail": str},
    total=False,
)


class ClientDescribeTasksResponsefailuresTypeDef(
    _ClientDescribeTasksResponsefailuresTypeDef
):
    """
    Type definition for `ClientDescribeTasksResponse` `failures`

    A failed resource.

    - **arn** *(string) --*

      The Amazon Resource Name (ARN) of the failed resource.

    - **reason** *(string) --*

      The reason for the failure.

    - **detail** *(string) --*

      The details of the failure.
    """


_ClientDescribeTasksResponsetasksattachmentsdetailsTypeDef = TypedDict(
    "_ClientDescribeTasksResponsetasksattachmentsdetailsTypeDef",
    {"name": str, "value": str},
    total=False,
)


class ClientDescribeTasksResponsetasksattachmentsdetailsTypeDef(
    _ClientDescribeTasksResponsetasksattachmentsdetailsTypeDef
):
    """
    Type definition for `ClientDescribeTasksResponsetasksattachments` `details`

    A key-value pair object.

    - **name** *(string) --*

      The name of the key-value pair. For environment variables, this is the name of
      the environment variable.

    - **value** *(string) --*

      The value of the key-value pair. For environment variables, this is the value of
      the environment variable.
    """


_ClientDescribeTasksResponsetasksattachmentsTypeDef = TypedDict(
    "_ClientDescribeTasksResponsetasksattachmentsTypeDef",
    {
        "id": str,
        "type": str,
        "status": str,
        "details": List[ClientDescribeTasksResponsetasksattachmentsdetailsTypeDef],
    },
    total=False,
)


class ClientDescribeTasksResponsetasksattachmentsTypeDef(
    _ClientDescribeTasksResponsetasksattachmentsTypeDef
):
    """
    Type definition for `ClientDescribeTasksResponsetasks` `attachments`

    An object representing a container instance or task attachment.

    - **id** *(string) --*

      The unique identifier for the attachment.

    - **type** *(string) --*

      The type of the attachment, such as ``ElasticNetworkInterface`` .

    - **status** *(string) --*

      The status of the attachment. Valid values are ``PRECREATED`` , ``CREATED`` ,
      ``ATTACHING`` , ``ATTACHED`` , ``DETACHING`` , ``DETACHED`` , and ``DELETED`` .

    - **details** *(list) --*

      Details of the attachment. For elastic network interfaces, this includes the network
      interface ID, the MAC address, the subnet ID, and the private IPv4 address.

      - *(dict) --*

        A key-value pair object.

        - **name** *(string) --*

          The name of the key-value pair. For environment variables, this is the name of
          the environment variable.

        - **value** *(string) --*

          The value of the key-value pair. For environment variables, this is the value of
          the environment variable.
    """


_ClientDescribeTasksResponsetasksattributesTypeDef = TypedDict(
    "_ClientDescribeTasksResponsetasksattributesTypeDef",
    {"name": str, "value": str, "targetType": str, "targetId": str},
    total=False,
)


class ClientDescribeTasksResponsetasksattributesTypeDef(
    _ClientDescribeTasksResponsetasksattributesTypeDef
):
    """
    Type definition for `ClientDescribeTasksResponsetasks` `attributes`

    An attribute is a name-value pair associated with an Amazon ECS object. Attributes
    enable you to extend the Amazon ECS data model by adding custom metadata to your
    resources. For more information, see `Attributes
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html#attributes>`__
    in the *Amazon Elastic Container Service Developer Guide* .

    - **name** *(string) --*

      The name of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
      hyphens, underscores, and periods are allowed.

    - **value** *(string) --*

      The value of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
      hyphens, underscores, periods, at signs (@), forward slashes, colons, and spaces are
      allowed.

    - **targetType** *(string) --*

      The type of the target with which to attach the attribute. This parameter is required
      if you use the short form ID for a resource instead of the full ARN.

    - **targetId** *(string) --*

      The ID of the target. You can specify the short form ID for a resource or the full
      Amazon Resource Name (ARN).
    """


_ClientDescribeTasksResponsetaskscontainersnetworkBindingsTypeDef = TypedDict(
    "_ClientDescribeTasksResponsetaskscontainersnetworkBindingsTypeDef",
    {"bindIP": str, "containerPort": int, "hostPort": int, "protocol": str},
    total=False,
)


class ClientDescribeTasksResponsetaskscontainersnetworkBindingsTypeDef(
    _ClientDescribeTasksResponsetaskscontainersnetworkBindingsTypeDef
):
    """
    Type definition for `ClientDescribeTasksResponsetaskscontainers` `networkBindings`

    Details on the network bindings between a container and its host container
    instance. After a task reaches the ``RUNNING`` status, manual and automatic host
    and container port assignments are visible in the ``networkBindings`` section of
    DescribeTasks API responses.

    - **bindIP** *(string) --*

      The IP address that the container is bound to on the container instance.

    - **containerPort** *(integer) --*

      The port number on the container that is used with the network binding.

    - **hostPort** *(integer) --*

      The port number on the host that is used with the network binding.

    - **protocol** *(string) --*

      The protocol used for the network binding.
    """


_ClientDescribeTasksResponsetaskscontainersnetworkInterfacesTypeDef = TypedDict(
    "_ClientDescribeTasksResponsetaskscontainersnetworkInterfacesTypeDef",
    {"attachmentId": str, "privateIpv4Address": str, "ipv6Address": str},
    total=False,
)


class ClientDescribeTasksResponsetaskscontainersnetworkInterfacesTypeDef(
    _ClientDescribeTasksResponsetaskscontainersnetworkInterfacesTypeDef
):
    """
    Type definition for `ClientDescribeTasksResponsetaskscontainers` `networkInterfaces`

    An object representing the elastic network interface for tasks that use the
    ``awsvpc`` network mode.

    - **attachmentId** *(string) --*

      The attachment ID for the network interface.

    - **privateIpv4Address** *(string) --*

      The private IPv4 address for the network interface.

    - **ipv6Address** *(string) --*

      The private IPv6 address for the network interface.
    """


_ClientDescribeTasksResponsetaskscontainersTypeDef = TypedDict(
    "_ClientDescribeTasksResponsetaskscontainersTypeDef",
    {
        "containerArn": str,
        "taskArn": str,
        "name": str,
        "image": str,
        "imageDigest": str,
        "runtimeId": str,
        "lastStatus": str,
        "exitCode": int,
        "reason": str,
        "networkBindings": List[
            ClientDescribeTasksResponsetaskscontainersnetworkBindingsTypeDef
        ],
        "networkInterfaces": List[
            ClientDescribeTasksResponsetaskscontainersnetworkInterfacesTypeDef
        ],
        "healthStatus": str,
        "cpu": str,
        "memory": str,
        "memoryReservation": str,
        "gpuIds": List[str],
    },
    total=False,
)


class ClientDescribeTasksResponsetaskscontainersTypeDef(
    _ClientDescribeTasksResponsetaskscontainersTypeDef
):
    """
    Type definition for `ClientDescribeTasksResponsetasks` `containers`

    A Docker container that is part of a task.

    - **containerArn** *(string) --*

      The Amazon Resource Name (ARN) of the container.

    - **taskArn** *(string) --*

      The ARN of the task.

    - **name** *(string) --*

      The name of the container.

    - **image** *(string) --*

      The image used for the container.

    - **imageDigest** *(string) --*

      The container image manifest digest.

      .. note::

        The ``imageDigest`` is only returned if the container is using an image hosted in
        Amazon ECR, otherwise it is omitted.

    - **runtimeId** *(string) --*

      The ID of the Docker container.

    - **lastStatus** *(string) --*

      The last known status of the container.

    - **exitCode** *(integer) --*

      The exit code returned from the container.

    - **reason** *(string) --*

      A short (255 max characters) human-readable string to provide additional details
      about a running or stopped container.

    - **networkBindings** *(list) --*

      The network bindings associated with the container.

      - *(dict) --*

        Details on the network bindings between a container and its host container
        instance. After a task reaches the ``RUNNING`` status, manual and automatic host
        and container port assignments are visible in the ``networkBindings`` section of
        DescribeTasks API responses.

        - **bindIP** *(string) --*

          The IP address that the container is bound to on the container instance.

        - **containerPort** *(integer) --*

          The port number on the container that is used with the network binding.

        - **hostPort** *(integer) --*

          The port number on the host that is used with the network binding.

        - **protocol** *(string) --*

          The protocol used for the network binding.

    - **networkInterfaces** *(list) --*

      The network interfaces associated with the container.

      - *(dict) --*

        An object representing the elastic network interface for tasks that use the
        ``awsvpc`` network mode.

        - **attachmentId** *(string) --*

          The attachment ID for the network interface.

        - **privateIpv4Address** *(string) --*

          The private IPv4 address for the network interface.

        - **ipv6Address** *(string) --*

          The private IPv6 address for the network interface.

    - **healthStatus** *(string) --*

      The health status of the container. If health checks are not configured for this
      container in its task definition, then it reports the health status as ``UNKNOWN`` .

    - **cpu** *(string) --*

      The number of CPU units set for the container. The value will be ``0`` if no value
      was specified in the container definition when the task definition was registered.

    - **memory** *(string) --*

      The hard limit (in MiB) of memory set for the container.

    - **memoryReservation** *(string) --*

      The soft limit (in MiB) of memory set for the container.

    - **gpuIds** *(list) --*

      The IDs of each GPU assigned to the container.

      - *(string) --*
    """


_ClientDescribeTasksResponsetasksinferenceAcceleratorsTypeDef = TypedDict(
    "_ClientDescribeTasksResponsetasksinferenceAcceleratorsTypeDef",
    {"deviceName": str, "deviceType": str},
    total=False,
)


class ClientDescribeTasksResponsetasksinferenceAcceleratorsTypeDef(
    _ClientDescribeTasksResponsetasksinferenceAcceleratorsTypeDef
):
    """
    Type definition for `ClientDescribeTasksResponsetasks` `inferenceAccelerators`

    Details on a Elastic Inference accelerator. For more information, see `Working with
    Amazon Elastic Inference on Amazon ECS
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in the
    *Amazon Elastic Container Service Developer Guide* .

    - **deviceName** *(string) --*

      The Elastic Inference accelerator device name. The ``deviceName`` must also be
      referenced in a container definition as a  ResourceRequirement .

    - **deviceType** *(string) --*

      The Elastic Inference accelerator type to use.
    """


_ClientDescribeTasksResponsetasksoverridescontainerOverridesenvironmentTypeDef = TypedDict(
    "_ClientDescribeTasksResponsetasksoverridescontainerOverridesenvironmentTypeDef",
    {"name": str, "value": str},
    total=False,
)


class ClientDescribeTasksResponsetasksoverridescontainerOverridesenvironmentTypeDef(
    _ClientDescribeTasksResponsetasksoverridescontainerOverridesenvironmentTypeDef
):
    """
    Type definition for `ClientDescribeTasksResponsetasksoverridescontainerOverrides` `environment`

    A key-value pair object.

    - **name** *(string) --*

      The name of the key-value pair. For environment variables, this is the name of
      the environment variable.

    - **value** *(string) --*

      The value of the key-value pair. For environment variables, this is the value
      of the environment variable.
    """


_ClientDescribeTasksResponsetasksoverridescontainerOverridesresourceRequirementsTypeDef = TypedDict(
    "_ClientDescribeTasksResponsetasksoverridescontainerOverridesresourceRequirementsTypeDef",
    {"value": str, "type": str},
    total=False,
)


class ClientDescribeTasksResponsetasksoverridescontainerOverridesresourceRequirementsTypeDef(
    _ClientDescribeTasksResponsetasksoverridescontainerOverridesresourceRequirementsTypeDef
):
    """
    Type definition for `ClientDescribeTasksResponsetasksoverridescontainerOverrides` `resourceRequirements`

    The type and amount of a resource to assign to a container. The supported
    resource types are GPUs and Elastic Inference accelerators. For more information,
    see `Working with GPUs on Amazon ECS
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-gpu.html>`__ or
    `Working with Amazon Elastic Inference on Amazon ECS
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in
    the *Amazon Elastic Container Service Developer Guide*

    - **value** *(string) --*

      The value for the specified resource type.

      If the ``GPU`` type is used, the value is the number of physical ``GPUs`` the
      Amazon ECS container agent will reserve for the container. The number of GPUs
      reserved for all containers in a task should not exceed the number of available
      GPUs on the container instance the task is launched on.

      If the ``InferenceAccelerator`` type is used, the ``value`` should match the
      ``deviceName`` for an  InferenceAccelerator specified in a task definition.

    - **type** *(string) --*

      The type of resource to assign to a container. The supported values are ``GPU``
      or ``InferenceAccelerator`` .
    """


_ClientDescribeTasksResponsetasksoverridescontainerOverridesTypeDef = TypedDict(
    "_ClientDescribeTasksResponsetasksoverridescontainerOverridesTypeDef",
    {
        "name": str,
        "command": List[str],
        "environment": List[
            ClientDescribeTasksResponsetasksoverridescontainerOverridesenvironmentTypeDef
        ],
        "cpu": int,
        "memory": int,
        "memoryReservation": int,
        "resourceRequirements": List[
            ClientDescribeTasksResponsetasksoverridescontainerOverridesresourceRequirementsTypeDef
        ],
    },
    total=False,
)


class ClientDescribeTasksResponsetasksoverridescontainerOverridesTypeDef(
    _ClientDescribeTasksResponsetasksoverridescontainerOverridesTypeDef
):
    """
    Type definition for `ClientDescribeTasksResponsetasksoverrides` `containerOverrides`

    The overrides that should be sent to a container. An empty container override can be
    passed in. An example of an empty container override would be
    ``{"containerOverrides": [ ] }`` . If a non-empty container override is specified,
    the ``name`` parameter must be included.

    - **name** *(string) --*

      The name of the container that receives the override. This parameter is required if
      any override is specified.

    - **command** *(list) --*

      The command to send to the container that overrides the default command from the
      Docker image or the task definition. You must also specify a container name.

      - *(string) --*

    - **environment** *(list) --*

      The environment variables to send to the container. You can add new environment
      variables, which are added to the container at launch, or you can override the
      existing environment variables from the Docker image or the task definition. You
      must also specify a container name.

      - *(dict) --*

        A key-value pair object.

        - **name** *(string) --*

          The name of the key-value pair. For environment variables, this is the name of
          the environment variable.

        - **value** *(string) --*

          The value of the key-value pair. For environment variables, this is the value
          of the environment variable.

    - **cpu** *(integer) --*

      The number of ``cpu`` units reserved for the container, instead of the default
      value from the task definition. You must also specify a container name.

    - **memory** *(integer) --*

      The hard limit (in MiB) of memory to present to the container, instead of the
      default value from the task definition. If your container attempts to exceed the
      memory specified here, the container is killed. You must also specify a container
      name.

    - **memoryReservation** *(integer) --*

      The soft limit (in MiB) of memory to reserve for the container, instead of the
      default value from the task definition. You must also specify a container name.

    - **resourceRequirements** *(list) --*

      The type and amount of a resource to assign to a container, instead of the default
      value from the task definition. The only supported resource is a GPU.

      - *(dict) --*

        The type and amount of a resource to assign to a container. The supported
        resource types are GPUs and Elastic Inference accelerators. For more information,
        see `Working with GPUs on Amazon ECS
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-gpu.html>`__ or
        `Working with Amazon Elastic Inference on Amazon ECS
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in
        the *Amazon Elastic Container Service Developer Guide*

        - **value** *(string) --*

          The value for the specified resource type.

          If the ``GPU`` type is used, the value is the number of physical ``GPUs`` the
          Amazon ECS container agent will reserve for the container. The number of GPUs
          reserved for all containers in a task should not exceed the number of available
          GPUs on the container instance the task is launched on.

          If the ``InferenceAccelerator`` type is used, the ``value`` should match the
          ``deviceName`` for an  InferenceAccelerator specified in a task definition.

        - **type** *(string) --*

          The type of resource to assign to a container. The supported values are ``GPU``
          or ``InferenceAccelerator`` .
    """


_ClientDescribeTasksResponsetasksoverridesinferenceAcceleratorOverridesTypeDef = TypedDict(
    "_ClientDescribeTasksResponsetasksoverridesinferenceAcceleratorOverridesTypeDef",
    {"deviceName": str, "deviceType": str},
    total=False,
)


class ClientDescribeTasksResponsetasksoverridesinferenceAcceleratorOverridesTypeDef(
    _ClientDescribeTasksResponsetasksoverridesinferenceAcceleratorOverridesTypeDef
):
    """
    Type definition for `ClientDescribeTasksResponsetasksoverrides` `inferenceAcceleratorOverrides`

    Details on an Elastic Inference accelerator task override. This parameter is used to
    override the Elastic Inference accelerator specified in the task definition. For more
    information, see `Working with Amazon Elastic Inference on Amazon ECS
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in the
    *Amazon Elastic Container Service Developer Guide* .

    - **deviceName** *(string) --*

      The Elastic Inference accelerator device name to override for the task. This
      parameter must match a ``deviceName`` specified in the task definition.

    - **deviceType** *(string) --*

      The Elastic Inference accelerator type to use.
    """


_ClientDescribeTasksResponsetasksoverridesTypeDef = TypedDict(
    "_ClientDescribeTasksResponsetasksoverridesTypeDef",
    {
        "containerOverrides": List[
            ClientDescribeTasksResponsetasksoverridescontainerOverridesTypeDef
        ],
        "cpu": str,
        "inferenceAcceleratorOverrides": List[
            ClientDescribeTasksResponsetasksoverridesinferenceAcceleratorOverridesTypeDef
        ],
        "executionRoleArn": str,
        "memory": str,
        "taskRoleArn": str,
    },
    total=False,
)


class ClientDescribeTasksResponsetasksoverridesTypeDef(
    _ClientDescribeTasksResponsetasksoverridesTypeDef
):
    """
    Type definition for `ClientDescribeTasksResponsetasks` `overrides`

    One or more container overrides.

    - **containerOverrides** *(list) --*

      One or more container overrides sent to a task.

      - *(dict) --*

        The overrides that should be sent to a container. An empty container override can be
        passed in. An example of an empty container override would be
        ``{"containerOverrides": [ ] }`` . If a non-empty container override is specified,
        the ``name`` parameter must be included.

        - **name** *(string) --*

          The name of the container that receives the override. This parameter is required if
          any override is specified.

        - **command** *(list) --*

          The command to send to the container that overrides the default command from the
          Docker image or the task definition. You must also specify a container name.

          - *(string) --*

        - **environment** *(list) --*

          The environment variables to send to the container. You can add new environment
          variables, which are added to the container at launch, or you can override the
          existing environment variables from the Docker image or the task definition. You
          must also specify a container name.

          - *(dict) --*

            A key-value pair object.

            - **name** *(string) --*

              The name of the key-value pair. For environment variables, this is the name of
              the environment variable.

            - **value** *(string) --*

              The value of the key-value pair. For environment variables, this is the value
              of the environment variable.

        - **cpu** *(integer) --*

          The number of ``cpu`` units reserved for the container, instead of the default
          value from the task definition. You must also specify a container name.

        - **memory** *(integer) --*

          The hard limit (in MiB) of memory to present to the container, instead of the
          default value from the task definition. If your container attempts to exceed the
          memory specified here, the container is killed. You must also specify a container
          name.

        - **memoryReservation** *(integer) --*

          The soft limit (in MiB) of memory to reserve for the container, instead of the
          default value from the task definition. You must also specify a container name.

        - **resourceRequirements** *(list) --*

          The type and amount of a resource to assign to a container, instead of the default
          value from the task definition. The only supported resource is a GPU.

          - *(dict) --*

            The type and amount of a resource to assign to a container. The supported
            resource types are GPUs and Elastic Inference accelerators. For more information,
            see `Working with GPUs on Amazon ECS
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-gpu.html>`__ or
            `Working with Amazon Elastic Inference on Amazon ECS
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in
            the *Amazon Elastic Container Service Developer Guide*

            - **value** *(string) --*

              The value for the specified resource type.

              If the ``GPU`` type is used, the value is the number of physical ``GPUs`` the
              Amazon ECS container agent will reserve for the container. The number of GPUs
              reserved for all containers in a task should not exceed the number of available
              GPUs on the container instance the task is launched on.

              If the ``InferenceAccelerator`` type is used, the ``value`` should match the
              ``deviceName`` for an  InferenceAccelerator specified in a task definition.

            - **type** *(string) --*

              The type of resource to assign to a container. The supported values are ``GPU``
              or ``InferenceAccelerator`` .

    - **cpu** *(string) --*

      The cpu override for the task.

    - **inferenceAcceleratorOverrides** *(list) --*

      The Elastic Inference accelerator override for the task.

      - *(dict) --*

        Details on an Elastic Inference accelerator task override. This parameter is used to
        override the Elastic Inference accelerator specified in the task definition. For more
        information, see `Working with Amazon Elastic Inference on Amazon ECS
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in the
        *Amazon Elastic Container Service Developer Guide* .

        - **deviceName** *(string) --*

          The Elastic Inference accelerator device name to override for the task. This
          parameter must match a ``deviceName`` specified in the task definition.

        - **deviceType** *(string) --*

          The Elastic Inference accelerator type to use.

    - **executionRoleArn** *(string) --*

      The Amazon Resource Name (ARN) of the task execution role that the Amazon ECS container
      agent and the Docker daemon can assume.

    - **memory** *(string) --*

      The memory override for the task.

    - **taskRoleArn** *(string) --*

      The Amazon Resource Name (ARN) of the IAM role that containers in this task can assume.
      All containers in this task are granted the permissions that are specified in this role.
    """


_ClientDescribeTasksResponsetaskstagsTypeDef = TypedDict(
    "_ClientDescribeTasksResponsetaskstagsTypeDef",
    {"key": str, "value": str},
    total=False,
)


class ClientDescribeTasksResponsetaskstagsTypeDef(
    _ClientDescribeTasksResponsetaskstagsTypeDef
):
    """
    Type definition for `ClientDescribeTasksResponsetasks` `tags`

    The metadata that you apply to a resource to help you categorize and organize them.
    Each tag consists of a key and an optional value, both of which you define.

    The following basic restrictions apply to tags:

    * Maximum number of tags per resource - 50

    * For each resource, each tag key must be unique, and each tag key can have only one
    value.

    * Maximum key length - 128 Unicode characters in UTF-8

    * Maximum value length - 256 Unicode characters in UTF-8

    * If your tagging schema is used across multiple services and resources, remember that
    other services may have restrictions on allowed characters. Generally allowed
    characters are: letters, numbers, and spaces representable in UTF-8, and the following
    characters: + - = . _ : / @.

    * Tag keys and values are case-sensitive.

    * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
    prefix for either keys or values as it is reserved for AWS use. You cannot edit or
    delete tag keys or values with this prefix. Tags with this prefix do not count against
    your tags per resource limit.

    - **key** *(string) --*

      One part of a key-value pair that make up a tag. A ``key`` is a general label that
      acts like a category for more specific tag values.

    - **value** *(string) --*

      The optional part of a key-value pair that make up a tag. A ``value`` acts as a
      descriptor within a tag category (key).
    """


_ClientDescribeTasksResponsetasksTypeDef = TypedDict(
    "_ClientDescribeTasksResponsetasksTypeDef",
    {
        "attachments": List[ClientDescribeTasksResponsetasksattachmentsTypeDef],
        "attributes": List[ClientDescribeTasksResponsetasksattributesTypeDef],
        "availabilityZone": str,
        "clusterArn": str,
        "connectivity": str,
        "connectivityAt": datetime,
        "containerInstanceArn": str,
        "containers": List[ClientDescribeTasksResponsetaskscontainersTypeDef],
        "cpu": str,
        "createdAt": datetime,
        "desiredStatus": str,
        "executionStoppedAt": datetime,
        "group": str,
        "healthStatus": str,
        "inferenceAccelerators": List[
            ClientDescribeTasksResponsetasksinferenceAcceleratorsTypeDef
        ],
        "lastStatus": str,
        "launchType": str,
        "memory": str,
        "overrides": ClientDescribeTasksResponsetasksoverridesTypeDef,
        "platformVersion": str,
        "pullStartedAt": datetime,
        "pullStoppedAt": datetime,
        "startedAt": datetime,
        "startedBy": str,
        "stopCode": str,
        "stoppedAt": datetime,
        "stoppedReason": str,
        "stoppingAt": datetime,
        "tags": List[ClientDescribeTasksResponsetaskstagsTypeDef],
        "taskArn": str,
        "taskDefinitionArn": str,
        "version": int,
    },
    total=False,
)


class ClientDescribeTasksResponsetasksTypeDef(_ClientDescribeTasksResponsetasksTypeDef):
    """
    Type definition for `ClientDescribeTasksResponse` `tasks`

    Details on a task in a cluster.

    - **attachments** *(list) --*

      The Elastic Network Adapter associated with the task if the task uses the ``awsvpc``
      network mode.

      - *(dict) --*

        An object representing a container instance or task attachment.

        - **id** *(string) --*

          The unique identifier for the attachment.

        - **type** *(string) --*

          The type of the attachment, such as ``ElasticNetworkInterface`` .

        - **status** *(string) --*

          The status of the attachment. Valid values are ``PRECREATED`` , ``CREATED`` ,
          ``ATTACHING`` , ``ATTACHED`` , ``DETACHING`` , ``DETACHED`` , and ``DELETED`` .

        - **details** *(list) --*

          Details of the attachment. For elastic network interfaces, this includes the network
          interface ID, the MAC address, the subnet ID, and the private IPv4 address.

          - *(dict) --*

            A key-value pair object.

            - **name** *(string) --*

              The name of the key-value pair. For environment variables, this is the name of
              the environment variable.

            - **value** *(string) --*

              The value of the key-value pair. For environment variables, this is the value of
              the environment variable.

    - **attributes** *(list) --*

      The attributes of the task

      - *(dict) --*

        An attribute is a name-value pair associated with an Amazon ECS object. Attributes
        enable you to extend the Amazon ECS data model by adding custom metadata to your
        resources. For more information, see `Attributes
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html#attributes>`__
        in the *Amazon Elastic Container Service Developer Guide* .

        - **name** *(string) --*

          The name of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
          hyphens, underscores, and periods are allowed.

        - **value** *(string) --*

          The value of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
          hyphens, underscores, periods, at signs (@), forward slashes, colons, and spaces are
          allowed.

        - **targetType** *(string) --*

          The type of the target with which to attach the attribute. This parameter is required
          if you use the short form ID for a resource instead of the full ARN.

        - **targetId** *(string) --*

          The ID of the target. You can specify the short form ID for a resource or the full
          Amazon Resource Name (ARN).

    - **availabilityZone** *(string) --*

      The availability zone of the task.

    - **clusterArn** *(string) --*

      The ARN of the cluster that hosts the task.

    - **connectivity** *(string) --*

      The connectivity status of a task.

    - **connectivityAt** *(datetime) --*

      The Unix timestamp for when the task last went into ``CONNECTED`` status.

    - **containerInstanceArn** *(string) --*

      The ARN of the container instances that host the task.

    - **containers** *(list) --*

      The containers associated with the task.

      - *(dict) --*

        A Docker container that is part of a task.

        - **containerArn** *(string) --*

          The Amazon Resource Name (ARN) of the container.

        - **taskArn** *(string) --*

          The ARN of the task.

        - **name** *(string) --*

          The name of the container.

        - **image** *(string) --*

          The image used for the container.

        - **imageDigest** *(string) --*

          The container image manifest digest.

          .. note::

            The ``imageDigest`` is only returned if the container is using an image hosted in
            Amazon ECR, otherwise it is omitted.

        - **runtimeId** *(string) --*

          The ID of the Docker container.

        - **lastStatus** *(string) --*

          The last known status of the container.

        - **exitCode** *(integer) --*

          The exit code returned from the container.

        - **reason** *(string) --*

          A short (255 max characters) human-readable string to provide additional details
          about a running or stopped container.

        - **networkBindings** *(list) --*

          The network bindings associated with the container.

          - *(dict) --*

            Details on the network bindings between a container and its host container
            instance. After a task reaches the ``RUNNING`` status, manual and automatic host
            and container port assignments are visible in the ``networkBindings`` section of
            DescribeTasks API responses.

            - **bindIP** *(string) --*

              The IP address that the container is bound to on the container instance.

            - **containerPort** *(integer) --*

              The port number on the container that is used with the network binding.

            - **hostPort** *(integer) --*

              The port number on the host that is used with the network binding.

            - **protocol** *(string) --*

              The protocol used for the network binding.

        - **networkInterfaces** *(list) --*

          The network interfaces associated with the container.

          - *(dict) --*

            An object representing the elastic network interface for tasks that use the
            ``awsvpc`` network mode.

            - **attachmentId** *(string) --*

              The attachment ID for the network interface.

            - **privateIpv4Address** *(string) --*

              The private IPv4 address for the network interface.

            - **ipv6Address** *(string) --*

              The private IPv6 address for the network interface.

        - **healthStatus** *(string) --*

          The health status of the container. If health checks are not configured for this
          container in its task definition, then it reports the health status as ``UNKNOWN`` .

        - **cpu** *(string) --*

          The number of CPU units set for the container. The value will be ``0`` if no value
          was specified in the container definition when the task definition was registered.

        - **memory** *(string) --*

          The hard limit (in MiB) of memory set for the container.

        - **memoryReservation** *(string) --*

          The soft limit (in MiB) of memory set for the container.

        - **gpuIds** *(list) --*

          The IDs of each GPU assigned to the container.

          - *(string) --*

    - **cpu** *(string) --*

      The number of CPU units used by the task as expressed in a task definition. It can be
      expressed as an integer using CPU units, for example ``1024`` . It can also be expressed
      as a string using vCPUs, for example ``1 vCPU`` or ``1 vcpu`` . String values are
      converted to an integer indicating the CPU units when the task definition is registered.

      If you are using the EC2 launch type, this field is optional. Supported values are
      between ``128`` CPU units (``0.125`` vCPUs) and ``10240`` CPU units (``10`` vCPUs).

      If you are using the Fargate launch type, this field is required and you must use one of
      the following values, which determines your range of supported values for the ``memory``
      parameter:

      * 256 (.25 vCPU) - Available ``memory`` values: 512 (0.5 GB), 1024 (1 GB), 2048 (2 GB)

      * 512 (.5 vCPU) - Available ``memory`` values: 1024 (1 GB), 2048 (2 GB), 3072 (3 GB),
      4096 (4 GB)

      * 1024 (1 vCPU) - Available ``memory`` values: 2048 (2 GB), 3072 (3 GB), 4096 (4 GB),
      5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB)

      * 2048 (2 vCPU) - Available ``memory`` values: Between 4096 (4 GB) and 16384 (16 GB) in
      increments of 1024 (1 GB)

      * 4096 (4 vCPU) - Available ``memory`` values: Between 8192 (8 GB) and 30720 (30 GB) in
      increments of 1024 (1 GB)

    - **createdAt** *(datetime) --*

      The Unix timestamp for when the task was created (the task entered the ``PENDING`` state).

    - **desiredStatus** *(string) --*

      The desired status of the task. For more information, see `Task Lifecycle
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-lifecycle.html>`__ .

    - **executionStoppedAt** *(datetime) --*

      The Unix timestamp for when the task execution stopped.

    - **group** *(string) --*

      The name of the task group associated with the task.

    - **healthStatus** *(string) --*

      The health status for the task, which is determined by the health of the essential
      containers in the task. If all essential containers in the task are reporting as
      ``HEALTHY`` , then the task status also reports as ``HEALTHY`` . If any essential
      containers in the task are reporting as ``UNHEALTHY`` or ``UNKNOWN`` , then the task
      status also reports as ``UNHEALTHY`` or ``UNKNOWN`` , accordingly.

      .. note::

        The Amazon ECS container agent does not monitor or report on Docker health checks that
        are embedded in a container image (such as those specified in a parent image or from
        the image's Dockerfile) and not specified in the container definition. Health check
        parameters that are specified in a container definition override any Docker health
        checks that exist in the container image.

    - **inferenceAccelerators** *(list) --*

      The Elastic Inference accelerator associated with the task.

      - *(dict) --*

        Details on a Elastic Inference accelerator. For more information, see `Working with
        Amazon Elastic Inference on Amazon ECS
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in the
        *Amazon Elastic Container Service Developer Guide* .

        - **deviceName** *(string) --*

          The Elastic Inference accelerator device name. The ``deviceName`` must also be
          referenced in a container definition as a  ResourceRequirement .

        - **deviceType** *(string) --*

          The Elastic Inference accelerator type to use.

    - **lastStatus** *(string) --*

      The last known status of the task. For more information, see `Task Lifecycle
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-lifecycle.html>`__ .

    - **launchType** *(string) --*

      The launch type on which your task is running. For more information, see `Amazon ECS
      Launch Types
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html>`__ in the
      *Amazon Elastic Container Service Developer Guide* .

    - **memory** *(string) --*

      The amount of memory (in MiB) used by the task as expressed in a task definition. It can
      be expressed as an integer using MiB, for example ``1024`` . It can also be expressed as
      a string using GB, for example ``1GB`` or ``1 GB`` . String values are converted to an
      integer indicating the MiB when the task definition is registered.

      If you are using the EC2 launch type, this field is optional.

      If you are using the Fargate launch type, this field is required and you must use one of
      the following values, which determines your range of supported values for the ``cpu``
      parameter:

      * 512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) - Available ``cpu`` values: 256 (.25 vCPU)

      * 1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available ``cpu`` values: 512 (.5
      vCPU)

      * 2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8
      GB) - Available ``cpu`` values: 1024 (1 vCPU)

      * Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB) - Available ``cpu``
      values: 2048 (2 vCPU)

      * Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB) - Available ``cpu``
      values: 4096 (4 vCPU)

    - **overrides** *(dict) --*

      One or more container overrides.

      - **containerOverrides** *(list) --*

        One or more container overrides sent to a task.

        - *(dict) --*

          The overrides that should be sent to a container. An empty container override can be
          passed in. An example of an empty container override would be
          ``{"containerOverrides": [ ] }`` . If a non-empty container override is specified,
          the ``name`` parameter must be included.

          - **name** *(string) --*

            The name of the container that receives the override. This parameter is required if
            any override is specified.

          - **command** *(list) --*

            The command to send to the container that overrides the default command from the
            Docker image or the task definition. You must also specify a container name.

            - *(string) --*

          - **environment** *(list) --*

            The environment variables to send to the container. You can add new environment
            variables, which are added to the container at launch, or you can override the
            existing environment variables from the Docker image or the task definition. You
            must also specify a container name.

            - *(dict) --*

              A key-value pair object.

              - **name** *(string) --*

                The name of the key-value pair. For environment variables, this is the name of
                the environment variable.

              - **value** *(string) --*

                The value of the key-value pair. For environment variables, this is the value
                of the environment variable.

          - **cpu** *(integer) --*

            The number of ``cpu`` units reserved for the container, instead of the default
            value from the task definition. You must also specify a container name.

          - **memory** *(integer) --*

            The hard limit (in MiB) of memory to present to the container, instead of the
            default value from the task definition. If your container attempts to exceed the
            memory specified here, the container is killed. You must also specify a container
            name.

          - **memoryReservation** *(integer) --*

            The soft limit (in MiB) of memory to reserve for the container, instead of the
            default value from the task definition. You must also specify a container name.

          - **resourceRequirements** *(list) --*

            The type and amount of a resource to assign to a container, instead of the default
            value from the task definition. The only supported resource is a GPU.

            - *(dict) --*

              The type and amount of a resource to assign to a container. The supported
              resource types are GPUs and Elastic Inference accelerators. For more information,
              see `Working with GPUs on Amazon ECS
              <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-gpu.html>`__ or
              `Working with Amazon Elastic Inference on Amazon ECS
              <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in
              the *Amazon Elastic Container Service Developer Guide*

              - **value** *(string) --*

                The value for the specified resource type.

                If the ``GPU`` type is used, the value is the number of physical ``GPUs`` the
                Amazon ECS container agent will reserve for the container. The number of GPUs
                reserved for all containers in a task should not exceed the number of available
                GPUs on the container instance the task is launched on.

                If the ``InferenceAccelerator`` type is used, the ``value`` should match the
                ``deviceName`` for an  InferenceAccelerator specified in a task definition.

              - **type** *(string) --*

                The type of resource to assign to a container. The supported values are ``GPU``
                or ``InferenceAccelerator`` .

      - **cpu** *(string) --*

        The cpu override for the task.

      - **inferenceAcceleratorOverrides** *(list) --*

        The Elastic Inference accelerator override for the task.

        - *(dict) --*

          Details on an Elastic Inference accelerator task override. This parameter is used to
          override the Elastic Inference accelerator specified in the task definition. For more
          information, see `Working with Amazon Elastic Inference on Amazon ECS
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in the
          *Amazon Elastic Container Service Developer Guide* .

          - **deviceName** *(string) --*

            The Elastic Inference accelerator device name to override for the task. This
            parameter must match a ``deviceName`` specified in the task definition.

          - **deviceType** *(string) --*

            The Elastic Inference accelerator type to use.

      - **executionRoleArn** *(string) --*

        The Amazon Resource Name (ARN) of the task execution role that the Amazon ECS container
        agent and the Docker daemon can assume.

      - **memory** *(string) --*

        The memory override for the task.

      - **taskRoleArn** *(string) --*

        The Amazon Resource Name (ARN) of the IAM role that containers in this task can assume.
        All containers in this task are granted the permissions that are specified in this role.

    - **platformVersion** *(string) --*

      The platform version on which your task is running. A platform version is only specified
      for tasks using the Fargate launch type. If one is not specified, the ``LATEST`` platform
      version is used by default. For more information, see `AWS Fargate Platform Versions
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

    - **pullStartedAt** *(datetime) --*

      The Unix timestamp for when the container image pull began.

    - **pullStoppedAt** *(datetime) --*

      The Unix timestamp for when the container image pull completed.

    - **startedAt** *(datetime) --*

      The Unix timestamp for when the task started (the task transitioned from the ``PENDING``
      state to the ``RUNNING`` state).

    - **startedBy** *(string) --*

      The tag specified when a task is started. If the task is started by an Amazon ECS
      service, then the ``startedBy`` parameter contains the deployment ID of the service that
      starts it.

    - **stopCode** *(string) --*

      The stop code indicating why a task was stopped. The ``stoppedReason`` may contain
      additional details.

    - **stoppedAt** *(datetime) --*

      The Unix timestamp for when the task was stopped (the task transitioned from the
      ``RUNNING`` state to the ``STOPPED`` state).

    - **stoppedReason** *(string) --*

      The reason that the task was stopped.

    - **stoppingAt** *(datetime) --*

      The Unix timestamp for when the task stops (transitions from the ``RUNNING`` state to
      ``STOPPED`` ).

    - **tags** *(list) --*

      The metadata that you apply to the task to help you categorize and organize them. Each
      tag consists of a key and an optional value, both of which you define.

      The following basic restrictions apply to tags:

      * Maximum number of tags per resource - 50

      * For each resource, each tag key must be unique, and each tag key can have only one
      value.

      * Maximum key length - 128 Unicode characters in UTF-8

      * Maximum value length - 256 Unicode characters in UTF-8

      * If your tagging schema is used across multiple services and resources, remember that
      other services may have restrictions on allowed characters. Generally allowed characters
      are: letters, numbers, and spaces representable in UTF-8, and the following characters: +
      - = . _ : / @.

      * Tag keys and values are case-sensitive.

      * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
      prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
      tag keys or values with this prefix. Tags with this prefix do not count against your tags
      per resource limit.

      - *(dict) --*

        The metadata that you apply to a resource to help you categorize and organize them.
        Each tag consists of a key and an optional value, both of which you define.

        The following basic restrictions apply to tags:

        * Maximum number of tags per resource - 50

        * For each resource, each tag key must be unique, and each tag key can have only one
        value.

        * Maximum key length - 128 Unicode characters in UTF-8

        * Maximum value length - 256 Unicode characters in UTF-8

        * If your tagging schema is used across multiple services and resources, remember that
        other services may have restrictions on allowed characters. Generally allowed
        characters are: letters, numbers, and spaces representable in UTF-8, and the following
        characters: + - = . _ : / @.

        * Tag keys and values are case-sensitive.

        * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
        prefix for either keys or values as it is reserved for AWS use. You cannot edit or
        delete tag keys or values with this prefix. Tags with this prefix do not count against
        your tags per resource limit.

        - **key** *(string) --*

          One part of a key-value pair that make up a tag. A ``key`` is a general label that
          acts like a category for more specific tag values.

        - **value** *(string) --*

          The optional part of a key-value pair that make up a tag. A ``value`` acts as a
          descriptor within a tag category (key).

    - **taskArn** *(string) --*

      The Amazon Resource Name (ARN) of the task.

    - **taskDefinitionArn** *(string) --*

      The ARN of the task definition that creates the task.

    - **version** *(integer) --*

      The version counter for the task. Every time a task experiences a change that triggers a
      CloudWatch event, the version counter is incremented. If you are replicating your Amazon
      ECS task state with CloudWatch Events, you can compare the version of a task reported by
      the Amazon ECS API actions with the version reported in CloudWatch Events for the task
      (inside the ``detail`` object) to verify that the version in your event stream is current.
    """


_ClientDescribeTasksResponseTypeDef = TypedDict(
    "_ClientDescribeTasksResponseTypeDef",
    {
        "tasks": List[ClientDescribeTasksResponsetasksTypeDef],
        "failures": List[ClientDescribeTasksResponsefailuresTypeDef],
    },
    total=False,
)


class ClientDescribeTasksResponseTypeDef(_ClientDescribeTasksResponseTypeDef):
    """
    Type definition for `ClientDescribeTasks` `Response`

    - **tasks** *(list) --*

      The list of tasks.

      - *(dict) --*

        Details on a task in a cluster.

        - **attachments** *(list) --*

          The Elastic Network Adapter associated with the task if the task uses the ``awsvpc``
          network mode.

          - *(dict) --*

            An object representing a container instance or task attachment.

            - **id** *(string) --*

              The unique identifier for the attachment.

            - **type** *(string) --*

              The type of the attachment, such as ``ElasticNetworkInterface`` .

            - **status** *(string) --*

              The status of the attachment. Valid values are ``PRECREATED`` , ``CREATED`` ,
              ``ATTACHING`` , ``ATTACHED`` , ``DETACHING`` , ``DETACHED`` , and ``DELETED`` .

            - **details** *(list) --*

              Details of the attachment. For elastic network interfaces, this includes the network
              interface ID, the MAC address, the subnet ID, and the private IPv4 address.

              - *(dict) --*

                A key-value pair object.

                - **name** *(string) --*

                  The name of the key-value pair. For environment variables, this is the name of
                  the environment variable.

                - **value** *(string) --*

                  The value of the key-value pair. For environment variables, this is the value of
                  the environment variable.

        - **attributes** *(list) --*

          The attributes of the task

          - *(dict) --*

            An attribute is a name-value pair associated with an Amazon ECS object. Attributes
            enable you to extend the Amazon ECS data model by adding custom metadata to your
            resources. For more information, see `Attributes
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html#attributes>`__
            in the *Amazon Elastic Container Service Developer Guide* .

            - **name** *(string) --*

              The name of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
              hyphens, underscores, and periods are allowed.

            - **value** *(string) --*

              The value of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
              hyphens, underscores, periods, at signs (@), forward slashes, colons, and spaces are
              allowed.

            - **targetType** *(string) --*

              The type of the target with which to attach the attribute. This parameter is required
              if you use the short form ID for a resource instead of the full ARN.

            - **targetId** *(string) --*

              The ID of the target. You can specify the short form ID for a resource or the full
              Amazon Resource Name (ARN).

        - **availabilityZone** *(string) --*

          The availability zone of the task.

        - **clusterArn** *(string) --*

          The ARN of the cluster that hosts the task.

        - **connectivity** *(string) --*

          The connectivity status of a task.

        - **connectivityAt** *(datetime) --*

          The Unix timestamp for when the task last went into ``CONNECTED`` status.

        - **containerInstanceArn** *(string) --*

          The ARN of the container instances that host the task.

        - **containers** *(list) --*

          The containers associated with the task.

          - *(dict) --*

            A Docker container that is part of a task.

            - **containerArn** *(string) --*

              The Amazon Resource Name (ARN) of the container.

            - **taskArn** *(string) --*

              The ARN of the task.

            - **name** *(string) --*

              The name of the container.

            - **image** *(string) --*

              The image used for the container.

            - **imageDigest** *(string) --*

              The container image manifest digest.

              .. note::

                The ``imageDigest`` is only returned if the container is using an image hosted in
                Amazon ECR, otherwise it is omitted.

            - **runtimeId** *(string) --*

              The ID of the Docker container.

            - **lastStatus** *(string) --*

              The last known status of the container.

            - **exitCode** *(integer) --*

              The exit code returned from the container.

            - **reason** *(string) --*

              A short (255 max characters) human-readable string to provide additional details
              about a running or stopped container.

            - **networkBindings** *(list) --*

              The network bindings associated with the container.

              - *(dict) --*

                Details on the network bindings between a container and its host container
                instance. After a task reaches the ``RUNNING`` status, manual and automatic host
                and container port assignments are visible in the ``networkBindings`` section of
                DescribeTasks API responses.

                - **bindIP** *(string) --*

                  The IP address that the container is bound to on the container instance.

                - **containerPort** *(integer) --*

                  The port number on the container that is used with the network binding.

                - **hostPort** *(integer) --*

                  The port number on the host that is used with the network binding.

                - **protocol** *(string) --*

                  The protocol used for the network binding.

            - **networkInterfaces** *(list) --*

              The network interfaces associated with the container.

              - *(dict) --*

                An object representing the elastic network interface for tasks that use the
                ``awsvpc`` network mode.

                - **attachmentId** *(string) --*

                  The attachment ID for the network interface.

                - **privateIpv4Address** *(string) --*

                  The private IPv4 address for the network interface.

                - **ipv6Address** *(string) --*

                  The private IPv6 address for the network interface.

            - **healthStatus** *(string) --*

              The health status of the container. If health checks are not configured for this
              container in its task definition, then it reports the health status as ``UNKNOWN`` .

            - **cpu** *(string) --*

              The number of CPU units set for the container. The value will be ``0`` if no value
              was specified in the container definition when the task definition was registered.

            - **memory** *(string) --*

              The hard limit (in MiB) of memory set for the container.

            - **memoryReservation** *(string) --*

              The soft limit (in MiB) of memory set for the container.

            - **gpuIds** *(list) --*

              The IDs of each GPU assigned to the container.

              - *(string) --*

        - **cpu** *(string) --*

          The number of CPU units used by the task as expressed in a task definition. It can be
          expressed as an integer using CPU units, for example ``1024`` . It can also be expressed
          as a string using vCPUs, for example ``1 vCPU`` or ``1 vcpu`` . String values are
          converted to an integer indicating the CPU units when the task definition is registered.

          If you are using the EC2 launch type, this field is optional. Supported values are
          between ``128`` CPU units (``0.125`` vCPUs) and ``10240`` CPU units (``10`` vCPUs).

          If you are using the Fargate launch type, this field is required and you must use one of
          the following values, which determines your range of supported values for the ``memory``
          parameter:

          * 256 (.25 vCPU) - Available ``memory`` values: 512 (0.5 GB), 1024 (1 GB), 2048 (2 GB)

          * 512 (.5 vCPU) - Available ``memory`` values: 1024 (1 GB), 2048 (2 GB), 3072 (3 GB),
          4096 (4 GB)

          * 1024 (1 vCPU) - Available ``memory`` values: 2048 (2 GB), 3072 (3 GB), 4096 (4 GB),
          5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB)

          * 2048 (2 vCPU) - Available ``memory`` values: Between 4096 (4 GB) and 16384 (16 GB) in
          increments of 1024 (1 GB)

          * 4096 (4 vCPU) - Available ``memory`` values: Between 8192 (8 GB) and 30720 (30 GB) in
          increments of 1024 (1 GB)

        - **createdAt** *(datetime) --*

          The Unix timestamp for when the task was created (the task entered the ``PENDING`` state).

        - **desiredStatus** *(string) --*

          The desired status of the task. For more information, see `Task Lifecycle
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-lifecycle.html>`__ .

        - **executionStoppedAt** *(datetime) --*

          The Unix timestamp for when the task execution stopped.

        - **group** *(string) --*

          The name of the task group associated with the task.

        - **healthStatus** *(string) --*

          The health status for the task, which is determined by the health of the essential
          containers in the task. If all essential containers in the task are reporting as
          ``HEALTHY`` , then the task status also reports as ``HEALTHY`` . If any essential
          containers in the task are reporting as ``UNHEALTHY`` or ``UNKNOWN`` , then the task
          status also reports as ``UNHEALTHY`` or ``UNKNOWN`` , accordingly.

          .. note::

            The Amazon ECS container agent does not monitor or report on Docker health checks that
            are embedded in a container image (such as those specified in a parent image or from
            the image's Dockerfile) and not specified in the container definition. Health check
            parameters that are specified in a container definition override any Docker health
            checks that exist in the container image.

        - **inferenceAccelerators** *(list) --*

          The Elastic Inference accelerator associated with the task.

          - *(dict) --*

            Details on a Elastic Inference accelerator. For more information, see `Working with
            Amazon Elastic Inference on Amazon ECS
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in the
            *Amazon Elastic Container Service Developer Guide* .

            - **deviceName** *(string) --*

              The Elastic Inference accelerator device name. The ``deviceName`` must also be
              referenced in a container definition as a  ResourceRequirement .

            - **deviceType** *(string) --*

              The Elastic Inference accelerator type to use.

        - **lastStatus** *(string) --*

          The last known status of the task. For more information, see `Task Lifecycle
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-lifecycle.html>`__ .

        - **launchType** *(string) --*

          The launch type on which your task is running. For more information, see `Amazon ECS
          Launch Types
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html>`__ in the
          *Amazon Elastic Container Service Developer Guide* .

        - **memory** *(string) --*

          The amount of memory (in MiB) used by the task as expressed in a task definition. It can
          be expressed as an integer using MiB, for example ``1024`` . It can also be expressed as
          a string using GB, for example ``1GB`` or ``1 GB`` . String values are converted to an
          integer indicating the MiB when the task definition is registered.

          If you are using the EC2 launch type, this field is optional.

          If you are using the Fargate launch type, this field is required and you must use one of
          the following values, which determines your range of supported values for the ``cpu``
          parameter:

          * 512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) - Available ``cpu`` values: 256 (.25 vCPU)

          * 1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available ``cpu`` values: 512 (.5
          vCPU)

          * 2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8
          GB) - Available ``cpu`` values: 1024 (1 vCPU)

          * Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB) - Available ``cpu``
          values: 2048 (2 vCPU)

          * Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB) - Available ``cpu``
          values: 4096 (4 vCPU)

        - **overrides** *(dict) --*

          One or more container overrides.

          - **containerOverrides** *(list) --*

            One or more container overrides sent to a task.

            - *(dict) --*

              The overrides that should be sent to a container. An empty container override can be
              passed in. An example of an empty container override would be
              ``{"containerOverrides": [ ] }`` . If a non-empty container override is specified,
              the ``name`` parameter must be included.

              - **name** *(string) --*

                The name of the container that receives the override. This parameter is required if
                any override is specified.

              - **command** *(list) --*

                The command to send to the container that overrides the default command from the
                Docker image or the task definition. You must also specify a container name.

                - *(string) --*

              - **environment** *(list) --*

                The environment variables to send to the container. You can add new environment
                variables, which are added to the container at launch, or you can override the
                existing environment variables from the Docker image or the task definition. You
                must also specify a container name.

                - *(dict) --*

                  A key-value pair object.

                  - **name** *(string) --*

                    The name of the key-value pair. For environment variables, this is the name of
                    the environment variable.

                  - **value** *(string) --*

                    The value of the key-value pair. For environment variables, this is the value
                    of the environment variable.

              - **cpu** *(integer) --*

                The number of ``cpu`` units reserved for the container, instead of the default
                value from the task definition. You must also specify a container name.

              - **memory** *(integer) --*

                The hard limit (in MiB) of memory to present to the container, instead of the
                default value from the task definition. If your container attempts to exceed the
                memory specified here, the container is killed. You must also specify a container
                name.

              - **memoryReservation** *(integer) --*

                The soft limit (in MiB) of memory to reserve for the container, instead of the
                default value from the task definition. You must also specify a container name.

              - **resourceRequirements** *(list) --*

                The type and amount of a resource to assign to a container, instead of the default
                value from the task definition. The only supported resource is a GPU.

                - *(dict) --*

                  The type and amount of a resource to assign to a container. The supported
                  resource types are GPUs and Elastic Inference accelerators. For more information,
                  see `Working with GPUs on Amazon ECS
                  <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-gpu.html>`__ or
                  `Working with Amazon Elastic Inference on Amazon ECS
                  <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in
                  the *Amazon Elastic Container Service Developer Guide*

                  - **value** *(string) --*

                    The value for the specified resource type.

                    If the ``GPU`` type is used, the value is the number of physical ``GPUs`` the
                    Amazon ECS container agent will reserve for the container. The number of GPUs
                    reserved for all containers in a task should not exceed the number of available
                    GPUs on the container instance the task is launched on.

                    If the ``InferenceAccelerator`` type is used, the ``value`` should match the
                    ``deviceName`` for an  InferenceAccelerator specified in a task definition.

                  - **type** *(string) --*

                    The type of resource to assign to a container. The supported values are ``GPU``
                    or ``InferenceAccelerator`` .

          - **cpu** *(string) --*

            The cpu override for the task.

          - **inferenceAcceleratorOverrides** *(list) --*

            The Elastic Inference accelerator override for the task.

            - *(dict) --*

              Details on an Elastic Inference accelerator task override. This parameter is used to
              override the Elastic Inference accelerator specified in the task definition. For more
              information, see `Working with Amazon Elastic Inference on Amazon ECS
              <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in the
              *Amazon Elastic Container Service Developer Guide* .

              - **deviceName** *(string) --*

                The Elastic Inference accelerator device name to override for the task. This
                parameter must match a ``deviceName`` specified in the task definition.

              - **deviceType** *(string) --*

                The Elastic Inference accelerator type to use.

          - **executionRoleArn** *(string) --*

            The Amazon Resource Name (ARN) of the task execution role that the Amazon ECS container
            agent and the Docker daemon can assume.

          - **memory** *(string) --*

            The memory override for the task.

          - **taskRoleArn** *(string) --*

            The Amazon Resource Name (ARN) of the IAM role that containers in this task can assume.
            All containers in this task are granted the permissions that are specified in this role.

        - **platformVersion** *(string) --*

          The platform version on which your task is running. A platform version is only specified
          for tasks using the Fargate launch type. If one is not specified, the ``LATEST`` platform
          version is used by default. For more information, see `AWS Fargate Platform Versions
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

        - **pullStartedAt** *(datetime) --*

          The Unix timestamp for when the container image pull began.

        - **pullStoppedAt** *(datetime) --*

          The Unix timestamp for when the container image pull completed.

        - **startedAt** *(datetime) --*

          The Unix timestamp for when the task started (the task transitioned from the ``PENDING``
          state to the ``RUNNING`` state).

        - **startedBy** *(string) --*

          The tag specified when a task is started. If the task is started by an Amazon ECS
          service, then the ``startedBy`` parameter contains the deployment ID of the service that
          starts it.

        - **stopCode** *(string) --*

          The stop code indicating why a task was stopped. The ``stoppedReason`` may contain
          additional details.

        - **stoppedAt** *(datetime) --*

          The Unix timestamp for when the task was stopped (the task transitioned from the
          ``RUNNING`` state to the ``STOPPED`` state).

        - **stoppedReason** *(string) --*

          The reason that the task was stopped.

        - **stoppingAt** *(datetime) --*

          The Unix timestamp for when the task stops (transitions from the ``RUNNING`` state to
          ``STOPPED`` ).

        - **tags** *(list) --*

          The metadata that you apply to the task to help you categorize and organize them. Each
          tag consists of a key and an optional value, both of which you define.

          The following basic restrictions apply to tags:

          * Maximum number of tags per resource - 50

          * For each resource, each tag key must be unique, and each tag key can have only one
          value.

          * Maximum key length - 128 Unicode characters in UTF-8

          * Maximum value length - 256 Unicode characters in UTF-8

          * If your tagging schema is used across multiple services and resources, remember that
          other services may have restrictions on allowed characters. Generally allowed characters
          are: letters, numbers, and spaces representable in UTF-8, and the following characters: +
          - = . _ : / @.

          * Tag keys and values are case-sensitive.

          * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
          prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
          tag keys or values with this prefix. Tags with this prefix do not count against your tags
          per resource limit.

          - *(dict) --*

            The metadata that you apply to a resource to help you categorize and organize them.
            Each tag consists of a key and an optional value, both of which you define.

            The following basic restrictions apply to tags:

            * Maximum number of tags per resource - 50

            * For each resource, each tag key must be unique, and each tag key can have only one
            value.

            * Maximum key length - 128 Unicode characters in UTF-8

            * Maximum value length - 256 Unicode characters in UTF-8

            * If your tagging schema is used across multiple services and resources, remember that
            other services may have restrictions on allowed characters. Generally allowed
            characters are: letters, numbers, and spaces representable in UTF-8, and the following
            characters: + - = . _ : / @.

            * Tag keys and values are case-sensitive.

            * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
            prefix for either keys or values as it is reserved for AWS use. You cannot edit or
            delete tag keys or values with this prefix. Tags with this prefix do not count against
            your tags per resource limit.

            - **key** *(string) --*

              One part of a key-value pair that make up a tag. A ``key`` is a general label that
              acts like a category for more specific tag values.

            - **value** *(string) --*

              The optional part of a key-value pair that make up a tag. A ``value`` acts as a
              descriptor within a tag category (key).

        - **taskArn** *(string) --*

          The Amazon Resource Name (ARN) of the task.

        - **taskDefinitionArn** *(string) --*

          The ARN of the task definition that creates the task.

        - **version** *(integer) --*

          The version counter for the task. Every time a task experiences a change that triggers a
          CloudWatch event, the version counter is incremented. If you are replicating your Amazon
          ECS task state with CloudWatch Events, you can compare the version of a task reported by
          the Amazon ECS API actions with the version reported in CloudWatch Events for the task
          (inside the ``detail`` object) to verify that the version in your event stream is current.

    - **failures** *(list) --*

      Any failures associated with the call.

      - *(dict) --*

        A failed resource.

        - **arn** *(string) --*

          The Amazon Resource Name (ARN) of the failed resource.

        - **reason** *(string) --*

          The reason for the failure.

        - **detail** *(string) --*

          The details of the failure.
    """


_ClientDiscoverPollEndpointResponseTypeDef = TypedDict(
    "_ClientDiscoverPollEndpointResponseTypeDef",
    {"endpoint": str, "telemetryEndpoint": str},
    total=False,
)


class ClientDiscoverPollEndpointResponseTypeDef(
    _ClientDiscoverPollEndpointResponseTypeDef
):
    """
    Type definition for `ClientDiscoverPollEndpoint` `Response`

    - **endpoint** *(string) --*

      The endpoint for the Amazon ECS agent to poll.

    - **telemetryEndpoint** *(string) --*

      The telemetry endpoint for the Amazon ECS agent.
    """


_ClientListAccountSettingsResponsesettingsTypeDef = TypedDict(
    "_ClientListAccountSettingsResponsesettingsTypeDef",
    {"name": str, "value": str, "principalArn": str},
    total=False,
)


class ClientListAccountSettingsResponsesettingsTypeDef(
    _ClientListAccountSettingsResponsesettingsTypeDef
):
    """
    Type definition for `ClientListAccountSettingsResponse` `settings`

    The current account setting for a resource.

    - **name** *(string) --*

      The Amazon ECS resource name.

    - **value** *(string) --*

      Whether the account setting is enabled or disabled for the specified resource.

    - **principalArn** *(string) --*

      The ARN of the principal, which can be an IAM user, IAM role, or the root user. If this
      field is omitted, the authenticated user is assumed.
    """


_ClientListAccountSettingsResponseTypeDef = TypedDict(
    "_ClientListAccountSettingsResponseTypeDef",
    {
        "settings": List[ClientListAccountSettingsResponsesettingsTypeDef],
        "nextToken": str,
    },
    total=False,
)


class ClientListAccountSettingsResponseTypeDef(
    _ClientListAccountSettingsResponseTypeDef
):
    """
    Type definition for `ClientListAccountSettings` `Response`

    - **settings** *(list) --*

      The account settings for the resource.

      - *(dict) --*

        The current account setting for a resource.

        - **name** *(string) --*

          The Amazon ECS resource name.

        - **value** *(string) --*

          Whether the account setting is enabled or disabled for the specified resource.

        - **principalArn** *(string) --*

          The ARN of the principal, which can be an IAM user, IAM role, or the root user. If this
          field is omitted, the authenticated user is assumed.

    - **nextToken** *(string) --*

      The ``nextToken`` value to include in a future ``ListAccountSettings`` request. When the
      results of a ``ListAccountSettings`` request exceed ``maxResults`` , this value can be used
      to retrieve the next page of results. This value is ``null`` when there are no more results
      to return.
    """


_ClientListAttributesResponseattributesTypeDef = TypedDict(
    "_ClientListAttributesResponseattributesTypeDef",
    {"name": str, "value": str, "targetType": str, "targetId": str},
    total=False,
)


class ClientListAttributesResponseattributesTypeDef(
    _ClientListAttributesResponseattributesTypeDef
):
    """
    Type definition for `ClientListAttributesResponse` `attributes`

    An attribute is a name-value pair associated with an Amazon ECS object. Attributes enable
    you to extend the Amazon ECS data model by adding custom metadata to your resources. For
    more information, see `Attributes
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html#attributes>`__
    in the *Amazon Elastic Container Service Developer Guide* .

    - **name** *(string) --*

      The name of the attribute. Up to 128 letters (uppercase and lowercase), numbers, hyphens,
      underscores, and periods are allowed.

    - **value** *(string) --*

      The value of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
      hyphens, underscores, periods, at signs (@), forward slashes, colons, and spaces are
      allowed.

    - **targetType** *(string) --*

      The type of the target with which to attach the attribute. This parameter is required if
      you use the short form ID for a resource instead of the full ARN.

    - **targetId** *(string) --*

      The ID of the target. You can specify the short form ID for a resource or the full Amazon
      Resource Name (ARN).
    """


_ClientListAttributesResponseTypeDef = TypedDict(
    "_ClientListAttributesResponseTypeDef",
    {
        "attributes": List[ClientListAttributesResponseattributesTypeDef],
        "nextToken": str,
    },
    total=False,
)


class ClientListAttributesResponseTypeDef(_ClientListAttributesResponseTypeDef):
    """
    Type definition for `ClientListAttributes` `Response`

    - **attributes** *(list) --*

      A list of attribute objects that meet the criteria of the request.

      - *(dict) --*

        An attribute is a name-value pair associated with an Amazon ECS object. Attributes enable
        you to extend the Amazon ECS data model by adding custom metadata to your resources. For
        more information, see `Attributes
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html#attributes>`__
        in the *Amazon Elastic Container Service Developer Guide* .

        - **name** *(string) --*

          The name of the attribute. Up to 128 letters (uppercase and lowercase), numbers, hyphens,
          underscores, and periods are allowed.

        - **value** *(string) --*

          The value of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
          hyphens, underscores, periods, at signs (@), forward slashes, colons, and spaces are
          allowed.

        - **targetType** *(string) --*

          The type of the target with which to attach the attribute. This parameter is required if
          you use the short form ID for a resource instead of the full ARN.

        - **targetId** *(string) --*

          The ID of the target. You can specify the short form ID for a resource or the full Amazon
          Resource Name (ARN).

    - **nextToken** *(string) --*

      The ``nextToken`` value to include in a future ``ListAttributes`` request. When the results
      of a ``ListAttributes`` request exceed ``maxResults`` , this value can be used to retrieve
      the next page of results. This value is ``null`` when there are no more results to return.
    """


_ClientListClustersResponseTypeDef = TypedDict(
    "_ClientListClustersResponseTypeDef",
    {"clusterArns": List[str], "nextToken": str},
    total=False,
)


class ClientListClustersResponseTypeDef(_ClientListClustersResponseTypeDef):
    """
    Type definition for `ClientListClusters` `Response`

    - **clusterArns** *(list) --*

      The list of full Amazon Resource Name (ARN) entries for each cluster associated with your
      account.

      - *(string) --*

    - **nextToken** *(string) --*

      The ``nextToken`` value to include in a future ``ListClusters`` request. When the results of
      a ``ListClusters`` request exceed ``maxResults`` , this value can be used to retrieve the
      next page of results. This value is ``null`` when there are no more results to return.
    """


_ClientListContainerInstancesResponseTypeDef = TypedDict(
    "_ClientListContainerInstancesResponseTypeDef",
    {"containerInstanceArns": List[str], "nextToken": str},
    total=False,
)


class ClientListContainerInstancesResponseTypeDef(
    _ClientListContainerInstancesResponseTypeDef
):
    """
    Type definition for `ClientListContainerInstances` `Response`

    - **containerInstanceArns** *(list) --*

      The list of container instances with full ARN entries for each container instance associated
      with the specified cluster.

      - *(string) --*

    - **nextToken** *(string) --*

      The ``nextToken`` value to include in a future ``ListContainerInstances`` request. When the
      results of a ``ListContainerInstances`` request exceed ``maxResults`` , this value can be
      used to retrieve the next page of results. This value is ``null`` when there are no more
      results to return.
    """


_ClientListServicesResponseTypeDef = TypedDict(
    "_ClientListServicesResponseTypeDef",
    {"serviceArns": List[str], "nextToken": str},
    total=False,
)


class ClientListServicesResponseTypeDef(_ClientListServicesResponseTypeDef):
    """
    Type definition for `ClientListServices` `Response`

    - **serviceArns** *(list) --*

      The list of full ARN entries for each service associated with the specified cluster.

      - *(string) --*

    - **nextToken** *(string) --*

      The ``nextToken`` value to include in a future ``ListServices`` request. When the results of
      a ``ListServices`` request exceed ``maxResults`` , this value can be used to retrieve the
      next page of results. This value is ``null`` when there are no more results to return.
    """


_ClientListTagsForResourceResponsetagsTypeDef = TypedDict(
    "_ClientListTagsForResourceResponsetagsTypeDef",
    {"key": str, "value": str},
    total=False,
)


class ClientListTagsForResourceResponsetagsTypeDef(
    _ClientListTagsForResourceResponsetagsTypeDef
):
    """
    Type definition for `ClientListTagsForResourceResponse` `tags`

    The metadata that you apply to a resource to help you categorize and organize them. Each
    tag consists of a key and an optional value, both of which you define.

    The following basic restrictions apply to tags:

    * Maximum number of tags per resource - 50

    * For each resource, each tag key must be unique, and each tag key can have only one value.

    * Maximum key length - 128 Unicode characters in UTF-8

    * Maximum value length - 256 Unicode characters in UTF-8

    * If your tagging schema is used across multiple services and resources, remember that
    other services may have restrictions on allowed characters. Generally allowed characters
    are: letters, numbers, and spaces representable in UTF-8, and the following characters: + -
    = . _ : / @.

    * Tag keys and values are case-sensitive.

    * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
    prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
    tag keys or values with this prefix. Tags with this prefix do not count against your tags
    per resource limit.

    - **key** *(string) --*

      One part of a key-value pair that make up a tag. A ``key`` is a general label that acts
      like a category for more specific tag values.

    - **value** *(string) --*

      The optional part of a key-value pair that make up a tag. A ``value`` acts as a
      descriptor within a tag category (key).
    """


_ClientListTagsForResourceResponseTypeDef = TypedDict(
    "_ClientListTagsForResourceResponseTypeDef",
    {"tags": List[ClientListTagsForResourceResponsetagsTypeDef]},
    total=False,
)


class ClientListTagsForResourceResponseTypeDef(
    _ClientListTagsForResourceResponseTypeDef
):
    """
    Type definition for `ClientListTagsForResource` `Response`

    - **tags** *(list) --*

      The tags for the resource.

      - *(dict) --*

        The metadata that you apply to a resource to help you categorize and organize them. Each
        tag consists of a key and an optional value, both of which you define.

        The following basic restrictions apply to tags:

        * Maximum number of tags per resource - 50

        * For each resource, each tag key must be unique, and each tag key can have only one value.

        * Maximum key length - 128 Unicode characters in UTF-8

        * Maximum value length - 256 Unicode characters in UTF-8

        * If your tagging schema is used across multiple services and resources, remember that
        other services may have restrictions on allowed characters. Generally allowed characters
        are: letters, numbers, and spaces representable in UTF-8, and the following characters: + -
        = . _ : / @.

        * Tag keys and values are case-sensitive.

        * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
        prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
        tag keys or values with this prefix. Tags with this prefix do not count against your tags
        per resource limit.

        - **key** *(string) --*

          One part of a key-value pair that make up a tag. A ``key`` is a general label that acts
          like a category for more specific tag values.

        - **value** *(string) --*

          The optional part of a key-value pair that make up a tag. A ``value`` acts as a
          descriptor within a tag category (key).
    """


_ClientListTaskDefinitionFamiliesResponseTypeDef = TypedDict(
    "_ClientListTaskDefinitionFamiliesResponseTypeDef",
    {"families": List[str], "nextToken": str},
    total=False,
)


class ClientListTaskDefinitionFamiliesResponseTypeDef(
    _ClientListTaskDefinitionFamiliesResponseTypeDef
):
    """
    Type definition for `ClientListTaskDefinitionFamilies` `Response`

    - **families** *(list) --*

      The list of task definition family names that match the ``ListTaskDefinitionFamilies``
      request.

      - *(string) --*

    - **nextToken** *(string) --*

      The ``nextToken`` value to include in a future ``ListTaskDefinitionFamilies`` request. When
      the results of a ``ListTaskDefinitionFamilies`` request exceed ``maxResults`` , this value
      can be used to retrieve the next page of results. This value is ``null`` when there are no
      more results to return.
    """


_ClientListTaskDefinitionsResponseTypeDef = TypedDict(
    "_ClientListTaskDefinitionsResponseTypeDef",
    {"taskDefinitionArns": List[str], "nextToken": str},
    total=False,
)


class ClientListTaskDefinitionsResponseTypeDef(
    _ClientListTaskDefinitionsResponseTypeDef
):
    """
    Type definition for `ClientListTaskDefinitions` `Response`

    - **taskDefinitionArns** *(list) --*

      The list of task definition Amazon Resource Name (ARN) entries for the
      ``ListTaskDefinitions`` request.

      - *(string) --*

    - **nextToken** *(string) --*

      The ``nextToken`` value to include in a future ``ListTaskDefinitions`` request. When the
      results of a ``ListTaskDefinitions`` request exceed ``maxResults`` , this value can be used
      to retrieve the next page of results. This value is ``null`` when there are no more results
      to return.
    """


_ClientListTasksResponseTypeDef = TypedDict(
    "_ClientListTasksResponseTypeDef",
    {"taskArns": List[str], "nextToken": str},
    total=False,
)


class ClientListTasksResponseTypeDef(_ClientListTasksResponseTypeDef):
    """
    Type definition for `ClientListTasks` `Response`

    - **taskArns** *(list) --*

      The list of task ARN entries for the ``ListTasks`` request.

      - *(string) --*

    - **nextToken** *(string) --*

      The ``nextToken`` value to include in a future ``ListTasks`` request. When the results of a
      ``ListTasks`` request exceed ``maxResults`` , this value can be used to retrieve the next
      page of results. This value is ``null`` when there are no more results to return.
    """


_ClientPutAccountSettingDefaultResponsesettingTypeDef = TypedDict(
    "_ClientPutAccountSettingDefaultResponsesettingTypeDef",
    {"name": str, "value": str, "principalArn": str},
    total=False,
)


class ClientPutAccountSettingDefaultResponsesettingTypeDef(
    _ClientPutAccountSettingDefaultResponsesettingTypeDef
):
    """
    Type definition for `ClientPutAccountSettingDefaultResponse` `setting`

    The current account setting for a resource.

    - **name** *(string) --*

      The Amazon ECS resource name.

    - **value** *(string) --*

      Whether the account setting is enabled or disabled for the specified resource.

    - **principalArn** *(string) --*

      The ARN of the principal, which can be an IAM user, IAM role, or the root user. If this
      field is omitted, the authenticated user is assumed.
    """


_ClientPutAccountSettingDefaultResponseTypeDef = TypedDict(
    "_ClientPutAccountSettingDefaultResponseTypeDef",
    {"setting": ClientPutAccountSettingDefaultResponsesettingTypeDef},
    total=False,
)


class ClientPutAccountSettingDefaultResponseTypeDef(
    _ClientPutAccountSettingDefaultResponseTypeDef
):
    """
    Type definition for `ClientPutAccountSettingDefault` `Response`

    - **setting** *(dict) --*

      The current account setting for a resource.

      - **name** *(string) --*

        The Amazon ECS resource name.

      - **value** *(string) --*

        Whether the account setting is enabled or disabled for the specified resource.

      - **principalArn** *(string) --*

        The ARN of the principal, which can be an IAM user, IAM role, or the root user. If this
        field is omitted, the authenticated user is assumed.
    """


_ClientPutAccountSettingResponsesettingTypeDef = TypedDict(
    "_ClientPutAccountSettingResponsesettingTypeDef",
    {"name": str, "value": str, "principalArn": str},
    total=False,
)


class ClientPutAccountSettingResponsesettingTypeDef(
    _ClientPutAccountSettingResponsesettingTypeDef
):
    """
    Type definition for `ClientPutAccountSettingResponse` `setting`

    The current account setting for a resource.

    - **name** *(string) --*

      The Amazon ECS resource name.

    - **value** *(string) --*

      Whether the account setting is enabled or disabled for the specified resource.

    - **principalArn** *(string) --*

      The ARN of the principal, which can be an IAM user, IAM role, or the root user. If this
      field is omitted, the authenticated user is assumed.
    """


_ClientPutAccountSettingResponseTypeDef = TypedDict(
    "_ClientPutAccountSettingResponseTypeDef",
    {"setting": ClientPutAccountSettingResponsesettingTypeDef},
    total=False,
)


class ClientPutAccountSettingResponseTypeDef(_ClientPutAccountSettingResponseTypeDef):
    """
    Type definition for `ClientPutAccountSetting` `Response`

    - **setting** *(dict) --*

      The current account setting for a resource.

      - **name** *(string) --*

        The Amazon ECS resource name.

      - **value** *(string) --*

        Whether the account setting is enabled or disabled for the specified resource.

      - **principalArn** *(string) --*

        The ARN of the principal, which can be an IAM user, IAM role, or the root user. If this
        field is omitted, the authenticated user is assumed.
    """


_ClientPutAttributesResponseattributesTypeDef = TypedDict(
    "_ClientPutAttributesResponseattributesTypeDef",
    {"name": str, "value": str, "targetType": str, "targetId": str},
    total=False,
)


class ClientPutAttributesResponseattributesTypeDef(
    _ClientPutAttributesResponseattributesTypeDef
):
    """
    Type definition for `ClientPutAttributesResponse` `attributes`

    An attribute is a name-value pair associated with an Amazon ECS object. Attributes enable
    you to extend the Amazon ECS data model by adding custom metadata to your resources. For
    more information, see `Attributes
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html#attributes>`__
    in the *Amazon Elastic Container Service Developer Guide* .

    - **name** *(string) --*

      The name of the attribute. Up to 128 letters (uppercase and lowercase), numbers, hyphens,
      underscores, and periods are allowed.

    - **value** *(string) --*

      The value of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
      hyphens, underscores, periods, at signs (@), forward slashes, colons, and spaces are
      allowed.

    - **targetType** *(string) --*

      The type of the target with which to attach the attribute. This parameter is required if
      you use the short form ID for a resource instead of the full ARN.

    - **targetId** *(string) --*

      The ID of the target. You can specify the short form ID for a resource or the full Amazon
      Resource Name (ARN).
    """


_ClientPutAttributesResponseTypeDef = TypedDict(
    "_ClientPutAttributesResponseTypeDef",
    {"attributes": List[ClientPutAttributesResponseattributesTypeDef]},
    total=False,
)


class ClientPutAttributesResponseTypeDef(_ClientPutAttributesResponseTypeDef):
    """
    Type definition for `ClientPutAttributes` `Response`

    - **attributes** *(list) --*

      The attributes applied to your resource.

      - *(dict) --*

        An attribute is a name-value pair associated with an Amazon ECS object. Attributes enable
        you to extend the Amazon ECS data model by adding custom metadata to your resources. For
        more information, see `Attributes
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html#attributes>`__
        in the *Amazon Elastic Container Service Developer Guide* .

        - **name** *(string) --*

          The name of the attribute. Up to 128 letters (uppercase and lowercase), numbers, hyphens,
          underscores, and periods are allowed.

        - **value** *(string) --*

          The value of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
          hyphens, underscores, periods, at signs (@), forward slashes, colons, and spaces are
          allowed.

        - **targetType** *(string) --*

          The type of the target with which to attach the attribute. This parameter is required if
          you use the short form ID for a resource instead of the full ARN.

        - **targetId** *(string) --*

          The ID of the target. You can specify the short form ID for a resource or the full Amazon
          Resource Name (ARN).
    """


_RequiredClientPutAttributesattributesTypeDef = TypedDict(
    "_RequiredClientPutAttributesattributesTypeDef", {"name": str}
)
_OptionalClientPutAttributesattributesTypeDef = TypedDict(
    "_OptionalClientPutAttributesattributesTypeDef",
    {"value": str, "targetType": str, "targetId": str},
    total=False,
)


class ClientPutAttributesattributesTypeDef(
    _RequiredClientPutAttributesattributesTypeDef,
    _OptionalClientPutAttributesattributesTypeDef,
):
    """
    Type definition for `ClientPutAttributes` `attributes`

    An attribute is a name-value pair associated with an Amazon ECS object. Attributes enable you
    to extend the Amazon ECS data model by adding custom metadata to your resources. For more
    information, see `Attributes
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html#attributes>`__
    in the *Amazon Elastic Container Service Developer Guide* .

    - **name** *(string) --* **[REQUIRED]**

      The name of the attribute. Up to 128 letters (uppercase and lowercase), numbers, hyphens,
      underscores, and periods are allowed.

    - **value** *(string) --*

      The value of the attribute. Up to 128 letters (uppercase and lowercase), numbers, hyphens,
      underscores, periods, at signs (@), forward slashes, colons, and spaces are allowed.

    - **targetType** *(string) --*

      The type of the target with which to attach the attribute. This parameter is required if you
      use the short form ID for a resource instead of the full ARN.

    - **targetId** *(string) --*

      The ID of the target. You can specify the short form ID for a resource or the full Amazon
      Resource Name (ARN).
    """


_ClientRegisterContainerInstanceResponsecontainerInstanceattachmentsdetailsTypeDef = TypedDict(
    "_ClientRegisterContainerInstanceResponsecontainerInstanceattachmentsdetailsTypeDef",
    {"name": str, "value": str},
    total=False,
)


class ClientRegisterContainerInstanceResponsecontainerInstanceattachmentsdetailsTypeDef(
    _ClientRegisterContainerInstanceResponsecontainerInstanceattachmentsdetailsTypeDef
):
    """
    Type definition for `ClientRegisterContainerInstanceResponsecontainerInstanceattachments` `details`

    A key-value pair object.

    - **name** *(string) --*

      The name of the key-value pair. For environment variables, this is the name of the
      environment variable.

    - **value** *(string) --*

      The value of the key-value pair. For environment variables, this is the value of
      the environment variable.
    """


_ClientRegisterContainerInstanceResponsecontainerInstanceattachmentsTypeDef = TypedDict(
    "_ClientRegisterContainerInstanceResponsecontainerInstanceattachmentsTypeDef",
    {
        "id": str,
        "type": str,
        "status": str,
        "details": List[
            ClientRegisterContainerInstanceResponsecontainerInstanceattachmentsdetailsTypeDef
        ],
    },
    total=False,
)


class ClientRegisterContainerInstanceResponsecontainerInstanceattachmentsTypeDef(
    _ClientRegisterContainerInstanceResponsecontainerInstanceattachmentsTypeDef
):
    """
    Type definition for `ClientRegisterContainerInstanceResponsecontainerInstance` `attachments`

    An object representing a container instance or task attachment.

    - **id** *(string) --*

      The unique identifier for the attachment.

    - **type** *(string) --*

      The type of the attachment, such as ``ElasticNetworkInterface`` .

    - **status** *(string) --*

      The status of the attachment. Valid values are ``PRECREATED`` , ``CREATED`` ,
      ``ATTACHING`` , ``ATTACHED`` , ``DETACHING`` , ``DETACHED`` , and ``DELETED`` .

    - **details** *(list) --*

      Details of the attachment. For elastic network interfaces, this includes the network
      interface ID, the MAC address, the subnet ID, and the private IPv4 address.

      - *(dict) --*

        A key-value pair object.

        - **name** *(string) --*

          The name of the key-value pair. For environment variables, this is the name of the
          environment variable.

        - **value** *(string) --*

          The value of the key-value pair. For environment variables, this is the value of
          the environment variable.
    """


_ClientRegisterContainerInstanceResponsecontainerInstanceattributesTypeDef = TypedDict(
    "_ClientRegisterContainerInstanceResponsecontainerInstanceattributesTypeDef",
    {"name": str, "value": str, "targetType": str, "targetId": str},
    total=False,
)


class ClientRegisterContainerInstanceResponsecontainerInstanceattributesTypeDef(
    _ClientRegisterContainerInstanceResponsecontainerInstanceattributesTypeDef
):
    """
    Type definition for `ClientRegisterContainerInstanceResponsecontainerInstance` `attributes`

    An attribute is a name-value pair associated with an Amazon ECS object. Attributes enable
    you to extend the Amazon ECS data model by adding custom metadata to your resources. For
    more information, see `Attributes
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html#attributes>`__
    in the *Amazon Elastic Container Service Developer Guide* .

    - **name** *(string) --*

      The name of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
      hyphens, underscores, and periods are allowed.

    - **value** *(string) --*

      The value of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
      hyphens, underscores, periods, at signs (@), forward slashes, colons, and spaces are
      allowed.

    - **targetType** *(string) --*

      The type of the target with which to attach the attribute. This parameter is required
      if you use the short form ID for a resource instead of the full ARN.

    - **targetId** *(string) --*

      The ID of the target. You can specify the short form ID for a resource or the full
      Amazon Resource Name (ARN).
    """


_ClientRegisterContainerInstanceResponsecontainerInstanceregisteredResourcesTypeDef = TypedDict(
    "_ClientRegisterContainerInstanceResponsecontainerInstanceregisteredResourcesTypeDef",
    {
        "name": str,
        "type": str,
        "doubleValue": float,
        "longValue": int,
        "integerValue": int,
        "stringSetValue": List[str],
    },
    total=False,
)


class ClientRegisterContainerInstanceResponsecontainerInstanceregisteredResourcesTypeDef(
    _ClientRegisterContainerInstanceResponsecontainerInstanceregisteredResourcesTypeDef
):
    """
    Type definition for `ClientRegisterContainerInstanceResponsecontainerInstance` `registeredResources`

    Describes the resources available for a container instance.

    - **name** *(string) --*

      The name of the resource, such as ``CPU`` , ``MEMORY`` , ``PORTS`` , ``PORTS_UDP`` , or
      a user-defined resource.

    - **type** *(string) --*

      The type of the resource, such as ``INTEGER`` , ``DOUBLE`` , ``LONG`` , or
      ``STRINGSET`` .

    - **doubleValue** *(float) --*

      When the ``doubleValue`` type is set, the value of the resource must be a double
      precision floating-point type.

    - **longValue** *(integer) --*

      When the ``longValue`` type is set, the value of the resource must be an extended
      precision floating-point type.

    - **integerValue** *(integer) --*

      When the ``integerValue`` type is set, the value of the resource must be an integer.

    - **stringSetValue** *(list) --*

      When the ``stringSetValue`` type is set, the value of the resource must be a string
      type.

      - *(string) --*
    """


_ClientRegisterContainerInstanceResponsecontainerInstanceremainingResourcesTypeDef = TypedDict(
    "_ClientRegisterContainerInstanceResponsecontainerInstanceremainingResourcesTypeDef",
    {
        "name": str,
        "type": str,
        "doubleValue": float,
        "longValue": int,
        "integerValue": int,
        "stringSetValue": List[str],
    },
    total=False,
)


class ClientRegisterContainerInstanceResponsecontainerInstanceremainingResourcesTypeDef(
    _ClientRegisterContainerInstanceResponsecontainerInstanceremainingResourcesTypeDef
):
    """
    Type definition for `ClientRegisterContainerInstanceResponsecontainerInstance` `remainingResources`

    Describes the resources available for a container instance.

    - **name** *(string) --*

      The name of the resource, such as ``CPU`` , ``MEMORY`` , ``PORTS`` , ``PORTS_UDP`` , or
      a user-defined resource.

    - **type** *(string) --*

      The type of the resource, such as ``INTEGER`` , ``DOUBLE`` , ``LONG`` , or
      ``STRINGSET`` .

    - **doubleValue** *(float) --*

      When the ``doubleValue`` type is set, the value of the resource must be a double
      precision floating-point type.

    - **longValue** *(integer) --*

      When the ``longValue`` type is set, the value of the resource must be an extended
      precision floating-point type.

    - **integerValue** *(integer) --*

      When the ``integerValue`` type is set, the value of the resource must be an integer.

    - **stringSetValue** *(list) --*

      When the ``stringSetValue`` type is set, the value of the resource must be a string
      type.

      - *(string) --*
    """


_ClientRegisterContainerInstanceResponsecontainerInstancetagsTypeDef = TypedDict(
    "_ClientRegisterContainerInstanceResponsecontainerInstancetagsTypeDef",
    {"key": str, "value": str},
    total=False,
)


class ClientRegisterContainerInstanceResponsecontainerInstancetagsTypeDef(
    _ClientRegisterContainerInstanceResponsecontainerInstancetagsTypeDef
):
    """
    Type definition for `ClientRegisterContainerInstanceResponsecontainerInstance` `tags`

    The metadata that you apply to a resource to help you categorize and organize them. Each
    tag consists of a key and an optional value, both of which you define.

    The following basic restrictions apply to tags:

    * Maximum number of tags per resource - 50

    * For each resource, each tag key must be unique, and each tag key can have only one
    value.

    * Maximum key length - 128 Unicode characters in UTF-8

    * Maximum value length - 256 Unicode characters in UTF-8

    * If your tagging schema is used across multiple services and resources, remember that
    other services may have restrictions on allowed characters. Generally allowed characters
    are: letters, numbers, and spaces representable in UTF-8, and the following characters: +
    - = . _ : / @.

    * Tag keys and values are case-sensitive.

    * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
    prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
    tag keys or values with this prefix. Tags with this prefix do not count against your tags
    per resource limit.

    - **key** *(string) --*

      One part of a key-value pair that make up a tag. A ``key`` is a general label that acts
      like a category for more specific tag values.

    - **value** *(string) --*

      The optional part of a key-value pair that make up a tag. A ``value`` acts as a
      descriptor within a tag category (key).
    """


_ClientRegisterContainerInstanceResponsecontainerInstanceversionInfoTypeDef = TypedDict(
    "_ClientRegisterContainerInstanceResponsecontainerInstanceversionInfoTypeDef",
    {"agentVersion": str, "agentHash": str, "dockerVersion": str},
    total=False,
)


class ClientRegisterContainerInstanceResponsecontainerInstanceversionInfoTypeDef(
    _ClientRegisterContainerInstanceResponsecontainerInstanceversionInfoTypeDef
):
    """
    Type definition for `ClientRegisterContainerInstanceResponsecontainerInstance` `versionInfo`

    The version information for the Amazon ECS container agent and Docker daemon running on the
    container instance.

    - **agentVersion** *(string) --*

      The version number of the Amazon ECS container agent.

    - **agentHash** *(string) --*

      The Git commit hash for the Amazon ECS container agent build on the `amazon-ecs-agent
      <https://github.com/aws/amazon-ecs-agent/commits/master>`__ GitHub repository.

    - **dockerVersion** *(string) --*

      The Docker version running on the container instance.
    """


_ClientRegisterContainerInstanceResponsecontainerInstanceTypeDef = TypedDict(
    "_ClientRegisterContainerInstanceResponsecontainerInstanceTypeDef",
    {
        "containerInstanceArn": str,
        "ec2InstanceId": str,
        "version": int,
        "versionInfo": ClientRegisterContainerInstanceResponsecontainerInstanceversionInfoTypeDef,
        "remainingResources": List[
            ClientRegisterContainerInstanceResponsecontainerInstanceremainingResourcesTypeDef
        ],
        "registeredResources": List[
            ClientRegisterContainerInstanceResponsecontainerInstanceregisteredResourcesTypeDef
        ],
        "status": str,
        "statusReason": str,
        "agentConnected": bool,
        "runningTasksCount": int,
        "pendingTasksCount": int,
        "agentUpdateStatus": str,
        "attributes": List[
            ClientRegisterContainerInstanceResponsecontainerInstanceattributesTypeDef
        ],
        "registeredAt": datetime,
        "attachments": List[
            ClientRegisterContainerInstanceResponsecontainerInstanceattachmentsTypeDef
        ],
        "tags": List[
            ClientRegisterContainerInstanceResponsecontainerInstancetagsTypeDef
        ],
    },
    total=False,
)


class ClientRegisterContainerInstanceResponsecontainerInstanceTypeDef(
    _ClientRegisterContainerInstanceResponsecontainerInstanceTypeDef
):
    """
    Type definition for `ClientRegisterContainerInstanceResponse` `containerInstance`

    The container instance that was registered.

    - **containerInstanceArn** *(string) --*

      The Amazon Resource Name (ARN) of the container instance. The ARN contains the
      ``arn:aws:ecs`` namespace, followed by the Region of the container instance, the AWS
      account ID of the container instance owner, the ``container-instance`` namespace, and then
      the container instance ID. For example,
      ``arn:aws:ecs:region:aws_account_id:container-instance/container_instance_ID`` .

    - **ec2InstanceId** *(string) --*

      The EC2 instance ID of the container instance.

    - **version** *(integer) --*

      The version counter for the container instance. Every time a container instance experiences
      a change that triggers a CloudWatch event, the version counter is incremented. If you are
      replicating your Amazon ECS container instance state with CloudWatch Events, you can
      compare the version of a container instance reported by the Amazon ECS APIs with the
      version reported in CloudWatch Events for the container instance (inside the ``detail``
      object) to verify that the version in your event stream is current.

    - **versionInfo** *(dict) --*

      The version information for the Amazon ECS container agent and Docker daemon running on the
      container instance.

      - **agentVersion** *(string) --*

        The version number of the Amazon ECS container agent.

      - **agentHash** *(string) --*

        The Git commit hash for the Amazon ECS container agent build on the `amazon-ecs-agent
        <https://github.com/aws/amazon-ecs-agent/commits/master>`__ GitHub repository.

      - **dockerVersion** *(string) --*

        The Docker version running on the container instance.

    - **remainingResources** *(list) --*

      For CPU and memory resource types, this parameter describes the remaining CPU and memory
      that has not already been allocated to tasks and is therefore available for new tasks. For
      port resource types, this parameter describes the ports that were reserved by the Amazon
      ECS container agent (at instance registration time) and any task containers that have
      reserved port mappings on the host (with the ``host`` or ``bridge`` network mode). Any port
      that is not specified here is available for new tasks.

      - *(dict) --*

        Describes the resources available for a container instance.

        - **name** *(string) --*

          The name of the resource, such as ``CPU`` , ``MEMORY`` , ``PORTS`` , ``PORTS_UDP`` , or
          a user-defined resource.

        - **type** *(string) --*

          The type of the resource, such as ``INTEGER`` , ``DOUBLE`` , ``LONG`` , or
          ``STRINGSET`` .

        - **doubleValue** *(float) --*

          When the ``doubleValue`` type is set, the value of the resource must be a double
          precision floating-point type.

        - **longValue** *(integer) --*

          When the ``longValue`` type is set, the value of the resource must be an extended
          precision floating-point type.

        - **integerValue** *(integer) --*

          When the ``integerValue`` type is set, the value of the resource must be an integer.

        - **stringSetValue** *(list) --*

          When the ``stringSetValue`` type is set, the value of the resource must be a string
          type.

          - *(string) --*

    - **registeredResources** *(list) --*

      For CPU and memory resource types, this parameter describes the amount of each resource
      that was available on the container instance when the container agent registered it with
      Amazon ECS. This value represents the total amount of CPU and memory that can be allocated
      on this container instance to tasks. For port resource types, this parameter describes the
      ports that were reserved by the Amazon ECS container agent when it registered the container
      instance with Amazon ECS.

      - *(dict) --*

        Describes the resources available for a container instance.

        - **name** *(string) --*

          The name of the resource, such as ``CPU`` , ``MEMORY`` , ``PORTS`` , ``PORTS_UDP`` , or
          a user-defined resource.

        - **type** *(string) --*

          The type of the resource, such as ``INTEGER`` , ``DOUBLE`` , ``LONG`` , or
          ``STRINGSET`` .

        - **doubleValue** *(float) --*

          When the ``doubleValue`` type is set, the value of the resource must be a double
          precision floating-point type.

        - **longValue** *(integer) --*

          When the ``longValue`` type is set, the value of the resource must be an extended
          precision floating-point type.

        - **integerValue** *(integer) --*

          When the ``integerValue`` type is set, the value of the resource must be an integer.

        - **stringSetValue** *(list) --*

          When the ``stringSetValue`` type is set, the value of the resource must be a string
          type.

          - *(string) --*

    - **status** *(string) --*

      The status of the container instance. The valid values are ``REGISTERING`` ,
      ``REGISTRATION_FAILED`` , ``ACTIVE`` , ``INACTIVE`` , ``DEREGISTERING`` , or ``DRAINING`` .

      If your account has opted in to the ``awsvpcTrunking`` account setting, then any newly
      registered container instance will transition to a ``REGISTERING`` status while the trunk
      elastic network interface is provisioned for the instance. If the registration fails, the
      instance will transition to a ``REGISTRATION_FAILED`` status. You can describe the
      container instance and see the reason for failure in the ``statusReason`` parameter. Once
      the container instance is terminated, the instance transitions to a ``DEREGISTERING``
      status while the trunk elastic network interface is deprovisioned. The instance then
      transitions to an ``INACTIVE`` status.

      The ``ACTIVE`` status indicates that the container instance can accept tasks. The
      ``DRAINING`` indicates that new tasks are not placed on the container instance and any
      service tasks running on the container instance are removed if possible. For more
      information, see `Container Instance Draining
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/container-instance-draining.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

    - **statusReason** *(string) --*

      The reason that the container instance reached its current status.

    - **agentConnected** *(boolean) --*

      This parameter returns ``true`` if the agent is connected to Amazon ECS. Registered
      instances with an agent that may be unhealthy or stopped return ``false`` . Only instances
      connected to an agent can accept placement requests.

    - **runningTasksCount** *(integer) --*

      The number of tasks on the container instance that are in the ``RUNNING`` status.

    - **pendingTasksCount** *(integer) --*

      The number of tasks on the container instance that are in the ``PENDING`` status.

    - **agentUpdateStatus** *(string) --*

      The status of the most recent agent update. If an update has never been requested, this
      value is ``NULL`` .

    - **attributes** *(list) --*

      The attributes set for the container instance, either by the Amazon ECS container agent at
      instance registration or manually with the  PutAttributes operation.

      - *(dict) --*

        An attribute is a name-value pair associated with an Amazon ECS object. Attributes enable
        you to extend the Amazon ECS data model by adding custom metadata to your resources. For
        more information, see `Attributes
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html#attributes>`__
        in the *Amazon Elastic Container Service Developer Guide* .

        - **name** *(string) --*

          The name of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
          hyphens, underscores, and periods are allowed.

        - **value** *(string) --*

          The value of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
          hyphens, underscores, periods, at signs (@), forward slashes, colons, and spaces are
          allowed.

        - **targetType** *(string) --*

          The type of the target with which to attach the attribute. This parameter is required
          if you use the short form ID for a resource instead of the full ARN.

        - **targetId** *(string) --*

          The ID of the target. You can specify the short form ID for a resource or the full
          Amazon Resource Name (ARN).

    - **registeredAt** *(datetime) --*

      The Unix timestamp for when the container instance was registered.

    - **attachments** *(list) --*

      The resources attached to a container instance, such as elastic network interfaces.

      - *(dict) --*

        An object representing a container instance or task attachment.

        - **id** *(string) --*

          The unique identifier for the attachment.

        - **type** *(string) --*

          The type of the attachment, such as ``ElasticNetworkInterface`` .

        - **status** *(string) --*

          The status of the attachment. Valid values are ``PRECREATED`` , ``CREATED`` ,
          ``ATTACHING`` , ``ATTACHED`` , ``DETACHING`` , ``DETACHED`` , and ``DELETED`` .

        - **details** *(list) --*

          Details of the attachment. For elastic network interfaces, this includes the network
          interface ID, the MAC address, the subnet ID, and the private IPv4 address.

          - *(dict) --*

            A key-value pair object.

            - **name** *(string) --*

              The name of the key-value pair. For environment variables, this is the name of the
              environment variable.

            - **value** *(string) --*

              The value of the key-value pair. For environment variables, this is the value of
              the environment variable.

    - **tags** *(list) --*

      The metadata that you apply to the container instance to help you categorize and organize
      them. Each tag consists of a key and an optional value, both of which you define.

      The following basic restrictions apply to tags:

      * Maximum number of tags per resource - 50

      * For each resource, each tag key must be unique, and each tag key can have only one value.

      * Maximum key length - 128 Unicode characters in UTF-8

      * Maximum value length - 256 Unicode characters in UTF-8

      * If your tagging schema is used across multiple services and resources, remember that
      other services may have restrictions on allowed characters. Generally allowed characters
      are: letters, numbers, and spaces representable in UTF-8, and the following characters: + -
      = . _ : / @.

      * Tag keys and values are case-sensitive.

      * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
      prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
      tag keys or values with this prefix. Tags with this prefix do not count against your tags
      per resource limit.

      - *(dict) --*

        The metadata that you apply to a resource to help you categorize and organize them. Each
        tag consists of a key and an optional value, both of which you define.

        The following basic restrictions apply to tags:

        * Maximum number of tags per resource - 50

        * For each resource, each tag key must be unique, and each tag key can have only one
        value.

        * Maximum key length - 128 Unicode characters in UTF-8

        * Maximum value length - 256 Unicode characters in UTF-8

        * If your tagging schema is used across multiple services and resources, remember that
        other services may have restrictions on allowed characters. Generally allowed characters
        are: letters, numbers, and spaces representable in UTF-8, and the following characters: +
        - = . _ : / @.

        * Tag keys and values are case-sensitive.

        * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
        prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
        tag keys or values with this prefix. Tags with this prefix do not count against your tags
        per resource limit.

        - **key** *(string) --*

          One part of a key-value pair that make up a tag. A ``key`` is a general label that acts
          like a category for more specific tag values.

        - **value** *(string) --*

          The optional part of a key-value pair that make up a tag. A ``value`` acts as a
          descriptor within a tag category (key).
    """


_ClientRegisterContainerInstanceResponseTypeDef = TypedDict(
    "_ClientRegisterContainerInstanceResponseTypeDef",
    {
        "containerInstance": ClientRegisterContainerInstanceResponsecontainerInstanceTypeDef
    },
    total=False,
)


class ClientRegisterContainerInstanceResponseTypeDef(
    _ClientRegisterContainerInstanceResponseTypeDef
):
    """
    Type definition for `ClientRegisterContainerInstance` `Response`

    - **containerInstance** *(dict) --*

      The container instance that was registered.

      - **containerInstanceArn** *(string) --*

        The Amazon Resource Name (ARN) of the container instance. The ARN contains the
        ``arn:aws:ecs`` namespace, followed by the Region of the container instance, the AWS
        account ID of the container instance owner, the ``container-instance`` namespace, and then
        the container instance ID. For example,
        ``arn:aws:ecs:region:aws_account_id:container-instance/container_instance_ID`` .

      - **ec2InstanceId** *(string) --*

        The EC2 instance ID of the container instance.

      - **version** *(integer) --*

        The version counter for the container instance. Every time a container instance experiences
        a change that triggers a CloudWatch event, the version counter is incremented. If you are
        replicating your Amazon ECS container instance state with CloudWatch Events, you can
        compare the version of a container instance reported by the Amazon ECS APIs with the
        version reported in CloudWatch Events for the container instance (inside the ``detail``
        object) to verify that the version in your event stream is current.

      - **versionInfo** *(dict) --*

        The version information for the Amazon ECS container agent and Docker daemon running on the
        container instance.

        - **agentVersion** *(string) --*

          The version number of the Amazon ECS container agent.

        - **agentHash** *(string) --*

          The Git commit hash for the Amazon ECS container agent build on the `amazon-ecs-agent
          <https://github.com/aws/amazon-ecs-agent/commits/master>`__ GitHub repository.

        - **dockerVersion** *(string) --*

          The Docker version running on the container instance.

      - **remainingResources** *(list) --*

        For CPU and memory resource types, this parameter describes the remaining CPU and memory
        that has not already been allocated to tasks and is therefore available for new tasks. For
        port resource types, this parameter describes the ports that were reserved by the Amazon
        ECS container agent (at instance registration time) and any task containers that have
        reserved port mappings on the host (with the ``host`` or ``bridge`` network mode). Any port
        that is not specified here is available for new tasks.

        - *(dict) --*

          Describes the resources available for a container instance.

          - **name** *(string) --*

            The name of the resource, such as ``CPU`` , ``MEMORY`` , ``PORTS`` , ``PORTS_UDP`` , or
            a user-defined resource.

          - **type** *(string) --*

            The type of the resource, such as ``INTEGER`` , ``DOUBLE`` , ``LONG`` , or
            ``STRINGSET`` .

          - **doubleValue** *(float) --*

            When the ``doubleValue`` type is set, the value of the resource must be a double
            precision floating-point type.

          - **longValue** *(integer) --*

            When the ``longValue`` type is set, the value of the resource must be an extended
            precision floating-point type.

          - **integerValue** *(integer) --*

            When the ``integerValue`` type is set, the value of the resource must be an integer.

          - **stringSetValue** *(list) --*

            When the ``stringSetValue`` type is set, the value of the resource must be a string
            type.

            - *(string) --*

      - **registeredResources** *(list) --*

        For CPU and memory resource types, this parameter describes the amount of each resource
        that was available on the container instance when the container agent registered it with
        Amazon ECS. This value represents the total amount of CPU and memory that can be allocated
        on this container instance to tasks. For port resource types, this parameter describes the
        ports that were reserved by the Amazon ECS container agent when it registered the container
        instance with Amazon ECS.

        - *(dict) --*

          Describes the resources available for a container instance.

          - **name** *(string) --*

            The name of the resource, such as ``CPU`` , ``MEMORY`` , ``PORTS`` , ``PORTS_UDP`` , or
            a user-defined resource.

          - **type** *(string) --*

            The type of the resource, such as ``INTEGER`` , ``DOUBLE`` , ``LONG`` , or
            ``STRINGSET`` .

          - **doubleValue** *(float) --*

            When the ``doubleValue`` type is set, the value of the resource must be a double
            precision floating-point type.

          - **longValue** *(integer) --*

            When the ``longValue`` type is set, the value of the resource must be an extended
            precision floating-point type.

          - **integerValue** *(integer) --*

            When the ``integerValue`` type is set, the value of the resource must be an integer.

          - **stringSetValue** *(list) --*

            When the ``stringSetValue`` type is set, the value of the resource must be a string
            type.

            - *(string) --*

      - **status** *(string) --*

        The status of the container instance. The valid values are ``REGISTERING`` ,
        ``REGISTRATION_FAILED`` , ``ACTIVE`` , ``INACTIVE`` , ``DEREGISTERING`` , or ``DRAINING`` .

        If your account has opted in to the ``awsvpcTrunking`` account setting, then any newly
        registered container instance will transition to a ``REGISTERING`` status while the trunk
        elastic network interface is provisioned for the instance. If the registration fails, the
        instance will transition to a ``REGISTRATION_FAILED`` status. You can describe the
        container instance and see the reason for failure in the ``statusReason`` parameter. Once
        the container instance is terminated, the instance transitions to a ``DEREGISTERING``
        status while the trunk elastic network interface is deprovisioned. The instance then
        transitions to an ``INACTIVE`` status.

        The ``ACTIVE`` status indicates that the container instance can accept tasks. The
        ``DRAINING`` indicates that new tasks are not placed on the container instance and any
        service tasks running on the container instance are removed if possible. For more
        information, see `Container Instance Draining
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/container-instance-draining.html>`__
        in the *Amazon Elastic Container Service Developer Guide* .

      - **statusReason** *(string) --*

        The reason that the container instance reached its current status.

      - **agentConnected** *(boolean) --*

        This parameter returns ``true`` if the agent is connected to Amazon ECS. Registered
        instances with an agent that may be unhealthy or stopped return ``false`` . Only instances
        connected to an agent can accept placement requests.

      - **runningTasksCount** *(integer) --*

        The number of tasks on the container instance that are in the ``RUNNING`` status.

      - **pendingTasksCount** *(integer) --*

        The number of tasks on the container instance that are in the ``PENDING`` status.

      - **agentUpdateStatus** *(string) --*

        The status of the most recent agent update. If an update has never been requested, this
        value is ``NULL`` .

      - **attributes** *(list) --*

        The attributes set for the container instance, either by the Amazon ECS container agent at
        instance registration or manually with the  PutAttributes operation.

        - *(dict) --*

          An attribute is a name-value pair associated with an Amazon ECS object. Attributes enable
          you to extend the Amazon ECS data model by adding custom metadata to your resources. For
          more information, see `Attributes
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html#attributes>`__
          in the *Amazon Elastic Container Service Developer Guide* .

          - **name** *(string) --*

            The name of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
            hyphens, underscores, and periods are allowed.

          - **value** *(string) --*

            The value of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
            hyphens, underscores, periods, at signs (@), forward slashes, colons, and spaces are
            allowed.

          - **targetType** *(string) --*

            The type of the target with which to attach the attribute. This parameter is required
            if you use the short form ID for a resource instead of the full ARN.

          - **targetId** *(string) --*

            The ID of the target. You can specify the short form ID for a resource or the full
            Amazon Resource Name (ARN).

      - **registeredAt** *(datetime) --*

        The Unix timestamp for when the container instance was registered.

      - **attachments** *(list) --*

        The resources attached to a container instance, such as elastic network interfaces.

        - *(dict) --*

          An object representing a container instance or task attachment.

          - **id** *(string) --*

            The unique identifier for the attachment.

          - **type** *(string) --*

            The type of the attachment, such as ``ElasticNetworkInterface`` .

          - **status** *(string) --*

            The status of the attachment. Valid values are ``PRECREATED`` , ``CREATED`` ,
            ``ATTACHING`` , ``ATTACHED`` , ``DETACHING`` , ``DETACHED`` , and ``DELETED`` .

          - **details** *(list) --*

            Details of the attachment. For elastic network interfaces, this includes the network
            interface ID, the MAC address, the subnet ID, and the private IPv4 address.

            - *(dict) --*

              A key-value pair object.

              - **name** *(string) --*

                The name of the key-value pair. For environment variables, this is the name of the
                environment variable.

              - **value** *(string) --*

                The value of the key-value pair. For environment variables, this is the value of
                the environment variable.

      - **tags** *(list) --*

        The metadata that you apply to the container instance to help you categorize and organize
        them. Each tag consists of a key and an optional value, both of which you define.

        The following basic restrictions apply to tags:

        * Maximum number of tags per resource - 50

        * For each resource, each tag key must be unique, and each tag key can have only one value.

        * Maximum key length - 128 Unicode characters in UTF-8

        * Maximum value length - 256 Unicode characters in UTF-8

        * If your tagging schema is used across multiple services and resources, remember that
        other services may have restrictions on allowed characters. Generally allowed characters
        are: letters, numbers, and spaces representable in UTF-8, and the following characters: + -
        = . _ : / @.

        * Tag keys and values are case-sensitive.

        * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
        prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
        tag keys or values with this prefix. Tags with this prefix do not count against your tags
        per resource limit.

        - *(dict) --*

          The metadata that you apply to a resource to help you categorize and organize them. Each
          tag consists of a key and an optional value, both of which you define.

          The following basic restrictions apply to tags:

          * Maximum number of tags per resource - 50

          * For each resource, each tag key must be unique, and each tag key can have only one
          value.

          * Maximum key length - 128 Unicode characters in UTF-8

          * Maximum value length - 256 Unicode characters in UTF-8

          * If your tagging schema is used across multiple services and resources, remember that
          other services may have restrictions on allowed characters. Generally allowed characters
          are: letters, numbers, and spaces representable in UTF-8, and the following characters: +
          - = . _ : / @.

          * Tag keys and values are case-sensitive.

          * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
          prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
          tag keys or values with this prefix. Tags with this prefix do not count against your tags
          per resource limit.

          - **key** *(string) --*

            One part of a key-value pair that make up a tag. A ``key`` is a general label that acts
            like a category for more specific tag values.

          - **value** *(string) --*

            The optional part of a key-value pair that make up a tag. A ``value`` acts as a
            descriptor within a tag category (key).
    """


_RequiredClientRegisterContainerInstanceattributesTypeDef = TypedDict(
    "_RequiredClientRegisterContainerInstanceattributesTypeDef", {"name": str}
)
_OptionalClientRegisterContainerInstanceattributesTypeDef = TypedDict(
    "_OptionalClientRegisterContainerInstanceattributesTypeDef",
    {"value": str, "targetType": str, "targetId": str},
    total=False,
)


class ClientRegisterContainerInstanceattributesTypeDef(
    _RequiredClientRegisterContainerInstanceattributesTypeDef,
    _OptionalClientRegisterContainerInstanceattributesTypeDef,
):
    """
    Type definition for `ClientRegisterContainerInstance` `attributes`

    An attribute is a name-value pair associated with an Amazon ECS object. Attributes enable you
    to extend the Amazon ECS data model by adding custom metadata to your resources. For more
    information, see `Attributes
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html#attributes>`__
    in the *Amazon Elastic Container Service Developer Guide* .

    - **name** *(string) --* **[REQUIRED]**

      The name of the attribute. Up to 128 letters (uppercase and lowercase), numbers, hyphens,
      underscores, and periods are allowed.

    - **value** *(string) --*

      The value of the attribute. Up to 128 letters (uppercase and lowercase), numbers, hyphens,
      underscores, periods, at signs (@), forward slashes, colons, and spaces are allowed.

    - **targetType** *(string) --*

      The type of the target with which to attach the attribute. This parameter is required if you
      use the short form ID for a resource instead of the full ARN.

    - **targetId** *(string) --*

      The ID of the target. You can specify the short form ID for a resource or the full Amazon
      Resource Name (ARN).
    """


_ClientRegisterContainerInstanceplatformDevicesTypeDef = TypedDict(
    "_ClientRegisterContainerInstanceplatformDevicesTypeDef", {"id": str, "type": str}
)


class ClientRegisterContainerInstanceplatformDevicesTypeDef(
    _ClientRegisterContainerInstanceplatformDevicesTypeDef
):
    """
    Type definition for `ClientRegisterContainerInstance` `platformDevices`

    The devices that are available on the container instance. The only supported device type is a
    GPU.

    - **id** *(string) --* **[REQUIRED]**

      The ID for the GPU(s) on the container instance. The available GPU IDs can also be obtained
      on the container instance in the ``/var/lib/ecs/gpu/nvidia_gpu_info.json`` file.

    - **type** *(string) --* **[REQUIRED]**

      The type of device that is available on the container instance. The only supported value is
      ``GPU`` .
    """


_ClientRegisterContainerInstancetagsTypeDef = TypedDict(
    "_ClientRegisterContainerInstancetagsTypeDef",
    {"key": str, "value": str},
    total=False,
)


class ClientRegisterContainerInstancetagsTypeDef(
    _ClientRegisterContainerInstancetagsTypeDef
):
    """
    Type definition for `ClientRegisterContainerInstance` `tags`

    The metadata that you apply to a resource to help you categorize and organize them. Each tag
    consists of a key and an optional value, both of which you define.

    The following basic restrictions apply to tags:

    * Maximum number of tags per resource - 50

    * For each resource, each tag key must be unique, and each tag key can have only one value.

    * Maximum key length - 128 Unicode characters in UTF-8

    * Maximum value length - 256 Unicode characters in UTF-8

    * If your tagging schema is used across multiple services and resources, remember that other
    services may have restrictions on allowed characters. Generally allowed characters are:
    letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ :
    / @.

    * Tag keys and values are case-sensitive.

    * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a prefix
    for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys or
    values with this prefix. Tags with this prefix do not count against your tags per resource
    limit.

    - **key** *(string) --*

      One part of a key-value pair that make up a tag. A ``key`` is a general label that acts like
      a category for more specific tag values.

    - **value** *(string) --*

      The optional part of a key-value pair that make up a tag. A ``value`` acts as a descriptor
      within a tag category (key).
    """


_ClientRegisterContainerInstancetotalResourcesTypeDef = TypedDict(
    "_ClientRegisterContainerInstancetotalResourcesTypeDef",
    {
        "name": str,
        "type": str,
        "doubleValue": float,
        "longValue": int,
        "integerValue": int,
        "stringSetValue": List[str],
    },
    total=False,
)


class ClientRegisterContainerInstancetotalResourcesTypeDef(
    _ClientRegisterContainerInstancetotalResourcesTypeDef
):
    """
    Type definition for `ClientRegisterContainerInstance` `totalResources`

    Describes the resources available for a container instance.

    - **name** *(string) --*

      The name of the resource, such as ``CPU`` , ``MEMORY`` , ``PORTS`` , ``PORTS_UDP`` , or a
      user-defined resource.

    - **type** *(string) --*

      The type of the resource, such as ``INTEGER`` , ``DOUBLE`` , ``LONG`` , or ``STRINGSET`` .

    - **doubleValue** *(float) --*

      When the ``doubleValue`` type is set, the value of the resource must be a double precision
      floating-point type.

    - **longValue** *(integer) --*

      When the ``longValue`` type is set, the value of the resource must be an extended precision
      floating-point type.

    - **integerValue** *(integer) --*

      When the ``integerValue`` type is set, the value of the resource must be an integer.

    - **stringSetValue** *(list) --*

      When the ``stringSetValue`` type is set, the value of the resource must be a string type.

      - *(string) --*
    """


_ClientRegisterContainerInstanceversionInfoTypeDef = TypedDict(
    "_ClientRegisterContainerInstanceversionInfoTypeDef",
    {"agentVersion": str, "agentHash": str, "dockerVersion": str},
    total=False,
)


class ClientRegisterContainerInstanceversionInfoTypeDef(
    _ClientRegisterContainerInstanceversionInfoTypeDef
):
    """
    Type definition for `ClientRegisterContainerInstance` `versionInfo`

    The version information for the Amazon ECS container agent and Docker daemon running on the
    container instance.

    - **agentVersion** *(string) --*

      The version number of the Amazon ECS container agent.

    - **agentHash** *(string) --*

      The Git commit hash for the Amazon ECS container agent build on the `amazon-ecs-agent
      <https://github.com/aws/amazon-ecs-agent/commits/master>`__ GitHub repository.

    - **dockerVersion** *(string) --*

      The Docker version running on the container instance.
    """


_ClientRegisterTaskDefinitionResponsetagsTypeDef = TypedDict(
    "_ClientRegisterTaskDefinitionResponsetagsTypeDef",
    {"key": str, "value": str},
    total=False,
)


class ClientRegisterTaskDefinitionResponsetagsTypeDef(
    _ClientRegisterTaskDefinitionResponsetagsTypeDef
):
    """
    Type definition for `ClientRegisterTaskDefinitionResponse` `tags`

    The metadata that you apply to a resource to help you categorize and organize them. Each
    tag consists of a key and an optional value, both of which you define.

    The following basic restrictions apply to tags:

    * Maximum number of tags per resource - 50

    * For each resource, each tag key must be unique, and each tag key can have only one value.

    * Maximum key length - 128 Unicode characters in UTF-8

    * Maximum value length - 256 Unicode characters in UTF-8

    * If your tagging schema is used across multiple services and resources, remember that
    other services may have restrictions on allowed characters. Generally allowed characters
    are: letters, numbers, and spaces representable in UTF-8, and the following characters: + -
    = . _ : / @.

    * Tag keys and values are case-sensitive.

    * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
    prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
    tag keys or values with this prefix. Tags with this prefix do not count against your tags
    per resource limit.

    - **key** *(string) --*

      One part of a key-value pair that make up a tag. A ``key`` is a general label that acts
      like a category for more specific tag values.

    - **value** *(string) --*

      The optional part of a key-value pair that make up a tag. A ``value`` acts as a
      descriptor within a tag category (key).
    """


_ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsdependsOnTypeDef = TypedDict(
    "_ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsdependsOnTypeDef",
    {"containerName": str, "condition": str},
    total=False,
)


class ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsdependsOnTypeDef(
    _ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsdependsOnTypeDef
):
    """
    Type definition for `ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitions` `dependsOn`

    The dependencies defined for container startup and shutdown. A container can contain
    multiple dependencies. When a dependency is defined for container startup, for
    container shutdown it is reversed.

    Your Amazon ECS container instances require at least version 1.26.0 of the container
    agent to enable container dependencies. However, we recommend using the latest
    container agent version. For information about checking your agent version and
    updating to the latest version, see `Updating the Amazon ECS Container Agent
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html>`__
    in the *Amazon Elastic Container Service Developer Guide* . If you are using an
    Amazon ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the
    ``ecs-init`` package. If your container instances are launched from version
    ``20190301`` or later, then they contain the required versions of the container agent
    and ``ecs-init`` . For more information, see `Amazon ECS-optimized Linux AMI
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html>`__
    in the *Amazon Elastic Container Service Developer Guide* .

    .. note::

      If you are using tasks that use the Fargate launch type, container dependency
      parameters are not supported.

    - **containerName** *(string) --*

      The name of a container.

    - **condition** *(string) --*

      The dependency condition of the container. The following are the available
      conditions and their behavior:

      * ``START`` - This condition emulates the behavior of links and volumes today. It
      validates that a dependent container is started before permitting other containers
      to start.

      * ``COMPLETE`` - This condition validates that a dependent container runs to
      completion (exits) before permitting other containers to start. This can be useful
      for nonessential containers that run a script and then exit.

      * ``SUCCESS`` - This condition is the same as ``COMPLETE`` , but it also requires
      that the container exits with a ``zero`` status.

      * ``HEALTHY`` - This condition validates that the dependent container passes its
      Docker health check before permitting other containers to start. This requires that
      the dependent container has health checks configured. This condition is confirmed
      only at task startup.
    """


_ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsenvironmentTypeDef = TypedDict(
    "_ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsenvironmentTypeDef",
    {"name": str, "value": str},
    total=False,
)


class ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsenvironmentTypeDef(
    _ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsenvironmentTypeDef
):
    """
    Type definition for `ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitions` `environment`

    A key-value pair object.

    - **name** *(string) --*

      The name of the key-value pair. For environment variables, this is the name of the
      environment variable.

    - **value** *(string) --*

      The value of the key-value pair. For environment variables, this is the value of
      the environment variable.
    """


_ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsextraHostsTypeDef = TypedDict(
    "_ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsextraHostsTypeDef",
    {"hostname": str, "ipAddress": str},
    total=False,
)


class ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsextraHostsTypeDef(
    _ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsextraHostsTypeDef
):
    """
    Type definition for `ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitions` `extraHosts`

    Hostnames and IP address entries that are added to the ``/etc/hosts`` file of a
    container via the ``extraHosts`` parameter of its  ContainerDefinition .

    - **hostname** *(string) --*

      The hostname to use in the ``/etc/hosts`` entry.

    - **ipAddress** *(string) --*

      The IP address to use in the ``/etc/hosts`` entry.
    """


_ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsfirelensConfigurationTypeDef = TypedDict(
    "_ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsfirelensConfigurationTypeDef",
    {"type": str, "options": Dict[str, str]},
    total=False,
)


class ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsfirelensConfigurationTypeDef(
    _ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsfirelensConfigurationTypeDef
):
    """
    Type definition for `ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitions` `firelensConfiguration`

    The FireLens configuration for the container. This is used to specify and configure a
    log router for container logs. For more information, see `Custom Log Routing
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html>`__ in
    the *Amazon Elastic Container Service Developer Guide* .

    - **type** *(string) --*

      The log router to use. The valid values are ``fluentd`` or ``fluentbit`` .

    - **options** *(dict) --*

      The options to use when configuring the log router. This field is optional and can be
      used to add additional metadata, such as the task, task definition, cluster, and
      container instance details to the log event. If specified, the syntax to use is
      ``"options":{"enable-ecs-log-metadata":"true|false"}`` .

      - *(string) --*

        - *(string) --*
    """


_ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionshealthCheckTypeDef = TypedDict(
    "_ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionshealthCheckTypeDef",
    {
        "command": List[str],
        "interval": int,
        "timeout": int,
        "retries": int,
        "startPeriod": int,
    },
    total=False,
)


class ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionshealthCheckTypeDef(
    _ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionshealthCheckTypeDef
):
    """
    Type definition for `ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitions` `healthCheck`

    The health check command and associated configuration parameters for the container.
    This parameter maps to ``HealthCheck`` in the `Create a container
    <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
    `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
    ``HEALTHCHECK`` parameter of `docker run
    <https://docs.docker.com/engine/reference/run/>`__ .

    - **command** *(list) --*

      A string array representing the command that the container runs to determine if it is
      healthy. The string array must start with ``CMD`` to execute the command arguments
      directly, or ``CMD-SHELL`` to run the command with the container's default shell. For
      example:

       ``[ "CMD-SHELL", "curl -f http://localhost/ || exit 1" ]``

      An exit code of 0 indicates success, and non-zero exit code indicates failure. For
      more information, see ``HealthCheck`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of
      the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ .

      - *(string) --*

    - **interval** *(integer) --*

      The time period in seconds between each health check execution. You may specify
      between 5 and 300 seconds. The default value is 30 seconds.

    - **timeout** *(integer) --*

      The time period in seconds to wait for a health check to succeed before it is
      considered a failure. You may specify between 2 and 60 seconds. The default value is
      5.

    - **retries** *(integer) --*

      The number of times to retry a failed health check before the container is considered
      unhealthy. You may specify between 1 and 10 retries. The default value is 3.

    - **startPeriod** *(integer) --*

      The optional grace period within which to provide containers time to bootstrap before
      failed health checks count towards the maximum number of retries. You may specify
      between 0 and 300 seconds. The ``startPeriod`` is disabled by default.

      .. note::

        If a health check succeeds within the ``startPeriod`` , then the container is
        considered healthy and any subsequent failures count toward the maximum number of
        retries.
    """


_ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParameterscapabilitiesTypeDef = TypedDict(
    "_ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParameterscapabilitiesTypeDef",
    {"add": List[str], "drop": List[str]},
    total=False,
)


class ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParameterscapabilitiesTypeDef(
    _ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParameterscapabilitiesTypeDef
):
    """
    Type definition for `ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParameters` `capabilities`

    The Linux capabilities for the container that are added to or dropped from the
    default configuration provided by Docker.

    .. note::

      If you are using tasks that use the Fargate launch type, ``capabilities`` is
      supported but the ``add`` parameter is not supported.

    - **add** *(list) --*

      The Linux capabilities for the container that have been added to the default
      configuration provided by Docker. This parameter maps to ``CapAdd`` in the `Create
      a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of
      the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
      ``--cap-add`` option to `docker run
      <https://docs.docker.com/engine/reference/run/>`__ .

      .. note::

        If you are using tasks that use the Fargate launch type, the ``add`` parameter is
        not supported.

      Valid values: ``"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" | "BLOCK_SUSPEND" | "CHOWN"
      | "DAC_OVERRIDE" | "DAC_READ_SEARCH" | "FOWNER" | "FSETID" | "IPC_LOCK" |
      "IPC_OWNER" | "KILL" | "LEASE" | "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" |
      "MKNOD" | "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" |
      "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT" |
      "SYS_CHROOT" | "SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" | "SYS_PTRACE" | "SYS_RAWIO"
      | "SYS_RESOURCE" | "SYS_TIME" | "SYS_TTY_CONFIG" | "SYSLOG" | "WAKE_ALARM"``

      - *(string) --*

    - **drop** *(list) --*

      The Linux capabilities for the container that have been removed from the default
      configuration provided by Docker. This parameter maps to ``CapDrop`` in the `Create
      a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of
      the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
      ``--cap-drop`` option to `docker run
      <https://docs.docker.com/engine/reference/run/>`__ .

      Valid values: ``"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" | "BLOCK_SUSPEND" | "CHOWN"
      | "DAC_OVERRIDE" | "DAC_READ_SEARCH" | "FOWNER" | "FSETID" | "IPC_LOCK" |
      "IPC_OWNER" | "KILL" | "LEASE" | "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" |
      "MKNOD" | "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" |
      "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT" |
      "SYS_CHROOT" | "SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" | "SYS_PTRACE" | "SYS_RAWIO"
      | "SYS_RESOURCE" | "SYS_TIME" | "SYS_TTY_CONFIG" | "SYSLOG" | "WAKE_ALARM"``

      - *(string) --*
    """


_ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParametersdevicesTypeDef = TypedDict(
    "_ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParametersdevicesTypeDef",
    {"hostPath": str, "containerPath": str, "permissions": List[str]},
    total=False,
)


class ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParametersdevicesTypeDef(
    _ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParametersdevicesTypeDef
):
    """
    Type definition for `ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParameters` `devices`

    An object representing a container instance host device.

    - **hostPath** *(string) --*

      The path for the device on the host container instance.

    - **containerPath** *(string) --*

      The path inside the container at which to expose the host device.

    - **permissions** *(list) --*

      The explicit permissions to provide to the container for the device. By default,
      the container has permissions for ``read`` , ``write`` , and ``mknod`` for the
      device.

      - *(string) --*
    """


_ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParameterstmpfsTypeDef = TypedDict(
    "_ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParameterstmpfsTypeDef",
    {"containerPath": str, "size": int, "mountOptions": List[str]},
    total=False,
)


class ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParameterstmpfsTypeDef(
    _ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParameterstmpfsTypeDef
):
    """
    Type definition for `ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParameters` `tmpfs`

    The container path, mount options, and size of the tmpfs mount.

    - **containerPath** *(string) --*

      The absolute file path where the tmpfs volume is to be mounted.

    - **size** *(integer) --*

      The size (in MiB) of the tmpfs volume.

    - **mountOptions** *(list) --*

      The list of tmpfs volume mount options.

      Valid values: ``"defaults" | "ro" | "rw" | "suid" | "nosuid" | "dev" | "nodev" |
      "exec" | "noexec" | "sync" | "async" | "dirsync" | "remount" | "mand" | "nomand"
      | "atime" | "noatime" | "diratime" | "nodiratime" | "bind" | "rbind" |
      "unbindable" | "runbindable" | "private" | "rprivate" | "shared" | "rshared" |
      "slave" | "rslave" | "relatime" | "norelatime" | "strictatime" | "nostrictatime"
      | "mode" | "uid" | "gid" | "nr_inodes" | "nr_blocks" | "mpol"``

      - *(string) --*
    """


_ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParametersTypeDef = TypedDict(
    "_ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParametersTypeDef",
    {
        "capabilities": ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParameterscapabilitiesTypeDef,
        "devices": List[
            ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParametersdevicesTypeDef
        ],
        "initProcessEnabled": bool,
        "sharedMemorySize": int,
        "tmpfs": List[
            ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParameterstmpfsTypeDef
        ],
        "maxSwap": int,
        "swappiness": int,
    },
    total=False,
)


class ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParametersTypeDef(
    _ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParametersTypeDef
):
    """
    Type definition for `ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitions` `linuxParameters`

    Linux-specific modifications that are applied to the container, such as Linux kernel
    capabilities. For more information see  KernelCapabilities .

    .. note::

      This parameter is not supported for Windows containers.

    - **capabilities** *(dict) --*

      The Linux capabilities for the container that are added to or dropped from the
      default configuration provided by Docker.

      .. note::

        If you are using tasks that use the Fargate launch type, ``capabilities`` is
        supported but the ``add`` parameter is not supported.

      - **add** *(list) --*

        The Linux capabilities for the container that have been added to the default
        configuration provided by Docker. This parameter maps to ``CapAdd`` in the `Create
        a container
        <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of
        the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
        ``--cap-add`` option to `docker run
        <https://docs.docker.com/engine/reference/run/>`__ .

        .. note::

          If you are using tasks that use the Fargate launch type, the ``add`` parameter is
          not supported.

        Valid values: ``"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" | "BLOCK_SUSPEND" | "CHOWN"
        | "DAC_OVERRIDE" | "DAC_READ_SEARCH" | "FOWNER" | "FSETID" | "IPC_LOCK" |
        "IPC_OWNER" | "KILL" | "LEASE" | "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" |
        "MKNOD" | "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" |
        "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT" |
        "SYS_CHROOT" | "SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" | "SYS_PTRACE" | "SYS_RAWIO"
        | "SYS_RESOURCE" | "SYS_TIME" | "SYS_TTY_CONFIG" | "SYSLOG" | "WAKE_ALARM"``

        - *(string) --*

      - **drop** *(list) --*

        The Linux capabilities for the container that have been removed from the default
        configuration provided by Docker. This parameter maps to ``CapDrop`` in the `Create
        a container
        <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of
        the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
        ``--cap-drop`` option to `docker run
        <https://docs.docker.com/engine/reference/run/>`__ .

        Valid values: ``"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" | "BLOCK_SUSPEND" | "CHOWN"
        | "DAC_OVERRIDE" | "DAC_READ_SEARCH" | "FOWNER" | "FSETID" | "IPC_LOCK" |
        "IPC_OWNER" | "KILL" | "LEASE" | "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" |
        "MKNOD" | "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" |
        "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT" |
        "SYS_CHROOT" | "SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" | "SYS_PTRACE" | "SYS_RAWIO"
        | "SYS_RESOURCE" | "SYS_TIME" | "SYS_TTY_CONFIG" | "SYSLOG" | "WAKE_ALARM"``

        - *(string) --*

    - **devices** *(list) --*

      Any host devices to expose to the container. This parameter maps to ``Devices`` in
      the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of
      the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
      ``--device`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__
      .

      .. note::

        If you are using tasks that use the Fargate launch type, the ``devices`` parameter
        is not supported.

      - *(dict) --*

        An object representing a container instance host device.

        - **hostPath** *(string) --*

          The path for the device on the host container instance.

        - **containerPath** *(string) --*

          The path inside the container at which to expose the host device.

        - **permissions** *(list) --*

          The explicit permissions to provide to the container for the device. By default,
          the container has permissions for ``read`` , ``write`` , and ``mknod`` for the
          device.

          - *(string) --*

    - **initProcessEnabled** *(boolean) --*

      Run an ``init`` process inside the container that forwards signals and reaps
      processes. This parameter maps to the ``--init`` option to `docker run
      <https://docs.docker.com/engine/reference/run/>`__ . This parameter requires version
      1.25 of the Docker Remote API or greater on your container instance. To check the
      Docker Remote API version on your container instance, log in to your container
      instance and run the following command: ``sudo docker version --format
      '{{.Server.APIVersion}}'``

    - **sharedMemorySize** *(integer) --*

      The value for the size (in MiB) of the ``/dev/shm`` volume. This parameter maps to
      the ``--shm-size`` option to `docker run
      <https://docs.docker.com/engine/reference/run/>`__ .

      .. note::

        If you are using tasks that use the Fargate launch type, the ``sharedMemorySize``
        parameter is not supported.

    - **tmpfs** *(list) --*

      The container path, mount options, and size (in MiB) of the tmpfs mount. This
      parameter maps to the ``--tmpfs`` option to `docker run
      <https://docs.docker.com/engine/reference/run/>`__ .

      .. note::

        If you are using tasks that use the Fargate launch type, the ``tmpfs`` parameter is
        not supported.

      - *(dict) --*

        The container path, mount options, and size of the tmpfs mount.

        - **containerPath** *(string) --*

          The absolute file path where the tmpfs volume is to be mounted.

        - **size** *(integer) --*

          The size (in MiB) of the tmpfs volume.

        - **mountOptions** *(list) --*

          The list of tmpfs volume mount options.

          Valid values: ``"defaults" | "ro" | "rw" | "suid" | "nosuid" | "dev" | "nodev" |
          "exec" | "noexec" | "sync" | "async" | "dirsync" | "remount" | "mand" | "nomand"
          | "atime" | "noatime" | "diratime" | "nodiratime" | "bind" | "rbind" |
          "unbindable" | "runbindable" | "private" | "rprivate" | "shared" | "rshared" |
          "slave" | "rslave" | "relatime" | "norelatime" | "strictatime" | "nostrictatime"
          | "mode" | "uid" | "gid" | "nr_inodes" | "nr_blocks" | "mpol"``

          - *(string) --*

    - **maxSwap** *(integer) --*

      The total amount of swap memory (in MiB) a container can use. This parameter will be
      translated to the ``--memory-swap`` option to `docker run
      <https://docs.docker.com/engine/reference/run/>`__ where the value would be the sum
      of the container memory plus the ``maxSwap`` value.

      If a ``maxSwap`` value of ``0`` is specified, the container will not use swap.
      Accepted values are ``0`` or any positive integer. If the ``maxSwap`` parameter is
      omitted, the container will use the swap configuration for the container instance it
      is running on. A ``maxSwap`` value must be set for the ``swappiness`` parameter to be
      used.

      .. note::

        If you are using tasks that use the Fargate launch type, the ``maxSwap`` parameter
        is not supported.

    - **swappiness** *(integer) --*

      This allows you to tune a container's memory swappiness behavior. A ``swappiness``
      value of ``0`` will cause swapping to not happen unless absolutely necessary. A
      ``swappiness`` value of ``100`` will cause pages to be swapped very aggressively.
      Accepted values are whole numbers between ``0`` and ``100`` . If the ``swappiness``
      parameter is not specified, a default value of ``60`` is used. If a value is not
      specified for ``maxSwap`` then this parameter is ignored. This parameter maps to the
      ``--memory-swappiness`` option to `docker run
      <https://docs.docker.com/engine/reference/run/>`__ .

      .. note::

        If you are using tasks that use the Fargate launch type, the ``swappiness``
        parameter is not supported.
    """


_ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslogConfigurationsecretOptionsTypeDef = TypedDict(
    "_ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslogConfigurationsecretOptionsTypeDef",
    {"name": str, "valueFrom": str},
    total=False,
)


class ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslogConfigurationsecretOptionsTypeDef(
    _ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslogConfigurationsecretOptionsTypeDef
):
    """
    Type definition for `ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslogConfiguration` `secretOptions`

    An object representing the secret to expose to your container. Secrets can be
    exposed to a container in the following ways:

    * To inject sensitive data into your containers as environment variables, use the
    ``secrets`` container definition parameter.

    * To reference sensitive information in the log configuration of a container, use
    the ``secretOptions`` container definition parameter.

    For more information, see `Specifying Sensitive Data
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html>`__
    in the *Amazon Elastic Container Service Developer Guide* .

    - **name** *(string) --*

      The name of the secret.

    - **valueFrom** *(string) --*

      The secret to expose to the container. The supported values are either the full
      ARN of the AWS Secrets Manager secret or the full ARN of the parameter in the AWS
      Systems Manager Parameter Store.

      .. note::

        If the AWS Systems Manager Parameter Store parameter exists in the same Region
        as the task you are launching, then you can use either the full ARN or name of
        the parameter. If the parameter exists in a different Region, then the full ARN
        must be specified.
    """


_ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslogConfigurationTypeDef = TypedDict(
    "_ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslogConfigurationTypeDef",
    {
        "logDriver": str,
        "options": Dict[str, str],
        "secretOptions": List[
            ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslogConfigurationsecretOptionsTypeDef
        ],
    },
    total=False,
)


class ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslogConfigurationTypeDef(
    _ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslogConfigurationTypeDef
):
    """
    Type definition for `ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitions` `logConfiguration`

    The log configuration specification for the container.

    This parameter maps to ``LogConfig`` in the `Create a container
    <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
    `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
    ``--log-driver`` option to `docker run
    <https://docs.docker.com/engine/reference/run/>`__ . By default, containers use the
    same logging driver that the Docker daemon uses. However the container may use a
    different logging driver than the Docker daemon by specifying a log driver with this
    parameter in the container definition. To use a different logging driver for a
    container, the log system must be configured properly on the container instance (or on
    a different log server for remote logging options). For more information on the options
    for different supported log drivers, see `Configure logging drivers
    <https://docs.docker.com/engine/admin/logging/overview/>`__ in the Docker documentation.

    .. note::

      Amazon ECS currently supports a subset of the logging drivers available to the Docker
      daemon (shown in the  LogConfiguration data type). Additional log drivers may be
      available in future releases of the Amazon ECS container agent.

    This parameter requires version 1.18 of the Docker Remote API or greater on your
    container instance. To check the Docker Remote API version on your container instance,
    log in to your container instance and run the following command: ``sudo docker version
    --format '{{.Server.APIVersion}}'``

    .. note::

      The Amazon ECS container agent running on a container instance must register the
      logging drivers available on that instance with the ``ECS_AVAILABLE_LOGGING_DRIVERS``
      environment variable before containers placed on that instance can use these log
      configuration options. For more information, see `Amazon ECS Container Agent
      Configuration
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

    - **logDriver** *(string) --*

      The log driver to use for the container. The valid values listed for this parameter
      are log drivers that the Amazon ECS container agent can communicate with by default.

      For tasks using the Fargate launch type, the supported log drivers are ``awslogs``
      and ``splunk`` .

      For tasks using the EC2 launch type, the supported log drivers are ``awslogs`` ,
      ``fluentd`` , ``gelf`` , ``json-file`` , ``journald`` , ``logentries`` , ``syslog`` ,
      and ``splunk`` .

      For more information about using the ``awslogs`` log driver, see `Using the awslogs
      Log Driver
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_awslogs.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

      .. note::

        If you have a custom driver that is not listed above that you would like to work
        with the Amazon ECS container agent, you can fork the Amazon ECS container agent
        project that is `available on GitHub <https://github.com/aws/amazon-ecs-agent>`__
        and customize it to work with that driver. We encourage you to submit pull requests
        for changes that you would like to have included. However, Amazon Web Services does
        not currently support running modified copies of this software.

      This parameter requires version 1.18 of the Docker Remote API or greater on your
      container instance. To check the Docker Remote API version on your container
      instance, log in to your container instance and run the following command: ``sudo
      docker version --format '{{.Server.APIVersion}}'``

    - **options** *(dict) --*

      The configuration options to send to the log driver. This parameter requires version
      1.19 of the Docker Remote API or greater on your container instance. To check the
      Docker Remote API version on your container instance, log in to your container
      instance and run the following command: ``sudo docker version --format
      '{{.Server.APIVersion}}'``

      - *(string) --*

        - *(string) --*

    - **secretOptions** *(list) --*

      The secrets to pass to the log configuration. For more information, see `Specifying
      Sensitive Data
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

      - *(dict) --*

        An object representing the secret to expose to your container. Secrets can be
        exposed to a container in the following ways:

        * To inject sensitive data into your containers as environment variables, use the
        ``secrets`` container definition parameter.

        * To reference sensitive information in the log configuration of a container, use
        the ``secretOptions`` container definition parameter.

        For more information, see `Specifying Sensitive Data
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html>`__
        in the *Amazon Elastic Container Service Developer Guide* .

        - **name** *(string) --*

          The name of the secret.

        - **valueFrom** *(string) --*

          The secret to expose to the container. The supported values are either the full
          ARN of the AWS Secrets Manager secret or the full ARN of the parameter in the AWS
          Systems Manager Parameter Store.

          .. note::

            If the AWS Systems Manager Parameter Store parameter exists in the same Region
            as the task you are launching, then you can use either the full ARN or name of
            the parameter. If the parameter exists in a different Region, then the full ARN
            must be specified.
    """


_ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsmountPointsTypeDef = TypedDict(
    "_ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsmountPointsTypeDef",
    {"sourceVolume": str, "containerPath": str, "readOnly": bool},
    total=False,
)


class ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsmountPointsTypeDef(
    _ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsmountPointsTypeDef
):
    """
    Type definition for `ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitions` `mountPoints`

    Details on a volume mount point that is used in a container definition.

    - **sourceVolume** *(string) --*

      The name of the volume to mount. Must be a volume name referenced in the ``name``
      parameter of task definition ``volume`` .

    - **containerPath** *(string) --*

      The path on the container to mount the host volume at.

    - **readOnly** *(boolean) --*

      If this value is ``true`` , the container has read-only access to the volume. If
      this value is ``false`` , then the container can write to the volume. The default
      value is ``false`` .
    """


_ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsportMappingsTypeDef = TypedDict(
    "_ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsportMappingsTypeDef",
    {"containerPort": int, "hostPort": int, "protocol": str},
    total=False,
)


class ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsportMappingsTypeDef(
    _ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsportMappingsTypeDef
):
    """
    Type definition for `ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitions` `portMappings`

    Port mappings allow containers to access ports on the host container instance to send
    or receive traffic. Port mappings are specified as part of the container definition.

    If you are using containers in a task with the ``awsvpc`` or ``host`` network mode,
    exposed ports should be specified using ``containerPort`` . The ``hostPort`` can be
    left blank or it must be the same value as the ``containerPort`` .

    After a task reaches the ``RUNNING`` status, manual and automatic host and container
    port assignments are visible in the ``networkBindings`` section of  DescribeTasks API
    responses.

    - **containerPort** *(integer) --*

      The port number on the container that is bound to the user-specified or
      automatically assigned host port.

      If you are using containers in a task with the ``awsvpc`` or ``host`` network mode,
      exposed ports should be specified using ``containerPort`` .

      If you are using containers in a task with the ``bridge`` network mode and you
      specify a container port and not a host port, your container automatically receives
      a host port in the ephemeral port range. For more information, see ``hostPort`` .
      Port mappings that are automatically assigned in this way do not count toward the
      100 reserved ports limit of a container instance.

      .. warning::

        You cannot expose the same container port for multiple protocols. An error will
        be returned if this is attempted.

    - **hostPort** *(integer) --*

      The port number on the container instance to reserve for your container.

      If you are using containers in a task with the ``awsvpc`` or ``host`` network mode,
      the ``hostPort`` can either be left blank or set to the same value as the
      ``containerPort`` .

      If you are using containers in a task with the ``bridge`` network mode, you can
      specify a non-reserved host port for your container port mapping, or you can omit
      the ``hostPort`` (or set it to ``0`` ) while specifying a ``containerPort`` and
      your container automatically receives a port in the ephemeral port range for your
      container instance operating system and Docker version.

      The default ephemeral port range for Docker version 1.6.0 and later is listed on
      the instance under ``/proc/sys/net/ipv4/ip_local_port_range`` . If this kernel
      parameter is unavailable, the default ephemeral port range from 49153 through 65535
      is used. Do not attempt to specify a host port in the ephemeral port range as these
      are reserved for automatic assignment. In general, ports below 32768 are outside of
      the ephemeral port range.

      .. note::

        The default ephemeral port range from 49153 through 65535 is always used for
        Docker versions before 1.6.0.

      The default reserved ports are 22 for SSH, the Docker ports 2375 and 2376, and the
      Amazon ECS container agent ports 51678-51680. Any host port that was previously
      specified in a running task is also reserved while the task is running (after a
      task stops, the host port is released). The current reserved ports are displayed in
      the ``remainingResources`` of  DescribeContainerInstances output. A container
      instance can have up to 100 reserved ports at a time, including the default
      reserved ports. Automatically assigned ports don't count toward the 100 reserved
      ports limit.

    - **protocol** *(string) --*

      The protocol used for the port mapping. Valid values are ``tcp`` and ``udp`` . The
      default is ``tcp`` .
    """


_ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsrepositoryCredentialsTypeDef = TypedDict(
    "_ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsrepositoryCredentialsTypeDef",
    {"credentialsParameter": str},
    total=False,
)


class ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsrepositoryCredentialsTypeDef(
    _ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsrepositoryCredentialsTypeDef
):
    """
    Type definition for `ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitions` `repositoryCredentials`

    The private repository authentication credentials to use.

    - **credentialsParameter** *(string) --*

      The Amazon Resource Name (ARN) of the secret containing the private repository
      credentials.

      .. note::

        When you are using the Amazon ECS API, AWS CLI, or AWS SDK, if the secret exists in
        the same Region as the task that you are launching then you can use either the full
        ARN or the name of the secret. When you are using the AWS Management Console, you
        must specify the full ARN of the secret.
    """


_ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsresourceRequirementsTypeDef = TypedDict(
    "_ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsresourceRequirementsTypeDef",
    {"value": str, "type": str},
    total=False,
)


class ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsresourceRequirementsTypeDef(
    _ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsresourceRequirementsTypeDef
):
    """
    Type definition for `ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitions` `resourceRequirements`

    The type and amount of a resource to assign to a container. The supported resource
    types are GPUs and Elastic Inference accelerators. For more information, see `Working
    with GPUs on Amazon ECS
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-gpu.html>`__ or
    `Working with Amazon Elastic Inference on Amazon ECS
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in the
    *Amazon Elastic Container Service Developer Guide*

    - **value** *(string) --*

      The value for the specified resource type.

      If the ``GPU`` type is used, the value is the number of physical ``GPUs`` the
      Amazon ECS container agent will reserve for the container. The number of GPUs
      reserved for all containers in a task should not exceed the number of available
      GPUs on the container instance the task is launched on.

      If the ``InferenceAccelerator`` type is used, the ``value`` should match the
      ``deviceName`` for an  InferenceAccelerator specified in a task definition.

    - **type** *(string) --*

      The type of resource to assign to a container. The supported values are ``GPU`` or
      ``InferenceAccelerator`` .
    """


_ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionssecretsTypeDef = TypedDict(
    "_ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionssecretsTypeDef",
    {"name": str, "valueFrom": str},
    total=False,
)


class ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionssecretsTypeDef(
    _ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionssecretsTypeDef
):
    """
    Type definition for `ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitions` `secrets`

    An object representing the secret to expose to your container. Secrets can be exposed
    to a container in the following ways:

    * To inject sensitive data into your containers as environment variables, use the
    ``secrets`` container definition parameter.

    * To reference sensitive information in the log configuration of a container, use the
    ``secretOptions`` container definition parameter.

    For more information, see `Specifying Sensitive Data
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html>`__
    in the *Amazon Elastic Container Service Developer Guide* .

    - **name** *(string) --*

      The name of the secret.

    - **valueFrom** *(string) --*

      The secret to expose to the container. The supported values are either the full ARN
      of the AWS Secrets Manager secret or the full ARN of the parameter in the AWS
      Systems Manager Parameter Store.

      .. note::

        If the AWS Systems Manager Parameter Store parameter exists in the same Region as
        the task you are launching, then you can use either the full ARN or name of the
        parameter. If the parameter exists in a different Region, then the full ARN must
        be specified.
    """


_ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionssystemControlsTypeDef = TypedDict(
    "_ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionssystemControlsTypeDef",
    {"namespace": str, "value": str},
    total=False,
)


class ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionssystemControlsTypeDef(
    _ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionssystemControlsTypeDef
):
    """
    Type definition for `ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitions` `systemControls`

    A list of namespaced kernel parameters to set in the container. This parameter maps
    to ``Sysctls`` in the `Create a container
    <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of
    the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
    ``--sysctl`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__
    .

    It is not recommended that you specify network-related ``systemControls`` parameters
    for multiple containers in a single task that also uses either the ``awsvpc`` or
    ``host`` network mode for the following reasons:

    * For tasks that use the ``awsvpc`` network mode, if you set ``systemControls`` for
    any container, it applies to all containers in the task. If you set different
    ``systemControls`` for multiple containers in a single task, the container that is
    started last determines which ``systemControls`` take effect.

    * For tasks that use the ``host`` network mode, the ``systemControls`` parameter
    applies to the container instance's kernel parameter as well as that of all
    containers of any tasks running on that container instance.

    - **namespace** *(string) --*

      The namespaced kernel parameter for which to set a ``value`` .

    - **value** *(string) --*

      The value for the namespaced kernel parameter specified in ``namespace`` .
    """


_ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsulimitsTypeDef = TypedDict(
    "_ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsulimitsTypeDef",
    {"name": str, "softLimit": int, "hardLimit": int},
    total=False,
)


class ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsulimitsTypeDef(
    _ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsulimitsTypeDef
):
    """
    Type definition for `ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitions` `ulimits`

    The ``ulimit`` settings to pass to the container.

    - **name** *(string) --*

      The ``type`` of the ``ulimit`` .

    - **softLimit** *(integer) --*

      The soft limit for the ulimit type.

    - **hardLimit** *(integer) --*

      The hard limit for the ulimit type.
    """


_ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsvolumesFromTypeDef = TypedDict(
    "_ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsvolumesFromTypeDef",
    {"sourceContainer": str, "readOnly": bool},
    total=False,
)


class ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsvolumesFromTypeDef(
    _ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsvolumesFromTypeDef
):
    """
    Type definition for `ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitions` `volumesFrom`

    Details on a data volume from another container in the same task definition.

    - **sourceContainer** *(string) --*

      The name of another container within the same task definition from which to mount
      volumes.

    - **readOnly** *(boolean) --*

      If this value is ``true`` , the container has read-only access to the volume. If
      this value is ``false`` , then the container can write to the volume. The default
      value is ``false`` .
    """


_ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsTypeDef = TypedDict(
    "_ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsTypeDef",
    {
        "name": str,
        "image": str,
        "repositoryCredentials": ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsrepositoryCredentialsTypeDef,
        "cpu": int,
        "memory": int,
        "memoryReservation": int,
        "links": List[str],
        "portMappings": List[
            ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsportMappingsTypeDef
        ],
        "essential": bool,
        "entryPoint": List[str],
        "command": List[str],
        "environment": List[
            ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsenvironmentTypeDef
        ],
        "mountPoints": List[
            ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsmountPointsTypeDef
        ],
        "volumesFrom": List[
            ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsvolumesFromTypeDef
        ],
        "linuxParameters": ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslinuxParametersTypeDef,
        "secrets": List[
            ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionssecretsTypeDef
        ],
        "dependsOn": List[
            ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsdependsOnTypeDef
        ],
        "startTimeout": int,
        "stopTimeout": int,
        "hostname": str,
        "user": str,
        "workingDirectory": str,
        "disableNetworking": bool,
        "privileged": bool,
        "readonlyRootFilesystem": bool,
        "dnsServers": List[str],
        "dnsSearchDomains": List[str],
        "extraHosts": List[
            ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsextraHostsTypeDef
        ],
        "dockerSecurityOptions": List[str],
        "interactive": bool,
        "pseudoTerminal": bool,
        "dockerLabels": Dict[str, str],
        "ulimits": List[
            ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsulimitsTypeDef
        ],
        "logConfiguration": ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionslogConfigurationTypeDef,
        "healthCheck": ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionshealthCheckTypeDef,
        "systemControls": List[
            ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionssystemControlsTypeDef
        ],
        "resourceRequirements": List[
            ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsresourceRequirementsTypeDef
        ],
        "firelensConfiguration": ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsfirelensConfigurationTypeDef,
    },
    total=False,
)


class ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsTypeDef(
    _ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsTypeDef
):
    """
    Type definition for `ClientRegisterTaskDefinitionResponsetaskDefinition` `containerDefinitions`

    Container definitions are used in task definitions to describe the different containers
    that are launched as part of a task.

    - **name** *(string) --*

      The name of a container. If you are linking multiple containers together in a task
      definition, the ``name`` of one container can be entered in the ``links`` of another
      container to connect the containers. Up to 255 letters (uppercase and lowercase),
      numbers, and hyphens are allowed. This parameter maps to ``name`` in the `Create a
      container <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__
      section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and
      the ``--name`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__
      .

    - **image** *(string) --*

      The image used to start a container. This string is passed directly to the Docker
      daemon. Images in the Docker Hub registry are available by default. Other repositories
      are specified with either `` *repository-url* /*image* :*tag* `` or `` *repository-url*
      /*image* @*digest* `` . Up to 255 letters (uppercase and lowercase), numbers, hyphens,
      underscores, colons, periods, forward slashes, and number signs are allowed. This
      parameter maps to ``Image`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``IMAGE``
      parameter of `docker run <https://docs.docker.com/engine/reference/run/>`__ .

      * When a new task starts, the Amazon ECS container agent pulls the latest version of
      the specified image and tag for the container to use. However, subsequent updates to a
      repository image are not propagated to already running tasks.

      * Images in Amazon ECR repositories can be specified by either using the full
      ``registry/repository:tag`` or ``registry/repository@digest`` . For example,
      ``012345678910.dkr.ecr.<region-name>.amazonaws.com/<repository-name>:latest`` or
      ``012345678910.dkr.ecr.<region-name>.amazonaws.com/<repository-name>@sha256:94afd1f2e64d908bc90dbca0035a5b567EXAMPLE``
      .

      * Images in official repositories on Docker Hub use a single name (for example,
      ``ubuntu`` or ``mongo`` ).

      * Images in other repositories on Docker Hub are qualified with an organization name
      (for example, ``amazon/amazon-ecs-agent`` ).

      * Images in other online repositories are qualified further by a domain name (for
      example, ``quay.io/assemblyline/ubuntu`` ).

    - **repositoryCredentials** *(dict) --*

      The private repository authentication credentials to use.

      - **credentialsParameter** *(string) --*

        The Amazon Resource Name (ARN) of the secret containing the private repository
        credentials.

        .. note::

          When you are using the Amazon ECS API, AWS CLI, or AWS SDK, if the secret exists in
          the same Region as the task that you are launching then you can use either the full
          ARN or the name of the secret. When you are using the AWS Management Console, you
          must specify the full ARN of the secret.

    - **cpu** *(integer) --*

      The number of ``cpu`` units reserved for the container. This parameter maps to
      ``CpuShares`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
      ``--cpu-shares`` option to `docker run
      <https://docs.docker.com/engine/reference/run/>`__ .

      This field is optional for tasks using the Fargate launch type, and the only
      requirement is that the total amount of CPU reserved for all containers within a task
      be lower than the task-level ``cpu`` value.

      .. note::

        You can determine the number of CPU units that are available per EC2 instance type by
        multiplying the vCPUs listed for that instance type on the `Amazon EC2 Instances
        <http://aws.amazon.com/ec2/instance-types/>`__ detail page by 1,024.

      For example, if you run a single-container task on a single-core instance type with 512
      CPU units specified for that container, and that is the only task running on the
      container instance, that container could use the full 1,024 CPU unit share at any given
      time. However, if you launched another copy of the same task on that container
      instance, each task would be guaranteed a minimum of 512 CPU units when needed, and
      each container could float to higher CPU usage if the other container was not using it,
      but if both tasks were 100% active all of the time, they would be limited to 512 CPU
      units.

      Linux containers share unallocated CPU units with other containers on the container
      instance with the same ratio as their allocated amount. For example, if you run a
      single-container task on a single-core instance type with 512 CPU units specified for
      that container, and that is the only task running on the container instance, that
      container could use the full 1,024 CPU unit share at any given time. However, if you
      launched another copy of the same task on that container instance, each task would be
      guaranteed a minimum of 512 CPU units when needed, and each container could float to
      higher CPU usage if the other container was not using it, but if both tasks were 100%
      active all of the time, they would be limited to 512 CPU units.

      On Linux container instances, the Docker daemon on the container instance uses the CPU
      value to calculate the relative CPU share ratios for running containers. For more
      information, see `CPU share constraint
      <https://docs.docker.com/engine/reference/run/#cpu-share-constraint>`__ in the Docker
      documentation. The minimum valid CPU share value that the Linux kernel allows is 2.
      However, the CPU parameter is not required, and you can use CPU values below 2 in your
      container definitions. For CPU values below 2 (including null), the behavior varies
      based on your Amazon ECS container agent version:

      * **Agent versions less than or equal to 1.1.0:** Null and zero CPU values are passed
      to Docker as 0, which Docker then converts to 1,024 CPU shares. CPU values of 1 are
      passed to Docker as 1, which the Linux kernel converts to two CPU shares.

      * **Agent versions greater than or equal to 1.2.0:** Null, zero, and CPU values of 1
      are passed to Docker as 2.

      On Windows container instances, the CPU limit is enforced as an absolute limit, or a
      quota. Windows containers only have access to the specified amount of CPU that is
      described in the task definition.

    - **memory** *(integer) --*

      The amount (in MiB) of memory to present to the container. If your container attempts
      to exceed the memory specified here, the container is killed. The total amount of
      memory reserved for all containers within a task must be lower than the task ``memory``
      value, if one is specified. This parameter maps to ``Memory`` in the `Create a
      container <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__
      section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and
      the ``--memory`` option to `docker run
      <https://docs.docker.com/engine/reference/run/>`__ .

      If using the Fargate launch type, this parameter is optional.

      If using the EC2 launch type, you must specify either a task-level memory value or a
      container-level memory value. If you specify both a container-level ``memory`` and
      ``memoryReservation`` value, ``memory`` must be greater than ``memoryReservation`` . If
      you specify ``memoryReservation`` , then that value is subtracted from the available
      memory resources for the container instance on which the container is placed.
      Otherwise, the value of ``memory`` is used.

      The Docker daemon reserves a minimum of 4 MiB of memory for a container, so you should
      not specify fewer than 4 MiB of memory for your containers.

    - **memoryReservation** *(integer) --*

      The soft limit (in MiB) of memory to reserve for the container. When system memory is
      under heavy contention, Docker attempts to keep the container memory to this soft
      limit. However, your container can consume more memory when it needs to, up to either
      the hard limit specified with the ``memory`` parameter (if applicable), or all of the
      available memory on the container instance, whichever comes first. This parameter maps
      to ``MemoryReservation`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
      ``--memory-reservation`` option to `docker run
      <https://docs.docker.com/engine/reference/run/>`__ .

      If a task-level memory value is not specified, you must specify a non-zero integer for
      one or both of ``memory`` or ``memoryReservation`` in a container definition. If you
      specify both, ``memory`` must be greater than ``memoryReservation`` . If you specify
      ``memoryReservation`` , then that value is subtracted from the available memory
      resources for the container instance on which the container is placed. Otherwise, the
      value of ``memory`` is used.

      For example, if your container normally uses 128 MiB of memory, but occasionally bursts
      to 256 MiB of memory for short periods of time, you can set a ``memoryReservation`` of
      128 MiB, and a ``memory`` hard limit of 300 MiB. This configuration would allow the
      container to only reserve 128 MiB of memory from the remaining resources on the
      container instance, but also allow the container to consume more memory resources when
      needed.

      The Docker daemon reserves a minimum of 4 MiB of memory for a container, so you should
      not specify fewer than 4 MiB of memory for your containers.

    - **links** *(list) --*

      The ``links`` parameter allows containers to communicate with each other without the
      need for port mappings. This parameter is only supported if the network mode of a task
      definition is ``bridge`` . The ``name:internalName`` construct is analogous to
      ``name:alias`` in Docker links. Up to 255 letters (uppercase and lowercase), numbers,
      and hyphens are allowed. For more information about linking Docker containers, go to
      `Legacy container links <https://docs.docker.com/network/links/>`__ in the Docker
      documentation. This parameter maps to ``Links`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--link``
      option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

      .. note::

        This parameter is not supported for Windows containers.

      .. warning::

        Containers that are collocated on a single container instance may be able to
        communicate with each other without requiring links or host port mappings. Network
        isolation is achieved on the container instance using security groups and VPC
        settings.

      - *(string) --*

    - **portMappings** *(list) --*

      The list of port mappings for the container. Port mappings allow containers to access
      ports on the host container instance to send or receive traffic.

      For task definitions that use the ``awsvpc`` network mode, you should only specify the
      ``containerPort`` . The ``hostPort`` can be left blank or it must be the same value as
      the ``containerPort`` .

      Port mappings on Windows use the ``NetNAT`` gateway address rather than ``localhost`` .
      There is no loopback for port mappings on Windows, so you cannot access a container's
      mapped port from the host itself.

      This parameter maps to ``PortBindings`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--publish``
      option to `docker run <https://docs.docker.com/engine/reference/run/>`__ . If the
      network mode of a task definition is set to ``none`` , then you can't specify port
      mappings. If the network mode of a task definition is set to ``host`` , then host ports
      must either be undefined or they must match the container port in the port mapping.

      .. note::

        After a task reaches the ``RUNNING`` status, manual and automatic host and container
        port assignments are visible in the **Network Bindings** section of a container
        description for a selected task in the Amazon ECS console. The assignments are also
        visible in the ``networkBindings`` section  DescribeTasks responses.

      - *(dict) --*

        Port mappings allow containers to access ports on the host container instance to send
        or receive traffic. Port mappings are specified as part of the container definition.

        If you are using containers in a task with the ``awsvpc`` or ``host`` network mode,
        exposed ports should be specified using ``containerPort`` . The ``hostPort`` can be
        left blank or it must be the same value as the ``containerPort`` .

        After a task reaches the ``RUNNING`` status, manual and automatic host and container
        port assignments are visible in the ``networkBindings`` section of  DescribeTasks API
        responses.

        - **containerPort** *(integer) --*

          The port number on the container that is bound to the user-specified or
          automatically assigned host port.

          If you are using containers in a task with the ``awsvpc`` or ``host`` network mode,
          exposed ports should be specified using ``containerPort`` .

          If you are using containers in a task with the ``bridge`` network mode and you
          specify a container port and not a host port, your container automatically receives
          a host port in the ephemeral port range. For more information, see ``hostPort`` .
          Port mappings that are automatically assigned in this way do not count toward the
          100 reserved ports limit of a container instance.

          .. warning::

            You cannot expose the same container port for multiple protocols. An error will
            be returned if this is attempted.

        - **hostPort** *(integer) --*

          The port number on the container instance to reserve for your container.

          If you are using containers in a task with the ``awsvpc`` or ``host`` network mode,
          the ``hostPort`` can either be left blank or set to the same value as the
          ``containerPort`` .

          If you are using containers in a task with the ``bridge`` network mode, you can
          specify a non-reserved host port for your container port mapping, or you can omit
          the ``hostPort`` (or set it to ``0`` ) while specifying a ``containerPort`` and
          your container automatically receives a port in the ephemeral port range for your
          container instance operating system and Docker version.

          The default ephemeral port range for Docker version 1.6.0 and later is listed on
          the instance under ``/proc/sys/net/ipv4/ip_local_port_range`` . If this kernel
          parameter is unavailable, the default ephemeral port range from 49153 through 65535
          is used. Do not attempt to specify a host port in the ephemeral port range as these
          are reserved for automatic assignment. In general, ports below 32768 are outside of
          the ephemeral port range.

          .. note::

            The default ephemeral port range from 49153 through 65535 is always used for
            Docker versions before 1.6.0.

          The default reserved ports are 22 for SSH, the Docker ports 2375 and 2376, and the
          Amazon ECS container agent ports 51678-51680. Any host port that was previously
          specified in a running task is also reserved while the task is running (after a
          task stops, the host port is released). The current reserved ports are displayed in
          the ``remainingResources`` of  DescribeContainerInstances output. A container
          instance can have up to 100 reserved ports at a time, including the default
          reserved ports. Automatically assigned ports don't count toward the 100 reserved
          ports limit.

        - **protocol** *(string) --*

          The protocol used for the port mapping. Valid values are ``tcp`` and ``udp`` . The
          default is ``tcp`` .

    - **essential** *(boolean) --*

      If the ``essential`` parameter of a container is marked as ``true`` , and that
      container fails or stops for any reason, all other containers that are part of the task
      are stopped. If the ``essential`` parameter of a container is marked as ``false`` ,
      then its failure does not affect the rest of the containers in a task. If this
      parameter is omitted, a container is assumed to be essential.

      All tasks must have at least one essential container. If you have an application that
      is composed of multiple containers, you should group containers that are used for a
      common purpose into components, and separate the different components into multiple
      task definitions. For more information, see `Application Architecture
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/application_architecture.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

    - **entryPoint** *(list) --*

      .. warning::

        Early versions of the Amazon ECS container agent do not properly handle
        ``entryPoint`` parameters. If you have problems using ``entryPoint`` , update your
        container agent or enter your commands and arguments as ``command`` array items
        instead.

      The entry point that is passed to the container. This parameter maps to ``Entrypoint``
      in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
      ``--entrypoint`` option to `docker run
      <https://docs.docker.com/engine/reference/run/>`__ . For more information, see
      `https\\://docs.docker.com/engine/reference/builder/#entrypoint
      <https://docs.docker.com/engine/reference/builder/#entrypoint>`__ .

      - *(string) --*

    - **command** *(list) --*

      The command that is passed to the container. This parameter maps to ``Cmd`` in the
      `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``COMMAND``
      parameter to `docker run <https://docs.docker.com/engine/reference/run/>`__ . For more
      information, see `https\\://docs.docker.com/engine/reference/builder/#cmd
      <https://docs.docker.com/engine/reference/builder/#cmd>`__ . If there are multiple
      arguments, each argument should be a separated string in the array.

      - *(string) --*

    - **environment** *(list) --*

      The environment variables to pass to a container. This parameter maps to ``Env`` in the
      `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--env``
      option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

      .. warning::

        We do not recommend using plaintext environment variables for sensitive information,
        such as credential data.

      - *(dict) --*

        A key-value pair object.

        - **name** *(string) --*

          The name of the key-value pair. For environment variables, this is the name of the
          environment variable.

        - **value** *(string) --*

          The value of the key-value pair. For environment variables, this is the value of
          the environment variable.

    - **mountPoints** *(list) --*

      The mount points for data volumes in your container.

      This parameter maps to ``Volumes`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--volume``
      option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

      Windows containers can mount whole directories on the same drive as
      ``$env:ProgramData`` . Windows containers cannot mount directories on a different
      drive, and mount point cannot be across drives.

      - *(dict) --*

        Details on a volume mount point that is used in a container definition.

        - **sourceVolume** *(string) --*

          The name of the volume to mount. Must be a volume name referenced in the ``name``
          parameter of task definition ``volume`` .

        - **containerPath** *(string) --*

          The path on the container to mount the host volume at.

        - **readOnly** *(boolean) --*

          If this value is ``true`` , the container has read-only access to the volume. If
          this value is ``false`` , then the container can write to the volume. The default
          value is ``false`` .

    - **volumesFrom** *(list) --*

      Data volumes to mount from another container. This parameter maps to ``VolumesFrom`` in
      the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
      ``--volumes-from`` option to `docker run
      <https://docs.docker.com/engine/reference/run/>`__ .

      - *(dict) --*

        Details on a data volume from another container in the same task definition.

        - **sourceContainer** *(string) --*

          The name of another container within the same task definition from which to mount
          volumes.

        - **readOnly** *(boolean) --*

          If this value is ``true`` , the container has read-only access to the volume. If
          this value is ``false`` , then the container can write to the volume. The default
          value is ``false`` .

    - **linuxParameters** *(dict) --*

      Linux-specific modifications that are applied to the container, such as Linux kernel
      capabilities. For more information see  KernelCapabilities .

      .. note::

        This parameter is not supported for Windows containers.

      - **capabilities** *(dict) --*

        The Linux capabilities for the container that are added to or dropped from the
        default configuration provided by Docker.

        .. note::

          If you are using tasks that use the Fargate launch type, ``capabilities`` is
          supported but the ``add`` parameter is not supported.

        - **add** *(list) --*

          The Linux capabilities for the container that have been added to the default
          configuration provided by Docker. This parameter maps to ``CapAdd`` in the `Create
          a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of
          the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
          ``--cap-add`` option to `docker run
          <https://docs.docker.com/engine/reference/run/>`__ .

          .. note::

            If you are using tasks that use the Fargate launch type, the ``add`` parameter is
            not supported.

          Valid values: ``"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" | "BLOCK_SUSPEND" | "CHOWN"
          | "DAC_OVERRIDE" | "DAC_READ_SEARCH" | "FOWNER" | "FSETID" | "IPC_LOCK" |
          "IPC_OWNER" | "KILL" | "LEASE" | "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" |
          "MKNOD" | "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" |
          "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT" |
          "SYS_CHROOT" | "SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" | "SYS_PTRACE" | "SYS_RAWIO"
          | "SYS_RESOURCE" | "SYS_TIME" | "SYS_TTY_CONFIG" | "SYSLOG" | "WAKE_ALARM"``

          - *(string) --*

        - **drop** *(list) --*

          The Linux capabilities for the container that have been removed from the default
          configuration provided by Docker. This parameter maps to ``CapDrop`` in the `Create
          a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of
          the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
          ``--cap-drop`` option to `docker run
          <https://docs.docker.com/engine/reference/run/>`__ .

          Valid values: ``"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" | "BLOCK_SUSPEND" | "CHOWN"
          | "DAC_OVERRIDE" | "DAC_READ_SEARCH" | "FOWNER" | "FSETID" | "IPC_LOCK" |
          "IPC_OWNER" | "KILL" | "LEASE" | "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" |
          "MKNOD" | "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" |
          "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT" |
          "SYS_CHROOT" | "SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" | "SYS_PTRACE" | "SYS_RAWIO"
          | "SYS_RESOURCE" | "SYS_TIME" | "SYS_TTY_CONFIG" | "SYSLOG" | "WAKE_ALARM"``

          - *(string) --*

      - **devices** *(list) --*

        Any host devices to expose to the container. This parameter maps to ``Devices`` in
        the `Create a container
        <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of
        the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
        ``--device`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__
        .

        .. note::

          If you are using tasks that use the Fargate launch type, the ``devices`` parameter
          is not supported.

        - *(dict) --*

          An object representing a container instance host device.

          - **hostPath** *(string) --*

            The path for the device on the host container instance.

          - **containerPath** *(string) --*

            The path inside the container at which to expose the host device.

          - **permissions** *(list) --*

            The explicit permissions to provide to the container for the device. By default,
            the container has permissions for ``read`` , ``write`` , and ``mknod`` for the
            device.

            - *(string) --*

      - **initProcessEnabled** *(boolean) --*

        Run an ``init`` process inside the container that forwards signals and reaps
        processes. This parameter maps to the ``--init`` option to `docker run
        <https://docs.docker.com/engine/reference/run/>`__ . This parameter requires version
        1.25 of the Docker Remote API or greater on your container instance. To check the
        Docker Remote API version on your container instance, log in to your container
        instance and run the following command: ``sudo docker version --format
        '{{.Server.APIVersion}}'``

      - **sharedMemorySize** *(integer) --*

        The value for the size (in MiB) of the ``/dev/shm`` volume. This parameter maps to
        the ``--shm-size`` option to `docker run
        <https://docs.docker.com/engine/reference/run/>`__ .

        .. note::

          If you are using tasks that use the Fargate launch type, the ``sharedMemorySize``
          parameter is not supported.

      - **tmpfs** *(list) --*

        The container path, mount options, and size (in MiB) of the tmpfs mount. This
        parameter maps to the ``--tmpfs`` option to `docker run
        <https://docs.docker.com/engine/reference/run/>`__ .

        .. note::

          If you are using tasks that use the Fargate launch type, the ``tmpfs`` parameter is
          not supported.

        - *(dict) --*

          The container path, mount options, and size of the tmpfs mount.

          - **containerPath** *(string) --*

            The absolute file path where the tmpfs volume is to be mounted.

          - **size** *(integer) --*

            The size (in MiB) of the tmpfs volume.

          - **mountOptions** *(list) --*

            The list of tmpfs volume mount options.

            Valid values: ``"defaults" | "ro" | "rw" | "suid" | "nosuid" | "dev" | "nodev" |
            "exec" | "noexec" | "sync" | "async" | "dirsync" | "remount" | "mand" | "nomand"
            | "atime" | "noatime" | "diratime" | "nodiratime" | "bind" | "rbind" |
            "unbindable" | "runbindable" | "private" | "rprivate" | "shared" | "rshared" |
            "slave" | "rslave" | "relatime" | "norelatime" | "strictatime" | "nostrictatime"
            | "mode" | "uid" | "gid" | "nr_inodes" | "nr_blocks" | "mpol"``

            - *(string) --*

      - **maxSwap** *(integer) --*

        The total amount of swap memory (in MiB) a container can use. This parameter will be
        translated to the ``--memory-swap`` option to `docker run
        <https://docs.docker.com/engine/reference/run/>`__ where the value would be the sum
        of the container memory plus the ``maxSwap`` value.

        If a ``maxSwap`` value of ``0`` is specified, the container will not use swap.
        Accepted values are ``0`` or any positive integer. If the ``maxSwap`` parameter is
        omitted, the container will use the swap configuration for the container instance it
        is running on. A ``maxSwap`` value must be set for the ``swappiness`` parameter to be
        used.

        .. note::

          If you are using tasks that use the Fargate launch type, the ``maxSwap`` parameter
          is not supported.

      - **swappiness** *(integer) --*

        This allows you to tune a container's memory swappiness behavior. A ``swappiness``
        value of ``0`` will cause swapping to not happen unless absolutely necessary. A
        ``swappiness`` value of ``100`` will cause pages to be swapped very aggressively.
        Accepted values are whole numbers between ``0`` and ``100`` . If the ``swappiness``
        parameter is not specified, a default value of ``60`` is used. If a value is not
        specified for ``maxSwap`` then this parameter is ignored. This parameter maps to the
        ``--memory-swappiness`` option to `docker run
        <https://docs.docker.com/engine/reference/run/>`__ .

        .. note::

          If you are using tasks that use the Fargate launch type, the ``swappiness``
          parameter is not supported.

    - **secrets** *(list) --*

      The secrets to pass to the container. For more information, see `Specifying Sensitive
      Data
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

      - *(dict) --*

        An object representing the secret to expose to your container. Secrets can be exposed
        to a container in the following ways:

        * To inject sensitive data into your containers as environment variables, use the
        ``secrets`` container definition parameter.

        * To reference sensitive information in the log configuration of a container, use the
        ``secretOptions`` container definition parameter.

        For more information, see `Specifying Sensitive Data
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html>`__
        in the *Amazon Elastic Container Service Developer Guide* .

        - **name** *(string) --*

          The name of the secret.

        - **valueFrom** *(string) --*

          The secret to expose to the container. The supported values are either the full ARN
          of the AWS Secrets Manager secret or the full ARN of the parameter in the AWS
          Systems Manager Parameter Store.

          .. note::

            If the AWS Systems Manager Parameter Store parameter exists in the same Region as
            the task you are launching, then you can use either the full ARN or name of the
            parameter. If the parameter exists in a different Region, then the full ARN must
            be specified.

    - **dependsOn** *(list) --*

      The dependencies defined for container startup and shutdown. A container can contain
      multiple dependencies. When a dependency is defined for container startup, for
      container shutdown it is reversed.

      For tasks using the EC2 launch type, the container instances require at least version
      1.26.0 of the container agent to enable container dependencies. However, we recommend
      using the latest container agent version. For information about checking your agent
      version and updating to the latest version, see `Updating the Amazon ECS Container
      Agent
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html>`__
      in the *Amazon Elastic Container Service Developer Guide* . If you are using an Amazon
      ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the
      ``ecs-init`` package. If your container instances are launched from version
      ``20190301`` or later, then they contain the required versions of the container agent
      and ``ecs-init`` . For more information, see `Amazon ECS-optimized Linux AMI
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

      For tasks using the Fargate launch type, the task or service requires platform version
      ``1.3.0`` or later.

      - *(dict) --*

        The dependencies defined for container startup and shutdown. A container can contain
        multiple dependencies. When a dependency is defined for container startup, for
        container shutdown it is reversed.

        Your Amazon ECS container instances require at least version 1.26.0 of the container
        agent to enable container dependencies. However, we recommend using the latest
        container agent version. For information about checking your agent version and
        updating to the latest version, see `Updating the Amazon ECS Container Agent
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html>`__
        in the *Amazon Elastic Container Service Developer Guide* . If you are using an
        Amazon ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the
        ``ecs-init`` package. If your container instances are launched from version
        ``20190301`` or later, then they contain the required versions of the container agent
        and ``ecs-init`` . For more information, see `Amazon ECS-optimized Linux AMI
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html>`__
        in the *Amazon Elastic Container Service Developer Guide* .

        .. note::

          If you are using tasks that use the Fargate launch type, container dependency
          parameters are not supported.

        - **containerName** *(string) --*

          The name of a container.

        - **condition** *(string) --*

          The dependency condition of the container. The following are the available
          conditions and their behavior:

          * ``START`` - This condition emulates the behavior of links and volumes today. It
          validates that a dependent container is started before permitting other containers
          to start.

          * ``COMPLETE`` - This condition validates that a dependent container runs to
          completion (exits) before permitting other containers to start. This can be useful
          for nonessential containers that run a script and then exit.

          * ``SUCCESS`` - This condition is the same as ``COMPLETE`` , but it also requires
          that the container exits with a ``zero`` status.

          * ``HEALTHY`` - This condition validates that the dependent container passes its
          Docker health check before permitting other containers to start. This requires that
          the dependent container has health checks configured. This condition is confirmed
          only at task startup.

    - **startTimeout** *(integer) --*

      Time duration (in seconds) to wait before giving up on resolving dependencies for a
      container. For example, you specify two containers in a task definition with containerA
      having a dependency on containerB reaching a ``COMPLETE`` , ``SUCCESS`` , or
      ``HEALTHY`` status. If a ``startTimeout`` value is specified for containerB and it does
      not reach the desired status within that time then containerA will give up and not
      start. This results in the task transitioning to a ``STOPPED`` state.

      For tasks using the EC2 launch type, the container instances require at least version
      1.26.0 of the container agent to enable a container start timeout value. However, we
      recommend using the latest container agent version. For information about checking your
      agent version and updating to the latest version, see `Updating the Amazon ECS
      Container Agent
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html>`__
      in the *Amazon Elastic Container Service Developer Guide* . If you are using an Amazon
      ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the
      ``ecs-init`` package. If your container instances are launched from version
      ``20190301`` or later, then they contain the required versions of the container agent
      and ``ecs-init`` . For more information, see `Amazon ECS-optimized Linux AMI
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

      For tasks using the Fargate launch type, the task or service requires platform version
      ``1.3.0`` or later.

    - **stopTimeout** *(integer) --*

      Time duration (in seconds) to wait before the container is forcefully killed if it
      doesn't exit normally on its own.

      For tasks using the Fargate launch type, the max ``stopTimeout`` value is 2 minutes and
      the task or service requires platform version ``1.3.0`` or later.

      For tasks using the EC2 launch type, the stop timeout value for the container takes
      precedence over the ``ECS_CONTAINER_STOP_TIMEOUT`` container agent configuration
      parameter, if used. Container instances require at least version 1.26.0 of the
      container agent to enable a container stop timeout value. However, we recommend using
      the latest container agent version. For information about checking your agent version
      and updating to the latest version, see `Updating the Amazon ECS Container Agent
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html>`__
      in the *Amazon Elastic Container Service Developer Guide* . If you are using an Amazon
      ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the
      ``ecs-init`` package. If your container instances are launched from version
      ``20190301`` or later, then they contain the required versions of the container agent
      and ``ecs-init`` . For more information, see `Amazon ECS-optimized Linux AMI
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

    - **hostname** *(string) --*

      The hostname to use for your container. This parameter maps to ``Hostname`` in the
      `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
      ``--hostname`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__
      .

      .. note::

        The ``hostname`` parameter is not supported if you are using the ``awsvpc`` network
        mode.

    - **user** *(string) --*

      The user name to use inside the container. This parameter maps to ``User`` in the
      `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--user``
      option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

      You can use the following formats. If specifying a UID or GID, you must specify it as a
      positive integer.

      * ``user``

      * ``user:group``

      * ``uid``

      * ``uid:gid``

      * ``user:gid``

      * ``uid:group``

      .. note::

        This parameter is not supported for Windows containers.

    - **workingDirectory** *(string) --*

      The working directory in which to run commands inside the container. This parameter
      maps to ``WorkingDir`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--workdir``
      option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

    - **disableNetworking** *(boolean) --*

      When this parameter is true, networking is disabled within the container. This
      parameter maps to ``NetworkDisabled`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ .

      .. note::

        This parameter is not supported for Windows containers.

    - **privileged** *(boolean) --*

      When this parameter is true, the container is given elevated privileges on the host
      container instance (similar to the ``root`` user). This parameter maps to
      ``Privileged`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
      ``--privileged`` option to `docker run
      <https://docs.docker.com/engine/reference/run/>`__ .

      .. note::

        This parameter is not supported for Windows containers or tasks using the Fargate
        launch type.

    - **readonlyRootFilesystem** *(boolean) --*

      When this parameter is true, the container is given read-only access to its root file
      system. This parameter maps to ``ReadonlyRootfs`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
      ``--read-only`` option to `docker run
      <https://docs.docker.com/engine/reference/run/>`__ .

      .. note::

        This parameter is not supported for Windows containers.

    - **dnsServers** *(list) --*

      A list of DNS servers that are presented to the container. This parameter maps to
      ``Dns`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--dns``
      option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

      .. note::

        This parameter is not supported for Windows containers.

      - *(string) --*

    - **dnsSearchDomains** *(list) --*

      A list of DNS search domains that are presented to the container. This parameter maps
      to ``DnsSearch`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
      ``--dns-search`` option to `docker run
      <https://docs.docker.com/engine/reference/run/>`__ .

      .. note::

        This parameter is not supported for Windows containers.

      - *(string) --*

    - **extraHosts** *(list) --*

      A list of hostnames and IP address mappings to append to the ``/etc/hosts`` file on the
      container. This parameter maps to ``ExtraHosts`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
      ``--add-host`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__
      .

      .. note::

        This parameter is not supported for Windows containers or tasks that use the
        ``awsvpc`` network mode.

      - *(dict) --*

        Hostnames and IP address entries that are added to the ``/etc/hosts`` file of a
        container via the ``extraHosts`` parameter of its  ContainerDefinition .

        - **hostname** *(string) --*

          The hostname to use in the ``/etc/hosts`` entry.

        - **ipAddress** *(string) --*

          The IP address to use in the ``/etc/hosts`` entry.

    - **dockerSecurityOptions** *(list) --*

      A list of strings to provide custom labels for SELinux and AppArmor multi-level
      security systems. This field is not valid for containers in tasks using the Fargate
      launch type.

      This parameter maps to ``SecurityOpt`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
      ``--security-opt`` option to `docker run
      <https://docs.docker.com/engine/reference/run/>`__ .

      .. note::

        The Amazon ECS container agent running on a container instance must register with the
        ``ECS_SELINUX_CAPABLE=true`` or ``ECS_APPARMOR_CAPABLE=true`` environment variables
        before containers placed on that instance can use these security options. For more
        information, see `Amazon ECS Container Agent Configuration
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html>`__
        in the *Amazon Elastic Container Service Developer Guide* .

      .. note::

        This parameter is not supported for Windows containers.

      - *(string) --*

    - **interactive** *(boolean) --*

      When this parameter is ``true`` , this allows you to deploy containerized applications
      that require ``stdin`` or a ``tty`` to be allocated. This parameter maps to
      ``OpenStdin`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
      ``--interactive`` option to `docker run
      <https://docs.docker.com/engine/reference/run/>`__ .

    - **pseudoTerminal** *(boolean) --*

      When this parameter is ``true`` , a TTY is allocated. This parameter maps to ``Tty`` in
      the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--tty``
      option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

    - **dockerLabels** *(dict) --*

      A key/value map of labels to add to the container. This parameter maps to ``Labels`` in
      the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--label``
      option to `docker run <https://docs.docker.com/engine/reference/run/>`__ . This
      parameter requires version 1.18 of the Docker Remote API or greater on your container
      instance. To check the Docker Remote API version on your container instance, log in to
      your container instance and run the following command: ``sudo docker version --format
      '{{.Server.APIVersion}}'``

      - *(string) --*

        - *(string) --*

    - **ulimits** *(list) --*

      A list of ``ulimits`` to set in the container. This parameter maps to ``Ulimits`` in
      the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--ulimit``
      option to `docker run <https://docs.docker.com/engine/reference/run/>`__ . Valid naming
      values are displayed in the  Ulimit data type. This parameter requires version 1.18 of
      the Docker Remote API or greater on your container instance. To check the Docker Remote
      API version on your container instance, log in to your container instance and run the
      following command: ``sudo docker version --format '{{.Server.APIVersion}}'``

      .. note::

        This parameter is not supported for Windows containers.

      - *(dict) --*

        The ``ulimit`` settings to pass to the container.

        - **name** *(string) --*

          The ``type`` of the ``ulimit`` .

        - **softLimit** *(integer) --*

          The soft limit for the ulimit type.

        - **hardLimit** *(integer) --*

          The hard limit for the ulimit type.

    - **logConfiguration** *(dict) --*

      The log configuration specification for the container.

      This parameter maps to ``LogConfig`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
      ``--log-driver`` option to `docker run
      <https://docs.docker.com/engine/reference/run/>`__ . By default, containers use the
      same logging driver that the Docker daemon uses. However the container may use a
      different logging driver than the Docker daemon by specifying a log driver with this
      parameter in the container definition. To use a different logging driver for a
      container, the log system must be configured properly on the container instance (or on
      a different log server for remote logging options). For more information on the options
      for different supported log drivers, see `Configure logging drivers
      <https://docs.docker.com/engine/admin/logging/overview/>`__ in the Docker documentation.

      .. note::

        Amazon ECS currently supports a subset of the logging drivers available to the Docker
        daemon (shown in the  LogConfiguration data type). Additional log drivers may be
        available in future releases of the Amazon ECS container agent.

      This parameter requires version 1.18 of the Docker Remote API or greater on your
      container instance. To check the Docker Remote API version on your container instance,
      log in to your container instance and run the following command: ``sudo docker version
      --format '{{.Server.APIVersion}}'``

      .. note::

        The Amazon ECS container agent running on a container instance must register the
        logging drivers available on that instance with the ``ECS_AVAILABLE_LOGGING_DRIVERS``
        environment variable before containers placed on that instance can use these log
        configuration options. For more information, see `Amazon ECS Container Agent
        Configuration
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html>`__
        in the *Amazon Elastic Container Service Developer Guide* .

      - **logDriver** *(string) --*

        The log driver to use for the container. The valid values listed for this parameter
        are log drivers that the Amazon ECS container agent can communicate with by default.

        For tasks using the Fargate launch type, the supported log drivers are ``awslogs``
        and ``splunk`` .

        For tasks using the EC2 launch type, the supported log drivers are ``awslogs`` ,
        ``fluentd`` , ``gelf`` , ``json-file`` , ``journald`` , ``logentries`` , ``syslog`` ,
        and ``splunk`` .

        For more information about using the ``awslogs`` log driver, see `Using the awslogs
        Log Driver
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_awslogs.html>`__
        in the *Amazon Elastic Container Service Developer Guide* .

        .. note::

          If you have a custom driver that is not listed above that you would like to work
          with the Amazon ECS container agent, you can fork the Amazon ECS container agent
          project that is `available on GitHub <https://github.com/aws/amazon-ecs-agent>`__
          and customize it to work with that driver. We encourage you to submit pull requests
          for changes that you would like to have included. However, Amazon Web Services does
          not currently support running modified copies of this software.

        This parameter requires version 1.18 of the Docker Remote API or greater on your
        container instance. To check the Docker Remote API version on your container
        instance, log in to your container instance and run the following command: ``sudo
        docker version --format '{{.Server.APIVersion}}'``

      - **options** *(dict) --*

        The configuration options to send to the log driver. This parameter requires version
        1.19 of the Docker Remote API or greater on your container instance. To check the
        Docker Remote API version on your container instance, log in to your container
        instance and run the following command: ``sudo docker version --format
        '{{.Server.APIVersion}}'``

        - *(string) --*

          - *(string) --*

      - **secretOptions** *(list) --*

        The secrets to pass to the log configuration. For more information, see `Specifying
        Sensitive Data
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html>`__
        in the *Amazon Elastic Container Service Developer Guide* .

        - *(dict) --*

          An object representing the secret to expose to your container. Secrets can be
          exposed to a container in the following ways:

          * To inject sensitive data into your containers as environment variables, use the
          ``secrets`` container definition parameter.

          * To reference sensitive information in the log configuration of a container, use
          the ``secretOptions`` container definition parameter.

          For more information, see `Specifying Sensitive Data
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

          - **name** *(string) --*

            The name of the secret.

          - **valueFrom** *(string) --*

            The secret to expose to the container. The supported values are either the full
            ARN of the AWS Secrets Manager secret or the full ARN of the parameter in the AWS
            Systems Manager Parameter Store.

            .. note::

              If the AWS Systems Manager Parameter Store parameter exists in the same Region
              as the task you are launching, then you can use either the full ARN or name of
              the parameter. If the parameter exists in a different Region, then the full ARN
              must be specified.

    - **healthCheck** *(dict) --*

      The health check command and associated configuration parameters for the container.
      This parameter maps to ``HealthCheck`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
      ``HEALTHCHECK`` parameter of `docker run
      <https://docs.docker.com/engine/reference/run/>`__ .

      - **command** *(list) --*

        A string array representing the command that the container runs to determine if it is
        healthy. The string array must start with ``CMD`` to execute the command arguments
        directly, or ``CMD-SHELL`` to run the command with the container's default shell. For
        example:

         ``[ "CMD-SHELL", "curl -f http://localhost/ || exit 1" ]``

        An exit code of 0 indicates success, and non-zero exit code indicates failure. For
        more information, see ``HealthCheck`` in the `Create a container
        <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of
        the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ .

        - *(string) --*

      - **interval** *(integer) --*

        The time period in seconds between each health check execution. You may specify
        between 5 and 300 seconds. The default value is 30 seconds.

      - **timeout** *(integer) --*

        The time period in seconds to wait for a health check to succeed before it is
        considered a failure. You may specify between 2 and 60 seconds. The default value is
        5.

      - **retries** *(integer) --*

        The number of times to retry a failed health check before the container is considered
        unhealthy. You may specify between 1 and 10 retries. The default value is 3.

      - **startPeriod** *(integer) --*

        The optional grace period within which to provide containers time to bootstrap before
        failed health checks count towards the maximum number of retries. You may specify
        between 0 and 300 seconds. The ``startPeriod`` is disabled by default.

        .. note::

          If a health check succeeds within the ``startPeriod`` , then the container is
          considered healthy and any subsequent failures count toward the maximum number of
          retries.

    - **systemControls** *(list) --*

      A list of namespaced kernel parameters to set in the container. This parameter maps to
      ``Sysctls`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--sysctl``
      option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

      .. note::

        It is not recommended that you specify network-related ``systemControls`` parameters
        for multiple containers in a single task that also uses either the ``awsvpc`` or
        ``host`` network modes. For tasks that use the ``awsvpc`` network mode, the container
        that is started last determines which ``systemControls`` parameters take effect. For
        tasks that use the ``host`` network mode, it changes the container instance's
        namespaced kernel parameters as well as the containers.

      - *(dict) --*

        A list of namespaced kernel parameters to set in the container. This parameter maps
        to ``Sysctls`` in the `Create a container
        <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of
        the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
        ``--sysctl`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__
        .

        It is not recommended that you specify network-related ``systemControls`` parameters
        for multiple containers in a single task that also uses either the ``awsvpc`` or
        ``host`` network mode for the following reasons:

        * For tasks that use the ``awsvpc`` network mode, if you set ``systemControls`` for
        any container, it applies to all containers in the task. If you set different
        ``systemControls`` for multiple containers in a single task, the container that is
        started last determines which ``systemControls`` take effect.

        * For tasks that use the ``host`` network mode, the ``systemControls`` parameter
        applies to the container instance's kernel parameter as well as that of all
        containers of any tasks running on that container instance.

        - **namespace** *(string) --*

          The namespaced kernel parameter for which to set a ``value`` .

        - **value** *(string) --*

          The value for the namespaced kernel parameter specified in ``namespace`` .

    - **resourceRequirements** *(list) --*

      The type and amount of a resource to assign to a container. The only supported resource
      is a GPU.

      - *(dict) --*

        The type and amount of a resource to assign to a container. The supported resource
        types are GPUs and Elastic Inference accelerators. For more information, see `Working
        with GPUs on Amazon ECS
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-gpu.html>`__ or
        `Working with Amazon Elastic Inference on Amazon ECS
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in the
        *Amazon Elastic Container Service Developer Guide*

        - **value** *(string) --*

          The value for the specified resource type.

          If the ``GPU`` type is used, the value is the number of physical ``GPUs`` the
          Amazon ECS container agent will reserve for the container. The number of GPUs
          reserved for all containers in a task should not exceed the number of available
          GPUs on the container instance the task is launched on.

          If the ``InferenceAccelerator`` type is used, the ``value`` should match the
          ``deviceName`` for an  InferenceAccelerator specified in a task definition.

        - **type** *(string) --*

          The type of resource to assign to a container. The supported values are ``GPU`` or
          ``InferenceAccelerator`` .

    - **firelensConfiguration** *(dict) --*

      The FireLens configuration for the container. This is used to specify and configure a
      log router for container logs. For more information, see `Custom Log Routing
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html>`__ in
      the *Amazon Elastic Container Service Developer Guide* .

      - **type** *(string) --*

        The log router to use. The valid values are ``fluentd`` or ``fluentbit`` .

      - **options** *(dict) --*

        The options to use when configuring the log router. This field is optional and can be
        used to add additional metadata, such as the task, task definition, cluster, and
        container instance details to the log event. If specified, the syntax to use is
        ``"options":{"enable-ecs-log-metadata":"true|false"}`` .

        - *(string) --*

          - *(string) --*
    """


_ClientRegisterTaskDefinitionResponsetaskDefinitioninferenceAcceleratorsTypeDef = TypedDict(
    "_ClientRegisterTaskDefinitionResponsetaskDefinitioninferenceAcceleratorsTypeDef",
    {"deviceName": str, "deviceType": str},
    total=False,
)


class ClientRegisterTaskDefinitionResponsetaskDefinitioninferenceAcceleratorsTypeDef(
    _ClientRegisterTaskDefinitionResponsetaskDefinitioninferenceAcceleratorsTypeDef
):
    """
    Type definition for `ClientRegisterTaskDefinitionResponsetaskDefinition` `inferenceAccelerators`

    Details on a Elastic Inference accelerator. For more information, see `Working with
    Amazon Elastic Inference on Amazon ECS
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in the
    *Amazon Elastic Container Service Developer Guide* .

    - **deviceName** *(string) --*

      The Elastic Inference accelerator device name. The ``deviceName`` must also be
      referenced in a container definition as a  ResourceRequirement .

    - **deviceType** *(string) --*

      The Elastic Inference accelerator type to use.
    """


_ClientRegisterTaskDefinitionResponsetaskDefinitionplacementConstraintsTypeDef = TypedDict(
    "_ClientRegisterTaskDefinitionResponsetaskDefinitionplacementConstraintsTypeDef",
    {"type": str, "expression": str},
    total=False,
)


class ClientRegisterTaskDefinitionResponsetaskDefinitionplacementConstraintsTypeDef(
    _ClientRegisterTaskDefinitionResponsetaskDefinitionplacementConstraintsTypeDef
):
    """
    Type definition for `ClientRegisterTaskDefinitionResponsetaskDefinition` `placementConstraints`

    An object representing a constraint on task placement in the task definition. For more
    information, see `Task Placement Constraints
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html>`__
    in the *Amazon Elastic Container Service Developer Guide* .

    .. note::

      If you are using the Fargate launch type, task placement constraints are not supported.

    - **type** *(string) --*

      The type of constraint. The ``MemberOf`` constraint restricts selection to be from a
      group of valid candidates.

    - **expression** *(string) --*

      A cluster query language expression to apply to the constraint. For more information,
      see `Cluster Query Language
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .
    """


_ClientRegisterTaskDefinitionResponsetaskDefinitionproxyConfigurationpropertiesTypeDef = TypedDict(
    "_ClientRegisterTaskDefinitionResponsetaskDefinitionproxyConfigurationpropertiesTypeDef",
    {"name": str, "value": str},
    total=False,
)


class ClientRegisterTaskDefinitionResponsetaskDefinitionproxyConfigurationpropertiesTypeDef(
    _ClientRegisterTaskDefinitionResponsetaskDefinitionproxyConfigurationpropertiesTypeDef
):
    """
    Type definition for `ClientRegisterTaskDefinitionResponsetaskDefinitionproxyConfiguration` `properties`

    A key-value pair object.

    - **name** *(string) --*

      The name of the key-value pair. For environment variables, this is the name of the
      environment variable.

    - **value** *(string) --*

      The value of the key-value pair. For environment variables, this is the value of the
      environment variable.
    """


_ClientRegisterTaskDefinitionResponsetaskDefinitionproxyConfigurationTypeDef = TypedDict(
    "_ClientRegisterTaskDefinitionResponsetaskDefinitionproxyConfigurationTypeDef",
    {
        "type": str,
        "containerName": str,
        "properties": List[
            ClientRegisterTaskDefinitionResponsetaskDefinitionproxyConfigurationpropertiesTypeDef
        ],
    },
    total=False,
)


class ClientRegisterTaskDefinitionResponsetaskDefinitionproxyConfigurationTypeDef(
    _ClientRegisterTaskDefinitionResponsetaskDefinitionproxyConfigurationTypeDef
):
    """
    Type definition for `ClientRegisterTaskDefinitionResponsetaskDefinition` `proxyConfiguration`

    The configuration details for the App Mesh proxy.

    Your Amazon ECS container instances require at least version 1.26.0 of the container agent
    and at least version 1.26.0-1 of the ``ecs-init`` package to enable a proxy configuration.
    If your container instances are launched from the Amazon ECS-optimized AMI version
    ``20190301`` or later, then they contain the required versions of the container agent and
    ``ecs-init`` . For more information, see `Amazon ECS-optimized Linux AMI
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html>`__ in
    the *Amazon Elastic Container Service Developer Guide* .

    - **type** *(string) --*

      The proxy type. The only supported value is ``APPMESH`` .

    - **containerName** *(string) --*

      The name of the container that will serve as the App Mesh proxy.

    - **properties** *(list) --*

      The set of network configuration parameters to provide the Container Network Interface
      (CNI) plugin, specified as key-value pairs.

      * ``IgnoredUID`` - (Required) The user ID (UID) of the proxy container as defined by the
      ``user`` parameter in a container definition. This is used to ensure the proxy ignores
      its own traffic. If ``IgnoredGID`` is specified, this field can be empty.

      * ``IgnoredGID`` - (Required) The group ID (GID) of the proxy container as defined by the
      ``user`` parameter in a container definition. This is used to ensure the proxy ignores
      its own traffic. If ``IgnoredUID`` is specified, this field can be empty.

      * ``AppPorts`` - (Required) The list of ports that the application uses. Network traffic
      to these ports is forwarded to the ``ProxyIngressPort`` and ``ProxyEgressPort`` .

      * ``ProxyIngressPort`` - (Required) Specifies the port that incoming traffic to the
      ``AppPorts`` is directed to.

      * ``ProxyEgressPort`` - (Required) Specifies the port that outgoing traffic from the
      ``AppPorts`` is directed to.

      * ``EgressIgnoredPorts`` - (Required) The egress traffic going to the specified ports is
      ignored and not redirected to the ``ProxyEgressPort`` . It can be an empty list.

      * ``EgressIgnoredIPs`` - (Required) The egress traffic going to the specified IP
      addresses is ignored and not redirected to the ``ProxyEgressPort`` . It can be an empty
      list.

      - *(dict) --*

        A key-value pair object.

        - **name** *(string) --*

          The name of the key-value pair. For environment variables, this is the name of the
          environment variable.

        - **value** *(string) --*

          The value of the key-value pair. For environment variables, this is the value of the
          environment variable.
    """


_ClientRegisterTaskDefinitionResponsetaskDefinitionrequiresAttributesTypeDef = TypedDict(
    "_ClientRegisterTaskDefinitionResponsetaskDefinitionrequiresAttributesTypeDef",
    {"name": str, "value": str, "targetType": str, "targetId": str},
    total=False,
)


class ClientRegisterTaskDefinitionResponsetaskDefinitionrequiresAttributesTypeDef(
    _ClientRegisterTaskDefinitionResponsetaskDefinitionrequiresAttributesTypeDef
):
    """
    Type definition for `ClientRegisterTaskDefinitionResponsetaskDefinition` `requiresAttributes`

    An attribute is a name-value pair associated with an Amazon ECS object. Attributes enable
    you to extend the Amazon ECS data model by adding custom metadata to your resources. For
    more information, see `Attributes
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html#attributes>`__
    in the *Amazon Elastic Container Service Developer Guide* .

    - **name** *(string) --*

      The name of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
      hyphens, underscores, and periods are allowed.

    - **value** *(string) --*

      The value of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
      hyphens, underscores, periods, at signs (@), forward slashes, colons, and spaces are
      allowed.

    - **targetType** *(string) --*

      The type of the target with which to attach the attribute. This parameter is required
      if you use the short form ID for a resource instead of the full ARN.

    - **targetId** *(string) --*

      The ID of the target. You can specify the short form ID for a resource or the full
      Amazon Resource Name (ARN).
    """


_ClientRegisterTaskDefinitionResponsetaskDefinitionvolumesdockerVolumeConfigurationTypeDef = TypedDict(
    "_ClientRegisterTaskDefinitionResponsetaskDefinitionvolumesdockerVolumeConfigurationTypeDef",
    {
        "scope": str,
        "autoprovision": bool,
        "driver": str,
        "driverOpts": Dict[str, str],
        "labels": Dict[str, str],
    },
    total=False,
)


class ClientRegisterTaskDefinitionResponsetaskDefinitionvolumesdockerVolumeConfigurationTypeDef(
    _ClientRegisterTaskDefinitionResponsetaskDefinitionvolumesdockerVolumeConfigurationTypeDef
):
    """
    Type definition for `ClientRegisterTaskDefinitionResponsetaskDefinitionvolumes` `dockerVolumeConfiguration`

    This parameter is specified when you are using Docker volumes. Docker volumes are only
    supported when you are using the EC2 launch type. Windows containers only support the
    use of the ``local`` driver. To use bind mounts, specify a ``host`` instead.

    - **scope** *(string) --*

      The scope for the Docker volume that determines its lifecycle. Docker volumes that
      are scoped to a ``task`` are automatically provisioned when the task starts and
      destroyed when the task stops. Docker volumes that are scoped as ``shared`` persist
      after the task stops.

    - **autoprovision** *(boolean) --*

      If this value is ``true`` , the Docker volume is created if it does not already exist.

      .. note::

        This field is only used if the ``scope`` is ``shared`` .

    - **driver** *(string) --*

      The Docker volume driver to use. The driver value must match the driver name provided
      by Docker because it is used for task placement. If the driver was installed using
      the Docker plugin CLI, use ``docker plugin ls`` to retrieve the driver name from your
      container instance. If the driver was installed using another method, use Docker
      plugin discovery to retrieve the driver name. For more information, see `Docker
      plugin discovery
      <https://docs.docker.com/engine/extend/plugin_api/#plugin-discovery>`__ . This
      parameter maps to ``Driver`` in the `Create a volume
      <https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
      ``xxdriver`` option to `docker volume create
      <https://docs.docker.com/engine/reference/commandline/volume_create/>`__ .

    - **driverOpts** *(dict) --*

      A map of Docker driver-specific options passed through. This parameter maps to
      ``DriverOpts`` in the `Create a volume
      <https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``xxopt``
      option to `docker volume create
      <https://docs.docker.com/engine/reference/commandline/volume_create/>`__ .

      - *(string) --*

        - *(string) --*

    - **labels** *(dict) --*

      Custom metadata to add to your Docker volume. This parameter maps to ``Labels`` in
      the `Create a volume
      <https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``xxlabel``
      option to `docker volume create
      <https://docs.docker.com/engine/reference/commandline/volume_create/>`__ .

      - *(string) --*

        - *(string) --*
    """


_ClientRegisterTaskDefinitionResponsetaskDefinitionvolumeshostTypeDef = TypedDict(
    "_ClientRegisterTaskDefinitionResponsetaskDefinitionvolumeshostTypeDef",
    {"sourcePath": str},
    total=False,
)


class ClientRegisterTaskDefinitionResponsetaskDefinitionvolumeshostTypeDef(
    _ClientRegisterTaskDefinitionResponsetaskDefinitionvolumeshostTypeDef
):
    """
    Type definition for `ClientRegisterTaskDefinitionResponsetaskDefinitionvolumes` `host`

    This parameter is specified when you are using bind mount host volumes. Bind mount host
    volumes are supported when you are using either the EC2 or Fargate launch types. The
    contents of the ``host`` parameter determine whether your bind mount host volume
    persists on the host container instance and where it is stored. If the ``host``
    parameter is empty, then the Docker daemon assigns a host path for your data volume.
    However, the data is not guaranteed to persist after the containers associated with it
    stop running.

    Windows containers can mount whole directories on the same drive as
    ``$env:ProgramData`` . Windows containers cannot mount directories on a different
    drive, and mount point cannot be across drives. For example, you can mount
    ``C:\\my\\path:C:\\my\\path`` and ``D:\\:D:\\`` , but not ``D:\\my\\path:C:\\my\\path``
    or ``D:\\:C:\\my\\path`` .

    - **sourcePath** *(string) --*

      When the ``host`` parameter is used, specify a ``sourcePath`` to declare the path on
      the host container instance that is presented to the container. If this parameter is
      empty, then the Docker daemon has assigned a host path for you. If the ``host``
      parameter contains a ``sourcePath`` file location, then the data volume persists at
      the specified location on the host container instance until you delete it manually.
      If the ``sourcePath`` value does not exist on the host container instance, the Docker
      daemon creates it. If the location does exist, the contents of the source path folder
      are exported.

      If you are using the Fargate launch type, the ``sourcePath`` parameter is not
      supported.
    """


_ClientRegisterTaskDefinitionResponsetaskDefinitionvolumesTypeDef = TypedDict(
    "_ClientRegisterTaskDefinitionResponsetaskDefinitionvolumesTypeDef",
    {
        "name": str,
        "host": ClientRegisterTaskDefinitionResponsetaskDefinitionvolumeshostTypeDef,
        "dockerVolumeConfiguration": ClientRegisterTaskDefinitionResponsetaskDefinitionvolumesdockerVolumeConfigurationTypeDef,
    },
    total=False,
)


class ClientRegisterTaskDefinitionResponsetaskDefinitionvolumesTypeDef(
    _ClientRegisterTaskDefinitionResponsetaskDefinitionvolumesTypeDef
):
    """
    Type definition for `ClientRegisterTaskDefinitionResponsetaskDefinition` `volumes`

    A data volume used in a task definition. For tasks that use a Docker volume, specify a
    ``DockerVolumeConfiguration`` . For tasks that use a bind mount host volume, specify a
    ``host`` and optional ``sourcePath`` . For more information, see `Using Data Volumes in
    Tasks
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_data_volumes.html>`__ .

    - **name** *(string) --*

      The name of the volume. Up to 255 letters (uppercase and lowercase), numbers, and
      hyphens are allowed. This name is referenced in the ``sourceVolume`` parameter of
      container definition ``mountPoints`` .

    - **host** *(dict) --*

      This parameter is specified when you are using bind mount host volumes. Bind mount host
      volumes are supported when you are using either the EC2 or Fargate launch types. The
      contents of the ``host`` parameter determine whether your bind mount host volume
      persists on the host container instance and where it is stored. If the ``host``
      parameter is empty, then the Docker daemon assigns a host path for your data volume.
      However, the data is not guaranteed to persist after the containers associated with it
      stop running.

      Windows containers can mount whole directories on the same drive as
      ``$env:ProgramData`` . Windows containers cannot mount directories on a different
      drive, and mount point cannot be across drives. For example, you can mount
      ``C:\\my\\path:C:\\my\\path`` and ``D:\\:D:\\`` , but not ``D:\\my\\path:C:\\my\\path``
      or ``D:\\:C:\\my\\path`` .

      - **sourcePath** *(string) --*

        When the ``host`` parameter is used, specify a ``sourcePath`` to declare the path on
        the host container instance that is presented to the container. If this parameter is
        empty, then the Docker daemon has assigned a host path for you. If the ``host``
        parameter contains a ``sourcePath`` file location, then the data volume persists at
        the specified location on the host container instance until you delete it manually.
        If the ``sourcePath`` value does not exist on the host container instance, the Docker
        daemon creates it. If the location does exist, the contents of the source path folder
        are exported.

        If you are using the Fargate launch type, the ``sourcePath`` parameter is not
        supported.

    - **dockerVolumeConfiguration** *(dict) --*

      This parameter is specified when you are using Docker volumes. Docker volumes are only
      supported when you are using the EC2 launch type. Windows containers only support the
      use of the ``local`` driver. To use bind mounts, specify a ``host`` instead.

      - **scope** *(string) --*

        The scope for the Docker volume that determines its lifecycle. Docker volumes that
        are scoped to a ``task`` are automatically provisioned when the task starts and
        destroyed when the task stops. Docker volumes that are scoped as ``shared`` persist
        after the task stops.

      - **autoprovision** *(boolean) --*

        If this value is ``true`` , the Docker volume is created if it does not already exist.

        .. note::

          This field is only used if the ``scope`` is ``shared`` .

      - **driver** *(string) --*

        The Docker volume driver to use. The driver value must match the driver name provided
        by Docker because it is used for task placement. If the driver was installed using
        the Docker plugin CLI, use ``docker plugin ls`` to retrieve the driver name from your
        container instance. If the driver was installed using another method, use Docker
        plugin discovery to retrieve the driver name. For more information, see `Docker
        plugin discovery
        <https://docs.docker.com/engine/extend/plugin_api/#plugin-discovery>`__ . This
        parameter maps to ``Driver`` in the `Create a volume
        <https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate>`__ section of the
        `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
        ``xxdriver`` option to `docker volume create
        <https://docs.docker.com/engine/reference/commandline/volume_create/>`__ .

      - **driverOpts** *(dict) --*

        A map of Docker driver-specific options passed through. This parameter maps to
        ``DriverOpts`` in the `Create a volume
        <https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate>`__ section of the
        `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``xxopt``
        option to `docker volume create
        <https://docs.docker.com/engine/reference/commandline/volume_create/>`__ .

        - *(string) --*

          - *(string) --*

      - **labels** *(dict) --*

        Custom metadata to add to your Docker volume. This parameter maps to ``Labels`` in
        the `Create a volume
        <https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate>`__ section of the
        `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``xxlabel``
        option to `docker volume create
        <https://docs.docker.com/engine/reference/commandline/volume_create/>`__ .

        - *(string) --*

          - *(string) --*
    """


_ClientRegisterTaskDefinitionResponsetaskDefinitionTypeDef = TypedDict(
    "_ClientRegisterTaskDefinitionResponsetaskDefinitionTypeDef",
    {
        "taskDefinitionArn": str,
        "containerDefinitions": List[
            ClientRegisterTaskDefinitionResponsetaskDefinitioncontainerDefinitionsTypeDef
        ],
        "family": str,
        "taskRoleArn": str,
        "executionRoleArn": str,
        "networkMode": str,
        "revision": int,
        "volumes": List[
            ClientRegisterTaskDefinitionResponsetaskDefinitionvolumesTypeDef
        ],
        "status": str,
        "requiresAttributes": List[
            ClientRegisterTaskDefinitionResponsetaskDefinitionrequiresAttributesTypeDef
        ],
        "placementConstraints": List[
            ClientRegisterTaskDefinitionResponsetaskDefinitionplacementConstraintsTypeDef
        ],
        "compatibilities": List[str],
        "requiresCompatibilities": List[str],
        "cpu": str,
        "memory": str,
        "inferenceAccelerators": List[
            ClientRegisterTaskDefinitionResponsetaskDefinitioninferenceAcceleratorsTypeDef
        ],
        "pidMode": str,
        "ipcMode": str,
        "proxyConfiguration": ClientRegisterTaskDefinitionResponsetaskDefinitionproxyConfigurationTypeDef,
    },
    total=False,
)


class ClientRegisterTaskDefinitionResponsetaskDefinitionTypeDef(
    _ClientRegisterTaskDefinitionResponsetaskDefinitionTypeDef
):
    """
    Type definition for `ClientRegisterTaskDefinitionResponse` `taskDefinition`

    The full description of the registered task definition.

    - **taskDefinitionArn** *(string) --*

      The full Amazon Resource Name (ARN) of the task definition.

    - **containerDefinitions** *(list) --*

      A list of container definitions in JSON format that describe the different containers that
      make up your task. For more information about container definition parameters and defaults,
      see `Amazon ECS Task Definitions
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_defintions.html>`__ in
      the *Amazon Elastic Container Service Developer Guide* .

      - *(dict) --*

        Container definitions are used in task definitions to describe the different containers
        that are launched as part of a task.

        - **name** *(string) --*

          The name of a container. If you are linking multiple containers together in a task
          definition, the ``name`` of one container can be entered in the ``links`` of another
          container to connect the containers. Up to 255 letters (uppercase and lowercase),
          numbers, and hyphens are allowed. This parameter maps to ``name`` in the `Create a
          container <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__
          section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and
          the ``--name`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__
          .

        - **image** *(string) --*

          The image used to start a container. This string is passed directly to the Docker
          daemon. Images in the Docker Hub registry are available by default. Other repositories
          are specified with either `` *repository-url* /*image* :*tag* `` or `` *repository-url*
          /*image* @*digest* `` . Up to 255 letters (uppercase and lowercase), numbers, hyphens,
          underscores, colons, periods, forward slashes, and number signs are allowed. This
          parameter maps to ``Image`` in the `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``IMAGE``
          parameter of `docker run <https://docs.docker.com/engine/reference/run/>`__ .

          * When a new task starts, the Amazon ECS container agent pulls the latest version of
          the specified image and tag for the container to use. However, subsequent updates to a
          repository image are not propagated to already running tasks.

          * Images in Amazon ECR repositories can be specified by either using the full
          ``registry/repository:tag`` or ``registry/repository@digest`` . For example,
          ``012345678910.dkr.ecr.<region-name>.amazonaws.com/<repository-name>:latest`` or
          ``012345678910.dkr.ecr.<region-name>.amazonaws.com/<repository-name>@sha256:94afd1f2e64d908bc90dbca0035a5b567EXAMPLE``
          .

          * Images in official repositories on Docker Hub use a single name (for example,
          ``ubuntu`` or ``mongo`` ).

          * Images in other repositories on Docker Hub are qualified with an organization name
          (for example, ``amazon/amazon-ecs-agent`` ).

          * Images in other online repositories are qualified further by a domain name (for
          example, ``quay.io/assemblyline/ubuntu`` ).

        - **repositoryCredentials** *(dict) --*

          The private repository authentication credentials to use.

          - **credentialsParameter** *(string) --*

            The Amazon Resource Name (ARN) of the secret containing the private repository
            credentials.

            .. note::

              When you are using the Amazon ECS API, AWS CLI, or AWS SDK, if the secret exists in
              the same Region as the task that you are launching then you can use either the full
              ARN or the name of the secret. When you are using the AWS Management Console, you
              must specify the full ARN of the secret.

        - **cpu** *(integer) --*

          The number of ``cpu`` units reserved for the container. This parameter maps to
          ``CpuShares`` in the `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
          ``--cpu-shares`` option to `docker run
          <https://docs.docker.com/engine/reference/run/>`__ .

          This field is optional for tasks using the Fargate launch type, and the only
          requirement is that the total amount of CPU reserved for all containers within a task
          be lower than the task-level ``cpu`` value.

          .. note::

            You can determine the number of CPU units that are available per EC2 instance type by
            multiplying the vCPUs listed for that instance type on the `Amazon EC2 Instances
            <http://aws.amazon.com/ec2/instance-types/>`__ detail page by 1,024.

          For example, if you run a single-container task on a single-core instance type with 512
          CPU units specified for that container, and that is the only task running on the
          container instance, that container could use the full 1,024 CPU unit share at any given
          time. However, if you launched another copy of the same task on that container
          instance, each task would be guaranteed a minimum of 512 CPU units when needed, and
          each container could float to higher CPU usage if the other container was not using it,
          but if both tasks were 100% active all of the time, they would be limited to 512 CPU
          units.

          Linux containers share unallocated CPU units with other containers on the container
          instance with the same ratio as their allocated amount. For example, if you run a
          single-container task on a single-core instance type with 512 CPU units specified for
          that container, and that is the only task running on the container instance, that
          container could use the full 1,024 CPU unit share at any given time. However, if you
          launched another copy of the same task on that container instance, each task would be
          guaranteed a minimum of 512 CPU units when needed, and each container could float to
          higher CPU usage if the other container was not using it, but if both tasks were 100%
          active all of the time, they would be limited to 512 CPU units.

          On Linux container instances, the Docker daemon on the container instance uses the CPU
          value to calculate the relative CPU share ratios for running containers. For more
          information, see `CPU share constraint
          <https://docs.docker.com/engine/reference/run/#cpu-share-constraint>`__ in the Docker
          documentation. The minimum valid CPU share value that the Linux kernel allows is 2.
          However, the CPU parameter is not required, and you can use CPU values below 2 in your
          container definitions. For CPU values below 2 (including null), the behavior varies
          based on your Amazon ECS container agent version:

          * **Agent versions less than or equal to 1.1.0:** Null and zero CPU values are passed
          to Docker as 0, which Docker then converts to 1,024 CPU shares. CPU values of 1 are
          passed to Docker as 1, which the Linux kernel converts to two CPU shares.

          * **Agent versions greater than or equal to 1.2.0:** Null, zero, and CPU values of 1
          are passed to Docker as 2.

          On Windows container instances, the CPU limit is enforced as an absolute limit, or a
          quota. Windows containers only have access to the specified amount of CPU that is
          described in the task definition.

        - **memory** *(integer) --*

          The amount (in MiB) of memory to present to the container. If your container attempts
          to exceed the memory specified here, the container is killed. The total amount of
          memory reserved for all containers within a task must be lower than the task ``memory``
          value, if one is specified. This parameter maps to ``Memory`` in the `Create a
          container <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__
          section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and
          the ``--memory`` option to `docker run
          <https://docs.docker.com/engine/reference/run/>`__ .

          If using the Fargate launch type, this parameter is optional.

          If using the EC2 launch type, you must specify either a task-level memory value or a
          container-level memory value. If you specify both a container-level ``memory`` and
          ``memoryReservation`` value, ``memory`` must be greater than ``memoryReservation`` . If
          you specify ``memoryReservation`` , then that value is subtracted from the available
          memory resources for the container instance on which the container is placed.
          Otherwise, the value of ``memory`` is used.

          The Docker daemon reserves a minimum of 4 MiB of memory for a container, so you should
          not specify fewer than 4 MiB of memory for your containers.

        - **memoryReservation** *(integer) --*

          The soft limit (in MiB) of memory to reserve for the container. When system memory is
          under heavy contention, Docker attempts to keep the container memory to this soft
          limit. However, your container can consume more memory when it needs to, up to either
          the hard limit specified with the ``memory`` parameter (if applicable), or all of the
          available memory on the container instance, whichever comes first. This parameter maps
          to ``MemoryReservation`` in the `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
          ``--memory-reservation`` option to `docker run
          <https://docs.docker.com/engine/reference/run/>`__ .

          If a task-level memory value is not specified, you must specify a non-zero integer for
          one or both of ``memory`` or ``memoryReservation`` in a container definition. If you
          specify both, ``memory`` must be greater than ``memoryReservation`` . If you specify
          ``memoryReservation`` , then that value is subtracted from the available memory
          resources for the container instance on which the container is placed. Otherwise, the
          value of ``memory`` is used.

          For example, if your container normally uses 128 MiB of memory, but occasionally bursts
          to 256 MiB of memory for short periods of time, you can set a ``memoryReservation`` of
          128 MiB, and a ``memory`` hard limit of 300 MiB. This configuration would allow the
          container to only reserve 128 MiB of memory from the remaining resources on the
          container instance, but also allow the container to consume more memory resources when
          needed.

          The Docker daemon reserves a minimum of 4 MiB of memory for a container, so you should
          not specify fewer than 4 MiB of memory for your containers.

        - **links** *(list) --*

          The ``links`` parameter allows containers to communicate with each other without the
          need for port mappings. This parameter is only supported if the network mode of a task
          definition is ``bridge`` . The ``name:internalName`` construct is analogous to
          ``name:alias`` in Docker links. Up to 255 letters (uppercase and lowercase), numbers,
          and hyphens are allowed. For more information about linking Docker containers, go to
          `Legacy container links <https://docs.docker.com/network/links/>`__ in the Docker
          documentation. This parameter maps to ``Links`` in the `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--link``
          option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

          .. note::

            This parameter is not supported for Windows containers.

          .. warning::

            Containers that are collocated on a single container instance may be able to
            communicate with each other without requiring links or host port mappings. Network
            isolation is achieved on the container instance using security groups and VPC
            settings.

          - *(string) --*

        - **portMappings** *(list) --*

          The list of port mappings for the container. Port mappings allow containers to access
          ports on the host container instance to send or receive traffic.

          For task definitions that use the ``awsvpc`` network mode, you should only specify the
          ``containerPort`` . The ``hostPort`` can be left blank or it must be the same value as
          the ``containerPort`` .

          Port mappings on Windows use the ``NetNAT`` gateway address rather than ``localhost`` .
          There is no loopback for port mappings on Windows, so you cannot access a container's
          mapped port from the host itself.

          This parameter maps to ``PortBindings`` in the `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--publish``
          option to `docker run <https://docs.docker.com/engine/reference/run/>`__ . If the
          network mode of a task definition is set to ``none`` , then you can't specify port
          mappings. If the network mode of a task definition is set to ``host`` , then host ports
          must either be undefined or they must match the container port in the port mapping.

          .. note::

            After a task reaches the ``RUNNING`` status, manual and automatic host and container
            port assignments are visible in the **Network Bindings** section of a container
            description for a selected task in the Amazon ECS console. The assignments are also
            visible in the ``networkBindings`` section  DescribeTasks responses.

          - *(dict) --*

            Port mappings allow containers to access ports on the host container instance to send
            or receive traffic. Port mappings are specified as part of the container definition.

            If you are using containers in a task with the ``awsvpc`` or ``host`` network mode,
            exposed ports should be specified using ``containerPort`` . The ``hostPort`` can be
            left blank or it must be the same value as the ``containerPort`` .

            After a task reaches the ``RUNNING`` status, manual and automatic host and container
            port assignments are visible in the ``networkBindings`` section of  DescribeTasks API
            responses.

            - **containerPort** *(integer) --*

              The port number on the container that is bound to the user-specified or
              automatically assigned host port.

              If you are using containers in a task with the ``awsvpc`` or ``host`` network mode,
              exposed ports should be specified using ``containerPort`` .

              If you are using containers in a task with the ``bridge`` network mode and you
              specify a container port and not a host port, your container automatically receives
              a host port in the ephemeral port range. For more information, see ``hostPort`` .
              Port mappings that are automatically assigned in this way do not count toward the
              100 reserved ports limit of a container instance.

              .. warning::

                You cannot expose the same container port for multiple protocols. An error will
                be returned if this is attempted.

            - **hostPort** *(integer) --*

              The port number on the container instance to reserve for your container.

              If you are using containers in a task with the ``awsvpc`` or ``host`` network mode,
              the ``hostPort`` can either be left blank or set to the same value as the
              ``containerPort`` .

              If you are using containers in a task with the ``bridge`` network mode, you can
              specify a non-reserved host port for your container port mapping, or you can omit
              the ``hostPort`` (or set it to ``0`` ) while specifying a ``containerPort`` and
              your container automatically receives a port in the ephemeral port range for your
              container instance operating system and Docker version.

              The default ephemeral port range for Docker version 1.6.0 and later is listed on
              the instance under ``/proc/sys/net/ipv4/ip_local_port_range`` . If this kernel
              parameter is unavailable, the default ephemeral port range from 49153 through 65535
              is used. Do not attempt to specify a host port in the ephemeral port range as these
              are reserved for automatic assignment. In general, ports below 32768 are outside of
              the ephemeral port range.

              .. note::

                The default ephemeral port range from 49153 through 65535 is always used for
                Docker versions before 1.6.0.

              The default reserved ports are 22 for SSH, the Docker ports 2375 and 2376, and the
              Amazon ECS container agent ports 51678-51680. Any host port that was previously
              specified in a running task is also reserved while the task is running (after a
              task stops, the host port is released). The current reserved ports are displayed in
              the ``remainingResources`` of  DescribeContainerInstances output. A container
              instance can have up to 100 reserved ports at a time, including the default
              reserved ports. Automatically assigned ports don't count toward the 100 reserved
              ports limit.

            - **protocol** *(string) --*

              The protocol used for the port mapping. Valid values are ``tcp`` and ``udp`` . The
              default is ``tcp`` .

        - **essential** *(boolean) --*

          If the ``essential`` parameter of a container is marked as ``true`` , and that
          container fails or stops for any reason, all other containers that are part of the task
          are stopped. If the ``essential`` parameter of a container is marked as ``false`` ,
          then its failure does not affect the rest of the containers in a task. If this
          parameter is omitted, a container is assumed to be essential.

          All tasks must have at least one essential container. If you have an application that
          is composed of multiple containers, you should group containers that are used for a
          common purpose into components, and separate the different components into multiple
          task definitions. For more information, see `Application Architecture
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/application_architecture.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

        - **entryPoint** *(list) --*

          .. warning::

            Early versions of the Amazon ECS container agent do not properly handle
            ``entryPoint`` parameters. If you have problems using ``entryPoint`` , update your
            container agent or enter your commands and arguments as ``command`` array items
            instead.

          The entry point that is passed to the container. This parameter maps to ``Entrypoint``
          in the `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
          ``--entrypoint`` option to `docker run
          <https://docs.docker.com/engine/reference/run/>`__ . For more information, see
          `https\\://docs.docker.com/engine/reference/builder/#entrypoint
          <https://docs.docker.com/engine/reference/builder/#entrypoint>`__ .

          - *(string) --*

        - **command** *(list) --*

          The command that is passed to the container. This parameter maps to ``Cmd`` in the
          `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``COMMAND``
          parameter to `docker run <https://docs.docker.com/engine/reference/run/>`__ . For more
          information, see `https\\://docs.docker.com/engine/reference/builder/#cmd
          <https://docs.docker.com/engine/reference/builder/#cmd>`__ . If there are multiple
          arguments, each argument should be a separated string in the array.

          - *(string) --*

        - **environment** *(list) --*

          The environment variables to pass to a container. This parameter maps to ``Env`` in the
          `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--env``
          option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

          .. warning::

            We do not recommend using plaintext environment variables for sensitive information,
            such as credential data.

          - *(dict) --*

            A key-value pair object.

            - **name** *(string) --*

              The name of the key-value pair. For environment variables, this is the name of the
              environment variable.

            - **value** *(string) --*

              The value of the key-value pair. For environment variables, this is the value of
              the environment variable.

        - **mountPoints** *(list) --*

          The mount points for data volumes in your container.

          This parameter maps to ``Volumes`` in the `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--volume``
          option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

          Windows containers can mount whole directories on the same drive as
          ``$env:ProgramData`` . Windows containers cannot mount directories on a different
          drive, and mount point cannot be across drives.

          - *(dict) --*

            Details on a volume mount point that is used in a container definition.

            - **sourceVolume** *(string) --*

              The name of the volume to mount. Must be a volume name referenced in the ``name``
              parameter of task definition ``volume`` .

            - **containerPath** *(string) --*

              The path on the container to mount the host volume at.

            - **readOnly** *(boolean) --*

              If this value is ``true`` , the container has read-only access to the volume. If
              this value is ``false`` , then the container can write to the volume. The default
              value is ``false`` .

        - **volumesFrom** *(list) --*

          Data volumes to mount from another container. This parameter maps to ``VolumesFrom`` in
          the `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
          ``--volumes-from`` option to `docker run
          <https://docs.docker.com/engine/reference/run/>`__ .

          - *(dict) --*

            Details on a data volume from another container in the same task definition.

            - **sourceContainer** *(string) --*

              The name of another container within the same task definition from which to mount
              volumes.

            - **readOnly** *(boolean) --*

              If this value is ``true`` , the container has read-only access to the volume. If
              this value is ``false`` , then the container can write to the volume. The default
              value is ``false`` .

        - **linuxParameters** *(dict) --*

          Linux-specific modifications that are applied to the container, such as Linux kernel
          capabilities. For more information see  KernelCapabilities .

          .. note::

            This parameter is not supported for Windows containers.

          - **capabilities** *(dict) --*

            The Linux capabilities for the container that are added to or dropped from the
            default configuration provided by Docker.

            .. note::

              If you are using tasks that use the Fargate launch type, ``capabilities`` is
              supported but the ``add`` parameter is not supported.

            - **add** *(list) --*

              The Linux capabilities for the container that have been added to the default
              configuration provided by Docker. This parameter maps to ``CapAdd`` in the `Create
              a container
              <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of
              the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
              ``--cap-add`` option to `docker run
              <https://docs.docker.com/engine/reference/run/>`__ .

              .. note::

                If you are using tasks that use the Fargate launch type, the ``add`` parameter is
                not supported.

              Valid values: ``"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" | "BLOCK_SUSPEND" | "CHOWN"
              | "DAC_OVERRIDE" | "DAC_READ_SEARCH" | "FOWNER" | "FSETID" | "IPC_LOCK" |
              "IPC_OWNER" | "KILL" | "LEASE" | "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" |
              "MKNOD" | "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" |
              "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT" |
              "SYS_CHROOT" | "SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" | "SYS_PTRACE" | "SYS_RAWIO"
              | "SYS_RESOURCE" | "SYS_TIME" | "SYS_TTY_CONFIG" | "SYSLOG" | "WAKE_ALARM"``

              - *(string) --*

            - **drop** *(list) --*

              The Linux capabilities for the container that have been removed from the default
              configuration provided by Docker. This parameter maps to ``CapDrop`` in the `Create
              a container
              <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of
              the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
              ``--cap-drop`` option to `docker run
              <https://docs.docker.com/engine/reference/run/>`__ .

              Valid values: ``"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" | "BLOCK_SUSPEND" | "CHOWN"
              | "DAC_OVERRIDE" | "DAC_READ_SEARCH" | "FOWNER" | "FSETID" | "IPC_LOCK" |
              "IPC_OWNER" | "KILL" | "LEASE" | "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" |
              "MKNOD" | "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" |
              "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT" |
              "SYS_CHROOT" | "SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" | "SYS_PTRACE" | "SYS_RAWIO"
              | "SYS_RESOURCE" | "SYS_TIME" | "SYS_TTY_CONFIG" | "SYSLOG" | "WAKE_ALARM"``

              - *(string) --*

          - **devices** *(list) --*

            Any host devices to expose to the container. This parameter maps to ``Devices`` in
            the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of
            the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
            ``--device`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__
            .

            .. note::

              If you are using tasks that use the Fargate launch type, the ``devices`` parameter
              is not supported.

            - *(dict) --*

              An object representing a container instance host device.

              - **hostPath** *(string) --*

                The path for the device on the host container instance.

              - **containerPath** *(string) --*

                The path inside the container at which to expose the host device.

              - **permissions** *(list) --*

                The explicit permissions to provide to the container for the device. By default,
                the container has permissions for ``read`` , ``write`` , and ``mknod`` for the
                device.

                - *(string) --*

          - **initProcessEnabled** *(boolean) --*

            Run an ``init`` process inside the container that forwards signals and reaps
            processes. This parameter maps to the ``--init`` option to `docker run
            <https://docs.docker.com/engine/reference/run/>`__ . This parameter requires version
            1.25 of the Docker Remote API or greater on your container instance. To check the
            Docker Remote API version on your container instance, log in to your container
            instance and run the following command: ``sudo docker version --format
            '{{.Server.APIVersion}}'``

          - **sharedMemorySize** *(integer) --*

            The value for the size (in MiB) of the ``/dev/shm`` volume. This parameter maps to
            the ``--shm-size`` option to `docker run
            <https://docs.docker.com/engine/reference/run/>`__ .

            .. note::

              If you are using tasks that use the Fargate launch type, the ``sharedMemorySize``
              parameter is not supported.

          - **tmpfs** *(list) --*

            The container path, mount options, and size (in MiB) of the tmpfs mount. This
            parameter maps to the ``--tmpfs`` option to `docker run
            <https://docs.docker.com/engine/reference/run/>`__ .

            .. note::

              If you are using tasks that use the Fargate launch type, the ``tmpfs`` parameter is
              not supported.

            - *(dict) --*

              The container path, mount options, and size of the tmpfs mount.

              - **containerPath** *(string) --*

                The absolute file path where the tmpfs volume is to be mounted.

              - **size** *(integer) --*

                The size (in MiB) of the tmpfs volume.

              - **mountOptions** *(list) --*

                The list of tmpfs volume mount options.

                Valid values: ``"defaults" | "ro" | "rw" | "suid" | "nosuid" | "dev" | "nodev" |
                "exec" | "noexec" | "sync" | "async" | "dirsync" | "remount" | "mand" | "nomand"
                | "atime" | "noatime" | "diratime" | "nodiratime" | "bind" | "rbind" |
                "unbindable" | "runbindable" | "private" | "rprivate" | "shared" | "rshared" |
                "slave" | "rslave" | "relatime" | "norelatime" | "strictatime" | "nostrictatime"
                | "mode" | "uid" | "gid" | "nr_inodes" | "nr_blocks" | "mpol"``

                - *(string) --*

          - **maxSwap** *(integer) --*

            The total amount of swap memory (in MiB) a container can use. This parameter will be
            translated to the ``--memory-swap`` option to `docker run
            <https://docs.docker.com/engine/reference/run/>`__ where the value would be the sum
            of the container memory plus the ``maxSwap`` value.

            If a ``maxSwap`` value of ``0`` is specified, the container will not use swap.
            Accepted values are ``0`` or any positive integer. If the ``maxSwap`` parameter is
            omitted, the container will use the swap configuration for the container instance it
            is running on. A ``maxSwap`` value must be set for the ``swappiness`` parameter to be
            used.

            .. note::

              If you are using tasks that use the Fargate launch type, the ``maxSwap`` parameter
              is not supported.

          - **swappiness** *(integer) --*

            This allows you to tune a container's memory swappiness behavior. A ``swappiness``
            value of ``0`` will cause swapping to not happen unless absolutely necessary. A
            ``swappiness`` value of ``100`` will cause pages to be swapped very aggressively.
            Accepted values are whole numbers between ``0`` and ``100`` . If the ``swappiness``
            parameter is not specified, a default value of ``60`` is used. If a value is not
            specified for ``maxSwap`` then this parameter is ignored. This parameter maps to the
            ``--memory-swappiness`` option to `docker run
            <https://docs.docker.com/engine/reference/run/>`__ .

            .. note::

              If you are using tasks that use the Fargate launch type, the ``swappiness``
              parameter is not supported.

        - **secrets** *(list) --*

          The secrets to pass to the container. For more information, see `Specifying Sensitive
          Data
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

          - *(dict) --*

            An object representing the secret to expose to your container. Secrets can be exposed
            to a container in the following ways:

            * To inject sensitive data into your containers as environment variables, use the
            ``secrets`` container definition parameter.

            * To reference sensitive information in the log configuration of a container, use the
            ``secretOptions`` container definition parameter.

            For more information, see `Specifying Sensitive Data
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html>`__
            in the *Amazon Elastic Container Service Developer Guide* .

            - **name** *(string) --*

              The name of the secret.

            - **valueFrom** *(string) --*

              The secret to expose to the container. The supported values are either the full ARN
              of the AWS Secrets Manager secret or the full ARN of the parameter in the AWS
              Systems Manager Parameter Store.

              .. note::

                If the AWS Systems Manager Parameter Store parameter exists in the same Region as
                the task you are launching, then you can use either the full ARN or name of the
                parameter. If the parameter exists in a different Region, then the full ARN must
                be specified.

        - **dependsOn** *(list) --*

          The dependencies defined for container startup and shutdown. A container can contain
          multiple dependencies. When a dependency is defined for container startup, for
          container shutdown it is reversed.

          For tasks using the EC2 launch type, the container instances require at least version
          1.26.0 of the container agent to enable container dependencies. However, we recommend
          using the latest container agent version. For information about checking your agent
          version and updating to the latest version, see `Updating the Amazon ECS Container
          Agent
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html>`__
          in the *Amazon Elastic Container Service Developer Guide* . If you are using an Amazon
          ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the
          ``ecs-init`` package. If your container instances are launched from version
          ``20190301`` or later, then they contain the required versions of the container agent
          and ``ecs-init`` . For more information, see `Amazon ECS-optimized Linux AMI
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

          For tasks using the Fargate launch type, the task or service requires platform version
          ``1.3.0`` or later.

          - *(dict) --*

            The dependencies defined for container startup and shutdown. A container can contain
            multiple dependencies. When a dependency is defined for container startup, for
            container shutdown it is reversed.

            Your Amazon ECS container instances require at least version 1.26.0 of the container
            agent to enable container dependencies. However, we recommend using the latest
            container agent version. For information about checking your agent version and
            updating to the latest version, see `Updating the Amazon ECS Container Agent
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html>`__
            in the *Amazon Elastic Container Service Developer Guide* . If you are using an
            Amazon ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the
            ``ecs-init`` package. If your container instances are launched from version
            ``20190301`` or later, then they contain the required versions of the container agent
            and ``ecs-init`` . For more information, see `Amazon ECS-optimized Linux AMI
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html>`__
            in the *Amazon Elastic Container Service Developer Guide* .

            .. note::

              If you are using tasks that use the Fargate launch type, container dependency
              parameters are not supported.

            - **containerName** *(string) --*

              The name of a container.

            - **condition** *(string) --*

              The dependency condition of the container. The following are the available
              conditions and their behavior:

              * ``START`` - This condition emulates the behavior of links and volumes today. It
              validates that a dependent container is started before permitting other containers
              to start.

              * ``COMPLETE`` - This condition validates that a dependent container runs to
              completion (exits) before permitting other containers to start. This can be useful
              for nonessential containers that run a script and then exit.

              * ``SUCCESS`` - This condition is the same as ``COMPLETE`` , but it also requires
              that the container exits with a ``zero`` status.

              * ``HEALTHY`` - This condition validates that the dependent container passes its
              Docker health check before permitting other containers to start. This requires that
              the dependent container has health checks configured. This condition is confirmed
              only at task startup.

        - **startTimeout** *(integer) --*

          Time duration (in seconds) to wait before giving up on resolving dependencies for a
          container. For example, you specify two containers in a task definition with containerA
          having a dependency on containerB reaching a ``COMPLETE`` , ``SUCCESS`` , or
          ``HEALTHY`` status. If a ``startTimeout`` value is specified for containerB and it does
          not reach the desired status within that time then containerA will give up and not
          start. This results in the task transitioning to a ``STOPPED`` state.

          For tasks using the EC2 launch type, the container instances require at least version
          1.26.0 of the container agent to enable a container start timeout value. However, we
          recommend using the latest container agent version. For information about checking your
          agent version and updating to the latest version, see `Updating the Amazon ECS
          Container Agent
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html>`__
          in the *Amazon Elastic Container Service Developer Guide* . If you are using an Amazon
          ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the
          ``ecs-init`` package. If your container instances are launched from version
          ``20190301`` or later, then they contain the required versions of the container agent
          and ``ecs-init`` . For more information, see `Amazon ECS-optimized Linux AMI
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

          For tasks using the Fargate launch type, the task or service requires platform version
          ``1.3.0`` or later.

        - **stopTimeout** *(integer) --*

          Time duration (in seconds) to wait before the container is forcefully killed if it
          doesn't exit normally on its own.

          For tasks using the Fargate launch type, the max ``stopTimeout`` value is 2 minutes and
          the task or service requires platform version ``1.3.0`` or later.

          For tasks using the EC2 launch type, the stop timeout value for the container takes
          precedence over the ``ECS_CONTAINER_STOP_TIMEOUT`` container agent configuration
          parameter, if used. Container instances require at least version 1.26.0 of the
          container agent to enable a container stop timeout value. However, we recommend using
          the latest container agent version. For information about checking your agent version
          and updating to the latest version, see `Updating the Amazon ECS Container Agent
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html>`__
          in the *Amazon Elastic Container Service Developer Guide* . If you are using an Amazon
          ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the
          ``ecs-init`` package. If your container instances are launched from version
          ``20190301`` or later, then they contain the required versions of the container agent
          and ``ecs-init`` . For more information, see `Amazon ECS-optimized Linux AMI
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

        - **hostname** *(string) --*

          The hostname to use for your container. This parameter maps to ``Hostname`` in the
          `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
          ``--hostname`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__
          .

          .. note::

            The ``hostname`` parameter is not supported if you are using the ``awsvpc`` network
            mode.

        - **user** *(string) --*

          The user name to use inside the container. This parameter maps to ``User`` in the
          `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--user``
          option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

          You can use the following formats. If specifying a UID or GID, you must specify it as a
          positive integer.

          * ``user``

          * ``user:group``

          * ``uid``

          * ``uid:gid``

          * ``user:gid``

          * ``uid:group``

          .. note::

            This parameter is not supported for Windows containers.

        - **workingDirectory** *(string) --*

          The working directory in which to run commands inside the container. This parameter
          maps to ``WorkingDir`` in the `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--workdir``
          option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

        - **disableNetworking** *(boolean) --*

          When this parameter is true, networking is disabled within the container. This
          parameter maps to ``NetworkDisabled`` in the `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ .

          .. note::

            This parameter is not supported for Windows containers.

        - **privileged** *(boolean) --*

          When this parameter is true, the container is given elevated privileges on the host
          container instance (similar to the ``root`` user). This parameter maps to
          ``Privileged`` in the `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
          ``--privileged`` option to `docker run
          <https://docs.docker.com/engine/reference/run/>`__ .

          .. note::

            This parameter is not supported for Windows containers or tasks using the Fargate
            launch type.

        - **readonlyRootFilesystem** *(boolean) --*

          When this parameter is true, the container is given read-only access to its root file
          system. This parameter maps to ``ReadonlyRootfs`` in the `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
          ``--read-only`` option to `docker run
          <https://docs.docker.com/engine/reference/run/>`__ .

          .. note::

            This parameter is not supported for Windows containers.

        - **dnsServers** *(list) --*

          A list of DNS servers that are presented to the container. This parameter maps to
          ``Dns`` in the `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--dns``
          option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

          .. note::

            This parameter is not supported for Windows containers.

          - *(string) --*

        - **dnsSearchDomains** *(list) --*

          A list of DNS search domains that are presented to the container. This parameter maps
          to ``DnsSearch`` in the `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
          ``--dns-search`` option to `docker run
          <https://docs.docker.com/engine/reference/run/>`__ .

          .. note::

            This parameter is not supported for Windows containers.

          - *(string) --*

        - **extraHosts** *(list) --*

          A list of hostnames and IP address mappings to append to the ``/etc/hosts`` file on the
          container. This parameter maps to ``ExtraHosts`` in the `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
          ``--add-host`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__
          .

          .. note::

            This parameter is not supported for Windows containers or tasks that use the
            ``awsvpc`` network mode.

          - *(dict) --*

            Hostnames and IP address entries that are added to the ``/etc/hosts`` file of a
            container via the ``extraHosts`` parameter of its  ContainerDefinition .

            - **hostname** *(string) --*

              The hostname to use in the ``/etc/hosts`` entry.

            - **ipAddress** *(string) --*

              The IP address to use in the ``/etc/hosts`` entry.

        - **dockerSecurityOptions** *(list) --*

          A list of strings to provide custom labels for SELinux and AppArmor multi-level
          security systems. This field is not valid for containers in tasks using the Fargate
          launch type.

          This parameter maps to ``SecurityOpt`` in the `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
          ``--security-opt`` option to `docker run
          <https://docs.docker.com/engine/reference/run/>`__ .

          .. note::

            The Amazon ECS container agent running on a container instance must register with the
            ``ECS_SELINUX_CAPABLE=true`` or ``ECS_APPARMOR_CAPABLE=true`` environment variables
            before containers placed on that instance can use these security options. For more
            information, see `Amazon ECS Container Agent Configuration
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html>`__
            in the *Amazon Elastic Container Service Developer Guide* .

          .. note::

            This parameter is not supported for Windows containers.

          - *(string) --*

        - **interactive** *(boolean) --*

          When this parameter is ``true`` , this allows you to deploy containerized applications
          that require ``stdin`` or a ``tty`` to be allocated. This parameter maps to
          ``OpenStdin`` in the `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
          ``--interactive`` option to `docker run
          <https://docs.docker.com/engine/reference/run/>`__ .

        - **pseudoTerminal** *(boolean) --*

          When this parameter is ``true`` , a TTY is allocated. This parameter maps to ``Tty`` in
          the `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--tty``
          option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

        - **dockerLabels** *(dict) --*

          A key/value map of labels to add to the container. This parameter maps to ``Labels`` in
          the `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--label``
          option to `docker run <https://docs.docker.com/engine/reference/run/>`__ . This
          parameter requires version 1.18 of the Docker Remote API or greater on your container
          instance. To check the Docker Remote API version on your container instance, log in to
          your container instance and run the following command: ``sudo docker version --format
          '{{.Server.APIVersion}}'``

          - *(string) --*

            - *(string) --*

        - **ulimits** *(list) --*

          A list of ``ulimits`` to set in the container. This parameter maps to ``Ulimits`` in
          the `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--ulimit``
          option to `docker run <https://docs.docker.com/engine/reference/run/>`__ . Valid naming
          values are displayed in the  Ulimit data type. This parameter requires version 1.18 of
          the Docker Remote API or greater on your container instance. To check the Docker Remote
          API version on your container instance, log in to your container instance and run the
          following command: ``sudo docker version --format '{{.Server.APIVersion}}'``

          .. note::

            This parameter is not supported for Windows containers.

          - *(dict) --*

            The ``ulimit`` settings to pass to the container.

            - **name** *(string) --*

              The ``type`` of the ``ulimit`` .

            - **softLimit** *(integer) --*

              The soft limit for the ulimit type.

            - **hardLimit** *(integer) --*

              The hard limit for the ulimit type.

        - **logConfiguration** *(dict) --*

          The log configuration specification for the container.

          This parameter maps to ``LogConfig`` in the `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
          ``--log-driver`` option to `docker run
          <https://docs.docker.com/engine/reference/run/>`__ . By default, containers use the
          same logging driver that the Docker daemon uses. However the container may use a
          different logging driver than the Docker daemon by specifying a log driver with this
          parameter in the container definition. To use a different logging driver for a
          container, the log system must be configured properly on the container instance (or on
          a different log server for remote logging options). For more information on the options
          for different supported log drivers, see `Configure logging drivers
          <https://docs.docker.com/engine/admin/logging/overview/>`__ in the Docker documentation.

          .. note::

            Amazon ECS currently supports a subset of the logging drivers available to the Docker
            daemon (shown in the  LogConfiguration data type). Additional log drivers may be
            available in future releases of the Amazon ECS container agent.

          This parameter requires version 1.18 of the Docker Remote API or greater on your
          container instance. To check the Docker Remote API version on your container instance,
          log in to your container instance and run the following command: ``sudo docker version
          --format '{{.Server.APIVersion}}'``

          .. note::

            The Amazon ECS container agent running on a container instance must register the
            logging drivers available on that instance with the ``ECS_AVAILABLE_LOGGING_DRIVERS``
            environment variable before containers placed on that instance can use these log
            configuration options. For more information, see `Amazon ECS Container Agent
            Configuration
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html>`__
            in the *Amazon Elastic Container Service Developer Guide* .

          - **logDriver** *(string) --*

            The log driver to use for the container. The valid values listed for this parameter
            are log drivers that the Amazon ECS container agent can communicate with by default.

            For tasks using the Fargate launch type, the supported log drivers are ``awslogs``
            and ``splunk`` .

            For tasks using the EC2 launch type, the supported log drivers are ``awslogs`` ,
            ``fluentd`` , ``gelf`` , ``json-file`` , ``journald`` , ``logentries`` , ``syslog`` ,
            and ``splunk`` .

            For more information about using the ``awslogs`` log driver, see `Using the awslogs
            Log Driver
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_awslogs.html>`__
            in the *Amazon Elastic Container Service Developer Guide* .

            .. note::

              If you have a custom driver that is not listed above that you would like to work
              with the Amazon ECS container agent, you can fork the Amazon ECS container agent
              project that is `available on GitHub <https://github.com/aws/amazon-ecs-agent>`__
              and customize it to work with that driver. We encourage you to submit pull requests
              for changes that you would like to have included. However, Amazon Web Services does
              not currently support running modified copies of this software.

            This parameter requires version 1.18 of the Docker Remote API or greater on your
            container instance. To check the Docker Remote API version on your container
            instance, log in to your container instance and run the following command: ``sudo
            docker version --format '{{.Server.APIVersion}}'``

          - **options** *(dict) --*

            The configuration options to send to the log driver. This parameter requires version
            1.19 of the Docker Remote API or greater on your container instance. To check the
            Docker Remote API version on your container instance, log in to your container
            instance and run the following command: ``sudo docker version --format
            '{{.Server.APIVersion}}'``

            - *(string) --*

              - *(string) --*

          - **secretOptions** *(list) --*

            The secrets to pass to the log configuration. For more information, see `Specifying
            Sensitive Data
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html>`__
            in the *Amazon Elastic Container Service Developer Guide* .

            - *(dict) --*

              An object representing the secret to expose to your container. Secrets can be
              exposed to a container in the following ways:

              * To inject sensitive data into your containers as environment variables, use the
              ``secrets`` container definition parameter.

              * To reference sensitive information in the log configuration of a container, use
              the ``secretOptions`` container definition parameter.

              For more information, see `Specifying Sensitive Data
              <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html>`__
              in the *Amazon Elastic Container Service Developer Guide* .

              - **name** *(string) --*

                The name of the secret.

              - **valueFrom** *(string) --*

                The secret to expose to the container. The supported values are either the full
                ARN of the AWS Secrets Manager secret or the full ARN of the parameter in the AWS
                Systems Manager Parameter Store.

                .. note::

                  If the AWS Systems Manager Parameter Store parameter exists in the same Region
                  as the task you are launching, then you can use either the full ARN or name of
                  the parameter. If the parameter exists in a different Region, then the full ARN
                  must be specified.

        - **healthCheck** *(dict) --*

          The health check command and associated configuration parameters for the container.
          This parameter maps to ``HealthCheck`` in the `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
          ``HEALTHCHECK`` parameter of `docker run
          <https://docs.docker.com/engine/reference/run/>`__ .

          - **command** *(list) --*

            A string array representing the command that the container runs to determine if it is
            healthy. The string array must start with ``CMD`` to execute the command arguments
            directly, or ``CMD-SHELL`` to run the command with the container's default shell. For
            example:

             ``[ "CMD-SHELL", "curl -f http://localhost/ || exit 1" ]``

            An exit code of 0 indicates success, and non-zero exit code indicates failure. For
            more information, see ``HealthCheck`` in the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of
            the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ .

            - *(string) --*

          - **interval** *(integer) --*

            The time period in seconds between each health check execution. You may specify
            between 5 and 300 seconds. The default value is 30 seconds.

          - **timeout** *(integer) --*

            The time period in seconds to wait for a health check to succeed before it is
            considered a failure. You may specify between 2 and 60 seconds. The default value is
            5.

          - **retries** *(integer) --*

            The number of times to retry a failed health check before the container is considered
            unhealthy. You may specify between 1 and 10 retries. The default value is 3.

          - **startPeriod** *(integer) --*

            The optional grace period within which to provide containers time to bootstrap before
            failed health checks count towards the maximum number of retries. You may specify
            between 0 and 300 seconds. The ``startPeriod`` is disabled by default.

            .. note::

              If a health check succeeds within the ``startPeriod`` , then the container is
              considered healthy and any subsequent failures count toward the maximum number of
              retries.

        - **systemControls** *(list) --*

          A list of namespaced kernel parameters to set in the container. This parameter maps to
          ``Sysctls`` in the `Create a container
          <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
          `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--sysctl``
          option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

          .. note::

            It is not recommended that you specify network-related ``systemControls`` parameters
            for multiple containers in a single task that also uses either the ``awsvpc`` or
            ``host`` network modes. For tasks that use the ``awsvpc`` network mode, the container
            that is started last determines which ``systemControls`` parameters take effect. For
            tasks that use the ``host`` network mode, it changes the container instance's
            namespaced kernel parameters as well as the containers.

          - *(dict) --*

            A list of namespaced kernel parameters to set in the container. This parameter maps
            to ``Sysctls`` in the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of
            the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
            ``--sysctl`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__
            .

            It is not recommended that you specify network-related ``systemControls`` parameters
            for multiple containers in a single task that also uses either the ``awsvpc`` or
            ``host`` network mode for the following reasons:

            * For tasks that use the ``awsvpc`` network mode, if you set ``systemControls`` for
            any container, it applies to all containers in the task. If you set different
            ``systemControls`` for multiple containers in a single task, the container that is
            started last determines which ``systemControls`` take effect.

            * For tasks that use the ``host`` network mode, the ``systemControls`` parameter
            applies to the container instance's kernel parameter as well as that of all
            containers of any tasks running on that container instance.

            - **namespace** *(string) --*

              The namespaced kernel parameter for which to set a ``value`` .

            - **value** *(string) --*

              The value for the namespaced kernel parameter specified in ``namespace`` .

        - **resourceRequirements** *(list) --*

          The type and amount of a resource to assign to a container. The only supported resource
          is a GPU.

          - *(dict) --*

            The type and amount of a resource to assign to a container. The supported resource
            types are GPUs and Elastic Inference accelerators. For more information, see `Working
            with GPUs on Amazon ECS
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-gpu.html>`__ or
            `Working with Amazon Elastic Inference on Amazon ECS
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in the
            *Amazon Elastic Container Service Developer Guide*

            - **value** *(string) --*

              The value for the specified resource type.

              If the ``GPU`` type is used, the value is the number of physical ``GPUs`` the
              Amazon ECS container agent will reserve for the container. The number of GPUs
              reserved for all containers in a task should not exceed the number of available
              GPUs on the container instance the task is launched on.

              If the ``InferenceAccelerator`` type is used, the ``value`` should match the
              ``deviceName`` for an  InferenceAccelerator specified in a task definition.

            - **type** *(string) --*

              The type of resource to assign to a container. The supported values are ``GPU`` or
              ``InferenceAccelerator`` .

        - **firelensConfiguration** *(dict) --*

          The FireLens configuration for the container. This is used to specify and configure a
          log router for container logs. For more information, see `Custom Log Routing
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html>`__ in
          the *Amazon Elastic Container Service Developer Guide* .

          - **type** *(string) --*

            The log router to use. The valid values are ``fluentd`` or ``fluentbit`` .

          - **options** *(dict) --*

            The options to use when configuring the log router. This field is optional and can be
            used to add additional metadata, such as the task, task definition, cluster, and
            container instance details to the log event. If specified, the syntax to use is
            ``"options":{"enable-ecs-log-metadata":"true|false"}`` .

            - *(string) --*

              - *(string) --*

    - **family** *(string) --*

      The name of a family that this task definition is registered to. A family groups multiple
      versions of a task definition. Amazon ECS gives the first task definition that you
      registered to a family a revision number of 1. Amazon ECS gives sequential revision numbers
      to each task definition that you add.

    - **taskRoleArn** *(string) --*

      The short name or full Amazon Resource Name (ARN) of the AWS Identity and Access Management
      (IAM) role that grants containers in the task permission to call AWS APIs on your behalf.
      For more information, see `Amazon ECS Task Role
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_IAM_role.html>`__ in the
      *Amazon Elastic Container Service Developer Guide* .

      IAM roles for tasks on Windows require that the ``-EnableTaskIAMRole`` option is set when
      you launch the Amazon ECS-optimized Windows AMI. Your containers must also run some
      configuration code in order to take advantage of the feature. For more information, see
      `Windows IAM Roles for Tasks
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/windows_task_IAM_roles.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

    - **executionRoleArn** *(string) --*

      The Amazon Resource Name (ARN) of the task execution role that containers in this task can
      assume. All containers in this task are granted the permissions that are specified in this
      role.

    - **networkMode** *(string) --*

      The Docker networking mode to use for the containers in the task. The valid values are
      ``none`` , ``bridge`` , ``awsvpc`` , and ``host`` . The default Docker network mode is
      ``bridge`` . If you are using the Fargate launch type, the ``awsvpc`` network mode is
      required. If you are using the EC2 launch type, any network mode can be used. If the
      network mode is set to ``none`` , you cannot specify port mappings in your container
      definitions, and the tasks containers do not have external connectivity. The ``host`` and
      ``awsvpc`` network modes offer the highest networking performance for containers because
      they use the EC2 network stack instead of the virtualized network stack provided by the
      ``bridge`` mode.

      With the ``host`` and ``awsvpc`` network modes, exposed container ports are mapped directly
      to the corresponding host port (for the ``host`` network mode) or the attached elastic
      network interface port (for the ``awsvpc`` network mode), so you cannot take advantage of
      dynamic host port mappings.

      If the network mode is ``awsvpc`` , the task is allocated an elastic network interface, and
      you must specify a  NetworkConfiguration value when you create a service or run a task with
      the task definition. For more information, see `Task Networking
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html>`__ in
      the *Amazon Elastic Container Service Developer Guide* .

      .. note::

        Currently, only Amazon ECS-optimized AMIs, other Amazon Linux variants with the
        ``ecs-init`` package, or AWS Fargate infrastructure support the ``awsvpc`` network mode.

      If the network mode is ``host`` , you cannot run multiple instantiations of the same task
      on a single container instance when port mappings are used.

      Docker for Windows uses different network modes than Docker for Linux. When you register a
      task definition with Windows containers, you must not specify a network mode. If you use
      the console to register a task definition with Windows containers, you must choose the
      ``<default>`` network mode object.

      For more information, see `Network settings
      <https://docs.docker.com/engine/reference/run/#network-settings>`__ in the *Docker run
      reference* .

    - **revision** *(integer) --*

      The revision of the task in a particular family. The revision is a version number of a task
      definition in a family. When you register a task definition for the first time, the
      revision is ``1`` . Each time that you register a new revision of a task definition in the
      same family, the revision value always increases by one, even if you have deregistered
      previous revisions in this family.

    - **volumes** *(list) --*

      The list of volume definitions for the task.

      If your tasks are using the Fargate launch type, the ``host`` and ``sourcePath`` parameters
      are not supported.

      For more information about volume definition parameters and defaults, see `Amazon ECS Task
      Definitions
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definitions.html>`__ in
      the *Amazon Elastic Container Service Developer Guide* .

      - *(dict) --*

        A data volume used in a task definition. For tasks that use a Docker volume, specify a
        ``DockerVolumeConfiguration`` . For tasks that use a bind mount host volume, specify a
        ``host`` and optional ``sourcePath`` . For more information, see `Using Data Volumes in
        Tasks
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_data_volumes.html>`__ .

        - **name** *(string) --*

          The name of the volume. Up to 255 letters (uppercase and lowercase), numbers, and
          hyphens are allowed. This name is referenced in the ``sourceVolume`` parameter of
          container definition ``mountPoints`` .

        - **host** *(dict) --*

          This parameter is specified when you are using bind mount host volumes. Bind mount host
          volumes are supported when you are using either the EC2 or Fargate launch types. The
          contents of the ``host`` parameter determine whether your bind mount host volume
          persists on the host container instance and where it is stored. If the ``host``
          parameter is empty, then the Docker daemon assigns a host path for your data volume.
          However, the data is not guaranteed to persist after the containers associated with it
          stop running.

          Windows containers can mount whole directories on the same drive as
          ``$env:ProgramData`` . Windows containers cannot mount directories on a different
          drive, and mount point cannot be across drives. For example, you can mount
          ``C:\\my\\path:C:\\my\\path`` and ``D:\\:D:\\`` , but not ``D:\\my\\path:C:\\my\\path``
          or ``D:\\:C:\\my\\path`` .

          - **sourcePath** *(string) --*

            When the ``host`` parameter is used, specify a ``sourcePath`` to declare the path on
            the host container instance that is presented to the container. If this parameter is
            empty, then the Docker daemon has assigned a host path for you. If the ``host``
            parameter contains a ``sourcePath`` file location, then the data volume persists at
            the specified location on the host container instance until you delete it manually.
            If the ``sourcePath`` value does not exist on the host container instance, the Docker
            daemon creates it. If the location does exist, the contents of the source path folder
            are exported.

            If you are using the Fargate launch type, the ``sourcePath`` parameter is not
            supported.

        - **dockerVolumeConfiguration** *(dict) --*

          This parameter is specified when you are using Docker volumes. Docker volumes are only
          supported when you are using the EC2 launch type. Windows containers only support the
          use of the ``local`` driver. To use bind mounts, specify a ``host`` instead.

          - **scope** *(string) --*

            The scope for the Docker volume that determines its lifecycle. Docker volumes that
            are scoped to a ``task`` are automatically provisioned when the task starts and
            destroyed when the task stops. Docker volumes that are scoped as ``shared`` persist
            after the task stops.

          - **autoprovision** *(boolean) --*

            If this value is ``true`` , the Docker volume is created if it does not already exist.

            .. note::

              This field is only used if the ``scope`` is ``shared`` .

          - **driver** *(string) --*

            The Docker volume driver to use. The driver value must match the driver name provided
            by Docker because it is used for task placement. If the driver was installed using
            the Docker plugin CLI, use ``docker plugin ls`` to retrieve the driver name from your
            container instance. If the driver was installed using another method, use Docker
            plugin discovery to retrieve the driver name. For more information, see `Docker
            plugin discovery
            <https://docs.docker.com/engine/extend/plugin_api/#plugin-discovery>`__ . This
            parameter maps to ``Driver`` in the `Create a volume
            <https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
            ``xxdriver`` option to `docker volume create
            <https://docs.docker.com/engine/reference/commandline/volume_create/>`__ .

          - **driverOpts** *(dict) --*

            A map of Docker driver-specific options passed through. This parameter maps to
            ``DriverOpts`` in the `Create a volume
            <https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``xxopt``
            option to `docker volume create
            <https://docs.docker.com/engine/reference/commandline/volume_create/>`__ .

            - *(string) --*

              - *(string) --*

          - **labels** *(dict) --*

            Custom metadata to add to your Docker volume. This parameter maps to ``Labels`` in
            the `Create a volume
            <https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``xxlabel``
            option to `docker volume create
            <https://docs.docker.com/engine/reference/commandline/volume_create/>`__ .

            - *(string) --*

              - *(string) --*

    - **status** *(string) --*

      The status of the task definition.

    - **requiresAttributes** *(list) --*

      The container instance attributes required by your task. This field is not valid if you are
      using the Fargate launch type for your task.

      - *(dict) --*

        An attribute is a name-value pair associated with an Amazon ECS object. Attributes enable
        you to extend the Amazon ECS data model by adding custom metadata to your resources. For
        more information, see `Attributes
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html#attributes>`__
        in the *Amazon Elastic Container Service Developer Guide* .

        - **name** *(string) --*

          The name of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
          hyphens, underscores, and periods are allowed.

        - **value** *(string) --*

          The value of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
          hyphens, underscores, periods, at signs (@), forward slashes, colons, and spaces are
          allowed.

        - **targetType** *(string) --*

          The type of the target with which to attach the attribute. This parameter is required
          if you use the short form ID for a resource instead of the full ARN.

        - **targetId** *(string) --*

          The ID of the target. You can specify the short form ID for a resource or the full
          Amazon Resource Name (ARN).

    - **placementConstraints** *(list) --*

      An array of placement constraint objects to use for tasks. This field is not valid if you
      are using the Fargate launch type for your task.

      - *(dict) --*

        An object representing a constraint on task placement in the task definition. For more
        information, see `Task Placement Constraints
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html>`__
        in the *Amazon Elastic Container Service Developer Guide* .

        .. note::

          If you are using the Fargate launch type, task placement constraints are not supported.

        - **type** *(string) --*

          The type of constraint. The ``MemberOf`` constraint restricts selection to be from a
          group of valid candidates.

        - **expression** *(string) --*

          A cluster query language expression to apply to the constraint. For more information,
          see `Cluster Query Language
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

    - **compatibilities** *(list) --*

      The launch type to use with your task. For more information, see `Amazon ECS Launch Types
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html>`__ in the
      *Amazon Elastic Container Service Developer Guide* .

      - *(string) --*

    - **requiresCompatibilities** *(list) --*

      The launch type the task requires. If no value is specified, it will default to ``EC2`` .
      Valid values include ``EC2`` and ``FARGATE`` .

      - *(string) --*

    - **cpu** *(string) --*

      The number of ``cpu`` units used by the task. If you are using the EC2 launch type, this
      field is optional and any value can be used. If you are using the Fargate launch type, this
      field is required and you must use one of the following values, which determines your range
      of valid values for the ``memory`` parameter:

      * 256 (.25 vCPU) - Available ``memory`` values: 512 (0.5 GB), 1024 (1 GB), 2048 (2 GB)

      * 512 (.5 vCPU) - Available ``memory`` values: 1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096
      (4 GB)

      * 1024 (1 vCPU) - Available ``memory`` values: 2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120
      (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB)

      * 2048 (2 vCPU) - Available ``memory`` values: Between 4096 (4 GB) and 16384 (16 GB) in
      increments of 1024 (1 GB)

      * 4096 (4 vCPU) - Available ``memory`` values: Between 8192 (8 GB) and 30720 (30 GB) in
      increments of 1024 (1 GB)

    - **memory** *(string) --*

      The amount (in MiB) of memory used by the task.

      If using the EC2 launch type, this field is optional and any value can be used. If a
      task-level memory value is specified then the container-level memory value is optional.

      If using the Fargate launch type, this field is required and you must use one of the
      following values, which determines your range of valid values for the ``cpu`` parameter:

      * 512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) - Available ``cpu`` values: 256 (.25 vCPU)

      * 1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available ``cpu`` values: 512 (.5
      vCPU)

      * 2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB)
      - Available ``cpu`` values: 1024 (1 vCPU)

      * Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB) - Available ``cpu``
      values: 2048 (2 vCPU)

      * Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB) - Available ``cpu``
      values: 4096 (4 vCPU)

    - **inferenceAccelerators** *(list) --*

      The Elastic Inference accelerator associated with the task.

      - *(dict) --*

        Details on a Elastic Inference accelerator. For more information, see `Working with
        Amazon Elastic Inference on Amazon ECS
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in the
        *Amazon Elastic Container Service Developer Guide* .

        - **deviceName** *(string) --*

          The Elastic Inference accelerator device name. The ``deviceName`` must also be
          referenced in a container definition as a  ResourceRequirement .

        - **deviceType** *(string) --*

          The Elastic Inference accelerator type to use.

    - **pidMode** *(string) --*

      The process namespace to use for the containers in the task. The valid values are ``host``
      or ``task`` . If ``host`` is specified, then all containers within the tasks that specified
      the ``host`` PID mode on the same container instance share the same process namespace with
      the host Amazon EC2 instance. If ``task`` is specified, all containers within the specified
      task share the same process namespace. If no value is specified, the default is a private
      namespace. For more information, see `PID settings
      <https://docs.docker.com/engine/reference/run/#pid-settings---pid>`__ in the *Docker run
      reference* .

      If the ``host`` PID mode is used, be aware that there is a heightened risk of undesired
      process namespace expose. For more information, see `Docker security
      <https://docs.docker.com/engine/security/security/>`__ .

      .. note::

        This parameter is not supported for Windows containers or tasks using the Fargate launch
        type.

    - **ipcMode** *(string) --*

      The IPC resource namespace to use for the containers in the task. The valid values are
      ``host`` , ``task`` , or ``none`` . If ``host`` is specified, then all containers within
      the tasks that specified the ``host`` IPC mode on the same container instance share the
      same IPC resources with the host Amazon EC2 instance. If ``task`` is specified, all
      containers within the specified task share the same IPC resources. If ``none`` is
      specified, then IPC resources within the containers of a task are private and not shared
      with other containers in a task or on the container instance. If no value is specified,
      then the IPC resource namespace sharing depends on the Docker daemon setting on the
      container instance. For more information, see `IPC settings
      <https://docs.docker.com/engine/reference/run/#ipc-settings---ipc>`__ in the *Docker run
      reference* .

      If the ``host`` IPC mode is used, be aware that there is a heightened risk of undesired IPC
      namespace expose. For more information, see `Docker security
      <https://docs.docker.com/engine/security/security/>`__ .

      If you are setting namespaced kernel parameters using ``systemControls`` for the containers
      in the task, the following will apply to your IPC resource namespace. For more information,
      see `System Controls
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

      * For tasks that use the ``host`` IPC mode, IPC namespace related ``systemControls`` are
      not supported.

      * For tasks that use the ``task`` IPC mode, IPC namespace related ``systemControls`` will
      apply to all containers within a task.

      .. note::

        This parameter is not supported for Windows containers or tasks using the Fargate launch
        type.

    - **proxyConfiguration** *(dict) --*

      The configuration details for the App Mesh proxy.

      Your Amazon ECS container instances require at least version 1.26.0 of the container agent
      and at least version 1.26.0-1 of the ``ecs-init`` package to enable a proxy configuration.
      If your container instances are launched from the Amazon ECS-optimized AMI version
      ``20190301`` or later, then they contain the required versions of the container agent and
      ``ecs-init`` . For more information, see `Amazon ECS-optimized Linux AMI
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html>`__ in
      the *Amazon Elastic Container Service Developer Guide* .

      - **type** *(string) --*

        The proxy type. The only supported value is ``APPMESH`` .

      - **containerName** *(string) --*

        The name of the container that will serve as the App Mesh proxy.

      - **properties** *(list) --*

        The set of network configuration parameters to provide the Container Network Interface
        (CNI) plugin, specified as key-value pairs.

        * ``IgnoredUID`` - (Required) The user ID (UID) of the proxy container as defined by the
        ``user`` parameter in a container definition. This is used to ensure the proxy ignores
        its own traffic. If ``IgnoredGID`` is specified, this field can be empty.

        * ``IgnoredGID`` - (Required) The group ID (GID) of the proxy container as defined by the
        ``user`` parameter in a container definition. This is used to ensure the proxy ignores
        its own traffic. If ``IgnoredUID`` is specified, this field can be empty.

        * ``AppPorts`` - (Required) The list of ports that the application uses. Network traffic
        to these ports is forwarded to the ``ProxyIngressPort`` and ``ProxyEgressPort`` .

        * ``ProxyIngressPort`` - (Required) Specifies the port that incoming traffic to the
        ``AppPorts`` is directed to.

        * ``ProxyEgressPort`` - (Required) Specifies the port that outgoing traffic from the
        ``AppPorts`` is directed to.

        * ``EgressIgnoredPorts`` - (Required) The egress traffic going to the specified ports is
        ignored and not redirected to the ``ProxyEgressPort`` . It can be an empty list.

        * ``EgressIgnoredIPs`` - (Required) The egress traffic going to the specified IP
        addresses is ignored and not redirected to the ``ProxyEgressPort`` . It can be an empty
        list.

        - *(dict) --*

          A key-value pair object.

          - **name** *(string) --*

            The name of the key-value pair. For environment variables, this is the name of the
            environment variable.

          - **value** *(string) --*

            The value of the key-value pair. For environment variables, this is the value of the
            environment variable.
    """


_ClientRegisterTaskDefinitionResponseTypeDef = TypedDict(
    "_ClientRegisterTaskDefinitionResponseTypeDef",
    {
        "taskDefinition": ClientRegisterTaskDefinitionResponsetaskDefinitionTypeDef,
        "tags": List[ClientRegisterTaskDefinitionResponsetagsTypeDef],
    },
    total=False,
)


class ClientRegisterTaskDefinitionResponseTypeDef(
    _ClientRegisterTaskDefinitionResponseTypeDef
):
    """
    Type definition for `ClientRegisterTaskDefinition` `Response`

    - **taskDefinition** *(dict) --*

      The full description of the registered task definition.

      - **taskDefinitionArn** *(string) --*

        The full Amazon Resource Name (ARN) of the task definition.

      - **containerDefinitions** *(list) --*

        A list of container definitions in JSON format that describe the different containers that
        make up your task. For more information about container definition parameters and defaults,
        see `Amazon ECS Task Definitions
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_defintions.html>`__ in
        the *Amazon Elastic Container Service Developer Guide* .

        - *(dict) --*

          Container definitions are used in task definitions to describe the different containers
          that are launched as part of a task.

          - **name** *(string) --*

            The name of a container. If you are linking multiple containers together in a task
            definition, the ``name`` of one container can be entered in the ``links`` of another
            container to connect the containers. Up to 255 letters (uppercase and lowercase),
            numbers, and hyphens are allowed. This parameter maps to ``name`` in the `Create a
            container <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__
            section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and
            the ``--name`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__
            .

          - **image** *(string) --*

            The image used to start a container. This string is passed directly to the Docker
            daemon. Images in the Docker Hub registry are available by default. Other repositories
            are specified with either `` *repository-url* /*image* :*tag* `` or `` *repository-url*
            /*image* @*digest* `` . Up to 255 letters (uppercase and lowercase), numbers, hyphens,
            underscores, colons, periods, forward slashes, and number signs are allowed. This
            parameter maps to ``Image`` in the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``IMAGE``
            parameter of `docker run <https://docs.docker.com/engine/reference/run/>`__ .

            * When a new task starts, the Amazon ECS container agent pulls the latest version of
            the specified image and tag for the container to use. However, subsequent updates to a
            repository image are not propagated to already running tasks.

            * Images in Amazon ECR repositories can be specified by either using the full
            ``registry/repository:tag`` or ``registry/repository@digest`` . For example,
            ``012345678910.dkr.ecr.<region-name>.amazonaws.com/<repository-name>:latest`` or
            ``012345678910.dkr.ecr.<region-name>.amazonaws.com/<repository-name>@sha256:94afd1f2e64d908bc90dbca0035a5b567EXAMPLE``
            .

            * Images in official repositories on Docker Hub use a single name (for example,
            ``ubuntu`` or ``mongo`` ).

            * Images in other repositories on Docker Hub are qualified with an organization name
            (for example, ``amazon/amazon-ecs-agent`` ).

            * Images in other online repositories are qualified further by a domain name (for
            example, ``quay.io/assemblyline/ubuntu`` ).

          - **repositoryCredentials** *(dict) --*

            The private repository authentication credentials to use.

            - **credentialsParameter** *(string) --*

              The Amazon Resource Name (ARN) of the secret containing the private repository
              credentials.

              .. note::

                When you are using the Amazon ECS API, AWS CLI, or AWS SDK, if the secret exists in
                the same Region as the task that you are launching then you can use either the full
                ARN or the name of the secret. When you are using the AWS Management Console, you
                must specify the full ARN of the secret.

          - **cpu** *(integer) --*

            The number of ``cpu`` units reserved for the container. This parameter maps to
            ``CpuShares`` in the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
            ``--cpu-shares`` option to `docker run
            <https://docs.docker.com/engine/reference/run/>`__ .

            This field is optional for tasks using the Fargate launch type, and the only
            requirement is that the total amount of CPU reserved for all containers within a task
            be lower than the task-level ``cpu`` value.

            .. note::

              You can determine the number of CPU units that are available per EC2 instance type by
              multiplying the vCPUs listed for that instance type on the `Amazon EC2 Instances
              <http://aws.amazon.com/ec2/instance-types/>`__ detail page by 1,024.

            For example, if you run a single-container task on a single-core instance type with 512
            CPU units specified for that container, and that is the only task running on the
            container instance, that container could use the full 1,024 CPU unit share at any given
            time. However, if you launched another copy of the same task on that container
            instance, each task would be guaranteed a minimum of 512 CPU units when needed, and
            each container could float to higher CPU usage if the other container was not using it,
            but if both tasks were 100% active all of the time, they would be limited to 512 CPU
            units.

            Linux containers share unallocated CPU units with other containers on the container
            instance with the same ratio as their allocated amount. For example, if you run a
            single-container task on a single-core instance type with 512 CPU units specified for
            that container, and that is the only task running on the container instance, that
            container could use the full 1,024 CPU unit share at any given time. However, if you
            launched another copy of the same task on that container instance, each task would be
            guaranteed a minimum of 512 CPU units when needed, and each container could float to
            higher CPU usage if the other container was not using it, but if both tasks were 100%
            active all of the time, they would be limited to 512 CPU units.

            On Linux container instances, the Docker daemon on the container instance uses the CPU
            value to calculate the relative CPU share ratios for running containers. For more
            information, see `CPU share constraint
            <https://docs.docker.com/engine/reference/run/#cpu-share-constraint>`__ in the Docker
            documentation. The minimum valid CPU share value that the Linux kernel allows is 2.
            However, the CPU parameter is not required, and you can use CPU values below 2 in your
            container definitions. For CPU values below 2 (including null), the behavior varies
            based on your Amazon ECS container agent version:

            * **Agent versions less than or equal to 1.1.0:** Null and zero CPU values are passed
            to Docker as 0, which Docker then converts to 1,024 CPU shares. CPU values of 1 are
            passed to Docker as 1, which the Linux kernel converts to two CPU shares.

            * **Agent versions greater than or equal to 1.2.0:** Null, zero, and CPU values of 1
            are passed to Docker as 2.

            On Windows container instances, the CPU limit is enforced as an absolute limit, or a
            quota. Windows containers only have access to the specified amount of CPU that is
            described in the task definition.

          - **memory** *(integer) --*

            The amount (in MiB) of memory to present to the container. If your container attempts
            to exceed the memory specified here, the container is killed. The total amount of
            memory reserved for all containers within a task must be lower than the task ``memory``
            value, if one is specified. This parameter maps to ``Memory`` in the `Create a
            container <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__
            section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and
            the ``--memory`` option to `docker run
            <https://docs.docker.com/engine/reference/run/>`__ .

            If using the Fargate launch type, this parameter is optional.

            If using the EC2 launch type, you must specify either a task-level memory value or a
            container-level memory value. If you specify both a container-level ``memory`` and
            ``memoryReservation`` value, ``memory`` must be greater than ``memoryReservation`` . If
            you specify ``memoryReservation`` , then that value is subtracted from the available
            memory resources for the container instance on which the container is placed.
            Otherwise, the value of ``memory`` is used.

            The Docker daemon reserves a minimum of 4 MiB of memory for a container, so you should
            not specify fewer than 4 MiB of memory for your containers.

          - **memoryReservation** *(integer) --*

            The soft limit (in MiB) of memory to reserve for the container. When system memory is
            under heavy contention, Docker attempts to keep the container memory to this soft
            limit. However, your container can consume more memory when it needs to, up to either
            the hard limit specified with the ``memory`` parameter (if applicable), or all of the
            available memory on the container instance, whichever comes first. This parameter maps
            to ``MemoryReservation`` in the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
            ``--memory-reservation`` option to `docker run
            <https://docs.docker.com/engine/reference/run/>`__ .

            If a task-level memory value is not specified, you must specify a non-zero integer for
            one or both of ``memory`` or ``memoryReservation`` in a container definition. If you
            specify both, ``memory`` must be greater than ``memoryReservation`` . If you specify
            ``memoryReservation`` , then that value is subtracted from the available memory
            resources for the container instance on which the container is placed. Otherwise, the
            value of ``memory`` is used.

            For example, if your container normally uses 128 MiB of memory, but occasionally bursts
            to 256 MiB of memory for short periods of time, you can set a ``memoryReservation`` of
            128 MiB, and a ``memory`` hard limit of 300 MiB. This configuration would allow the
            container to only reserve 128 MiB of memory from the remaining resources on the
            container instance, but also allow the container to consume more memory resources when
            needed.

            The Docker daemon reserves a minimum of 4 MiB of memory for a container, so you should
            not specify fewer than 4 MiB of memory for your containers.

          - **links** *(list) --*

            The ``links`` parameter allows containers to communicate with each other without the
            need for port mappings. This parameter is only supported if the network mode of a task
            definition is ``bridge`` . The ``name:internalName`` construct is analogous to
            ``name:alias`` in Docker links. Up to 255 letters (uppercase and lowercase), numbers,
            and hyphens are allowed. For more information about linking Docker containers, go to
            `Legacy container links <https://docs.docker.com/network/links/>`__ in the Docker
            documentation. This parameter maps to ``Links`` in the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--link``
            option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

            .. note::

              This parameter is not supported for Windows containers.

            .. warning::

              Containers that are collocated on a single container instance may be able to
              communicate with each other without requiring links or host port mappings. Network
              isolation is achieved on the container instance using security groups and VPC
              settings.

            - *(string) --*

          - **portMappings** *(list) --*

            The list of port mappings for the container. Port mappings allow containers to access
            ports on the host container instance to send or receive traffic.

            For task definitions that use the ``awsvpc`` network mode, you should only specify the
            ``containerPort`` . The ``hostPort`` can be left blank or it must be the same value as
            the ``containerPort`` .

            Port mappings on Windows use the ``NetNAT`` gateway address rather than ``localhost`` .
            There is no loopback for port mappings on Windows, so you cannot access a container's
            mapped port from the host itself.

            This parameter maps to ``PortBindings`` in the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--publish``
            option to `docker run <https://docs.docker.com/engine/reference/run/>`__ . If the
            network mode of a task definition is set to ``none`` , then you can't specify port
            mappings. If the network mode of a task definition is set to ``host`` , then host ports
            must either be undefined or they must match the container port in the port mapping.

            .. note::

              After a task reaches the ``RUNNING`` status, manual and automatic host and container
              port assignments are visible in the **Network Bindings** section of a container
              description for a selected task in the Amazon ECS console. The assignments are also
              visible in the ``networkBindings`` section  DescribeTasks responses.

            - *(dict) --*

              Port mappings allow containers to access ports on the host container instance to send
              or receive traffic. Port mappings are specified as part of the container definition.

              If you are using containers in a task with the ``awsvpc`` or ``host`` network mode,
              exposed ports should be specified using ``containerPort`` . The ``hostPort`` can be
              left blank or it must be the same value as the ``containerPort`` .

              After a task reaches the ``RUNNING`` status, manual and automatic host and container
              port assignments are visible in the ``networkBindings`` section of  DescribeTasks API
              responses.

              - **containerPort** *(integer) --*

                The port number on the container that is bound to the user-specified or
                automatically assigned host port.

                If you are using containers in a task with the ``awsvpc`` or ``host`` network mode,
                exposed ports should be specified using ``containerPort`` .

                If you are using containers in a task with the ``bridge`` network mode and you
                specify a container port and not a host port, your container automatically receives
                a host port in the ephemeral port range. For more information, see ``hostPort`` .
                Port mappings that are automatically assigned in this way do not count toward the
                100 reserved ports limit of a container instance.

                .. warning::

                  You cannot expose the same container port for multiple protocols. An error will
                  be returned if this is attempted.

              - **hostPort** *(integer) --*

                The port number on the container instance to reserve for your container.

                If you are using containers in a task with the ``awsvpc`` or ``host`` network mode,
                the ``hostPort`` can either be left blank or set to the same value as the
                ``containerPort`` .

                If you are using containers in a task with the ``bridge`` network mode, you can
                specify a non-reserved host port for your container port mapping, or you can omit
                the ``hostPort`` (or set it to ``0`` ) while specifying a ``containerPort`` and
                your container automatically receives a port in the ephemeral port range for your
                container instance operating system and Docker version.

                The default ephemeral port range for Docker version 1.6.0 and later is listed on
                the instance under ``/proc/sys/net/ipv4/ip_local_port_range`` . If this kernel
                parameter is unavailable, the default ephemeral port range from 49153 through 65535
                is used. Do not attempt to specify a host port in the ephemeral port range as these
                are reserved for automatic assignment. In general, ports below 32768 are outside of
                the ephemeral port range.

                .. note::

                  The default ephemeral port range from 49153 through 65535 is always used for
                  Docker versions before 1.6.0.

                The default reserved ports are 22 for SSH, the Docker ports 2375 and 2376, and the
                Amazon ECS container agent ports 51678-51680. Any host port that was previously
                specified in a running task is also reserved while the task is running (after a
                task stops, the host port is released). The current reserved ports are displayed in
                the ``remainingResources`` of  DescribeContainerInstances output. A container
                instance can have up to 100 reserved ports at a time, including the default
                reserved ports. Automatically assigned ports don't count toward the 100 reserved
                ports limit.

              - **protocol** *(string) --*

                The protocol used for the port mapping. Valid values are ``tcp`` and ``udp`` . The
                default is ``tcp`` .

          - **essential** *(boolean) --*

            If the ``essential`` parameter of a container is marked as ``true`` , and that
            container fails or stops for any reason, all other containers that are part of the task
            are stopped. If the ``essential`` parameter of a container is marked as ``false`` ,
            then its failure does not affect the rest of the containers in a task. If this
            parameter is omitted, a container is assumed to be essential.

            All tasks must have at least one essential container. If you have an application that
            is composed of multiple containers, you should group containers that are used for a
            common purpose into components, and separate the different components into multiple
            task definitions. For more information, see `Application Architecture
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/application_architecture.html>`__
            in the *Amazon Elastic Container Service Developer Guide* .

          - **entryPoint** *(list) --*

            .. warning::

              Early versions of the Amazon ECS container agent do not properly handle
              ``entryPoint`` parameters. If you have problems using ``entryPoint`` , update your
              container agent or enter your commands and arguments as ``command`` array items
              instead.

            The entry point that is passed to the container. This parameter maps to ``Entrypoint``
            in the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
            ``--entrypoint`` option to `docker run
            <https://docs.docker.com/engine/reference/run/>`__ . For more information, see
            `https\\://docs.docker.com/engine/reference/builder/#entrypoint
            <https://docs.docker.com/engine/reference/builder/#entrypoint>`__ .

            - *(string) --*

          - **command** *(list) --*

            The command that is passed to the container. This parameter maps to ``Cmd`` in the
            `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``COMMAND``
            parameter to `docker run <https://docs.docker.com/engine/reference/run/>`__ . For more
            information, see `https\\://docs.docker.com/engine/reference/builder/#cmd
            <https://docs.docker.com/engine/reference/builder/#cmd>`__ . If there are multiple
            arguments, each argument should be a separated string in the array.

            - *(string) --*

          - **environment** *(list) --*

            The environment variables to pass to a container. This parameter maps to ``Env`` in the
            `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--env``
            option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

            .. warning::

              We do not recommend using plaintext environment variables for sensitive information,
              such as credential data.

            - *(dict) --*

              A key-value pair object.

              - **name** *(string) --*

                The name of the key-value pair. For environment variables, this is the name of the
                environment variable.

              - **value** *(string) --*

                The value of the key-value pair. For environment variables, this is the value of
                the environment variable.

          - **mountPoints** *(list) --*

            The mount points for data volumes in your container.

            This parameter maps to ``Volumes`` in the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--volume``
            option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

            Windows containers can mount whole directories on the same drive as
            ``$env:ProgramData`` . Windows containers cannot mount directories on a different
            drive, and mount point cannot be across drives.

            - *(dict) --*

              Details on a volume mount point that is used in a container definition.

              - **sourceVolume** *(string) --*

                The name of the volume to mount. Must be a volume name referenced in the ``name``
                parameter of task definition ``volume`` .

              - **containerPath** *(string) --*

                The path on the container to mount the host volume at.

              - **readOnly** *(boolean) --*

                If this value is ``true`` , the container has read-only access to the volume. If
                this value is ``false`` , then the container can write to the volume. The default
                value is ``false`` .

          - **volumesFrom** *(list) --*

            Data volumes to mount from another container. This parameter maps to ``VolumesFrom`` in
            the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
            ``--volumes-from`` option to `docker run
            <https://docs.docker.com/engine/reference/run/>`__ .

            - *(dict) --*

              Details on a data volume from another container in the same task definition.

              - **sourceContainer** *(string) --*

                The name of another container within the same task definition from which to mount
                volumes.

              - **readOnly** *(boolean) --*

                If this value is ``true`` , the container has read-only access to the volume. If
                this value is ``false`` , then the container can write to the volume. The default
                value is ``false`` .

          - **linuxParameters** *(dict) --*

            Linux-specific modifications that are applied to the container, such as Linux kernel
            capabilities. For more information see  KernelCapabilities .

            .. note::

              This parameter is not supported for Windows containers.

            - **capabilities** *(dict) --*

              The Linux capabilities for the container that are added to or dropped from the
              default configuration provided by Docker.

              .. note::

                If you are using tasks that use the Fargate launch type, ``capabilities`` is
                supported but the ``add`` parameter is not supported.

              - **add** *(list) --*

                The Linux capabilities for the container that have been added to the default
                configuration provided by Docker. This parameter maps to ``CapAdd`` in the `Create
                a container
                <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of
                the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
                ``--cap-add`` option to `docker run
                <https://docs.docker.com/engine/reference/run/>`__ .

                .. note::

                  If you are using tasks that use the Fargate launch type, the ``add`` parameter is
                  not supported.

                Valid values: ``"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" | "BLOCK_SUSPEND" | "CHOWN"
                | "DAC_OVERRIDE" | "DAC_READ_SEARCH" | "FOWNER" | "FSETID" | "IPC_LOCK" |
                "IPC_OWNER" | "KILL" | "LEASE" | "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" |
                "MKNOD" | "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" |
                "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT" |
                "SYS_CHROOT" | "SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" | "SYS_PTRACE" | "SYS_RAWIO"
                | "SYS_RESOURCE" | "SYS_TIME" | "SYS_TTY_CONFIG" | "SYSLOG" | "WAKE_ALARM"``

                - *(string) --*

              - **drop** *(list) --*

                The Linux capabilities for the container that have been removed from the default
                configuration provided by Docker. This parameter maps to ``CapDrop`` in the `Create
                a container
                <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of
                the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
                ``--cap-drop`` option to `docker run
                <https://docs.docker.com/engine/reference/run/>`__ .

                Valid values: ``"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" | "BLOCK_SUSPEND" | "CHOWN"
                | "DAC_OVERRIDE" | "DAC_READ_SEARCH" | "FOWNER" | "FSETID" | "IPC_LOCK" |
                "IPC_OWNER" | "KILL" | "LEASE" | "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" |
                "MKNOD" | "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" |
                "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT" |
                "SYS_CHROOT" | "SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" | "SYS_PTRACE" | "SYS_RAWIO"
                | "SYS_RESOURCE" | "SYS_TIME" | "SYS_TTY_CONFIG" | "SYSLOG" | "WAKE_ALARM"``

                - *(string) --*

            - **devices** *(list) --*

              Any host devices to expose to the container. This parameter maps to ``Devices`` in
              the `Create a container
              <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of
              the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
              ``--device`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__
              .

              .. note::

                If you are using tasks that use the Fargate launch type, the ``devices`` parameter
                is not supported.

              - *(dict) --*

                An object representing a container instance host device.

                - **hostPath** *(string) --*

                  The path for the device on the host container instance.

                - **containerPath** *(string) --*

                  The path inside the container at which to expose the host device.

                - **permissions** *(list) --*

                  The explicit permissions to provide to the container for the device. By default,
                  the container has permissions for ``read`` , ``write`` , and ``mknod`` for the
                  device.

                  - *(string) --*

            - **initProcessEnabled** *(boolean) --*

              Run an ``init`` process inside the container that forwards signals and reaps
              processes. This parameter maps to the ``--init`` option to `docker run
              <https://docs.docker.com/engine/reference/run/>`__ . This parameter requires version
              1.25 of the Docker Remote API or greater on your container instance. To check the
              Docker Remote API version on your container instance, log in to your container
              instance and run the following command: ``sudo docker version --format
              '{{.Server.APIVersion}}'``

            - **sharedMemorySize** *(integer) --*

              The value for the size (in MiB) of the ``/dev/shm`` volume. This parameter maps to
              the ``--shm-size`` option to `docker run
              <https://docs.docker.com/engine/reference/run/>`__ .

              .. note::

                If you are using tasks that use the Fargate launch type, the ``sharedMemorySize``
                parameter is not supported.

            - **tmpfs** *(list) --*

              The container path, mount options, and size (in MiB) of the tmpfs mount. This
              parameter maps to the ``--tmpfs`` option to `docker run
              <https://docs.docker.com/engine/reference/run/>`__ .

              .. note::

                If you are using tasks that use the Fargate launch type, the ``tmpfs`` parameter is
                not supported.

              - *(dict) --*

                The container path, mount options, and size of the tmpfs mount.

                - **containerPath** *(string) --*

                  The absolute file path where the tmpfs volume is to be mounted.

                - **size** *(integer) --*

                  The size (in MiB) of the tmpfs volume.

                - **mountOptions** *(list) --*

                  The list of tmpfs volume mount options.

                  Valid values: ``"defaults" | "ro" | "rw" | "suid" | "nosuid" | "dev" | "nodev" |
                  "exec" | "noexec" | "sync" | "async" | "dirsync" | "remount" | "mand" | "nomand"
                  | "atime" | "noatime" | "diratime" | "nodiratime" | "bind" | "rbind" |
                  "unbindable" | "runbindable" | "private" | "rprivate" | "shared" | "rshared" |
                  "slave" | "rslave" | "relatime" | "norelatime" | "strictatime" | "nostrictatime"
                  | "mode" | "uid" | "gid" | "nr_inodes" | "nr_blocks" | "mpol"``

                  - *(string) --*

            - **maxSwap** *(integer) --*

              The total amount of swap memory (in MiB) a container can use. This parameter will be
              translated to the ``--memory-swap`` option to `docker run
              <https://docs.docker.com/engine/reference/run/>`__ where the value would be the sum
              of the container memory plus the ``maxSwap`` value.

              If a ``maxSwap`` value of ``0`` is specified, the container will not use swap.
              Accepted values are ``0`` or any positive integer. If the ``maxSwap`` parameter is
              omitted, the container will use the swap configuration for the container instance it
              is running on. A ``maxSwap`` value must be set for the ``swappiness`` parameter to be
              used.

              .. note::

                If you are using tasks that use the Fargate launch type, the ``maxSwap`` parameter
                is not supported.

            - **swappiness** *(integer) --*

              This allows you to tune a container's memory swappiness behavior. A ``swappiness``
              value of ``0`` will cause swapping to not happen unless absolutely necessary. A
              ``swappiness`` value of ``100`` will cause pages to be swapped very aggressively.
              Accepted values are whole numbers between ``0`` and ``100`` . If the ``swappiness``
              parameter is not specified, a default value of ``60`` is used. If a value is not
              specified for ``maxSwap`` then this parameter is ignored. This parameter maps to the
              ``--memory-swappiness`` option to `docker run
              <https://docs.docker.com/engine/reference/run/>`__ .

              .. note::

                If you are using tasks that use the Fargate launch type, the ``swappiness``
                parameter is not supported.

          - **secrets** *(list) --*

            The secrets to pass to the container. For more information, see `Specifying Sensitive
            Data
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html>`__
            in the *Amazon Elastic Container Service Developer Guide* .

            - *(dict) --*

              An object representing the secret to expose to your container. Secrets can be exposed
              to a container in the following ways:

              * To inject sensitive data into your containers as environment variables, use the
              ``secrets`` container definition parameter.

              * To reference sensitive information in the log configuration of a container, use the
              ``secretOptions`` container definition parameter.

              For more information, see `Specifying Sensitive Data
              <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html>`__
              in the *Amazon Elastic Container Service Developer Guide* .

              - **name** *(string) --*

                The name of the secret.

              - **valueFrom** *(string) --*

                The secret to expose to the container. The supported values are either the full ARN
                of the AWS Secrets Manager secret or the full ARN of the parameter in the AWS
                Systems Manager Parameter Store.

                .. note::

                  If the AWS Systems Manager Parameter Store parameter exists in the same Region as
                  the task you are launching, then you can use either the full ARN or name of the
                  parameter. If the parameter exists in a different Region, then the full ARN must
                  be specified.

          - **dependsOn** *(list) --*

            The dependencies defined for container startup and shutdown. A container can contain
            multiple dependencies. When a dependency is defined for container startup, for
            container shutdown it is reversed.

            For tasks using the EC2 launch type, the container instances require at least version
            1.26.0 of the container agent to enable container dependencies. However, we recommend
            using the latest container agent version. For information about checking your agent
            version and updating to the latest version, see `Updating the Amazon ECS Container
            Agent
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html>`__
            in the *Amazon Elastic Container Service Developer Guide* . If you are using an Amazon
            ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the
            ``ecs-init`` package. If your container instances are launched from version
            ``20190301`` or later, then they contain the required versions of the container agent
            and ``ecs-init`` . For more information, see `Amazon ECS-optimized Linux AMI
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html>`__
            in the *Amazon Elastic Container Service Developer Guide* .

            For tasks using the Fargate launch type, the task or service requires platform version
            ``1.3.0`` or later.

            - *(dict) --*

              The dependencies defined for container startup and shutdown. A container can contain
              multiple dependencies. When a dependency is defined for container startup, for
              container shutdown it is reversed.

              Your Amazon ECS container instances require at least version 1.26.0 of the container
              agent to enable container dependencies. However, we recommend using the latest
              container agent version. For information about checking your agent version and
              updating to the latest version, see `Updating the Amazon ECS Container Agent
              <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html>`__
              in the *Amazon Elastic Container Service Developer Guide* . If you are using an
              Amazon ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the
              ``ecs-init`` package. If your container instances are launched from version
              ``20190301`` or later, then they contain the required versions of the container agent
              and ``ecs-init`` . For more information, see `Amazon ECS-optimized Linux AMI
              <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html>`__
              in the *Amazon Elastic Container Service Developer Guide* .

              .. note::

                If you are using tasks that use the Fargate launch type, container dependency
                parameters are not supported.

              - **containerName** *(string) --*

                The name of a container.

              - **condition** *(string) --*

                The dependency condition of the container. The following are the available
                conditions and their behavior:

                * ``START`` - This condition emulates the behavior of links and volumes today. It
                validates that a dependent container is started before permitting other containers
                to start.

                * ``COMPLETE`` - This condition validates that a dependent container runs to
                completion (exits) before permitting other containers to start. This can be useful
                for nonessential containers that run a script and then exit.

                * ``SUCCESS`` - This condition is the same as ``COMPLETE`` , but it also requires
                that the container exits with a ``zero`` status.

                * ``HEALTHY`` - This condition validates that the dependent container passes its
                Docker health check before permitting other containers to start. This requires that
                the dependent container has health checks configured. This condition is confirmed
                only at task startup.

          - **startTimeout** *(integer) --*

            Time duration (in seconds) to wait before giving up on resolving dependencies for a
            container. For example, you specify two containers in a task definition with containerA
            having a dependency on containerB reaching a ``COMPLETE`` , ``SUCCESS`` , or
            ``HEALTHY`` status. If a ``startTimeout`` value is specified for containerB and it does
            not reach the desired status within that time then containerA will give up and not
            start. This results in the task transitioning to a ``STOPPED`` state.

            For tasks using the EC2 launch type, the container instances require at least version
            1.26.0 of the container agent to enable a container start timeout value. However, we
            recommend using the latest container agent version. For information about checking your
            agent version and updating to the latest version, see `Updating the Amazon ECS
            Container Agent
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html>`__
            in the *Amazon Elastic Container Service Developer Guide* . If you are using an Amazon
            ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the
            ``ecs-init`` package. If your container instances are launched from version
            ``20190301`` or later, then they contain the required versions of the container agent
            and ``ecs-init`` . For more information, see `Amazon ECS-optimized Linux AMI
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html>`__
            in the *Amazon Elastic Container Service Developer Guide* .

            For tasks using the Fargate launch type, the task or service requires platform version
            ``1.3.0`` or later.

          - **stopTimeout** *(integer) --*

            Time duration (in seconds) to wait before the container is forcefully killed if it
            doesn't exit normally on its own.

            For tasks using the Fargate launch type, the max ``stopTimeout`` value is 2 minutes and
            the task or service requires platform version ``1.3.0`` or later.

            For tasks using the EC2 launch type, the stop timeout value for the container takes
            precedence over the ``ECS_CONTAINER_STOP_TIMEOUT`` container agent configuration
            parameter, if used. Container instances require at least version 1.26.0 of the
            container agent to enable a container stop timeout value. However, we recommend using
            the latest container agent version. For information about checking your agent version
            and updating to the latest version, see `Updating the Amazon ECS Container Agent
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html>`__
            in the *Amazon Elastic Container Service Developer Guide* . If you are using an Amazon
            ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the
            ``ecs-init`` package. If your container instances are launched from version
            ``20190301`` or later, then they contain the required versions of the container agent
            and ``ecs-init`` . For more information, see `Amazon ECS-optimized Linux AMI
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html>`__
            in the *Amazon Elastic Container Service Developer Guide* .

          - **hostname** *(string) --*

            The hostname to use for your container. This parameter maps to ``Hostname`` in the
            `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
            ``--hostname`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__
            .

            .. note::

              The ``hostname`` parameter is not supported if you are using the ``awsvpc`` network
              mode.

          - **user** *(string) --*

            The user name to use inside the container. This parameter maps to ``User`` in the
            `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--user``
            option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

            You can use the following formats. If specifying a UID or GID, you must specify it as a
            positive integer.

            * ``user``

            * ``user:group``

            * ``uid``

            * ``uid:gid``

            * ``user:gid``

            * ``uid:group``

            .. note::

              This parameter is not supported for Windows containers.

          - **workingDirectory** *(string) --*

            The working directory in which to run commands inside the container. This parameter
            maps to ``WorkingDir`` in the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--workdir``
            option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

          - **disableNetworking** *(boolean) --*

            When this parameter is true, networking is disabled within the container. This
            parameter maps to ``NetworkDisabled`` in the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ .

            .. note::

              This parameter is not supported for Windows containers.

          - **privileged** *(boolean) --*

            When this parameter is true, the container is given elevated privileges on the host
            container instance (similar to the ``root`` user). This parameter maps to
            ``Privileged`` in the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
            ``--privileged`` option to `docker run
            <https://docs.docker.com/engine/reference/run/>`__ .

            .. note::

              This parameter is not supported for Windows containers or tasks using the Fargate
              launch type.

          - **readonlyRootFilesystem** *(boolean) --*

            When this parameter is true, the container is given read-only access to its root file
            system. This parameter maps to ``ReadonlyRootfs`` in the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
            ``--read-only`` option to `docker run
            <https://docs.docker.com/engine/reference/run/>`__ .

            .. note::

              This parameter is not supported for Windows containers.

          - **dnsServers** *(list) --*

            A list of DNS servers that are presented to the container. This parameter maps to
            ``Dns`` in the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--dns``
            option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

            .. note::

              This parameter is not supported for Windows containers.

            - *(string) --*

          - **dnsSearchDomains** *(list) --*

            A list of DNS search domains that are presented to the container. This parameter maps
            to ``DnsSearch`` in the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
            ``--dns-search`` option to `docker run
            <https://docs.docker.com/engine/reference/run/>`__ .

            .. note::

              This parameter is not supported for Windows containers.

            - *(string) --*

          - **extraHosts** *(list) --*

            A list of hostnames and IP address mappings to append to the ``/etc/hosts`` file on the
            container. This parameter maps to ``ExtraHosts`` in the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
            ``--add-host`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__
            .

            .. note::

              This parameter is not supported for Windows containers or tasks that use the
              ``awsvpc`` network mode.

            - *(dict) --*

              Hostnames and IP address entries that are added to the ``/etc/hosts`` file of a
              container via the ``extraHosts`` parameter of its  ContainerDefinition .

              - **hostname** *(string) --*

                The hostname to use in the ``/etc/hosts`` entry.

              - **ipAddress** *(string) --*

                The IP address to use in the ``/etc/hosts`` entry.

          - **dockerSecurityOptions** *(list) --*

            A list of strings to provide custom labels for SELinux and AppArmor multi-level
            security systems. This field is not valid for containers in tasks using the Fargate
            launch type.

            This parameter maps to ``SecurityOpt`` in the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
            ``--security-opt`` option to `docker run
            <https://docs.docker.com/engine/reference/run/>`__ .

            .. note::

              The Amazon ECS container agent running on a container instance must register with the
              ``ECS_SELINUX_CAPABLE=true`` or ``ECS_APPARMOR_CAPABLE=true`` environment variables
              before containers placed on that instance can use these security options. For more
              information, see `Amazon ECS Container Agent Configuration
              <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html>`__
              in the *Amazon Elastic Container Service Developer Guide* .

            .. note::

              This parameter is not supported for Windows containers.

            - *(string) --*

          - **interactive** *(boolean) --*

            When this parameter is ``true`` , this allows you to deploy containerized applications
            that require ``stdin`` or a ``tty`` to be allocated. This parameter maps to
            ``OpenStdin`` in the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
            ``--interactive`` option to `docker run
            <https://docs.docker.com/engine/reference/run/>`__ .

          - **pseudoTerminal** *(boolean) --*

            When this parameter is ``true`` , a TTY is allocated. This parameter maps to ``Tty`` in
            the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--tty``
            option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

          - **dockerLabels** *(dict) --*

            A key/value map of labels to add to the container. This parameter maps to ``Labels`` in
            the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--label``
            option to `docker run <https://docs.docker.com/engine/reference/run/>`__ . This
            parameter requires version 1.18 of the Docker Remote API or greater on your container
            instance. To check the Docker Remote API version on your container instance, log in to
            your container instance and run the following command: ``sudo docker version --format
            '{{.Server.APIVersion}}'``

            - *(string) --*

              - *(string) --*

          - **ulimits** *(list) --*

            A list of ``ulimits`` to set in the container. This parameter maps to ``Ulimits`` in
            the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--ulimit``
            option to `docker run <https://docs.docker.com/engine/reference/run/>`__ . Valid naming
            values are displayed in the  Ulimit data type. This parameter requires version 1.18 of
            the Docker Remote API or greater on your container instance. To check the Docker Remote
            API version on your container instance, log in to your container instance and run the
            following command: ``sudo docker version --format '{{.Server.APIVersion}}'``

            .. note::

              This parameter is not supported for Windows containers.

            - *(dict) --*

              The ``ulimit`` settings to pass to the container.

              - **name** *(string) --*

                The ``type`` of the ``ulimit`` .

              - **softLimit** *(integer) --*

                The soft limit for the ulimit type.

              - **hardLimit** *(integer) --*

                The hard limit for the ulimit type.

          - **logConfiguration** *(dict) --*

            The log configuration specification for the container.

            This parameter maps to ``LogConfig`` in the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
            ``--log-driver`` option to `docker run
            <https://docs.docker.com/engine/reference/run/>`__ . By default, containers use the
            same logging driver that the Docker daemon uses. However the container may use a
            different logging driver than the Docker daemon by specifying a log driver with this
            parameter in the container definition. To use a different logging driver for a
            container, the log system must be configured properly on the container instance (or on
            a different log server for remote logging options). For more information on the options
            for different supported log drivers, see `Configure logging drivers
            <https://docs.docker.com/engine/admin/logging/overview/>`__ in the Docker documentation.

            .. note::

              Amazon ECS currently supports a subset of the logging drivers available to the Docker
              daemon (shown in the  LogConfiguration data type). Additional log drivers may be
              available in future releases of the Amazon ECS container agent.

            This parameter requires version 1.18 of the Docker Remote API or greater on your
            container instance. To check the Docker Remote API version on your container instance,
            log in to your container instance and run the following command: ``sudo docker version
            --format '{{.Server.APIVersion}}'``

            .. note::

              The Amazon ECS container agent running on a container instance must register the
              logging drivers available on that instance with the ``ECS_AVAILABLE_LOGGING_DRIVERS``
              environment variable before containers placed on that instance can use these log
              configuration options. For more information, see `Amazon ECS Container Agent
              Configuration
              <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html>`__
              in the *Amazon Elastic Container Service Developer Guide* .

            - **logDriver** *(string) --*

              The log driver to use for the container. The valid values listed for this parameter
              are log drivers that the Amazon ECS container agent can communicate with by default.

              For tasks using the Fargate launch type, the supported log drivers are ``awslogs``
              and ``splunk`` .

              For tasks using the EC2 launch type, the supported log drivers are ``awslogs`` ,
              ``fluentd`` , ``gelf`` , ``json-file`` , ``journald`` , ``logentries`` , ``syslog`` ,
              and ``splunk`` .

              For more information about using the ``awslogs`` log driver, see `Using the awslogs
              Log Driver
              <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_awslogs.html>`__
              in the *Amazon Elastic Container Service Developer Guide* .

              .. note::

                If you have a custom driver that is not listed above that you would like to work
                with the Amazon ECS container agent, you can fork the Amazon ECS container agent
                project that is `available on GitHub <https://github.com/aws/amazon-ecs-agent>`__
                and customize it to work with that driver. We encourage you to submit pull requests
                for changes that you would like to have included. However, Amazon Web Services does
                not currently support running modified copies of this software.

              This parameter requires version 1.18 of the Docker Remote API or greater on your
              container instance. To check the Docker Remote API version on your container
              instance, log in to your container instance and run the following command: ``sudo
              docker version --format '{{.Server.APIVersion}}'``

            - **options** *(dict) --*

              The configuration options to send to the log driver. This parameter requires version
              1.19 of the Docker Remote API or greater on your container instance. To check the
              Docker Remote API version on your container instance, log in to your container
              instance and run the following command: ``sudo docker version --format
              '{{.Server.APIVersion}}'``

              - *(string) --*

                - *(string) --*

            - **secretOptions** *(list) --*

              The secrets to pass to the log configuration. For more information, see `Specifying
              Sensitive Data
              <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html>`__
              in the *Amazon Elastic Container Service Developer Guide* .

              - *(dict) --*

                An object representing the secret to expose to your container. Secrets can be
                exposed to a container in the following ways:

                * To inject sensitive data into your containers as environment variables, use the
                ``secrets`` container definition parameter.

                * To reference sensitive information in the log configuration of a container, use
                the ``secretOptions`` container definition parameter.

                For more information, see `Specifying Sensitive Data
                <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html>`__
                in the *Amazon Elastic Container Service Developer Guide* .

                - **name** *(string) --*

                  The name of the secret.

                - **valueFrom** *(string) --*

                  The secret to expose to the container. The supported values are either the full
                  ARN of the AWS Secrets Manager secret or the full ARN of the parameter in the AWS
                  Systems Manager Parameter Store.

                  .. note::

                    If the AWS Systems Manager Parameter Store parameter exists in the same Region
                    as the task you are launching, then you can use either the full ARN or name of
                    the parameter. If the parameter exists in a different Region, then the full ARN
                    must be specified.

          - **healthCheck** *(dict) --*

            The health check command and associated configuration parameters for the container.
            This parameter maps to ``HealthCheck`` in the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
            ``HEALTHCHECK`` parameter of `docker run
            <https://docs.docker.com/engine/reference/run/>`__ .

            - **command** *(list) --*

              A string array representing the command that the container runs to determine if it is
              healthy. The string array must start with ``CMD`` to execute the command arguments
              directly, or ``CMD-SHELL`` to run the command with the container's default shell. For
              example:

               ``[ "CMD-SHELL", "curl -f http://localhost/ || exit 1" ]``

              An exit code of 0 indicates success, and non-zero exit code indicates failure. For
              more information, see ``HealthCheck`` in the `Create a container
              <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of
              the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ .

              - *(string) --*

            - **interval** *(integer) --*

              The time period in seconds between each health check execution. You may specify
              between 5 and 300 seconds. The default value is 30 seconds.

            - **timeout** *(integer) --*

              The time period in seconds to wait for a health check to succeed before it is
              considered a failure. You may specify between 2 and 60 seconds. The default value is
              5.

            - **retries** *(integer) --*

              The number of times to retry a failed health check before the container is considered
              unhealthy. You may specify between 1 and 10 retries. The default value is 3.

            - **startPeriod** *(integer) --*

              The optional grace period within which to provide containers time to bootstrap before
              failed health checks count towards the maximum number of retries. You may specify
              between 0 and 300 seconds. The ``startPeriod`` is disabled by default.

              .. note::

                If a health check succeeds within the ``startPeriod`` , then the container is
                considered healthy and any subsequent failures count toward the maximum number of
                retries.

          - **systemControls** *(list) --*

            A list of namespaced kernel parameters to set in the container. This parameter maps to
            ``Sysctls`` in the `Create a container
            <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
            `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--sysctl``
            option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

            .. note::

              It is not recommended that you specify network-related ``systemControls`` parameters
              for multiple containers in a single task that also uses either the ``awsvpc`` or
              ``host`` network modes. For tasks that use the ``awsvpc`` network mode, the container
              that is started last determines which ``systemControls`` parameters take effect. For
              tasks that use the ``host`` network mode, it changes the container instance's
              namespaced kernel parameters as well as the containers.

            - *(dict) --*

              A list of namespaced kernel parameters to set in the container. This parameter maps
              to ``Sysctls`` in the `Create a container
              <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of
              the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
              ``--sysctl`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__
              .

              It is not recommended that you specify network-related ``systemControls`` parameters
              for multiple containers in a single task that also uses either the ``awsvpc`` or
              ``host`` network mode for the following reasons:

              * For tasks that use the ``awsvpc`` network mode, if you set ``systemControls`` for
              any container, it applies to all containers in the task. If you set different
              ``systemControls`` for multiple containers in a single task, the container that is
              started last determines which ``systemControls`` take effect.

              * For tasks that use the ``host`` network mode, the ``systemControls`` parameter
              applies to the container instance's kernel parameter as well as that of all
              containers of any tasks running on that container instance.

              - **namespace** *(string) --*

                The namespaced kernel parameter for which to set a ``value`` .

              - **value** *(string) --*

                The value for the namespaced kernel parameter specified in ``namespace`` .

          - **resourceRequirements** *(list) --*

            The type and amount of a resource to assign to a container. The only supported resource
            is a GPU.

            - *(dict) --*

              The type and amount of a resource to assign to a container. The supported resource
              types are GPUs and Elastic Inference accelerators. For more information, see `Working
              with GPUs on Amazon ECS
              <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-gpu.html>`__ or
              `Working with Amazon Elastic Inference on Amazon ECS
              <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in the
              *Amazon Elastic Container Service Developer Guide*

              - **value** *(string) --*

                The value for the specified resource type.

                If the ``GPU`` type is used, the value is the number of physical ``GPUs`` the
                Amazon ECS container agent will reserve for the container. The number of GPUs
                reserved for all containers in a task should not exceed the number of available
                GPUs on the container instance the task is launched on.

                If the ``InferenceAccelerator`` type is used, the ``value`` should match the
                ``deviceName`` for an  InferenceAccelerator specified in a task definition.

              - **type** *(string) --*

                The type of resource to assign to a container. The supported values are ``GPU`` or
                ``InferenceAccelerator`` .

          - **firelensConfiguration** *(dict) --*

            The FireLens configuration for the container. This is used to specify and configure a
            log router for container logs. For more information, see `Custom Log Routing
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html>`__ in
            the *Amazon Elastic Container Service Developer Guide* .

            - **type** *(string) --*

              The log router to use. The valid values are ``fluentd`` or ``fluentbit`` .

            - **options** *(dict) --*

              The options to use when configuring the log router. This field is optional and can be
              used to add additional metadata, such as the task, task definition, cluster, and
              container instance details to the log event. If specified, the syntax to use is
              ``"options":{"enable-ecs-log-metadata":"true|false"}`` .

              - *(string) --*

                - *(string) --*

      - **family** *(string) --*

        The name of a family that this task definition is registered to. A family groups multiple
        versions of a task definition. Amazon ECS gives the first task definition that you
        registered to a family a revision number of 1. Amazon ECS gives sequential revision numbers
        to each task definition that you add.

      - **taskRoleArn** *(string) --*

        The short name or full Amazon Resource Name (ARN) of the AWS Identity and Access Management
        (IAM) role that grants containers in the task permission to call AWS APIs on your behalf.
        For more information, see `Amazon ECS Task Role
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_IAM_role.html>`__ in the
        *Amazon Elastic Container Service Developer Guide* .

        IAM roles for tasks on Windows require that the ``-EnableTaskIAMRole`` option is set when
        you launch the Amazon ECS-optimized Windows AMI. Your containers must also run some
        configuration code in order to take advantage of the feature. For more information, see
        `Windows IAM Roles for Tasks
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/windows_task_IAM_roles.html>`__
        in the *Amazon Elastic Container Service Developer Guide* .

      - **executionRoleArn** *(string) --*

        The Amazon Resource Name (ARN) of the task execution role that containers in this task can
        assume. All containers in this task are granted the permissions that are specified in this
        role.

      - **networkMode** *(string) --*

        The Docker networking mode to use for the containers in the task. The valid values are
        ``none`` , ``bridge`` , ``awsvpc`` , and ``host`` . The default Docker network mode is
        ``bridge`` . If you are using the Fargate launch type, the ``awsvpc`` network mode is
        required. If you are using the EC2 launch type, any network mode can be used. If the
        network mode is set to ``none`` , you cannot specify port mappings in your container
        definitions, and the tasks containers do not have external connectivity. The ``host`` and
        ``awsvpc`` network modes offer the highest networking performance for containers because
        they use the EC2 network stack instead of the virtualized network stack provided by the
        ``bridge`` mode.

        With the ``host`` and ``awsvpc`` network modes, exposed container ports are mapped directly
        to the corresponding host port (for the ``host`` network mode) or the attached elastic
        network interface port (for the ``awsvpc`` network mode), so you cannot take advantage of
        dynamic host port mappings.

        If the network mode is ``awsvpc`` , the task is allocated an elastic network interface, and
        you must specify a  NetworkConfiguration value when you create a service or run a task with
        the task definition. For more information, see `Task Networking
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html>`__ in
        the *Amazon Elastic Container Service Developer Guide* .

        .. note::

          Currently, only Amazon ECS-optimized AMIs, other Amazon Linux variants with the
          ``ecs-init`` package, or AWS Fargate infrastructure support the ``awsvpc`` network mode.

        If the network mode is ``host`` , you cannot run multiple instantiations of the same task
        on a single container instance when port mappings are used.

        Docker for Windows uses different network modes than Docker for Linux. When you register a
        task definition with Windows containers, you must not specify a network mode. If you use
        the console to register a task definition with Windows containers, you must choose the
        ``<default>`` network mode object.

        For more information, see `Network settings
        <https://docs.docker.com/engine/reference/run/#network-settings>`__ in the *Docker run
        reference* .

      - **revision** *(integer) --*

        The revision of the task in a particular family. The revision is a version number of a task
        definition in a family. When you register a task definition for the first time, the
        revision is ``1`` . Each time that you register a new revision of a task definition in the
        same family, the revision value always increases by one, even if you have deregistered
        previous revisions in this family.

      - **volumes** *(list) --*

        The list of volume definitions for the task.

        If your tasks are using the Fargate launch type, the ``host`` and ``sourcePath`` parameters
        are not supported.

        For more information about volume definition parameters and defaults, see `Amazon ECS Task
        Definitions
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definitions.html>`__ in
        the *Amazon Elastic Container Service Developer Guide* .

        - *(dict) --*

          A data volume used in a task definition. For tasks that use a Docker volume, specify a
          ``DockerVolumeConfiguration`` . For tasks that use a bind mount host volume, specify a
          ``host`` and optional ``sourcePath`` . For more information, see `Using Data Volumes in
          Tasks
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_data_volumes.html>`__ .

          - **name** *(string) --*

            The name of the volume. Up to 255 letters (uppercase and lowercase), numbers, and
            hyphens are allowed. This name is referenced in the ``sourceVolume`` parameter of
            container definition ``mountPoints`` .

          - **host** *(dict) --*

            This parameter is specified when you are using bind mount host volumes. Bind mount host
            volumes are supported when you are using either the EC2 or Fargate launch types. The
            contents of the ``host`` parameter determine whether your bind mount host volume
            persists on the host container instance and where it is stored. If the ``host``
            parameter is empty, then the Docker daemon assigns a host path for your data volume.
            However, the data is not guaranteed to persist after the containers associated with it
            stop running.

            Windows containers can mount whole directories on the same drive as
            ``$env:ProgramData`` . Windows containers cannot mount directories on a different
            drive, and mount point cannot be across drives. For example, you can mount
            ``C:\\my\\path:C:\\my\\path`` and ``D:\\:D:\\`` , but not ``D:\\my\\path:C:\\my\\path``
            or ``D:\\:C:\\my\\path`` .

            - **sourcePath** *(string) --*

              When the ``host`` parameter is used, specify a ``sourcePath`` to declare the path on
              the host container instance that is presented to the container. If this parameter is
              empty, then the Docker daemon has assigned a host path for you. If the ``host``
              parameter contains a ``sourcePath`` file location, then the data volume persists at
              the specified location on the host container instance until you delete it manually.
              If the ``sourcePath`` value does not exist on the host container instance, the Docker
              daemon creates it. If the location does exist, the contents of the source path folder
              are exported.

              If you are using the Fargate launch type, the ``sourcePath`` parameter is not
              supported.

          - **dockerVolumeConfiguration** *(dict) --*

            This parameter is specified when you are using Docker volumes. Docker volumes are only
            supported when you are using the EC2 launch type. Windows containers only support the
            use of the ``local`` driver. To use bind mounts, specify a ``host`` instead.

            - **scope** *(string) --*

              The scope for the Docker volume that determines its lifecycle. Docker volumes that
              are scoped to a ``task`` are automatically provisioned when the task starts and
              destroyed when the task stops. Docker volumes that are scoped as ``shared`` persist
              after the task stops.

            - **autoprovision** *(boolean) --*

              If this value is ``true`` , the Docker volume is created if it does not already exist.

              .. note::

                This field is only used if the ``scope`` is ``shared`` .

            - **driver** *(string) --*

              The Docker volume driver to use. The driver value must match the driver name provided
              by Docker because it is used for task placement. If the driver was installed using
              the Docker plugin CLI, use ``docker plugin ls`` to retrieve the driver name from your
              container instance. If the driver was installed using another method, use Docker
              plugin discovery to retrieve the driver name. For more information, see `Docker
              plugin discovery
              <https://docs.docker.com/engine/extend/plugin_api/#plugin-discovery>`__ . This
              parameter maps to ``Driver`` in the `Create a volume
              <https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate>`__ section of the
              `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
              ``xxdriver`` option to `docker volume create
              <https://docs.docker.com/engine/reference/commandline/volume_create/>`__ .

            - **driverOpts** *(dict) --*

              A map of Docker driver-specific options passed through. This parameter maps to
              ``DriverOpts`` in the `Create a volume
              <https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate>`__ section of the
              `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``xxopt``
              option to `docker volume create
              <https://docs.docker.com/engine/reference/commandline/volume_create/>`__ .

              - *(string) --*

                - *(string) --*

            - **labels** *(dict) --*

              Custom metadata to add to your Docker volume. This parameter maps to ``Labels`` in
              the `Create a volume
              <https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate>`__ section of the
              `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``xxlabel``
              option to `docker volume create
              <https://docs.docker.com/engine/reference/commandline/volume_create/>`__ .

              - *(string) --*

                - *(string) --*

      - **status** *(string) --*

        The status of the task definition.

      - **requiresAttributes** *(list) --*

        The container instance attributes required by your task. This field is not valid if you are
        using the Fargate launch type for your task.

        - *(dict) --*

          An attribute is a name-value pair associated with an Amazon ECS object. Attributes enable
          you to extend the Amazon ECS data model by adding custom metadata to your resources. For
          more information, see `Attributes
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html#attributes>`__
          in the *Amazon Elastic Container Service Developer Guide* .

          - **name** *(string) --*

            The name of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
            hyphens, underscores, and periods are allowed.

          - **value** *(string) --*

            The value of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
            hyphens, underscores, periods, at signs (@), forward slashes, colons, and spaces are
            allowed.

          - **targetType** *(string) --*

            The type of the target with which to attach the attribute. This parameter is required
            if you use the short form ID for a resource instead of the full ARN.

          - **targetId** *(string) --*

            The ID of the target. You can specify the short form ID for a resource or the full
            Amazon Resource Name (ARN).

      - **placementConstraints** *(list) --*

        An array of placement constraint objects to use for tasks. This field is not valid if you
        are using the Fargate launch type for your task.

        - *(dict) --*

          An object representing a constraint on task placement in the task definition. For more
          information, see `Task Placement Constraints
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

          .. note::

            If you are using the Fargate launch type, task placement constraints are not supported.

          - **type** *(string) --*

            The type of constraint. The ``MemberOf`` constraint restricts selection to be from a
            group of valid candidates.

          - **expression** *(string) --*

            A cluster query language expression to apply to the constraint. For more information,
            see `Cluster Query Language
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html>`__
            in the *Amazon Elastic Container Service Developer Guide* .

      - **compatibilities** *(list) --*

        The launch type to use with your task. For more information, see `Amazon ECS Launch Types
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html>`__ in the
        *Amazon Elastic Container Service Developer Guide* .

        - *(string) --*

      - **requiresCompatibilities** *(list) --*

        The launch type the task requires. If no value is specified, it will default to ``EC2`` .
        Valid values include ``EC2`` and ``FARGATE`` .

        - *(string) --*

      - **cpu** *(string) --*

        The number of ``cpu`` units used by the task. If you are using the EC2 launch type, this
        field is optional and any value can be used. If you are using the Fargate launch type, this
        field is required and you must use one of the following values, which determines your range
        of valid values for the ``memory`` parameter:

        * 256 (.25 vCPU) - Available ``memory`` values: 512 (0.5 GB), 1024 (1 GB), 2048 (2 GB)

        * 512 (.5 vCPU) - Available ``memory`` values: 1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096
        (4 GB)

        * 1024 (1 vCPU) - Available ``memory`` values: 2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120
        (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB)

        * 2048 (2 vCPU) - Available ``memory`` values: Between 4096 (4 GB) and 16384 (16 GB) in
        increments of 1024 (1 GB)

        * 4096 (4 vCPU) - Available ``memory`` values: Between 8192 (8 GB) and 30720 (30 GB) in
        increments of 1024 (1 GB)

      - **memory** *(string) --*

        The amount (in MiB) of memory used by the task.

        If using the EC2 launch type, this field is optional and any value can be used. If a
        task-level memory value is specified then the container-level memory value is optional.

        If using the Fargate launch type, this field is required and you must use one of the
        following values, which determines your range of valid values for the ``cpu`` parameter:

        * 512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) - Available ``cpu`` values: 256 (.25 vCPU)

        * 1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available ``cpu`` values: 512 (.5
        vCPU)

        * 2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB)
        - Available ``cpu`` values: 1024 (1 vCPU)

        * Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB) - Available ``cpu``
        values: 2048 (2 vCPU)

        * Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB) - Available ``cpu``
        values: 4096 (4 vCPU)

      - **inferenceAccelerators** *(list) --*

        The Elastic Inference accelerator associated with the task.

        - *(dict) --*

          Details on a Elastic Inference accelerator. For more information, see `Working with
          Amazon Elastic Inference on Amazon ECS
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in the
          *Amazon Elastic Container Service Developer Guide* .

          - **deviceName** *(string) --*

            The Elastic Inference accelerator device name. The ``deviceName`` must also be
            referenced in a container definition as a  ResourceRequirement .

          - **deviceType** *(string) --*

            The Elastic Inference accelerator type to use.

      - **pidMode** *(string) --*

        The process namespace to use for the containers in the task. The valid values are ``host``
        or ``task`` . If ``host`` is specified, then all containers within the tasks that specified
        the ``host`` PID mode on the same container instance share the same process namespace with
        the host Amazon EC2 instance. If ``task`` is specified, all containers within the specified
        task share the same process namespace. If no value is specified, the default is a private
        namespace. For more information, see `PID settings
        <https://docs.docker.com/engine/reference/run/#pid-settings---pid>`__ in the *Docker run
        reference* .

        If the ``host`` PID mode is used, be aware that there is a heightened risk of undesired
        process namespace expose. For more information, see `Docker security
        <https://docs.docker.com/engine/security/security/>`__ .

        .. note::

          This parameter is not supported for Windows containers or tasks using the Fargate launch
          type.

      - **ipcMode** *(string) --*

        The IPC resource namespace to use for the containers in the task. The valid values are
        ``host`` , ``task`` , or ``none`` . If ``host`` is specified, then all containers within
        the tasks that specified the ``host`` IPC mode on the same container instance share the
        same IPC resources with the host Amazon EC2 instance. If ``task`` is specified, all
        containers within the specified task share the same IPC resources. If ``none`` is
        specified, then IPC resources within the containers of a task are private and not shared
        with other containers in a task or on the container instance. If no value is specified,
        then the IPC resource namespace sharing depends on the Docker daemon setting on the
        container instance. For more information, see `IPC settings
        <https://docs.docker.com/engine/reference/run/#ipc-settings---ipc>`__ in the *Docker run
        reference* .

        If the ``host`` IPC mode is used, be aware that there is a heightened risk of undesired IPC
        namespace expose. For more information, see `Docker security
        <https://docs.docker.com/engine/security/security/>`__ .

        If you are setting namespaced kernel parameters using ``systemControls`` for the containers
        in the task, the following will apply to your IPC resource namespace. For more information,
        see `System Controls
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html>`__
        in the *Amazon Elastic Container Service Developer Guide* .

        * For tasks that use the ``host`` IPC mode, IPC namespace related ``systemControls`` are
        not supported.

        * For tasks that use the ``task`` IPC mode, IPC namespace related ``systemControls`` will
        apply to all containers within a task.

        .. note::

          This parameter is not supported for Windows containers or tasks using the Fargate launch
          type.

      - **proxyConfiguration** *(dict) --*

        The configuration details for the App Mesh proxy.

        Your Amazon ECS container instances require at least version 1.26.0 of the container agent
        and at least version 1.26.0-1 of the ``ecs-init`` package to enable a proxy configuration.
        If your container instances are launched from the Amazon ECS-optimized AMI version
        ``20190301`` or later, then they contain the required versions of the container agent and
        ``ecs-init`` . For more information, see `Amazon ECS-optimized Linux AMI
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html>`__ in
        the *Amazon Elastic Container Service Developer Guide* .

        - **type** *(string) --*

          The proxy type. The only supported value is ``APPMESH`` .

        - **containerName** *(string) --*

          The name of the container that will serve as the App Mesh proxy.

        - **properties** *(list) --*

          The set of network configuration parameters to provide the Container Network Interface
          (CNI) plugin, specified as key-value pairs.

          * ``IgnoredUID`` - (Required) The user ID (UID) of the proxy container as defined by the
          ``user`` parameter in a container definition. This is used to ensure the proxy ignores
          its own traffic. If ``IgnoredGID`` is specified, this field can be empty.

          * ``IgnoredGID`` - (Required) The group ID (GID) of the proxy container as defined by the
          ``user`` parameter in a container definition. This is used to ensure the proxy ignores
          its own traffic. If ``IgnoredUID`` is specified, this field can be empty.

          * ``AppPorts`` - (Required) The list of ports that the application uses. Network traffic
          to these ports is forwarded to the ``ProxyIngressPort`` and ``ProxyEgressPort`` .

          * ``ProxyIngressPort`` - (Required) Specifies the port that incoming traffic to the
          ``AppPorts`` is directed to.

          * ``ProxyEgressPort`` - (Required) Specifies the port that outgoing traffic from the
          ``AppPorts`` is directed to.

          * ``EgressIgnoredPorts`` - (Required) The egress traffic going to the specified ports is
          ignored and not redirected to the ``ProxyEgressPort`` . It can be an empty list.

          * ``EgressIgnoredIPs`` - (Required) The egress traffic going to the specified IP
          addresses is ignored and not redirected to the ``ProxyEgressPort`` . It can be an empty
          list.

          - *(dict) --*

            A key-value pair object.

            - **name** *(string) --*

              The name of the key-value pair. For environment variables, this is the name of the
              environment variable.

            - **value** *(string) --*

              The value of the key-value pair. For environment variables, this is the value of the
              environment variable.

    - **tags** *(list) --*

      The list of tags associated with the task definition.

      - *(dict) --*

        The metadata that you apply to a resource to help you categorize and organize them. Each
        tag consists of a key and an optional value, both of which you define.

        The following basic restrictions apply to tags:

        * Maximum number of tags per resource - 50

        * For each resource, each tag key must be unique, and each tag key can have only one value.

        * Maximum key length - 128 Unicode characters in UTF-8

        * Maximum value length - 256 Unicode characters in UTF-8

        * If your tagging schema is used across multiple services and resources, remember that
        other services may have restrictions on allowed characters. Generally allowed characters
        are: letters, numbers, and spaces representable in UTF-8, and the following characters: + -
        = . _ : / @.

        * Tag keys and values are case-sensitive.

        * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
        prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
        tag keys or values with this prefix. Tags with this prefix do not count against your tags
        per resource limit.

        - **key** *(string) --*

          One part of a key-value pair that make up a tag. A ``key`` is a general label that acts
          like a category for more specific tag values.

        - **value** *(string) --*

          The optional part of a key-value pair that make up a tag. A ``value`` acts as a
          descriptor within a tag category (key).
    """


_ClientRegisterTaskDefinitioncontainerDefinitionsdependsOnTypeDef = TypedDict(
    "_ClientRegisterTaskDefinitioncontainerDefinitionsdependsOnTypeDef",
    {"containerName": str, "condition": str},
)


class ClientRegisterTaskDefinitioncontainerDefinitionsdependsOnTypeDef(
    _ClientRegisterTaskDefinitioncontainerDefinitionsdependsOnTypeDef
):
    """
    Type definition for `ClientRegisterTaskDefinitioncontainerDefinitions` `dependsOn`

    The dependencies defined for container startup and shutdown. A container can contain
    multiple dependencies. When a dependency is defined for container startup, for container
    shutdown it is reversed.

    Your Amazon ECS container instances require at least version 1.26.0 of the container agent
    to enable container dependencies. However, we recommend using the latest container agent
    version. For information about checking your agent version and updating to the latest
    version, see `Updating the Amazon ECS Container Agent
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html>`__ in
    the *Amazon Elastic Container Service Developer Guide* . If you are using an Amazon
    ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the ``ecs-init``
    package. If your container instances are launched from version ``20190301`` or later, then
    they contain the required versions of the container agent and ``ecs-init`` . For more
    information, see `Amazon ECS-optimized Linux AMI
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html>`__ in
    the *Amazon Elastic Container Service Developer Guide* .

    .. note::

      If you are using tasks that use the Fargate launch type, container dependency parameters
      are not supported.

    - **containerName** *(string) --* **[REQUIRED]**

      The name of a container.

    - **condition** *(string) --* **[REQUIRED]**

      The dependency condition of the container. The following are the available conditions and
      their behavior:

      * ``START`` - This condition emulates the behavior of links and volumes today. It
      validates that a dependent container is started before permitting other containers to
      start.

      * ``COMPLETE`` - This condition validates that a dependent container runs to completion
      (exits) before permitting other containers to start. This can be useful for nonessential
      containers that run a script and then exit.

      * ``SUCCESS`` - This condition is the same as ``COMPLETE`` , but it also requires that
      the container exits with a ``zero`` status.

      * ``HEALTHY`` - This condition validates that the dependent container passes its Docker
      health check before permitting other containers to start. This requires that the
      dependent container has health checks configured. This condition is confirmed only at
      task startup.
    """


_ClientRegisterTaskDefinitioncontainerDefinitionsenvironmentTypeDef = TypedDict(
    "_ClientRegisterTaskDefinitioncontainerDefinitionsenvironmentTypeDef",
    {"name": str, "value": str},
    total=False,
)


class ClientRegisterTaskDefinitioncontainerDefinitionsenvironmentTypeDef(
    _ClientRegisterTaskDefinitioncontainerDefinitionsenvironmentTypeDef
):
    """
    Type definition for `ClientRegisterTaskDefinitioncontainerDefinitions` `environment`

    A key-value pair object.

    - **name** *(string) --*

      The name of the key-value pair. For environment variables, this is the name of the
      environment variable.

    - **value** *(string) --*

      The value of the key-value pair. For environment variables, this is the value of the
      environment variable.
    """


_ClientRegisterTaskDefinitioncontainerDefinitionsextraHostsTypeDef = TypedDict(
    "_ClientRegisterTaskDefinitioncontainerDefinitionsextraHostsTypeDef",
    {"hostname": str, "ipAddress": str},
)


class ClientRegisterTaskDefinitioncontainerDefinitionsextraHostsTypeDef(
    _ClientRegisterTaskDefinitioncontainerDefinitionsextraHostsTypeDef
):
    """
    Type definition for `ClientRegisterTaskDefinitioncontainerDefinitions` `extraHosts`

    Hostnames and IP address entries that are added to the ``/etc/hosts`` file of a container
    via the ``extraHosts`` parameter of its  ContainerDefinition .

    - **hostname** *(string) --* **[REQUIRED]**

      The hostname to use in the ``/etc/hosts`` entry.

    - **ipAddress** *(string) --* **[REQUIRED]**

      The IP address to use in the ``/etc/hosts`` entry.
    """


_RequiredClientRegisterTaskDefinitioncontainerDefinitionsfirelensConfigurationTypeDef = TypedDict(
    "_RequiredClientRegisterTaskDefinitioncontainerDefinitionsfirelensConfigurationTypeDef",
    {"type": str},
)
_OptionalClientRegisterTaskDefinitioncontainerDefinitionsfirelensConfigurationTypeDef = TypedDict(
    "_OptionalClientRegisterTaskDefinitioncontainerDefinitionsfirelensConfigurationTypeDef",
    {"options": Dict[str, str]},
    total=False,
)


class ClientRegisterTaskDefinitioncontainerDefinitionsfirelensConfigurationTypeDef(
    _RequiredClientRegisterTaskDefinitioncontainerDefinitionsfirelensConfigurationTypeDef,
    _OptionalClientRegisterTaskDefinitioncontainerDefinitionsfirelensConfigurationTypeDef,
):
    """
    Type definition for `ClientRegisterTaskDefinitioncontainerDefinitions` `firelensConfiguration`

    The FireLens configuration for the container. This is used to specify and configure a log
    router for container logs. For more information, see `Custom Log Routing
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html>`__ in the
    *Amazon Elastic Container Service Developer Guide* .

    - **type** *(string) --* **[REQUIRED]**

      The log router to use. The valid values are ``fluentd`` or ``fluentbit`` .

    - **options** *(dict) --*

      The options to use when configuring the log router. This field is optional and can be used
      to add additional metadata, such as the task, task definition, cluster, and container
      instance details to the log event. If specified, the syntax to use is
      ``"options":{"enable-ecs-log-metadata":"true|false"}`` .

      - *(string) --*

        - *(string) --*
    """


_RequiredClientRegisterTaskDefinitioncontainerDefinitionshealthCheckTypeDef = TypedDict(
    "_RequiredClientRegisterTaskDefinitioncontainerDefinitionshealthCheckTypeDef",
    {"command": List[str]},
)
_OptionalClientRegisterTaskDefinitioncontainerDefinitionshealthCheckTypeDef = TypedDict(
    "_OptionalClientRegisterTaskDefinitioncontainerDefinitionshealthCheckTypeDef",
    {"interval": int, "timeout": int, "retries": int, "startPeriod": int},
    total=False,
)


class ClientRegisterTaskDefinitioncontainerDefinitionshealthCheckTypeDef(
    _RequiredClientRegisterTaskDefinitioncontainerDefinitionshealthCheckTypeDef,
    _OptionalClientRegisterTaskDefinitioncontainerDefinitionshealthCheckTypeDef,
):
    """
    Type definition for `ClientRegisterTaskDefinitioncontainerDefinitions` `healthCheck`

    The health check command and associated configuration parameters for the container. This
    parameter maps to ``HealthCheck`` in the `Create a container
    <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
    `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``HEALTHCHECK``
    parameter of `docker run <https://docs.docker.com/engine/reference/run/>`__ .

    - **command** *(list) --* **[REQUIRED]**

      A string array representing the command that the container runs to determine if it is
      healthy. The string array must start with ``CMD`` to execute the command arguments
      directly, or ``CMD-SHELL`` to run the command with the container's default shell. For
      example:

       ``[ "CMD-SHELL", "curl -f http://localhost/ || exit 1" ]``

      An exit code of 0 indicates success, and non-zero exit code indicates failure. For more
      information, see ``HealthCheck`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ .

      - *(string) --*

    - **interval** *(integer) --*

      The time period in seconds between each health check execution. You may specify between 5
      and 300 seconds. The default value is 30 seconds.

    - **timeout** *(integer) --*

      The time period in seconds to wait for a health check to succeed before it is considered a
      failure. You may specify between 2 and 60 seconds. The default value is 5.

    - **retries** *(integer) --*

      The number of times to retry a failed health check before the container is considered
      unhealthy. You may specify between 1 and 10 retries. The default value is 3.

    - **startPeriod** *(integer) --*

      The optional grace period within which to provide containers time to bootstrap before
      failed health checks count towards the maximum number of retries. You may specify between 0
      and 300 seconds. The ``startPeriod`` is disabled by default.

      .. note::

        If a health check succeeds within the ``startPeriod`` , then the container is considered
        healthy and any subsequent failures count toward the maximum number of retries.
    """


_ClientRegisterTaskDefinitioncontainerDefinitionslinuxParameterscapabilitiesTypeDef = TypedDict(
    "_ClientRegisterTaskDefinitioncontainerDefinitionslinuxParameterscapabilitiesTypeDef",
    {"add": List[str], "drop": List[str]},
    total=False,
)


class ClientRegisterTaskDefinitioncontainerDefinitionslinuxParameterscapabilitiesTypeDef(
    _ClientRegisterTaskDefinitioncontainerDefinitionslinuxParameterscapabilitiesTypeDef
):
    """
    Type definition for `ClientRegisterTaskDefinitioncontainerDefinitionslinuxParameters` `capabilities`

    The Linux capabilities for the container that are added to or dropped from the default
    configuration provided by Docker.

    .. note::

      If you are using tasks that use the Fargate launch type, ``capabilities`` is supported
      but the ``add`` parameter is not supported.

    - **add** *(list) --*

      The Linux capabilities for the container that have been added to the default
      configuration provided by Docker. This parameter maps to ``CapAdd`` in the `Create a
      container <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__
      section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
      ``--cap-add`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

      .. note::

        If you are using tasks that use the Fargate launch type, the ``add`` parameter is not
        supported.

      Valid values: ``"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" | "BLOCK_SUSPEND" | "CHOWN" |
      "DAC_OVERRIDE" | "DAC_READ_SEARCH" | "FOWNER" | "FSETID" | "IPC_LOCK" | "IPC_OWNER" |
      "KILL" | "LEASE" | "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" | "MKNOD" |
      "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" | "SETFCAP" | "SETGID" |
      "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT" | "SYS_CHROOT" | "SYS_MODULE" |
      "SYS_NICE" | "SYS_PACCT" | "SYS_PTRACE" | "SYS_RAWIO" | "SYS_RESOURCE" | "SYS_TIME" |
      "SYS_TTY_CONFIG" | "SYSLOG" | "WAKE_ALARM"``

      - *(string) --*

    - **drop** *(list) --*

      The Linux capabilities for the container that have been removed from the default
      configuration provided by Docker. This parameter maps to ``CapDrop`` in the `Create a
      container <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__
      section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
      ``--cap-drop`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

      Valid values: ``"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" | "BLOCK_SUSPEND" | "CHOWN" |
      "DAC_OVERRIDE" | "DAC_READ_SEARCH" | "FOWNER" | "FSETID" | "IPC_LOCK" | "IPC_OWNER" |
      "KILL" | "LEASE" | "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" | "MKNOD" |
      "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" | "SETFCAP" | "SETGID" |
      "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT" | "SYS_CHROOT" | "SYS_MODULE" |
      "SYS_NICE" | "SYS_PACCT" | "SYS_PTRACE" | "SYS_RAWIO" | "SYS_RESOURCE" | "SYS_TIME" |
      "SYS_TTY_CONFIG" | "SYSLOG" | "WAKE_ALARM"``

      - *(string) --*
    """


_RequiredClientRegisterTaskDefinitioncontainerDefinitionslinuxParametersdevicesTypeDef = TypedDict(
    "_RequiredClientRegisterTaskDefinitioncontainerDefinitionslinuxParametersdevicesTypeDef",
    {"hostPath": str},
)
_OptionalClientRegisterTaskDefinitioncontainerDefinitionslinuxParametersdevicesTypeDef = TypedDict(
    "_OptionalClientRegisterTaskDefinitioncontainerDefinitionslinuxParametersdevicesTypeDef",
    {"containerPath": str, "permissions": List[str]},
    total=False,
)


class ClientRegisterTaskDefinitioncontainerDefinitionslinuxParametersdevicesTypeDef(
    _RequiredClientRegisterTaskDefinitioncontainerDefinitionslinuxParametersdevicesTypeDef,
    _OptionalClientRegisterTaskDefinitioncontainerDefinitionslinuxParametersdevicesTypeDef,
):
    """
    Type definition for `ClientRegisterTaskDefinitioncontainerDefinitionslinuxParameters` `devices`

    An object representing a container instance host device.

    - **hostPath** *(string) --* **[REQUIRED]**

      The path for the device on the host container instance.

    - **containerPath** *(string) --*

      The path inside the container at which to expose the host device.

    - **permissions** *(list) --*

      The explicit permissions to provide to the container for the device. By default, the
      container has permissions for ``read`` , ``write`` , and ``mknod`` for the device.

      - *(string) --*
    """


_RequiredClientRegisterTaskDefinitioncontainerDefinitionslinuxParameterstmpfsTypeDef = TypedDict(
    "_RequiredClientRegisterTaskDefinitioncontainerDefinitionslinuxParameterstmpfsTypeDef",
    {"containerPath": str, "size": int},
)
_OptionalClientRegisterTaskDefinitioncontainerDefinitionslinuxParameterstmpfsTypeDef = TypedDict(
    "_OptionalClientRegisterTaskDefinitioncontainerDefinitionslinuxParameterstmpfsTypeDef",
    {"mountOptions": List[str]},
    total=False,
)


class ClientRegisterTaskDefinitioncontainerDefinitionslinuxParameterstmpfsTypeDef(
    _RequiredClientRegisterTaskDefinitioncontainerDefinitionslinuxParameterstmpfsTypeDef,
    _OptionalClientRegisterTaskDefinitioncontainerDefinitionslinuxParameterstmpfsTypeDef,
):
    """
    Type definition for `ClientRegisterTaskDefinitioncontainerDefinitionslinuxParameters` `tmpfs`

    The container path, mount options, and size of the tmpfs mount.

    - **containerPath** *(string) --* **[REQUIRED]**

      The absolute file path where the tmpfs volume is to be mounted.

    - **size** *(integer) --* **[REQUIRED]**

      The size (in MiB) of the tmpfs volume.

    - **mountOptions** *(list) --*

      The list of tmpfs volume mount options.

      Valid values: ``"defaults" | "ro" | "rw" | "suid" | "nosuid" | "dev" | "nodev" | "exec"
      | "noexec" | "sync" | "async" | "dirsync" | "remount" | "mand" | "nomand" | "atime" |
      "noatime" | "diratime" | "nodiratime" | "bind" | "rbind" | "unbindable" | "runbindable"
      | "private" | "rprivate" | "shared" | "rshared" | "slave" | "rslave" | "relatime" |
      "norelatime" | "strictatime" | "nostrictatime" | "mode" | "uid" | "gid" | "nr_inodes" |
      "nr_blocks" | "mpol"``

      - *(string) --*
    """


_ClientRegisterTaskDefinitioncontainerDefinitionslinuxParametersTypeDef = TypedDict(
    "_ClientRegisterTaskDefinitioncontainerDefinitionslinuxParametersTypeDef",
    {
        "capabilities": ClientRegisterTaskDefinitioncontainerDefinitionslinuxParameterscapabilitiesTypeDef,
        "devices": List[
            ClientRegisterTaskDefinitioncontainerDefinitionslinuxParametersdevicesTypeDef
        ],
        "initProcessEnabled": bool,
        "sharedMemorySize": int,
        "tmpfs": List[
            ClientRegisterTaskDefinitioncontainerDefinitionslinuxParameterstmpfsTypeDef
        ],
        "maxSwap": int,
        "swappiness": int,
    },
    total=False,
)


class ClientRegisterTaskDefinitioncontainerDefinitionslinuxParametersTypeDef(
    _ClientRegisterTaskDefinitioncontainerDefinitionslinuxParametersTypeDef
):
    """
    Type definition for `ClientRegisterTaskDefinitioncontainerDefinitions` `linuxParameters`

    Linux-specific modifications that are applied to the container, such as Linux kernel
    capabilities. For more information see  KernelCapabilities .

    .. note::

      This parameter is not supported for Windows containers.

    - **capabilities** *(dict) --*

      The Linux capabilities for the container that are added to or dropped from the default
      configuration provided by Docker.

      .. note::

        If you are using tasks that use the Fargate launch type, ``capabilities`` is supported
        but the ``add`` parameter is not supported.

      - **add** *(list) --*

        The Linux capabilities for the container that have been added to the default
        configuration provided by Docker. This parameter maps to ``CapAdd`` in the `Create a
        container <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__
        section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
        ``--cap-add`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

        .. note::

          If you are using tasks that use the Fargate launch type, the ``add`` parameter is not
          supported.

        Valid values: ``"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" | "BLOCK_SUSPEND" | "CHOWN" |
        "DAC_OVERRIDE" | "DAC_READ_SEARCH" | "FOWNER" | "FSETID" | "IPC_LOCK" | "IPC_OWNER" |
        "KILL" | "LEASE" | "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" | "MKNOD" |
        "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" | "SETFCAP" | "SETGID" |
        "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT" | "SYS_CHROOT" | "SYS_MODULE" |
        "SYS_NICE" | "SYS_PACCT" | "SYS_PTRACE" | "SYS_RAWIO" | "SYS_RESOURCE" | "SYS_TIME" |
        "SYS_TTY_CONFIG" | "SYSLOG" | "WAKE_ALARM"``

        - *(string) --*

      - **drop** *(list) --*

        The Linux capabilities for the container that have been removed from the default
        configuration provided by Docker. This parameter maps to ``CapDrop`` in the `Create a
        container <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__
        section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
        ``--cap-drop`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

        Valid values: ``"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" | "BLOCK_SUSPEND" | "CHOWN" |
        "DAC_OVERRIDE" | "DAC_READ_SEARCH" | "FOWNER" | "FSETID" | "IPC_LOCK" | "IPC_OWNER" |
        "KILL" | "LEASE" | "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" | "MKNOD" |
        "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" | "SETFCAP" | "SETGID" |
        "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT" | "SYS_CHROOT" | "SYS_MODULE" |
        "SYS_NICE" | "SYS_PACCT" | "SYS_PTRACE" | "SYS_RAWIO" | "SYS_RESOURCE" | "SYS_TIME" |
        "SYS_TTY_CONFIG" | "SYSLOG" | "WAKE_ALARM"``

        - *(string) --*

    - **devices** *(list) --*

      Any host devices to expose to the container. This parameter maps to ``Devices`` in the
      `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--device``
      option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

      .. note::

        If you are using tasks that use the Fargate launch type, the ``devices`` parameter is not
        supported.

      - *(dict) --*

        An object representing a container instance host device.

        - **hostPath** *(string) --* **[REQUIRED]**

          The path for the device on the host container instance.

        - **containerPath** *(string) --*

          The path inside the container at which to expose the host device.

        - **permissions** *(list) --*

          The explicit permissions to provide to the container for the device. By default, the
          container has permissions for ``read`` , ``write`` , and ``mknod`` for the device.

          - *(string) --*

    - **initProcessEnabled** *(boolean) --*

      Run an ``init`` process inside the container that forwards signals and reaps processes.
      This parameter maps to the ``--init`` option to `docker run
      <https://docs.docker.com/engine/reference/run/>`__ . This parameter requires version 1.25
      of the Docker Remote API or greater on your container instance. To check the Docker Remote
      API version on your container instance, log in to your container instance and run the
      following command: ``sudo docker version --format '{{.Server.APIVersion}}'``

    - **sharedMemorySize** *(integer) --*

      The value for the size (in MiB) of the ``/dev/shm`` volume. This parameter maps to the
      ``--shm-size`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

      .. note::

        If you are using tasks that use the Fargate launch type, the ``sharedMemorySize``
        parameter is not supported.

    - **tmpfs** *(list) --*

      The container path, mount options, and size (in MiB) of the tmpfs mount. This parameter
      maps to the ``--tmpfs`` option to `docker run
      <https://docs.docker.com/engine/reference/run/>`__ .

      .. note::

        If you are using tasks that use the Fargate launch type, the ``tmpfs`` parameter is not
        supported.

      - *(dict) --*

        The container path, mount options, and size of the tmpfs mount.

        - **containerPath** *(string) --* **[REQUIRED]**

          The absolute file path where the tmpfs volume is to be mounted.

        - **size** *(integer) --* **[REQUIRED]**

          The size (in MiB) of the tmpfs volume.

        - **mountOptions** *(list) --*

          The list of tmpfs volume mount options.

          Valid values: ``"defaults" | "ro" | "rw" | "suid" | "nosuid" | "dev" | "nodev" | "exec"
          | "noexec" | "sync" | "async" | "dirsync" | "remount" | "mand" | "nomand" | "atime" |
          "noatime" | "diratime" | "nodiratime" | "bind" | "rbind" | "unbindable" | "runbindable"
          | "private" | "rprivate" | "shared" | "rshared" | "slave" | "rslave" | "relatime" |
          "norelatime" | "strictatime" | "nostrictatime" | "mode" | "uid" | "gid" | "nr_inodes" |
          "nr_blocks" | "mpol"``

          - *(string) --*

    - **maxSwap** *(integer) --*

      The total amount of swap memory (in MiB) a container can use. This parameter will be
      translated to the ``--memory-swap`` option to `docker run
      <https://docs.docker.com/engine/reference/run/>`__ where the value would be the sum of the
      container memory plus the ``maxSwap`` value.

      If a ``maxSwap`` value of ``0`` is specified, the container will not use swap. Accepted
      values are ``0`` or any positive integer. If the ``maxSwap`` parameter is omitted, the
      container will use the swap configuration for the container instance it is running on. A
      ``maxSwap`` value must be set for the ``swappiness`` parameter to be used.

      .. note::

        If you are using tasks that use the Fargate launch type, the ``maxSwap`` parameter is not
        supported.

    - **swappiness** *(integer) --*

      This allows you to tune a container's memory swappiness behavior. A ``swappiness`` value of
      ``0`` will cause swapping to not happen unless absolutely necessary. A ``swappiness`` value
      of ``100`` will cause pages to be swapped very aggressively. Accepted values are whole
      numbers between ``0`` and ``100`` . If the ``swappiness`` parameter is not specified, a
      default value of ``60`` is used. If a value is not specified for ``maxSwap`` then this
      parameter is ignored. This parameter maps to the ``--memory-swappiness`` option to `docker
      run <https://docs.docker.com/engine/reference/run/>`__ .

      .. note::

        If you are using tasks that use the Fargate launch type, the ``swappiness`` parameter is
        not supported.
    """


_ClientRegisterTaskDefinitioncontainerDefinitionslogConfigurationsecretOptionsTypeDef = TypedDict(
    "_ClientRegisterTaskDefinitioncontainerDefinitionslogConfigurationsecretOptionsTypeDef",
    {"name": str, "valueFrom": str},
)


class ClientRegisterTaskDefinitioncontainerDefinitionslogConfigurationsecretOptionsTypeDef(
    _ClientRegisterTaskDefinitioncontainerDefinitionslogConfigurationsecretOptionsTypeDef
):
    """
    Type definition for `ClientRegisterTaskDefinitioncontainerDefinitionslogConfiguration` `secretOptions`

    An object representing the secret to expose to your container. Secrets can be exposed to
    a container in the following ways:

    * To inject sensitive data into your containers as environment variables, use the
    ``secrets`` container definition parameter.

    * To reference sensitive information in the log configuration of a container, use the
    ``secretOptions`` container definition parameter.

    For more information, see `Specifying Sensitive Data
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html>`__
    in the *Amazon Elastic Container Service Developer Guide* .

    - **name** *(string) --* **[REQUIRED]**

      The name of the secret.

    - **valueFrom** *(string) --* **[REQUIRED]**

      The secret to expose to the container. The supported values are either the full ARN of
      the AWS Secrets Manager secret or the full ARN of the parameter in the AWS Systems
      Manager Parameter Store.

      .. note::

        If the AWS Systems Manager Parameter Store parameter exists in the same Region as the
        task you are launching, then you can use either the full ARN or name of the
        parameter. If the parameter exists in a different Region, then the full ARN must be
        specified.
    """


_RequiredClientRegisterTaskDefinitioncontainerDefinitionslogConfigurationTypeDef = TypedDict(
    "_RequiredClientRegisterTaskDefinitioncontainerDefinitionslogConfigurationTypeDef",
    {"logDriver": str},
)
_OptionalClientRegisterTaskDefinitioncontainerDefinitionslogConfigurationTypeDef = TypedDict(
    "_OptionalClientRegisterTaskDefinitioncontainerDefinitionslogConfigurationTypeDef",
    {
        "options": Dict[str, str],
        "secretOptions": List[
            ClientRegisterTaskDefinitioncontainerDefinitionslogConfigurationsecretOptionsTypeDef
        ],
    },
    total=False,
)


class ClientRegisterTaskDefinitioncontainerDefinitionslogConfigurationTypeDef(
    _RequiredClientRegisterTaskDefinitioncontainerDefinitionslogConfigurationTypeDef,
    _OptionalClientRegisterTaskDefinitioncontainerDefinitionslogConfigurationTypeDef,
):
    """
    Type definition for `ClientRegisterTaskDefinitioncontainerDefinitions` `logConfiguration`

    The log configuration specification for the container.

    This parameter maps to ``LogConfig`` in the `Create a container
    <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
    `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--log-driver``
    option to `docker run <https://docs.docker.com/engine/reference/run/>`__ . By default,
    containers use the same logging driver that the Docker daemon uses. However the container may
    use a different logging driver than the Docker daemon by specifying a log driver with this
    parameter in the container definition. To use a different logging driver for a container, the
    log system must be configured properly on the container instance (or on a different log
    server for remote logging options). For more information on the options for different
    supported log drivers, see `Configure logging drivers
    <https://docs.docker.com/engine/admin/logging/overview/>`__ in the Docker documentation.

    .. note::

      Amazon ECS currently supports a subset of the logging drivers available to the Docker
      daemon (shown in the  LogConfiguration data type). Additional log drivers may be available
      in future releases of the Amazon ECS container agent.

    This parameter requires version 1.18 of the Docker Remote API or greater on your container
    instance. To check the Docker Remote API version on your container instance, log in to your
    container instance and run the following command: ``sudo docker version --format
    '{{.Server.APIVersion}}'``

    .. note::

      The Amazon ECS container agent running on a container instance must register the logging
      drivers available on that instance with the ``ECS_AVAILABLE_LOGGING_DRIVERS`` environment
      variable before containers placed on that instance can use these log configuration options.
      For more information, see `Amazon ECS Container Agent Configuration
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html>`__ in
      the *Amazon Elastic Container Service Developer Guide* .

    - **logDriver** *(string) --* **[REQUIRED]**

      The log driver to use for the container. The valid values listed for this parameter are log
      drivers that the Amazon ECS container agent can communicate with by default.

      For tasks using the Fargate launch type, the supported log drivers are ``awslogs`` and
      ``splunk`` .

      For tasks using the EC2 launch type, the supported log drivers are ``awslogs`` ,
      ``fluentd`` , ``gelf`` , ``json-file`` , ``journald`` , ``logentries`` , ``syslog`` , and
      ``splunk`` .

      For more information about using the ``awslogs`` log driver, see `Using the awslogs Log
      Driver <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_awslogs.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

      .. note::

        If you have a custom driver that is not listed above that you would like to work with the
        Amazon ECS container agent, you can fork the Amazon ECS container agent project that is
        `available on GitHub <https://github.com/aws/amazon-ecs-agent>`__ and customize it to
        work with that driver. We encourage you to submit pull requests for changes that you
        would like to have included. However, Amazon Web Services does not currently support
        running modified copies of this software.

      This parameter requires version 1.18 of the Docker Remote API or greater on your container
      instance. To check the Docker Remote API version on your container instance, log in to your
      container instance and run the following command: ``sudo docker version --format
      '{{.Server.APIVersion}}'``

    - **options** *(dict) --*

      The configuration options to send to the log driver. This parameter requires version 1.19
      of the Docker Remote API or greater on your container instance. To check the Docker Remote
      API version on your container instance, log in to your container instance and run the
      following command: ``sudo docker version --format '{{.Server.APIVersion}}'``

      - *(string) --*

        - *(string) --*

    - **secretOptions** *(list) --*

      The secrets to pass to the log configuration. For more information, see `Specifying
      Sensitive Data
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

      - *(dict) --*

        An object representing the secret to expose to your container. Secrets can be exposed to
        a container in the following ways:

        * To inject sensitive data into your containers as environment variables, use the
        ``secrets`` container definition parameter.

        * To reference sensitive information in the log configuration of a container, use the
        ``secretOptions`` container definition parameter.

        For more information, see `Specifying Sensitive Data
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html>`__
        in the *Amazon Elastic Container Service Developer Guide* .

        - **name** *(string) --* **[REQUIRED]**

          The name of the secret.

        - **valueFrom** *(string) --* **[REQUIRED]**

          The secret to expose to the container. The supported values are either the full ARN of
          the AWS Secrets Manager secret or the full ARN of the parameter in the AWS Systems
          Manager Parameter Store.

          .. note::

            If the AWS Systems Manager Parameter Store parameter exists in the same Region as the
            task you are launching, then you can use either the full ARN or name of the
            parameter. If the parameter exists in a different Region, then the full ARN must be
            specified.
    """


_ClientRegisterTaskDefinitioncontainerDefinitionsmountPointsTypeDef = TypedDict(
    "_ClientRegisterTaskDefinitioncontainerDefinitionsmountPointsTypeDef",
    {"sourceVolume": str, "containerPath": str, "readOnly": bool},
    total=False,
)


class ClientRegisterTaskDefinitioncontainerDefinitionsmountPointsTypeDef(
    _ClientRegisterTaskDefinitioncontainerDefinitionsmountPointsTypeDef
):
    """
    Type definition for `ClientRegisterTaskDefinitioncontainerDefinitions` `mountPoints`

    Details on a volume mount point that is used in a container definition.

    - **sourceVolume** *(string) --*

      The name of the volume to mount. Must be a volume name referenced in the ``name``
      parameter of task definition ``volume`` .

    - **containerPath** *(string) --*

      The path on the container to mount the host volume at.

    - **readOnly** *(boolean) --*

      If this value is ``true`` , the container has read-only access to the volume. If this
      value is ``false`` , then the container can write to the volume. The default value is
      ``false`` .
    """


_ClientRegisterTaskDefinitioncontainerDefinitionsportMappingsTypeDef = TypedDict(
    "_ClientRegisterTaskDefinitioncontainerDefinitionsportMappingsTypeDef",
    {"containerPort": int, "hostPort": int, "protocol": str},
    total=False,
)


class ClientRegisterTaskDefinitioncontainerDefinitionsportMappingsTypeDef(
    _ClientRegisterTaskDefinitioncontainerDefinitionsportMappingsTypeDef
):
    """
    Type definition for `ClientRegisterTaskDefinitioncontainerDefinitions` `portMappings`

    Port mappings allow containers to access ports on the host container instance to send or
    receive traffic. Port mappings are specified as part of the container definition.

    If you are using containers in a task with the ``awsvpc`` or ``host`` network mode, exposed
    ports should be specified using ``containerPort`` . The ``hostPort`` can be left blank or
    it must be the same value as the ``containerPort`` .

    After a task reaches the ``RUNNING`` status, manual and automatic host and container port
    assignments are visible in the ``networkBindings`` section of  DescribeTasks API responses.

    - **containerPort** *(integer) --*

      The port number on the container that is bound to the user-specified or automatically
      assigned host port.

      If you are using containers in a task with the ``awsvpc`` or ``host`` network mode,
      exposed ports should be specified using ``containerPort`` .

      If you are using containers in a task with the ``bridge`` network mode and you specify a
      container port and not a host port, your container automatically receives a host port in
      the ephemeral port range. For more information, see ``hostPort`` . Port mappings that are
      automatically assigned in this way do not count toward the 100 reserved ports limit of a
      container instance.

      .. warning::

        You cannot expose the same container port for multiple protocols. An error will be
        returned if this is attempted.

    - **hostPort** *(integer) --*

      The port number on the container instance to reserve for your container.

      If you are using containers in a task with the ``awsvpc`` or ``host`` network mode, the
      ``hostPort`` can either be left blank or set to the same value as the ``containerPort`` .

      If you are using containers in a task with the ``bridge`` network mode, you can specify a
      non-reserved host port for your container port mapping, or you can omit the ``hostPort``
      (or set it to ``0`` ) while specifying a ``containerPort`` and your container
      automatically receives a port in the ephemeral port range for your container instance
      operating system and Docker version.

      The default ephemeral port range for Docker version 1.6.0 and later is listed on the
      instance under ``/proc/sys/net/ipv4/ip_local_port_range`` . If this kernel parameter is
      unavailable, the default ephemeral port range from 49153 through 65535 is used. Do not
      attempt to specify a host port in the ephemeral port range as these are reserved for
      automatic assignment. In general, ports below 32768 are outside of the ephemeral port
      range.

      .. note::

        The default ephemeral port range from 49153 through 65535 is always used for Docker
        versions before 1.6.0.

      The default reserved ports are 22 for SSH, the Docker ports 2375 and 2376, and the Amazon
      ECS container agent ports 51678-51680. Any host port that was previously specified in a
      running task is also reserved while the task is running (after a task stops, the host
      port is released). The current reserved ports are displayed in the ``remainingResources``
      of  DescribeContainerInstances output. A container instance can have up to 100 reserved
      ports at a time, including the default reserved ports. Automatically assigned ports don't
      count toward the 100 reserved ports limit.

    - **protocol** *(string) --*

      The protocol used for the port mapping. Valid values are ``tcp`` and ``udp`` . The
      default is ``tcp`` .
    """


_ClientRegisterTaskDefinitioncontainerDefinitionsrepositoryCredentialsTypeDef = TypedDict(
    "_ClientRegisterTaskDefinitioncontainerDefinitionsrepositoryCredentialsTypeDef",
    {"credentialsParameter": str},
)


class ClientRegisterTaskDefinitioncontainerDefinitionsrepositoryCredentialsTypeDef(
    _ClientRegisterTaskDefinitioncontainerDefinitionsrepositoryCredentialsTypeDef
):
    """
    Type definition for `ClientRegisterTaskDefinitioncontainerDefinitions` `repositoryCredentials`

    The private repository authentication credentials to use.

    - **credentialsParameter** *(string) --* **[REQUIRED]**

      The Amazon Resource Name (ARN) of the secret containing the private repository credentials.

      .. note::

        When you are using the Amazon ECS API, AWS CLI, or AWS SDK, if the secret exists in the
        same Region as the task that you are launching then you can use either the full ARN or
        the name of the secret. When you are using the AWS Management Console, you must specify
        the full ARN of the secret.
    """


_ClientRegisterTaskDefinitioncontainerDefinitionsresourceRequirementsTypeDef = TypedDict(
    "_ClientRegisterTaskDefinitioncontainerDefinitionsresourceRequirementsTypeDef",
    {"value": str, "type": str},
)


class ClientRegisterTaskDefinitioncontainerDefinitionsresourceRequirementsTypeDef(
    _ClientRegisterTaskDefinitioncontainerDefinitionsresourceRequirementsTypeDef
):
    """
    Type definition for `ClientRegisterTaskDefinitioncontainerDefinitions` `resourceRequirements`

    The type and amount of a resource to assign to a container. The supported resource types
    are GPUs and Elastic Inference accelerators. For more information, see `Working with GPUs
    on Amazon ECS <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-gpu.html>`__
    or `Working with Amazon Elastic Inference on Amazon ECS
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in the
    *Amazon Elastic Container Service Developer Guide*

    - **value** *(string) --* **[REQUIRED]**

      The value for the specified resource type.

      If the ``GPU`` type is used, the value is the number of physical ``GPUs`` the Amazon ECS
      container agent will reserve for the container. The number of GPUs reserved for all
      containers in a task should not exceed the number of available GPUs on the container
      instance the task is launched on.

      If the ``InferenceAccelerator`` type is used, the ``value`` should match the
      ``deviceName`` for an  InferenceAccelerator specified in a task definition.

    - **type** *(string) --* **[REQUIRED]**

      The type of resource to assign to a container. The supported values are ``GPU`` or
      ``InferenceAccelerator`` .
    """


_ClientRegisterTaskDefinitioncontainerDefinitionssecretsTypeDef = TypedDict(
    "_ClientRegisterTaskDefinitioncontainerDefinitionssecretsTypeDef",
    {"name": str, "valueFrom": str},
)


class ClientRegisterTaskDefinitioncontainerDefinitionssecretsTypeDef(
    _ClientRegisterTaskDefinitioncontainerDefinitionssecretsTypeDef
):
    """
    Type definition for `ClientRegisterTaskDefinitioncontainerDefinitions` `secrets`

    An object representing the secret to expose to your container. Secrets can be exposed to a
    container in the following ways:

    * To inject sensitive data into your containers as environment variables, use the
    ``secrets`` container definition parameter.

    * To reference sensitive information in the log configuration of a container, use the
    ``secretOptions`` container definition parameter.

    For more information, see `Specifying Sensitive Data
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html>`__
    in the *Amazon Elastic Container Service Developer Guide* .

    - **name** *(string) --* **[REQUIRED]**

      The name of the secret.

    - **valueFrom** *(string) --* **[REQUIRED]**

      The secret to expose to the container. The supported values are either the full ARN of
      the AWS Secrets Manager secret or the full ARN of the parameter in the AWS Systems
      Manager Parameter Store.

      .. note::

        If the AWS Systems Manager Parameter Store parameter exists in the same Region as the
        task you are launching, then you can use either the full ARN or name of the parameter.
        If the parameter exists in a different Region, then the full ARN must be specified.
    """


_ClientRegisterTaskDefinitioncontainerDefinitionssystemControlsTypeDef = TypedDict(
    "_ClientRegisterTaskDefinitioncontainerDefinitionssystemControlsTypeDef",
    {"namespace": str, "value": str},
    total=False,
)


class ClientRegisterTaskDefinitioncontainerDefinitionssystemControlsTypeDef(
    _ClientRegisterTaskDefinitioncontainerDefinitionssystemControlsTypeDef
):
    """
    Type definition for `ClientRegisterTaskDefinitioncontainerDefinitions` `systemControls`

    A list of namespaced kernel parameters to set in the container. This parameter maps to
    ``Sysctls`` in the `Create a container
    <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
    `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--sysctl``
    option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

    It is not recommended that you specify network-related ``systemControls`` parameters for
    multiple containers in a single task that also uses either the ``awsvpc`` or ``host``
    network mode for the following reasons:

    * For tasks that use the ``awsvpc`` network mode, if you set ``systemControls`` for any
    container, it applies to all containers in the task. If you set different
    ``systemControls`` for multiple containers in a single task, the container that is started
    last determines which ``systemControls`` take effect.

    * For tasks that use the ``host`` network mode, the ``systemControls`` parameter applies to
    the container instance's kernel parameter as well as that of all containers of any tasks
    running on that container instance.

    - **namespace** *(string) --*

      The namespaced kernel parameter for which to set a ``value`` .

    - **value** *(string) --*

      The value for the namespaced kernel parameter specified in ``namespace`` .
    """


_ClientRegisterTaskDefinitioncontainerDefinitionsulimitsTypeDef = TypedDict(
    "_ClientRegisterTaskDefinitioncontainerDefinitionsulimitsTypeDef",
    {"name": str, "softLimit": int, "hardLimit": int},
)


class ClientRegisterTaskDefinitioncontainerDefinitionsulimitsTypeDef(
    _ClientRegisterTaskDefinitioncontainerDefinitionsulimitsTypeDef
):
    """
    Type definition for `ClientRegisterTaskDefinitioncontainerDefinitions` `ulimits`

    The ``ulimit`` settings to pass to the container.

    - **name** *(string) --* **[REQUIRED]**

      The ``type`` of the ``ulimit`` .

    - **softLimit** *(integer) --* **[REQUIRED]**

      The soft limit for the ulimit type.

    - **hardLimit** *(integer) --* **[REQUIRED]**

      The hard limit for the ulimit type.
    """


_ClientRegisterTaskDefinitioncontainerDefinitionsvolumesFromTypeDef = TypedDict(
    "_ClientRegisterTaskDefinitioncontainerDefinitionsvolumesFromTypeDef",
    {"sourceContainer": str, "readOnly": bool},
    total=False,
)


class ClientRegisterTaskDefinitioncontainerDefinitionsvolumesFromTypeDef(
    _ClientRegisterTaskDefinitioncontainerDefinitionsvolumesFromTypeDef
):
    """
    Type definition for `ClientRegisterTaskDefinitioncontainerDefinitions` `volumesFrom`

    Details on a data volume from another container in the same task definition.

    - **sourceContainer** *(string) --*

      The name of another container within the same task definition from which to mount volumes.

    - **readOnly** *(boolean) --*

      If this value is ``true`` , the container has read-only access to the volume. If this
      value is ``false`` , then the container can write to the volume. The default value is
      ``false`` .
    """


_ClientRegisterTaskDefinitioncontainerDefinitionsTypeDef = TypedDict(
    "_ClientRegisterTaskDefinitioncontainerDefinitionsTypeDef",
    {
        "name": str,
        "image": str,
        "repositoryCredentials": ClientRegisterTaskDefinitioncontainerDefinitionsrepositoryCredentialsTypeDef,
        "cpu": int,
        "memory": int,
        "memoryReservation": int,
        "links": List[str],
        "portMappings": List[
            ClientRegisterTaskDefinitioncontainerDefinitionsportMappingsTypeDef
        ],
        "essential": bool,
        "entryPoint": List[str],
        "command": List[str],
        "environment": List[
            ClientRegisterTaskDefinitioncontainerDefinitionsenvironmentTypeDef
        ],
        "mountPoints": List[
            ClientRegisterTaskDefinitioncontainerDefinitionsmountPointsTypeDef
        ],
        "volumesFrom": List[
            ClientRegisterTaskDefinitioncontainerDefinitionsvolumesFromTypeDef
        ],
        "linuxParameters": ClientRegisterTaskDefinitioncontainerDefinitionslinuxParametersTypeDef,
        "secrets": List[ClientRegisterTaskDefinitioncontainerDefinitionssecretsTypeDef],
        "dependsOn": List[
            ClientRegisterTaskDefinitioncontainerDefinitionsdependsOnTypeDef
        ],
        "startTimeout": int,
        "stopTimeout": int,
        "hostname": str,
        "user": str,
        "workingDirectory": str,
        "disableNetworking": bool,
        "privileged": bool,
        "readonlyRootFilesystem": bool,
        "dnsServers": List[str],
        "dnsSearchDomains": List[str],
        "extraHosts": List[
            ClientRegisterTaskDefinitioncontainerDefinitionsextraHostsTypeDef
        ],
        "dockerSecurityOptions": List[str],
        "interactive": bool,
        "pseudoTerminal": bool,
        "dockerLabels": Dict[str, str],
        "ulimits": List[ClientRegisterTaskDefinitioncontainerDefinitionsulimitsTypeDef],
        "logConfiguration": ClientRegisterTaskDefinitioncontainerDefinitionslogConfigurationTypeDef,
        "healthCheck": ClientRegisterTaskDefinitioncontainerDefinitionshealthCheckTypeDef,
        "systemControls": List[
            ClientRegisterTaskDefinitioncontainerDefinitionssystemControlsTypeDef
        ],
        "resourceRequirements": List[
            ClientRegisterTaskDefinitioncontainerDefinitionsresourceRequirementsTypeDef
        ],
        "firelensConfiguration": ClientRegisterTaskDefinitioncontainerDefinitionsfirelensConfigurationTypeDef,
    },
    total=False,
)


class ClientRegisterTaskDefinitioncontainerDefinitionsTypeDef(
    _ClientRegisterTaskDefinitioncontainerDefinitionsTypeDef
):
    """
    Type definition for `ClientRegisterTaskDefinition` `containerDefinitions`

    Container definitions are used in task definitions to describe the different containers that
    are launched as part of a task.

    - **name** *(string) --*

      The name of a container. If you are linking multiple containers together in a task
      definition, the ``name`` of one container can be entered in the ``links`` of another
      container to connect the containers. Up to 255 letters (uppercase and lowercase), numbers,
      and hyphens are allowed. This parameter maps to ``name`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--name`` option
      to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

    - **image** *(string) --*

      The image used to start a container. This string is passed directly to the Docker daemon.
      Images in the Docker Hub registry are available by default. Other repositories are specified
      with either `` *repository-url* /*image* :*tag* `` or `` *repository-url* /*image* @*digest*
      `` . Up to 255 letters (uppercase and lowercase), numbers, hyphens, underscores, colons,
      periods, forward slashes, and number signs are allowed. This parameter maps to ``Image`` in
      the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``IMAGE`` parameter
      of `docker run <https://docs.docker.com/engine/reference/run/>`__ .

      * When a new task starts, the Amazon ECS container agent pulls the latest version of the
      specified image and tag for the container to use. However, subsequent updates to a repository
      image are not propagated to already running tasks.

      * Images in Amazon ECR repositories can be specified by either using the full
      ``registry/repository:tag`` or ``registry/repository@digest`` . For example,
      ``012345678910.dkr.ecr.<region-name>.amazonaws.com/<repository-name>:latest`` or
      ``012345678910.dkr.ecr.<region-name>.amazonaws.com/<repository-name>@sha256:94afd1f2e64d908bc90dbca0035a5b567EXAMPLE``
      .

      * Images in official repositories on Docker Hub use a single name (for example, ``ubuntu`` or
      ``mongo`` ).

      * Images in other repositories on Docker Hub are qualified with an organization name (for
      example, ``amazon/amazon-ecs-agent`` ).

      * Images in other online repositories are qualified further by a domain name (for example,
      ``quay.io/assemblyline/ubuntu`` ).

    - **repositoryCredentials** *(dict) --*

      The private repository authentication credentials to use.

      - **credentialsParameter** *(string) --* **[REQUIRED]**

        The Amazon Resource Name (ARN) of the secret containing the private repository credentials.

        .. note::

          When you are using the Amazon ECS API, AWS CLI, or AWS SDK, if the secret exists in the
          same Region as the task that you are launching then you can use either the full ARN or
          the name of the secret. When you are using the AWS Management Console, you must specify
          the full ARN of the secret.

    - **cpu** *(integer) --*

      The number of ``cpu`` units reserved for the container. This parameter maps to ``CpuShares``
      in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--cpu-shares``
      option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

      This field is optional for tasks using the Fargate launch type, and the only requirement is
      that the total amount of CPU reserved for all containers within a task be lower than the
      task-level ``cpu`` value.

      .. note::

        You can determine the number of CPU units that are available per EC2 instance type by
        multiplying the vCPUs listed for that instance type on the `Amazon EC2 Instances
        <http://aws.amazon.com/ec2/instance-types/>`__ detail page by 1,024.

      For example, if you run a single-container task on a single-core instance type with 512 CPU
      units specified for that container, and that is the only task running on the container
      instance, that container could use the full 1,024 CPU unit share at any given time. However,
      if you launched another copy of the same task on that container instance, each task would be
      guaranteed a minimum of 512 CPU units when needed, and each container could float to higher
      CPU usage if the other container was not using it, but if both tasks were 100% active all of
      the time, they would be limited to 512 CPU units.

      Linux containers share unallocated CPU units with other containers on the container instance
      with the same ratio as their allocated amount. For example, if you run a single-container
      task on a single-core instance type with 512 CPU units specified for that container, and that
      is the only task running on the container instance, that container could use the full 1,024
      CPU unit share at any given time. However, if you launched another copy of the same task on
      that container instance, each task would be guaranteed a minimum of 512 CPU units when
      needed, and each container could float to higher CPU usage if the other container was not
      using it, but if both tasks were 100% active all of the time, they would be limited to 512
      CPU units.

      On Linux container instances, the Docker daemon on the container instance uses the CPU value
      to calculate the relative CPU share ratios for running containers. For more information, see
      `CPU share constraint <https://docs.docker.com/engine/reference/run/#cpu-share-constraint>`__
      in the Docker documentation. The minimum valid CPU share value that the Linux kernel allows
      is 2. However, the CPU parameter is not required, and you can use CPU values below 2 in your
      container definitions. For CPU values below 2 (including null), the behavior varies based on
      your Amazon ECS container agent version:

      * **Agent versions less than or equal to 1.1.0:** Null and zero CPU values are passed to
      Docker as 0, which Docker then converts to 1,024 CPU shares. CPU values of 1 are passed to
      Docker as 1, which the Linux kernel converts to two CPU shares.

      * **Agent versions greater than or equal to 1.2.0:** Null, zero, and CPU values of 1 are
      passed to Docker as 2.

      On Windows container instances, the CPU limit is enforced as an absolute limit, or a quota.
      Windows containers only have access to the specified amount of CPU that is described in the
      task definition.

    - **memory** *(integer) --*

      The amount (in MiB) of memory to present to the container. If your container attempts to
      exceed the memory specified here, the container is killed. The total amount of memory
      reserved for all containers within a task must be lower than the task ``memory`` value, if
      one is specified. This parameter maps to ``Memory`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--memory`` option
      to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

      If using the Fargate launch type, this parameter is optional.

      If using the EC2 launch type, you must specify either a task-level memory value or a
      container-level memory value. If you specify both a container-level ``memory`` and
      ``memoryReservation`` value, ``memory`` must be greater than ``memoryReservation`` . If you
      specify ``memoryReservation`` , then that value is subtracted from the available memory
      resources for the container instance on which the container is placed. Otherwise, the value
      of ``memory`` is used.

      The Docker daemon reserves a minimum of 4 MiB of memory for a container, so you should not
      specify fewer than 4 MiB of memory for your containers.

    - **memoryReservation** *(integer) --*

      The soft limit (in MiB) of memory to reserve for the container. When system memory is under
      heavy contention, Docker attempts to keep the container memory to this soft limit. However,
      your container can consume more memory when it needs to, up to either the hard limit
      specified with the ``memory`` parameter (if applicable), or all of the available memory on
      the container instance, whichever comes first. This parameter maps to ``MemoryReservation``
      in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
      ``--memory-reservation`` option to `docker run
      <https://docs.docker.com/engine/reference/run/>`__ .

      If a task-level memory value is not specified, you must specify a non-zero integer for one or
      both of ``memory`` or ``memoryReservation`` in a container definition. If you specify both,
      ``memory`` must be greater than ``memoryReservation`` . If you specify ``memoryReservation``
      , then that value is subtracted from the available memory resources for the container
      instance on which the container is placed. Otherwise, the value of ``memory`` is used.

      For example, if your container normally uses 128 MiB of memory, but occasionally bursts to
      256 MiB of memory for short periods of time, you can set a ``memoryReservation`` of 128 MiB,
      and a ``memory`` hard limit of 300 MiB. This configuration would allow the container to only
      reserve 128 MiB of memory from the remaining resources on the container instance, but also
      allow the container to consume more memory resources when needed.

      The Docker daemon reserves a minimum of 4 MiB of memory for a container, so you should not
      specify fewer than 4 MiB of memory for your containers.

    - **links** *(list) --*

      The ``links`` parameter allows containers to communicate with each other without the need for
      port mappings. This parameter is only supported if the network mode of a task definition is
      ``bridge`` . The ``name:internalName`` construct is analogous to ``name:alias`` in Docker
      links. Up to 255 letters (uppercase and lowercase), numbers, and hyphens are allowed. For
      more information about linking Docker containers, go to `Legacy container links
      <https://docs.docker.com/network/links/>`__ in the Docker documentation. This parameter maps
      to ``Links`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--link`` option
      to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

      .. note::

        This parameter is not supported for Windows containers.

      .. warning::

        Containers that are collocated on a single container instance may be able to communicate
        with each other without requiring links or host port mappings. Network isolation is
        achieved on the container instance using security groups and VPC settings.

      - *(string) --*

    - **portMappings** *(list) --*

      The list of port mappings for the container. Port mappings allow containers to access ports
      on the host container instance to send or receive traffic.

      For task definitions that use the ``awsvpc`` network mode, you should only specify the
      ``containerPort`` . The ``hostPort`` can be left blank or it must be the same value as the
      ``containerPort`` .

      Port mappings on Windows use the ``NetNAT`` gateway address rather than ``localhost`` . There
      is no loopback for port mappings on Windows, so you cannot access a container's mapped port
      from the host itself.

      This parameter maps to ``PortBindings`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--publish``
      option to `docker run <https://docs.docker.com/engine/reference/run/>`__ . If the network
      mode of a task definition is set to ``none`` , then you can't specify port mappings. If the
      network mode of a task definition is set to ``host`` , then host ports must either be
      undefined or they must match the container port in the port mapping.

      .. note::

        After a task reaches the ``RUNNING`` status, manual and automatic host and container port
        assignments are visible in the **Network Bindings** section of a container description for
        a selected task in the Amazon ECS console. The assignments are also visible in the
        ``networkBindings`` section  DescribeTasks responses.

      - *(dict) --*

        Port mappings allow containers to access ports on the host container instance to send or
        receive traffic. Port mappings are specified as part of the container definition.

        If you are using containers in a task with the ``awsvpc`` or ``host`` network mode, exposed
        ports should be specified using ``containerPort`` . The ``hostPort`` can be left blank or
        it must be the same value as the ``containerPort`` .

        After a task reaches the ``RUNNING`` status, manual and automatic host and container port
        assignments are visible in the ``networkBindings`` section of  DescribeTasks API responses.

        - **containerPort** *(integer) --*

          The port number on the container that is bound to the user-specified or automatically
          assigned host port.

          If you are using containers in a task with the ``awsvpc`` or ``host`` network mode,
          exposed ports should be specified using ``containerPort`` .

          If you are using containers in a task with the ``bridge`` network mode and you specify a
          container port and not a host port, your container automatically receives a host port in
          the ephemeral port range. For more information, see ``hostPort`` . Port mappings that are
          automatically assigned in this way do not count toward the 100 reserved ports limit of a
          container instance.

          .. warning::

            You cannot expose the same container port for multiple protocols. An error will be
            returned if this is attempted.

        - **hostPort** *(integer) --*

          The port number on the container instance to reserve for your container.

          If you are using containers in a task with the ``awsvpc`` or ``host`` network mode, the
          ``hostPort`` can either be left blank or set to the same value as the ``containerPort`` .

          If you are using containers in a task with the ``bridge`` network mode, you can specify a
          non-reserved host port for your container port mapping, or you can omit the ``hostPort``
          (or set it to ``0`` ) while specifying a ``containerPort`` and your container
          automatically receives a port in the ephemeral port range for your container instance
          operating system and Docker version.

          The default ephemeral port range for Docker version 1.6.0 and later is listed on the
          instance under ``/proc/sys/net/ipv4/ip_local_port_range`` . If this kernel parameter is
          unavailable, the default ephemeral port range from 49153 through 65535 is used. Do not
          attempt to specify a host port in the ephemeral port range as these are reserved for
          automatic assignment. In general, ports below 32768 are outside of the ephemeral port
          range.

          .. note::

            The default ephemeral port range from 49153 through 65535 is always used for Docker
            versions before 1.6.0.

          The default reserved ports are 22 for SSH, the Docker ports 2375 and 2376, and the Amazon
          ECS container agent ports 51678-51680. Any host port that was previously specified in a
          running task is also reserved while the task is running (after a task stops, the host
          port is released). The current reserved ports are displayed in the ``remainingResources``
          of  DescribeContainerInstances output. A container instance can have up to 100 reserved
          ports at a time, including the default reserved ports. Automatically assigned ports don't
          count toward the 100 reserved ports limit.

        - **protocol** *(string) --*

          The protocol used for the port mapping. Valid values are ``tcp`` and ``udp`` . The
          default is ``tcp`` .

    - **essential** *(boolean) --*

      If the ``essential`` parameter of a container is marked as ``true`` , and that container
      fails or stops for any reason, all other containers that are part of the task are stopped. If
      the ``essential`` parameter of a container is marked as ``false`` , then its failure does not
      affect the rest of the containers in a task. If this parameter is omitted, a container is
      assumed to be essential.

      All tasks must have at least one essential container. If you have an application that is
      composed of multiple containers, you should group containers that are used for a common
      purpose into components, and separate the different components into multiple task
      definitions. For more information, see `Application Architecture
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/application_architecture.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

    - **entryPoint** *(list) --*

      .. warning::

        Early versions of the Amazon ECS container agent do not properly handle ``entryPoint``
        parameters. If you have problems using ``entryPoint`` , update your container agent or
        enter your commands and arguments as ``command`` array items instead.

      The entry point that is passed to the container. This parameter maps to ``Entrypoint`` in the
      `Create a container <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__
      section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
      ``--entrypoint`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .
      For more information, see `https\\://docs.docker.com/engine/reference/builder/#entrypoint
      <https://docs.docker.com/engine/reference/builder/#entrypoint>`__ .

      - *(string) --*

    - **command** *(list) --*

      The command that is passed to the container. This parameter maps to ``Cmd`` in the `Create a
      container <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of
      the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``COMMAND``
      parameter to `docker run <https://docs.docker.com/engine/reference/run/>`__ . For more
      information, see `https\\://docs.docker.com/engine/reference/builder/#cmd
      <https://docs.docker.com/engine/reference/builder/#cmd>`__ . If there are multiple arguments,
      each argument should be a separated string in the array.

      - *(string) --*

    - **environment** *(list) --*

      The environment variables to pass to a container. This parameter maps to ``Env`` in the
      `Create a container <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__
      section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
      ``--env`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

      .. warning::

        We do not recommend using plaintext environment variables for sensitive information, such
        as credential data.

      - *(dict) --*

        A key-value pair object.

        - **name** *(string) --*

          The name of the key-value pair. For environment variables, this is the name of the
          environment variable.

        - **value** *(string) --*

          The value of the key-value pair. For environment variables, this is the value of the
          environment variable.

    - **mountPoints** *(list) --*

      The mount points for data volumes in your container.

      This parameter maps to ``Volumes`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--volume`` option
      to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

      Windows containers can mount whole directories on the same drive as ``$env:ProgramData`` .
      Windows containers cannot mount directories on a different drive, and mount point cannot be
      across drives.

      - *(dict) --*

        Details on a volume mount point that is used in a container definition.

        - **sourceVolume** *(string) --*

          The name of the volume to mount. Must be a volume name referenced in the ``name``
          parameter of task definition ``volume`` .

        - **containerPath** *(string) --*

          The path on the container to mount the host volume at.

        - **readOnly** *(boolean) --*

          If this value is ``true`` , the container has read-only access to the volume. If this
          value is ``false`` , then the container can write to the volume. The default value is
          ``false`` .

    - **volumesFrom** *(list) --*

      Data volumes to mount from another container. This parameter maps to ``VolumesFrom`` in the
      `Create a container <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__
      section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
      ``--volumes-from`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

      - *(dict) --*

        Details on a data volume from another container in the same task definition.

        - **sourceContainer** *(string) --*

          The name of another container within the same task definition from which to mount volumes.

        - **readOnly** *(boolean) --*

          If this value is ``true`` , the container has read-only access to the volume. If this
          value is ``false`` , then the container can write to the volume. The default value is
          ``false`` .

    - **linuxParameters** *(dict) --*

      Linux-specific modifications that are applied to the container, such as Linux kernel
      capabilities. For more information see  KernelCapabilities .

      .. note::

        This parameter is not supported for Windows containers.

      - **capabilities** *(dict) --*

        The Linux capabilities for the container that are added to or dropped from the default
        configuration provided by Docker.

        .. note::

          If you are using tasks that use the Fargate launch type, ``capabilities`` is supported
          but the ``add`` parameter is not supported.

        - **add** *(list) --*

          The Linux capabilities for the container that have been added to the default
          configuration provided by Docker. This parameter maps to ``CapAdd`` in the `Create a
          container <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__
          section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
          ``--cap-add`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

          .. note::

            If you are using tasks that use the Fargate launch type, the ``add`` parameter is not
            supported.

          Valid values: ``"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" | "BLOCK_SUSPEND" | "CHOWN" |
          "DAC_OVERRIDE" | "DAC_READ_SEARCH" | "FOWNER" | "FSETID" | "IPC_LOCK" | "IPC_OWNER" |
          "KILL" | "LEASE" | "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" | "MKNOD" |
          "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" | "SETFCAP" | "SETGID" |
          "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT" | "SYS_CHROOT" | "SYS_MODULE" |
          "SYS_NICE" | "SYS_PACCT" | "SYS_PTRACE" | "SYS_RAWIO" | "SYS_RESOURCE" | "SYS_TIME" |
          "SYS_TTY_CONFIG" | "SYSLOG" | "WAKE_ALARM"``

          - *(string) --*

        - **drop** *(list) --*

          The Linux capabilities for the container that have been removed from the default
          configuration provided by Docker. This parameter maps to ``CapDrop`` in the `Create a
          container <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__
          section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
          ``--cap-drop`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

          Valid values: ``"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" | "BLOCK_SUSPEND" | "CHOWN" |
          "DAC_OVERRIDE" | "DAC_READ_SEARCH" | "FOWNER" | "FSETID" | "IPC_LOCK" | "IPC_OWNER" |
          "KILL" | "LEASE" | "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" | "MKNOD" |
          "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" | "SETFCAP" | "SETGID" |
          "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT" | "SYS_CHROOT" | "SYS_MODULE" |
          "SYS_NICE" | "SYS_PACCT" | "SYS_PTRACE" | "SYS_RAWIO" | "SYS_RESOURCE" | "SYS_TIME" |
          "SYS_TTY_CONFIG" | "SYSLOG" | "WAKE_ALARM"``

          - *(string) --*

      - **devices** *(list) --*

        Any host devices to expose to the container. This parameter maps to ``Devices`` in the
        `Create a container
        <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
        `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--device``
        option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

        .. note::

          If you are using tasks that use the Fargate launch type, the ``devices`` parameter is not
          supported.

        - *(dict) --*

          An object representing a container instance host device.

          - **hostPath** *(string) --* **[REQUIRED]**

            The path for the device on the host container instance.

          - **containerPath** *(string) --*

            The path inside the container at which to expose the host device.

          - **permissions** *(list) --*

            The explicit permissions to provide to the container for the device. By default, the
            container has permissions for ``read`` , ``write`` , and ``mknod`` for the device.

            - *(string) --*

      - **initProcessEnabled** *(boolean) --*

        Run an ``init`` process inside the container that forwards signals and reaps processes.
        This parameter maps to the ``--init`` option to `docker run
        <https://docs.docker.com/engine/reference/run/>`__ . This parameter requires version 1.25
        of the Docker Remote API or greater on your container instance. To check the Docker Remote
        API version on your container instance, log in to your container instance and run the
        following command: ``sudo docker version --format '{{.Server.APIVersion}}'``

      - **sharedMemorySize** *(integer) --*

        The value for the size (in MiB) of the ``/dev/shm`` volume. This parameter maps to the
        ``--shm-size`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

        .. note::

          If you are using tasks that use the Fargate launch type, the ``sharedMemorySize``
          parameter is not supported.

      - **tmpfs** *(list) --*

        The container path, mount options, and size (in MiB) of the tmpfs mount. This parameter
        maps to the ``--tmpfs`` option to `docker run
        <https://docs.docker.com/engine/reference/run/>`__ .

        .. note::

          If you are using tasks that use the Fargate launch type, the ``tmpfs`` parameter is not
          supported.

        - *(dict) --*

          The container path, mount options, and size of the tmpfs mount.

          - **containerPath** *(string) --* **[REQUIRED]**

            The absolute file path where the tmpfs volume is to be mounted.

          - **size** *(integer) --* **[REQUIRED]**

            The size (in MiB) of the tmpfs volume.

          - **mountOptions** *(list) --*

            The list of tmpfs volume mount options.

            Valid values: ``"defaults" | "ro" | "rw" | "suid" | "nosuid" | "dev" | "nodev" | "exec"
            | "noexec" | "sync" | "async" | "dirsync" | "remount" | "mand" | "nomand" | "atime" |
            "noatime" | "diratime" | "nodiratime" | "bind" | "rbind" | "unbindable" | "runbindable"
            | "private" | "rprivate" | "shared" | "rshared" | "slave" | "rslave" | "relatime" |
            "norelatime" | "strictatime" | "nostrictatime" | "mode" | "uid" | "gid" | "nr_inodes" |
            "nr_blocks" | "mpol"``

            - *(string) --*

      - **maxSwap** *(integer) --*

        The total amount of swap memory (in MiB) a container can use. This parameter will be
        translated to the ``--memory-swap`` option to `docker run
        <https://docs.docker.com/engine/reference/run/>`__ where the value would be the sum of the
        container memory plus the ``maxSwap`` value.

        If a ``maxSwap`` value of ``0`` is specified, the container will not use swap. Accepted
        values are ``0`` or any positive integer. If the ``maxSwap`` parameter is omitted, the
        container will use the swap configuration for the container instance it is running on. A
        ``maxSwap`` value must be set for the ``swappiness`` parameter to be used.

        .. note::

          If you are using tasks that use the Fargate launch type, the ``maxSwap`` parameter is not
          supported.

      - **swappiness** *(integer) --*

        This allows you to tune a container's memory swappiness behavior. A ``swappiness`` value of
        ``0`` will cause swapping to not happen unless absolutely necessary. A ``swappiness`` value
        of ``100`` will cause pages to be swapped very aggressively. Accepted values are whole
        numbers between ``0`` and ``100`` . If the ``swappiness`` parameter is not specified, a
        default value of ``60`` is used. If a value is not specified for ``maxSwap`` then this
        parameter is ignored. This parameter maps to the ``--memory-swappiness`` option to `docker
        run <https://docs.docker.com/engine/reference/run/>`__ .

        .. note::

          If you are using tasks that use the Fargate launch type, the ``swappiness`` parameter is
          not supported.

    - **secrets** *(list) --*

      The secrets to pass to the container. For more information, see `Specifying Sensitive Data
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

      - *(dict) --*

        An object representing the secret to expose to your container. Secrets can be exposed to a
        container in the following ways:

        * To inject sensitive data into your containers as environment variables, use the
        ``secrets`` container definition parameter.

        * To reference sensitive information in the log configuration of a container, use the
        ``secretOptions`` container definition parameter.

        For more information, see `Specifying Sensitive Data
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html>`__
        in the *Amazon Elastic Container Service Developer Guide* .

        - **name** *(string) --* **[REQUIRED]**

          The name of the secret.

        - **valueFrom** *(string) --* **[REQUIRED]**

          The secret to expose to the container. The supported values are either the full ARN of
          the AWS Secrets Manager secret or the full ARN of the parameter in the AWS Systems
          Manager Parameter Store.

          .. note::

            If the AWS Systems Manager Parameter Store parameter exists in the same Region as the
            task you are launching, then you can use either the full ARN or name of the parameter.
            If the parameter exists in a different Region, then the full ARN must be specified.

    - **dependsOn** *(list) --*

      The dependencies defined for container startup and shutdown. A container can contain multiple
      dependencies. When a dependency is defined for container startup, for container shutdown it
      is reversed.

      For tasks using the EC2 launch type, the container instances require at least version 1.26.0
      of the container agent to enable container dependencies. However, we recommend using the
      latest container agent version. For information about checking your agent version and
      updating to the latest version, see `Updating the Amazon ECS Container Agent
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html>`__ in the
      *Amazon Elastic Container Service Developer Guide* . If you are using an Amazon ECS-optimized
      Linux AMI, your instance needs at least version 1.26.0-1 of the ``ecs-init`` package. If your
      container instances are launched from version ``20190301`` or later, then they contain the
      required versions of the container agent and ``ecs-init`` . For more information, see `Amazon
      ECS-optimized Linux AMI
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html>`__ in
      the *Amazon Elastic Container Service Developer Guide* .

      For tasks using the Fargate launch type, the task or service requires platform version
      ``1.3.0`` or later.

      - *(dict) --*

        The dependencies defined for container startup and shutdown. A container can contain
        multiple dependencies. When a dependency is defined for container startup, for container
        shutdown it is reversed.

        Your Amazon ECS container instances require at least version 1.26.0 of the container agent
        to enable container dependencies. However, we recommend using the latest container agent
        version. For information about checking your agent version and updating to the latest
        version, see `Updating the Amazon ECS Container Agent
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html>`__ in
        the *Amazon Elastic Container Service Developer Guide* . If you are using an Amazon
        ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the ``ecs-init``
        package. If your container instances are launched from version ``20190301`` or later, then
        they contain the required versions of the container agent and ``ecs-init`` . For more
        information, see `Amazon ECS-optimized Linux AMI
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html>`__ in
        the *Amazon Elastic Container Service Developer Guide* .

        .. note::

          If you are using tasks that use the Fargate launch type, container dependency parameters
          are not supported.

        - **containerName** *(string) --* **[REQUIRED]**

          The name of a container.

        - **condition** *(string) --* **[REQUIRED]**

          The dependency condition of the container. The following are the available conditions and
          their behavior:

          * ``START`` - This condition emulates the behavior of links and volumes today. It
          validates that a dependent container is started before permitting other containers to
          start.

          * ``COMPLETE`` - This condition validates that a dependent container runs to completion
          (exits) before permitting other containers to start. This can be useful for nonessential
          containers that run a script and then exit.

          * ``SUCCESS`` - This condition is the same as ``COMPLETE`` , but it also requires that
          the container exits with a ``zero`` status.

          * ``HEALTHY`` - This condition validates that the dependent container passes its Docker
          health check before permitting other containers to start. This requires that the
          dependent container has health checks configured. This condition is confirmed only at
          task startup.

    - **startTimeout** *(integer) --*

      Time duration (in seconds) to wait before giving up on resolving dependencies for a
      container. For example, you specify two containers in a task definition with containerA
      having a dependency on containerB reaching a ``COMPLETE`` , ``SUCCESS`` , or ``HEALTHY``
      status. If a ``startTimeout`` value is specified for containerB and it does not reach the
      desired status within that time then containerA will give up and not start. This results in
      the task transitioning to a ``STOPPED`` state.

      For tasks using the EC2 launch type, the container instances require at least version 1.26.0
      of the container agent to enable a container start timeout value. However, we recommend using
      the latest container agent version. For information about checking your agent version and
      updating to the latest version, see `Updating the Amazon ECS Container Agent
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html>`__ in the
      *Amazon Elastic Container Service Developer Guide* . If you are using an Amazon ECS-optimized
      Linux AMI, your instance needs at least version 1.26.0-1 of the ``ecs-init`` package. If your
      container instances are launched from version ``20190301`` or later, then they contain the
      required versions of the container agent and ``ecs-init`` . For more information, see `Amazon
      ECS-optimized Linux AMI
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html>`__ in
      the *Amazon Elastic Container Service Developer Guide* .

      For tasks using the Fargate launch type, the task or service requires platform version
      ``1.3.0`` or later.

    - **stopTimeout** *(integer) --*

      Time duration (in seconds) to wait before the container is forcefully killed if it doesn't
      exit normally on its own.

      For tasks using the Fargate launch type, the max ``stopTimeout`` value is 2 minutes and the
      task or service requires platform version ``1.3.0`` or later.

      For tasks using the EC2 launch type, the stop timeout value for the container takes
      precedence over the ``ECS_CONTAINER_STOP_TIMEOUT`` container agent configuration parameter,
      if used. Container instances require at least version 1.26.0 of the container agent to enable
      a container stop timeout value. However, we recommend using the latest container agent
      version. For information about checking your agent version and updating to the latest
      version, see `Updating the Amazon ECS Container Agent
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html>`__ in the
      *Amazon Elastic Container Service Developer Guide* . If you are using an Amazon ECS-optimized
      Linux AMI, your instance needs at least version 1.26.0-1 of the ``ecs-init`` package. If your
      container instances are launched from version ``20190301`` or later, then they contain the
      required versions of the container agent and ``ecs-init`` . For more information, see `Amazon
      ECS-optimized Linux AMI
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html>`__ in
      the *Amazon Elastic Container Service Developer Guide* .

    - **hostname** *(string) --*

      The hostname to use for your container. This parameter maps to ``Hostname`` in the `Create a
      container <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of
      the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--hostname``
      option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

      .. note::

        The ``hostname`` parameter is not supported if you are using the ``awsvpc`` network mode.

    - **user** *(string) --*

      The user name to use inside the container. This parameter maps to ``User`` in the `Create a
      container <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of
      the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--user``
      option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

      You can use the following formats. If specifying a UID or GID, you must specify it as a
      positive integer.

      * ``user``

      * ``user:group``

      * ``uid``

      * ``uid:gid``

      * ``user:gid``

      * ``uid:group``

      .. note::

        This parameter is not supported for Windows containers.

    - **workingDirectory** *(string) --*

      The working directory in which to run commands inside the container. This parameter maps to
      ``WorkingDir`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--workdir``
      option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

    - **disableNetworking** *(boolean) --*

      When this parameter is true, networking is disabled within the container. This parameter maps
      to ``NetworkDisabled`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ .

      .. note::

        This parameter is not supported for Windows containers.

    - **privileged** *(boolean) --*

      When this parameter is true, the container is given elevated privileges on the host container
      instance (similar to the ``root`` user). This parameter maps to ``Privileged`` in the `Create
      a container <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section
      of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
      ``--privileged`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

      .. note::

        This parameter is not supported for Windows containers or tasks using the Fargate launch
        type.

    - **readonlyRootFilesystem** *(boolean) --*

      When this parameter is true, the container is given read-only access to its root file system.
      This parameter maps to ``ReadonlyRootfs`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--read-only``
      option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

      .. note::

        This parameter is not supported for Windows containers.

    - **dnsServers** *(list) --*

      A list of DNS servers that are presented to the container. This parameter maps to ``Dns`` in
      the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--dns`` option to
      `docker run <https://docs.docker.com/engine/reference/run/>`__ .

      .. note::

        This parameter is not supported for Windows containers.

      - *(string) --*

    - **dnsSearchDomains** *(list) --*

      A list of DNS search domains that are presented to the container. This parameter maps to
      ``DnsSearch`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--dns-search``
      option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

      .. note::

        This parameter is not supported for Windows containers.

      - *(string) --*

    - **extraHosts** *(list) --*

      A list of hostnames and IP address mappings to append to the ``/etc/hosts`` file on the
      container. This parameter maps to ``ExtraHosts`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--add-host``
      option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

      .. note::

        This parameter is not supported for Windows containers or tasks that use the ``awsvpc``
        network mode.

      - *(dict) --*

        Hostnames and IP address entries that are added to the ``/etc/hosts`` file of a container
        via the ``extraHosts`` parameter of its  ContainerDefinition .

        - **hostname** *(string) --* **[REQUIRED]**

          The hostname to use in the ``/etc/hosts`` entry.

        - **ipAddress** *(string) --* **[REQUIRED]**

          The IP address to use in the ``/etc/hosts`` entry.

    - **dockerSecurityOptions** *(list) --*

      A list of strings to provide custom labels for SELinux and AppArmor multi-level security
      systems. This field is not valid for containers in tasks using the Fargate launch type.

      This parameter maps to ``SecurityOpt`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--security-opt``
      option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

      .. note::

        The Amazon ECS container agent running on a container instance must register with the
        ``ECS_SELINUX_CAPABLE=true`` or ``ECS_APPARMOR_CAPABLE=true`` environment variables before
        containers placed on that instance can use these security options. For more information,
        see `Amazon ECS Container Agent Configuration
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html>`__ in
        the *Amazon Elastic Container Service Developer Guide* .

      .. note::

        This parameter is not supported for Windows containers.

      - *(string) --*

    - **interactive** *(boolean) --*

      When this parameter is ``true`` , this allows you to deploy containerized applications that
      require ``stdin`` or a ``tty`` to be allocated. This parameter maps to ``OpenStdin`` in the
      `Create a container <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__
      section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
      ``--interactive`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

    - **pseudoTerminal** *(boolean) --*

      When this parameter is ``true`` , a TTY is allocated. This parameter maps to ``Tty`` in the
      `Create a container <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__
      section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
      ``--tty`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

    - **dockerLabels** *(dict) --*

      A key/value map of labels to add to the container. This parameter maps to ``Labels`` in the
      `Create a container <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__
      section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
      ``--label`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__ . This
      parameter requires version 1.18 of the Docker Remote API or greater on your container
      instance. To check the Docker Remote API version on your container instance, log in to your
      container instance and run the following command: ``sudo docker version --format
      '{{.Server.APIVersion}}'``

      - *(string) --*

        - *(string) --*

    - **ulimits** *(list) --*

      A list of ``ulimits`` to set in the container. This parameter maps to ``Ulimits`` in the
      `Create a container <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__
      section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
      ``--ulimit`` option to `docker run <https://docs.docker.com/engine/reference/run/>`__ . Valid
      naming values are displayed in the  Ulimit data type. This parameter requires version 1.18 of
      the Docker Remote API or greater on your container instance. To check the Docker Remote API
      version on your container instance, log in to your container instance and run the following
      command: ``sudo docker version --format '{{.Server.APIVersion}}'``

      .. note::

        This parameter is not supported for Windows containers.

      - *(dict) --*

        The ``ulimit`` settings to pass to the container.

        - **name** *(string) --* **[REQUIRED]**

          The ``type`` of the ``ulimit`` .

        - **softLimit** *(integer) --* **[REQUIRED]**

          The soft limit for the ulimit type.

        - **hardLimit** *(integer) --* **[REQUIRED]**

          The hard limit for the ulimit type.

    - **logConfiguration** *(dict) --*

      The log configuration specification for the container.

      This parameter maps to ``LogConfig`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--log-driver``
      option to `docker run <https://docs.docker.com/engine/reference/run/>`__ . By default,
      containers use the same logging driver that the Docker daemon uses. However the container may
      use a different logging driver than the Docker daemon by specifying a log driver with this
      parameter in the container definition. To use a different logging driver for a container, the
      log system must be configured properly on the container instance (or on a different log
      server for remote logging options). For more information on the options for different
      supported log drivers, see `Configure logging drivers
      <https://docs.docker.com/engine/admin/logging/overview/>`__ in the Docker documentation.

      .. note::

        Amazon ECS currently supports a subset of the logging drivers available to the Docker
        daemon (shown in the  LogConfiguration data type). Additional log drivers may be available
        in future releases of the Amazon ECS container agent.

      This parameter requires version 1.18 of the Docker Remote API or greater on your container
      instance. To check the Docker Remote API version on your container instance, log in to your
      container instance and run the following command: ``sudo docker version --format
      '{{.Server.APIVersion}}'``

      .. note::

        The Amazon ECS container agent running on a container instance must register the logging
        drivers available on that instance with the ``ECS_AVAILABLE_LOGGING_DRIVERS`` environment
        variable before containers placed on that instance can use these log configuration options.
        For more information, see `Amazon ECS Container Agent Configuration
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html>`__ in
        the *Amazon Elastic Container Service Developer Guide* .

      - **logDriver** *(string) --* **[REQUIRED]**

        The log driver to use for the container. The valid values listed for this parameter are log
        drivers that the Amazon ECS container agent can communicate with by default.

        For tasks using the Fargate launch type, the supported log drivers are ``awslogs`` and
        ``splunk`` .

        For tasks using the EC2 launch type, the supported log drivers are ``awslogs`` ,
        ``fluentd`` , ``gelf`` , ``json-file`` , ``journald`` , ``logentries`` , ``syslog`` , and
        ``splunk`` .

        For more information about using the ``awslogs`` log driver, see `Using the awslogs Log
        Driver <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_awslogs.html>`__
        in the *Amazon Elastic Container Service Developer Guide* .

        .. note::

          If you have a custom driver that is not listed above that you would like to work with the
          Amazon ECS container agent, you can fork the Amazon ECS container agent project that is
          `available on GitHub <https://github.com/aws/amazon-ecs-agent>`__ and customize it to
          work with that driver. We encourage you to submit pull requests for changes that you
          would like to have included. However, Amazon Web Services does not currently support
          running modified copies of this software.

        This parameter requires version 1.18 of the Docker Remote API or greater on your container
        instance. To check the Docker Remote API version on your container instance, log in to your
        container instance and run the following command: ``sudo docker version --format
        '{{.Server.APIVersion}}'``

      - **options** *(dict) --*

        The configuration options to send to the log driver. This parameter requires version 1.19
        of the Docker Remote API or greater on your container instance. To check the Docker Remote
        API version on your container instance, log in to your container instance and run the
        following command: ``sudo docker version --format '{{.Server.APIVersion}}'``

        - *(string) --*

          - *(string) --*

      - **secretOptions** *(list) --*

        The secrets to pass to the log configuration. For more information, see `Specifying
        Sensitive Data
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html>`__
        in the *Amazon Elastic Container Service Developer Guide* .

        - *(dict) --*

          An object representing the secret to expose to your container. Secrets can be exposed to
          a container in the following ways:

          * To inject sensitive data into your containers as environment variables, use the
          ``secrets`` container definition parameter.

          * To reference sensitive information in the log configuration of a container, use the
          ``secretOptions`` container definition parameter.

          For more information, see `Specifying Sensitive Data
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

          - **name** *(string) --* **[REQUIRED]**

            The name of the secret.

          - **valueFrom** *(string) --* **[REQUIRED]**

            The secret to expose to the container. The supported values are either the full ARN of
            the AWS Secrets Manager secret or the full ARN of the parameter in the AWS Systems
            Manager Parameter Store.

            .. note::

              If the AWS Systems Manager Parameter Store parameter exists in the same Region as the
              task you are launching, then you can use either the full ARN or name of the
              parameter. If the parameter exists in a different Region, then the full ARN must be
              specified.

    - **healthCheck** *(dict) --*

      The health check command and associated configuration parameters for the container. This
      parameter maps to ``HealthCheck`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``HEALTHCHECK``
      parameter of `docker run <https://docs.docker.com/engine/reference/run/>`__ .

      - **command** *(list) --* **[REQUIRED]**

        A string array representing the command that the container runs to determine if it is
        healthy. The string array must start with ``CMD`` to execute the command arguments
        directly, or ``CMD-SHELL`` to run the command with the container's default shell. For
        example:

         ``[ "CMD-SHELL", "curl -f http://localhost/ || exit 1" ]``

        An exit code of 0 indicates success, and non-zero exit code indicates failure. For more
        information, see ``HealthCheck`` in the `Create a container
        <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
        `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ .

        - *(string) --*

      - **interval** *(integer) --*

        The time period in seconds between each health check execution. You may specify between 5
        and 300 seconds. The default value is 30 seconds.

      - **timeout** *(integer) --*

        The time period in seconds to wait for a health check to succeed before it is considered a
        failure. You may specify between 2 and 60 seconds. The default value is 5.

      - **retries** *(integer) --*

        The number of times to retry a failed health check before the container is considered
        unhealthy. You may specify between 1 and 10 retries. The default value is 3.

      - **startPeriod** *(integer) --*

        The optional grace period within which to provide containers time to bootstrap before
        failed health checks count towards the maximum number of retries. You may specify between 0
        and 300 seconds. The ``startPeriod`` is disabled by default.

        .. note::

          If a health check succeeds within the ``startPeriod`` , then the container is considered
          healthy and any subsequent failures count toward the maximum number of retries.

    - **systemControls** *(list) --*

      A list of namespaced kernel parameters to set in the container. This parameter maps to
      ``Sysctls`` in the `Create a container
      <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--sysctl`` option
      to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

      .. note::

        It is not recommended that you specify network-related ``systemControls`` parameters for
        multiple containers in a single task that also uses either the ``awsvpc`` or ``host``
        network modes. For tasks that use the ``awsvpc`` network mode, the container that is
        started last determines which ``systemControls`` parameters take effect. For tasks that use
        the ``host`` network mode, it changes the container instance's namespaced kernel parameters
        as well as the containers.

      - *(dict) --*

        A list of namespaced kernel parameters to set in the container. This parameter maps to
        ``Sysctls`` in the `Create a container
        <https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate>`__ section of the
        `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``--sysctl``
        option to `docker run <https://docs.docker.com/engine/reference/run/>`__ .

        It is not recommended that you specify network-related ``systemControls`` parameters for
        multiple containers in a single task that also uses either the ``awsvpc`` or ``host``
        network mode for the following reasons:

        * For tasks that use the ``awsvpc`` network mode, if you set ``systemControls`` for any
        container, it applies to all containers in the task. If you set different
        ``systemControls`` for multiple containers in a single task, the container that is started
        last determines which ``systemControls`` take effect.

        * For tasks that use the ``host`` network mode, the ``systemControls`` parameter applies to
        the container instance's kernel parameter as well as that of all containers of any tasks
        running on that container instance.

        - **namespace** *(string) --*

          The namespaced kernel parameter for which to set a ``value`` .

        - **value** *(string) --*

          The value for the namespaced kernel parameter specified in ``namespace`` .

    - **resourceRequirements** *(list) --*

      The type and amount of a resource to assign to a container. The only supported resource is a
      GPU.

      - *(dict) --*

        The type and amount of a resource to assign to a container. The supported resource types
        are GPUs and Elastic Inference accelerators. For more information, see `Working with GPUs
        on Amazon ECS <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-gpu.html>`__
        or `Working with Amazon Elastic Inference on Amazon ECS
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in the
        *Amazon Elastic Container Service Developer Guide*

        - **value** *(string) --* **[REQUIRED]**

          The value for the specified resource type.

          If the ``GPU`` type is used, the value is the number of physical ``GPUs`` the Amazon ECS
          container agent will reserve for the container. The number of GPUs reserved for all
          containers in a task should not exceed the number of available GPUs on the container
          instance the task is launched on.

          If the ``InferenceAccelerator`` type is used, the ``value`` should match the
          ``deviceName`` for an  InferenceAccelerator specified in a task definition.

        - **type** *(string) --* **[REQUIRED]**

          The type of resource to assign to a container. The supported values are ``GPU`` or
          ``InferenceAccelerator`` .

    - **firelensConfiguration** *(dict) --*

      The FireLens configuration for the container. This is used to specify and configure a log
      router for container logs. For more information, see `Custom Log Routing
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html>`__ in the
      *Amazon Elastic Container Service Developer Guide* .

      - **type** *(string) --* **[REQUIRED]**

        The log router to use. The valid values are ``fluentd`` or ``fluentbit`` .

      - **options** *(dict) --*

        The options to use when configuring the log router. This field is optional and can be used
        to add additional metadata, such as the task, task definition, cluster, and container
        instance details to the log event. If specified, the syntax to use is
        ``"options":{"enable-ecs-log-metadata":"true|false"}`` .

        - *(string) --*

          - *(string) --*
    """


_ClientRegisterTaskDefinitioninferenceAcceleratorsTypeDef = TypedDict(
    "_ClientRegisterTaskDefinitioninferenceAcceleratorsTypeDef",
    {"deviceName": str, "deviceType": str},
)


class ClientRegisterTaskDefinitioninferenceAcceleratorsTypeDef(
    _ClientRegisterTaskDefinitioninferenceAcceleratorsTypeDef
):
    """
    Type definition for `ClientRegisterTaskDefinition` `inferenceAccelerators`

    Details on a Elastic Inference accelerator. For more information, see `Working with Amazon
    Elastic Inference on Amazon ECS
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in the *Amazon
    Elastic Container Service Developer Guide* .

    - **deviceName** *(string) --* **[REQUIRED]**

      The Elastic Inference accelerator device name. The ``deviceName`` must also be referenced in
      a container definition as a  ResourceRequirement .

    - **deviceType** *(string) --* **[REQUIRED]**

      The Elastic Inference accelerator type to use.
    """


_ClientRegisterTaskDefinitionplacementConstraintsTypeDef = TypedDict(
    "_ClientRegisterTaskDefinitionplacementConstraintsTypeDef",
    {"type": str, "expression": str},
    total=False,
)


class ClientRegisterTaskDefinitionplacementConstraintsTypeDef(
    _ClientRegisterTaskDefinitionplacementConstraintsTypeDef
):
    """
    Type definition for `ClientRegisterTaskDefinition` `placementConstraints`

    An object representing a constraint on task placement in the task definition. For more
    information, see `Task Placement Constraints
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html>`__
    in the *Amazon Elastic Container Service Developer Guide* .

    .. note::

      If you are using the Fargate launch type, task placement constraints are not supported.

    - **type** *(string) --*

      The type of constraint. The ``MemberOf`` constraint restricts selection to be from a group of
      valid candidates.

    - **expression** *(string) --*

      A cluster query language expression to apply to the constraint. For more information, see
      `Cluster Query Language
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .
    """


_ClientRegisterTaskDefinitionproxyConfigurationpropertiesTypeDef = TypedDict(
    "_ClientRegisterTaskDefinitionproxyConfigurationpropertiesTypeDef",
    {"name": str, "value": str},
    total=False,
)


class ClientRegisterTaskDefinitionproxyConfigurationpropertiesTypeDef(
    _ClientRegisterTaskDefinitionproxyConfigurationpropertiesTypeDef
):
    """
    Type definition for `ClientRegisterTaskDefinitionproxyConfiguration` `properties`

    A key-value pair object.

    - **name** *(string) --*

      The name of the key-value pair. For environment variables, this is the name of the
      environment variable.

    - **value** *(string) --*

      The value of the key-value pair. For environment variables, this is the value of the
      environment variable.
    """


_RequiredClientRegisterTaskDefinitionproxyConfigurationTypeDef = TypedDict(
    "_RequiredClientRegisterTaskDefinitionproxyConfigurationTypeDef",
    {"containerName": str},
)
_OptionalClientRegisterTaskDefinitionproxyConfigurationTypeDef = TypedDict(
    "_OptionalClientRegisterTaskDefinitionproxyConfigurationTypeDef",
    {
        "type": str,
        "properties": List[
            ClientRegisterTaskDefinitionproxyConfigurationpropertiesTypeDef
        ],
    },
    total=False,
)


class ClientRegisterTaskDefinitionproxyConfigurationTypeDef(
    _RequiredClientRegisterTaskDefinitionproxyConfigurationTypeDef,
    _OptionalClientRegisterTaskDefinitionproxyConfigurationTypeDef,
):
    """
    Type definition for `ClientRegisterTaskDefinition` `proxyConfiguration`

    The configuration details for the App Mesh proxy.

    For tasks using the EC2 launch type, the container instances require at least version 1.26.0 of
    the container agent and at least version 1.26.0-1 of the ``ecs-init`` package to enable a proxy
    configuration. If your container instances are launched from the Amazon ECS-optimized AMI version
    ``20190301`` or later, then they contain the required versions of the container agent and
    ``ecs-init`` . For more information, see `Amazon ECS-optimized Linux AMI
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html>`__ in the
    *Amazon Elastic Container Service Developer Guide* .

    For tasks using the Fargate launch type, the task or service requires platform version 1.3.0 or
    later.

    - **type** *(string) --*

      The proxy type. The only supported value is ``APPMESH`` .

    - **containerName** *(string) --* **[REQUIRED]**

      The name of the container that will serve as the App Mesh proxy.

    - **properties** *(list) --*

      The set of network configuration parameters to provide the Container Network Interface (CNI)
      plugin, specified as key-value pairs.

      * ``IgnoredUID`` - (Required) The user ID (UID) of the proxy container as defined by the
      ``user`` parameter in a container definition. This is used to ensure the proxy ignores its own
      traffic. If ``IgnoredGID`` is specified, this field can be empty.

      * ``IgnoredGID`` - (Required) The group ID (GID) of the proxy container as defined by the
      ``user`` parameter in a container definition. This is used to ensure the proxy ignores its own
      traffic. If ``IgnoredUID`` is specified, this field can be empty.

      * ``AppPorts`` - (Required) The list of ports that the application uses. Network traffic to
      these ports is forwarded to the ``ProxyIngressPort`` and ``ProxyEgressPort`` .

      * ``ProxyIngressPort`` - (Required) Specifies the port that incoming traffic to the
      ``AppPorts`` is directed to.

      * ``ProxyEgressPort`` - (Required) Specifies the port that outgoing traffic from the
      ``AppPorts`` is directed to.

      * ``EgressIgnoredPorts`` - (Required) The egress traffic going to the specified ports is
      ignored and not redirected to the ``ProxyEgressPort`` . It can be an empty list.

      * ``EgressIgnoredIPs`` - (Required) The egress traffic going to the specified IP addresses is
      ignored and not redirected to the ``ProxyEgressPort`` . It can be an empty list.

      - *(dict) --*

        A key-value pair object.

        - **name** *(string) --*

          The name of the key-value pair. For environment variables, this is the name of the
          environment variable.

        - **value** *(string) --*

          The value of the key-value pair. For environment variables, this is the value of the
          environment variable.
    """


_ClientRegisterTaskDefinitiontagsTypeDef = TypedDict(
    "_ClientRegisterTaskDefinitiontagsTypeDef", {"key": str, "value": str}, total=False
)


class ClientRegisterTaskDefinitiontagsTypeDef(_ClientRegisterTaskDefinitiontagsTypeDef):
    """
    Type definition for `ClientRegisterTaskDefinition` `tags`

    The metadata that you apply to a resource to help you categorize and organize them. Each tag
    consists of a key and an optional value, both of which you define.

    The following basic restrictions apply to tags:

    * Maximum number of tags per resource - 50

    * For each resource, each tag key must be unique, and each tag key can have only one value.

    * Maximum key length - 128 Unicode characters in UTF-8

    * Maximum value length - 256 Unicode characters in UTF-8

    * If your tagging schema is used across multiple services and resources, remember that other
    services may have restrictions on allowed characters. Generally allowed characters are:
    letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ :
    / @.

    * Tag keys and values are case-sensitive.

    * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a prefix
    for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys or
    values with this prefix. Tags with this prefix do not count against your tags per resource
    limit.

    - **key** *(string) --*

      One part of a key-value pair that make up a tag. A ``key`` is a general label that acts like
      a category for more specific tag values.

    - **value** *(string) --*

      The optional part of a key-value pair that make up a tag. A ``value`` acts as a descriptor
      within a tag category (key).
    """


_ClientRegisterTaskDefinitionvolumesdockerVolumeConfigurationTypeDef = TypedDict(
    "_ClientRegisterTaskDefinitionvolumesdockerVolumeConfigurationTypeDef",
    {
        "scope": str,
        "autoprovision": bool,
        "driver": str,
        "driverOpts": Dict[str, str],
        "labels": Dict[str, str],
    },
    total=False,
)


class ClientRegisterTaskDefinitionvolumesdockerVolumeConfigurationTypeDef(
    _ClientRegisterTaskDefinitionvolumesdockerVolumeConfigurationTypeDef
):
    """
    Type definition for `ClientRegisterTaskDefinitionvolumes` `dockerVolumeConfiguration`

    This parameter is specified when you are using Docker volumes. Docker volumes are only
    supported when you are using the EC2 launch type. Windows containers only support the use of
    the ``local`` driver. To use bind mounts, specify a ``host`` instead.

    - **scope** *(string) --*

      The scope for the Docker volume that determines its lifecycle. Docker volumes that are
      scoped to a ``task`` are automatically provisioned when the task starts and destroyed when
      the task stops. Docker volumes that are scoped as ``shared`` persist after the task stops.

    - **autoprovision** *(boolean) --*

      If this value is ``true`` , the Docker volume is created if it does not already exist.

      .. note::

        This field is only used if the ``scope`` is ``shared`` .

    - **driver** *(string) --*

      The Docker volume driver to use. The driver value must match the driver name provided by
      Docker because it is used for task placement. If the driver was installed using the Docker
      plugin CLI, use ``docker plugin ls`` to retrieve the driver name from your container
      instance. If the driver was installed using another method, use Docker plugin discovery to
      retrieve the driver name. For more information, see `Docker plugin discovery
      <https://docs.docker.com/engine/extend/plugin_api/#plugin-discovery>`__ . This parameter
      maps to ``Driver`` in the `Create a volume
      <https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``xxdriver``
      option to `docker volume create
      <https://docs.docker.com/engine/reference/commandline/volume_create/>`__ .

    - **driverOpts** *(dict) --*

      A map of Docker driver-specific options passed through. This parameter maps to
      ``DriverOpts`` in the `Create a volume
      <https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate>`__ section of the
      `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``xxopt`` option
      to `docker volume create
      <https://docs.docker.com/engine/reference/commandline/volume_create/>`__ .

      - *(string) --*

        - *(string) --*

    - **labels** *(dict) --*

      Custom metadata to add to your Docker volume. This parameter maps to ``Labels`` in the
      `Create a volume <https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate>`__
      section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
      ``xxlabel`` option to `docker volume create
      <https://docs.docker.com/engine/reference/commandline/volume_create/>`__ .

      - *(string) --*

        - *(string) --*
    """


_ClientRegisterTaskDefinitionvolumeshostTypeDef = TypedDict(
    "_ClientRegisterTaskDefinitionvolumeshostTypeDef", {"sourcePath": str}, total=False
)


class ClientRegisterTaskDefinitionvolumeshostTypeDef(
    _ClientRegisterTaskDefinitionvolumeshostTypeDef
):
    """
    Type definition for `ClientRegisterTaskDefinitionvolumes` `host`

    This parameter is specified when you are using bind mount host volumes. Bind mount host
    volumes are supported when you are using either the EC2 or Fargate launch types. The contents
    of the ``host`` parameter determine whether your bind mount host volume persists on the host
    container instance and where it is stored. If the ``host`` parameter is empty, then the
    Docker daemon assigns a host path for your data volume. However, the data is not guaranteed
    to persist after the containers associated with it stop running.

    Windows containers can mount whole directories on the same drive as ``$env:ProgramData`` .
    Windows containers cannot mount directories on a different drive, and mount point cannot be
    across drives. For example, you can mount ``C:\\my\\path:C:\\my\\path`` and ``D:\\:D:\\`` ,
    but not ``D:\\my\\path:C:\\my\\path`` or ``D:\\:C:\\my\\path`` .

    - **sourcePath** *(string) --*

      When the ``host`` parameter is used, specify a ``sourcePath`` to declare the path on the
      host container instance that is presented to the container. If this parameter is empty,
      then the Docker daemon has assigned a host path for you. If the ``host`` parameter contains
      a ``sourcePath`` file location, then the data volume persists at the specified location on
      the host container instance until you delete it manually. If the ``sourcePath`` value does
      not exist on the host container instance, the Docker daemon creates it. If the location
      does exist, the contents of the source path folder are exported.

      If you are using the Fargate launch type, the ``sourcePath`` parameter is not supported.
    """


_ClientRegisterTaskDefinitionvolumesTypeDef = TypedDict(
    "_ClientRegisterTaskDefinitionvolumesTypeDef",
    {
        "name": str,
        "host": ClientRegisterTaskDefinitionvolumeshostTypeDef,
        "dockerVolumeConfiguration": ClientRegisterTaskDefinitionvolumesdockerVolumeConfigurationTypeDef,
    },
    total=False,
)


class ClientRegisterTaskDefinitionvolumesTypeDef(
    _ClientRegisterTaskDefinitionvolumesTypeDef
):
    """
    Type definition for `ClientRegisterTaskDefinition` `volumes`

    A data volume used in a task definition. For tasks that use a Docker volume, specify a
    ``DockerVolumeConfiguration`` . For tasks that use a bind mount host volume, specify a ``host``
    and optional ``sourcePath`` . For more information, see `Using Data Volumes in Tasks
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_data_volumes.html>`__ .

    - **name** *(string) --*

      The name of the volume. Up to 255 letters (uppercase and lowercase), numbers, and hyphens are
      allowed. This name is referenced in the ``sourceVolume`` parameter of container definition
      ``mountPoints`` .

    - **host** *(dict) --*

      This parameter is specified when you are using bind mount host volumes. Bind mount host
      volumes are supported when you are using either the EC2 or Fargate launch types. The contents
      of the ``host`` parameter determine whether your bind mount host volume persists on the host
      container instance and where it is stored. If the ``host`` parameter is empty, then the
      Docker daemon assigns a host path for your data volume. However, the data is not guaranteed
      to persist after the containers associated with it stop running.

      Windows containers can mount whole directories on the same drive as ``$env:ProgramData`` .
      Windows containers cannot mount directories on a different drive, and mount point cannot be
      across drives. For example, you can mount ``C:\\my\\path:C:\\my\\path`` and ``D:\\:D:\\`` ,
      but not ``D:\\my\\path:C:\\my\\path`` or ``D:\\:C:\\my\\path`` .

      - **sourcePath** *(string) --*

        When the ``host`` parameter is used, specify a ``sourcePath`` to declare the path on the
        host container instance that is presented to the container. If this parameter is empty,
        then the Docker daemon has assigned a host path for you. If the ``host`` parameter contains
        a ``sourcePath`` file location, then the data volume persists at the specified location on
        the host container instance until you delete it manually. If the ``sourcePath`` value does
        not exist on the host container instance, the Docker daemon creates it. If the location
        does exist, the contents of the source path folder are exported.

        If you are using the Fargate launch type, the ``sourcePath`` parameter is not supported.

    - **dockerVolumeConfiguration** *(dict) --*

      This parameter is specified when you are using Docker volumes. Docker volumes are only
      supported when you are using the EC2 launch type. Windows containers only support the use of
      the ``local`` driver. To use bind mounts, specify a ``host`` instead.

      - **scope** *(string) --*

        The scope for the Docker volume that determines its lifecycle. Docker volumes that are
        scoped to a ``task`` are automatically provisioned when the task starts and destroyed when
        the task stops. Docker volumes that are scoped as ``shared`` persist after the task stops.

      - **autoprovision** *(boolean) --*

        If this value is ``true`` , the Docker volume is created if it does not already exist.

        .. note::

          This field is only used if the ``scope`` is ``shared`` .

      - **driver** *(string) --*

        The Docker volume driver to use. The driver value must match the driver name provided by
        Docker because it is used for task placement. If the driver was installed using the Docker
        plugin CLI, use ``docker plugin ls`` to retrieve the driver name from your container
        instance. If the driver was installed using another method, use Docker plugin discovery to
        retrieve the driver name. For more information, see `Docker plugin discovery
        <https://docs.docker.com/engine/extend/plugin_api/#plugin-discovery>`__ . This parameter
        maps to ``Driver`` in the `Create a volume
        <https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate>`__ section of the
        `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``xxdriver``
        option to `docker volume create
        <https://docs.docker.com/engine/reference/commandline/volume_create/>`__ .

      - **driverOpts** *(dict) --*

        A map of Docker driver-specific options passed through. This parameter maps to
        ``DriverOpts`` in the `Create a volume
        <https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate>`__ section of the
        `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the ``xxopt`` option
        to `docker volume create
        <https://docs.docker.com/engine/reference/commandline/volume_create/>`__ .

        - *(string) --*

          - *(string) --*

      - **labels** *(dict) --*

        Custom metadata to add to your Docker volume. This parameter maps to ``Labels`` in the
        `Create a volume <https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate>`__
        section of the `Docker Remote API <https://docs.docker.com/engine/api/v1.35/>`__ and the
        ``xxlabel`` option to `docker volume create
        <https://docs.docker.com/engine/reference/commandline/volume_create/>`__ .

        - *(string) --*

          - *(string) --*
    """


_ClientRunTaskResponsefailuresTypeDef = TypedDict(
    "_ClientRunTaskResponsefailuresTypeDef",
    {"arn": str, "reason": str, "detail": str},
    total=False,
)


class ClientRunTaskResponsefailuresTypeDef(_ClientRunTaskResponsefailuresTypeDef):
    """
    Type definition for `ClientRunTaskResponse` `failures`

    A failed resource.

    - **arn** *(string) --*

      The Amazon Resource Name (ARN) of the failed resource.

    - **reason** *(string) --*

      The reason for the failure.

    - **detail** *(string) --*

      The details of the failure.
    """


_ClientRunTaskResponsetasksattachmentsdetailsTypeDef = TypedDict(
    "_ClientRunTaskResponsetasksattachmentsdetailsTypeDef",
    {"name": str, "value": str},
    total=False,
)


class ClientRunTaskResponsetasksattachmentsdetailsTypeDef(
    _ClientRunTaskResponsetasksattachmentsdetailsTypeDef
):
    """
    Type definition for `ClientRunTaskResponsetasksattachments` `details`

    A key-value pair object.

    - **name** *(string) --*

      The name of the key-value pair. For environment variables, this is the name of
      the environment variable.

    - **value** *(string) --*

      The value of the key-value pair. For environment variables, this is the value of
      the environment variable.
    """


_ClientRunTaskResponsetasksattachmentsTypeDef = TypedDict(
    "_ClientRunTaskResponsetasksattachmentsTypeDef",
    {
        "id": str,
        "type": str,
        "status": str,
        "details": List[ClientRunTaskResponsetasksattachmentsdetailsTypeDef],
    },
    total=False,
)


class ClientRunTaskResponsetasksattachmentsTypeDef(
    _ClientRunTaskResponsetasksattachmentsTypeDef
):
    """
    Type definition for `ClientRunTaskResponsetasks` `attachments`

    An object representing a container instance or task attachment.

    - **id** *(string) --*

      The unique identifier for the attachment.

    - **type** *(string) --*

      The type of the attachment, such as ``ElasticNetworkInterface`` .

    - **status** *(string) --*

      The status of the attachment. Valid values are ``PRECREATED`` , ``CREATED`` ,
      ``ATTACHING`` , ``ATTACHED`` , ``DETACHING`` , ``DETACHED`` , and ``DELETED`` .

    - **details** *(list) --*

      Details of the attachment. For elastic network interfaces, this includes the network
      interface ID, the MAC address, the subnet ID, and the private IPv4 address.

      - *(dict) --*

        A key-value pair object.

        - **name** *(string) --*

          The name of the key-value pair. For environment variables, this is the name of
          the environment variable.

        - **value** *(string) --*

          The value of the key-value pair. For environment variables, this is the value of
          the environment variable.
    """


_ClientRunTaskResponsetasksattributesTypeDef = TypedDict(
    "_ClientRunTaskResponsetasksattributesTypeDef",
    {"name": str, "value": str, "targetType": str, "targetId": str},
    total=False,
)


class ClientRunTaskResponsetasksattributesTypeDef(
    _ClientRunTaskResponsetasksattributesTypeDef
):
    """
    Type definition for `ClientRunTaskResponsetasks` `attributes`

    An attribute is a name-value pair associated with an Amazon ECS object. Attributes
    enable you to extend the Amazon ECS data model by adding custom metadata to your
    resources. For more information, see `Attributes
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html#attributes>`__
    in the *Amazon Elastic Container Service Developer Guide* .

    - **name** *(string) --*

      The name of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
      hyphens, underscores, and periods are allowed.

    - **value** *(string) --*

      The value of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
      hyphens, underscores, periods, at signs (@), forward slashes, colons, and spaces are
      allowed.

    - **targetType** *(string) --*

      The type of the target with which to attach the attribute. This parameter is required
      if you use the short form ID for a resource instead of the full ARN.

    - **targetId** *(string) --*

      The ID of the target. You can specify the short form ID for a resource or the full
      Amazon Resource Name (ARN).
    """


_ClientRunTaskResponsetaskscontainersnetworkBindingsTypeDef = TypedDict(
    "_ClientRunTaskResponsetaskscontainersnetworkBindingsTypeDef",
    {"bindIP": str, "containerPort": int, "hostPort": int, "protocol": str},
    total=False,
)


class ClientRunTaskResponsetaskscontainersnetworkBindingsTypeDef(
    _ClientRunTaskResponsetaskscontainersnetworkBindingsTypeDef
):
    """
    Type definition for `ClientRunTaskResponsetaskscontainers` `networkBindings`

    Details on the network bindings between a container and its host container
    instance. After a task reaches the ``RUNNING`` status, manual and automatic host
    and container port assignments are visible in the ``networkBindings`` section of
    DescribeTasks API responses.

    - **bindIP** *(string) --*

      The IP address that the container is bound to on the container instance.

    - **containerPort** *(integer) --*

      The port number on the container that is used with the network binding.

    - **hostPort** *(integer) --*

      The port number on the host that is used with the network binding.

    - **protocol** *(string) --*

      The protocol used for the network binding.
    """


_ClientRunTaskResponsetaskscontainersnetworkInterfacesTypeDef = TypedDict(
    "_ClientRunTaskResponsetaskscontainersnetworkInterfacesTypeDef",
    {"attachmentId": str, "privateIpv4Address": str, "ipv6Address": str},
    total=False,
)


class ClientRunTaskResponsetaskscontainersnetworkInterfacesTypeDef(
    _ClientRunTaskResponsetaskscontainersnetworkInterfacesTypeDef
):
    """
    Type definition for `ClientRunTaskResponsetaskscontainers` `networkInterfaces`

    An object representing the elastic network interface for tasks that use the
    ``awsvpc`` network mode.

    - **attachmentId** *(string) --*

      The attachment ID for the network interface.

    - **privateIpv4Address** *(string) --*

      The private IPv4 address for the network interface.

    - **ipv6Address** *(string) --*

      The private IPv6 address for the network interface.
    """


_ClientRunTaskResponsetaskscontainersTypeDef = TypedDict(
    "_ClientRunTaskResponsetaskscontainersTypeDef",
    {
        "containerArn": str,
        "taskArn": str,
        "name": str,
        "image": str,
        "imageDigest": str,
        "runtimeId": str,
        "lastStatus": str,
        "exitCode": int,
        "reason": str,
        "networkBindings": List[
            ClientRunTaskResponsetaskscontainersnetworkBindingsTypeDef
        ],
        "networkInterfaces": List[
            ClientRunTaskResponsetaskscontainersnetworkInterfacesTypeDef
        ],
        "healthStatus": str,
        "cpu": str,
        "memory": str,
        "memoryReservation": str,
        "gpuIds": List[str],
    },
    total=False,
)


class ClientRunTaskResponsetaskscontainersTypeDef(
    _ClientRunTaskResponsetaskscontainersTypeDef
):
    """
    Type definition for `ClientRunTaskResponsetasks` `containers`

    A Docker container that is part of a task.

    - **containerArn** *(string) --*

      The Amazon Resource Name (ARN) of the container.

    - **taskArn** *(string) --*

      The ARN of the task.

    - **name** *(string) --*

      The name of the container.

    - **image** *(string) --*

      The image used for the container.

    - **imageDigest** *(string) --*

      The container image manifest digest.

      .. note::

        The ``imageDigest`` is only returned if the container is using an image hosted in
        Amazon ECR, otherwise it is omitted.

    - **runtimeId** *(string) --*

      The ID of the Docker container.

    - **lastStatus** *(string) --*

      The last known status of the container.

    - **exitCode** *(integer) --*

      The exit code returned from the container.

    - **reason** *(string) --*

      A short (255 max characters) human-readable string to provide additional details
      about a running or stopped container.

    - **networkBindings** *(list) --*

      The network bindings associated with the container.

      - *(dict) --*

        Details on the network bindings between a container and its host container
        instance. After a task reaches the ``RUNNING`` status, manual and automatic host
        and container port assignments are visible in the ``networkBindings`` section of
        DescribeTasks API responses.

        - **bindIP** *(string) --*

          The IP address that the container is bound to on the container instance.

        - **containerPort** *(integer) --*

          The port number on the container that is used with the network binding.

        - **hostPort** *(integer) --*

          The port number on the host that is used with the network binding.

        - **protocol** *(string) --*

          The protocol used for the network binding.

    - **networkInterfaces** *(list) --*

      The network interfaces associated with the container.

      - *(dict) --*

        An object representing the elastic network interface for tasks that use the
        ``awsvpc`` network mode.

        - **attachmentId** *(string) --*

          The attachment ID for the network interface.

        - **privateIpv4Address** *(string) --*

          The private IPv4 address for the network interface.

        - **ipv6Address** *(string) --*

          The private IPv6 address for the network interface.

    - **healthStatus** *(string) --*

      The health status of the container. If health checks are not configured for this
      container in its task definition, then it reports the health status as ``UNKNOWN`` .

    - **cpu** *(string) --*

      The number of CPU units set for the container. The value will be ``0`` if no value
      was specified in the container definition when the task definition was registered.

    - **memory** *(string) --*

      The hard limit (in MiB) of memory set for the container.

    - **memoryReservation** *(string) --*

      The soft limit (in MiB) of memory set for the container.

    - **gpuIds** *(list) --*

      The IDs of each GPU assigned to the container.

      - *(string) --*
    """


_ClientRunTaskResponsetasksinferenceAcceleratorsTypeDef = TypedDict(
    "_ClientRunTaskResponsetasksinferenceAcceleratorsTypeDef",
    {"deviceName": str, "deviceType": str},
    total=False,
)


class ClientRunTaskResponsetasksinferenceAcceleratorsTypeDef(
    _ClientRunTaskResponsetasksinferenceAcceleratorsTypeDef
):
    """
    Type definition for `ClientRunTaskResponsetasks` `inferenceAccelerators`

    Details on a Elastic Inference accelerator. For more information, see `Working with
    Amazon Elastic Inference on Amazon ECS
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in the
    *Amazon Elastic Container Service Developer Guide* .

    - **deviceName** *(string) --*

      The Elastic Inference accelerator device name. The ``deviceName`` must also be
      referenced in a container definition as a  ResourceRequirement .

    - **deviceType** *(string) --*

      The Elastic Inference accelerator type to use.
    """


_ClientRunTaskResponsetasksoverridescontainerOverridesenvironmentTypeDef = TypedDict(
    "_ClientRunTaskResponsetasksoverridescontainerOverridesenvironmentTypeDef",
    {"name": str, "value": str},
    total=False,
)


class ClientRunTaskResponsetasksoverridescontainerOverridesenvironmentTypeDef(
    _ClientRunTaskResponsetasksoverridescontainerOverridesenvironmentTypeDef
):
    """
    Type definition for `ClientRunTaskResponsetasksoverridescontainerOverrides` `environment`

    A key-value pair object.

    - **name** *(string) --*

      The name of the key-value pair. For environment variables, this is the name of
      the environment variable.

    - **value** *(string) --*

      The value of the key-value pair. For environment variables, this is the value
      of the environment variable.
    """


_ClientRunTaskResponsetasksoverridescontainerOverridesresourceRequirementsTypeDef = TypedDict(
    "_ClientRunTaskResponsetasksoverridescontainerOverridesresourceRequirementsTypeDef",
    {"value": str, "type": str},
    total=False,
)


class ClientRunTaskResponsetasksoverridescontainerOverridesresourceRequirementsTypeDef(
    _ClientRunTaskResponsetasksoverridescontainerOverridesresourceRequirementsTypeDef
):
    """
    Type definition for `ClientRunTaskResponsetasksoverridescontainerOverrides` `resourceRequirements`

    The type and amount of a resource to assign to a container. The supported
    resource types are GPUs and Elastic Inference accelerators. For more information,
    see `Working with GPUs on Amazon ECS
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-gpu.html>`__ or
    `Working with Amazon Elastic Inference on Amazon ECS
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in
    the *Amazon Elastic Container Service Developer Guide*

    - **value** *(string) --*

      The value for the specified resource type.

      If the ``GPU`` type is used, the value is the number of physical ``GPUs`` the
      Amazon ECS container agent will reserve for the container. The number of GPUs
      reserved for all containers in a task should not exceed the number of available
      GPUs on the container instance the task is launched on.

      If the ``InferenceAccelerator`` type is used, the ``value`` should match the
      ``deviceName`` for an  InferenceAccelerator specified in a task definition.

    - **type** *(string) --*

      The type of resource to assign to a container. The supported values are ``GPU``
      or ``InferenceAccelerator`` .
    """


_ClientRunTaskResponsetasksoverridescontainerOverridesTypeDef = TypedDict(
    "_ClientRunTaskResponsetasksoverridescontainerOverridesTypeDef",
    {
        "name": str,
        "command": List[str],
        "environment": List[
            ClientRunTaskResponsetasksoverridescontainerOverridesenvironmentTypeDef
        ],
        "cpu": int,
        "memory": int,
        "memoryReservation": int,
        "resourceRequirements": List[
            ClientRunTaskResponsetasksoverridescontainerOverridesresourceRequirementsTypeDef
        ],
    },
    total=False,
)


class ClientRunTaskResponsetasksoverridescontainerOverridesTypeDef(
    _ClientRunTaskResponsetasksoverridescontainerOverridesTypeDef
):
    """
    Type definition for `ClientRunTaskResponsetasksoverrides` `containerOverrides`

    The overrides that should be sent to a container. An empty container override can be
    passed in. An example of an empty container override would be
    ``{"containerOverrides": [ ] }`` . If a non-empty container override is specified,
    the ``name`` parameter must be included.

    - **name** *(string) --*

      The name of the container that receives the override. This parameter is required if
      any override is specified.

    - **command** *(list) --*

      The command to send to the container that overrides the default command from the
      Docker image or the task definition. You must also specify a container name.

      - *(string) --*

    - **environment** *(list) --*

      The environment variables to send to the container. You can add new environment
      variables, which are added to the container at launch, or you can override the
      existing environment variables from the Docker image or the task definition. You
      must also specify a container name.

      - *(dict) --*

        A key-value pair object.

        - **name** *(string) --*

          The name of the key-value pair. For environment variables, this is the name of
          the environment variable.

        - **value** *(string) --*

          The value of the key-value pair. For environment variables, this is the value
          of the environment variable.

    - **cpu** *(integer) --*

      The number of ``cpu`` units reserved for the container, instead of the default
      value from the task definition. You must also specify a container name.

    - **memory** *(integer) --*

      The hard limit (in MiB) of memory to present to the container, instead of the
      default value from the task definition. If your container attempts to exceed the
      memory specified here, the container is killed. You must also specify a container
      name.

    - **memoryReservation** *(integer) --*

      The soft limit (in MiB) of memory to reserve for the container, instead of the
      default value from the task definition. You must also specify a container name.

    - **resourceRequirements** *(list) --*

      The type and amount of a resource to assign to a container, instead of the default
      value from the task definition. The only supported resource is a GPU.

      - *(dict) --*

        The type and amount of a resource to assign to a container. The supported
        resource types are GPUs and Elastic Inference accelerators. For more information,
        see `Working with GPUs on Amazon ECS
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-gpu.html>`__ or
        `Working with Amazon Elastic Inference on Amazon ECS
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in
        the *Amazon Elastic Container Service Developer Guide*

        - **value** *(string) --*

          The value for the specified resource type.

          If the ``GPU`` type is used, the value is the number of physical ``GPUs`` the
          Amazon ECS container agent will reserve for the container. The number of GPUs
          reserved for all containers in a task should not exceed the number of available
          GPUs on the container instance the task is launched on.

          If the ``InferenceAccelerator`` type is used, the ``value`` should match the
          ``deviceName`` for an  InferenceAccelerator specified in a task definition.

        - **type** *(string) --*

          The type of resource to assign to a container. The supported values are ``GPU``
          or ``InferenceAccelerator`` .
    """


_ClientRunTaskResponsetasksoverridesinferenceAcceleratorOverridesTypeDef = TypedDict(
    "_ClientRunTaskResponsetasksoverridesinferenceAcceleratorOverridesTypeDef",
    {"deviceName": str, "deviceType": str},
    total=False,
)


class ClientRunTaskResponsetasksoverridesinferenceAcceleratorOverridesTypeDef(
    _ClientRunTaskResponsetasksoverridesinferenceAcceleratorOverridesTypeDef
):
    """
    Type definition for `ClientRunTaskResponsetasksoverrides` `inferenceAcceleratorOverrides`

    Details on an Elastic Inference accelerator task override. This parameter is used to
    override the Elastic Inference accelerator specified in the task definition. For more
    information, see `Working with Amazon Elastic Inference on Amazon ECS
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in the
    *Amazon Elastic Container Service Developer Guide* .

    - **deviceName** *(string) --*

      The Elastic Inference accelerator device name to override for the task. This
      parameter must match a ``deviceName`` specified in the task definition.

    - **deviceType** *(string) --*

      The Elastic Inference accelerator type to use.
    """


_ClientRunTaskResponsetasksoverridesTypeDef = TypedDict(
    "_ClientRunTaskResponsetasksoverridesTypeDef",
    {
        "containerOverrides": List[
            ClientRunTaskResponsetasksoverridescontainerOverridesTypeDef
        ],
        "cpu": str,
        "inferenceAcceleratorOverrides": List[
            ClientRunTaskResponsetasksoverridesinferenceAcceleratorOverridesTypeDef
        ],
        "executionRoleArn": str,
        "memory": str,
        "taskRoleArn": str,
    },
    total=False,
)


class ClientRunTaskResponsetasksoverridesTypeDef(
    _ClientRunTaskResponsetasksoverridesTypeDef
):
    """
    Type definition for `ClientRunTaskResponsetasks` `overrides`

    One or more container overrides.

    - **containerOverrides** *(list) --*

      One or more container overrides sent to a task.

      - *(dict) --*

        The overrides that should be sent to a container. An empty container override can be
        passed in. An example of an empty container override would be
        ``{"containerOverrides": [ ] }`` . If a non-empty container override is specified,
        the ``name`` parameter must be included.

        - **name** *(string) --*

          The name of the container that receives the override. This parameter is required if
          any override is specified.

        - **command** *(list) --*

          The command to send to the container that overrides the default command from the
          Docker image or the task definition. You must also specify a container name.

          - *(string) --*

        - **environment** *(list) --*

          The environment variables to send to the container. You can add new environment
          variables, which are added to the container at launch, or you can override the
          existing environment variables from the Docker image or the task definition. You
          must also specify a container name.

          - *(dict) --*

            A key-value pair object.

            - **name** *(string) --*

              The name of the key-value pair. For environment variables, this is the name of
              the environment variable.

            - **value** *(string) --*

              The value of the key-value pair. For environment variables, this is the value
              of the environment variable.

        - **cpu** *(integer) --*

          The number of ``cpu`` units reserved for the container, instead of the default
          value from the task definition. You must also specify a container name.

        - **memory** *(integer) --*

          The hard limit (in MiB) of memory to present to the container, instead of the
          default value from the task definition. If your container attempts to exceed the
          memory specified here, the container is killed. You must also specify a container
          name.

        - **memoryReservation** *(integer) --*

          The soft limit (in MiB) of memory to reserve for the container, instead of the
          default value from the task definition. You must also specify a container name.

        - **resourceRequirements** *(list) --*

          The type and amount of a resource to assign to a container, instead of the default
          value from the task definition. The only supported resource is a GPU.

          - *(dict) --*

            The type and amount of a resource to assign to a container. The supported
            resource types are GPUs and Elastic Inference accelerators. For more information,
            see `Working with GPUs on Amazon ECS
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-gpu.html>`__ or
            `Working with Amazon Elastic Inference on Amazon ECS
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in
            the *Amazon Elastic Container Service Developer Guide*

            - **value** *(string) --*

              The value for the specified resource type.

              If the ``GPU`` type is used, the value is the number of physical ``GPUs`` the
              Amazon ECS container agent will reserve for the container. The number of GPUs
              reserved for all containers in a task should not exceed the number of available
              GPUs on the container instance the task is launched on.

              If the ``InferenceAccelerator`` type is used, the ``value`` should match the
              ``deviceName`` for an  InferenceAccelerator specified in a task definition.

            - **type** *(string) --*

              The type of resource to assign to a container. The supported values are ``GPU``
              or ``InferenceAccelerator`` .

    - **cpu** *(string) --*

      The cpu override for the task.

    - **inferenceAcceleratorOverrides** *(list) --*

      The Elastic Inference accelerator override for the task.

      - *(dict) --*

        Details on an Elastic Inference accelerator task override. This parameter is used to
        override the Elastic Inference accelerator specified in the task definition. For more
        information, see `Working with Amazon Elastic Inference on Amazon ECS
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in the
        *Amazon Elastic Container Service Developer Guide* .

        - **deviceName** *(string) --*

          The Elastic Inference accelerator device name to override for the task. This
          parameter must match a ``deviceName`` specified in the task definition.

        - **deviceType** *(string) --*

          The Elastic Inference accelerator type to use.

    - **executionRoleArn** *(string) --*

      The Amazon Resource Name (ARN) of the task execution role that the Amazon ECS container
      agent and the Docker daemon can assume.

    - **memory** *(string) --*

      The memory override for the task.

    - **taskRoleArn** *(string) --*

      The Amazon Resource Name (ARN) of the IAM role that containers in this task can assume.
      All containers in this task are granted the permissions that are specified in this role.
    """


_ClientRunTaskResponsetaskstagsTypeDef = TypedDict(
    "_ClientRunTaskResponsetaskstagsTypeDef", {"key": str, "value": str}, total=False
)


class ClientRunTaskResponsetaskstagsTypeDef(_ClientRunTaskResponsetaskstagsTypeDef):
    """
    Type definition for `ClientRunTaskResponsetasks` `tags`

    The metadata that you apply to a resource to help you categorize and organize them.
    Each tag consists of a key and an optional value, both of which you define.

    The following basic restrictions apply to tags:

    * Maximum number of tags per resource - 50

    * For each resource, each tag key must be unique, and each tag key can have only one
    value.

    * Maximum key length - 128 Unicode characters in UTF-8

    * Maximum value length - 256 Unicode characters in UTF-8

    * If your tagging schema is used across multiple services and resources, remember that
    other services may have restrictions on allowed characters. Generally allowed
    characters are: letters, numbers, and spaces representable in UTF-8, and the following
    characters: + - = . _ : / @.

    * Tag keys and values are case-sensitive.

    * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
    prefix for either keys or values as it is reserved for AWS use. You cannot edit or
    delete tag keys or values with this prefix. Tags with this prefix do not count against
    your tags per resource limit.

    - **key** *(string) --*

      One part of a key-value pair that make up a tag. A ``key`` is a general label that
      acts like a category for more specific tag values.

    - **value** *(string) --*

      The optional part of a key-value pair that make up a tag. A ``value`` acts as a
      descriptor within a tag category (key).
    """


_ClientRunTaskResponsetasksTypeDef = TypedDict(
    "_ClientRunTaskResponsetasksTypeDef",
    {
        "attachments": List[ClientRunTaskResponsetasksattachmentsTypeDef],
        "attributes": List[ClientRunTaskResponsetasksattributesTypeDef],
        "availabilityZone": str,
        "clusterArn": str,
        "connectivity": str,
        "connectivityAt": datetime,
        "containerInstanceArn": str,
        "containers": List[ClientRunTaskResponsetaskscontainersTypeDef],
        "cpu": str,
        "createdAt": datetime,
        "desiredStatus": str,
        "executionStoppedAt": datetime,
        "group": str,
        "healthStatus": str,
        "inferenceAccelerators": List[
            ClientRunTaskResponsetasksinferenceAcceleratorsTypeDef
        ],
        "lastStatus": str,
        "launchType": str,
        "memory": str,
        "overrides": ClientRunTaskResponsetasksoverridesTypeDef,
        "platformVersion": str,
        "pullStartedAt": datetime,
        "pullStoppedAt": datetime,
        "startedAt": datetime,
        "startedBy": str,
        "stopCode": str,
        "stoppedAt": datetime,
        "stoppedReason": str,
        "stoppingAt": datetime,
        "tags": List[ClientRunTaskResponsetaskstagsTypeDef],
        "taskArn": str,
        "taskDefinitionArn": str,
        "version": int,
    },
    total=False,
)


class ClientRunTaskResponsetasksTypeDef(_ClientRunTaskResponsetasksTypeDef):
    """
    Type definition for `ClientRunTaskResponse` `tasks`

    Details on a task in a cluster.

    - **attachments** *(list) --*

      The Elastic Network Adapter associated with the task if the task uses the ``awsvpc``
      network mode.

      - *(dict) --*

        An object representing a container instance or task attachment.

        - **id** *(string) --*

          The unique identifier for the attachment.

        - **type** *(string) --*

          The type of the attachment, such as ``ElasticNetworkInterface`` .

        - **status** *(string) --*

          The status of the attachment. Valid values are ``PRECREATED`` , ``CREATED`` ,
          ``ATTACHING`` , ``ATTACHED`` , ``DETACHING`` , ``DETACHED`` , and ``DELETED`` .

        - **details** *(list) --*

          Details of the attachment. For elastic network interfaces, this includes the network
          interface ID, the MAC address, the subnet ID, and the private IPv4 address.

          - *(dict) --*

            A key-value pair object.

            - **name** *(string) --*

              The name of the key-value pair. For environment variables, this is the name of
              the environment variable.

            - **value** *(string) --*

              The value of the key-value pair. For environment variables, this is the value of
              the environment variable.

    - **attributes** *(list) --*

      The attributes of the task

      - *(dict) --*

        An attribute is a name-value pair associated with an Amazon ECS object. Attributes
        enable you to extend the Amazon ECS data model by adding custom metadata to your
        resources. For more information, see `Attributes
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html#attributes>`__
        in the *Amazon Elastic Container Service Developer Guide* .

        - **name** *(string) --*

          The name of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
          hyphens, underscores, and periods are allowed.

        - **value** *(string) --*

          The value of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
          hyphens, underscores, periods, at signs (@), forward slashes, colons, and spaces are
          allowed.

        - **targetType** *(string) --*

          The type of the target with which to attach the attribute. This parameter is required
          if you use the short form ID for a resource instead of the full ARN.

        - **targetId** *(string) --*

          The ID of the target. You can specify the short form ID for a resource or the full
          Amazon Resource Name (ARN).

    - **availabilityZone** *(string) --*

      The availability zone of the task.

    - **clusterArn** *(string) --*

      The ARN of the cluster that hosts the task.

    - **connectivity** *(string) --*

      The connectivity status of a task.

    - **connectivityAt** *(datetime) --*

      The Unix timestamp for when the task last went into ``CONNECTED`` status.

    - **containerInstanceArn** *(string) --*

      The ARN of the container instances that host the task.

    - **containers** *(list) --*

      The containers associated with the task.

      - *(dict) --*

        A Docker container that is part of a task.

        - **containerArn** *(string) --*

          The Amazon Resource Name (ARN) of the container.

        - **taskArn** *(string) --*

          The ARN of the task.

        - **name** *(string) --*

          The name of the container.

        - **image** *(string) --*

          The image used for the container.

        - **imageDigest** *(string) --*

          The container image manifest digest.

          .. note::

            The ``imageDigest`` is only returned if the container is using an image hosted in
            Amazon ECR, otherwise it is omitted.

        - **runtimeId** *(string) --*

          The ID of the Docker container.

        - **lastStatus** *(string) --*

          The last known status of the container.

        - **exitCode** *(integer) --*

          The exit code returned from the container.

        - **reason** *(string) --*

          A short (255 max characters) human-readable string to provide additional details
          about a running or stopped container.

        - **networkBindings** *(list) --*

          The network bindings associated with the container.

          - *(dict) --*

            Details on the network bindings between a container and its host container
            instance. After a task reaches the ``RUNNING`` status, manual and automatic host
            and container port assignments are visible in the ``networkBindings`` section of
            DescribeTasks API responses.

            - **bindIP** *(string) --*

              The IP address that the container is bound to on the container instance.

            - **containerPort** *(integer) --*

              The port number on the container that is used with the network binding.

            - **hostPort** *(integer) --*

              The port number on the host that is used with the network binding.

            - **protocol** *(string) --*

              The protocol used for the network binding.

        - **networkInterfaces** *(list) --*

          The network interfaces associated with the container.

          - *(dict) --*

            An object representing the elastic network interface for tasks that use the
            ``awsvpc`` network mode.

            - **attachmentId** *(string) --*

              The attachment ID for the network interface.

            - **privateIpv4Address** *(string) --*

              The private IPv4 address for the network interface.

            - **ipv6Address** *(string) --*

              The private IPv6 address for the network interface.

        - **healthStatus** *(string) --*

          The health status of the container. If health checks are not configured for this
          container in its task definition, then it reports the health status as ``UNKNOWN`` .

        - **cpu** *(string) --*

          The number of CPU units set for the container. The value will be ``0`` if no value
          was specified in the container definition when the task definition was registered.

        - **memory** *(string) --*

          The hard limit (in MiB) of memory set for the container.

        - **memoryReservation** *(string) --*

          The soft limit (in MiB) of memory set for the container.

        - **gpuIds** *(list) --*

          The IDs of each GPU assigned to the container.

          - *(string) --*

    - **cpu** *(string) --*

      The number of CPU units used by the task as expressed in a task definition. It can be
      expressed as an integer using CPU units, for example ``1024`` . It can also be expressed
      as a string using vCPUs, for example ``1 vCPU`` or ``1 vcpu`` . String values are
      converted to an integer indicating the CPU units when the task definition is registered.

      If you are using the EC2 launch type, this field is optional. Supported values are
      between ``128`` CPU units (``0.125`` vCPUs) and ``10240`` CPU units (``10`` vCPUs).

      If you are using the Fargate launch type, this field is required and you must use one of
      the following values, which determines your range of supported values for the ``memory``
      parameter:

      * 256 (.25 vCPU) - Available ``memory`` values: 512 (0.5 GB), 1024 (1 GB), 2048 (2 GB)

      * 512 (.5 vCPU) - Available ``memory`` values: 1024 (1 GB), 2048 (2 GB), 3072 (3 GB),
      4096 (4 GB)

      * 1024 (1 vCPU) - Available ``memory`` values: 2048 (2 GB), 3072 (3 GB), 4096 (4 GB),
      5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB)

      * 2048 (2 vCPU) - Available ``memory`` values: Between 4096 (4 GB) and 16384 (16 GB) in
      increments of 1024 (1 GB)

      * 4096 (4 vCPU) - Available ``memory`` values: Between 8192 (8 GB) and 30720 (30 GB) in
      increments of 1024 (1 GB)

    - **createdAt** *(datetime) --*

      The Unix timestamp for when the task was created (the task entered the ``PENDING`` state).

    - **desiredStatus** *(string) --*

      The desired status of the task. For more information, see `Task Lifecycle
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-lifecycle.html>`__ .

    - **executionStoppedAt** *(datetime) --*

      The Unix timestamp for when the task execution stopped.

    - **group** *(string) --*

      The name of the task group associated with the task.

    - **healthStatus** *(string) --*

      The health status for the task, which is determined by the health of the essential
      containers in the task. If all essential containers in the task are reporting as
      ``HEALTHY`` , then the task status also reports as ``HEALTHY`` . If any essential
      containers in the task are reporting as ``UNHEALTHY`` or ``UNKNOWN`` , then the task
      status also reports as ``UNHEALTHY`` or ``UNKNOWN`` , accordingly.

      .. note::

        The Amazon ECS container agent does not monitor or report on Docker health checks that
        are embedded in a container image (such as those specified in a parent image or from
        the image's Dockerfile) and not specified in the container definition. Health check
        parameters that are specified in a container definition override any Docker health
        checks that exist in the container image.

    - **inferenceAccelerators** *(list) --*

      The Elastic Inference accelerator associated with the task.

      - *(dict) --*

        Details on a Elastic Inference accelerator. For more information, see `Working with
        Amazon Elastic Inference on Amazon ECS
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in the
        *Amazon Elastic Container Service Developer Guide* .

        - **deviceName** *(string) --*

          The Elastic Inference accelerator device name. The ``deviceName`` must also be
          referenced in a container definition as a  ResourceRequirement .

        - **deviceType** *(string) --*

          The Elastic Inference accelerator type to use.

    - **lastStatus** *(string) --*

      The last known status of the task. For more information, see `Task Lifecycle
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-lifecycle.html>`__ .

    - **launchType** *(string) --*

      The launch type on which your task is running. For more information, see `Amazon ECS
      Launch Types
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html>`__ in the
      *Amazon Elastic Container Service Developer Guide* .

    - **memory** *(string) --*

      The amount of memory (in MiB) used by the task as expressed in a task definition. It can
      be expressed as an integer using MiB, for example ``1024`` . It can also be expressed as
      a string using GB, for example ``1GB`` or ``1 GB`` . String values are converted to an
      integer indicating the MiB when the task definition is registered.

      If you are using the EC2 launch type, this field is optional.

      If you are using the Fargate launch type, this field is required and you must use one of
      the following values, which determines your range of supported values for the ``cpu``
      parameter:

      * 512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) - Available ``cpu`` values: 256 (.25 vCPU)

      * 1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available ``cpu`` values: 512 (.5
      vCPU)

      * 2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8
      GB) - Available ``cpu`` values: 1024 (1 vCPU)

      * Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB) - Available ``cpu``
      values: 2048 (2 vCPU)

      * Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB) - Available ``cpu``
      values: 4096 (4 vCPU)

    - **overrides** *(dict) --*

      One or more container overrides.

      - **containerOverrides** *(list) --*

        One or more container overrides sent to a task.

        - *(dict) --*

          The overrides that should be sent to a container. An empty container override can be
          passed in. An example of an empty container override would be
          ``{"containerOverrides": [ ] }`` . If a non-empty container override is specified,
          the ``name`` parameter must be included.

          - **name** *(string) --*

            The name of the container that receives the override. This parameter is required if
            any override is specified.

          - **command** *(list) --*

            The command to send to the container that overrides the default command from the
            Docker image or the task definition. You must also specify a container name.

            - *(string) --*

          - **environment** *(list) --*

            The environment variables to send to the container. You can add new environment
            variables, which are added to the container at launch, or you can override the
            existing environment variables from the Docker image or the task definition. You
            must also specify a container name.

            - *(dict) --*

              A key-value pair object.

              - **name** *(string) --*

                The name of the key-value pair. For environment variables, this is the name of
                the environment variable.

              - **value** *(string) --*

                The value of the key-value pair. For environment variables, this is the value
                of the environment variable.

          - **cpu** *(integer) --*

            The number of ``cpu`` units reserved for the container, instead of the default
            value from the task definition. You must also specify a container name.

          - **memory** *(integer) --*

            The hard limit (in MiB) of memory to present to the container, instead of the
            default value from the task definition. If your container attempts to exceed the
            memory specified here, the container is killed. You must also specify a container
            name.

          - **memoryReservation** *(integer) --*

            The soft limit (in MiB) of memory to reserve for the container, instead of the
            default value from the task definition. You must also specify a container name.

          - **resourceRequirements** *(list) --*

            The type and amount of a resource to assign to a container, instead of the default
            value from the task definition. The only supported resource is a GPU.

            - *(dict) --*

              The type and amount of a resource to assign to a container. The supported
              resource types are GPUs and Elastic Inference accelerators. For more information,
              see `Working with GPUs on Amazon ECS
              <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-gpu.html>`__ or
              `Working with Amazon Elastic Inference on Amazon ECS
              <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in
              the *Amazon Elastic Container Service Developer Guide*

              - **value** *(string) --*

                The value for the specified resource type.

                If the ``GPU`` type is used, the value is the number of physical ``GPUs`` the
                Amazon ECS container agent will reserve for the container. The number of GPUs
                reserved for all containers in a task should not exceed the number of available
                GPUs on the container instance the task is launched on.

                If the ``InferenceAccelerator`` type is used, the ``value`` should match the
                ``deviceName`` for an  InferenceAccelerator specified in a task definition.

              - **type** *(string) --*

                The type of resource to assign to a container. The supported values are ``GPU``
                or ``InferenceAccelerator`` .

      - **cpu** *(string) --*

        The cpu override for the task.

      - **inferenceAcceleratorOverrides** *(list) --*

        The Elastic Inference accelerator override for the task.

        - *(dict) --*

          Details on an Elastic Inference accelerator task override. This parameter is used to
          override the Elastic Inference accelerator specified in the task definition. For more
          information, see `Working with Amazon Elastic Inference on Amazon ECS
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in the
          *Amazon Elastic Container Service Developer Guide* .

          - **deviceName** *(string) --*

            The Elastic Inference accelerator device name to override for the task. This
            parameter must match a ``deviceName`` specified in the task definition.

          - **deviceType** *(string) --*

            The Elastic Inference accelerator type to use.

      - **executionRoleArn** *(string) --*

        The Amazon Resource Name (ARN) of the task execution role that the Amazon ECS container
        agent and the Docker daemon can assume.

      - **memory** *(string) --*

        The memory override for the task.

      - **taskRoleArn** *(string) --*

        The Amazon Resource Name (ARN) of the IAM role that containers in this task can assume.
        All containers in this task are granted the permissions that are specified in this role.

    - **platformVersion** *(string) --*

      The platform version on which your task is running. A platform version is only specified
      for tasks using the Fargate launch type. If one is not specified, the ``LATEST`` platform
      version is used by default. For more information, see `AWS Fargate Platform Versions
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

    - **pullStartedAt** *(datetime) --*

      The Unix timestamp for when the container image pull began.

    - **pullStoppedAt** *(datetime) --*

      The Unix timestamp for when the container image pull completed.

    - **startedAt** *(datetime) --*

      The Unix timestamp for when the task started (the task transitioned from the ``PENDING``
      state to the ``RUNNING`` state).

    - **startedBy** *(string) --*

      The tag specified when a task is started. If the task is started by an Amazon ECS
      service, then the ``startedBy`` parameter contains the deployment ID of the service that
      starts it.

    - **stopCode** *(string) --*

      The stop code indicating why a task was stopped. The ``stoppedReason`` may contain
      additional details.

    - **stoppedAt** *(datetime) --*

      The Unix timestamp for when the task was stopped (the task transitioned from the
      ``RUNNING`` state to the ``STOPPED`` state).

    - **stoppedReason** *(string) --*

      The reason that the task was stopped.

    - **stoppingAt** *(datetime) --*

      The Unix timestamp for when the task stops (transitions from the ``RUNNING`` state to
      ``STOPPED`` ).

    - **tags** *(list) --*

      The metadata that you apply to the task to help you categorize and organize them. Each
      tag consists of a key and an optional value, both of which you define.

      The following basic restrictions apply to tags:

      * Maximum number of tags per resource - 50

      * For each resource, each tag key must be unique, and each tag key can have only one
      value.

      * Maximum key length - 128 Unicode characters in UTF-8

      * Maximum value length - 256 Unicode characters in UTF-8

      * If your tagging schema is used across multiple services and resources, remember that
      other services may have restrictions on allowed characters. Generally allowed characters
      are: letters, numbers, and spaces representable in UTF-8, and the following characters: +
      - = . _ : / @.

      * Tag keys and values are case-sensitive.

      * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
      prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
      tag keys or values with this prefix. Tags with this prefix do not count against your tags
      per resource limit.

      - *(dict) --*

        The metadata that you apply to a resource to help you categorize and organize them.
        Each tag consists of a key and an optional value, both of which you define.

        The following basic restrictions apply to tags:

        * Maximum number of tags per resource - 50

        * For each resource, each tag key must be unique, and each tag key can have only one
        value.

        * Maximum key length - 128 Unicode characters in UTF-8

        * Maximum value length - 256 Unicode characters in UTF-8

        * If your tagging schema is used across multiple services and resources, remember that
        other services may have restrictions on allowed characters. Generally allowed
        characters are: letters, numbers, and spaces representable in UTF-8, and the following
        characters: + - = . _ : / @.

        * Tag keys and values are case-sensitive.

        * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
        prefix for either keys or values as it is reserved for AWS use. You cannot edit or
        delete tag keys or values with this prefix. Tags with this prefix do not count against
        your tags per resource limit.

        - **key** *(string) --*

          One part of a key-value pair that make up a tag. A ``key`` is a general label that
          acts like a category for more specific tag values.

        - **value** *(string) --*

          The optional part of a key-value pair that make up a tag. A ``value`` acts as a
          descriptor within a tag category (key).

    - **taskArn** *(string) --*

      The Amazon Resource Name (ARN) of the task.

    - **taskDefinitionArn** *(string) --*

      The ARN of the task definition that creates the task.

    - **version** *(integer) --*

      The version counter for the task. Every time a task experiences a change that triggers a
      CloudWatch event, the version counter is incremented. If you are replicating your Amazon
      ECS task state with CloudWatch Events, you can compare the version of a task reported by
      the Amazon ECS API actions with the version reported in CloudWatch Events for the task
      (inside the ``detail`` object) to verify that the version in your event stream is current.
    """


_ClientRunTaskResponseTypeDef = TypedDict(
    "_ClientRunTaskResponseTypeDef",
    {
        "tasks": List[ClientRunTaskResponsetasksTypeDef],
        "failures": List[ClientRunTaskResponsefailuresTypeDef],
    },
    total=False,
)


class ClientRunTaskResponseTypeDef(_ClientRunTaskResponseTypeDef):
    """
    Type definition for `ClientRunTask` `Response`

    - **tasks** *(list) --*

      A full description of the tasks that were run. The tasks that were successfully placed on
      your cluster are described here.

      - *(dict) --*

        Details on a task in a cluster.

        - **attachments** *(list) --*

          The Elastic Network Adapter associated with the task if the task uses the ``awsvpc``
          network mode.

          - *(dict) --*

            An object representing a container instance or task attachment.

            - **id** *(string) --*

              The unique identifier for the attachment.

            - **type** *(string) --*

              The type of the attachment, such as ``ElasticNetworkInterface`` .

            - **status** *(string) --*

              The status of the attachment. Valid values are ``PRECREATED`` , ``CREATED`` ,
              ``ATTACHING`` , ``ATTACHED`` , ``DETACHING`` , ``DETACHED`` , and ``DELETED`` .

            - **details** *(list) --*

              Details of the attachment. For elastic network interfaces, this includes the network
              interface ID, the MAC address, the subnet ID, and the private IPv4 address.

              - *(dict) --*

                A key-value pair object.

                - **name** *(string) --*

                  The name of the key-value pair. For environment variables, this is the name of
                  the environment variable.

                - **value** *(string) --*

                  The value of the key-value pair. For environment variables, this is the value of
                  the environment variable.

        - **attributes** *(list) --*

          The attributes of the task

          - *(dict) --*

            An attribute is a name-value pair associated with an Amazon ECS object. Attributes
            enable you to extend the Amazon ECS data model by adding custom metadata to your
            resources. For more information, see `Attributes
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html#attributes>`__
            in the *Amazon Elastic Container Service Developer Guide* .

            - **name** *(string) --*

              The name of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
              hyphens, underscores, and periods are allowed.

            - **value** *(string) --*

              The value of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
              hyphens, underscores, periods, at signs (@), forward slashes, colons, and spaces are
              allowed.

            - **targetType** *(string) --*

              The type of the target with which to attach the attribute. This parameter is required
              if you use the short form ID for a resource instead of the full ARN.

            - **targetId** *(string) --*

              The ID of the target. You can specify the short form ID for a resource or the full
              Amazon Resource Name (ARN).

        - **availabilityZone** *(string) --*

          The availability zone of the task.

        - **clusterArn** *(string) --*

          The ARN of the cluster that hosts the task.

        - **connectivity** *(string) --*

          The connectivity status of a task.

        - **connectivityAt** *(datetime) --*

          The Unix timestamp for when the task last went into ``CONNECTED`` status.

        - **containerInstanceArn** *(string) --*

          The ARN of the container instances that host the task.

        - **containers** *(list) --*

          The containers associated with the task.

          - *(dict) --*

            A Docker container that is part of a task.

            - **containerArn** *(string) --*

              The Amazon Resource Name (ARN) of the container.

            - **taskArn** *(string) --*

              The ARN of the task.

            - **name** *(string) --*

              The name of the container.

            - **image** *(string) --*

              The image used for the container.

            - **imageDigest** *(string) --*

              The container image manifest digest.

              .. note::

                The ``imageDigest`` is only returned if the container is using an image hosted in
                Amazon ECR, otherwise it is omitted.

            - **runtimeId** *(string) --*

              The ID of the Docker container.

            - **lastStatus** *(string) --*

              The last known status of the container.

            - **exitCode** *(integer) --*

              The exit code returned from the container.

            - **reason** *(string) --*

              A short (255 max characters) human-readable string to provide additional details
              about a running or stopped container.

            - **networkBindings** *(list) --*

              The network bindings associated with the container.

              - *(dict) --*

                Details on the network bindings between a container and its host container
                instance. After a task reaches the ``RUNNING`` status, manual and automatic host
                and container port assignments are visible in the ``networkBindings`` section of
                DescribeTasks API responses.

                - **bindIP** *(string) --*

                  The IP address that the container is bound to on the container instance.

                - **containerPort** *(integer) --*

                  The port number on the container that is used with the network binding.

                - **hostPort** *(integer) --*

                  The port number on the host that is used with the network binding.

                - **protocol** *(string) --*

                  The protocol used for the network binding.

            - **networkInterfaces** *(list) --*

              The network interfaces associated with the container.

              - *(dict) --*

                An object representing the elastic network interface for tasks that use the
                ``awsvpc`` network mode.

                - **attachmentId** *(string) --*

                  The attachment ID for the network interface.

                - **privateIpv4Address** *(string) --*

                  The private IPv4 address for the network interface.

                - **ipv6Address** *(string) --*

                  The private IPv6 address for the network interface.

            - **healthStatus** *(string) --*

              The health status of the container. If health checks are not configured for this
              container in its task definition, then it reports the health status as ``UNKNOWN`` .

            - **cpu** *(string) --*

              The number of CPU units set for the container. The value will be ``0`` if no value
              was specified in the container definition when the task definition was registered.

            - **memory** *(string) --*

              The hard limit (in MiB) of memory set for the container.

            - **memoryReservation** *(string) --*

              The soft limit (in MiB) of memory set for the container.

            - **gpuIds** *(list) --*

              The IDs of each GPU assigned to the container.

              - *(string) --*

        - **cpu** *(string) --*

          The number of CPU units used by the task as expressed in a task definition. It can be
          expressed as an integer using CPU units, for example ``1024`` . It can also be expressed
          as a string using vCPUs, for example ``1 vCPU`` or ``1 vcpu`` . String values are
          converted to an integer indicating the CPU units when the task definition is registered.

          If you are using the EC2 launch type, this field is optional. Supported values are
          between ``128`` CPU units (``0.125`` vCPUs) and ``10240`` CPU units (``10`` vCPUs).

          If you are using the Fargate launch type, this field is required and you must use one of
          the following values, which determines your range of supported values for the ``memory``
          parameter:

          * 256 (.25 vCPU) - Available ``memory`` values: 512 (0.5 GB), 1024 (1 GB), 2048 (2 GB)

          * 512 (.5 vCPU) - Available ``memory`` values: 1024 (1 GB), 2048 (2 GB), 3072 (3 GB),
          4096 (4 GB)

          * 1024 (1 vCPU) - Available ``memory`` values: 2048 (2 GB), 3072 (3 GB), 4096 (4 GB),
          5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB)

          * 2048 (2 vCPU) - Available ``memory`` values: Between 4096 (4 GB) and 16384 (16 GB) in
          increments of 1024 (1 GB)

          * 4096 (4 vCPU) - Available ``memory`` values: Between 8192 (8 GB) and 30720 (30 GB) in
          increments of 1024 (1 GB)

        - **createdAt** *(datetime) --*

          The Unix timestamp for when the task was created (the task entered the ``PENDING`` state).

        - **desiredStatus** *(string) --*

          The desired status of the task. For more information, see `Task Lifecycle
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-lifecycle.html>`__ .

        - **executionStoppedAt** *(datetime) --*

          The Unix timestamp for when the task execution stopped.

        - **group** *(string) --*

          The name of the task group associated with the task.

        - **healthStatus** *(string) --*

          The health status for the task, which is determined by the health of the essential
          containers in the task. If all essential containers in the task are reporting as
          ``HEALTHY`` , then the task status also reports as ``HEALTHY`` . If any essential
          containers in the task are reporting as ``UNHEALTHY`` or ``UNKNOWN`` , then the task
          status also reports as ``UNHEALTHY`` or ``UNKNOWN`` , accordingly.

          .. note::

            The Amazon ECS container agent does not monitor or report on Docker health checks that
            are embedded in a container image (such as those specified in a parent image or from
            the image's Dockerfile) and not specified in the container definition. Health check
            parameters that are specified in a container definition override any Docker health
            checks that exist in the container image.

        - **inferenceAccelerators** *(list) --*

          The Elastic Inference accelerator associated with the task.

          - *(dict) --*

            Details on a Elastic Inference accelerator. For more information, see `Working with
            Amazon Elastic Inference on Amazon ECS
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in the
            *Amazon Elastic Container Service Developer Guide* .

            - **deviceName** *(string) --*

              The Elastic Inference accelerator device name. The ``deviceName`` must also be
              referenced in a container definition as a  ResourceRequirement .

            - **deviceType** *(string) --*

              The Elastic Inference accelerator type to use.

        - **lastStatus** *(string) --*

          The last known status of the task. For more information, see `Task Lifecycle
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-lifecycle.html>`__ .

        - **launchType** *(string) --*

          The launch type on which your task is running. For more information, see `Amazon ECS
          Launch Types
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html>`__ in the
          *Amazon Elastic Container Service Developer Guide* .

        - **memory** *(string) --*

          The amount of memory (in MiB) used by the task as expressed in a task definition. It can
          be expressed as an integer using MiB, for example ``1024`` . It can also be expressed as
          a string using GB, for example ``1GB`` or ``1 GB`` . String values are converted to an
          integer indicating the MiB when the task definition is registered.

          If you are using the EC2 launch type, this field is optional.

          If you are using the Fargate launch type, this field is required and you must use one of
          the following values, which determines your range of supported values for the ``cpu``
          parameter:

          * 512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) - Available ``cpu`` values: 256 (.25 vCPU)

          * 1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available ``cpu`` values: 512 (.5
          vCPU)

          * 2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8
          GB) - Available ``cpu`` values: 1024 (1 vCPU)

          * Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB) - Available ``cpu``
          values: 2048 (2 vCPU)

          * Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB) - Available ``cpu``
          values: 4096 (4 vCPU)

        - **overrides** *(dict) --*

          One or more container overrides.

          - **containerOverrides** *(list) --*

            One or more container overrides sent to a task.

            - *(dict) --*

              The overrides that should be sent to a container. An empty container override can be
              passed in. An example of an empty container override would be
              ``{"containerOverrides": [ ] }`` . If a non-empty container override is specified,
              the ``name`` parameter must be included.

              - **name** *(string) --*

                The name of the container that receives the override. This parameter is required if
                any override is specified.

              - **command** *(list) --*

                The command to send to the container that overrides the default command from the
                Docker image or the task definition. You must also specify a container name.

                - *(string) --*

              - **environment** *(list) --*

                The environment variables to send to the container. You can add new environment
                variables, which are added to the container at launch, or you can override the
                existing environment variables from the Docker image or the task definition. You
                must also specify a container name.

                - *(dict) --*

                  A key-value pair object.

                  - **name** *(string) --*

                    The name of the key-value pair. For environment variables, this is the name of
                    the environment variable.

                  - **value** *(string) --*

                    The value of the key-value pair. For environment variables, this is the value
                    of the environment variable.

              - **cpu** *(integer) --*

                The number of ``cpu`` units reserved for the container, instead of the default
                value from the task definition. You must also specify a container name.

              - **memory** *(integer) --*

                The hard limit (in MiB) of memory to present to the container, instead of the
                default value from the task definition. If your container attempts to exceed the
                memory specified here, the container is killed. You must also specify a container
                name.

              - **memoryReservation** *(integer) --*

                The soft limit (in MiB) of memory to reserve for the container, instead of the
                default value from the task definition. You must also specify a container name.

              - **resourceRequirements** *(list) --*

                The type and amount of a resource to assign to a container, instead of the default
                value from the task definition. The only supported resource is a GPU.

                - *(dict) --*

                  The type and amount of a resource to assign to a container. The supported
                  resource types are GPUs and Elastic Inference accelerators. For more information,
                  see `Working with GPUs on Amazon ECS
                  <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-gpu.html>`__ or
                  `Working with Amazon Elastic Inference on Amazon ECS
                  <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in
                  the *Amazon Elastic Container Service Developer Guide*

                  - **value** *(string) --*

                    The value for the specified resource type.

                    If the ``GPU`` type is used, the value is the number of physical ``GPUs`` the
                    Amazon ECS container agent will reserve for the container. The number of GPUs
                    reserved for all containers in a task should not exceed the number of available
                    GPUs on the container instance the task is launched on.

                    If the ``InferenceAccelerator`` type is used, the ``value`` should match the
                    ``deviceName`` for an  InferenceAccelerator specified in a task definition.

                  - **type** *(string) --*

                    The type of resource to assign to a container. The supported values are ``GPU``
                    or ``InferenceAccelerator`` .

          - **cpu** *(string) --*

            The cpu override for the task.

          - **inferenceAcceleratorOverrides** *(list) --*

            The Elastic Inference accelerator override for the task.

            - *(dict) --*

              Details on an Elastic Inference accelerator task override. This parameter is used to
              override the Elastic Inference accelerator specified in the task definition. For more
              information, see `Working with Amazon Elastic Inference on Amazon ECS
              <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in the
              *Amazon Elastic Container Service Developer Guide* .

              - **deviceName** *(string) --*

                The Elastic Inference accelerator device name to override for the task. This
                parameter must match a ``deviceName`` specified in the task definition.

              - **deviceType** *(string) --*

                The Elastic Inference accelerator type to use.

          - **executionRoleArn** *(string) --*

            The Amazon Resource Name (ARN) of the task execution role that the Amazon ECS container
            agent and the Docker daemon can assume.

          - **memory** *(string) --*

            The memory override for the task.

          - **taskRoleArn** *(string) --*

            The Amazon Resource Name (ARN) of the IAM role that containers in this task can assume.
            All containers in this task are granted the permissions that are specified in this role.

        - **platformVersion** *(string) --*

          The platform version on which your task is running. A platform version is only specified
          for tasks using the Fargate launch type. If one is not specified, the ``LATEST`` platform
          version is used by default. For more information, see `AWS Fargate Platform Versions
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

        - **pullStartedAt** *(datetime) --*

          The Unix timestamp for when the container image pull began.

        - **pullStoppedAt** *(datetime) --*

          The Unix timestamp for when the container image pull completed.

        - **startedAt** *(datetime) --*

          The Unix timestamp for when the task started (the task transitioned from the ``PENDING``
          state to the ``RUNNING`` state).

        - **startedBy** *(string) --*

          The tag specified when a task is started. If the task is started by an Amazon ECS
          service, then the ``startedBy`` parameter contains the deployment ID of the service that
          starts it.

        - **stopCode** *(string) --*

          The stop code indicating why a task was stopped. The ``stoppedReason`` may contain
          additional details.

        - **stoppedAt** *(datetime) --*

          The Unix timestamp for when the task was stopped (the task transitioned from the
          ``RUNNING`` state to the ``STOPPED`` state).

        - **stoppedReason** *(string) --*

          The reason that the task was stopped.

        - **stoppingAt** *(datetime) --*

          The Unix timestamp for when the task stops (transitions from the ``RUNNING`` state to
          ``STOPPED`` ).

        - **tags** *(list) --*

          The metadata that you apply to the task to help you categorize and organize them. Each
          tag consists of a key and an optional value, both of which you define.

          The following basic restrictions apply to tags:

          * Maximum number of tags per resource - 50

          * For each resource, each tag key must be unique, and each tag key can have only one
          value.

          * Maximum key length - 128 Unicode characters in UTF-8

          * Maximum value length - 256 Unicode characters in UTF-8

          * If your tagging schema is used across multiple services and resources, remember that
          other services may have restrictions on allowed characters. Generally allowed characters
          are: letters, numbers, and spaces representable in UTF-8, and the following characters: +
          - = . _ : / @.

          * Tag keys and values are case-sensitive.

          * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
          prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
          tag keys or values with this prefix. Tags with this prefix do not count against your tags
          per resource limit.

          - *(dict) --*

            The metadata that you apply to a resource to help you categorize and organize them.
            Each tag consists of a key and an optional value, both of which you define.

            The following basic restrictions apply to tags:

            * Maximum number of tags per resource - 50

            * For each resource, each tag key must be unique, and each tag key can have only one
            value.

            * Maximum key length - 128 Unicode characters in UTF-8

            * Maximum value length - 256 Unicode characters in UTF-8

            * If your tagging schema is used across multiple services and resources, remember that
            other services may have restrictions on allowed characters. Generally allowed
            characters are: letters, numbers, and spaces representable in UTF-8, and the following
            characters: + - = . _ : / @.

            * Tag keys and values are case-sensitive.

            * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
            prefix for either keys or values as it is reserved for AWS use. You cannot edit or
            delete tag keys or values with this prefix. Tags with this prefix do not count against
            your tags per resource limit.

            - **key** *(string) --*

              One part of a key-value pair that make up a tag. A ``key`` is a general label that
              acts like a category for more specific tag values.

            - **value** *(string) --*

              The optional part of a key-value pair that make up a tag. A ``value`` acts as a
              descriptor within a tag category (key).

        - **taskArn** *(string) --*

          The Amazon Resource Name (ARN) of the task.

        - **taskDefinitionArn** *(string) --*

          The ARN of the task definition that creates the task.

        - **version** *(integer) --*

          The version counter for the task. Every time a task experiences a change that triggers a
          CloudWatch event, the version counter is incremented. If you are replicating your Amazon
          ECS task state with CloudWatch Events, you can compare the version of a task reported by
          the Amazon ECS API actions with the version reported in CloudWatch Events for the task
          (inside the ``detail`` object) to verify that the version in your event stream is current.

    - **failures** *(list) --*

      Any failures associated with the call.

      - *(dict) --*

        A failed resource.

        - **arn** *(string) --*

          The Amazon Resource Name (ARN) of the failed resource.

        - **reason** *(string) --*

          The reason for the failure.

        - **detail** *(string) --*

          The details of the failure.
    """


_RequiredClientRunTasknetworkConfigurationawsvpcConfigurationTypeDef = TypedDict(
    "_RequiredClientRunTasknetworkConfigurationawsvpcConfigurationTypeDef",
    {"subnets": List[str]},
)
_OptionalClientRunTasknetworkConfigurationawsvpcConfigurationTypeDef = TypedDict(
    "_OptionalClientRunTasknetworkConfigurationawsvpcConfigurationTypeDef",
    {"securityGroups": List[str], "assignPublicIp": str},
    total=False,
)


class ClientRunTasknetworkConfigurationawsvpcConfigurationTypeDef(
    _RequiredClientRunTasknetworkConfigurationawsvpcConfigurationTypeDef,
    _OptionalClientRunTasknetworkConfigurationawsvpcConfigurationTypeDef,
):
    """
    Type definition for `ClientRunTasknetworkConfiguration` `awsvpcConfiguration`

    The VPC subnets and security groups associated with a task.

    .. note::

      All specified subnets and security groups must be from the same VPC.

    - **subnets** *(list) --* **[REQUIRED]**

      The subnets associated with the task or service. There is a limit of 16 subnets that can be
      specified per ``AwsVpcConfiguration`` .

      .. note::

        All specified subnets must be from the same VPC.

      - *(string) --*

    - **securityGroups** *(list) --*

      The security groups associated with the task or service. If you do not specify a security
      group, the default security group for the VPC is used. There is a limit of 5 security groups
      that can be specified per ``AwsVpcConfiguration`` .

      .. note::

        All specified security groups must be from the same VPC.

      - *(string) --*

    - **assignPublicIp** *(string) --*

      Whether the task's elastic network interface receives a public IP address. The default value
      is ``DISABLED`` .
    """


_ClientRunTasknetworkConfigurationTypeDef = TypedDict(
    "_ClientRunTasknetworkConfigurationTypeDef",
    {
        "awsvpcConfiguration": ClientRunTasknetworkConfigurationawsvpcConfigurationTypeDef
    },
    total=False,
)


class ClientRunTasknetworkConfigurationTypeDef(
    _ClientRunTasknetworkConfigurationTypeDef
):
    """
    Type definition for `ClientRunTask` `networkConfiguration`

    The network configuration for the task. This parameter is required for task definitions that use
    the ``awsvpc`` network mode to receive their own elastic network interface, and it is not
    supported for other network modes. For more information, see `Task Networking
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html>`__ in the
    *Amazon Elastic Container Service Developer Guide* .

    - **awsvpcConfiguration** *(dict) --*

      The VPC subnets and security groups associated with a task.

      .. note::

        All specified subnets and security groups must be from the same VPC.

      - **subnets** *(list) --* **[REQUIRED]**

        The subnets associated with the task or service. There is a limit of 16 subnets that can be
        specified per ``AwsVpcConfiguration`` .

        .. note::

          All specified subnets must be from the same VPC.

        - *(string) --*

      - **securityGroups** *(list) --*

        The security groups associated with the task or service. If you do not specify a security
        group, the default security group for the VPC is used. There is a limit of 5 security groups
        that can be specified per ``AwsVpcConfiguration`` .

        .. note::

          All specified security groups must be from the same VPC.

        - *(string) --*

      - **assignPublicIp** *(string) --*

        Whether the task's elastic network interface receives a public IP address. The default value
        is ``DISABLED`` .
    """


_ClientRunTaskoverridescontainerOverridesenvironmentTypeDef = TypedDict(
    "_ClientRunTaskoverridescontainerOverridesenvironmentTypeDef",
    {"name": str, "value": str},
    total=False,
)


class ClientRunTaskoverridescontainerOverridesenvironmentTypeDef(
    _ClientRunTaskoverridescontainerOverridesenvironmentTypeDef
):
    """
    Type definition for `ClientRunTaskoverridescontainerOverrides` `environment`

    A key-value pair object.

    - **name** *(string) --*

      The name of the key-value pair. For environment variables, this is the name of the
      environment variable.

    - **value** *(string) --*

      The value of the key-value pair. For environment variables, this is the value of the
      environment variable.
    """


_ClientRunTaskoverridescontainerOverridesresourceRequirementsTypeDef = TypedDict(
    "_ClientRunTaskoverridescontainerOverridesresourceRequirementsTypeDef",
    {"value": str, "type": str},
)


class ClientRunTaskoverridescontainerOverridesresourceRequirementsTypeDef(
    _ClientRunTaskoverridescontainerOverridesresourceRequirementsTypeDef
):
    """
    Type definition for `ClientRunTaskoverridescontainerOverrides` `resourceRequirements`

    The type and amount of a resource to assign to a container. The supported resource types
    are GPUs and Elastic Inference accelerators. For more information, see `Working with GPUs
    on Amazon ECS
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-gpu.html>`__ or `Working
    with Amazon Elastic Inference on Amazon ECS
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in the
    *Amazon Elastic Container Service Developer Guide*

    - **value** *(string) --* **[REQUIRED]**

      The value for the specified resource type.

      If the ``GPU`` type is used, the value is the number of physical ``GPUs`` the Amazon
      ECS container agent will reserve for the container. The number of GPUs reserved for all
      containers in a task should not exceed the number of available GPUs on the container
      instance the task is launched on.

      If the ``InferenceAccelerator`` type is used, the ``value`` should match the
      ``deviceName`` for an  InferenceAccelerator specified in a task definition.

    - **type** *(string) --* **[REQUIRED]**

      The type of resource to assign to a container. The supported values are ``GPU`` or
      ``InferenceAccelerator`` .
    """


_ClientRunTaskoverridescontainerOverridesTypeDef = TypedDict(
    "_ClientRunTaskoverridescontainerOverridesTypeDef",
    {
        "name": str,
        "command": List[str],
        "environment": List[ClientRunTaskoverridescontainerOverridesenvironmentTypeDef],
        "cpu": int,
        "memory": int,
        "memoryReservation": int,
        "resourceRequirements": List[
            ClientRunTaskoverridescontainerOverridesresourceRequirementsTypeDef
        ],
    },
    total=False,
)


class ClientRunTaskoverridescontainerOverridesTypeDef(
    _ClientRunTaskoverridescontainerOverridesTypeDef
):
    """
    Type definition for `ClientRunTaskoverrides` `containerOverrides`

    The overrides that should be sent to a container. An empty container override can be passed
    in. An example of an empty container override would be ``{"containerOverrides": [ ] }`` . If
    a non-empty container override is specified, the ``name`` parameter must be included.

    - **name** *(string) --*

      The name of the container that receives the override. This parameter is required if any
      override is specified.

    - **command** *(list) --*

      The command to send to the container that overrides the default command from the Docker
      image or the task definition. You must also specify a container name.

      - *(string) --*

    - **environment** *(list) --*

      The environment variables to send to the container. You can add new environment variables,
      which are added to the container at launch, or you can override the existing environment
      variables from the Docker image or the task definition. You must also specify a container
      name.

      - *(dict) --*

        A key-value pair object.

        - **name** *(string) --*

          The name of the key-value pair. For environment variables, this is the name of the
          environment variable.

        - **value** *(string) --*

          The value of the key-value pair. For environment variables, this is the value of the
          environment variable.

    - **cpu** *(integer) --*

      The number of ``cpu`` units reserved for the container, instead of the default value from
      the task definition. You must also specify a container name.

    - **memory** *(integer) --*

      The hard limit (in MiB) of memory to present to the container, instead of the default value
      from the task definition. If your container attempts to exceed the memory specified here,
      the container is killed. You must also specify a container name.

    - **memoryReservation** *(integer) --*

      The soft limit (in MiB) of memory to reserve for the container, instead of the default
      value from the task definition. You must also specify a container name.

    - **resourceRequirements** *(list) --*

      The type and amount of a resource to assign to a container, instead of the default value
      from the task definition. The only supported resource is a GPU.

      - *(dict) --*

        The type and amount of a resource to assign to a container. The supported resource types
        are GPUs and Elastic Inference accelerators. For more information, see `Working with GPUs
        on Amazon ECS
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-gpu.html>`__ or `Working
        with Amazon Elastic Inference on Amazon ECS
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in the
        *Amazon Elastic Container Service Developer Guide*

        - **value** *(string) --* **[REQUIRED]**

          The value for the specified resource type.

          If the ``GPU`` type is used, the value is the number of physical ``GPUs`` the Amazon
          ECS container agent will reserve for the container. The number of GPUs reserved for all
          containers in a task should not exceed the number of available GPUs on the container
          instance the task is launched on.

          If the ``InferenceAccelerator`` type is used, the ``value`` should match the
          ``deviceName`` for an  InferenceAccelerator specified in a task definition.

        - **type** *(string) --* **[REQUIRED]**

          The type of resource to assign to a container. The supported values are ``GPU`` or
          ``InferenceAccelerator`` .
    """


_ClientRunTaskoverridesinferenceAcceleratorOverridesTypeDef = TypedDict(
    "_ClientRunTaskoverridesinferenceAcceleratorOverridesTypeDef",
    {"deviceName": str, "deviceType": str},
    total=False,
)


class ClientRunTaskoverridesinferenceAcceleratorOverridesTypeDef(
    _ClientRunTaskoverridesinferenceAcceleratorOverridesTypeDef
):
    """
    Type definition for `ClientRunTaskoverrides` `inferenceAcceleratorOverrides`

    Details on an Elastic Inference accelerator task override. This parameter is used to override
    the Elastic Inference accelerator specified in the task definition. For more information, see
    `Working with Amazon Elastic Inference on Amazon ECS
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in the *Amazon
    Elastic Container Service Developer Guide* .

    - **deviceName** *(string) --*

      The Elastic Inference accelerator device name to override for the task. This parameter must
      match a ``deviceName`` specified in the task definition.

    - **deviceType** *(string) --*

      The Elastic Inference accelerator type to use.
    """


_ClientRunTaskoverridesTypeDef = TypedDict(
    "_ClientRunTaskoverridesTypeDef",
    {
        "containerOverrides": List[ClientRunTaskoverridescontainerOverridesTypeDef],
        "cpu": str,
        "inferenceAcceleratorOverrides": List[
            ClientRunTaskoverridesinferenceAcceleratorOverridesTypeDef
        ],
        "executionRoleArn": str,
        "memory": str,
        "taskRoleArn": str,
    },
    total=False,
)


class ClientRunTaskoverridesTypeDef(_ClientRunTaskoverridesTypeDef):
    """
    Type definition for `ClientRunTask` `overrides`

    A list of container overrides in JSON format that specify the name of a container in the
    specified task definition and the overrides it should receive. You can override the default
    command for a container (that is specified in the task definition or Docker image) with a
    ``command`` override. You can also override existing environment variables (that are specified in
    the task definition or Docker image) on a container or add new environment variables to it with
    an ``environment`` override.

    .. note::

      A total of 8192 characters are allowed for overrides. This limit includes the JSON formatting
      characters of the override structure.

    - **containerOverrides** *(list) --*

      One or more container overrides sent to a task.

      - *(dict) --*

        The overrides that should be sent to a container. An empty container override can be passed
        in. An example of an empty container override would be ``{"containerOverrides": [ ] }`` . If
        a non-empty container override is specified, the ``name`` parameter must be included.

        - **name** *(string) --*

          The name of the container that receives the override. This parameter is required if any
          override is specified.

        - **command** *(list) --*

          The command to send to the container that overrides the default command from the Docker
          image or the task definition. You must also specify a container name.

          - *(string) --*

        - **environment** *(list) --*

          The environment variables to send to the container. You can add new environment variables,
          which are added to the container at launch, or you can override the existing environment
          variables from the Docker image or the task definition. You must also specify a container
          name.

          - *(dict) --*

            A key-value pair object.

            - **name** *(string) --*

              The name of the key-value pair. For environment variables, this is the name of the
              environment variable.

            - **value** *(string) --*

              The value of the key-value pair. For environment variables, this is the value of the
              environment variable.

        - **cpu** *(integer) --*

          The number of ``cpu`` units reserved for the container, instead of the default value from
          the task definition. You must also specify a container name.

        - **memory** *(integer) --*

          The hard limit (in MiB) of memory to present to the container, instead of the default value
          from the task definition. If your container attempts to exceed the memory specified here,
          the container is killed. You must also specify a container name.

        - **memoryReservation** *(integer) --*

          The soft limit (in MiB) of memory to reserve for the container, instead of the default
          value from the task definition. You must also specify a container name.

        - **resourceRequirements** *(list) --*

          The type and amount of a resource to assign to a container, instead of the default value
          from the task definition. The only supported resource is a GPU.

          - *(dict) --*

            The type and amount of a resource to assign to a container. The supported resource types
            are GPUs and Elastic Inference accelerators. For more information, see `Working with GPUs
            on Amazon ECS
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-gpu.html>`__ or `Working
            with Amazon Elastic Inference on Amazon ECS
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in the
            *Amazon Elastic Container Service Developer Guide*

            - **value** *(string) --* **[REQUIRED]**

              The value for the specified resource type.

              If the ``GPU`` type is used, the value is the number of physical ``GPUs`` the Amazon
              ECS container agent will reserve for the container. The number of GPUs reserved for all
              containers in a task should not exceed the number of available GPUs on the container
              instance the task is launched on.

              If the ``InferenceAccelerator`` type is used, the ``value`` should match the
              ``deviceName`` for an  InferenceAccelerator specified in a task definition.

            - **type** *(string) --* **[REQUIRED]**

              The type of resource to assign to a container. The supported values are ``GPU`` or
              ``InferenceAccelerator`` .

    - **cpu** *(string) --*

      The cpu override for the task.

    - **inferenceAcceleratorOverrides** *(list) --*

      The Elastic Inference accelerator override for the task.

      - *(dict) --*

        Details on an Elastic Inference accelerator task override. This parameter is used to override
        the Elastic Inference accelerator specified in the task definition. For more information, see
        `Working with Amazon Elastic Inference on Amazon ECS
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in the *Amazon
        Elastic Container Service Developer Guide* .

        - **deviceName** *(string) --*

          The Elastic Inference accelerator device name to override for the task. This parameter must
          match a ``deviceName`` specified in the task definition.

        - **deviceType** *(string) --*

          The Elastic Inference accelerator type to use.

    - **executionRoleArn** *(string) --*

      The Amazon Resource Name (ARN) of the task execution role that the Amazon ECS container agent
      and the Docker daemon can assume.

    - **memory** *(string) --*

      The memory override for the task.

    - **taskRoleArn** *(string) --*

      The Amazon Resource Name (ARN) of the IAM role that containers in this task can assume. All
      containers in this task are granted the permissions that are specified in this role.
    """


_ClientRunTaskplacementConstraintsTypeDef = TypedDict(
    "_ClientRunTaskplacementConstraintsTypeDef",
    {"type": str, "expression": str},
    total=False,
)


class ClientRunTaskplacementConstraintsTypeDef(
    _ClientRunTaskplacementConstraintsTypeDef
):
    """
    Type definition for `ClientRunTask` `placementConstraints`

    An object representing a constraint on task placement. For more information, see `Task
    Placement Constraints
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html>`__
    in the *Amazon Elastic Container Service Developer Guide* .

    .. note::

      If you are using the Fargate launch type, task placement constraints are not supported.

    - **type** *(string) --*

      The type of constraint. Use ``distinctInstance`` to ensure that each task in a particular
      group is running on a different container instance. Use ``memberOf`` to restrict the
      selection to a group of valid candidates.

    - **expression** *(string) --*

      A cluster query language expression to apply to the constraint. You cannot specify an
      expression if the constraint type is ``distinctInstance`` . For more information, see
      `Cluster Query Language
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .
    """


_ClientRunTaskplacementStrategyTypeDef = TypedDict(
    "_ClientRunTaskplacementStrategyTypeDef", {"type": str, "field": str}, total=False
)


class ClientRunTaskplacementStrategyTypeDef(_ClientRunTaskplacementStrategyTypeDef):
    """
    Type definition for `ClientRunTask` `placementStrategy`

    The task placement strategy for a task or service. For more information, see `Task Placement
    Strategies
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-strategies.html>`__
    in the *Amazon Elastic Container Service Developer Guide* .

    - **type** *(string) --*

      The type of placement strategy. The ``random`` placement strategy randomly places tasks on
      available candidates. The ``spread`` placement strategy spreads placement across available
      candidates evenly based on the ``field`` parameter. The ``binpack`` strategy places tasks on
      available candidates that have the least available amount of the resource that is specified
      with the ``field`` parameter. For example, if you binpack on memory, a task is placed on the
      instance with the least amount of remaining memory (but still enough to run the task).

    - **field** *(string) --*

      The field to apply the placement strategy against. For the ``spread`` placement strategy,
      valid values are ``instanceId`` (or ``host`` , which has the same effect), or any platform or
      custom attribute that is applied to a container instance, such as
      ``attribute:ecs.availability-zone`` . For the ``binpack`` placement strategy, valid values
      are ``cpu`` and ``memory`` . For the ``random`` placement strategy, this field is not used.
    """


_ClientRunTasktagsTypeDef = TypedDict(
    "_ClientRunTasktagsTypeDef", {"key": str, "value": str}, total=False
)


class ClientRunTasktagsTypeDef(_ClientRunTasktagsTypeDef):
    """
    Type definition for `ClientRunTask` `tags`

    The metadata that you apply to a resource to help you categorize and organize them. Each tag
    consists of a key and an optional value, both of which you define.

    The following basic restrictions apply to tags:

    * Maximum number of tags per resource - 50

    * For each resource, each tag key must be unique, and each tag key can have only one value.

    * Maximum key length - 128 Unicode characters in UTF-8

    * Maximum value length - 256 Unicode characters in UTF-8

    * If your tagging schema is used across multiple services and resources, remember that other
    services may have restrictions on allowed characters. Generally allowed characters are:
    letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ :
    / @.

    * Tag keys and values are case-sensitive.

    * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a prefix
    for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys or
    values with this prefix. Tags with this prefix do not count against your tags per resource
    limit.

    - **key** *(string) --*

      One part of a key-value pair that make up a tag. A ``key`` is a general label that acts like
      a category for more specific tag values.

    - **value** *(string) --*

      The optional part of a key-value pair that make up a tag. A ``value`` acts as a descriptor
      within a tag category (key).
    """


_ClientStartTaskResponsefailuresTypeDef = TypedDict(
    "_ClientStartTaskResponsefailuresTypeDef",
    {"arn": str, "reason": str, "detail": str},
    total=False,
)


class ClientStartTaskResponsefailuresTypeDef(_ClientStartTaskResponsefailuresTypeDef):
    """
    Type definition for `ClientStartTaskResponse` `failures`

    A failed resource.

    - **arn** *(string) --*

      The Amazon Resource Name (ARN) of the failed resource.

    - **reason** *(string) --*

      The reason for the failure.

    - **detail** *(string) --*

      The details of the failure.
    """


_ClientStartTaskResponsetasksattachmentsdetailsTypeDef = TypedDict(
    "_ClientStartTaskResponsetasksattachmentsdetailsTypeDef",
    {"name": str, "value": str},
    total=False,
)


class ClientStartTaskResponsetasksattachmentsdetailsTypeDef(
    _ClientStartTaskResponsetasksattachmentsdetailsTypeDef
):
    """
    Type definition for `ClientStartTaskResponsetasksattachments` `details`

    A key-value pair object.

    - **name** *(string) --*

      The name of the key-value pair. For environment variables, this is the name of
      the environment variable.

    - **value** *(string) --*

      The value of the key-value pair. For environment variables, this is the value of
      the environment variable.
    """


_ClientStartTaskResponsetasksattachmentsTypeDef = TypedDict(
    "_ClientStartTaskResponsetasksattachmentsTypeDef",
    {
        "id": str,
        "type": str,
        "status": str,
        "details": List[ClientStartTaskResponsetasksattachmentsdetailsTypeDef],
    },
    total=False,
)


class ClientStartTaskResponsetasksattachmentsTypeDef(
    _ClientStartTaskResponsetasksattachmentsTypeDef
):
    """
    Type definition for `ClientStartTaskResponsetasks` `attachments`

    An object representing a container instance or task attachment.

    - **id** *(string) --*

      The unique identifier for the attachment.

    - **type** *(string) --*

      The type of the attachment, such as ``ElasticNetworkInterface`` .

    - **status** *(string) --*

      The status of the attachment. Valid values are ``PRECREATED`` , ``CREATED`` ,
      ``ATTACHING`` , ``ATTACHED`` , ``DETACHING`` , ``DETACHED`` , and ``DELETED`` .

    - **details** *(list) --*

      Details of the attachment. For elastic network interfaces, this includes the network
      interface ID, the MAC address, the subnet ID, and the private IPv4 address.

      - *(dict) --*

        A key-value pair object.

        - **name** *(string) --*

          The name of the key-value pair. For environment variables, this is the name of
          the environment variable.

        - **value** *(string) --*

          The value of the key-value pair. For environment variables, this is the value of
          the environment variable.
    """


_ClientStartTaskResponsetasksattributesTypeDef = TypedDict(
    "_ClientStartTaskResponsetasksattributesTypeDef",
    {"name": str, "value": str, "targetType": str, "targetId": str},
    total=False,
)


class ClientStartTaskResponsetasksattributesTypeDef(
    _ClientStartTaskResponsetasksattributesTypeDef
):
    """
    Type definition for `ClientStartTaskResponsetasks` `attributes`

    An attribute is a name-value pair associated with an Amazon ECS object. Attributes
    enable you to extend the Amazon ECS data model by adding custom metadata to your
    resources. For more information, see `Attributes
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html#attributes>`__
    in the *Amazon Elastic Container Service Developer Guide* .

    - **name** *(string) --*

      The name of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
      hyphens, underscores, and periods are allowed.

    - **value** *(string) --*

      The value of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
      hyphens, underscores, periods, at signs (@), forward slashes, colons, and spaces are
      allowed.

    - **targetType** *(string) --*

      The type of the target with which to attach the attribute. This parameter is required
      if you use the short form ID for a resource instead of the full ARN.

    - **targetId** *(string) --*

      The ID of the target. You can specify the short form ID for a resource or the full
      Amazon Resource Name (ARN).
    """


_ClientStartTaskResponsetaskscontainersnetworkBindingsTypeDef = TypedDict(
    "_ClientStartTaskResponsetaskscontainersnetworkBindingsTypeDef",
    {"bindIP": str, "containerPort": int, "hostPort": int, "protocol": str},
    total=False,
)


class ClientStartTaskResponsetaskscontainersnetworkBindingsTypeDef(
    _ClientStartTaskResponsetaskscontainersnetworkBindingsTypeDef
):
    """
    Type definition for `ClientStartTaskResponsetaskscontainers` `networkBindings`

    Details on the network bindings between a container and its host container
    instance. After a task reaches the ``RUNNING`` status, manual and automatic host
    and container port assignments are visible in the ``networkBindings`` section of
    DescribeTasks API responses.

    - **bindIP** *(string) --*

      The IP address that the container is bound to on the container instance.

    - **containerPort** *(integer) --*

      The port number on the container that is used with the network binding.

    - **hostPort** *(integer) --*

      The port number on the host that is used with the network binding.

    - **protocol** *(string) --*

      The protocol used for the network binding.
    """


_ClientStartTaskResponsetaskscontainersnetworkInterfacesTypeDef = TypedDict(
    "_ClientStartTaskResponsetaskscontainersnetworkInterfacesTypeDef",
    {"attachmentId": str, "privateIpv4Address": str, "ipv6Address": str},
    total=False,
)


class ClientStartTaskResponsetaskscontainersnetworkInterfacesTypeDef(
    _ClientStartTaskResponsetaskscontainersnetworkInterfacesTypeDef
):
    """
    Type definition for `ClientStartTaskResponsetaskscontainers` `networkInterfaces`

    An object representing the elastic network interface for tasks that use the
    ``awsvpc`` network mode.

    - **attachmentId** *(string) --*

      The attachment ID for the network interface.

    - **privateIpv4Address** *(string) --*

      The private IPv4 address for the network interface.

    - **ipv6Address** *(string) --*

      The private IPv6 address for the network interface.
    """


_ClientStartTaskResponsetaskscontainersTypeDef = TypedDict(
    "_ClientStartTaskResponsetaskscontainersTypeDef",
    {
        "containerArn": str,
        "taskArn": str,
        "name": str,
        "image": str,
        "imageDigest": str,
        "runtimeId": str,
        "lastStatus": str,
        "exitCode": int,
        "reason": str,
        "networkBindings": List[
            ClientStartTaskResponsetaskscontainersnetworkBindingsTypeDef
        ],
        "networkInterfaces": List[
            ClientStartTaskResponsetaskscontainersnetworkInterfacesTypeDef
        ],
        "healthStatus": str,
        "cpu": str,
        "memory": str,
        "memoryReservation": str,
        "gpuIds": List[str],
    },
    total=False,
)


class ClientStartTaskResponsetaskscontainersTypeDef(
    _ClientStartTaskResponsetaskscontainersTypeDef
):
    """
    Type definition for `ClientStartTaskResponsetasks` `containers`

    A Docker container that is part of a task.

    - **containerArn** *(string) --*

      The Amazon Resource Name (ARN) of the container.

    - **taskArn** *(string) --*

      The ARN of the task.

    - **name** *(string) --*

      The name of the container.

    - **image** *(string) --*

      The image used for the container.

    - **imageDigest** *(string) --*

      The container image manifest digest.

      .. note::

        The ``imageDigest`` is only returned if the container is using an image hosted in
        Amazon ECR, otherwise it is omitted.

    - **runtimeId** *(string) --*

      The ID of the Docker container.

    - **lastStatus** *(string) --*

      The last known status of the container.

    - **exitCode** *(integer) --*

      The exit code returned from the container.

    - **reason** *(string) --*

      A short (255 max characters) human-readable string to provide additional details
      about a running or stopped container.

    - **networkBindings** *(list) --*

      The network bindings associated with the container.

      - *(dict) --*

        Details on the network bindings between a container and its host container
        instance. After a task reaches the ``RUNNING`` status, manual and automatic host
        and container port assignments are visible in the ``networkBindings`` section of
        DescribeTasks API responses.

        - **bindIP** *(string) --*

          The IP address that the container is bound to on the container instance.

        - **containerPort** *(integer) --*

          The port number on the container that is used with the network binding.

        - **hostPort** *(integer) --*

          The port number on the host that is used with the network binding.

        - **protocol** *(string) --*

          The protocol used for the network binding.

    - **networkInterfaces** *(list) --*

      The network interfaces associated with the container.

      - *(dict) --*

        An object representing the elastic network interface for tasks that use the
        ``awsvpc`` network mode.

        - **attachmentId** *(string) --*

          The attachment ID for the network interface.

        - **privateIpv4Address** *(string) --*

          The private IPv4 address for the network interface.

        - **ipv6Address** *(string) --*

          The private IPv6 address for the network interface.

    - **healthStatus** *(string) --*

      The health status of the container. If health checks are not configured for this
      container in its task definition, then it reports the health status as ``UNKNOWN`` .

    - **cpu** *(string) --*

      The number of CPU units set for the container. The value will be ``0`` if no value
      was specified in the container definition when the task definition was registered.

    - **memory** *(string) --*

      The hard limit (in MiB) of memory set for the container.

    - **memoryReservation** *(string) --*

      The soft limit (in MiB) of memory set for the container.

    - **gpuIds** *(list) --*

      The IDs of each GPU assigned to the container.

      - *(string) --*
    """


_ClientStartTaskResponsetasksinferenceAcceleratorsTypeDef = TypedDict(
    "_ClientStartTaskResponsetasksinferenceAcceleratorsTypeDef",
    {"deviceName": str, "deviceType": str},
    total=False,
)


class ClientStartTaskResponsetasksinferenceAcceleratorsTypeDef(
    _ClientStartTaskResponsetasksinferenceAcceleratorsTypeDef
):
    """
    Type definition for `ClientStartTaskResponsetasks` `inferenceAccelerators`

    Details on a Elastic Inference accelerator. For more information, see `Working with
    Amazon Elastic Inference on Amazon ECS
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in the
    *Amazon Elastic Container Service Developer Guide* .

    - **deviceName** *(string) --*

      The Elastic Inference accelerator device name. The ``deviceName`` must also be
      referenced in a container definition as a  ResourceRequirement .

    - **deviceType** *(string) --*

      The Elastic Inference accelerator type to use.
    """


_ClientStartTaskResponsetasksoverridescontainerOverridesenvironmentTypeDef = TypedDict(
    "_ClientStartTaskResponsetasksoverridescontainerOverridesenvironmentTypeDef",
    {"name": str, "value": str},
    total=False,
)


class ClientStartTaskResponsetasksoverridescontainerOverridesenvironmentTypeDef(
    _ClientStartTaskResponsetasksoverridescontainerOverridesenvironmentTypeDef
):
    """
    Type definition for `ClientStartTaskResponsetasksoverridescontainerOverrides` `environment`

    A key-value pair object.

    - **name** *(string) --*

      The name of the key-value pair. For environment variables, this is the name of
      the environment variable.

    - **value** *(string) --*

      The value of the key-value pair. For environment variables, this is the value
      of the environment variable.
    """


_ClientStartTaskResponsetasksoverridescontainerOverridesresourceRequirementsTypeDef = TypedDict(
    "_ClientStartTaskResponsetasksoverridescontainerOverridesresourceRequirementsTypeDef",
    {"value": str, "type": str},
    total=False,
)


class ClientStartTaskResponsetasksoverridescontainerOverridesresourceRequirementsTypeDef(
    _ClientStartTaskResponsetasksoverridescontainerOverridesresourceRequirementsTypeDef
):
    """
    Type definition for `ClientStartTaskResponsetasksoverridescontainerOverrides` `resourceRequirements`

    The type and amount of a resource to assign to a container. The supported
    resource types are GPUs and Elastic Inference accelerators. For more information,
    see `Working with GPUs on Amazon ECS
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-gpu.html>`__ or
    `Working with Amazon Elastic Inference on Amazon ECS
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in
    the *Amazon Elastic Container Service Developer Guide*

    - **value** *(string) --*

      The value for the specified resource type.

      If the ``GPU`` type is used, the value is the number of physical ``GPUs`` the
      Amazon ECS container agent will reserve for the container. The number of GPUs
      reserved for all containers in a task should not exceed the number of available
      GPUs on the container instance the task is launched on.

      If the ``InferenceAccelerator`` type is used, the ``value`` should match the
      ``deviceName`` for an  InferenceAccelerator specified in a task definition.

    - **type** *(string) --*

      The type of resource to assign to a container. The supported values are ``GPU``
      or ``InferenceAccelerator`` .
    """


_ClientStartTaskResponsetasksoverridescontainerOverridesTypeDef = TypedDict(
    "_ClientStartTaskResponsetasksoverridescontainerOverridesTypeDef",
    {
        "name": str,
        "command": List[str],
        "environment": List[
            ClientStartTaskResponsetasksoverridescontainerOverridesenvironmentTypeDef
        ],
        "cpu": int,
        "memory": int,
        "memoryReservation": int,
        "resourceRequirements": List[
            ClientStartTaskResponsetasksoverridescontainerOverridesresourceRequirementsTypeDef
        ],
    },
    total=False,
)


class ClientStartTaskResponsetasksoverridescontainerOverridesTypeDef(
    _ClientStartTaskResponsetasksoverridescontainerOverridesTypeDef
):
    """
    Type definition for `ClientStartTaskResponsetasksoverrides` `containerOverrides`

    The overrides that should be sent to a container. An empty container override can be
    passed in. An example of an empty container override would be
    ``{"containerOverrides": [ ] }`` . If a non-empty container override is specified,
    the ``name`` parameter must be included.

    - **name** *(string) --*

      The name of the container that receives the override. This parameter is required if
      any override is specified.

    - **command** *(list) --*

      The command to send to the container that overrides the default command from the
      Docker image or the task definition. You must also specify a container name.

      - *(string) --*

    - **environment** *(list) --*

      The environment variables to send to the container. You can add new environment
      variables, which are added to the container at launch, or you can override the
      existing environment variables from the Docker image or the task definition. You
      must also specify a container name.

      - *(dict) --*

        A key-value pair object.

        - **name** *(string) --*

          The name of the key-value pair. For environment variables, this is the name of
          the environment variable.

        - **value** *(string) --*

          The value of the key-value pair. For environment variables, this is the value
          of the environment variable.

    - **cpu** *(integer) --*

      The number of ``cpu`` units reserved for the container, instead of the default
      value from the task definition. You must also specify a container name.

    - **memory** *(integer) --*

      The hard limit (in MiB) of memory to present to the container, instead of the
      default value from the task definition. If your container attempts to exceed the
      memory specified here, the container is killed. You must also specify a container
      name.

    - **memoryReservation** *(integer) --*

      The soft limit (in MiB) of memory to reserve for the container, instead of the
      default value from the task definition. You must also specify a container name.

    - **resourceRequirements** *(list) --*

      The type and amount of a resource to assign to a container, instead of the default
      value from the task definition. The only supported resource is a GPU.

      - *(dict) --*

        The type and amount of a resource to assign to a container. The supported
        resource types are GPUs and Elastic Inference accelerators. For more information,
        see `Working with GPUs on Amazon ECS
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-gpu.html>`__ or
        `Working with Amazon Elastic Inference on Amazon ECS
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in
        the *Amazon Elastic Container Service Developer Guide*

        - **value** *(string) --*

          The value for the specified resource type.

          If the ``GPU`` type is used, the value is the number of physical ``GPUs`` the
          Amazon ECS container agent will reserve for the container. The number of GPUs
          reserved for all containers in a task should not exceed the number of available
          GPUs on the container instance the task is launched on.

          If the ``InferenceAccelerator`` type is used, the ``value`` should match the
          ``deviceName`` for an  InferenceAccelerator specified in a task definition.

        - **type** *(string) --*

          The type of resource to assign to a container. The supported values are ``GPU``
          or ``InferenceAccelerator`` .
    """


_ClientStartTaskResponsetasksoverridesinferenceAcceleratorOverridesTypeDef = TypedDict(
    "_ClientStartTaskResponsetasksoverridesinferenceAcceleratorOverridesTypeDef",
    {"deviceName": str, "deviceType": str},
    total=False,
)


class ClientStartTaskResponsetasksoverridesinferenceAcceleratorOverridesTypeDef(
    _ClientStartTaskResponsetasksoverridesinferenceAcceleratorOverridesTypeDef
):
    """
    Type definition for `ClientStartTaskResponsetasksoverrides` `inferenceAcceleratorOverrides`

    Details on an Elastic Inference accelerator task override. This parameter is used to
    override the Elastic Inference accelerator specified in the task definition. For more
    information, see `Working with Amazon Elastic Inference on Amazon ECS
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in the
    *Amazon Elastic Container Service Developer Guide* .

    - **deviceName** *(string) --*

      The Elastic Inference accelerator device name to override for the task. This
      parameter must match a ``deviceName`` specified in the task definition.

    - **deviceType** *(string) --*

      The Elastic Inference accelerator type to use.
    """


_ClientStartTaskResponsetasksoverridesTypeDef = TypedDict(
    "_ClientStartTaskResponsetasksoverridesTypeDef",
    {
        "containerOverrides": List[
            ClientStartTaskResponsetasksoverridescontainerOverridesTypeDef
        ],
        "cpu": str,
        "inferenceAcceleratorOverrides": List[
            ClientStartTaskResponsetasksoverridesinferenceAcceleratorOverridesTypeDef
        ],
        "executionRoleArn": str,
        "memory": str,
        "taskRoleArn": str,
    },
    total=False,
)


class ClientStartTaskResponsetasksoverridesTypeDef(
    _ClientStartTaskResponsetasksoverridesTypeDef
):
    """
    Type definition for `ClientStartTaskResponsetasks` `overrides`

    One or more container overrides.

    - **containerOverrides** *(list) --*

      One or more container overrides sent to a task.

      - *(dict) --*

        The overrides that should be sent to a container. An empty container override can be
        passed in. An example of an empty container override would be
        ``{"containerOverrides": [ ] }`` . If a non-empty container override is specified,
        the ``name`` parameter must be included.

        - **name** *(string) --*

          The name of the container that receives the override. This parameter is required if
          any override is specified.

        - **command** *(list) --*

          The command to send to the container that overrides the default command from the
          Docker image or the task definition. You must also specify a container name.

          - *(string) --*

        - **environment** *(list) --*

          The environment variables to send to the container. You can add new environment
          variables, which are added to the container at launch, or you can override the
          existing environment variables from the Docker image or the task definition. You
          must also specify a container name.

          - *(dict) --*

            A key-value pair object.

            - **name** *(string) --*

              The name of the key-value pair. For environment variables, this is the name of
              the environment variable.

            - **value** *(string) --*

              The value of the key-value pair. For environment variables, this is the value
              of the environment variable.

        - **cpu** *(integer) --*

          The number of ``cpu`` units reserved for the container, instead of the default
          value from the task definition. You must also specify a container name.

        - **memory** *(integer) --*

          The hard limit (in MiB) of memory to present to the container, instead of the
          default value from the task definition. If your container attempts to exceed the
          memory specified here, the container is killed. You must also specify a container
          name.

        - **memoryReservation** *(integer) --*

          The soft limit (in MiB) of memory to reserve for the container, instead of the
          default value from the task definition. You must also specify a container name.

        - **resourceRequirements** *(list) --*

          The type and amount of a resource to assign to a container, instead of the default
          value from the task definition. The only supported resource is a GPU.

          - *(dict) --*

            The type and amount of a resource to assign to a container. The supported
            resource types are GPUs and Elastic Inference accelerators. For more information,
            see `Working with GPUs on Amazon ECS
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-gpu.html>`__ or
            `Working with Amazon Elastic Inference on Amazon ECS
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in
            the *Amazon Elastic Container Service Developer Guide*

            - **value** *(string) --*

              The value for the specified resource type.

              If the ``GPU`` type is used, the value is the number of physical ``GPUs`` the
              Amazon ECS container agent will reserve for the container. The number of GPUs
              reserved for all containers in a task should not exceed the number of available
              GPUs on the container instance the task is launched on.

              If the ``InferenceAccelerator`` type is used, the ``value`` should match the
              ``deviceName`` for an  InferenceAccelerator specified in a task definition.

            - **type** *(string) --*

              The type of resource to assign to a container. The supported values are ``GPU``
              or ``InferenceAccelerator`` .

    - **cpu** *(string) --*

      The cpu override for the task.

    - **inferenceAcceleratorOverrides** *(list) --*

      The Elastic Inference accelerator override for the task.

      - *(dict) --*

        Details on an Elastic Inference accelerator task override. This parameter is used to
        override the Elastic Inference accelerator specified in the task definition. For more
        information, see `Working with Amazon Elastic Inference on Amazon ECS
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in the
        *Amazon Elastic Container Service Developer Guide* .

        - **deviceName** *(string) --*

          The Elastic Inference accelerator device name to override for the task. This
          parameter must match a ``deviceName`` specified in the task definition.

        - **deviceType** *(string) --*

          The Elastic Inference accelerator type to use.

    - **executionRoleArn** *(string) --*

      The Amazon Resource Name (ARN) of the task execution role that the Amazon ECS container
      agent and the Docker daemon can assume.

    - **memory** *(string) --*

      The memory override for the task.

    - **taskRoleArn** *(string) --*

      The Amazon Resource Name (ARN) of the IAM role that containers in this task can assume.
      All containers in this task are granted the permissions that are specified in this role.
    """


_ClientStartTaskResponsetaskstagsTypeDef = TypedDict(
    "_ClientStartTaskResponsetaskstagsTypeDef", {"key": str, "value": str}, total=False
)


class ClientStartTaskResponsetaskstagsTypeDef(_ClientStartTaskResponsetaskstagsTypeDef):
    """
    Type definition for `ClientStartTaskResponsetasks` `tags`

    The metadata that you apply to a resource to help you categorize and organize them.
    Each tag consists of a key and an optional value, both of which you define.

    The following basic restrictions apply to tags:

    * Maximum number of tags per resource - 50

    * For each resource, each tag key must be unique, and each tag key can have only one
    value.

    * Maximum key length - 128 Unicode characters in UTF-8

    * Maximum value length - 256 Unicode characters in UTF-8

    * If your tagging schema is used across multiple services and resources, remember that
    other services may have restrictions on allowed characters. Generally allowed
    characters are: letters, numbers, and spaces representable in UTF-8, and the following
    characters: + - = . _ : / @.

    * Tag keys and values are case-sensitive.

    * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
    prefix for either keys or values as it is reserved for AWS use. You cannot edit or
    delete tag keys or values with this prefix. Tags with this prefix do not count against
    your tags per resource limit.

    - **key** *(string) --*

      One part of a key-value pair that make up a tag. A ``key`` is a general label that
      acts like a category for more specific tag values.

    - **value** *(string) --*

      The optional part of a key-value pair that make up a tag. A ``value`` acts as a
      descriptor within a tag category (key).
    """


_ClientStartTaskResponsetasksTypeDef = TypedDict(
    "_ClientStartTaskResponsetasksTypeDef",
    {
        "attachments": List[ClientStartTaskResponsetasksattachmentsTypeDef],
        "attributes": List[ClientStartTaskResponsetasksattributesTypeDef],
        "availabilityZone": str,
        "clusterArn": str,
        "connectivity": str,
        "connectivityAt": datetime,
        "containerInstanceArn": str,
        "containers": List[ClientStartTaskResponsetaskscontainersTypeDef],
        "cpu": str,
        "createdAt": datetime,
        "desiredStatus": str,
        "executionStoppedAt": datetime,
        "group": str,
        "healthStatus": str,
        "inferenceAccelerators": List[
            ClientStartTaskResponsetasksinferenceAcceleratorsTypeDef
        ],
        "lastStatus": str,
        "launchType": str,
        "memory": str,
        "overrides": ClientStartTaskResponsetasksoverridesTypeDef,
        "platformVersion": str,
        "pullStartedAt": datetime,
        "pullStoppedAt": datetime,
        "startedAt": datetime,
        "startedBy": str,
        "stopCode": str,
        "stoppedAt": datetime,
        "stoppedReason": str,
        "stoppingAt": datetime,
        "tags": List[ClientStartTaskResponsetaskstagsTypeDef],
        "taskArn": str,
        "taskDefinitionArn": str,
        "version": int,
    },
    total=False,
)


class ClientStartTaskResponsetasksTypeDef(_ClientStartTaskResponsetasksTypeDef):
    """
    Type definition for `ClientStartTaskResponse` `tasks`

    Details on a task in a cluster.

    - **attachments** *(list) --*

      The Elastic Network Adapter associated with the task if the task uses the ``awsvpc``
      network mode.

      - *(dict) --*

        An object representing a container instance or task attachment.

        - **id** *(string) --*

          The unique identifier for the attachment.

        - **type** *(string) --*

          The type of the attachment, such as ``ElasticNetworkInterface`` .

        - **status** *(string) --*

          The status of the attachment. Valid values are ``PRECREATED`` , ``CREATED`` ,
          ``ATTACHING`` , ``ATTACHED`` , ``DETACHING`` , ``DETACHED`` , and ``DELETED`` .

        - **details** *(list) --*

          Details of the attachment. For elastic network interfaces, this includes the network
          interface ID, the MAC address, the subnet ID, and the private IPv4 address.

          - *(dict) --*

            A key-value pair object.

            - **name** *(string) --*

              The name of the key-value pair. For environment variables, this is the name of
              the environment variable.

            - **value** *(string) --*

              The value of the key-value pair. For environment variables, this is the value of
              the environment variable.

    - **attributes** *(list) --*

      The attributes of the task

      - *(dict) --*

        An attribute is a name-value pair associated with an Amazon ECS object. Attributes
        enable you to extend the Amazon ECS data model by adding custom metadata to your
        resources. For more information, see `Attributes
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html#attributes>`__
        in the *Amazon Elastic Container Service Developer Guide* .

        - **name** *(string) --*

          The name of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
          hyphens, underscores, and periods are allowed.

        - **value** *(string) --*

          The value of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
          hyphens, underscores, periods, at signs (@), forward slashes, colons, and spaces are
          allowed.

        - **targetType** *(string) --*

          The type of the target with which to attach the attribute. This parameter is required
          if you use the short form ID for a resource instead of the full ARN.

        - **targetId** *(string) --*

          The ID of the target. You can specify the short form ID for a resource or the full
          Amazon Resource Name (ARN).

    - **availabilityZone** *(string) --*

      The availability zone of the task.

    - **clusterArn** *(string) --*

      The ARN of the cluster that hosts the task.

    - **connectivity** *(string) --*

      The connectivity status of a task.

    - **connectivityAt** *(datetime) --*

      The Unix timestamp for when the task last went into ``CONNECTED`` status.

    - **containerInstanceArn** *(string) --*

      The ARN of the container instances that host the task.

    - **containers** *(list) --*

      The containers associated with the task.

      - *(dict) --*

        A Docker container that is part of a task.

        - **containerArn** *(string) --*

          The Amazon Resource Name (ARN) of the container.

        - **taskArn** *(string) --*

          The ARN of the task.

        - **name** *(string) --*

          The name of the container.

        - **image** *(string) --*

          The image used for the container.

        - **imageDigest** *(string) --*

          The container image manifest digest.

          .. note::

            The ``imageDigest`` is only returned if the container is using an image hosted in
            Amazon ECR, otherwise it is omitted.

        - **runtimeId** *(string) --*

          The ID of the Docker container.

        - **lastStatus** *(string) --*

          The last known status of the container.

        - **exitCode** *(integer) --*

          The exit code returned from the container.

        - **reason** *(string) --*

          A short (255 max characters) human-readable string to provide additional details
          about a running or stopped container.

        - **networkBindings** *(list) --*

          The network bindings associated with the container.

          - *(dict) --*

            Details on the network bindings between a container and its host container
            instance. After a task reaches the ``RUNNING`` status, manual and automatic host
            and container port assignments are visible in the ``networkBindings`` section of
            DescribeTasks API responses.

            - **bindIP** *(string) --*

              The IP address that the container is bound to on the container instance.

            - **containerPort** *(integer) --*

              The port number on the container that is used with the network binding.

            - **hostPort** *(integer) --*

              The port number on the host that is used with the network binding.

            - **protocol** *(string) --*

              The protocol used for the network binding.

        - **networkInterfaces** *(list) --*

          The network interfaces associated with the container.

          - *(dict) --*

            An object representing the elastic network interface for tasks that use the
            ``awsvpc`` network mode.

            - **attachmentId** *(string) --*

              The attachment ID for the network interface.

            - **privateIpv4Address** *(string) --*

              The private IPv4 address for the network interface.

            - **ipv6Address** *(string) --*

              The private IPv6 address for the network interface.

        - **healthStatus** *(string) --*

          The health status of the container. If health checks are not configured for this
          container in its task definition, then it reports the health status as ``UNKNOWN`` .

        - **cpu** *(string) --*

          The number of CPU units set for the container. The value will be ``0`` if no value
          was specified in the container definition when the task definition was registered.

        - **memory** *(string) --*

          The hard limit (in MiB) of memory set for the container.

        - **memoryReservation** *(string) --*

          The soft limit (in MiB) of memory set for the container.

        - **gpuIds** *(list) --*

          The IDs of each GPU assigned to the container.

          - *(string) --*

    - **cpu** *(string) --*

      The number of CPU units used by the task as expressed in a task definition. It can be
      expressed as an integer using CPU units, for example ``1024`` . It can also be expressed
      as a string using vCPUs, for example ``1 vCPU`` or ``1 vcpu`` . String values are
      converted to an integer indicating the CPU units when the task definition is registered.

      If you are using the EC2 launch type, this field is optional. Supported values are
      between ``128`` CPU units (``0.125`` vCPUs) and ``10240`` CPU units (``10`` vCPUs).

      If you are using the Fargate launch type, this field is required and you must use one of
      the following values, which determines your range of supported values for the ``memory``
      parameter:

      * 256 (.25 vCPU) - Available ``memory`` values: 512 (0.5 GB), 1024 (1 GB), 2048 (2 GB)

      * 512 (.5 vCPU) - Available ``memory`` values: 1024 (1 GB), 2048 (2 GB), 3072 (3 GB),
      4096 (4 GB)

      * 1024 (1 vCPU) - Available ``memory`` values: 2048 (2 GB), 3072 (3 GB), 4096 (4 GB),
      5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB)

      * 2048 (2 vCPU) - Available ``memory`` values: Between 4096 (4 GB) and 16384 (16 GB) in
      increments of 1024 (1 GB)

      * 4096 (4 vCPU) - Available ``memory`` values: Between 8192 (8 GB) and 30720 (30 GB) in
      increments of 1024 (1 GB)

    - **createdAt** *(datetime) --*

      The Unix timestamp for when the task was created (the task entered the ``PENDING`` state).

    - **desiredStatus** *(string) --*

      The desired status of the task. For more information, see `Task Lifecycle
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-lifecycle.html>`__ .

    - **executionStoppedAt** *(datetime) --*

      The Unix timestamp for when the task execution stopped.

    - **group** *(string) --*

      The name of the task group associated with the task.

    - **healthStatus** *(string) --*

      The health status for the task, which is determined by the health of the essential
      containers in the task. If all essential containers in the task are reporting as
      ``HEALTHY`` , then the task status also reports as ``HEALTHY`` . If any essential
      containers in the task are reporting as ``UNHEALTHY`` or ``UNKNOWN`` , then the task
      status also reports as ``UNHEALTHY`` or ``UNKNOWN`` , accordingly.

      .. note::

        The Amazon ECS container agent does not monitor or report on Docker health checks that
        are embedded in a container image (such as those specified in a parent image or from
        the image's Dockerfile) and not specified in the container definition. Health check
        parameters that are specified in a container definition override any Docker health
        checks that exist in the container image.

    - **inferenceAccelerators** *(list) --*

      The Elastic Inference accelerator associated with the task.

      - *(dict) --*

        Details on a Elastic Inference accelerator. For more information, see `Working with
        Amazon Elastic Inference on Amazon ECS
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in the
        *Amazon Elastic Container Service Developer Guide* .

        - **deviceName** *(string) --*

          The Elastic Inference accelerator device name. The ``deviceName`` must also be
          referenced in a container definition as a  ResourceRequirement .

        - **deviceType** *(string) --*

          The Elastic Inference accelerator type to use.

    - **lastStatus** *(string) --*

      The last known status of the task. For more information, see `Task Lifecycle
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-lifecycle.html>`__ .

    - **launchType** *(string) --*

      The launch type on which your task is running. For more information, see `Amazon ECS
      Launch Types
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html>`__ in the
      *Amazon Elastic Container Service Developer Guide* .

    - **memory** *(string) --*

      The amount of memory (in MiB) used by the task as expressed in a task definition. It can
      be expressed as an integer using MiB, for example ``1024`` . It can also be expressed as
      a string using GB, for example ``1GB`` or ``1 GB`` . String values are converted to an
      integer indicating the MiB when the task definition is registered.

      If you are using the EC2 launch type, this field is optional.

      If you are using the Fargate launch type, this field is required and you must use one of
      the following values, which determines your range of supported values for the ``cpu``
      parameter:

      * 512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) - Available ``cpu`` values: 256 (.25 vCPU)

      * 1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available ``cpu`` values: 512 (.5
      vCPU)

      * 2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8
      GB) - Available ``cpu`` values: 1024 (1 vCPU)

      * Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB) - Available ``cpu``
      values: 2048 (2 vCPU)

      * Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB) - Available ``cpu``
      values: 4096 (4 vCPU)

    - **overrides** *(dict) --*

      One or more container overrides.

      - **containerOverrides** *(list) --*

        One or more container overrides sent to a task.

        - *(dict) --*

          The overrides that should be sent to a container. An empty container override can be
          passed in. An example of an empty container override would be
          ``{"containerOverrides": [ ] }`` . If a non-empty container override is specified,
          the ``name`` parameter must be included.

          - **name** *(string) --*

            The name of the container that receives the override. This parameter is required if
            any override is specified.

          - **command** *(list) --*

            The command to send to the container that overrides the default command from the
            Docker image or the task definition. You must also specify a container name.

            - *(string) --*

          - **environment** *(list) --*

            The environment variables to send to the container. You can add new environment
            variables, which are added to the container at launch, or you can override the
            existing environment variables from the Docker image or the task definition. You
            must also specify a container name.

            - *(dict) --*

              A key-value pair object.

              - **name** *(string) --*

                The name of the key-value pair. For environment variables, this is the name of
                the environment variable.

              - **value** *(string) --*

                The value of the key-value pair. For environment variables, this is the value
                of the environment variable.

          - **cpu** *(integer) --*

            The number of ``cpu`` units reserved for the container, instead of the default
            value from the task definition. You must also specify a container name.

          - **memory** *(integer) --*

            The hard limit (in MiB) of memory to present to the container, instead of the
            default value from the task definition. If your container attempts to exceed the
            memory specified here, the container is killed. You must also specify a container
            name.

          - **memoryReservation** *(integer) --*

            The soft limit (in MiB) of memory to reserve for the container, instead of the
            default value from the task definition. You must also specify a container name.

          - **resourceRequirements** *(list) --*

            The type and amount of a resource to assign to a container, instead of the default
            value from the task definition. The only supported resource is a GPU.

            - *(dict) --*

              The type and amount of a resource to assign to a container. The supported
              resource types are GPUs and Elastic Inference accelerators. For more information,
              see `Working with GPUs on Amazon ECS
              <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-gpu.html>`__ or
              `Working with Amazon Elastic Inference on Amazon ECS
              <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in
              the *Amazon Elastic Container Service Developer Guide*

              - **value** *(string) --*

                The value for the specified resource type.

                If the ``GPU`` type is used, the value is the number of physical ``GPUs`` the
                Amazon ECS container agent will reserve for the container. The number of GPUs
                reserved for all containers in a task should not exceed the number of available
                GPUs on the container instance the task is launched on.

                If the ``InferenceAccelerator`` type is used, the ``value`` should match the
                ``deviceName`` for an  InferenceAccelerator specified in a task definition.

              - **type** *(string) --*

                The type of resource to assign to a container. The supported values are ``GPU``
                or ``InferenceAccelerator`` .

      - **cpu** *(string) --*

        The cpu override for the task.

      - **inferenceAcceleratorOverrides** *(list) --*

        The Elastic Inference accelerator override for the task.

        - *(dict) --*

          Details on an Elastic Inference accelerator task override. This parameter is used to
          override the Elastic Inference accelerator specified in the task definition. For more
          information, see `Working with Amazon Elastic Inference on Amazon ECS
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in the
          *Amazon Elastic Container Service Developer Guide* .

          - **deviceName** *(string) --*

            The Elastic Inference accelerator device name to override for the task. This
            parameter must match a ``deviceName`` specified in the task definition.

          - **deviceType** *(string) --*

            The Elastic Inference accelerator type to use.

      - **executionRoleArn** *(string) --*

        The Amazon Resource Name (ARN) of the task execution role that the Amazon ECS container
        agent and the Docker daemon can assume.

      - **memory** *(string) --*

        The memory override for the task.

      - **taskRoleArn** *(string) --*

        The Amazon Resource Name (ARN) of the IAM role that containers in this task can assume.
        All containers in this task are granted the permissions that are specified in this role.

    - **platformVersion** *(string) --*

      The platform version on which your task is running. A platform version is only specified
      for tasks using the Fargate launch type. If one is not specified, the ``LATEST`` platform
      version is used by default. For more information, see `AWS Fargate Platform Versions
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

    - **pullStartedAt** *(datetime) --*

      The Unix timestamp for when the container image pull began.

    - **pullStoppedAt** *(datetime) --*

      The Unix timestamp for when the container image pull completed.

    - **startedAt** *(datetime) --*

      The Unix timestamp for when the task started (the task transitioned from the ``PENDING``
      state to the ``RUNNING`` state).

    - **startedBy** *(string) --*

      The tag specified when a task is started. If the task is started by an Amazon ECS
      service, then the ``startedBy`` parameter contains the deployment ID of the service that
      starts it.

    - **stopCode** *(string) --*

      The stop code indicating why a task was stopped. The ``stoppedReason`` may contain
      additional details.

    - **stoppedAt** *(datetime) --*

      The Unix timestamp for when the task was stopped (the task transitioned from the
      ``RUNNING`` state to the ``STOPPED`` state).

    - **stoppedReason** *(string) --*

      The reason that the task was stopped.

    - **stoppingAt** *(datetime) --*

      The Unix timestamp for when the task stops (transitions from the ``RUNNING`` state to
      ``STOPPED`` ).

    - **tags** *(list) --*

      The metadata that you apply to the task to help you categorize and organize them. Each
      tag consists of a key and an optional value, both of which you define.

      The following basic restrictions apply to tags:

      * Maximum number of tags per resource - 50

      * For each resource, each tag key must be unique, and each tag key can have only one
      value.

      * Maximum key length - 128 Unicode characters in UTF-8

      * Maximum value length - 256 Unicode characters in UTF-8

      * If your tagging schema is used across multiple services and resources, remember that
      other services may have restrictions on allowed characters. Generally allowed characters
      are: letters, numbers, and spaces representable in UTF-8, and the following characters: +
      - = . _ : / @.

      * Tag keys and values are case-sensitive.

      * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
      prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
      tag keys or values with this prefix. Tags with this prefix do not count against your tags
      per resource limit.

      - *(dict) --*

        The metadata that you apply to a resource to help you categorize and organize them.
        Each tag consists of a key and an optional value, both of which you define.

        The following basic restrictions apply to tags:

        * Maximum number of tags per resource - 50

        * For each resource, each tag key must be unique, and each tag key can have only one
        value.

        * Maximum key length - 128 Unicode characters in UTF-8

        * Maximum value length - 256 Unicode characters in UTF-8

        * If your tagging schema is used across multiple services and resources, remember that
        other services may have restrictions on allowed characters. Generally allowed
        characters are: letters, numbers, and spaces representable in UTF-8, and the following
        characters: + - = . _ : / @.

        * Tag keys and values are case-sensitive.

        * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
        prefix for either keys or values as it is reserved for AWS use. You cannot edit or
        delete tag keys or values with this prefix. Tags with this prefix do not count against
        your tags per resource limit.

        - **key** *(string) --*

          One part of a key-value pair that make up a tag. A ``key`` is a general label that
          acts like a category for more specific tag values.

        - **value** *(string) --*

          The optional part of a key-value pair that make up a tag. A ``value`` acts as a
          descriptor within a tag category (key).

    - **taskArn** *(string) --*

      The Amazon Resource Name (ARN) of the task.

    - **taskDefinitionArn** *(string) --*

      The ARN of the task definition that creates the task.

    - **version** *(integer) --*

      The version counter for the task. Every time a task experiences a change that triggers a
      CloudWatch event, the version counter is incremented. If you are replicating your Amazon
      ECS task state with CloudWatch Events, you can compare the version of a task reported by
      the Amazon ECS API actions with the version reported in CloudWatch Events for the task
      (inside the ``detail`` object) to verify that the version in your event stream is current.
    """


_ClientStartTaskResponseTypeDef = TypedDict(
    "_ClientStartTaskResponseTypeDef",
    {
        "tasks": List[ClientStartTaskResponsetasksTypeDef],
        "failures": List[ClientStartTaskResponsefailuresTypeDef],
    },
    total=False,
)


class ClientStartTaskResponseTypeDef(_ClientStartTaskResponseTypeDef):
    """
    Type definition for `ClientStartTask` `Response`

    - **tasks** *(list) --*

      A full description of the tasks that were started. Each task that was successfully placed on
      your container instances is described.

      - *(dict) --*

        Details on a task in a cluster.

        - **attachments** *(list) --*

          The Elastic Network Adapter associated with the task if the task uses the ``awsvpc``
          network mode.

          - *(dict) --*

            An object representing a container instance or task attachment.

            - **id** *(string) --*

              The unique identifier for the attachment.

            - **type** *(string) --*

              The type of the attachment, such as ``ElasticNetworkInterface`` .

            - **status** *(string) --*

              The status of the attachment. Valid values are ``PRECREATED`` , ``CREATED`` ,
              ``ATTACHING`` , ``ATTACHED`` , ``DETACHING`` , ``DETACHED`` , and ``DELETED`` .

            - **details** *(list) --*

              Details of the attachment. For elastic network interfaces, this includes the network
              interface ID, the MAC address, the subnet ID, and the private IPv4 address.

              - *(dict) --*

                A key-value pair object.

                - **name** *(string) --*

                  The name of the key-value pair. For environment variables, this is the name of
                  the environment variable.

                - **value** *(string) --*

                  The value of the key-value pair. For environment variables, this is the value of
                  the environment variable.

        - **attributes** *(list) --*

          The attributes of the task

          - *(dict) --*

            An attribute is a name-value pair associated with an Amazon ECS object. Attributes
            enable you to extend the Amazon ECS data model by adding custom metadata to your
            resources. For more information, see `Attributes
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html#attributes>`__
            in the *Amazon Elastic Container Service Developer Guide* .

            - **name** *(string) --*

              The name of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
              hyphens, underscores, and periods are allowed.

            - **value** *(string) --*

              The value of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
              hyphens, underscores, periods, at signs (@), forward slashes, colons, and spaces are
              allowed.

            - **targetType** *(string) --*

              The type of the target with which to attach the attribute. This parameter is required
              if you use the short form ID for a resource instead of the full ARN.

            - **targetId** *(string) --*

              The ID of the target. You can specify the short form ID for a resource or the full
              Amazon Resource Name (ARN).

        - **availabilityZone** *(string) --*

          The availability zone of the task.

        - **clusterArn** *(string) --*

          The ARN of the cluster that hosts the task.

        - **connectivity** *(string) --*

          The connectivity status of a task.

        - **connectivityAt** *(datetime) --*

          The Unix timestamp for when the task last went into ``CONNECTED`` status.

        - **containerInstanceArn** *(string) --*

          The ARN of the container instances that host the task.

        - **containers** *(list) --*

          The containers associated with the task.

          - *(dict) --*

            A Docker container that is part of a task.

            - **containerArn** *(string) --*

              The Amazon Resource Name (ARN) of the container.

            - **taskArn** *(string) --*

              The ARN of the task.

            - **name** *(string) --*

              The name of the container.

            - **image** *(string) --*

              The image used for the container.

            - **imageDigest** *(string) --*

              The container image manifest digest.

              .. note::

                The ``imageDigest`` is only returned if the container is using an image hosted in
                Amazon ECR, otherwise it is omitted.

            - **runtimeId** *(string) --*

              The ID of the Docker container.

            - **lastStatus** *(string) --*

              The last known status of the container.

            - **exitCode** *(integer) --*

              The exit code returned from the container.

            - **reason** *(string) --*

              A short (255 max characters) human-readable string to provide additional details
              about a running or stopped container.

            - **networkBindings** *(list) --*

              The network bindings associated with the container.

              - *(dict) --*

                Details on the network bindings between a container and its host container
                instance. After a task reaches the ``RUNNING`` status, manual and automatic host
                and container port assignments are visible in the ``networkBindings`` section of
                DescribeTasks API responses.

                - **bindIP** *(string) --*

                  The IP address that the container is bound to on the container instance.

                - **containerPort** *(integer) --*

                  The port number on the container that is used with the network binding.

                - **hostPort** *(integer) --*

                  The port number on the host that is used with the network binding.

                - **protocol** *(string) --*

                  The protocol used for the network binding.

            - **networkInterfaces** *(list) --*

              The network interfaces associated with the container.

              - *(dict) --*

                An object representing the elastic network interface for tasks that use the
                ``awsvpc`` network mode.

                - **attachmentId** *(string) --*

                  The attachment ID for the network interface.

                - **privateIpv4Address** *(string) --*

                  The private IPv4 address for the network interface.

                - **ipv6Address** *(string) --*

                  The private IPv6 address for the network interface.

            - **healthStatus** *(string) --*

              The health status of the container. If health checks are not configured for this
              container in its task definition, then it reports the health status as ``UNKNOWN`` .

            - **cpu** *(string) --*

              The number of CPU units set for the container. The value will be ``0`` if no value
              was specified in the container definition when the task definition was registered.

            - **memory** *(string) --*

              The hard limit (in MiB) of memory set for the container.

            - **memoryReservation** *(string) --*

              The soft limit (in MiB) of memory set for the container.

            - **gpuIds** *(list) --*

              The IDs of each GPU assigned to the container.

              - *(string) --*

        - **cpu** *(string) --*

          The number of CPU units used by the task as expressed in a task definition. It can be
          expressed as an integer using CPU units, for example ``1024`` . It can also be expressed
          as a string using vCPUs, for example ``1 vCPU`` or ``1 vcpu`` . String values are
          converted to an integer indicating the CPU units when the task definition is registered.

          If you are using the EC2 launch type, this field is optional. Supported values are
          between ``128`` CPU units (``0.125`` vCPUs) and ``10240`` CPU units (``10`` vCPUs).

          If you are using the Fargate launch type, this field is required and you must use one of
          the following values, which determines your range of supported values for the ``memory``
          parameter:

          * 256 (.25 vCPU) - Available ``memory`` values: 512 (0.5 GB), 1024 (1 GB), 2048 (2 GB)

          * 512 (.5 vCPU) - Available ``memory`` values: 1024 (1 GB), 2048 (2 GB), 3072 (3 GB),
          4096 (4 GB)

          * 1024 (1 vCPU) - Available ``memory`` values: 2048 (2 GB), 3072 (3 GB), 4096 (4 GB),
          5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB)

          * 2048 (2 vCPU) - Available ``memory`` values: Between 4096 (4 GB) and 16384 (16 GB) in
          increments of 1024 (1 GB)

          * 4096 (4 vCPU) - Available ``memory`` values: Between 8192 (8 GB) and 30720 (30 GB) in
          increments of 1024 (1 GB)

        - **createdAt** *(datetime) --*

          The Unix timestamp for when the task was created (the task entered the ``PENDING`` state).

        - **desiredStatus** *(string) --*

          The desired status of the task. For more information, see `Task Lifecycle
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-lifecycle.html>`__ .

        - **executionStoppedAt** *(datetime) --*

          The Unix timestamp for when the task execution stopped.

        - **group** *(string) --*

          The name of the task group associated with the task.

        - **healthStatus** *(string) --*

          The health status for the task, which is determined by the health of the essential
          containers in the task. If all essential containers in the task are reporting as
          ``HEALTHY`` , then the task status also reports as ``HEALTHY`` . If any essential
          containers in the task are reporting as ``UNHEALTHY`` or ``UNKNOWN`` , then the task
          status also reports as ``UNHEALTHY`` or ``UNKNOWN`` , accordingly.

          .. note::

            The Amazon ECS container agent does not monitor or report on Docker health checks that
            are embedded in a container image (such as those specified in a parent image or from
            the image's Dockerfile) and not specified in the container definition. Health check
            parameters that are specified in a container definition override any Docker health
            checks that exist in the container image.

        - **inferenceAccelerators** *(list) --*

          The Elastic Inference accelerator associated with the task.

          - *(dict) --*

            Details on a Elastic Inference accelerator. For more information, see `Working with
            Amazon Elastic Inference on Amazon ECS
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in the
            *Amazon Elastic Container Service Developer Guide* .

            - **deviceName** *(string) --*

              The Elastic Inference accelerator device name. The ``deviceName`` must also be
              referenced in a container definition as a  ResourceRequirement .

            - **deviceType** *(string) --*

              The Elastic Inference accelerator type to use.

        - **lastStatus** *(string) --*

          The last known status of the task. For more information, see `Task Lifecycle
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-lifecycle.html>`__ .

        - **launchType** *(string) --*

          The launch type on which your task is running. For more information, see `Amazon ECS
          Launch Types
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html>`__ in the
          *Amazon Elastic Container Service Developer Guide* .

        - **memory** *(string) --*

          The amount of memory (in MiB) used by the task as expressed in a task definition. It can
          be expressed as an integer using MiB, for example ``1024`` . It can also be expressed as
          a string using GB, for example ``1GB`` or ``1 GB`` . String values are converted to an
          integer indicating the MiB when the task definition is registered.

          If you are using the EC2 launch type, this field is optional.

          If you are using the Fargate launch type, this field is required and you must use one of
          the following values, which determines your range of supported values for the ``cpu``
          parameter:

          * 512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) - Available ``cpu`` values: 256 (.25 vCPU)

          * 1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available ``cpu`` values: 512 (.5
          vCPU)

          * 2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8
          GB) - Available ``cpu`` values: 1024 (1 vCPU)

          * Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB) - Available ``cpu``
          values: 2048 (2 vCPU)

          * Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB) - Available ``cpu``
          values: 4096 (4 vCPU)

        - **overrides** *(dict) --*

          One or more container overrides.

          - **containerOverrides** *(list) --*

            One or more container overrides sent to a task.

            - *(dict) --*

              The overrides that should be sent to a container. An empty container override can be
              passed in. An example of an empty container override would be
              ``{"containerOverrides": [ ] }`` . If a non-empty container override is specified,
              the ``name`` parameter must be included.

              - **name** *(string) --*

                The name of the container that receives the override. This parameter is required if
                any override is specified.

              - **command** *(list) --*

                The command to send to the container that overrides the default command from the
                Docker image or the task definition. You must also specify a container name.

                - *(string) --*

              - **environment** *(list) --*

                The environment variables to send to the container. You can add new environment
                variables, which are added to the container at launch, or you can override the
                existing environment variables from the Docker image or the task definition. You
                must also specify a container name.

                - *(dict) --*

                  A key-value pair object.

                  - **name** *(string) --*

                    The name of the key-value pair. For environment variables, this is the name of
                    the environment variable.

                  - **value** *(string) --*

                    The value of the key-value pair. For environment variables, this is the value
                    of the environment variable.

              - **cpu** *(integer) --*

                The number of ``cpu`` units reserved for the container, instead of the default
                value from the task definition. You must also specify a container name.

              - **memory** *(integer) --*

                The hard limit (in MiB) of memory to present to the container, instead of the
                default value from the task definition. If your container attempts to exceed the
                memory specified here, the container is killed. You must also specify a container
                name.

              - **memoryReservation** *(integer) --*

                The soft limit (in MiB) of memory to reserve for the container, instead of the
                default value from the task definition. You must also specify a container name.

              - **resourceRequirements** *(list) --*

                The type and amount of a resource to assign to a container, instead of the default
                value from the task definition. The only supported resource is a GPU.

                - *(dict) --*

                  The type and amount of a resource to assign to a container. The supported
                  resource types are GPUs and Elastic Inference accelerators. For more information,
                  see `Working with GPUs on Amazon ECS
                  <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-gpu.html>`__ or
                  `Working with Amazon Elastic Inference on Amazon ECS
                  <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in
                  the *Amazon Elastic Container Service Developer Guide*

                  - **value** *(string) --*

                    The value for the specified resource type.

                    If the ``GPU`` type is used, the value is the number of physical ``GPUs`` the
                    Amazon ECS container agent will reserve for the container. The number of GPUs
                    reserved for all containers in a task should not exceed the number of available
                    GPUs on the container instance the task is launched on.

                    If the ``InferenceAccelerator`` type is used, the ``value`` should match the
                    ``deviceName`` for an  InferenceAccelerator specified in a task definition.

                  - **type** *(string) --*

                    The type of resource to assign to a container. The supported values are ``GPU``
                    or ``InferenceAccelerator`` .

          - **cpu** *(string) --*

            The cpu override for the task.

          - **inferenceAcceleratorOverrides** *(list) --*

            The Elastic Inference accelerator override for the task.

            - *(dict) --*

              Details on an Elastic Inference accelerator task override. This parameter is used to
              override the Elastic Inference accelerator specified in the task definition. For more
              information, see `Working with Amazon Elastic Inference on Amazon ECS
              <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in the
              *Amazon Elastic Container Service Developer Guide* .

              - **deviceName** *(string) --*

                The Elastic Inference accelerator device name to override for the task. This
                parameter must match a ``deviceName`` specified in the task definition.

              - **deviceType** *(string) --*

                The Elastic Inference accelerator type to use.

          - **executionRoleArn** *(string) --*

            The Amazon Resource Name (ARN) of the task execution role that the Amazon ECS container
            agent and the Docker daemon can assume.

          - **memory** *(string) --*

            The memory override for the task.

          - **taskRoleArn** *(string) --*

            The Amazon Resource Name (ARN) of the IAM role that containers in this task can assume.
            All containers in this task are granted the permissions that are specified in this role.

        - **platformVersion** *(string) --*

          The platform version on which your task is running. A platform version is only specified
          for tasks using the Fargate launch type. If one is not specified, the ``LATEST`` platform
          version is used by default. For more information, see `AWS Fargate Platform Versions
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

        - **pullStartedAt** *(datetime) --*

          The Unix timestamp for when the container image pull began.

        - **pullStoppedAt** *(datetime) --*

          The Unix timestamp for when the container image pull completed.

        - **startedAt** *(datetime) --*

          The Unix timestamp for when the task started (the task transitioned from the ``PENDING``
          state to the ``RUNNING`` state).

        - **startedBy** *(string) --*

          The tag specified when a task is started. If the task is started by an Amazon ECS
          service, then the ``startedBy`` parameter contains the deployment ID of the service that
          starts it.

        - **stopCode** *(string) --*

          The stop code indicating why a task was stopped. The ``stoppedReason`` may contain
          additional details.

        - **stoppedAt** *(datetime) --*

          The Unix timestamp for when the task was stopped (the task transitioned from the
          ``RUNNING`` state to the ``STOPPED`` state).

        - **stoppedReason** *(string) --*

          The reason that the task was stopped.

        - **stoppingAt** *(datetime) --*

          The Unix timestamp for when the task stops (transitions from the ``RUNNING`` state to
          ``STOPPED`` ).

        - **tags** *(list) --*

          The metadata that you apply to the task to help you categorize and organize them. Each
          tag consists of a key and an optional value, both of which you define.

          The following basic restrictions apply to tags:

          * Maximum number of tags per resource - 50

          * For each resource, each tag key must be unique, and each tag key can have only one
          value.

          * Maximum key length - 128 Unicode characters in UTF-8

          * Maximum value length - 256 Unicode characters in UTF-8

          * If your tagging schema is used across multiple services and resources, remember that
          other services may have restrictions on allowed characters. Generally allowed characters
          are: letters, numbers, and spaces representable in UTF-8, and the following characters: +
          - = . _ : / @.

          * Tag keys and values are case-sensitive.

          * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
          prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
          tag keys or values with this prefix. Tags with this prefix do not count against your tags
          per resource limit.

          - *(dict) --*

            The metadata that you apply to a resource to help you categorize and organize them.
            Each tag consists of a key and an optional value, both of which you define.

            The following basic restrictions apply to tags:

            * Maximum number of tags per resource - 50

            * For each resource, each tag key must be unique, and each tag key can have only one
            value.

            * Maximum key length - 128 Unicode characters in UTF-8

            * Maximum value length - 256 Unicode characters in UTF-8

            * If your tagging schema is used across multiple services and resources, remember that
            other services may have restrictions on allowed characters. Generally allowed
            characters are: letters, numbers, and spaces representable in UTF-8, and the following
            characters: + - = . _ : / @.

            * Tag keys and values are case-sensitive.

            * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
            prefix for either keys or values as it is reserved for AWS use. You cannot edit or
            delete tag keys or values with this prefix. Tags with this prefix do not count against
            your tags per resource limit.

            - **key** *(string) --*

              One part of a key-value pair that make up a tag. A ``key`` is a general label that
              acts like a category for more specific tag values.

            - **value** *(string) --*

              The optional part of a key-value pair that make up a tag. A ``value`` acts as a
              descriptor within a tag category (key).

        - **taskArn** *(string) --*

          The Amazon Resource Name (ARN) of the task.

        - **taskDefinitionArn** *(string) --*

          The ARN of the task definition that creates the task.

        - **version** *(integer) --*

          The version counter for the task. Every time a task experiences a change that triggers a
          CloudWatch event, the version counter is incremented. If you are replicating your Amazon
          ECS task state with CloudWatch Events, you can compare the version of a task reported by
          the Amazon ECS API actions with the version reported in CloudWatch Events for the task
          (inside the ``detail`` object) to verify that the version in your event stream is current.

    - **failures** *(list) --*

      Any failures associated with the call.

      - *(dict) --*

        A failed resource.

        - **arn** *(string) --*

          The Amazon Resource Name (ARN) of the failed resource.

        - **reason** *(string) --*

          The reason for the failure.

        - **detail** *(string) --*

          The details of the failure.
    """


_RequiredClientStartTasknetworkConfigurationawsvpcConfigurationTypeDef = TypedDict(
    "_RequiredClientStartTasknetworkConfigurationawsvpcConfigurationTypeDef",
    {"subnets": List[str]},
)
_OptionalClientStartTasknetworkConfigurationawsvpcConfigurationTypeDef = TypedDict(
    "_OptionalClientStartTasknetworkConfigurationawsvpcConfigurationTypeDef",
    {"securityGroups": List[str], "assignPublicIp": str},
    total=False,
)


class ClientStartTasknetworkConfigurationawsvpcConfigurationTypeDef(
    _RequiredClientStartTasknetworkConfigurationawsvpcConfigurationTypeDef,
    _OptionalClientStartTasknetworkConfigurationawsvpcConfigurationTypeDef,
):
    """
    Type definition for `ClientStartTasknetworkConfiguration` `awsvpcConfiguration`

    The VPC subnets and security groups associated with a task.

    .. note::

      All specified subnets and security groups must be from the same VPC.

    - **subnets** *(list) --* **[REQUIRED]**

      The subnets associated with the task or service. There is a limit of 16 subnets that can be
      specified per ``AwsVpcConfiguration`` .

      .. note::

        All specified subnets must be from the same VPC.

      - *(string) --*

    - **securityGroups** *(list) --*

      The security groups associated with the task or service. If you do not specify a security
      group, the default security group for the VPC is used. There is a limit of 5 security groups
      that can be specified per ``AwsVpcConfiguration`` .

      .. note::

        All specified security groups must be from the same VPC.

      - *(string) --*

    - **assignPublicIp** *(string) --*

      Whether the task's elastic network interface receives a public IP address. The default value
      is ``DISABLED`` .
    """


_ClientStartTasknetworkConfigurationTypeDef = TypedDict(
    "_ClientStartTasknetworkConfigurationTypeDef",
    {
        "awsvpcConfiguration": ClientStartTasknetworkConfigurationawsvpcConfigurationTypeDef
    },
    total=False,
)


class ClientStartTasknetworkConfigurationTypeDef(
    _ClientStartTasknetworkConfigurationTypeDef
):
    """
    Type definition for `ClientStartTask` `networkConfiguration`

    The VPC subnet and security group configuration for tasks that receive their own elastic network
    interface by using the ``awsvpc`` networking mode.

    - **awsvpcConfiguration** *(dict) --*

      The VPC subnets and security groups associated with a task.

      .. note::

        All specified subnets and security groups must be from the same VPC.

      - **subnets** *(list) --* **[REQUIRED]**

        The subnets associated with the task or service. There is a limit of 16 subnets that can be
        specified per ``AwsVpcConfiguration`` .

        .. note::

          All specified subnets must be from the same VPC.

        - *(string) --*

      - **securityGroups** *(list) --*

        The security groups associated with the task or service. If you do not specify a security
        group, the default security group for the VPC is used. There is a limit of 5 security groups
        that can be specified per ``AwsVpcConfiguration`` .

        .. note::

          All specified security groups must be from the same VPC.

        - *(string) --*

      - **assignPublicIp** *(string) --*

        Whether the task's elastic network interface receives a public IP address. The default value
        is ``DISABLED`` .
    """


_ClientStartTaskoverridescontainerOverridesenvironmentTypeDef = TypedDict(
    "_ClientStartTaskoverridescontainerOverridesenvironmentTypeDef",
    {"name": str, "value": str},
    total=False,
)


class ClientStartTaskoverridescontainerOverridesenvironmentTypeDef(
    _ClientStartTaskoverridescontainerOverridesenvironmentTypeDef
):
    """
    Type definition for `ClientStartTaskoverridescontainerOverrides` `environment`

    A key-value pair object.

    - **name** *(string) --*

      The name of the key-value pair. For environment variables, this is the name of the
      environment variable.

    - **value** *(string) --*

      The value of the key-value pair. For environment variables, this is the value of the
      environment variable.
    """


_ClientStartTaskoverridescontainerOverridesresourceRequirementsTypeDef = TypedDict(
    "_ClientStartTaskoverridescontainerOverridesresourceRequirementsTypeDef",
    {"value": str, "type": str},
)


class ClientStartTaskoverridescontainerOverridesresourceRequirementsTypeDef(
    _ClientStartTaskoverridescontainerOverridesresourceRequirementsTypeDef
):
    """
    Type definition for `ClientStartTaskoverridescontainerOverrides` `resourceRequirements`

    The type and amount of a resource to assign to a container. The supported resource types
    are GPUs and Elastic Inference accelerators. For more information, see `Working with GPUs
    on Amazon ECS
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-gpu.html>`__ or `Working
    with Amazon Elastic Inference on Amazon ECS
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in the
    *Amazon Elastic Container Service Developer Guide*

    - **value** *(string) --* **[REQUIRED]**

      The value for the specified resource type.

      If the ``GPU`` type is used, the value is the number of physical ``GPUs`` the Amazon
      ECS container agent will reserve for the container. The number of GPUs reserved for all
      containers in a task should not exceed the number of available GPUs on the container
      instance the task is launched on.

      If the ``InferenceAccelerator`` type is used, the ``value`` should match the
      ``deviceName`` for an  InferenceAccelerator specified in a task definition.

    - **type** *(string) --* **[REQUIRED]**

      The type of resource to assign to a container. The supported values are ``GPU`` or
      ``InferenceAccelerator`` .
    """


_ClientStartTaskoverridescontainerOverridesTypeDef = TypedDict(
    "_ClientStartTaskoverridescontainerOverridesTypeDef",
    {
        "name": str,
        "command": List[str],
        "environment": List[
            ClientStartTaskoverridescontainerOverridesenvironmentTypeDef
        ],
        "cpu": int,
        "memory": int,
        "memoryReservation": int,
        "resourceRequirements": List[
            ClientStartTaskoverridescontainerOverridesresourceRequirementsTypeDef
        ],
    },
    total=False,
)


class ClientStartTaskoverridescontainerOverridesTypeDef(
    _ClientStartTaskoverridescontainerOverridesTypeDef
):
    """
    Type definition for `ClientStartTaskoverrides` `containerOverrides`

    The overrides that should be sent to a container. An empty container override can be passed
    in. An example of an empty container override would be ``{"containerOverrides": [ ] }`` . If
    a non-empty container override is specified, the ``name`` parameter must be included.

    - **name** *(string) --*

      The name of the container that receives the override. This parameter is required if any
      override is specified.

    - **command** *(list) --*

      The command to send to the container that overrides the default command from the Docker
      image or the task definition. You must also specify a container name.

      - *(string) --*

    - **environment** *(list) --*

      The environment variables to send to the container. You can add new environment variables,
      which are added to the container at launch, or you can override the existing environment
      variables from the Docker image or the task definition. You must also specify a container
      name.

      - *(dict) --*

        A key-value pair object.

        - **name** *(string) --*

          The name of the key-value pair. For environment variables, this is the name of the
          environment variable.

        - **value** *(string) --*

          The value of the key-value pair. For environment variables, this is the value of the
          environment variable.

    - **cpu** *(integer) --*

      The number of ``cpu`` units reserved for the container, instead of the default value from
      the task definition. You must also specify a container name.

    - **memory** *(integer) --*

      The hard limit (in MiB) of memory to present to the container, instead of the default value
      from the task definition. If your container attempts to exceed the memory specified here,
      the container is killed. You must also specify a container name.

    - **memoryReservation** *(integer) --*

      The soft limit (in MiB) of memory to reserve for the container, instead of the default
      value from the task definition. You must also specify a container name.

    - **resourceRequirements** *(list) --*

      The type and amount of a resource to assign to a container, instead of the default value
      from the task definition. The only supported resource is a GPU.

      - *(dict) --*

        The type and amount of a resource to assign to a container. The supported resource types
        are GPUs and Elastic Inference accelerators. For more information, see `Working with GPUs
        on Amazon ECS
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-gpu.html>`__ or `Working
        with Amazon Elastic Inference on Amazon ECS
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in the
        *Amazon Elastic Container Service Developer Guide*

        - **value** *(string) --* **[REQUIRED]**

          The value for the specified resource type.

          If the ``GPU`` type is used, the value is the number of physical ``GPUs`` the Amazon
          ECS container agent will reserve for the container. The number of GPUs reserved for all
          containers in a task should not exceed the number of available GPUs on the container
          instance the task is launched on.

          If the ``InferenceAccelerator`` type is used, the ``value`` should match the
          ``deviceName`` for an  InferenceAccelerator specified in a task definition.

        - **type** *(string) --* **[REQUIRED]**

          The type of resource to assign to a container. The supported values are ``GPU`` or
          ``InferenceAccelerator`` .
    """


_ClientStartTaskoverridesinferenceAcceleratorOverridesTypeDef = TypedDict(
    "_ClientStartTaskoverridesinferenceAcceleratorOverridesTypeDef",
    {"deviceName": str, "deviceType": str},
    total=False,
)


class ClientStartTaskoverridesinferenceAcceleratorOverridesTypeDef(
    _ClientStartTaskoverridesinferenceAcceleratorOverridesTypeDef
):
    """
    Type definition for `ClientStartTaskoverrides` `inferenceAcceleratorOverrides`

    Details on an Elastic Inference accelerator task override. This parameter is used to override
    the Elastic Inference accelerator specified in the task definition. For more information, see
    `Working with Amazon Elastic Inference on Amazon ECS
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in the *Amazon
    Elastic Container Service Developer Guide* .

    - **deviceName** *(string) --*

      The Elastic Inference accelerator device name to override for the task. This parameter must
      match a ``deviceName`` specified in the task definition.

    - **deviceType** *(string) --*

      The Elastic Inference accelerator type to use.
    """


_ClientStartTaskoverridesTypeDef = TypedDict(
    "_ClientStartTaskoverridesTypeDef",
    {
        "containerOverrides": List[ClientStartTaskoverridescontainerOverridesTypeDef],
        "cpu": str,
        "inferenceAcceleratorOverrides": List[
            ClientStartTaskoverridesinferenceAcceleratorOverridesTypeDef
        ],
        "executionRoleArn": str,
        "memory": str,
        "taskRoleArn": str,
    },
    total=False,
)


class ClientStartTaskoverridesTypeDef(_ClientStartTaskoverridesTypeDef):
    """
    Type definition for `ClientStartTask` `overrides`

    A list of container overrides in JSON format that specify the name of a container in the
    specified task definition and the overrides it should receive. You can override the default
    command for a container (that is specified in the task definition or Docker image) with a
    ``command`` override. You can also override existing environment variables (that are specified in
    the task definition or Docker image) on a container or add new environment variables to it with
    an ``environment`` override.

    .. note::

      A total of 8192 characters are allowed for overrides. This limit includes the JSON formatting
      characters of the override structure.

    - **containerOverrides** *(list) --*

      One or more container overrides sent to a task.

      - *(dict) --*

        The overrides that should be sent to a container. An empty container override can be passed
        in. An example of an empty container override would be ``{"containerOverrides": [ ] }`` . If
        a non-empty container override is specified, the ``name`` parameter must be included.

        - **name** *(string) --*

          The name of the container that receives the override. This parameter is required if any
          override is specified.

        - **command** *(list) --*

          The command to send to the container that overrides the default command from the Docker
          image or the task definition. You must also specify a container name.

          - *(string) --*

        - **environment** *(list) --*

          The environment variables to send to the container. You can add new environment variables,
          which are added to the container at launch, or you can override the existing environment
          variables from the Docker image or the task definition. You must also specify a container
          name.

          - *(dict) --*

            A key-value pair object.

            - **name** *(string) --*

              The name of the key-value pair. For environment variables, this is the name of the
              environment variable.

            - **value** *(string) --*

              The value of the key-value pair. For environment variables, this is the value of the
              environment variable.

        - **cpu** *(integer) --*

          The number of ``cpu`` units reserved for the container, instead of the default value from
          the task definition. You must also specify a container name.

        - **memory** *(integer) --*

          The hard limit (in MiB) of memory to present to the container, instead of the default value
          from the task definition. If your container attempts to exceed the memory specified here,
          the container is killed. You must also specify a container name.

        - **memoryReservation** *(integer) --*

          The soft limit (in MiB) of memory to reserve for the container, instead of the default
          value from the task definition. You must also specify a container name.

        - **resourceRequirements** *(list) --*

          The type and amount of a resource to assign to a container, instead of the default value
          from the task definition. The only supported resource is a GPU.

          - *(dict) --*

            The type and amount of a resource to assign to a container. The supported resource types
            are GPUs and Elastic Inference accelerators. For more information, see `Working with GPUs
            on Amazon ECS
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-gpu.html>`__ or `Working
            with Amazon Elastic Inference on Amazon ECS
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in the
            *Amazon Elastic Container Service Developer Guide*

            - **value** *(string) --* **[REQUIRED]**

              The value for the specified resource type.

              If the ``GPU`` type is used, the value is the number of physical ``GPUs`` the Amazon
              ECS container agent will reserve for the container. The number of GPUs reserved for all
              containers in a task should not exceed the number of available GPUs on the container
              instance the task is launched on.

              If the ``InferenceAccelerator`` type is used, the ``value`` should match the
              ``deviceName`` for an  InferenceAccelerator specified in a task definition.

            - **type** *(string) --* **[REQUIRED]**

              The type of resource to assign to a container. The supported values are ``GPU`` or
              ``InferenceAccelerator`` .

    - **cpu** *(string) --*

      The cpu override for the task.

    - **inferenceAcceleratorOverrides** *(list) --*

      The Elastic Inference accelerator override for the task.

      - *(dict) --*

        Details on an Elastic Inference accelerator task override. This parameter is used to override
        the Elastic Inference accelerator specified in the task definition. For more information, see
        `Working with Amazon Elastic Inference on Amazon ECS
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in the *Amazon
        Elastic Container Service Developer Guide* .

        - **deviceName** *(string) --*

          The Elastic Inference accelerator device name to override for the task. This parameter must
          match a ``deviceName`` specified in the task definition.

        - **deviceType** *(string) --*

          The Elastic Inference accelerator type to use.

    - **executionRoleArn** *(string) --*

      The Amazon Resource Name (ARN) of the task execution role that the Amazon ECS container agent
      and the Docker daemon can assume.

    - **memory** *(string) --*

      The memory override for the task.

    - **taskRoleArn** *(string) --*

      The Amazon Resource Name (ARN) of the IAM role that containers in this task can assume. All
      containers in this task are granted the permissions that are specified in this role.
    """


_ClientStartTasktagsTypeDef = TypedDict(
    "_ClientStartTasktagsTypeDef", {"key": str, "value": str}, total=False
)


class ClientStartTasktagsTypeDef(_ClientStartTasktagsTypeDef):
    """
    Type definition for `ClientStartTask` `tags`

    The metadata that you apply to a resource to help you categorize and organize them. Each tag
    consists of a key and an optional value, both of which you define.

    The following basic restrictions apply to tags:

    * Maximum number of tags per resource - 50

    * For each resource, each tag key must be unique, and each tag key can have only one value.

    * Maximum key length - 128 Unicode characters in UTF-8

    * Maximum value length - 256 Unicode characters in UTF-8

    * If your tagging schema is used across multiple services and resources, remember that other
    services may have restrictions on allowed characters. Generally allowed characters are:
    letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ :
    / @.

    * Tag keys and values are case-sensitive.

    * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a prefix
    for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys or
    values with this prefix. Tags with this prefix do not count against your tags per resource
    limit.

    - **key** *(string) --*

      One part of a key-value pair that make up a tag. A ``key`` is a general label that acts like
      a category for more specific tag values.

    - **value** *(string) --*

      The optional part of a key-value pair that make up a tag. A ``value`` acts as a descriptor
      within a tag category (key).
    """


_ClientStopTaskResponsetaskattachmentsdetailsTypeDef = TypedDict(
    "_ClientStopTaskResponsetaskattachmentsdetailsTypeDef",
    {"name": str, "value": str},
    total=False,
)


class ClientStopTaskResponsetaskattachmentsdetailsTypeDef(
    _ClientStopTaskResponsetaskattachmentsdetailsTypeDef
):
    """
    Type definition for `ClientStopTaskResponsetaskattachments` `details`

    A key-value pair object.

    - **name** *(string) --*

      The name of the key-value pair. For environment variables, this is the name of the
      environment variable.

    - **value** *(string) --*

      The value of the key-value pair. For environment variables, this is the value of
      the environment variable.
    """


_ClientStopTaskResponsetaskattachmentsTypeDef = TypedDict(
    "_ClientStopTaskResponsetaskattachmentsTypeDef",
    {
        "id": str,
        "type": str,
        "status": str,
        "details": List[ClientStopTaskResponsetaskattachmentsdetailsTypeDef],
    },
    total=False,
)


class ClientStopTaskResponsetaskattachmentsTypeDef(
    _ClientStopTaskResponsetaskattachmentsTypeDef
):
    """
    Type definition for `ClientStopTaskResponsetask` `attachments`

    An object representing a container instance or task attachment.

    - **id** *(string) --*

      The unique identifier for the attachment.

    - **type** *(string) --*

      The type of the attachment, such as ``ElasticNetworkInterface`` .

    - **status** *(string) --*

      The status of the attachment. Valid values are ``PRECREATED`` , ``CREATED`` ,
      ``ATTACHING`` , ``ATTACHED`` , ``DETACHING`` , ``DETACHED`` , and ``DELETED`` .

    - **details** *(list) --*

      Details of the attachment. For elastic network interfaces, this includes the network
      interface ID, the MAC address, the subnet ID, and the private IPv4 address.

      - *(dict) --*

        A key-value pair object.

        - **name** *(string) --*

          The name of the key-value pair. For environment variables, this is the name of the
          environment variable.

        - **value** *(string) --*

          The value of the key-value pair. For environment variables, this is the value of
          the environment variable.
    """


_ClientStopTaskResponsetaskattributesTypeDef = TypedDict(
    "_ClientStopTaskResponsetaskattributesTypeDef",
    {"name": str, "value": str, "targetType": str, "targetId": str},
    total=False,
)


class ClientStopTaskResponsetaskattributesTypeDef(
    _ClientStopTaskResponsetaskattributesTypeDef
):
    """
    Type definition for `ClientStopTaskResponsetask` `attributes`

    An attribute is a name-value pair associated with an Amazon ECS object. Attributes enable
    you to extend the Amazon ECS data model by adding custom metadata to your resources. For
    more information, see `Attributes
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html#attributes>`__
    in the *Amazon Elastic Container Service Developer Guide* .

    - **name** *(string) --*

      The name of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
      hyphens, underscores, and periods are allowed.

    - **value** *(string) --*

      The value of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
      hyphens, underscores, periods, at signs (@), forward slashes, colons, and spaces are
      allowed.

    - **targetType** *(string) --*

      The type of the target with which to attach the attribute. This parameter is required
      if you use the short form ID for a resource instead of the full ARN.

    - **targetId** *(string) --*

      The ID of the target. You can specify the short form ID for a resource or the full
      Amazon Resource Name (ARN).
    """


_ClientStopTaskResponsetaskcontainersnetworkBindingsTypeDef = TypedDict(
    "_ClientStopTaskResponsetaskcontainersnetworkBindingsTypeDef",
    {"bindIP": str, "containerPort": int, "hostPort": int, "protocol": str},
    total=False,
)


class ClientStopTaskResponsetaskcontainersnetworkBindingsTypeDef(
    _ClientStopTaskResponsetaskcontainersnetworkBindingsTypeDef
):
    """
    Type definition for `ClientStopTaskResponsetaskcontainers` `networkBindings`

    Details on the network bindings between a container and its host container instance.
    After a task reaches the ``RUNNING`` status, manual and automatic host and container
    port assignments are visible in the ``networkBindings`` section of  DescribeTasks API
    responses.

    - **bindIP** *(string) --*

      The IP address that the container is bound to on the container instance.

    - **containerPort** *(integer) --*

      The port number on the container that is used with the network binding.

    - **hostPort** *(integer) --*

      The port number on the host that is used with the network binding.

    - **protocol** *(string) --*

      The protocol used for the network binding.
    """


_ClientStopTaskResponsetaskcontainersnetworkInterfacesTypeDef = TypedDict(
    "_ClientStopTaskResponsetaskcontainersnetworkInterfacesTypeDef",
    {"attachmentId": str, "privateIpv4Address": str, "ipv6Address": str},
    total=False,
)


class ClientStopTaskResponsetaskcontainersnetworkInterfacesTypeDef(
    _ClientStopTaskResponsetaskcontainersnetworkInterfacesTypeDef
):
    """
    Type definition for `ClientStopTaskResponsetaskcontainers` `networkInterfaces`

    An object representing the elastic network interface for tasks that use the
    ``awsvpc`` network mode.

    - **attachmentId** *(string) --*

      The attachment ID for the network interface.

    - **privateIpv4Address** *(string) --*

      The private IPv4 address for the network interface.

    - **ipv6Address** *(string) --*

      The private IPv6 address for the network interface.
    """


_ClientStopTaskResponsetaskcontainersTypeDef = TypedDict(
    "_ClientStopTaskResponsetaskcontainersTypeDef",
    {
        "containerArn": str,
        "taskArn": str,
        "name": str,
        "image": str,
        "imageDigest": str,
        "runtimeId": str,
        "lastStatus": str,
        "exitCode": int,
        "reason": str,
        "networkBindings": List[
            ClientStopTaskResponsetaskcontainersnetworkBindingsTypeDef
        ],
        "networkInterfaces": List[
            ClientStopTaskResponsetaskcontainersnetworkInterfacesTypeDef
        ],
        "healthStatus": str,
        "cpu": str,
        "memory": str,
        "memoryReservation": str,
        "gpuIds": List[str],
    },
    total=False,
)


class ClientStopTaskResponsetaskcontainersTypeDef(
    _ClientStopTaskResponsetaskcontainersTypeDef
):
    """
    Type definition for `ClientStopTaskResponsetask` `containers`

    A Docker container that is part of a task.

    - **containerArn** *(string) --*

      The Amazon Resource Name (ARN) of the container.

    - **taskArn** *(string) --*

      The ARN of the task.

    - **name** *(string) --*

      The name of the container.

    - **image** *(string) --*

      The image used for the container.

    - **imageDigest** *(string) --*

      The container image manifest digest.

      .. note::

        The ``imageDigest`` is only returned if the container is using an image hosted in
        Amazon ECR, otherwise it is omitted.

    - **runtimeId** *(string) --*

      The ID of the Docker container.

    - **lastStatus** *(string) --*

      The last known status of the container.

    - **exitCode** *(integer) --*

      The exit code returned from the container.

    - **reason** *(string) --*

      A short (255 max characters) human-readable string to provide additional details about
      a running or stopped container.

    - **networkBindings** *(list) --*

      The network bindings associated with the container.

      - *(dict) --*

        Details on the network bindings between a container and its host container instance.
        After a task reaches the ``RUNNING`` status, manual and automatic host and container
        port assignments are visible in the ``networkBindings`` section of  DescribeTasks API
        responses.

        - **bindIP** *(string) --*

          The IP address that the container is bound to on the container instance.

        - **containerPort** *(integer) --*

          The port number on the container that is used with the network binding.

        - **hostPort** *(integer) --*

          The port number on the host that is used with the network binding.

        - **protocol** *(string) --*

          The protocol used for the network binding.

    - **networkInterfaces** *(list) --*

      The network interfaces associated with the container.

      - *(dict) --*

        An object representing the elastic network interface for tasks that use the
        ``awsvpc`` network mode.

        - **attachmentId** *(string) --*

          The attachment ID for the network interface.

        - **privateIpv4Address** *(string) --*

          The private IPv4 address for the network interface.

        - **ipv6Address** *(string) --*

          The private IPv6 address for the network interface.

    - **healthStatus** *(string) --*

      The health status of the container. If health checks are not configured for this
      container in its task definition, then it reports the health status as ``UNKNOWN`` .

    - **cpu** *(string) --*

      The number of CPU units set for the container. The value will be ``0`` if no value was
      specified in the container definition when the task definition was registered.

    - **memory** *(string) --*

      The hard limit (in MiB) of memory set for the container.

    - **memoryReservation** *(string) --*

      The soft limit (in MiB) of memory set for the container.

    - **gpuIds** *(list) --*

      The IDs of each GPU assigned to the container.

      - *(string) --*
    """


_ClientStopTaskResponsetaskinferenceAcceleratorsTypeDef = TypedDict(
    "_ClientStopTaskResponsetaskinferenceAcceleratorsTypeDef",
    {"deviceName": str, "deviceType": str},
    total=False,
)


class ClientStopTaskResponsetaskinferenceAcceleratorsTypeDef(
    _ClientStopTaskResponsetaskinferenceAcceleratorsTypeDef
):
    """
    Type definition for `ClientStopTaskResponsetask` `inferenceAccelerators`

    Details on a Elastic Inference accelerator. For more information, see `Working with
    Amazon Elastic Inference on Amazon ECS
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in the
    *Amazon Elastic Container Service Developer Guide* .

    - **deviceName** *(string) --*

      The Elastic Inference accelerator device name. The ``deviceName`` must also be
      referenced in a container definition as a  ResourceRequirement .

    - **deviceType** *(string) --*

      The Elastic Inference accelerator type to use.
    """


_ClientStopTaskResponsetaskoverridescontainerOverridesenvironmentTypeDef = TypedDict(
    "_ClientStopTaskResponsetaskoverridescontainerOverridesenvironmentTypeDef",
    {"name": str, "value": str},
    total=False,
)


class ClientStopTaskResponsetaskoverridescontainerOverridesenvironmentTypeDef(
    _ClientStopTaskResponsetaskoverridescontainerOverridesenvironmentTypeDef
):
    """
    Type definition for `ClientStopTaskResponsetaskoverridescontainerOverrides` `environment`

    A key-value pair object.

    - **name** *(string) --*

      The name of the key-value pair. For environment variables, this is the name of
      the environment variable.

    - **value** *(string) --*

      The value of the key-value pair. For environment variables, this is the value of
      the environment variable.
    """


_ClientStopTaskResponsetaskoverridescontainerOverridesresourceRequirementsTypeDef = TypedDict(
    "_ClientStopTaskResponsetaskoverridescontainerOverridesresourceRequirementsTypeDef",
    {"value": str, "type": str},
    total=False,
)


class ClientStopTaskResponsetaskoverridescontainerOverridesresourceRequirementsTypeDef(
    _ClientStopTaskResponsetaskoverridescontainerOverridesresourceRequirementsTypeDef
):
    """
    Type definition for `ClientStopTaskResponsetaskoverridescontainerOverrides` `resourceRequirements`

    The type and amount of a resource to assign to a container. The supported resource
    types are GPUs and Elastic Inference accelerators. For more information, see
    `Working with GPUs on Amazon ECS
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-gpu.html>`__ or
    `Working with Amazon Elastic Inference on Amazon ECS
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in
    the *Amazon Elastic Container Service Developer Guide*

    - **value** *(string) --*

      The value for the specified resource type.

      If the ``GPU`` type is used, the value is the number of physical ``GPUs`` the
      Amazon ECS container agent will reserve for the container. The number of GPUs
      reserved for all containers in a task should not exceed the number of available
      GPUs on the container instance the task is launched on.

      If the ``InferenceAccelerator`` type is used, the ``value`` should match the
      ``deviceName`` for an  InferenceAccelerator specified in a task definition.

    - **type** *(string) --*

      The type of resource to assign to a container. The supported values are ``GPU``
      or ``InferenceAccelerator`` .
    """


_ClientStopTaskResponsetaskoverridescontainerOverridesTypeDef = TypedDict(
    "_ClientStopTaskResponsetaskoverridescontainerOverridesTypeDef",
    {
        "name": str,
        "command": List[str],
        "environment": List[
            ClientStopTaskResponsetaskoverridescontainerOverridesenvironmentTypeDef
        ],
        "cpu": int,
        "memory": int,
        "memoryReservation": int,
        "resourceRequirements": List[
            ClientStopTaskResponsetaskoverridescontainerOverridesresourceRequirementsTypeDef
        ],
    },
    total=False,
)


class ClientStopTaskResponsetaskoverridescontainerOverridesTypeDef(
    _ClientStopTaskResponsetaskoverridescontainerOverridesTypeDef
):
    """
    Type definition for `ClientStopTaskResponsetaskoverrides` `containerOverrides`

    The overrides that should be sent to a container. An empty container override can be
    passed in. An example of an empty container override would be ``{"containerOverrides":
    [ ] }`` . If a non-empty container override is specified, the ``name`` parameter must
    be included.

    - **name** *(string) --*

      The name of the container that receives the override. This parameter is required if
      any override is specified.

    - **command** *(list) --*

      The command to send to the container that overrides the default command from the
      Docker image or the task definition. You must also specify a container name.

      - *(string) --*

    - **environment** *(list) --*

      The environment variables to send to the container. You can add new environment
      variables, which are added to the container at launch, or you can override the
      existing environment variables from the Docker image or the task definition. You must
      also specify a container name.

      - *(dict) --*

        A key-value pair object.

        - **name** *(string) --*

          The name of the key-value pair. For environment variables, this is the name of
          the environment variable.

        - **value** *(string) --*

          The value of the key-value pair. For environment variables, this is the value of
          the environment variable.

    - **cpu** *(integer) --*

      The number of ``cpu`` units reserved for the container, instead of the default value
      from the task definition. You must also specify a container name.

    - **memory** *(integer) --*

      The hard limit (in MiB) of memory to present to the container, instead of the default
      value from the task definition. If your container attempts to exceed the memory
      specified here, the container is killed. You must also specify a container name.

    - **memoryReservation** *(integer) --*

      The soft limit (in MiB) of memory to reserve for the container, instead of the
      default value from the task definition. You must also specify a container name.

    - **resourceRequirements** *(list) --*

      The type and amount of a resource to assign to a container, instead of the default
      value from the task definition. The only supported resource is a GPU.

      - *(dict) --*

        The type and amount of a resource to assign to a container. The supported resource
        types are GPUs and Elastic Inference accelerators. For more information, see
        `Working with GPUs on Amazon ECS
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-gpu.html>`__ or
        `Working with Amazon Elastic Inference on Amazon ECS
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in
        the *Amazon Elastic Container Service Developer Guide*

        - **value** *(string) --*

          The value for the specified resource type.

          If the ``GPU`` type is used, the value is the number of physical ``GPUs`` the
          Amazon ECS container agent will reserve for the container. The number of GPUs
          reserved for all containers in a task should not exceed the number of available
          GPUs on the container instance the task is launched on.

          If the ``InferenceAccelerator`` type is used, the ``value`` should match the
          ``deviceName`` for an  InferenceAccelerator specified in a task definition.

        - **type** *(string) --*

          The type of resource to assign to a container. The supported values are ``GPU``
          or ``InferenceAccelerator`` .
    """


_ClientStopTaskResponsetaskoverridesinferenceAcceleratorOverridesTypeDef = TypedDict(
    "_ClientStopTaskResponsetaskoverridesinferenceAcceleratorOverridesTypeDef",
    {"deviceName": str, "deviceType": str},
    total=False,
)


class ClientStopTaskResponsetaskoverridesinferenceAcceleratorOverridesTypeDef(
    _ClientStopTaskResponsetaskoverridesinferenceAcceleratorOverridesTypeDef
):
    """
    Type definition for `ClientStopTaskResponsetaskoverrides` `inferenceAcceleratorOverrides`

    Details on an Elastic Inference accelerator task override. This parameter is used to
    override the Elastic Inference accelerator specified in the task definition. For more
    information, see `Working with Amazon Elastic Inference on Amazon ECS
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in the
    *Amazon Elastic Container Service Developer Guide* .

    - **deviceName** *(string) --*

      The Elastic Inference accelerator device name to override for the task. This
      parameter must match a ``deviceName`` specified in the task definition.

    - **deviceType** *(string) --*

      The Elastic Inference accelerator type to use.
    """


_ClientStopTaskResponsetaskoverridesTypeDef = TypedDict(
    "_ClientStopTaskResponsetaskoverridesTypeDef",
    {
        "containerOverrides": List[
            ClientStopTaskResponsetaskoverridescontainerOverridesTypeDef
        ],
        "cpu": str,
        "inferenceAcceleratorOverrides": List[
            ClientStopTaskResponsetaskoverridesinferenceAcceleratorOverridesTypeDef
        ],
        "executionRoleArn": str,
        "memory": str,
        "taskRoleArn": str,
    },
    total=False,
)


class ClientStopTaskResponsetaskoverridesTypeDef(
    _ClientStopTaskResponsetaskoverridesTypeDef
):
    """
    Type definition for `ClientStopTaskResponsetask` `overrides`

    One or more container overrides.

    - **containerOverrides** *(list) --*

      One or more container overrides sent to a task.

      - *(dict) --*

        The overrides that should be sent to a container. An empty container override can be
        passed in. An example of an empty container override would be ``{"containerOverrides":
        [ ] }`` . If a non-empty container override is specified, the ``name`` parameter must
        be included.

        - **name** *(string) --*

          The name of the container that receives the override. This parameter is required if
          any override is specified.

        - **command** *(list) --*

          The command to send to the container that overrides the default command from the
          Docker image or the task definition. You must also specify a container name.

          - *(string) --*

        - **environment** *(list) --*

          The environment variables to send to the container. You can add new environment
          variables, which are added to the container at launch, or you can override the
          existing environment variables from the Docker image or the task definition. You must
          also specify a container name.

          - *(dict) --*

            A key-value pair object.

            - **name** *(string) --*

              The name of the key-value pair. For environment variables, this is the name of
              the environment variable.

            - **value** *(string) --*

              The value of the key-value pair. For environment variables, this is the value of
              the environment variable.

        - **cpu** *(integer) --*

          The number of ``cpu`` units reserved for the container, instead of the default value
          from the task definition. You must also specify a container name.

        - **memory** *(integer) --*

          The hard limit (in MiB) of memory to present to the container, instead of the default
          value from the task definition. If your container attempts to exceed the memory
          specified here, the container is killed. You must also specify a container name.

        - **memoryReservation** *(integer) --*

          The soft limit (in MiB) of memory to reserve for the container, instead of the
          default value from the task definition. You must also specify a container name.

        - **resourceRequirements** *(list) --*

          The type and amount of a resource to assign to a container, instead of the default
          value from the task definition. The only supported resource is a GPU.

          - *(dict) --*

            The type and amount of a resource to assign to a container. The supported resource
            types are GPUs and Elastic Inference accelerators. For more information, see
            `Working with GPUs on Amazon ECS
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-gpu.html>`__ or
            `Working with Amazon Elastic Inference on Amazon ECS
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in
            the *Amazon Elastic Container Service Developer Guide*

            - **value** *(string) --*

              The value for the specified resource type.

              If the ``GPU`` type is used, the value is the number of physical ``GPUs`` the
              Amazon ECS container agent will reserve for the container. The number of GPUs
              reserved for all containers in a task should not exceed the number of available
              GPUs on the container instance the task is launched on.

              If the ``InferenceAccelerator`` type is used, the ``value`` should match the
              ``deviceName`` for an  InferenceAccelerator specified in a task definition.

            - **type** *(string) --*

              The type of resource to assign to a container. The supported values are ``GPU``
              or ``InferenceAccelerator`` .

    - **cpu** *(string) --*

      The cpu override for the task.

    - **inferenceAcceleratorOverrides** *(list) --*

      The Elastic Inference accelerator override for the task.

      - *(dict) --*

        Details on an Elastic Inference accelerator task override. This parameter is used to
        override the Elastic Inference accelerator specified in the task definition. For more
        information, see `Working with Amazon Elastic Inference on Amazon ECS
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in the
        *Amazon Elastic Container Service Developer Guide* .

        - **deviceName** *(string) --*

          The Elastic Inference accelerator device name to override for the task. This
          parameter must match a ``deviceName`` specified in the task definition.

        - **deviceType** *(string) --*

          The Elastic Inference accelerator type to use.

    - **executionRoleArn** *(string) --*

      The Amazon Resource Name (ARN) of the task execution role that the Amazon ECS container
      agent and the Docker daemon can assume.

    - **memory** *(string) --*

      The memory override for the task.

    - **taskRoleArn** *(string) --*

      The Amazon Resource Name (ARN) of the IAM role that containers in this task can assume.
      All containers in this task are granted the permissions that are specified in this role.
    """


_ClientStopTaskResponsetasktagsTypeDef = TypedDict(
    "_ClientStopTaskResponsetasktagsTypeDef", {"key": str, "value": str}, total=False
)


class ClientStopTaskResponsetasktagsTypeDef(_ClientStopTaskResponsetasktagsTypeDef):
    """
    Type definition for `ClientStopTaskResponsetask` `tags`

    The metadata that you apply to a resource to help you categorize and organize them. Each
    tag consists of a key and an optional value, both of which you define.

    The following basic restrictions apply to tags:

    * Maximum number of tags per resource - 50

    * For each resource, each tag key must be unique, and each tag key can have only one
    value.

    * Maximum key length - 128 Unicode characters in UTF-8

    * Maximum value length - 256 Unicode characters in UTF-8

    * If your tagging schema is used across multiple services and resources, remember that
    other services may have restrictions on allowed characters. Generally allowed characters
    are: letters, numbers, and spaces representable in UTF-8, and the following characters: +
    - = . _ : / @.

    * Tag keys and values are case-sensitive.

    * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
    prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
    tag keys or values with this prefix. Tags with this prefix do not count against your tags
    per resource limit.

    - **key** *(string) --*

      One part of a key-value pair that make up a tag. A ``key`` is a general label that acts
      like a category for more specific tag values.

    - **value** *(string) --*

      The optional part of a key-value pair that make up a tag. A ``value`` acts as a
      descriptor within a tag category (key).
    """


_ClientStopTaskResponsetaskTypeDef = TypedDict(
    "_ClientStopTaskResponsetaskTypeDef",
    {
        "attachments": List[ClientStopTaskResponsetaskattachmentsTypeDef],
        "attributes": List[ClientStopTaskResponsetaskattributesTypeDef],
        "availabilityZone": str,
        "clusterArn": str,
        "connectivity": str,
        "connectivityAt": datetime,
        "containerInstanceArn": str,
        "containers": List[ClientStopTaskResponsetaskcontainersTypeDef],
        "cpu": str,
        "createdAt": datetime,
        "desiredStatus": str,
        "executionStoppedAt": datetime,
        "group": str,
        "healthStatus": str,
        "inferenceAccelerators": List[
            ClientStopTaskResponsetaskinferenceAcceleratorsTypeDef
        ],
        "lastStatus": str,
        "launchType": str,
        "memory": str,
        "overrides": ClientStopTaskResponsetaskoverridesTypeDef,
        "platformVersion": str,
        "pullStartedAt": datetime,
        "pullStoppedAt": datetime,
        "startedAt": datetime,
        "startedBy": str,
        "stopCode": str,
        "stoppedAt": datetime,
        "stoppedReason": str,
        "stoppingAt": datetime,
        "tags": List[ClientStopTaskResponsetasktagsTypeDef],
        "taskArn": str,
        "taskDefinitionArn": str,
        "version": int,
    },
    total=False,
)


class ClientStopTaskResponsetaskTypeDef(_ClientStopTaskResponsetaskTypeDef):
    """
    Type definition for `ClientStopTaskResponse` `task`

    The task that was stopped.

    - **attachments** *(list) --*

      The Elastic Network Adapter associated with the task if the task uses the ``awsvpc``
      network mode.

      - *(dict) --*

        An object representing a container instance or task attachment.

        - **id** *(string) --*

          The unique identifier for the attachment.

        - **type** *(string) --*

          The type of the attachment, such as ``ElasticNetworkInterface`` .

        - **status** *(string) --*

          The status of the attachment. Valid values are ``PRECREATED`` , ``CREATED`` ,
          ``ATTACHING`` , ``ATTACHED`` , ``DETACHING`` , ``DETACHED`` , and ``DELETED`` .

        - **details** *(list) --*

          Details of the attachment. For elastic network interfaces, this includes the network
          interface ID, the MAC address, the subnet ID, and the private IPv4 address.

          - *(dict) --*

            A key-value pair object.

            - **name** *(string) --*

              The name of the key-value pair. For environment variables, this is the name of the
              environment variable.

            - **value** *(string) --*

              The value of the key-value pair. For environment variables, this is the value of
              the environment variable.

    - **attributes** *(list) --*

      The attributes of the task

      - *(dict) --*

        An attribute is a name-value pair associated with an Amazon ECS object. Attributes enable
        you to extend the Amazon ECS data model by adding custom metadata to your resources. For
        more information, see `Attributes
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html#attributes>`__
        in the *Amazon Elastic Container Service Developer Guide* .

        - **name** *(string) --*

          The name of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
          hyphens, underscores, and periods are allowed.

        - **value** *(string) --*

          The value of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
          hyphens, underscores, periods, at signs (@), forward slashes, colons, and spaces are
          allowed.

        - **targetType** *(string) --*

          The type of the target with which to attach the attribute. This parameter is required
          if you use the short form ID for a resource instead of the full ARN.

        - **targetId** *(string) --*

          The ID of the target. You can specify the short form ID for a resource or the full
          Amazon Resource Name (ARN).

    - **availabilityZone** *(string) --*

      The availability zone of the task.

    - **clusterArn** *(string) --*

      The ARN of the cluster that hosts the task.

    - **connectivity** *(string) --*

      The connectivity status of a task.

    - **connectivityAt** *(datetime) --*

      The Unix timestamp for when the task last went into ``CONNECTED`` status.

    - **containerInstanceArn** *(string) --*

      The ARN of the container instances that host the task.

    - **containers** *(list) --*

      The containers associated with the task.

      - *(dict) --*

        A Docker container that is part of a task.

        - **containerArn** *(string) --*

          The Amazon Resource Name (ARN) of the container.

        - **taskArn** *(string) --*

          The ARN of the task.

        - **name** *(string) --*

          The name of the container.

        - **image** *(string) --*

          The image used for the container.

        - **imageDigest** *(string) --*

          The container image manifest digest.

          .. note::

            The ``imageDigest`` is only returned if the container is using an image hosted in
            Amazon ECR, otherwise it is omitted.

        - **runtimeId** *(string) --*

          The ID of the Docker container.

        - **lastStatus** *(string) --*

          The last known status of the container.

        - **exitCode** *(integer) --*

          The exit code returned from the container.

        - **reason** *(string) --*

          A short (255 max characters) human-readable string to provide additional details about
          a running or stopped container.

        - **networkBindings** *(list) --*

          The network bindings associated with the container.

          - *(dict) --*

            Details on the network bindings between a container and its host container instance.
            After a task reaches the ``RUNNING`` status, manual and automatic host and container
            port assignments are visible in the ``networkBindings`` section of  DescribeTasks API
            responses.

            - **bindIP** *(string) --*

              The IP address that the container is bound to on the container instance.

            - **containerPort** *(integer) --*

              The port number on the container that is used with the network binding.

            - **hostPort** *(integer) --*

              The port number on the host that is used with the network binding.

            - **protocol** *(string) --*

              The protocol used for the network binding.

        - **networkInterfaces** *(list) --*

          The network interfaces associated with the container.

          - *(dict) --*

            An object representing the elastic network interface for tasks that use the
            ``awsvpc`` network mode.

            - **attachmentId** *(string) --*

              The attachment ID for the network interface.

            - **privateIpv4Address** *(string) --*

              The private IPv4 address for the network interface.

            - **ipv6Address** *(string) --*

              The private IPv6 address for the network interface.

        - **healthStatus** *(string) --*

          The health status of the container. If health checks are not configured for this
          container in its task definition, then it reports the health status as ``UNKNOWN`` .

        - **cpu** *(string) --*

          The number of CPU units set for the container. The value will be ``0`` if no value was
          specified in the container definition when the task definition was registered.

        - **memory** *(string) --*

          The hard limit (in MiB) of memory set for the container.

        - **memoryReservation** *(string) --*

          The soft limit (in MiB) of memory set for the container.

        - **gpuIds** *(list) --*

          The IDs of each GPU assigned to the container.

          - *(string) --*

    - **cpu** *(string) --*

      The number of CPU units used by the task as expressed in a task definition. It can be
      expressed as an integer using CPU units, for example ``1024`` . It can also be expressed as
      a string using vCPUs, for example ``1 vCPU`` or ``1 vcpu`` . String values are converted to
      an integer indicating the CPU units when the task definition is registered.

      If you are using the EC2 launch type, this field is optional. Supported values are between
      ``128`` CPU units (``0.125`` vCPUs) and ``10240`` CPU units (``10`` vCPUs).

      If you are using the Fargate launch type, this field is required and you must use one of
      the following values, which determines your range of supported values for the ``memory``
      parameter:

      * 256 (.25 vCPU) - Available ``memory`` values: 512 (0.5 GB), 1024 (1 GB), 2048 (2 GB)

      * 512 (.5 vCPU) - Available ``memory`` values: 1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096
      (4 GB)

      * 1024 (1 vCPU) - Available ``memory`` values: 2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120
      (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB)

      * 2048 (2 vCPU) - Available ``memory`` values: Between 4096 (4 GB) and 16384 (16 GB) in
      increments of 1024 (1 GB)

      * 4096 (4 vCPU) - Available ``memory`` values: Between 8192 (8 GB) and 30720 (30 GB) in
      increments of 1024 (1 GB)

    - **createdAt** *(datetime) --*

      The Unix timestamp for when the task was created (the task entered the ``PENDING`` state).

    - **desiredStatus** *(string) --*

      The desired status of the task. For more information, see `Task Lifecycle
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-lifecycle.html>`__ .

    - **executionStoppedAt** *(datetime) --*

      The Unix timestamp for when the task execution stopped.

    - **group** *(string) --*

      The name of the task group associated with the task.

    - **healthStatus** *(string) --*

      The health status for the task, which is determined by the health of the essential
      containers in the task. If all essential containers in the task are reporting as
      ``HEALTHY`` , then the task status also reports as ``HEALTHY`` . If any essential
      containers in the task are reporting as ``UNHEALTHY`` or ``UNKNOWN`` , then the task status
      also reports as ``UNHEALTHY`` or ``UNKNOWN`` , accordingly.

      .. note::

        The Amazon ECS container agent does not monitor or report on Docker health checks that
        are embedded in a container image (such as those specified in a parent image or from the
        image's Dockerfile) and not specified in the container definition. Health check
        parameters that are specified in a container definition override any Docker health checks
        that exist in the container image.

    - **inferenceAccelerators** *(list) --*

      The Elastic Inference accelerator associated with the task.

      - *(dict) --*

        Details on a Elastic Inference accelerator. For more information, see `Working with
        Amazon Elastic Inference on Amazon ECS
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in the
        *Amazon Elastic Container Service Developer Guide* .

        - **deviceName** *(string) --*

          The Elastic Inference accelerator device name. The ``deviceName`` must also be
          referenced in a container definition as a  ResourceRequirement .

        - **deviceType** *(string) --*

          The Elastic Inference accelerator type to use.

    - **lastStatus** *(string) --*

      The last known status of the task. For more information, see `Task Lifecycle
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-lifecycle.html>`__ .

    - **launchType** *(string) --*

      The launch type on which your task is running. For more information, see `Amazon ECS Launch
      Types <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html>`__ in
      the *Amazon Elastic Container Service Developer Guide* .

    - **memory** *(string) --*

      The amount of memory (in MiB) used by the task as expressed in a task definition. It can be
      expressed as an integer using MiB, for example ``1024`` . It can also be expressed as a
      string using GB, for example ``1GB`` or ``1 GB`` . String values are converted to an
      integer indicating the MiB when the task definition is registered.

      If you are using the EC2 launch type, this field is optional.

      If you are using the Fargate launch type, this field is required and you must use one of
      the following values, which determines your range of supported values for the ``cpu``
      parameter:

      * 512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) - Available ``cpu`` values: 256 (.25 vCPU)

      * 1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available ``cpu`` values: 512 (.5
      vCPU)

      * 2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB)
      - Available ``cpu`` values: 1024 (1 vCPU)

      * Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB) - Available ``cpu``
      values: 2048 (2 vCPU)

      * Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB) - Available ``cpu``
      values: 4096 (4 vCPU)

    - **overrides** *(dict) --*

      One or more container overrides.

      - **containerOverrides** *(list) --*

        One or more container overrides sent to a task.

        - *(dict) --*

          The overrides that should be sent to a container. An empty container override can be
          passed in. An example of an empty container override would be ``{"containerOverrides":
          [ ] }`` . If a non-empty container override is specified, the ``name`` parameter must
          be included.

          - **name** *(string) --*

            The name of the container that receives the override. This parameter is required if
            any override is specified.

          - **command** *(list) --*

            The command to send to the container that overrides the default command from the
            Docker image or the task definition. You must also specify a container name.

            - *(string) --*

          - **environment** *(list) --*

            The environment variables to send to the container. You can add new environment
            variables, which are added to the container at launch, or you can override the
            existing environment variables from the Docker image or the task definition. You must
            also specify a container name.

            - *(dict) --*

              A key-value pair object.

              - **name** *(string) --*

                The name of the key-value pair. For environment variables, this is the name of
                the environment variable.

              - **value** *(string) --*

                The value of the key-value pair. For environment variables, this is the value of
                the environment variable.

          - **cpu** *(integer) --*

            The number of ``cpu`` units reserved for the container, instead of the default value
            from the task definition. You must also specify a container name.

          - **memory** *(integer) --*

            The hard limit (in MiB) of memory to present to the container, instead of the default
            value from the task definition. If your container attempts to exceed the memory
            specified here, the container is killed. You must also specify a container name.

          - **memoryReservation** *(integer) --*

            The soft limit (in MiB) of memory to reserve for the container, instead of the
            default value from the task definition. You must also specify a container name.

          - **resourceRequirements** *(list) --*

            The type and amount of a resource to assign to a container, instead of the default
            value from the task definition. The only supported resource is a GPU.

            - *(dict) --*

              The type and amount of a resource to assign to a container. The supported resource
              types are GPUs and Elastic Inference accelerators. For more information, see
              `Working with GPUs on Amazon ECS
              <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-gpu.html>`__ or
              `Working with Amazon Elastic Inference on Amazon ECS
              <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in
              the *Amazon Elastic Container Service Developer Guide*

              - **value** *(string) --*

                The value for the specified resource type.

                If the ``GPU`` type is used, the value is the number of physical ``GPUs`` the
                Amazon ECS container agent will reserve for the container. The number of GPUs
                reserved for all containers in a task should not exceed the number of available
                GPUs on the container instance the task is launched on.

                If the ``InferenceAccelerator`` type is used, the ``value`` should match the
                ``deviceName`` for an  InferenceAccelerator specified in a task definition.

              - **type** *(string) --*

                The type of resource to assign to a container. The supported values are ``GPU``
                or ``InferenceAccelerator`` .

      - **cpu** *(string) --*

        The cpu override for the task.

      - **inferenceAcceleratorOverrides** *(list) --*

        The Elastic Inference accelerator override for the task.

        - *(dict) --*

          Details on an Elastic Inference accelerator task override. This parameter is used to
          override the Elastic Inference accelerator specified in the task definition. For more
          information, see `Working with Amazon Elastic Inference on Amazon ECS
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in the
          *Amazon Elastic Container Service Developer Guide* .

          - **deviceName** *(string) --*

            The Elastic Inference accelerator device name to override for the task. This
            parameter must match a ``deviceName`` specified in the task definition.

          - **deviceType** *(string) --*

            The Elastic Inference accelerator type to use.

      - **executionRoleArn** *(string) --*

        The Amazon Resource Name (ARN) of the task execution role that the Amazon ECS container
        agent and the Docker daemon can assume.

      - **memory** *(string) --*

        The memory override for the task.

      - **taskRoleArn** *(string) --*

        The Amazon Resource Name (ARN) of the IAM role that containers in this task can assume.
        All containers in this task are granted the permissions that are specified in this role.

    - **platformVersion** *(string) --*

      The platform version on which your task is running. A platform version is only specified
      for tasks using the Fargate launch type. If one is not specified, the ``LATEST`` platform
      version is used by default. For more information, see `AWS Fargate Platform Versions
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html>`__ in
      the *Amazon Elastic Container Service Developer Guide* .

    - **pullStartedAt** *(datetime) --*

      The Unix timestamp for when the container image pull began.

    - **pullStoppedAt** *(datetime) --*

      The Unix timestamp for when the container image pull completed.

    - **startedAt** *(datetime) --*

      The Unix timestamp for when the task started (the task transitioned from the ``PENDING``
      state to the ``RUNNING`` state).

    - **startedBy** *(string) --*

      The tag specified when a task is started. If the task is started by an Amazon ECS service,
      then the ``startedBy`` parameter contains the deployment ID of the service that starts it.

    - **stopCode** *(string) --*

      The stop code indicating why a task was stopped. The ``stoppedReason`` may contain
      additional details.

    - **stoppedAt** *(datetime) --*

      The Unix timestamp for when the task was stopped (the task transitioned from the
      ``RUNNING`` state to the ``STOPPED`` state).

    - **stoppedReason** *(string) --*

      The reason that the task was stopped.

    - **stoppingAt** *(datetime) --*

      The Unix timestamp for when the task stops (transitions from the ``RUNNING`` state to
      ``STOPPED`` ).

    - **tags** *(list) --*

      The metadata that you apply to the task to help you categorize and organize them. Each tag
      consists of a key and an optional value, both of which you define.

      The following basic restrictions apply to tags:

      * Maximum number of tags per resource - 50

      * For each resource, each tag key must be unique, and each tag key can have only one value.

      * Maximum key length - 128 Unicode characters in UTF-8

      * Maximum value length - 256 Unicode characters in UTF-8

      * If your tagging schema is used across multiple services and resources, remember that
      other services may have restrictions on allowed characters. Generally allowed characters
      are: letters, numbers, and spaces representable in UTF-8, and the following characters: + -
      = . _ : / @.

      * Tag keys and values are case-sensitive.

      * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
      prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
      tag keys or values with this prefix. Tags with this prefix do not count against your tags
      per resource limit.

      - *(dict) --*

        The metadata that you apply to a resource to help you categorize and organize them. Each
        tag consists of a key and an optional value, both of which you define.

        The following basic restrictions apply to tags:

        * Maximum number of tags per resource - 50

        * For each resource, each tag key must be unique, and each tag key can have only one
        value.

        * Maximum key length - 128 Unicode characters in UTF-8

        * Maximum value length - 256 Unicode characters in UTF-8

        * If your tagging schema is used across multiple services and resources, remember that
        other services may have restrictions on allowed characters. Generally allowed characters
        are: letters, numbers, and spaces representable in UTF-8, and the following characters: +
        - = . _ : / @.

        * Tag keys and values are case-sensitive.

        * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
        prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
        tag keys or values with this prefix. Tags with this prefix do not count against your tags
        per resource limit.

        - **key** *(string) --*

          One part of a key-value pair that make up a tag. A ``key`` is a general label that acts
          like a category for more specific tag values.

        - **value** *(string) --*

          The optional part of a key-value pair that make up a tag. A ``value`` acts as a
          descriptor within a tag category (key).

    - **taskArn** *(string) --*

      The Amazon Resource Name (ARN) of the task.

    - **taskDefinitionArn** *(string) --*

      The ARN of the task definition that creates the task.

    - **version** *(integer) --*

      The version counter for the task. Every time a task experiences a change that triggers a
      CloudWatch event, the version counter is incremented. If you are replicating your Amazon
      ECS task state with CloudWatch Events, you can compare the version of a task reported by
      the Amazon ECS API actions with the version reported in CloudWatch Events for the task
      (inside the ``detail`` object) to verify that the version in your event stream is current.
    """


_ClientStopTaskResponseTypeDef = TypedDict(
    "_ClientStopTaskResponseTypeDef",
    {"task": ClientStopTaskResponsetaskTypeDef},
    total=False,
)


class ClientStopTaskResponseTypeDef(_ClientStopTaskResponseTypeDef):
    """
    Type definition for `ClientStopTask` `Response`

    - **task** *(dict) --*

      The task that was stopped.

      - **attachments** *(list) --*

        The Elastic Network Adapter associated with the task if the task uses the ``awsvpc``
        network mode.

        - *(dict) --*

          An object representing a container instance or task attachment.

          - **id** *(string) --*

            The unique identifier for the attachment.

          - **type** *(string) --*

            The type of the attachment, such as ``ElasticNetworkInterface`` .

          - **status** *(string) --*

            The status of the attachment. Valid values are ``PRECREATED`` , ``CREATED`` ,
            ``ATTACHING`` , ``ATTACHED`` , ``DETACHING`` , ``DETACHED`` , and ``DELETED`` .

          - **details** *(list) --*

            Details of the attachment. For elastic network interfaces, this includes the network
            interface ID, the MAC address, the subnet ID, and the private IPv4 address.

            - *(dict) --*

              A key-value pair object.

              - **name** *(string) --*

                The name of the key-value pair. For environment variables, this is the name of the
                environment variable.

              - **value** *(string) --*

                The value of the key-value pair. For environment variables, this is the value of
                the environment variable.

      - **attributes** *(list) --*

        The attributes of the task

        - *(dict) --*

          An attribute is a name-value pair associated with an Amazon ECS object. Attributes enable
          you to extend the Amazon ECS data model by adding custom metadata to your resources. For
          more information, see `Attributes
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html#attributes>`__
          in the *Amazon Elastic Container Service Developer Guide* .

          - **name** *(string) --*

            The name of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
            hyphens, underscores, and periods are allowed.

          - **value** *(string) --*

            The value of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
            hyphens, underscores, periods, at signs (@), forward slashes, colons, and spaces are
            allowed.

          - **targetType** *(string) --*

            The type of the target with which to attach the attribute. This parameter is required
            if you use the short form ID for a resource instead of the full ARN.

          - **targetId** *(string) --*

            The ID of the target. You can specify the short form ID for a resource or the full
            Amazon Resource Name (ARN).

      - **availabilityZone** *(string) --*

        The availability zone of the task.

      - **clusterArn** *(string) --*

        The ARN of the cluster that hosts the task.

      - **connectivity** *(string) --*

        The connectivity status of a task.

      - **connectivityAt** *(datetime) --*

        The Unix timestamp for when the task last went into ``CONNECTED`` status.

      - **containerInstanceArn** *(string) --*

        The ARN of the container instances that host the task.

      - **containers** *(list) --*

        The containers associated with the task.

        - *(dict) --*

          A Docker container that is part of a task.

          - **containerArn** *(string) --*

            The Amazon Resource Name (ARN) of the container.

          - **taskArn** *(string) --*

            The ARN of the task.

          - **name** *(string) --*

            The name of the container.

          - **image** *(string) --*

            The image used for the container.

          - **imageDigest** *(string) --*

            The container image manifest digest.

            .. note::

              The ``imageDigest`` is only returned if the container is using an image hosted in
              Amazon ECR, otherwise it is omitted.

          - **runtimeId** *(string) --*

            The ID of the Docker container.

          - **lastStatus** *(string) --*

            The last known status of the container.

          - **exitCode** *(integer) --*

            The exit code returned from the container.

          - **reason** *(string) --*

            A short (255 max characters) human-readable string to provide additional details about
            a running or stopped container.

          - **networkBindings** *(list) --*

            The network bindings associated with the container.

            - *(dict) --*

              Details on the network bindings between a container and its host container instance.
              After a task reaches the ``RUNNING`` status, manual and automatic host and container
              port assignments are visible in the ``networkBindings`` section of  DescribeTasks API
              responses.

              - **bindIP** *(string) --*

                The IP address that the container is bound to on the container instance.

              - **containerPort** *(integer) --*

                The port number on the container that is used with the network binding.

              - **hostPort** *(integer) --*

                The port number on the host that is used with the network binding.

              - **protocol** *(string) --*

                The protocol used for the network binding.

          - **networkInterfaces** *(list) --*

            The network interfaces associated with the container.

            - *(dict) --*

              An object representing the elastic network interface for tasks that use the
              ``awsvpc`` network mode.

              - **attachmentId** *(string) --*

                The attachment ID for the network interface.

              - **privateIpv4Address** *(string) --*

                The private IPv4 address for the network interface.

              - **ipv6Address** *(string) --*

                The private IPv6 address for the network interface.

          - **healthStatus** *(string) --*

            The health status of the container. If health checks are not configured for this
            container in its task definition, then it reports the health status as ``UNKNOWN`` .

          - **cpu** *(string) --*

            The number of CPU units set for the container. The value will be ``0`` if no value was
            specified in the container definition when the task definition was registered.

          - **memory** *(string) --*

            The hard limit (in MiB) of memory set for the container.

          - **memoryReservation** *(string) --*

            The soft limit (in MiB) of memory set for the container.

          - **gpuIds** *(list) --*

            The IDs of each GPU assigned to the container.

            - *(string) --*

      - **cpu** *(string) --*

        The number of CPU units used by the task as expressed in a task definition. It can be
        expressed as an integer using CPU units, for example ``1024`` . It can also be expressed as
        a string using vCPUs, for example ``1 vCPU`` or ``1 vcpu`` . String values are converted to
        an integer indicating the CPU units when the task definition is registered.

        If you are using the EC2 launch type, this field is optional. Supported values are between
        ``128`` CPU units (``0.125`` vCPUs) and ``10240`` CPU units (``10`` vCPUs).

        If you are using the Fargate launch type, this field is required and you must use one of
        the following values, which determines your range of supported values for the ``memory``
        parameter:

        * 256 (.25 vCPU) - Available ``memory`` values: 512 (0.5 GB), 1024 (1 GB), 2048 (2 GB)

        * 512 (.5 vCPU) - Available ``memory`` values: 1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096
        (4 GB)

        * 1024 (1 vCPU) - Available ``memory`` values: 2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120
        (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB)

        * 2048 (2 vCPU) - Available ``memory`` values: Between 4096 (4 GB) and 16384 (16 GB) in
        increments of 1024 (1 GB)

        * 4096 (4 vCPU) - Available ``memory`` values: Between 8192 (8 GB) and 30720 (30 GB) in
        increments of 1024 (1 GB)

      - **createdAt** *(datetime) --*

        The Unix timestamp for when the task was created (the task entered the ``PENDING`` state).

      - **desiredStatus** *(string) --*

        The desired status of the task. For more information, see `Task Lifecycle
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-lifecycle.html>`__ .

      - **executionStoppedAt** *(datetime) --*

        The Unix timestamp for when the task execution stopped.

      - **group** *(string) --*

        The name of the task group associated with the task.

      - **healthStatus** *(string) --*

        The health status for the task, which is determined by the health of the essential
        containers in the task. If all essential containers in the task are reporting as
        ``HEALTHY`` , then the task status also reports as ``HEALTHY`` . If any essential
        containers in the task are reporting as ``UNHEALTHY`` or ``UNKNOWN`` , then the task status
        also reports as ``UNHEALTHY`` or ``UNKNOWN`` , accordingly.

        .. note::

          The Amazon ECS container agent does not monitor or report on Docker health checks that
          are embedded in a container image (such as those specified in a parent image or from the
          image's Dockerfile) and not specified in the container definition. Health check
          parameters that are specified in a container definition override any Docker health checks
          that exist in the container image.

      - **inferenceAccelerators** *(list) --*

        The Elastic Inference accelerator associated with the task.

        - *(dict) --*

          Details on a Elastic Inference accelerator. For more information, see `Working with
          Amazon Elastic Inference on Amazon ECS
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in the
          *Amazon Elastic Container Service Developer Guide* .

          - **deviceName** *(string) --*

            The Elastic Inference accelerator device name. The ``deviceName`` must also be
            referenced in a container definition as a  ResourceRequirement .

          - **deviceType** *(string) --*

            The Elastic Inference accelerator type to use.

      - **lastStatus** *(string) --*

        The last known status of the task. For more information, see `Task Lifecycle
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-lifecycle.html>`__ .

      - **launchType** *(string) --*

        The launch type on which your task is running. For more information, see `Amazon ECS Launch
        Types <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html>`__ in
        the *Amazon Elastic Container Service Developer Guide* .

      - **memory** *(string) --*

        The amount of memory (in MiB) used by the task as expressed in a task definition. It can be
        expressed as an integer using MiB, for example ``1024`` . It can also be expressed as a
        string using GB, for example ``1GB`` or ``1 GB`` . String values are converted to an
        integer indicating the MiB when the task definition is registered.

        If you are using the EC2 launch type, this field is optional.

        If you are using the Fargate launch type, this field is required and you must use one of
        the following values, which determines your range of supported values for the ``cpu``
        parameter:

        * 512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) - Available ``cpu`` values: 256 (.25 vCPU)

        * 1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available ``cpu`` values: 512 (.5
        vCPU)

        * 2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB)
        - Available ``cpu`` values: 1024 (1 vCPU)

        * Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB) - Available ``cpu``
        values: 2048 (2 vCPU)

        * Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB) - Available ``cpu``
        values: 4096 (4 vCPU)

      - **overrides** *(dict) --*

        One or more container overrides.

        - **containerOverrides** *(list) --*

          One or more container overrides sent to a task.

          - *(dict) --*

            The overrides that should be sent to a container. An empty container override can be
            passed in. An example of an empty container override would be ``{"containerOverrides":
            [ ] }`` . If a non-empty container override is specified, the ``name`` parameter must
            be included.

            - **name** *(string) --*

              The name of the container that receives the override. This parameter is required if
              any override is specified.

            - **command** *(list) --*

              The command to send to the container that overrides the default command from the
              Docker image or the task definition. You must also specify a container name.

              - *(string) --*

            - **environment** *(list) --*

              The environment variables to send to the container. You can add new environment
              variables, which are added to the container at launch, or you can override the
              existing environment variables from the Docker image or the task definition. You must
              also specify a container name.

              - *(dict) --*

                A key-value pair object.

                - **name** *(string) --*

                  The name of the key-value pair. For environment variables, this is the name of
                  the environment variable.

                - **value** *(string) --*

                  The value of the key-value pair. For environment variables, this is the value of
                  the environment variable.

            - **cpu** *(integer) --*

              The number of ``cpu`` units reserved for the container, instead of the default value
              from the task definition. You must also specify a container name.

            - **memory** *(integer) --*

              The hard limit (in MiB) of memory to present to the container, instead of the default
              value from the task definition. If your container attempts to exceed the memory
              specified here, the container is killed. You must also specify a container name.

            - **memoryReservation** *(integer) --*

              The soft limit (in MiB) of memory to reserve for the container, instead of the
              default value from the task definition. You must also specify a container name.

            - **resourceRequirements** *(list) --*

              The type and amount of a resource to assign to a container, instead of the default
              value from the task definition. The only supported resource is a GPU.

              - *(dict) --*

                The type and amount of a resource to assign to a container. The supported resource
                types are GPUs and Elastic Inference accelerators. For more information, see
                `Working with GPUs on Amazon ECS
                <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-gpu.html>`__ or
                `Working with Amazon Elastic Inference on Amazon ECS
                <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in
                the *Amazon Elastic Container Service Developer Guide*

                - **value** *(string) --*

                  The value for the specified resource type.

                  If the ``GPU`` type is used, the value is the number of physical ``GPUs`` the
                  Amazon ECS container agent will reserve for the container. The number of GPUs
                  reserved for all containers in a task should not exceed the number of available
                  GPUs on the container instance the task is launched on.

                  If the ``InferenceAccelerator`` type is used, the ``value`` should match the
                  ``deviceName`` for an  InferenceAccelerator specified in a task definition.

                - **type** *(string) --*

                  The type of resource to assign to a container. The supported values are ``GPU``
                  or ``InferenceAccelerator`` .

        - **cpu** *(string) --*

          The cpu override for the task.

        - **inferenceAcceleratorOverrides** *(list) --*

          The Elastic Inference accelerator override for the task.

          - *(dict) --*

            Details on an Elastic Inference accelerator task override. This parameter is used to
            override the Elastic Inference accelerator specified in the task definition. For more
            information, see `Working with Amazon Elastic Inference on Amazon ECS
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html>`__ in the
            *Amazon Elastic Container Service Developer Guide* .

            - **deviceName** *(string) --*

              The Elastic Inference accelerator device name to override for the task. This
              parameter must match a ``deviceName`` specified in the task definition.

            - **deviceType** *(string) --*

              The Elastic Inference accelerator type to use.

        - **executionRoleArn** *(string) --*

          The Amazon Resource Name (ARN) of the task execution role that the Amazon ECS container
          agent and the Docker daemon can assume.

        - **memory** *(string) --*

          The memory override for the task.

        - **taskRoleArn** *(string) --*

          The Amazon Resource Name (ARN) of the IAM role that containers in this task can assume.
          All containers in this task are granted the permissions that are specified in this role.

      - **platformVersion** *(string) --*

        The platform version on which your task is running. A platform version is only specified
        for tasks using the Fargate launch type. If one is not specified, the ``LATEST`` platform
        version is used by default. For more information, see `AWS Fargate Platform Versions
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html>`__ in
        the *Amazon Elastic Container Service Developer Guide* .

      - **pullStartedAt** *(datetime) --*

        The Unix timestamp for when the container image pull began.

      - **pullStoppedAt** *(datetime) --*

        The Unix timestamp for when the container image pull completed.

      - **startedAt** *(datetime) --*

        The Unix timestamp for when the task started (the task transitioned from the ``PENDING``
        state to the ``RUNNING`` state).

      - **startedBy** *(string) --*

        The tag specified when a task is started. If the task is started by an Amazon ECS service,
        then the ``startedBy`` parameter contains the deployment ID of the service that starts it.

      - **stopCode** *(string) --*

        The stop code indicating why a task was stopped. The ``stoppedReason`` may contain
        additional details.

      - **stoppedAt** *(datetime) --*

        The Unix timestamp for when the task was stopped (the task transitioned from the
        ``RUNNING`` state to the ``STOPPED`` state).

      - **stoppedReason** *(string) --*

        The reason that the task was stopped.

      - **stoppingAt** *(datetime) --*

        The Unix timestamp for when the task stops (transitions from the ``RUNNING`` state to
        ``STOPPED`` ).

      - **tags** *(list) --*

        The metadata that you apply to the task to help you categorize and organize them. Each tag
        consists of a key and an optional value, both of which you define.

        The following basic restrictions apply to tags:

        * Maximum number of tags per resource - 50

        * For each resource, each tag key must be unique, and each tag key can have only one value.

        * Maximum key length - 128 Unicode characters in UTF-8

        * Maximum value length - 256 Unicode characters in UTF-8

        * If your tagging schema is used across multiple services and resources, remember that
        other services may have restrictions on allowed characters. Generally allowed characters
        are: letters, numbers, and spaces representable in UTF-8, and the following characters: + -
        = . _ : / @.

        * Tag keys and values are case-sensitive.

        * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
        prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
        tag keys or values with this prefix. Tags with this prefix do not count against your tags
        per resource limit.

        - *(dict) --*

          The metadata that you apply to a resource to help you categorize and organize them. Each
          tag consists of a key and an optional value, both of which you define.

          The following basic restrictions apply to tags:

          * Maximum number of tags per resource - 50

          * For each resource, each tag key must be unique, and each tag key can have only one
          value.

          * Maximum key length - 128 Unicode characters in UTF-8

          * Maximum value length - 256 Unicode characters in UTF-8

          * If your tagging schema is used across multiple services and resources, remember that
          other services may have restrictions on allowed characters. Generally allowed characters
          are: letters, numbers, and spaces representable in UTF-8, and the following characters: +
          - = . _ : / @.

          * Tag keys and values are case-sensitive.

          * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
          prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
          tag keys or values with this prefix. Tags with this prefix do not count against your tags
          per resource limit.

          - **key** *(string) --*

            One part of a key-value pair that make up a tag. A ``key`` is a general label that acts
            like a category for more specific tag values.

          - **value** *(string) --*

            The optional part of a key-value pair that make up a tag. A ``value`` acts as a
            descriptor within a tag category (key).

      - **taskArn** *(string) --*

        The Amazon Resource Name (ARN) of the task.

      - **taskDefinitionArn** *(string) --*

        The ARN of the task definition that creates the task.

      - **version** *(integer) --*

        The version counter for the task. Every time a task experiences a change that triggers a
        CloudWatch event, the version counter is incremented. If you are replicating your Amazon
        ECS task state with CloudWatch Events, you can compare the version of a task reported by
        the Amazon ECS API actions with the version reported in CloudWatch Events for the task
        (inside the ``detail`` object) to verify that the version in your event stream is current.
    """


_ClientSubmitAttachmentStateChangesResponseTypeDef = TypedDict(
    "_ClientSubmitAttachmentStateChangesResponseTypeDef",
    {"acknowledgment": str},
    total=False,
)


class ClientSubmitAttachmentStateChangesResponseTypeDef(
    _ClientSubmitAttachmentStateChangesResponseTypeDef
):
    """
    Type definition for `ClientSubmitAttachmentStateChanges` `Response`

    - **acknowledgment** *(string) --*

      Acknowledgement of the state change.
    """


_ClientSubmitAttachmentStateChangesattachmentsTypeDef = TypedDict(
    "_ClientSubmitAttachmentStateChangesattachmentsTypeDef",
    {"attachmentArn": str, "status": str},
)


class ClientSubmitAttachmentStateChangesattachmentsTypeDef(
    _ClientSubmitAttachmentStateChangesattachmentsTypeDef
):
    """
    Type definition for `ClientSubmitAttachmentStateChanges` `attachments`

    An object representing a change in state for a task attachment.

    - **attachmentArn** *(string) --* **[REQUIRED]**

      The Amazon Resource Name (ARN) of the attachment.

    - **status** *(string) --* **[REQUIRED]**

      The status of the attachment.
    """


_ClientSubmitContainerStateChangeResponseTypeDef = TypedDict(
    "_ClientSubmitContainerStateChangeResponseTypeDef",
    {"acknowledgment": str},
    total=False,
)


class ClientSubmitContainerStateChangeResponseTypeDef(
    _ClientSubmitContainerStateChangeResponseTypeDef
):
    """
    Type definition for `ClientSubmitContainerStateChange` `Response`

    - **acknowledgment** *(string) --*

      Acknowledgement of the state change.
    """


_ClientSubmitContainerStateChangenetworkBindingsTypeDef = TypedDict(
    "_ClientSubmitContainerStateChangenetworkBindingsTypeDef",
    {"bindIP": str, "containerPort": int, "hostPort": int, "protocol": str},
    total=False,
)


class ClientSubmitContainerStateChangenetworkBindingsTypeDef(
    _ClientSubmitContainerStateChangenetworkBindingsTypeDef
):
    """
    Type definition for `ClientSubmitContainerStateChange` `networkBindings`

    Details on the network bindings between a container and its host container instance. After a
    task reaches the ``RUNNING`` status, manual and automatic host and container port assignments
    are visible in the ``networkBindings`` section of  DescribeTasks API responses.

    - **bindIP** *(string) --*

      The IP address that the container is bound to on the container instance.

    - **containerPort** *(integer) --*

      The port number on the container that is used with the network binding.

    - **hostPort** *(integer) --*

      The port number on the host that is used with the network binding.

    - **protocol** *(string) --*

      The protocol used for the network binding.
    """


_ClientSubmitTaskStateChangeResponseTypeDef = TypedDict(
    "_ClientSubmitTaskStateChangeResponseTypeDef", {"acknowledgment": str}, total=False
)


class ClientSubmitTaskStateChangeResponseTypeDef(
    _ClientSubmitTaskStateChangeResponseTypeDef
):
    """
    Type definition for `ClientSubmitTaskStateChange` `Response`

    - **acknowledgment** *(string) --*

      Acknowledgement of the state change.
    """


_ClientSubmitTaskStateChangeattachmentsTypeDef = TypedDict(
    "_ClientSubmitTaskStateChangeattachmentsTypeDef",
    {"attachmentArn": str, "status": str},
)


class ClientSubmitTaskStateChangeattachmentsTypeDef(
    _ClientSubmitTaskStateChangeattachmentsTypeDef
):
    """
    Type definition for `ClientSubmitTaskStateChange` `attachments`

    An object representing a change in state for a task attachment.

    - **attachmentArn** *(string) --* **[REQUIRED]**

      The Amazon Resource Name (ARN) of the attachment.

    - **status** *(string) --* **[REQUIRED]**

      The status of the attachment.
    """


_ClientSubmitTaskStateChangecontainersnetworkBindingsTypeDef = TypedDict(
    "_ClientSubmitTaskStateChangecontainersnetworkBindingsTypeDef",
    {"bindIP": str, "containerPort": int, "hostPort": int, "protocol": str},
    total=False,
)


class ClientSubmitTaskStateChangecontainersnetworkBindingsTypeDef(
    _ClientSubmitTaskStateChangecontainersnetworkBindingsTypeDef
):
    """
    Type definition for `ClientSubmitTaskStateChangecontainers` `networkBindings`

    Details on the network bindings between a container and its host container instance. After
    a task reaches the ``RUNNING`` status, manual and automatic host and container port
    assignments are visible in the ``networkBindings`` section of  DescribeTasks API responses.

    - **bindIP** *(string) --*

      The IP address that the container is bound to on the container instance.

    - **containerPort** *(integer) --*

      The port number on the container that is used with the network binding.

    - **hostPort** *(integer) --*

      The port number on the host that is used with the network binding.

    - **protocol** *(string) --*

      The protocol used for the network binding.
    """


_ClientSubmitTaskStateChangecontainersTypeDef = TypedDict(
    "_ClientSubmitTaskStateChangecontainersTypeDef",
    {
        "containerName": str,
        "imageDigest": str,
        "runtimeId": str,
        "exitCode": int,
        "networkBindings": List[
            ClientSubmitTaskStateChangecontainersnetworkBindingsTypeDef
        ],
        "reason": str,
        "status": str,
    },
    total=False,
)


class ClientSubmitTaskStateChangecontainersTypeDef(
    _ClientSubmitTaskStateChangecontainersTypeDef
):
    """
    Type definition for `ClientSubmitTaskStateChange` `containers`

    An object representing a change in state for a container.

    - **containerName** *(string) --*

      The name of the container.

    - **imageDigest** *(string) --*

      The container image SHA 256 digest.

    - **runtimeId** *(string) --*

      The ID of the Docker container.

    - **exitCode** *(integer) --*

      The exit code for the container, if the state change is a result of the container exiting.

    - **networkBindings** *(list) --*

      Any network bindings associated with the container.

      - *(dict) --*

        Details on the network bindings between a container and its host container instance. After
        a task reaches the ``RUNNING`` status, manual and automatic host and container port
        assignments are visible in the ``networkBindings`` section of  DescribeTasks API responses.

        - **bindIP** *(string) --*

          The IP address that the container is bound to on the container instance.

        - **containerPort** *(integer) --*

          The port number on the container that is used with the network binding.

        - **hostPort** *(integer) --*

          The port number on the host that is used with the network binding.

        - **protocol** *(string) --*

          The protocol used for the network binding.

    - **reason** *(string) --*

      The reason for the state change.

    - **status** *(string) --*

      The status of the container.
    """


_ClientTagResourcetagsTypeDef = TypedDict(
    "_ClientTagResourcetagsTypeDef", {"key": str, "value": str}, total=False
)


class ClientTagResourcetagsTypeDef(_ClientTagResourcetagsTypeDef):
    """
    Type definition for `ClientTagResource` `tags`

    The metadata that you apply to a resource to help you categorize and organize them. Each tag
    consists of a key and an optional value, both of which you define.

    The following basic restrictions apply to tags:

    * Maximum number of tags per resource - 50

    * For each resource, each tag key must be unique, and each tag key can have only one value.

    * Maximum key length - 128 Unicode characters in UTF-8

    * Maximum value length - 256 Unicode characters in UTF-8

    * If your tagging schema is used across multiple services and resources, remember that other
    services may have restrictions on allowed characters. Generally allowed characters are:
    letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ :
    / @.

    * Tag keys and values are case-sensitive.

    * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a prefix
    for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys or
    values with this prefix. Tags with this prefix do not count against your tags per resource
    limit.

    - **key** *(string) --*

      One part of a key-value pair that make up a tag. A ``key`` is a general label that acts like
      a category for more specific tag values.

    - **value** *(string) --*

      The optional part of a key-value pair that make up a tag. A ``value`` acts as a descriptor
      within a tag category (key).
    """


_ClientUpdateClusterSettingsResponseclustersettingsTypeDef = TypedDict(
    "_ClientUpdateClusterSettingsResponseclustersettingsTypeDef",
    {"name": str, "value": str},
    total=False,
)


class ClientUpdateClusterSettingsResponseclustersettingsTypeDef(
    _ClientUpdateClusterSettingsResponseclustersettingsTypeDef
):
    """
    Type definition for `ClientUpdateClusterSettingsResponsecluster` `settings`

    The settings to use when creating a cluster. This parameter is used to enable CloudWatch
    Container Insights for a cluster.

    - **name** *(string) --*

      The name of the cluster setting. The only supported value is ``containerInsights`` .

    - **value** *(string) --*

      The value to set for the cluster setting. The supported values are ``enabled`` and
      ``disabled`` . If ``enabled`` is specified, CloudWatch Container Insights will be
      enabled for the cluster, otherwise it will be disabled unless the ``containerInsights``
      account setting is enabled. If a cluster value is specified, it will override the
      ``containerInsights`` value set with  PutAccountSetting or  PutAccountSettingDefault .
    """


_ClientUpdateClusterSettingsResponseclusterstatisticsTypeDef = TypedDict(
    "_ClientUpdateClusterSettingsResponseclusterstatisticsTypeDef",
    {"name": str, "value": str},
    total=False,
)


class ClientUpdateClusterSettingsResponseclusterstatisticsTypeDef(
    _ClientUpdateClusterSettingsResponseclusterstatisticsTypeDef
):
    """
    Type definition for `ClientUpdateClusterSettingsResponsecluster` `statistics`

    A key-value pair object.

    - **name** *(string) --*

      The name of the key-value pair. For environment variables, this is the name of the
      environment variable.

    - **value** *(string) --*

      The value of the key-value pair. For environment variables, this is the value of the
      environment variable.
    """


_ClientUpdateClusterSettingsResponseclustertagsTypeDef = TypedDict(
    "_ClientUpdateClusterSettingsResponseclustertagsTypeDef",
    {"key": str, "value": str},
    total=False,
)


class ClientUpdateClusterSettingsResponseclustertagsTypeDef(
    _ClientUpdateClusterSettingsResponseclustertagsTypeDef
):
    """
    Type definition for `ClientUpdateClusterSettingsResponsecluster` `tags`

    The metadata that you apply to a resource to help you categorize and organize them. Each
    tag consists of a key and an optional value, both of which you define.

    The following basic restrictions apply to tags:

    * Maximum number of tags per resource - 50

    * For each resource, each tag key must be unique, and each tag key can have only one
    value.

    * Maximum key length - 128 Unicode characters in UTF-8

    * Maximum value length - 256 Unicode characters in UTF-8

    * If your tagging schema is used across multiple services and resources, remember that
    other services may have restrictions on allowed characters. Generally allowed characters
    are: letters, numbers, and spaces representable in UTF-8, and the following characters: +
    - = . _ : / @.

    * Tag keys and values are case-sensitive.

    * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
    prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
    tag keys or values with this prefix. Tags with this prefix do not count against your tags
    per resource limit.

    - **key** *(string) --*

      One part of a key-value pair that make up a tag. A ``key`` is a general label that acts
      like a category for more specific tag values.

    - **value** *(string) --*

      The optional part of a key-value pair that make up a tag. A ``value`` acts as a
      descriptor within a tag category (key).
    """


_ClientUpdateClusterSettingsResponseclusterTypeDef = TypedDict(
    "_ClientUpdateClusterSettingsResponseclusterTypeDef",
    {
        "clusterArn": str,
        "clusterName": str,
        "status": str,
        "registeredContainerInstancesCount": int,
        "runningTasksCount": int,
        "pendingTasksCount": int,
        "activeServicesCount": int,
        "statistics": List[ClientUpdateClusterSettingsResponseclusterstatisticsTypeDef],
        "tags": List[ClientUpdateClusterSettingsResponseclustertagsTypeDef],
        "settings": List[ClientUpdateClusterSettingsResponseclustersettingsTypeDef],
    },
    total=False,
)


class ClientUpdateClusterSettingsResponseclusterTypeDef(
    _ClientUpdateClusterSettingsResponseclusterTypeDef
):
    """
    Type definition for `ClientUpdateClusterSettingsResponse` `cluster`

    A regional grouping of one or more container instances on which you can run task requests.
    Each account receives a default cluster the first time you use the Amazon ECS service, but
    you may also create other clusters. Clusters may contain more than one instance type
    simultaneously.

    - **clusterArn** *(string) --*

      The Amazon Resource Name (ARN) that identifies the cluster. The ARN contains the
      ``arn:aws:ecs`` namespace, followed by the Region of the cluster, the AWS account ID of the
      cluster owner, the ``cluster`` namespace, and then the cluster name. For example,
      ``arn:aws:ecs:region:012345678910:cluster/test`` .

    - **clusterName** *(string) --*

      A user-generated string that you use to identify your cluster.

    - **status** *(string) --*

      The status of the cluster. The valid values are ``ACTIVE`` or ``INACTIVE`` . ``ACTIVE``
      indicates that you can register container instances with the cluster and the associated
      instances can accept tasks.

    - **registeredContainerInstancesCount** *(integer) --*

      The number of container instances registered into the cluster. This includes container
      instances in both ``ACTIVE`` and ``DRAINING`` status.

    - **runningTasksCount** *(integer) --*

      The number of tasks in the cluster that are in the ``RUNNING`` state.

    - **pendingTasksCount** *(integer) --*

      The number of tasks in the cluster that are in the ``PENDING`` state.

    - **activeServicesCount** *(integer) --*

      The number of services that are running on the cluster in an ``ACTIVE`` state. You can view
      these services with  ListServices .

    - **statistics** *(list) --*

      Additional information about your clusters that are separated by launch type, including:

      * runningEC2TasksCount

      * RunningFargateTasksCount

      * pendingEC2TasksCount

      * pendingFargateTasksCount

      * activeEC2ServiceCount

      * activeFargateServiceCount

      * drainingEC2ServiceCount

      * drainingFargateServiceCount

      - *(dict) --*

        A key-value pair object.

        - **name** *(string) --*

          The name of the key-value pair. For environment variables, this is the name of the
          environment variable.

        - **value** *(string) --*

          The value of the key-value pair. For environment variables, this is the value of the
          environment variable.

    - **tags** *(list) --*

      The metadata that you apply to the cluster to help you categorize and organize them. Each
      tag consists of a key and an optional value, both of which you define.

      The following basic restrictions apply to tags:

      * Maximum number of tags per resource - 50

      * For each resource, each tag key must be unique, and each tag key can have only one value.

      * Maximum key length - 128 Unicode characters in UTF-8

      * Maximum value length - 256 Unicode characters in UTF-8

      * If your tagging schema is used across multiple services and resources, remember that
      other services may have restrictions on allowed characters. Generally allowed characters
      are: letters, numbers, and spaces representable in UTF-8, and the following characters: + -
      = . _ : / @.

      * Tag keys and values are case-sensitive.

      * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
      prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
      tag keys or values with this prefix. Tags with this prefix do not count against your tags
      per resource limit.

      - *(dict) --*

        The metadata that you apply to a resource to help you categorize and organize them. Each
        tag consists of a key and an optional value, both of which you define.

        The following basic restrictions apply to tags:

        * Maximum number of tags per resource - 50

        * For each resource, each tag key must be unique, and each tag key can have only one
        value.

        * Maximum key length - 128 Unicode characters in UTF-8

        * Maximum value length - 256 Unicode characters in UTF-8

        * If your tagging schema is used across multiple services and resources, remember that
        other services may have restrictions on allowed characters. Generally allowed characters
        are: letters, numbers, and spaces representable in UTF-8, and the following characters: +
        - = . _ : / @.

        * Tag keys and values are case-sensitive.

        * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
        prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
        tag keys or values with this prefix. Tags with this prefix do not count against your tags
        per resource limit.

        - **key** *(string) --*

          One part of a key-value pair that make up a tag. A ``key`` is a general label that acts
          like a category for more specific tag values.

        - **value** *(string) --*

          The optional part of a key-value pair that make up a tag. A ``value`` acts as a
          descriptor within a tag category (key).

    - **settings** *(list) --*

      The settings for the cluster. This parameter indicates whether CloudWatch Container
      Insights is enabled or disabled for a cluster.

      - *(dict) --*

        The settings to use when creating a cluster. This parameter is used to enable CloudWatch
        Container Insights for a cluster.

        - **name** *(string) --*

          The name of the cluster setting. The only supported value is ``containerInsights`` .

        - **value** *(string) --*

          The value to set for the cluster setting. The supported values are ``enabled`` and
          ``disabled`` . If ``enabled`` is specified, CloudWatch Container Insights will be
          enabled for the cluster, otherwise it will be disabled unless the ``containerInsights``
          account setting is enabled. If a cluster value is specified, it will override the
          ``containerInsights`` value set with  PutAccountSetting or  PutAccountSettingDefault .
    """


_ClientUpdateClusterSettingsResponseTypeDef = TypedDict(
    "_ClientUpdateClusterSettingsResponseTypeDef",
    {"cluster": ClientUpdateClusterSettingsResponseclusterTypeDef},
    total=False,
)


class ClientUpdateClusterSettingsResponseTypeDef(
    _ClientUpdateClusterSettingsResponseTypeDef
):
    """
    Type definition for `ClientUpdateClusterSettings` `Response`

    - **cluster** *(dict) --*

      A regional grouping of one or more container instances on which you can run task requests.
      Each account receives a default cluster the first time you use the Amazon ECS service, but
      you may also create other clusters. Clusters may contain more than one instance type
      simultaneously.

      - **clusterArn** *(string) --*

        The Amazon Resource Name (ARN) that identifies the cluster. The ARN contains the
        ``arn:aws:ecs`` namespace, followed by the Region of the cluster, the AWS account ID of the
        cluster owner, the ``cluster`` namespace, and then the cluster name. For example,
        ``arn:aws:ecs:region:012345678910:cluster/test`` .

      - **clusterName** *(string) --*

        A user-generated string that you use to identify your cluster.

      - **status** *(string) --*

        The status of the cluster. The valid values are ``ACTIVE`` or ``INACTIVE`` . ``ACTIVE``
        indicates that you can register container instances with the cluster and the associated
        instances can accept tasks.

      - **registeredContainerInstancesCount** *(integer) --*

        The number of container instances registered into the cluster. This includes container
        instances in both ``ACTIVE`` and ``DRAINING`` status.

      - **runningTasksCount** *(integer) --*

        The number of tasks in the cluster that are in the ``RUNNING`` state.

      - **pendingTasksCount** *(integer) --*

        The number of tasks in the cluster that are in the ``PENDING`` state.

      - **activeServicesCount** *(integer) --*

        The number of services that are running on the cluster in an ``ACTIVE`` state. You can view
        these services with  ListServices .

      - **statistics** *(list) --*

        Additional information about your clusters that are separated by launch type, including:

        * runningEC2TasksCount

        * RunningFargateTasksCount

        * pendingEC2TasksCount

        * pendingFargateTasksCount

        * activeEC2ServiceCount

        * activeFargateServiceCount

        * drainingEC2ServiceCount

        * drainingFargateServiceCount

        - *(dict) --*

          A key-value pair object.

          - **name** *(string) --*

            The name of the key-value pair. For environment variables, this is the name of the
            environment variable.

          - **value** *(string) --*

            The value of the key-value pair. For environment variables, this is the value of the
            environment variable.

      - **tags** *(list) --*

        The metadata that you apply to the cluster to help you categorize and organize them. Each
        tag consists of a key and an optional value, both of which you define.

        The following basic restrictions apply to tags:

        * Maximum number of tags per resource - 50

        * For each resource, each tag key must be unique, and each tag key can have only one value.

        * Maximum key length - 128 Unicode characters in UTF-8

        * Maximum value length - 256 Unicode characters in UTF-8

        * If your tagging schema is used across multiple services and resources, remember that
        other services may have restrictions on allowed characters. Generally allowed characters
        are: letters, numbers, and spaces representable in UTF-8, and the following characters: + -
        = . _ : / @.

        * Tag keys and values are case-sensitive.

        * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
        prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
        tag keys or values with this prefix. Tags with this prefix do not count against your tags
        per resource limit.

        - *(dict) --*

          The metadata that you apply to a resource to help you categorize and organize them. Each
          tag consists of a key and an optional value, both of which you define.

          The following basic restrictions apply to tags:

          * Maximum number of tags per resource - 50

          * For each resource, each tag key must be unique, and each tag key can have only one
          value.

          * Maximum key length - 128 Unicode characters in UTF-8

          * Maximum value length - 256 Unicode characters in UTF-8

          * If your tagging schema is used across multiple services and resources, remember that
          other services may have restrictions on allowed characters. Generally allowed characters
          are: letters, numbers, and spaces representable in UTF-8, and the following characters: +
          - = . _ : / @.

          * Tag keys and values are case-sensitive.

          * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
          prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
          tag keys or values with this prefix. Tags with this prefix do not count against your tags
          per resource limit.

          - **key** *(string) --*

            One part of a key-value pair that make up a tag. A ``key`` is a general label that acts
            like a category for more specific tag values.

          - **value** *(string) --*

            The optional part of a key-value pair that make up a tag. A ``value`` acts as a
            descriptor within a tag category (key).

      - **settings** *(list) --*

        The settings for the cluster. This parameter indicates whether CloudWatch Container
        Insights is enabled or disabled for a cluster.

        - *(dict) --*

          The settings to use when creating a cluster. This parameter is used to enable CloudWatch
          Container Insights for a cluster.

          - **name** *(string) --*

            The name of the cluster setting. The only supported value is ``containerInsights`` .

          - **value** *(string) --*

            The value to set for the cluster setting. The supported values are ``enabled`` and
            ``disabled`` . If ``enabled`` is specified, CloudWatch Container Insights will be
            enabled for the cluster, otherwise it will be disabled unless the ``containerInsights``
            account setting is enabled. If a cluster value is specified, it will override the
            ``containerInsights`` value set with  PutAccountSetting or  PutAccountSettingDefault .
    """


_ClientUpdateClusterSettingssettingsTypeDef = TypedDict(
    "_ClientUpdateClusterSettingssettingsTypeDef",
    {"name": str, "value": str},
    total=False,
)


class ClientUpdateClusterSettingssettingsTypeDef(
    _ClientUpdateClusterSettingssettingsTypeDef
):
    """
    Type definition for `ClientUpdateClusterSettings` `settings`

    The settings to use when creating a cluster. This parameter is used to enable CloudWatch
    Container Insights for a cluster.

    - **name** *(string) --*

      The name of the cluster setting. The only supported value is ``containerInsights`` .

    - **value** *(string) --*

      The value to set for the cluster setting. The supported values are ``enabled`` and
      ``disabled`` . If ``enabled`` is specified, CloudWatch Container Insights will be enabled for
      the cluster, otherwise it will be disabled unless the ``containerInsights`` account setting
      is enabled. If a cluster value is specified, it will override the ``containerInsights`` value
      set with  PutAccountSetting or  PutAccountSettingDefault .
    """


_ClientUpdateContainerAgentResponsecontainerInstanceattachmentsdetailsTypeDef = TypedDict(
    "_ClientUpdateContainerAgentResponsecontainerInstanceattachmentsdetailsTypeDef",
    {"name": str, "value": str},
    total=False,
)


class ClientUpdateContainerAgentResponsecontainerInstanceattachmentsdetailsTypeDef(
    _ClientUpdateContainerAgentResponsecontainerInstanceattachmentsdetailsTypeDef
):
    """
    Type definition for `ClientUpdateContainerAgentResponsecontainerInstanceattachments` `details`

    A key-value pair object.

    - **name** *(string) --*

      The name of the key-value pair. For environment variables, this is the name of the
      environment variable.

    - **value** *(string) --*

      The value of the key-value pair. For environment variables, this is the value of
      the environment variable.
    """


_ClientUpdateContainerAgentResponsecontainerInstanceattachmentsTypeDef = TypedDict(
    "_ClientUpdateContainerAgentResponsecontainerInstanceattachmentsTypeDef",
    {
        "id": str,
        "type": str,
        "status": str,
        "details": List[
            ClientUpdateContainerAgentResponsecontainerInstanceattachmentsdetailsTypeDef
        ],
    },
    total=False,
)


class ClientUpdateContainerAgentResponsecontainerInstanceattachmentsTypeDef(
    _ClientUpdateContainerAgentResponsecontainerInstanceattachmentsTypeDef
):
    """
    Type definition for `ClientUpdateContainerAgentResponsecontainerInstance` `attachments`

    An object representing a container instance or task attachment.

    - **id** *(string) --*

      The unique identifier for the attachment.

    - **type** *(string) --*

      The type of the attachment, such as ``ElasticNetworkInterface`` .

    - **status** *(string) --*

      The status of the attachment. Valid values are ``PRECREATED`` , ``CREATED`` ,
      ``ATTACHING`` , ``ATTACHED`` , ``DETACHING`` , ``DETACHED`` , and ``DELETED`` .

    - **details** *(list) --*

      Details of the attachment. For elastic network interfaces, this includes the network
      interface ID, the MAC address, the subnet ID, and the private IPv4 address.

      - *(dict) --*

        A key-value pair object.

        - **name** *(string) --*

          The name of the key-value pair. For environment variables, this is the name of the
          environment variable.

        - **value** *(string) --*

          The value of the key-value pair. For environment variables, this is the value of
          the environment variable.
    """


_ClientUpdateContainerAgentResponsecontainerInstanceattributesTypeDef = TypedDict(
    "_ClientUpdateContainerAgentResponsecontainerInstanceattributesTypeDef",
    {"name": str, "value": str, "targetType": str, "targetId": str},
    total=False,
)


class ClientUpdateContainerAgentResponsecontainerInstanceattributesTypeDef(
    _ClientUpdateContainerAgentResponsecontainerInstanceattributesTypeDef
):
    """
    Type definition for `ClientUpdateContainerAgentResponsecontainerInstance` `attributes`

    An attribute is a name-value pair associated with an Amazon ECS object. Attributes enable
    you to extend the Amazon ECS data model by adding custom metadata to your resources. For
    more information, see `Attributes
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html#attributes>`__
    in the *Amazon Elastic Container Service Developer Guide* .

    - **name** *(string) --*

      The name of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
      hyphens, underscores, and periods are allowed.

    - **value** *(string) --*

      The value of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
      hyphens, underscores, periods, at signs (@), forward slashes, colons, and spaces are
      allowed.

    - **targetType** *(string) --*

      The type of the target with which to attach the attribute. This parameter is required
      if you use the short form ID for a resource instead of the full ARN.

    - **targetId** *(string) --*

      The ID of the target. You can specify the short form ID for a resource or the full
      Amazon Resource Name (ARN).
    """


_ClientUpdateContainerAgentResponsecontainerInstanceregisteredResourcesTypeDef = TypedDict(
    "_ClientUpdateContainerAgentResponsecontainerInstanceregisteredResourcesTypeDef",
    {
        "name": str,
        "type": str,
        "doubleValue": float,
        "longValue": int,
        "integerValue": int,
        "stringSetValue": List[str],
    },
    total=False,
)


class ClientUpdateContainerAgentResponsecontainerInstanceregisteredResourcesTypeDef(
    _ClientUpdateContainerAgentResponsecontainerInstanceregisteredResourcesTypeDef
):
    """
    Type definition for `ClientUpdateContainerAgentResponsecontainerInstance` `registeredResources`

    Describes the resources available for a container instance.

    - **name** *(string) --*

      The name of the resource, such as ``CPU`` , ``MEMORY`` , ``PORTS`` , ``PORTS_UDP`` , or
      a user-defined resource.

    - **type** *(string) --*

      The type of the resource, such as ``INTEGER`` , ``DOUBLE`` , ``LONG`` , or
      ``STRINGSET`` .

    - **doubleValue** *(float) --*

      When the ``doubleValue`` type is set, the value of the resource must be a double
      precision floating-point type.

    - **longValue** *(integer) --*

      When the ``longValue`` type is set, the value of the resource must be an extended
      precision floating-point type.

    - **integerValue** *(integer) --*

      When the ``integerValue`` type is set, the value of the resource must be an integer.

    - **stringSetValue** *(list) --*

      When the ``stringSetValue`` type is set, the value of the resource must be a string
      type.

      - *(string) --*
    """


_ClientUpdateContainerAgentResponsecontainerInstanceremainingResourcesTypeDef = TypedDict(
    "_ClientUpdateContainerAgentResponsecontainerInstanceremainingResourcesTypeDef",
    {
        "name": str,
        "type": str,
        "doubleValue": float,
        "longValue": int,
        "integerValue": int,
        "stringSetValue": List[str],
    },
    total=False,
)


class ClientUpdateContainerAgentResponsecontainerInstanceremainingResourcesTypeDef(
    _ClientUpdateContainerAgentResponsecontainerInstanceremainingResourcesTypeDef
):
    """
    Type definition for `ClientUpdateContainerAgentResponsecontainerInstance` `remainingResources`

    Describes the resources available for a container instance.

    - **name** *(string) --*

      The name of the resource, such as ``CPU`` , ``MEMORY`` , ``PORTS`` , ``PORTS_UDP`` , or
      a user-defined resource.

    - **type** *(string) --*

      The type of the resource, such as ``INTEGER`` , ``DOUBLE`` , ``LONG`` , or
      ``STRINGSET`` .

    - **doubleValue** *(float) --*

      When the ``doubleValue`` type is set, the value of the resource must be a double
      precision floating-point type.

    - **longValue** *(integer) --*

      When the ``longValue`` type is set, the value of the resource must be an extended
      precision floating-point type.

    - **integerValue** *(integer) --*

      When the ``integerValue`` type is set, the value of the resource must be an integer.

    - **stringSetValue** *(list) --*

      When the ``stringSetValue`` type is set, the value of the resource must be a string
      type.

      - *(string) --*
    """


_ClientUpdateContainerAgentResponsecontainerInstancetagsTypeDef = TypedDict(
    "_ClientUpdateContainerAgentResponsecontainerInstancetagsTypeDef",
    {"key": str, "value": str},
    total=False,
)


class ClientUpdateContainerAgentResponsecontainerInstancetagsTypeDef(
    _ClientUpdateContainerAgentResponsecontainerInstancetagsTypeDef
):
    """
    Type definition for `ClientUpdateContainerAgentResponsecontainerInstance` `tags`

    The metadata that you apply to a resource to help you categorize and organize them. Each
    tag consists of a key and an optional value, both of which you define.

    The following basic restrictions apply to tags:

    * Maximum number of tags per resource - 50

    * For each resource, each tag key must be unique, and each tag key can have only one
    value.

    * Maximum key length - 128 Unicode characters in UTF-8

    * Maximum value length - 256 Unicode characters in UTF-8

    * If your tagging schema is used across multiple services and resources, remember that
    other services may have restrictions on allowed characters. Generally allowed characters
    are: letters, numbers, and spaces representable in UTF-8, and the following characters: +
    - = . _ : / @.

    * Tag keys and values are case-sensitive.

    * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
    prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
    tag keys or values with this prefix. Tags with this prefix do not count against your tags
    per resource limit.

    - **key** *(string) --*

      One part of a key-value pair that make up a tag. A ``key`` is a general label that acts
      like a category for more specific tag values.

    - **value** *(string) --*

      The optional part of a key-value pair that make up a tag. A ``value`` acts as a
      descriptor within a tag category (key).
    """


_ClientUpdateContainerAgentResponsecontainerInstanceversionInfoTypeDef = TypedDict(
    "_ClientUpdateContainerAgentResponsecontainerInstanceversionInfoTypeDef",
    {"agentVersion": str, "agentHash": str, "dockerVersion": str},
    total=False,
)


class ClientUpdateContainerAgentResponsecontainerInstanceversionInfoTypeDef(
    _ClientUpdateContainerAgentResponsecontainerInstanceversionInfoTypeDef
):
    """
    Type definition for `ClientUpdateContainerAgentResponsecontainerInstance` `versionInfo`

    The version information for the Amazon ECS container agent and Docker daemon running on the
    container instance.

    - **agentVersion** *(string) --*

      The version number of the Amazon ECS container agent.

    - **agentHash** *(string) --*

      The Git commit hash for the Amazon ECS container agent build on the `amazon-ecs-agent
      <https://github.com/aws/amazon-ecs-agent/commits/master>`__ GitHub repository.

    - **dockerVersion** *(string) --*

      The Docker version running on the container instance.
    """


_ClientUpdateContainerAgentResponsecontainerInstanceTypeDef = TypedDict(
    "_ClientUpdateContainerAgentResponsecontainerInstanceTypeDef",
    {
        "containerInstanceArn": str,
        "ec2InstanceId": str,
        "version": int,
        "versionInfo": ClientUpdateContainerAgentResponsecontainerInstanceversionInfoTypeDef,
        "remainingResources": List[
            ClientUpdateContainerAgentResponsecontainerInstanceremainingResourcesTypeDef
        ],
        "registeredResources": List[
            ClientUpdateContainerAgentResponsecontainerInstanceregisteredResourcesTypeDef
        ],
        "status": str,
        "statusReason": str,
        "agentConnected": bool,
        "runningTasksCount": int,
        "pendingTasksCount": int,
        "agentUpdateStatus": str,
        "attributes": List[
            ClientUpdateContainerAgentResponsecontainerInstanceattributesTypeDef
        ],
        "registeredAt": datetime,
        "attachments": List[
            ClientUpdateContainerAgentResponsecontainerInstanceattachmentsTypeDef
        ],
        "tags": List[ClientUpdateContainerAgentResponsecontainerInstancetagsTypeDef],
    },
    total=False,
)


class ClientUpdateContainerAgentResponsecontainerInstanceTypeDef(
    _ClientUpdateContainerAgentResponsecontainerInstanceTypeDef
):
    """
    Type definition for `ClientUpdateContainerAgentResponse` `containerInstance`

    The container instance for which the container agent was updated.

    - **containerInstanceArn** *(string) --*

      The Amazon Resource Name (ARN) of the container instance. The ARN contains the
      ``arn:aws:ecs`` namespace, followed by the Region of the container instance, the AWS
      account ID of the container instance owner, the ``container-instance`` namespace, and then
      the container instance ID. For example,
      ``arn:aws:ecs:region:aws_account_id:container-instance/container_instance_ID`` .

    - **ec2InstanceId** *(string) --*

      The EC2 instance ID of the container instance.

    - **version** *(integer) --*

      The version counter for the container instance. Every time a container instance experiences
      a change that triggers a CloudWatch event, the version counter is incremented. If you are
      replicating your Amazon ECS container instance state with CloudWatch Events, you can
      compare the version of a container instance reported by the Amazon ECS APIs with the
      version reported in CloudWatch Events for the container instance (inside the ``detail``
      object) to verify that the version in your event stream is current.

    - **versionInfo** *(dict) --*

      The version information for the Amazon ECS container agent and Docker daemon running on the
      container instance.

      - **agentVersion** *(string) --*

        The version number of the Amazon ECS container agent.

      - **agentHash** *(string) --*

        The Git commit hash for the Amazon ECS container agent build on the `amazon-ecs-agent
        <https://github.com/aws/amazon-ecs-agent/commits/master>`__ GitHub repository.

      - **dockerVersion** *(string) --*

        The Docker version running on the container instance.

    - **remainingResources** *(list) --*

      For CPU and memory resource types, this parameter describes the remaining CPU and memory
      that has not already been allocated to tasks and is therefore available for new tasks. For
      port resource types, this parameter describes the ports that were reserved by the Amazon
      ECS container agent (at instance registration time) and any task containers that have
      reserved port mappings on the host (with the ``host`` or ``bridge`` network mode). Any port
      that is not specified here is available for new tasks.

      - *(dict) --*

        Describes the resources available for a container instance.

        - **name** *(string) --*

          The name of the resource, such as ``CPU`` , ``MEMORY`` , ``PORTS`` , ``PORTS_UDP`` , or
          a user-defined resource.

        - **type** *(string) --*

          The type of the resource, such as ``INTEGER`` , ``DOUBLE`` , ``LONG`` , or
          ``STRINGSET`` .

        - **doubleValue** *(float) --*

          When the ``doubleValue`` type is set, the value of the resource must be a double
          precision floating-point type.

        - **longValue** *(integer) --*

          When the ``longValue`` type is set, the value of the resource must be an extended
          precision floating-point type.

        - **integerValue** *(integer) --*

          When the ``integerValue`` type is set, the value of the resource must be an integer.

        - **stringSetValue** *(list) --*

          When the ``stringSetValue`` type is set, the value of the resource must be a string
          type.

          - *(string) --*

    - **registeredResources** *(list) --*

      For CPU and memory resource types, this parameter describes the amount of each resource
      that was available on the container instance when the container agent registered it with
      Amazon ECS. This value represents the total amount of CPU and memory that can be allocated
      on this container instance to tasks. For port resource types, this parameter describes the
      ports that were reserved by the Amazon ECS container agent when it registered the container
      instance with Amazon ECS.

      - *(dict) --*

        Describes the resources available for a container instance.

        - **name** *(string) --*

          The name of the resource, such as ``CPU`` , ``MEMORY`` , ``PORTS`` , ``PORTS_UDP`` , or
          a user-defined resource.

        - **type** *(string) --*

          The type of the resource, such as ``INTEGER`` , ``DOUBLE`` , ``LONG`` , or
          ``STRINGSET`` .

        - **doubleValue** *(float) --*

          When the ``doubleValue`` type is set, the value of the resource must be a double
          precision floating-point type.

        - **longValue** *(integer) --*

          When the ``longValue`` type is set, the value of the resource must be an extended
          precision floating-point type.

        - **integerValue** *(integer) --*

          When the ``integerValue`` type is set, the value of the resource must be an integer.

        - **stringSetValue** *(list) --*

          When the ``stringSetValue`` type is set, the value of the resource must be a string
          type.

          - *(string) --*

    - **status** *(string) --*

      The status of the container instance. The valid values are ``REGISTERING`` ,
      ``REGISTRATION_FAILED`` , ``ACTIVE`` , ``INACTIVE`` , ``DEREGISTERING`` , or ``DRAINING`` .

      If your account has opted in to the ``awsvpcTrunking`` account setting, then any newly
      registered container instance will transition to a ``REGISTERING`` status while the trunk
      elastic network interface is provisioned for the instance. If the registration fails, the
      instance will transition to a ``REGISTRATION_FAILED`` status. You can describe the
      container instance and see the reason for failure in the ``statusReason`` parameter. Once
      the container instance is terminated, the instance transitions to a ``DEREGISTERING``
      status while the trunk elastic network interface is deprovisioned. The instance then
      transitions to an ``INACTIVE`` status.

      The ``ACTIVE`` status indicates that the container instance can accept tasks. The
      ``DRAINING`` indicates that new tasks are not placed on the container instance and any
      service tasks running on the container instance are removed if possible. For more
      information, see `Container Instance Draining
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/container-instance-draining.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

    - **statusReason** *(string) --*

      The reason that the container instance reached its current status.

    - **agentConnected** *(boolean) --*

      This parameter returns ``true`` if the agent is connected to Amazon ECS. Registered
      instances with an agent that may be unhealthy or stopped return ``false`` . Only instances
      connected to an agent can accept placement requests.

    - **runningTasksCount** *(integer) --*

      The number of tasks on the container instance that are in the ``RUNNING`` status.

    - **pendingTasksCount** *(integer) --*

      The number of tasks on the container instance that are in the ``PENDING`` status.

    - **agentUpdateStatus** *(string) --*

      The status of the most recent agent update. If an update has never been requested, this
      value is ``NULL`` .

    - **attributes** *(list) --*

      The attributes set for the container instance, either by the Amazon ECS container agent at
      instance registration or manually with the  PutAttributes operation.

      - *(dict) --*

        An attribute is a name-value pair associated with an Amazon ECS object. Attributes enable
        you to extend the Amazon ECS data model by adding custom metadata to your resources. For
        more information, see `Attributes
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html#attributes>`__
        in the *Amazon Elastic Container Service Developer Guide* .

        - **name** *(string) --*

          The name of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
          hyphens, underscores, and periods are allowed.

        - **value** *(string) --*

          The value of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
          hyphens, underscores, periods, at signs (@), forward slashes, colons, and spaces are
          allowed.

        - **targetType** *(string) --*

          The type of the target with which to attach the attribute. This parameter is required
          if you use the short form ID for a resource instead of the full ARN.

        - **targetId** *(string) --*

          The ID of the target. You can specify the short form ID for a resource or the full
          Amazon Resource Name (ARN).

    - **registeredAt** *(datetime) --*

      The Unix timestamp for when the container instance was registered.

    - **attachments** *(list) --*

      The resources attached to a container instance, such as elastic network interfaces.

      - *(dict) --*

        An object representing a container instance or task attachment.

        - **id** *(string) --*

          The unique identifier for the attachment.

        - **type** *(string) --*

          The type of the attachment, such as ``ElasticNetworkInterface`` .

        - **status** *(string) --*

          The status of the attachment. Valid values are ``PRECREATED`` , ``CREATED`` ,
          ``ATTACHING`` , ``ATTACHED`` , ``DETACHING`` , ``DETACHED`` , and ``DELETED`` .

        - **details** *(list) --*

          Details of the attachment. For elastic network interfaces, this includes the network
          interface ID, the MAC address, the subnet ID, and the private IPv4 address.

          - *(dict) --*

            A key-value pair object.

            - **name** *(string) --*

              The name of the key-value pair. For environment variables, this is the name of the
              environment variable.

            - **value** *(string) --*

              The value of the key-value pair. For environment variables, this is the value of
              the environment variable.

    - **tags** *(list) --*

      The metadata that you apply to the container instance to help you categorize and organize
      them. Each tag consists of a key and an optional value, both of which you define.

      The following basic restrictions apply to tags:

      * Maximum number of tags per resource - 50

      * For each resource, each tag key must be unique, and each tag key can have only one value.

      * Maximum key length - 128 Unicode characters in UTF-8

      * Maximum value length - 256 Unicode characters in UTF-8

      * If your tagging schema is used across multiple services and resources, remember that
      other services may have restrictions on allowed characters. Generally allowed characters
      are: letters, numbers, and spaces representable in UTF-8, and the following characters: + -
      = . _ : / @.

      * Tag keys and values are case-sensitive.

      * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
      prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
      tag keys or values with this prefix. Tags with this prefix do not count against your tags
      per resource limit.

      - *(dict) --*

        The metadata that you apply to a resource to help you categorize and organize them. Each
        tag consists of a key and an optional value, both of which you define.

        The following basic restrictions apply to tags:

        * Maximum number of tags per resource - 50

        * For each resource, each tag key must be unique, and each tag key can have only one
        value.

        * Maximum key length - 128 Unicode characters in UTF-8

        * Maximum value length - 256 Unicode characters in UTF-8

        * If your tagging schema is used across multiple services and resources, remember that
        other services may have restrictions on allowed characters. Generally allowed characters
        are: letters, numbers, and spaces representable in UTF-8, and the following characters: +
        - = . _ : / @.

        * Tag keys and values are case-sensitive.

        * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
        prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
        tag keys or values with this prefix. Tags with this prefix do not count against your tags
        per resource limit.

        - **key** *(string) --*

          One part of a key-value pair that make up a tag. A ``key`` is a general label that acts
          like a category for more specific tag values.

        - **value** *(string) --*

          The optional part of a key-value pair that make up a tag. A ``value`` acts as a
          descriptor within a tag category (key).
    """


_ClientUpdateContainerAgentResponseTypeDef = TypedDict(
    "_ClientUpdateContainerAgentResponseTypeDef",
    {"containerInstance": ClientUpdateContainerAgentResponsecontainerInstanceTypeDef},
    total=False,
)


class ClientUpdateContainerAgentResponseTypeDef(
    _ClientUpdateContainerAgentResponseTypeDef
):
    """
    Type definition for `ClientUpdateContainerAgent` `Response`

    - **containerInstance** *(dict) --*

      The container instance for which the container agent was updated.

      - **containerInstanceArn** *(string) --*

        The Amazon Resource Name (ARN) of the container instance. The ARN contains the
        ``arn:aws:ecs`` namespace, followed by the Region of the container instance, the AWS
        account ID of the container instance owner, the ``container-instance`` namespace, and then
        the container instance ID. For example,
        ``arn:aws:ecs:region:aws_account_id:container-instance/container_instance_ID`` .

      - **ec2InstanceId** *(string) --*

        The EC2 instance ID of the container instance.

      - **version** *(integer) --*

        The version counter for the container instance. Every time a container instance experiences
        a change that triggers a CloudWatch event, the version counter is incremented. If you are
        replicating your Amazon ECS container instance state with CloudWatch Events, you can
        compare the version of a container instance reported by the Amazon ECS APIs with the
        version reported in CloudWatch Events for the container instance (inside the ``detail``
        object) to verify that the version in your event stream is current.

      - **versionInfo** *(dict) --*

        The version information for the Amazon ECS container agent and Docker daemon running on the
        container instance.

        - **agentVersion** *(string) --*

          The version number of the Amazon ECS container agent.

        - **agentHash** *(string) --*

          The Git commit hash for the Amazon ECS container agent build on the `amazon-ecs-agent
          <https://github.com/aws/amazon-ecs-agent/commits/master>`__ GitHub repository.

        - **dockerVersion** *(string) --*

          The Docker version running on the container instance.

      - **remainingResources** *(list) --*

        For CPU and memory resource types, this parameter describes the remaining CPU and memory
        that has not already been allocated to tasks and is therefore available for new tasks. For
        port resource types, this parameter describes the ports that were reserved by the Amazon
        ECS container agent (at instance registration time) and any task containers that have
        reserved port mappings on the host (with the ``host`` or ``bridge`` network mode). Any port
        that is not specified here is available for new tasks.

        - *(dict) --*

          Describes the resources available for a container instance.

          - **name** *(string) --*

            The name of the resource, such as ``CPU`` , ``MEMORY`` , ``PORTS`` , ``PORTS_UDP`` , or
            a user-defined resource.

          - **type** *(string) --*

            The type of the resource, such as ``INTEGER`` , ``DOUBLE`` , ``LONG`` , or
            ``STRINGSET`` .

          - **doubleValue** *(float) --*

            When the ``doubleValue`` type is set, the value of the resource must be a double
            precision floating-point type.

          - **longValue** *(integer) --*

            When the ``longValue`` type is set, the value of the resource must be an extended
            precision floating-point type.

          - **integerValue** *(integer) --*

            When the ``integerValue`` type is set, the value of the resource must be an integer.

          - **stringSetValue** *(list) --*

            When the ``stringSetValue`` type is set, the value of the resource must be a string
            type.

            - *(string) --*

      - **registeredResources** *(list) --*

        For CPU and memory resource types, this parameter describes the amount of each resource
        that was available on the container instance when the container agent registered it with
        Amazon ECS. This value represents the total amount of CPU and memory that can be allocated
        on this container instance to tasks. For port resource types, this parameter describes the
        ports that were reserved by the Amazon ECS container agent when it registered the container
        instance with Amazon ECS.

        - *(dict) --*

          Describes the resources available for a container instance.

          - **name** *(string) --*

            The name of the resource, such as ``CPU`` , ``MEMORY`` , ``PORTS`` , ``PORTS_UDP`` , or
            a user-defined resource.

          - **type** *(string) --*

            The type of the resource, such as ``INTEGER`` , ``DOUBLE`` , ``LONG`` , or
            ``STRINGSET`` .

          - **doubleValue** *(float) --*

            When the ``doubleValue`` type is set, the value of the resource must be a double
            precision floating-point type.

          - **longValue** *(integer) --*

            When the ``longValue`` type is set, the value of the resource must be an extended
            precision floating-point type.

          - **integerValue** *(integer) --*

            When the ``integerValue`` type is set, the value of the resource must be an integer.

          - **stringSetValue** *(list) --*

            When the ``stringSetValue`` type is set, the value of the resource must be a string
            type.

            - *(string) --*

      - **status** *(string) --*

        The status of the container instance. The valid values are ``REGISTERING`` ,
        ``REGISTRATION_FAILED`` , ``ACTIVE`` , ``INACTIVE`` , ``DEREGISTERING`` , or ``DRAINING`` .

        If your account has opted in to the ``awsvpcTrunking`` account setting, then any newly
        registered container instance will transition to a ``REGISTERING`` status while the trunk
        elastic network interface is provisioned for the instance. If the registration fails, the
        instance will transition to a ``REGISTRATION_FAILED`` status. You can describe the
        container instance and see the reason for failure in the ``statusReason`` parameter. Once
        the container instance is terminated, the instance transitions to a ``DEREGISTERING``
        status while the trunk elastic network interface is deprovisioned. The instance then
        transitions to an ``INACTIVE`` status.

        The ``ACTIVE`` status indicates that the container instance can accept tasks. The
        ``DRAINING`` indicates that new tasks are not placed on the container instance and any
        service tasks running on the container instance are removed if possible. For more
        information, see `Container Instance Draining
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/container-instance-draining.html>`__
        in the *Amazon Elastic Container Service Developer Guide* .

      - **statusReason** *(string) --*

        The reason that the container instance reached its current status.

      - **agentConnected** *(boolean) --*

        This parameter returns ``true`` if the agent is connected to Amazon ECS. Registered
        instances with an agent that may be unhealthy or stopped return ``false`` . Only instances
        connected to an agent can accept placement requests.

      - **runningTasksCount** *(integer) --*

        The number of tasks on the container instance that are in the ``RUNNING`` status.

      - **pendingTasksCount** *(integer) --*

        The number of tasks on the container instance that are in the ``PENDING`` status.

      - **agentUpdateStatus** *(string) --*

        The status of the most recent agent update. If an update has never been requested, this
        value is ``NULL`` .

      - **attributes** *(list) --*

        The attributes set for the container instance, either by the Amazon ECS container agent at
        instance registration or manually with the  PutAttributes operation.

        - *(dict) --*

          An attribute is a name-value pair associated with an Amazon ECS object. Attributes enable
          you to extend the Amazon ECS data model by adding custom metadata to your resources. For
          more information, see `Attributes
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html#attributes>`__
          in the *Amazon Elastic Container Service Developer Guide* .

          - **name** *(string) --*

            The name of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
            hyphens, underscores, and periods are allowed.

          - **value** *(string) --*

            The value of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
            hyphens, underscores, periods, at signs (@), forward slashes, colons, and spaces are
            allowed.

          - **targetType** *(string) --*

            The type of the target with which to attach the attribute. This parameter is required
            if you use the short form ID for a resource instead of the full ARN.

          - **targetId** *(string) --*

            The ID of the target. You can specify the short form ID for a resource or the full
            Amazon Resource Name (ARN).

      - **registeredAt** *(datetime) --*

        The Unix timestamp for when the container instance was registered.

      - **attachments** *(list) --*

        The resources attached to a container instance, such as elastic network interfaces.

        - *(dict) --*

          An object representing a container instance or task attachment.

          - **id** *(string) --*

            The unique identifier for the attachment.

          - **type** *(string) --*

            The type of the attachment, such as ``ElasticNetworkInterface`` .

          - **status** *(string) --*

            The status of the attachment. Valid values are ``PRECREATED`` , ``CREATED`` ,
            ``ATTACHING`` , ``ATTACHED`` , ``DETACHING`` , ``DETACHED`` , and ``DELETED`` .

          - **details** *(list) --*

            Details of the attachment. For elastic network interfaces, this includes the network
            interface ID, the MAC address, the subnet ID, and the private IPv4 address.

            - *(dict) --*

              A key-value pair object.

              - **name** *(string) --*

                The name of the key-value pair. For environment variables, this is the name of the
                environment variable.

              - **value** *(string) --*

                The value of the key-value pair. For environment variables, this is the value of
                the environment variable.

      - **tags** *(list) --*

        The metadata that you apply to the container instance to help you categorize and organize
        them. Each tag consists of a key and an optional value, both of which you define.

        The following basic restrictions apply to tags:

        * Maximum number of tags per resource - 50

        * For each resource, each tag key must be unique, and each tag key can have only one value.

        * Maximum key length - 128 Unicode characters in UTF-8

        * Maximum value length - 256 Unicode characters in UTF-8

        * If your tagging schema is used across multiple services and resources, remember that
        other services may have restrictions on allowed characters. Generally allowed characters
        are: letters, numbers, and spaces representable in UTF-8, and the following characters: + -
        = . _ : / @.

        * Tag keys and values are case-sensitive.

        * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
        prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
        tag keys or values with this prefix. Tags with this prefix do not count against your tags
        per resource limit.

        - *(dict) --*

          The metadata that you apply to a resource to help you categorize and organize them. Each
          tag consists of a key and an optional value, both of which you define.

          The following basic restrictions apply to tags:

          * Maximum number of tags per resource - 50

          * For each resource, each tag key must be unique, and each tag key can have only one
          value.

          * Maximum key length - 128 Unicode characters in UTF-8

          * Maximum value length - 256 Unicode characters in UTF-8

          * If your tagging schema is used across multiple services and resources, remember that
          other services may have restrictions on allowed characters. Generally allowed characters
          are: letters, numbers, and spaces representable in UTF-8, and the following characters: +
          - = . _ : / @.

          * Tag keys and values are case-sensitive.

          * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
          prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
          tag keys or values with this prefix. Tags with this prefix do not count against your tags
          per resource limit.

          - **key** *(string) --*

            One part of a key-value pair that make up a tag. A ``key`` is a general label that acts
            like a category for more specific tag values.

          - **value** *(string) --*

            The optional part of a key-value pair that make up a tag. A ``value`` acts as a
            descriptor within a tag category (key).
    """


_ClientUpdateContainerInstancesStateResponsecontainerInstancesattachmentsdetailsTypeDef = TypedDict(
    "_ClientUpdateContainerInstancesStateResponsecontainerInstancesattachmentsdetailsTypeDef",
    {"name": str, "value": str},
    total=False,
)


class ClientUpdateContainerInstancesStateResponsecontainerInstancesattachmentsdetailsTypeDef(
    _ClientUpdateContainerInstancesStateResponsecontainerInstancesattachmentsdetailsTypeDef
):
    """
    Type definition for `ClientUpdateContainerInstancesStateResponsecontainerInstancesattachments` `details`

    A key-value pair object.

    - **name** *(string) --*

      The name of the key-value pair. For environment variables, this is the name of
      the environment variable.

    - **value** *(string) --*

      The value of the key-value pair. For environment variables, this is the value of
      the environment variable.
    """


_ClientUpdateContainerInstancesStateResponsecontainerInstancesattachmentsTypeDef = TypedDict(
    "_ClientUpdateContainerInstancesStateResponsecontainerInstancesattachmentsTypeDef",
    {
        "id": str,
        "type": str,
        "status": str,
        "details": List[
            ClientUpdateContainerInstancesStateResponsecontainerInstancesattachmentsdetailsTypeDef
        ],
    },
    total=False,
)


class ClientUpdateContainerInstancesStateResponsecontainerInstancesattachmentsTypeDef(
    _ClientUpdateContainerInstancesStateResponsecontainerInstancesattachmentsTypeDef
):
    """
    Type definition for `ClientUpdateContainerInstancesStateResponsecontainerInstances` `attachments`

    An object representing a container instance or task attachment.

    - **id** *(string) --*

      The unique identifier for the attachment.

    - **type** *(string) --*

      The type of the attachment, such as ``ElasticNetworkInterface`` .

    - **status** *(string) --*

      The status of the attachment. Valid values are ``PRECREATED`` , ``CREATED`` ,
      ``ATTACHING`` , ``ATTACHED`` , ``DETACHING`` , ``DETACHED`` , and ``DELETED`` .

    - **details** *(list) --*

      Details of the attachment. For elastic network interfaces, this includes the network
      interface ID, the MAC address, the subnet ID, and the private IPv4 address.

      - *(dict) --*

        A key-value pair object.

        - **name** *(string) --*

          The name of the key-value pair. For environment variables, this is the name of
          the environment variable.

        - **value** *(string) --*

          The value of the key-value pair. For environment variables, this is the value of
          the environment variable.
    """


_ClientUpdateContainerInstancesStateResponsecontainerInstancesattributesTypeDef = TypedDict(
    "_ClientUpdateContainerInstancesStateResponsecontainerInstancesattributesTypeDef",
    {"name": str, "value": str, "targetType": str, "targetId": str},
    total=False,
)


class ClientUpdateContainerInstancesStateResponsecontainerInstancesattributesTypeDef(
    _ClientUpdateContainerInstancesStateResponsecontainerInstancesattributesTypeDef
):
    """
    Type definition for `ClientUpdateContainerInstancesStateResponsecontainerInstances` `attributes`

    An attribute is a name-value pair associated with an Amazon ECS object. Attributes
    enable you to extend the Amazon ECS data model by adding custom metadata to your
    resources. For more information, see `Attributes
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html#attributes>`__
    in the *Amazon Elastic Container Service Developer Guide* .

    - **name** *(string) --*

      The name of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
      hyphens, underscores, and periods are allowed.

    - **value** *(string) --*

      The value of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
      hyphens, underscores, periods, at signs (@), forward slashes, colons, and spaces are
      allowed.

    - **targetType** *(string) --*

      The type of the target with which to attach the attribute. This parameter is required
      if you use the short form ID for a resource instead of the full ARN.

    - **targetId** *(string) --*

      The ID of the target. You can specify the short form ID for a resource or the full
      Amazon Resource Name (ARN).
    """


_ClientUpdateContainerInstancesStateResponsecontainerInstancesregisteredResourcesTypeDef = TypedDict(
    "_ClientUpdateContainerInstancesStateResponsecontainerInstancesregisteredResourcesTypeDef",
    {
        "name": str,
        "type": str,
        "doubleValue": float,
        "longValue": int,
        "integerValue": int,
        "stringSetValue": List[str],
    },
    total=False,
)


class ClientUpdateContainerInstancesStateResponsecontainerInstancesregisteredResourcesTypeDef(
    _ClientUpdateContainerInstancesStateResponsecontainerInstancesregisteredResourcesTypeDef
):
    """
    Type definition for `ClientUpdateContainerInstancesStateResponsecontainerInstances` `registeredResources`

    Describes the resources available for a container instance.

    - **name** *(string) --*

      The name of the resource, such as ``CPU`` , ``MEMORY`` , ``PORTS`` , ``PORTS_UDP`` ,
      or a user-defined resource.

    - **type** *(string) --*

      The type of the resource, such as ``INTEGER`` , ``DOUBLE`` , ``LONG`` , or
      ``STRINGSET`` .

    - **doubleValue** *(float) --*

      When the ``doubleValue`` type is set, the value of the resource must be a double
      precision floating-point type.

    - **longValue** *(integer) --*

      When the ``longValue`` type is set, the value of the resource must be an extended
      precision floating-point type.

    - **integerValue** *(integer) --*

      When the ``integerValue`` type is set, the value of the resource must be an integer.

    - **stringSetValue** *(list) --*

      When the ``stringSetValue`` type is set, the value of the resource must be a string
      type.

      - *(string) --*
    """


_ClientUpdateContainerInstancesStateResponsecontainerInstancesremainingResourcesTypeDef = TypedDict(
    "_ClientUpdateContainerInstancesStateResponsecontainerInstancesremainingResourcesTypeDef",
    {
        "name": str,
        "type": str,
        "doubleValue": float,
        "longValue": int,
        "integerValue": int,
        "stringSetValue": List[str],
    },
    total=False,
)


class ClientUpdateContainerInstancesStateResponsecontainerInstancesremainingResourcesTypeDef(
    _ClientUpdateContainerInstancesStateResponsecontainerInstancesremainingResourcesTypeDef
):
    """
    Type definition for `ClientUpdateContainerInstancesStateResponsecontainerInstances` `remainingResources`

    Describes the resources available for a container instance.

    - **name** *(string) --*

      The name of the resource, such as ``CPU`` , ``MEMORY`` , ``PORTS`` , ``PORTS_UDP`` ,
      or a user-defined resource.

    - **type** *(string) --*

      The type of the resource, such as ``INTEGER`` , ``DOUBLE`` , ``LONG`` , or
      ``STRINGSET`` .

    - **doubleValue** *(float) --*

      When the ``doubleValue`` type is set, the value of the resource must be a double
      precision floating-point type.

    - **longValue** *(integer) --*

      When the ``longValue`` type is set, the value of the resource must be an extended
      precision floating-point type.

    - **integerValue** *(integer) --*

      When the ``integerValue`` type is set, the value of the resource must be an integer.

    - **stringSetValue** *(list) --*

      When the ``stringSetValue`` type is set, the value of the resource must be a string
      type.

      - *(string) --*
    """


_ClientUpdateContainerInstancesStateResponsecontainerInstancestagsTypeDef = TypedDict(
    "_ClientUpdateContainerInstancesStateResponsecontainerInstancestagsTypeDef",
    {"key": str, "value": str},
    total=False,
)


class ClientUpdateContainerInstancesStateResponsecontainerInstancestagsTypeDef(
    _ClientUpdateContainerInstancesStateResponsecontainerInstancestagsTypeDef
):
    """
    Type definition for `ClientUpdateContainerInstancesStateResponsecontainerInstances` `tags`

    The metadata that you apply to a resource to help you categorize and organize them.
    Each tag consists of a key and an optional value, both of which you define.

    The following basic restrictions apply to tags:

    * Maximum number of tags per resource - 50

    * For each resource, each tag key must be unique, and each tag key can have only one
    value.

    * Maximum key length - 128 Unicode characters in UTF-8

    * Maximum value length - 256 Unicode characters in UTF-8

    * If your tagging schema is used across multiple services and resources, remember that
    other services may have restrictions on allowed characters. Generally allowed
    characters are: letters, numbers, and spaces representable in UTF-8, and the following
    characters: + - = . _ : / @.

    * Tag keys and values are case-sensitive.

    * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
    prefix for either keys or values as it is reserved for AWS use. You cannot edit or
    delete tag keys or values with this prefix. Tags with this prefix do not count against
    your tags per resource limit.

    - **key** *(string) --*

      One part of a key-value pair that make up a tag. A ``key`` is a general label that
      acts like a category for more specific tag values.

    - **value** *(string) --*

      The optional part of a key-value pair that make up a tag. A ``value`` acts as a
      descriptor within a tag category (key).
    """


_ClientUpdateContainerInstancesStateResponsecontainerInstancesversionInfoTypeDef = TypedDict(
    "_ClientUpdateContainerInstancesStateResponsecontainerInstancesversionInfoTypeDef",
    {"agentVersion": str, "agentHash": str, "dockerVersion": str},
    total=False,
)


class ClientUpdateContainerInstancesStateResponsecontainerInstancesversionInfoTypeDef(
    _ClientUpdateContainerInstancesStateResponsecontainerInstancesversionInfoTypeDef
):
    """
    Type definition for `ClientUpdateContainerInstancesStateResponsecontainerInstances` `versionInfo`

    The version information for the Amazon ECS container agent and Docker daemon running on
    the container instance.

    - **agentVersion** *(string) --*

      The version number of the Amazon ECS container agent.

    - **agentHash** *(string) --*

      The Git commit hash for the Amazon ECS container agent build on the `amazon-ecs-agent
      <https://github.com/aws/amazon-ecs-agent/commits/master>`__ GitHub repository.

    - **dockerVersion** *(string) --*

      The Docker version running on the container instance.
    """


_ClientUpdateContainerInstancesStateResponsecontainerInstancesTypeDef = TypedDict(
    "_ClientUpdateContainerInstancesStateResponsecontainerInstancesTypeDef",
    {
        "containerInstanceArn": str,
        "ec2InstanceId": str,
        "version": int,
        "versionInfo": ClientUpdateContainerInstancesStateResponsecontainerInstancesversionInfoTypeDef,
        "remainingResources": List[
            ClientUpdateContainerInstancesStateResponsecontainerInstancesremainingResourcesTypeDef
        ],
        "registeredResources": List[
            ClientUpdateContainerInstancesStateResponsecontainerInstancesregisteredResourcesTypeDef
        ],
        "status": str,
        "statusReason": str,
        "agentConnected": bool,
        "runningTasksCount": int,
        "pendingTasksCount": int,
        "agentUpdateStatus": str,
        "attributes": List[
            ClientUpdateContainerInstancesStateResponsecontainerInstancesattributesTypeDef
        ],
        "registeredAt": datetime,
        "attachments": List[
            ClientUpdateContainerInstancesStateResponsecontainerInstancesattachmentsTypeDef
        ],
        "tags": List[
            ClientUpdateContainerInstancesStateResponsecontainerInstancestagsTypeDef
        ],
    },
    total=False,
)


class ClientUpdateContainerInstancesStateResponsecontainerInstancesTypeDef(
    _ClientUpdateContainerInstancesStateResponsecontainerInstancesTypeDef
):
    """
    Type definition for `ClientUpdateContainerInstancesStateResponse` `containerInstances`

    An EC2 instance that is running the Amazon ECS agent and has been registered with a cluster.

    - **containerInstanceArn** *(string) --*

      The Amazon Resource Name (ARN) of the container instance. The ARN contains the
      ``arn:aws:ecs`` namespace, followed by the Region of the container instance, the AWS
      account ID of the container instance owner, the ``container-instance`` namespace, and
      then the container instance ID. For example,
      ``arn:aws:ecs:region:aws_account_id:container-instance/container_instance_ID`` .

    - **ec2InstanceId** *(string) --*

      The EC2 instance ID of the container instance.

    - **version** *(integer) --*

      The version counter for the container instance. Every time a container instance
      experiences a change that triggers a CloudWatch event, the version counter is
      incremented. If you are replicating your Amazon ECS container instance state with
      CloudWatch Events, you can compare the version of a container instance reported by the
      Amazon ECS APIs with the version reported in CloudWatch Events for the container instance
      (inside the ``detail`` object) to verify that the version in your event stream is current.

    - **versionInfo** *(dict) --*

      The version information for the Amazon ECS container agent and Docker daemon running on
      the container instance.

      - **agentVersion** *(string) --*

        The version number of the Amazon ECS container agent.

      - **agentHash** *(string) --*

        The Git commit hash for the Amazon ECS container agent build on the `amazon-ecs-agent
        <https://github.com/aws/amazon-ecs-agent/commits/master>`__ GitHub repository.

      - **dockerVersion** *(string) --*

        The Docker version running on the container instance.

    - **remainingResources** *(list) --*

      For CPU and memory resource types, this parameter describes the remaining CPU and memory
      that has not already been allocated to tasks and is therefore available for new tasks.
      For port resource types, this parameter describes the ports that were reserved by the
      Amazon ECS container agent (at instance registration time) and any task containers that
      have reserved port mappings on the host (with the ``host`` or ``bridge`` network mode).
      Any port that is not specified here is available for new tasks.

      - *(dict) --*

        Describes the resources available for a container instance.

        - **name** *(string) --*

          The name of the resource, such as ``CPU`` , ``MEMORY`` , ``PORTS`` , ``PORTS_UDP`` ,
          or a user-defined resource.

        - **type** *(string) --*

          The type of the resource, such as ``INTEGER`` , ``DOUBLE`` , ``LONG`` , or
          ``STRINGSET`` .

        - **doubleValue** *(float) --*

          When the ``doubleValue`` type is set, the value of the resource must be a double
          precision floating-point type.

        - **longValue** *(integer) --*

          When the ``longValue`` type is set, the value of the resource must be an extended
          precision floating-point type.

        - **integerValue** *(integer) --*

          When the ``integerValue`` type is set, the value of the resource must be an integer.

        - **stringSetValue** *(list) --*

          When the ``stringSetValue`` type is set, the value of the resource must be a string
          type.

          - *(string) --*

    - **registeredResources** *(list) --*

      For CPU and memory resource types, this parameter describes the amount of each resource
      that was available on the container instance when the container agent registered it with
      Amazon ECS. This value represents the total amount of CPU and memory that can be
      allocated on this container instance to tasks. For port resource types, this parameter
      describes the ports that were reserved by the Amazon ECS container agent when it
      registered the container instance with Amazon ECS.

      - *(dict) --*

        Describes the resources available for a container instance.

        - **name** *(string) --*

          The name of the resource, such as ``CPU`` , ``MEMORY`` , ``PORTS`` , ``PORTS_UDP`` ,
          or a user-defined resource.

        - **type** *(string) --*

          The type of the resource, such as ``INTEGER`` , ``DOUBLE`` , ``LONG`` , or
          ``STRINGSET`` .

        - **doubleValue** *(float) --*

          When the ``doubleValue`` type is set, the value of the resource must be a double
          precision floating-point type.

        - **longValue** *(integer) --*

          When the ``longValue`` type is set, the value of the resource must be an extended
          precision floating-point type.

        - **integerValue** *(integer) --*

          When the ``integerValue`` type is set, the value of the resource must be an integer.

        - **stringSetValue** *(list) --*

          When the ``stringSetValue`` type is set, the value of the resource must be a string
          type.

          - *(string) --*

    - **status** *(string) --*

      The status of the container instance. The valid values are ``REGISTERING`` ,
      ``REGISTRATION_FAILED`` , ``ACTIVE`` , ``INACTIVE`` , ``DEREGISTERING`` , or ``DRAINING``
      .

      If your account has opted in to the ``awsvpcTrunking`` account setting, then any newly
      registered container instance will transition to a ``REGISTERING`` status while the trunk
      elastic network interface is provisioned for the instance. If the registration fails, the
      instance will transition to a ``REGISTRATION_FAILED`` status. You can describe the
      container instance and see the reason for failure in the ``statusReason`` parameter. Once
      the container instance is terminated, the instance transitions to a ``DEREGISTERING``
      status while the trunk elastic network interface is deprovisioned. The instance then
      transitions to an ``INACTIVE`` status.

      The ``ACTIVE`` status indicates that the container instance can accept tasks. The
      ``DRAINING`` indicates that new tasks are not placed on the container instance and any
      service tasks running on the container instance are removed if possible. For more
      information, see `Container Instance Draining
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/container-instance-draining.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

    - **statusReason** *(string) --*

      The reason that the container instance reached its current status.

    - **agentConnected** *(boolean) --*

      This parameter returns ``true`` if the agent is connected to Amazon ECS. Registered
      instances with an agent that may be unhealthy or stopped return ``false`` . Only
      instances connected to an agent can accept placement requests.

    - **runningTasksCount** *(integer) --*

      The number of tasks on the container instance that are in the ``RUNNING`` status.

    - **pendingTasksCount** *(integer) --*

      The number of tasks on the container instance that are in the ``PENDING`` status.

    - **agentUpdateStatus** *(string) --*

      The status of the most recent agent update. If an update has never been requested, this
      value is ``NULL`` .

    - **attributes** *(list) --*

      The attributes set for the container instance, either by the Amazon ECS container agent
      at instance registration or manually with the  PutAttributes operation.

      - *(dict) --*

        An attribute is a name-value pair associated with an Amazon ECS object. Attributes
        enable you to extend the Amazon ECS data model by adding custom metadata to your
        resources. For more information, see `Attributes
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html#attributes>`__
        in the *Amazon Elastic Container Service Developer Guide* .

        - **name** *(string) --*

          The name of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
          hyphens, underscores, and periods are allowed.

        - **value** *(string) --*

          The value of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
          hyphens, underscores, periods, at signs (@), forward slashes, colons, and spaces are
          allowed.

        - **targetType** *(string) --*

          The type of the target with which to attach the attribute. This parameter is required
          if you use the short form ID for a resource instead of the full ARN.

        - **targetId** *(string) --*

          The ID of the target. You can specify the short form ID for a resource or the full
          Amazon Resource Name (ARN).

    - **registeredAt** *(datetime) --*

      The Unix timestamp for when the container instance was registered.

    - **attachments** *(list) --*

      The resources attached to a container instance, such as elastic network interfaces.

      - *(dict) --*

        An object representing a container instance or task attachment.

        - **id** *(string) --*

          The unique identifier for the attachment.

        - **type** *(string) --*

          The type of the attachment, such as ``ElasticNetworkInterface`` .

        - **status** *(string) --*

          The status of the attachment. Valid values are ``PRECREATED`` , ``CREATED`` ,
          ``ATTACHING`` , ``ATTACHED`` , ``DETACHING`` , ``DETACHED`` , and ``DELETED`` .

        - **details** *(list) --*

          Details of the attachment. For elastic network interfaces, this includes the network
          interface ID, the MAC address, the subnet ID, and the private IPv4 address.

          - *(dict) --*

            A key-value pair object.

            - **name** *(string) --*

              The name of the key-value pair. For environment variables, this is the name of
              the environment variable.

            - **value** *(string) --*

              The value of the key-value pair. For environment variables, this is the value of
              the environment variable.

    - **tags** *(list) --*

      The metadata that you apply to the container instance to help you categorize and organize
      them. Each tag consists of a key and an optional value, both of which you define.

      The following basic restrictions apply to tags:

      * Maximum number of tags per resource - 50

      * For each resource, each tag key must be unique, and each tag key can have only one
      value.

      * Maximum key length - 128 Unicode characters in UTF-8

      * Maximum value length - 256 Unicode characters in UTF-8

      * If your tagging schema is used across multiple services and resources, remember that
      other services may have restrictions on allowed characters. Generally allowed characters
      are: letters, numbers, and spaces representable in UTF-8, and the following characters: +
      - = . _ : / @.

      * Tag keys and values are case-sensitive.

      * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
      prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
      tag keys or values with this prefix. Tags with this prefix do not count against your tags
      per resource limit.

      - *(dict) --*

        The metadata that you apply to a resource to help you categorize and organize them.
        Each tag consists of a key and an optional value, both of which you define.

        The following basic restrictions apply to tags:

        * Maximum number of tags per resource - 50

        * For each resource, each tag key must be unique, and each tag key can have only one
        value.

        * Maximum key length - 128 Unicode characters in UTF-8

        * Maximum value length - 256 Unicode characters in UTF-8

        * If your tagging schema is used across multiple services and resources, remember that
        other services may have restrictions on allowed characters. Generally allowed
        characters are: letters, numbers, and spaces representable in UTF-8, and the following
        characters: + - = . _ : / @.

        * Tag keys and values are case-sensitive.

        * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
        prefix for either keys or values as it is reserved for AWS use. You cannot edit or
        delete tag keys or values with this prefix. Tags with this prefix do not count against
        your tags per resource limit.

        - **key** *(string) --*

          One part of a key-value pair that make up a tag. A ``key`` is a general label that
          acts like a category for more specific tag values.

        - **value** *(string) --*

          The optional part of a key-value pair that make up a tag. A ``value`` acts as a
          descriptor within a tag category (key).
    """


_ClientUpdateContainerInstancesStateResponsefailuresTypeDef = TypedDict(
    "_ClientUpdateContainerInstancesStateResponsefailuresTypeDef",
    {"arn": str, "reason": str, "detail": str},
    total=False,
)


class ClientUpdateContainerInstancesStateResponsefailuresTypeDef(
    _ClientUpdateContainerInstancesStateResponsefailuresTypeDef
):
    """
    Type definition for `ClientUpdateContainerInstancesStateResponse` `failures`

    A failed resource.

    - **arn** *(string) --*

      The Amazon Resource Name (ARN) of the failed resource.

    - **reason** *(string) --*

      The reason for the failure.

    - **detail** *(string) --*

      The details of the failure.
    """


_ClientUpdateContainerInstancesStateResponseTypeDef = TypedDict(
    "_ClientUpdateContainerInstancesStateResponseTypeDef",
    {
        "containerInstances": List[
            ClientUpdateContainerInstancesStateResponsecontainerInstancesTypeDef
        ],
        "failures": List[ClientUpdateContainerInstancesStateResponsefailuresTypeDef],
    },
    total=False,
)


class ClientUpdateContainerInstancesStateResponseTypeDef(
    _ClientUpdateContainerInstancesStateResponseTypeDef
):
    """
    Type definition for `ClientUpdateContainerInstancesState` `Response`

    - **containerInstances** *(list) --*

      The list of container instances.

      - *(dict) --*

        An EC2 instance that is running the Amazon ECS agent and has been registered with a cluster.

        - **containerInstanceArn** *(string) --*

          The Amazon Resource Name (ARN) of the container instance. The ARN contains the
          ``arn:aws:ecs`` namespace, followed by the Region of the container instance, the AWS
          account ID of the container instance owner, the ``container-instance`` namespace, and
          then the container instance ID. For example,
          ``arn:aws:ecs:region:aws_account_id:container-instance/container_instance_ID`` .

        - **ec2InstanceId** *(string) --*

          The EC2 instance ID of the container instance.

        - **version** *(integer) --*

          The version counter for the container instance. Every time a container instance
          experiences a change that triggers a CloudWatch event, the version counter is
          incremented. If you are replicating your Amazon ECS container instance state with
          CloudWatch Events, you can compare the version of a container instance reported by the
          Amazon ECS APIs with the version reported in CloudWatch Events for the container instance
          (inside the ``detail`` object) to verify that the version in your event stream is current.

        - **versionInfo** *(dict) --*

          The version information for the Amazon ECS container agent and Docker daemon running on
          the container instance.

          - **agentVersion** *(string) --*

            The version number of the Amazon ECS container agent.

          - **agentHash** *(string) --*

            The Git commit hash for the Amazon ECS container agent build on the `amazon-ecs-agent
            <https://github.com/aws/amazon-ecs-agent/commits/master>`__ GitHub repository.

          - **dockerVersion** *(string) --*

            The Docker version running on the container instance.

        - **remainingResources** *(list) --*

          For CPU and memory resource types, this parameter describes the remaining CPU and memory
          that has not already been allocated to tasks and is therefore available for new tasks.
          For port resource types, this parameter describes the ports that were reserved by the
          Amazon ECS container agent (at instance registration time) and any task containers that
          have reserved port mappings on the host (with the ``host`` or ``bridge`` network mode).
          Any port that is not specified here is available for new tasks.

          - *(dict) --*

            Describes the resources available for a container instance.

            - **name** *(string) --*

              The name of the resource, such as ``CPU`` , ``MEMORY`` , ``PORTS`` , ``PORTS_UDP`` ,
              or a user-defined resource.

            - **type** *(string) --*

              The type of the resource, such as ``INTEGER`` , ``DOUBLE`` , ``LONG`` , or
              ``STRINGSET`` .

            - **doubleValue** *(float) --*

              When the ``doubleValue`` type is set, the value of the resource must be a double
              precision floating-point type.

            - **longValue** *(integer) --*

              When the ``longValue`` type is set, the value of the resource must be an extended
              precision floating-point type.

            - **integerValue** *(integer) --*

              When the ``integerValue`` type is set, the value of the resource must be an integer.

            - **stringSetValue** *(list) --*

              When the ``stringSetValue`` type is set, the value of the resource must be a string
              type.

              - *(string) --*

        - **registeredResources** *(list) --*

          For CPU and memory resource types, this parameter describes the amount of each resource
          that was available on the container instance when the container agent registered it with
          Amazon ECS. This value represents the total amount of CPU and memory that can be
          allocated on this container instance to tasks. For port resource types, this parameter
          describes the ports that were reserved by the Amazon ECS container agent when it
          registered the container instance with Amazon ECS.

          - *(dict) --*

            Describes the resources available for a container instance.

            - **name** *(string) --*

              The name of the resource, such as ``CPU`` , ``MEMORY`` , ``PORTS`` , ``PORTS_UDP`` ,
              or a user-defined resource.

            - **type** *(string) --*

              The type of the resource, such as ``INTEGER`` , ``DOUBLE`` , ``LONG`` , or
              ``STRINGSET`` .

            - **doubleValue** *(float) --*

              When the ``doubleValue`` type is set, the value of the resource must be a double
              precision floating-point type.

            - **longValue** *(integer) --*

              When the ``longValue`` type is set, the value of the resource must be an extended
              precision floating-point type.

            - **integerValue** *(integer) --*

              When the ``integerValue`` type is set, the value of the resource must be an integer.

            - **stringSetValue** *(list) --*

              When the ``stringSetValue`` type is set, the value of the resource must be a string
              type.

              - *(string) --*

        - **status** *(string) --*

          The status of the container instance. The valid values are ``REGISTERING`` ,
          ``REGISTRATION_FAILED`` , ``ACTIVE`` , ``INACTIVE`` , ``DEREGISTERING`` , or ``DRAINING``
          .

          If your account has opted in to the ``awsvpcTrunking`` account setting, then any newly
          registered container instance will transition to a ``REGISTERING`` status while the trunk
          elastic network interface is provisioned for the instance. If the registration fails, the
          instance will transition to a ``REGISTRATION_FAILED`` status. You can describe the
          container instance and see the reason for failure in the ``statusReason`` parameter. Once
          the container instance is terminated, the instance transitions to a ``DEREGISTERING``
          status while the trunk elastic network interface is deprovisioned. The instance then
          transitions to an ``INACTIVE`` status.

          The ``ACTIVE`` status indicates that the container instance can accept tasks. The
          ``DRAINING`` indicates that new tasks are not placed on the container instance and any
          service tasks running on the container instance are removed if possible. For more
          information, see `Container Instance Draining
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/container-instance-draining.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

        - **statusReason** *(string) --*

          The reason that the container instance reached its current status.

        - **agentConnected** *(boolean) --*

          This parameter returns ``true`` if the agent is connected to Amazon ECS. Registered
          instances with an agent that may be unhealthy or stopped return ``false`` . Only
          instances connected to an agent can accept placement requests.

        - **runningTasksCount** *(integer) --*

          The number of tasks on the container instance that are in the ``RUNNING`` status.

        - **pendingTasksCount** *(integer) --*

          The number of tasks on the container instance that are in the ``PENDING`` status.

        - **agentUpdateStatus** *(string) --*

          The status of the most recent agent update. If an update has never been requested, this
          value is ``NULL`` .

        - **attributes** *(list) --*

          The attributes set for the container instance, either by the Amazon ECS container agent
          at instance registration or manually with the  PutAttributes operation.

          - *(dict) --*

            An attribute is a name-value pair associated with an Amazon ECS object. Attributes
            enable you to extend the Amazon ECS data model by adding custom metadata to your
            resources. For more information, see `Attributes
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html#attributes>`__
            in the *Amazon Elastic Container Service Developer Guide* .

            - **name** *(string) --*

              The name of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
              hyphens, underscores, and periods are allowed.

            - **value** *(string) --*

              The value of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
              hyphens, underscores, periods, at signs (@), forward slashes, colons, and spaces are
              allowed.

            - **targetType** *(string) --*

              The type of the target with which to attach the attribute. This parameter is required
              if you use the short form ID for a resource instead of the full ARN.

            - **targetId** *(string) --*

              The ID of the target. You can specify the short form ID for a resource or the full
              Amazon Resource Name (ARN).

        - **registeredAt** *(datetime) --*

          The Unix timestamp for when the container instance was registered.

        - **attachments** *(list) --*

          The resources attached to a container instance, such as elastic network interfaces.

          - *(dict) --*

            An object representing a container instance or task attachment.

            - **id** *(string) --*

              The unique identifier for the attachment.

            - **type** *(string) --*

              The type of the attachment, such as ``ElasticNetworkInterface`` .

            - **status** *(string) --*

              The status of the attachment. Valid values are ``PRECREATED`` , ``CREATED`` ,
              ``ATTACHING`` , ``ATTACHED`` , ``DETACHING`` , ``DETACHED`` , and ``DELETED`` .

            - **details** *(list) --*

              Details of the attachment. For elastic network interfaces, this includes the network
              interface ID, the MAC address, the subnet ID, and the private IPv4 address.

              - *(dict) --*

                A key-value pair object.

                - **name** *(string) --*

                  The name of the key-value pair. For environment variables, this is the name of
                  the environment variable.

                - **value** *(string) --*

                  The value of the key-value pair. For environment variables, this is the value of
                  the environment variable.

        - **tags** *(list) --*

          The metadata that you apply to the container instance to help you categorize and organize
          them. Each tag consists of a key and an optional value, both of which you define.

          The following basic restrictions apply to tags:

          * Maximum number of tags per resource - 50

          * For each resource, each tag key must be unique, and each tag key can have only one
          value.

          * Maximum key length - 128 Unicode characters in UTF-8

          * Maximum value length - 256 Unicode characters in UTF-8

          * If your tagging schema is used across multiple services and resources, remember that
          other services may have restrictions on allowed characters. Generally allowed characters
          are: letters, numbers, and spaces representable in UTF-8, and the following characters: +
          - = . _ : / @.

          * Tag keys and values are case-sensitive.

          * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
          prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
          tag keys or values with this prefix. Tags with this prefix do not count against your tags
          per resource limit.

          - *(dict) --*

            The metadata that you apply to a resource to help you categorize and organize them.
            Each tag consists of a key and an optional value, both of which you define.

            The following basic restrictions apply to tags:

            * Maximum number of tags per resource - 50

            * For each resource, each tag key must be unique, and each tag key can have only one
            value.

            * Maximum key length - 128 Unicode characters in UTF-8

            * Maximum value length - 256 Unicode characters in UTF-8

            * If your tagging schema is used across multiple services and resources, remember that
            other services may have restrictions on allowed characters. Generally allowed
            characters are: letters, numbers, and spaces representable in UTF-8, and the following
            characters: + - = . _ : / @.

            * Tag keys and values are case-sensitive.

            * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
            prefix for either keys or values as it is reserved for AWS use. You cannot edit or
            delete tag keys or values with this prefix. Tags with this prefix do not count against
            your tags per resource limit.

            - **key** *(string) --*

              One part of a key-value pair that make up a tag. A ``key`` is a general label that
              acts like a category for more specific tag values.

            - **value** *(string) --*

              The optional part of a key-value pair that make up a tag. A ``value`` acts as a
              descriptor within a tag category (key).

    - **failures** *(list) --*

      Any failures associated with the call.

      - *(dict) --*

        A failed resource.

        - **arn** *(string) --*

          The Amazon Resource Name (ARN) of the failed resource.

        - **reason** *(string) --*

          The reason for the failure.

        - **detail** *(string) --*

          The details of the failure.
    """


_ClientUpdateServicePrimaryTaskSetResponsetaskSetloadBalancersTypeDef = TypedDict(
    "_ClientUpdateServicePrimaryTaskSetResponsetaskSetloadBalancersTypeDef",
    {
        "targetGroupArn": str,
        "loadBalancerName": str,
        "containerName": str,
        "containerPort": int,
    },
    total=False,
)


class ClientUpdateServicePrimaryTaskSetResponsetaskSetloadBalancersTypeDef(
    _ClientUpdateServicePrimaryTaskSetResponsetaskSetloadBalancersTypeDef
):
    """
    Type definition for `ClientUpdateServicePrimaryTaskSetResponsetaskSet` `loadBalancers`

    Details on the load balancer or load balancers to use with a service or task set.

    - **targetGroupArn** *(string) --*

      The full Amazon Resource Name (ARN) of the Elastic Load Balancing target group or
      groups associated with a service or task set.

      A target group ARN is only specified when using an Application Load Balancer or Network
      Load Balancer. If you are using a Classic Load Balancer this should be omitted.

      For services using the ``ECS`` deployment controller, you can specify one or multiple
      target groups. For more information, see `Registering Multiple Target Groups with a
      Service
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

      For services using the ``CODE_DEPLOY`` deployment controller, you are required to
      define two target groups for the load balancer. For more information, see `Blue/Green
      Deployment with CodeDeploy
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-bluegreen.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

      .. warning::

        If your service's task definition uses the ``awsvpc`` network mode (which is required
        for the Fargate launch type), you must choose ``ip`` as the target type, not
        ``instance`` , when creating your target groups because tasks that use the ``awsvpc``
        network mode are associated with an elastic network interface, not an Amazon EC2
        instance.

    - **loadBalancerName** *(string) --*

      The name of the load balancer to associate with the Amazon ECS service or task set.

      A load balancer name is only specified when using a Classic Load Balancer. If you are
      using an Application Load Balancer or a Network Load Balancer this should be omitted.

    - **containerName** *(string) --*

      The name of the container (as it appears in a container definition) to associate with
      the load balancer.

    - **containerPort** *(integer) --*

      The port on the container to associate with the load balancer. This port must
      correspond to a ``containerPort`` in the task definition the tasks in the service are
      using. For tasks that use the EC2 launch type, the container instance they are launched
      on must allow ingress traffic on the ``hostPort`` of the port mapping.
    """


_ClientUpdateServicePrimaryTaskSetResponsetaskSetnetworkConfigurationawsvpcConfigurationTypeDef = TypedDict(
    "_ClientUpdateServicePrimaryTaskSetResponsetaskSetnetworkConfigurationawsvpcConfigurationTypeDef",
    {"subnets": List[str], "securityGroups": List[str], "assignPublicIp": str},
    total=False,
)


class ClientUpdateServicePrimaryTaskSetResponsetaskSetnetworkConfigurationawsvpcConfigurationTypeDef(
    _ClientUpdateServicePrimaryTaskSetResponsetaskSetnetworkConfigurationawsvpcConfigurationTypeDef
):
    """
    Type definition for `ClientUpdateServicePrimaryTaskSetResponsetaskSetnetworkConfiguration` `awsvpcConfiguration`

    The VPC subnets and security groups associated with a task.

    .. note::

      All specified subnets and security groups must be from the same VPC.

    - **subnets** *(list) --*

      The subnets associated with the task or service. There is a limit of 16 subnets that
      can be specified per ``AwsVpcConfiguration`` .

      .. note::

        All specified subnets must be from the same VPC.

      - *(string) --*

    - **securityGroups** *(list) --*

      The security groups associated with the task or service. If you do not specify a
      security group, the default security group for the VPC is used. There is a limit of 5
      security groups that can be specified per ``AwsVpcConfiguration`` .

      .. note::

        All specified security groups must be from the same VPC.

      - *(string) --*

    - **assignPublicIp** *(string) --*

      Whether the task's elastic network interface receives a public IP address. The default
      value is ``DISABLED`` .
    """


_ClientUpdateServicePrimaryTaskSetResponsetaskSetnetworkConfigurationTypeDef = TypedDict(
    "_ClientUpdateServicePrimaryTaskSetResponsetaskSetnetworkConfigurationTypeDef",
    {
        "awsvpcConfiguration": ClientUpdateServicePrimaryTaskSetResponsetaskSetnetworkConfigurationawsvpcConfigurationTypeDef
    },
    total=False,
)


class ClientUpdateServicePrimaryTaskSetResponsetaskSetnetworkConfigurationTypeDef(
    _ClientUpdateServicePrimaryTaskSetResponsetaskSetnetworkConfigurationTypeDef
):
    """
    Type definition for `ClientUpdateServicePrimaryTaskSetResponsetaskSet` `networkConfiguration`

    The network configuration for the task set.

    - **awsvpcConfiguration** *(dict) --*

      The VPC subnets and security groups associated with a task.

      .. note::

        All specified subnets and security groups must be from the same VPC.

      - **subnets** *(list) --*

        The subnets associated with the task or service. There is a limit of 16 subnets that
        can be specified per ``AwsVpcConfiguration`` .

        .. note::

          All specified subnets must be from the same VPC.

        - *(string) --*

      - **securityGroups** *(list) --*

        The security groups associated with the task or service. If you do not specify a
        security group, the default security group for the VPC is used. There is a limit of 5
        security groups that can be specified per ``AwsVpcConfiguration`` .

        .. note::

          All specified security groups must be from the same VPC.

        - *(string) --*

      - **assignPublicIp** *(string) --*

        Whether the task's elastic network interface receives a public IP address. The default
        value is ``DISABLED`` .
    """


_ClientUpdateServicePrimaryTaskSetResponsetaskSetscaleTypeDef = TypedDict(
    "_ClientUpdateServicePrimaryTaskSetResponsetaskSetscaleTypeDef",
    {"value": float, "unit": str},
    total=False,
)


class ClientUpdateServicePrimaryTaskSetResponsetaskSetscaleTypeDef(
    _ClientUpdateServicePrimaryTaskSetResponsetaskSetscaleTypeDef
):
    """
    Type definition for `ClientUpdateServicePrimaryTaskSetResponsetaskSet` `scale`

    A floating-point percentage of the desired number of tasks to place and keep running in the
    task set.

    - **value** *(float) --*

      The value, specified as a percent total of a service's ``desiredCount`` , to scale the
      task set. Accepted values are numbers between 0 and 100.

    - **unit** *(string) --*

      The unit of measure for the scale value.
    """


_ClientUpdateServicePrimaryTaskSetResponsetaskSetserviceRegistriesTypeDef = TypedDict(
    "_ClientUpdateServicePrimaryTaskSetResponsetaskSetserviceRegistriesTypeDef",
    {"registryArn": str, "port": int, "containerName": str, "containerPort": int},
    total=False,
)


class ClientUpdateServicePrimaryTaskSetResponsetaskSetserviceRegistriesTypeDef(
    _ClientUpdateServicePrimaryTaskSetResponsetaskSetserviceRegistriesTypeDef
):
    """
    Type definition for `ClientUpdateServicePrimaryTaskSetResponsetaskSet` `serviceRegistries`

    Details of the service registry.

    - **registryArn** *(string) --*

      The Amazon Resource Name (ARN) of the service registry. The currently supported service
      registry is AWS Cloud Map. For more information, see `CreateService
      <https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html>`__ .

    - **port** *(integer) --*

      The port value used if your service discovery service specified an SRV record. This
      field may be used if both the ``awsvpc`` network mode and SRV records are used.

    - **containerName** *(string) --*

      The container name value, already specified in the task definition, to be used for your
      service discovery service. If the task definition that your service task specifies uses
      the ``bridge`` or ``host`` network mode, you must specify a ``containerName`` and
      ``containerPort`` combination from the task definition. If the task definition that
      your service task specifies uses the ``awsvpc`` network mode and a type SRV DNS record
      is used, you must specify either a ``containerName`` and ``containerPort`` combination
      or a ``port`` value, but not both.

    - **containerPort** *(integer) --*

      The port value, already specified in the task definition, to be used for your service
      discovery service. If the task definition your service task specifies uses the
      ``bridge`` or ``host`` network mode, you must specify a ``containerName`` and
      ``containerPort`` combination from the task definition. If the task definition your
      service task specifies uses the ``awsvpc`` network mode and a type SRV DNS record is
      used, you must specify either a ``containerName`` and ``containerPort`` combination or
      a ``port`` value, but not both.
    """


_ClientUpdateServicePrimaryTaskSetResponsetaskSetTypeDef = TypedDict(
    "_ClientUpdateServicePrimaryTaskSetResponsetaskSetTypeDef",
    {
        "id": str,
        "taskSetArn": str,
        "serviceArn": str,
        "clusterArn": str,
        "startedBy": str,
        "externalId": str,
        "status": str,
        "taskDefinition": str,
        "computedDesiredCount": int,
        "pendingCount": int,
        "runningCount": int,
        "createdAt": datetime,
        "updatedAt": datetime,
        "launchType": str,
        "platformVersion": str,
        "networkConfiguration": ClientUpdateServicePrimaryTaskSetResponsetaskSetnetworkConfigurationTypeDef,
        "loadBalancers": List[
            ClientUpdateServicePrimaryTaskSetResponsetaskSetloadBalancersTypeDef
        ],
        "serviceRegistries": List[
            ClientUpdateServicePrimaryTaskSetResponsetaskSetserviceRegistriesTypeDef
        ],
        "scale": ClientUpdateServicePrimaryTaskSetResponsetaskSetscaleTypeDef,
        "stabilityStatus": str,
        "stabilityStatusAt": datetime,
    },
    total=False,
)


class ClientUpdateServicePrimaryTaskSetResponsetaskSetTypeDef(
    _ClientUpdateServicePrimaryTaskSetResponsetaskSetTypeDef
):
    """
    Type definition for `ClientUpdateServicePrimaryTaskSetResponse` `taskSet`

    Information about a set of Amazon ECS tasks in either an AWS CodeDeploy or an ``EXTERNAL``
    deployment. An Amazon ECS task set includes details such as the desired number of tasks, how
    many tasks are running, and whether the task set serves production traffic.

    - **id** *(string) --*

      The ID of the task set.

    - **taskSetArn** *(string) --*

      The Amazon Resource Name (ARN) of the task set.

    - **serviceArn** *(string) --*

      The Amazon Resource Name (ARN) of the service the task set exists in.

    - **clusterArn** *(string) --*

      The Amazon Resource Name (ARN) of the cluster that the service that hosts the task set
      exists in.

    - **startedBy** *(string) --*

      The tag specified when a task set is started. If the task set is created by an AWS
      CodeDeploy deployment, the ``startedBy`` parameter is ``CODE_DEPLOY`` . For a task set
      created for an external deployment, the startedBy field isn't used.

    - **externalId** *(string) --*

      The external ID associated with the task set.

      If a task set is created by an AWS CodeDeploy deployment, the ``externalId`` parameter
      contains the AWS CodeDeploy deployment ID.

      If a task set is created for an external deployment and is associated with a service
      discovery registry, the ``externalId`` parameter contains the ``ECS_TASK_SET_EXTERNAL_ID``
      AWS Cloud Map attribute.

    - **status** *(string) --*

      The status of the task set. The following describes each state:

        PRIMARY

      The task set is serving production traffic.

        ACTIVE

      The task set is not serving production traffic.

        DRAINING

      The tasks in the task set are being stopped and their corresponding targets are being
      deregistered from their target group.

    - **taskDefinition** *(string) --*

      The task definition the task set is using.

    - **computedDesiredCount** *(integer) --*

      The computed desired count for the task set. This is calculated by multiplying the
      service's ``desiredCount`` by the task set's ``scale`` percentage. The result is always
      rounded up. For example, if the computed desired count is 1.2, it rounds up to 2 tasks.

    - **pendingCount** *(integer) --*

      The number of tasks in the task set that are in the ``PENDING`` status during a deployment.
      A task in the ``PENDING`` state is preparing to enter the ``RUNNING`` state. A task set
      enters the ``PENDING`` status when it launches for the first time or when it is restarted
      after being in the ``STOPPED`` state.

    - **runningCount** *(integer) --*

      The number of tasks in the task set that are in the ``RUNNING`` status during a deployment.
      A task in the ``RUNNING`` state is running and ready for use.

    - **createdAt** *(datetime) --*

      The Unix timestamp for when the task set was created.

    - **updatedAt** *(datetime) --*

      The Unix timestamp for when the task set was last updated.

    - **launchType** *(string) --*

      The launch type the tasks in the task set are using. For more information, see `Amazon ECS
      Launch Types
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html>`__ in the
      *Amazon Elastic Container Service Developer Guide* .

    - **platformVersion** *(string) --*

      The platform version on which the tasks in the task set are running. A platform version is
      only specified for tasks using the Fargate launch type. If one is not specified, the
      ``LATEST`` platform version is used by default. For more information, see `AWS Fargate
      Platform Versions
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html>`__ in
      the *Amazon Elastic Container Service Developer Guide* .

    - **networkConfiguration** *(dict) --*

      The network configuration for the task set.

      - **awsvpcConfiguration** *(dict) --*

        The VPC subnets and security groups associated with a task.

        .. note::

          All specified subnets and security groups must be from the same VPC.

        - **subnets** *(list) --*

          The subnets associated with the task or service. There is a limit of 16 subnets that
          can be specified per ``AwsVpcConfiguration`` .

          .. note::

            All specified subnets must be from the same VPC.

          - *(string) --*

        - **securityGroups** *(list) --*

          The security groups associated with the task or service. If you do not specify a
          security group, the default security group for the VPC is used. There is a limit of 5
          security groups that can be specified per ``AwsVpcConfiguration`` .

          .. note::

            All specified security groups must be from the same VPC.

          - *(string) --*

        - **assignPublicIp** *(string) --*

          Whether the task's elastic network interface receives a public IP address. The default
          value is ``DISABLED`` .

    - **loadBalancers** *(list) --*

      Details on a load balancer that is used with a task set.

      - *(dict) --*

        Details on the load balancer or load balancers to use with a service or task set.

        - **targetGroupArn** *(string) --*

          The full Amazon Resource Name (ARN) of the Elastic Load Balancing target group or
          groups associated with a service or task set.

          A target group ARN is only specified when using an Application Load Balancer or Network
          Load Balancer. If you are using a Classic Load Balancer this should be omitted.

          For services using the ``ECS`` deployment controller, you can specify one or multiple
          target groups. For more information, see `Registering Multiple Target Groups with a
          Service
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

          For services using the ``CODE_DEPLOY`` deployment controller, you are required to
          define two target groups for the load balancer. For more information, see `Blue/Green
          Deployment with CodeDeploy
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-bluegreen.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

          .. warning::

            If your service's task definition uses the ``awsvpc`` network mode (which is required
            for the Fargate launch type), you must choose ``ip`` as the target type, not
            ``instance`` , when creating your target groups because tasks that use the ``awsvpc``
            network mode are associated with an elastic network interface, not an Amazon EC2
            instance.

        - **loadBalancerName** *(string) --*

          The name of the load balancer to associate with the Amazon ECS service or task set.

          A load balancer name is only specified when using a Classic Load Balancer. If you are
          using an Application Load Balancer or a Network Load Balancer this should be omitted.

        - **containerName** *(string) --*

          The name of the container (as it appears in a container definition) to associate with
          the load balancer.

        - **containerPort** *(integer) --*

          The port on the container to associate with the load balancer. This port must
          correspond to a ``containerPort`` in the task definition the tasks in the service are
          using. For tasks that use the EC2 launch type, the container instance they are launched
          on must allow ingress traffic on the ``hostPort`` of the port mapping.

    - **serviceRegistries** *(list) --*

      The details of the service discovery registries to assign to this task set. For more
      information, see `Service Discovery
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html>`__ .

      - *(dict) --*

        Details of the service registry.

        - **registryArn** *(string) --*

          The Amazon Resource Name (ARN) of the service registry. The currently supported service
          registry is AWS Cloud Map. For more information, see `CreateService
          <https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html>`__ .

        - **port** *(integer) --*

          The port value used if your service discovery service specified an SRV record. This
          field may be used if both the ``awsvpc`` network mode and SRV records are used.

        - **containerName** *(string) --*

          The container name value, already specified in the task definition, to be used for your
          service discovery service. If the task definition that your service task specifies uses
          the ``bridge`` or ``host`` network mode, you must specify a ``containerName`` and
          ``containerPort`` combination from the task definition. If the task definition that
          your service task specifies uses the ``awsvpc`` network mode and a type SRV DNS record
          is used, you must specify either a ``containerName`` and ``containerPort`` combination
          or a ``port`` value, but not both.

        - **containerPort** *(integer) --*

          The port value, already specified in the task definition, to be used for your service
          discovery service. If the task definition your service task specifies uses the
          ``bridge`` or ``host`` network mode, you must specify a ``containerName`` and
          ``containerPort`` combination from the task definition. If the task definition your
          service task specifies uses the ``awsvpc`` network mode and a type SRV DNS record is
          used, you must specify either a ``containerName`` and ``containerPort`` combination or
          a ``port`` value, but not both.

    - **scale** *(dict) --*

      A floating-point percentage of the desired number of tasks to place and keep running in the
      task set.

      - **value** *(float) --*

        The value, specified as a percent total of a service's ``desiredCount`` , to scale the
        task set. Accepted values are numbers between 0 and 100.

      - **unit** *(string) --*

        The unit of measure for the scale value.

    - **stabilityStatus** *(string) --*

      The stability status, which indicates whether the task set has reached a steady state. If
      the following conditions are met, the task set will be in ``STEADY_STATE`` :

      * The task ``runningCount`` is equal to the ``computedDesiredCount`` .

      * The ``pendingCount`` is ``0`` .

      * There are no tasks running on container instances in the ``DRAINING`` status.

      * All tasks are reporting a healthy status from the load balancers, service discovery, and
      container health checks.

      If any of those conditions are not met, the stability status returns ``STABILIZING`` .

    - **stabilityStatusAt** *(datetime) --*

      The Unix timestamp for when the task set stability status was retrieved.
    """


_ClientUpdateServicePrimaryTaskSetResponseTypeDef = TypedDict(
    "_ClientUpdateServicePrimaryTaskSetResponseTypeDef",
    {"taskSet": ClientUpdateServicePrimaryTaskSetResponsetaskSetTypeDef},
    total=False,
)


class ClientUpdateServicePrimaryTaskSetResponseTypeDef(
    _ClientUpdateServicePrimaryTaskSetResponseTypeDef
):
    """
    Type definition for `ClientUpdateServicePrimaryTaskSet` `Response`

    - **taskSet** *(dict) --*

      Information about a set of Amazon ECS tasks in either an AWS CodeDeploy or an ``EXTERNAL``
      deployment. An Amazon ECS task set includes details such as the desired number of tasks, how
      many tasks are running, and whether the task set serves production traffic.

      - **id** *(string) --*

        The ID of the task set.

      - **taskSetArn** *(string) --*

        The Amazon Resource Name (ARN) of the task set.

      - **serviceArn** *(string) --*

        The Amazon Resource Name (ARN) of the service the task set exists in.

      - **clusterArn** *(string) --*

        The Amazon Resource Name (ARN) of the cluster that the service that hosts the task set
        exists in.

      - **startedBy** *(string) --*

        The tag specified when a task set is started. If the task set is created by an AWS
        CodeDeploy deployment, the ``startedBy`` parameter is ``CODE_DEPLOY`` . For a task set
        created for an external deployment, the startedBy field isn't used.

      - **externalId** *(string) --*

        The external ID associated with the task set.

        If a task set is created by an AWS CodeDeploy deployment, the ``externalId`` parameter
        contains the AWS CodeDeploy deployment ID.

        If a task set is created for an external deployment and is associated with a service
        discovery registry, the ``externalId`` parameter contains the ``ECS_TASK_SET_EXTERNAL_ID``
        AWS Cloud Map attribute.

      - **status** *(string) --*

        The status of the task set. The following describes each state:

          PRIMARY

        The task set is serving production traffic.

          ACTIVE

        The task set is not serving production traffic.

          DRAINING

        The tasks in the task set are being stopped and their corresponding targets are being
        deregistered from their target group.

      - **taskDefinition** *(string) --*

        The task definition the task set is using.

      - **computedDesiredCount** *(integer) --*

        The computed desired count for the task set. This is calculated by multiplying the
        service's ``desiredCount`` by the task set's ``scale`` percentage. The result is always
        rounded up. For example, if the computed desired count is 1.2, it rounds up to 2 tasks.

      - **pendingCount** *(integer) --*

        The number of tasks in the task set that are in the ``PENDING`` status during a deployment.
        A task in the ``PENDING`` state is preparing to enter the ``RUNNING`` state. A task set
        enters the ``PENDING`` status when it launches for the first time or when it is restarted
        after being in the ``STOPPED`` state.

      - **runningCount** *(integer) --*

        The number of tasks in the task set that are in the ``RUNNING`` status during a deployment.
        A task in the ``RUNNING`` state is running and ready for use.

      - **createdAt** *(datetime) --*

        The Unix timestamp for when the task set was created.

      - **updatedAt** *(datetime) --*

        The Unix timestamp for when the task set was last updated.

      - **launchType** *(string) --*

        The launch type the tasks in the task set are using. For more information, see `Amazon ECS
        Launch Types
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html>`__ in the
        *Amazon Elastic Container Service Developer Guide* .

      - **platformVersion** *(string) --*

        The platform version on which the tasks in the task set are running. A platform version is
        only specified for tasks using the Fargate launch type. If one is not specified, the
        ``LATEST`` platform version is used by default. For more information, see `AWS Fargate
        Platform Versions
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html>`__ in
        the *Amazon Elastic Container Service Developer Guide* .

      - **networkConfiguration** *(dict) --*

        The network configuration for the task set.

        - **awsvpcConfiguration** *(dict) --*

          The VPC subnets and security groups associated with a task.

          .. note::

            All specified subnets and security groups must be from the same VPC.

          - **subnets** *(list) --*

            The subnets associated with the task or service. There is a limit of 16 subnets that
            can be specified per ``AwsVpcConfiguration`` .

            .. note::

              All specified subnets must be from the same VPC.

            - *(string) --*

          - **securityGroups** *(list) --*

            The security groups associated with the task or service. If you do not specify a
            security group, the default security group for the VPC is used. There is a limit of 5
            security groups that can be specified per ``AwsVpcConfiguration`` .

            .. note::

              All specified security groups must be from the same VPC.

            - *(string) --*

          - **assignPublicIp** *(string) --*

            Whether the task's elastic network interface receives a public IP address. The default
            value is ``DISABLED`` .

      - **loadBalancers** *(list) --*

        Details on a load balancer that is used with a task set.

        - *(dict) --*

          Details on the load balancer or load balancers to use with a service or task set.

          - **targetGroupArn** *(string) --*

            The full Amazon Resource Name (ARN) of the Elastic Load Balancing target group or
            groups associated with a service or task set.

            A target group ARN is only specified when using an Application Load Balancer or Network
            Load Balancer. If you are using a Classic Load Balancer this should be omitted.

            For services using the ``ECS`` deployment controller, you can specify one or multiple
            target groups. For more information, see `Registering Multiple Target Groups with a
            Service
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html>`__
            in the *Amazon Elastic Container Service Developer Guide* .

            For services using the ``CODE_DEPLOY`` deployment controller, you are required to
            define two target groups for the load balancer. For more information, see `Blue/Green
            Deployment with CodeDeploy
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-bluegreen.html>`__
            in the *Amazon Elastic Container Service Developer Guide* .

            .. warning::

              If your service's task definition uses the ``awsvpc`` network mode (which is required
              for the Fargate launch type), you must choose ``ip`` as the target type, not
              ``instance`` , when creating your target groups because tasks that use the ``awsvpc``
              network mode are associated with an elastic network interface, not an Amazon EC2
              instance.

          - **loadBalancerName** *(string) --*

            The name of the load balancer to associate with the Amazon ECS service or task set.

            A load balancer name is only specified when using a Classic Load Balancer. If you are
            using an Application Load Balancer or a Network Load Balancer this should be omitted.

          - **containerName** *(string) --*

            The name of the container (as it appears in a container definition) to associate with
            the load balancer.

          - **containerPort** *(integer) --*

            The port on the container to associate with the load balancer. This port must
            correspond to a ``containerPort`` in the task definition the tasks in the service are
            using. For tasks that use the EC2 launch type, the container instance they are launched
            on must allow ingress traffic on the ``hostPort`` of the port mapping.

      - **serviceRegistries** *(list) --*

        The details of the service discovery registries to assign to this task set. For more
        information, see `Service Discovery
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html>`__ .

        - *(dict) --*

          Details of the service registry.

          - **registryArn** *(string) --*

            The Amazon Resource Name (ARN) of the service registry. The currently supported service
            registry is AWS Cloud Map. For more information, see `CreateService
            <https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html>`__ .

          - **port** *(integer) --*

            The port value used if your service discovery service specified an SRV record. This
            field may be used if both the ``awsvpc`` network mode and SRV records are used.

          - **containerName** *(string) --*

            The container name value, already specified in the task definition, to be used for your
            service discovery service. If the task definition that your service task specifies uses
            the ``bridge`` or ``host`` network mode, you must specify a ``containerName`` and
            ``containerPort`` combination from the task definition. If the task definition that
            your service task specifies uses the ``awsvpc`` network mode and a type SRV DNS record
            is used, you must specify either a ``containerName`` and ``containerPort`` combination
            or a ``port`` value, but not both.

          - **containerPort** *(integer) --*

            The port value, already specified in the task definition, to be used for your service
            discovery service. If the task definition your service task specifies uses the
            ``bridge`` or ``host`` network mode, you must specify a ``containerName`` and
            ``containerPort`` combination from the task definition. If the task definition your
            service task specifies uses the ``awsvpc`` network mode and a type SRV DNS record is
            used, you must specify either a ``containerName`` and ``containerPort`` combination or
            a ``port`` value, but not both.

      - **scale** *(dict) --*

        A floating-point percentage of the desired number of tasks to place and keep running in the
        task set.

        - **value** *(float) --*

          The value, specified as a percent total of a service's ``desiredCount`` , to scale the
          task set. Accepted values are numbers between 0 and 100.

        - **unit** *(string) --*

          The unit of measure for the scale value.

      - **stabilityStatus** *(string) --*

        The stability status, which indicates whether the task set has reached a steady state. If
        the following conditions are met, the task set will be in ``STEADY_STATE`` :

        * The task ``runningCount`` is equal to the ``computedDesiredCount`` .

        * The ``pendingCount`` is ``0`` .

        * There are no tasks running on container instances in the ``DRAINING`` status.

        * All tasks are reporting a healthy status from the load balancers, service discovery, and
        container health checks.

        If any of those conditions are not met, the stability status returns ``STABILIZING`` .

      - **stabilityStatusAt** *(datetime) --*

        The Unix timestamp for when the task set stability status was retrieved.
    """


_ClientUpdateServiceResponseservicedeploymentConfigurationTypeDef = TypedDict(
    "_ClientUpdateServiceResponseservicedeploymentConfigurationTypeDef",
    {"maximumPercent": int, "minimumHealthyPercent": int},
    total=False,
)


class ClientUpdateServiceResponseservicedeploymentConfigurationTypeDef(
    _ClientUpdateServiceResponseservicedeploymentConfigurationTypeDef
):
    """
    Type definition for `ClientUpdateServiceResponseservice` `deploymentConfiguration`

    Optional deployment parameters that control how many tasks run during the deployment and
    the ordering of stopping and starting tasks.

    - **maximumPercent** *(integer) --*

      If a service is using the rolling update (``ECS`` ) deployment type, the **maximum
      percent** parameter represents an upper limit on the number of tasks in a service that
      are allowed in the ``RUNNING`` or ``PENDING`` state during a deployment, as a percentage
      of the desired number of tasks (rounded down to the nearest integer), and while any
      container instances are in the ``DRAINING`` state if the service contains tasks using the
      EC2 launch type. This parameter enables you to define the deployment batch size. For
      example, if your service has a desired number of four tasks and a maximum percent value
      of 200%, the scheduler may start four new tasks before stopping the four older tasks
      (provided that the cluster resources required to do this are available). The default
      value for maximum percent is 200%.

      If a service is using the blue/green (``CODE_DEPLOY`` ) or ``EXTERNAL`` deployment types
      and tasks that use the EC2 launch type, the **maximum percent** value is set to the
      default value and is used to define the upper limit on the number of the tasks in the
      service that remain in the ``RUNNING`` state while the container instances are in the
      ``DRAINING`` state. If the tasks in the service use the Fargate launch type, the maximum
      percent value is not used, although it is returned when describing your service.

    - **minimumHealthyPercent** *(integer) --*

      If a service is using the rolling update (``ECS`` ) deployment type, the **minimum
      healthy percent** represents a lower limit on the number of tasks in a service that must
      remain in the ``RUNNING`` state during a deployment, as a percentage of the desired
      number of tasks (rounded up to the nearest integer), and while any container instances
      are in the ``DRAINING`` state if the service contains tasks using the EC2 launch type.
      This parameter enables you to deploy without using additional cluster capacity. For
      example, if your service has a desired number of four tasks and a minimum healthy percent
      of 50%, the scheduler may stop two existing tasks to free up cluster capacity before
      starting two new tasks. Tasks for services that *do not* use a load balancer are
      considered healthy if they are in the ``RUNNING`` state; tasks for services that *do* use
      a load balancer are considered healthy if they are in the ``RUNNING`` state and they are
      reported as healthy by the load balancer. The default value for minimum healthy percent
      is 100%.

      If a service is using the blue/green (``CODE_DEPLOY`` ) or ``EXTERNAL`` deployment types
      and tasks that use the EC2 launch type, the **minimum healthy percent** value is set to
      the default value and is used to define the lower limit on the number of the tasks in the
      service that remain in the ``RUNNING`` state while the container instances are in the
      ``DRAINING`` state. If the tasks in the service use the Fargate launch type, the minimum
      healthy percent value is not used, although it is returned when describing your service.
    """


_ClientUpdateServiceResponseservicedeploymentControllerTypeDef = TypedDict(
    "_ClientUpdateServiceResponseservicedeploymentControllerTypeDef",
    {"type": str},
    total=False,
)


class ClientUpdateServiceResponseservicedeploymentControllerTypeDef(
    _ClientUpdateServiceResponseservicedeploymentControllerTypeDef
):
    """
    Type definition for `ClientUpdateServiceResponseservice` `deploymentController`

    The deployment controller type the service is using. When using the DescribeServices API,
    this field is omitted if the service is using the ``ECS`` deployment controller type.

    - **type** *(string) --*

      The deployment controller type to use.

      There are three deployment controller types available:

        ECS

      The rolling update (``ECS`` ) deployment type involves replacing the current running
      version of the container with the latest version. The number of containers Amazon ECS
      adds or removes from the service during a rolling update is controlled by adjusting the
      minimum and maximum number of healthy tasks allowed during a service deployment, as
      specified in the  DeploymentConfiguration .

        CODE_DEPLOY

      The blue/green (``CODE_DEPLOY`` ) deployment type uses the blue/green deployment model
      powered by AWS CodeDeploy, which allows you to verify a new deployment of a service
      before sending production traffic to it.

        EXTERNAL

      The external (``EXTERNAL`` ) deployment type enables you to use any third-party
      deployment controller for full control over the deployment process for an Amazon ECS
      service.
    """


_ClientUpdateServiceResponseservicedeploymentsnetworkConfigurationawsvpcConfigurationTypeDef = TypedDict(
    "_ClientUpdateServiceResponseservicedeploymentsnetworkConfigurationawsvpcConfigurationTypeDef",
    {"subnets": List[str], "securityGroups": List[str], "assignPublicIp": str},
    total=False,
)


class ClientUpdateServiceResponseservicedeploymentsnetworkConfigurationawsvpcConfigurationTypeDef(
    _ClientUpdateServiceResponseservicedeploymentsnetworkConfigurationawsvpcConfigurationTypeDef
):
    """
    Type definition for `ClientUpdateServiceResponseservicedeploymentsnetworkConfiguration` `awsvpcConfiguration`

    The VPC subnets and security groups associated with a task.

    .. note::

      All specified subnets and security groups must be from the same VPC.

    - **subnets** *(list) --*

      The subnets associated with the task or service. There is a limit of 16 subnets
      that can be specified per ``AwsVpcConfiguration`` .

      .. note::

        All specified subnets must be from the same VPC.

      - *(string) --*

    - **securityGroups** *(list) --*

      The security groups associated with the task or service. If you do not specify a
      security group, the default security group for the VPC is used. There is a limit of
      5 security groups that can be specified per ``AwsVpcConfiguration`` .

      .. note::

        All specified security groups must be from the same VPC.

      - *(string) --*

    - **assignPublicIp** *(string) --*

      Whether the task's elastic network interface receives a public IP address. The
      default value is ``DISABLED`` .
    """


_ClientUpdateServiceResponseservicedeploymentsnetworkConfigurationTypeDef = TypedDict(
    "_ClientUpdateServiceResponseservicedeploymentsnetworkConfigurationTypeDef",
    {
        "awsvpcConfiguration": ClientUpdateServiceResponseservicedeploymentsnetworkConfigurationawsvpcConfigurationTypeDef
    },
    total=False,
)


class ClientUpdateServiceResponseservicedeploymentsnetworkConfigurationTypeDef(
    _ClientUpdateServiceResponseservicedeploymentsnetworkConfigurationTypeDef
):
    """
    Type definition for `ClientUpdateServiceResponseservicedeployments` `networkConfiguration`

    The VPC subnet and security group configuration for tasks that receive their own
    elastic network interface by using the ``awsvpc`` networking mode.

    - **awsvpcConfiguration** *(dict) --*

      The VPC subnets and security groups associated with a task.

      .. note::

        All specified subnets and security groups must be from the same VPC.

      - **subnets** *(list) --*

        The subnets associated with the task or service. There is a limit of 16 subnets
        that can be specified per ``AwsVpcConfiguration`` .

        .. note::

          All specified subnets must be from the same VPC.

        - *(string) --*

      - **securityGroups** *(list) --*

        The security groups associated with the task or service. If you do not specify a
        security group, the default security group for the VPC is used. There is a limit of
        5 security groups that can be specified per ``AwsVpcConfiguration`` .

        .. note::

          All specified security groups must be from the same VPC.

        - *(string) --*

      - **assignPublicIp** *(string) --*

        Whether the task's elastic network interface receives a public IP address. The
        default value is ``DISABLED`` .
    """


_ClientUpdateServiceResponseservicedeploymentsTypeDef = TypedDict(
    "_ClientUpdateServiceResponseservicedeploymentsTypeDef",
    {
        "id": str,
        "status": str,
        "taskDefinition": str,
        "desiredCount": int,
        "pendingCount": int,
        "runningCount": int,
        "createdAt": datetime,
        "updatedAt": datetime,
        "launchType": str,
        "platformVersion": str,
        "networkConfiguration": ClientUpdateServiceResponseservicedeploymentsnetworkConfigurationTypeDef,
    },
    total=False,
)


class ClientUpdateServiceResponseservicedeploymentsTypeDef(
    _ClientUpdateServiceResponseservicedeploymentsTypeDef
):
    """
    Type definition for `ClientUpdateServiceResponseservice` `deployments`

    The details of an Amazon ECS service deployment. This is used only when a service uses
    the ``ECS`` deployment controller type.

    - **id** *(string) --*

      The ID of the deployment.

    - **status** *(string) --*

      The status of the deployment. The following describes each state:

        PRIMARY

      The most recent deployment of a service.

        ACTIVE

      A service deployment that still has running tasks, but are in the process of being
      replaced with a new ``PRIMARY`` deployment.

        INACTIVE

      A deployment that has been completely replaced.

    - **taskDefinition** *(string) --*

      The most recent task definition that was specified for the tasks in the service to use.

    - **desiredCount** *(integer) --*

      The most recent desired count of tasks that was specified for the service to deploy or
      maintain.

    - **pendingCount** *(integer) --*

      The number of tasks in the deployment that are in the ``PENDING`` status.

    - **runningCount** *(integer) --*

      The number of tasks in the deployment that are in the ``RUNNING`` status.

    - **createdAt** *(datetime) --*

      The Unix timestamp for when the service deployment was created.

    - **updatedAt** *(datetime) --*

      The Unix timestamp for when the service deployment was last updated.

    - **launchType** *(string) --*

      The launch type the tasks in the service are using. For more information, see `Amazon
      ECS Launch Types
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html>`__ in
      the *Amazon Elastic Container Service Developer Guide* .

    - **platformVersion** *(string) --*

      The platform version on which your tasks in the service are running. A platform version
      is only specified for tasks using the Fargate launch type. If one is not specified, the
      ``LATEST`` platform version is used by default. For more information, see `AWS Fargate
      Platform Versions
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

    - **networkConfiguration** *(dict) --*

      The VPC subnet and security group configuration for tasks that receive their own
      elastic network interface by using the ``awsvpc`` networking mode.

      - **awsvpcConfiguration** *(dict) --*

        The VPC subnets and security groups associated with a task.

        .. note::

          All specified subnets and security groups must be from the same VPC.

        - **subnets** *(list) --*

          The subnets associated with the task or service. There is a limit of 16 subnets
          that can be specified per ``AwsVpcConfiguration`` .

          .. note::

            All specified subnets must be from the same VPC.

          - *(string) --*

        - **securityGroups** *(list) --*

          The security groups associated with the task or service. If you do not specify a
          security group, the default security group for the VPC is used. There is a limit of
          5 security groups that can be specified per ``AwsVpcConfiguration`` .

          .. note::

            All specified security groups must be from the same VPC.

          - *(string) --*

        - **assignPublicIp** *(string) --*

          Whether the task's elastic network interface receives a public IP address. The
          default value is ``DISABLED`` .
    """


_ClientUpdateServiceResponseserviceeventsTypeDef = TypedDict(
    "_ClientUpdateServiceResponseserviceeventsTypeDef",
    {"id": str, "createdAt": datetime, "message": str},
    total=False,
)


class ClientUpdateServiceResponseserviceeventsTypeDef(
    _ClientUpdateServiceResponseserviceeventsTypeDef
):
    """
    Type definition for `ClientUpdateServiceResponseservice` `events`

    Details on an event associated with a service.

    - **id** *(string) --*

      The ID string of the event.

    - **createdAt** *(datetime) --*

      The Unix timestamp for when the event was triggered.

    - **message** *(string) --*

      The event message.
    """


_ClientUpdateServiceResponseserviceloadBalancersTypeDef = TypedDict(
    "_ClientUpdateServiceResponseserviceloadBalancersTypeDef",
    {
        "targetGroupArn": str,
        "loadBalancerName": str,
        "containerName": str,
        "containerPort": int,
    },
    total=False,
)


class ClientUpdateServiceResponseserviceloadBalancersTypeDef(
    _ClientUpdateServiceResponseserviceloadBalancersTypeDef
):
    """
    Type definition for `ClientUpdateServiceResponseservice` `loadBalancers`

    Details on the load balancer or load balancers to use with a service or task set.

    - **targetGroupArn** *(string) --*

      The full Amazon Resource Name (ARN) of the Elastic Load Balancing target group or
      groups associated with a service or task set.

      A target group ARN is only specified when using an Application Load Balancer or Network
      Load Balancer. If you are using a Classic Load Balancer this should be omitted.

      For services using the ``ECS`` deployment controller, you can specify one or multiple
      target groups. For more information, see `Registering Multiple Target Groups with a
      Service
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

      For services using the ``CODE_DEPLOY`` deployment controller, you are required to
      define two target groups for the load balancer. For more information, see `Blue/Green
      Deployment with CodeDeploy
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-bluegreen.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

      .. warning::

        If your service's task definition uses the ``awsvpc`` network mode (which is required
        for the Fargate launch type), you must choose ``ip`` as the target type, not
        ``instance`` , when creating your target groups because tasks that use the ``awsvpc``
        network mode are associated with an elastic network interface, not an Amazon EC2
        instance.

    - **loadBalancerName** *(string) --*

      The name of the load balancer to associate with the Amazon ECS service or task set.

      A load balancer name is only specified when using a Classic Load Balancer. If you are
      using an Application Load Balancer or a Network Load Balancer this should be omitted.

    - **containerName** *(string) --*

      The name of the container (as it appears in a container definition) to associate with
      the load balancer.

    - **containerPort** *(integer) --*

      The port on the container to associate with the load balancer. This port must
      correspond to a ``containerPort`` in the task definition the tasks in the service are
      using. For tasks that use the EC2 launch type, the container instance they are launched
      on must allow ingress traffic on the ``hostPort`` of the port mapping.
    """


_ClientUpdateServiceResponseservicenetworkConfigurationawsvpcConfigurationTypeDef = TypedDict(
    "_ClientUpdateServiceResponseservicenetworkConfigurationawsvpcConfigurationTypeDef",
    {"subnets": List[str], "securityGroups": List[str], "assignPublicIp": str},
    total=False,
)


class ClientUpdateServiceResponseservicenetworkConfigurationawsvpcConfigurationTypeDef(
    _ClientUpdateServiceResponseservicenetworkConfigurationawsvpcConfigurationTypeDef
):
    """
    Type definition for `ClientUpdateServiceResponseservicenetworkConfiguration` `awsvpcConfiguration`

    The VPC subnets and security groups associated with a task.

    .. note::

      All specified subnets and security groups must be from the same VPC.

    - **subnets** *(list) --*

      The subnets associated with the task or service. There is a limit of 16 subnets that
      can be specified per ``AwsVpcConfiguration`` .

      .. note::

        All specified subnets must be from the same VPC.

      - *(string) --*

    - **securityGroups** *(list) --*

      The security groups associated with the task or service. If you do not specify a
      security group, the default security group for the VPC is used. There is a limit of 5
      security groups that can be specified per ``AwsVpcConfiguration`` .

      .. note::

        All specified security groups must be from the same VPC.

      - *(string) --*

    - **assignPublicIp** *(string) --*

      Whether the task's elastic network interface receives a public IP address. The default
      value is ``DISABLED`` .
    """


_ClientUpdateServiceResponseservicenetworkConfigurationTypeDef = TypedDict(
    "_ClientUpdateServiceResponseservicenetworkConfigurationTypeDef",
    {
        "awsvpcConfiguration": ClientUpdateServiceResponseservicenetworkConfigurationawsvpcConfigurationTypeDef
    },
    total=False,
)


class ClientUpdateServiceResponseservicenetworkConfigurationTypeDef(
    _ClientUpdateServiceResponseservicenetworkConfigurationTypeDef
):
    """
    Type definition for `ClientUpdateServiceResponseservice` `networkConfiguration`

    The VPC subnet and security group configuration for tasks that receive their own elastic
    network interface by using the ``awsvpc`` networking mode.

    - **awsvpcConfiguration** *(dict) --*

      The VPC subnets and security groups associated with a task.

      .. note::

        All specified subnets and security groups must be from the same VPC.

      - **subnets** *(list) --*

        The subnets associated with the task or service. There is a limit of 16 subnets that
        can be specified per ``AwsVpcConfiguration`` .

        .. note::

          All specified subnets must be from the same VPC.

        - *(string) --*

      - **securityGroups** *(list) --*

        The security groups associated with the task or service. If you do not specify a
        security group, the default security group for the VPC is used. There is a limit of 5
        security groups that can be specified per ``AwsVpcConfiguration`` .

        .. note::

          All specified security groups must be from the same VPC.

        - *(string) --*

      - **assignPublicIp** *(string) --*

        Whether the task's elastic network interface receives a public IP address. The default
        value is ``DISABLED`` .
    """


_ClientUpdateServiceResponseserviceplacementConstraintsTypeDef = TypedDict(
    "_ClientUpdateServiceResponseserviceplacementConstraintsTypeDef",
    {"type": str, "expression": str},
    total=False,
)


class ClientUpdateServiceResponseserviceplacementConstraintsTypeDef(
    _ClientUpdateServiceResponseserviceplacementConstraintsTypeDef
):
    """
    Type definition for `ClientUpdateServiceResponseservice` `placementConstraints`

    An object representing a constraint on task placement. For more information, see `Task
    Placement Constraints
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html>`__
    in the *Amazon Elastic Container Service Developer Guide* .

    .. note::

      If you are using the Fargate launch type, task placement constraints are not supported.

    - **type** *(string) --*

      The type of constraint. Use ``distinctInstance`` to ensure that each task in a
      particular group is running on a different container instance. Use ``memberOf`` to
      restrict the selection to a group of valid candidates.

    - **expression** *(string) --*

      A cluster query language expression to apply to the constraint. You cannot specify an
      expression if the constraint type is ``distinctInstance`` . For more information, see
      `Cluster Query Language
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .
    """


_ClientUpdateServiceResponseserviceplacementStrategyTypeDef = TypedDict(
    "_ClientUpdateServiceResponseserviceplacementStrategyTypeDef",
    {"type": str, "field": str},
    total=False,
)


class ClientUpdateServiceResponseserviceplacementStrategyTypeDef(
    _ClientUpdateServiceResponseserviceplacementStrategyTypeDef
):
    """
    Type definition for `ClientUpdateServiceResponseservice` `placementStrategy`

    The task placement strategy for a task or service. For more information, see `Task
    Placement Strategies
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-strategies.html>`__
    in the *Amazon Elastic Container Service Developer Guide* .

    - **type** *(string) --*

      The type of placement strategy. The ``random`` placement strategy randomly places tasks
      on available candidates. The ``spread`` placement strategy spreads placement across
      available candidates evenly based on the ``field`` parameter. The ``binpack`` strategy
      places tasks on available candidates that have the least available amount of the
      resource that is specified with the ``field`` parameter. For example, if you binpack on
      memory, a task is placed on the instance with the least amount of remaining memory (but
      still enough to run the task).

    - **field** *(string) --*

      The field to apply the placement strategy against. For the ``spread`` placement
      strategy, valid values are ``instanceId`` (or ``host`` , which has the same effect), or
      any platform or custom attribute that is applied to a container instance, such as
      ``attribute:ecs.availability-zone`` . For the ``binpack`` placement strategy, valid
      values are ``cpu`` and ``memory`` . For the ``random`` placement strategy, this field
      is not used.
    """


_ClientUpdateServiceResponseserviceserviceRegistriesTypeDef = TypedDict(
    "_ClientUpdateServiceResponseserviceserviceRegistriesTypeDef",
    {"registryArn": str, "port": int, "containerName": str, "containerPort": int},
    total=False,
)


class ClientUpdateServiceResponseserviceserviceRegistriesTypeDef(
    _ClientUpdateServiceResponseserviceserviceRegistriesTypeDef
):
    """
    Type definition for `ClientUpdateServiceResponseservice` `serviceRegistries`

    Details of the service registry.

    - **registryArn** *(string) --*

      The Amazon Resource Name (ARN) of the service registry. The currently supported service
      registry is AWS Cloud Map. For more information, see `CreateService
      <https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html>`__ .

    - **port** *(integer) --*

      The port value used if your service discovery service specified an SRV record. This
      field may be used if both the ``awsvpc`` network mode and SRV records are used.

    - **containerName** *(string) --*

      The container name value, already specified in the task definition, to be used for your
      service discovery service. If the task definition that your service task specifies uses
      the ``bridge`` or ``host`` network mode, you must specify a ``containerName`` and
      ``containerPort`` combination from the task definition. If the task definition that
      your service task specifies uses the ``awsvpc`` network mode and a type SRV DNS record
      is used, you must specify either a ``containerName`` and ``containerPort`` combination
      or a ``port`` value, but not both.

    - **containerPort** *(integer) --*

      The port value, already specified in the task definition, to be used for your service
      discovery service. If the task definition your service task specifies uses the
      ``bridge`` or ``host`` network mode, you must specify a ``containerName`` and
      ``containerPort`` combination from the task definition. If the task definition your
      service task specifies uses the ``awsvpc`` network mode and a type SRV DNS record is
      used, you must specify either a ``containerName`` and ``containerPort`` combination or
      a ``port`` value, but not both.
    """


_ClientUpdateServiceResponseservicetagsTypeDef = TypedDict(
    "_ClientUpdateServiceResponseservicetagsTypeDef",
    {"key": str, "value": str},
    total=False,
)


class ClientUpdateServiceResponseservicetagsTypeDef(
    _ClientUpdateServiceResponseservicetagsTypeDef
):
    """
    Type definition for `ClientUpdateServiceResponseservice` `tags`

    The metadata that you apply to a resource to help you categorize and organize them. Each
    tag consists of a key and an optional value, both of which you define.

    The following basic restrictions apply to tags:

    * Maximum number of tags per resource - 50

    * For each resource, each tag key must be unique, and each tag key can have only one
    value.

    * Maximum key length - 128 Unicode characters in UTF-8

    * Maximum value length - 256 Unicode characters in UTF-8

    * If your tagging schema is used across multiple services and resources, remember that
    other services may have restrictions on allowed characters. Generally allowed characters
    are: letters, numbers, and spaces representable in UTF-8, and the following characters: +
    - = . _ : / @.

    * Tag keys and values are case-sensitive.

    * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
    prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
    tag keys or values with this prefix. Tags with this prefix do not count against your tags
    per resource limit.

    - **key** *(string) --*

      One part of a key-value pair that make up a tag. A ``key`` is a general label that acts
      like a category for more specific tag values.

    - **value** *(string) --*

      The optional part of a key-value pair that make up a tag. A ``value`` acts as a
      descriptor within a tag category (key).
    """


_ClientUpdateServiceResponseservicetaskSetsloadBalancersTypeDef = TypedDict(
    "_ClientUpdateServiceResponseservicetaskSetsloadBalancersTypeDef",
    {
        "targetGroupArn": str,
        "loadBalancerName": str,
        "containerName": str,
        "containerPort": int,
    },
    total=False,
)


class ClientUpdateServiceResponseservicetaskSetsloadBalancersTypeDef(
    _ClientUpdateServiceResponseservicetaskSetsloadBalancersTypeDef
):
    """
    Type definition for `ClientUpdateServiceResponseservicetaskSets` `loadBalancers`

    Details on the load balancer or load balancers to use with a service or task set.

    - **targetGroupArn** *(string) --*

      The full Amazon Resource Name (ARN) of the Elastic Load Balancing target group or
      groups associated with a service or task set.

      A target group ARN is only specified when using an Application Load Balancer or
      Network Load Balancer. If you are using a Classic Load Balancer this should be
      omitted.

      For services using the ``ECS`` deployment controller, you can specify one or
      multiple target groups. For more information, see `Registering Multiple Target
      Groups with a Service
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

      For services using the ``CODE_DEPLOY`` deployment controller, you are required to
      define two target groups for the load balancer. For more information, see
      `Blue/Green Deployment with CodeDeploy
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-bluegreen.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

      .. warning::

        If your service's task definition uses the ``awsvpc`` network mode (which is
        required for the Fargate launch type), you must choose ``ip`` as the target type,
        not ``instance`` , when creating your target groups because tasks that use the
        ``awsvpc`` network mode are associated with an elastic network interface, not an
        Amazon EC2 instance.

    - **loadBalancerName** *(string) --*

      The name of the load balancer to associate with the Amazon ECS service or task set.

      A load balancer name is only specified when using a Classic Load Balancer. If you
      are using an Application Load Balancer or a Network Load Balancer this should be
      omitted.

    - **containerName** *(string) --*

      The name of the container (as it appears in a container definition) to associate
      with the load balancer.

    - **containerPort** *(integer) --*

      The port on the container to associate with the load balancer. This port must
      correspond to a ``containerPort`` in the task definition the tasks in the service
      are using. For tasks that use the EC2 launch type, the container instance they are
      launched on must allow ingress traffic on the ``hostPort`` of the port mapping.
    """


_ClientUpdateServiceResponseservicetaskSetsnetworkConfigurationawsvpcConfigurationTypeDef = TypedDict(
    "_ClientUpdateServiceResponseservicetaskSetsnetworkConfigurationawsvpcConfigurationTypeDef",
    {"subnets": List[str], "securityGroups": List[str], "assignPublicIp": str},
    total=False,
)


class ClientUpdateServiceResponseservicetaskSetsnetworkConfigurationawsvpcConfigurationTypeDef(
    _ClientUpdateServiceResponseservicetaskSetsnetworkConfigurationawsvpcConfigurationTypeDef
):
    """
    Type definition for `ClientUpdateServiceResponseservicetaskSetsnetworkConfiguration` `awsvpcConfiguration`

    The VPC subnets and security groups associated with a task.

    .. note::

      All specified subnets and security groups must be from the same VPC.

    - **subnets** *(list) --*

      The subnets associated with the task or service. There is a limit of 16 subnets
      that can be specified per ``AwsVpcConfiguration`` .

      .. note::

        All specified subnets must be from the same VPC.

      - *(string) --*

    - **securityGroups** *(list) --*

      The security groups associated with the task or service. If you do not specify a
      security group, the default security group for the VPC is used. There is a limit of
      5 security groups that can be specified per ``AwsVpcConfiguration`` .

      .. note::

        All specified security groups must be from the same VPC.

      - *(string) --*

    - **assignPublicIp** *(string) --*

      Whether the task's elastic network interface receives a public IP address. The
      default value is ``DISABLED`` .
    """


_ClientUpdateServiceResponseservicetaskSetsnetworkConfigurationTypeDef = TypedDict(
    "_ClientUpdateServiceResponseservicetaskSetsnetworkConfigurationTypeDef",
    {
        "awsvpcConfiguration": ClientUpdateServiceResponseservicetaskSetsnetworkConfigurationawsvpcConfigurationTypeDef
    },
    total=False,
)


class ClientUpdateServiceResponseservicetaskSetsnetworkConfigurationTypeDef(
    _ClientUpdateServiceResponseservicetaskSetsnetworkConfigurationTypeDef
):
    """
    Type definition for `ClientUpdateServiceResponseservicetaskSets` `networkConfiguration`

    The network configuration for the task set.

    - **awsvpcConfiguration** *(dict) --*

      The VPC subnets and security groups associated with a task.

      .. note::

        All specified subnets and security groups must be from the same VPC.

      - **subnets** *(list) --*

        The subnets associated with the task or service. There is a limit of 16 subnets
        that can be specified per ``AwsVpcConfiguration`` .

        .. note::

          All specified subnets must be from the same VPC.

        - *(string) --*

      - **securityGroups** *(list) --*

        The security groups associated with the task or service. If you do not specify a
        security group, the default security group for the VPC is used. There is a limit of
        5 security groups that can be specified per ``AwsVpcConfiguration`` .

        .. note::

          All specified security groups must be from the same VPC.

        - *(string) --*

      - **assignPublicIp** *(string) --*

        Whether the task's elastic network interface receives a public IP address. The
        default value is ``DISABLED`` .
    """


_ClientUpdateServiceResponseservicetaskSetsscaleTypeDef = TypedDict(
    "_ClientUpdateServiceResponseservicetaskSetsscaleTypeDef",
    {"value": float, "unit": str},
    total=False,
)


class ClientUpdateServiceResponseservicetaskSetsscaleTypeDef(
    _ClientUpdateServiceResponseservicetaskSetsscaleTypeDef
):
    """
    Type definition for `ClientUpdateServiceResponseservicetaskSets` `scale`

    A floating-point percentage of the desired number of tasks to place and keep running in
    the task set.

    - **value** *(float) --*

      The value, specified as a percent total of a service's ``desiredCount`` , to scale
      the task set. Accepted values are numbers between 0 and 100.

    - **unit** *(string) --*

      The unit of measure for the scale value.
    """


_ClientUpdateServiceResponseservicetaskSetsserviceRegistriesTypeDef = TypedDict(
    "_ClientUpdateServiceResponseservicetaskSetsserviceRegistriesTypeDef",
    {"registryArn": str, "port": int, "containerName": str, "containerPort": int},
    total=False,
)


class ClientUpdateServiceResponseservicetaskSetsserviceRegistriesTypeDef(
    _ClientUpdateServiceResponseservicetaskSetsserviceRegistriesTypeDef
):
    """
    Type definition for `ClientUpdateServiceResponseservicetaskSets` `serviceRegistries`

    Details of the service registry.

    - **registryArn** *(string) --*

      The Amazon Resource Name (ARN) of the service registry. The currently supported
      service registry is AWS Cloud Map. For more information, see `CreateService
      <https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html>`__ .

    - **port** *(integer) --*

      The port value used if your service discovery service specified an SRV record. This
      field may be used if both the ``awsvpc`` network mode and SRV records are used.

    - **containerName** *(string) --*

      The container name value, already specified in the task definition, to be used for
      your service discovery service. If the task definition that your service task
      specifies uses the ``bridge`` or ``host`` network mode, you must specify a
      ``containerName`` and ``containerPort`` combination from the task definition. If
      the task definition that your service task specifies uses the ``awsvpc`` network
      mode and a type SRV DNS record is used, you must specify either a ``containerName``
      and ``containerPort`` combination or a ``port`` value, but not both.

    - **containerPort** *(integer) --*

      The port value, already specified in the task definition, to be used for your
      service discovery service. If the task definition your service task specifies uses
      the ``bridge`` or ``host`` network mode, you must specify a ``containerName`` and
      ``containerPort`` combination from the task definition. If the task definition your
      service task specifies uses the ``awsvpc`` network mode and a type SRV DNS record
      is used, you must specify either a ``containerName`` and ``containerPort``
      combination or a ``port`` value, but not both.
    """


_ClientUpdateServiceResponseservicetaskSetsTypeDef = TypedDict(
    "_ClientUpdateServiceResponseservicetaskSetsTypeDef",
    {
        "id": str,
        "taskSetArn": str,
        "serviceArn": str,
        "clusterArn": str,
        "startedBy": str,
        "externalId": str,
        "status": str,
        "taskDefinition": str,
        "computedDesiredCount": int,
        "pendingCount": int,
        "runningCount": int,
        "createdAt": datetime,
        "updatedAt": datetime,
        "launchType": str,
        "platformVersion": str,
        "networkConfiguration": ClientUpdateServiceResponseservicetaskSetsnetworkConfigurationTypeDef,
        "loadBalancers": List[
            ClientUpdateServiceResponseservicetaskSetsloadBalancersTypeDef
        ],
        "serviceRegistries": List[
            ClientUpdateServiceResponseservicetaskSetsserviceRegistriesTypeDef
        ],
        "scale": ClientUpdateServiceResponseservicetaskSetsscaleTypeDef,
        "stabilityStatus": str,
        "stabilityStatusAt": datetime,
    },
    total=False,
)


class ClientUpdateServiceResponseservicetaskSetsTypeDef(
    _ClientUpdateServiceResponseservicetaskSetsTypeDef
):
    """
    Type definition for `ClientUpdateServiceResponseservice` `taskSets`

    Information about a set of Amazon ECS tasks in either an AWS CodeDeploy or an
    ``EXTERNAL`` deployment. An Amazon ECS task set includes details such as the desired
    number of tasks, how many tasks are running, and whether the task set serves production
    traffic.

    - **id** *(string) --*

      The ID of the task set.

    - **taskSetArn** *(string) --*

      The Amazon Resource Name (ARN) of the task set.

    - **serviceArn** *(string) --*

      The Amazon Resource Name (ARN) of the service the task set exists in.

    - **clusterArn** *(string) --*

      The Amazon Resource Name (ARN) of the cluster that the service that hosts the task set
      exists in.

    - **startedBy** *(string) --*

      The tag specified when a task set is started. If the task set is created by an AWS
      CodeDeploy deployment, the ``startedBy`` parameter is ``CODE_DEPLOY`` . For a task set
      created for an external deployment, the startedBy field isn't used.

    - **externalId** *(string) --*

      The external ID associated with the task set.

      If a task set is created by an AWS CodeDeploy deployment, the ``externalId`` parameter
      contains the AWS CodeDeploy deployment ID.

      If a task set is created for an external deployment and is associated with a service
      discovery registry, the ``externalId`` parameter contains the
      ``ECS_TASK_SET_EXTERNAL_ID`` AWS Cloud Map attribute.

    - **status** *(string) --*

      The status of the task set. The following describes each state:

        PRIMARY

      The task set is serving production traffic.

        ACTIVE

      The task set is not serving production traffic.

        DRAINING

      The tasks in the task set are being stopped and their corresponding targets are being
      deregistered from their target group.

    - **taskDefinition** *(string) --*

      The task definition the task set is using.

    - **computedDesiredCount** *(integer) --*

      The computed desired count for the task set. This is calculated by multiplying the
      service's ``desiredCount`` by the task set's ``scale`` percentage. The result is always
      rounded up. For example, if the computed desired count is 1.2, it rounds up to 2 tasks.

    - **pendingCount** *(integer) --*

      The number of tasks in the task set that are in the ``PENDING`` status during a
      deployment. A task in the ``PENDING`` state is preparing to enter the ``RUNNING``
      state. A task set enters the ``PENDING`` status when it launches for the first time or
      when it is restarted after being in the ``STOPPED`` state.

    - **runningCount** *(integer) --*

      The number of tasks in the task set that are in the ``RUNNING`` status during a
      deployment. A task in the ``RUNNING`` state is running and ready for use.

    - **createdAt** *(datetime) --*

      The Unix timestamp for when the task set was created.

    - **updatedAt** *(datetime) --*

      The Unix timestamp for when the task set was last updated.

    - **launchType** *(string) --*

      The launch type the tasks in the task set are using. For more information, see `Amazon
      ECS Launch Types
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html>`__ in
      the *Amazon Elastic Container Service Developer Guide* .

    - **platformVersion** *(string) --*

      The platform version on which the tasks in the task set are running. A platform version
      is only specified for tasks using the Fargate launch type. If one is not specified, the
      ``LATEST`` platform version is used by default. For more information, see `AWS Fargate
      Platform Versions
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

    - **networkConfiguration** *(dict) --*

      The network configuration for the task set.

      - **awsvpcConfiguration** *(dict) --*

        The VPC subnets and security groups associated with a task.

        .. note::

          All specified subnets and security groups must be from the same VPC.

        - **subnets** *(list) --*

          The subnets associated with the task or service. There is a limit of 16 subnets
          that can be specified per ``AwsVpcConfiguration`` .

          .. note::

            All specified subnets must be from the same VPC.

          - *(string) --*

        - **securityGroups** *(list) --*

          The security groups associated with the task or service. If you do not specify a
          security group, the default security group for the VPC is used. There is a limit of
          5 security groups that can be specified per ``AwsVpcConfiguration`` .

          .. note::

            All specified security groups must be from the same VPC.

          - *(string) --*

        - **assignPublicIp** *(string) --*

          Whether the task's elastic network interface receives a public IP address. The
          default value is ``DISABLED`` .

    - **loadBalancers** *(list) --*

      Details on a load balancer that is used with a task set.

      - *(dict) --*

        Details on the load balancer or load balancers to use with a service or task set.

        - **targetGroupArn** *(string) --*

          The full Amazon Resource Name (ARN) of the Elastic Load Balancing target group or
          groups associated with a service or task set.

          A target group ARN is only specified when using an Application Load Balancer or
          Network Load Balancer. If you are using a Classic Load Balancer this should be
          omitted.

          For services using the ``ECS`` deployment controller, you can specify one or
          multiple target groups. For more information, see `Registering Multiple Target
          Groups with a Service
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

          For services using the ``CODE_DEPLOY`` deployment controller, you are required to
          define two target groups for the load balancer. For more information, see
          `Blue/Green Deployment with CodeDeploy
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-bluegreen.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

          .. warning::

            If your service's task definition uses the ``awsvpc`` network mode (which is
            required for the Fargate launch type), you must choose ``ip`` as the target type,
            not ``instance`` , when creating your target groups because tasks that use the
            ``awsvpc`` network mode are associated with an elastic network interface, not an
            Amazon EC2 instance.

        - **loadBalancerName** *(string) --*

          The name of the load balancer to associate with the Amazon ECS service or task set.

          A load balancer name is only specified when using a Classic Load Balancer. If you
          are using an Application Load Balancer or a Network Load Balancer this should be
          omitted.

        - **containerName** *(string) --*

          The name of the container (as it appears in a container definition) to associate
          with the load balancer.

        - **containerPort** *(integer) --*

          The port on the container to associate with the load balancer. This port must
          correspond to a ``containerPort`` in the task definition the tasks in the service
          are using. For tasks that use the EC2 launch type, the container instance they are
          launched on must allow ingress traffic on the ``hostPort`` of the port mapping.

    - **serviceRegistries** *(list) --*

      The details of the service discovery registries to assign to this task set. For more
      information, see `Service Discovery
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html>`__
      .

      - *(dict) --*

        Details of the service registry.

        - **registryArn** *(string) --*

          The Amazon Resource Name (ARN) of the service registry. The currently supported
          service registry is AWS Cloud Map. For more information, see `CreateService
          <https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html>`__ .

        - **port** *(integer) --*

          The port value used if your service discovery service specified an SRV record. This
          field may be used if both the ``awsvpc`` network mode and SRV records are used.

        - **containerName** *(string) --*

          The container name value, already specified in the task definition, to be used for
          your service discovery service. If the task definition that your service task
          specifies uses the ``bridge`` or ``host`` network mode, you must specify a
          ``containerName`` and ``containerPort`` combination from the task definition. If
          the task definition that your service task specifies uses the ``awsvpc`` network
          mode and a type SRV DNS record is used, you must specify either a ``containerName``
          and ``containerPort`` combination or a ``port`` value, but not both.

        - **containerPort** *(integer) --*

          The port value, already specified in the task definition, to be used for your
          service discovery service. If the task definition your service task specifies uses
          the ``bridge`` or ``host`` network mode, you must specify a ``containerName`` and
          ``containerPort`` combination from the task definition. If the task definition your
          service task specifies uses the ``awsvpc`` network mode and a type SRV DNS record
          is used, you must specify either a ``containerName`` and ``containerPort``
          combination or a ``port`` value, but not both.

    - **scale** *(dict) --*

      A floating-point percentage of the desired number of tasks to place and keep running in
      the task set.

      - **value** *(float) --*

        The value, specified as a percent total of a service's ``desiredCount`` , to scale
        the task set. Accepted values are numbers between 0 and 100.

      - **unit** *(string) --*

        The unit of measure for the scale value.

    - **stabilityStatus** *(string) --*

      The stability status, which indicates whether the task set has reached a steady state.
      If the following conditions are met, the task set will be in ``STEADY_STATE`` :

      * The task ``runningCount`` is equal to the ``computedDesiredCount`` .

      * The ``pendingCount`` is ``0`` .

      * There are no tasks running on container instances in the ``DRAINING`` status.

      * All tasks are reporting a healthy status from the load balancers, service discovery,
      and container health checks.

      If any of those conditions are not met, the stability status returns ``STABILIZING`` .

    - **stabilityStatusAt** *(datetime) --*

      The Unix timestamp for when the task set stability status was retrieved.
    """


_ClientUpdateServiceResponseserviceTypeDef = TypedDict(
    "_ClientUpdateServiceResponseserviceTypeDef",
    {
        "serviceArn": str,
        "serviceName": str,
        "clusterArn": str,
        "loadBalancers": List[ClientUpdateServiceResponseserviceloadBalancersTypeDef],
        "serviceRegistries": List[
            ClientUpdateServiceResponseserviceserviceRegistriesTypeDef
        ],
        "status": str,
        "desiredCount": int,
        "runningCount": int,
        "pendingCount": int,
        "launchType": str,
        "platformVersion": str,
        "taskDefinition": str,
        "deploymentConfiguration": ClientUpdateServiceResponseservicedeploymentConfigurationTypeDef,
        "taskSets": List[ClientUpdateServiceResponseservicetaskSetsTypeDef],
        "deployments": List[ClientUpdateServiceResponseservicedeploymentsTypeDef],
        "roleArn": str,
        "events": List[ClientUpdateServiceResponseserviceeventsTypeDef],
        "createdAt": datetime,
        "placementConstraints": List[
            ClientUpdateServiceResponseserviceplacementConstraintsTypeDef
        ],
        "placementStrategy": List[
            ClientUpdateServiceResponseserviceplacementStrategyTypeDef
        ],
        "networkConfiguration": ClientUpdateServiceResponseservicenetworkConfigurationTypeDef,
        "healthCheckGracePeriodSeconds": int,
        "schedulingStrategy": str,
        "deploymentController": ClientUpdateServiceResponseservicedeploymentControllerTypeDef,
        "tags": List[ClientUpdateServiceResponseservicetagsTypeDef],
        "createdBy": str,
        "enableECSManagedTags": bool,
        "propagateTags": str,
    },
    total=False,
)


class ClientUpdateServiceResponseserviceTypeDef(
    _ClientUpdateServiceResponseserviceTypeDef
):
    """
    Type definition for `ClientUpdateServiceResponse` `service`

    The full description of your service following the update call.

    - **serviceArn** *(string) --*

      The ARN that identifies the service. The ARN contains the ``arn:aws:ecs`` namespace,
      followed by the Region of the service, the AWS account ID of the service owner, the
      ``service`` namespace, and then the service name. For example,
      ``arn:aws:ecs:region:012345678910:service/my-service`` .

    - **serviceName** *(string) --*

      The name of your service. Up to 255 letters (uppercase and lowercase), numbers, and hyphens
      are allowed. Service names must be unique within a cluster, but you can have similarly
      named services in multiple clusters within a Region or across multiple Regions.

    - **clusterArn** *(string) --*

      The Amazon Resource Name (ARN) of the cluster that hosts the service.

    - **loadBalancers** *(list) --*

      A list of Elastic Load Balancing load balancer objects, containing the load balancer name,
      the container name (as it appears in a container definition), and the container port to
      access from the load balancer.

      - *(dict) --*

        Details on the load balancer or load balancers to use with a service or task set.

        - **targetGroupArn** *(string) --*

          The full Amazon Resource Name (ARN) of the Elastic Load Balancing target group or
          groups associated with a service or task set.

          A target group ARN is only specified when using an Application Load Balancer or Network
          Load Balancer. If you are using a Classic Load Balancer this should be omitted.

          For services using the ``ECS`` deployment controller, you can specify one or multiple
          target groups. For more information, see `Registering Multiple Target Groups with a
          Service
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

          For services using the ``CODE_DEPLOY`` deployment controller, you are required to
          define two target groups for the load balancer. For more information, see `Blue/Green
          Deployment with CodeDeploy
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-bluegreen.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

          .. warning::

            If your service's task definition uses the ``awsvpc`` network mode (which is required
            for the Fargate launch type), you must choose ``ip`` as the target type, not
            ``instance`` , when creating your target groups because tasks that use the ``awsvpc``
            network mode are associated with an elastic network interface, not an Amazon EC2
            instance.

        - **loadBalancerName** *(string) --*

          The name of the load balancer to associate with the Amazon ECS service or task set.

          A load balancer name is only specified when using a Classic Load Balancer. If you are
          using an Application Load Balancer or a Network Load Balancer this should be omitted.

        - **containerName** *(string) --*

          The name of the container (as it appears in a container definition) to associate with
          the load balancer.

        - **containerPort** *(integer) --*

          The port on the container to associate with the load balancer. This port must
          correspond to a ``containerPort`` in the task definition the tasks in the service are
          using. For tasks that use the EC2 launch type, the container instance they are launched
          on must allow ingress traffic on the ``hostPort`` of the port mapping.

    - **serviceRegistries** *(list) --*

      The details of the service discovery registries to assign to this service. For more
      information, see `Service Discovery
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html>`__ .

      - *(dict) --*

        Details of the service registry.

        - **registryArn** *(string) --*

          The Amazon Resource Name (ARN) of the service registry. The currently supported service
          registry is AWS Cloud Map. For more information, see `CreateService
          <https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html>`__ .

        - **port** *(integer) --*

          The port value used if your service discovery service specified an SRV record. This
          field may be used if both the ``awsvpc`` network mode and SRV records are used.

        - **containerName** *(string) --*

          The container name value, already specified in the task definition, to be used for your
          service discovery service. If the task definition that your service task specifies uses
          the ``bridge`` or ``host`` network mode, you must specify a ``containerName`` and
          ``containerPort`` combination from the task definition. If the task definition that
          your service task specifies uses the ``awsvpc`` network mode and a type SRV DNS record
          is used, you must specify either a ``containerName`` and ``containerPort`` combination
          or a ``port`` value, but not both.

        - **containerPort** *(integer) --*

          The port value, already specified in the task definition, to be used for your service
          discovery service. If the task definition your service task specifies uses the
          ``bridge`` or ``host`` network mode, you must specify a ``containerName`` and
          ``containerPort`` combination from the task definition. If the task definition your
          service task specifies uses the ``awsvpc`` network mode and a type SRV DNS record is
          used, you must specify either a ``containerName`` and ``containerPort`` combination or
          a ``port`` value, but not both.

    - **status** *(string) --*

      The status of the service. The valid values are ``ACTIVE`` , ``DRAINING`` , or ``INACTIVE``
      .

    - **desiredCount** *(integer) --*

      The desired number of instantiations of the task definition to keep running on the service.
      This value is specified when the service is created with  CreateService , and it can be
      modified with  UpdateService .

    - **runningCount** *(integer) --*

      The number of tasks in the cluster that are in the ``RUNNING`` state.

    - **pendingCount** *(integer) --*

      The number of tasks in the cluster that are in the ``PENDING`` state.

    - **launchType** *(string) --*

      The launch type on which your service is running. If no value is specified, it will default
      to ``EC2`` . Valid values include ``EC2`` and ``FARGATE`` . For more information, see
      `Amazon ECS Launch Types
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html>`__ in the
      *Amazon Elastic Container Service Developer Guide* .

    - **platformVersion** *(string) --*

      The platform version on which to run your service. A platform version is only specified for
      tasks using the Fargate launch type. If one is not specified, the ``LATEST`` platform
      version is used by default. For more information, see `AWS Fargate Platform Versions
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html>`__ in
      the *Amazon Elastic Container Service Developer Guide* .

    - **taskDefinition** *(string) --*

      The task definition to use for tasks in the service. This value is specified when the
      service is created with  CreateService , and it can be modified with  UpdateService .

    - **deploymentConfiguration** *(dict) --*

      Optional deployment parameters that control how many tasks run during the deployment and
      the ordering of stopping and starting tasks.

      - **maximumPercent** *(integer) --*

        If a service is using the rolling update (``ECS`` ) deployment type, the **maximum
        percent** parameter represents an upper limit on the number of tasks in a service that
        are allowed in the ``RUNNING`` or ``PENDING`` state during a deployment, as a percentage
        of the desired number of tasks (rounded down to the nearest integer), and while any
        container instances are in the ``DRAINING`` state if the service contains tasks using the
        EC2 launch type. This parameter enables you to define the deployment batch size. For
        example, if your service has a desired number of four tasks and a maximum percent value
        of 200%, the scheduler may start four new tasks before stopping the four older tasks
        (provided that the cluster resources required to do this are available). The default
        value for maximum percent is 200%.

        If a service is using the blue/green (``CODE_DEPLOY`` ) or ``EXTERNAL`` deployment types
        and tasks that use the EC2 launch type, the **maximum percent** value is set to the
        default value and is used to define the upper limit on the number of the tasks in the
        service that remain in the ``RUNNING`` state while the container instances are in the
        ``DRAINING`` state. If the tasks in the service use the Fargate launch type, the maximum
        percent value is not used, although it is returned when describing your service.

      - **minimumHealthyPercent** *(integer) --*

        If a service is using the rolling update (``ECS`` ) deployment type, the **minimum
        healthy percent** represents a lower limit on the number of tasks in a service that must
        remain in the ``RUNNING`` state during a deployment, as a percentage of the desired
        number of tasks (rounded up to the nearest integer), and while any container instances
        are in the ``DRAINING`` state if the service contains tasks using the EC2 launch type.
        This parameter enables you to deploy without using additional cluster capacity. For
        example, if your service has a desired number of four tasks and a minimum healthy percent
        of 50%, the scheduler may stop two existing tasks to free up cluster capacity before
        starting two new tasks. Tasks for services that *do not* use a load balancer are
        considered healthy if they are in the ``RUNNING`` state; tasks for services that *do* use
        a load balancer are considered healthy if they are in the ``RUNNING`` state and they are
        reported as healthy by the load balancer. The default value for minimum healthy percent
        is 100%.

        If a service is using the blue/green (``CODE_DEPLOY`` ) or ``EXTERNAL`` deployment types
        and tasks that use the EC2 launch type, the **minimum healthy percent** value is set to
        the default value and is used to define the lower limit on the number of the tasks in the
        service that remain in the ``RUNNING`` state while the container instances are in the
        ``DRAINING`` state. If the tasks in the service use the Fargate launch type, the minimum
        healthy percent value is not used, although it is returned when describing your service.

    - **taskSets** *(list) --*

      Information about a set of Amazon ECS tasks in either an AWS CodeDeploy or an ``EXTERNAL``
      deployment. An Amazon ECS task set includes details such as the desired number of tasks,
      how many tasks are running, and whether the task set serves production traffic.

      - *(dict) --*

        Information about a set of Amazon ECS tasks in either an AWS CodeDeploy or an
        ``EXTERNAL`` deployment. An Amazon ECS task set includes details such as the desired
        number of tasks, how many tasks are running, and whether the task set serves production
        traffic.

        - **id** *(string) --*

          The ID of the task set.

        - **taskSetArn** *(string) --*

          The Amazon Resource Name (ARN) of the task set.

        - **serviceArn** *(string) --*

          The Amazon Resource Name (ARN) of the service the task set exists in.

        - **clusterArn** *(string) --*

          The Amazon Resource Name (ARN) of the cluster that the service that hosts the task set
          exists in.

        - **startedBy** *(string) --*

          The tag specified when a task set is started. If the task set is created by an AWS
          CodeDeploy deployment, the ``startedBy`` parameter is ``CODE_DEPLOY`` . For a task set
          created for an external deployment, the startedBy field isn't used.

        - **externalId** *(string) --*

          The external ID associated with the task set.

          If a task set is created by an AWS CodeDeploy deployment, the ``externalId`` parameter
          contains the AWS CodeDeploy deployment ID.

          If a task set is created for an external deployment and is associated with a service
          discovery registry, the ``externalId`` parameter contains the
          ``ECS_TASK_SET_EXTERNAL_ID`` AWS Cloud Map attribute.

        - **status** *(string) --*

          The status of the task set. The following describes each state:

            PRIMARY

          The task set is serving production traffic.

            ACTIVE

          The task set is not serving production traffic.

            DRAINING

          The tasks in the task set are being stopped and their corresponding targets are being
          deregistered from their target group.

        - **taskDefinition** *(string) --*

          The task definition the task set is using.

        - **computedDesiredCount** *(integer) --*

          The computed desired count for the task set. This is calculated by multiplying the
          service's ``desiredCount`` by the task set's ``scale`` percentage. The result is always
          rounded up. For example, if the computed desired count is 1.2, it rounds up to 2 tasks.

        - **pendingCount** *(integer) --*

          The number of tasks in the task set that are in the ``PENDING`` status during a
          deployment. A task in the ``PENDING`` state is preparing to enter the ``RUNNING``
          state. A task set enters the ``PENDING`` status when it launches for the first time or
          when it is restarted after being in the ``STOPPED`` state.

        - **runningCount** *(integer) --*

          The number of tasks in the task set that are in the ``RUNNING`` status during a
          deployment. A task in the ``RUNNING`` state is running and ready for use.

        - **createdAt** *(datetime) --*

          The Unix timestamp for when the task set was created.

        - **updatedAt** *(datetime) --*

          The Unix timestamp for when the task set was last updated.

        - **launchType** *(string) --*

          The launch type the tasks in the task set are using. For more information, see `Amazon
          ECS Launch Types
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html>`__ in
          the *Amazon Elastic Container Service Developer Guide* .

        - **platformVersion** *(string) --*

          The platform version on which the tasks in the task set are running. A platform version
          is only specified for tasks using the Fargate launch type. If one is not specified, the
          ``LATEST`` platform version is used by default. For more information, see `AWS Fargate
          Platform Versions
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

        - **networkConfiguration** *(dict) --*

          The network configuration for the task set.

          - **awsvpcConfiguration** *(dict) --*

            The VPC subnets and security groups associated with a task.

            .. note::

              All specified subnets and security groups must be from the same VPC.

            - **subnets** *(list) --*

              The subnets associated with the task or service. There is a limit of 16 subnets
              that can be specified per ``AwsVpcConfiguration`` .

              .. note::

                All specified subnets must be from the same VPC.

              - *(string) --*

            - **securityGroups** *(list) --*

              The security groups associated with the task or service. If you do not specify a
              security group, the default security group for the VPC is used. There is a limit of
              5 security groups that can be specified per ``AwsVpcConfiguration`` .

              .. note::

                All specified security groups must be from the same VPC.

              - *(string) --*

            - **assignPublicIp** *(string) --*

              Whether the task's elastic network interface receives a public IP address. The
              default value is ``DISABLED`` .

        - **loadBalancers** *(list) --*

          Details on a load balancer that is used with a task set.

          - *(dict) --*

            Details on the load balancer or load balancers to use with a service or task set.

            - **targetGroupArn** *(string) --*

              The full Amazon Resource Name (ARN) of the Elastic Load Balancing target group or
              groups associated with a service or task set.

              A target group ARN is only specified when using an Application Load Balancer or
              Network Load Balancer. If you are using a Classic Load Balancer this should be
              omitted.

              For services using the ``ECS`` deployment controller, you can specify one or
              multiple target groups. For more information, see `Registering Multiple Target
              Groups with a Service
              <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html>`__
              in the *Amazon Elastic Container Service Developer Guide* .

              For services using the ``CODE_DEPLOY`` deployment controller, you are required to
              define two target groups for the load balancer. For more information, see
              `Blue/Green Deployment with CodeDeploy
              <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-bluegreen.html>`__
              in the *Amazon Elastic Container Service Developer Guide* .

              .. warning::

                If your service's task definition uses the ``awsvpc`` network mode (which is
                required for the Fargate launch type), you must choose ``ip`` as the target type,
                not ``instance`` , when creating your target groups because tasks that use the
                ``awsvpc`` network mode are associated with an elastic network interface, not an
                Amazon EC2 instance.

            - **loadBalancerName** *(string) --*

              The name of the load balancer to associate with the Amazon ECS service or task set.

              A load balancer name is only specified when using a Classic Load Balancer. If you
              are using an Application Load Balancer or a Network Load Balancer this should be
              omitted.

            - **containerName** *(string) --*

              The name of the container (as it appears in a container definition) to associate
              with the load balancer.

            - **containerPort** *(integer) --*

              The port on the container to associate with the load balancer. This port must
              correspond to a ``containerPort`` in the task definition the tasks in the service
              are using. For tasks that use the EC2 launch type, the container instance they are
              launched on must allow ingress traffic on the ``hostPort`` of the port mapping.

        - **serviceRegistries** *(list) --*

          The details of the service discovery registries to assign to this task set. For more
          information, see `Service Discovery
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html>`__
          .

          - *(dict) --*

            Details of the service registry.

            - **registryArn** *(string) --*

              The Amazon Resource Name (ARN) of the service registry. The currently supported
              service registry is AWS Cloud Map. For more information, see `CreateService
              <https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html>`__ .

            - **port** *(integer) --*

              The port value used if your service discovery service specified an SRV record. This
              field may be used if both the ``awsvpc`` network mode and SRV records are used.

            - **containerName** *(string) --*

              The container name value, already specified in the task definition, to be used for
              your service discovery service. If the task definition that your service task
              specifies uses the ``bridge`` or ``host`` network mode, you must specify a
              ``containerName`` and ``containerPort`` combination from the task definition. If
              the task definition that your service task specifies uses the ``awsvpc`` network
              mode and a type SRV DNS record is used, you must specify either a ``containerName``
              and ``containerPort`` combination or a ``port`` value, but not both.

            - **containerPort** *(integer) --*

              The port value, already specified in the task definition, to be used for your
              service discovery service. If the task definition your service task specifies uses
              the ``bridge`` or ``host`` network mode, you must specify a ``containerName`` and
              ``containerPort`` combination from the task definition. If the task definition your
              service task specifies uses the ``awsvpc`` network mode and a type SRV DNS record
              is used, you must specify either a ``containerName`` and ``containerPort``
              combination or a ``port`` value, but not both.

        - **scale** *(dict) --*

          A floating-point percentage of the desired number of tasks to place and keep running in
          the task set.

          - **value** *(float) --*

            The value, specified as a percent total of a service's ``desiredCount`` , to scale
            the task set. Accepted values are numbers between 0 and 100.

          - **unit** *(string) --*

            The unit of measure for the scale value.

        - **stabilityStatus** *(string) --*

          The stability status, which indicates whether the task set has reached a steady state.
          If the following conditions are met, the task set will be in ``STEADY_STATE`` :

          * The task ``runningCount`` is equal to the ``computedDesiredCount`` .

          * The ``pendingCount`` is ``0`` .

          * There are no tasks running on container instances in the ``DRAINING`` status.

          * All tasks are reporting a healthy status from the load balancers, service discovery,
          and container health checks.

          If any of those conditions are not met, the stability status returns ``STABILIZING`` .

        - **stabilityStatusAt** *(datetime) --*

          The Unix timestamp for when the task set stability status was retrieved.

    - **deployments** *(list) --*

      The current state of deployments for the service.

      - *(dict) --*

        The details of an Amazon ECS service deployment. This is used only when a service uses
        the ``ECS`` deployment controller type.

        - **id** *(string) --*

          The ID of the deployment.

        - **status** *(string) --*

          The status of the deployment. The following describes each state:

            PRIMARY

          The most recent deployment of a service.

            ACTIVE

          A service deployment that still has running tasks, but are in the process of being
          replaced with a new ``PRIMARY`` deployment.

            INACTIVE

          A deployment that has been completely replaced.

        - **taskDefinition** *(string) --*

          The most recent task definition that was specified for the tasks in the service to use.

        - **desiredCount** *(integer) --*

          The most recent desired count of tasks that was specified for the service to deploy or
          maintain.

        - **pendingCount** *(integer) --*

          The number of tasks in the deployment that are in the ``PENDING`` status.

        - **runningCount** *(integer) --*

          The number of tasks in the deployment that are in the ``RUNNING`` status.

        - **createdAt** *(datetime) --*

          The Unix timestamp for when the service deployment was created.

        - **updatedAt** *(datetime) --*

          The Unix timestamp for when the service deployment was last updated.

        - **launchType** *(string) --*

          The launch type the tasks in the service are using. For more information, see `Amazon
          ECS Launch Types
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html>`__ in
          the *Amazon Elastic Container Service Developer Guide* .

        - **platformVersion** *(string) --*

          The platform version on which your tasks in the service are running. A platform version
          is only specified for tasks using the Fargate launch type. If one is not specified, the
          ``LATEST`` platform version is used by default. For more information, see `AWS Fargate
          Platform Versions
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

        - **networkConfiguration** *(dict) --*

          The VPC subnet and security group configuration for tasks that receive their own
          elastic network interface by using the ``awsvpc`` networking mode.

          - **awsvpcConfiguration** *(dict) --*

            The VPC subnets and security groups associated with a task.

            .. note::

              All specified subnets and security groups must be from the same VPC.

            - **subnets** *(list) --*

              The subnets associated with the task or service. There is a limit of 16 subnets
              that can be specified per ``AwsVpcConfiguration`` .

              .. note::

                All specified subnets must be from the same VPC.

              - *(string) --*

            - **securityGroups** *(list) --*

              The security groups associated with the task or service. If you do not specify a
              security group, the default security group for the VPC is used. There is a limit of
              5 security groups that can be specified per ``AwsVpcConfiguration`` .

              .. note::

                All specified security groups must be from the same VPC.

              - *(string) --*

            - **assignPublicIp** *(string) --*

              Whether the task's elastic network interface receives a public IP address. The
              default value is ``DISABLED`` .

    - **roleArn** *(string) --*

      The ARN of the IAM role associated with the service that allows the Amazon ECS container
      agent to register container instances with an Elastic Load Balancing load balancer.

    - **events** *(list) --*

      The event stream for your service. A maximum of 100 of the latest events are displayed.

      - *(dict) --*

        Details on an event associated with a service.

        - **id** *(string) --*

          The ID string of the event.

        - **createdAt** *(datetime) --*

          The Unix timestamp for when the event was triggered.

        - **message** *(string) --*

          The event message.

    - **createdAt** *(datetime) --*

      The Unix timestamp for when the service was created.

    - **placementConstraints** *(list) --*

      The placement constraints for the tasks in the service.

      - *(dict) --*

        An object representing a constraint on task placement. For more information, see `Task
        Placement Constraints
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html>`__
        in the *Amazon Elastic Container Service Developer Guide* .

        .. note::

          If you are using the Fargate launch type, task placement constraints are not supported.

        - **type** *(string) --*

          The type of constraint. Use ``distinctInstance`` to ensure that each task in a
          particular group is running on a different container instance. Use ``memberOf`` to
          restrict the selection to a group of valid candidates.

        - **expression** *(string) --*

          A cluster query language expression to apply to the constraint. You cannot specify an
          expression if the constraint type is ``distinctInstance`` . For more information, see
          `Cluster Query Language
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

    - **placementStrategy** *(list) --*

      The placement strategy that determines how tasks for the service are placed.

      - *(dict) --*

        The task placement strategy for a task or service. For more information, see `Task
        Placement Strategies
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-strategies.html>`__
        in the *Amazon Elastic Container Service Developer Guide* .

        - **type** *(string) --*

          The type of placement strategy. The ``random`` placement strategy randomly places tasks
          on available candidates. The ``spread`` placement strategy spreads placement across
          available candidates evenly based on the ``field`` parameter. The ``binpack`` strategy
          places tasks on available candidates that have the least available amount of the
          resource that is specified with the ``field`` parameter. For example, if you binpack on
          memory, a task is placed on the instance with the least amount of remaining memory (but
          still enough to run the task).

        - **field** *(string) --*

          The field to apply the placement strategy against. For the ``spread`` placement
          strategy, valid values are ``instanceId`` (or ``host`` , which has the same effect), or
          any platform or custom attribute that is applied to a container instance, such as
          ``attribute:ecs.availability-zone`` . For the ``binpack`` placement strategy, valid
          values are ``cpu`` and ``memory`` . For the ``random`` placement strategy, this field
          is not used.

    - **networkConfiguration** *(dict) --*

      The VPC subnet and security group configuration for tasks that receive their own elastic
      network interface by using the ``awsvpc`` networking mode.

      - **awsvpcConfiguration** *(dict) --*

        The VPC subnets and security groups associated with a task.

        .. note::

          All specified subnets and security groups must be from the same VPC.

        - **subnets** *(list) --*

          The subnets associated with the task or service. There is a limit of 16 subnets that
          can be specified per ``AwsVpcConfiguration`` .

          .. note::

            All specified subnets must be from the same VPC.

          - *(string) --*

        - **securityGroups** *(list) --*

          The security groups associated with the task or service. If you do not specify a
          security group, the default security group for the VPC is used. There is a limit of 5
          security groups that can be specified per ``AwsVpcConfiguration`` .

          .. note::

            All specified security groups must be from the same VPC.

          - *(string) --*

        - **assignPublicIp** *(string) --*

          Whether the task's elastic network interface receives a public IP address. The default
          value is ``DISABLED`` .

    - **healthCheckGracePeriodSeconds** *(integer) --*

      The period of time, in seconds, that the Amazon ECS service scheduler ignores unhealthy
      Elastic Load Balancing target health checks after a task has first started.

    - **schedulingStrategy** *(string) --*

      The scheduling strategy to use for the service. For more information, see `Services
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs_services.html>`__ .

      There are two service scheduler strategies available:

      * ``REPLICA`` -The replica scheduling strategy places and maintains the desired number of
      tasks across your cluster. By default, the service scheduler spreads tasks across
      Availability Zones. You can use task placement strategies and constraints to customize task
      placement decisions.

      * ``DAEMON`` -The daemon scheduling strategy deploys exactly one task on each container
      instance in your cluster. When you are using this strategy, do not specify a desired number
      of tasks or any task placement strategies.

      .. note::

         Fargate tasks do not support the ``DAEMON`` scheduling strategy.

    - **deploymentController** *(dict) --*

      The deployment controller type the service is using. When using the DescribeServices API,
      this field is omitted if the service is using the ``ECS`` deployment controller type.

      - **type** *(string) --*

        The deployment controller type to use.

        There are three deployment controller types available:

          ECS

        The rolling update (``ECS`` ) deployment type involves replacing the current running
        version of the container with the latest version. The number of containers Amazon ECS
        adds or removes from the service during a rolling update is controlled by adjusting the
        minimum and maximum number of healthy tasks allowed during a service deployment, as
        specified in the  DeploymentConfiguration .

          CODE_DEPLOY

        The blue/green (``CODE_DEPLOY`` ) deployment type uses the blue/green deployment model
        powered by AWS CodeDeploy, which allows you to verify a new deployment of a service
        before sending production traffic to it.

          EXTERNAL

        The external (``EXTERNAL`` ) deployment type enables you to use any third-party
        deployment controller for full control over the deployment process for an Amazon ECS
        service.

    - **tags** *(list) --*

      The metadata that you apply to the service to help you categorize and organize them. Each
      tag consists of a key and an optional value, both of which you define.

      The following basic restrictions apply to tags:

      * Maximum number of tags per resource - 50

      * For each resource, each tag key must be unique, and each tag key can have only one value.

      * Maximum key length - 128 Unicode characters in UTF-8

      * Maximum value length - 256 Unicode characters in UTF-8

      * If your tagging schema is used across multiple services and resources, remember that
      other services may have restrictions on allowed characters. Generally allowed characters
      are: letters, numbers, and spaces representable in UTF-8, and the following characters: + -
      = . _ : / @.

      * Tag keys and values are case-sensitive.

      * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
      prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
      tag keys or values with this prefix. Tags with this prefix do not count against your tags
      per resource limit.

      - *(dict) --*

        The metadata that you apply to a resource to help you categorize and organize them. Each
        tag consists of a key and an optional value, both of which you define.

        The following basic restrictions apply to tags:

        * Maximum number of tags per resource - 50

        * For each resource, each tag key must be unique, and each tag key can have only one
        value.

        * Maximum key length - 128 Unicode characters in UTF-8

        * Maximum value length - 256 Unicode characters in UTF-8

        * If your tagging schema is used across multiple services and resources, remember that
        other services may have restrictions on allowed characters. Generally allowed characters
        are: letters, numbers, and spaces representable in UTF-8, and the following characters: +
        - = . _ : / @.

        * Tag keys and values are case-sensitive.

        * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
        prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
        tag keys or values with this prefix. Tags with this prefix do not count against your tags
        per resource limit.

        - **key** *(string) --*

          One part of a key-value pair that make up a tag. A ``key`` is a general label that acts
          like a category for more specific tag values.

        - **value** *(string) --*

          The optional part of a key-value pair that make up a tag. A ``value`` acts as a
          descriptor within a tag category (key).

    - **createdBy** *(string) --*

      The principal that created the service.

    - **enableECSManagedTags** *(boolean) --*

      Specifies whether to enable Amazon ECS managed tags for the tasks in the service. For more
      information, see `Tagging Your Amazon ECS Resources
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html>`__ in the
      *Amazon Elastic Container Service Developer Guide* .

    - **propagateTags** *(string) --*

      Specifies whether to propagate the tags from the task definition or the service to the
      task. If no value is specified, the tags are not propagated.
    """


_ClientUpdateServiceResponseTypeDef = TypedDict(
    "_ClientUpdateServiceResponseTypeDef",
    {"service": ClientUpdateServiceResponseserviceTypeDef},
    total=False,
)


class ClientUpdateServiceResponseTypeDef(_ClientUpdateServiceResponseTypeDef):
    """
    Type definition for `ClientUpdateService` `Response`

    - **service** *(dict) --*

      The full description of your service following the update call.

      - **serviceArn** *(string) --*

        The ARN that identifies the service. The ARN contains the ``arn:aws:ecs`` namespace,
        followed by the Region of the service, the AWS account ID of the service owner, the
        ``service`` namespace, and then the service name. For example,
        ``arn:aws:ecs:region:012345678910:service/my-service`` .

      - **serviceName** *(string) --*

        The name of your service. Up to 255 letters (uppercase and lowercase), numbers, and hyphens
        are allowed. Service names must be unique within a cluster, but you can have similarly
        named services in multiple clusters within a Region or across multiple Regions.

      - **clusterArn** *(string) --*

        The Amazon Resource Name (ARN) of the cluster that hosts the service.

      - **loadBalancers** *(list) --*

        A list of Elastic Load Balancing load balancer objects, containing the load balancer name,
        the container name (as it appears in a container definition), and the container port to
        access from the load balancer.

        - *(dict) --*

          Details on the load balancer or load balancers to use with a service or task set.

          - **targetGroupArn** *(string) --*

            The full Amazon Resource Name (ARN) of the Elastic Load Balancing target group or
            groups associated with a service or task set.

            A target group ARN is only specified when using an Application Load Balancer or Network
            Load Balancer. If you are using a Classic Load Balancer this should be omitted.

            For services using the ``ECS`` deployment controller, you can specify one or multiple
            target groups. For more information, see `Registering Multiple Target Groups with a
            Service
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html>`__
            in the *Amazon Elastic Container Service Developer Guide* .

            For services using the ``CODE_DEPLOY`` deployment controller, you are required to
            define two target groups for the load balancer. For more information, see `Blue/Green
            Deployment with CodeDeploy
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-bluegreen.html>`__
            in the *Amazon Elastic Container Service Developer Guide* .

            .. warning::

              If your service's task definition uses the ``awsvpc`` network mode (which is required
              for the Fargate launch type), you must choose ``ip`` as the target type, not
              ``instance`` , when creating your target groups because tasks that use the ``awsvpc``
              network mode are associated with an elastic network interface, not an Amazon EC2
              instance.

          - **loadBalancerName** *(string) --*

            The name of the load balancer to associate with the Amazon ECS service or task set.

            A load balancer name is only specified when using a Classic Load Balancer. If you are
            using an Application Load Balancer or a Network Load Balancer this should be omitted.

          - **containerName** *(string) --*

            The name of the container (as it appears in a container definition) to associate with
            the load balancer.

          - **containerPort** *(integer) --*

            The port on the container to associate with the load balancer. This port must
            correspond to a ``containerPort`` in the task definition the tasks in the service are
            using. For tasks that use the EC2 launch type, the container instance they are launched
            on must allow ingress traffic on the ``hostPort`` of the port mapping.

      - **serviceRegistries** *(list) --*

        The details of the service discovery registries to assign to this service. For more
        information, see `Service Discovery
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html>`__ .

        - *(dict) --*

          Details of the service registry.

          - **registryArn** *(string) --*

            The Amazon Resource Name (ARN) of the service registry. The currently supported service
            registry is AWS Cloud Map. For more information, see `CreateService
            <https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html>`__ .

          - **port** *(integer) --*

            The port value used if your service discovery service specified an SRV record. This
            field may be used if both the ``awsvpc`` network mode and SRV records are used.

          - **containerName** *(string) --*

            The container name value, already specified in the task definition, to be used for your
            service discovery service. If the task definition that your service task specifies uses
            the ``bridge`` or ``host`` network mode, you must specify a ``containerName`` and
            ``containerPort`` combination from the task definition. If the task definition that
            your service task specifies uses the ``awsvpc`` network mode and a type SRV DNS record
            is used, you must specify either a ``containerName`` and ``containerPort`` combination
            or a ``port`` value, but not both.

          - **containerPort** *(integer) --*

            The port value, already specified in the task definition, to be used for your service
            discovery service. If the task definition your service task specifies uses the
            ``bridge`` or ``host`` network mode, you must specify a ``containerName`` and
            ``containerPort`` combination from the task definition. If the task definition your
            service task specifies uses the ``awsvpc`` network mode and a type SRV DNS record is
            used, you must specify either a ``containerName`` and ``containerPort`` combination or
            a ``port`` value, but not both.

      - **status** *(string) --*

        The status of the service. The valid values are ``ACTIVE`` , ``DRAINING`` , or ``INACTIVE``
        .

      - **desiredCount** *(integer) --*

        The desired number of instantiations of the task definition to keep running on the service.
        This value is specified when the service is created with  CreateService , and it can be
        modified with  UpdateService .

      - **runningCount** *(integer) --*

        The number of tasks in the cluster that are in the ``RUNNING`` state.

      - **pendingCount** *(integer) --*

        The number of tasks in the cluster that are in the ``PENDING`` state.

      - **launchType** *(string) --*

        The launch type on which your service is running. If no value is specified, it will default
        to ``EC2`` . Valid values include ``EC2`` and ``FARGATE`` . For more information, see
        `Amazon ECS Launch Types
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html>`__ in the
        *Amazon Elastic Container Service Developer Guide* .

      - **platformVersion** *(string) --*

        The platform version on which to run your service. A platform version is only specified for
        tasks using the Fargate launch type. If one is not specified, the ``LATEST`` platform
        version is used by default. For more information, see `AWS Fargate Platform Versions
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html>`__ in
        the *Amazon Elastic Container Service Developer Guide* .

      - **taskDefinition** *(string) --*

        The task definition to use for tasks in the service. This value is specified when the
        service is created with  CreateService , and it can be modified with  UpdateService .

      - **deploymentConfiguration** *(dict) --*

        Optional deployment parameters that control how many tasks run during the deployment and
        the ordering of stopping and starting tasks.

        - **maximumPercent** *(integer) --*

          If a service is using the rolling update (``ECS`` ) deployment type, the **maximum
          percent** parameter represents an upper limit on the number of tasks in a service that
          are allowed in the ``RUNNING`` or ``PENDING`` state during a deployment, as a percentage
          of the desired number of tasks (rounded down to the nearest integer), and while any
          container instances are in the ``DRAINING`` state if the service contains tasks using the
          EC2 launch type. This parameter enables you to define the deployment batch size. For
          example, if your service has a desired number of four tasks and a maximum percent value
          of 200%, the scheduler may start four new tasks before stopping the four older tasks
          (provided that the cluster resources required to do this are available). The default
          value for maximum percent is 200%.

          If a service is using the blue/green (``CODE_DEPLOY`` ) or ``EXTERNAL`` deployment types
          and tasks that use the EC2 launch type, the **maximum percent** value is set to the
          default value and is used to define the upper limit on the number of the tasks in the
          service that remain in the ``RUNNING`` state while the container instances are in the
          ``DRAINING`` state. If the tasks in the service use the Fargate launch type, the maximum
          percent value is not used, although it is returned when describing your service.

        - **minimumHealthyPercent** *(integer) --*

          If a service is using the rolling update (``ECS`` ) deployment type, the **minimum
          healthy percent** represents a lower limit on the number of tasks in a service that must
          remain in the ``RUNNING`` state during a deployment, as a percentage of the desired
          number of tasks (rounded up to the nearest integer), and while any container instances
          are in the ``DRAINING`` state if the service contains tasks using the EC2 launch type.
          This parameter enables you to deploy without using additional cluster capacity. For
          example, if your service has a desired number of four tasks and a minimum healthy percent
          of 50%, the scheduler may stop two existing tasks to free up cluster capacity before
          starting two new tasks. Tasks for services that *do not* use a load balancer are
          considered healthy if they are in the ``RUNNING`` state; tasks for services that *do* use
          a load balancer are considered healthy if they are in the ``RUNNING`` state and they are
          reported as healthy by the load balancer. The default value for minimum healthy percent
          is 100%.

          If a service is using the blue/green (``CODE_DEPLOY`` ) or ``EXTERNAL`` deployment types
          and tasks that use the EC2 launch type, the **minimum healthy percent** value is set to
          the default value and is used to define the lower limit on the number of the tasks in the
          service that remain in the ``RUNNING`` state while the container instances are in the
          ``DRAINING`` state. If the tasks in the service use the Fargate launch type, the minimum
          healthy percent value is not used, although it is returned when describing your service.

      - **taskSets** *(list) --*

        Information about a set of Amazon ECS tasks in either an AWS CodeDeploy or an ``EXTERNAL``
        deployment. An Amazon ECS task set includes details such as the desired number of tasks,
        how many tasks are running, and whether the task set serves production traffic.

        - *(dict) --*

          Information about a set of Amazon ECS tasks in either an AWS CodeDeploy or an
          ``EXTERNAL`` deployment. An Amazon ECS task set includes details such as the desired
          number of tasks, how many tasks are running, and whether the task set serves production
          traffic.

          - **id** *(string) --*

            The ID of the task set.

          - **taskSetArn** *(string) --*

            The Amazon Resource Name (ARN) of the task set.

          - **serviceArn** *(string) --*

            The Amazon Resource Name (ARN) of the service the task set exists in.

          - **clusterArn** *(string) --*

            The Amazon Resource Name (ARN) of the cluster that the service that hosts the task set
            exists in.

          - **startedBy** *(string) --*

            The tag specified when a task set is started. If the task set is created by an AWS
            CodeDeploy deployment, the ``startedBy`` parameter is ``CODE_DEPLOY`` . For a task set
            created for an external deployment, the startedBy field isn't used.

          - **externalId** *(string) --*

            The external ID associated with the task set.

            If a task set is created by an AWS CodeDeploy deployment, the ``externalId`` parameter
            contains the AWS CodeDeploy deployment ID.

            If a task set is created for an external deployment and is associated with a service
            discovery registry, the ``externalId`` parameter contains the
            ``ECS_TASK_SET_EXTERNAL_ID`` AWS Cloud Map attribute.

          - **status** *(string) --*

            The status of the task set. The following describes each state:

              PRIMARY

            The task set is serving production traffic.

              ACTIVE

            The task set is not serving production traffic.

              DRAINING

            The tasks in the task set are being stopped and their corresponding targets are being
            deregistered from their target group.

          - **taskDefinition** *(string) --*

            The task definition the task set is using.

          - **computedDesiredCount** *(integer) --*

            The computed desired count for the task set. This is calculated by multiplying the
            service's ``desiredCount`` by the task set's ``scale`` percentage. The result is always
            rounded up. For example, if the computed desired count is 1.2, it rounds up to 2 tasks.

          - **pendingCount** *(integer) --*

            The number of tasks in the task set that are in the ``PENDING`` status during a
            deployment. A task in the ``PENDING`` state is preparing to enter the ``RUNNING``
            state. A task set enters the ``PENDING`` status when it launches for the first time or
            when it is restarted after being in the ``STOPPED`` state.

          - **runningCount** *(integer) --*

            The number of tasks in the task set that are in the ``RUNNING`` status during a
            deployment. A task in the ``RUNNING`` state is running and ready for use.

          - **createdAt** *(datetime) --*

            The Unix timestamp for when the task set was created.

          - **updatedAt** *(datetime) --*

            The Unix timestamp for when the task set was last updated.

          - **launchType** *(string) --*

            The launch type the tasks in the task set are using. For more information, see `Amazon
            ECS Launch Types
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html>`__ in
            the *Amazon Elastic Container Service Developer Guide* .

          - **platformVersion** *(string) --*

            The platform version on which the tasks in the task set are running. A platform version
            is only specified for tasks using the Fargate launch type. If one is not specified, the
            ``LATEST`` platform version is used by default. For more information, see `AWS Fargate
            Platform Versions
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html>`__
            in the *Amazon Elastic Container Service Developer Guide* .

          - **networkConfiguration** *(dict) --*

            The network configuration for the task set.

            - **awsvpcConfiguration** *(dict) --*

              The VPC subnets and security groups associated with a task.

              .. note::

                All specified subnets and security groups must be from the same VPC.

              - **subnets** *(list) --*

                The subnets associated with the task or service. There is a limit of 16 subnets
                that can be specified per ``AwsVpcConfiguration`` .

                .. note::

                  All specified subnets must be from the same VPC.

                - *(string) --*

              - **securityGroups** *(list) --*

                The security groups associated with the task or service. If you do not specify a
                security group, the default security group for the VPC is used. There is a limit of
                5 security groups that can be specified per ``AwsVpcConfiguration`` .

                .. note::

                  All specified security groups must be from the same VPC.

                - *(string) --*

              - **assignPublicIp** *(string) --*

                Whether the task's elastic network interface receives a public IP address. The
                default value is ``DISABLED`` .

          - **loadBalancers** *(list) --*

            Details on a load balancer that is used with a task set.

            - *(dict) --*

              Details on the load balancer or load balancers to use with a service or task set.

              - **targetGroupArn** *(string) --*

                The full Amazon Resource Name (ARN) of the Elastic Load Balancing target group or
                groups associated with a service or task set.

                A target group ARN is only specified when using an Application Load Balancer or
                Network Load Balancer. If you are using a Classic Load Balancer this should be
                omitted.

                For services using the ``ECS`` deployment controller, you can specify one or
                multiple target groups. For more information, see `Registering Multiple Target
                Groups with a Service
                <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html>`__
                in the *Amazon Elastic Container Service Developer Guide* .

                For services using the ``CODE_DEPLOY`` deployment controller, you are required to
                define two target groups for the load balancer. For more information, see
                `Blue/Green Deployment with CodeDeploy
                <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-bluegreen.html>`__
                in the *Amazon Elastic Container Service Developer Guide* .

                .. warning::

                  If your service's task definition uses the ``awsvpc`` network mode (which is
                  required for the Fargate launch type), you must choose ``ip`` as the target type,
                  not ``instance`` , when creating your target groups because tasks that use the
                  ``awsvpc`` network mode are associated with an elastic network interface, not an
                  Amazon EC2 instance.

              - **loadBalancerName** *(string) --*

                The name of the load balancer to associate with the Amazon ECS service or task set.

                A load balancer name is only specified when using a Classic Load Balancer. If you
                are using an Application Load Balancer or a Network Load Balancer this should be
                omitted.

              - **containerName** *(string) --*

                The name of the container (as it appears in a container definition) to associate
                with the load balancer.

              - **containerPort** *(integer) --*

                The port on the container to associate with the load balancer. This port must
                correspond to a ``containerPort`` in the task definition the tasks in the service
                are using. For tasks that use the EC2 launch type, the container instance they are
                launched on must allow ingress traffic on the ``hostPort`` of the port mapping.

          - **serviceRegistries** *(list) --*

            The details of the service discovery registries to assign to this task set. For more
            information, see `Service Discovery
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html>`__
            .

            - *(dict) --*

              Details of the service registry.

              - **registryArn** *(string) --*

                The Amazon Resource Name (ARN) of the service registry. The currently supported
                service registry is AWS Cloud Map. For more information, see `CreateService
                <https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html>`__ .

              - **port** *(integer) --*

                The port value used if your service discovery service specified an SRV record. This
                field may be used if both the ``awsvpc`` network mode and SRV records are used.

              - **containerName** *(string) --*

                The container name value, already specified in the task definition, to be used for
                your service discovery service. If the task definition that your service task
                specifies uses the ``bridge`` or ``host`` network mode, you must specify a
                ``containerName`` and ``containerPort`` combination from the task definition. If
                the task definition that your service task specifies uses the ``awsvpc`` network
                mode and a type SRV DNS record is used, you must specify either a ``containerName``
                and ``containerPort`` combination or a ``port`` value, but not both.

              - **containerPort** *(integer) --*

                The port value, already specified in the task definition, to be used for your
                service discovery service. If the task definition your service task specifies uses
                the ``bridge`` or ``host`` network mode, you must specify a ``containerName`` and
                ``containerPort`` combination from the task definition. If the task definition your
                service task specifies uses the ``awsvpc`` network mode and a type SRV DNS record
                is used, you must specify either a ``containerName`` and ``containerPort``
                combination or a ``port`` value, but not both.

          - **scale** *(dict) --*

            A floating-point percentage of the desired number of tasks to place and keep running in
            the task set.

            - **value** *(float) --*

              The value, specified as a percent total of a service's ``desiredCount`` , to scale
              the task set. Accepted values are numbers between 0 and 100.

            - **unit** *(string) --*

              The unit of measure for the scale value.

          - **stabilityStatus** *(string) --*

            The stability status, which indicates whether the task set has reached a steady state.
            If the following conditions are met, the task set will be in ``STEADY_STATE`` :

            * The task ``runningCount`` is equal to the ``computedDesiredCount`` .

            * The ``pendingCount`` is ``0`` .

            * There are no tasks running on container instances in the ``DRAINING`` status.

            * All tasks are reporting a healthy status from the load balancers, service discovery,
            and container health checks.

            If any of those conditions are not met, the stability status returns ``STABILIZING`` .

          - **stabilityStatusAt** *(datetime) --*

            The Unix timestamp for when the task set stability status was retrieved.

      - **deployments** *(list) --*

        The current state of deployments for the service.

        - *(dict) --*

          The details of an Amazon ECS service deployment. This is used only when a service uses
          the ``ECS`` deployment controller type.

          - **id** *(string) --*

            The ID of the deployment.

          - **status** *(string) --*

            The status of the deployment. The following describes each state:

              PRIMARY

            The most recent deployment of a service.

              ACTIVE

            A service deployment that still has running tasks, but are in the process of being
            replaced with a new ``PRIMARY`` deployment.

              INACTIVE

            A deployment that has been completely replaced.

          - **taskDefinition** *(string) --*

            The most recent task definition that was specified for the tasks in the service to use.

          - **desiredCount** *(integer) --*

            The most recent desired count of tasks that was specified for the service to deploy or
            maintain.

          - **pendingCount** *(integer) --*

            The number of tasks in the deployment that are in the ``PENDING`` status.

          - **runningCount** *(integer) --*

            The number of tasks in the deployment that are in the ``RUNNING`` status.

          - **createdAt** *(datetime) --*

            The Unix timestamp for when the service deployment was created.

          - **updatedAt** *(datetime) --*

            The Unix timestamp for when the service deployment was last updated.

          - **launchType** *(string) --*

            The launch type the tasks in the service are using. For more information, see `Amazon
            ECS Launch Types
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html>`__ in
            the *Amazon Elastic Container Service Developer Guide* .

          - **platformVersion** *(string) --*

            The platform version on which your tasks in the service are running. A platform version
            is only specified for tasks using the Fargate launch type. If one is not specified, the
            ``LATEST`` platform version is used by default. For more information, see `AWS Fargate
            Platform Versions
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html>`__
            in the *Amazon Elastic Container Service Developer Guide* .

          - **networkConfiguration** *(dict) --*

            The VPC subnet and security group configuration for tasks that receive their own
            elastic network interface by using the ``awsvpc`` networking mode.

            - **awsvpcConfiguration** *(dict) --*

              The VPC subnets and security groups associated with a task.

              .. note::

                All specified subnets and security groups must be from the same VPC.

              - **subnets** *(list) --*

                The subnets associated with the task or service. There is a limit of 16 subnets
                that can be specified per ``AwsVpcConfiguration`` .

                .. note::

                  All specified subnets must be from the same VPC.

                - *(string) --*

              - **securityGroups** *(list) --*

                The security groups associated with the task or service. If you do not specify a
                security group, the default security group for the VPC is used. There is a limit of
                5 security groups that can be specified per ``AwsVpcConfiguration`` .

                .. note::

                  All specified security groups must be from the same VPC.

                - *(string) --*

              - **assignPublicIp** *(string) --*

                Whether the task's elastic network interface receives a public IP address. The
                default value is ``DISABLED`` .

      - **roleArn** *(string) --*

        The ARN of the IAM role associated with the service that allows the Amazon ECS container
        agent to register container instances with an Elastic Load Balancing load balancer.

      - **events** *(list) --*

        The event stream for your service. A maximum of 100 of the latest events are displayed.

        - *(dict) --*

          Details on an event associated with a service.

          - **id** *(string) --*

            The ID string of the event.

          - **createdAt** *(datetime) --*

            The Unix timestamp for when the event was triggered.

          - **message** *(string) --*

            The event message.

      - **createdAt** *(datetime) --*

        The Unix timestamp for when the service was created.

      - **placementConstraints** *(list) --*

        The placement constraints for the tasks in the service.

        - *(dict) --*

          An object representing a constraint on task placement. For more information, see `Task
          Placement Constraints
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

          .. note::

            If you are using the Fargate launch type, task placement constraints are not supported.

          - **type** *(string) --*

            The type of constraint. Use ``distinctInstance`` to ensure that each task in a
            particular group is running on a different container instance. Use ``memberOf`` to
            restrict the selection to a group of valid candidates.

          - **expression** *(string) --*

            A cluster query language expression to apply to the constraint. You cannot specify an
            expression if the constraint type is ``distinctInstance`` . For more information, see
            `Cluster Query Language
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html>`__
            in the *Amazon Elastic Container Service Developer Guide* .

      - **placementStrategy** *(list) --*

        The placement strategy that determines how tasks for the service are placed.

        - *(dict) --*

          The task placement strategy for a task or service. For more information, see `Task
          Placement Strategies
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-strategies.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

          - **type** *(string) --*

            The type of placement strategy. The ``random`` placement strategy randomly places tasks
            on available candidates. The ``spread`` placement strategy spreads placement across
            available candidates evenly based on the ``field`` parameter. The ``binpack`` strategy
            places tasks on available candidates that have the least available amount of the
            resource that is specified with the ``field`` parameter. For example, if you binpack on
            memory, a task is placed on the instance with the least amount of remaining memory (but
            still enough to run the task).

          - **field** *(string) --*

            The field to apply the placement strategy against. For the ``spread`` placement
            strategy, valid values are ``instanceId`` (or ``host`` , which has the same effect), or
            any platform or custom attribute that is applied to a container instance, such as
            ``attribute:ecs.availability-zone`` . For the ``binpack`` placement strategy, valid
            values are ``cpu`` and ``memory`` . For the ``random`` placement strategy, this field
            is not used.

      - **networkConfiguration** *(dict) --*

        The VPC subnet and security group configuration for tasks that receive their own elastic
        network interface by using the ``awsvpc`` networking mode.

        - **awsvpcConfiguration** *(dict) --*

          The VPC subnets and security groups associated with a task.

          .. note::

            All specified subnets and security groups must be from the same VPC.

          - **subnets** *(list) --*

            The subnets associated with the task or service. There is a limit of 16 subnets that
            can be specified per ``AwsVpcConfiguration`` .

            .. note::

              All specified subnets must be from the same VPC.

            - *(string) --*

          - **securityGroups** *(list) --*

            The security groups associated with the task or service. If you do not specify a
            security group, the default security group for the VPC is used. There is a limit of 5
            security groups that can be specified per ``AwsVpcConfiguration`` .

            .. note::

              All specified security groups must be from the same VPC.

            - *(string) --*

          - **assignPublicIp** *(string) --*

            Whether the task's elastic network interface receives a public IP address. The default
            value is ``DISABLED`` .

      - **healthCheckGracePeriodSeconds** *(integer) --*

        The period of time, in seconds, that the Amazon ECS service scheduler ignores unhealthy
        Elastic Load Balancing target health checks after a task has first started.

      - **schedulingStrategy** *(string) --*

        The scheduling strategy to use for the service. For more information, see `Services
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs_services.html>`__ .

        There are two service scheduler strategies available:

        * ``REPLICA`` -The replica scheduling strategy places and maintains the desired number of
        tasks across your cluster. By default, the service scheduler spreads tasks across
        Availability Zones. You can use task placement strategies and constraints to customize task
        placement decisions.

        * ``DAEMON`` -The daemon scheduling strategy deploys exactly one task on each container
        instance in your cluster. When you are using this strategy, do not specify a desired number
        of tasks or any task placement strategies.

        .. note::

           Fargate tasks do not support the ``DAEMON`` scheduling strategy.

      - **deploymentController** *(dict) --*

        The deployment controller type the service is using. When using the DescribeServices API,
        this field is omitted if the service is using the ``ECS`` deployment controller type.

        - **type** *(string) --*

          The deployment controller type to use.

          There are three deployment controller types available:

            ECS

          The rolling update (``ECS`` ) deployment type involves replacing the current running
          version of the container with the latest version. The number of containers Amazon ECS
          adds or removes from the service during a rolling update is controlled by adjusting the
          minimum and maximum number of healthy tasks allowed during a service deployment, as
          specified in the  DeploymentConfiguration .

            CODE_DEPLOY

          The blue/green (``CODE_DEPLOY`` ) deployment type uses the blue/green deployment model
          powered by AWS CodeDeploy, which allows you to verify a new deployment of a service
          before sending production traffic to it.

            EXTERNAL

          The external (``EXTERNAL`` ) deployment type enables you to use any third-party
          deployment controller for full control over the deployment process for an Amazon ECS
          service.

      - **tags** *(list) --*

        The metadata that you apply to the service to help you categorize and organize them. Each
        tag consists of a key and an optional value, both of which you define.

        The following basic restrictions apply to tags:

        * Maximum number of tags per resource - 50

        * For each resource, each tag key must be unique, and each tag key can have only one value.

        * Maximum key length - 128 Unicode characters in UTF-8

        * Maximum value length - 256 Unicode characters in UTF-8

        * If your tagging schema is used across multiple services and resources, remember that
        other services may have restrictions on allowed characters. Generally allowed characters
        are: letters, numbers, and spaces representable in UTF-8, and the following characters: + -
        = . _ : / @.

        * Tag keys and values are case-sensitive.

        * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
        prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
        tag keys or values with this prefix. Tags with this prefix do not count against your tags
        per resource limit.

        - *(dict) --*

          The metadata that you apply to a resource to help you categorize and organize them. Each
          tag consists of a key and an optional value, both of which you define.

          The following basic restrictions apply to tags:

          * Maximum number of tags per resource - 50

          * For each resource, each tag key must be unique, and each tag key can have only one
          value.

          * Maximum key length - 128 Unicode characters in UTF-8

          * Maximum value length - 256 Unicode characters in UTF-8

          * If your tagging schema is used across multiple services and resources, remember that
          other services may have restrictions on allowed characters. Generally allowed characters
          are: letters, numbers, and spaces representable in UTF-8, and the following characters: +
          - = . _ : / @.

          * Tag keys and values are case-sensitive.

          * Do not use ``aws:`` , ``AWS:`` , or any upper or lowercase combination of such as a
          prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete
          tag keys or values with this prefix. Tags with this prefix do not count against your tags
          per resource limit.

          - **key** *(string) --*

            One part of a key-value pair that make up a tag. A ``key`` is a general label that acts
            like a category for more specific tag values.

          - **value** *(string) --*

            The optional part of a key-value pair that make up a tag. A ``value`` acts as a
            descriptor within a tag category (key).

      - **createdBy** *(string) --*

        The principal that created the service.

      - **enableECSManagedTags** *(boolean) --*

        Specifies whether to enable Amazon ECS managed tags for the tasks in the service. For more
        information, see `Tagging Your Amazon ECS Resources
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html>`__ in the
        *Amazon Elastic Container Service Developer Guide* .

      - **propagateTags** *(string) --*

        Specifies whether to propagate the tags from the task definition or the service to the
        task. If no value is specified, the tags are not propagated.
    """


_ClientUpdateServicedeploymentConfigurationTypeDef = TypedDict(
    "_ClientUpdateServicedeploymentConfigurationTypeDef",
    {"maximumPercent": int, "minimumHealthyPercent": int},
    total=False,
)


class ClientUpdateServicedeploymentConfigurationTypeDef(
    _ClientUpdateServicedeploymentConfigurationTypeDef
):
    """
    Type definition for `ClientUpdateService` `deploymentConfiguration`

    Optional deployment parameters that control how many tasks run during the deployment and the
    ordering of stopping and starting tasks.

    - **maximumPercent** *(integer) --*

      If a service is using the rolling update (``ECS`` ) deployment type, the **maximum percent**
      parameter represents an upper limit on the number of tasks in a service that are allowed in the
      ``RUNNING`` or ``PENDING`` state during a deployment, as a percentage of the desired number of
      tasks (rounded down to the nearest integer), and while any container instances are in the
      ``DRAINING`` state if the service contains tasks using the EC2 launch type. This parameter
      enables you to define the deployment batch size. For example, if your service has a desired
      number of four tasks and a maximum percent value of 200%, the scheduler may start four new
      tasks before stopping the four older tasks (provided that the cluster resources required to do
      this are available). The default value for maximum percent is 200%.

      If a service is using the blue/green (``CODE_DEPLOY`` ) or ``EXTERNAL`` deployment types and
      tasks that use the EC2 launch type, the **maximum percent** value is set to the default value
      and is used to define the upper limit on the number of the tasks in the service that remain in
      the ``RUNNING`` state while the container instances are in the ``DRAINING`` state. If the tasks
      in the service use the Fargate launch type, the maximum percent value is not used, although it
      is returned when describing your service.

    - **minimumHealthyPercent** *(integer) --*

      If a service is using the rolling update (``ECS`` ) deployment type, the **minimum healthy
      percent** represents a lower limit on the number of tasks in a service that must remain in the
      ``RUNNING`` state during a deployment, as a percentage of the desired number of tasks (rounded
      up to the nearest integer), and while any container instances are in the ``DRAINING`` state if
      the service contains tasks using the EC2 launch type. This parameter enables you to deploy
      without using additional cluster capacity. For example, if your service has a desired number of
      four tasks and a minimum healthy percent of 50%, the scheduler may stop two existing tasks to
      free up cluster capacity before starting two new tasks. Tasks for services that *do not* use a
      load balancer are considered healthy if they are in the ``RUNNING`` state; tasks for services
      that *do* use a load balancer are considered healthy if they are in the ``RUNNING`` state and
      they are reported as healthy by the load balancer. The default value for minimum healthy
      percent is 100%.

      If a service is using the blue/green (``CODE_DEPLOY`` ) or ``EXTERNAL`` deployment types and
      tasks that use the EC2 launch type, the **minimum healthy percent** value is set to the default
      value and is used to define the lower limit on the number of the tasks in the service that
      remain in the ``RUNNING`` state while the container instances are in the ``DRAINING`` state. If
      the tasks in the service use the Fargate launch type, the minimum healthy percent value is not
      used, although it is returned when describing your service.
    """


_RequiredClientUpdateServicenetworkConfigurationawsvpcConfigurationTypeDef = TypedDict(
    "_RequiredClientUpdateServicenetworkConfigurationawsvpcConfigurationTypeDef",
    {"subnets": List[str]},
)
_OptionalClientUpdateServicenetworkConfigurationawsvpcConfigurationTypeDef = TypedDict(
    "_OptionalClientUpdateServicenetworkConfigurationawsvpcConfigurationTypeDef",
    {"securityGroups": List[str], "assignPublicIp": str},
    total=False,
)


class ClientUpdateServicenetworkConfigurationawsvpcConfigurationTypeDef(
    _RequiredClientUpdateServicenetworkConfigurationawsvpcConfigurationTypeDef,
    _OptionalClientUpdateServicenetworkConfigurationawsvpcConfigurationTypeDef,
):
    """
    Type definition for `ClientUpdateServicenetworkConfiguration` `awsvpcConfiguration`

    The VPC subnets and security groups associated with a task.

    .. note::

      All specified subnets and security groups must be from the same VPC.

    - **subnets** *(list) --* **[REQUIRED]**

      The subnets associated with the task or service. There is a limit of 16 subnets that can be
      specified per ``AwsVpcConfiguration`` .

      .. note::

        All specified subnets must be from the same VPC.

      - *(string) --*

    - **securityGroups** *(list) --*

      The security groups associated with the task or service. If you do not specify a security
      group, the default security group for the VPC is used. There is a limit of 5 security groups
      that can be specified per ``AwsVpcConfiguration`` .

      .. note::

        All specified security groups must be from the same VPC.

      - *(string) --*

    - **assignPublicIp** *(string) --*

      Whether the task's elastic network interface receives a public IP address. The default value
      is ``DISABLED`` .
    """


_ClientUpdateServicenetworkConfigurationTypeDef = TypedDict(
    "_ClientUpdateServicenetworkConfigurationTypeDef",
    {
        "awsvpcConfiguration": ClientUpdateServicenetworkConfigurationawsvpcConfigurationTypeDef
    },
    total=False,
)


class ClientUpdateServicenetworkConfigurationTypeDef(
    _ClientUpdateServicenetworkConfigurationTypeDef
):
    """
    Type definition for `ClientUpdateService` `networkConfiguration`

    The network configuration for the service. This parameter is required for task definitions that
    use the ``awsvpc`` network mode to receive their own elastic network interface, and it is not
    supported for other network modes. For more information, see `Task Networking
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html>`__ in the
    *Amazon Elastic Container Service Developer Guide* .

    .. note::

      Updating a service to add a subnet to a list of existing subnets does not trigger a service
      deployment. For example, if your network configuration change is to keep the existing subnets
      and simply add another subnet to the network configuration, this does not trigger a new service
      deployment.

    - **awsvpcConfiguration** *(dict) --*

      The VPC subnets and security groups associated with a task.

      .. note::

        All specified subnets and security groups must be from the same VPC.

      - **subnets** *(list) --* **[REQUIRED]**

        The subnets associated with the task or service. There is a limit of 16 subnets that can be
        specified per ``AwsVpcConfiguration`` .

        .. note::

          All specified subnets must be from the same VPC.

        - *(string) --*

      - **securityGroups** *(list) --*

        The security groups associated with the task or service. If you do not specify a security
        group, the default security group for the VPC is used. There is a limit of 5 security groups
        that can be specified per ``AwsVpcConfiguration`` .

        .. note::

          All specified security groups must be from the same VPC.

        - *(string) --*

      - **assignPublicIp** *(string) --*

        Whether the task's elastic network interface receives a public IP address. The default value
        is ``DISABLED`` .
    """


_ClientUpdateTaskSetResponsetaskSetloadBalancersTypeDef = TypedDict(
    "_ClientUpdateTaskSetResponsetaskSetloadBalancersTypeDef",
    {
        "targetGroupArn": str,
        "loadBalancerName": str,
        "containerName": str,
        "containerPort": int,
    },
    total=False,
)


class ClientUpdateTaskSetResponsetaskSetloadBalancersTypeDef(
    _ClientUpdateTaskSetResponsetaskSetloadBalancersTypeDef
):
    """
    Type definition for `ClientUpdateTaskSetResponsetaskSet` `loadBalancers`

    Details on the load balancer or load balancers to use with a service or task set.

    - **targetGroupArn** *(string) --*

      The full Amazon Resource Name (ARN) of the Elastic Load Balancing target group or
      groups associated with a service or task set.

      A target group ARN is only specified when using an Application Load Balancer or Network
      Load Balancer. If you are using a Classic Load Balancer this should be omitted.

      For services using the ``ECS`` deployment controller, you can specify one or multiple
      target groups. For more information, see `Registering Multiple Target Groups with a
      Service
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

      For services using the ``CODE_DEPLOY`` deployment controller, you are required to
      define two target groups for the load balancer. For more information, see `Blue/Green
      Deployment with CodeDeploy
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-bluegreen.html>`__
      in the *Amazon Elastic Container Service Developer Guide* .

      .. warning::

        If your service's task definition uses the ``awsvpc`` network mode (which is required
        for the Fargate launch type), you must choose ``ip`` as the target type, not
        ``instance`` , when creating your target groups because tasks that use the ``awsvpc``
        network mode are associated with an elastic network interface, not an Amazon EC2
        instance.

    - **loadBalancerName** *(string) --*

      The name of the load balancer to associate with the Amazon ECS service or task set.

      A load balancer name is only specified when using a Classic Load Balancer. If you are
      using an Application Load Balancer or a Network Load Balancer this should be omitted.

    - **containerName** *(string) --*

      The name of the container (as it appears in a container definition) to associate with
      the load balancer.

    - **containerPort** *(integer) --*

      The port on the container to associate with the load balancer. This port must
      correspond to a ``containerPort`` in the task definition the tasks in the service are
      using. For tasks that use the EC2 launch type, the container instance they are launched
      on must allow ingress traffic on the ``hostPort`` of the port mapping.
    """


_ClientUpdateTaskSetResponsetaskSetnetworkConfigurationawsvpcConfigurationTypeDef = TypedDict(
    "_ClientUpdateTaskSetResponsetaskSetnetworkConfigurationawsvpcConfigurationTypeDef",
    {"subnets": List[str], "securityGroups": List[str], "assignPublicIp": str},
    total=False,
)


class ClientUpdateTaskSetResponsetaskSetnetworkConfigurationawsvpcConfigurationTypeDef(
    _ClientUpdateTaskSetResponsetaskSetnetworkConfigurationawsvpcConfigurationTypeDef
):
    """
    Type definition for `ClientUpdateTaskSetResponsetaskSetnetworkConfiguration` `awsvpcConfiguration`

    The VPC subnets and security groups associated with a task.

    .. note::

      All specified subnets and security groups must be from the same VPC.

    - **subnets** *(list) --*

      The subnets associated with the task or service. There is a limit of 16 subnets that
      can be specified per ``AwsVpcConfiguration`` .

      .. note::

        All specified subnets must be from the same VPC.

      - *(string) --*

    - **securityGroups** *(list) --*

      The security groups associated with the task or service. If you do not specify a
      security group, the default security group for the VPC is used. There is a limit of 5
      security groups that can be specified per ``AwsVpcConfiguration`` .

      .. note::

        All specified security groups must be from the same VPC.

      - *(string) --*

    - **assignPublicIp** *(string) --*

      Whether the task's elastic network interface receives a public IP address. The default
      value is ``DISABLED`` .
    """


_ClientUpdateTaskSetResponsetaskSetnetworkConfigurationTypeDef = TypedDict(
    "_ClientUpdateTaskSetResponsetaskSetnetworkConfigurationTypeDef",
    {
        "awsvpcConfiguration": ClientUpdateTaskSetResponsetaskSetnetworkConfigurationawsvpcConfigurationTypeDef
    },
    total=False,
)


class ClientUpdateTaskSetResponsetaskSetnetworkConfigurationTypeDef(
    _ClientUpdateTaskSetResponsetaskSetnetworkConfigurationTypeDef
):
    """
    Type definition for `ClientUpdateTaskSetResponsetaskSet` `networkConfiguration`

    The network configuration for the task set.

    - **awsvpcConfiguration** *(dict) --*

      The VPC subnets and security groups associated with a task.

      .. note::

        All specified subnets and security groups must be from the same VPC.

      - **subnets** *(list) --*

        The subnets associated with the task or service. There is a limit of 16 subnets that
        can be specified per ``AwsVpcConfiguration`` .

        .. note::

          All specified subnets must be from the same VPC.

        - *(string) --*

      - **securityGroups** *(list) --*

        The security groups associated with the task or service. If you do not specify a
        security group, the default security group for the VPC is used. There is a limit of 5
        security groups that can be specified per ``AwsVpcConfiguration`` .

        .. note::

          All specified security groups must be from the same VPC.

        - *(string) --*

      - **assignPublicIp** *(string) --*

        Whether the task's elastic network interface receives a public IP address. The default
        value is ``DISABLED`` .
    """


_ClientUpdateTaskSetResponsetaskSetscaleTypeDef = TypedDict(
    "_ClientUpdateTaskSetResponsetaskSetscaleTypeDef",
    {"value": float, "unit": str},
    total=False,
)


class ClientUpdateTaskSetResponsetaskSetscaleTypeDef(
    _ClientUpdateTaskSetResponsetaskSetscaleTypeDef
):
    """
    Type definition for `ClientUpdateTaskSetResponsetaskSet` `scale`

    A floating-point percentage of the desired number of tasks to place and keep running in the
    task set.

    - **value** *(float) --*

      The value, specified as a percent total of a service's ``desiredCount`` , to scale the
      task set. Accepted values are numbers between 0 and 100.

    - **unit** *(string) --*

      The unit of measure for the scale value.
    """


_ClientUpdateTaskSetResponsetaskSetserviceRegistriesTypeDef = TypedDict(
    "_ClientUpdateTaskSetResponsetaskSetserviceRegistriesTypeDef",
    {"registryArn": str, "port": int, "containerName": str, "containerPort": int},
    total=False,
)


class ClientUpdateTaskSetResponsetaskSetserviceRegistriesTypeDef(
    _ClientUpdateTaskSetResponsetaskSetserviceRegistriesTypeDef
):
    """
    Type definition for `ClientUpdateTaskSetResponsetaskSet` `serviceRegistries`

    Details of the service registry.

    - **registryArn** *(string) --*

      The Amazon Resource Name (ARN) of the service registry. The currently supported service
      registry is AWS Cloud Map. For more information, see `CreateService
      <https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html>`__ .

    - **port** *(integer) --*

      The port value used if your service discovery service specified an SRV record. This
      field may be used if both the ``awsvpc`` network mode and SRV records are used.

    - **containerName** *(string) --*

      The container name value, already specified in the task definition, to be used for your
      service discovery service. If the task definition that your service task specifies uses
      the ``bridge`` or ``host`` network mode, you must specify a ``containerName`` and
      ``containerPort`` combination from the task definition. If the task definition that
      your service task specifies uses the ``awsvpc`` network mode and a type SRV DNS record
      is used, you must specify either a ``containerName`` and ``containerPort`` combination
      or a ``port`` value, but not both.

    - **containerPort** *(integer) --*

      The port value, already specified in the task definition, to be used for your service
      discovery service. If the task definition your service task specifies uses the
      ``bridge`` or ``host`` network mode, you must specify a ``containerName`` and
      ``containerPort`` combination from the task definition. If the task definition your
      service task specifies uses the ``awsvpc`` network mode and a type SRV DNS record is
      used, you must specify either a ``containerName`` and ``containerPort`` combination or
      a ``port`` value, but not both.
    """


_ClientUpdateTaskSetResponsetaskSetTypeDef = TypedDict(
    "_ClientUpdateTaskSetResponsetaskSetTypeDef",
    {
        "id": str,
        "taskSetArn": str,
        "serviceArn": str,
        "clusterArn": str,
        "startedBy": str,
        "externalId": str,
        "status": str,
        "taskDefinition": str,
        "computedDesiredCount": int,
        "pendingCount": int,
        "runningCount": int,
        "createdAt": datetime,
        "updatedAt": datetime,
        "launchType": str,
        "platformVersion": str,
        "networkConfiguration": ClientUpdateTaskSetResponsetaskSetnetworkConfigurationTypeDef,
        "loadBalancers": List[ClientUpdateTaskSetResponsetaskSetloadBalancersTypeDef],
        "serviceRegistries": List[
            ClientUpdateTaskSetResponsetaskSetserviceRegistriesTypeDef
        ],
        "scale": ClientUpdateTaskSetResponsetaskSetscaleTypeDef,
        "stabilityStatus": str,
        "stabilityStatusAt": datetime,
    },
    total=False,
)


class ClientUpdateTaskSetResponsetaskSetTypeDef(
    _ClientUpdateTaskSetResponsetaskSetTypeDef
):
    """
    Type definition for `ClientUpdateTaskSetResponse` `taskSet`

    Information about a set of Amazon ECS tasks in either an AWS CodeDeploy or an ``EXTERNAL``
    deployment. An Amazon ECS task set includes details such as the desired number of tasks, how
    many tasks are running, and whether the task set serves production traffic.

    - **id** *(string) --*

      The ID of the task set.

    - **taskSetArn** *(string) --*

      The Amazon Resource Name (ARN) of the task set.

    - **serviceArn** *(string) --*

      The Amazon Resource Name (ARN) of the service the task set exists in.

    - **clusterArn** *(string) --*

      The Amazon Resource Name (ARN) of the cluster that the service that hosts the task set
      exists in.

    - **startedBy** *(string) --*

      The tag specified when a task set is started. If the task set is created by an AWS
      CodeDeploy deployment, the ``startedBy`` parameter is ``CODE_DEPLOY`` . For a task set
      created for an external deployment, the startedBy field isn't used.

    - **externalId** *(string) --*

      The external ID associated with the task set.

      If a task set is created by an AWS CodeDeploy deployment, the ``externalId`` parameter
      contains the AWS CodeDeploy deployment ID.

      If a task set is created for an external deployment and is associated with a service
      discovery registry, the ``externalId`` parameter contains the ``ECS_TASK_SET_EXTERNAL_ID``
      AWS Cloud Map attribute.

    - **status** *(string) --*

      The status of the task set. The following describes each state:

        PRIMARY

      The task set is serving production traffic.

        ACTIVE

      The task set is not serving production traffic.

        DRAINING

      The tasks in the task set are being stopped and their corresponding targets are being
      deregistered from their target group.

    - **taskDefinition** *(string) --*

      The task definition the task set is using.

    - **computedDesiredCount** *(integer) --*

      The computed desired count for the task set. This is calculated by multiplying the
      service's ``desiredCount`` by the task set's ``scale`` percentage. The result is always
      rounded up. For example, if the computed desired count is 1.2, it rounds up to 2 tasks.

    - **pendingCount** *(integer) --*

      The number of tasks in the task set that are in the ``PENDING`` status during a deployment.
      A task in the ``PENDING`` state is preparing to enter the ``RUNNING`` state. A task set
      enters the ``PENDING`` status when it launches for the first time or when it is restarted
      after being in the ``STOPPED`` state.

    - **runningCount** *(integer) --*

      The number of tasks in the task set that are in the ``RUNNING`` status during a deployment.
      A task in the ``RUNNING`` state is running and ready for use.

    - **createdAt** *(datetime) --*

      The Unix timestamp for when the task set was created.

    - **updatedAt** *(datetime) --*

      The Unix timestamp for when the task set was last updated.

    - **launchType** *(string) --*

      The launch type the tasks in the task set are using. For more information, see `Amazon ECS
      Launch Types
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html>`__ in the
      *Amazon Elastic Container Service Developer Guide* .

    - **platformVersion** *(string) --*

      The platform version on which the tasks in the task set are running. A platform version is
      only specified for tasks using the Fargate launch type. If one is not specified, the
      ``LATEST`` platform version is used by default. For more information, see `AWS Fargate
      Platform Versions
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html>`__ in
      the *Amazon Elastic Container Service Developer Guide* .

    - **networkConfiguration** *(dict) --*

      The network configuration for the task set.

      - **awsvpcConfiguration** *(dict) --*

        The VPC subnets and security groups associated with a task.

        .. note::

          All specified subnets and security groups must be from the same VPC.

        - **subnets** *(list) --*

          The subnets associated with the task or service. There is a limit of 16 subnets that
          can be specified per ``AwsVpcConfiguration`` .

          .. note::

            All specified subnets must be from the same VPC.

          - *(string) --*

        - **securityGroups** *(list) --*

          The security groups associated with the task or service. If you do not specify a
          security group, the default security group for the VPC is used. There is a limit of 5
          security groups that can be specified per ``AwsVpcConfiguration`` .

          .. note::

            All specified security groups must be from the same VPC.

          - *(string) --*

        - **assignPublicIp** *(string) --*

          Whether the task's elastic network interface receives a public IP address. The default
          value is ``DISABLED`` .

    - **loadBalancers** *(list) --*

      Details on a load balancer that is used with a task set.

      - *(dict) --*

        Details on the load balancer or load balancers to use with a service or task set.

        - **targetGroupArn** *(string) --*

          The full Amazon Resource Name (ARN) of the Elastic Load Balancing target group or
          groups associated with a service or task set.

          A target group ARN is only specified when using an Application Load Balancer or Network
          Load Balancer. If you are using a Classic Load Balancer this should be omitted.

          For services using the ``ECS`` deployment controller, you can specify one or multiple
          target groups. For more information, see `Registering Multiple Target Groups with a
          Service
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

          For services using the ``CODE_DEPLOY`` deployment controller, you are required to
          define two target groups for the load balancer. For more information, see `Blue/Green
          Deployment with CodeDeploy
          <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-bluegreen.html>`__
          in the *Amazon Elastic Container Service Developer Guide* .

          .. warning::

            If your service's task definition uses the ``awsvpc`` network mode (which is required
            for the Fargate launch type), you must choose ``ip`` as the target type, not
            ``instance`` , when creating your target groups because tasks that use the ``awsvpc``
            network mode are associated with an elastic network interface, not an Amazon EC2
            instance.

        - **loadBalancerName** *(string) --*

          The name of the load balancer to associate with the Amazon ECS service or task set.

          A load balancer name is only specified when using a Classic Load Balancer. If you are
          using an Application Load Balancer or a Network Load Balancer this should be omitted.

        - **containerName** *(string) --*

          The name of the container (as it appears in a container definition) to associate with
          the load balancer.

        - **containerPort** *(integer) --*

          The port on the container to associate with the load balancer. This port must
          correspond to a ``containerPort`` in the task definition the tasks in the service are
          using. For tasks that use the EC2 launch type, the container instance they are launched
          on must allow ingress traffic on the ``hostPort`` of the port mapping.

    - **serviceRegistries** *(list) --*

      The details of the service discovery registries to assign to this task set. For more
      information, see `Service Discovery
      <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html>`__ .

      - *(dict) --*

        Details of the service registry.

        - **registryArn** *(string) --*

          The Amazon Resource Name (ARN) of the service registry. The currently supported service
          registry is AWS Cloud Map. For more information, see `CreateService
          <https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html>`__ .

        - **port** *(integer) --*

          The port value used if your service discovery service specified an SRV record. This
          field may be used if both the ``awsvpc`` network mode and SRV records are used.

        - **containerName** *(string) --*

          The container name value, already specified in the task definition, to be used for your
          service discovery service. If the task definition that your service task specifies uses
          the ``bridge`` or ``host`` network mode, you must specify a ``containerName`` and
          ``containerPort`` combination from the task definition. If the task definition that
          your service task specifies uses the ``awsvpc`` network mode and a type SRV DNS record
          is used, you must specify either a ``containerName`` and ``containerPort`` combination
          or a ``port`` value, but not both.

        - **containerPort** *(integer) --*

          The port value, already specified in the task definition, to be used for your service
          discovery service. If the task definition your service task specifies uses the
          ``bridge`` or ``host`` network mode, you must specify a ``containerName`` and
          ``containerPort`` combination from the task definition. If the task definition your
          service task specifies uses the ``awsvpc`` network mode and a type SRV DNS record is
          used, you must specify either a ``containerName`` and ``containerPort`` combination or
          a ``port`` value, but not both.

    - **scale** *(dict) --*

      A floating-point percentage of the desired number of tasks to place and keep running in the
      task set.

      - **value** *(float) --*

        The value, specified as a percent total of a service's ``desiredCount`` , to scale the
        task set. Accepted values are numbers between 0 and 100.

      - **unit** *(string) --*

        The unit of measure for the scale value.

    - **stabilityStatus** *(string) --*

      The stability status, which indicates whether the task set has reached a steady state. If
      the following conditions are met, the task set will be in ``STEADY_STATE`` :

      * The task ``runningCount`` is equal to the ``computedDesiredCount`` .

      * The ``pendingCount`` is ``0`` .

      * There are no tasks running on container instances in the ``DRAINING`` status.

      * All tasks are reporting a healthy status from the load balancers, service discovery, and
      container health checks.

      If any of those conditions are not met, the stability status returns ``STABILIZING`` .

    - **stabilityStatusAt** *(datetime) --*

      The Unix timestamp for when the task set stability status was retrieved.
    """


_ClientUpdateTaskSetResponseTypeDef = TypedDict(
    "_ClientUpdateTaskSetResponseTypeDef",
    {"taskSet": ClientUpdateTaskSetResponsetaskSetTypeDef},
    total=False,
)


class ClientUpdateTaskSetResponseTypeDef(_ClientUpdateTaskSetResponseTypeDef):
    """
    Type definition for `ClientUpdateTaskSet` `Response`

    - **taskSet** *(dict) --*

      Information about a set of Amazon ECS tasks in either an AWS CodeDeploy or an ``EXTERNAL``
      deployment. An Amazon ECS task set includes details such as the desired number of tasks, how
      many tasks are running, and whether the task set serves production traffic.

      - **id** *(string) --*

        The ID of the task set.

      - **taskSetArn** *(string) --*

        The Amazon Resource Name (ARN) of the task set.

      - **serviceArn** *(string) --*

        The Amazon Resource Name (ARN) of the service the task set exists in.

      - **clusterArn** *(string) --*

        The Amazon Resource Name (ARN) of the cluster that the service that hosts the task set
        exists in.

      - **startedBy** *(string) --*

        The tag specified when a task set is started. If the task set is created by an AWS
        CodeDeploy deployment, the ``startedBy`` parameter is ``CODE_DEPLOY`` . For a task set
        created for an external deployment, the startedBy field isn't used.

      - **externalId** *(string) --*

        The external ID associated with the task set.

        If a task set is created by an AWS CodeDeploy deployment, the ``externalId`` parameter
        contains the AWS CodeDeploy deployment ID.

        If a task set is created for an external deployment and is associated with a service
        discovery registry, the ``externalId`` parameter contains the ``ECS_TASK_SET_EXTERNAL_ID``
        AWS Cloud Map attribute.

      - **status** *(string) --*

        The status of the task set. The following describes each state:

          PRIMARY

        The task set is serving production traffic.

          ACTIVE

        The task set is not serving production traffic.

          DRAINING

        The tasks in the task set are being stopped and their corresponding targets are being
        deregistered from their target group.

      - **taskDefinition** *(string) --*

        The task definition the task set is using.

      - **computedDesiredCount** *(integer) --*

        The computed desired count for the task set. This is calculated by multiplying the
        service's ``desiredCount`` by the task set's ``scale`` percentage. The result is always
        rounded up. For example, if the computed desired count is 1.2, it rounds up to 2 tasks.

      - **pendingCount** *(integer) --*

        The number of tasks in the task set that are in the ``PENDING`` status during a deployment.
        A task in the ``PENDING`` state is preparing to enter the ``RUNNING`` state. A task set
        enters the ``PENDING`` status when it launches for the first time or when it is restarted
        after being in the ``STOPPED`` state.

      - **runningCount** *(integer) --*

        The number of tasks in the task set that are in the ``RUNNING`` status during a deployment.
        A task in the ``RUNNING`` state is running and ready for use.

      - **createdAt** *(datetime) --*

        The Unix timestamp for when the task set was created.

      - **updatedAt** *(datetime) --*

        The Unix timestamp for when the task set was last updated.

      - **launchType** *(string) --*

        The launch type the tasks in the task set are using. For more information, see `Amazon ECS
        Launch Types
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html>`__ in the
        *Amazon Elastic Container Service Developer Guide* .

      - **platformVersion** *(string) --*

        The platform version on which the tasks in the task set are running. A platform version is
        only specified for tasks using the Fargate launch type. If one is not specified, the
        ``LATEST`` platform version is used by default. For more information, see `AWS Fargate
        Platform Versions
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html>`__ in
        the *Amazon Elastic Container Service Developer Guide* .

      - **networkConfiguration** *(dict) --*

        The network configuration for the task set.

        - **awsvpcConfiguration** *(dict) --*

          The VPC subnets and security groups associated with a task.

          .. note::

            All specified subnets and security groups must be from the same VPC.

          - **subnets** *(list) --*

            The subnets associated with the task or service. There is a limit of 16 subnets that
            can be specified per ``AwsVpcConfiguration`` .

            .. note::

              All specified subnets must be from the same VPC.

            - *(string) --*

          - **securityGroups** *(list) --*

            The security groups associated with the task or service. If you do not specify a
            security group, the default security group for the VPC is used. There is a limit of 5
            security groups that can be specified per ``AwsVpcConfiguration`` .

            .. note::

              All specified security groups must be from the same VPC.

            - *(string) --*

          - **assignPublicIp** *(string) --*

            Whether the task's elastic network interface receives a public IP address. The default
            value is ``DISABLED`` .

      - **loadBalancers** *(list) --*

        Details on a load balancer that is used with a task set.

        - *(dict) --*

          Details on the load balancer or load balancers to use with a service or task set.

          - **targetGroupArn** *(string) --*

            The full Amazon Resource Name (ARN) of the Elastic Load Balancing target group or
            groups associated with a service or task set.

            A target group ARN is only specified when using an Application Load Balancer or Network
            Load Balancer. If you are using a Classic Load Balancer this should be omitted.

            For services using the ``ECS`` deployment controller, you can specify one or multiple
            target groups. For more information, see `Registering Multiple Target Groups with a
            Service
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html>`__
            in the *Amazon Elastic Container Service Developer Guide* .

            For services using the ``CODE_DEPLOY`` deployment controller, you are required to
            define two target groups for the load balancer. For more information, see `Blue/Green
            Deployment with CodeDeploy
            <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-bluegreen.html>`__
            in the *Amazon Elastic Container Service Developer Guide* .

            .. warning::

              If your service's task definition uses the ``awsvpc`` network mode (which is required
              for the Fargate launch type), you must choose ``ip`` as the target type, not
              ``instance`` , when creating your target groups because tasks that use the ``awsvpc``
              network mode are associated with an elastic network interface, not an Amazon EC2
              instance.

          - **loadBalancerName** *(string) --*

            The name of the load balancer to associate with the Amazon ECS service or task set.

            A load balancer name is only specified when using a Classic Load Balancer. If you are
            using an Application Load Balancer or a Network Load Balancer this should be omitted.

          - **containerName** *(string) --*

            The name of the container (as it appears in a container definition) to associate with
            the load balancer.

          - **containerPort** *(integer) --*

            The port on the container to associate with the load balancer. This port must
            correspond to a ``containerPort`` in the task definition the tasks in the service are
            using. For tasks that use the EC2 launch type, the container instance they are launched
            on must allow ingress traffic on the ``hostPort`` of the port mapping.

      - **serviceRegistries** *(list) --*

        The details of the service discovery registries to assign to this task set. For more
        information, see `Service Discovery
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html>`__ .

        - *(dict) --*

          Details of the service registry.

          - **registryArn** *(string) --*

            The Amazon Resource Name (ARN) of the service registry. The currently supported service
            registry is AWS Cloud Map. For more information, see `CreateService
            <https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html>`__ .

          - **port** *(integer) --*

            The port value used if your service discovery service specified an SRV record. This
            field may be used if both the ``awsvpc`` network mode and SRV records are used.

          - **containerName** *(string) --*

            The container name value, already specified in the task definition, to be used for your
            service discovery service. If the task definition that your service task specifies uses
            the ``bridge`` or ``host`` network mode, you must specify a ``containerName`` and
            ``containerPort`` combination from the task definition. If the task definition that
            your service task specifies uses the ``awsvpc`` network mode and a type SRV DNS record
            is used, you must specify either a ``containerName`` and ``containerPort`` combination
            or a ``port`` value, but not both.

          - **containerPort** *(integer) --*

            The port value, already specified in the task definition, to be used for your service
            discovery service. If the task definition your service task specifies uses the
            ``bridge`` or ``host`` network mode, you must specify a ``containerName`` and
            ``containerPort`` combination from the task definition. If the task definition your
            service task specifies uses the ``awsvpc`` network mode and a type SRV DNS record is
            used, you must specify either a ``containerName`` and ``containerPort`` combination or
            a ``port`` value, but not both.

      - **scale** *(dict) --*

        A floating-point percentage of the desired number of tasks to place and keep running in the
        task set.

        - **value** *(float) --*

          The value, specified as a percent total of a service's ``desiredCount`` , to scale the
          task set. Accepted values are numbers between 0 and 100.

        - **unit** *(string) --*

          The unit of measure for the scale value.

      - **stabilityStatus** *(string) --*

        The stability status, which indicates whether the task set has reached a steady state. If
        the following conditions are met, the task set will be in ``STEADY_STATE`` :

        * The task ``runningCount`` is equal to the ``computedDesiredCount`` .

        * The ``pendingCount`` is ``0`` .

        * There are no tasks running on container instances in the ``DRAINING`` status.

        * All tasks are reporting a healthy status from the load balancers, service discovery, and
        container health checks.

        If any of those conditions are not met, the stability status returns ``STABILIZING`` .

      - **stabilityStatusAt** *(datetime) --*

        The Unix timestamp for when the task set stability status was retrieved.
    """


_ClientUpdateTaskSetscaleTypeDef = TypedDict(
    "_ClientUpdateTaskSetscaleTypeDef", {"value": float, "unit": str}, total=False
)


class ClientUpdateTaskSetscaleTypeDef(_ClientUpdateTaskSetscaleTypeDef):
    """
    Type definition for `ClientUpdateTaskSet` `scale`

    A floating-point percentage of the desired number of tasks to place and keep running in the task
    set.

    - **value** *(float) --*

      The value, specified as a percent total of a service's ``desiredCount`` , to scale the task
      set. Accepted values are numbers between 0 and 100.

    - **unit** *(string) --*

      The unit of measure for the scale value.
    """


_ListAccountSettingsPaginatePaginationConfigTypeDef = TypedDict(
    "_ListAccountSettingsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class ListAccountSettingsPaginatePaginationConfigTypeDef(
    _ListAccountSettingsPaginatePaginationConfigTypeDef
):
    """
    Type definition for `ListAccountSettingsPaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_ListAccountSettingsPaginateResponsesettingsTypeDef = TypedDict(
    "_ListAccountSettingsPaginateResponsesettingsTypeDef",
    {"name": str, "value": str, "principalArn": str},
    total=False,
)


class ListAccountSettingsPaginateResponsesettingsTypeDef(
    _ListAccountSettingsPaginateResponsesettingsTypeDef
):
    """
    Type definition for `ListAccountSettingsPaginateResponse` `settings`

    The current account setting for a resource.

    - **name** *(string) --*

      The Amazon ECS resource name.

    - **value** *(string) --*

      Whether the account setting is enabled or disabled for the specified resource.

    - **principalArn** *(string) --*

      The ARN of the principal, which can be an IAM user, IAM role, or the root user. If this
      field is omitted, the authenticated user is assumed.
    """


_ListAccountSettingsPaginateResponseTypeDef = TypedDict(
    "_ListAccountSettingsPaginateResponseTypeDef",
    {
        "settings": List[ListAccountSettingsPaginateResponsesettingsTypeDef],
        "NextToken": str,
    },
    total=False,
)


class ListAccountSettingsPaginateResponseTypeDef(
    _ListAccountSettingsPaginateResponseTypeDef
):
    """
    Type definition for `ListAccountSettingsPaginate` `Response`

    - **settings** *(list) --*

      The account settings for the resource.

      - *(dict) --*

        The current account setting for a resource.

        - **name** *(string) --*

          The Amazon ECS resource name.

        - **value** *(string) --*

          Whether the account setting is enabled or disabled for the specified resource.

        - **principalArn** *(string) --*

          The ARN of the principal, which can be an IAM user, IAM role, or the root user. If this
          field is omitted, the authenticated user is assumed.

    - **NextToken** *(string) --*

      A token to resume pagination.
    """


_ListAttributesPaginatePaginationConfigTypeDef = TypedDict(
    "_ListAttributesPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class ListAttributesPaginatePaginationConfigTypeDef(
    _ListAttributesPaginatePaginationConfigTypeDef
):
    """
    Type definition for `ListAttributesPaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_ListAttributesPaginateResponseattributesTypeDef = TypedDict(
    "_ListAttributesPaginateResponseattributesTypeDef",
    {"name": str, "value": str, "targetType": str, "targetId": str},
    total=False,
)


class ListAttributesPaginateResponseattributesTypeDef(
    _ListAttributesPaginateResponseattributesTypeDef
):
    """
    Type definition for `ListAttributesPaginateResponse` `attributes`

    An attribute is a name-value pair associated with an Amazon ECS object. Attributes enable
    you to extend the Amazon ECS data model by adding custom metadata to your resources. For
    more information, see `Attributes
    <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html#attributes>`__
    in the *Amazon Elastic Container Service Developer Guide* .

    - **name** *(string) --*

      The name of the attribute. Up to 128 letters (uppercase and lowercase), numbers, hyphens,
      underscores, and periods are allowed.

    - **value** *(string) --*

      The value of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
      hyphens, underscores, periods, at signs (@), forward slashes, colons, and spaces are
      allowed.

    - **targetType** *(string) --*

      The type of the target with which to attach the attribute. This parameter is required if
      you use the short form ID for a resource instead of the full ARN.

    - **targetId** *(string) --*

      The ID of the target. You can specify the short form ID for a resource or the full Amazon
      Resource Name (ARN).
    """


_ListAttributesPaginateResponseTypeDef = TypedDict(
    "_ListAttributesPaginateResponseTypeDef",
    {
        "attributes": List[ListAttributesPaginateResponseattributesTypeDef],
        "NextToken": str,
    },
    total=False,
)


class ListAttributesPaginateResponseTypeDef(_ListAttributesPaginateResponseTypeDef):
    """
    Type definition for `ListAttributesPaginate` `Response`

    - **attributes** *(list) --*

      A list of attribute objects that meet the criteria of the request.

      - *(dict) --*

        An attribute is a name-value pair associated with an Amazon ECS object. Attributes enable
        you to extend the Amazon ECS data model by adding custom metadata to your resources. For
        more information, see `Attributes
        <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html#attributes>`__
        in the *Amazon Elastic Container Service Developer Guide* .

        - **name** *(string) --*

          The name of the attribute. Up to 128 letters (uppercase and lowercase), numbers, hyphens,
          underscores, and periods are allowed.

        - **value** *(string) --*

          The value of the attribute. Up to 128 letters (uppercase and lowercase), numbers,
          hyphens, underscores, periods, at signs (@), forward slashes, colons, and spaces are
          allowed.

        - **targetType** *(string) --*

          The type of the target with which to attach the attribute. This parameter is required if
          you use the short form ID for a resource instead of the full ARN.

        - **targetId** *(string) --*

          The ID of the target. You can specify the short form ID for a resource or the full Amazon
          Resource Name (ARN).

    - **NextToken** *(string) --*

      A token to resume pagination.
    """


_ListClustersPaginatePaginationConfigTypeDef = TypedDict(
    "_ListClustersPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class ListClustersPaginatePaginationConfigTypeDef(
    _ListClustersPaginatePaginationConfigTypeDef
):
    """
    Type definition for `ListClustersPaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_ListClustersPaginateResponseTypeDef = TypedDict(
    "_ListClustersPaginateResponseTypeDef",
    {"clusterArns": List[str], "NextToken": str},
    total=False,
)


class ListClustersPaginateResponseTypeDef(_ListClustersPaginateResponseTypeDef):
    """
    Type definition for `ListClustersPaginate` `Response`

    - **clusterArns** *(list) --*

      The list of full Amazon Resource Name (ARN) entries for each cluster associated with your
      account.

      - *(string) --*

    - **NextToken** *(string) --*

      A token to resume pagination.
    """


_ListContainerInstancesPaginatePaginationConfigTypeDef = TypedDict(
    "_ListContainerInstancesPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class ListContainerInstancesPaginatePaginationConfigTypeDef(
    _ListContainerInstancesPaginatePaginationConfigTypeDef
):
    """
    Type definition for `ListContainerInstancesPaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_ListContainerInstancesPaginateResponseTypeDef = TypedDict(
    "_ListContainerInstancesPaginateResponseTypeDef",
    {"containerInstanceArns": List[str], "NextToken": str},
    total=False,
)


class ListContainerInstancesPaginateResponseTypeDef(
    _ListContainerInstancesPaginateResponseTypeDef
):
    """
    Type definition for `ListContainerInstancesPaginate` `Response`

    - **containerInstanceArns** *(list) --*

      The list of container instances with full ARN entries for each container instance associated
      with the specified cluster.

      - *(string) --*

    - **NextToken** *(string) --*

      A token to resume pagination.
    """


_ListServicesPaginatePaginationConfigTypeDef = TypedDict(
    "_ListServicesPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class ListServicesPaginatePaginationConfigTypeDef(
    _ListServicesPaginatePaginationConfigTypeDef
):
    """
    Type definition for `ListServicesPaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_ListServicesPaginateResponseTypeDef = TypedDict(
    "_ListServicesPaginateResponseTypeDef",
    {"serviceArns": List[str], "NextToken": str},
    total=False,
)


class ListServicesPaginateResponseTypeDef(_ListServicesPaginateResponseTypeDef):
    """
    Type definition for `ListServicesPaginate` `Response`

    - **serviceArns** *(list) --*

      The list of full ARN entries for each service associated with the specified cluster.

      - *(string) --*

    - **NextToken** *(string) --*

      A token to resume pagination.
    """


_ListTaskDefinitionFamiliesPaginatePaginationConfigTypeDef = TypedDict(
    "_ListTaskDefinitionFamiliesPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class ListTaskDefinitionFamiliesPaginatePaginationConfigTypeDef(
    _ListTaskDefinitionFamiliesPaginatePaginationConfigTypeDef
):
    """
    Type definition for `ListTaskDefinitionFamiliesPaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_ListTaskDefinitionFamiliesPaginateResponseTypeDef = TypedDict(
    "_ListTaskDefinitionFamiliesPaginateResponseTypeDef",
    {"families": List[str], "NextToken": str},
    total=False,
)


class ListTaskDefinitionFamiliesPaginateResponseTypeDef(
    _ListTaskDefinitionFamiliesPaginateResponseTypeDef
):
    """
    Type definition for `ListTaskDefinitionFamiliesPaginate` `Response`

    - **families** *(list) --*

      The list of task definition family names that match the ``ListTaskDefinitionFamilies``
      request.

      - *(string) --*

    - **NextToken** *(string) --*

      A token to resume pagination.
    """


_ListTaskDefinitionsPaginatePaginationConfigTypeDef = TypedDict(
    "_ListTaskDefinitionsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class ListTaskDefinitionsPaginatePaginationConfigTypeDef(
    _ListTaskDefinitionsPaginatePaginationConfigTypeDef
):
    """
    Type definition for `ListTaskDefinitionsPaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_ListTaskDefinitionsPaginateResponseTypeDef = TypedDict(
    "_ListTaskDefinitionsPaginateResponseTypeDef",
    {"taskDefinitionArns": List[str], "NextToken": str},
    total=False,
)


class ListTaskDefinitionsPaginateResponseTypeDef(
    _ListTaskDefinitionsPaginateResponseTypeDef
):
    """
    Type definition for `ListTaskDefinitionsPaginate` `Response`

    - **taskDefinitionArns** *(list) --*

      The list of task definition Amazon Resource Name (ARN) entries for the
      ``ListTaskDefinitions`` request.

      - *(string) --*

    - **NextToken** *(string) --*

      A token to resume pagination.
    """


_ListTasksPaginatePaginationConfigTypeDef = TypedDict(
    "_ListTasksPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class ListTasksPaginatePaginationConfigTypeDef(
    _ListTasksPaginatePaginationConfigTypeDef
):
    """
    Type definition for `ListTasksPaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_ListTasksPaginateResponseTypeDef = TypedDict(
    "_ListTasksPaginateResponseTypeDef",
    {"taskArns": List[str], "NextToken": str},
    total=False,
)


class ListTasksPaginateResponseTypeDef(_ListTasksPaginateResponseTypeDef):
    """
    Type definition for `ListTasksPaginate` `Response`

    - **taskArns** *(list) --*

      The list of task ARN entries for the ``ListTasks`` request.

      - *(string) --*

    - **NextToken** *(string) --*

      A token to resume pagination.
    """


_ServicesInactiveWaitWaiterConfigTypeDef = TypedDict(
    "_ServicesInactiveWaitWaiterConfigTypeDef",
    {"Delay": int, "MaxAttempts": int},
    total=False,
)


class ServicesInactiveWaitWaiterConfigTypeDef(_ServicesInactiveWaitWaiterConfigTypeDef):
    """
    Type definition for `ServicesInactiveWait` `WaiterConfig`

    A dictionary that provides parameters to control waiting behavior.

    - **Delay** *(integer) --*

      The amount of time in seconds to wait between attempts. Default: 15

    - **MaxAttempts** *(integer) --*

      The maximum number of attempts to be made. Default: 40
    """


_ServicesStableWaitWaiterConfigTypeDef = TypedDict(
    "_ServicesStableWaitWaiterConfigTypeDef",
    {"Delay": int, "MaxAttempts": int},
    total=False,
)


class ServicesStableWaitWaiterConfigTypeDef(_ServicesStableWaitWaiterConfigTypeDef):
    """
    Type definition for `ServicesStableWait` `WaiterConfig`

    A dictionary that provides parameters to control waiting behavior.

    - **Delay** *(integer) --*

      The amount of time in seconds to wait between attempts. Default: 15

    - **MaxAttempts** *(integer) --*

      The maximum number of attempts to be made. Default: 40
    """


_TasksRunningWaitWaiterConfigTypeDef = TypedDict(
    "_TasksRunningWaitWaiterConfigTypeDef",
    {"Delay": int, "MaxAttempts": int},
    total=False,
)


class TasksRunningWaitWaiterConfigTypeDef(_TasksRunningWaitWaiterConfigTypeDef):
    """
    Type definition for `TasksRunningWait` `WaiterConfig`

    A dictionary that provides parameters to control waiting behavior.

    - **Delay** *(integer) --*

      The amount of time in seconds to wait between attempts. Default: 6

    - **MaxAttempts** *(integer) --*

      The maximum number of attempts to be made. Default: 100
    """


_TasksStoppedWaitWaiterConfigTypeDef = TypedDict(
    "_TasksStoppedWaitWaiterConfigTypeDef",
    {"Delay": int, "MaxAttempts": int},
    total=False,
)


class TasksStoppedWaitWaiterConfigTypeDef(_TasksStoppedWaitWaiterConfigTypeDef):
    """
    Type definition for `TasksStoppedWait` `WaiterConfig`

    A dictionary that provides parameters to control waiting behavior.

    - **Delay** *(integer) --*

      The amount of time in seconds to wait between attempts. Default: 6

    - **MaxAttempts** *(integer) --*

      The maximum number of attempts to be made. Default: 100
    """
