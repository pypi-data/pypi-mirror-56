# coding: utf-8

"""
    Spotii Billing API

    API for Billing  # noqa: E501

    OpenAPI spec version: v1.0
    Contact: hello@nuclearo.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Account(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'billing_addresses': 'str',
        'payment_methods': 'str',
        'installments': 'str',
        'external_key': 'str',
        'name': 'str',
        'first_name_len': 'int',
        'email': 'str',
        'phone': 'str',
        'currency': 'str',
        'time_zone': 'str',
        'locale': 'str',
        'country': 'str',
        'notes': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'account_id': 'account_id',
        'billing_addresses': 'billing_addresses',
        'payment_methods': 'payment_methods',
        'installments': 'installments',
        'external_key': 'external_key',
        'name': 'name',
        'first_name_len': 'first_name_len',
        'email': 'email',
        'phone': 'phone',
        'currency': 'currency',
        'time_zone': 'time_zone',
        'locale': 'locale',
        'country': 'country',
        'notes': 'notes',
        'created_at': 'created_at',
        'updated_at': 'updated_at'
    }

    def __init__(self, account_id=None, billing_addresses=None, payment_methods=None, installments=None, external_key=None, name=None, first_name_len=None, email=None, phone=None, currency=None, time_zone=None, locale=None, country=None, notes=None, created_at=None, updated_at=None):  # noqa: E501
        """Account - a model defined in Swagger"""  # noqa: E501
        self._account_id = None
        self._billing_addresses = None
        self._payment_methods = None
        self._installments = None
        self._external_key = None
        self._name = None
        self._first_name_len = None
        self._email = None
        self._phone = None
        self._currency = None
        self._time_zone = None
        self._locale = None
        self._country = None
        self._notes = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None
        if account_id is not None:
            self.account_id = account_id
        if billing_addresses is not None:
            self.billing_addresses = billing_addresses
        if payment_methods is not None:
            self.payment_methods = payment_methods
        if installments is not None:
            self.installments = installments
        self.external_key = external_key
        if name is not None:
            self.name = name
        if first_name_len is not None:
            self.first_name_len = first_name_len
        if email is not None:
            self.email = email
        if phone is not None:
            self.phone = phone
        if currency is not None:
            self.currency = currency
        if time_zone is not None:
            self.time_zone = time_zone
        if locale is not None:
            self.locale = locale
        if country is not None:
            self.country = country
        if notes is not None:
            self.notes = notes
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def account_id(self):
        """Gets the account_id of this Account.  # noqa: E501


        :return: The account_id of this Account.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Account.


        :param account_id: The account_id of this Account.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def billing_addresses(self):
        """Gets the billing_addresses of this Account.  # noqa: E501


        :return: The billing_addresses of this Account.  # noqa: E501
        :rtype: str
        """
        return self._billing_addresses

    @billing_addresses.setter
    def billing_addresses(self, billing_addresses):
        """Sets the billing_addresses of this Account.


        :param billing_addresses: The billing_addresses of this Account.  # noqa: E501
        :type: str
        """

        self._billing_addresses = billing_addresses

    @property
    def payment_methods(self):
        """Gets the payment_methods of this Account.  # noqa: E501


        :return: The payment_methods of this Account.  # noqa: E501
        :rtype: str
        """
        return self._payment_methods

    @payment_methods.setter
    def payment_methods(self, payment_methods):
        """Sets the payment_methods of this Account.


        :param payment_methods: The payment_methods of this Account.  # noqa: E501
        :type: str
        """

        self._payment_methods = payment_methods

    @property
    def installments(self):
        """Gets the installments of this Account.  # noqa: E501


        :return: The installments of this Account.  # noqa: E501
        :rtype: str
        """
        return self._installments

    @installments.setter
    def installments(self, installments):
        """Sets the installments of this Account.


        :param installments: The installments of this Account.  # noqa: E501
        :type: str
        """

        self._installments = installments

    @property
    def external_key(self):
        """Gets the external_key of this Account.  # noqa: E501


        :return: The external_key of this Account.  # noqa: E501
        :rtype: str
        """
        return self._external_key

    @external_key.setter
    def external_key(self, external_key):
        """Sets the external_key of this Account.


        :param external_key: The external_key of this Account.  # noqa: E501
        :type: str
        """
        if external_key is None:
            raise ValueError("Invalid value for `external_key`, must not be `None`")  # noqa: E501

        self._external_key = external_key

    @property
    def name(self):
        """Gets the name of this Account.  # noqa: E501


        :return: The name of this Account.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Account.


        :param name: The name of this Account.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def first_name_len(self):
        """Gets the first_name_len of this Account.  # noqa: E501


        :return: The first_name_len of this Account.  # noqa: E501
        :rtype: int
        """
        return self._first_name_len

    @first_name_len.setter
    def first_name_len(self, first_name_len):
        """Sets the first_name_len of this Account.


        :param first_name_len: The first_name_len of this Account.  # noqa: E501
        :type: int
        """

        self._first_name_len = first_name_len

    @property
    def email(self):
        """Gets the email of this Account.  # noqa: E501


        :return: The email of this Account.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Account.


        :param email: The email of this Account.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def phone(self):
        """Gets the phone of this Account.  # noqa: E501


        :return: The phone of this Account.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this Account.


        :param phone: The phone of this Account.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def currency(self):
        """Gets the currency of this Account.  # noqa: E501


        :return: The currency of this Account.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Account.


        :param currency: The currency of this Account.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def time_zone(self):
        """Gets the time_zone of this Account.  # noqa: E501


        :return: The time_zone of this Account.  # noqa: E501
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this Account.


        :param time_zone: The time_zone of this Account.  # noqa: E501
        :type: str
        """

        self._time_zone = time_zone

    @property
    def locale(self):
        """Gets the locale of this Account.  # noqa: E501


        :return: The locale of this Account.  # noqa: E501
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this Account.


        :param locale: The locale of this Account.  # noqa: E501
        :type: str
        """

        self._locale = locale

    @property
    def country(self):
        """Gets the country of this Account.  # noqa: E501


        :return: The country of this Account.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Account.


        :param country: The country of this Account.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def notes(self):
        """Gets the notes of this Account.  # noqa: E501


        :return: The notes of this Account.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Account.


        :param notes: The notes of this Account.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def created_at(self):
        """Gets the created_at of this Account.  # noqa: E501


        :return: The created_at of this Account.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Account.


        :param created_at: The created_at of this Account.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Account.  # noqa: E501


        :return: The updated_at of this Account.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Account.


        :param updated_at: The updated_at of this Account.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Account, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Account):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
