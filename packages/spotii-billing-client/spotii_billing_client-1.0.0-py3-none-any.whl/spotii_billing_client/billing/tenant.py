# coding: utf-8

"""
    Spotii Billing API

    API for Billing  # noqa: E501

    OpenAPI spec version: v1.0
    Contact: hello@nuclearo.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Tenant(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tenant_id': 'str',
        'external_key': 'str',
        'name': 'str',
        'client_key': 'str',
        'client_secret': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'deleted_at': 'datetime'
    }

    attribute_map = {
        'tenant_id': 'tenant_id',
        'external_key': 'external_key',
        'name': 'name',
        'client_key': 'client_key',
        'client_secret': 'client_secret',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'deleted_at': 'deleted_at'
    }

    def __init__(self, tenant_id=None, external_key=None, name=None, client_key=None, client_secret=None, created_at=None, updated_at=None, deleted_at=None):  # noqa: E501
        """Tenant - a model defined in Swagger"""  # noqa: E501
        self._tenant_id = None
        self._external_key = None
        self._name = None
        self._client_key = None
        self._client_secret = None
        self._created_at = None
        self._updated_at = None
        self._deleted_at = None
        self.discriminator = None
        if tenant_id is not None:
            self.tenant_id = tenant_id
        if external_key is not None:
            self.external_key = external_key
        self.name = name
        self.client_key = client_key
        self.client_secret = client_secret
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if deleted_at is not None:
            self.deleted_at = deleted_at

    @property
    def tenant_id(self):
        """Gets the tenant_id of this Tenant.  # noqa: E501


        :return: The tenant_id of this Tenant.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this Tenant.


        :param tenant_id: The tenant_id of this Tenant.  # noqa: E501
        :type: str
        """

        self._tenant_id = tenant_id

    @property
    def external_key(self):
        """Gets the external_key of this Tenant.  # noqa: E501


        :return: The external_key of this Tenant.  # noqa: E501
        :rtype: str
        """
        return self._external_key

    @external_key.setter
    def external_key(self, external_key):
        """Sets the external_key of this Tenant.


        :param external_key: The external_key of this Tenant.  # noqa: E501
        :type: str
        """

        self._external_key = external_key

    @property
    def name(self):
        """Gets the name of this Tenant.  # noqa: E501


        :return: The name of this Tenant.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Tenant.


        :param name: The name of this Tenant.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def client_key(self):
        """Gets the client_key of this Tenant.  # noqa: E501


        :return: The client_key of this Tenant.  # noqa: E501
        :rtype: str
        """
        return self._client_key

    @client_key.setter
    def client_key(self, client_key):
        """Sets the client_key of this Tenant.


        :param client_key: The client_key of this Tenant.  # noqa: E501
        :type: str
        """
        if client_key is None:
            raise ValueError("Invalid value for `client_key`, must not be `None`")  # noqa: E501

        self._client_key = client_key

    @property
    def client_secret(self):
        """Gets the client_secret of this Tenant.  # noqa: E501


        :return: The client_secret of this Tenant.  # noqa: E501
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this Tenant.


        :param client_secret: The client_secret of this Tenant.  # noqa: E501
        :type: str
        """
        if client_secret is None:
            raise ValueError("Invalid value for `client_secret`, must not be `None`")  # noqa: E501

        self._client_secret = client_secret

    @property
    def created_at(self):
        """Gets the created_at of this Tenant.  # noqa: E501


        :return: The created_at of this Tenant.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Tenant.


        :param created_at: The created_at of this Tenant.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Tenant.  # noqa: E501


        :return: The updated_at of this Tenant.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Tenant.


        :param updated_at: The updated_at of this Tenant.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def deleted_at(self):
        """Gets the deleted_at of this Tenant.  # noqa: E501


        :return: The deleted_at of this Tenant.  # noqa: E501
        :rtype: datetime
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at):
        """Sets the deleted_at of this Tenant.


        :param deleted_at: The deleted_at of this Tenant.  # noqa: E501
        :type: datetime
        """

        self._deleted_at = deleted_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Tenant, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Tenant):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
