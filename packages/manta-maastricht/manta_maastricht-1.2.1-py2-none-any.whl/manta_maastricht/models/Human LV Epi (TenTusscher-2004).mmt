[[model]]
author: Cellml converter
desc: """
    A Model For Human Ventricular Tissue - epicardial cell variant
    Catherine
    Lloyd
    Auckland Bioengineering Institute, The University of Auckland
    Model
    Status
    This variant of the model was created by Penny Noble of Oxford
    University, and represents the parameters given for the epicardial cell
    variant in Ten Tusscher et al. 2004. A stimulus protocol component has been
    added to the model to allow simulation of trains of action potentials. This
    file is known to run in OpenCell and COR to recreate the published results.
    The units have been checked and they are consistent.
    Model Structure
    ABSTRACT: The experimental and clinical possibilities for studying cardiac
    arrhythmias in human ventricular myocardium are very limited. Therefore,
    the use of alternative methods such as computer simulations is of great
    importance. In this article we introduce a mathematical model of the action
    potential of human ventricular cells that, while including a high level of
    electrophysiological detail, is computationally cost-effective enough to be
    applied in large-scale spatial simulations for the study of reentrant
    arrhythmias. The model is based on recent experimental data on most of the
    major ionic currents: the fast sodium, L-type calcium, transient outward,
    rapid and slow delayed rectifier, and inward rectifier currents. The model
    includes a basic calcium dynamics, allowing for the realistic modeling of
    calcium transients, calcium current inactivation, and the contraction
    staircase. We are able to reproduce human epicardial, endocardial, and M
    cell action potentials and show that differences can be explained by
    differences in the transient outward and slow delayed rectifier currents.
    Our model reproduces the experimentally observed data on action potential
    duration restitution, which is an important characteristic for reentrant
    arrhythmias. The conduction velocity restitution of our model is broader
    than in other models and agrees better with available data. Finally, we
    model the dynamics of spiral wave rotation in a two-dimensional sheet of
    human ventricular tissue and show that the spiral wave follows a complex
    meandering pattern and has a period of 265 ms. We conclude that the
    proposed model reproduces a variety of electrophysiological behaviors and
    provides a basis for studies of reentrant arrhythmias in human ventricular
    tissue.
    The original paper reference is cited below:
    A model for human
    ventricular tissue, K.H.W.J. ten Tusscher, D. Noble, P.J. Noble, and A.V.
    Panfilov, 2004,
    American Journal of Physiology
    , 286, H1573-H1589.
    PubMed
    ID: 14656705
    cell diagram
    A schematic diagram of the Ten Tusscher
    et al.
    2004 mathematical model of the human ventricular myocyte.
    """
name: tentusscher_2004_epi_cell
# Initial values
membrane.V                                          = -86.2
rapid_time_dependent_potassium_current_Xr1_gate.Xr1 = 0
rapid_time_dependent_potassium_current_Xr2_gate.Xr2 = 1
slow_time_dependent_potassium_current_Xs_gate.Xs    = 0
fast_sodium_current_m_gate.m                        = 0
fast_sodium_current_h_gate.h                        = 0.75
fast_sodium_current_j_gate.j                        = 0.75
L_type_Ca_current_d_gate.d                          = 0
L_type_Ca_current_f_gate.f                          = 1
L_type_Ca_current_fCa_gate.fCa                      = 1
transient_outward_current_s_gate.s                  = 1
transient_outward_current_r_gate.r                  = 0
calcium_dynamics.g                                  = 1
calcium_dynamics.Ca_i                               = 0.0002
calcium_dynamics.Ca_SR                              = 0.2
sodium_dynamics.Na_i                                = 11.6
potassium_dynamics.K_i                              = 138.3

I_Na_Markov.IC3 = 0
I_Na_Markov.IC2 = 0
I_Na_Markov.IF = 0
I_Na_Markov.C3 = 1.00
I_Na_Markov.C2 = 0
I_Na_Markov.C1 = 0
I_Na_Markov.O = 0
I_Na_Markov.IS = 0
I_Na_Markov.DpIC3 = 0
I_Na_Markov.DpIC2 = 0
I_Na_Markov.DpIF = 0
I_Na_Markov.DpC3 = 0
I_Na_Markov.DpC2 = 0
I_Na_Markov.DpC1 = 0
I_Na_Markov.DpO = 0
I_Na_Markov.DpIS = 0
I_Na_Markov.DpIT = 0
I_Na_Markov.DIC3 = 0
I_Na_Markov.DIC2 = 0
I_Na_Markov.DIF = 0
I_Na_Markov.DC3 = 0
I_Na_Markov.DC2 = 0
I_Na_Markov.DC1 = 0
I_Na_Markov.DO = 0
I_Na_Markov.DIS = 0
I_Na_Markov.DIT = 0

[parameters]
ICaL_Block = 0.0
IK1_Block = 0.0
IKr_Block = 0.0
IKs_Block = 0.0
IKur_Block = 0.0
INa_Block = 0.0
INaL_Block = 0.0
INaK_Block = 0.0
INCX_Block = 0.0
Ito_Block = 0.0

Ca_o = 1.8 [mmol/L] : Extracellular Ca2+ concentration
K_o = 5.4 [mmol/L] : Extracellular K+ concentration
Na_o = 140 [mmol/L] : Extracellular Na+ concentration

[output]
Vm = membrane.V
Cai = 1000 * calcium_dynamics.Ca_i
#dVdt = dot(membrane.V)

[L_type_Ca_current]
g_CaL = 0.000175
    in [L/F/ms (0.001)]
i_CaL = (1 - parameters.ICaL_Block) * (g_CaL * L_type_Ca_current_d_gate.d * L_type_Ca_current_f_gate.f * L_type_Ca_current_fCa_gate.fCa * 4 * membrane.V * membrane.F ^ 2 / (membrane.R * membrane.T) * (calcium_dynamics.Ca_i * exp(2 * membrane.V * membrane.F / (membrane.R * membrane.T)) - 0.341 * calcium_dynamics.Ca_o) / (exp(2 * membrane.V * membrane.F / (membrane.R * membrane.T)) - 1))
    in [A/F]

[L_type_Ca_current_d_gate]
alpha_d = 1.4 / (1 + exp((-35 [mV] - membrane.V) / 13 [mV])) + 0.25
    in [1]
beta_d = 1.4 / (1 + exp((membrane.V + 5 [mV]) / 5 [mV]))
    in [1]
dot(d) = (d_inf - d) / tau_d
    in [1]
d_inf = 1 / (1 + exp((-5 [mV] - membrane.V) / 7.5 [mV]))
    in [1]
gamma_d = 1 [ms] / (1 + exp((50 [mV] - membrane.V) / 20 [mV]))
    in [ms]
tau_d = 1 [ms] * alpha_d * beta_d + gamma_d
    in [ms]

[L_type_Ca_current_fCa_gate]
alpha_fCa = 1 / (1 + (calcium_dynamics.Ca_i / 0.000325 [mM]) ^ 8)
    in [1]
beta_fCa = 0.1 / (1 + exp((calcium_dynamics.Ca_i - 0.0005 [mM]) / 0.0001 [mM]))
    in [1]
d_fCa = (fCa_inf - fCa) / tau_fCa
    in [mS/uF]
dot(fCa) = piecewise(fCa_inf > fCa and membrane.V > -60 [mV], 0 [mS/uF], d_fCa)
    in [1]
fCa_inf = (alpha_fCa + beta_fCa + gama_fCa + 0.23) / 1.46
    in [1]
gama_fCa = 0.2 / (1 + exp((calcium_dynamics.Ca_i - 0.00075 [mM]) / 0.0008 [mM]))
    in [1]
tau_fCa = 2 [ms]
    in [ms]

[L_type_Ca_current_f_gate]
dot(f) = (f_inf - f) / tau_f
    in [1]
f_inf = 1 / (1 + exp((membrane.V + 20 [mV]) / 7 [mV]))
    in [1]
tau_f = 1125 [ms] * exp(-(membrane.V + 27 [mV]) ^ 2 / 240 [mV^2]) + 80 [ms] + 165 [ms] / (1 + exp((25 [mV] - membrane.V) / 10 [mV]))
    in [ms]

[calcium_background_current]
g_bca = 0.000592
    in [mS/uF]
i_b_Ca = g_bca * (membrane.V - reversal_potentials.E_Ca)
    in [A/F]

[calcium_dynamics]
Buf_c = 0.15
    in [mM]
Buf_sr = 10
    in [mM]
dot(Ca_SR) = Ca_sr_bufsr * membrane.V_c / V_sr * (i_up - (i_rel + i_leak))
    in [mM]
dot(Ca_i) = Ca_i_bufc * (i_leak - i_up + i_rel - 1 [1 (1000000000)] * (L_type_Ca_current.i_CaL + calcium_background_current.i_b_Ca + calcium_pump_current.i_p_Ca - 2 * sodium_calcium_exchanger_current.i_NaCa) / (2 * 1 [1 (1000000000000000)] * membrane.V_c * membrane.F) * membrane.Cm)
    in [mM]
Ca_i_bufc = 1 / (1 + Buf_c * K_buf_c / (Ca_i + K_buf_c) ^ 2)
    in [1]
Ca_o = parameters.Ca_o #2
    in [mM]
Ca_sr_bufsr = 1 / (1 + Buf_sr * K_buf_sr / (Ca_SR + K_buf_sr) ^ 2)
    in [1]
K_buf_c = 0.001
    in [mM]
K_buf_sr = 0.3
    in [mM]
K_up = 0.00025
    in [mM]
V_leak = 8e-5
    in [mS/uF]
V_sr = 0.001094
    in [um^3]
Vmax_up = 0.000425
    in [mM/ms]
a_rel = 0.016464
    in [mM/ms]
b_rel = 0.25
    in [mM]
c_rel = 0.008232
    in [mM/ms]
d_g = (g_inf - g) / tau_g
    in [mS/uF]
dot(g) = piecewise(g_inf > g and membrane.V > -60 [mV], 0 [mS/uF], d_g)
    in [1]
g_inf = piecewise(Ca_i < 0.00035 [mM], 1 / (1 + (Ca_i / 0.00035 [mM]) ^ 6), 1 / (1 + (Ca_i / 0.00035 [mM]) ^ 16))
    in [1]
i_leak = V_leak * (Ca_SR - Ca_i)
    in [mM/ms]
i_rel = (a_rel * Ca_SR ^ 2 / (b_rel ^ 2 + Ca_SR ^ 2) + c_rel) * L_type_Ca_current_d_gate.d * g
    in [mM/ms]
i_up = Vmax_up / (1 + K_up ^ 2 / Ca_i ^ 2)
    in [mM/ms]
tau_g = 2
    in [ms]

[calcium_pump_current]
K_pCa = 0.0005
    in [mM]
g_pCa = 0.825
    in [A/F]
i_p_Ca = g_pCa * calcium_dynamics.Ca_i / (calcium_dynamics.Ca_i + K_pCa)
    in [A/F]

[environment]
time = 0 bind time
    in [ms]

[fast_sodium_current]
g_Na = 14.838
    in [mS/uF]
i_Na = (1 - parameters.INa_Block) * (g_Na * fast_sodium_current_m_gate.m ^ 3 * fast_sodium_current_h_gate.h * fast_sodium_current_j_gate.j * (membrane.V - reversal_potentials.E_Na))
    in [A/F]

[fast_sodium_current_h_gate]
alpha_h = piecewise(membrane.V < -40 [mV], 0.057 [mS/uF] * exp(-(membrane.V + 80 [mV]) / 6.8 [mV]), 0 [mS/uF])
    in [mS/uF]
beta_h = piecewise(membrane.V < -40 [mV], 2.7 [mS/uF] * exp(0.079 [1/mV] * membrane.V) + 310000 [mS/uF] * exp(0.3485 [1/mV] * membrane.V), 0.77 [mS/uF] / (0.13 * (1 + exp((membrane.V + 10.66 [mV]) / -11.1 [mV]))))
    in [mS/uF]
dot(h) = (h_inf - h) / tau_h
    in [1]
h_inf = 1 / (1 + exp((membrane.V + 71.55 [mV]) / 7.43 [mV])) ^ 2
    in [1]
tau_h = 1 / (alpha_h + beta_h)
    in [ms]

[fast_sodium_current_j_gate]
alpha_j = piecewise(membrane.V < -40 [mV], (-25428 [mS/uF] * exp(0.2444 [1/mV] * membrane.V) - 6.948e-6 [mS/uF] * exp(-0.04391 [1/mV] * membrane.V)) * (membrane.V + 37.78 [mV]) / 1 [mV] / (1 + exp(0.311 [1/mV] * (membrane.V + 79.23 [mV]))), 0 [mS/uF])
    in [mS/uF]
beta_j = piecewise(membrane.V < -40 [mV], 0.02424 [mS/uF] * exp(-0.01052 [1/mV] * membrane.V) / (1 + exp(-0.1378 [1/mV] * (membrane.V + 40.14 [mV]))), 0.6 [mS/uF] * exp(0.057 [1/mV] * membrane.V) / (1 + exp(-0.1 [1/mV] * (membrane.V + 32 [mV]))))
    in [mS/uF]
dot(j) = (j_inf - j) / tau_j
    in [1]
j_inf = 1 / (1 + exp((membrane.V + 71.55 [mV]) / 7.43 [mV])) ^ 2
    in [1]
tau_j = 1 / (alpha_j + beta_j)
    in [ms]

[fast_sodium_current_m_gate]
alpha_m = 1 / (1 + exp((-60 [mV] - membrane.V) / 5 [mV]))
    in [1]
beta_m = 0.1 / (1 + exp((membrane.V + 35 [mV]) / 5 [mV])) + 0.1 / (1 + exp((membrane.V - 50 [mV]) / 200 [mV]))
    in [1]
dot(m) = (m_inf - m) / tau_m
    in [1]
m_inf = 1 / (1 + exp((-56.86 [mV] - membrane.V) / 9.03 [mV])) ^ 2
    in [1]
tau_m = 1 [ms] * alpha_m * beta_m
    in [ms]

########################################################
[I_Na_Markov]
# this state dependence of Na channel was from Moreno et al 2011 (Sci. Transl. Med)
# contains free, charged, neutral drug

class1_drug_cat = 3
Lidocaine_fact = if(class1_drug_cat==2 and new_drug_mode==0, 1, 0) ## example for Ib
Flecainide_fact = if(class1_drug_cat==3 and new_drug_mode==0, 1, 0) ## example for Ic
Vernakalant_fact = if(class1_drug_cat==4 and new_drug_mode==0, 1, 0) 

x1 = 0.21873057202896223 #0.19221706053693055
x2 = 0.41265375286595118 #0.41254683837778594
x3 = 0.8280392024236749 #0.92416496540265047
x4 = 0.81630471577910058 #0.75114201390557156
x5 = 0.48222238821389474 #0.43792876100526001
x6 = 2.9108548005991408 #3.7417313511944776
x7 = 5.6512078005029363 #5.51022612210053
x8 = 0.62280453184573936 #0.59153720500115581
x9 = 1.8368660154425789 #1.8921732512607328
x10 = 0.1555517894086812 #0.14226895717209598
x11 = 1.0658590546827384 #0.98504925682606093
x12 = 1.3531412793108182 #1.3082457321423204
x13 = 1.4919366545238635 #1.3829790383753613
x14 = 0.95884644674361974 #1.0328344
x15 = 0.9767283077934461 #0.99481919
x16 = 1.0063092653706041 #1.00254845
x17 = 1.0685352890402746 #1.01096423
x18 = 4.816529243518484 #6.87052465
x19 = 1.1096734682368776 #0.189492194583143012
x20 = 2.7914725225681041 #2.4372855098410255
x21 = 1.2284332788792574 #1.1034530976225625
x22 = 1.3537423540023754 #1.531239118617477
x23 = 0.67797096946594371 #0.6962117115602799
x24 = 0.94612734457513747 #0.9617444855306867
x25 = 1.2126067321021647 #1.21657942082406

f1 = 21851.898993274583 #15802.517082265076
f2 = 0.95636009257464849 #11212.49445307003
f3 = 1.4463384745445318 #1.0835911457972944
f4 = 0.94770366615846524 #4.7213138217409707
f5 = 1.1061425216119209 #1.1886854610200599
f6 = 0.46683500162390168 #1.1293915676022106
f7 = 0.74828163531110747 #0.98647121091698153
f8 = 3.057895464326883 #0.54542349779755606
f9 = 2.531661579847599 #1.020713680006784
f10 = 2.6969439634732102 #2.6609951303941308
f11 = 1.0663935832264024 #1.1411905523331658
f12 = 2.3575907914175351 #5.3540204782968566
f13 = 1.134768380410304 #1.028853996176295
f14 = 1.6421917802256121 #1.0033797797467918

l1 = 1583.2471981979911 #1.36922845112808845e+04
l2 = 5628.2688660126123 #1.36922845112808845e+04
l3 = 0.75425121314005472 #9.75801811222358206e-01
l4 = 3.0458492700653967 #4.78855031291120348e+00
l5 = 1730.0135125056722 #9.75801811222358206e-01*1000
l6 = 1.1233745305940899 #9.78288593348167645e-01
l7 = 0.71982255915702376 #9.78288593348167645e-01
l8 = 0.51423307566745746 #9.05788719283946997e-01
l9 = 2.8941575657115317 #9.05788719283946997e-01
l10 = 3.527022341541632 #4.84105307990853273e+00

v1 = 21871.272845459927 #15606.948723172163
v2 = 15045.992717070054 #12551.877309328909
v3 = 1.0416903230854679 #0.79392152842322983
v4 = 3.5675209827123071 #4.5916282858963591
v5 = 253.03570825488453 #906.26022447936225
v6 = 1.1086496485621558 #0.66085359629267004
v7 = 1.2380765059177663 #1.1264666748197427
v8 = 1.008694431253554 #0.91070862959432486
v9 = 0.01 #-0.013899317209523809 #1.5351508777975029
v10 = 3.8452801832199093 #4.4673101802187247
v11 = 0
v12 = 0
v13 = 0
v14 = 0

#### new drug components ####
new_drug_mode = 0
n_diffusion = 0
n_kd_open = 0
n_k_off = 0
n_ki_off = 0
n_kc_off = 0
n_p22 = 0
n_p23 = 0
n_p24 = 0
n_p25 = 0
n_p26 = 0
n_p27 = 0
n_p28 = 0
n_p29 = 0
n_p30 = 0
n_p31 = 0
n_p32 = 0
n_p33 = 0
n_p34 = 0
n_p35 = 0

diffusion = ((new_drug_mode*n_diffusion) + (Flecainide_fact*5500) + (Lidocaine_fact*500) + (Vernakalant_fact*500*0.34173442604740079)) #in [1 / M ms]
kd_open = ((new_drug_mode*n_kd_open) + (Flecainide_fact*11.2e-6) + (Lidocaine_fact*318e-6) + (Vernakalant_fact*318e-6*1.0694414491664093)) * exp(-0.7 * membrane.V * membrane.FRT)
conc = 0
pH = 7.4
pKa_newdrug = 7.4
pKa_Lidocaine = 7.6
pKa_Flecainide = 9.3
pKa_Vernakalant = 5.4
#pH = (if(Lidocaine_fact==1, pH_Lidocaine, 0)) + (if(Flecainide_fact==1, pH_Flecainide, 0)) + (if(new_drug_mode==1, pH_newdrug, 0))
pKa = (if(Vernakalant_fact==1, pKa_Vernakalant, 0)) + (if(Lidocaine_fact==1, pKa_Lidocaine, 0)) + (if(Flecainide_fact==1, pKa_Flecainide, 0)) + (if(new_drug_mode==1, pKa_newdrug, 0))
portion = 1/(1+10^(pH-pKa))
conc_dplus = portion * conc
conc_d = (1-portion) * conc

kon = conc_dplus * diffusion #if(conc_dplus>0.0001, conc_dplus * diffusion, 1e-8) #### for protonated drugs
kcon = kon
koff = kd_open * diffusion
kcoff = koff

k_on = conc_d * diffusion #if(conc_d>0.0001, , 1e-8) #### for neutral drugs
k_off = ((new_drug_mode*n_k_off) + (Flecainide_fact*400e-6) + (Lidocaine_fact*400e-6) + (Vernakalant_fact*400e-6*1.2105899183137829)) * diffusion
ki_on = k_on / 2
ki_off = ((new_drug_mode*n_ki_off) + (Flecainide_fact*5.4e-6) + (Lidocaine_fact*3.4e-6) + (Vernakalant_fact*3.4e-6*2.8198629544868519)) * diffusion
kc_on = k_on / 2
kc_off = ((new_drug_mode*n_kc_off) + (Flecainide_fact*800e-6) + (Lidocaine_fact*900e-6) + (Vernakalant_fact*900e-6*0.051341986846900611)) * diffusion

Tfactor = 1 / (3 ^ ((37 - (membrane.T - 273)) / 10.0)) #0.19245

# Transition rates (ms-1)  
a11 = Tfactor * p1 / (p2 * exp(-(membrane.V - actshift) / p3) + p6 * exp(-(membrane.V - actshift) / p7))
a12 = Tfactor * p1 / (p2 * exp(-(membrane.V - actshift) / p4) + p6 * exp(-(membrane.V - actshift) / p7))
a13 = Tfactor * p1 / (p2 * exp(-(membrane.V - actshift) / p5) + p6 * exp(-(membrane.V - actshift) / p7))
b11 = Tfactor * p8 * exp(-(membrane.V - actshift) / p9)
b12 = Tfactor * p10 * exp(-(membrane.V - actshift - p11) / p9)
b13 = Tfactor * p12 * exp(-(membrane.V - actshift - p13) / p9)
#a3 = p14 * exp(-membrane.V / p15)
#b3 = p16 * exp(membrane.V / p17)
#aa = a3 / (a3 + b3)
#tau = 1 / (a3 + b3)
a3_ss = 1/(1+exp((membrane.V - p14_new) / p15_new))
a3_tau = h1 + p01 * exp(p16_new * (membrane.V - p14_new)) / (1 + exp(p17_new * (membrane.V - p14_new)))
a3 = Tfactor * a3_ss / a3_tau
b3 = Tfactor * (1 - a3_ss) / a3_tau
a2 = Tfactor * p18 * exp(membrane.V / p19)
b2 = (a13*a2*a3) / (b13*b3)
ax = p20 * a2
bx = p21 * a3

a13c = p22 * a13
b13c = if(kon>0, (b13 * kcon * koff * a13c) / (kon * kcoff * a13), 0)
a13n = p23 * a13
b13n = if(k_on>0, (b13 * kc_on * a13n * k_off) / (kc_off * a13 * k_on), 0)
ax1 = p24 * ax
bx1 = p25 * bx
ax2 = p26 * ax
bx2 = if(ki_on>0, (bx * k_on * ax2 * ki_off) / (ax * ki_on * k_off), 0)
a22 = p27 * a2
a_22 = p28 * a2
b22 = if(b13c>0, (a13c * a22 * a33) / (b13c * b33), 0)
b_22 = if(b13n>0, (a_33 * a13n * a_22) / (b_33 * b13n), 0)
b33 = p29 * b3
b_33 = p30 * b3
a33 = p31 * a3
a_33 = if(ki_on>0, (ki_off * a3 * kc_on * b_33) / (ki_on * kc_off * b3), 0)
## DIT or DpIT ONLY in Flecainide (Inactivated, Trapped state)
a44 = p32 * a2
b44 = p33 * a3
a_44 = p34 * a2
b_44 = p35 * a2

actshift = -15*x19
h1 = 2*x20
p1 = 8.5539*x1
p2 = 7.4392e-2*x2
p3 = 17.0*x3
p4 = 15.0*x4
p5 = 12.0*x5
p6 = 2.0373e-1*x6
p7 = 150*x7
p8 = 7.5215e-2*x8
p9 = 20.3*x9
p10 = 2.7574*x10
p11 = 5*x11
p12 = 4.7755e-1*x12
p13 = 10*x13
p14 = 5.1458e-6 #5.1458e-6 *1.0325463712122342
p15 = 8.2471 #0.8*8.2471 * 0.10401603829601243
p16 = 6.1205 #6.1205 * 0.96668483687506801
p17 = 12.542 #0.8*12.542 * 1.0908872227689068
p18 = 13.370*x14
p19 = 43.749*x15
p20 = 3.4229e-2*x16
p21 = 1.7898e-2*x17
p14_new = -70*x21
p15_new = 3.5*x22
p16_new = 0.052 * 2.9*x23
p17_new = 0.132 * 1.9*x24
p01 = 41*x25

p22 = (new_drug_mode*n_p22) + (Flecainide_fact*3.6324e-3*f1) + (Lidocaine_fact*5.6974e-03*l1) + (Vernakalant_fact*5.6974e-03*v1) #3.6324e-3
p23 = (new_drug_mode*n_p23) + (Flecainide_fact*2.6452*f2) + (Lidocaine_fact*8.4559e+01*l2) + (Vernakalant_fact*8.4559e+01*v2) #2.6452
p24 = (new_drug_mode*n_p24) + (Flecainide_fact*5.7831e-5*f3) + (Lidocaine_fact*6.3992e-07*l3) + (Vernakalant_fact*6.3992e-07*v3) #5.7831e-5
p25 = (new_drug_mode*n_p25) + (Flecainide_fact*1.6689e-8*f4) + (Lidocaine_fact*1.3511e+00*l4) + (Vernakalant_fact*1.3511e+00*v4) #1.6689e-8
p26 = (new_drug_mode*n_p26) + (Flecainide_fact*2.6126e-01*f5) + (Lidocaine_fact*1.3110e-01*l5) + (Vernakalant_fact*1.3110e-01*v5) #2.6126e-01
p27 = (new_drug_mode*n_p27) + (Flecainide_fact*1.4847e3*f6) + (Lidocaine_fact*6.7067e-06*l6) + (Vernakalant_fact*6.7067e-06*v6) #1.4847e3
p28 = (new_drug_mode*n_p28) + (Flecainide_fact*4.2385e+01*f7) + (Lidocaine_fact*1.7084e-05*l7) + (Vernakalant_fact*1.7084e-05*v7) #4.2385e+01
p29 = (new_drug_mode*n_p29) + (Flecainide_fact*1.7352e-6*f8) + (Lidocaine_fact*1.9698e-05*l8) + (Vernakalant_fact*1.9698e-05*v8) #1.7352e-6
p30 = (new_drug_mode*n_p30) + (Flecainide_fact*2.1181e+00*f9) + (Lidocaine_fact*4.8477*l9) + (Vernakalant_fact*4.8477*v9) #2.1181e+00
p31 = (new_drug_mode*n_p31) + (Flecainide_fact*6.7505e-05*f10) + (Lidocaine_fact*3.2976*l10) + (Vernakalant_fact*3.2976*v10) #6.7505e-05
p32 = (new_drug_mode*n_p32) + (Flecainide_fact*2.4135*f11) + (Lidocaine_fact*0) + (Vernakalant_fact*2.4135*v11)
p33 = (new_drug_mode*n_p33) + (Flecainide_fact*4.9001e-2*f12) + (Lidocaine_fact*0) + (Vernakalant_fact*4.9001e-2*v12) 
p34 = (new_drug_mode*n_p34) + (Flecainide_fact*1.0326e-03*f13) + (Lidocaine_fact*0) + (Vernakalant_fact*1.0326e-03*v13) 
p35 = (new_drug_mode*n_p35) + (Flecainide_fact*2.1378e-02*f14) + (Lidocaine_fact*0) + (Vernakalant_fact*2.1378e-02*v14)

dot(IC3) = -IC3 * (a11 + a3 + ki_on) + IC2 * b11 + C3 * b3 + ki_off * DIC3
dot(IC2) = -IC2 * (b11 + a3 + a12 + ki_on) + IC3 * a11 + IF * b12 + C2 * b3 + ki_off * DIC2
dot(IF) = -IF * (b12 + a3 + b2 + ki_on) + IC2 * a12 + C1 * b3 + O * a2 + ki_off * DIF
dot(C3) = -C3 * (b3 + a11 + kcon + kc_on) + IC3 * a3 + C2 * b11 + DpC3 * kcoff + DC3 * kc_off
dot(C2) = -C2 * (b11 + b3 + a12 + kcon + kc_on) + C3 * a11 + IC2 * a3 + C1 * b12 + DpC2 * kcoff + DC2 * kc_off
dot(C1) = -C1 * (b12 + b3 + a13 + kcon + kc_on) + C2 * a12 + IF * a3 + O * b13 + DpC1 * kcoff + DC1 * kc_off
dot(O) = -O * (b13 + a2 + ax + kon + k_on) + C1 * a13 + IF * b2 + IS * bx + DpO * koff + DO * k_off
dot(IS) = -IS * (bx + ki_on) + O * ax + DIS * ki_off

dot(DpIC3) = -DpIC3 * (a33 + a11) + DpIC2 * b11 + DpC3 * b33
dot(DpIC2) = -DpIC2 * (b11 + a33 + a12) + DpIC3 * a11 + DpIF * b12 + DpC2 * b33
dot(DpIF) = -DpIF * (b12 + a33 + b22 + a44) + DpIC2 * a12 + DpC1 * b33 + DpO * a22 + DpIT * b44
dot(DpC3) = -DpC3 * (b33 + a11 + kcoff) + DpIC3 * a33 + DpC2 * b11 + C3 * kcon
dot(DpC2) = -DpC2 * (b11 + b33 + a12 + kcoff) + DpC3 * a11 + DpIC2 * a33 + DpC1 * b12 + C2 * kcon
dot(DpC1) = -DpC1 * (b12 + b33 + a13c + kcoff) + DpC2 * a12 + DpIF * a33 + DpO * b13c + C1 * kcon
dot(DpO) = -DpO * (b13c + a22 + ax1 + koff) + DpC1 * a13c + DpIF * b22 + DpIS * bx1 + O * kon
dot(DpIS) = -DpIS * (bx1) + DpO * ax1
dot(DpIT) = -DpIT * b44 + DpIF * a44

dot(DIC3) = -DIC3 * (a_33 + a11 + ki_off) + DIC2 * b11 + DC3 * b_33 + ki_on * IC3
dot(DIC2) = -DIC2 * (b11 + a_33 + a12 + ki_off) + DIC3 * a11 + DIF * b12 + DC2 * b_33 + ki_on * IC2
dot(DIF) = -DIF * (b12 + a_33 + b_22 + a_44 + ki_off) + DIC2 * a12 + DC1 * b_33 + DO * a_22 + DIT * b_44 + ki_on * IF
dot(DC3) = -DC3 * (b_33 + a11 + kc_off) + DIC3 * a_33 + DC2 * b11 + C3 * kc_on
dot(DC2) = -DC2 * (b11 + b_33 + a12 + kc_off) + DC3 * a11 + DIC2 * a_33 + DC1 * b12 + C2 * kc_on
dot(DC1) = -DC1 * (b12 + b_33 + a13n + kc_off) + DC2 * a12 + DIF * a_33 + DO * b13n + C1 * kc_on
dot(DO) = -DO * (b13n + a_22 + ax2 + k_off) + DC1 * a13n + DIF * b_22 + DIS * bx2 + O * k_on
dot(DIS) = -DIS * (bx2 + ki_off) + DO * ax2 + IS * ki_on
dot(DIT) = -DIT * b_44 + DIF * a_44

#E_Na = (membrane.RTF) * log(138/10)
g_Na = x18*7.8 *1.0 *4.5 #7.8 *1.0 *4.5#*7.85 #* 144.5
    in [1/ms]
I_Na_tot = (1 - parameters.INa_Block) * g_Na * O * (membrane.V - reversal_potentials.E_Na)
    in [pA]

########################################################

[inward_rectifier_potassium_current]
alpha_K1 = 0.1 [mS/uF] / (1 + exp(0.06 [1/mV] * (membrane.V - reversal_potentials.E_K - 200 [mV])))
    in [mS/uF]
beta_K1 = (3 [mS/uF] * exp(0.0002 [1/mV] * (membrane.V - reversal_potentials.E_K + 100 [mV])) + 1 [mS/uF] * exp(0.1 [1/mV] * (membrane.V - reversal_potentials.E_K - 10 [mV]))) / (1 + exp(-0.5 [1/mV] * (membrane.V - reversal_potentials.E_K)))
    in [mS/uF]
g_K1 = 5.405
    in [mS/uF]
i_K1 = (1 - parameters.IK1_Block) * (g_K1 * xK1_inf * sqrt(potassium_dynamics.K_o / 5.4 [mM]) * (membrane.V - reversal_potentials.E_K))
    in [A/F]
xK1_inf = alpha_K1 / (alpha_K1 + beta_K1)
    in [1]

[membrane]
markov_Na = 0
Cm = 0.185
    in [uF]
F =  9.64853414999999950e4
    in [C/mmol]
R = 8314.472
    in [J/mol/K]
T = 310
    in [K]
FRT  = F/(R*T)    
dot(V) = -(inward_rectifier_potassium_current.i_K1 + transient_outward_current.i_to + rapid_time_dependent_potassium_current.i_Kr + slow_time_dependent_potassium_current.i_Ks + L_type_Ca_current.i_CaL + sodium_potassium_pump_current.i_NaK + (if(membrane.markov_Na==1, I_Na_Markov.I_Na_tot, fast_sodium_current.i_Na)) + sodium_background_current.i_b_Na + sodium_calcium_exchanger_current.i_NaCa + calcium_background_current.i_b_Ca + potassium_pump_current.i_p_K + calcium_pump_current.i_p_Ca + i_Stim)
    in [mV]
V_c = 0.016404
    in [um^3]
#i_Stim = piecewise(environment.time - floor(environment.time / stim_period) * stim_period >= stim_start and environment.time - floor(environment.time / stim_period) * stim_period <= stim_start + stim_duration, -stim_amplitude, 0 [A/F])
level = 0 bind pace
i_Stim = level * -(stim_amplitude)
    in [A/F]
stim_amplitude = 52
    in [A/F]
stim_duration = 1
    in [ms]
stim_period = 1000
    in [ms]
stim_start = 10
    in [ms]

[potassium_dynamics]
dot(K_i) = -1 [1 (1000000000)] * (inward_rectifier_potassium_current.i_K1 + transient_outward_current.i_to + rapid_time_dependent_potassium_current.i_Kr + slow_time_dependent_potassium_current.i_Ks + potassium_pump_current.i_p_K + membrane.i_Stim - 2 * sodium_potassium_pump_current.i_NaK) * membrane.Cm / (1 [1 (1000000000000000)] * membrane.V_c * membrane.F)
    in [mM]
K_o = parameters.K_o #5.4
    in [mM]

[potassium_pump_current]
g_pK = 0.0146
    in [mS/uF]
i_p_K = g_pK * (membrane.V - reversal_potentials.E_K) / (1 + exp((25 [mV] - membrane.V) / 5.98 [mV]))
    in [A/F]

[rapid_time_dependent_potassium_current]
g_Kr = 0.096
    in [mS/uF]
i_Kr = (1 - parameters.IKr_Block) * (g_Kr * sqrt(potassium_dynamics.K_o / 5.4 [mM]) * rapid_time_dependent_potassium_current_Xr1_gate.Xr1 * rapid_time_dependent_potassium_current_Xr2_gate.Xr2 * (membrane.V - reversal_potentials.E_K))
    in [A/F]

[rapid_time_dependent_potassium_current_Xr1_gate]
dot(Xr1) = (xr1_inf - Xr1) / tau_xr1
    in [1]
alpha_xr1 = 450 / (1 + exp((-45 [mV] - membrane.V) / 10 [mV]))
    in [1]
beta_xr1 = 6 / (1 + exp((membrane.V + 30 [mV]) / 11.5 [mV]))
    in [1]
tau_xr1 = 1 [ms] * alpha_xr1 * beta_xr1
    in [ms]
xr1_inf = 1 / (1 + exp((-26 [mV] - membrane.V) / 7 [mV]))
    in [1]

[rapid_time_dependent_potassium_current_Xr2_gate]
dot(Xr2) = (xr2_inf - Xr2) / tau_xr2
    in [1]
alpha_xr2 = 3 / (1 + exp((-60 [mV] - membrane.V) / 20 [mV]))
    in [1]
beta_xr2 = 1.12 / (1 + exp((membrane.V - 60 [mV]) / 20 [mV]))
    in [1]
tau_xr2 = 1 [ms] * alpha_xr2 * beta_xr2
    in [ms]
xr2_inf = 1 / (1 + exp((membrane.V + 88 [mV]) / 24 [mV]))
    in [1]

[reversal_potentials]
E_Ca = 0.5 * membrane.R * membrane.T / membrane.F * log(calcium_dynamics.Ca_o / calcium_dynamics.Ca_i)
    in [mV]
E_K = membrane.R * membrane.T / membrane.F * log(potassium_dynamics.K_o / potassium_dynamics.K_i)
    in [mV]
E_Ks = membrane.R * membrane.T / membrane.F * log((potassium_dynamics.K_o + P_kna * sodium_dynamics.Na_o) / (potassium_dynamics.K_i + P_kna * sodium_dynamics.Na_i))
    in [mV]
E_Na = membrane.R * membrane.T / membrane.F * log(sodium_dynamics.Na_o / sodium_dynamics.Na_i)
    in [mV]
P_kna = 0.03
    in [1]

[slow_time_dependent_potassium_current]
g_Ks = 0.245
    in [mS/uF]
i_Ks = (1 - parameters.IKs_Block) * (g_Ks * slow_time_dependent_potassium_current_Xs_gate.Xs ^ 2 * (membrane.V - reversal_potentials.E_Ks))
    in [A/F]

[slow_time_dependent_potassium_current_Xs_gate]
dot(Xs) = (xs_inf - Xs) / tau_xs
    in [1]
alpha_xs = 1100 / sqrt(1 + exp((-10 [mV] - membrane.V) / 6 [mV]))
    in [1]
beta_xs = 1 / (1 + exp((membrane.V - 60 [mV]) / 20 [mV]))
    in [1]
tau_xs = 1 [ms] * alpha_xs * beta_xs
    in [ms]
xs_inf = 1 / (1 + exp((-5 [mV] - membrane.V) / 14 [mV]))
    in [1]

[sodium_background_current]
g_bna = 0.00029
    in [mS/uF]
i_b_Na = g_bna * (membrane.V - reversal_potentials.E_Na)
    in [A/F]

[sodium_calcium_exchanger_current]
K_NaCa = 1000
    in [A/F]
K_sat = 0.1
    in [1]
Km_Ca = 1.38
    in [mM]
Km_Nai = 87.5
    in [mM]
alpha = 2.5
    in [1]
gamma = 0.35
    in [1]
i_NaCa = (1 - parameters.INCX_Block) * (K_NaCa * (exp(gamma * membrane.V * membrane.F / (membrane.R * membrane.T)) * sodium_dynamics.Na_i ^ 3 * calcium_dynamics.Ca_o - exp((gamma - 1) * membrane.V * membrane.F / (membrane.R * membrane.T)) * sodium_dynamics.Na_o ^ 3 * calcium_dynamics.Ca_i * alpha) / ((Km_Nai ^ 3 + sodium_dynamics.Na_o ^ 3) * (Km_Ca + calcium_dynamics.Ca_o) * (1 + K_sat * exp((gamma - 1) * membrane.V * membrane.F / (membrane.R * membrane.T)))))
    in [A/F]

[sodium_dynamics]
dot(Na_i) = -1 [1 (1000000000)] * ((if(membrane.markov_Na==1, I_Na_Markov.I_Na_tot, fast_sodium_current.i_Na)) + sodium_background_current.i_b_Na + 3 * sodium_potassium_pump_current.i_NaK + 3 * sodium_calcium_exchanger_current.i_NaCa) * membrane.Cm / (1 [1 (1000000000000000)] * membrane.V_c * membrane.F)
    in [mM]
Na_o = parameters.Na_o #140
    in [mM]

[sodium_potassium_pump_current]
K_mNa = 40
    in [mM]
K_mk = 1
    in [mM]
P_NaK = 1.362
    in [A/F]
i_NaK = (1 - parameters.INaK_Block) * (P_NaK * potassium_dynamics.K_o / (potassium_dynamics.K_o + K_mk) * sodium_dynamics.Na_i / (sodium_dynamics.Na_i + K_mNa) / (1 + 0.1245 * exp(-0.1 * membrane.V * membrane.F / (membrane.R * membrane.T)) + 0.0353 * exp(-membrane.V * membrane.F / (membrane.R * membrane.T))))
    in [A/F]

[transient_outward_current]
g_to = 0.294
    in [mS/uF]
i_to = (1 - parameters.Ito_Block) * (g_to * transient_outward_current_r_gate.r * transient_outward_current_s_gate.s * (membrane.V - reversal_potentials.E_K))
    in [A/F]

[transient_outward_current_r_gate]
dot(r) = (r_inf - r) / tau_r
    in [1]
r_inf = 1 / (1 + exp((20 [mV] - membrane.V) / 6 [mV]))
    in [1]
tau_r = 9.5 [ms] * exp(-(membrane.V + 40 [mV]) ^ 2 / 1800 [mV^2]) + 0.8 [ms]
    in [ms]

[transient_outward_current_s_gate]
dot(s) = (s_inf - s) / tau_s
    in [1]
s_inf = 1 / (1 + exp((membrane.V + 20 [mV]) / 5 [mV]))
    in [1]
tau_s = 85 [ms] * exp(-(membrane.V + 45 [mV]) ^ 2 / 320 [mV^2]) + 5 [ms] / (1 + exp((membrane.V - 20 [mV]) / 5 [mV])) + 3 [ms]
    in [ms]

[[protocol]]
# Level  Start    Length   Period   Multiplier
1.0      50.0   1.0      1000.0   0

[[script]]
import matplotlib.pyplot as pl
import myokit

# Get model and protocol, create simulation
m = get_model()
p = get_protocol()
s = myokit.Simulation(m, p)

# Run simulation
d = s.run(1000)

# Get the first state variable's name
first_state = m.states().next()
var = first_state.qname()

# Display the results
pl.figure()
pl.plot(d.time(), d[var])
pl.title(var)
pl.show()

