trigger:
  tags:
    include:
    - v*
  branches:
    include:
    - master

pr:
- master

variables:
  package_name: cysgp4
  is.tag: ${{ startsWith(variables['Build.SourceBranch'], 'refs/tags/') }}
  do.dist: ${{ startsWith(variables['Build.SourceBranch'], 'refs/tags/') }}
  # do.dist: ${{ false }}
  # is.tag: true

jobs:

- job:
  displayName: ubuntu-16.04

  variables:
    arch: x86_64
    plat: manylinux2010_x86_64
    image: quay.io/pypa/manylinux2010_x86_64
    python.architecture: x64

  pool:
    vmImage: 'ubuntu-16.04'

  strategy:
    matrix:
#       Python35:
#         python.version: '3.5'
#         numpy.version: '1.13.1'
      Python36:
        python.version: '3.6'
        py_whl: 36
        numpy.version: '1.13.1'
        do.docs: ${{ true }}
        ${{ if eq(variables['is.tag'], true) }}:
          docs.target: '.'
        ${{ if eq(variables['is.tag'], false) }}:
          docs.target: 'latest'
        do.tarball: ${{ eq(variables['is.tag'], true) }}
#       Python37:
#         python.version: '3.7'
#         numpy.version: '1.14.5'
#       Python38:
#         python.version: '3.8'
#         numpy.version: '1.14.5'
      # 64Bit2010:
      #   do.dist: ${{ eq(variables['is.tag'], true) }}
      # 64Bit:
      #   arch: x86_64
      #   plat: manylinux1_x86_64
      #   image: skhep/manylinuxgcc-x86_64
      #   python.architecture: x64
      #   do.dist: ${{ eq(variables['is.tag'], true) }}


  steps:

  - bash: |
      echo "Build.SourceBranch" $BUILD_SOURCEBRANCH
      echo "is.tag" $IS_TAG
      echo "do.docs" $DO_DOCS
      echo "docs.target" $DOCS_TARGET
      echo "do.dist" $DO_DIST
      echo "python.version" $PYTHON_VERSION
      echo "numpy.version" $NUMPY_VERSION
    displayName: Show Vars

  - bash: echo "##vso[task.prependpath]$CONDA/bin"
    displayName: Add conda to PATH

  - bash: conda create --yes --quiet --name cysgp4-env -c conda-forge
    displayName: Create Anaconda environment

  - bash: |
      source activate cysgp4-env
      conda install --yes --quiet --name cysgp4-env -c conda-forge python=$PYTHON_VERSION numpy==$NUMPY_VERSION setuptools_scm twine pytest sgp4 wheel
    displayName: Install Anaconda packages

  - bash: |
      source activate cysgp4-env
      pip install -e .
    displayName: Building

  - bash: |
      source activate cysgp4-env
      pip install pytest-azurepipelines
      pytest cysgp4
    displayName: Testing

  - bash: |
      source activate cysgp4-env
      conda install --yes --quiet --name cysgp4-env -c conda-forge astropy sphinx-astropy
      sphinx-build docs docs/_build/html -W -b html
    displayName: Make docs
    condition: and(succeeded(), eq(variables['do.docs'], true))

#   - task: DownloadSecureFile@1
#     inputs:
#       secureFile: ghpages_deploy_key
#     displayName: 'Get the deploy key'

#   - bash: |
#       source activate cysgp4-env
#       mkdir ~/.ssh && mv $DOWNLOADSECUREFILE_SECUREFILEPATH ~/.ssh/id_rsa
#       chmod 700 ~/.ssh && chmod 600 ~/.ssh/id_rsa
#       ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
#       mkdir gh_pages && cd gh_pages
#       git init
#       git config --local user.name "Benjamin Winkel"
#       git config --local user.email "bwinkel@mpifr.de"
#       git remote add github git@github.com:bwinkel/cysgp4.git
#       git fetch github gh-pages
#       git checkout --track github/gh-pages
#       # mkdir -p ./$DOCS_TARGET
#       rsync -av ../docs/_build/html/ ${DOCS_TARGET}/
#       git add -A && git commit -m "Update docs  ***NO_CI***"
#       bash ../retry.sh git push github
#     displayName: Publish docs
#     condition: and(succeeded(), eq(variables['do.docs'], true))

  - task: TwineAuthenticate@1
    inputs:
      pythonUploadServiceConnection: pypi
    displayName: 'Twine Authenticate'

  - script: |
      docker run -e NPY_NUM_BUILD_JOBS=4 -e PLAT=$(plat) -e package_name=$(package_name) -e py_whl=$(py_whl) --rm -v `pwd`:/io $(image) /io/.ci/build-wheels.sh
      ls -lh wheelhouse/
      mkdir -p dist
      cp wheelhouse/$(package_name)*.whl dist/.
      ls dist
    displayName: Build wheels
    condition: and(succeeded(), eq(variables['do.dist'], true))

  - bash: |
      source activate cysgp4-env
      python -m twine upload -r "pypi" --config-file $(PYPIRC_PATH) dist/*.whl
    displayName: Upload wheels
    condition: and(succeeded(), eq(variables['do.dist'], true))

  - bash: |
      source activate cysgp4-env
      # conda install --yes --quiet --name cysgp4-env -c conda-forge twine wheel
      python setup.py sdist
      python -m twine upload -r "pypi" --config-file $(PYPIRC_PATH) dist/*.tar.gz
    displayName: Upload tarball
    condition: and(succeeded(), eq(variables['do.tarball'], true))

#   - bash: rm ~/.ssh/id_rsa || true
#     displayName: 'Cleanup docs deploy key'
#     condition: and(always(), eq(variables['do.docs'], true))



# - job:
#   displayName: macOS-10.13
#   pool:
#     vmImage: 'macOS-10.13'
#   strategy:
#     matrix:
#       Python27:
#         python.version: '2.7'
#       Python36:
#         python.version: '3.6'

#   steps:
#   - bash: echo "##vso[task.prependpath]$CONDA/bin"
#     displayName: Add conda to PATH

#   - bash: conda create --yes --quiet --name cysgp4-env
#     displayName: Create Anaconda environment

#   - bash: |
#       source activate cysgp4-env
#       conda install --yes --quiet --name cysgp4-env python=$PYTHON_VERSION numpy
#       pip install pytest pytest-azurepipelines
#     displayName: Install Anaconda packages

#   - bash: |
#       source activate cysgp4-env
#       pytest
#     displayName: pytest

# - job:
#   displayName: vs2017-win2016
#   pool:
#     vmImage: 'vs2017-win2016'
#   strategy:
#     matrix:
#       Python27:
#         python.version: '2.7'
#       Python36:
#         python.version: '3.6'

#   steps:
#   - powershell: Write-Host "##vso[task.prependpath]$env:CONDA\Scripts"
#     displayName: Add conda to PATH

#   - script: conda create --yes --quiet --name cysgp4-env
#     displayName: Create Anaconda environment

#   - script: |
#       call activate cysgp4-env
#       conda install --yes --quiet --name cysgp4-env python=%PYTHON_VERSION% numpy
#     displayName: Install Anaconda packages

#   - script: |
#       call activate cysgp4-env
#       pip install pytest pytest-azurepipelines
#       pytest
#     displayName: pytest

# - job:
#   displayName: From environment.yml
#   pool:
#     vmImage: 'ubuntu-16.04'

#   steps:
#   - bash: echo "##vso[task.prependpath]$CONDA/bin"
#     displayName: Add conda to PATH

#   - script: conda env create --quiet --file environment.yml
#     displayName: Create Anaconda environment

#   - bash: |
#       source activate env-from-yaml
#       pip install pytest pytest-azurepipelines
#       pytest
#     displayName: pytest
