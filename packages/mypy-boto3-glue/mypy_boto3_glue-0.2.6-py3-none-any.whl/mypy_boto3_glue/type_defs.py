"Main interface for glue type defs"
from __future__ import annotations

from datetime import datetime
from typing import Dict, List
from typing_extensions import TypedDict


__all__ = (
    "ClientBatchCreatePartitionPartitionInputListStorageDescriptorColumnsTypeDef",
    "ClientBatchCreatePartitionPartitionInputListStorageDescriptorSerdeInfoTypeDef",
    "ClientBatchCreatePartitionPartitionInputListStorageDescriptorSkewedInfoTypeDef",
    "ClientBatchCreatePartitionPartitionInputListStorageDescriptorSortColumnsTypeDef",
    "ClientBatchCreatePartitionPartitionInputListStorageDescriptorTypeDef",
    "ClientBatchCreatePartitionPartitionInputListTypeDef",
    "ClientBatchCreatePartitionResponseErrorsErrorDetailTypeDef",
    "ClientBatchCreatePartitionResponseErrorsTypeDef",
    "ClientBatchCreatePartitionResponseTypeDef",
    "ClientBatchDeleteConnectionResponseErrorsTypeDef",
    "ClientBatchDeleteConnectionResponseTypeDef",
    "ClientBatchDeletePartitionPartitionsToDeleteTypeDef",
    "ClientBatchDeletePartitionResponseErrorsErrorDetailTypeDef",
    "ClientBatchDeletePartitionResponseErrorsTypeDef",
    "ClientBatchDeletePartitionResponseTypeDef",
    "ClientBatchDeleteTableResponseErrorsErrorDetailTypeDef",
    "ClientBatchDeleteTableResponseErrorsTypeDef",
    "ClientBatchDeleteTableResponseTypeDef",
    "ClientBatchDeleteTableVersionResponseErrorsErrorDetailTypeDef",
    "ClientBatchDeleteTableVersionResponseErrorsTypeDef",
    "ClientBatchDeleteTableVersionResponseTypeDef",
    "ClientBatchGetCrawlersResponseCrawlersLastCrawlTypeDef",
    "ClientBatchGetCrawlersResponseCrawlersScheduleTypeDef",
    "ClientBatchGetCrawlersResponseCrawlersSchemaChangePolicyTypeDef",
    "ClientBatchGetCrawlersResponseCrawlersTargetsCatalogTargetsTypeDef",
    "ClientBatchGetCrawlersResponseCrawlersTargetsDynamoDBTargetsTypeDef",
    "ClientBatchGetCrawlersResponseCrawlersTargetsJdbcTargetsTypeDef",
    "ClientBatchGetCrawlersResponseCrawlersTargetsS3TargetsTypeDef",
    "ClientBatchGetCrawlersResponseCrawlersTargetsTypeDef",
    "ClientBatchGetCrawlersResponseCrawlersTypeDef",
    "ClientBatchGetCrawlersResponseTypeDef",
    "ClientBatchGetDevEndpointsResponseDevEndpointsTypeDef",
    "ClientBatchGetDevEndpointsResponseTypeDef",
    "ClientBatchGetJobsResponseJobsCommandTypeDef",
    "ClientBatchGetJobsResponseJobsConnectionsTypeDef",
    "ClientBatchGetJobsResponseJobsExecutionPropertyTypeDef",
    "ClientBatchGetJobsResponseJobsNotificationPropertyTypeDef",
    "ClientBatchGetJobsResponseJobsTypeDef",
    "ClientBatchGetJobsResponseTypeDef",
    "ClientBatchGetPartitionPartitionsToGetTypeDef",
    "ClientBatchGetPartitionResponsePartitionsStorageDescriptorColumnsTypeDef",
    "ClientBatchGetPartitionResponsePartitionsStorageDescriptorSerdeInfoTypeDef",
    "ClientBatchGetPartitionResponsePartitionsStorageDescriptorSkewedInfoTypeDef",
    "ClientBatchGetPartitionResponsePartitionsStorageDescriptorSortColumnsTypeDef",
    "ClientBatchGetPartitionResponsePartitionsStorageDescriptorTypeDef",
    "ClientBatchGetPartitionResponsePartitionsTypeDef",
    "ClientBatchGetPartitionResponseUnprocessedKeysTypeDef",
    "ClientBatchGetPartitionResponseTypeDef",
    "ClientBatchGetTriggersResponseTriggersActionsNotificationPropertyTypeDef",
    "ClientBatchGetTriggersResponseTriggersActionsTypeDef",
    "ClientBatchGetTriggersResponseTriggersPredicateConditionsTypeDef",
    "ClientBatchGetTriggersResponseTriggersPredicateTypeDef",
    "ClientBatchGetTriggersResponseTriggersTypeDef",
    "ClientBatchGetTriggersResponseTypeDef",
    "ClientBatchGetWorkflowsResponseWorkflowsGraphEdgesTypeDef",
    "ClientBatchGetWorkflowsResponseWorkflowsGraphNodesCrawlerDetailsCrawlsTypeDef",
    "ClientBatchGetWorkflowsResponseWorkflowsGraphNodesCrawlerDetailsTypeDef",
    "ClientBatchGetWorkflowsResponseWorkflowsGraphNodesJobDetailsJobRunsNotificationPropertyTypeDef",
    "ClientBatchGetWorkflowsResponseWorkflowsGraphNodesJobDetailsJobRunsPredecessorRunsTypeDef",
    "ClientBatchGetWorkflowsResponseWorkflowsGraphNodesJobDetailsJobRunsTypeDef",
    "ClientBatchGetWorkflowsResponseWorkflowsGraphNodesJobDetailsTypeDef",
    "ClientBatchGetWorkflowsResponseWorkflowsGraphNodesTriggerDetailsTriggerActionsNotificationPropertyTypeDef",
    "ClientBatchGetWorkflowsResponseWorkflowsGraphNodesTriggerDetailsTriggerActionsTypeDef",
    "ClientBatchGetWorkflowsResponseWorkflowsGraphNodesTriggerDetailsTriggerPredicateConditionsTypeDef",
    "ClientBatchGetWorkflowsResponseWorkflowsGraphNodesTriggerDetailsTriggerPredicateTypeDef",
    "ClientBatchGetWorkflowsResponseWorkflowsGraphNodesTriggerDetailsTriggerTypeDef",
    "ClientBatchGetWorkflowsResponseWorkflowsGraphNodesTriggerDetailsTypeDef",
    "ClientBatchGetWorkflowsResponseWorkflowsGraphNodesTypeDef",
    "ClientBatchGetWorkflowsResponseWorkflowsGraphTypeDef",
    "ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphEdgesTypeDef",
    "ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesCrawlerDetailsCrawlsTypeDef",
    "ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesCrawlerDetailsTypeDef",
    "ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesJobDetailsJobRunsNotificationPropertyTypeDef",
    "ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesJobDetailsJobRunsPredecessorRunsTypeDef",
    "ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesJobDetailsJobRunsTypeDef",
    "ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesJobDetailsTypeDef",
    "ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesTriggerDetailsTriggerActionsNotificationPropertyTypeDef",
    "ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesTriggerDetailsTriggerActionsTypeDef",
    "ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesTriggerDetailsTriggerPredicateConditionsTypeDef",
    "ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesTriggerDetailsTriggerPredicateTypeDef",
    "ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesTriggerDetailsTriggerTypeDef",
    "ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesTriggerDetailsTypeDef",
    "ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesTypeDef",
    "ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphTypeDef",
    "ClientBatchGetWorkflowsResponseWorkflowsLastRunStatisticsTypeDef",
    "ClientBatchGetWorkflowsResponseWorkflowsLastRunTypeDef",
    "ClientBatchGetWorkflowsResponseWorkflowsTypeDef",
    "ClientBatchGetWorkflowsResponseTypeDef",
    "ClientBatchStopJobRunResponseErrorsErrorDetailTypeDef",
    "ClientBatchStopJobRunResponseErrorsTypeDef",
    "ClientBatchStopJobRunResponseSuccessfulSubmissionsTypeDef",
    "ClientBatchStopJobRunResponseTypeDef",
    "ClientCancelMlTaskRunResponseTypeDef",
    "ClientCreateClassifierCsvClassifierTypeDef",
    "ClientCreateClassifierGrokClassifierTypeDef",
    "ClientCreateClassifierJsonClassifierTypeDef",
    "ClientCreateClassifierXMLClassifierTypeDef",
    "ClientCreateConnectionConnectionInputPhysicalConnectionRequirementsTypeDef",
    "ClientCreateConnectionConnectionInputTypeDef",
    "ClientCreateCrawlerSchemaChangePolicyTypeDef",
    "ClientCreateCrawlerTargetsCatalogTargetsTypeDef",
    "ClientCreateCrawlerTargetsDynamoDBTargetsTypeDef",
    "ClientCreateCrawlerTargetsJdbcTargetsTypeDef",
    "ClientCreateCrawlerTargetsS3TargetsTypeDef",
    "ClientCreateCrawlerTargetsTypeDef",
    "ClientCreateDatabaseDatabaseInputCreateTableDefaultPermissionsPrincipalTypeDef",
    "ClientCreateDatabaseDatabaseInputCreateTableDefaultPermissionsTypeDef",
    "ClientCreateDatabaseDatabaseInputTypeDef",
    "ClientCreateDevEndpointResponseTypeDef",
    "ClientCreateJobCommandTypeDef",
    "ClientCreateJobConnectionsTypeDef",
    "ClientCreateJobExecutionPropertyTypeDef",
    "ClientCreateJobNotificationPropertyTypeDef",
    "ClientCreateJobResponseTypeDef",
    "ClientCreateMlTransformInputRecordTablesTypeDef",
    "ClientCreateMlTransformParametersFindMatchesParametersTypeDef",
    "ClientCreateMlTransformParametersTypeDef",
    "ClientCreateMlTransformResponseTypeDef",
    "ClientCreatePartitionPartitionInputStorageDescriptorColumnsTypeDef",
    "ClientCreatePartitionPartitionInputStorageDescriptorSerdeInfoTypeDef",
    "ClientCreatePartitionPartitionInputStorageDescriptorSkewedInfoTypeDef",
    "ClientCreatePartitionPartitionInputStorageDescriptorSortColumnsTypeDef",
    "ClientCreatePartitionPartitionInputStorageDescriptorTypeDef",
    "ClientCreatePartitionPartitionInputTypeDef",
    "ClientCreateScriptDagEdgesTypeDef",
    "ClientCreateScriptDagNodesArgsTypeDef",
    "ClientCreateScriptDagNodesTypeDef",
    "ClientCreateScriptResponseTypeDef",
    "ClientCreateSecurityConfigurationEncryptionConfigurationCloudWatchEncryptionTypeDef",
    "ClientCreateSecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionTypeDef",
    "ClientCreateSecurityConfigurationEncryptionConfigurationS3EncryptionTypeDef",
    "ClientCreateSecurityConfigurationEncryptionConfigurationTypeDef",
    "ClientCreateSecurityConfigurationResponseTypeDef",
    "ClientCreateTableTableInputPartitionKeysTypeDef",
    "ClientCreateTableTableInputStorageDescriptorColumnsTypeDef",
    "ClientCreateTableTableInputStorageDescriptorSerdeInfoTypeDef",
    "ClientCreateTableTableInputStorageDescriptorSkewedInfoTypeDef",
    "ClientCreateTableTableInputStorageDescriptorSortColumnsTypeDef",
    "ClientCreateTableTableInputStorageDescriptorTypeDef",
    "ClientCreateTableTableInputTypeDef",
    "ClientCreateTriggerActionsNotificationPropertyTypeDef",
    "ClientCreateTriggerActionsTypeDef",
    "ClientCreateTriggerPredicateConditionsTypeDef",
    "ClientCreateTriggerPredicateTypeDef",
    "ClientCreateTriggerResponseTypeDef",
    "ClientCreateUserDefinedFunctionFunctionInputResourceUrisTypeDef",
    "ClientCreateUserDefinedFunctionFunctionInputTypeDef",
    "ClientCreateWorkflowResponseTypeDef",
    "ClientDeleteJobResponseTypeDef",
    "ClientDeleteMlTransformResponseTypeDef",
    "ClientDeleteTriggerResponseTypeDef",
    "ClientDeleteWorkflowResponseTypeDef",
    "ClientGetCatalogImportStatusResponseImportStatusTypeDef",
    "ClientGetCatalogImportStatusResponseTypeDef",
    "ClientGetClassifierResponseClassifierCsvClassifierTypeDef",
    "ClientGetClassifierResponseClassifierGrokClassifierTypeDef",
    "ClientGetClassifierResponseClassifierJsonClassifierTypeDef",
    "ClientGetClassifierResponseClassifierXMLClassifierTypeDef",
    "ClientGetClassifierResponseClassifierTypeDef",
    "ClientGetClassifierResponseTypeDef",
    "ClientGetClassifiersResponseClassifiersCsvClassifierTypeDef",
    "ClientGetClassifiersResponseClassifiersGrokClassifierTypeDef",
    "ClientGetClassifiersResponseClassifiersJsonClassifierTypeDef",
    "ClientGetClassifiersResponseClassifiersXMLClassifierTypeDef",
    "ClientGetClassifiersResponseClassifiersTypeDef",
    "ClientGetClassifiersResponseTypeDef",
    "ClientGetConnectionResponseConnectionPhysicalConnectionRequirementsTypeDef",
    "ClientGetConnectionResponseConnectionTypeDef",
    "ClientGetConnectionResponseTypeDef",
    "ClientGetConnectionsFilterTypeDef",
    "ClientGetConnectionsResponseConnectionListPhysicalConnectionRequirementsTypeDef",
    "ClientGetConnectionsResponseConnectionListTypeDef",
    "ClientGetConnectionsResponseTypeDef",
    "ClientGetCrawlerMetricsResponseCrawlerMetricsListTypeDef",
    "ClientGetCrawlerMetricsResponseTypeDef",
    "ClientGetCrawlerResponseCrawlerLastCrawlTypeDef",
    "ClientGetCrawlerResponseCrawlerScheduleTypeDef",
    "ClientGetCrawlerResponseCrawlerSchemaChangePolicyTypeDef",
    "ClientGetCrawlerResponseCrawlerTargetsCatalogTargetsTypeDef",
    "ClientGetCrawlerResponseCrawlerTargetsDynamoDBTargetsTypeDef",
    "ClientGetCrawlerResponseCrawlerTargetsJdbcTargetsTypeDef",
    "ClientGetCrawlerResponseCrawlerTargetsS3TargetsTypeDef",
    "ClientGetCrawlerResponseCrawlerTargetsTypeDef",
    "ClientGetCrawlerResponseCrawlerTypeDef",
    "ClientGetCrawlerResponseTypeDef",
    "ClientGetCrawlersResponseCrawlersLastCrawlTypeDef",
    "ClientGetCrawlersResponseCrawlersScheduleTypeDef",
    "ClientGetCrawlersResponseCrawlersSchemaChangePolicyTypeDef",
    "ClientGetCrawlersResponseCrawlersTargetsCatalogTargetsTypeDef",
    "ClientGetCrawlersResponseCrawlersTargetsDynamoDBTargetsTypeDef",
    "ClientGetCrawlersResponseCrawlersTargetsJdbcTargetsTypeDef",
    "ClientGetCrawlersResponseCrawlersTargetsS3TargetsTypeDef",
    "ClientGetCrawlersResponseCrawlersTargetsTypeDef",
    "ClientGetCrawlersResponseCrawlersTypeDef",
    "ClientGetCrawlersResponseTypeDef",
    "ClientGetDataCatalogEncryptionSettingsResponseDataCatalogEncryptionSettingsConnectionPasswordEncryptionTypeDef",
    "ClientGetDataCatalogEncryptionSettingsResponseDataCatalogEncryptionSettingsEncryptionAtRestTypeDef",
    "ClientGetDataCatalogEncryptionSettingsResponseDataCatalogEncryptionSettingsTypeDef",
    "ClientGetDataCatalogEncryptionSettingsResponseTypeDef",
    "ClientGetDatabaseResponseDatabaseCreateTableDefaultPermissionsPrincipalTypeDef",
    "ClientGetDatabaseResponseDatabaseCreateTableDefaultPermissionsTypeDef",
    "ClientGetDatabaseResponseDatabaseTypeDef",
    "ClientGetDatabaseResponseTypeDef",
    "ClientGetDatabasesResponseDatabaseListCreateTableDefaultPermissionsPrincipalTypeDef",
    "ClientGetDatabasesResponseDatabaseListCreateTableDefaultPermissionsTypeDef",
    "ClientGetDatabasesResponseDatabaseListTypeDef",
    "ClientGetDatabasesResponseTypeDef",
    "ClientGetDataflowGraphResponseDagEdgesTypeDef",
    "ClientGetDataflowGraphResponseDagNodesArgsTypeDef",
    "ClientGetDataflowGraphResponseDagNodesTypeDef",
    "ClientGetDataflowGraphResponseTypeDef",
    "ClientGetDevEndpointResponseDevEndpointTypeDef",
    "ClientGetDevEndpointResponseTypeDef",
    "ClientGetDevEndpointsResponseDevEndpointsTypeDef",
    "ClientGetDevEndpointsResponseTypeDef",
    "ClientGetJobBookmarkResponseJobBookmarkEntryTypeDef",
    "ClientGetJobBookmarkResponseTypeDef",
    "ClientGetJobResponseJobCommandTypeDef",
    "ClientGetJobResponseJobConnectionsTypeDef",
    "ClientGetJobResponseJobExecutionPropertyTypeDef",
    "ClientGetJobResponseJobNotificationPropertyTypeDef",
    "ClientGetJobResponseJobTypeDef",
    "ClientGetJobResponseTypeDef",
    "ClientGetJobRunResponseJobRunNotificationPropertyTypeDef",
    "ClientGetJobRunResponseJobRunPredecessorRunsTypeDef",
    "ClientGetJobRunResponseJobRunTypeDef",
    "ClientGetJobRunResponseTypeDef",
    "ClientGetJobRunsResponseJobRunsNotificationPropertyTypeDef",
    "ClientGetJobRunsResponseJobRunsPredecessorRunsTypeDef",
    "ClientGetJobRunsResponseJobRunsTypeDef",
    "ClientGetJobRunsResponseTypeDef",
    "ClientGetJobsResponseJobsCommandTypeDef",
    "ClientGetJobsResponseJobsConnectionsTypeDef",
    "ClientGetJobsResponseJobsExecutionPropertyTypeDef",
    "ClientGetJobsResponseJobsNotificationPropertyTypeDef",
    "ClientGetJobsResponseJobsTypeDef",
    "ClientGetJobsResponseTypeDef",
    "ClientGetMappingLocationDynamoDBTypeDef",
    "ClientGetMappingLocationJdbcTypeDef",
    "ClientGetMappingLocationS3TypeDef",
    "ClientGetMappingLocationTypeDef",
    "ClientGetMappingResponseMappingTypeDef",
    "ClientGetMappingResponseTypeDef",
    "ClientGetMappingSinksTypeDef",
    "ClientGetMappingSourceTypeDef",
    "ClientGetMlTaskRunResponsePropertiesExportLabelsTaskRunPropertiesTypeDef",
    "ClientGetMlTaskRunResponsePropertiesFindMatchesTaskRunPropertiesTypeDef",
    "ClientGetMlTaskRunResponsePropertiesImportLabelsTaskRunPropertiesTypeDef",
    "ClientGetMlTaskRunResponsePropertiesLabelingSetGenerationTaskRunPropertiesTypeDef",
    "ClientGetMlTaskRunResponsePropertiesTypeDef",
    "ClientGetMlTaskRunResponseTypeDef",
    "ClientGetMlTaskRunsFilterTypeDef",
    "ClientGetMlTaskRunsResponseTaskRunsPropertiesExportLabelsTaskRunPropertiesTypeDef",
    "ClientGetMlTaskRunsResponseTaskRunsPropertiesFindMatchesTaskRunPropertiesTypeDef",
    "ClientGetMlTaskRunsResponseTaskRunsPropertiesImportLabelsTaskRunPropertiesTypeDef",
    "ClientGetMlTaskRunsResponseTaskRunsPropertiesLabelingSetGenerationTaskRunPropertiesTypeDef",
    "ClientGetMlTaskRunsResponseTaskRunsPropertiesTypeDef",
    "ClientGetMlTaskRunsResponseTaskRunsTypeDef",
    "ClientGetMlTaskRunsResponseTypeDef",
    "ClientGetMlTaskRunsSortTypeDef",
    "ClientGetMlTransformResponseEvaluationMetricsFindMatchesMetricsConfusionMatrixTypeDef",
    "ClientGetMlTransformResponseEvaluationMetricsFindMatchesMetricsTypeDef",
    "ClientGetMlTransformResponseEvaluationMetricsTypeDef",
    "ClientGetMlTransformResponseInputRecordTablesTypeDef",
    "ClientGetMlTransformResponseParametersFindMatchesParametersTypeDef",
    "ClientGetMlTransformResponseParametersTypeDef",
    "ClientGetMlTransformResponseSchemaTypeDef",
    "ClientGetMlTransformResponseTypeDef",
    "ClientGetMlTransformsFilterSchemaTypeDef",
    "ClientGetMlTransformsFilterTypeDef",
    "ClientGetMlTransformsResponseTransformsEvaluationMetricsFindMatchesMetricsConfusionMatrixTypeDef",
    "ClientGetMlTransformsResponseTransformsEvaluationMetricsFindMatchesMetricsTypeDef",
    "ClientGetMlTransformsResponseTransformsEvaluationMetricsTypeDef",
    "ClientGetMlTransformsResponseTransformsInputRecordTablesTypeDef",
    "ClientGetMlTransformsResponseTransformsParametersFindMatchesParametersTypeDef",
    "ClientGetMlTransformsResponseTransformsParametersTypeDef",
    "ClientGetMlTransformsResponseTransformsSchemaTypeDef",
    "ClientGetMlTransformsResponseTransformsTypeDef",
    "ClientGetMlTransformsResponseTypeDef",
    "ClientGetMlTransformsSortTypeDef",
    "ClientGetPartitionResponsePartitionStorageDescriptorColumnsTypeDef",
    "ClientGetPartitionResponsePartitionStorageDescriptorSerdeInfoTypeDef",
    "ClientGetPartitionResponsePartitionStorageDescriptorSkewedInfoTypeDef",
    "ClientGetPartitionResponsePartitionStorageDescriptorSortColumnsTypeDef",
    "ClientGetPartitionResponsePartitionStorageDescriptorTypeDef",
    "ClientGetPartitionResponsePartitionTypeDef",
    "ClientGetPartitionResponseTypeDef",
    "ClientGetPartitionsResponsePartitionsStorageDescriptorColumnsTypeDef",
    "ClientGetPartitionsResponsePartitionsStorageDescriptorSerdeInfoTypeDef",
    "ClientGetPartitionsResponsePartitionsStorageDescriptorSkewedInfoTypeDef",
    "ClientGetPartitionsResponsePartitionsStorageDescriptorSortColumnsTypeDef",
    "ClientGetPartitionsResponsePartitionsStorageDescriptorTypeDef",
    "ClientGetPartitionsResponsePartitionsTypeDef",
    "ClientGetPartitionsResponseTypeDef",
    "ClientGetPartitionsSegmentTypeDef",
    "ClientGetPlanLocationDynamoDBTypeDef",
    "ClientGetPlanLocationJdbcTypeDef",
    "ClientGetPlanLocationS3TypeDef",
    "ClientGetPlanLocationTypeDef",
    "ClientGetPlanMappingTypeDef",
    "ClientGetPlanResponseTypeDef",
    "ClientGetPlanSinksTypeDef",
    "ClientGetPlanSourceTypeDef",
    "ClientGetResourcePolicyResponseTypeDef",
    "ClientGetSecurityConfigurationResponseSecurityConfigurationEncryptionConfigurationCloudWatchEncryptionTypeDef",
    "ClientGetSecurityConfigurationResponseSecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionTypeDef",
    "ClientGetSecurityConfigurationResponseSecurityConfigurationEncryptionConfigurationS3EncryptionTypeDef",
    "ClientGetSecurityConfigurationResponseSecurityConfigurationEncryptionConfigurationTypeDef",
    "ClientGetSecurityConfigurationResponseSecurityConfigurationTypeDef",
    "ClientGetSecurityConfigurationResponseTypeDef",
    "ClientGetSecurityConfigurationsResponseSecurityConfigurationsEncryptionConfigurationCloudWatchEncryptionTypeDef",
    "ClientGetSecurityConfigurationsResponseSecurityConfigurationsEncryptionConfigurationJobBookmarksEncryptionTypeDef",
    "ClientGetSecurityConfigurationsResponseSecurityConfigurationsEncryptionConfigurationS3EncryptionTypeDef",
    "ClientGetSecurityConfigurationsResponseSecurityConfigurationsEncryptionConfigurationTypeDef",
    "ClientGetSecurityConfigurationsResponseSecurityConfigurationsTypeDef",
    "ClientGetSecurityConfigurationsResponseTypeDef",
    "ClientGetTableResponseTablePartitionKeysTypeDef",
    "ClientGetTableResponseTableStorageDescriptorColumnsTypeDef",
    "ClientGetTableResponseTableStorageDescriptorSerdeInfoTypeDef",
    "ClientGetTableResponseTableStorageDescriptorSkewedInfoTypeDef",
    "ClientGetTableResponseTableStorageDescriptorSortColumnsTypeDef",
    "ClientGetTableResponseTableStorageDescriptorTypeDef",
    "ClientGetTableResponseTableTypeDef",
    "ClientGetTableResponseTypeDef",
    "ClientGetTableVersionResponseTableVersionTablePartitionKeysTypeDef",
    "ClientGetTableVersionResponseTableVersionTableStorageDescriptorColumnsTypeDef",
    "ClientGetTableVersionResponseTableVersionTableStorageDescriptorSerdeInfoTypeDef",
    "ClientGetTableVersionResponseTableVersionTableStorageDescriptorSkewedInfoTypeDef",
    "ClientGetTableVersionResponseTableVersionTableStorageDescriptorSortColumnsTypeDef",
    "ClientGetTableVersionResponseTableVersionTableStorageDescriptorTypeDef",
    "ClientGetTableVersionResponseTableVersionTableTypeDef",
    "ClientGetTableVersionResponseTableVersionTypeDef",
    "ClientGetTableVersionResponseTypeDef",
    "ClientGetTableVersionsResponseTableVersionsTablePartitionKeysTypeDef",
    "ClientGetTableVersionsResponseTableVersionsTableStorageDescriptorColumnsTypeDef",
    "ClientGetTableVersionsResponseTableVersionsTableStorageDescriptorSerdeInfoTypeDef",
    "ClientGetTableVersionsResponseTableVersionsTableStorageDescriptorSkewedInfoTypeDef",
    "ClientGetTableVersionsResponseTableVersionsTableStorageDescriptorSortColumnsTypeDef",
    "ClientGetTableVersionsResponseTableVersionsTableStorageDescriptorTypeDef",
    "ClientGetTableVersionsResponseTableVersionsTableTypeDef",
    "ClientGetTableVersionsResponseTableVersionsTypeDef",
    "ClientGetTableVersionsResponseTypeDef",
    "ClientGetTablesResponseTableListPartitionKeysTypeDef",
    "ClientGetTablesResponseTableListStorageDescriptorColumnsTypeDef",
    "ClientGetTablesResponseTableListStorageDescriptorSerdeInfoTypeDef",
    "ClientGetTablesResponseTableListStorageDescriptorSkewedInfoTypeDef",
    "ClientGetTablesResponseTableListStorageDescriptorSortColumnsTypeDef",
    "ClientGetTablesResponseTableListStorageDescriptorTypeDef",
    "ClientGetTablesResponseTableListTypeDef",
    "ClientGetTablesResponseTypeDef",
    "ClientGetTagsResponseTypeDef",
    "ClientGetTriggerResponseTriggerActionsNotificationPropertyTypeDef",
    "ClientGetTriggerResponseTriggerActionsTypeDef",
    "ClientGetTriggerResponseTriggerPredicateConditionsTypeDef",
    "ClientGetTriggerResponseTriggerPredicateTypeDef",
    "ClientGetTriggerResponseTriggerTypeDef",
    "ClientGetTriggerResponseTypeDef",
    "ClientGetTriggersResponseTriggersActionsNotificationPropertyTypeDef",
    "ClientGetTriggersResponseTriggersActionsTypeDef",
    "ClientGetTriggersResponseTriggersPredicateConditionsTypeDef",
    "ClientGetTriggersResponseTriggersPredicateTypeDef",
    "ClientGetTriggersResponseTriggersTypeDef",
    "ClientGetTriggersResponseTypeDef",
    "ClientGetUserDefinedFunctionResponseUserDefinedFunctionResourceUrisTypeDef",
    "ClientGetUserDefinedFunctionResponseUserDefinedFunctionTypeDef",
    "ClientGetUserDefinedFunctionResponseTypeDef",
    "ClientGetUserDefinedFunctionsResponseUserDefinedFunctionsResourceUrisTypeDef",
    "ClientGetUserDefinedFunctionsResponseUserDefinedFunctionsTypeDef",
    "ClientGetUserDefinedFunctionsResponseTypeDef",
    "ClientGetWorkflowResponseWorkflowGraphEdgesTypeDef",
    "ClientGetWorkflowResponseWorkflowGraphNodesCrawlerDetailsCrawlsTypeDef",
    "ClientGetWorkflowResponseWorkflowGraphNodesCrawlerDetailsTypeDef",
    "ClientGetWorkflowResponseWorkflowGraphNodesJobDetailsJobRunsNotificationPropertyTypeDef",
    "ClientGetWorkflowResponseWorkflowGraphNodesJobDetailsJobRunsPredecessorRunsTypeDef",
    "ClientGetWorkflowResponseWorkflowGraphNodesJobDetailsJobRunsTypeDef",
    "ClientGetWorkflowResponseWorkflowGraphNodesJobDetailsTypeDef",
    "ClientGetWorkflowResponseWorkflowGraphNodesTriggerDetailsTriggerActionsNotificationPropertyTypeDef",
    "ClientGetWorkflowResponseWorkflowGraphNodesTriggerDetailsTriggerActionsTypeDef",
    "ClientGetWorkflowResponseWorkflowGraphNodesTriggerDetailsTriggerPredicateConditionsTypeDef",
    "ClientGetWorkflowResponseWorkflowGraphNodesTriggerDetailsTriggerPredicateTypeDef",
    "ClientGetWorkflowResponseWorkflowGraphNodesTriggerDetailsTriggerTypeDef",
    "ClientGetWorkflowResponseWorkflowGraphNodesTriggerDetailsTypeDef",
    "ClientGetWorkflowResponseWorkflowGraphNodesTypeDef",
    "ClientGetWorkflowResponseWorkflowGraphTypeDef",
    "ClientGetWorkflowResponseWorkflowLastRunGraphEdgesTypeDef",
    "ClientGetWorkflowResponseWorkflowLastRunGraphNodesCrawlerDetailsCrawlsTypeDef",
    "ClientGetWorkflowResponseWorkflowLastRunGraphNodesCrawlerDetailsTypeDef",
    "ClientGetWorkflowResponseWorkflowLastRunGraphNodesJobDetailsJobRunsNotificationPropertyTypeDef",
    "ClientGetWorkflowResponseWorkflowLastRunGraphNodesJobDetailsJobRunsPredecessorRunsTypeDef",
    "ClientGetWorkflowResponseWorkflowLastRunGraphNodesJobDetailsJobRunsTypeDef",
    "ClientGetWorkflowResponseWorkflowLastRunGraphNodesJobDetailsTypeDef",
    "ClientGetWorkflowResponseWorkflowLastRunGraphNodesTriggerDetailsTriggerActionsNotificationPropertyTypeDef",
    "ClientGetWorkflowResponseWorkflowLastRunGraphNodesTriggerDetailsTriggerActionsTypeDef",
    "ClientGetWorkflowResponseWorkflowLastRunGraphNodesTriggerDetailsTriggerPredicateConditionsTypeDef",
    "ClientGetWorkflowResponseWorkflowLastRunGraphNodesTriggerDetailsTriggerPredicateTypeDef",
    "ClientGetWorkflowResponseWorkflowLastRunGraphNodesTriggerDetailsTriggerTypeDef",
    "ClientGetWorkflowResponseWorkflowLastRunGraphNodesTriggerDetailsTypeDef",
    "ClientGetWorkflowResponseWorkflowLastRunGraphNodesTypeDef",
    "ClientGetWorkflowResponseWorkflowLastRunGraphTypeDef",
    "ClientGetWorkflowResponseWorkflowLastRunStatisticsTypeDef",
    "ClientGetWorkflowResponseWorkflowLastRunTypeDef",
    "ClientGetWorkflowResponseWorkflowTypeDef",
    "ClientGetWorkflowResponseTypeDef",
    "ClientGetWorkflowRunPropertiesResponseTypeDef",
    "ClientGetWorkflowRunResponseRunGraphEdgesTypeDef",
    "ClientGetWorkflowRunResponseRunGraphNodesCrawlerDetailsCrawlsTypeDef",
    "ClientGetWorkflowRunResponseRunGraphNodesCrawlerDetailsTypeDef",
    "ClientGetWorkflowRunResponseRunGraphNodesJobDetailsJobRunsNotificationPropertyTypeDef",
    "ClientGetWorkflowRunResponseRunGraphNodesJobDetailsJobRunsPredecessorRunsTypeDef",
    "ClientGetWorkflowRunResponseRunGraphNodesJobDetailsJobRunsTypeDef",
    "ClientGetWorkflowRunResponseRunGraphNodesJobDetailsTypeDef",
    "ClientGetWorkflowRunResponseRunGraphNodesTriggerDetailsTriggerActionsNotificationPropertyTypeDef",
    "ClientGetWorkflowRunResponseRunGraphNodesTriggerDetailsTriggerActionsTypeDef",
    "ClientGetWorkflowRunResponseRunGraphNodesTriggerDetailsTriggerPredicateConditionsTypeDef",
    "ClientGetWorkflowRunResponseRunGraphNodesTriggerDetailsTriggerPredicateTypeDef",
    "ClientGetWorkflowRunResponseRunGraphNodesTriggerDetailsTriggerTypeDef",
    "ClientGetWorkflowRunResponseRunGraphNodesTriggerDetailsTypeDef",
    "ClientGetWorkflowRunResponseRunGraphNodesTypeDef",
    "ClientGetWorkflowRunResponseRunGraphTypeDef",
    "ClientGetWorkflowRunResponseRunStatisticsTypeDef",
    "ClientGetWorkflowRunResponseRunTypeDef",
    "ClientGetWorkflowRunResponseTypeDef",
    "ClientGetWorkflowRunsResponseRunsGraphEdgesTypeDef",
    "ClientGetWorkflowRunsResponseRunsGraphNodesCrawlerDetailsCrawlsTypeDef",
    "ClientGetWorkflowRunsResponseRunsGraphNodesCrawlerDetailsTypeDef",
    "ClientGetWorkflowRunsResponseRunsGraphNodesJobDetailsJobRunsNotificationPropertyTypeDef",
    "ClientGetWorkflowRunsResponseRunsGraphNodesJobDetailsJobRunsPredecessorRunsTypeDef",
    "ClientGetWorkflowRunsResponseRunsGraphNodesJobDetailsJobRunsTypeDef",
    "ClientGetWorkflowRunsResponseRunsGraphNodesJobDetailsTypeDef",
    "ClientGetWorkflowRunsResponseRunsGraphNodesTriggerDetailsTriggerActionsNotificationPropertyTypeDef",
    "ClientGetWorkflowRunsResponseRunsGraphNodesTriggerDetailsTriggerActionsTypeDef",
    "ClientGetWorkflowRunsResponseRunsGraphNodesTriggerDetailsTriggerPredicateConditionsTypeDef",
    "ClientGetWorkflowRunsResponseRunsGraphNodesTriggerDetailsTriggerPredicateTypeDef",
    "ClientGetWorkflowRunsResponseRunsGraphNodesTriggerDetailsTriggerTypeDef",
    "ClientGetWorkflowRunsResponseRunsGraphNodesTriggerDetailsTypeDef",
    "ClientGetWorkflowRunsResponseRunsGraphNodesTypeDef",
    "ClientGetWorkflowRunsResponseRunsGraphTypeDef",
    "ClientGetWorkflowRunsResponseRunsStatisticsTypeDef",
    "ClientGetWorkflowRunsResponseRunsTypeDef",
    "ClientGetWorkflowRunsResponseTypeDef",
    "ClientListCrawlersResponseTypeDef",
    "ClientListDevEndpointsResponseTypeDef",
    "ClientListJobsResponseTypeDef",
    "ClientListTriggersResponseTypeDef",
    "ClientListWorkflowsResponseTypeDef",
    "ClientPutDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionTypeDef",
    "ClientPutDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestTypeDef",
    "ClientPutDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsTypeDef",
    "ClientPutResourcePolicyResponseTypeDef",
    "ClientResetJobBookmarkResponseJobBookmarkEntryTypeDef",
    "ClientResetJobBookmarkResponseTypeDef",
    "ClientSearchTablesFiltersTypeDef",
    "ClientSearchTablesResponseTableListPartitionKeysTypeDef",
    "ClientSearchTablesResponseTableListStorageDescriptorColumnsTypeDef",
    "ClientSearchTablesResponseTableListStorageDescriptorSerdeInfoTypeDef",
    "ClientSearchTablesResponseTableListStorageDescriptorSkewedInfoTypeDef",
    "ClientSearchTablesResponseTableListStorageDescriptorSortColumnsTypeDef",
    "ClientSearchTablesResponseTableListStorageDescriptorTypeDef",
    "ClientSearchTablesResponseTableListTypeDef",
    "ClientSearchTablesResponseTypeDef",
    "ClientSearchTablesSortCriteriaTypeDef",
    "ClientStartExportLabelsTaskRunResponseTypeDef",
    "ClientStartImportLabelsTaskRunResponseTypeDef",
    "ClientStartJobRunNotificationPropertyTypeDef",
    "ClientStartJobRunResponseTypeDef",
    "ClientStartMlEvaluationTaskRunResponseTypeDef",
    "ClientStartMlLabelingSetGenerationTaskRunResponseTypeDef",
    "ClientStartTriggerResponseTypeDef",
    "ClientStartWorkflowRunResponseTypeDef",
    "ClientStopTriggerResponseTypeDef",
    "ClientUpdateClassifierCsvClassifierTypeDef",
    "ClientUpdateClassifierGrokClassifierTypeDef",
    "ClientUpdateClassifierJsonClassifierTypeDef",
    "ClientUpdateClassifierXMLClassifierTypeDef",
    "ClientUpdateConnectionConnectionInputPhysicalConnectionRequirementsTypeDef",
    "ClientUpdateConnectionConnectionInputTypeDef",
    "ClientUpdateCrawlerSchemaChangePolicyTypeDef",
    "ClientUpdateCrawlerTargetsCatalogTargetsTypeDef",
    "ClientUpdateCrawlerTargetsDynamoDBTargetsTypeDef",
    "ClientUpdateCrawlerTargetsJdbcTargetsTypeDef",
    "ClientUpdateCrawlerTargetsS3TargetsTypeDef",
    "ClientUpdateCrawlerTargetsTypeDef",
    "ClientUpdateDatabaseDatabaseInputCreateTableDefaultPermissionsPrincipalTypeDef",
    "ClientUpdateDatabaseDatabaseInputCreateTableDefaultPermissionsTypeDef",
    "ClientUpdateDatabaseDatabaseInputTypeDef",
    "ClientUpdateDevEndpointCustomLibrariesTypeDef",
    "ClientUpdateJobJobUpdateCommandTypeDef",
    "ClientUpdateJobJobUpdateConnectionsTypeDef",
    "ClientUpdateJobJobUpdateExecutionPropertyTypeDef",
    "ClientUpdateJobJobUpdateNotificationPropertyTypeDef",
    "ClientUpdateJobJobUpdateTypeDef",
    "ClientUpdateJobResponseTypeDef",
    "ClientUpdateMlTransformParametersFindMatchesParametersTypeDef",
    "ClientUpdateMlTransformParametersTypeDef",
    "ClientUpdateMlTransformResponseTypeDef",
    "ClientUpdatePartitionPartitionInputStorageDescriptorColumnsTypeDef",
    "ClientUpdatePartitionPartitionInputStorageDescriptorSerdeInfoTypeDef",
    "ClientUpdatePartitionPartitionInputStorageDescriptorSkewedInfoTypeDef",
    "ClientUpdatePartitionPartitionInputStorageDescriptorSortColumnsTypeDef",
    "ClientUpdatePartitionPartitionInputStorageDescriptorTypeDef",
    "ClientUpdatePartitionPartitionInputTypeDef",
    "ClientUpdateTableTableInputPartitionKeysTypeDef",
    "ClientUpdateTableTableInputStorageDescriptorColumnsTypeDef",
    "ClientUpdateTableTableInputStorageDescriptorSerdeInfoTypeDef",
    "ClientUpdateTableTableInputStorageDescriptorSkewedInfoTypeDef",
    "ClientUpdateTableTableInputStorageDescriptorSortColumnsTypeDef",
    "ClientUpdateTableTableInputStorageDescriptorTypeDef",
    "ClientUpdateTableTableInputTypeDef",
    "ClientUpdateTriggerResponseTriggerActionsNotificationPropertyTypeDef",
    "ClientUpdateTriggerResponseTriggerActionsTypeDef",
    "ClientUpdateTriggerResponseTriggerPredicateConditionsTypeDef",
    "ClientUpdateTriggerResponseTriggerPredicateTypeDef",
    "ClientUpdateTriggerResponseTriggerTypeDef",
    "ClientUpdateTriggerResponseTypeDef",
    "ClientUpdateTriggerTriggerUpdateActionsNotificationPropertyTypeDef",
    "ClientUpdateTriggerTriggerUpdateActionsTypeDef",
    "ClientUpdateTriggerTriggerUpdatePredicateConditionsTypeDef",
    "ClientUpdateTriggerTriggerUpdatePredicateTypeDef",
    "ClientUpdateTriggerTriggerUpdateTypeDef",
    "ClientUpdateUserDefinedFunctionFunctionInputResourceUrisTypeDef",
    "ClientUpdateUserDefinedFunctionFunctionInputTypeDef",
    "ClientUpdateWorkflowResponseTypeDef",
    "GetClassifiersPaginatePaginationConfigTypeDef",
    "GetClassifiersPaginateResponseClassifiersCsvClassifierTypeDef",
    "GetClassifiersPaginateResponseClassifiersGrokClassifierTypeDef",
    "GetClassifiersPaginateResponseClassifiersJsonClassifierTypeDef",
    "GetClassifiersPaginateResponseClassifiersXMLClassifierTypeDef",
    "GetClassifiersPaginateResponseClassifiersTypeDef",
    "GetClassifiersPaginateResponseTypeDef",
    "GetConnectionsPaginateFilterTypeDef",
    "GetConnectionsPaginatePaginationConfigTypeDef",
    "GetConnectionsPaginateResponseConnectionListPhysicalConnectionRequirementsTypeDef",
    "GetConnectionsPaginateResponseConnectionListTypeDef",
    "GetConnectionsPaginateResponseTypeDef",
    "GetCrawlerMetricsPaginatePaginationConfigTypeDef",
    "GetCrawlerMetricsPaginateResponseCrawlerMetricsListTypeDef",
    "GetCrawlerMetricsPaginateResponseTypeDef",
    "GetCrawlersPaginatePaginationConfigTypeDef",
    "GetCrawlersPaginateResponseCrawlersLastCrawlTypeDef",
    "GetCrawlersPaginateResponseCrawlersScheduleTypeDef",
    "GetCrawlersPaginateResponseCrawlersSchemaChangePolicyTypeDef",
    "GetCrawlersPaginateResponseCrawlersTargetsCatalogTargetsTypeDef",
    "GetCrawlersPaginateResponseCrawlersTargetsDynamoDBTargetsTypeDef",
    "GetCrawlersPaginateResponseCrawlersTargetsJdbcTargetsTypeDef",
    "GetCrawlersPaginateResponseCrawlersTargetsS3TargetsTypeDef",
    "GetCrawlersPaginateResponseCrawlersTargetsTypeDef",
    "GetCrawlersPaginateResponseCrawlersTypeDef",
    "GetCrawlersPaginateResponseTypeDef",
    "GetDatabasesPaginatePaginationConfigTypeDef",
    "GetDatabasesPaginateResponseDatabaseListCreateTableDefaultPermissionsPrincipalTypeDef",
    "GetDatabasesPaginateResponseDatabaseListCreateTableDefaultPermissionsTypeDef",
    "GetDatabasesPaginateResponseDatabaseListTypeDef",
    "GetDatabasesPaginateResponseTypeDef",
    "GetDevEndpointsPaginatePaginationConfigTypeDef",
    "GetDevEndpointsPaginateResponseDevEndpointsTypeDef",
    "GetDevEndpointsPaginateResponseTypeDef",
    "GetJobRunsPaginatePaginationConfigTypeDef",
    "GetJobRunsPaginateResponseJobRunsNotificationPropertyTypeDef",
    "GetJobRunsPaginateResponseJobRunsPredecessorRunsTypeDef",
    "GetJobRunsPaginateResponseJobRunsTypeDef",
    "GetJobRunsPaginateResponseTypeDef",
    "GetJobsPaginatePaginationConfigTypeDef",
    "GetJobsPaginateResponseJobsCommandTypeDef",
    "GetJobsPaginateResponseJobsConnectionsTypeDef",
    "GetJobsPaginateResponseJobsExecutionPropertyTypeDef",
    "GetJobsPaginateResponseJobsNotificationPropertyTypeDef",
    "GetJobsPaginateResponseJobsTypeDef",
    "GetJobsPaginateResponseTypeDef",
    "GetPartitionsPaginatePaginationConfigTypeDef",
    "GetPartitionsPaginateResponsePartitionsStorageDescriptorColumnsTypeDef",
    "GetPartitionsPaginateResponsePartitionsStorageDescriptorSerdeInfoTypeDef",
    "GetPartitionsPaginateResponsePartitionsStorageDescriptorSkewedInfoTypeDef",
    "GetPartitionsPaginateResponsePartitionsStorageDescriptorSortColumnsTypeDef",
    "GetPartitionsPaginateResponsePartitionsStorageDescriptorTypeDef",
    "GetPartitionsPaginateResponsePartitionsTypeDef",
    "GetPartitionsPaginateResponseTypeDef",
    "GetPartitionsPaginateSegmentTypeDef",
    "GetSecurityConfigurationsPaginatePaginationConfigTypeDef",
    "GetSecurityConfigurationsPaginateResponseSecurityConfigurationsEncryptionConfigurationCloudWatchEncryptionTypeDef",
    "GetSecurityConfigurationsPaginateResponseSecurityConfigurationsEncryptionConfigurationJobBookmarksEncryptionTypeDef",
    "GetSecurityConfigurationsPaginateResponseSecurityConfigurationsEncryptionConfigurationS3EncryptionTypeDef",
    "GetSecurityConfigurationsPaginateResponseSecurityConfigurationsEncryptionConfigurationTypeDef",
    "GetSecurityConfigurationsPaginateResponseSecurityConfigurationsTypeDef",
    "GetSecurityConfigurationsPaginateResponseTypeDef",
    "GetTableVersionsPaginatePaginationConfigTypeDef",
    "GetTableVersionsPaginateResponseTableVersionsTablePartitionKeysTypeDef",
    "GetTableVersionsPaginateResponseTableVersionsTableStorageDescriptorColumnsTypeDef",
    "GetTableVersionsPaginateResponseTableVersionsTableStorageDescriptorSerdeInfoTypeDef",
    "GetTableVersionsPaginateResponseTableVersionsTableStorageDescriptorSkewedInfoTypeDef",
    "GetTableVersionsPaginateResponseTableVersionsTableStorageDescriptorSortColumnsTypeDef",
    "GetTableVersionsPaginateResponseTableVersionsTableStorageDescriptorTypeDef",
    "GetTableVersionsPaginateResponseTableVersionsTableTypeDef",
    "GetTableVersionsPaginateResponseTableVersionsTypeDef",
    "GetTableVersionsPaginateResponseTypeDef",
    "GetTablesPaginatePaginationConfigTypeDef",
    "GetTablesPaginateResponseTableListPartitionKeysTypeDef",
    "GetTablesPaginateResponseTableListStorageDescriptorColumnsTypeDef",
    "GetTablesPaginateResponseTableListStorageDescriptorSerdeInfoTypeDef",
    "GetTablesPaginateResponseTableListStorageDescriptorSkewedInfoTypeDef",
    "GetTablesPaginateResponseTableListStorageDescriptorSortColumnsTypeDef",
    "GetTablesPaginateResponseTableListStorageDescriptorTypeDef",
    "GetTablesPaginateResponseTableListTypeDef",
    "GetTablesPaginateResponseTypeDef",
    "GetTriggersPaginatePaginationConfigTypeDef",
    "GetTriggersPaginateResponseTriggersActionsNotificationPropertyTypeDef",
    "GetTriggersPaginateResponseTriggersActionsTypeDef",
    "GetTriggersPaginateResponseTriggersPredicateConditionsTypeDef",
    "GetTriggersPaginateResponseTriggersPredicateTypeDef",
    "GetTriggersPaginateResponseTriggersTypeDef",
    "GetTriggersPaginateResponseTypeDef",
    "GetUserDefinedFunctionsPaginatePaginationConfigTypeDef",
    "GetUserDefinedFunctionsPaginateResponseUserDefinedFunctionsResourceUrisTypeDef",
    "GetUserDefinedFunctionsPaginateResponseUserDefinedFunctionsTypeDef",
    "GetUserDefinedFunctionsPaginateResponseTypeDef",
)


_RequiredClientBatchCreatePartitionPartitionInputListStorageDescriptorColumnsTypeDef = TypedDict(
    "_RequiredClientBatchCreatePartitionPartitionInputListStorageDescriptorColumnsTypeDef",
    {"Name": str},
)
_OptionalClientBatchCreatePartitionPartitionInputListStorageDescriptorColumnsTypeDef = TypedDict(
    "_OptionalClientBatchCreatePartitionPartitionInputListStorageDescriptorColumnsTypeDef",
    {"Type": str, "Comment": str, "Parameters": Dict[str, str]},
    total=False,
)


class ClientBatchCreatePartitionPartitionInputListStorageDescriptorColumnsTypeDef(
    _RequiredClientBatchCreatePartitionPartitionInputListStorageDescriptorColumnsTypeDef,
    _OptionalClientBatchCreatePartitionPartitionInputListStorageDescriptorColumnsTypeDef,
):
    """
    Type definition for `ClientBatchCreatePartitionPartitionInputListStorageDescriptor` `Columns`

    A column in a ``Table`` .

    - **Name** *(string) --* **[REQUIRED]**

      The name of the ``Column`` .

    - **Type** *(string) --*

      The data type of the ``Column`` .

    - **Comment** *(string) --*

      A free-form text comment.

    - **Parameters** *(dict) --*

      These key-value pairs define properties associated with the column.

      - *(string) --*

        - *(string) --*
    """


_ClientBatchCreatePartitionPartitionInputListStorageDescriptorSerdeInfoTypeDef = TypedDict(
    "_ClientBatchCreatePartitionPartitionInputListStorageDescriptorSerdeInfoTypeDef",
    {"Name": str, "SerializationLibrary": str, "Parameters": Dict[str, str]},
    total=False,
)


class ClientBatchCreatePartitionPartitionInputListStorageDescriptorSerdeInfoTypeDef(
    _ClientBatchCreatePartitionPartitionInputListStorageDescriptorSerdeInfoTypeDef
):
    """
    Type definition for `ClientBatchCreatePartitionPartitionInputListStorageDescriptor` `SerdeInfo`

    The serialization/deserialization (SerDe) information.

    - **Name** *(string) --*

      Name of the SerDe.

    - **SerializationLibrary** *(string) --*

      Usually the class that implements the SerDe. An example is
      ``org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`` .

    - **Parameters** *(dict) --*

      These key-value pairs define initialization parameters for the SerDe.

      - *(string) --*

        - *(string) --*
    """


_ClientBatchCreatePartitionPartitionInputListStorageDescriptorSkewedInfoTypeDef = TypedDict(
    "_ClientBatchCreatePartitionPartitionInputListStorageDescriptorSkewedInfoTypeDef",
    {
        "SkewedColumnNames": List[str],
        "SkewedColumnValues": List[str],
        "SkewedColumnValueLocationMaps": Dict[str, str],
    },
    total=False,
)


class ClientBatchCreatePartitionPartitionInputListStorageDescriptorSkewedInfoTypeDef(
    _ClientBatchCreatePartitionPartitionInputListStorageDescriptorSkewedInfoTypeDef
):
    """
    Type definition for `ClientBatchCreatePartitionPartitionInputListStorageDescriptor` `SkewedInfo`

    The information about values that appear frequently in a column (skewed values).

    - **SkewedColumnNames** *(list) --*

      A list of names of columns that contain skewed values.

      - *(string) --*

    - **SkewedColumnValues** *(list) --*

      A list of values that appear so frequently as to be considered skewed.

      - *(string) --*

    - **SkewedColumnValueLocationMaps** *(dict) --*

      A mapping of skewed values to the columns that contain them.

      - *(string) --*

        - *(string) --*
    """


_ClientBatchCreatePartitionPartitionInputListStorageDescriptorSortColumnsTypeDef = TypedDict(
    "_ClientBatchCreatePartitionPartitionInputListStorageDescriptorSortColumnsTypeDef",
    {"Column": str, "SortOrder": int},
)


class ClientBatchCreatePartitionPartitionInputListStorageDescriptorSortColumnsTypeDef(
    _ClientBatchCreatePartitionPartitionInputListStorageDescriptorSortColumnsTypeDef
):
    """
    Type definition for `ClientBatchCreatePartitionPartitionInputListStorageDescriptor` `SortColumns`

    Specifies the sort order of a sorted column.

    - **Column** *(string) --* **[REQUIRED]**

      The name of the column.

    - **SortOrder** *(integer) --* **[REQUIRED]**

      Indicates that the column is sorted in ascending order (``== 1`` ), or in descending
      order (``==0`` ).
    """


_ClientBatchCreatePartitionPartitionInputListStorageDescriptorTypeDef = TypedDict(
    "_ClientBatchCreatePartitionPartitionInputListStorageDescriptorTypeDef",
    {
        "Columns": List[
            ClientBatchCreatePartitionPartitionInputListStorageDescriptorColumnsTypeDef
        ],
        "Location": str,
        "InputFormat": str,
        "OutputFormat": str,
        "Compressed": bool,
        "NumberOfBuckets": int,
        "SerdeInfo": ClientBatchCreatePartitionPartitionInputListStorageDescriptorSerdeInfoTypeDef,
        "BucketColumns": List[str],
        "SortColumns": List[
            ClientBatchCreatePartitionPartitionInputListStorageDescriptorSortColumnsTypeDef
        ],
        "Parameters": Dict[str, str],
        "SkewedInfo": ClientBatchCreatePartitionPartitionInputListStorageDescriptorSkewedInfoTypeDef,
        "StoredAsSubDirectories": bool,
    },
    total=False,
)


class ClientBatchCreatePartitionPartitionInputListStorageDescriptorTypeDef(
    _ClientBatchCreatePartitionPartitionInputListStorageDescriptorTypeDef
):
    """
    Type definition for `ClientBatchCreatePartitionPartitionInputList` `StorageDescriptor`

    Provides information about the physical location where the partition is stored.

    - **Columns** *(list) --*

      A list of the ``Columns`` in the table.

      - *(dict) --*

        A column in a ``Table`` .

        - **Name** *(string) --* **[REQUIRED]**

          The name of the ``Column`` .

        - **Type** *(string) --*

          The data type of the ``Column`` .

        - **Comment** *(string) --*

          A free-form text comment.

        - **Parameters** *(dict) --*

          These key-value pairs define properties associated with the column.

          - *(string) --*

            - *(string) --*

    - **Location** *(string) --*

      The physical location of the table. By default, this takes the form of the warehouse
      location, followed by the database location in the warehouse, followed by the table name.

    - **InputFormat** *(string) --*

      The input format: ``SequenceFileInputFormat`` (binary), or ``TextInputFormat`` , or a
      custom format.

    - **OutputFormat** *(string) --*

      The output format: ``SequenceFileOutputFormat`` (binary), or ``IgnoreKeyTextOutputFormat``
      , or a custom format.

    - **Compressed** *(boolean) --*

       ``True`` if the data in the table is compressed, or ``False`` if not.

    - **NumberOfBuckets** *(integer) --*

      Must be specified if the table contains any dimension columns.

    - **SerdeInfo** *(dict) --*

      The serialization/deserialization (SerDe) information.

      - **Name** *(string) --*

        Name of the SerDe.

      - **SerializationLibrary** *(string) --*

        Usually the class that implements the SerDe. An example is
        ``org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`` .

      - **Parameters** *(dict) --*

        These key-value pairs define initialization parameters for the SerDe.

        - *(string) --*

          - *(string) --*

    - **BucketColumns** *(list) --*

      A list of reducer grouping columns, clustering columns, and bucketing columns in the table.

      - *(string) --*

    - **SortColumns** *(list) --*

      A list specifying the sort order of each bucket in the table.

      - *(dict) --*

        Specifies the sort order of a sorted column.

        - **Column** *(string) --* **[REQUIRED]**

          The name of the column.

        - **SortOrder** *(integer) --* **[REQUIRED]**

          Indicates that the column is sorted in ascending order (``== 1`` ), or in descending
          order (``==0`` ).

    - **Parameters** *(dict) --*

      The user-supplied properties in key-value form.

      - *(string) --*

        - *(string) --*

    - **SkewedInfo** *(dict) --*

      The information about values that appear frequently in a column (skewed values).

      - **SkewedColumnNames** *(list) --*

        A list of names of columns that contain skewed values.

        - *(string) --*

      - **SkewedColumnValues** *(list) --*

        A list of values that appear so frequently as to be considered skewed.

        - *(string) --*

      - **SkewedColumnValueLocationMaps** *(dict) --*

        A mapping of skewed values to the columns that contain them.

        - *(string) --*

          - *(string) --*

    - **StoredAsSubDirectories** *(boolean) --*

       ``True`` if the table data is stored in subdirectories, or ``False`` if not.
    """


_ClientBatchCreatePartitionPartitionInputListTypeDef = TypedDict(
    "_ClientBatchCreatePartitionPartitionInputListTypeDef",
    {
        "Values": List[str],
        "LastAccessTime": datetime,
        "StorageDescriptor": ClientBatchCreatePartitionPartitionInputListStorageDescriptorTypeDef,
        "Parameters": Dict[str, str],
        "LastAnalyzedTime": datetime,
    },
    total=False,
)


class ClientBatchCreatePartitionPartitionInputListTypeDef(
    _ClientBatchCreatePartitionPartitionInputListTypeDef
):
    """
    Type definition for `ClientBatchCreatePartition` `PartitionInputList`

    The structure used to create and update a partition.

    - **Values** *(list) --*

      The values of the partition. Although this parameter is not required by the SDK, you must
      specify this parameter for a valid input.

      The values for the keys for the new partition must be passed as an array of String objects
      that must be ordered in the same order as the partition keys appearing in the Amazon S3
      prefix. Otherwise AWS Glue will add the values to the wrong keys.

      - *(string) --*

    - **LastAccessTime** *(datetime) --*

      The last time at which the partition was accessed.

    - **StorageDescriptor** *(dict) --*

      Provides information about the physical location where the partition is stored.

      - **Columns** *(list) --*

        A list of the ``Columns`` in the table.

        - *(dict) --*

          A column in a ``Table`` .

          - **Name** *(string) --* **[REQUIRED]**

            The name of the ``Column`` .

          - **Type** *(string) --*

            The data type of the ``Column`` .

          - **Comment** *(string) --*

            A free-form text comment.

          - **Parameters** *(dict) --*

            These key-value pairs define properties associated with the column.

            - *(string) --*

              - *(string) --*

      - **Location** *(string) --*

        The physical location of the table. By default, this takes the form of the warehouse
        location, followed by the database location in the warehouse, followed by the table name.

      - **InputFormat** *(string) --*

        The input format: ``SequenceFileInputFormat`` (binary), or ``TextInputFormat`` , or a
        custom format.

      - **OutputFormat** *(string) --*

        The output format: ``SequenceFileOutputFormat`` (binary), or ``IgnoreKeyTextOutputFormat``
        , or a custom format.

      - **Compressed** *(boolean) --*

         ``True`` if the data in the table is compressed, or ``False`` if not.

      - **NumberOfBuckets** *(integer) --*

        Must be specified if the table contains any dimension columns.

      - **SerdeInfo** *(dict) --*

        The serialization/deserialization (SerDe) information.

        - **Name** *(string) --*

          Name of the SerDe.

        - **SerializationLibrary** *(string) --*

          Usually the class that implements the SerDe. An example is
          ``org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`` .

        - **Parameters** *(dict) --*

          These key-value pairs define initialization parameters for the SerDe.

          - *(string) --*

            - *(string) --*

      - **BucketColumns** *(list) --*

        A list of reducer grouping columns, clustering columns, and bucketing columns in the table.

        - *(string) --*

      - **SortColumns** *(list) --*

        A list specifying the sort order of each bucket in the table.

        - *(dict) --*

          Specifies the sort order of a sorted column.

          - **Column** *(string) --* **[REQUIRED]**

            The name of the column.

          - **SortOrder** *(integer) --* **[REQUIRED]**

            Indicates that the column is sorted in ascending order (``== 1`` ), or in descending
            order (``==0`` ).

      - **Parameters** *(dict) --*

        The user-supplied properties in key-value form.

        - *(string) --*

          - *(string) --*

      - **SkewedInfo** *(dict) --*

        The information about values that appear frequently in a column (skewed values).

        - **SkewedColumnNames** *(list) --*

          A list of names of columns that contain skewed values.

          - *(string) --*

        - **SkewedColumnValues** *(list) --*

          A list of values that appear so frequently as to be considered skewed.

          - *(string) --*

        - **SkewedColumnValueLocationMaps** *(dict) --*

          A mapping of skewed values to the columns that contain them.

          - *(string) --*

            - *(string) --*

      - **StoredAsSubDirectories** *(boolean) --*

         ``True`` if the table data is stored in subdirectories, or ``False`` if not.

    - **Parameters** *(dict) --*

      These key-value pairs define partition parameters.

      - *(string) --*

        - *(string) --*

    - **LastAnalyzedTime** *(datetime) --*

      The last time at which column statistics were computed for this partition.
    """


_ClientBatchCreatePartitionResponseErrorsErrorDetailTypeDef = TypedDict(
    "_ClientBatchCreatePartitionResponseErrorsErrorDetailTypeDef",
    {"ErrorCode": str, "ErrorMessage": str},
    total=False,
)


class ClientBatchCreatePartitionResponseErrorsErrorDetailTypeDef(
    _ClientBatchCreatePartitionResponseErrorsErrorDetailTypeDef
):
    """
    Type definition for `ClientBatchCreatePartitionResponseErrors` `ErrorDetail`

    The details about the partition error.

    - **ErrorCode** *(string) --*

      The code associated with this error.

    - **ErrorMessage** *(string) --*

      A message describing the error.
    """


_ClientBatchCreatePartitionResponseErrorsTypeDef = TypedDict(
    "_ClientBatchCreatePartitionResponseErrorsTypeDef",
    {
        "PartitionValues": List[str],
        "ErrorDetail": ClientBatchCreatePartitionResponseErrorsErrorDetailTypeDef,
    },
    total=False,
)


class ClientBatchCreatePartitionResponseErrorsTypeDef(
    _ClientBatchCreatePartitionResponseErrorsTypeDef
):
    """
    Type definition for `ClientBatchCreatePartitionResponse` `Errors`

    Contains information about a partition error.

    - **PartitionValues** *(list) --*

      The values that define the partition.

      - *(string) --*

    - **ErrorDetail** *(dict) --*

      The details about the partition error.

      - **ErrorCode** *(string) --*

        The code associated with this error.

      - **ErrorMessage** *(string) --*

        A message describing the error.
    """


_ClientBatchCreatePartitionResponseTypeDef = TypedDict(
    "_ClientBatchCreatePartitionResponseTypeDef",
    {"Errors": List[ClientBatchCreatePartitionResponseErrorsTypeDef]},
    total=False,
)


class ClientBatchCreatePartitionResponseTypeDef(
    _ClientBatchCreatePartitionResponseTypeDef
):
    """
    Type definition for `ClientBatchCreatePartition` `Response`

    - **Errors** *(list) --*

      The errors encountered when trying to create the requested partitions.

      - *(dict) --*

        Contains information about a partition error.

        - **PartitionValues** *(list) --*

          The values that define the partition.

          - *(string) --*

        - **ErrorDetail** *(dict) --*

          The details about the partition error.

          - **ErrorCode** *(string) --*

            The code associated with this error.

          - **ErrorMessage** *(string) --*

            A message describing the error.
    """


_ClientBatchDeleteConnectionResponseErrorsTypeDef = TypedDict(
    "_ClientBatchDeleteConnectionResponseErrorsTypeDef",
    {"ErrorCode": str, "ErrorMessage": str},
    total=False,
)


class ClientBatchDeleteConnectionResponseErrorsTypeDef(
    _ClientBatchDeleteConnectionResponseErrorsTypeDef
):
    """
    Type definition for `ClientBatchDeleteConnectionResponse` `Errors`

    Contains details about an error.

    - **ErrorCode** *(string) --*

      The code associated with this error.

    - **ErrorMessage** *(string) --*

      A message describing the error.
    """


_ClientBatchDeleteConnectionResponseTypeDef = TypedDict(
    "_ClientBatchDeleteConnectionResponseTypeDef",
    {
        "Succeeded": List[str],
        "Errors": Dict[str, ClientBatchDeleteConnectionResponseErrorsTypeDef],
    },
    total=False,
)


class ClientBatchDeleteConnectionResponseTypeDef(
    _ClientBatchDeleteConnectionResponseTypeDef
):
    """
    Type definition for `ClientBatchDeleteConnection` `Response`

    - **Succeeded** *(list) --*

      A list of names of the connection definitions that were successfully deleted.

      - *(string) --*

    - **Errors** *(dict) --*

      A map of the names of connections that were not successfully deleted to error details.

      - *(string) --*

        - *(dict) --*

          Contains details about an error.

          - **ErrorCode** *(string) --*

            The code associated with this error.

          - **ErrorMessage** *(string) --*

            A message describing the error.
    """


_ClientBatchDeletePartitionPartitionsToDeleteTypeDef = TypedDict(
    "_ClientBatchDeletePartitionPartitionsToDeleteTypeDef", {"Values": List[str]}
)


class ClientBatchDeletePartitionPartitionsToDeleteTypeDef(
    _ClientBatchDeletePartitionPartitionsToDeleteTypeDef
):
    """
    Type definition for `ClientBatchDeletePartition` `PartitionsToDelete`

    Contains a list of values defining partitions.

    - **Values** *(list) --* **[REQUIRED]**

      The list of values.

      - *(string) --*
    """


_ClientBatchDeletePartitionResponseErrorsErrorDetailTypeDef = TypedDict(
    "_ClientBatchDeletePartitionResponseErrorsErrorDetailTypeDef",
    {"ErrorCode": str, "ErrorMessage": str},
    total=False,
)


class ClientBatchDeletePartitionResponseErrorsErrorDetailTypeDef(
    _ClientBatchDeletePartitionResponseErrorsErrorDetailTypeDef
):
    """
    Type definition for `ClientBatchDeletePartitionResponseErrors` `ErrorDetail`

    The details about the partition error.

    - **ErrorCode** *(string) --*

      The code associated with this error.

    - **ErrorMessage** *(string) --*

      A message describing the error.
    """


_ClientBatchDeletePartitionResponseErrorsTypeDef = TypedDict(
    "_ClientBatchDeletePartitionResponseErrorsTypeDef",
    {
        "PartitionValues": List[str],
        "ErrorDetail": ClientBatchDeletePartitionResponseErrorsErrorDetailTypeDef,
    },
    total=False,
)


class ClientBatchDeletePartitionResponseErrorsTypeDef(
    _ClientBatchDeletePartitionResponseErrorsTypeDef
):
    """
    Type definition for `ClientBatchDeletePartitionResponse` `Errors`

    Contains information about a partition error.

    - **PartitionValues** *(list) --*

      The values that define the partition.

      - *(string) --*

    - **ErrorDetail** *(dict) --*

      The details about the partition error.

      - **ErrorCode** *(string) --*

        The code associated with this error.

      - **ErrorMessage** *(string) --*

        A message describing the error.
    """


_ClientBatchDeletePartitionResponseTypeDef = TypedDict(
    "_ClientBatchDeletePartitionResponseTypeDef",
    {"Errors": List[ClientBatchDeletePartitionResponseErrorsTypeDef]},
    total=False,
)


class ClientBatchDeletePartitionResponseTypeDef(
    _ClientBatchDeletePartitionResponseTypeDef
):
    """
    Type definition for `ClientBatchDeletePartition` `Response`

    - **Errors** *(list) --*

      The errors encountered when trying to delete the requested partitions.

      - *(dict) --*

        Contains information about a partition error.

        - **PartitionValues** *(list) --*

          The values that define the partition.

          - *(string) --*

        - **ErrorDetail** *(dict) --*

          The details about the partition error.

          - **ErrorCode** *(string) --*

            The code associated with this error.

          - **ErrorMessage** *(string) --*

            A message describing the error.
    """


_ClientBatchDeleteTableResponseErrorsErrorDetailTypeDef = TypedDict(
    "_ClientBatchDeleteTableResponseErrorsErrorDetailTypeDef",
    {"ErrorCode": str, "ErrorMessage": str},
    total=False,
)


class ClientBatchDeleteTableResponseErrorsErrorDetailTypeDef(
    _ClientBatchDeleteTableResponseErrorsErrorDetailTypeDef
):
    """
    Type definition for `ClientBatchDeleteTableResponseErrors` `ErrorDetail`

    The details about the error.

    - **ErrorCode** *(string) --*

      The code associated with this error.

    - **ErrorMessage** *(string) --*

      A message describing the error.
    """


_ClientBatchDeleteTableResponseErrorsTypeDef = TypedDict(
    "_ClientBatchDeleteTableResponseErrorsTypeDef",
    {
        "TableName": str,
        "ErrorDetail": ClientBatchDeleteTableResponseErrorsErrorDetailTypeDef,
    },
    total=False,
)


class ClientBatchDeleteTableResponseErrorsTypeDef(
    _ClientBatchDeleteTableResponseErrorsTypeDef
):
    """
    Type definition for `ClientBatchDeleteTableResponse` `Errors`

    An error record for table operations.

    - **TableName** *(string) --*

      The name of the table. For Hive compatibility, this must be entirely lowercase.

    - **ErrorDetail** *(dict) --*

      The details about the error.

      - **ErrorCode** *(string) --*

        The code associated with this error.

      - **ErrorMessage** *(string) --*

        A message describing the error.
    """


_ClientBatchDeleteTableResponseTypeDef = TypedDict(
    "_ClientBatchDeleteTableResponseTypeDef",
    {"Errors": List[ClientBatchDeleteTableResponseErrorsTypeDef]},
    total=False,
)


class ClientBatchDeleteTableResponseTypeDef(_ClientBatchDeleteTableResponseTypeDef):
    """
    Type definition for `ClientBatchDeleteTable` `Response`

    - **Errors** *(list) --*

      A list of errors encountered in attempting to delete the specified tables.

      - *(dict) --*

        An error record for table operations.

        - **TableName** *(string) --*

          The name of the table. For Hive compatibility, this must be entirely lowercase.

        - **ErrorDetail** *(dict) --*

          The details about the error.

          - **ErrorCode** *(string) --*

            The code associated with this error.

          - **ErrorMessage** *(string) --*

            A message describing the error.
    """


_ClientBatchDeleteTableVersionResponseErrorsErrorDetailTypeDef = TypedDict(
    "_ClientBatchDeleteTableVersionResponseErrorsErrorDetailTypeDef",
    {"ErrorCode": str, "ErrorMessage": str},
    total=False,
)


class ClientBatchDeleteTableVersionResponseErrorsErrorDetailTypeDef(
    _ClientBatchDeleteTableVersionResponseErrorsErrorDetailTypeDef
):
    """
    Type definition for `ClientBatchDeleteTableVersionResponseErrors` `ErrorDetail`

    The details about the error.

    - **ErrorCode** *(string) --*

      The code associated with this error.

    - **ErrorMessage** *(string) --*

      A message describing the error.
    """


_ClientBatchDeleteTableVersionResponseErrorsTypeDef = TypedDict(
    "_ClientBatchDeleteTableVersionResponseErrorsTypeDef",
    {
        "TableName": str,
        "VersionId": str,
        "ErrorDetail": ClientBatchDeleteTableVersionResponseErrorsErrorDetailTypeDef,
    },
    total=False,
)


class ClientBatchDeleteTableVersionResponseErrorsTypeDef(
    _ClientBatchDeleteTableVersionResponseErrorsTypeDef
):
    """
    Type definition for `ClientBatchDeleteTableVersionResponse` `Errors`

    An error record for table-version operations.

    - **TableName** *(string) --*

      The name of the table in question.

    - **VersionId** *(string) --*

      The ID value of the version in question. A ``VersionID`` is a string representation of an
      integer. Each version is incremented by 1.

    - **ErrorDetail** *(dict) --*

      The details about the error.

      - **ErrorCode** *(string) --*

        The code associated with this error.

      - **ErrorMessage** *(string) --*

        A message describing the error.
    """


_ClientBatchDeleteTableVersionResponseTypeDef = TypedDict(
    "_ClientBatchDeleteTableVersionResponseTypeDef",
    {"Errors": List[ClientBatchDeleteTableVersionResponseErrorsTypeDef]},
    total=False,
)


class ClientBatchDeleteTableVersionResponseTypeDef(
    _ClientBatchDeleteTableVersionResponseTypeDef
):
    """
    Type definition for `ClientBatchDeleteTableVersion` `Response`

    - **Errors** *(list) --*

      A list of errors encountered while trying to delete the specified table versions.

      - *(dict) --*

        An error record for table-version operations.

        - **TableName** *(string) --*

          The name of the table in question.

        - **VersionId** *(string) --*

          The ID value of the version in question. A ``VersionID`` is a string representation of an
          integer. Each version is incremented by 1.

        - **ErrorDetail** *(dict) --*

          The details about the error.

          - **ErrorCode** *(string) --*

            The code associated with this error.

          - **ErrorMessage** *(string) --*

            A message describing the error.
    """


_ClientBatchGetCrawlersResponseCrawlersLastCrawlTypeDef = TypedDict(
    "_ClientBatchGetCrawlersResponseCrawlersLastCrawlTypeDef",
    {
        "Status": str,
        "ErrorMessage": str,
        "LogGroup": str,
        "LogStream": str,
        "MessagePrefix": str,
        "StartTime": datetime,
    },
    total=False,
)


class ClientBatchGetCrawlersResponseCrawlersLastCrawlTypeDef(
    _ClientBatchGetCrawlersResponseCrawlersLastCrawlTypeDef
):
    """
    Type definition for `ClientBatchGetCrawlersResponseCrawlers` `LastCrawl`

    The status of the last crawl, and potentially error information if an error occurred.

    - **Status** *(string) --*

      Status of the last crawl.

    - **ErrorMessage** *(string) --*

      If an error occurred, the error information about the last crawl.

    - **LogGroup** *(string) --*

      The log group for the last crawl.

    - **LogStream** *(string) --*

      The log stream for the last crawl.

    - **MessagePrefix** *(string) --*

      The prefix for a message about this crawl.

    - **StartTime** *(datetime) --*

      The time at which the crawl started.
    """


_ClientBatchGetCrawlersResponseCrawlersScheduleTypeDef = TypedDict(
    "_ClientBatchGetCrawlersResponseCrawlersScheduleTypeDef",
    {"ScheduleExpression": str, "State": str},
    total=False,
)


class ClientBatchGetCrawlersResponseCrawlersScheduleTypeDef(
    _ClientBatchGetCrawlersResponseCrawlersScheduleTypeDef
):
    """
    Type definition for `ClientBatchGetCrawlersResponseCrawlers` `Schedule`

    For scheduled crawlers, the schedule when the crawler runs.

    - **ScheduleExpression** *(string) --*

      A ``cron`` expression used to specify the schedule. For more information, see
      `Time-Based Schedules for Jobs and Crawlers
      <http://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html>`__ .
      For example, to run something every day at 12:15 UTC, specify ``cron(15 12 * * ? *)`` .

    - **State** *(string) --*

      The state of the schedule.
    """


_ClientBatchGetCrawlersResponseCrawlersSchemaChangePolicyTypeDef = TypedDict(
    "_ClientBatchGetCrawlersResponseCrawlersSchemaChangePolicyTypeDef",
    {"UpdateBehavior": str, "DeleteBehavior": str},
    total=False,
)


class ClientBatchGetCrawlersResponseCrawlersSchemaChangePolicyTypeDef(
    _ClientBatchGetCrawlersResponseCrawlersSchemaChangePolicyTypeDef
):
    """
    Type definition for `ClientBatchGetCrawlersResponseCrawlers` `SchemaChangePolicy`

    The policy that specifies update and delete behaviors for the crawler.

    - **UpdateBehavior** *(string) --*

      The update behavior when the crawler finds a changed schema.

    - **DeleteBehavior** *(string) --*

      The deletion behavior when the crawler finds a deleted object.
    """


_ClientBatchGetCrawlersResponseCrawlersTargetsCatalogTargetsTypeDef = TypedDict(
    "_ClientBatchGetCrawlersResponseCrawlersTargetsCatalogTargetsTypeDef",
    {"DatabaseName": str, "Tables": List[str]},
    total=False,
)


class ClientBatchGetCrawlersResponseCrawlersTargetsCatalogTargetsTypeDef(
    _ClientBatchGetCrawlersResponseCrawlersTargetsCatalogTargetsTypeDef
):
    """
    Type definition for `ClientBatchGetCrawlersResponseCrawlersTargets` `CatalogTargets`

    Specifies an AWS Glue Data Catalog target.

    - **DatabaseName** *(string) --*

      The name of the database to be synchronized.

    - **Tables** *(list) --*

      A list of the tables to be synchronized.

      - *(string) --*
    """


_ClientBatchGetCrawlersResponseCrawlersTargetsDynamoDBTargetsTypeDef = TypedDict(
    "_ClientBatchGetCrawlersResponseCrawlersTargetsDynamoDBTargetsTypeDef",
    {"Path": str},
    total=False,
)


class ClientBatchGetCrawlersResponseCrawlersTargetsDynamoDBTargetsTypeDef(
    _ClientBatchGetCrawlersResponseCrawlersTargetsDynamoDBTargetsTypeDef
):
    """
    Type definition for `ClientBatchGetCrawlersResponseCrawlersTargets` `DynamoDBTargets`

    Specifies an Amazon DynamoDB table to crawl.

    - **Path** *(string) --*

      The name of the DynamoDB table to crawl.
    """


_ClientBatchGetCrawlersResponseCrawlersTargetsJdbcTargetsTypeDef = TypedDict(
    "_ClientBatchGetCrawlersResponseCrawlersTargetsJdbcTargetsTypeDef",
    {"ConnectionName": str, "Path": str, "Exclusions": List[str]},
    total=False,
)


class ClientBatchGetCrawlersResponseCrawlersTargetsJdbcTargetsTypeDef(
    _ClientBatchGetCrawlersResponseCrawlersTargetsJdbcTargetsTypeDef
):
    """
    Type definition for `ClientBatchGetCrawlersResponseCrawlersTargets` `JdbcTargets`

    Specifies a JDBC data store to crawl.

    - **ConnectionName** *(string) --*

      The name of the connection to use to connect to the JDBC target.

    - **Path** *(string) --*

      The path of the JDBC target.

    - **Exclusions** *(list) --*

      A list of glob patterns used to exclude from the crawl. For more information, see
      `Catalog Tables with a Crawler
      <http://docs.aws.amazon.com/glue/latest/dg/add-crawler.html>`__ .

      - *(string) --*
    """


_ClientBatchGetCrawlersResponseCrawlersTargetsS3TargetsTypeDef = TypedDict(
    "_ClientBatchGetCrawlersResponseCrawlersTargetsS3TargetsTypeDef",
    {"Path": str, "Exclusions": List[str]},
    total=False,
)


class ClientBatchGetCrawlersResponseCrawlersTargetsS3TargetsTypeDef(
    _ClientBatchGetCrawlersResponseCrawlersTargetsS3TargetsTypeDef
):
    """
    Type definition for `ClientBatchGetCrawlersResponseCrawlersTargets` `S3Targets`

    Specifies a data store in Amazon Simple Storage Service (Amazon S3).

    - **Path** *(string) --*

      The path to the Amazon S3 target.

    - **Exclusions** *(list) --*

      A list of glob patterns used to exclude from the crawl. For more information, see
      `Catalog Tables with a Crawler
      <http://docs.aws.amazon.com/glue/latest/dg/add-crawler.html>`__ .

      - *(string) --*
    """


_ClientBatchGetCrawlersResponseCrawlersTargetsTypeDef = TypedDict(
    "_ClientBatchGetCrawlersResponseCrawlersTargetsTypeDef",
    {
        "S3Targets": List[
            ClientBatchGetCrawlersResponseCrawlersTargetsS3TargetsTypeDef
        ],
        "JdbcTargets": List[
            ClientBatchGetCrawlersResponseCrawlersTargetsJdbcTargetsTypeDef
        ],
        "DynamoDBTargets": List[
            ClientBatchGetCrawlersResponseCrawlersTargetsDynamoDBTargetsTypeDef
        ],
        "CatalogTargets": List[
            ClientBatchGetCrawlersResponseCrawlersTargetsCatalogTargetsTypeDef
        ],
    },
    total=False,
)


class ClientBatchGetCrawlersResponseCrawlersTargetsTypeDef(
    _ClientBatchGetCrawlersResponseCrawlersTargetsTypeDef
):
    """
    Type definition for `ClientBatchGetCrawlersResponseCrawlers` `Targets`

    A collection of targets to crawl.

    - **S3Targets** *(list) --*

      Specifies Amazon Simple Storage Service (Amazon S3) targets.

      - *(dict) --*

        Specifies a data store in Amazon Simple Storage Service (Amazon S3).

        - **Path** *(string) --*

          The path to the Amazon S3 target.

        - **Exclusions** *(list) --*

          A list of glob patterns used to exclude from the crawl. For more information, see
          `Catalog Tables with a Crawler
          <http://docs.aws.amazon.com/glue/latest/dg/add-crawler.html>`__ .

          - *(string) --*

    - **JdbcTargets** *(list) --*

      Specifies JDBC targets.

      - *(dict) --*

        Specifies a JDBC data store to crawl.

        - **ConnectionName** *(string) --*

          The name of the connection to use to connect to the JDBC target.

        - **Path** *(string) --*

          The path of the JDBC target.

        - **Exclusions** *(list) --*

          A list of glob patterns used to exclude from the crawl. For more information, see
          `Catalog Tables with a Crawler
          <http://docs.aws.amazon.com/glue/latest/dg/add-crawler.html>`__ .

          - *(string) --*

    - **DynamoDBTargets** *(list) --*

      Specifies Amazon DynamoDB targets.

      - *(dict) --*

        Specifies an Amazon DynamoDB table to crawl.

        - **Path** *(string) --*

          The name of the DynamoDB table to crawl.

    - **CatalogTargets** *(list) --*

      Specifies AWS Glue Data Catalog targets.

      - *(dict) --*

        Specifies an AWS Glue Data Catalog target.

        - **DatabaseName** *(string) --*

          The name of the database to be synchronized.

        - **Tables** *(list) --*

          A list of the tables to be synchronized.

          - *(string) --*
    """


_ClientBatchGetCrawlersResponseCrawlersTypeDef = TypedDict(
    "_ClientBatchGetCrawlersResponseCrawlersTypeDef",
    {
        "Name": str,
        "Role": str,
        "Targets": ClientBatchGetCrawlersResponseCrawlersTargetsTypeDef,
        "DatabaseName": str,
        "Description": str,
        "Classifiers": List[str],
        "SchemaChangePolicy": ClientBatchGetCrawlersResponseCrawlersSchemaChangePolicyTypeDef,
        "State": str,
        "TablePrefix": str,
        "Schedule": ClientBatchGetCrawlersResponseCrawlersScheduleTypeDef,
        "CrawlElapsedTime": int,
        "CreationTime": datetime,
        "LastUpdated": datetime,
        "LastCrawl": ClientBatchGetCrawlersResponseCrawlersLastCrawlTypeDef,
        "Version": int,
        "Configuration": str,
        "CrawlerSecurityConfiguration": str,
    },
    total=False,
)


class ClientBatchGetCrawlersResponseCrawlersTypeDef(
    _ClientBatchGetCrawlersResponseCrawlersTypeDef
):
    """
    Type definition for `ClientBatchGetCrawlersResponse` `Crawlers`

    Specifies a crawler program that examines a data source and uses classifiers to try to
    determine its schema. If successful, the crawler records metadata concerning the data
    source in the AWS Glue Data Catalog.

    - **Name** *(string) --*

      The name of the crawler.

    - **Role** *(string) --*

      The Amazon Resource Name (ARN) of an IAM role that's used to access customer resources,
      such as Amazon Simple Storage Service (Amazon S3) data.

    - **Targets** *(dict) --*

      A collection of targets to crawl.

      - **S3Targets** *(list) --*

        Specifies Amazon Simple Storage Service (Amazon S3) targets.

        - *(dict) --*

          Specifies a data store in Amazon Simple Storage Service (Amazon S3).

          - **Path** *(string) --*

            The path to the Amazon S3 target.

          - **Exclusions** *(list) --*

            A list of glob patterns used to exclude from the crawl. For more information, see
            `Catalog Tables with a Crawler
            <http://docs.aws.amazon.com/glue/latest/dg/add-crawler.html>`__ .

            - *(string) --*

      - **JdbcTargets** *(list) --*

        Specifies JDBC targets.

        - *(dict) --*

          Specifies a JDBC data store to crawl.

          - **ConnectionName** *(string) --*

            The name of the connection to use to connect to the JDBC target.

          - **Path** *(string) --*

            The path of the JDBC target.

          - **Exclusions** *(list) --*

            A list of glob patterns used to exclude from the crawl. For more information, see
            `Catalog Tables with a Crawler
            <http://docs.aws.amazon.com/glue/latest/dg/add-crawler.html>`__ .

            - *(string) --*

      - **DynamoDBTargets** *(list) --*

        Specifies Amazon DynamoDB targets.

        - *(dict) --*

          Specifies an Amazon DynamoDB table to crawl.

          - **Path** *(string) --*

            The name of the DynamoDB table to crawl.

      - **CatalogTargets** *(list) --*

        Specifies AWS Glue Data Catalog targets.

        - *(dict) --*

          Specifies an AWS Glue Data Catalog target.

          - **DatabaseName** *(string) --*

            The name of the database to be synchronized.

          - **Tables** *(list) --*

            A list of the tables to be synchronized.

            - *(string) --*

    - **DatabaseName** *(string) --*

      The name of the database in which the crawler's output is stored.

    - **Description** *(string) --*

      A description of the crawler.

    - **Classifiers** *(list) --*

      A list of UTF-8 strings that specify the custom classifiers that are associated with the
      crawler.

      - *(string) --*

    - **SchemaChangePolicy** *(dict) --*

      The policy that specifies update and delete behaviors for the crawler.

      - **UpdateBehavior** *(string) --*

        The update behavior when the crawler finds a changed schema.

      - **DeleteBehavior** *(string) --*

        The deletion behavior when the crawler finds a deleted object.

    - **State** *(string) --*

      Indicates whether the crawler is running, or whether a run is pending.

    - **TablePrefix** *(string) --*

      The prefix added to the names of tables that are created.

    - **Schedule** *(dict) --*

      For scheduled crawlers, the schedule when the crawler runs.

      - **ScheduleExpression** *(string) --*

        A ``cron`` expression used to specify the schedule. For more information, see
        `Time-Based Schedules for Jobs and Crawlers
        <http://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html>`__ .
        For example, to run something every day at 12:15 UTC, specify ``cron(15 12 * * ? *)`` .

      - **State** *(string) --*

        The state of the schedule.

    - **CrawlElapsedTime** *(integer) --*

      If the crawler is running, contains the total time elapsed since the last crawl began.

    - **CreationTime** *(datetime) --*

      The time that the crawler was created.

    - **LastUpdated** *(datetime) --*

      The time that the crawler was last updated.

    - **LastCrawl** *(dict) --*

      The status of the last crawl, and potentially error information if an error occurred.

      - **Status** *(string) --*

        Status of the last crawl.

      - **ErrorMessage** *(string) --*

        If an error occurred, the error information about the last crawl.

      - **LogGroup** *(string) --*

        The log group for the last crawl.

      - **LogStream** *(string) --*

        The log stream for the last crawl.

      - **MessagePrefix** *(string) --*

        The prefix for a message about this crawl.

      - **StartTime** *(datetime) --*

        The time at which the crawl started.

    - **Version** *(integer) --*

      The version of the crawler.

    - **Configuration** *(string) --*

      Crawler configuration information. This versioned JSON string allows users to specify
      aspects of a crawler's behavior. For more information, see `Configuring a Crawler
      <http://docs.aws.amazon.com/glue/latest/dg/crawler-configuration.html>`__ .

    - **CrawlerSecurityConfiguration** *(string) --*

      The name of the ``SecurityConfiguration`` structure to be used by this crawler.
    """


_ClientBatchGetCrawlersResponseTypeDef = TypedDict(
    "_ClientBatchGetCrawlersResponseTypeDef",
    {
        "Crawlers": List[ClientBatchGetCrawlersResponseCrawlersTypeDef],
        "CrawlersNotFound": List[str],
    },
    total=False,
)


class ClientBatchGetCrawlersResponseTypeDef(_ClientBatchGetCrawlersResponseTypeDef):
    """
    Type definition for `ClientBatchGetCrawlers` `Response`

    - **Crawlers** *(list) --*

      A list of crawler definitions.

      - *(dict) --*

        Specifies a crawler program that examines a data source and uses classifiers to try to
        determine its schema. If successful, the crawler records metadata concerning the data
        source in the AWS Glue Data Catalog.

        - **Name** *(string) --*

          The name of the crawler.

        - **Role** *(string) --*

          The Amazon Resource Name (ARN) of an IAM role that's used to access customer resources,
          such as Amazon Simple Storage Service (Amazon S3) data.

        - **Targets** *(dict) --*

          A collection of targets to crawl.

          - **S3Targets** *(list) --*

            Specifies Amazon Simple Storage Service (Amazon S3) targets.

            - *(dict) --*

              Specifies a data store in Amazon Simple Storage Service (Amazon S3).

              - **Path** *(string) --*

                The path to the Amazon S3 target.

              - **Exclusions** *(list) --*

                A list of glob patterns used to exclude from the crawl. For more information, see
                `Catalog Tables with a Crawler
                <http://docs.aws.amazon.com/glue/latest/dg/add-crawler.html>`__ .

                - *(string) --*

          - **JdbcTargets** *(list) --*

            Specifies JDBC targets.

            - *(dict) --*

              Specifies a JDBC data store to crawl.

              - **ConnectionName** *(string) --*

                The name of the connection to use to connect to the JDBC target.

              - **Path** *(string) --*

                The path of the JDBC target.

              - **Exclusions** *(list) --*

                A list of glob patterns used to exclude from the crawl. For more information, see
                `Catalog Tables with a Crawler
                <http://docs.aws.amazon.com/glue/latest/dg/add-crawler.html>`__ .

                - *(string) --*

          - **DynamoDBTargets** *(list) --*

            Specifies Amazon DynamoDB targets.

            - *(dict) --*

              Specifies an Amazon DynamoDB table to crawl.

              - **Path** *(string) --*

                The name of the DynamoDB table to crawl.

          - **CatalogTargets** *(list) --*

            Specifies AWS Glue Data Catalog targets.

            - *(dict) --*

              Specifies an AWS Glue Data Catalog target.

              - **DatabaseName** *(string) --*

                The name of the database to be synchronized.

              - **Tables** *(list) --*

                A list of the tables to be synchronized.

                - *(string) --*

        - **DatabaseName** *(string) --*

          The name of the database in which the crawler's output is stored.

        - **Description** *(string) --*

          A description of the crawler.

        - **Classifiers** *(list) --*

          A list of UTF-8 strings that specify the custom classifiers that are associated with the
          crawler.

          - *(string) --*

        - **SchemaChangePolicy** *(dict) --*

          The policy that specifies update and delete behaviors for the crawler.

          - **UpdateBehavior** *(string) --*

            The update behavior when the crawler finds a changed schema.

          - **DeleteBehavior** *(string) --*

            The deletion behavior when the crawler finds a deleted object.

        - **State** *(string) --*

          Indicates whether the crawler is running, or whether a run is pending.

        - **TablePrefix** *(string) --*

          The prefix added to the names of tables that are created.

        - **Schedule** *(dict) --*

          For scheduled crawlers, the schedule when the crawler runs.

          - **ScheduleExpression** *(string) --*

            A ``cron`` expression used to specify the schedule. For more information, see
            `Time-Based Schedules for Jobs and Crawlers
            <http://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html>`__ .
            For example, to run something every day at 12:15 UTC, specify ``cron(15 12 * * ? *)`` .

          - **State** *(string) --*

            The state of the schedule.

        - **CrawlElapsedTime** *(integer) --*

          If the crawler is running, contains the total time elapsed since the last crawl began.

        - **CreationTime** *(datetime) --*

          The time that the crawler was created.

        - **LastUpdated** *(datetime) --*

          The time that the crawler was last updated.

        - **LastCrawl** *(dict) --*

          The status of the last crawl, and potentially error information if an error occurred.

          - **Status** *(string) --*

            Status of the last crawl.

          - **ErrorMessage** *(string) --*

            If an error occurred, the error information about the last crawl.

          - **LogGroup** *(string) --*

            The log group for the last crawl.

          - **LogStream** *(string) --*

            The log stream for the last crawl.

          - **MessagePrefix** *(string) --*

            The prefix for a message about this crawl.

          - **StartTime** *(datetime) --*

            The time at which the crawl started.

        - **Version** *(integer) --*

          The version of the crawler.

        - **Configuration** *(string) --*

          Crawler configuration information. This versioned JSON string allows users to specify
          aspects of a crawler's behavior. For more information, see `Configuring a Crawler
          <http://docs.aws.amazon.com/glue/latest/dg/crawler-configuration.html>`__ .

        - **CrawlerSecurityConfiguration** *(string) --*

          The name of the ``SecurityConfiguration`` structure to be used by this crawler.

    - **CrawlersNotFound** *(list) --*

      A list of names of crawlers that were not found.

      - *(string) --*
    """


_ClientBatchGetDevEndpointsResponseDevEndpointsTypeDef = TypedDict(
    "_ClientBatchGetDevEndpointsResponseDevEndpointsTypeDef",
    {
        "EndpointName": str,
        "RoleArn": str,
        "SecurityGroupIds": List[str],
        "SubnetId": str,
        "YarnEndpointAddress": str,
        "PrivateAddress": str,
        "ZeppelinRemoteSparkInterpreterPort": int,
        "PublicAddress": str,
        "Status": str,
        "WorkerType": str,
        "GlueVersion": str,
        "NumberOfWorkers": int,
        "NumberOfNodes": int,
        "AvailabilityZone": str,
        "VpcId": str,
        "ExtraPythonLibsS3Path": str,
        "ExtraJarsS3Path": str,
        "FailureReason": str,
        "LastUpdateStatus": str,
        "CreatedTimestamp": datetime,
        "LastModifiedTimestamp": datetime,
        "PublicKey": str,
        "PublicKeys": List[str],
        "SecurityConfiguration": str,
        "Arguments": Dict[str, str],
    },
    total=False,
)


class ClientBatchGetDevEndpointsResponseDevEndpointsTypeDef(
    _ClientBatchGetDevEndpointsResponseDevEndpointsTypeDef
):
    """
    Type definition for `ClientBatchGetDevEndpointsResponse` `DevEndpoints`

    A development endpoint where a developer can remotely debug extract, transform, and load
    (ETL) scripts.

    - **EndpointName** *(string) --*

      The name of the ``DevEndpoint`` .

    - **RoleArn** *(string) --*

      The Amazon Resource Name (ARN) of the IAM role used in this ``DevEndpoint`` .

    - **SecurityGroupIds** *(list) --*

      A list of security group identifiers used in this ``DevEndpoint`` .

      - *(string) --*

    - **SubnetId** *(string) --*

      The subnet ID for this ``DevEndpoint`` .

    - **YarnEndpointAddress** *(string) --*

      The YARN endpoint address used by this ``DevEndpoint`` .

    - **PrivateAddress** *(string) --*

      A private IP address to access the ``DevEndpoint`` within a VPC if the ``DevEndpoint`` is
      created within one. The ``PrivateAddress`` field is present only when you create the
      ``DevEndpoint`` within your VPC.

    - **ZeppelinRemoteSparkInterpreterPort** *(integer) --*

      The Apache Zeppelin port for the remote Apache Spark interpreter.

    - **PublicAddress** *(string) --*

      The public IP address used by this ``DevEndpoint`` . The ``PublicAddress`` field is
      present only when you create a non-virtual private cloud (VPC) ``DevEndpoint`` .

    - **Status** *(string) --*

      The current status of this ``DevEndpoint`` .

    - **WorkerType** *(string) --*

      The type of predefined worker that is allocated to the development endpoint. Accepts a
      value of Standard, G.1X, or G.2X.

      * For the ``Standard`` worker type, each worker provides 4 vCPU, 16 GB of memory and a
      50GB disk, and 2 executors per worker.

      * For the ``G.1X`` worker type, each worker maps to 1 DPU (4 vCPU, 16 GB of memory, 64 GB
      disk), and provides 1 executor per worker. We recommend this worker type for
      memory-intensive jobs.

      * For the ``G.2X`` worker type, each worker maps to 2 DPU (8 vCPU, 32 GB of memory, 128
      GB disk), and provides 1 executor per worker. We recommend this worker type for
      memory-intensive jobs.

      Known issue: when a development endpoint is created with the ``G.2X``  ``WorkerType``
      configuration, the Spark drivers for the development endpoint will run on 4 vCPU, 16 GB
      of memory, and a 64 GB disk.

    - **GlueVersion** *(string) --*

      Glue version determines the versions of Apache Spark and Python that AWS Glue supports.
      The Python version indicates the version supported for running your ETL scripts on
      development endpoints.

      For more information about the available AWS Glue versions and corresponding Spark and
      Python versions, see `Glue version
      <https://docs.aws.amazon.com/glue/latest/dg/add-job.html>`__ in the developer guide.

      Development endpoints that are created without specifying a Glue version default to Glue
      0.9.

      You can specify a version of Python support for development endpoints by using the
      ``Arguments`` parameter in the ``CreateDevEndpoint`` or ``UpdateDevEndpoint`` APIs. If no
      arguments are provided, the version defaults to Python 2.

    - **NumberOfWorkers** *(integer) --*

      The number of workers of a defined ``workerType`` that are allocated to the development
      endpoint.

      The maximum number of workers you can define are 299 for ``G.1X`` , and 149 for ``G.2X`` .

    - **NumberOfNodes** *(integer) --*

      The number of AWS Glue Data Processing Units (DPUs) allocated to this ``DevEndpoint`` .

    - **AvailabilityZone** *(string) --*

      The AWS Availability Zone where this ``DevEndpoint`` is located.

    - **VpcId** *(string) --*

      The ID of the virtual private cloud (VPC) used by this ``DevEndpoint`` .

    - **ExtraPythonLibsS3Path** *(string) --*

      The paths to one or more Python libraries in an Amazon S3 bucket that should be loaded in
      your ``DevEndpoint`` . Multiple values must be complete paths separated by a comma.

      .. note::

        You can only use pure Python libraries with a ``DevEndpoint`` . Libraries that rely on
        C extensions, such as the `pandas <http://pandas.pydata.org/>`__ Python data analysis
        library, are not currently supported.

    - **ExtraJarsS3Path** *(string) --*

      The path to one or more Java ``.jar`` files in an S3 bucket that should be loaded in your
      ``DevEndpoint`` .

      .. note::

        You can only use pure Java/Scala libraries with a ``DevEndpoint`` .

    - **FailureReason** *(string) --*

      The reason for a current failure in this ``DevEndpoint`` .

    - **LastUpdateStatus** *(string) --*

      The status of the last update.

    - **CreatedTimestamp** *(datetime) --*

      The point in time at which this DevEndpoint was created.

    - **LastModifiedTimestamp** *(datetime) --*

      The point in time at which this ``DevEndpoint`` was last modified.

    - **PublicKey** *(string) --*

      The public key to be used by this ``DevEndpoint`` for authentication. This attribute is
      provided for backward compatibility because the recommended attribute to use is public
      keys.

    - **PublicKeys** *(list) --*

      A list of public keys to be used by the ``DevEndpoints`` for authentication. Using this
      attribute is preferred over a single public key because the public keys allow you to have
      a different private key per client.

      .. note::

        If you previously created an endpoint with a public key, you must remove that key to be
        able to set a list of public keys. Call the ``UpdateDevEndpoint`` API operation with
        the public key content in the ``deletePublicKeys`` attribute, and the list of new keys
        in the ``addPublicKeys`` attribute.

      - *(string) --*

    - **SecurityConfiguration** *(string) --*

      The name of the ``SecurityConfiguration`` structure to be used with this ``DevEndpoint`` .

    - **Arguments** *(dict) --*

      A map of arguments used to configure the ``DevEndpoint`` .

      Valid arguments are:

      * ``"--enable-glue-datacatalog": ""``

      * ``"GLUE_PYTHON_VERSION": "3"``

      * ``"GLUE_PYTHON_VERSION": "2"``

      You can specify a version of Python support for development endpoints by using the
      ``Arguments`` parameter in the ``CreateDevEndpoint`` or ``UpdateDevEndpoint`` APIs. If no
      arguments are provided, the version defaults to Python 2.

      - *(string) --*

        - *(string) --*
    """


_ClientBatchGetDevEndpointsResponseTypeDef = TypedDict(
    "_ClientBatchGetDevEndpointsResponseTypeDef",
    {
        "DevEndpoints": List[ClientBatchGetDevEndpointsResponseDevEndpointsTypeDef],
        "DevEndpointsNotFound": List[str],
    },
    total=False,
)


class ClientBatchGetDevEndpointsResponseTypeDef(
    _ClientBatchGetDevEndpointsResponseTypeDef
):
    """
    Type definition for `ClientBatchGetDevEndpoints` `Response`

    - **DevEndpoints** *(list) --*

      A list of ``DevEndpoint`` definitions.

      - *(dict) --*

        A development endpoint where a developer can remotely debug extract, transform, and load
        (ETL) scripts.

        - **EndpointName** *(string) --*

          The name of the ``DevEndpoint`` .

        - **RoleArn** *(string) --*

          The Amazon Resource Name (ARN) of the IAM role used in this ``DevEndpoint`` .

        - **SecurityGroupIds** *(list) --*

          A list of security group identifiers used in this ``DevEndpoint`` .

          - *(string) --*

        - **SubnetId** *(string) --*

          The subnet ID for this ``DevEndpoint`` .

        - **YarnEndpointAddress** *(string) --*

          The YARN endpoint address used by this ``DevEndpoint`` .

        - **PrivateAddress** *(string) --*

          A private IP address to access the ``DevEndpoint`` within a VPC if the ``DevEndpoint`` is
          created within one. The ``PrivateAddress`` field is present only when you create the
          ``DevEndpoint`` within your VPC.

        - **ZeppelinRemoteSparkInterpreterPort** *(integer) --*

          The Apache Zeppelin port for the remote Apache Spark interpreter.

        - **PublicAddress** *(string) --*

          The public IP address used by this ``DevEndpoint`` . The ``PublicAddress`` field is
          present only when you create a non-virtual private cloud (VPC) ``DevEndpoint`` .

        - **Status** *(string) --*

          The current status of this ``DevEndpoint`` .

        - **WorkerType** *(string) --*

          The type of predefined worker that is allocated to the development endpoint. Accepts a
          value of Standard, G.1X, or G.2X.

          * For the ``Standard`` worker type, each worker provides 4 vCPU, 16 GB of memory and a
          50GB disk, and 2 executors per worker.

          * For the ``G.1X`` worker type, each worker maps to 1 DPU (4 vCPU, 16 GB of memory, 64 GB
          disk), and provides 1 executor per worker. We recommend this worker type for
          memory-intensive jobs.

          * For the ``G.2X`` worker type, each worker maps to 2 DPU (8 vCPU, 32 GB of memory, 128
          GB disk), and provides 1 executor per worker. We recommend this worker type for
          memory-intensive jobs.

          Known issue: when a development endpoint is created with the ``G.2X``  ``WorkerType``
          configuration, the Spark drivers for the development endpoint will run on 4 vCPU, 16 GB
          of memory, and a 64 GB disk.

        - **GlueVersion** *(string) --*

          Glue version determines the versions of Apache Spark and Python that AWS Glue supports.
          The Python version indicates the version supported for running your ETL scripts on
          development endpoints.

          For more information about the available AWS Glue versions and corresponding Spark and
          Python versions, see `Glue version
          <https://docs.aws.amazon.com/glue/latest/dg/add-job.html>`__ in the developer guide.

          Development endpoints that are created without specifying a Glue version default to Glue
          0.9.

          You can specify a version of Python support for development endpoints by using the
          ``Arguments`` parameter in the ``CreateDevEndpoint`` or ``UpdateDevEndpoint`` APIs. If no
          arguments are provided, the version defaults to Python 2.

        - **NumberOfWorkers** *(integer) --*

          The number of workers of a defined ``workerType`` that are allocated to the development
          endpoint.

          The maximum number of workers you can define are 299 for ``G.1X`` , and 149 for ``G.2X`` .

        - **NumberOfNodes** *(integer) --*

          The number of AWS Glue Data Processing Units (DPUs) allocated to this ``DevEndpoint`` .

        - **AvailabilityZone** *(string) --*

          The AWS Availability Zone where this ``DevEndpoint`` is located.

        - **VpcId** *(string) --*

          The ID of the virtual private cloud (VPC) used by this ``DevEndpoint`` .

        - **ExtraPythonLibsS3Path** *(string) --*

          The paths to one or more Python libraries in an Amazon S3 bucket that should be loaded in
          your ``DevEndpoint`` . Multiple values must be complete paths separated by a comma.

          .. note::

            You can only use pure Python libraries with a ``DevEndpoint`` . Libraries that rely on
            C extensions, such as the `pandas <http://pandas.pydata.org/>`__ Python data analysis
            library, are not currently supported.

        - **ExtraJarsS3Path** *(string) --*

          The path to one or more Java ``.jar`` files in an S3 bucket that should be loaded in your
          ``DevEndpoint`` .

          .. note::

            You can only use pure Java/Scala libraries with a ``DevEndpoint`` .

        - **FailureReason** *(string) --*

          The reason for a current failure in this ``DevEndpoint`` .

        - **LastUpdateStatus** *(string) --*

          The status of the last update.

        - **CreatedTimestamp** *(datetime) --*

          The point in time at which this DevEndpoint was created.

        - **LastModifiedTimestamp** *(datetime) --*

          The point in time at which this ``DevEndpoint`` was last modified.

        - **PublicKey** *(string) --*

          The public key to be used by this ``DevEndpoint`` for authentication. This attribute is
          provided for backward compatibility because the recommended attribute to use is public
          keys.

        - **PublicKeys** *(list) --*

          A list of public keys to be used by the ``DevEndpoints`` for authentication. Using this
          attribute is preferred over a single public key because the public keys allow you to have
          a different private key per client.

          .. note::

            If you previously created an endpoint with a public key, you must remove that key to be
            able to set a list of public keys. Call the ``UpdateDevEndpoint`` API operation with
            the public key content in the ``deletePublicKeys`` attribute, and the list of new keys
            in the ``addPublicKeys`` attribute.

          - *(string) --*

        - **SecurityConfiguration** *(string) --*

          The name of the ``SecurityConfiguration`` structure to be used with this ``DevEndpoint`` .

        - **Arguments** *(dict) --*

          A map of arguments used to configure the ``DevEndpoint`` .

          Valid arguments are:

          * ``"--enable-glue-datacatalog": ""``

          * ``"GLUE_PYTHON_VERSION": "3"``

          * ``"GLUE_PYTHON_VERSION": "2"``

          You can specify a version of Python support for development endpoints by using the
          ``Arguments`` parameter in the ``CreateDevEndpoint`` or ``UpdateDevEndpoint`` APIs. If no
          arguments are provided, the version defaults to Python 2.

          - *(string) --*

            - *(string) --*

    - **DevEndpointsNotFound** *(list) --*

      A list of ``DevEndpoints`` not found.

      - *(string) --*
    """


_ClientBatchGetJobsResponseJobsCommandTypeDef = TypedDict(
    "_ClientBatchGetJobsResponseJobsCommandTypeDef",
    {"Name": str, "ScriptLocation": str, "PythonVersion": str},
    total=False,
)


class ClientBatchGetJobsResponseJobsCommandTypeDef(
    _ClientBatchGetJobsResponseJobsCommandTypeDef
):
    """
    Type definition for `ClientBatchGetJobsResponseJobs` `Command`

    The ``JobCommand`` that executes this job.

    - **Name** *(string) --*

      The name of the job command. For an Apache Spark ETL job, this must be ``glueetl`` .
      For a Python shell job, it must be ``pythonshell`` .

    - **ScriptLocation** *(string) --*

      Specifies the Amazon Simple Storage Service (Amazon S3) path to a script that executes
      a job.

    - **PythonVersion** *(string) --*

      The Python version being used to execute a Python shell job. Allowed values are 2 or 3.
    """


_ClientBatchGetJobsResponseJobsConnectionsTypeDef = TypedDict(
    "_ClientBatchGetJobsResponseJobsConnectionsTypeDef",
    {"Connections": List[str]},
    total=False,
)


class ClientBatchGetJobsResponseJobsConnectionsTypeDef(
    _ClientBatchGetJobsResponseJobsConnectionsTypeDef
):
    """
    Type definition for `ClientBatchGetJobsResponseJobs` `Connections`

    The connections used for this job.

    - **Connections** *(list) --*

      A list of connections used by the job.

      - *(string) --*
    """


_ClientBatchGetJobsResponseJobsExecutionPropertyTypeDef = TypedDict(
    "_ClientBatchGetJobsResponseJobsExecutionPropertyTypeDef",
    {"MaxConcurrentRuns": int},
    total=False,
)


class ClientBatchGetJobsResponseJobsExecutionPropertyTypeDef(
    _ClientBatchGetJobsResponseJobsExecutionPropertyTypeDef
):
    """
    Type definition for `ClientBatchGetJobsResponseJobs` `ExecutionProperty`

    An ``ExecutionProperty`` specifying the maximum number of concurrent runs allowed for
    this job.

    - **MaxConcurrentRuns** *(integer) --*

      The maximum number of concurrent runs allowed for the job. The default is 1. An error
      is returned when this threshold is reached. The maximum value you can specify is
      controlled by a service limit.
    """


_ClientBatchGetJobsResponseJobsNotificationPropertyTypeDef = TypedDict(
    "_ClientBatchGetJobsResponseJobsNotificationPropertyTypeDef",
    {"NotifyDelayAfter": int},
    total=False,
)


class ClientBatchGetJobsResponseJobsNotificationPropertyTypeDef(
    _ClientBatchGetJobsResponseJobsNotificationPropertyTypeDef
):
    """
    Type definition for `ClientBatchGetJobsResponseJobs` `NotificationProperty`

    Specifies configuration properties of a job notification.

    - **NotifyDelayAfter** *(integer) --*

      After a job run starts, the number of minutes to wait before sending a job run delay
      notification.
    """


_ClientBatchGetJobsResponseJobsTypeDef = TypedDict(
    "_ClientBatchGetJobsResponseJobsTypeDef",
    {
        "Name": str,
        "Description": str,
        "LogUri": str,
        "Role": str,
        "CreatedOn": datetime,
        "LastModifiedOn": datetime,
        "ExecutionProperty": ClientBatchGetJobsResponseJobsExecutionPropertyTypeDef,
        "Command": ClientBatchGetJobsResponseJobsCommandTypeDef,
        "DefaultArguments": Dict[str, str],
        "Connections": ClientBatchGetJobsResponseJobsConnectionsTypeDef,
        "MaxRetries": int,
        "AllocatedCapacity": int,
        "Timeout": int,
        "MaxCapacity": float,
        "WorkerType": str,
        "NumberOfWorkers": int,
        "SecurityConfiguration": str,
        "NotificationProperty": ClientBatchGetJobsResponseJobsNotificationPropertyTypeDef,
        "GlueVersion": str,
    },
    total=False,
)


class ClientBatchGetJobsResponseJobsTypeDef(_ClientBatchGetJobsResponseJobsTypeDef):
    """
    Type definition for `ClientBatchGetJobsResponse` `Jobs`

    Specifies a job definition.

    - **Name** *(string) --*

      The name you assign to this job definition.

    - **Description** *(string) --*

      A description of the job.

    - **LogUri** *(string) --*

      This field is reserved for future use.

    - **Role** *(string) --*

      The name or Amazon Resource Name (ARN) of the IAM role associated with this job.

    - **CreatedOn** *(datetime) --*

      The time and date that this job definition was created.

    - **LastModifiedOn** *(datetime) --*

      The last point in time when this job definition was modified.

    - **ExecutionProperty** *(dict) --*

      An ``ExecutionProperty`` specifying the maximum number of concurrent runs allowed for
      this job.

      - **MaxConcurrentRuns** *(integer) --*

        The maximum number of concurrent runs allowed for the job. The default is 1. An error
        is returned when this threshold is reached. The maximum value you can specify is
        controlled by a service limit.

    - **Command** *(dict) --*

      The ``JobCommand`` that executes this job.

      - **Name** *(string) --*

        The name of the job command. For an Apache Spark ETL job, this must be ``glueetl`` .
        For a Python shell job, it must be ``pythonshell`` .

      - **ScriptLocation** *(string) --*

        Specifies the Amazon Simple Storage Service (Amazon S3) path to a script that executes
        a job.

      - **PythonVersion** *(string) --*

        The Python version being used to execute a Python shell job. Allowed values are 2 or 3.

    - **DefaultArguments** *(dict) --*

      The default arguments for this job, specified as name-value pairs.

      You can specify arguments here that your own job-execution script consumes, as well as
      arguments that AWS Glue itself consumes.

      For information about how to specify and consume your own Job arguments, see the `Calling
      AWS Glue APIs in Python
      <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
      topic in the developer guide.

      For information about the key-value pairs that AWS Glue consumes to set up your job, see
      the `Special Parameters Used by AWS Glue
      <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
      topic in the developer guide.

      - *(string) --*

        - *(string) --*

    - **Connections** *(dict) --*

      The connections used for this job.

      - **Connections** *(list) --*

        A list of connections used by the job.

        - *(string) --*

    - **MaxRetries** *(integer) --*

      The maximum number of times to retry this job after a JobRun fails.

    - **AllocatedCapacity** *(integer) --*

      This field is deprecated. Use ``MaxCapacity`` instead.

      The number of AWS Glue data processing units (DPUs) allocated to runs of this job. You
      can allocate from 2 to 100 DPUs; the default is 10. A DPU is a relative measure of
      processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For
      more information, see the `AWS Glue pricing page
      <https://aws.amazon.com/glue/pricing/>`__ .

    - **Timeout** *(integer) --*

      The job timeout in minutes. This is the maximum time that a job run can consume resources
      before it is terminated and enters ``TIMEOUT`` status. The default is 2,880 minutes (48
      hours).

    - **MaxCapacity** *(float) --*

      The number of AWS Glue data processing units (DPUs) that can be allocated when this job
      runs. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute
      capacity and 16 GB of memory. For more information, see the `AWS Glue pricing page
      <https://aws.amazon.com/glue/pricing/>`__ .

      Do not set ``Max Capacity`` if using ``WorkerType`` and ``NumberOfWorkers`` .

      The value that can be allocated for ``MaxCapacity`` depends on whether you are running a
      Python shell job or an Apache Spark ETL job:

      * When you specify a Python shell job (``JobCommand.Name`` ="pythonshell"), you can
      allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.

      * When you specify an Apache Spark ETL job (``JobCommand.Name`` ="glueetl"), you can
      allocate from 2 to 100 DPUs. The default is 10 DPUs. This job type cannot have a
      fractional DPU allocation.

    - **WorkerType** *(string) --*

      The type of predefined worker that is allocated when a job runs. Accepts a value of
      Standard, G.1X, or G.2X.

      * For the ``Standard`` worker type, each worker provides 4 vCPU, 16 GB of memory and a
      50GB disk, and 2 executors per worker.

      * For the ``G.1X`` worker type, each worker maps to 1 DPU (4 vCPU, 16 GB of memory, 64 GB
      disk), and provides 1 executor per worker. We recommend this worker type for
      memory-intensive jobs.

      * For the ``G.2X`` worker type, each worker maps to 2 DPU (8 vCPU, 32 GB of memory, 128
      GB disk), and provides 1 executor per worker. We recommend this worker type for
      memory-intensive jobs.

    - **NumberOfWorkers** *(integer) --*

      The number of workers of a defined ``workerType`` that are allocated when a job runs.

      The maximum number of workers you can define are 299 for ``G.1X`` , and 149 for ``G.2X`` .

    - **SecurityConfiguration** *(string) --*

      The name of the ``SecurityConfiguration`` structure to be used with this job.

    - **NotificationProperty** *(dict) --*

      Specifies configuration properties of a job notification.

      - **NotifyDelayAfter** *(integer) --*

        After a job run starts, the number of minutes to wait before sending a job run delay
        notification.

    - **GlueVersion** *(string) --*

      Glue version determines the versions of Apache Spark and Python that AWS Glue supports.
      The Python version indicates the version supported for jobs of type Spark.

      For more information about the available AWS Glue versions and corresponding Spark and
      Python versions, see `Glue version
      <https://docs.aws.amazon.com/glue/latest/dg/add-job.html>`__ in the developer guide.

      Jobs that are created without specifying a Glue version default to Glue 0.9.
    """


_ClientBatchGetJobsResponseTypeDef = TypedDict(
    "_ClientBatchGetJobsResponseTypeDef",
    {"Jobs": List[ClientBatchGetJobsResponseJobsTypeDef], "JobsNotFound": List[str]},
    total=False,
)


class ClientBatchGetJobsResponseTypeDef(_ClientBatchGetJobsResponseTypeDef):
    """
    Type definition for `ClientBatchGetJobs` `Response`

    - **Jobs** *(list) --*

      A list of job definitions.

      - *(dict) --*

        Specifies a job definition.

        - **Name** *(string) --*

          The name you assign to this job definition.

        - **Description** *(string) --*

          A description of the job.

        - **LogUri** *(string) --*

          This field is reserved for future use.

        - **Role** *(string) --*

          The name or Amazon Resource Name (ARN) of the IAM role associated with this job.

        - **CreatedOn** *(datetime) --*

          The time and date that this job definition was created.

        - **LastModifiedOn** *(datetime) --*

          The last point in time when this job definition was modified.

        - **ExecutionProperty** *(dict) --*

          An ``ExecutionProperty`` specifying the maximum number of concurrent runs allowed for
          this job.

          - **MaxConcurrentRuns** *(integer) --*

            The maximum number of concurrent runs allowed for the job. The default is 1. An error
            is returned when this threshold is reached. The maximum value you can specify is
            controlled by a service limit.

        - **Command** *(dict) --*

          The ``JobCommand`` that executes this job.

          - **Name** *(string) --*

            The name of the job command. For an Apache Spark ETL job, this must be ``glueetl`` .
            For a Python shell job, it must be ``pythonshell`` .

          - **ScriptLocation** *(string) --*

            Specifies the Amazon Simple Storage Service (Amazon S3) path to a script that executes
            a job.

          - **PythonVersion** *(string) --*

            The Python version being used to execute a Python shell job. Allowed values are 2 or 3.

        - **DefaultArguments** *(dict) --*

          The default arguments for this job, specified as name-value pairs.

          You can specify arguments here that your own job-execution script consumes, as well as
          arguments that AWS Glue itself consumes.

          For information about how to specify and consume your own Job arguments, see the `Calling
          AWS Glue APIs in Python
          <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
          topic in the developer guide.

          For information about the key-value pairs that AWS Glue consumes to set up your job, see
          the `Special Parameters Used by AWS Glue
          <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
          topic in the developer guide.

          - *(string) --*

            - *(string) --*

        - **Connections** *(dict) --*

          The connections used for this job.

          - **Connections** *(list) --*

            A list of connections used by the job.

            - *(string) --*

        - **MaxRetries** *(integer) --*

          The maximum number of times to retry this job after a JobRun fails.

        - **AllocatedCapacity** *(integer) --*

          This field is deprecated. Use ``MaxCapacity`` instead.

          The number of AWS Glue data processing units (DPUs) allocated to runs of this job. You
          can allocate from 2 to 100 DPUs; the default is 10. A DPU is a relative measure of
          processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For
          more information, see the `AWS Glue pricing page
          <https://aws.amazon.com/glue/pricing/>`__ .

        - **Timeout** *(integer) --*

          The job timeout in minutes. This is the maximum time that a job run can consume resources
          before it is terminated and enters ``TIMEOUT`` status. The default is 2,880 minutes (48
          hours).

        - **MaxCapacity** *(float) --*

          The number of AWS Glue data processing units (DPUs) that can be allocated when this job
          runs. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute
          capacity and 16 GB of memory. For more information, see the `AWS Glue pricing page
          <https://aws.amazon.com/glue/pricing/>`__ .

          Do not set ``Max Capacity`` if using ``WorkerType`` and ``NumberOfWorkers`` .

          The value that can be allocated for ``MaxCapacity`` depends on whether you are running a
          Python shell job or an Apache Spark ETL job:

          * When you specify a Python shell job (``JobCommand.Name`` ="pythonshell"), you can
          allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.

          * When you specify an Apache Spark ETL job (``JobCommand.Name`` ="glueetl"), you can
          allocate from 2 to 100 DPUs. The default is 10 DPUs. This job type cannot have a
          fractional DPU allocation.

        - **WorkerType** *(string) --*

          The type of predefined worker that is allocated when a job runs. Accepts a value of
          Standard, G.1X, or G.2X.

          * For the ``Standard`` worker type, each worker provides 4 vCPU, 16 GB of memory and a
          50GB disk, and 2 executors per worker.

          * For the ``G.1X`` worker type, each worker maps to 1 DPU (4 vCPU, 16 GB of memory, 64 GB
          disk), and provides 1 executor per worker. We recommend this worker type for
          memory-intensive jobs.

          * For the ``G.2X`` worker type, each worker maps to 2 DPU (8 vCPU, 32 GB of memory, 128
          GB disk), and provides 1 executor per worker. We recommend this worker type for
          memory-intensive jobs.

        - **NumberOfWorkers** *(integer) --*

          The number of workers of a defined ``workerType`` that are allocated when a job runs.

          The maximum number of workers you can define are 299 for ``G.1X`` , and 149 for ``G.2X`` .

        - **SecurityConfiguration** *(string) --*

          The name of the ``SecurityConfiguration`` structure to be used with this job.

        - **NotificationProperty** *(dict) --*

          Specifies configuration properties of a job notification.

          - **NotifyDelayAfter** *(integer) --*

            After a job run starts, the number of minutes to wait before sending a job run delay
            notification.

        - **GlueVersion** *(string) --*

          Glue version determines the versions of Apache Spark and Python that AWS Glue supports.
          The Python version indicates the version supported for jobs of type Spark.

          For more information about the available AWS Glue versions and corresponding Spark and
          Python versions, see `Glue version
          <https://docs.aws.amazon.com/glue/latest/dg/add-job.html>`__ in the developer guide.

          Jobs that are created without specifying a Glue version default to Glue 0.9.

    - **JobsNotFound** *(list) --*

      A list of names of jobs not found.

      - *(string) --*
    """


_ClientBatchGetPartitionPartitionsToGetTypeDef = TypedDict(
    "_ClientBatchGetPartitionPartitionsToGetTypeDef", {"Values": List[str]}
)


class ClientBatchGetPartitionPartitionsToGetTypeDef(
    _ClientBatchGetPartitionPartitionsToGetTypeDef
):
    """
    Type definition for `ClientBatchGetPartition` `PartitionsToGet`

    Contains a list of values defining partitions.

    - **Values** *(list) --* **[REQUIRED]**

      The list of values.

      - *(string) --*
    """


_ClientBatchGetPartitionResponsePartitionsStorageDescriptorColumnsTypeDef = TypedDict(
    "_ClientBatchGetPartitionResponsePartitionsStorageDescriptorColumnsTypeDef",
    {"Name": str, "Type": str, "Comment": str, "Parameters": Dict[str, str]},
    total=False,
)


class ClientBatchGetPartitionResponsePartitionsStorageDescriptorColumnsTypeDef(
    _ClientBatchGetPartitionResponsePartitionsStorageDescriptorColumnsTypeDef
):
    """
    Type definition for `ClientBatchGetPartitionResponsePartitionsStorageDescriptor` `Columns`

    A column in a ``Table`` .

    - **Name** *(string) --*

      The name of the ``Column`` .

    - **Type** *(string) --*

      The data type of the ``Column`` .

    - **Comment** *(string) --*

      A free-form text comment.

    - **Parameters** *(dict) --*

      These key-value pairs define properties associated with the column.

      - *(string) --*

        - *(string) --*
    """


_ClientBatchGetPartitionResponsePartitionsStorageDescriptorSerdeInfoTypeDef = TypedDict(
    "_ClientBatchGetPartitionResponsePartitionsStorageDescriptorSerdeInfoTypeDef",
    {"Name": str, "SerializationLibrary": str, "Parameters": Dict[str, str]},
    total=False,
)


class ClientBatchGetPartitionResponsePartitionsStorageDescriptorSerdeInfoTypeDef(
    _ClientBatchGetPartitionResponsePartitionsStorageDescriptorSerdeInfoTypeDef
):
    """
    Type definition for `ClientBatchGetPartitionResponsePartitionsStorageDescriptor` `SerdeInfo`

    The serialization/deserialization (SerDe) information.

    - **Name** *(string) --*

      Name of the SerDe.

    - **SerializationLibrary** *(string) --*

      Usually the class that implements the SerDe. An example is
      ``org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`` .

    - **Parameters** *(dict) --*

      These key-value pairs define initialization parameters for the SerDe.

      - *(string) --*

        - *(string) --*
    """


_ClientBatchGetPartitionResponsePartitionsStorageDescriptorSkewedInfoTypeDef = TypedDict(
    "_ClientBatchGetPartitionResponsePartitionsStorageDescriptorSkewedInfoTypeDef",
    {
        "SkewedColumnNames": List[str],
        "SkewedColumnValues": List[str],
        "SkewedColumnValueLocationMaps": Dict[str, str],
    },
    total=False,
)


class ClientBatchGetPartitionResponsePartitionsStorageDescriptorSkewedInfoTypeDef(
    _ClientBatchGetPartitionResponsePartitionsStorageDescriptorSkewedInfoTypeDef
):
    """
    Type definition for `ClientBatchGetPartitionResponsePartitionsStorageDescriptor` `SkewedInfo`

    The information about values that appear frequently in a column (skewed values).

    - **SkewedColumnNames** *(list) --*

      A list of names of columns that contain skewed values.

      - *(string) --*

    - **SkewedColumnValues** *(list) --*

      A list of values that appear so frequently as to be considered skewed.

      - *(string) --*

    - **SkewedColumnValueLocationMaps** *(dict) --*

      A mapping of skewed values to the columns that contain them.

      - *(string) --*

        - *(string) --*
    """


_ClientBatchGetPartitionResponsePartitionsStorageDescriptorSortColumnsTypeDef = TypedDict(
    "_ClientBatchGetPartitionResponsePartitionsStorageDescriptorSortColumnsTypeDef",
    {"Column": str, "SortOrder": int},
    total=False,
)


class ClientBatchGetPartitionResponsePartitionsStorageDescriptorSortColumnsTypeDef(
    _ClientBatchGetPartitionResponsePartitionsStorageDescriptorSortColumnsTypeDef
):
    """
    Type definition for `ClientBatchGetPartitionResponsePartitionsStorageDescriptor` `SortColumns`

    Specifies the sort order of a sorted column.

    - **Column** *(string) --*

      The name of the column.

    - **SortOrder** *(integer) --*

      Indicates that the column is sorted in ascending order (``== 1`` ), or in
      descending order (``==0`` ).
    """


_ClientBatchGetPartitionResponsePartitionsStorageDescriptorTypeDef = TypedDict(
    "_ClientBatchGetPartitionResponsePartitionsStorageDescriptorTypeDef",
    {
        "Columns": List[
            ClientBatchGetPartitionResponsePartitionsStorageDescriptorColumnsTypeDef
        ],
        "Location": str,
        "InputFormat": str,
        "OutputFormat": str,
        "Compressed": bool,
        "NumberOfBuckets": int,
        "SerdeInfo": ClientBatchGetPartitionResponsePartitionsStorageDescriptorSerdeInfoTypeDef,
        "BucketColumns": List[str],
        "SortColumns": List[
            ClientBatchGetPartitionResponsePartitionsStorageDescriptorSortColumnsTypeDef
        ],
        "Parameters": Dict[str, str],
        "SkewedInfo": ClientBatchGetPartitionResponsePartitionsStorageDescriptorSkewedInfoTypeDef,
        "StoredAsSubDirectories": bool,
    },
    total=False,
)


class ClientBatchGetPartitionResponsePartitionsStorageDescriptorTypeDef(
    _ClientBatchGetPartitionResponsePartitionsStorageDescriptorTypeDef
):
    """
    Type definition for `ClientBatchGetPartitionResponsePartitions` `StorageDescriptor`

    Provides information about the physical location where the partition is stored.

    - **Columns** *(list) --*

      A list of the ``Columns`` in the table.

      - *(dict) --*

        A column in a ``Table`` .

        - **Name** *(string) --*

          The name of the ``Column`` .

        - **Type** *(string) --*

          The data type of the ``Column`` .

        - **Comment** *(string) --*

          A free-form text comment.

        - **Parameters** *(dict) --*

          These key-value pairs define properties associated with the column.

          - *(string) --*

            - *(string) --*

    - **Location** *(string) --*

      The physical location of the table. By default, this takes the form of the warehouse
      location, followed by the database location in the warehouse, followed by the table
      name.

    - **InputFormat** *(string) --*

      The input format: ``SequenceFileInputFormat`` (binary), or ``TextInputFormat`` , or a
      custom format.

    - **OutputFormat** *(string) --*

      The output format: ``SequenceFileOutputFormat`` (binary), or
      ``IgnoreKeyTextOutputFormat`` , or a custom format.

    - **Compressed** *(boolean) --*

       ``True`` if the data in the table is compressed, or ``False`` if not.

    - **NumberOfBuckets** *(integer) --*

      Must be specified if the table contains any dimension columns.

    - **SerdeInfo** *(dict) --*

      The serialization/deserialization (SerDe) information.

      - **Name** *(string) --*

        Name of the SerDe.

      - **SerializationLibrary** *(string) --*

        Usually the class that implements the SerDe. An example is
        ``org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`` .

      - **Parameters** *(dict) --*

        These key-value pairs define initialization parameters for the SerDe.

        - *(string) --*

          - *(string) --*

    - **BucketColumns** *(list) --*

      A list of reducer grouping columns, clustering columns, and bucketing columns in the
      table.

      - *(string) --*

    - **SortColumns** *(list) --*

      A list specifying the sort order of each bucket in the table.

      - *(dict) --*

        Specifies the sort order of a sorted column.

        - **Column** *(string) --*

          The name of the column.

        - **SortOrder** *(integer) --*

          Indicates that the column is sorted in ascending order (``== 1`` ), or in
          descending order (``==0`` ).

    - **Parameters** *(dict) --*

      The user-supplied properties in key-value form.

      - *(string) --*

        - *(string) --*

    - **SkewedInfo** *(dict) --*

      The information about values that appear frequently in a column (skewed values).

      - **SkewedColumnNames** *(list) --*

        A list of names of columns that contain skewed values.

        - *(string) --*

      - **SkewedColumnValues** *(list) --*

        A list of values that appear so frequently as to be considered skewed.

        - *(string) --*

      - **SkewedColumnValueLocationMaps** *(dict) --*

        A mapping of skewed values to the columns that contain them.

        - *(string) --*

          - *(string) --*

    - **StoredAsSubDirectories** *(boolean) --*

       ``True`` if the table data is stored in subdirectories, or ``False`` if not.
    """


_ClientBatchGetPartitionResponsePartitionsTypeDef = TypedDict(
    "_ClientBatchGetPartitionResponsePartitionsTypeDef",
    {
        "Values": List[str],
        "DatabaseName": str,
        "TableName": str,
        "CreationTime": datetime,
        "LastAccessTime": datetime,
        "StorageDescriptor": ClientBatchGetPartitionResponsePartitionsStorageDescriptorTypeDef,
        "Parameters": Dict[str, str],
        "LastAnalyzedTime": datetime,
    },
    total=False,
)


class ClientBatchGetPartitionResponsePartitionsTypeDef(
    _ClientBatchGetPartitionResponsePartitionsTypeDef
):
    """
    Type definition for `ClientBatchGetPartitionResponse` `Partitions`

    Represents a slice of table data.

    - **Values** *(list) --*

      The values of the partition.

      - *(string) --*

    - **DatabaseName** *(string) --*

      The name of the catalog database in which to create the partition.

    - **TableName** *(string) --*

      The name of the database table in which to create the partition.

    - **CreationTime** *(datetime) --*

      The time at which the partition was created.

    - **LastAccessTime** *(datetime) --*

      The last time at which the partition was accessed.

    - **StorageDescriptor** *(dict) --*

      Provides information about the physical location where the partition is stored.

      - **Columns** *(list) --*

        A list of the ``Columns`` in the table.

        - *(dict) --*

          A column in a ``Table`` .

          - **Name** *(string) --*

            The name of the ``Column`` .

          - **Type** *(string) --*

            The data type of the ``Column`` .

          - **Comment** *(string) --*

            A free-form text comment.

          - **Parameters** *(dict) --*

            These key-value pairs define properties associated with the column.

            - *(string) --*

              - *(string) --*

      - **Location** *(string) --*

        The physical location of the table. By default, this takes the form of the warehouse
        location, followed by the database location in the warehouse, followed by the table
        name.

      - **InputFormat** *(string) --*

        The input format: ``SequenceFileInputFormat`` (binary), or ``TextInputFormat`` , or a
        custom format.

      - **OutputFormat** *(string) --*

        The output format: ``SequenceFileOutputFormat`` (binary), or
        ``IgnoreKeyTextOutputFormat`` , or a custom format.

      - **Compressed** *(boolean) --*

         ``True`` if the data in the table is compressed, or ``False`` if not.

      - **NumberOfBuckets** *(integer) --*

        Must be specified if the table contains any dimension columns.

      - **SerdeInfo** *(dict) --*

        The serialization/deserialization (SerDe) information.

        - **Name** *(string) --*

          Name of the SerDe.

        - **SerializationLibrary** *(string) --*

          Usually the class that implements the SerDe. An example is
          ``org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`` .

        - **Parameters** *(dict) --*

          These key-value pairs define initialization parameters for the SerDe.

          - *(string) --*

            - *(string) --*

      - **BucketColumns** *(list) --*

        A list of reducer grouping columns, clustering columns, and bucketing columns in the
        table.

        - *(string) --*

      - **SortColumns** *(list) --*

        A list specifying the sort order of each bucket in the table.

        - *(dict) --*

          Specifies the sort order of a sorted column.

          - **Column** *(string) --*

            The name of the column.

          - **SortOrder** *(integer) --*

            Indicates that the column is sorted in ascending order (``== 1`` ), or in
            descending order (``==0`` ).

      - **Parameters** *(dict) --*

        The user-supplied properties in key-value form.

        - *(string) --*

          - *(string) --*

      - **SkewedInfo** *(dict) --*

        The information about values that appear frequently in a column (skewed values).

        - **SkewedColumnNames** *(list) --*

          A list of names of columns that contain skewed values.

          - *(string) --*

        - **SkewedColumnValues** *(list) --*

          A list of values that appear so frequently as to be considered skewed.

          - *(string) --*

        - **SkewedColumnValueLocationMaps** *(dict) --*

          A mapping of skewed values to the columns that contain them.

          - *(string) --*

            - *(string) --*

      - **StoredAsSubDirectories** *(boolean) --*

         ``True`` if the table data is stored in subdirectories, or ``False`` if not.

    - **Parameters** *(dict) --*

      These key-value pairs define partition parameters.

      - *(string) --*

        - *(string) --*

    - **LastAnalyzedTime** *(datetime) --*

      The last time at which column statistics were computed for this partition.
    """


_ClientBatchGetPartitionResponseUnprocessedKeysTypeDef = TypedDict(
    "_ClientBatchGetPartitionResponseUnprocessedKeysTypeDef",
    {"Values": List[str]},
    total=False,
)


class ClientBatchGetPartitionResponseUnprocessedKeysTypeDef(
    _ClientBatchGetPartitionResponseUnprocessedKeysTypeDef
):
    """
    Type definition for `ClientBatchGetPartitionResponse` `UnprocessedKeys`

    Contains a list of values defining partitions.

    - **Values** *(list) --*

      The list of values.

      - *(string) --*
    """


_ClientBatchGetPartitionResponseTypeDef = TypedDict(
    "_ClientBatchGetPartitionResponseTypeDef",
    {
        "Partitions": List[ClientBatchGetPartitionResponsePartitionsTypeDef],
        "UnprocessedKeys": List[ClientBatchGetPartitionResponseUnprocessedKeysTypeDef],
    },
    total=False,
)


class ClientBatchGetPartitionResponseTypeDef(_ClientBatchGetPartitionResponseTypeDef):
    """
    Type definition for `ClientBatchGetPartition` `Response`

    - **Partitions** *(list) --*

      A list of the requested partitions.

      - *(dict) --*

        Represents a slice of table data.

        - **Values** *(list) --*

          The values of the partition.

          - *(string) --*

        - **DatabaseName** *(string) --*

          The name of the catalog database in which to create the partition.

        - **TableName** *(string) --*

          The name of the database table in which to create the partition.

        - **CreationTime** *(datetime) --*

          The time at which the partition was created.

        - **LastAccessTime** *(datetime) --*

          The last time at which the partition was accessed.

        - **StorageDescriptor** *(dict) --*

          Provides information about the physical location where the partition is stored.

          - **Columns** *(list) --*

            A list of the ``Columns`` in the table.

            - *(dict) --*

              A column in a ``Table`` .

              - **Name** *(string) --*

                The name of the ``Column`` .

              - **Type** *(string) --*

                The data type of the ``Column`` .

              - **Comment** *(string) --*

                A free-form text comment.

              - **Parameters** *(dict) --*

                These key-value pairs define properties associated with the column.

                - *(string) --*

                  - *(string) --*

          - **Location** *(string) --*

            The physical location of the table. By default, this takes the form of the warehouse
            location, followed by the database location in the warehouse, followed by the table
            name.

          - **InputFormat** *(string) --*

            The input format: ``SequenceFileInputFormat`` (binary), or ``TextInputFormat`` , or a
            custom format.

          - **OutputFormat** *(string) --*

            The output format: ``SequenceFileOutputFormat`` (binary), or
            ``IgnoreKeyTextOutputFormat`` , or a custom format.

          - **Compressed** *(boolean) --*

             ``True`` if the data in the table is compressed, or ``False`` if not.

          - **NumberOfBuckets** *(integer) --*

            Must be specified if the table contains any dimension columns.

          - **SerdeInfo** *(dict) --*

            The serialization/deserialization (SerDe) information.

            - **Name** *(string) --*

              Name of the SerDe.

            - **SerializationLibrary** *(string) --*

              Usually the class that implements the SerDe. An example is
              ``org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`` .

            - **Parameters** *(dict) --*

              These key-value pairs define initialization parameters for the SerDe.

              - *(string) --*

                - *(string) --*

          - **BucketColumns** *(list) --*

            A list of reducer grouping columns, clustering columns, and bucketing columns in the
            table.

            - *(string) --*

          - **SortColumns** *(list) --*

            A list specifying the sort order of each bucket in the table.

            - *(dict) --*

              Specifies the sort order of a sorted column.

              - **Column** *(string) --*

                The name of the column.

              - **SortOrder** *(integer) --*

                Indicates that the column is sorted in ascending order (``== 1`` ), or in
                descending order (``==0`` ).

          - **Parameters** *(dict) --*

            The user-supplied properties in key-value form.

            - *(string) --*

              - *(string) --*

          - **SkewedInfo** *(dict) --*

            The information about values that appear frequently in a column (skewed values).

            - **SkewedColumnNames** *(list) --*

              A list of names of columns that contain skewed values.

              - *(string) --*

            - **SkewedColumnValues** *(list) --*

              A list of values that appear so frequently as to be considered skewed.

              - *(string) --*

            - **SkewedColumnValueLocationMaps** *(dict) --*

              A mapping of skewed values to the columns that contain them.

              - *(string) --*

                - *(string) --*

          - **StoredAsSubDirectories** *(boolean) --*

             ``True`` if the table data is stored in subdirectories, or ``False`` if not.

        - **Parameters** *(dict) --*

          These key-value pairs define partition parameters.

          - *(string) --*

            - *(string) --*

        - **LastAnalyzedTime** *(datetime) --*

          The last time at which column statistics were computed for this partition.

    - **UnprocessedKeys** *(list) --*

      A list of the partition values in the request for which partitions were not returned.

      - *(dict) --*

        Contains a list of values defining partitions.

        - **Values** *(list) --*

          The list of values.

          - *(string) --*
    """


_ClientBatchGetTriggersResponseTriggersActionsNotificationPropertyTypeDef = TypedDict(
    "_ClientBatchGetTriggersResponseTriggersActionsNotificationPropertyTypeDef",
    {"NotifyDelayAfter": int},
    total=False,
)


class ClientBatchGetTriggersResponseTriggersActionsNotificationPropertyTypeDef(
    _ClientBatchGetTriggersResponseTriggersActionsNotificationPropertyTypeDef
):
    """
    Type definition for `ClientBatchGetTriggersResponseTriggersActions` `NotificationProperty`

    Specifies configuration properties of a job run notification.

    - **NotifyDelayAfter** *(integer) --*

      After a job run starts, the number of minutes to wait before sending a job run
      delay notification.
    """


_ClientBatchGetTriggersResponseTriggersActionsTypeDef = TypedDict(
    "_ClientBatchGetTriggersResponseTriggersActionsTypeDef",
    {
        "JobName": str,
        "Arguments": Dict[str, str],
        "Timeout": int,
        "SecurityConfiguration": str,
        "NotificationProperty": ClientBatchGetTriggersResponseTriggersActionsNotificationPropertyTypeDef,
        "CrawlerName": str,
    },
    total=False,
)


class ClientBatchGetTriggersResponseTriggersActionsTypeDef(
    _ClientBatchGetTriggersResponseTriggersActionsTypeDef
):
    """
    Type definition for `ClientBatchGetTriggersResponseTriggers` `Actions`

    Defines an action to be initiated by a trigger.

    - **JobName** *(string) --*

      The name of a job to be executed.

    - **Arguments** *(dict) --*

      The job arguments used when this trigger fires. For this job run, they replace the
      default arguments set in the job definition itself.

      You can specify arguments here that your own job-execution script consumes, as well
      as arguments that AWS Glue itself consumes.

      For information about how to specify and consume your own Job arguments, see the
      `Calling AWS Glue APIs in Python
      <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
      topic in the developer guide.

      For information about the key-value pairs that AWS Glue consumes to set up your job,
      see the `Special Parameters Used by AWS Glue
      <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
      topic in the developer guide.

      - *(string) --*

        - *(string) --*

    - **Timeout** *(integer) --*

      The ``JobRun`` timeout in minutes. This is the maximum time that a job run can
      consume resources before it is terminated and enters ``TIMEOUT`` status. The default
      is 2,880 minutes (48 hours). This overrides the timeout value set in the parent job.

    - **SecurityConfiguration** *(string) --*

      The name of the ``SecurityConfiguration`` structure to be used with this action.

    - **NotificationProperty** *(dict) --*

      Specifies configuration properties of a job run notification.

      - **NotifyDelayAfter** *(integer) --*

        After a job run starts, the number of minutes to wait before sending a job run
        delay notification.

    - **CrawlerName** *(string) --*

      The name of the crawler to be used with this action.
    """


_ClientBatchGetTriggersResponseTriggersPredicateConditionsTypeDef = TypedDict(
    "_ClientBatchGetTriggersResponseTriggersPredicateConditionsTypeDef",
    {
        "LogicalOperator": str,
        "JobName": str,
        "State": str,
        "CrawlerName": str,
        "CrawlState": str,
    },
    total=False,
)


class ClientBatchGetTriggersResponseTriggersPredicateConditionsTypeDef(
    _ClientBatchGetTriggersResponseTriggersPredicateConditionsTypeDef
):
    """
    Type definition for `ClientBatchGetTriggersResponseTriggersPredicate` `Conditions`

    Defines a condition under which a trigger fires.

    - **LogicalOperator** *(string) --*

      A logical operator.

    - **JobName** *(string) --*

      The name of the job whose ``JobRuns`` this condition applies to, and on which this
      trigger waits.

    - **State** *(string) --*

      The condition state. Currently, the values supported are ``SUCCEEDED`` ,
      ``STOPPED`` , ``TIMEOUT`` , and ``FAILED`` .

    - **CrawlerName** *(string) --*

      The name of the crawler to which this condition applies.

    - **CrawlState** *(string) --*

      The state of the crawler to which this condition applies.
    """


_ClientBatchGetTriggersResponseTriggersPredicateTypeDef = TypedDict(
    "_ClientBatchGetTriggersResponseTriggersPredicateTypeDef",
    {
        "Logical": str,
        "Conditions": List[
            ClientBatchGetTriggersResponseTriggersPredicateConditionsTypeDef
        ],
    },
    total=False,
)


class ClientBatchGetTriggersResponseTriggersPredicateTypeDef(
    _ClientBatchGetTriggersResponseTriggersPredicateTypeDef
):
    """
    Type definition for `ClientBatchGetTriggersResponseTriggers` `Predicate`

    The predicate of this trigger, which defines when it will fire.

    - **Logical** *(string) --*

      An optional field if only one condition is listed. If multiple conditions are listed,
      then this field is required.

    - **Conditions** *(list) --*

      A list of the conditions that determine when the trigger will fire.

      - *(dict) --*

        Defines a condition under which a trigger fires.

        - **LogicalOperator** *(string) --*

          A logical operator.

        - **JobName** *(string) --*

          The name of the job whose ``JobRuns`` this condition applies to, and on which this
          trigger waits.

        - **State** *(string) --*

          The condition state. Currently, the values supported are ``SUCCEEDED`` ,
          ``STOPPED`` , ``TIMEOUT`` , and ``FAILED`` .

        - **CrawlerName** *(string) --*

          The name of the crawler to which this condition applies.

        - **CrawlState** *(string) --*

          The state of the crawler to which this condition applies.
    """


_ClientBatchGetTriggersResponseTriggersTypeDef = TypedDict(
    "_ClientBatchGetTriggersResponseTriggersTypeDef",
    {
        "Name": str,
        "WorkflowName": str,
        "Id": str,
        "Type": str,
        "State": str,
        "Description": str,
        "Schedule": str,
        "Actions": List[ClientBatchGetTriggersResponseTriggersActionsTypeDef],
        "Predicate": ClientBatchGetTriggersResponseTriggersPredicateTypeDef,
    },
    total=False,
)


class ClientBatchGetTriggersResponseTriggersTypeDef(
    _ClientBatchGetTriggersResponseTriggersTypeDef
):
    """
    Type definition for `ClientBatchGetTriggersResponse` `Triggers`

    Information about a specific trigger.

    - **Name** *(string) --*

      The name of the trigger.

    - **WorkflowName** *(string) --*

      The name of the workflow associated with the trigger.

    - **Id** *(string) --*

      Reserved for future use.

    - **Type** *(string) --*

      The type of trigger that this is.

    - **State** *(string) --*

      The current state of the trigger.

    - **Description** *(string) --*

      A description of this trigger.

    - **Schedule** *(string) --*

      A ``cron`` expression used to specify the schedule (see `Time-Based Schedules for Jobs
      and Crawlers
      <https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html>`__ .
      For example, to run something every day at 12:15 UTC, you would specify: ``cron(15 12 * *
      ? *)`` .

    - **Actions** *(list) --*

      The actions initiated by this trigger.

      - *(dict) --*

        Defines an action to be initiated by a trigger.

        - **JobName** *(string) --*

          The name of a job to be executed.

        - **Arguments** *(dict) --*

          The job arguments used when this trigger fires. For this job run, they replace the
          default arguments set in the job definition itself.

          You can specify arguments here that your own job-execution script consumes, as well
          as arguments that AWS Glue itself consumes.

          For information about how to specify and consume your own Job arguments, see the
          `Calling AWS Glue APIs in Python
          <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
          topic in the developer guide.

          For information about the key-value pairs that AWS Glue consumes to set up your job,
          see the `Special Parameters Used by AWS Glue
          <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
          topic in the developer guide.

          - *(string) --*

            - *(string) --*

        - **Timeout** *(integer) --*

          The ``JobRun`` timeout in minutes. This is the maximum time that a job run can
          consume resources before it is terminated and enters ``TIMEOUT`` status. The default
          is 2,880 minutes (48 hours). This overrides the timeout value set in the parent job.

        - **SecurityConfiguration** *(string) --*

          The name of the ``SecurityConfiguration`` structure to be used with this action.

        - **NotificationProperty** *(dict) --*

          Specifies configuration properties of a job run notification.

          - **NotifyDelayAfter** *(integer) --*

            After a job run starts, the number of minutes to wait before sending a job run
            delay notification.

        - **CrawlerName** *(string) --*

          The name of the crawler to be used with this action.

    - **Predicate** *(dict) --*

      The predicate of this trigger, which defines when it will fire.

      - **Logical** *(string) --*

        An optional field if only one condition is listed. If multiple conditions are listed,
        then this field is required.

      - **Conditions** *(list) --*

        A list of the conditions that determine when the trigger will fire.

        - *(dict) --*

          Defines a condition under which a trigger fires.

          - **LogicalOperator** *(string) --*

            A logical operator.

          - **JobName** *(string) --*

            The name of the job whose ``JobRuns`` this condition applies to, and on which this
            trigger waits.

          - **State** *(string) --*

            The condition state. Currently, the values supported are ``SUCCEEDED`` ,
            ``STOPPED`` , ``TIMEOUT`` , and ``FAILED`` .

          - **CrawlerName** *(string) --*

            The name of the crawler to which this condition applies.

          - **CrawlState** *(string) --*

            The state of the crawler to which this condition applies.
    """


_ClientBatchGetTriggersResponseTypeDef = TypedDict(
    "_ClientBatchGetTriggersResponseTypeDef",
    {
        "Triggers": List[ClientBatchGetTriggersResponseTriggersTypeDef],
        "TriggersNotFound": List[str],
    },
    total=False,
)


class ClientBatchGetTriggersResponseTypeDef(_ClientBatchGetTriggersResponseTypeDef):
    """
    Type definition for `ClientBatchGetTriggers` `Response`

    - **Triggers** *(list) --*

      A list of trigger definitions.

      - *(dict) --*

        Information about a specific trigger.

        - **Name** *(string) --*

          The name of the trigger.

        - **WorkflowName** *(string) --*

          The name of the workflow associated with the trigger.

        - **Id** *(string) --*

          Reserved for future use.

        - **Type** *(string) --*

          The type of trigger that this is.

        - **State** *(string) --*

          The current state of the trigger.

        - **Description** *(string) --*

          A description of this trigger.

        - **Schedule** *(string) --*

          A ``cron`` expression used to specify the schedule (see `Time-Based Schedules for Jobs
          and Crawlers
          <https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html>`__ .
          For example, to run something every day at 12:15 UTC, you would specify: ``cron(15 12 * *
          ? *)`` .

        - **Actions** *(list) --*

          The actions initiated by this trigger.

          - *(dict) --*

            Defines an action to be initiated by a trigger.

            - **JobName** *(string) --*

              The name of a job to be executed.

            - **Arguments** *(dict) --*

              The job arguments used when this trigger fires. For this job run, they replace the
              default arguments set in the job definition itself.

              You can specify arguments here that your own job-execution script consumes, as well
              as arguments that AWS Glue itself consumes.

              For information about how to specify and consume your own Job arguments, see the
              `Calling AWS Glue APIs in Python
              <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
              topic in the developer guide.

              For information about the key-value pairs that AWS Glue consumes to set up your job,
              see the `Special Parameters Used by AWS Glue
              <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
              topic in the developer guide.

              - *(string) --*

                - *(string) --*

            - **Timeout** *(integer) --*

              The ``JobRun`` timeout in minutes. This is the maximum time that a job run can
              consume resources before it is terminated and enters ``TIMEOUT`` status. The default
              is 2,880 minutes (48 hours). This overrides the timeout value set in the parent job.

            - **SecurityConfiguration** *(string) --*

              The name of the ``SecurityConfiguration`` structure to be used with this action.

            - **NotificationProperty** *(dict) --*

              Specifies configuration properties of a job run notification.

              - **NotifyDelayAfter** *(integer) --*

                After a job run starts, the number of minutes to wait before sending a job run
                delay notification.

            - **CrawlerName** *(string) --*

              The name of the crawler to be used with this action.

        - **Predicate** *(dict) --*

          The predicate of this trigger, which defines when it will fire.

          - **Logical** *(string) --*

            An optional field if only one condition is listed. If multiple conditions are listed,
            then this field is required.

          - **Conditions** *(list) --*

            A list of the conditions that determine when the trigger will fire.

            - *(dict) --*

              Defines a condition under which a trigger fires.

              - **LogicalOperator** *(string) --*

                A logical operator.

              - **JobName** *(string) --*

                The name of the job whose ``JobRuns`` this condition applies to, and on which this
                trigger waits.

              - **State** *(string) --*

                The condition state. Currently, the values supported are ``SUCCEEDED`` ,
                ``STOPPED`` , ``TIMEOUT`` , and ``FAILED`` .

              - **CrawlerName** *(string) --*

                The name of the crawler to which this condition applies.

              - **CrawlState** *(string) --*

                The state of the crawler to which this condition applies.

    - **TriggersNotFound** *(list) --*

      A list of names of triggers not found.

      - *(string) --*
    """


_ClientBatchGetWorkflowsResponseWorkflowsGraphEdgesTypeDef = TypedDict(
    "_ClientBatchGetWorkflowsResponseWorkflowsGraphEdgesTypeDef",
    {"SourceId": str, "DestinationId": str},
    total=False,
)


class ClientBatchGetWorkflowsResponseWorkflowsGraphEdgesTypeDef(
    _ClientBatchGetWorkflowsResponseWorkflowsGraphEdgesTypeDef
):
    """
    Type definition for `ClientBatchGetWorkflowsResponseWorkflowsGraph` `Edges`

    An edge represents a directed connection between two AWS Glue components which are
    part of the workflow the edge belongs to.

    - **SourceId** *(string) --*

      The unique of the node within the workflow where the edge starts.

    - **DestinationId** *(string) --*

      The unique of the node within the workflow where the edge ends.
    """


_ClientBatchGetWorkflowsResponseWorkflowsGraphNodesCrawlerDetailsCrawlsTypeDef = TypedDict(
    "_ClientBatchGetWorkflowsResponseWorkflowsGraphNodesCrawlerDetailsCrawlsTypeDef",
    {
        "State": str,
        "StartedOn": datetime,
        "CompletedOn": datetime,
        "ErrorMessage": str,
        "LogGroup": str,
        "LogStream": str,
    },
    total=False,
)


class ClientBatchGetWorkflowsResponseWorkflowsGraphNodesCrawlerDetailsCrawlsTypeDef(
    _ClientBatchGetWorkflowsResponseWorkflowsGraphNodesCrawlerDetailsCrawlsTypeDef
):
    """
    Type definition for `ClientBatchGetWorkflowsResponseWorkflowsGraphNodesCrawlerDetails` `Crawls`

    The details of a crawl in the workflow.

    - **State** *(string) --*

      The state of the crawler.

    - **StartedOn** *(datetime) --*

      The date and time on which the crawl started.

    - **CompletedOn** *(datetime) --*

      The date and time on which the crawl completed.

    - **ErrorMessage** *(string) --*

      The error message associated with the crawl.

    - **LogGroup** *(string) --*

      The log group associated with the crawl.

    - **LogStream** *(string) --*

      The log stream associated with the crawl.
    """


_ClientBatchGetWorkflowsResponseWorkflowsGraphNodesCrawlerDetailsTypeDef = TypedDict(
    "_ClientBatchGetWorkflowsResponseWorkflowsGraphNodesCrawlerDetailsTypeDef",
    {
        "Crawls": List[
            ClientBatchGetWorkflowsResponseWorkflowsGraphNodesCrawlerDetailsCrawlsTypeDef
        ]
    },
    total=False,
)


class ClientBatchGetWorkflowsResponseWorkflowsGraphNodesCrawlerDetailsTypeDef(
    _ClientBatchGetWorkflowsResponseWorkflowsGraphNodesCrawlerDetailsTypeDef
):
    """
    Type definition for `ClientBatchGetWorkflowsResponseWorkflowsGraphNodes` `CrawlerDetails`

    Details of the crawler when the node represents a crawler.

    - **Crawls** *(list) --*

      A list of crawls represented by the crawl node.

      - *(dict) --*

        The details of a crawl in the workflow.

        - **State** *(string) --*

          The state of the crawler.

        - **StartedOn** *(datetime) --*

          The date and time on which the crawl started.

        - **CompletedOn** *(datetime) --*

          The date and time on which the crawl completed.

        - **ErrorMessage** *(string) --*

          The error message associated with the crawl.

        - **LogGroup** *(string) --*

          The log group associated with the crawl.

        - **LogStream** *(string) --*

          The log stream associated with the crawl.
    """


_ClientBatchGetWorkflowsResponseWorkflowsGraphNodesJobDetailsJobRunsNotificationPropertyTypeDef = TypedDict(
    "_ClientBatchGetWorkflowsResponseWorkflowsGraphNodesJobDetailsJobRunsNotificationPropertyTypeDef",
    {"NotifyDelayAfter": int},
    total=False,
)


class ClientBatchGetWorkflowsResponseWorkflowsGraphNodesJobDetailsJobRunsNotificationPropertyTypeDef(
    _ClientBatchGetWorkflowsResponseWorkflowsGraphNodesJobDetailsJobRunsNotificationPropertyTypeDef
):
    """
    Type definition for `ClientBatchGetWorkflowsResponseWorkflowsGraphNodesJobDetailsJobRuns` `NotificationProperty`

    Specifies configuration properties of a job run notification.

    - **NotifyDelayAfter** *(integer) --*

      After a job run starts, the number of minutes to wait before sending a job
      run delay notification.
    """


_ClientBatchGetWorkflowsResponseWorkflowsGraphNodesJobDetailsJobRunsPredecessorRunsTypeDef = TypedDict(
    "_ClientBatchGetWorkflowsResponseWorkflowsGraphNodesJobDetailsJobRunsPredecessorRunsTypeDef",
    {"JobName": str, "RunId": str},
    total=False,
)


class ClientBatchGetWorkflowsResponseWorkflowsGraphNodesJobDetailsJobRunsPredecessorRunsTypeDef(
    _ClientBatchGetWorkflowsResponseWorkflowsGraphNodesJobDetailsJobRunsPredecessorRunsTypeDef
):
    """
    Type definition for `ClientBatchGetWorkflowsResponseWorkflowsGraphNodesJobDetailsJobRuns` `PredecessorRuns`

    A job run that was used in the predicate of a conditional trigger that
    triggered this job run.

    - **JobName** *(string) --*

      The name of the job definition used by the predecessor job run.

    - **RunId** *(string) --*

      The job-run ID of the predecessor job run.
    """


_ClientBatchGetWorkflowsResponseWorkflowsGraphNodesJobDetailsJobRunsTypeDef = TypedDict(
    "_ClientBatchGetWorkflowsResponseWorkflowsGraphNodesJobDetailsJobRunsTypeDef",
    {
        "Id": str,
        "Attempt": int,
        "PreviousRunId": str,
        "TriggerName": str,
        "JobName": str,
        "StartedOn": datetime,
        "LastModifiedOn": datetime,
        "CompletedOn": datetime,
        "JobRunState": str,
        "Arguments": Dict[str, str],
        "ErrorMessage": str,
        "PredecessorRuns": List[
            ClientBatchGetWorkflowsResponseWorkflowsGraphNodesJobDetailsJobRunsPredecessorRunsTypeDef
        ],
        "AllocatedCapacity": int,
        "ExecutionTime": int,
        "Timeout": int,
        "MaxCapacity": float,
        "WorkerType": str,
        "NumberOfWorkers": int,
        "SecurityConfiguration": str,
        "LogGroupName": str,
        "NotificationProperty": ClientBatchGetWorkflowsResponseWorkflowsGraphNodesJobDetailsJobRunsNotificationPropertyTypeDef,
        "GlueVersion": str,
    },
    total=False,
)


class ClientBatchGetWorkflowsResponseWorkflowsGraphNodesJobDetailsJobRunsTypeDef(
    _ClientBatchGetWorkflowsResponseWorkflowsGraphNodesJobDetailsJobRunsTypeDef
):
    """
    Type definition for `ClientBatchGetWorkflowsResponseWorkflowsGraphNodesJobDetails` `JobRuns`

    Contains information about a job run.

    - **Id** *(string) --*

      The ID of this job run.

    - **Attempt** *(integer) --*

      The number of the attempt to run this job.

    - **PreviousRunId** *(string) --*

      The ID of the previous run of this job. For example, the ``JobRunId``
      specified in the ``StartJobRun`` action.

    - **TriggerName** *(string) --*

      The name of the trigger that started this job run.

    - **JobName** *(string) --*

      The name of the job definition being used in this run.

    - **StartedOn** *(datetime) --*

      The date and time at which this job run was started.

    - **LastModifiedOn** *(datetime) --*

      The last time that this job run was modified.

    - **CompletedOn** *(datetime) --*

      The date and time that this job run completed.

    - **JobRunState** *(string) --*

      The current state of the job run.

    - **Arguments** *(dict) --*

      The job arguments associated with this run. For this job run, they replace
      the default arguments set in the job definition itself.

      You can specify arguments here that your own job-execution script consumes,
      as well as arguments that AWS Glue itself consumes.

      For information about how to specify and consume your own job arguments, see
      the `Calling AWS Glue APIs in Python
      <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
      topic in the developer guide.

      For information about the key-value pairs that AWS Glue consumes to set up
      your job, see the `Special Parameters Used by AWS Glue
      <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
      topic in the developer guide.

      - *(string) --*

        - *(string) --*

    - **ErrorMessage** *(string) --*

      An error message associated with this job run.

    - **PredecessorRuns** *(list) --*

      A list of predecessors to this job run.

      - *(dict) --*

        A job run that was used in the predicate of a conditional trigger that
        triggered this job run.

        - **JobName** *(string) --*

          The name of the job definition used by the predecessor job run.

        - **RunId** *(string) --*

          The job-run ID of the predecessor job run.

    - **AllocatedCapacity** *(integer) --*

      This field is deprecated. Use ``MaxCapacity`` instead.

      The number of AWS Glue data processing units (DPUs) allocated to this JobRun.
      From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a relative
      measure of processing power that consists of 4 vCPUs of compute capacity and
      16 GB of memory. For more information, see the `AWS Glue pricing page
      <https://aws.amazon.com/glue/pricing/>`__ .

    - **ExecutionTime** *(integer) --*

      The amount of time (in seconds) that the job run consumed resources.

    - **Timeout** *(integer) --*

      The ``JobRun`` timeout in minutes. This is the maximum time that a job run
      can consume resources before it is terminated and enters ``TIMEOUT`` status.
      The default is 2,880 minutes (48 hours). This overrides the timeout value set
      in the parent job.

    - **MaxCapacity** *(float) --*

      The number of AWS Glue data processing units (DPUs) that can be allocated
      when this job runs. A DPU is a relative measure of processing power that
      consists of 4 vCPUs of compute capacity and 16 GB of memory. For more
      information, see the `AWS Glue pricing page
      <https://docs.aws.amazon.com/https:/aws.amazon.com/glue/pricing/>`__ .

      Do not set ``Max Capacity`` if using ``WorkerType`` and ``NumberOfWorkers`` .

      The value that can be allocated for ``MaxCapacity`` depends on whether you
      are running a Python shell job or an Apache Spark ETL job:

      * When you specify a Python shell job (``JobCommand.Name`` ="pythonshell"),
      you can allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.

      * When you specify an Apache Spark ETL job (``JobCommand.Name`` ="glueetl"),
      you can allocate from 2 to 100 DPUs. The default is 10 DPUs. This job type
      cannot have a fractional DPU allocation.

    - **WorkerType** *(string) --*

      The type of predefined worker that is allocated when a job runs. Accepts a
      value of Standard, G.1X, or G.2X.

      * For the ``Standard`` worker type, each worker provides 4 vCPU, 16 GB of
      memory and a 50GB disk, and 2 executors per worker.

      * For the ``G.1X`` worker type, each worker provides 4 vCPU, 16 GB of memory
      and a 64GB disk, and 1 executor per worker.

      * For the ``G.2X`` worker type, each worker provides 8 vCPU, 32 GB of memory
      and a 128GB disk, and 1 executor per worker.

    - **NumberOfWorkers** *(integer) --*

      The number of workers of a defined ``workerType`` that are allocated when a
      job runs.

      The maximum number of workers you can define are 299 for ``G.1X`` , and 149
      for ``G.2X`` .

    - **SecurityConfiguration** *(string) --*

      The name of the ``SecurityConfiguration`` structure to be used with this job
      run.

    - **LogGroupName** *(string) --*

      The name of the log group for secure logging that can be server-side
      encrypted in Amazon CloudWatch using AWS KMS. This name can be
      ``/aws-glue/jobs/`` , in which case the default encryption is ``NONE`` . If
      you add a role name and ``SecurityConfiguration`` name (in other words,
      ``/aws-glue/jobs-yourRoleName-yourSecurityConfigurationName/`` ), then that
      security configuration is used to encrypt the log group.

    - **NotificationProperty** *(dict) --*

      Specifies configuration properties of a job run notification.

      - **NotifyDelayAfter** *(integer) --*

        After a job run starts, the number of minutes to wait before sending a job
        run delay notification.

    - **GlueVersion** *(string) --*

      Glue version determines the versions of Apache Spark and Python that AWS Glue
      supports. The Python version indicates the version supported for jobs of type
      Spark.

      For more information about the available AWS Glue versions and corresponding
      Spark and Python versions, see `Glue version
      <https://docs.aws.amazon.com/glue/latest/dg/add-job.html>`__ in the developer
      guide.

      Jobs that are created without specifying a Glue version default to Glue 0.9.
    """


_ClientBatchGetWorkflowsResponseWorkflowsGraphNodesJobDetailsTypeDef = TypedDict(
    "_ClientBatchGetWorkflowsResponseWorkflowsGraphNodesJobDetailsTypeDef",
    {
        "JobRuns": List[
            ClientBatchGetWorkflowsResponseWorkflowsGraphNodesJobDetailsJobRunsTypeDef
        ]
    },
    total=False,
)


class ClientBatchGetWorkflowsResponseWorkflowsGraphNodesJobDetailsTypeDef(
    _ClientBatchGetWorkflowsResponseWorkflowsGraphNodesJobDetailsTypeDef
):
    """
    Type definition for `ClientBatchGetWorkflowsResponseWorkflowsGraphNodes` `JobDetails`

    Details of the Job when the node represents a Job.

    - **JobRuns** *(list) --*

      The information for the job runs represented by the job node.

      - *(dict) --*

        Contains information about a job run.

        - **Id** *(string) --*

          The ID of this job run.

        - **Attempt** *(integer) --*

          The number of the attempt to run this job.

        - **PreviousRunId** *(string) --*

          The ID of the previous run of this job. For example, the ``JobRunId``
          specified in the ``StartJobRun`` action.

        - **TriggerName** *(string) --*

          The name of the trigger that started this job run.

        - **JobName** *(string) --*

          The name of the job definition being used in this run.

        - **StartedOn** *(datetime) --*

          The date and time at which this job run was started.

        - **LastModifiedOn** *(datetime) --*

          The last time that this job run was modified.

        - **CompletedOn** *(datetime) --*

          The date and time that this job run completed.

        - **JobRunState** *(string) --*

          The current state of the job run.

        - **Arguments** *(dict) --*

          The job arguments associated with this run. For this job run, they replace
          the default arguments set in the job definition itself.

          You can specify arguments here that your own job-execution script consumes,
          as well as arguments that AWS Glue itself consumes.

          For information about how to specify and consume your own job arguments, see
          the `Calling AWS Glue APIs in Python
          <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
          topic in the developer guide.

          For information about the key-value pairs that AWS Glue consumes to set up
          your job, see the `Special Parameters Used by AWS Glue
          <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
          topic in the developer guide.

          - *(string) --*

            - *(string) --*

        - **ErrorMessage** *(string) --*

          An error message associated with this job run.

        - **PredecessorRuns** *(list) --*

          A list of predecessors to this job run.

          - *(dict) --*

            A job run that was used in the predicate of a conditional trigger that
            triggered this job run.

            - **JobName** *(string) --*

              The name of the job definition used by the predecessor job run.

            - **RunId** *(string) --*

              The job-run ID of the predecessor job run.

        - **AllocatedCapacity** *(integer) --*

          This field is deprecated. Use ``MaxCapacity`` instead.

          The number of AWS Glue data processing units (DPUs) allocated to this JobRun.
          From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a relative
          measure of processing power that consists of 4 vCPUs of compute capacity and
          16 GB of memory. For more information, see the `AWS Glue pricing page
          <https://aws.amazon.com/glue/pricing/>`__ .

        - **ExecutionTime** *(integer) --*

          The amount of time (in seconds) that the job run consumed resources.

        - **Timeout** *(integer) --*

          The ``JobRun`` timeout in minutes. This is the maximum time that a job run
          can consume resources before it is terminated and enters ``TIMEOUT`` status.
          The default is 2,880 minutes (48 hours). This overrides the timeout value set
          in the parent job.

        - **MaxCapacity** *(float) --*

          The number of AWS Glue data processing units (DPUs) that can be allocated
          when this job runs. A DPU is a relative measure of processing power that
          consists of 4 vCPUs of compute capacity and 16 GB of memory. For more
          information, see the `AWS Glue pricing page
          <https://docs.aws.amazon.com/https:/aws.amazon.com/glue/pricing/>`__ .

          Do not set ``Max Capacity`` if using ``WorkerType`` and ``NumberOfWorkers`` .

          The value that can be allocated for ``MaxCapacity`` depends on whether you
          are running a Python shell job or an Apache Spark ETL job:

          * When you specify a Python shell job (``JobCommand.Name`` ="pythonshell"),
          you can allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.

          * When you specify an Apache Spark ETL job (``JobCommand.Name`` ="glueetl"),
          you can allocate from 2 to 100 DPUs. The default is 10 DPUs. This job type
          cannot have a fractional DPU allocation.

        - **WorkerType** *(string) --*

          The type of predefined worker that is allocated when a job runs. Accepts a
          value of Standard, G.1X, or G.2X.

          * For the ``Standard`` worker type, each worker provides 4 vCPU, 16 GB of
          memory and a 50GB disk, and 2 executors per worker.

          * For the ``G.1X`` worker type, each worker provides 4 vCPU, 16 GB of memory
          and a 64GB disk, and 1 executor per worker.

          * For the ``G.2X`` worker type, each worker provides 8 vCPU, 32 GB of memory
          and a 128GB disk, and 1 executor per worker.

        - **NumberOfWorkers** *(integer) --*

          The number of workers of a defined ``workerType`` that are allocated when a
          job runs.

          The maximum number of workers you can define are 299 for ``G.1X`` , and 149
          for ``G.2X`` .

        - **SecurityConfiguration** *(string) --*

          The name of the ``SecurityConfiguration`` structure to be used with this job
          run.

        - **LogGroupName** *(string) --*

          The name of the log group for secure logging that can be server-side
          encrypted in Amazon CloudWatch using AWS KMS. This name can be
          ``/aws-glue/jobs/`` , in which case the default encryption is ``NONE`` . If
          you add a role name and ``SecurityConfiguration`` name (in other words,
          ``/aws-glue/jobs-yourRoleName-yourSecurityConfigurationName/`` ), then that
          security configuration is used to encrypt the log group.

        - **NotificationProperty** *(dict) --*

          Specifies configuration properties of a job run notification.

          - **NotifyDelayAfter** *(integer) --*

            After a job run starts, the number of minutes to wait before sending a job
            run delay notification.

        - **GlueVersion** *(string) --*

          Glue version determines the versions of Apache Spark and Python that AWS Glue
          supports. The Python version indicates the version supported for jobs of type
          Spark.

          For more information about the available AWS Glue versions and corresponding
          Spark and Python versions, see `Glue version
          <https://docs.aws.amazon.com/glue/latest/dg/add-job.html>`__ in the developer
          guide.

          Jobs that are created without specifying a Glue version default to Glue 0.9.
    """


_ClientBatchGetWorkflowsResponseWorkflowsGraphNodesTriggerDetailsTriggerActionsNotificationPropertyTypeDef = TypedDict(
    "_ClientBatchGetWorkflowsResponseWorkflowsGraphNodesTriggerDetailsTriggerActionsNotificationPropertyTypeDef",
    {"NotifyDelayAfter": int},
    total=False,
)


class ClientBatchGetWorkflowsResponseWorkflowsGraphNodesTriggerDetailsTriggerActionsNotificationPropertyTypeDef(
    _ClientBatchGetWorkflowsResponseWorkflowsGraphNodesTriggerDetailsTriggerActionsNotificationPropertyTypeDef
):
    """
    Type definition for `ClientBatchGetWorkflowsResponseWorkflowsGraphNodesTriggerDetailsTriggerActions` `NotificationProperty`

    Specifies configuration properties of a job run notification.

    - **NotifyDelayAfter** *(integer) --*

      After a job run starts, the number of minutes to wait before sending a
      job run delay notification.
    """


_ClientBatchGetWorkflowsResponseWorkflowsGraphNodesTriggerDetailsTriggerActionsTypeDef = TypedDict(
    "_ClientBatchGetWorkflowsResponseWorkflowsGraphNodesTriggerDetailsTriggerActionsTypeDef",
    {
        "JobName": str,
        "Arguments": Dict[str, str],
        "Timeout": int,
        "SecurityConfiguration": str,
        "NotificationProperty": ClientBatchGetWorkflowsResponseWorkflowsGraphNodesTriggerDetailsTriggerActionsNotificationPropertyTypeDef,
        "CrawlerName": str,
    },
    total=False,
)


class ClientBatchGetWorkflowsResponseWorkflowsGraphNodesTriggerDetailsTriggerActionsTypeDef(
    _ClientBatchGetWorkflowsResponseWorkflowsGraphNodesTriggerDetailsTriggerActionsTypeDef
):
    """
    Type definition for `ClientBatchGetWorkflowsResponseWorkflowsGraphNodesTriggerDetailsTrigger` `Actions`

    Defines an action to be initiated by a trigger.

    - **JobName** *(string) --*

      The name of a job to be executed.

    - **Arguments** *(dict) --*

      The job arguments used when this trigger fires. For this job run, they
      replace the default arguments set in the job definition itself.

      You can specify arguments here that your own job-execution script consumes,
      as well as arguments that AWS Glue itself consumes.

      For information about how to specify and consume your own Job arguments,
      see the `Calling AWS Glue APIs in Python
      <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
      topic in the developer guide.

      For information about the key-value pairs that AWS Glue consumes to set up
      your job, see the `Special Parameters Used by AWS Glue
      <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
      topic in the developer guide.

      - *(string) --*

        - *(string) --*

    - **Timeout** *(integer) --*

      The ``JobRun`` timeout in minutes. This is the maximum time that a job run
      can consume resources before it is terminated and enters ``TIMEOUT``
      status. The default is 2,880 minutes (48 hours). This overrides the timeout
      value set in the parent job.

    - **SecurityConfiguration** *(string) --*

      The name of the ``SecurityConfiguration`` structure to be used with this
      action.

    - **NotificationProperty** *(dict) --*

      Specifies configuration properties of a job run notification.

      - **NotifyDelayAfter** *(integer) --*

        After a job run starts, the number of minutes to wait before sending a
        job run delay notification.

    - **CrawlerName** *(string) --*

      The name of the crawler to be used with this action.
    """


_ClientBatchGetWorkflowsResponseWorkflowsGraphNodesTriggerDetailsTriggerPredicateConditionsTypeDef = TypedDict(
    "_ClientBatchGetWorkflowsResponseWorkflowsGraphNodesTriggerDetailsTriggerPredicateConditionsTypeDef",
    {
        "LogicalOperator": str,
        "JobName": str,
        "State": str,
        "CrawlerName": str,
        "CrawlState": str,
    },
    total=False,
)


class ClientBatchGetWorkflowsResponseWorkflowsGraphNodesTriggerDetailsTriggerPredicateConditionsTypeDef(
    _ClientBatchGetWorkflowsResponseWorkflowsGraphNodesTriggerDetailsTriggerPredicateConditionsTypeDef
):
    """
    Type definition for `ClientBatchGetWorkflowsResponseWorkflowsGraphNodesTriggerDetailsTriggerPredicate` `Conditions`

    Defines a condition under which a trigger fires.

    - **LogicalOperator** *(string) --*

      A logical operator.

    - **JobName** *(string) --*

      The name of the job whose ``JobRuns`` this condition applies to, and on
      which this trigger waits.

    - **State** *(string) --*

      The condition state. Currently, the values supported are ``SUCCEEDED`` ,
      ``STOPPED`` , ``TIMEOUT`` , and ``FAILED`` .

    - **CrawlerName** *(string) --*

      The name of the crawler to which this condition applies.

    - **CrawlState** *(string) --*

      The state of the crawler to which this condition applies.
    """


_ClientBatchGetWorkflowsResponseWorkflowsGraphNodesTriggerDetailsTriggerPredicateTypeDef = TypedDict(
    "_ClientBatchGetWorkflowsResponseWorkflowsGraphNodesTriggerDetailsTriggerPredicateTypeDef",
    {
        "Logical": str,
        "Conditions": List[
            ClientBatchGetWorkflowsResponseWorkflowsGraphNodesTriggerDetailsTriggerPredicateConditionsTypeDef
        ],
    },
    total=False,
)


class ClientBatchGetWorkflowsResponseWorkflowsGraphNodesTriggerDetailsTriggerPredicateTypeDef(
    _ClientBatchGetWorkflowsResponseWorkflowsGraphNodesTriggerDetailsTriggerPredicateTypeDef
):
    """
    Type definition for `ClientBatchGetWorkflowsResponseWorkflowsGraphNodesTriggerDetailsTrigger` `Predicate`

    The predicate of this trigger, which defines when it will fire.

    - **Logical** *(string) --*

      An optional field if only one condition is listed. If multiple conditions are
      listed, then this field is required.

    - **Conditions** *(list) --*

      A list of the conditions that determine when the trigger will fire.

      - *(dict) --*

        Defines a condition under which a trigger fires.

        - **LogicalOperator** *(string) --*

          A logical operator.

        - **JobName** *(string) --*

          The name of the job whose ``JobRuns`` this condition applies to, and on
          which this trigger waits.

        - **State** *(string) --*

          The condition state. Currently, the values supported are ``SUCCEEDED`` ,
          ``STOPPED`` , ``TIMEOUT`` , and ``FAILED`` .

        - **CrawlerName** *(string) --*

          The name of the crawler to which this condition applies.

        - **CrawlState** *(string) --*

          The state of the crawler to which this condition applies.
    """


_ClientBatchGetWorkflowsResponseWorkflowsGraphNodesTriggerDetailsTriggerTypeDef = TypedDict(
    "_ClientBatchGetWorkflowsResponseWorkflowsGraphNodesTriggerDetailsTriggerTypeDef",
    {
        "Name": str,
        "WorkflowName": str,
        "Id": str,
        "Type": str,
        "State": str,
        "Description": str,
        "Schedule": str,
        "Actions": List[
            ClientBatchGetWorkflowsResponseWorkflowsGraphNodesTriggerDetailsTriggerActionsTypeDef
        ],
        "Predicate": ClientBatchGetWorkflowsResponseWorkflowsGraphNodesTriggerDetailsTriggerPredicateTypeDef,
    },
    total=False,
)


class ClientBatchGetWorkflowsResponseWorkflowsGraphNodesTriggerDetailsTriggerTypeDef(
    _ClientBatchGetWorkflowsResponseWorkflowsGraphNodesTriggerDetailsTriggerTypeDef
):
    """
    Type definition for `ClientBatchGetWorkflowsResponseWorkflowsGraphNodesTriggerDetails` `Trigger`

    The information of the trigger represented by the trigger node.

    - **Name** *(string) --*

      The name of the trigger.

    - **WorkflowName** *(string) --*

      The name of the workflow associated with the trigger.

    - **Id** *(string) --*

      Reserved for future use.

    - **Type** *(string) --*

      The type of trigger that this is.

    - **State** *(string) --*

      The current state of the trigger.

    - **Description** *(string) --*

      A description of this trigger.

    - **Schedule** *(string) --*

      A ``cron`` expression used to specify the schedule (see `Time-Based Schedules
      for Jobs and Crawlers
      <https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html>`__
      . For example, to run something every day at 12:15 UTC, you would specify:
      ``cron(15 12 * * ? *)`` .

    - **Actions** *(list) --*

      The actions initiated by this trigger.

      - *(dict) --*

        Defines an action to be initiated by a trigger.

        - **JobName** *(string) --*

          The name of a job to be executed.

        - **Arguments** *(dict) --*

          The job arguments used when this trigger fires. For this job run, they
          replace the default arguments set in the job definition itself.

          You can specify arguments here that your own job-execution script consumes,
          as well as arguments that AWS Glue itself consumes.

          For information about how to specify and consume your own Job arguments,
          see the `Calling AWS Glue APIs in Python
          <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
          topic in the developer guide.

          For information about the key-value pairs that AWS Glue consumes to set up
          your job, see the `Special Parameters Used by AWS Glue
          <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
          topic in the developer guide.

          - *(string) --*

            - *(string) --*

        - **Timeout** *(integer) --*

          The ``JobRun`` timeout in minutes. This is the maximum time that a job run
          can consume resources before it is terminated and enters ``TIMEOUT``
          status. The default is 2,880 minutes (48 hours). This overrides the timeout
          value set in the parent job.

        - **SecurityConfiguration** *(string) --*

          The name of the ``SecurityConfiguration`` structure to be used with this
          action.

        - **NotificationProperty** *(dict) --*

          Specifies configuration properties of a job run notification.

          - **NotifyDelayAfter** *(integer) --*

            After a job run starts, the number of minutes to wait before sending a
            job run delay notification.

        - **CrawlerName** *(string) --*

          The name of the crawler to be used with this action.

    - **Predicate** *(dict) --*

      The predicate of this trigger, which defines when it will fire.

      - **Logical** *(string) --*

        An optional field if only one condition is listed. If multiple conditions are
        listed, then this field is required.

      - **Conditions** *(list) --*

        A list of the conditions that determine when the trigger will fire.

        - *(dict) --*

          Defines a condition under which a trigger fires.

          - **LogicalOperator** *(string) --*

            A logical operator.

          - **JobName** *(string) --*

            The name of the job whose ``JobRuns`` this condition applies to, and on
            which this trigger waits.

          - **State** *(string) --*

            The condition state. Currently, the values supported are ``SUCCEEDED`` ,
            ``STOPPED`` , ``TIMEOUT`` , and ``FAILED`` .

          - **CrawlerName** *(string) --*

            The name of the crawler to which this condition applies.

          - **CrawlState** *(string) --*

            The state of the crawler to which this condition applies.
    """


_ClientBatchGetWorkflowsResponseWorkflowsGraphNodesTriggerDetailsTypeDef = TypedDict(
    "_ClientBatchGetWorkflowsResponseWorkflowsGraphNodesTriggerDetailsTypeDef",
    {
        "Trigger": ClientBatchGetWorkflowsResponseWorkflowsGraphNodesTriggerDetailsTriggerTypeDef
    },
    total=False,
)


class ClientBatchGetWorkflowsResponseWorkflowsGraphNodesTriggerDetailsTypeDef(
    _ClientBatchGetWorkflowsResponseWorkflowsGraphNodesTriggerDetailsTypeDef
):
    """
    Type definition for `ClientBatchGetWorkflowsResponseWorkflowsGraphNodes` `TriggerDetails`

    Details of the Trigger when the node represents a Trigger.

    - **Trigger** *(dict) --*

      The information of the trigger represented by the trigger node.

      - **Name** *(string) --*

        The name of the trigger.

      - **WorkflowName** *(string) --*

        The name of the workflow associated with the trigger.

      - **Id** *(string) --*

        Reserved for future use.

      - **Type** *(string) --*

        The type of trigger that this is.

      - **State** *(string) --*

        The current state of the trigger.

      - **Description** *(string) --*

        A description of this trigger.

      - **Schedule** *(string) --*

        A ``cron`` expression used to specify the schedule (see `Time-Based Schedules
        for Jobs and Crawlers
        <https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html>`__
        . For example, to run something every day at 12:15 UTC, you would specify:
        ``cron(15 12 * * ? *)`` .

      - **Actions** *(list) --*

        The actions initiated by this trigger.

        - *(dict) --*

          Defines an action to be initiated by a trigger.

          - **JobName** *(string) --*

            The name of a job to be executed.

          - **Arguments** *(dict) --*

            The job arguments used when this trigger fires. For this job run, they
            replace the default arguments set in the job definition itself.

            You can specify arguments here that your own job-execution script consumes,
            as well as arguments that AWS Glue itself consumes.

            For information about how to specify and consume your own Job arguments,
            see the `Calling AWS Glue APIs in Python
            <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
            topic in the developer guide.

            For information about the key-value pairs that AWS Glue consumes to set up
            your job, see the `Special Parameters Used by AWS Glue
            <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
            topic in the developer guide.

            - *(string) --*

              - *(string) --*

          - **Timeout** *(integer) --*

            The ``JobRun`` timeout in minutes. This is the maximum time that a job run
            can consume resources before it is terminated and enters ``TIMEOUT``
            status. The default is 2,880 minutes (48 hours). This overrides the timeout
            value set in the parent job.

          - **SecurityConfiguration** *(string) --*

            The name of the ``SecurityConfiguration`` structure to be used with this
            action.

          - **NotificationProperty** *(dict) --*

            Specifies configuration properties of a job run notification.

            - **NotifyDelayAfter** *(integer) --*

              After a job run starts, the number of minutes to wait before sending a
              job run delay notification.

          - **CrawlerName** *(string) --*

            The name of the crawler to be used with this action.

      - **Predicate** *(dict) --*

        The predicate of this trigger, which defines when it will fire.

        - **Logical** *(string) --*

          An optional field if only one condition is listed. If multiple conditions are
          listed, then this field is required.

        - **Conditions** *(list) --*

          A list of the conditions that determine when the trigger will fire.

          - *(dict) --*

            Defines a condition under which a trigger fires.

            - **LogicalOperator** *(string) --*

              A logical operator.

            - **JobName** *(string) --*

              The name of the job whose ``JobRuns`` this condition applies to, and on
              which this trigger waits.

            - **State** *(string) --*

              The condition state. Currently, the values supported are ``SUCCEEDED`` ,
              ``STOPPED`` , ``TIMEOUT`` , and ``FAILED`` .

            - **CrawlerName** *(string) --*

              The name of the crawler to which this condition applies.

            - **CrawlState** *(string) --*

              The state of the crawler to which this condition applies.
    """


_ClientBatchGetWorkflowsResponseWorkflowsGraphNodesTypeDef = TypedDict(
    "_ClientBatchGetWorkflowsResponseWorkflowsGraphNodesTypeDef",
    {
        "Type": str,
        "Name": str,
        "UniqueId": str,
        "TriggerDetails": ClientBatchGetWorkflowsResponseWorkflowsGraphNodesTriggerDetailsTypeDef,
        "JobDetails": ClientBatchGetWorkflowsResponseWorkflowsGraphNodesJobDetailsTypeDef,
        "CrawlerDetails": ClientBatchGetWorkflowsResponseWorkflowsGraphNodesCrawlerDetailsTypeDef,
    },
    total=False,
)


class ClientBatchGetWorkflowsResponseWorkflowsGraphNodesTypeDef(
    _ClientBatchGetWorkflowsResponseWorkflowsGraphNodesTypeDef
):
    """
    Type definition for `ClientBatchGetWorkflowsResponseWorkflowsGraph` `Nodes`

    A node represents an AWS Glue component like Trigger, Job etc. which is part of a
    workflow.

    - **Type** *(string) --*

      The type of AWS Glue component represented by the node.

    - **Name** *(string) --*

      The name of the AWS Glue component represented by the node.

    - **UniqueId** *(string) --*

      The unique Id assigned to the node within the workflow.

    - **TriggerDetails** *(dict) --*

      Details of the Trigger when the node represents a Trigger.

      - **Trigger** *(dict) --*

        The information of the trigger represented by the trigger node.

        - **Name** *(string) --*

          The name of the trigger.

        - **WorkflowName** *(string) --*

          The name of the workflow associated with the trigger.

        - **Id** *(string) --*

          Reserved for future use.

        - **Type** *(string) --*

          The type of trigger that this is.

        - **State** *(string) --*

          The current state of the trigger.

        - **Description** *(string) --*

          A description of this trigger.

        - **Schedule** *(string) --*

          A ``cron`` expression used to specify the schedule (see `Time-Based Schedules
          for Jobs and Crawlers
          <https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html>`__
          . For example, to run something every day at 12:15 UTC, you would specify:
          ``cron(15 12 * * ? *)`` .

        - **Actions** *(list) --*

          The actions initiated by this trigger.

          - *(dict) --*

            Defines an action to be initiated by a trigger.

            - **JobName** *(string) --*

              The name of a job to be executed.

            - **Arguments** *(dict) --*

              The job arguments used when this trigger fires. For this job run, they
              replace the default arguments set in the job definition itself.

              You can specify arguments here that your own job-execution script consumes,
              as well as arguments that AWS Glue itself consumes.

              For information about how to specify and consume your own Job arguments,
              see the `Calling AWS Glue APIs in Python
              <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
              topic in the developer guide.

              For information about the key-value pairs that AWS Glue consumes to set up
              your job, see the `Special Parameters Used by AWS Glue
              <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
              topic in the developer guide.

              - *(string) --*

                - *(string) --*

            - **Timeout** *(integer) --*

              The ``JobRun`` timeout in minutes. This is the maximum time that a job run
              can consume resources before it is terminated and enters ``TIMEOUT``
              status. The default is 2,880 minutes (48 hours). This overrides the timeout
              value set in the parent job.

            - **SecurityConfiguration** *(string) --*

              The name of the ``SecurityConfiguration`` structure to be used with this
              action.

            - **NotificationProperty** *(dict) --*

              Specifies configuration properties of a job run notification.

              - **NotifyDelayAfter** *(integer) --*

                After a job run starts, the number of minutes to wait before sending a
                job run delay notification.

            - **CrawlerName** *(string) --*

              The name of the crawler to be used with this action.

        - **Predicate** *(dict) --*

          The predicate of this trigger, which defines when it will fire.

          - **Logical** *(string) --*

            An optional field if only one condition is listed. If multiple conditions are
            listed, then this field is required.

          - **Conditions** *(list) --*

            A list of the conditions that determine when the trigger will fire.

            - *(dict) --*

              Defines a condition under which a trigger fires.

              - **LogicalOperator** *(string) --*

                A logical operator.

              - **JobName** *(string) --*

                The name of the job whose ``JobRuns`` this condition applies to, and on
                which this trigger waits.

              - **State** *(string) --*

                The condition state. Currently, the values supported are ``SUCCEEDED`` ,
                ``STOPPED`` , ``TIMEOUT`` , and ``FAILED`` .

              - **CrawlerName** *(string) --*

                The name of the crawler to which this condition applies.

              - **CrawlState** *(string) --*

                The state of the crawler to which this condition applies.

    - **JobDetails** *(dict) --*

      Details of the Job when the node represents a Job.

      - **JobRuns** *(list) --*

        The information for the job runs represented by the job node.

        - *(dict) --*

          Contains information about a job run.

          - **Id** *(string) --*

            The ID of this job run.

          - **Attempt** *(integer) --*

            The number of the attempt to run this job.

          - **PreviousRunId** *(string) --*

            The ID of the previous run of this job. For example, the ``JobRunId``
            specified in the ``StartJobRun`` action.

          - **TriggerName** *(string) --*

            The name of the trigger that started this job run.

          - **JobName** *(string) --*

            The name of the job definition being used in this run.

          - **StartedOn** *(datetime) --*

            The date and time at which this job run was started.

          - **LastModifiedOn** *(datetime) --*

            The last time that this job run was modified.

          - **CompletedOn** *(datetime) --*

            The date and time that this job run completed.

          - **JobRunState** *(string) --*

            The current state of the job run.

          - **Arguments** *(dict) --*

            The job arguments associated with this run. For this job run, they replace
            the default arguments set in the job definition itself.

            You can specify arguments here that your own job-execution script consumes,
            as well as arguments that AWS Glue itself consumes.

            For information about how to specify and consume your own job arguments, see
            the `Calling AWS Glue APIs in Python
            <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
            topic in the developer guide.

            For information about the key-value pairs that AWS Glue consumes to set up
            your job, see the `Special Parameters Used by AWS Glue
            <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
            topic in the developer guide.

            - *(string) --*

              - *(string) --*

          - **ErrorMessage** *(string) --*

            An error message associated with this job run.

          - **PredecessorRuns** *(list) --*

            A list of predecessors to this job run.

            - *(dict) --*

              A job run that was used in the predicate of a conditional trigger that
              triggered this job run.

              - **JobName** *(string) --*

                The name of the job definition used by the predecessor job run.

              - **RunId** *(string) --*

                The job-run ID of the predecessor job run.

          - **AllocatedCapacity** *(integer) --*

            This field is deprecated. Use ``MaxCapacity`` instead.

            The number of AWS Glue data processing units (DPUs) allocated to this JobRun.
            From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a relative
            measure of processing power that consists of 4 vCPUs of compute capacity and
            16 GB of memory. For more information, see the `AWS Glue pricing page
            <https://aws.amazon.com/glue/pricing/>`__ .

          - **ExecutionTime** *(integer) --*

            The amount of time (in seconds) that the job run consumed resources.

          - **Timeout** *(integer) --*

            The ``JobRun`` timeout in minutes. This is the maximum time that a job run
            can consume resources before it is terminated and enters ``TIMEOUT`` status.
            The default is 2,880 minutes (48 hours). This overrides the timeout value set
            in the parent job.

          - **MaxCapacity** *(float) --*

            The number of AWS Glue data processing units (DPUs) that can be allocated
            when this job runs. A DPU is a relative measure of processing power that
            consists of 4 vCPUs of compute capacity and 16 GB of memory. For more
            information, see the `AWS Glue pricing page
            <https://docs.aws.amazon.com/https:/aws.amazon.com/glue/pricing/>`__ .

            Do not set ``Max Capacity`` if using ``WorkerType`` and ``NumberOfWorkers`` .

            The value that can be allocated for ``MaxCapacity`` depends on whether you
            are running a Python shell job or an Apache Spark ETL job:

            * When you specify a Python shell job (``JobCommand.Name`` ="pythonshell"),
            you can allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.

            * When you specify an Apache Spark ETL job (``JobCommand.Name`` ="glueetl"),
            you can allocate from 2 to 100 DPUs. The default is 10 DPUs. This job type
            cannot have a fractional DPU allocation.

          - **WorkerType** *(string) --*

            The type of predefined worker that is allocated when a job runs. Accepts a
            value of Standard, G.1X, or G.2X.

            * For the ``Standard`` worker type, each worker provides 4 vCPU, 16 GB of
            memory and a 50GB disk, and 2 executors per worker.

            * For the ``G.1X`` worker type, each worker provides 4 vCPU, 16 GB of memory
            and a 64GB disk, and 1 executor per worker.

            * For the ``G.2X`` worker type, each worker provides 8 vCPU, 32 GB of memory
            and a 128GB disk, and 1 executor per worker.

          - **NumberOfWorkers** *(integer) --*

            The number of workers of a defined ``workerType`` that are allocated when a
            job runs.

            The maximum number of workers you can define are 299 for ``G.1X`` , and 149
            for ``G.2X`` .

          - **SecurityConfiguration** *(string) --*

            The name of the ``SecurityConfiguration`` structure to be used with this job
            run.

          - **LogGroupName** *(string) --*

            The name of the log group for secure logging that can be server-side
            encrypted in Amazon CloudWatch using AWS KMS. This name can be
            ``/aws-glue/jobs/`` , in which case the default encryption is ``NONE`` . If
            you add a role name and ``SecurityConfiguration`` name (in other words,
            ``/aws-glue/jobs-yourRoleName-yourSecurityConfigurationName/`` ), then that
            security configuration is used to encrypt the log group.

          - **NotificationProperty** *(dict) --*

            Specifies configuration properties of a job run notification.

            - **NotifyDelayAfter** *(integer) --*

              After a job run starts, the number of minutes to wait before sending a job
              run delay notification.

          - **GlueVersion** *(string) --*

            Glue version determines the versions of Apache Spark and Python that AWS Glue
            supports. The Python version indicates the version supported for jobs of type
            Spark.

            For more information about the available AWS Glue versions and corresponding
            Spark and Python versions, see `Glue version
            <https://docs.aws.amazon.com/glue/latest/dg/add-job.html>`__ in the developer
            guide.

            Jobs that are created without specifying a Glue version default to Glue 0.9.

    - **CrawlerDetails** *(dict) --*

      Details of the crawler when the node represents a crawler.

      - **Crawls** *(list) --*

        A list of crawls represented by the crawl node.

        - *(dict) --*

          The details of a crawl in the workflow.

          - **State** *(string) --*

            The state of the crawler.

          - **StartedOn** *(datetime) --*

            The date and time on which the crawl started.

          - **CompletedOn** *(datetime) --*

            The date and time on which the crawl completed.

          - **ErrorMessage** *(string) --*

            The error message associated with the crawl.

          - **LogGroup** *(string) --*

            The log group associated with the crawl.

          - **LogStream** *(string) --*

            The log stream associated with the crawl.
    """


_ClientBatchGetWorkflowsResponseWorkflowsGraphTypeDef = TypedDict(
    "_ClientBatchGetWorkflowsResponseWorkflowsGraphTypeDef",
    {
        "Nodes": List[ClientBatchGetWorkflowsResponseWorkflowsGraphNodesTypeDef],
        "Edges": List[ClientBatchGetWorkflowsResponseWorkflowsGraphEdgesTypeDef],
    },
    total=False,
)


class ClientBatchGetWorkflowsResponseWorkflowsGraphTypeDef(
    _ClientBatchGetWorkflowsResponseWorkflowsGraphTypeDef
):
    """
    Type definition for `ClientBatchGetWorkflowsResponseWorkflows` `Graph`

    The graph representing all the AWS Glue components that belong to the workflow as nodes
    and directed connections between them as edges.

    - **Nodes** *(list) --*

      A list of the the AWS Glue components belong to the workflow represented as nodes.

      - *(dict) --*

        A node represents an AWS Glue component like Trigger, Job etc. which is part of a
        workflow.

        - **Type** *(string) --*

          The type of AWS Glue component represented by the node.

        - **Name** *(string) --*

          The name of the AWS Glue component represented by the node.

        - **UniqueId** *(string) --*

          The unique Id assigned to the node within the workflow.

        - **TriggerDetails** *(dict) --*

          Details of the Trigger when the node represents a Trigger.

          - **Trigger** *(dict) --*

            The information of the trigger represented by the trigger node.

            - **Name** *(string) --*

              The name of the trigger.

            - **WorkflowName** *(string) --*

              The name of the workflow associated with the trigger.

            - **Id** *(string) --*

              Reserved for future use.

            - **Type** *(string) --*

              The type of trigger that this is.

            - **State** *(string) --*

              The current state of the trigger.

            - **Description** *(string) --*

              A description of this trigger.

            - **Schedule** *(string) --*

              A ``cron`` expression used to specify the schedule (see `Time-Based Schedules
              for Jobs and Crawlers
              <https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html>`__
              . For example, to run something every day at 12:15 UTC, you would specify:
              ``cron(15 12 * * ? *)`` .

            - **Actions** *(list) --*

              The actions initiated by this trigger.

              - *(dict) --*

                Defines an action to be initiated by a trigger.

                - **JobName** *(string) --*

                  The name of a job to be executed.

                - **Arguments** *(dict) --*

                  The job arguments used when this trigger fires. For this job run, they
                  replace the default arguments set in the job definition itself.

                  You can specify arguments here that your own job-execution script consumes,
                  as well as arguments that AWS Glue itself consumes.

                  For information about how to specify and consume your own Job arguments,
                  see the `Calling AWS Glue APIs in Python
                  <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
                  topic in the developer guide.

                  For information about the key-value pairs that AWS Glue consumes to set up
                  your job, see the `Special Parameters Used by AWS Glue
                  <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
                  topic in the developer guide.

                  - *(string) --*

                    - *(string) --*

                - **Timeout** *(integer) --*

                  The ``JobRun`` timeout in minutes. This is the maximum time that a job run
                  can consume resources before it is terminated and enters ``TIMEOUT``
                  status. The default is 2,880 minutes (48 hours). This overrides the timeout
                  value set in the parent job.

                - **SecurityConfiguration** *(string) --*

                  The name of the ``SecurityConfiguration`` structure to be used with this
                  action.

                - **NotificationProperty** *(dict) --*

                  Specifies configuration properties of a job run notification.

                  - **NotifyDelayAfter** *(integer) --*

                    After a job run starts, the number of minutes to wait before sending a
                    job run delay notification.

                - **CrawlerName** *(string) --*

                  The name of the crawler to be used with this action.

            - **Predicate** *(dict) --*

              The predicate of this trigger, which defines when it will fire.

              - **Logical** *(string) --*

                An optional field if only one condition is listed. If multiple conditions are
                listed, then this field is required.

              - **Conditions** *(list) --*

                A list of the conditions that determine when the trigger will fire.

                - *(dict) --*

                  Defines a condition under which a trigger fires.

                  - **LogicalOperator** *(string) --*

                    A logical operator.

                  - **JobName** *(string) --*

                    The name of the job whose ``JobRuns`` this condition applies to, and on
                    which this trigger waits.

                  - **State** *(string) --*

                    The condition state. Currently, the values supported are ``SUCCEEDED`` ,
                    ``STOPPED`` , ``TIMEOUT`` , and ``FAILED`` .

                  - **CrawlerName** *(string) --*

                    The name of the crawler to which this condition applies.

                  - **CrawlState** *(string) --*

                    The state of the crawler to which this condition applies.

        - **JobDetails** *(dict) --*

          Details of the Job when the node represents a Job.

          - **JobRuns** *(list) --*

            The information for the job runs represented by the job node.

            - *(dict) --*

              Contains information about a job run.

              - **Id** *(string) --*

                The ID of this job run.

              - **Attempt** *(integer) --*

                The number of the attempt to run this job.

              - **PreviousRunId** *(string) --*

                The ID of the previous run of this job. For example, the ``JobRunId``
                specified in the ``StartJobRun`` action.

              - **TriggerName** *(string) --*

                The name of the trigger that started this job run.

              - **JobName** *(string) --*

                The name of the job definition being used in this run.

              - **StartedOn** *(datetime) --*

                The date and time at which this job run was started.

              - **LastModifiedOn** *(datetime) --*

                The last time that this job run was modified.

              - **CompletedOn** *(datetime) --*

                The date and time that this job run completed.

              - **JobRunState** *(string) --*

                The current state of the job run.

              - **Arguments** *(dict) --*

                The job arguments associated with this run. For this job run, they replace
                the default arguments set in the job definition itself.

                You can specify arguments here that your own job-execution script consumes,
                as well as arguments that AWS Glue itself consumes.

                For information about how to specify and consume your own job arguments, see
                the `Calling AWS Glue APIs in Python
                <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
                topic in the developer guide.

                For information about the key-value pairs that AWS Glue consumes to set up
                your job, see the `Special Parameters Used by AWS Glue
                <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
                topic in the developer guide.

                - *(string) --*

                  - *(string) --*

              - **ErrorMessage** *(string) --*

                An error message associated with this job run.

              - **PredecessorRuns** *(list) --*

                A list of predecessors to this job run.

                - *(dict) --*

                  A job run that was used in the predicate of a conditional trigger that
                  triggered this job run.

                  - **JobName** *(string) --*

                    The name of the job definition used by the predecessor job run.

                  - **RunId** *(string) --*

                    The job-run ID of the predecessor job run.

              - **AllocatedCapacity** *(integer) --*

                This field is deprecated. Use ``MaxCapacity`` instead.

                The number of AWS Glue data processing units (DPUs) allocated to this JobRun.
                From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a relative
                measure of processing power that consists of 4 vCPUs of compute capacity and
                16 GB of memory. For more information, see the `AWS Glue pricing page
                <https://aws.amazon.com/glue/pricing/>`__ .

              - **ExecutionTime** *(integer) --*

                The amount of time (in seconds) that the job run consumed resources.

              - **Timeout** *(integer) --*

                The ``JobRun`` timeout in minutes. This is the maximum time that a job run
                can consume resources before it is terminated and enters ``TIMEOUT`` status.
                The default is 2,880 minutes (48 hours). This overrides the timeout value set
                in the parent job.

              - **MaxCapacity** *(float) --*

                The number of AWS Glue data processing units (DPUs) that can be allocated
                when this job runs. A DPU is a relative measure of processing power that
                consists of 4 vCPUs of compute capacity and 16 GB of memory. For more
                information, see the `AWS Glue pricing page
                <https://docs.aws.amazon.com/https:/aws.amazon.com/glue/pricing/>`__ .

                Do not set ``Max Capacity`` if using ``WorkerType`` and ``NumberOfWorkers`` .

                The value that can be allocated for ``MaxCapacity`` depends on whether you
                are running a Python shell job or an Apache Spark ETL job:

                * When you specify a Python shell job (``JobCommand.Name`` ="pythonshell"),
                you can allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.

                * When you specify an Apache Spark ETL job (``JobCommand.Name`` ="glueetl"),
                you can allocate from 2 to 100 DPUs. The default is 10 DPUs. This job type
                cannot have a fractional DPU allocation.

              - **WorkerType** *(string) --*

                The type of predefined worker that is allocated when a job runs. Accepts a
                value of Standard, G.1X, or G.2X.

                * For the ``Standard`` worker type, each worker provides 4 vCPU, 16 GB of
                memory and a 50GB disk, and 2 executors per worker.

                * For the ``G.1X`` worker type, each worker provides 4 vCPU, 16 GB of memory
                and a 64GB disk, and 1 executor per worker.

                * For the ``G.2X`` worker type, each worker provides 8 vCPU, 32 GB of memory
                and a 128GB disk, and 1 executor per worker.

              - **NumberOfWorkers** *(integer) --*

                The number of workers of a defined ``workerType`` that are allocated when a
                job runs.

                The maximum number of workers you can define are 299 for ``G.1X`` , and 149
                for ``G.2X`` .

              - **SecurityConfiguration** *(string) --*

                The name of the ``SecurityConfiguration`` structure to be used with this job
                run.

              - **LogGroupName** *(string) --*

                The name of the log group for secure logging that can be server-side
                encrypted in Amazon CloudWatch using AWS KMS. This name can be
                ``/aws-glue/jobs/`` , in which case the default encryption is ``NONE`` . If
                you add a role name and ``SecurityConfiguration`` name (in other words,
                ``/aws-glue/jobs-yourRoleName-yourSecurityConfigurationName/`` ), then that
                security configuration is used to encrypt the log group.

              - **NotificationProperty** *(dict) --*

                Specifies configuration properties of a job run notification.

                - **NotifyDelayAfter** *(integer) --*

                  After a job run starts, the number of minutes to wait before sending a job
                  run delay notification.

              - **GlueVersion** *(string) --*

                Glue version determines the versions of Apache Spark and Python that AWS Glue
                supports. The Python version indicates the version supported for jobs of type
                Spark.

                For more information about the available AWS Glue versions and corresponding
                Spark and Python versions, see `Glue version
                <https://docs.aws.amazon.com/glue/latest/dg/add-job.html>`__ in the developer
                guide.

                Jobs that are created without specifying a Glue version default to Glue 0.9.

        - **CrawlerDetails** *(dict) --*

          Details of the crawler when the node represents a crawler.

          - **Crawls** *(list) --*

            A list of crawls represented by the crawl node.

            - *(dict) --*

              The details of a crawl in the workflow.

              - **State** *(string) --*

                The state of the crawler.

              - **StartedOn** *(datetime) --*

                The date and time on which the crawl started.

              - **CompletedOn** *(datetime) --*

                The date and time on which the crawl completed.

              - **ErrorMessage** *(string) --*

                The error message associated with the crawl.

              - **LogGroup** *(string) --*

                The log group associated with the crawl.

              - **LogStream** *(string) --*

                The log stream associated with the crawl.

    - **Edges** *(list) --*

      A list of all the directed connections between the nodes belonging to the workflow.

      - *(dict) --*

        An edge represents a directed connection between two AWS Glue components which are
        part of the workflow the edge belongs to.

        - **SourceId** *(string) --*

          The unique of the node within the workflow where the edge starts.

        - **DestinationId** *(string) --*

          The unique of the node within the workflow where the edge ends.
    """


_ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphEdgesTypeDef = TypedDict(
    "_ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphEdgesTypeDef",
    {"SourceId": str, "DestinationId": str},
    total=False,
)


class ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphEdgesTypeDef(
    _ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphEdgesTypeDef
):
    """
    Type definition for `ClientBatchGetWorkflowsResponseWorkflowsLastRunGraph` `Edges`

    An edge represents a directed connection between two AWS Glue components which are
    part of the workflow the edge belongs to.

    - **SourceId** *(string) --*

      The unique of the node within the workflow where the edge starts.

    - **DestinationId** *(string) --*

      The unique of the node within the workflow where the edge ends.
    """


_ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesCrawlerDetailsCrawlsTypeDef = TypedDict(
    "_ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesCrawlerDetailsCrawlsTypeDef",
    {
        "State": str,
        "StartedOn": datetime,
        "CompletedOn": datetime,
        "ErrorMessage": str,
        "LogGroup": str,
        "LogStream": str,
    },
    total=False,
)


class ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesCrawlerDetailsCrawlsTypeDef(
    _ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesCrawlerDetailsCrawlsTypeDef
):
    """
    Type definition for `ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesCrawlerDetails` `Crawls`

    The details of a crawl in the workflow.

    - **State** *(string) --*

      The state of the crawler.

    - **StartedOn** *(datetime) --*

      The date and time on which the crawl started.

    - **CompletedOn** *(datetime) --*

      The date and time on which the crawl completed.

    - **ErrorMessage** *(string) --*

      The error message associated with the crawl.

    - **LogGroup** *(string) --*

      The log group associated with the crawl.

    - **LogStream** *(string) --*

      The log stream associated with the crawl.
    """


_ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesCrawlerDetailsTypeDef = TypedDict(
    "_ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesCrawlerDetailsTypeDef",
    {
        "Crawls": List[
            ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesCrawlerDetailsCrawlsTypeDef
        ]
    },
    total=False,
)


class ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesCrawlerDetailsTypeDef(
    _ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesCrawlerDetailsTypeDef
):
    """
    Type definition for `ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodes` `CrawlerDetails`

    Details of the crawler when the node represents a crawler.

    - **Crawls** *(list) --*

      A list of crawls represented by the crawl node.

      - *(dict) --*

        The details of a crawl in the workflow.

        - **State** *(string) --*

          The state of the crawler.

        - **StartedOn** *(datetime) --*

          The date and time on which the crawl started.

        - **CompletedOn** *(datetime) --*

          The date and time on which the crawl completed.

        - **ErrorMessage** *(string) --*

          The error message associated with the crawl.

        - **LogGroup** *(string) --*

          The log group associated with the crawl.

        - **LogStream** *(string) --*

          The log stream associated with the crawl.
    """


_ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesJobDetailsJobRunsNotificationPropertyTypeDef = TypedDict(
    "_ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesJobDetailsJobRunsNotificationPropertyTypeDef",
    {"NotifyDelayAfter": int},
    total=False,
)


class ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesJobDetailsJobRunsNotificationPropertyTypeDef(
    _ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesJobDetailsJobRunsNotificationPropertyTypeDef
):
    """
    Type definition for `ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesJobDetailsJobRuns` `NotificationProperty`

    Specifies configuration properties of a job run notification.

    - **NotifyDelayAfter** *(integer) --*

      After a job run starts, the number of minutes to wait before sending a
      job run delay notification.
    """


_ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesJobDetailsJobRunsPredecessorRunsTypeDef = TypedDict(
    "_ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesJobDetailsJobRunsPredecessorRunsTypeDef",
    {"JobName": str, "RunId": str},
    total=False,
)


class ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesJobDetailsJobRunsPredecessorRunsTypeDef(
    _ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesJobDetailsJobRunsPredecessorRunsTypeDef
):
    """
    Type definition for `ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesJobDetailsJobRuns` `PredecessorRuns`

    A job run that was used in the predicate of a conditional trigger that
    triggered this job run.

    - **JobName** *(string) --*

      The name of the job definition used by the predecessor job run.

    - **RunId** *(string) --*

      The job-run ID of the predecessor job run.
    """


_ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesJobDetailsJobRunsTypeDef = TypedDict(
    "_ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesJobDetailsJobRunsTypeDef",
    {
        "Id": str,
        "Attempt": int,
        "PreviousRunId": str,
        "TriggerName": str,
        "JobName": str,
        "StartedOn": datetime,
        "LastModifiedOn": datetime,
        "CompletedOn": datetime,
        "JobRunState": str,
        "Arguments": Dict[str, str],
        "ErrorMessage": str,
        "PredecessorRuns": List[
            ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesJobDetailsJobRunsPredecessorRunsTypeDef
        ],
        "AllocatedCapacity": int,
        "ExecutionTime": int,
        "Timeout": int,
        "MaxCapacity": float,
        "WorkerType": str,
        "NumberOfWorkers": int,
        "SecurityConfiguration": str,
        "LogGroupName": str,
        "NotificationProperty": ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesJobDetailsJobRunsNotificationPropertyTypeDef,
        "GlueVersion": str,
    },
    total=False,
)


class ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesJobDetailsJobRunsTypeDef(
    _ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesJobDetailsJobRunsTypeDef
):
    """
    Type definition for `ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesJobDetails` `JobRuns`

    Contains information about a job run.

    - **Id** *(string) --*

      The ID of this job run.

    - **Attempt** *(integer) --*

      The number of the attempt to run this job.

    - **PreviousRunId** *(string) --*

      The ID of the previous run of this job. For example, the ``JobRunId``
      specified in the ``StartJobRun`` action.

    - **TriggerName** *(string) --*

      The name of the trigger that started this job run.

    - **JobName** *(string) --*

      The name of the job definition being used in this run.

    - **StartedOn** *(datetime) --*

      The date and time at which this job run was started.

    - **LastModifiedOn** *(datetime) --*

      The last time that this job run was modified.

    - **CompletedOn** *(datetime) --*

      The date and time that this job run completed.

    - **JobRunState** *(string) --*

      The current state of the job run.

    - **Arguments** *(dict) --*

      The job arguments associated with this run. For this job run, they replace
      the default arguments set in the job definition itself.

      You can specify arguments here that your own job-execution script consumes,
      as well as arguments that AWS Glue itself consumes.

      For information about how to specify and consume your own job arguments,
      see the `Calling AWS Glue APIs in Python
      <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
      topic in the developer guide.

      For information about the key-value pairs that AWS Glue consumes to set up
      your job, see the `Special Parameters Used by AWS Glue
      <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
      topic in the developer guide.

      - *(string) --*

        - *(string) --*

    - **ErrorMessage** *(string) --*

      An error message associated with this job run.

    - **PredecessorRuns** *(list) --*

      A list of predecessors to this job run.

      - *(dict) --*

        A job run that was used in the predicate of a conditional trigger that
        triggered this job run.

        - **JobName** *(string) --*

          The name of the job definition used by the predecessor job run.

        - **RunId** *(string) --*

          The job-run ID of the predecessor job run.

    - **AllocatedCapacity** *(integer) --*

      This field is deprecated. Use ``MaxCapacity`` instead.

      The number of AWS Glue data processing units (DPUs) allocated to this
      JobRun. From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a
      relative measure of processing power that consists of 4 vCPUs of compute
      capacity and 16 GB of memory. For more information, see the `AWS Glue
      pricing page <https://aws.amazon.com/glue/pricing/>`__ .

    - **ExecutionTime** *(integer) --*

      The amount of time (in seconds) that the job run consumed resources.

    - **Timeout** *(integer) --*

      The ``JobRun`` timeout in minutes. This is the maximum time that a job run
      can consume resources before it is terminated and enters ``TIMEOUT``
      status. The default is 2,880 minutes (48 hours). This overrides the timeout
      value set in the parent job.

    - **MaxCapacity** *(float) --*

      The number of AWS Glue data processing units (DPUs) that can be allocated
      when this job runs. A DPU is a relative measure of processing power that
      consists of 4 vCPUs of compute capacity and 16 GB of memory. For more
      information, see the `AWS Glue pricing page
      <https://docs.aws.amazon.com/https:/aws.amazon.com/glue/pricing/>`__ .

      Do not set ``Max Capacity`` if using ``WorkerType`` and ``NumberOfWorkers``
      .

      The value that can be allocated for ``MaxCapacity`` depends on whether you
      are running a Python shell job or an Apache Spark ETL job:

      * When you specify a Python shell job (``JobCommand.Name`` ="pythonshell"),
      you can allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.

      * When you specify an Apache Spark ETL job (``JobCommand.Name``
      ="glueetl"), you can allocate from 2 to 100 DPUs. The default is 10 DPUs.
      This job type cannot have a fractional DPU allocation.

    - **WorkerType** *(string) --*

      The type of predefined worker that is allocated when a job runs. Accepts a
      value of Standard, G.1X, or G.2X.

      * For the ``Standard`` worker type, each worker provides 4 vCPU, 16 GB of
      memory and a 50GB disk, and 2 executors per worker.

      * For the ``G.1X`` worker type, each worker provides 4 vCPU, 16 GB of
      memory and a 64GB disk, and 1 executor per worker.

      * For the ``G.2X`` worker type, each worker provides 8 vCPU, 32 GB of
      memory and a 128GB disk, and 1 executor per worker.

    - **NumberOfWorkers** *(integer) --*

      The number of workers of a defined ``workerType`` that are allocated when a
      job runs.

      The maximum number of workers you can define are 299 for ``G.1X`` , and 149
      for ``G.2X`` .

    - **SecurityConfiguration** *(string) --*

      The name of the ``SecurityConfiguration`` structure to be used with this
      job run.

    - **LogGroupName** *(string) --*

      The name of the log group for secure logging that can be server-side
      encrypted in Amazon CloudWatch using AWS KMS. This name can be
      ``/aws-glue/jobs/`` , in which case the default encryption is ``NONE`` . If
      you add a role name and ``SecurityConfiguration`` name (in other words,
      ``/aws-glue/jobs-yourRoleName-yourSecurityConfigurationName/`` ), then that
      security configuration is used to encrypt the log group.

    - **NotificationProperty** *(dict) --*

      Specifies configuration properties of a job run notification.

      - **NotifyDelayAfter** *(integer) --*

        After a job run starts, the number of minutes to wait before sending a
        job run delay notification.

    - **GlueVersion** *(string) --*

      Glue version determines the versions of Apache Spark and Python that AWS
      Glue supports. The Python version indicates the version supported for jobs
      of type Spark.

      For more information about the available AWS Glue versions and
      corresponding Spark and Python versions, see `Glue version
      <https://docs.aws.amazon.com/glue/latest/dg/add-job.html>`__ in the
      developer guide.

      Jobs that are created without specifying a Glue version default to Glue 0.9.
    """


_ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesJobDetailsTypeDef = TypedDict(
    "_ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesJobDetailsTypeDef",
    {
        "JobRuns": List[
            ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesJobDetailsJobRunsTypeDef
        ]
    },
    total=False,
)


class ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesJobDetailsTypeDef(
    _ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesJobDetailsTypeDef
):
    """
    Type definition for `ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodes` `JobDetails`

    Details of the Job when the node represents a Job.

    - **JobRuns** *(list) --*

      The information for the job runs represented by the job node.

      - *(dict) --*

        Contains information about a job run.

        - **Id** *(string) --*

          The ID of this job run.

        - **Attempt** *(integer) --*

          The number of the attempt to run this job.

        - **PreviousRunId** *(string) --*

          The ID of the previous run of this job. For example, the ``JobRunId``
          specified in the ``StartJobRun`` action.

        - **TriggerName** *(string) --*

          The name of the trigger that started this job run.

        - **JobName** *(string) --*

          The name of the job definition being used in this run.

        - **StartedOn** *(datetime) --*

          The date and time at which this job run was started.

        - **LastModifiedOn** *(datetime) --*

          The last time that this job run was modified.

        - **CompletedOn** *(datetime) --*

          The date and time that this job run completed.

        - **JobRunState** *(string) --*

          The current state of the job run.

        - **Arguments** *(dict) --*

          The job arguments associated with this run. For this job run, they replace
          the default arguments set in the job definition itself.

          You can specify arguments here that your own job-execution script consumes,
          as well as arguments that AWS Glue itself consumes.

          For information about how to specify and consume your own job arguments,
          see the `Calling AWS Glue APIs in Python
          <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
          topic in the developer guide.

          For information about the key-value pairs that AWS Glue consumes to set up
          your job, see the `Special Parameters Used by AWS Glue
          <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
          topic in the developer guide.

          - *(string) --*

            - *(string) --*

        - **ErrorMessage** *(string) --*

          An error message associated with this job run.

        - **PredecessorRuns** *(list) --*

          A list of predecessors to this job run.

          - *(dict) --*

            A job run that was used in the predicate of a conditional trigger that
            triggered this job run.

            - **JobName** *(string) --*

              The name of the job definition used by the predecessor job run.

            - **RunId** *(string) --*

              The job-run ID of the predecessor job run.

        - **AllocatedCapacity** *(integer) --*

          This field is deprecated. Use ``MaxCapacity`` instead.

          The number of AWS Glue data processing units (DPUs) allocated to this
          JobRun. From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a
          relative measure of processing power that consists of 4 vCPUs of compute
          capacity and 16 GB of memory. For more information, see the `AWS Glue
          pricing page <https://aws.amazon.com/glue/pricing/>`__ .

        - **ExecutionTime** *(integer) --*

          The amount of time (in seconds) that the job run consumed resources.

        - **Timeout** *(integer) --*

          The ``JobRun`` timeout in minutes. This is the maximum time that a job run
          can consume resources before it is terminated and enters ``TIMEOUT``
          status. The default is 2,880 minutes (48 hours). This overrides the timeout
          value set in the parent job.

        - **MaxCapacity** *(float) --*

          The number of AWS Glue data processing units (DPUs) that can be allocated
          when this job runs. A DPU is a relative measure of processing power that
          consists of 4 vCPUs of compute capacity and 16 GB of memory. For more
          information, see the `AWS Glue pricing page
          <https://docs.aws.amazon.com/https:/aws.amazon.com/glue/pricing/>`__ .

          Do not set ``Max Capacity`` if using ``WorkerType`` and ``NumberOfWorkers``
          .

          The value that can be allocated for ``MaxCapacity`` depends on whether you
          are running a Python shell job or an Apache Spark ETL job:

          * When you specify a Python shell job (``JobCommand.Name`` ="pythonshell"),
          you can allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.

          * When you specify an Apache Spark ETL job (``JobCommand.Name``
          ="glueetl"), you can allocate from 2 to 100 DPUs. The default is 10 DPUs.
          This job type cannot have a fractional DPU allocation.

        - **WorkerType** *(string) --*

          The type of predefined worker that is allocated when a job runs. Accepts a
          value of Standard, G.1X, or G.2X.

          * For the ``Standard`` worker type, each worker provides 4 vCPU, 16 GB of
          memory and a 50GB disk, and 2 executors per worker.

          * For the ``G.1X`` worker type, each worker provides 4 vCPU, 16 GB of
          memory and a 64GB disk, and 1 executor per worker.

          * For the ``G.2X`` worker type, each worker provides 8 vCPU, 32 GB of
          memory and a 128GB disk, and 1 executor per worker.

        - **NumberOfWorkers** *(integer) --*

          The number of workers of a defined ``workerType`` that are allocated when a
          job runs.

          The maximum number of workers you can define are 299 for ``G.1X`` , and 149
          for ``G.2X`` .

        - **SecurityConfiguration** *(string) --*

          The name of the ``SecurityConfiguration`` structure to be used with this
          job run.

        - **LogGroupName** *(string) --*

          The name of the log group for secure logging that can be server-side
          encrypted in Amazon CloudWatch using AWS KMS. This name can be
          ``/aws-glue/jobs/`` , in which case the default encryption is ``NONE`` . If
          you add a role name and ``SecurityConfiguration`` name (in other words,
          ``/aws-glue/jobs-yourRoleName-yourSecurityConfigurationName/`` ), then that
          security configuration is used to encrypt the log group.

        - **NotificationProperty** *(dict) --*

          Specifies configuration properties of a job run notification.

          - **NotifyDelayAfter** *(integer) --*

            After a job run starts, the number of minutes to wait before sending a
            job run delay notification.

        - **GlueVersion** *(string) --*

          Glue version determines the versions of Apache Spark and Python that AWS
          Glue supports. The Python version indicates the version supported for jobs
          of type Spark.

          For more information about the available AWS Glue versions and
          corresponding Spark and Python versions, see `Glue version
          <https://docs.aws.amazon.com/glue/latest/dg/add-job.html>`__ in the
          developer guide.

          Jobs that are created without specifying a Glue version default to Glue 0.9.
    """


_ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesTriggerDetailsTriggerActionsNotificationPropertyTypeDef = TypedDict(
    "_ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesTriggerDetailsTriggerActionsNotificationPropertyTypeDef",
    {"NotifyDelayAfter": int},
    total=False,
)


class ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesTriggerDetailsTriggerActionsNotificationPropertyTypeDef(
    _ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesTriggerDetailsTriggerActionsNotificationPropertyTypeDef
):
    """
    Type definition for `ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesTriggerDetailsTriggerActions` `NotificationProperty`

    Specifies configuration properties of a job run notification.

    - **NotifyDelayAfter** *(integer) --*

      After a job run starts, the number of minutes to wait before sending a
      job run delay notification.
    """


_ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesTriggerDetailsTriggerActionsTypeDef = TypedDict(
    "_ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesTriggerDetailsTriggerActionsTypeDef",
    {
        "JobName": str,
        "Arguments": Dict[str, str],
        "Timeout": int,
        "SecurityConfiguration": str,
        "NotificationProperty": ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesTriggerDetailsTriggerActionsNotificationPropertyTypeDef,
        "CrawlerName": str,
    },
    total=False,
)


class ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesTriggerDetailsTriggerActionsTypeDef(
    _ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesTriggerDetailsTriggerActionsTypeDef
):
    """
    Type definition for `ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesTriggerDetailsTrigger` `Actions`

    Defines an action to be initiated by a trigger.

    - **JobName** *(string) --*

      The name of a job to be executed.

    - **Arguments** *(dict) --*

      The job arguments used when this trigger fires. For this job run, they
      replace the default arguments set in the job definition itself.

      You can specify arguments here that your own job-execution script
      consumes, as well as arguments that AWS Glue itself consumes.

      For information about how to specify and consume your own Job arguments,
      see the `Calling AWS Glue APIs in Python
      <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
      topic in the developer guide.

      For information about the key-value pairs that AWS Glue consumes to set
      up your job, see the `Special Parameters Used by AWS Glue
      <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
      topic in the developer guide.

      - *(string) --*

        - *(string) --*

    - **Timeout** *(integer) --*

      The ``JobRun`` timeout in minutes. This is the maximum time that a job
      run can consume resources before it is terminated and enters ``TIMEOUT``
      status. The default is 2,880 minutes (48 hours). This overrides the
      timeout value set in the parent job.

    - **SecurityConfiguration** *(string) --*

      The name of the ``SecurityConfiguration`` structure to be used with this
      action.

    - **NotificationProperty** *(dict) --*

      Specifies configuration properties of a job run notification.

      - **NotifyDelayAfter** *(integer) --*

        After a job run starts, the number of minutes to wait before sending a
        job run delay notification.

    - **CrawlerName** *(string) --*

      The name of the crawler to be used with this action.
    """


_ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesTriggerDetailsTriggerPredicateConditionsTypeDef = TypedDict(
    "_ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesTriggerDetailsTriggerPredicateConditionsTypeDef",
    {
        "LogicalOperator": str,
        "JobName": str,
        "State": str,
        "CrawlerName": str,
        "CrawlState": str,
    },
    total=False,
)


class ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesTriggerDetailsTriggerPredicateConditionsTypeDef(
    _ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesTriggerDetailsTriggerPredicateConditionsTypeDef
):
    """
    Type definition for `ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesTriggerDetailsTriggerPredicate` `Conditions`

    Defines a condition under which a trigger fires.

    - **LogicalOperator** *(string) --*

      A logical operator.

    - **JobName** *(string) --*

      The name of the job whose ``JobRuns`` this condition applies to, and on
      which this trigger waits.

    - **State** *(string) --*

      The condition state. Currently, the values supported are ``SUCCEEDED``
      , ``STOPPED`` , ``TIMEOUT`` , and ``FAILED`` .

    - **CrawlerName** *(string) --*

      The name of the crawler to which this condition applies.

    - **CrawlState** *(string) --*

      The state of the crawler to which this condition applies.
    """


_ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesTriggerDetailsTriggerPredicateTypeDef = TypedDict(
    "_ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesTriggerDetailsTriggerPredicateTypeDef",
    {
        "Logical": str,
        "Conditions": List[
            ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesTriggerDetailsTriggerPredicateConditionsTypeDef
        ],
    },
    total=False,
)


class ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesTriggerDetailsTriggerPredicateTypeDef(
    _ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesTriggerDetailsTriggerPredicateTypeDef
):
    """
    Type definition for `ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesTriggerDetailsTrigger` `Predicate`

    The predicate of this trigger, which defines when it will fire.

    - **Logical** *(string) --*

      An optional field if only one condition is listed. If multiple conditions
      are listed, then this field is required.

    - **Conditions** *(list) --*

      A list of the conditions that determine when the trigger will fire.

      - *(dict) --*

        Defines a condition under which a trigger fires.

        - **LogicalOperator** *(string) --*

          A logical operator.

        - **JobName** *(string) --*

          The name of the job whose ``JobRuns`` this condition applies to, and on
          which this trigger waits.

        - **State** *(string) --*

          The condition state. Currently, the values supported are ``SUCCEEDED``
          , ``STOPPED`` , ``TIMEOUT`` , and ``FAILED`` .

        - **CrawlerName** *(string) --*

          The name of the crawler to which this condition applies.

        - **CrawlState** *(string) --*

          The state of the crawler to which this condition applies.
    """


_ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesTriggerDetailsTriggerTypeDef = TypedDict(
    "_ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesTriggerDetailsTriggerTypeDef",
    {
        "Name": str,
        "WorkflowName": str,
        "Id": str,
        "Type": str,
        "State": str,
        "Description": str,
        "Schedule": str,
        "Actions": List[
            ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesTriggerDetailsTriggerActionsTypeDef
        ],
        "Predicate": ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesTriggerDetailsTriggerPredicateTypeDef,
    },
    total=False,
)


class ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesTriggerDetailsTriggerTypeDef(
    _ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesTriggerDetailsTriggerTypeDef
):
    """
    Type definition for `ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesTriggerDetails` `Trigger`

    The information of the trigger represented by the trigger node.

    - **Name** *(string) --*

      The name of the trigger.

    - **WorkflowName** *(string) --*

      The name of the workflow associated with the trigger.

    - **Id** *(string) --*

      Reserved for future use.

    - **Type** *(string) --*

      The type of trigger that this is.

    - **State** *(string) --*

      The current state of the trigger.

    - **Description** *(string) --*

      A description of this trigger.

    - **Schedule** *(string) --*

      A ``cron`` expression used to specify the schedule (see `Time-Based Schedules
      for Jobs and Crawlers
      <https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html>`__
      . For example, to run something every day at 12:15 UTC, you would specify:
      ``cron(15 12 * * ? *)`` .

    - **Actions** *(list) --*

      The actions initiated by this trigger.

      - *(dict) --*

        Defines an action to be initiated by a trigger.

        - **JobName** *(string) --*

          The name of a job to be executed.

        - **Arguments** *(dict) --*

          The job arguments used when this trigger fires. For this job run, they
          replace the default arguments set in the job definition itself.

          You can specify arguments here that your own job-execution script
          consumes, as well as arguments that AWS Glue itself consumes.

          For information about how to specify and consume your own Job arguments,
          see the `Calling AWS Glue APIs in Python
          <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
          topic in the developer guide.

          For information about the key-value pairs that AWS Glue consumes to set
          up your job, see the `Special Parameters Used by AWS Glue
          <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
          topic in the developer guide.

          - *(string) --*

            - *(string) --*

        - **Timeout** *(integer) --*

          The ``JobRun`` timeout in minutes. This is the maximum time that a job
          run can consume resources before it is terminated and enters ``TIMEOUT``
          status. The default is 2,880 minutes (48 hours). This overrides the
          timeout value set in the parent job.

        - **SecurityConfiguration** *(string) --*

          The name of the ``SecurityConfiguration`` structure to be used with this
          action.

        - **NotificationProperty** *(dict) --*

          Specifies configuration properties of a job run notification.

          - **NotifyDelayAfter** *(integer) --*

            After a job run starts, the number of minutes to wait before sending a
            job run delay notification.

        - **CrawlerName** *(string) --*

          The name of the crawler to be used with this action.

    - **Predicate** *(dict) --*

      The predicate of this trigger, which defines when it will fire.

      - **Logical** *(string) --*

        An optional field if only one condition is listed. If multiple conditions
        are listed, then this field is required.

      - **Conditions** *(list) --*

        A list of the conditions that determine when the trigger will fire.

        - *(dict) --*

          Defines a condition under which a trigger fires.

          - **LogicalOperator** *(string) --*

            A logical operator.

          - **JobName** *(string) --*

            The name of the job whose ``JobRuns`` this condition applies to, and on
            which this trigger waits.

          - **State** *(string) --*

            The condition state. Currently, the values supported are ``SUCCEEDED``
            , ``STOPPED`` , ``TIMEOUT`` , and ``FAILED`` .

          - **CrawlerName** *(string) --*

            The name of the crawler to which this condition applies.

          - **CrawlState** *(string) --*

            The state of the crawler to which this condition applies.
    """


_ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesTriggerDetailsTypeDef = TypedDict(
    "_ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesTriggerDetailsTypeDef",
    {
        "Trigger": ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesTriggerDetailsTriggerTypeDef
    },
    total=False,
)


class ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesTriggerDetailsTypeDef(
    _ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesTriggerDetailsTypeDef
):
    """
    Type definition for `ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodes` `TriggerDetails`

    Details of the Trigger when the node represents a Trigger.

    - **Trigger** *(dict) --*

      The information of the trigger represented by the trigger node.

      - **Name** *(string) --*

        The name of the trigger.

      - **WorkflowName** *(string) --*

        The name of the workflow associated with the trigger.

      - **Id** *(string) --*

        Reserved for future use.

      - **Type** *(string) --*

        The type of trigger that this is.

      - **State** *(string) --*

        The current state of the trigger.

      - **Description** *(string) --*

        A description of this trigger.

      - **Schedule** *(string) --*

        A ``cron`` expression used to specify the schedule (see `Time-Based Schedules
        for Jobs and Crawlers
        <https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html>`__
        . For example, to run something every day at 12:15 UTC, you would specify:
        ``cron(15 12 * * ? *)`` .

      - **Actions** *(list) --*

        The actions initiated by this trigger.

        - *(dict) --*

          Defines an action to be initiated by a trigger.

          - **JobName** *(string) --*

            The name of a job to be executed.

          - **Arguments** *(dict) --*

            The job arguments used when this trigger fires. For this job run, they
            replace the default arguments set in the job definition itself.

            You can specify arguments here that your own job-execution script
            consumes, as well as arguments that AWS Glue itself consumes.

            For information about how to specify and consume your own Job arguments,
            see the `Calling AWS Glue APIs in Python
            <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
            topic in the developer guide.

            For information about the key-value pairs that AWS Glue consumes to set
            up your job, see the `Special Parameters Used by AWS Glue
            <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
            topic in the developer guide.

            - *(string) --*

              - *(string) --*

          - **Timeout** *(integer) --*

            The ``JobRun`` timeout in minutes. This is the maximum time that a job
            run can consume resources before it is terminated and enters ``TIMEOUT``
            status. The default is 2,880 minutes (48 hours). This overrides the
            timeout value set in the parent job.

          - **SecurityConfiguration** *(string) --*

            The name of the ``SecurityConfiguration`` structure to be used with this
            action.

          - **NotificationProperty** *(dict) --*

            Specifies configuration properties of a job run notification.

            - **NotifyDelayAfter** *(integer) --*

              After a job run starts, the number of minutes to wait before sending a
              job run delay notification.

          - **CrawlerName** *(string) --*

            The name of the crawler to be used with this action.

      - **Predicate** *(dict) --*

        The predicate of this trigger, which defines when it will fire.

        - **Logical** *(string) --*

          An optional field if only one condition is listed. If multiple conditions
          are listed, then this field is required.

        - **Conditions** *(list) --*

          A list of the conditions that determine when the trigger will fire.

          - *(dict) --*

            Defines a condition under which a trigger fires.

            - **LogicalOperator** *(string) --*

              A logical operator.

            - **JobName** *(string) --*

              The name of the job whose ``JobRuns`` this condition applies to, and on
              which this trigger waits.

            - **State** *(string) --*

              The condition state. Currently, the values supported are ``SUCCEEDED``
              , ``STOPPED`` , ``TIMEOUT`` , and ``FAILED`` .

            - **CrawlerName** *(string) --*

              The name of the crawler to which this condition applies.

            - **CrawlState** *(string) --*

              The state of the crawler to which this condition applies.
    """


_ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesTypeDef = TypedDict(
    "_ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesTypeDef",
    {
        "Type": str,
        "Name": str,
        "UniqueId": str,
        "TriggerDetails": ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesTriggerDetailsTypeDef,
        "JobDetails": ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesJobDetailsTypeDef,
        "CrawlerDetails": ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesCrawlerDetailsTypeDef,
    },
    total=False,
)


class ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesTypeDef(
    _ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesTypeDef
):
    """
    Type definition for `ClientBatchGetWorkflowsResponseWorkflowsLastRunGraph` `Nodes`

    A node represents an AWS Glue component like Trigger, Job etc. which is part of a
    workflow.

    - **Type** *(string) --*

      The type of AWS Glue component represented by the node.

    - **Name** *(string) --*

      The name of the AWS Glue component represented by the node.

    - **UniqueId** *(string) --*

      The unique Id assigned to the node within the workflow.

    - **TriggerDetails** *(dict) --*

      Details of the Trigger when the node represents a Trigger.

      - **Trigger** *(dict) --*

        The information of the trigger represented by the trigger node.

        - **Name** *(string) --*

          The name of the trigger.

        - **WorkflowName** *(string) --*

          The name of the workflow associated with the trigger.

        - **Id** *(string) --*

          Reserved for future use.

        - **Type** *(string) --*

          The type of trigger that this is.

        - **State** *(string) --*

          The current state of the trigger.

        - **Description** *(string) --*

          A description of this trigger.

        - **Schedule** *(string) --*

          A ``cron`` expression used to specify the schedule (see `Time-Based Schedules
          for Jobs and Crawlers
          <https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html>`__
          . For example, to run something every day at 12:15 UTC, you would specify:
          ``cron(15 12 * * ? *)`` .

        - **Actions** *(list) --*

          The actions initiated by this trigger.

          - *(dict) --*

            Defines an action to be initiated by a trigger.

            - **JobName** *(string) --*

              The name of a job to be executed.

            - **Arguments** *(dict) --*

              The job arguments used when this trigger fires. For this job run, they
              replace the default arguments set in the job definition itself.

              You can specify arguments here that your own job-execution script
              consumes, as well as arguments that AWS Glue itself consumes.

              For information about how to specify and consume your own Job arguments,
              see the `Calling AWS Glue APIs in Python
              <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
              topic in the developer guide.

              For information about the key-value pairs that AWS Glue consumes to set
              up your job, see the `Special Parameters Used by AWS Glue
              <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
              topic in the developer guide.

              - *(string) --*

                - *(string) --*

            - **Timeout** *(integer) --*

              The ``JobRun`` timeout in minutes. This is the maximum time that a job
              run can consume resources before it is terminated and enters ``TIMEOUT``
              status. The default is 2,880 minutes (48 hours). This overrides the
              timeout value set in the parent job.

            - **SecurityConfiguration** *(string) --*

              The name of the ``SecurityConfiguration`` structure to be used with this
              action.

            - **NotificationProperty** *(dict) --*

              Specifies configuration properties of a job run notification.

              - **NotifyDelayAfter** *(integer) --*

                After a job run starts, the number of minutes to wait before sending a
                job run delay notification.

            - **CrawlerName** *(string) --*

              The name of the crawler to be used with this action.

        - **Predicate** *(dict) --*

          The predicate of this trigger, which defines when it will fire.

          - **Logical** *(string) --*

            An optional field if only one condition is listed. If multiple conditions
            are listed, then this field is required.

          - **Conditions** *(list) --*

            A list of the conditions that determine when the trigger will fire.

            - *(dict) --*

              Defines a condition under which a trigger fires.

              - **LogicalOperator** *(string) --*

                A logical operator.

              - **JobName** *(string) --*

                The name of the job whose ``JobRuns`` this condition applies to, and on
                which this trigger waits.

              - **State** *(string) --*

                The condition state. Currently, the values supported are ``SUCCEEDED``
                , ``STOPPED`` , ``TIMEOUT`` , and ``FAILED`` .

              - **CrawlerName** *(string) --*

                The name of the crawler to which this condition applies.

              - **CrawlState** *(string) --*

                The state of the crawler to which this condition applies.

    - **JobDetails** *(dict) --*

      Details of the Job when the node represents a Job.

      - **JobRuns** *(list) --*

        The information for the job runs represented by the job node.

        - *(dict) --*

          Contains information about a job run.

          - **Id** *(string) --*

            The ID of this job run.

          - **Attempt** *(integer) --*

            The number of the attempt to run this job.

          - **PreviousRunId** *(string) --*

            The ID of the previous run of this job. For example, the ``JobRunId``
            specified in the ``StartJobRun`` action.

          - **TriggerName** *(string) --*

            The name of the trigger that started this job run.

          - **JobName** *(string) --*

            The name of the job definition being used in this run.

          - **StartedOn** *(datetime) --*

            The date and time at which this job run was started.

          - **LastModifiedOn** *(datetime) --*

            The last time that this job run was modified.

          - **CompletedOn** *(datetime) --*

            The date and time that this job run completed.

          - **JobRunState** *(string) --*

            The current state of the job run.

          - **Arguments** *(dict) --*

            The job arguments associated with this run. For this job run, they replace
            the default arguments set in the job definition itself.

            You can specify arguments here that your own job-execution script consumes,
            as well as arguments that AWS Glue itself consumes.

            For information about how to specify and consume your own job arguments,
            see the `Calling AWS Glue APIs in Python
            <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
            topic in the developer guide.

            For information about the key-value pairs that AWS Glue consumes to set up
            your job, see the `Special Parameters Used by AWS Glue
            <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
            topic in the developer guide.

            - *(string) --*

              - *(string) --*

          - **ErrorMessage** *(string) --*

            An error message associated with this job run.

          - **PredecessorRuns** *(list) --*

            A list of predecessors to this job run.

            - *(dict) --*

              A job run that was used in the predicate of a conditional trigger that
              triggered this job run.

              - **JobName** *(string) --*

                The name of the job definition used by the predecessor job run.

              - **RunId** *(string) --*

                The job-run ID of the predecessor job run.

          - **AllocatedCapacity** *(integer) --*

            This field is deprecated. Use ``MaxCapacity`` instead.

            The number of AWS Glue data processing units (DPUs) allocated to this
            JobRun. From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a
            relative measure of processing power that consists of 4 vCPUs of compute
            capacity and 16 GB of memory. For more information, see the `AWS Glue
            pricing page <https://aws.amazon.com/glue/pricing/>`__ .

          - **ExecutionTime** *(integer) --*

            The amount of time (in seconds) that the job run consumed resources.

          - **Timeout** *(integer) --*

            The ``JobRun`` timeout in minutes. This is the maximum time that a job run
            can consume resources before it is terminated and enters ``TIMEOUT``
            status. The default is 2,880 minutes (48 hours). This overrides the timeout
            value set in the parent job.

          - **MaxCapacity** *(float) --*

            The number of AWS Glue data processing units (DPUs) that can be allocated
            when this job runs. A DPU is a relative measure of processing power that
            consists of 4 vCPUs of compute capacity and 16 GB of memory. For more
            information, see the `AWS Glue pricing page
            <https://docs.aws.amazon.com/https:/aws.amazon.com/glue/pricing/>`__ .

            Do not set ``Max Capacity`` if using ``WorkerType`` and ``NumberOfWorkers``
            .

            The value that can be allocated for ``MaxCapacity`` depends on whether you
            are running a Python shell job or an Apache Spark ETL job:

            * When you specify a Python shell job (``JobCommand.Name`` ="pythonshell"),
            you can allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.

            * When you specify an Apache Spark ETL job (``JobCommand.Name``
            ="glueetl"), you can allocate from 2 to 100 DPUs. The default is 10 DPUs.
            This job type cannot have a fractional DPU allocation.

          - **WorkerType** *(string) --*

            The type of predefined worker that is allocated when a job runs. Accepts a
            value of Standard, G.1X, or G.2X.

            * For the ``Standard`` worker type, each worker provides 4 vCPU, 16 GB of
            memory and a 50GB disk, and 2 executors per worker.

            * For the ``G.1X`` worker type, each worker provides 4 vCPU, 16 GB of
            memory and a 64GB disk, and 1 executor per worker.

            * For the ``G.2X`` worker type, each worker provides 8 vCPU, 32 GB of
            memory and a 128GB disk, and 1 executor per worker.

          - **NumberOfWorkers** *(integer) --*

            The number of workers of a defined ``workerType`` that are allocated when a
            job runs.

            The maximum number of workers you can define are 299 for ``G.1X`` , and 149
            for ``G.2X`` .

          - **SecurityConfiguration** *(string) --*

            The name of the ``SecurityConfiguration`` structure to be used with this
            job run.

          - **LogGroupName** *(string) --*

            The name of the log group for secure logging that can be server-side
            encrypted in Amazon CloudWatch using AWS KMS. This name can be
            ``/aws-glue/jobs/`` , in which case the default encryption is ``NONE`` . If
            you add a role name and ``SecurityConfiguration`` name (in other words,
            ``/aws-glue/jobs-yourRoleName-yourSecurityConfigurationName/`` ), then that
            security configuration is used to encrypt the log group.

          - **NotificationProperty** *(dict) --*

            Specifies configuration properties of a job run notification.

            - **NotifyDelayAfter** *(integer) --*

              After a job run starts, the number of minutes to wait before sending a
              job run delay notification.

          - **GlueVersion** *(string) --*

            Glue version determines the versions of Apache Spark and Python that AWS
            Glue supports. The Python version indicates the version supported for jobs
            of type Spark.

            For more information about the available AWS Glue versions and
            corresponding Spark and Python versions, see `Glue version
            <https://docs.aws.amazon.com/glue/latest/dg/add-job.html>`__ in the
            developer guide.

            Jobs that are created without specifying a Glue version default to Glue 0.9.

    - **CrawlerDetails** *(dict) --*

      Details of the crawler when the node represents a crawler.

      - **Crawls** *(list) --*

        A list of crawls represented by the crawl node.

        - *(dict) --*

          The details of a crawl in the workflow.

          - **State** *(string) --*

            The state of the crawler.

          - **StartedOn** *(datetime) --*

            The date and time on which the crawl started.

          - **CompletedOn** *(datetime) --*

            The date and time on which the crawl completed.

          - **ErrorMessage** *(string) --*

            The error message associated with the crawl.

          - **LogGroup** *(string) --*

            The log group associated with the crawl.

          - **LogStream** *(string) --*

            The log stream associated with the crawl.
    """


_ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphTypeDef = TypedDict(
    "_ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphTypeDef",
    {
        "Nodes": List[ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphNodesTypeDef],
        "Edges": List[ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphEdgesTypeDef],
    },
    total=False,
)


class ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphTypeDef(
    _ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphTypeDef
):
    """
    Type definition for `ClientBatchGetWorkflowsResponseWorkflowsLastRun` `Graph`

    The graph representing all the AWS Glue components that belong to the workflow as nodes
    and directed connections between them as edges.

    - **Nodes** *(list) --*

      A list of the the AWS Glue components belong to the workflow represented as nodes.

      - *(dict) --*

        A node represents an AWS Glue component like Trigger, Job etc. which is part of a
        workflow.

        - **Type** *(string) --*

          The type of AWS Glue component represented by the node.

        - **Name** *(string) --*

          The name of the AWS Glue component represented by the node.

        - **UniqueId** *(string) --*

          The unique Id assigned to the node within the workflow.

        - **TriggerDetails** *(dict) --*

          Details of the Trigger when the node represents a Trigger.

          - **Trigger** *(dict) --*

            The information of the trigger represented by the trigger node.

            - **Name** *(string) --*

              The name of the trigger.

            - **WorkflowName** *(string) --*

              The name of the workflow associated with the trigger.

            - **Id** *(string) --*

              Reserved for future use.

            - **Type** *(string) --*

              The type of trigger that this is.

            - **State** *(string) --*

              The current state of the trigger.

            - **Description** *(string) --*

              A description of this trigger.

            - **Schedule** *(string) --*

              A ``cron`` expression used to specify the schedule (see `Time-Based Schedules
              for Jobs and Crawlers
              <https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html>`__
              . For example, to run something every day at 12:15 UTC, you would specify:
              ``cron(15 12 * * ? *)`` .

            - **Actions** *(list) --*

              The actions initiated by this trigger.

              - *(dict) --*

                Defines an action to be initiated by a trigger.

                - **JobName** *(string) --*

                  The name of a job to be executed.

                - **Arguments** *(dict) --*

                  The job arguments used when this trigger fires. For this job run, they
                  replace the default arguments set in the job definition itself.

                  You can specify arguments here that your own job-execution script
                  consumes, as well as arguments that AWS Glue itself consumes.

                  For information about how to specify and consume your own Job arguments,
                  see the `Calling AWS Glue APIs in Python
                  <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
                  topic in the developer guide.

                  For information about the key-value pairs that AWS Glue consumes to set
                  up your job, see the `Special Parameters Used by AWS Glue
                  <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
                  topic in the developer guide.

                  - *(string) --*

                    - *(string) --*

                - **Timeout** *(integer) --*

                  The ``JobRun`` timeout in minutes. This is the maximum time that a job
                  run can consume resources before it is terminated and enters ``TIMEOUT``
                  status. The default is 2,880 minutes (48 hours). This overrides the
                  timeout value set in the parent job.

                - **SecurityConfiguration** *(string) --*

                  The name of the ``SecurityConfiguration`` structure to be used with this
                  action.

                - **NotificationProperty** *(dict) --*

                  Specifies configuration properties of a job run notification.

                  - **NotifyDelayAfter** *(integer) --*

                    After a job run starts, the number of minutes to wait before sending a
                    job run delay notification.

                - **CrawlerName** *(string) --*

                  The name of the crawler to be used with this action.

            - **Predicate** *(dict) --*

              The predicate of this trigger, which defines when it will fire.

              - **Logical** *(string) --*

                An optional field if only one condition is listed. If multiple conditions
                are listed, then this field is required.

              - **Conditions** *(list) --*

                A list of the conditions that determine when the trigger will fire.

                - *(dict) --*

                  Defines a condition under which a trigger fires.

                  - **LogicalOperator** *(string) --*

                    A logical operator.

                  - **JobName** *(string) --*

                    The name of the job whose ``JobRuns`` this condition applies to, and on
                    which this trigger waits.

                  - **State** *(string) --*

                    The condition state. Currently, the values supported are ``SUCCEEDED``
                    , ``STOPPED`` , ``TIMEOUT`` , and ``FAILED`` .

                  - **CrawlerName** *(string) --*

                    The name of the crawler to which this condition applies.

                  - **CrawlState** *(string) --*

                    The state of the crawler to which this condition applies.

        - **JobDetails** *(dict) --*

          Details of the Job when the node represents a Job.

          - **JobRuns** *(list) --*

            The information for the job runs represented by the job node.

            - *(dict) --*

              Contains information about a job run.

              - **Id** *(string) --*

                The ID of this job run.

              - **Attempt** *(integer) --*

                The number of the attempt to run this job.

              - **PreviousRunId** *(string) --*

                The ID of the previous run of this job. For example, the ``JobRunId``
                specified in the ``StartJobRun`` action.

              - **TriggerName** *(string) --*

                The name of the trigger that started this job run.

              - **JobName** *(string) --*

                The name of the job definition being used in this run.

              - **StartedOn** *(datetime) --*

                The date and time at which this job run was started.

              - **LastModifiedOn** *(datetime) --*

                The last time that this job run was modified.

              - **CompletedOn** *(datetime) --*

                The date and time that this job run completed.

              - **JobRunState** *(string) --*

                The current state of the job run.

              - **Arguments** *(dict) --*

                The job arguments associated with this run. For this job run, they replace
                the default arguments set in the job definition itself.

                You can specify arguments here that your own job-execution script consumes,
                as well as arguments that AWS Glue itself consumes.

                For information about how to specify and consume your own job arguments,
                see the `Calling AWS Glue APIs in Python
                <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
                topic in the developer guide.

                For information about the key-value pairs that AWS Glue consumes to set up
                your job, see the `Special Parameters Used by AWS Glue
                <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
                topic in the developer guide.

                - *(string) --*

                  - *(string) --*

              - **ErrorMessage** *(string) --*

                An error message associated with this job run.

              - **PredecessorRuns** *(list) --*

                A list of predecessors to this job run.

                - *(dict) --*

                  A job run that was used in the predicate of a conditional trigger that
                  triggered this job run.

                  - **JobName** *(string) --*

                    The name of the job definition used by the predecessor job run.

                  - **RunId** *(string) --*

                    The job-run ID of the predecessor job run.

              - **AllocatedCapacity** *(integer) --*

                This field is deprecated. Use ``MaxCapacity`` instead.

                The number of AWS Glue data processing units (DPUs) allocated to this
                JobRun. From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a
                relative measure of processing power that consists of 4 vCPUs of compute
                capacity and 16 GB of memory. For more information, see the `AWS Glue
                pricing page <https://aws.amazon.com/glue/pricing/>`__ .

              - **ExecutionTime** *(integer) --*

                The amount of time (in seconds) that the job run consumed resources.

              - **Timeout** *(integer) --*

                The ``JobRun`` timeout in minutes. This is the maximum time that a job run
                can consume resources before it is terminated and enters ``TIMEOUT``
                status. The default is 2,880 minutes (48 hours). This overrides the timeout
                value set in the parent job.

              - **MaxCapacity** *(float) --*

                The number of AWS Glue data processing units (DPUs) that can be allocated
                when this job runs. A DPU is a relative measure of processing power that
                consists of 4 vCPUs of compute capacity and 16 GB of memory. For more
                information, see the `AWS Glue pricing page
                <https://docs.aws.amazon.com/https:/aws.amazon.com/glue/pricing/>`__ .

                Do not set ``Max Capacity`` if using ``WorkerType`` and ``NumberOfWorkers``
                .

                The value that can be allocated for ``MaxCapacity`` depends on whether you
                are running a Python shell job or an Apache Spark ETL job:

                * When you specify a Python shell job (``JobCommand.Name`` ="pythonshell"),
                you can allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.

                * When you specify an Apache Spark ETL job (``JobCommand.Name``
                ="glueetl"), you can allocate from 2 to 100 DPUs. The default is 10 DPUs.
                This job type cannot have a fractional DPU allocation.

              - **WorkerType** *(string) --*

                The type of predefined worker that is allocated when a job runs. Accepts a
                value of Standard, G.1X, or G.2X.

                * For the ``Standard`` worker type, each worker provides 4 vCPU, 16 GB of
                memory and a 50GB disk, and 2 executors per worker.

                * For the ``G.1X`` worker type, each worker provides 4 vCPU, 16 GB of
                memory and a 64GB disk, and 1 executor per worker.

                * For the ``G.2X`` worker type, each worker provides 8 vCPU, 32 GB of
                memory and a 128GB disk, and 1 executor per worker.

              - **NumberOfWorkers** *(integer) --*

                The number of workers of a defined ``workerType`` that are allocated when a
                job runs.

                The maximum number of workers you can define are 299 for ``G.1X`` , and 149
                for ``G.2X`` .

              - **SecurityConfiguration** *(string) --*

                The name of the ``SecurityConfiguration`` structure to be used with this
                job run.

              - **LogGroupName** *(string) --*

                The name of the log group for secure logging that can be server-side
                encrypted in Amazon CloudWatch using AWS KMS. This name can be
                ``/aws-glue/jobs/`` , in which case the default encryption is ``NONE`` . If
                you add a role name and ``SecurityConfiguration`` name (in other words,
                ``/aws-glue/jobs-yourRoleName-yourSecurityConfigurationName/`` ), then that
                security configuration is used to encrypt the log group.

              - **NotificationProperty** *(dict) --*

                Specifies configuration properties of a job run notification.

                - **NotifyDelayAfter** *(integer) --*

                  After a job run starts, the number of minutes to wait before sending a
                  job run delay notification.

              - **GlueVersion** *(string) --*

                Glue version determines the versions of Apache Spark and Python that AWS
                Glue supports. The Python version indicates the version supported for jobs
                of type Spark.

                For more information about the available AWS Glue versions and
                corresponding Spark and Python versions, see `Glue version
                <https://docs.aws.amazon.com/glue/latest/dg/add-job.html>`__ in the
                developer guide.

                Jobs that are created without specifying a Glue version default to Glue 0.9.

        - **CrawlerDetails** *(dict) --*

          Details of the crawler when the node represents a crawler.

          - **Crawls** *(list) --*

            A list of crawls represented by the crawl node.

            - *(dict) --*

              The details of a crawl in the workflow.

              - **State** *(string) --*

                The state of the crawler.

              - **StartedOn** *(datetime) --*

                The date and time on which the crawl started.

              - **CompletedOn** *(datetime) --*

                The date and time on which the crawl completed.

              - **ErrorMessage** *(string) --*

                The error message associated with the crawl.

              - **LogGroup** *(string) --*

                The log group associated with the crawl.

              - **LogStream** *(string) --*

                The log stream associated with the crawl.

    - **Edges** *(list) --*

      A list of all the directed connections between the nodes belonging to the workflow.

      - *(dict) --*

        An edge represents a directed connection between two AWS Glue components which are
        part of the workflow the edge belongs to.

        - **SourceId** *(string) --*

          The unique of the node within the workflow where the edge starts.

        - **DestinationId** *(string) --*

          The unique of the node within the workflow where the edge ends.
    """


_ClientBatchGetWorkflowsResponseWorkflowsLastRunStatisticsTypeDef = TypedDict(
    "_ClientBatchGetWorkflowsResponseWorkflowsLastRunStatisticsTypeDef",
    {
        "TotalActions": int,
        "TimeoutActions": int,
        "FailedActions": int,
        "StoppedActions": int,
        "SucceededActions": int,
        "RunningActions": int,
    },
    total=False,
)


class ClientBatchGetWorkflowsResponseWorkflowsLastRunStatisticsTypeDef(
    _ClientBatchGetWorkflowsResponseWorkflowsLastRunStatisticsTypeDef
):
    """
    Type definition for `ClientBatchGetWorkflowsResponseWorkflowsLastRun` `Statistics`

    The statistics of the run.

    - **TotalActions** *(integer) --*

      Total number of Actions in the workflow run.

    - **TimeoutActions** *(integer) --*

      Total number of Actions which timed out.

    - **FailedActions** *(integer) --*

      Total number of Actions which have failed.

    - **StoppedActions** *(integer) --*

      Total number of Actions which have stopped.

    - **SucceededActions** *(integer) --*

      Total number of Actions which have succeeded.

    - **RunningActions** *(integer) --*

      Total number Actions in running state.
    """


_ClientBatchGetWorkflowsResponseWorkflowsLastRunTypeDef = TypedDict(
    "_ClientBatchGetWorkflowsResponseWorkflowsLastRunTypeDef",
    {
        "Name": str,
        "WorkflowRunId": str,
        "WorkflowRunProperties": Dict[str, str],
        "StartedOn": datetime,
        "CompletedOn": datetime,
        "Status": str,
        "Statistics": ClientBatchGetWorkflowsResponseWorkflowsLastRunStatisticsTypeDef,
        "Graph": ClientBatchGetWorkflowsResponseWorkflowsLastRunGraphTypeDef,
    },
    total=False,
)


class ClientBatchGetWorkflowsResponseWorkflowsLastRunTypeDef(
    _ClientBatchGetWorkflowsResponseWorkflowsLastRunTypeDef
):
    """
    Type definition for `ClientBatchGetWorkflowsResponseWorkflows` `LastRun`

    The information about the last execution of the workflow.

    - **Name** *(string) --*

      Name of the workflow which was executed.

    - **WorkflowRunId** *(string) --*

      The ID of this workflow run.

    - **WorkflowRunProperties** *(dict) --*

      The workflow run properties which were set during the run.

      - *(string) --*

        - *(string) --*

    - **StartedOn** *(datetime) --*

      The date and time when the workflow run was started.

    - **CompletedOn** *(datetime) --*

      The date and time when the workflow run completed.

    - **Status** *(string) --*

      The status of the workflow run.

    - **Statistics** *(dict) --*

      The statistics of the run.

      - **TotalActions** *(integer) --*

        Total number of Actions in the workflow run.

      - **TimeoutActions** *(integer) --*

        Total number of Actions which timed out.

      - **FailedActions** *(integer) --*

        Total number of Actions which have failed.

      - **StoppedActions** *(integer) --*

        Total number of Actions which have stopped.

      - **SucceededActions** *(integer) --*

        Total number of Actions which have succeeded.

      - **RunningActions** *(integer) --*

        Total number Actions in running state.

    - **Graph** *(dict) --*

      The graph representing all the AWS Glue components that belong to the workflow as nodes
      and directed connections between them as edges.

      - **Nodes** *(list) --*

        A list of the the AWS Glue components belong to the workflow represented as nodes.

        - *(dict) --*

          A node represents an AWS Glue component like Trigger, Job etc. which is part of a
          workflow.

          - **Type** *(string) --*

            The type of AWS Glue component represented by the node.

          - **Name** *(string) --*

            The name of the AWS Glue component represented by the node.

          - **UniqueId** *(string) --*

            The unique Id assigned to the node within the workflow.

          - **TriggerDetails** *(dict) --*

            Details of the Trigger when the node represents a Trigger.

            - **Trigger** *(dict) --*

              The information of the trigger represented by the trigger node.

              - **Name** *(string) --*

                The name of the trigger.

              - **WorkflowName** *(string) --*

                The name of the workflow associated with the trigger.

              - **Id** *(string) --*

                Reserved for future use.

              - **Type** *(string) --*

                The type of trigger that this is.

              - **State** *(string) --*

                The current state of the trigger.

              - **Description** *(string) --*

                A description of this trigger.

              - **Schedule** *(string) --*

                A ``cron`` expression used to specify the schedule (see `Time-Based Schedules
                for Jobs and Crawlers
                <https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html>`__
                . For example, to run something every day at 12:15 UTC, you would specify:
                ``cron(15 12 * * ? *)`` .

              - **Actions** *(list) --*

                The actions initiated by this trigger.

                - *(dict) --*

                  Defines an action to be initiated by a trigger.

                  - **JobName** *(string) --*

                    The name of a job to be executed.

                  - **Arguments** *(dict) --*

                    The job arguments used when this trigger fires. For this job run, they
                    replace the default arguments set in the job definition itself.

                    You can specify arguments here that your own job-execution script
                    consumes, as well as arguments that AWS Glue itself consumes.

                    For information about how to specify and consume your own Job arguments,
                    see the `Calling AWS Glue APIs in Python
                    <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
                    topic in the developer guide.

                    For information about the key-value pairs that AWS Glue consumes to set
                    up your job, see the `Special Parameters Used by AWS Glue
                    <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
                    topic in the developer guide.

                    - *(string) --*

                      - *(string) --*

                  - **Timeout** *(integer) --*

                    The ``JobRun`` timeout in minutes. This is the maximum time that a job
                    run can consume resources before it is terminated and enters ``TIMEOUT``
                    status. The default is 2,880 minutes (48 hours). This overrides the
                    timeout value set in the parent job.

                  - **SecurityConfiguration** *(string) --*

                    The name of the ``SecurityConfiguration`` structure to be used with this
                    action.

                  - **NotificationProperty** *(dict) --*

                    Specifies configuration properties of a job run notification.

                    - **NotifyDelayAfter** *(integer) --*

                      After a job run starts, the number of minutes to wait before sending a
                      job run delay notification.

                  - **CrawlerName** *(string) --*

                    The name of the crawler to be used with this action.

              - **Predicate** *(dict) --*

                The predicate of this trigger, which defines when it will fire.

                - **Logical** *(string) --*

                  An optional field if only one condition is listed. If multiple conditions
                  are listed, then this field is required.

                - **Conditions** *(list) --*

                  A list of the conditions that determine when the trigger will fire.

                  - *(dict) --*

                    Defines a condition under which a trigger fires.

                    - **LogicalOperator** *(string) --*

                      A logical operator.

                    - **JobName** *(string) --*

                      The name of the job whose ``JobRuns`` this condition applies to, and on
                      which this trigger waits.

                    - **State** *(string) --*

                      The condition state. Currently, the values supported are ``SUCCEEDED``
                      , ``STOPPED`` , ``TIMEOUT`` , and ``FAILED`` .

                    - **CrawlerName** *(string) --*

                      The name of the crawler to which this condition applies.

                    - **CrawlState** *(string) --*

                      The state of the crawler to which this condition applies.

          - **JobDetails** *(dict) --*

            Details of the Job when the node represents a Job.

            - **JobRuns** *(list) --*

              The information for the job runs represented by the job node.

              - *(dict) --*

                Contains information about a job run.

                - **Id** *(string) --*

                  The ID of this job run.

                - **Attempt** *(integer) --*

                  The number of the attempt to run this job.

                - **PreviousRunId** *(string) --*

                  The ID of the previous run of this job. For example, the ``JobRunId``
                  specified in the ``StartJobRun`` action.

                - **TriggerName** *(string) --*

                  The name of the trigger that started this job run.

                - **JobName** *(string) --*

                  The name of the job definition being used in this run.

                - **StartedOn** *(datetime) --*

                  The date and time at which this job run was started.

                - **LastModifiedOn** *(datetime) --*

                  The last time that this job run was modified.

                - **CompletedOn** *(datetime) --*

                  The date and time that this job run completed.

                - **JobRunState** *(string) --*

                  The current state of the job run.

                - **Arguments** *(dict) --*

                  The job arguments associated with this run. For this job run, they replace
                  the default arguments set in the job definition itself.

                  You can specify arguments here that your own job-execution script consumes,
                  as well as arguments that AWS Glue itself consumes.

                  For information about how to specify and consume your own job arguments,
                  see the `Calling AWS Glue APIs in Python
                  <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
                  topic in the developer guide.

                  For information about the key-value pairs that AWS Glue consumes to set up
                  your job, see the `Special Parameters Used by AWS Glue
                  <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
                  topic in the developer guide.

                  - *(string) --*

                    - *(string) --*

                - **ErrorMessage** *(string) --*

                  An error message associated with this job run.

                - **PredecessorRuns** *(list) --*

                  A list of predecessors to this job run.

                  - *(dict) --*

                    A job run that was used in the predicate of a conditional trigger that
                    triggered this job run.

                    - **JobName** *(string) --*

                      The name of the job definition used by the predecessor job run.

                    - **RunId** *(string) --*

                      The job-run ID of the predecessor job run.

                - **AllocatedCapacity** *(integer) --*

                  This field is deprecated. Use ``MaxCapacity`` instead.

                  The number of AWS Glue data processing units (DPUs) allocated to this
                  JobRun. From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a
                  relative measure of processing power that consists of 4 vCPUs of compute
                  capacity and 16 GB of memory. For more information, see the `AWS Glue
                  pricing page <https://aws.amazon.com/glue/pricing/>`__ .

                - **ExecutionTime** *(integer) --*

                  The amount of time (in seconds) that the job run consumed resources.

                - **Timeout** *(integer) --*

                  The ``JobRun`` timeout in minutes. This is the maximum time that a job run
                  can consume resources before it is terminated and enters ``TIMEOUT``
                  status. The default is 2,880 minutes (48 hours). This overrides the timeout
                  value set in the parent job.

                - **MaxCapacity** *(float) --*

                  The number of AWS Glue data processing units (DPUs) that can be allocated
                  when this job runs. A DPU is a relative measure of processing power that
                  consists of 4 vCPUs of compute capacity and 16 GB of memory. For more
                  information, see the `AWS Glue pricing page
                  <https://docs.aws.amazon.com/https:/aws.amazon.com/glue/pricing/>`__ .

                  Do not set ``Max Capacity`` if using ``WorkerType`` and ``NumberOfWorkers``
                  .

                  The value that can be allocated for ``MaxCapacity`` depends on whether you
                  are running a Python shell job or an Apache Spark ETL job:

                  * When you specify a Python shell job (``JobCommand.Name`` ="pythonshell"),
                  you can allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.

                  * When you specify an Apache Spark ETL job (``JobCommand.Name``
                  ="glueetl"), you can allocate from 2 to 100 DPUs. The default is 10 DPUs.
                  This job type cannot have a fractional DPU allocation.

                - **WorkerType** *(string) --*

                  The type of predefined worker that is allocated when a job runs. Accepts a
                  value of Standard, G.1X, or G.2X.

                  * For the ``Standard`` worker type, each worker provides 4 vCPU, 16 GB of
                  memory and a 50GB disk, and 2 executors per worker.

                  * For the ``G.1X`` worker type, each worker provides 4 vCPU, 16 GB of
                  memory and a 64GB disk, and 1 executor per worker.

                  * For the ``G.2X`` worker type, each worker provides 8 vCPU, 32 GB of
                  memory and a 128GB disk, and 1 executor per worker.

                - **NumberOfWorkers** *(integer) --*

                  The number of workers of a defined ``workerType`` that are allocated when a
                  job runs.

                  The maximum number of workers you can define are 299 for ``G.1X`` , and 149
                  for ``G.2X`` .

                - **SecurityConfiguration** *(string) --*

                  The name of the ``SecurityConfiguration`` structure to be used with this
                  job run.

                - **LogGroupName** *(string) --*

                  The name of the log group for secure logging that can be server-side
                  encrypted in Amazon CloudWatch using AWS KMS. This name can be
                  ``/aws-glue/jobs/`` , in which case the default encryption is ``NONE`` . If
                  you add a role name and ``SecurityConfiguration`` name (in other words,
                  ``/aws-glue/jobs-yourRoleName-yourSecurityConfigurationName/`` ), then that
                  security configuration is used to encrypt the log group.

                - **NotificationProperty** *(dict) --*

                  Specifies configuration properties of a job run notification.

                  - **NotifyDelayAfter** *(integer) --*

                    After a job run starts, the number of minutes to wait before sending a
                    job run delay notification.

                - **GlueVersion** *(string) --*

                  Glue version determines the versions of Apache Spark and Python that AWS
                  Glue supports. The Python version indicates the version supported for jobs
                  of type Spark.

                  For more information about the available AWS Glue versions and
                  corresponding Spark and Python versions, see `Glue version
                  <https://docs.aws.amazon.com/glue/latest/dg/add-job.html>`__ in the
                  developer guide.

                  Jobs that are created without specifying a Glue version default to Glue 0.9.

          - **CrawlerDetails** *(dict) --*

            Details of the crawler when the node represents a crawler.

            - **Crawls** *(list) --*

              A list of crawls represented by the crawl node.

              - *(dict) --*

                The details of a crawl in the workflow.

                - **State** *(string) --*

                  The state of the crawler.

                - **StartedOn** *(datetime) --*

                  The date and time on which the crawl started.

                - **CompletedOn** *(datetime) --*

                  The date and time on which the crawl completed.

                - **ErrorMessage** *(string) --*

                  The error message associated with the crawl.

                - **LogGroup** *(string) --*

                  The log group associated with the crawl.

                - **LogStream** *(string) --*

                  The log stream associated with the crawl.

      - **Edges** *(list) --*

        A list of all the directed connections between the nodes belonging to the workflow.

        - *(dict) --*

          An edge represents a directed connection between two AWS Glue components which are
          part of the workflow the edge belongs to.

          - **SourceId** *(string) --*

            The unique of the node within the workflow where the edge starts.

          - **DestinationId** *(string) --*

            The unique of the node within the workflow where the edge ends.
    """


_ClientBatchGetWorkflowsResponseWorkflowsTypeDef = TypedDict(
    "_ClientBatchGetWorkflowsResponseWorkflowsTypeDef",
    {
        "Name": str,
        "Description": str,
        "DefaultRunProperties": Dict[str, str],
        "CreatedOn": datetime,
        "LastModifiedOn": datetime,
        "LastRun": ClientBatchGetWorkflowsResponseWorkflowsLastRunTypeDef,
        "Graph": ClientBatchGetWorkflowsResponseWorkflowsGraphTypeDef,
    },
    total=False,
)


class ClientBatchGetWorkflowsResponseWorkflowsTypeDef(
    _ClientBatchGetWorkflowsResponseWorkflowsTypeDef
):
    """
    Type definition for `ClientBatchGetWorkflowsResponse` `Workflows`

    A workflow represents a flow in which AWS Glue components should be executed to complete a
    logical task.

    - **Name** *(string) --*

      The name of the workflow representing the flow.

    - **Description** *(string) --*

      A description of the workflow.

    - **DefaultRunProperties** *(dict) --*

      A collection of properties to be used as part of each execution of the workflow.

      - *(string) --*

        - *(string) --*

    - **CreatedOn** *(datetime) --*

      The date and time when the workflow was created.

    - **LastModifiedOn** *(datetime) --*

      The date and time when the workflow was last modified.

    - **LastRun** *(dict) --*

      The information about the last execution of the workflow.

      - **Name** *(string) --*

        Name of the workflow which was executed.

      - **WorkflowRunId** *(string) --*

        The ID of this workflow run.

      - **WorkflowRunProperties** *(dict) --*

        The workflow run properties which were set during the run.

        - *(string) --*

          - *(string) --*

      - **StartedOn** *(datetime) --*

        The date and time when the workflow run was started.

      - **CompletedOn** *(datetime) --*

        The date and time when the workflow run completed.

      - **Status** *(string) --*

        The status of the workflow run.

      - **Statistics** *(dict) --*

        The statistics of the run.

        - **TotalActions** *(integer) --*

          Total number of Actions in the workflow run.

        - **TimeoutActions** *(integer) --*

          Total number of Actions which timed out.

        - **FailedActions** *(integer) --*

          Total number of Actions which have failed.

        - **StoppedActions** *(integer) --*

          Total number of Actions which have stopped.

        - **SucceededActions** *(integer) --*

          Total number of Actions which have succeeded.

        - **RunningActions** *(integer) --*

          Total number Actions in running state.

      - **Graph** *(dict) --*

        The graph representing all the AWS Glue components that belong to the workflow as nodes
        and directed connections between them as edges.

        - **Nodes** *(list) --*

          A list of the the AWS Glue components belong to the workflow represented as nodes.

          - *(dict) --*

            A node represents an AWS Glue component like Trigger, Job etc. which is part of a
            workflow.

            - **Type** *(string) --*

              The type of AWS Glue component represented by the node.

            - **Name** *(string) --*

              The name of the AWS Glue component represented by the node.

            - **UniqueId** *(string) --*

              The unique Id assigned to the node within the workflow.

            - **TriggerDetails** *(dict) --*

              Details of the Trigger when the node represents a Trigger.

              - **Trigger** *(dict) --*

                The information of the trigger represented by the trigger node.

                - **Name** *(string) --*

                  The name of the trigger.

                - **WorkflowName** *(string) --*

                  The name of the workflow associated with the trigger.

                - **Id** *(string) --*

                  Reserved for future use.

                - **Type** *(string) --*

                  The type of trigger that this is.

                - **State** *(string) --*

                  The current state of the trigger.

                - **Description** *(string) --*

                  A description of this trigger.

                - **Schedule** *(string) --*

                  A ``cron`` expression used to specify the schedule (see `Time-Based Schedules
                  for Jobs and Crawlers
                  <https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html>`__
                  . For example, to run something every day at 12:15 UTC, you would specify:
                  ``cron(15 12 * * ? *)`` .

                - **Actions** *(list) --*

                  The actions initiated by this trigger.

                  - *(dict) --*

                    Defines an action to be initiated by a trigger.

                    - **JobName** *(string) --*

                      The name of a job to be executed.

                    - **Arguments** *(dict) --*

                      The job arguments used when this trigger fires. For this job run, they
                      replace the default arguments set in the job definition itself.

                      You can specify arguments here that your own job-execution script
                      consumes, as well as arguments that AWS Glue itself consumes.

                      For information about how to specify and consume your own Job arguments,
                      see the `Calling AWS Glue APIs in Python
                      <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
                      topic in the developer guide.

                      For information about the key-value pairs that AWS Glue consumes to set
                      up your job, see the `Special Parameters Used by AWS Glue
                      <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
                      topic in the developer guide.

                      - *(string) --*

                        - *(string) --*

                    - **Timeout** *(integer) --*

                      The ``JobRun`` timeout in minutes. This is the maximum time that a job
                      run can consume resources before it is terminated and enters ``TIMEOUT``
                      status. The default is 2,880 minutes (48 hours). This overrides the
                      timeout value set in the parent job.

                    - **SecurityConfiguration** *(string) --*

                      The name of the ``SecurityConfiguration`` structure to be used with this
                      action.

                    - **NotificationProperty** *(dict) --*

                      Specifies configuration properties of a job run notification.

                      - **NotifyDelayAfter** *(integer) --*

                        After a job run starts, the number of minutes to wait before sending a
                        job run delay notification.

                    - **CrawlerName** *(string) --*

                      The name of the crawler to be used with this action.

                - **Predicate** *(dict) --*

                  The predicate of this trigger, which defines when it will fire.

                  - **Logical** *(string) --*

                    An optional field if only one condition is listed. If multiple conditions
                    are listed, then this field is required.

                  - **Conditions** *(list) --*

                    A list of the conditions that determine when the trigger will fire.

                    - *(dict) --*

                      Defines a condition under which a trigger fires.

                      - **LogicalOperator** *(string) --*

                        A logical operator.

                      - **JobName** *(string) --*

                        The name of the job whose ``JobRuns`` this condition applies to, and on
                        which this trigger waits.

                      - **State** *(string) --*

                        The condition state. Currently, the values supported are ``SUCCEEDED``
                        , ``STOPPED`` , ``TIMEOUT`` , and ``FAILED`` .

                      - **CrawlerName** *(string) --*

                        The name of the crawler to which this condition applies.

                      - **CrawlState** *(string) --*

                        The state of the crawler to which this condition applies.

            - **JobDetails** *(dict) --*

              Details of the Job when the node represents a Job.

              - **JobRuns** *(list) --*

                The information for the job runs represented by the job node.

                - *(dict) --*

                  Contains information about a job run.

                  - **Id** *(string) --*

                    The ID of this job run.

                  - **Attempt** *(integer) --*

                    The number of the attempt to run this job.

                  - **PreviousRunId** *(string) --*

                    The ID of the previous run of this job. For example, the ``JobRunId``
                    specified in the ``StartJobRun`` action.

                  - **TriggerName** *(string) --*

                    The name of the trigger that started this job run.

                  - **JobName** *(string) --*

                    The name of the job definition being used in this run.

                  - **StartedOn** *(datetime) --*

                    The date and time at which this job run was started.

                  - **LastModifiedOn** *(datetime) --*

                    The last time that this job run was modified.

                  - **CompletedOn** *(datetime) --*

                    The date and time that this job run completed.

                  - **JobRunState** *(string) --*

                    The current state of the job run.

                  - **Arguments** *(dict) --*

                    The job arguments associated with this run. For this job run, they replace
                    the default arguments set in the job definition itself.

                    You can specify arguments here that your own job-execution script consumes,
                    as well as arguments that AWS Glue itself consumes.

                    For information about how to specify and consume your own job arguments,
                    see the `Calling AWS Glue APIs in Python
                    <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
                    topic in the developer guide.

                    For information about the key-value pairs that AWS Glue consumes to set up
                    your job, see the `Special Parameters Used by AWS Glue
                    <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
                    topic in the developer guide.

                    - *(string) --*

                      - *(string) --*

                  - **ErrorMessage** *(string) --*

                    An error message associated with this job run.

                  - **PredecessorRuns** *(list) --*

                    A list of predecessors to this job run.

                    - *(dict) --*

                      A job run that was used in the predicate of a conditional trigger that
                      triggered this job run.

                      - **JobName** *(string) --*

                        The name of the job definition used by the predecessor job run.

                      - **RunId** *(string) --*

                        The job-run ID of the predecessor job run.

                  - **AllocatedCapacity** *(integer) --*

                    This field is deprecated. Use ``MaxCapacity`` instead.

                    The number of AWS Glue data processing units (DPUs) allocated to this
                    JobRun. From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a
                    relative measure of processing power that consists of 4 vCPUs of compute
                    capacity and 16 GB of memory. For more information, see the `AWS Glue
                    pricing page <https://aws.amazon.com/glue/pricing/>`__ .

                  - **ExecutionTime** *(integer) --*

                    The amount of time (in seconds) that the job run consumed resources.

                  - **Timeout** *(integer) --*

                    The ``JobRun`` timeout in minutes. This is the maximum time that a job run
                    can consume resources before it is terminated and enters ``TIMEOUT``
                    status. The default is 2,880 minutes (48 hours). This overrides the timeout
                    value set in the parent job.

                  - **MaxCapacity** *(float) --*

                    The number of AWS Glue data processing units (DPUs) that can be allocated
                    when this job runs. A DPU is a relative measure of processing power that
                    consists of 4 vCPUs of compute capacity and 16 GB of memory. For more
                    information, see the `AWS Glue pricing page
                    <https://docs.aws.amazon.com/https:/aws.amazon.com/glue/pricing/>`__ .

                    Do not set ``Max Capacity`` if using ``WorkerType`` and ``NumberOfWorkers``
                    .

                    The value that can be allocated for ``MaxCapacity`` depends on whether you
                    are running a Python shell job or an Apache Spark ETL job:

                    * When you specify a Python shell job (``JobCommand.Name`` ="pythonshell"),
                    you can allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.

                    * When you specify an Apache Spark ETL job (``JobCommand.Name``
                    ="glueetl"), you can allocate from 2 to 100 DPUs. The default is 10 DPUs.
                    This job type cannot have a fractional DPU allocation.

                  - **WorkerType** *(string) --*

                    The type of predefined worker that is allocated when a job runs. Accepts a
                    value of Standard, G.1X, or G.2X.

                    * For the ``Standard`` worker type, each worker provides 4 vCPU, 16 GB of
                    memory and a 50GB disk, and 2 executors per worker.

                    * For the ``G.1X`` worker type, each worker provides 4 vCPU, 16 GB of
                    memory and a 64GB disk, and 1 executor per worker.

                    * For the ``G.2X`` worker type, each worker provides 8 vCPU, 32 GB of
                    memory and a 128GB disk, and 1 executor per worker.

                  - **NumberOfWorkers** *(integer) --*

                    The number of workers of a defined ``workerType`` that are allocated when a
                    job runs.

                    The maximum number of workers you can define are 299 for ``G.1X`` , and 149
                    for ``G.2X`` .

                  - **SecurityConfiguration** *(string) --*

                    The name of the ``SecurityConfiguration`` structure to be used with this
                    job run.

                  - **LogGroupName** *(string) --*

                    The name of the log group for secure logging that can be server-side
                    encrypted in Amazon CloudWatch using AWS KMS. This name can be
                    ``/aws-glue/jobs/`` , in which case the default encryption is ``NONE`` . If
                    you add a role name and ``SecurityConfiguration`` name (in other words,
                    ``/aws-glue/jobs-yourRoleName-yourSecurityConfigurationName/`` ), then that
                    security configuration is used to encrypt the log group.

                  - **NotificationProperty** *(dict) --*

                    Specifies configuration properties of a job run notification.

                    - **NotifyDelayAfter** *(integer) --*

                      After a job run starts, the number of minutes to wait before sending a
                      job run delay notification.

                  - **GlueVersion** *(string) --*

                    Glue version determines the versions of Apache Spark and Python that AWS
                    Glue supports. The Python version indicates the version supported for jobs
                    of type Spark.

                    For more information about the available AWS Glue versions and
                    corresponding Spark and Python versions, see `Glue version
                    <https://docs.aws.amazon.com/glue/latest/dg/add-job.html>`__ in the
                    developer guide.

                    Jobs that are created without specifying a Glue version default to Glue 0.9.

            - **CrawlerDetails** *(dict) --*

              Details of the crawler when the node represents a crawler.

              - **Crawls** *(list) --*

                A list of crawls represented by the crawl node.

                - *(dict) --*

                  The details of a crawl in the workflow.

                  - **State** *(string) --*

                    The state of the crawler.

                  - **StartedOn** *(datetime) --*

                    The date and time on which the crawl started.

                  - **CompletedOn** *(datetime) --*

                    The date and time on which the crawl completed.

                  - **ErrorMessage** *(string) --*

                    The error message associated with the crawl.

                  - **LogGroup** *(string) --*

                    The log group associated with the crawl.

                  - **LogStream** *(string) --*

                    The log stream associated with the crawl.

        - **Edges** *(list) --*

          A list of all the directed connections between the nodes belonging to the workflow.

          - *(dict) --*

            An edge represents a directed connection between two AWS Glue components which are
            part of the workflow the edge belongs to.

            - **SourceId** *(string) --*

              The unique of the node within the workflow where the edge starts.

            - **DestinationId** *(string) --*

              The unique of the node within the workflow where the edge ends.

    - **Graph** *(dict) --*

      The graph representing all the AWS Glue components that belong to the workflow as nodes
      and directed connections between them as edges.

      - **Nodes** *(list) --*

        A list of the the AWS Glue components belong to the workflow represented as nodes.

        - *(dict) --*

          A node represents an AWS Glue component like Trigger, Job etc. which is part of a
          workflow.

          - **Type** *(string) --*

            The type of AWS Glue component represented by the node.

          - **Name** *(string) --*

            The name of the AWS Glue component represented by the node.

          - **UniqueId** *(string) --*

            The unique Id assigned to the node within the workflow.

          - **TriggerDetails** *(dict) --*

            Details of the Trigger when the node represents a Trigger.

            - **Trigger** *(dict) --*

              The information of the trigger represented by the trigger node.

              - **Name** *(string) --*

                The name of the trigger.

              - **WorkflowName** *(string) --*

                The name of the workflow associated with the trigger.

              - **Id** *(string) --*

                Reserved for future use.

              - **Type** *(string) --*

                The type of trigger that this is.

              - **State** *(string) --*

                The current state of the trigger.

              - **Description** *(string) --*

                A description of this trigger.

              - **Schedule** *(string) --*

                A ``cron`` expression used to specify the schedule (see `Time-Based Schedules
                for Jobs and Crawlers
                <https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html>`__
                . For example, to run something every day at 12:15 UTC, you would specify:
                ``cron(15 12 * * ? *)`` .

              - **Actions** *(list) --*

                The actions initiated by this trigger.

                - *(dict) --*

                  Defines an action to be initiated by a trigger.

                  - **JobName** *(string) --*

                    The name of a job to be executed.

                  - **Arguments** *(dict) --*

                    The job arguments used when this trigger fires. For this job run, they
                    replace the default arguments set in the job definition itself.

                    You can specify arguments here that your own job-execution script consumes,
                    as well as arguments that AWS Glue itself consumes.

                    For information about how to specify and consume your own Job arguments,
                    see the `Calling AWS Glue APIs in Python
                    <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
                    topic in the developer guide.

                    For information about the key-value pairs that AWS Glue consumes to set up
                    your job, see the `Special Parameters Used by AWS Glue
                    <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
                    topic in the developer guide.

                    - *(string) --*

                      - *(string) --*

                  - **Timeout** *(integer) --*

                    The ``JobRun`` timeout in minutes. This is the maximum time that a job run
                    can consume resources before it is terminated and enters ``TIMEOUT``
                    status. The default is 2,880 minutes (48 hours). This overrides the timeout
                    value set in the parent job.

                  - **SecurityConfiguration** *(string) --*

                    The name of the ``SecurityConfiguration`` structure to be used with this
                    action.

                  - **NotificationProperty** *(dict) --*

                    Specifies configuration properties of a job run notification.

                    - **NotifyDelayAfter** *(integer) --*

                      After a job run starts, the number of minutes to wait before sending a
                      job run delay notification.

                  - **CrawlerName** *(string) --*

                    The name of the crawler to be used with this action.

              - **Predicate** *(dict) --*

                The predicate of this trigger, which defines when it will fire.

                - **Logical** *(string) --*

                  An optional field if only one condition is listed. If multiple conditions are
                  listed, then this field is required.

                - **Conditions** *(list) --*

                  A list of the conditions that determine when the trigger will fire.

                  - *(dict) --*

                    Defines a condition under which a trigger fires.

                    - **LogicalOperator** *(string) --*

                      A logical operator.

                    - **JobName** *(string) --*

                      The name of the job whose ``JobRuns`` this condition applies to, and on
                      which this trigger waits.

                    - **State** *(string) --*

                      The condition state. Currently, the values supported are ``SUCCEEDED`` ,
                      ``STOPPED`` , ``TIMEOUT`` , and ``FAILED`` .

                    - **CrawlerName** *(string) --*

                      The name of the crawler to which this condition applies.

                    - **CrawlState** *(string) --*

                      The state of the crawler to which this condition applies.

          - **JobDetails** *(dict) --*

            Details of the Job when the node represents a Job.

            - **JobRuns** *(list) --*

              The information for the job runs represented by the job node.

              - *(dict) --*

                Contains information about a job run.

                - **Id** *(string) --*

                  The ID of this job run.

                - **Attempt** *(integer) --*

                  The number of the attempt to run this job.

                - **PreviousRunId** *(string) --*

                  The ID of the previous run of this job. For example, the ``JobRunId``
                  specified in the ``StartJobRun`` action.

                - **TriggerName** *(string) --*

                  The name of the trigger that started this job run.

                - **JobName** *(string) --*

                  The name of the job definition being used in this run.

                - **StartedOn** *(datetime) --*

                  The date and time at which this job run was started.

                - **LastModifiedOn** *(datetime) --*

                  The last time that this job run was modified.

                - **CompletedOn** *(datetime) --*

                  The date and time that this job run completed.

                - **JobRunState** *(string) --*

                  The current state of the job run.

                - **Arguments** *(dict) --*

                  The job arguments associated with this run. For this job run, they replace
                  the default arguments set in the job definition itself.

                  You can specify arguments here that your own job-execution script consumes,
                  as well as arguments that AWS Glue itself consumes.

                  For information about how to specify and consume your own job arguments, see
                  the `Calling AWS Glue APIs in Python
                  <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
                  topic in the developer guide.

                  For information about the key-value pairs that AWS Glue consumes to set up
                  your job, see the `Special Parameters Used by AWS Glue
                  <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
                  topic in the developer guide.

                  - *(string) --*

                    - *(string) --*

                - **ErrorMessage** *(string) --*

                  An error message associated with this job run.

                - **PredecessorRuns** *(list) --*

                  A list of predecessors to this job run.

                  - *(dict) --*

                    A job run that was used in the predicate of a conditional trigger that
                    triggered this job run.

                    - **JobName** *(string) --*

                      The name of the job definition used by the predecessor job run.

                    - **RunId** *(string) --*

                      The job-run ID of the predecessor job run.

                - **AllocatedCapacity** *(integer) --*

                  This field is deprecated. Use ``MaxCapacity`` instead.

                  The number of AWS Glue data processing units (DPUs) allocated to this JobRun.
                  From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a relative
                  measure of processing power that consists of 4 vCPUs of compute capacity and
                  16 GB of memory. For more information, see the `AWS Glue pricing page
                  <https://aws.amazon.com/glue/pricing/>`__ .

                - **ExecutionTime** *(integer) --*

                  The amount of time (in seconds) that the job run consumed resources.

                - **Timeout** *(integer) --*

                  The ``JobRun`` timeout in minutes. This is the maximum time that a job run
                  can consume resources before it is terminated and enters ``TIMEOUT`` status.
                  The default is 2,880 minutes (48 hours). This overrides the timeout value set
                  in the parent job.

                - **MaxCapacity** *(float) --*

                  The number of AWS Glue data processing units (DPUs) that can be allocated
                  when this job runs. A DPU is a relative measure of processing power that
                  consists of 4 vCPUs of compute capacity and 16 GB of memory. For more
                  information, see the `AWS Glue pricing page
                  <https://docs.aws.amazon.com/https:/aws.amazon.com/glue/pricing/>`__ .

                  Do not set ``Max Capacity`` if using ``WorkerType`` and ``NumberOfWorkers`` .

                  The value that can be allocated for ``MaxCapacity`` depends on whether you
                  are running a Python shell job or an Apache Spark ETL job:

                  * When you specify a Python shell job (``JobCommand.Name`` ="pythonshell"),
                  you can allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.

                  * When you specify an Apache Spark ETL job (``JobCommand.Name`` ="glueetl"),
                  you can allocate from 2 to 100 DPUs. The default is 10 DPUs. This job type
                  cannot have a fractional DPU allocation.

                - **WorkerType** *(string) --*

                  The type of predefined worker that is allocated when a job runs. Accepts a
                  value of Standard, G.1X, or G.2X.

                  * For the ``Standard`` worker type, each worker provides 4 vCPU, 16 GB of
                  memory and a 50GB disk, and 2 executors per worker.

                  * For the ``G.1X`` worker type, each worker provides 4 vCPU, 16 GB of memory
                  and a 64GB disk, and 1 executor per worker.

                  * For the ``G.2X`` worker type, each worker provides 8 vCPU, 32 GB of memory
                  and a 128GB disk, and 1 executor per worker.

                - **NumberOfWorkers** *(integer) --*

                  The number of workers of a defined ``workerType`` that are allocated when a
                  job runs.

                  The maximum number of workers you can define are 299 for ``G.1X`` , and 149
                  for ``G.2X`` .

                - **SecurityConfiguration** *(string) --*

                  The name of the ``SecurityConfiguration`` structure to be used with this job
                  run.

                - **LogGroupName** *(string) --*

                  The name of the log group for secure logging that can be server-side
                  encrypted in Amazon CloudWatch using AWS KMS. This name can be
                  ``/aws-glue/jobs/`` , in which case the default encryption is ``NONE`` . If
                  you add a role name and ``SecurityConfiguration`` name (in other words,
                  ``/aws-glue/jobs-yourRoleName-yourSecurityConfigurationName/`` ), then that
                  security configuration is used to encrypt the log group.

                - **NotificationProperty** *(dict) --*

                  Specifies configuration properties of a job run notification.

                  - **NotifyDelayAfter** *(integer) --*

                    After a job run starts, the number of minutes to wait before sending a job
                    run delay notification.

                - **GlueVersion** *(string) --*

                  Glue version determines the versions of Apache Spark and Python that AWS Glue
                  supports. The Python version indicates the version supported for jobs of type
                  Spark.

                  For more information about the available AWS Glue versions and corresponding
                  Spark and Python versions, see `Glue version
                  <https://docs.aws.amazon.com/glue/latest/dg/add-job.html>`__ in the developer
                  guide.

                  Jobs that are created without specifying a Glue version default to Glue 0.9.

          - **CrawlerDetails** *(dict) --*

            Details of the crawler when the node represents a crawler.

            - **Crawls** *(list) --*

              A list of crawls represented by the crawl node.

              - *(dict) --*

                The details of a crawl in the workflow.

                - **State** *(string) --*

                  The state of the crawler.

                - **StartedOn** *(datetime) --*

                  The date and time on which the crawl started.

                - **CompletedOn** *(datetime) --*

                  The date and time on which the crawl completed.

                - **ErrorMessage** *(string) --*

                  The error message associated with the crawl.

                - **LogGroup** *(string) --*

                  The log group associated with the crawl.

                - **LogStream** *(string) --*

                  The log stream associated with the crawl.

      - **Edges** *(list) --*

        A list of all the directed connections between the nodes belonging to the workflow.

        - *(dict) --*

          An edge represents a directed connection between two AWS Glue components which are
          part of the workflow the edge belongs to.

          - **SourceId** *(string) --*

            The unique of the node within the workflow where the edge starts.

          - **DestinationId** *(string) --*

            The unique of the node within the workflow where the edge ends.
    """


_ClientBatchGetWorkflowsResponseTypeDef = TypedDict(
    "_ClientBatchGetWorkflowsResponseTypeDef",
    {
        "Workflows": List[ClientBatchGetWorkflowsResponseWorkflowsTypeDef],
        "MissingWorkflows": List[str],
    },
    total=False,
)


class ClientBatchGetWorkflowsResponseTypeDef(_ClientBatchGetWorkflowsResponseTypeDef):
    """
    Type definition for `ClientBatchGetWorkflows` `Response`

    - **Workflows** *(list) --*

      A list of workflow resource metadata.

      - *(dict) --*

        A workflow represents a flow in which AWS Glue components should be executed to complete a
        logical task.

        - **Name** *(string) --*

          The name of the workflow representing the flow.

        - **Description** *(string) --*

          A description of the workflow.

        - **DefaultRunProperties** *(dict) --*

          A collection of properties to be used as part of each execution of the workflow.

          - *(string) --*

            - *(string) --*

        - **CreatedOn** *(datetime) --*

          The date and time when the workflow was created.

        - **LastModifiedOn** *(datetime) --*

          The date and time when the workflow was last modified.

        - **LastRun** *(dict) --*

          The information about the last execution of the workflow.

          - **Name** *(string) --*

            Name of the workflow which was executed.

          - **WorkflowRunId** *(string) --*

            The ID of this workflow run.

          - **WorkflowRunProperties** *(dict) --*

            The workflow run properties which were set during the run.

            - *(string) --*

              - *(string) --*

          - **StartedOn** *(datetime) --*

            The date and time when the workflow run was started.

          - **CompletedOn** *(datetime) --*

            The date and time when the workflow run completed.

          - **Status** *(string) --*

            The status of the workflow run.

          - **Statistics** *(dict) --*

            The statistics of the run.

            - **TotalActions** *(integer) --*

              Total number of Actions in the workflow run.

            - **TimeoutActions** *(integer) --*

              Total number of Actions which timed out.

            - **FailedActions** *(integer) --*

              Total number of Actions which have failed.

            - **StoppedActions** *(integer) --*

              Total number of Actions which have stopped.

            - **SucceededActions** *(integer) --*

              Total number of Actions which have succeeded.

            - **RunningActions** *(integer) --*

              Total number Actions in running state.

          - **Graph** *(dict) --*

            The graph representing all the AWS Glue components that belong to the workflow as nodes
            and directed connections between them as edges.

            - **Nodes** *(list) --*

              A list of the the AWS Glue components belong to the workflow represented as nodes.

              - *(dict) --*

                A node represents an AWS Glue component like Trigger, Job etc. which is part of a
                workflow.

                - **Type** *(string) --*

                  The type of AWS Glue component represented by the node.

                - **Name** *(string) --*

                  The name of the AWS Glue component represented by the node.

                - **UniqueId** *(string) --*

                  The unique Id assigned to the node within the workflow.

                - **TriggerDetails** *(dict) --*

                  Details of the Trigger when the node represents a Trigger.

                  - **Trigger** *(dict) --*

                    The information of the trigger represented by the trigger node.

                    - **Name** *(string) --*

                      The name of the trigger.

                    - **WorkflowName** *(string) --*

                      The name of the workflow associated with the trigger.

                    - **Id** *(string) --*

                      Reserved for future use.

                    - **Type** *(string) --*

                      The type of trigger that this is.

                    - **State** *(string) --*

                      The current state of the trigger.

                    - **Description** *(string) --*

                      A description of this trigger.

                    - **Schedule** *(string) --*

                      A ``cron`` expression used to specify the schedule (see `Time-Based Schedules
                      for Jobs and Crawlers
                      <https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html>`__
                      . For example, to run something every day at 12:15 UTC, you would specify:
                      ``cron(15 12 * * ? *)`` .

                    - **Actions** *(list) --*

                      The actions initiated by this trigger.

                      - *(dict) --*

                        Defines an action to be initiated by a trigger.

                        - **JobName** *(string) --*

                          The name of a job to be executed.

                        - **Arguments** *(dict) --*

                          The job arguments used when this trigger fires. For this job run, they
                          replace the default arguments set in the job definition itself.

                          You can specify arguments here that your own job-execution script
                          consumes, as well as arguments that AWS Glue itself consumes.

                          For information about how to specify and consume your own Job arguments,
                          see the `Calling AWS Glue APIs in Python
                          <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
                          topic in the developer guide.

                          For information about the key-value pairs that AWS Glue consumes to set
                          up your job, see the `Special Parameters Used by AWS Glue
                          <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
                          topic in the developer guide.

                          - *(string) --*

                            - *(string) --*

                        - **Timeout** *(integer) --*

                          The ``JobRun`` timeout in minutes. This is the maximum time that a job
                          run can consume resources before it is terminated and enters ``TIMEOUT``
                          status. The default is 2,880 minutes (48 hours). This overrides the
                          timeout value set in the parent job.

                        - **SecurityConfiguration** *(string) --*

                          The name of the ``SecurityConfiguration`` structure to be used with this
                          action.

                        - **NotificationProperty** *(dict) --*

                          Specifies configuration properties of a job run notification.

                          - **NotifyDelayAfter** *(integer) --*

                            After a job run starts, the number of minutes to wait before sending a
                            job run delay notification.

                        - **CrawlerName** *(string) --*

                          The name of the crawler to be used with this action.

                    - **Predicate** *(dict) --*

                      The predicate of this trigger, which defines when it will fire.

                      - **Logical** *(string) --*

                        An optional field if only one condition is listed. If multiple conditions
                        are listed, then this field is required.

                      - **Conditions** *(list) --*

                        A list of the conditions that determine when the trigger will fire.

                        - *(dict) --*

                          Defines a condition under which a trigger fires.

                          - **LogicalOperator** *(string) --*

                            A logical operator.

                          - **JobName** *(string) --*

                            The name of the job whose ``JobRuns`` this condition applies to, and on
                            which this trigger waits.

                          - **State** *(string) --*

                            The condition state. Currently, the values supported are ``SUCCEEDED``
                            , ``STOPPED`` , ``TIMEOUT`` , and ``FAILED`` .

                          - **CrawlerName** *(string) --*

                            The name of the crawler to which this condition applies.

                          - **CrawlState** *(string) --*

                            The state of the crawler to which this condition applies.

                - **JobDetails** *(dict) --*

                  Details of the Job when the node represents a Job.

                  - **JobRuns** *(list) --*

                    The information for the job runs represented by the job node.

                    - *(dict) --*

                      Contains information about a job run.

                      - **Id** *(string) --*

                        The ID of this job run.

                      - **Attempt** *(integer) --*

                        The number of the attempt to run this job.

                      - **PreviousRunId** *(string) --*

                        The ID of the previous run of this job. For example, the ``JobRunId``
                        specified in the ``StartJobRun`` action.

                      - **TriggerName** *(string) --*

                        The name of the trigger that started this job run.

                      - **JobName** *(string) --*

                        The name of the job definition being used in this run.

                      - **StartedOn** *(datetime) --*

                        The date and time at which this job run was started.

                      - **LastModifiedOn** *(datetime) --*

                        The last time that this job run was modified.

                      - **CompletedOn** *(datetime) --*

                        The date and time that this job run completed.

                      - **JobRunState** *(string) --*

                        The current state of the job run.

                      - **Arguments** *(dict) --*

                        The job arguments associated with this run. For this job run, they replace
                        the default arguments set in the job definition itself.

                        You can specify arguments here that your own job-execution script consumes,
                        as well as arguments that AWS Glue itself consumes.

                        For information about how to specify and consume your own job arguments,
                        see the `Calling AWS Glue APIs in Python
                        <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
                        topic in the developer guide.

                        For information about the key-value pairs that AWS Glue consumes to set up
                        your job, see the `Special Parameters Used by AWS Glue
                        <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
                        topic in the developer guide.

                        - *(string) --*

                          - *(string) --*

                      - **ErrorMessage** *(string) --*

                        An error message associated with this job run.

                      - **PredecessorRuns** *(list) --*

                        A list of predecessors to this job run.

                        - *(dict) --*

                          A job run that was used in the predicate of a conditional trigger that
                          triggered this job run.

                          - **JobName** *(string) --*

                            The name of the job definition used by the predecessor job run.

                          - **RunId** *(string) --*

                            The job-run ID of the predecessor job run.

                      - **AllocatedCapacity** *(integer) --*

                        This field is deprecated. Use ``MaxCapacity`` instead.

                        The number of AWS Glue data processing units (DPUs) allocated to this
                        JobRun. From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a
                        relative measure of processing power that consists of 4 vCPUs of compute
                        capacity and 16 GB of memory. For more information, see the `AWS Glue
                        pricing page <https://aws.amazon.com/glue/pricing/>`__ .

                      - **ExecutionTime** *(integer) --*

                        The amount of time (in seconds) that the job run consumed resources.

                      - **Timeout** *(integer) --*

                        The ``JobRun`` timeout in minutes. This is the maximum time that a job run
                        can consume resources before it is terminated and enters ``TIMEOUT``
                        status. The default is 2,880 minutes (48 hours). This overrides the timeout
                        value set in the parent job.

                      - **MaxCapacity** *(float) --*

                        The number of AWS Glue data processing units (DPUs) that can be allocated
                        when this job runs. A DPU is a relative measure of processing power that
                        consists of 4 vCPUs of compute capacity and 16 GB of memory. For more
                        information, see the `AWS Glue pricing page
                        <https://docs.aws.amazon.com/https:/aws.amazon.com/glue/pricing/>`__ .

                        Do not set ``Max Capacity`` if using ``WorkerType`` and ``NumberOfWorkers``
                        .

                        The value that can be allocated for ``MaxCapacity`` depends on whether you
                        are running a Python shell job or an Apache Spark ETL job:

                        * When you specify a Python shell job (``JobCommand.Name`` ="pythonshell"),
                        you can allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.

                        * When you specify an Apache Spark ETL job (``JobCommand.Name``
                        ="glueetl"), you can allocate from 2 to 100 DPUs. The default is 10 DPUs.
                        This job type cannot have a fractional DPU allocation.

                      - **WorkerType** *(string) --*

                        The type of predefined worker that is allocated when a job runs. Accepts a
                        value of Standard, G.1X, or G.2X.

                        * For the ``Standard`` worker type, each worker provides 4 vCPU, 16 GB of
                        memory and a 50GB disk, and 2 executors per worker.

                        * For the ``G.1X`` worker type, each worker provides 4 vCPU, 16 GB of
                        memory and a 64GB disk, and 1 executor per worker.

                        * For the ``G.2X`` worker type, each worker provides 8 vCPU, 32 GB of
                        memory and a 128GB disk, and 1 executor per worker.

                      - **NumberOfWorkers** *(integer) --*

                        The number of workers of a defined ``workerType`` that are allocated when a
                        job runs.

                        The maximum number of workers you can define are 299 for ``G.1X`` , and 149
                        for ``G.2X`` .

                      - **SecurityConfiguration** *(string) --*

                        The name of the ``SecurityConfiguration`` structure to be used with this
                        job run.

                      - **LogGroupName** *(string) --*

                        The name of the log group for secure logging that can be server-side
                        encrypted in Amazon CloudWatch using AWS KMS. This name can be
                        ``/aws-glue/jobs/`` , in which case the default encryption is ``NONE`` . If
                        you add a role name and ``SecurityConfiguration`` name (in other words,
                        ``/aws-glue/jobs-yourRoleName-yourSecurityConfigurationName/`` ), then that
                        security configuration is used to encrypt the log group.

                      - **NotificationProperty** *(dict) --*

                        Specifies configuration properties of a job run notification.

                        - **NotifyDelayAfter** *(integer) --*

                          After a job run starts, the number of minutes to wait before sending a
                          job run delay notification.

                      - **GlueVersion** *(string) --*

                        Glue version determines the versions of Apache Spark and Python that AWS
                        Glue supports. The Python version indicates the version supported for jobs
                        of type Spark.

                        For more information about the available AWS Glue versions and
                        corresponding Spark and Python versions, see `Glue version
                        <https://docs.aws.amazon.com/glue/latest/dg/add-job.html>`__ in the
                        developer guide.

                        Jobs that are created without specifying a Glue version default to Glue 0.9.

                - **CrawlerDetails** *(dict) --*

                  Details of the crawler when the node represents a crawler.

                  - **Crawls** *(list) --*

                    A list of crawls represented by the crawl node.

                    - *(dict) --*

                      The details of a crawl in the workflow.

                      - **State** *(string) --*

                        The state of the crawler.

                      - **StartedOn** *(datetime) --*

                        The date and time on which the crawl started.

                      - **CompletedOn** *(datetime) --*

                        The date and time on which the crawl completed.

                      - **ErrorMessage** *(string) --*

                        The error message associated with the crawl.

                      - **LogGroup** *(string) --*

                        The log group associated with the crawl.

                      - **LogStream** *(string) --*

                        The log stream associated with the crawl.

            - **Edges** *(list) --*

              A list of all the directed connections between the nodes belonging to the workflow.

              - *(dict) --*

                An edge represents a directed connection between two AWS Glue components which are
                part of the workflow the edge belongs to.

                - **SourceId** *(string) --*

                  The unique of the node within the workflow where the edge starts.

                - **DestinationId** *(string) --*

                  The unique of the node within the workflow where the edge ends.

        - **Graph** *(dict) --*

          The graph representing all the AWS Glue components that belong to the workflow as nodes
          and directed connections between them as edges.

          - **Nodes** *(list) --*

            A list of the the AWS Glue components belong to the workflow represented as nodes.

            - *(dict) --*

              A node represents an AWS Glue component like Trigger, Job etc. which is part of a
              workflow.

              - **Type** *(string) --*

                The type of AWS Glue component represented by the node.

              - **Name** *(string) --*

                The name of the AWS Glue component represented by the node.

              - **UniqueId** *(string) --*

                The unique Id assigned to the node within the workflow.

              - **TriggerDetails** *(dict) --*

                Details of the Trigger when the node represents a Trigger.

                - **Trigger** *(dict) --*

                  The information of the trigger represented by the trigger node.

                  - **Name** *(string) --*

                    The name of the trigger.

                  - **WorkflowName** *(string) --*

                    The name of the workflow associated with the trigger.

                  - **Id** *(string) --*

                    Reserved for future use.

                  - **Type** *(string) --*

                    The type of trigger that this is.

                  - **State** *(string) --*

                    The current state of the trigger.

                  - **Description** *(string) --*

                    A description of this trigger.

                  - **Schedule** *(string) --*

                    A ``cron`` expression used to specify the schedule (see `Time-Based Schedules
                    for Jobs and Crawlers
                    <https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html>`__
                    . For example, to run something every day at 12:15 UTC, you would specify:
                    ``cron(15 12 * * ? *)`` .

                  - **Actions** *(list) --*

                    The actions initiated by this trigger.

                    - *(dict) --*

                      Defines an action to be initiated by a trigger.

                      - **JobName** *(string) --*

                        The name of a job to be executed.

                      - **Arguments** *(dict) --*

                        The job arguments used when this trigger fires. For this job run, they
                        replace the default arguments set in the job definition itself.

                        You can specify arguments here that your own job-execution script consumes,
                        as well as arguments that AWS Glue itself consumes.

                        For information about how to specify and consume your own Job arguments,
                        see the `Calling AWS Glue APIs in Python
                        <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
                        topic in the developer guide.

                        For information about the key-value pairs that AWS Glue consumes to set up
                        your job, see the `Special Parameters Used by AWS Glue
                        <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
                        topic in the developer guide.

                        - *(string) --*

                          - *(string) --*

                      - **Timeout** *(integer) --*

                        The ``JobRun`` timeout in minutes. This is the maximum time that a job run
                        can consume resources before it is terminated and enters ``TIMEOUT``
                        status. The default is 2,880 minutes (48 hours). This overrides the timeout
                        value set in the parent job.

                      - **SecurityConfiguration** *(string) --*

                        The name of the ``SecurityConfiguration`` structure to be used with this
                        action.

                      - **NotificationProperty** *(dict) --*

                        Specifies configuration properties of a job run notification.

                        - **NotifyDelayAfter** *(integer) --*

                          After a job run starts, the number of minutes to wait before sending a
                          job run delay notification.

                      - **CrawlerName** *(string) --*

                        The name of the crawler to be used with this action.

                  - **Predicate** *(dict) --*

                    The predicate of this trigger, which defines when it will fire.

                    - **Logical** *(string) --*

                      An optional field if only one condition is listed. If multiple conditions are
                      listed, then this field is required.

                    - **Conditions** *(list) --*

                      A list of the conditions that determine when the trigger will fire.

                      - *(dict) --*

                        Defines a condition under which a trigger fires.

                        - **LogicalOperator** *(string) --*

                          A logical operator.

                        - **JobName** *(string) --*

                          The name of the job whose ``JobRuns`` this condition applies to, and on
                          which this trigger waits.

                        - **State** *(string) --*

                          The condition state. Currently, the values supported are ``SUCCEEDED`` ,
                          ``STOPPED`` , ``TIMEOUT`` , and ``FAILED`` .

                        - **CrawlerName** *(string) --*

                          The name of the crawler to which this condition applies.

                        - **CrawlState** *(string) --*

                          The state of the crawler to which this condition applies.

              - **JobDetails** *(dict) --*

                Details of the Job when the node represents a Job.

                - **JobRuns** *(list) --*

                  The information for the job runs represented by the job node.

                  - *(dict) --*

                    Contains information about a job run.

                    - **Id** *(string) --*

                      The ID of this job run.

                    - **Attempt** *(integer) --*

                      The number of the attempt to run this job.

                    - **PreviousRunId** *(string) --*

                      The ID of the previous run of this job. For example, the ``JobRunId``
                      specified in the ``StartJobRun`` action.

                    - **TriggerName** *(string) --*

                      The name of the trigger that started this job run.

                    - **JobName** *(string) --*

                      The name of the job definition being used in this run.

                    - **StartedOn** *(datetime) --*

                      The date and time at which this job run was started.

                    - **LastModifiedOn** *(datetime) --*

                      The last time that this job run was modified.

                    - **CompletedOn** *(datetime) --*

                      The date and time that this job run completed.

                    - **JobRunState** *(string) --*

                      The current state of the job run.

                    - **Arguments** *(dict) --*

                      The job arguments associated with this run. For this job run, they replace
                      the default arguments set in the job definition itself.

                      You can specify arguments here that your own job-execution script consumes,
                      as well as arguments that AWS Glue itself consumes.

                      For information about how to specify and consume your own job arguments, see
                      the `Calling AWS Glue APIs in Python
                      <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
                      topic in the developer guide.

                      For information about the key-value pairs that AWS Glue consumes to set up
                      your job, see the `Special Parameters Used by AWS Glue
                      <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
                      topic in the developer guide.

                      - *(string) --*

                        - *(string) --*

                    - **ErrorMessage** *(string) --*

                      An error message associated with this job run.

                    - **PredecessorRuns** *(list) --*

                      A list of predecessors to this job run.

                      - *(dict) --*

                        A job run that was used in the predicate of a conditional trigger that
                        triggered this job run.

                        - **JobName** *(string) --*

                          The name of the job definition used by the predecessor job run.

                        - **RunId** *(string) --*

                          The job-run ID of the predecessor job run.

                    - **AllocatedCapacity** *(integer) --*

                      This field is deprecated. Use ``MaxCapacity`` instead.

                      The number of AWS Glue data processing units (DPUs) allocated to this JobRun.
                      From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a relative
                      measure of processing power that consists of 4 vCPUs of compute capacity and
                      16 GB of memory. For more information, see the `AWS Glue pricing page
                      <https://aws.amazon.com/glue/pricing/>`__ .

                    - **ExecutionTime** *(integer) --*

                      The amount of time (in seconds) that the job run consumed resources.

                    - **Timeout** *(integer) --*

                      The ``JobRun`` timeout in minutes. This is the maximum time that a job run
                      can consume resources before it is terminated and enters ``TIMEOUT`` status.
                      The default is 2,880 minutes (48 hours). This overrides the timeout value set
                      in the parent job.

                    - **MaxCapacity** *(float) --*

                      The number of AWS Glue data processing units (DPUs) that can be allocated
                      when this job runs. A DPU is a relative measure of processing power that
                      consists of 4 vCPUs of compute capacity and 16 GB of memory. For more
                      information, see the `AWS Glue pricing page
                      <https://docs.aws.amazon.com/https:/aws.amazon.com/glue/pricing/>`__ .

                      Do not set ``Max Capacity`` if using ``WorkerType`` and ``NumberOfWorkers`` .

                      The value that can be allocated for ``MaxCapacity`` depends on whether you
                      are running a Python shell job or an Apache Spark ETL job:

                      * When you specify a Python shell job (``JobCommand.Name`` ="pythonshell"),
                      you can allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.

                      * When you specify an Apache Spark ETL job (``JobCommand.Name`` ="glueetl"),
                      you can allocate from 2 to 100 DPUs. The default is 10 DPUs. This job type
                      cannot have a fractional DPU allocation.

                    - **WorkerType** *(string) --*

                      The type of predefined worker that is allocated when a job runs. Accepts a
                      value of Standard, G.1X, or G.2X.

                      * For the ``Standard`` worker type, each worker provides 4 vCPU, 16 GB of
                      memory and a 50GB disk, and 2 executors per worker.

                      * For the ``G.1X`` worker type, each worker provides 4 vCPU, 16 GB of memory
                      and a 64GB disk, and 1 executor per worker.

                      * For the ``G.2X`` worker type, each worker provides 8 vCPU, 32 GB of memory
                      and a 128GB disk, and 1 executor per worker.

                    - **NumberOfWorkers** *(integer) --*

                      The number of workers of a defined ``workerType`` that are allocated when a
                      job runs.

                      The maximum number of workers you can define are 299 for ``G.1X`` , and 149
                      for ``G.2X`` .

                    - **SecurityConfiguration** *(string) --*

                      The name of the ``SecurityConfiguration`` structure to be used with this job
                      run.

                    - **LogGroupName** *(string) --*

                      The name of the log group for secure logging that can be server-side
                      encrypted in Amazon CloudWatch using AWS KMS. This name can be
                      ``/aws-glue/jobs/`` , in which case the default encryption is ``NONE`` . If
                      you add a role name and ``SecurityConfiguration`` name (in other words,
                      ``/aws-glue/jobs-yourRoleName-yourSecurityConfigurationName/`` ), then that
                      security configuration is used to encrypt the log group.

                    - **NotificationProperty** *(dict) --*

                      Specifies configuration properties of a job run notification.

                      - **NotifyDelayAfter** *(integer) --*

                        After a job run starts, the number of minutes to wait before sending a job
                        run delay notification.

                    - **GlueVersion** *(string) --*

                      Glue version determines the versions of Apache Spark and Python that AWS Glue
                      supports. The Python version indicates the version supported for jobs of type
                      Spark.

                      For more information about the available AWS Glue versions and corresponding
                      Spark and Python versions, see `Glue version
                      <https://docs.aws.amazon.com/glue/latest/dg/add-job.html>`__ in the developer
                      guide.

                      Jobs that are created without specifying a Glue version default to Glue 0.9.

              - **CrawlerDetails** *(dict) --*

                Details of the crawler when the node represents a crawler.

                - **Crawls** *(list) --*

                  A list of crawls represented by the crawl node.

                  - *(dict) --*

                    The details of a crawl in the workflow.

                    - **State** *(string) --*

                      The state of the crawler.

                    - **StartedOn** *(datetime) --*

                      The date and time on which the crawl started.

                    - **CompletedOn** *(datetime) --*

                      The date and time on which the crawl completed.

                    - **ErrorMessage** *(string) --*

                      The error message associated with the crawl.

                    - **LogGroup** *(string) --*

                      The log group associated with the crawl.

                    - **LogStream** *(string) --*

                      The log stream associated with the crawl.

          - **Edges** *(list) --*

            A list of all the directed connections between the nodes belonging to the workflow.

            - *(dict) --*

              An edge represents a directed connection between two AWS Glue components which are
              part of the workflow the edge belongs to.

              - **SourceId** *(string) --*

                The unique of the node within the workflow where the edge starts.

              - **DestinationId** *(string) --*

                The unique of the node within the workflow where the edge ends.

    - **MissingWorkflows** *(list) --*

      A list of names of workflows not found.

      - *(string) --*
    """


_ClientBatchStopJobRunResponseErrorsErrorDetailTypeDef = TypedDict(
    "_ClientBatchStopJobRunResponseErrorsErrorDetailTypeDef",
    {"ErrorCode": str, "ErrorMessage": str},
    total=False,
)


class ClientBatchStopJobRunResponseErrorsErrorDetailTypeDef(
    _ClientBatchStopJobRunResponseErrorsErrorDetailTypeDef
):
    """
    Type definition for `ClientBatchStopJobRunResponseErrors` `ErrorDetail`

    Specifies details about the error that was encountered.

    - **ErrorCode** *(string) --*

      The code associated with this error.

    - **ErrorMessage** *(string) --*

      A message describing the error.
    """


_ClientBatchStopJobRunResponseErrorsTypeDef = TypedDict(
    "_ClientBatchStopJobRunResponseErrorsTypeDef",
    {
        "JobName": str,
        "JobRunId": str,
        "ErrorDetail": ClientBatchStopJobRunResponseErrorsErrorDetailTypeDef,
    },
    total=False,
)


class ClientBatchStopJobRunResponseErrorsTypeDef(
    _ClientBatchStopJobRunResponseErrorsTypeDef
):
    """
    Type definition for `ClientBatchStopJobRunResponse` `Errors`

    Records an error that occurred when attempting to stop a specified job run.

    - **JobName** *(string) --*

      The name of the job definition that is used in the job run in question.

    - **JobRunId** *(string) --*

      The ``JobRunId`` of the job run in question.

    - **ErrorDetail** *(dict) --*

      Specifies details about the error that was encountered.

      - **ErrorCode** *(string) --*

        The code associated with this error.

      - **ErrorMessage** *(string) --*

        A message describing the error.
    """


_ClientBatchStopJobRunResponseSuccessfulSubmissionsTypeDef = TypedDict(
    "_ClientBatchStopJobRunResponseSuccessfulSubmissionsTypeDef",
    {"JobName": str, "JobRunId": str},
    total=False,
)


class ClientBatchStopJobRunResponseSuccessfulSubmissionsTypeDef(
    _ClientBatchStopJobRunResponseSuccessfulSubmissionsTypeDef
):
    """
    Type definition for `ClientBatchStopJobRunResponse` `SuccessfulSubmissions`

    Records a successful request to stop a specified ``JobRun`` .

    - **JobName** *(string) --*

      The name of the job definition used in the job run that was stopped.

    - **JobRunId** *(string) --*

      The ``JobRunId`` of the job run that was stopped.
    """


_ClientBatchStopJobRunResponseTypeDef = TypedDict(
    "_ClientBatchStopJobRunResponseTypeDef",
    {
        "SuccessfulSubmissions": List[
            ClientBatchStopJobRunResponseSuccessfulSubmissionsTypeDef
        ],
        "Errors": List[ClientBatchStopJobRunResponseErrorsTypeDef],
    },
    total=False,
)


class ClientBatchStopJobRunResponseTypeDef(_ClientBatchStopJobRunResponseTypeDef):
    """
    Type definition for `ClientBatchStopJobRun` `Response`

    - **SuccessfulSubmissions** *(list) --*

      A list of the JobRuns that were successfully submitted for stopping.

      - *(dict) --*

        Records a successful request to stop a specified ``JobRun`` .

        - **JobName** *(string) --*

          The name of the job definition used in the job run that was stopped.

        - **JobRunId** *(string) --*

          The ``JobRunId`` of the job run that was stopped.

    - **Errors** *(list) --*

      A list of the errors that were encountered in trying to stop ``JobRuns`` , including the
      ``JobRunId`` for which each error was encountered and details about the error.

      - *(dict) --*

        Records an error that occurred when attempting to stop a specified job run.

        - **JobName** *(string) --*

          The name of the job definition that is used in the job run in question.

        - **JobRunId** *(string) --*

          The ``JobRunId`` of the job run in question.

        - **ErrorDetail** *(dict) --*

          Specifies details about the error that was encountered.

          - **ErrorCode** *(string) --*

            The code associated with this error.

          - **ErrorMessage** *(string) --*

            A message describing the error.
    """


_ClientCancelMlTaskRunResponseTypeDef = TypedDict(
    "_ClientCancelMlTaskRunResponseTypeDef",
    {"TransformId": str, "TaskRunId": str, "Status": str},
    total=False,
)


class ClientCancelMlTaskRunResponseTypeDef(_ClientCancelMlTaskRunResponseTypeDef):
    """
    Type definition for `ClientCancelMlTaskRun` `Response`

    - **TransformId** *(string) --*

      The unique identifier of the machine learning transform.

    - **TaskRunId** *(string) --*

      The unique identifier for the task run.

    - **Status** *(string) --*

      The status for this run.
    """


_RequiredClientCreateClassifierCsvClassifierTypeDef = TypedDict(
    "_RequiredClientCreateClassifierCsvClassifierTypeDef", {"Name": str}
)
_OptionalClientCreateClassifierCsvClassifierTypeDef = TypedDict(
    "_OptionalClientCreateClassifierCsvClassifierTypeDef",
    {
        "Delimiter": str,
        "QuoteSymbol": str,
        "ContainsHeader": str,
        "Header": List[str],
        "DisableValueTrimming": bool,
        "AllowSingleColumn": bool,
    },
    total=False,
)


class ClientCreateClassifierCsvClassifierTypeDef(
    _RequiredClientCreateClassifierCsvClassifierTypeDef,
    _OptionalClientCreateClassifierCsvClassifierTypeDef,
):
    """
    Type definition for `ClientCreateClassifier` `CsvClassifier`

    A ``CsvClassifier`` object specifying the classifier to create.

    - **Name** *(string) --* **[REQUIRED]**

      The name of the classifier.

    - **Delimiter** *(string) --*

      A custom symbol to denote what separates each column entry in the row.

    - **QuoteSymbol** *(string) --*

      A custom symbol to denote what combines content into a single column value. Must be different
      from the column delimiter.

    - **ContainsHeader** *(string) --*

      Indicates whether the CSV file contains a header.

    - **Header** *(list) --*

      A list of strings representing column names.

      - *(string) --*

    - **DisableValueTrimming** *(boolean) --*

      Specifies not to trim values before identifying the type of column values. The default value is
      true.

    - **AllowSingleColumn** *(boolean) --*

      Enables the processing of files that contain only one column.
    """


_RequiredClientCreateClassifierGrokClassifierTypeDef = TypedDict(
    "_RequiredClientCreateClassifierGrokClassifierTypeDef",
    {"Classification": str, "Name": str, "GrokPattern": str},
)
_OptionalClientCreateClassifierGrokClassifierTypeDef = TypedDict(
    "_OptionalClientCreateClassifierGrokClassifierTypeDef",
    {"CustomPatterns": str},
    total=False,
)


class ClientCreateClassifierGrokClassifierTypeDef(
    _RequiredClientCreateClassifierGrokClassifierTypeDef,
    _OptionalClientCreateClassifierGrokClassifierTypeDef,
):
    """
    Type definition for `ClientCreateClassifier` `GrokClassifier`

    A ``GrokClassifier`` object specifying the classifier to create.

    - **Classification** *(string) --* **[REQUIRED]**

      An identifier of the data format that the classifier matches, such as Twitter, JSON, Omniture
      logs, Amazon CloudWatch Logs, and so on.

    - **Name** *(string) --* **[REQUIRED]**

      The name of the new classifier.

    - **GrokPattern** *(string) --* **[REQUIRED]**

      The grok pattern used by this classifier.

    - **CustomPatterns** *(string) --*

      Optional custom grok patterns used by this classifier.
    """


_ClientCreateClassifierJsonClassifierTypeDef = TypedDict(
    "_ClientCreateClassifierJsonClassifierTypeDef", {"Name": str, "JsonPath": str}
)


class ClientCreateClassifierJsonClassifierTypeDef(
    _ClientCreateClassifierJsonClassifierTypeDef
):
    """
    Type definition for `ClientCreateClassifier` `JsonClassifier`

    A ``JsonClassifier`` object specifying the classifier to create.

    - **Name** *(string) --* **[REQUIRED]**

      The name of the classifier.

    - **JsonPath** *(string) --* **[REQUIRED]**

      A ``JsonPath`` string defining the JSON data for the classifier to classify. AWS Glue supports
      a subset of ``JsonPath`` , as described in `Writing JsonPath Custom Classifiers
      <https://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html#custom-classifier-json>`__ .
    """


_RequiredClientCreateClassifierXMLClassifierTypeDef = TypedDict(
    "_RequiredClientCreateClassifierXMLClassifierTypeDef",
    {"Classification": str, "Name": str},
)
_OptionalClientCreateClassifierXMLClassifierTypeDef = TypedDict(
    "_OptionalClientCreateClassifierXMLClassifierTypeDef", {"RowTag": str}, total=False
)


class ClientCreateClassifierXMLClassifierTypeDef(
    _RequiredClientCreateClassifierXMLClassifierTypeDef,
    _OptionalClientCreateClassifierXMLClassifierTypeDef,
):
    """
    Type definition for `ClientCreateClassifier` `XMLClassifier`

    An ``XMLClassifier`` object specifying the classifier to create.

    - **Classification** *(string) --* **[REQUIRED]**

      An identifier of the data format that the classifier matches.

    - **Name** *(string) --* **[REQUIRED]**

      The name of the classifier.

    - **RowTag** *(string) --*

      The XML tag designating the element that contains each record in an XML document being parsed.
      This can't identify a self-closing element (closed by ``/>`` ). An empty row element that
      contains only attributes can be parsed as long as it ends with a closing tag (for example,
      ``<row item_a="A" item_b="B"></row>`` is okay, but ``<row item_a="A" item_b="B" />`` is not).
    """


_ClientCreateConnectionConnectionInputPhysicalConnectionRequirementsTypeDef = TypedDict(
    "_ClientCreateConnectionConnectionInputPhysicalConnectionRequirementsTypeDef",
    {"SubnetId": str, "SecurityGroupIdList": List[str], "AvailabilityZone": str},
    total=False,
)


class ClientCreateConnectionConnectionInputPhysicalConnectionRequirementsTypeDef(
    _ClientCreateConnectionConnectionInputPhysicalConnectionRequirementsTypeDef
):
    """
    Type definition for `ClientCreateConnectionConnectionInput` `PhysicalConnectionRequirements`

    A map of physical connection requirements, such as virtual private cloud (VPC) and
    ``SecurityGroup`` , that are needed to successfully make this connection.

    - **SubnetId** *(string) --*

      The subnet ID used by the connection.

    - **SecurityGroupIdList** *(list) --*

      The security group ID list used by the connection.

      - *(string) --*

    - **AvailabilityZone** *(string) --*

      The connection's Availability Zone. This field is redundant because the specified subnet
      implies the Availability Zone to be used. Currently the field must be populated, but it will
      be deprecated in the future.
    """


_RequiredClientCreateConnectionConnectionInputTypeDef = TypedDict(
    "_RequiredClientCreateConnectionConnectionInputTypeDef",
    {"Name": str, "ConnectionType": str, "ConnectionProperties": Dict[str, str]},
)
_OptionalClientCreateConnectionConnectionInputTypeDef = TypedDict(
    "_OptionalClientCreateConnectionConnectionInputTypeDef",
    {
        "Description": str,
        "MatchCriteria": List[str],
        "PhysicalConnectionRequirements": ClientCreateConnectionConnectionInputPhysicalConnectionRequirementsTypeDef,
    },
    total=False,
)


class ClientCreateConnectionConnectionInputTypeDef(
    _RequiredClientCreateConnectionConnectionInputTypeDef,
    _OptionalClientCreateConnectionConnectionInputTypeDef,
):
    """
    Type definition for `ClientCreateConnection` `ConnectionInput`

    A ``ConnectionInput`` object defining the connection to create.

    - **Name** *(string) --* **[REQUIRED]**

      The name of the connection.

    - **Description** *(string) --*

      The description of the connection.

    - **ConnectionType** *(string) --* **[REQUIRED]**

      The type of the connection. Currently, only JDBC is supported; SFTP is not supported.

    - **MatchCriteria** *(list) --*

      A list of criteria that can be used in selecting this connection.

      - *(string) --*

    - **ConnectionProperties** *(dict) --* **[REQUIRED]**

      These key-value pairs define parameters for the connection.

      - *(string) --*

        - *(string) --*

    - **PhysicalConnectionRequirements** *(dict) --*

      A map of physical connection requirements, such as virtual private cloud (VPC) and
      ``SecurityGroup`` , that are needed to successfully make this connection.

      - **SubnetId** *(string) --*

        The subnet ID used by the connection.

      - **SecurityGroupIdList** *(list) --*

        The security group ID list used by the connection.

        - *(string) --*

      - **AvailabilityZone** *(string) --*

        The connection's Availability Zone. This field is redundant because the specified subnet
        implies the Availability Zone to be used. Currently the field must be populated, but it will
        be deprecated in the future.
    """


_ClientCreateCrawlerSchemaChangePolicyTypeDef = TypedDict(
    "_ClientCreateCrawlerSchemaChangePolicyTypeDef",
    {"UpdateBehavior": str, "DeleteBehavior": str},
    total=False,
)


class ClientCreateCrawlerSchemaChangePolicyTypeDef(
    _ClientCreateCrawlerSchemaChangePolicyTypeDef
):
    """
    Type definition for `ClientCreateCrawler` `SchemaChangePolicy`

    The policy for the crawler's update and deletion behavior.

    - **UpdateBehavior** *(string) --*

      The update behavior when the crawler finds a changed schema.

    - **DeleteBehavior** *(string) --*

      The deletion behavior when the crawler finds a deleted object.
    """


_ClientCreateCrawlerTargetsCatalogTargetsTypeDef = TypedDict(
    "_ClientCreateCrawlerTargetsCatalogTargetsTypeDef",
    {"DatabaseName": str, "Tables": List[str]},
)


class ClientCreateCrawlerTargetsCatalogTargetsTypeDef(
    _ClientCreateCrawlerTargetsCatalogTargetsTypeDef
):
    """
    Type definition for `ClientCreateCrawlerTargets` `CatalogTargets`

    Specifies an AWS Glue Data Catalog target.

    - **DatabaseName** *(string) --* **[REQUIRED]**

      The name of the database to be synchronized.

    - **Tables** *(list) --* **[REQUIRED]**

      A list of the tables to be synchronized.

      - *(string) --*
    """


_ClientCreateCrawlerTargetsDynamoDBTargetsTypeDef = TypedDict(
    "_ClientCreateCrawlerTargetsDynamoDBTargetsTypeDef", {"Path": str}, total=False
)


class ClientCreateCrawlerTargetsDynamoDBTargetsTypeDef(
    _ClientCreateCrawlerTargetsDynamoDBTargetsTypeDef
):
    """
    Type definition for `ClientCreateCrawlerTargets` `DynamoDBTargets`

    Specifies an Amazon DynamoDB table to crawl.

    - **Path** *(string) --*

      The name of the DynamoDB table to crawl.
    """


_ClientCreateCrawlerTargetsJdbcTargetsTypeDef = TypedDict(
    "_ClientCreateCrawlerTargetsJdbcTargetsTypeDef",
    {"ConnectionName": str, "Path": str, "Exclusions": List[str]},
    total=False,
)


class ClientCreateCrawlerTargetsJdbcTargetsTypeDef(
    _ClientCreateCrawlerTargetsJdbcTargetsTypeDef
):
    """
    Type definition for `ClientCreateCrawlerTargets` `JdbcTargets`

    Specifies a JDBC data store to crawl.

    - **ConnectionName** *(string) --*

      The name of the connection to use to connect to the JDBC target.

    - **Path** *(string) --*

      The path of the JDBC target.

    - **Exclusions** *(list) --*

      A list of glob patterns used to exclude from the crawl. For more information, see `Catalog
      Tables with a Crawler <http://docs.aws.amazon.com/glue/latest/dg/add-crawler.html>`__ .

      - *(string) --*
    """


_ClientCreateCrawlerTargetsS3TargetsTypeDef = TypedDict(
    "_ClientCreateCrawlerTargetsS3TargetsTypeDef",
    {"Path": str, "Exclusions": List[str]},
    total=False,
)


class ClientCreateCrawlerTargetsS3TargetsTypeDef(
    _ClientCreateCrawlerTargetsS3TargetsTypeDef
):
    """
    Type definition for `ClientCreateCrawlerTargets` `S3Targets`

    Specifies a data store in Amazon Simple Storage Service (Amazon S3).

    - **Path** *(string) --*

      The path to the Amazon S3 target.

    - **Exclusions** *(list) --*

      A list of glob patterns used to exclude from the crawl. For more information, see `Catalog
      Tables with a Crawler <http://docs.aws.amazon.com/glue/latest/dg/add-crawler.html>`__ .

      - *(string) --*
    """


_ClientCreateCrawlerTargetsTypeDef = TypedDict(
    "_ClientCreateCrawlerTargetsTypeDef",
    {
        "S3Targets": List[ClientCreateCrawlerTargetsS3TargetsTypeDef],
        "JdbcTargets": List[ClientCreateCrawlerTargetsJdbcTargetsTypeDef],
        "DynamoDBTargets": List[ClientCreateCrawlerTargetsDynamoDBTargetsTypeDef],
        "CatalogTargets": List[ClientCreateCrawlerTargetsCatalogTargetsTypeDef],
    },
    total=False,
)


class ClientCreateCrawlerTargetsTypeDef(_ClientCreateCrawlerTargetsTypeDef):
    """
    Type definition for `ClientCreateCrawler` `Targets`

    A list of collection of targets to crawl.

    - **S3Targets** *(list) --*

      Specifies Amazon Simple Storage Service (Amazon S3) targets.

      - *(dict) --*

        Specifies a data store in Amazon Simple Storage Service (Amazon S3).

        - **Path** *(string) --*

          The path to the Amazon S3 target.

        - **Exclusions** *(list) --*

          A list of glob patterns used to exclude from the crawl. For more information, see `Catalog
          Tables with a Crawler <http://docs.aws.amazon.com/glue/latest/dg/add-crawler.html>`__ .

          - *(string) --*

    - **JdbcTargets** *(list) --*

      Specifies JDBC targets.

      - *(dict) --*

        Specifies a JDBC data store to crawl.

        - **ConnectionName** *(string) --*

          The name of the connection to use to connect to the JDBC target.

        - **Path** *(string) --*

          The path of the JDBC target.

        - **Exclusions** *(list) --*

          A list of glob patterns used to exclude from the crawl. For more information, see `Catalog
          Tables with a Crawler <http://docs.aws.amazon.com/glue/latest/dg/add-crawler.html>`__ .

          - *(string) --*

    - **DynamoDBTargets** *(list) --*

      Specifies Amazon DynamoDB targets.

      - *(dict) --*

        Specifies an Amazon DynamoDB table to crawl.

        - **Path** *(string) --*

          The name of the DynamoDB table to crawl.

    - **CatalogTargets** *(list) --*

      Specifies AWS Glue Data Catalog targets.

      - *(dict) --*

        Specifies an AWS Glue Data Catalog target.

        - **DatabaseName** *(string) --* **[REQUIRED]**

          The name of the database to be synchronized.

        - **Tables** *(list) --* **[REQUIRED]**

          A list of the tables to be synchronized.

          - *(string) --*
    """


_ClientCreateDatabaseDatabaseInputCreateTableDefaultPermissionsPrincipalTypeDef = TypedDict(
    "_ClientCreateDatabaseDatabaseInputCreateTableDefaultPermissionsPrincipalTypeDef",
    {"DataLakePrincipalIdentifier": str},
    total=False,
)


class ClientCreateDatabaseDatabaseInputCreateTableDefaultPermissionsPrincipalTypeDef(
    _ClientCreateDatabaseDatabaseInputCreateTableDefaultPermissionsPrincipalTypeDef
):
    """
    Type definition for `ClientCreateDatabaseDatabaseInputCreateTableDefaultPermissions` `Principal`

    The principal who is granted permissions.

    - **DataLakePrincipalIdentifier** *(string) --*

      An identifier for the AWS Lake Formation principal.
    """


_ClientCreateDatabaseDatabaseInputCreateTableDefaultPermissionsTypeDef = TypedDict(
    "_ClientCreateDatabaseDatabaseInputCreateTableDefaultPermissionsTypeDef",
    {
        "Principal": ClientCreateDatabaseDatabaseInputCreateTableDefaultPermissionsPrincipalTypeDef,
        "Permissions": List[str],
    },
    total=False,
)


class ClientCreateDatabaseDatabaseInputCreateTableDefaultPermissionsTypeDef(
    _ClientCreateDatabaseDatabaseInputCreateTableDefaultPermissionsTypeDef
):
    """
    Type definition for `ClientCreateDatabaseDatabaseInput` `CreateTableDefaultPermissions`

    Permissions granted to a principal.

    - **Principal** *(dict) --*

      The principal who is granted permissions.

      - **DataLakePrincipalIdentifier** *(string) --*

        An identifier for the AWS Lake Formation principal.

    - **Permissions** *(list) --*

      The permissions that are granted to the principal.

      - *(string) --*
    """


_RequiredClientCreateDatabaseDatabaseInputTypeDef = TypedDict(
    "_RequiredClientCreateDatabaseDatabaseInputTypeDef", {"Name": str}
)
_OptionalClientCreateDatabaseDatabaseInputTypeDef = TypedDict(
    "_OptionalClientCreateDatabaseDatabaseInputTypeDef",
    {
        "Description": str,
        "LocationUri": str,
        "Parameters": Dict[str, str],
        "CreateTableDefaultPermissions": List[
            ClientCreateDatabaseDatabaseInputCreateTableDefaultPermissionsTypeDef
        ],
    },
    total=False,
)


class ClientCreateDatabaseDatabaseInputTypeDef(
    _RequiredClientCreateDatabaseDatabaseInputTypeDef,
    _OptionalClientCreateDatabaseDatabaseInputTypeDef,
):
    """
    Type definition for `ClientCreateDatabase` `DatabaseInput`

    The metadata for the database.

    - **Name** *(string) --* **[REQUIRED]**

      The name of the database. For Hive compatibility, this is folded to lowercase when it is stored.

    - **Description** *(string) --*

      A description of the database.

    - **LocationUri** *(string) --*

      The location of the database (for example, an HDFS path).

    - **Parameters** *(dict) --*

      These key-value pairs define parameters and properties of the database.

      These key-value pairs define parameters and properties of the database.

      - *(string) --*

        - *(string) --*

    - **CreateTableDefaultPermissions** *(list) --*

      Creates a set of default permissions on the table for principals.

      - *(dict) --*

        Permissions granted to a principal.

        - **Principal** *(dict) --*

          The principal who is granted permissions.

          - **DataLakePrincipalIdentifier** *(string) --*

            An identifier for the AWS Lake Formation principal.

        - **Permissions** *(list) --*

          The permissions that are granted to the principal.

          - *(string) --*
    """


_ClientCreateDevEndpointResponseTypeDef = TypedDict(
    "_ClientCreateDevEndpointResponseTypeDef",
    {
        "EndpointName": str,
        "Status": str,
        "SecurityGroupIds": List[str],
        "SubnetId": str,
        "RoleArn": str,
        "YarnEndpointAddress": str,
        "ZeppelinRemoteSparkInterpreterPort": int,
        "NumberOfNodes": int,
        "WorkerType": str,
        "GlueVersion": str,
        "NumberOfWorkers": int,
        "AvailabilityZone": str,
        "VpcId": str,
        "ExtraPythonLibsS3Path": str,
        "ExtraJarsS3Path": str,
        "FailureReason": str,
        "SecurityConfiguration": str,
        "CreatedTimestamp": datetime,
        "Arguments": Dict[str, str],
    },
    total=False,
)


class ClientCreateDevEndpointResponseTypeDef(_ClientCreateDevEndpointResponseTypeDef):
    """
    Type definition for `ClientCreateDevEndpoint` `Response`

    - **EndpointName** *(string) --*

      The name assigned to the new ``DevEndpoint`` .

    - **Status** *(string) --*

      The current status of the new ``DevEndpoint`` .

    - **SecurityGroupIds** *(list) --*

      The security groups assigned to the new ``DevEndpoint`` .

      - *(string) --*

    - **SubnetId** *(string) --*

      The subnet ID assigned to the new ``DevEndpoint`` .

    - **RoleArn** *(string) --*

      The Amazon Resource Name (ARN) of the role assigned to the new ``DevEndpoint`` .

    - **YarnEndpointAddress** *(string) --*

      The address of the YARN endpoint used by this ``DevEndpoint`` .

    - **ZeppelinRemoteSparkInterpreterPort** *(integer) --*

      The Apache Zeppelin port for the remote Apache Spark interpreter.

    - **NumberOfNodes** *(integer) --*

      The number of AWS Glue Data Processing Units (DPUs) allocated to this DevEndpoint.

    - **WorkerType** *(string) --*

      The type of predefined worker that is allocated to the development endpoint. May be a value
      of Standard, G.1X, or G.2X.

    - **GlueVersion** *(string) --*

      Glue version determines the versions of Apache Spark and Python that AWS Glue supports. The
      Python version indicates the version supported for running your ETL scripts on development
      endpoints.

    - **NumberOfWorkers** *(integer) --*

      The number of workers of a defined ``workerType`` that are allocated to the development
      endpoint.

    - **AvailabilityZone** *(string) --*

      The AWS Availability Zone where this ``DevEndpoint`` is located.

    - **VpcId** *(string) --*

      The ID of the virtual private cloud (VPC) used by this ``DevEndpoint`` .

    - **ExtraPythonLibsS3Path** *(string) --*

      The paths to one or more Python libraries in an S3 bucket that will be loaded in your
      ``DevEndpoint`` .

    - **ExtraJarsS3Path** *(string) --*

      Path to one or more Java ``.jar`` files in an S3 bucket that will be loaded in your
      ``DevEndpoint`` .

    - **FailureReason** *(string) --*

      The reason for a current failure in this ``DevEndpoint`` .

    - **SecurityConfiguration** *(string) --*

      The name of the ``SecurityConfiguration`` structure being used with this ``DevEndpoint`` .

    - **CreatedTimestamp** *(datetime) --*

      The point in time at which this ``DevEndpoint`` was created.

    - **Arguments** *(dict) --*

      The map of arguments used to configure this ``DevEndpoint`` .

      Valid arguments are:

      * ``"--enable-glue-datacatalog": ""``

      * ``"GLUE_PYTHON_VERSION": "3"``

      * ``"GLUE_PYTHON_VERSION": "2"``

      You can specify a version of Python support for development endpoints by using the
      ``Arguments`` parameter in the ``CreateDevEndpoint`` or ``UpdateDevEndpoint`` APIs. If no
      arguments are provided, the version defaults to Python 2.

      - *(string) --*

        - *(string) --*
    """


_ClientCreateJobCommandTypeDef = TypedDict(
    "_ClientCreateJobCommandTypeDef",
    {"Name": str, "ScriptLocation": str, "PythonVersion": str},
    total=False,
)


class ClientCreateJobCommandTypeDef(_ClientCreateJobCommandTypeDef):
    """
    Type definition for `ClientCreateJob` `Command`

    The ``JobCommand`` that executes this job.

    - **Name** *(string) --*

      The name of the job command. For an Apache Spark ETL job, this must be ``glueetl`` . For a
      Python shell job, it must be ``pythonshell`` .

    - **ScriptLocation** *(string) --*

      Specifies the Amazon Simple Storage Service (Amazon S3) path to a script that executes a job.

    - **PythonVersion** *(string) --*

      The Python version being used to execute a Python shell job. Allowed values are 2 or 3.
    """


_ClientCreateJobConnectionsTypeDef = TypedDict(
    "_ClientCreateJobConnectionsTypeDef", {"Connections": List[str]}, total=False
)


class ClientCreateJobConnectionsTypeDef(_ClientCreateJobConnectionsTypeDef):
    """
    Type definition for `ClientCreateJob` `Connections`

    The connections used for this job.

    - **Connections** *(list) --*

      A list of connections used by the job.

      - *(string) --*
    """


_ClientCreateJobExecutionPropertyTypeDef = TypedDict(
    "_ClientCreateJobExecutionPropertyTypeDef", {"MaxConcurrentRuns": int}, total=False
)


class ClientCreateJobExecutionPropertyTypeDef(_ClientCreateJobExecutionPropertyTypeDef):
    """
    Type definition for `ClientCreateJob` `ExecutionProperty`

    An ``ExecutionProperty`` specifying the maximum number of concurrent runs allowed for this job.

    - **MaxConcurrentRuns** *(integer) --*

      The maximum number of concurrent runs allowed for the job. The default is 1. An error is
      returned when this threshold is reached. The maximum value you can specify is controlled by a
      service limit.
    """


_ClientCreateJobNotificationPropertyTypeDef = TypedDict(
    "_ClientCreateJobNotificationPropertyTypeDef",
    {"NotifyDelayAfter": int},
    total=False,
)


class ClientCreateJobNotificationPropertyTypeDef(
    _ClientCreateJobNotificationPropertyTypeDef
):
    """
    Type definition for `ClientCreateJob` `NotificationProperty`

    Specifies configuration properties of a job notification.

    - **NotifyDelayAfter** *(integer) --*

      After a job run starts, the number of minutes to wait before sending a job run delay
      notification.
    """


_ClientCreateJobResponseTypeDef = TypedDict(
    "_ClientCreateJobResponseTypeDef", {"Name": str}, total=False
)


class ClientCreateJobResponseTypeDef(_ClientCreateJobResponseTypeDef):
    """
    Type definition for `ClientCreateJob` `Response`

    - **Name** *(string) --*

      The unique name that was provided for this job definition.
    """


_RequiredClientCreateMlTransformInputRecordTablesTypeDef = TypedDict(
    "_RequiredClientCreateMlTransformInputRecordTablesTypeDef",
    {"DatabaseName": str, "TableName": str},
)
_OptionalClientCreateMlTransformInputRecordTablesTypeDef = TypedDict(
    "_OptionalClientCreateMlTransformInputRecordTablesTypeDef",
    {"CatalogId": str, "ConnectionName": str},
    total=False,
)


class ClientCreateMlTransformInputRecordTablesTypeDef(
    _RequiredClientCreateMlTransformInputRecordTablesTypeDef,
    _OptionalClientCreateMlTransformInputRecordTablesTypeDef,
):
    """
    Type definition for `ClientCreateMlTransform` `InputRecordTables`

    The database and table in the AWS Glue Data Catalog that is used for input or output data.

    - **DatabaseName** *(string) --* **[REQUIRED]**

      A database name in the AWS Glue Data Catalog.

    - **TableName** *(string) --* **[REQUIRED]**

      A table name in the AWS Glue Data Catalog.

    - **CatalogId** *(string) --*

      A unique identifier for the AWS Glue Data Catalog.

    - **ConnectionName** *(string) --*

      The name of the connection to the AWS Glue Data Catalog.
    """


_ClientCreateMlTransformParametersFindMatchesParametersTypeDef = TypedDict(
    "_ClientCreateMlTransformParametersFindMatchesParametersTypeDef",
    {
        "PrimaryKeyColumnName": str,
        "PrecisionRecallTradeoff": float,
        "AccuracyCostTradeoff": float,
        "EnforceProvidedLabels": bool,
    },
    total=False,
)


class ClientCreateMlTransformParametersFindMatchesParametersTypeDef(
    _ClientCreateMlTransformParametersFindMatchesParametersTypeDef
):
    """
    Type definition for `ClientCreateMlTransformParameters` `FindMatchesParameters`

    The parameters for the find matches algorithm.

    - **PrimaryKeyColumnName** *(string) --*

      The name of a column that uniquely identifies rows in the source table. Used to help identify
      matching records.

    - **PrecisionRecallTradeoff** *(float) --*

      The value selected when tuning your transform for a balance between precision and recall. A
      value of 0.5 means no preference; a value of 1.0 means a bias purely for precision, and a
      value of 0.0 means a bias for recall. Because this is a tradeoff, choosing values close to
      1.0 means very low recall, and choosing values close to 0.0 results in very low precision.

      The precision metric indicates how often your model is correct when it predicts a match.

      The recall metric indicates that for an actual match, how often your model predicts the match.

    - **AccuracyCostTradeoff** *(float) --*

      The value that is selected when tuning your transform for a balance between accuracy and
      cost. A value of 0.5 means that the system balances accuracy and cost concerns. A value of
      1.0 means a bias purely for accuracy, which typically results in a higher cost, sometimes
      substantially higher. A value of 0.0 means a bias purely for cost, which results in a less
      accurate ``FindMatches`` transform, sometimes with unacceptable accuracy.

      Accuracy measures how well the transform finds true positives and true negatives. Increasing
      accuracy requires more machine resources and cost. But it also results in increased recall.

      Cost measures how many compute resources, and thus money, are consumed to run the transform.

    - **EnforceProvidedLabels** *(boolean) --*

      The value to switch on or off to force the output to match the provided labels from users. If
      the value is ``True`` , the ``find matches`` transform forces the output to match the
      provided labels. The results override the normal conflation results. If the value is
      ``False`` , the ``find matches`` transform does not ensure all the labels provided are
      respected, and the results rely on the trained model.

      Note that setting this value to true may increase the conflation execution time.
    """


_RequiredClientCreateMlTransformParametersTypeDef = TypedDict(
    "_RequiredClientCreateMlTransformParametersTypeDef", {"TransformType": str}
)
_OptionalClientCreateMlTransformParametersTypeDef = TypedDict(
    "_OptionalClientCreateMlTransformParametersTypeDef",
    {
        "FindMatchesParameters": ClientCreateMlTransformParametersFindMatchesParametersTypeDef
    },
    total=False,
)


class ClientCreateMlTransformParametersTypeDef(
    _RequiredClientCreateMlTransformParametersTypeDef,
    _OptionalClientCreateMlTransformParametersTypeDef,
):
    """
    Type definition for `ClientCreateMlTransform` `Parameters`

    The algorithmic parameters that are specific to the transform type used. Conditionally dependent
    on the transform type.

    - **TransformType** *(string) --* **[REQUIRED]**

      The type of machine learning transform.

      For information about the types of machine learning transforms, see `Creating Machine Learning
      Transforms
      <http://docs.aws.amazon.com/glue/latest/dg/add-job-machine-learning-transform.html>`__ .

    - **FindMatchesParameters** *(dict) --*

      The parameters for the find matches algorithm.

      - **PrimaryKeyColumnName** *(string) --*

        The name of a column that uniquely identifies rows in the source table. Used to help identify
        matching records.

      - **PrecisionRecallTradeoff** *(float) --*

        The value selected when tuning your transform for a balance between precision and recall. A
        value of 0.5 means no preference; a value of 1.0 means a bias purely for precision, and a
        value of 0.0 means a bias for recall. Because this is a tradeoff, choosing values close to
        1.0 means very low recall, and choosing values close to 0.0 results in very low precision.

        The precision metric indicates how often your model is correct when it predicts a match.

        The recall metric indicates that for an actual match, how often your model predicts the match.

      - **AccuracyCostTradeoff** *(float) --*

        The value that is selected when tuning your transform for a balance between accuracy and
        cost. A value of 0.5 means that the system balances accuracy and cost concerns. A value of
        1.0 means a bias purely for accuracy, which typically results in a higher cost, sometimes
        substantially higher. A value of 0.0 means a bias purely for cost, which results in a less
        accurate ``FindMatches`` transform, sometimes with unacceptable accuracy.

        Accuracy measures how well the transform finds true positives and true negatives. Increasing
        accuracy requires more machine resources and cost. But it also results in increased recall.

        Cost measures how many compute resources, and thus money, are consumed to run the transform.

      - **EnforceProvidedLabels** *(boolean) --*

        The value to switch on or off to force the output to match the provided labels from users. If
        the value is ``True`` , the ``find matches`` transform forces the output to match the
        provided labels. The results override the normal conflation results. If the value is
        ``False`` , the ``find matches`` transform does not ensure all the labels provided are
        respected, and the results rely on the trained model.

        Note that setting this value to true may increase the conflation execution time.
    """


_ClientCreateMlTransformResponseTypeDef = TypedDict(
    "_ClientCreateMlTransformResponseTypeDef", {"TransformId": str}, total=False
)


class ClientCreateMlTransformResponseTypeDef(_ClientCreateMlTransformResponseTypeDef):
    """
    Type definition for `ClientCreateMlTransform` `Response`

    - **TransformId** *(string) --*

      A unique identifier that is generated for the transform.
    """


_RequiredClientCreatePartitionPartitionInputStorageDescriptorColumnsTypeDef = TypedDict(
    "_RequiredClientCreatePartitionPartitionInputStorageDescriptorColumnsTypeDef",
    {"Name": str},
)
_OptionalClientCreatePartitionPartitionInputStorageDescriptorColumnsTypeDef = TypedDict(
    "_OptionalClientCreatePartitionPartitionInputStorageDescriptorColumnsTypeDef",
    {"Type": str, "Comment": str, "Parameters": Dict[str, str]},
    total=False,
)


class ClientCreatePartitionPartitionInputStorageDescriptorColumnsTypeDef(
    _RequiredClientCreatePartitionPartitionInputStorageDescriptorColumnsTypeDef,
    _OptionalClientCreatePartitionPartitionInputStorageDescriptorColumnsTypeDef,
):
    """
    Type definition for `ClientCreatePartitionPartitionInputStorageDescriptor` `Columns`

    A column in a ``Table`` .

    - **Name** *(string) --* **[REQUIRED]**

      The name of the ``Column`` .

    - **Type** *(string) --*

      The data type of the ``Column`` .

    - **Comment** *(string) --*

      A free-form text comment.

    - **Parameters** *(dict) --*

      These key-value pairs define properties associated with the column.

      - *(string) --*

        - *(string) --*
    """


_ClientCreatePartitionPartitionInputStorageDescriptorSerdeInfoTypeDef = TypedDict(
    "_ClientCreatePartitionPartitionInputStorageDescriptorSerdeInfoTypeDef",
    {"Name": str, "SerializationLibrary": str, "Parameters": Dict[str, str]},
    total=False,
)


class ClientCreatePartitionPartitionInputStorageDescriptorSerdeInfoTypeDef(
    _ClientCreatePartitionPartitionInputStorageDescriptorSerdeInfoTypeDef
):
    """
    Type definition for `ClientCreatePartitionPartitionInputStorageDescriptor` `SerdeInfo`

    The serialization/deserialization (SerDe) information.

    - **Name** *(string) --*

      Name of the SerDe.

    - **SerializationLibrary** *(string) --*

      Usually the class that implements the SerDe. An example is
      ``org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`` .

    - **Parameters** *(dict) --*

      These key-value pairs define initialization parameters for the SerDe.

      - *(string) --*

        - *(string) --*
    """


_ClientCreatePartitionPartitionInputStorageDescriptorSkewedInfoTypeDef = TypedDict(
    "_ClientCreatePartitionPartitionInputStorageDescriptorSkewedInfoTypeDef",
    {
        "SkewedColumnNames": List[str],
        "SkewedColumnValues": List[str],
        "SkewedColumnValueLocationMaps": Dict[str, str],
    },
    total=False,
)


class ClientCreatePartitionPartitionInputStorageDescriptorSkewedInfoTypeDef(
    _ClientCreatePartitionPartitionInputStorageDescriptorSkewedInfoTypeDef
):
    """
    Type definition for `ClientCreatePartitionPartitionInputStorageDescriptor` `SkewedInfo`

    The information about values that appear frequently in a column (skewed values).

    - **SkewedColumnNames** *(list) --*

      A list of names of columns that contain skewed values.

      - *(string) --*

    - **SkewedColumnValues** *(list) --*

      A list of values that appear so frequently as to be considered skewed.

      - *(string) --*

    - **SkewedColumnValueLocationMaps** *(dict) --*

      A mapping of skewed values to the columns that contain them.

      - *(string) --*

        - *(string) --*
    """


_ClientCreatePartitionPartitionInputStorageDescriptorSortColumnsTypeDef = TypedDict(
    "_ClientCreatePartitionPartitionInputStorageDescriptorSortColumnsTypeDef",
    {"Column": str, "SortOrder": int},
)


class ClientCreatePartitionPartitionInputStorageDescriptorSortColumnsTypeDef(
    _ClientCreatePartitionPartitionInputStorageDescriptorSortColumnsTypeDef
):
    """
    Type definition for `ClientCreatePartitionPartitionInputStorageDescriptor` `SortColumns`

    Specifies the sort order of a sorted column.

    - **Column** *(string) --* **[REQUIRED]**

      The name of the column.

    - **SortOrder** *(integer) --* **[REQUIRED]**

      Indicates that the column is sorted in ascending order (``== 1`` ), or in descending
      order (``==0`` ).
    """


_ClientCreatePartitionPartitionInputStorageDescriptorTypeDef = TypedDict(
    "_ClientCreatePartitionPartitionInputStorageDescriptorTypeDef",
    {
        "Columns": List[
            ClientCreatePartitionPartitionInputStorageDescriptorColumnsTypeDef
        ],
        "Location": str,
        "InputFormat": str,
        "OutputFormat": str,
        "Compressed": bool,
        "NumberOfBuckets": int,
        "SerdeInfo": ClientCreatePartitionPartitionInputStorageDescriptorSerdeInfoTypeDef,
        "BucketColumns": List[str],
        "SortColumns": List[
            ClientCreatePartitionPartitionInputStorageDescriptorSortColumnsTypeDef
        ],
        "Parameters": Dict[str, str],
        "SkewedInfo": ClientCreatePartitionPartitionInputStorageDescriptorSkewedInfoTypeDef,
        "StoredAsSubDirectories": bool,
    },
    total=False,
)


class ClientCreatePartitionPartitionInputStorageDescriptorTypeDef(
    _ClientCreatePartitionPartitionInputStorageDescriptorTypeDef
):
    """
    Type definition for `ClientCreatePartitionPartitionInput` `StorageDescriptor`

    Provides information about the physical location where the partition is stored.

    - **Columns** *(list) --*

      A list of the ``Columns`` in the table.

      - *(dict) --*

        A column in a ``Table`` .

        - **Name** *(string) --* **[REQUIRED]**

          The name of the ``Column`` .

        - **Type** *(string) --*

          The data type of the ``Column`` .

        - **Comment** *(string) --*

          A free-form text comment.

        - **Parameters** *(dict) --*

          These key-value pairs define properties associated with the column.

          - *(string) --*

            - *(string) --*

    - **Location** *(string) --*

      The physical location of the table. By default, this takes the form of the warehouse
      location, followed by the database location in the warehouse, followed by the table name.

    - **InputFormat** *(string) --*

      The input format: ``SequenceFileInputFormat`` (binary), or ``TextInputFormat`` , or a custom
      format.

    - **OutputFormat** *(string) --*

      The output format: ``SequenceFileOutputFormat`` (binary), or ``IgnoreKeyTextOutputFormat`` ,
      or a custom format.

    - **Compressed** *(boolean) --*

       ``True`` if the data in the table is compressed, or ``False`` if not.

    - **NumberOfBuckets** *(integer) --*

      Must be specified if the table contains any dimension columns.

    - **SerdeInfo** *(dict) --*

      The serialization/deserialization (SerDe) information.

      - **Name** *(string) --*

        Name of the SerDe.

      - **SerializationLibrary** *(string) --*

        Usually the class that implements the SerDe. An example is
        ``org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`` .

      - **Parameters** *(dict) --*

        These key-value pairs define initialization parameters for the SerDe.

        - *(string) --*

          - *(string) --*

    - **BucketColumns** *(list) --*

      A list of reducer grouping columns, clustering columns, and bucketing columns in the table.

      - *(string) --*

    - **SortColumns** *(list) --*

      A list specifying the sort order of each bucket in the table.

      - *(dict) --*

        Specifies the sort order of a sorted column.

        - **Column** *(string) --* **[REQUIRED]**

          The name of the column.

        - **SortOrder** *(integer) --* **[REQUIRED]**

          Indicates that the column is sorted in ascending order (``== 1`` ), or in descending
          order (``==0`` ).

    - **Parameters** *(dict) --*

      The user-supplied properties in key-value form.

      - *(string) --*

        - *(string) --*

    - **SkewedInfo** *(dict) --*

      The information about values that appear frequently in a column (skewed values).

      - **SkewedColumnNames** *(list) --*

        A list of names of columns that contain skewed values.

        - *(string) --*

      - **SkewedColumnValues** *(list) --*

        A list of values that appear so frequently as to be considered skewed.

        - *(string) --*

      - **SkewedColumnValueLocationMaps** *(dict) --*

        A mapping of skewed values to the columns that contain them.

        - *(string) --*

          - *(string) --*

    - **StoredAsSubDirectories** *(boolean) --*

       ``True`` if the table data is stored in subdirectories, or ``False`` if not.
    """


_ClientCreatePartitionPartitionInputTypeDef = TypedDict(
    "_ClientCreatePartitionPartitionInputTypeDef",
    {
        "Values": List[str],
        "LastAccessTime": datetime,
        "StorageDescriptor": ClientCreatePartitionPartitionInputStorageDescriptorTypeDef,
        "Parameters": Dict[str, str],
        "LastAnalyzedTime": datetime,
    },
    total=False,
)


class ClientCreatePartitionPartitionInputTypeDef(
    _ClientCreatePartitionPartitionInputTypeDef
):
    """
    Type definition for `ClientCreatePartition` `PartitionInput`

    A ``PartitionInput`` structure defining the partition to be created.

    - **Values** *(list) --*

      The values of the partition. Although this parameter is not required by the SDK, you must
      specify this parameter for a valid input.

      The values for the keys for the new partition must be passed as an array of String objects that
      must be ordered in the same order as the partition keys appearing in the Amazon S3 prefix.
      Otherwise AWS Glue will add the values to the wrong keys.

      - *(string) --*

    - **LastAccessTime** *(datetime) --*

      The last time at which the partition was accessed.

    - **StorageDescriptor** *(dict) --*

      Provides information about the physical location where the partition is stored.

      - **Columns** *(list) --*

        A list of the ``Columns`` in the table.

        - *(dict) --*

          A column in a ``Table`` .

          - **Name** *(string) --* **[REQUIRED]**

            The name of the ``Column`` .

          - **Type** *(string) --*

            The data type of the ``Column`` .

          - **Comment** *(string) --*

            A free-form text comment.

          - **Parameters** *(dict) --*

            These key-value pairs define properties associated with the column.

            - *(string) --*

              - *(string) --*

      - **Location** *(string) --*

        The physical location of the table. By default, this takes the form of the warehouse
        location, followed by the database location in the warehouse, followed by the table name.

      - **InputFormat** *(string) --*

        The input format: ``SequenceFileInputFormat`` (binary), or ``TextInputFormat`` , or a custom
        format.

      - **OutputFormat** *(string) --*

        The output format: ``SequenceFileOutputFormat`` (binary), or ``IgnoreKeyTextOutputFormat`` ,
        or a custom format.

      - **Compressed** *(boolean) --*

         ``True`` if the data in the table is compressed, or ``False`` if not.

      - **NumberOfBuckets** *(integer) --*

        Must be specified if the table contains any dimension columns.

      - **SerdeInfo** *(dict) --*

        The serialization/deserialization (SerDe) information.

        - **Name** *(string) --*

          Name of the SerDe.

        - **SerializationLibrary** *(string) --*

          Usually the class that implements the SerDe. An example is
          ``org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`` .

        - **Parameters** *(dict) --*

          These key-value pairs define initialization parameters for the SerDe.

          - *(string) --*

            - *(string) --*

      - **BucketColumns** *(list) --*

        A list of reducer grouping columns, clustering columns, and bucketing columns in the table.

        - *(string) --*

      - **SortColumns** *(list) --*

        A list specifying the sort order of each bucket in the table.

        - *(dict) --*

          Specifies the sort order of a sorted column.

          - **Column** *(string) --* **[REQUIRED]**

            The name of the column.

          - **SortOrder** *(integer) --* **[REQUIRED]**

            Indicates that the column is sorted in ascending order (``== 1`` ), or in descending
            order (``==0`` ).

      - **Parameters** *(dict) --*

        The user-supplied properties in key-value form.

        - *(string) --*

          - *(string) --*

      - **SkewedInfo** *(dict) --*

        The information about values that appear frequently in a column (skewed values).

        - **SkewedColumnNames** *(list) --*

          A list of names of columns that contain skewed values.

          - *(string) --*

        - **SkewedColumnValues** *(list) --*

          A list of values that appear so frequently as to be considered skewed.

          - *(string) --*

        - **SkewedColumnValueLocationMaps** *(dict) --*

          A mapping of skewed values to the columns that contain them.

          - *(string) --*

            - *(string) --*

      - **StoredAsSubDirectories** *(boolean) --*

         ``True`` if the table data is stored in subdirectories, or ``False`` if not.

    - **Parameters** *(dict) --*

      These key-value pairs define partition parameters.

      - *(string) --*

        - *(string) --*

    - **LastAnalyzedTime** *(datetime) --*

      The last time at which column statistics were computed for this partition.
    """


_RequiredClientCreateScriptDagEdgesTypeDef = TypedDict(
    "_RequiredClientCreateScriptDagEdgesTypeDef", {"Source": str, "Target": str}
)
_OptionalClientCreateScriptDagEdgesTypeDef = TypedDict(
    "_OptionalClientCreateScriptDagEdgesTypeDef", {"TargetParameter": str}, total=False
)


class ClientCreateScriptDagEdgesTypeDef(
    _RequiredClientCreateScriptDagEdgesTypeDef,
    _OptionalClientCreateScriptDagEdgesTypeDef,
):
    """
    Type definition for `ClientCreateScript` `DagEdges`

    Represents a directional edge in a directed acyclic graph (DAG).

    - **Source** *(string) --* **[REQUIRED]**

      The ID of the node at which the edge starts.

    - **Target** *(string) --* **[REQUIRED]**

      The ID of the node at which the edge ends.

    - **TargetParameter** *(string) --*

      The target of the edge.
    """


_RequiredClientCreateScriptDagNodesArgsTypeDef = TypedDict(
    "_RequiredClientCreateScriptDagNodesArgsTypeDef", {"Name": str, "Value": str}
)
_OptionalClientCreateScriptDagNodesArgsTypeDef = TypedDict(
    "_OptionalClientCreateScriptDagNodesArgsTypeDef", {"Param": bool}, total=False
)


class ClientCreateScriptDagNodesArgsTypeDef(
    _RequiredClientCreateScriptDagNodesArgsTypeDef,
    _OptionalClientCreateScriptDagNodesArgsTypeDef,
):
    """
    Type definition for `ClientCreateScriptDagNodes` `Args`

    An argument or property of a node.

    - **Name** *(string) --* **[REQUIRED]**

      The name of the argument or property.

    - **Value** *(string) --* **[REQUIRED]**

      The value of the argument or property.

    - **Param** *(boolean) --*

      True if the value is used as a parameter.
    """


_RequiredClientCreateScriptDagNodesTypeDef = TypedDict(
    "_RequiredClientCreateScriptDagNodesTypeDef",
    {"Id": str, "NodeType": str, "Args": List[ClientCreateScriptDagNodesArgsTypeDef]},
)
_OptionalClientCreateScriptDagNodesTypeDef = TypedDict(
    "_OptionalClientCreateScriptDagNodesTypeDef", {"LineNumber": int}, total=False
)


class ClientCreateScriptDagNodesTypeDef(
    _RequiredClientCreateScriptDagNodesTypeDef,
    _OptionalClientCreateScriptDagNodesTypeDef,
):
    """
    Type definition for `ClientCreateScript` `DagNodes`

    Represents a node in a directed acyclic graph (DAG)

    - **Id** *(string) --* **[REQUIRED]**

      A node identifier that is unique within the node's graph.

    - **NodeType** *(string) --* **[REQUIRED]**

      The type of node that this is.

    - **Args** *(list) --* **[REQUIRED]**

      Properties of the node, in the form of name-value pairs.

      - *(dict) --*

        An argument or property of a node.

        - **Name** *(string) --* **[REQUIRED]**

          The name of the argument or property.

        - **Value** *(string) --* **[REQUIRED]**

          The value of the argument or property.

        - **Param** *(boolean) --*

          True if the value is used as a parameter.

    - **LineNumber** *(integer) --*

      The line number of the node.
    """


_ClientCreateScriptResponseTypeDef = TypedDict(
    "_ClientCreateScriptResponseTypeDef",
    {"PythonScript": str, "ScalaCode": str},
    total=False,
)


class ClientCreateScriptResponseTypeDef(_ClientCreateScriptResponseTypeDef):
    """
    Type definition for `ClientCreateScript` `Response`

    - **PythonScript** *(string) --*

      The Python script generated from the DAG.

    - **ScalaCode** *(string) --*

      The Scala code generated from the DAG.
    """


_ClientCreateSecurityConfigurationEncryptionConfigurationCloudWatchEncryptionTypeDef = TypedDict(
    "_ClientCreateSecurityConfigurationEncryptionConfigurationCloudWatchEncryptionTypeDef",
    {"CloudWatchEncryptionMode": str, "KmsKeyArn": str},
    total=False,
)


class ClientCreateSecurityConfigurationEncryptionConfigurationCloudWatchEncryptionTypeDef(
    _ClientCreateSecurityConfigurationEncryptionConfigurationCloudWatchEncryptionTypeDef
):
    """
    Type definition for `ClientCreateSecurityConfigurationEncryptionConfiguration` `CloudWatchEncryption`

    The encryption configuration for Amazon CloudWatch.

    - **CloudWatchEncryptionMode** *(string) --*

      The encryption mode to use for CloudWatch data.

    - **KmsKeyArn** *(string) --*

      The Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
    """


_ClientCreateSecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionTypeDef = TypedDict(
    "_ClientCreateSecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionTypeDef",
    {"JobBookmarksEncryptionMode": str, "KmsKeyArn": str},
    total=False,
)


class ClientCreateSecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionTypeDef(
    _ClientCreateSecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionTypeDef
):
    """
    Type definition for `ClientCreateSecurityConfigurationEncryptionConfiguration` `JobBookmarksEncryption`

    The encryption configuration for job bookmarks.

    - **JobBookmarksEncryptionMode** *(string) --*

      The encryption mode to use for job bookmarks data.

    - **KmsKeyArn** *(string) --*

      The Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
    """


_ClientCreateSecurityConfigurationEncryptionConfigurationS3EncryptionTypeDef = TypedDict(
    "_ClientCreateSecurityConfigurationEncryptionConfigurationS3EncryptionTypeDef",
    {"S3EncryptionMode": str, "KmsKeyArn": str},
    total=False,
)


class ClientCreateSecurityConfigurationEncryptionConfigurationS3EncryptionTypeDef(
    _ClientCreateSecurityConfigurationEncryptionConfigurationS3EncryptionTypeDef
):
    """
    Type definition for `ClientCreateSecurityConfigurationEncryptionConfiguration` `S3Encryption`

    Specifies how Amazon Simple Storage Service (Amazon S3) data should be encrypted.

    - **S3EncryptionMode** *(string) --*

      The encryption mode to use for Amazon S3 data.

    - **KmsKeyArn** *(string) --*

      The Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
    """


_ClientCreateSecurityConfigurationEncryptionConfigurationTypeDef = TypedDict(
    "_ClientCreateSecurityConfigurationEncryptionConfigurationTypeDef",
    {
        "S3Encryption": List[
            ClientCreateSecurityConfigurationEncryptionConfigurationS3EncryptionTypeDef
        ],
        "CloudWatchEncryption": ClientCreateSecurityConfigurationEncryptionConfigurationCloudWatchEncryptionTypeDef,
        "JobBookmarksEncryption": ClientCreateSecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionTypeDef,
    },
    total=False,
)


class ClientCreateSecurityConfigurationEncryptionConfigurationTypeDef(
    _ClientCreateSecurityConfigurationEncryptionConfigurationTypeDef
):
    """
    Type definition for `ClientCreateSecurityConfiguration` `EncryptionConfiguration`

    The encryption configuration for the new security configuration.

    - **S3Encryption** *(list) --*

      The encryption configuration for Amazon Simple Storage Service (Amazon S3) data.

      - *(dict) --*

        Specifies how Amazon Simple Storage Service (Amazon S3) data should be encrypted.

        - **S3EncryptionMode** *(string) --*

          The encryption mode to use for Amazon S3 data.

        - **KmsKeyArn** *(string) --*

          The Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.

    - **CloudWatchEncryption** *(dict) --*

      The encryption configuration for Amazon CloudWatch.

      - **CloudWatchEncryptionMode** *(string) --*

        The encryption mode to use for CloudWatch data.

      - **KmsKeyArn** *(string) --*

        The Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.

    - **JobBookmarksEncryption** *(dict) --*

      The encryption configuration for job bookmarks.

      - **JobBookmarksEncryptionMode** *(string) --*

        The encryption mode to use for job bookmarks data.

      - **KmsKeyArn** *(string) --*

        The Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
    """


_ClientCreateSecurityConfigurationResponseTypeDef = TypedDict(
    "_ClientCreateSecurityConfigurationResponseTypeDef",
    {"Name": str, "CreatedTimestamp": datetime},
    total=False,
)


class ClientCreateSecurityConfigurationResponseTypeDef(
    _ClientCreateSecurityConfigurationResponseTypeDef
):
    """
    Type definition for `ClientCreateSecurityConfiguration` `Response`

    - **Name** *(string) --*

      The name assigned to the new security configuration.

    - **CreatedTimestamp** *(datetime) --*

      The time at which the new security configuration was created.
    """


_RequiredClientCreateTableTableInputPartitionKeysTypeDef = TypedDict(
    "_RequiredClientCreateTableTableInputPartitionKeysTypeDef", {"Name": str}
)
_OptionalClientCreateTableTableInputPartitionKeysTypeDef = TypedDict(
    "_OptionalClientCreateTableTableInputPartitionKeysTypeDef",
    {"Type": str, "Comment": str, "Parameters": Dict[str, str]},
    total=False,
)


class ClientCreateTableTableInputPartitionKeysTypeDef(
    _RequiredClientCreateTableTableInputPartitionKeysTypeDef,
    _OptionalClientCreateTableTableInputPartitionKeysTypeDef,
):
    """
    Type definition for `ClientCreateTableTableInput` `PartitionKeys`

    A column in a ``Table`` .

    - **Name** *(string) --* **[REQUIRED]**

      The name of the ``Column`` .

    - **Type** *(string) --*

      The data type of the ``Column`` .

    - **Comment** *(string) --*

      A free-form text comment.

    - **Parameters** *(dict) --*

      These key-value pairs define properties associated with the column.

      - *(string) --*

        - *(string) --*
    """


_RequiredClientCreateTableTableInputStorageDescriptorColumnsTypeDef = TypedDict(
    "_RequiredClientCreateTableTableInputStorageDescriptorColumnsTypeDef", {"Name": str}
)
_OptionalClientCreateTableTableInputStorageDescriptorColumnsTypeDef = TypedDict(
    "_OptionalClientCreateTableTableInputStorageDescriptorColumnsTypeDef",
    {"Type": str, "Comment": str, "Parameters": Dict[str, str]},
    total=False,
)


class ClientCreateTableTableInputStorageDescriptorColumnsTypeDef(
    _RequiredClientCreateTableTableInputStorageDescriptorColumnsTypeDef,
    _OptionalClientCreateTableTableInputStorageDescriptorColumnsTypeDef,
):
    """
    Type definition for `ClientCreateTableTableInputStorageDescriptor` `Columns`

    A column in a ``Table`` .

    - **Name** *(string) --* **[REQUIRED]**

      The name of the ``Column`` .

    - **Type** *(string) --*

      The data type of the ``Column`` .

    - **Comment** *(string) --*

      A free-form text comment.

    - **Parameters** *(dict) --*

      These key-value pairs define properties associated with the column.

      - *(string) --*

        - *(string) --*
    """


_ClientCreateTableTableInputStorageDescriptorSerdeInfoTypeDef = TypedDict(
    "_ClientCreateTableTableInputStorageDescriptorSerdeInfoTypeDef",
    {"Name": str, "SerializationLibrary": str, "Parameters": Dict[str, str]},
    total=False,
)


class ClientCreateTableTableInputStorageDescriptorSerdeInfoTypeDef(
    _ClientCreateTableTableInputStorageDescriptorSerdeInfoTypeDef
):
    """
    Type definition for `ClientCreateTableTableInputStorageDescriptor` `SerdeInfo`

    The serialization/deserialization (SerDe) information.

    - **Name** *(string) --*

      Name of the SerDe.

    - **SerializationLibrary** *(string) --*

      Usually the class that implements the SerDe. An example is
      ``org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`` .

    - **Parameters** *(dict) --*

      These key-value pairs define initialization parameters for the SerDe.

      - *(string) --*

        - *(string) --*
    """


_ClientCreateTableTableInputStorageDescriptorSkewedInfoTypeDef = TypedDict(
    "_ClientCreateTableTableInputStorageDescriptorSkewedInfoTypeDef",
    {
        "SkewedColumnNames": List[str],
        "SkewedColumnValues": List[str],
        "SkewedColumnValueLocationMaps": Dict[str, str],
    },
    total=False,
)


class ClientCreateTableTableInputStorageDescriptorSkewedInfoTypeDef(
    _ClientCreateTableTableInputStorageDescriptorSkewedInfoTypeDef
):
    """
    Type definition for `ClientCreateTableTableInputStorageDescriptor` `SkewedInfo`

    The information about values that appear frequently in a column (skewed values).

    - **SkewedColumnNames** *(list) --*

      A list of names of columns that contain skewed values.

      - *(string) --*

    - **SkewedColumnValues** *(list) --*

      A list of values that appear so frequently as to be considered skewed.

      - *(string) --*

    - **SkewedColumnValueLocationMaps** *(dict) --*

      A mapping of skewed values to the columns that contain them.

      - *(string) --*

        - *(string) --*
    """


_ClientCreateTableTableInputStorageDescriptorSortColumnsTypeDef = TypedDict(
    "_ClientCreateTableTableInputStorageDescriptorSortColumnsTypeDef",
    {"Column": str, "SortOrder": int},
)


class ClientCreateTableTableInputStorageDescriptorSortColumnsTypeDef(
    _ClientCreateTableTableInputStorageDescriptorSortColumnsTypeDef
):
    """
    Type definition for `ClientCreateTableTableInputStorageDescriptor` `SortColumns`

    Specifies the sort order of a sorted column.

    - **Column** *(string) --* **[REQUIRED]**

      The name of the column.

    - **SortOrder** *(integer) --* **[REQUIRED]**

      Indicates that the column is sorted in ascending order (``== 1`` ), or in descending
      order (``==0`` ).
    """


_ClientCreateTableTableInputStorageDescriptorTypeDef = TypedDict(
    "_ClientCreateTableTableInputStorageDescriptorTypeDef",
    {
        "Columns": List[ClientCreateTableTableInputStorageDescriptorColumnsTypeDef],
        "Location": str,
        "InputFormat": str,
        "OutputFormat": str,
        "Compressed": bool,
        "NumberOfBuckets": int,
        "SerdeInfo": ClientCreateTableTableInputStorageDescriptorSerdeInfoTypeDef,
        "BucketColumns": List[str],
        "SortColumns": List[
            ClientCreateTableTableInputStorageDescriptorSortColumnsTypeDef
        ],
        "Parameters": Dict[str, str],
        "SkewedInfo": ClientCreateTableTableInputStorageDescriptorSkewedInfoTypeDef,
        "StoredAsSubDirectories": bool,
    },
    total=False,
)


class ClientCreateTableTableInputStorageDescriptorTypeDef(
    _ClientCreateTableTableInputStorageDescriptorTypeDef
):
    """
    Type definition for `ClientCreateTableTableInput` `StorageDescriptor`

    A storage descriptor containing information about the physical storage of this table.

    - **Columns** *(list) --*

      A list of the ``Columns`` in the table.

      - *(dict) --*

        A column in a ``Table`` .

        - **Name** *(string) --* **[REQUIRED]**

          The name of the ``Column`` .

        - **Type** *(string) --*

          The data type of the ``Column`` .

        - **Comment** *(string) --*

          A free-form text comment.

        - **Parameters** *(dict) --*

          These key-value pairs define properties associated with the column.

          - *(string) --*

            - *(string) --*

    - **Location** *(string) --*

      The physical location of the table. By default, this takes the form of the warehouse
      location, followed by the database location in the warehouse, followed by the table name.

    - **InputFormat** *(string) --*

      The input format: ``SequenceFileInputFormat`` (binary), or ``TextInputFormat`` , or a custom
      format.

    - **OutputFormat** *(string) --*

      The output format: ``SequenceFileOutputFormat`` (binary), or ``IgnoreKeyTextOutputFormat`` ,
      or a custom format.

    - **Compressed** *(boolean) --*

       ``True`` if the data in the table is compressed, or ``False`` if not.

    - **NumberOfBuckets** *(integer) --*

      Must be specified if the table contains any dimension columns.

    - **SerdeInfo** *(dict) --*

      The serialization/deserialization (SerDe) information.

      - **Name** *(string) --*

        Name of the SerDe.

      - **SerializationLibrary** *(string) --*

        Usually the class that implements the SerDe. An example is
        ``org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`` .

      - **Parameters** *(dict) --*

        These key-value pairs define initialization parameters for the SerDe.

        - *(string) --*

          - *(string) --*

    - **BucketColumns** *(list) --*

      A list of reducer grouping columns, clustering columns, and bucketing columns in the table.

      - *(string) --*

    - **SortColumns** *(list) --*

      A list specifying the sort order of each bucket in the table.

      - *(dict) --*

        Specifies the sort order of a sorted column.

        - **Column** *(string) --* **[REQUIRED]**

          The name of the column.

        - **SortOrder** *(integer) --* **[REQUIRED]**

          Indicates that the column is sorted in ascending order (``== 1`` ), or in descending
          order (``==0`` ).

    - **Parameters** *(dict) --*

      The user-supplied properties in key-value form.

      - *(string) --*

        - *(string) --*

    - **SkewedInfo** *(dict) --*

      The information about values that appear frequently in a column (skewed values).

      - **SkewedColumnNames** *(list) --*

        A list of names of columns that contain skewed values.

        - *(string) --*

      - **SkewedColumnValues** *(list) --*

        A list of values that appear so frequently as to be considered skewed.

        - *(string) --*

      - **SkewedColumnValueLocationMaps** *(dict) --*

        A mapping of skewed values to the columns that contain them.

        - *(string) --*

          - *(string) --*

    - **StoredAsSubDirectories** *(boolean) --*

       ``True`` if the table data is stored in subdirectories, or ``False`` if not.
    """


_RequiredClientCreateTableTableInputTypeDef = TypedDict(
    "_RequiredClientCreateTableTableInputTypeDef", {"Name": str}
)
_OptionalClientCreateTableTableInputTypeDef = TypedDict(
    "_OptionalClientCreateTableTableInputTypeDef",
    {
        "Description": str,
        "Owner": str,
        "LastAccessTime": datetime,
        "LastAnalyzedTime": datetime,
        "Retention": int,
        "StorageDescriptor": ClientCreateTableTableInputStorageDescriptorTypeDef,
        "PartitionKeys": List[ClientCreateTableTableInputPartitionKeysTypeDef],
        "ViewOriginalText": str,
        "ViewExpandedText": str,
        "TableType": str,
        "Parameters": Dict[str, str],
    },
    total=False,
)


class ClientCreateTableTableInputTypeDef(
    _RequiredClientCreateTableTableInputTypeDef,
    _OptionalClientCreateTableTableInputTypeDef,
):
    """
    Type definition for `ClientCreateTable` `TableInput`

    The ``TableInput`` object that defines the metadata table to create in the catalog.

    - **Name** *(string) --* **[REQUIRED]**

      The table name. For Hive compatibility, this is folded to lowercase when it is stored.

    - **Description** *(string) --*

      A description of the table.

    - **Owner** *(string) --*

      The table owner.

    - **LastAccessTime** *(datetime) --*

      The last time that the table was accessed.

    - **LastAnalyzedTime** *(datetime) --*

      The last time that column statistics were computed for this table.

    - **Retention** *(integer) --*

      The retention time for this table.

    - **StorageDescriptor** *(dict) --*

      A storage descriptor containing information about the physical storage of this table.

      - **Columns** *(list) --*

        A list of the ``Columns`` in the table.

        - *(dict) --*

          A column in a ``Table`` .

          - **Name** *(string) --* **[REQUIRED]**

            The name of the ``Column`` .

          - **Type** *(string) --*

            The data type of the ``Column`` .

          - **Comment** *(string) --*

            A free-form text comment.

          - **Parameters** *(dict) --*

            These key-value pairs define properties associated with the column.

            - *(string) --*

              - *(string) --*

      - **Location** *(string) --*

        The physical location of the table. By default, this takes the form of the warehouse
        location, followed by the database location in the warehouse, followed by the table name.

      - **InputFormat** *(string) --*

        The input format: ``SequenceFileInputFormat`` (binary), or ``TextInputFormat`` , or a custom
        format.

      - **OutputFormat** *(string) --*

        The output format: ``SequenceFileOutputFormat`` (binary), or ``IgnoreKeyTextOutputFormat`` ,
        or a custom format.

      - **Compressed** *(boolean) --*

         ``True`` if the data in the table is compressed, or ``False`` if not.

      - **NumberOfBuckets** *(integer) --*

        Must be specified if the table contains any dimension columns.

      - **SerdeInfo** *(dict) --*

        The serialization/deserialization (SerDe) information.

        - **Name** *(string) --*

          Name of the SerDe.

        - **SerializationLibrary** *(string) --*

          Usually the class that implements the SerDe. An example is
          ``org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`` .

        - **Parameters** *(dict) --*

          These key-value pairs define initialization parameters for the SerDe.

          - *(string) --*

            - *(string) --*

      - **BucketColumns** *(list) --*

        A list of reducer grouping columns, clustering columns, and bucketing columns in the table.

        - *(string) --*

      - **SortColumns** *(list) --*

        A list specifying the sort order of each bucket in the table.

        - *(dict) --*

          Specifies the sort order of a sorted column.

          - **Column** *(string) --* **[REQUIRED]**

            The name of the column.

          - **SortOrder** *(integer) --* **[REQUIRED]**

            Indicates that the column is sorted in ascending order (``== 1`` ), or in descending
            order (``==0`` ).

      - **Parameters** *(dict) --*

        The user-supplied properties in key-value form.

        - *(string) --*

          - *(string) --*

      - **SkewedInfo** *(dict) --*

        The information about values that appear frequently in a column (skewed values).

        - **SkewedColumnNames** *(list) --*

          A list of names of columns that contain skewed values.

          - *(string) --*

        - **SkewedColumnValues** *(list) --*

          A list of values that appear so frequently as to be considered skewed.

          - *(string) --*

        - **SkewedColumnValueLocationMaps** *(dict) --*

          A mapping of skewed values to the columns that contain them.

          - *(string) --*

            - *(string) --*

      - **StoredAsSubDirectories** *(boolean) --*

         ``True`` if the table data is stored in subdirectories, or ``False`` if not.

    - **PartitionKeys** *(list) --*

      A list of columns by which the table is partitioned. Only primitive types are supported as
      partition keys.

      When you create a table used by Amazon Athena, and you do not specify any ``partitionKeys`` ,
      you must at least set the value of ``partitionKeys`` to an empty list. For example:

       ``"PartitionKeys": []``

      - *(dict) --*

        A column in a ``Table`` .

        - **Name** *(string) --* **[REQUIRED]**

          The name of the ``Column`` .

        - **Type** *(string) --*

          The data type of the ``Column`` .

        - **Comment** *(string) --*

          A free-form text comment.

        - **Parameters** *(dict) --*

          These key-value pairs define properties associated with the column.

          - *(string) --*

            - *(string) --*

    - **ViewOriginalText** *(string) --*

      If the table is a view, the original text of the view; otherwise ``null`` .

    - **ViewExpandedText** *(string) --*

      If the table is a view, the expanded text of the view; otherwise ``null`` .

    - **TableType** *(string) --*

      The type of this table (``EXTERNAL_TABLE`` , ``VIRTUAL_VIEW`` , etc.).

    - **Parameters** *(dict) --*

      These key-value pairs define properties associated with the table.

      - *(string) --*

        - *(string) --*
    """


_ClientCreateTriggerActionsNotificationPropertyTypeDef = TypedDict(
    "_ClientCreateTriggerActionsNotificationPropertyTypeDef",
    {"NotifyDelayAfter": int},
    total=False,
)


class ClientCreateTriggerActionsNotificationPropertyTypeDef(
    _ClientCreateTriggerActionsNotificationPropertyTypeDef
):
    """
    Type definition for `ClientCreateTriggerActions` `NotificationProperty`

    Specifies configuration properties of a job run notification.

    - **NotifyDelayAfter** *(integer) --*

      After a job run starts, the number of minutes to wait before sending a job run delay
      notification.
    """


_ClientCreateTriggerActionsTypeDef = TypedDict(
    "_ClientCreateTriggerActionsTypeDef",
    {
        "JobName": str,
        "Arguments": Dict[str, str],
        "Timeout": int,
        "SecurityConfiguration": str,
        "NotificationProperty": ClientCreateTriggerActionsNotificationPropertyTypeDef,
        "CrawlerName": str,
    },
    total=False,
)


class ClientCreateTriggerActionsTypeDef(_ClientCreateTriggerActionsTypeDef):
    """
    Type definition for `ClientCreateTrigger` `Actions`

    Defines an action to be initiated by a trigger.

    - **JobName** *(string) --*

      The name of a job to be executed.

    - **Arguments** *(dict) --*

      The job arguments used when this trigger fires. For this job run, they replace the default
      arguments set in the job definition itself.

      You can specify arguments here that your own job-execution script consumes, as well as
      arguments that AWS Glue itself consumes.

      For information about how to specify and consume your own Job arguments, see the `Calling AWS
      Glue APIs in Python
      <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
      topic in the developer guide.

      For information about the key-value pairs that AWS Glue consumes to set up your job, see the
      `Special Parameters Used by AWS Glue
      <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
      topic in the developer guide.

      - *(string) --*

        - *(string) --*

    - **Timeout** *(integer) --*

      The ``JobRun`` timeout in minutes. This is the maximum time that a job run can consume
      resources before it is terminated and enters ``TIMEOUT`` status. The default is 2,880 minutes
      (48 hours). This overrides the timeout value set in the parent job.

    - **SecurityConfiguration** *(string) --*

      The name of the ``SecurityConfiguration`` structure to be used with this action.

    - **NotificationProperty** *(dict) --*

      Specifies configuration properties of a job run notification.

      - **NotifyDelayAfter** *(integer) --*

        After a job run starts, the number of minutes to wait before sending a job run delay
        notification.

    - **CrawlerName** *(string) --*

      The name of the crawler to be used with this action.
    """


_ClientCreateTriggerPredicateConditionsTypeDef = TypedDict(
    "_ClientCreateTriggerPredicateConditionsTypeDef",
    {
        "LogicalOperator": str,
        "JobName": str,
        "State": str,
        "CrawlerName": str,
        "CrawlState": str,
    },
    total=False,
)


class ClientCreateTriggerPredicateConditionsTypeDef(
    _ClientCreateTriggerPredicateConditionsTypeDef
):
    """
    Type definition for `ClientCreateTriggerPredicate` `Conditions`

    Defines a condition under which a trigger fires.

    - **LogicalOperator** *(string) --*

      A logical operator.

    - **JobName** *(string) --*

      The name of the job whose ``JobRuns`` this condition applies to, and on which this trigger
      waits.

    - **State** *(string) --*

      The condition state. Currently, the values supported are ``SUCCEEDED`` , ``STOPPED`` ,
      ``TIMEOUT`` , and ``FAILED`` .

    - **CrawlerName** *(string) --*

      The name of the crawler to which this condition applies.

    - **CrawlState** *(string) --*

      The state of the crawler to which this condition applies.
    """


_ClientCreateTriggerPredicateTypeDef = TypedDict(
    "_ClientCreateTriggerPredicateTypeDef",
    {"Logical": str, "Conditions": List[ClientCreateTriggerPredicateConditionsTypeDef]},
    total=False,
)


class ClientCreateTriggerPredicateTypeDef(_ClientCreateTriggerPredicateTypeDef):
    """
    Type definition for `ClientCreateTrigger` `Predicate`

    A predicate to specify when the new trigger should fire.

    This field is required when the trigger type is ``CONDITIONAL`` .

    - **Logical** *(string) --*

      An optional field if only one condition is listed. If multiple conditions are listed, then this
      field is required.

    - **Conditions** *(list) --*

      A list of the conditions that determine when the trigger will fire.

      - *(dict) --*

        Defines a condition under which a trigger fires.

        - **LogicalOperator** *(string) --*

          A logical operator.

        - **JobName** *(string) --*

          The name of the job whose ``JobRuns`` this condition applies to, and on which this trigger
          waits.

        - **State** *(string) --*

          The condition state. Currently, the values supported are ``SUCCEEDED`` , ``STOPPED`` ,
          ``TIMEOUT`` , and ``FAILED`` .

        - **CrawlerName** *(string) --*

          The name of the crawler to which this condition applies.

        - **CrawlState** *(string) --*

          The state of the crawler to which this condition applies.
    """


_ClientCreateTriggerResponseTypeDef = TypedDict(
    "_ClientCreateTriggerResponseTypeDef", {"Name": str}, total=False
)


class ClientCreateTriggerResponseTypeDef(_ClientCreateTriggerResponseTypeDef):
    """
    Type definition for `ClientCreateTrigger` `Response`

    - **Name** *(string) --*

      The name of the trigger.
    """


_ClientCreateUserDefinedFunctionFunctionInputResourceUrisTypeDef = TypedDict(
    "_ClientCreateUserDefinedFunctionFunctionInputResourceUrisTypeDef",
    {"ResourceType": str, "Uri": str},
    total=False,
)


class ClientCreateUserDefinedFunctionFunctionInputResourceUrisTypeDef(
    _ClientCreateUserDefinedFunctionFunctionInputResourceUrisTypeDef
):
    """
    Type definition for `ClientCreateUserDefinedFunctionFunctionInput` `ResourceUris`

    The URIs for function resources.

    - **ResourceType** *(string) --*

      The type of the resource.

    - **Uri** *(string) --*

      The URI for accessing the resource.
    """


_ClientCreateUserDefinedFunctionFunctionInputTypeDef = TypedDict(
    "_ClientCreateUserDefinedFunctionFunctionInputTypeDef",
    {
        "FunctionName": str,
        "ClassName": str,
        "OwnerName": str,
        "OwnerType": str,
        "ResourceUris": List[
            ClientCreateUserDefinedFunctionFunctionInputResourceUrisTypeDef
        ],
    },
    total=False,
)


class ClientCreateUserDefinedFunctionFunctionInputTypeDef(
    _ClientCreateUserDefinedFunctionFunctionInputTypeDef
):
    """
    Type definition for `ClientCreateUserDefinedFunction` `FunctionInput`

    A ``FunctionInput`` object that defines the function to create in the Data Catalog.

    - **FunctionName** *(string) --*

      The name of the function.

    - **ClassName** *(string) --*

      The Java class that contains the function code.

    - **OwnerName** *(string) --*

      The owner of the function.

    - **OwnerType** *(string) --*

      The owner type.

    - **ResourceUris** *(list) --*

      The resource URIs for the function.

      - *(dict) --*

        The URIs for function resources.

        - **ResourceType** *(string) --*

          The type of the resource.

        - **Uri** *(string) --*

          The URI for accessing the resource.
    """


_ClientCreateWorkflowResponseTypeDef = TypedDict(
    "_ClientCreateWorkflowResponseTypeDef", {"Name": str}, total=False
)


class ClientCreateWorkflowResponseTypeDef(_ClientCreateWorkflowResponseTypeDef):
    """
    Type definition for `ClientCreateWorkflow` `Response`

    - **Name** *(string) --*

      The name of the workflow which was provided as part of the request.
    """


_ClientDeleteJobResponseTypeDef = TypedDict(
    "_ClientDeleteJobResponseTypeDef", {"JobName": str}, total=False
)


class ClientDeleteJobResponseTypeDef(_ClientDeleteJobResponseTypeDef):
    """
    Type definition for `ClientDeleteJob` `Response`

    - **JobName** *(string) --*

      The name of the job definition that was deleted.
    """


_ClientDeleteMlTransformResponseTypeDef = TypedDict(
    "_ClientDeleteMlTransformResponseTypeDef", {"TransformId": str}, total=False
)


class ClientDeleteMlTransformResponseTypeDef(_ClientDeleteMlTransformResponseTypeDef):
    """
    Type definition for `ClientDeleteMlTransform` `Response`

    - **TransformId** *(string) --*

      The unique identifier of the transform that was deleted.
    """


_ClientDeleteTriggerResponseTypeDef = TypedDict(
    "_ClientDeleteTriggerResponseTypeDef", {"Name": str}, total=False
)


class ClientDeleteTriggerResponseTypeDef(_ClientDeleteTriggerResponseTypeDef):
    """
    Type definition for `ClientDeleteTrigger` `Response`

    - **Name** *(string) --*

      The name of the trigger that was deleted.
    """


_ClientDeleteWorkflowResponseTypeDef = TypedDict(
    "_ClientDeleteWorkflowResponseTypeDef", {"Name": str}, total=False
)


class ClientDeleteWorkflowResponseTypeDef(_ClientDeleteWorkflowResponseTypeDef):
    """
    Type definition for `ClientDeleteWorkflow` `Response`

    - **Name** *(string) --*

      Name of the workflow specified in input.
    """


_ClientGetCatalogImportStatusResponseImportStatusTypeDef = TypedDict(
    "_ClientGetCatalogImportStatusResponseImportStatusTypeDef",
    {"ImportCompleted": bool, "ImportTime": datetime, "ImportedBy": str},
    total=False,
)


class ClientGetCatalogImportStatusResponseImportStatusTypeDef(
    _ClientGetCatalogImportStatusResponseImportStatusTypeDef
):
    """
    Type definition for `ClientGetCatalogImportStatusResponse` `ImportStatus`

    The status of the specified catalog migration.

    - **ImportCompleted** *(boolean) --*

       ``True`` if the migration has completed, or ``False`` otherwise.

    - **ImportTime** *(datetime) --*

      The time that the migration was started.

    - **ImportedBy** *(string) --*

      The name of the person who initiated the migration.
    """


_ClientGetCatalogImportStatusResponseTypeDef = TypedDict(
    "_ClientGetCatalogImportStatusResponseTypeDef",
    {"ImportStatus": ClientGetCatalogImportStatusResponseImportStatusTypeDef},
    total=False,
)


class ClientGetCatalogImportStatusResponseTypeDef(
    _ClientGetCatalogImportStatusResponseTypeDef
):
    """
    Type definition for `ClientGetCatalogImportStatus` `Response`

    - **ImportStatus** *(dict) --*

      The status of the specified catalog migration.

      - **ImportCompleted** *(boolean) --*

         ``True`` if the migration has completed, or ``False`` otherwise.

      - **ImportTime** *(datetime) --*

        The time that the migration was started.

      - **ImportedBy** *(string) --*

        The name of the person who initiated the migration.
    """


_ClientGetClassifierResponseClassifierCsvClassifierTypeDef = TypedDict(
    "_ClientGetClassifierResponseClassifierCsvClassifierTypeDef",
    {
        "Name": str,
        "CreationTime": datetime,
        "LastUpdated": datetime,
        "Version": int,
        "Delimiter": str,
        "QuoteSymbol": str,
        "ContainsHeader": str,
        "Header": List[str],
        "DisableValueTrimming": bool,
        "AllowSingleColumn": bool,
    },
    total=False,
)


class ClientGetClassifierResponseClassifierCsvClassifierTypeDef(
    _ClientGetClassifierResponseClassifierCsvClassifierTypeDef
):
    """
    Type definition for `ClientGetClassifierResponseClassifier` `CsvClassifier`

    A classifier for comma-separated values (CSV).

    - **Name** *(string) --*

      The name of the classifier.

    - **CreationTime** *(datetime) --*

      The time that this classifier was registered.

    - **LastUpdated** *(datetime) --*

      The time that this classifier was last updated.

    - **Version** *(integer) --*

      The version of this classifier.

    - **Delimiter** *(string) --*

      A custom symbol to denote what separates each column entry in the row.

    - **QuoteSymbol** *(string) --*

      A custom symbol to denote what combines content into a single column value. It must be
      different from the column delimiter.

    - **ContainsHeader** *(string) --*

      Indicates whether the CSV file contains a header.

    - **Header** *(list) --*

      A list of strings representing column names.

      - *(string) --*

    - **DisableValueTrimming** *(boolean) --*

      Specifies not to trim values before identifying the type of column values. The default
      value is ``true`` .

    - **AllowSingleColumn** *(boolean) --*

      Enables the processing of files that contain only one column.
    """


_ClientGetClassifierResponseClassifierGrokClassifierTypeDef = TypedDict(
    "_ClientGetClassifierResponseClassifierGrokClassifierTypeDef",
    {
        "Name": str,
        "Classification": str,
        "CreationTime": datetime,
        "LastUpdated": datetime,
        "Version": int,
        "GrokPattern": str,
        "CustomPatterns": str,
    },
    total=False,
)


class ClientGetClassifierResponseClassifierGrokClassifierTypeDef(
    _ClientGetClassifierResponseClassifierGrokClassifierTypeDef
):
    """
    Type definition for `ClientGetClassifierResponseClassifier` `GrokClassifier`

    A classifier that uses ``grok`` .

    - **Name** *(string) --*

      The name of the classifier.

    - **Classification** *(string) --*

      An identifier of the data format that the classifier matches, such as Twitter, JSON,
      Omniture logs, and so on.

    - **CreationTime** *(datetime) --*

      The time that this classifier was registered.

    - **LastUpdated** *(datetime) --*

      The time that this classifier was last updated.

    - **Version** *(integer) --*

      The version of this classifier.

    - **GrokPattern** *(string) --*

      The grok pattern applied to a data store by this classifier. For more information, see
      built-in patterns in `Writing Custom Classifiers
      <http://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html>`__ .

    - **CustomPatterns** *(string) --*

      Optional custom grok patterns defined by this classifier. For more information, see
      custom patterns in `Writing Custom Classifiers
      <http://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html>`__ .
    """


_ClientGetClassifierResponseClassifierJsonClassifierTypeDef = TypedDict(
    "_ClientGetClassifierResponseClassifierJsonClassifierTypeDef",
    {
        "Name": str,
        "CreationTime": datetime,
        "LastUpdated": datetime,
        "Version": int,
        "JsonPath": str,
    },
    total=False,
)


class ClientGetClassifierResponseClassifierJsonClassifierTypeDef(
    _ClientGetClassifierResponseClassifierJsonClassifierTypeDef
):
    """
    Type definition for `ClientGetClassifierResponseClassifier` `JsonClassifier`

    A classifier for JSON content.

    - **Name** *(string) --*

      The name of the classifier.

    - **CreationTime** *(datetime) --*

      The time that this classifier was registered.

    - **LastUpdated** *(datetime) --*

      The time that this classifier was last updated.

    - **Version** *(integer) --*

      The version of this classifier.

    - **JsonPath** *(string) --*

      A ``JsonPath`` string defining the JSON data for the classifier to classify. AWS Glue
      supports a subset of ``JsonPath`` , as described in `Writing JsonPath Custom Classifiers
      <https://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html#custom-classifier-json>`__
      .
    """


_ClientGetClassifierResponseClassifierXMLClassifierTypeDef = TypedDict(
    "_ClientGetClassifierResponseClassifierXMLClassifierTypeDef",
    {
        "Name": str,
        "Classification": str,
        "CreationTime": datetime,
        "LastUpdated": datetime,
        "Version": int,
        "RowTag": str,
    },
    total=False,
)


class ClientGetClassifierResponseClassifierXMLClassifierTypeDef(
    _ClientGetClassifierResponseClassifierXMLClassifierTypeDef
):
    """
    Type definition for `ClientGetClassifierResponseClassifier` `XMLClassifier`

    A classifier for XML content.

    - **Name** *(string) --*

      The name of the classifier.

    - **Classification** *(string) --*

      An identifier of the data format that the classifier matches.

    - **CreationTime** *(datetime) --*

      The time that this classifier was registered.

    - **LastUpdated** *(datetime) --*

      The time that this classifier was last updated.

    - **Version** *(integer) --*

      The version of this classifier.

    - **RowTag** *(string) --*

      The XML tag designating the element that contains each record in an XML document being
      parsed. This can't identify a self-closing element (closed by ``/>`` ). An empty row
      element that contains only attributes can be parsed as long as it ends with a closing tag
      (for example, ``<row item_a="A" item_b="B"></row>`` is okay, but ``<row item_a="A"
      item_b="B" />`` is not).
    """


_ClientGetClassifierResponseClassifierTypeDef = TypedDict(
    "_ClientGetClassifierResponseClassifierTypeDef",
    {
        "GrokClassifier": ClientGetClassifierResponseClassifierGrokClassifierTypeDef,
        "XMLClassifier": ClientGetClassifierResponseClassifierXMLClassifierTypeDef,
        "JsonClassifier": ClientGetClassifierResponseClassifierJsonClassifierTypeDef,
        "CsvClassifier": ClientGetClassifierResponseClassifierCsvClassifierTypeDef,
    },
    total=False,
)


class ClientGetClassifierResponseClassifierTypeDef(
    _ClientGetClassifierResponseClassifierTypeDef
):
    """
    Type definition for `ClientGetClassifierResponse` `Classifier`

    The requested classifier.

    - **GrokClassifier** *(dict) --*

      A classifier that uses ``grok`` .

      - **Name** *(string) --*

        The name of the classifier.

      - **Classification** *(string) --*

        An identifier of the data format that the classifier matches, such as Twitter, JSON,
        Omniture logs, and so on.

      - **CreationTime** *(datetime) --*

        The time that this classifier was registered.

      - **LastUpdated** *(datetime) --*

        The time that this classifier was last updated.

      - **Version** *(integer) --*

        The version of this classifier.

      - **GrokPattern** *(string) --*

        The grok pattern applied to a data store by this classifier. For more information, see
        built-in patterns in `Writing Custom Classifiers
        <http://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html>`__ .

      - **CustomPatterns** *(string) --*

        Optional custom grok patterns defined by this classifier. For more information, see
        custom patterns in `Writing Custom Classifiers
        <http://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html>`__ .

    - **XMLClassifier** *(dict) --*

      A classifier for XML content.

      - **Name** *(string) --*

        The name of the classifier.

      - **Classification** *(string) --*

        An identifier of the data format that the classifier matches.

      - **CreationTime** *(datetime) --*

        The time that this classifier was registered.

      - **LastUpdated** *(datetime) --*

        The time that this classifier was last updated.

      - **Version** *(integer) --*

        The version of this classifier.

      - **RowTag** *(string) --*

        The XML tag designating the element that contains each record in an XML document being
        parsed. This can't identify a self-closing element (closed by ``/>`` ). An empty row
        element that contains only attributes can be parsed as long as it ends with a closing tag
        (for example, ``<row item_a="A" item_b="B"></row>`` is okay, but ``<row item_a="A"
        item_b="B" />`` is not).

    - **JsonClassifier** *(dict) --*

      A classifier for JSON content.

      - **Name** *(string) --*

        The name of the classifier.

      - **CreationTime** *(datetime) --*

        The time that this classifier was registered.

      - **LastUpdated** *(datetime) --*

        The time that this classifier was last updated.

      - **Version** *(integer) --*

        The version of this classifier.

      - **JsonPath** *(string) --*

        A ``JsonPath`` string defining the JSON data for the classifier to classify. AWS Glue
        supports a subset of ``JsonPath`` , as described in `Writing JsonPath Custom Classifiers
        <https://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html#custom-classifier-json>`__
        .

    - **CsvClassifier** *(dict) --*

      A classifier for comma-separated values (CSV).

      - **Name** *(string) --*

        The name of the classifier.

      - **CreationTime** *(datetime) --*

        The time that this classifier was registered.

      - **LastUpdated** *(datetime) --*

        The time that this classifier was last updated.

      - **Version** *(integer) --*

        The version of this classifier.

      - **Delimiter** *(string) --*

        A custom symbol to denote what separates each column entry in the row.

      - **QuoteSymbol** *(string) --*

        A custom symbol to denote what combines content into a single column value. It must be
        different from the column delimiter.

      - **ContainsHeader** *(string) --*

        Indicates whether the CSV file contains a header.

      - **Header** *(list) --*

        A list of strings representing column names.

        - *(string) --*

      - **DisableValueTrimming** *(boolean) --*

        Specifies not to trim values before identifying the type of column values. The default
        value is ``true`` .

      - **AllowSingleColumn** *(boolean) --*

        Enables the processing of files that contain only one column.
    """


_ClientGetClassifierResponseTypeDef = TypedDict(
    "_ClientGetClassifierResponseTypeDef",
    {"Classifier": ClientGetClassifierResponseClassifierTypeDef},
    total=False,
)


class ClientGetClassifierResponseTypeDef(_ClientGetClassifierResponseTypeDef):
    """
    Type definition for `ClientGetClassifier` `Response`

    - **Classifier** *(dict) --*

      The requested classifier.

      - **GrokClassifier** *(dict) --*

        A classifier that uses ``grok`` .

        - **Name** *(string) --*

          The name of the classifier.

        - **Classification** *(string) --*

          An identifier of the data format that the classifier matches, such as Twitter, JSON,
          Omniture logs, and so on.

        - **CreationTime** *(datetime) --*

          The time that this classifier was registered.

        - **LastUpdated** *(datetime) --*

          The time that this classifier was last updated.

        - **Version** *(integer) --*

          The version of this classifier.

        - **GrokPattern** *(string) --*

          The grok pattern applied to a data store by this classifier. For more information, see
          built-in patterns in `Writing Custom Classifiers
          <http://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html>`__ .

        - **CustomPatterns** *(string) --*

          Optional custom grok patterns defined by this classifier. For more information, see
          custom patterns in `Writing Custom Classifiers
          <http://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html>`__ .

      - **XMLClassifier** *(dict) --*

        A classifier for XML content.

        - **Name** *(string) --*

          The name of the classifier.

        - **Classification** *(string) --*

          An identifier of the data format that the classifier matches.

        - **CreationTime** *(datetime) --*

          The time that this classifier was registered.

        - **LastUpdated** *(datetime) --*

          The time that this classifier was last updated.

        - **Version** *(integer) --*

          The version of this classifier.

        - **RowTag** *(string) --*

          The XML tag designating the element that contains each record in an XML document being
          parsed. This can't identify a self-closing element (closed by ``/>`` ). An empty row
          element that contains only attributes can be parsed as long as it ends with a closing tag
          (for example, ``<row item_a="A" item_b="B"></row>`` is okay, but ``<row item_a="A"
          item_b="B" />`` is not).

      - **JsonClassifier** *(dict) --*

        A classifier for JSON content.

        - **Name** *(string) --*

          The name of the classifier.

        - **CreationTime** *(datetime) --*

          The time that this classifier was registered.

        - **LastUpdated** *(datetime) --*

          The time that this classifier was last updated.

        - **Version** *(integer) --*

          The version of this classifier.

        - **JsonPath** *(string) --*

          A ``JsonPath`` string defining the JSON data for the classifier to classify. AWS Glue
          supports a subset of ``JsonPath`` , as described in `Writing JsonPath Custom Classifiers
          <https://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html#custom-classifier-json>`__
          .

      - **CsvClassifier** *(dict) --*

        A classifier for comma-separated values (CSV).

        - **Name** *(string) --*

          The name of the classifier.

        - **CreationTime** *(datetime) --*

          The time that this classifier was registered.

        - **LastUpdated** *(datetime) --*

          The time that this classifier was last updated.

        - **Version** *(integer) --*

          The version of this classifier.

        - **Delimiter** *(string) --*

          A custom symbol to denote what separates each column entry in the row.

        - **QuoteSymbol** *(string) --*

          A custom symbol to denote what combines content into a single column value. It must be
          different from the column delimiter.

        - **ContainsHeader** *(string) --*

          Indicates whether the CSV file contains a header.

        - **Header** *(list) --*

          A list of strings representing column names.

          - *(string) --*

        - **DisableValueTrimming** *(boolean) --*

          Specifies not to trim values before identifying the type of column values. The default
          value is ``true`` .

        - **AllowSingleColumn** *(boolean) --*

          Enables the processing of files that contain only one column.
    """


_ClientGetClassifiersResponseClassifiersCsvClassifierTypeDef = TypedDict(
    "_ClientGetClassifiersResponseClassifiersCsvClassifierTypeDef",
    {
        "Name": str,
        "CreationTime": datetime,
        "LastUpdated": datetime,
        "Version": int,
        "Delimiter": str,
        "QuoteSymbol": str,
        "ContainsHeader": str,
        "Header": List[str],
        "DisableValueTrimming": bool,
        "AllowSingleColumn": bool,
    },
    total=False,
)


class ClientGetClassifiersResponseClassifiersCsvClassifierTypeDef(
    _ClientGetClassifiersResponseClassifiersCsvClassifierTypeDef
):
    """
    Type definition for `ClientGetClassifiersResponseClassifiers` `CsvClassifier`

    A classifier for comma-separated values (CSV).

    - **Name** *(string) --*

      The name of the classifier.

    - **CreationTime** *(datetime) --*

      The time that this classifier was registered.

    - **LastUpdated** *(datetime) --*

      The time that this classifier was last updated.

    - **Version** *(integer) --*

      The version of this classifier.

    - **Delimiter** *(string) --*

      A custom symbol to denote what separates each column entry in the row.

    - **QuoteSymbol** *(string) --*

      A custom symbol to denote what combines content into a single column value. It must be
      different from the column delimiter.

    - **ContainsHeader** *(string) --*

      Indicates whether the CSV file contains a header.

    - **Header** *(list) --*

      A list of strings representing column names.

      - *(string) --*

    - **DisableValueTrimming** *(boolean) --*

      Specifies not to trim values before identifying the type of column values. The default
      value is ``true`` .

    - **AllowSingleColumn** *(boolean) --*

      Enables the processing of files that contain only one column.
    """


_ClientGetClassifiersResponseClassifiersGrokClassifierTypeDef = TypedDict(
    "_ClientGetClassifiersResponseClassifiersGrokClassifierTypeDef",
    {
        "Name": str,
        "Classification": str,
        "CreationTime": datetime,
        "LastUpdated": datetime,
        "Version": int,
        "GrokPattern": str,
        "CustomPatterns": str,
    },
    total=False,
)


class ClientGetClassifiersResponseClassifiersGrokClassifierTypeDef(
    _ClientGetClassifiersResponseClassifiersGrokClassifierTypeDef
):
    """
    Type definition for `ClientGetClassifiersResponseClassifiers` `GrokClassifier`

    A classifier that uses ``grok`` .

    - **Name** *(string) --*

      The name of the classifier.

    - **Classification** *(string) --*

      An identifier of the data format that the classifier matches, such as Twitter, JSON,
      Omniture logs, and so on.

    - **CreationTime** *(datetime) --*

      The time that this classifier was registered.

    - **LastUpdated** *(datetime) --*

      The time that this classifier was last updated.

    - **Version** *(integer) --*

      The version of this classifier.

    - **GrokPattern** *(string) --*

      The grok pattern applied to a data store by this classifier. For more information, see
      built-in patterns in `Writing Custom Classifiers
      <http://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html>`__ .

    - **CustomPatterns** *(string) --*

      Optional custom grok patterns defined by this classifier. For more information, see
      custom patterns in `Writing Custom Classifiers
      <http://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html>`__ .
    """


_ClientGetClassifiersResponseClassifiersJsonClassifierTypeDef = TypedDict(
    "_ClientGetClassifiersResponseClassifiersJsonClassifierTypeDef",
    {
        "Name": str,
        "CreationTime": datetime,
        "LastUpdated": datetime,
        "Version": int,
        "JsonPath": str,
    },
    total=False,
)


class ClientGetClassifiersResponseClassifiersJsonClassifierTypeDef(
    _ClientGetClassifiersResponseClassifiersJsonClassifierTypeDef
):
    """
    Type definition for `ClientGetClassifiersResponseClassifiers` `JsonClassifier`

    A classifier for JSON content.

    - **Name** *(string) --*

      The name of the classifier.

    - **CreationTime** *(datetime) --*

      The time that this classifier was registered.

    - **LastUpdated** *(datetime) --*

      The time that this classifier was last updated.

    - **Version** *(integer) --*

      The version of this classifier.

    - **JsonPath** *(string) --*

      A ``JsonPath`` string defining the JSON data for the classifier to classify. AWS Glue
      supports a subset of ``JsonPath`` , as described in `Writing JsonPath Custom
      Classifiers
      <https://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html#custom-classifier-json>`__
      .
    """


_ClientGetClassifiersResponseClassifiersXMLClassifierTypeDef = TypedDict(
    "_ClientGetClassifiersResponseClassifiersXMLClassifierTypeDef",
    {
        "Name": str,
        "Classification": str,
        "CreationTime": datetime,
        "LastUpdated": datetime,
        "Version": int,
        "RowTag": str,
    },
    total=False,
)


class ClientGetClassifiersResponseClassifiersXMLClassifierTypeDef(
    _ClientGetClassifiersResponseClassifiersXMLClassifierTypeDef
):
    """
    Type definition for `ClientGetClassifiersResponseClassifiers` `XMLClassifier`

    A classifier for XML content.

    - **Name** *(string) --*

      The name of the classifier.

    - **Classification** *(string) --*

      An identifier of the data format that the classifier matches.

    - **CreationTime** *(datetime) --*

      The time that this classifier was registered.

    - **LastUpdated** *(datetime) --*

      The time that this classifier was last updated.

    - **Version** *(integer) --*

      The version of this classifier.

    - **RowTag** *(string) --*

      The XML tag designating the element that contains each record in an XML document being
      parsed. This can't identify a self-closing element (closed by ``/>`` ). An empty row
      element that contains only attributes can be parsed as long as it ends with a closing
      tag (for example, ``<row item_a="A" item_b="B"></row>`` is okay, but ``<row item_a="A"
      item_b="B" />`` is not).
    """


_ClientGetClassifiersResponseClassifiersTypeDef = TypedDict(
    "_ClientGetClassifiersResponseClassifiersTypeDef",
    {
        "GrokClassifier": ClientGetClassifiersResponseClassifiersGrokClassifierTypeDef,
        "XMLClassifier": ClientGetClassifiersResponseClassifiersXMLClassifierTypeDef,
        "JsonClassifier": ClientGetClassifiersResponseClassifiersJsonClassifierTypeDef,
        "CsvClassifier": ClientGetClassifiersResponseClassifiersCsvClassifierTypeDef,
    },
    total=False,
)


class ClientGetClassifiersResponseClassifiersTypeDef(
    _ClientGetClassifiersResponseClassifiersTypeDef
):
    """
    Type definition for `ClientGetClassifiersResponse` `Classifiers`

    Classifiers are triggered during a crawl task. A classifier checks whether a given file is
    in a format it can handle. If it is, the classifier creates a schema in the form of a
    ``StructType`` object that matches that data format.

    You can use the standard classifiers that AWS Glue provides, or you can write your own
    classifiers to best categorize your data sources and specify the appropriate schemas to use
    for them. A classifier can be a ``grok`` classifier, an ``XML`` classifier, a ``JSON``
    classifier, or a custom ``CSV`` classifier, as specified in one of the fields in the
    ``Classifier`` object.

    - **GrokClassifier** *(dict) --*

      A classifier that uses ``grok`` .

      - **Name** *(string) --*

        The name of the classifier.

      - **Classification** *(string) --*

        An identifier of the data format that the classifier matches, such as Twitter, JSON,
        Omniture logs, and so on.

      - **CreationTime** *(datetime) --*

        The time that this classifier was registered.

      - **LastUpdated** *(datetime) --*

        The time that this classifier was last updated.

      - **Version** *(integer) --*

        The version of this classifier.

      - **GrokPattern** *(string) --*

        The grok pattern applied to a data store by this classifier. For more information, see
        built-in patterns in `Writing Custom Classifiers
        <http://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html>`__ .

      - **CustomPatterns** *(string) --*

        Optional custom grok patterns defined by this classifier. For more information, see
        custom patterns in `Writing Custom Classifiers
        <http://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html>`__ .

    - **XMLClassifier** *(dict) --*

      A classifier for XML content.

      - **Name** *(string) --*

        The name of the classifier.

      - **Classification** *(string) --*

        An identifier of the data format that the classifier matches.

      - **CreationTime** *(datetime) --*

        The time that this classifier was registered.

      - **LastUpdated** *(datetime) --*

        The time that this classifier was last updated.

      - **Version** *(integer) --*

        The version of this classifier.

      - **RowTag** *(string) --*

        The XML tag designating the element that contains each record in an XML document being
        parsed. This can't identify a self-closing element (closed by ``/>`` ). An empty row
        element that contains only attributes can be parsed as long as it ends with a closing
        tag (for example, ``<row item_a="A" item_b="B"></row>`` is okay, but ``<row item_a="A"
        item_b="B" />`` is not).

    - **JsonClassifier** *(dict) --*

      A classifier for JSON content.

      - **Name** *(string) --*

        The name of the classifier.

      - **CreationTime** *(datetime) --*

        The time that this classifier was registered.

      - **LastUpdated** *(datetime) --*

        The time that this classifier was last updated.

      - **Version** *(integer) --*

        The version of this classifier.

      - **JsonPath** *(string) --*

        A ``JsonPath`` string defining the JSON data for the classifier to classify. AWS Glue
        supports a subset of ``JsonPath`` , as described in `Writing JsonPath Custom
        Classifiers
        <https://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html#custom-classifier-json>`__
        .

    - **CsvClassifier** *(dict) --*

      A classifier for comma-separated values (CSV).

      - **Name** *(string) --*

        The name of the classifier.

      - **CreationTime** *(datetime) --*

        The time that this classifier was registered.

      - **LastUpdated** *(datetime) --*

        The time that this classifier was last updated.

      - **Version** *(integer) --*

        The version of this classifier.

      - **Delimiter** *(string) --*

        A custom symbol to denote what separates each column entry in the row.

      - **QuoteSymbol** *(string) --*

        A custom symbol to denote what combines content into a single column value. It must be
        different from the column delimiter.

      - **ContainsHeader** *(string) --*

        Indicates whether the CSV file contains a header.

      - **Header** *(list) --*

        A list of strings representing column names.

        - *(string) --*

      - **DisableValueTrimming** *(boolean) --*

        Specifies not to trim values before identifying the type of column values. The default
        value is ``true`` .

      - **AllowSingleColumn** *(boolean) --*

        Enables the processing of files that contain only one column.
    """


_ClientGetClassifiersResponseTypeDef = TypedDict(
    "_ClientGetClassifiersResponseTypeDef",
    {
        "Classifiers": List[ClientGetClassifiersResponseClassifiersTypeDef],
        "NextToken": str,
    },
    total=False,
)


class ClientGetClassifiersResponseTypeDef(_ClientGetClassifiersResponseTypeDef):
    """
    Type definition for `ClientGetClassifiers` `Response`

    - **Classifiers** *(list) --*

      The requested list of classifier objects.

      - *(dict) --*

        Classifiers are triggered during a crawl task. A classifier checks whether a given file is
        in a format it can handle. If it is, the classifier creates a schema in the form of a
        ``StructType`` object that matches that data format.

        You can use the standard classifiers that AWS Glue provides, or you can write your own
        classifiers to best categorize your data sources and specify the appropriate schemas to use
        for them. A classifier can be a ``grok`` classifier, an ``XML`` classifier, a ``JSON``
        classifier, or a custom ``CSV`` classifier, as specified in one of the fields in the
        ``Classifier`` object.

        - **GrokClassifier** *(dict) --*

          A classifier that uses ``grok`` .

          - **Name** *(string) --*

            The name of the classifier.

          - **Classification** *(string) --*

            An identifier of the data format that the classifier matches, such as Twitter, JSON,
            Omniture logs, and so on.

          - **CreationTime** *(datetime) --*

            The time that this classifier was registered.

          - **LastUpdated** *(datetime) --*

            The time that this classifier was last updated.

          - **Version** *(integer) --*

            The version of this classifier.

          - **GrokPattern** *(string) --*

            The grok pattern applied to a data store by this classifier. For more information, see
            built-in patterns in `Writing Custom Classifiers
            <http://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html>`__ .

          - **CustomPatterns** *(string) --*

            Optional custom grok patterns defined by this classifier. For more information, see
            custom patterns in `Writing Custom Classifiers
            <http://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html>`__ .

        - **XMLClassifier** *(dict) --*

          A classifier for XML content.

          - **Name** *(string) --*

            The name of the classifier.

          - **Classification** *(string) --*

            An identifier of the data format that the classifier matches.

          - **CreationTime** *(datetime) --*

            The time that this classifier was registered.

          - **LastUpdated** *(datetime) --*

            The time that this classifier was last updated.

          - **Version** *(integer) --*

            The version of this classifier.

          - **RowTag** *(string) --*

            The XML tag designating the element that contains each record in an XML document being
            parsed. This can't identify a self-closing element (closed by ``/>`` ). An empty row
            element that contains only attributes can be parsed as long as it ends with a closing
            tag (for example, ``<row item_a="A" item_b="B"></row>`` is okay, but ``<row item_a="A"
            item_b="B" />`` is not).

        - **JsonClassifier** *(dict) --*

          A classifier for JSON content.

          - **Name** *(string) --*

            The name of the classifier.

          - **CreationTime** *(datetime) --*

            The time that this classifier was registered.

          - **LastUpdated** *(datetime) --*

            The time that this classifier was last updated.

          - **Version** *(integer) --*

            The version of this classifier.

          - **JsonPath** *(string) --*

            A ``JsonPath`` string defining the JSON data for the classifier to classify. AWS Glue
            supports a subset of ``JsonPath`` , as described in `Writing JsonPath Custom
            Classifiers
            <https://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html#custom-classifier-json>`__
            .

        - **CsvClassifier** *(dict) --*

          A classifier for comma-separated values (CSV).

          - **Name** *(string) --*

            The name of the classifier.

          - **CreationTime** *(datetime) --*

            The time that this classifier was registered.

          - **LastUpdated** *(datetime) --*

            The time that this classifier was last updated.

          - **Version** *(integer) --*

            The version of this classifier.

          - **Delimiter** *(string) --*

            A custom symbol to denote what separates each column entry in the row.

          - **QuoteSymbol** *(string) --*

            A custom symbol to denote what combines content into a single column value. It must be
            different from the column delimiter.

          - **ContainsHeader** *(string) --*

            Indicates whether the CSV file contains a header.

          - **Header** *(list) --*

            A list of strings representing column names.

            - *(string) --*

          - **DisableValueTrimming** *(boolean) --*

            Specifies not to trim values before identifying the type of column values. The default
            value is ``true`` .

          - **AllowSingleColumn** *(boolean) --*

            Enables the processing of files that contain only one column.

    - **NextToken** *(string) --*

      A continuation token.
    """


_ClientGetConnectionResponseConnectionPhysicalConnectionRequirementsTypeDef = TypedDict(
    "_ClientGetConnectionResponseConnectionPhysicalConnectionRequirementsTypeDef",
    {"SubnetId": str, "SecurityGroupIdList": List[str], "AvailabilityZone": str},
    total=False,
)


class ClientGetConnectionResponseConnectionPhysicalConnectionRequirementsTypeDef(
    _ClientGetConnectionResponseConnectionPhysicalConnectionRequirementsTypeDef
):
    """
    Type definition for `ClientGetConnectionResponseConnection` `PhysicalConnectionRequirements`

    A map of physical connection requirements, such as virtual private cloud (VPC) and
    ``SecurityGroup`` , that are needed to make this connection successfully.

    - **SubnetId** *(string) --*

      The subnet ID used by the connection.

    - **SecurityGroupIdList** *(list) --*

      The security group ID list used by the connection.

      - *(string) --*

    - **AvailabilityZone** *(string) --*

      The connection's Availability Zone. This field is redundant because the specified subnet
      implies the Availability Zone to be used. Currently the field must be populated, but it
      will be deprecated in the future.
    """


_ClientGetConnectionResponseConnectionTypeDef = TypedDict(
    "_ClientGetConnectionResponseConnectionTypeDef",
    {
        "Name": str,
        "Description": str,
        "ConnectionType": str,
        "MatchCriteria": List[str],
        "ConnectionProperties": Dict[str, str],
        "PhysicalConnectionRequirements": ClientGetConnectionResponseConnectionPhysicalConnectionRequirementsTypeDef,
        "CreationTime": datetime,
        "LastUpdatedTime": datetime,
        "LastUpdatedBy": str,
    },
    total=False,
)


class ClientGetConnectionResponseConnectionTypeDef(
    _ClientGetConnectionResponseConnectionTypeDef
):
    """
    Type definition for `ClientGetConnectionResponse` `Connection`

    The requested connection definition.

    - **Name** *(string) --*

      The name of the connection definition.

    - **Description** *(string) --*

      The description of the connection.

    - **ConnectionType** *(string) --*

      The type of the connection. Currently, only JDBC is supported; SFTP is not supported.

    - **MatchCriteria** *(list) --*

      A list of criteria that can be used in selecting this connection.

      - *(string) --*

    - **ConnectionProperties** *(dict) --*

      These key-value pairs define parameters for the connection:

      * ``HOST`` - The host URI: either the fully qualified domain name (FQDN) or the IPv4
      address of the database host.

      * ``PORT`` - The port number, between 1024 and 65535, of the port on which the database
      host is listening for database connections.

      * ``USER_NAME`` - The name under which to log in to the database. The value string for
      ``USER_NAME`` is "``USERNAME`` ".

      * ``PASSWORD`` - A password, if one is used, for the user name.

      * ``ENCRYPTED_PASSWORD`` - When you enable connection password protection by setting
      ``ConnectionPasswordEncryption`` in the Data Catalog encryption settings, this field stores
      the encrypted password.

      * ``JDBC_DRIVER_JAR_URI`` - The Amazon Simple Storage Service (Amazon S3) path of the JAR
      file that contains the JDBC driver to use.

      * ``JDBC_DRIVER_CLASS_NAME`` - The class name of the JDBC driver to use.

      * ``JDBC_ENGINE`` - The name of the JDBC engine to use.

      * ``JDBC_ENGINE_VERSION`` - The version of the JDBC engine to use.

      * ``CONFIG_FILES`` - (Reserved for future use.)

      * ``INSTANCE_ID`` - The instance ID to use.

      * ``JDBC_CONNECTION_URL`` - The URL for the JDBC connection.

      * ``JDBC_ENFORCE_SSL`` - A Boolean string (true, false) specifying whether Secure Sockets
      Layer (SSL) with hostname matching is enforced for the JDBC connection on the client. The
      default is false.

      * ``CUSTOM_JDBC_CERT`` - An Amazon S3 location specifying the customer's root certificate.
      AWS Glue uses this root certificate to validate the customer’s certificate when connecting
      to the customer database. AWS Glue only handles X.509 certificates. The certificate
      provided must be DER-encoded and supplied in Base64 encoding PEM format.

      * ``SKIP_CUSTOM_JDBC_CERT_VALIDATION`` - By default, this is ``false`` . AWS Glue validates
      the Signature algorithm and Subject Public Key Algorithm for the customer certificate. The
      only permitted algorithms for the Signature algorithm are SHA256withRSA, SHA384withRSA or
      SHA512withRSA. For the Subject Public Key Algorithm, the key length must be at least 2048.
      You can set the value of this property to ``true`` to skip AWS Glue’s validation of the
      customer certificate.

      * ``CUSTOM_JDBC_CERT_STRING`` - A custom JDBC certificate string which is used for domain
      match or distinguished name match to prevent a man-in-the-middle attack. In Oracle
      database, this is used as the ``SSL_SERVER_CERT_DN`` ; in Microsoft SQL Server, this is
      used as the ``hostNameInCertificate`` .

      - *(string) --*

        - *(string) --*

    - **PhysicalConnectionRequirements** *(dict) --*

      A map of physical connection requirements, such as virtual private cloud (VPC) and
      ``SecurityGroup`` , that are needed to make this connection successfully.

      - **SubnetId** *(string) --*

        The subnet ID used by the connection.

      - **SecurityGroupIdList** *(list) --*

        The security group ID list used by the connection.

        - *(string) --*

      - **AvailabilityZone** *(string) --*

        The connection's Availability Zone. This field is redundant because the specified subnet
        implies the Availability Zone to be used. Currently the field must be populated, but it
        will be deprecated in the future.

    - **CreationTime** *(datetime) --*

      The time that this connection definition was created.

    - **LastUpdatedTime** *(datetime) --*

      The last time that this connection definition was updated.

    - **LastUpdatedBy** *(string) --*

      The user, group, or role that last updated this connection definition.
    """


_ClientGetConnectionResponseTypeDef = TypedDict(
    "_ClientGetConnectionResponseTypeDef",
    {"Connection": ClientGetConnectionResponseConnectionTypeDef},
    total=False,
)


class ClientGetConnectionResponseTypeDef(_ClientGetConnectionResponseTypeDef):
    """
    Type definition for `ClientGetConnection` `Response`

    - **Connection** *(dict) --*

      The requested connection definition.

      - **Name** *(string) --*

        The name of the connection definition.

      - **Description** *(string) --*

        The description of the connection.

      - **ConnectionType** *(string) --*

        The type of the connection. Currently, only JDBC is supported; SFTP is not supported.

      - **MatchCriteria** *(list) --*

        A list of criteria that can be used in selecting this connection.

        - *(string) --*

      - **ConnectionProperties** *(dict) --*

        These key-value pairs define parameters for the connection:

        * ``HOST`` - The host URI: either the fully qualified domain name (FQDN) or the IPv4
        address of the database host.

        * ``PORT`` - The port number, between 1024 and 65535, of the port on which the database
        host is listening for database connections.

        * ``USER_NAME`` - The name under which to log in to the database. The value string for
        ``USER_NAME`` is "``USERNAME`` ".

        * ``PASSWORD`` - A password, if one is used, for the user name.

        * ``ENCRYPTED_PASSWORD`` - When you enable connection password protection by setting
        ``ConnectionPasswordEncryption`` in the Data Catalog encryption settings, this field stores
        the encrypted password.

        * ``JDBC_DRIVER_JAR_URI`` - The Amazon Simple Storage Service (Amazon S3) path of the JAR
        file that contains the JDBC driver to use.

        * ``JDBC_DRIVER_CLASS_NAME`` - The class name of the JDBC driver to use.

        * ``JDBC_ENGINE`` - The name of the JDBC engine to use.

        * ``JDBC_ENGINE_VERSION`` - The version of the JDBC engine to use.

        * ``CONFIG_FILES`` - (Reserved for future use.)

        * ``INSTANCE_ID`` - The instance ID to use.

        * ``JDBC_CONNECTION_URL`` - The URL for the JDBC connection.

        * ``JDBC_ENFORCE_SSL`` - A Boolean string (true, false) specifying whether Secure Sockets
        Layer (SSL) with hostname matching is enforced for the JDBC connection on the client. The
        default is false.

        * ``CUSTOM_JDBC_CERT`` - An Amazon S3 location specifying the customer's root certificate.
        AWS Glue uses this root certificate to validate the customer’s certificate when connecting
        to the customer database. AWS Glue only handles X.509 certificates. The certificate
        provided must be DER-encoded and supplied in Base64 encoding PEM format.

        * ``SKIP_CUSTOM_JDBC_CERT_VALIDATION`` - By default, this is ``false`` . AWS Glue validates
        the Signature algorithm and Subject Public Key Algorithm for the customer certificate. The
        only permitted algorithms for the Signature algorithm are SHA256withRSA, SHA384withRSA or
        SHA512withRSA. For the Subject Public Key Algorithm, the key length must be at least 2048.
        You can set the value of this property to ``true`` to skip AWS Glue’s validation of the
        customer certificate.

        * ``CUSTOM_JDBC_CERT_STRING`` - A custom JDBC certificate string which is used for domain
        match or distinguished name match to prevent a man-in-the-middle attack. In Oracle
        database, this is used as the ``SSL_SERVER_CERT_DN`` ; in Microsoft SQL Server, this is
        used as the ``hostNameInCertificate`` .

        - *(string) --*

          - *(string) --*

      - **PhysicalConnectionRequirements** *(dict) --*

        A map of physical connection requirements, such as virtual private cloud (VPC) and
        ``SecurityGroup`` , that are needed to make this connection successfully.

        - **SubnetId** *(string) --*

          The subnet ID used by the connection.

        - **SecurityGroupIdList** *(list) --*

          The security group ID list used by the connection.

          - *(string) --*

        - **AvailabilityZone** *(string) --*

          The connection's Availability Zone. This field is redundant because the specified subnet
          implies the Availability Zone to be used. Currently the field must be populated, but it
          will be deprecated in the future.

      - **CreationTime** *(datetime) --*

        The time that this connection definition was created.

      - **LastUpdatedTime** *(datetime) --*

        The last time that this connection definition was updated.

      - **LastUpdatedBy** *(string) --*

        The user, group, or role that last updated this connection definition.
    """


_ClientGetConnectionsFilterTypeDef = TypedDict(
    "_ClientGetConnectionsFilterTypeDef",
    {"MatchCriteria": List[str], "ConnectionType": str},
    total=False,
)


class ClientGetConnectionsFilterTypeDef(_ClientGetConnectionsFilterTypeDef):
    """
    Type definition for `ClientGetConnections` `Filter`

    A filter that controls which connections are returned.

    - **MatchCriteria** *(list) --*

      A criteria string that must match the criteria recorded in the connection definition for that
      connection definition to be returned.

      - *(string) --*

    - **ConnectionType** *(string) --*

      The type of connections to return. Currently, only JDBC is supported; SFTP is not supported.
    """


_ClientGetConnectionsResponseConnectionListPhysicalConnectionRequirementsTypeDef = TypedDict(
    "_ClientGetConnectionsResponseConnectionListPhysicalConnectionRequirementsTypeDef",
    {"SubnetId": str, "SecurityGroupIdList": List[str], "AvailabilityZone": str},
    total=False,
)


class ClientGetConnectionsResponseConnectionListPhysicalConnectionRequirementsTypeDef(
    _ClientGetConnectionsResponseConnectionListPhysicalConnectionRequirementsTypeDef
):
    """
    Type definition for `ClientGetConnectionsResponseConnectionList` `PhysicalConnectionRequirements`

    A map of physical connection requirements, such as virtual private cloud (VPC) and
    ``SecurityGroup`` , that are needed to make this connection successfully.

    - **SubnetId** *(string) --*

      The subnet ID used by the connection.

    - **SecurityGroupIdList** *(list) --*

      The security group ID list used by the connection.

      - *(string) --*

    - **AvailabilityZone** *(string) --*

      The connection's Availability Zone. This field is redundant because the specified
      subnet implies the Availability Zone to be used. Currently the field must be populated,
      but it will be deprecated in the future.
    """


_ClientGetConnectionsResponseConnectionListTypeDef = TypedDict(
    "_ClientGetConnectionsResponseConnectionListTypeDef",
    {
        "Name": str,
        "Description": str,
        "ConnectionType": str,
        "MatchCriteria": List[str],
        "ConnectionProperties": Dict[str, str],
        "PhysicalConnectionRequirements": ClientGetConnectionsResponseConnectionListPhysicalConnectionRequirementsTypeDef,
        "CreationTime": datetime,
        "LastUpdatedTime": datetime,
        "LastUpdatedBy": str,
    },
    total=False,
)


class ClientGetConnectionsResponseConnectionListTypeDef(
    _ClientGetConnectionsResponseConnectionListTypeDef
):
    """
    Type definition for `ClientGetConnectionsResponse` `ConnectionList`

    Defines a connection to a data source.

    - **Name** *(string) --*

      The name of the connection definition.

    - **Description** *(string) --*

      The description of the connection.

    - **ConnectionType** *(string) --*

      The type of the connection. Currently, only JDBC is supported; SFTP is not supported.

    - **MatchCriteria** *(list) --*

      A list of criteria that can be used in selecting this connection.

      - *(string) --*

    - **ConnectionProperties** *(dict) --*

      These key-value pairs define parameters for the connection:

      * ``HOST`` - The host URI: either the fully qualified domain name (FQDN) or the IPv4
      address of the database host.

      * ``PORT`` - The port number, between 1024 and 65535, of the port on which the database
      host is listening for database connections.

      * ``USER_NAME`` - The name under which to log in to the database. The value string for
      ``USER_NAME`` is "``USERNAME`` ".

      * ``PASSWORD`` - A password, if one is used, for the user name.

      * ``ENCRYPTED_PASSWORD`` - When you enable connection password protection by setting
      ``ConnectionPasswordEncryption`` in the Data Catalog encryption settings, this field
      stores the encrypted password.

      * ``JDBC_DRIVER_JAR_URI`` - The Amazon Simple Storage Service (Amazon S3) path of the JAR
      file that contains the JDBC driver to use.

      * ``JDBC_DRIVER_CLASS_NAME`` - The class name of the JDBC driver to use.

      * ``JDBC_ENGINE`` - The name of the JDBC engine to use.

      * ``JDBC_ENGINE_VERSION`` - The version of the JDBC engine to use.

      * ``CONFIG_FILES`` - (Reserved for future use.)

      * ``INSTANCE_ID`` - The instance ID to use.

      * ``JDBC_CONNECTION_URL`` - The URL for the JDBC connection.

      * ``JDBC_ENFORCE_SSL`` - A Boolean string (true, false) specifying whether Secure Sockets
      Layer (SSL) with hostname matching is enforced for the JDBC connection on the client. The
      default is false.

      * ``CUSTOM_JDBC_CERT`` - An Amazon S3 location specifying the customer's root
      certificate. AWS Glue uses this root certificate to validate the customer’s certificate
      when connecting to the customer database. AWS Glue only handles X.509 certificates. The
      certificate provided must be DER-encoded and supplied in Base64 encoding PEM format.

      * ``SKIP_CUSTOM_JDBC_CERT_VALIDATION`` - By default, this is ``false`` . AWS Glue
      validates the Signature algorithm and Subject Public Key Algorithm for the customer
      certificate. The only permitted algorithms for the Signature algorithm are SHA256withRSA,
      SHA384withRSA or SHA512withRSA. For the Subject Public Key Algorithm, the key length must
      be at least 2048. You can set the value of this property to ``true`` to skip AWS Glue’s
      validation of the customer certificate.

      * ``CUSTOM_JDBC_CERT_STRING`` - A custom JDBC certificate string which is used for domain
      match or distinguished name match to prevent a man-in-the-middle attack. In Oracle
      database, this is used as the ``SSL_SERVER_CERT_DN`` ; in Microsoft SQL Server, this is
      used as the ``hostNameInCertificate`` .

      - *(string) --*

        - *(string) --*

    - **PhysicalConnectionRequirements** *(dict) --*

      A map of physical connection requirements, such as virtual private cloud (VPC) and
      ``SecurityGroup`` , that are needed to make this connection successfully.

      - **SubnetId** *(string) --*

        The subnet ID used by the connection.

      - **SecurityGroupIdList** *(list) --*

        The security group ID list used by the connection.

        - *(string) --*

      - **AvailabilityZone** *(string) --*

        The connection's Availability Zone. This field is redundant because the specified
        subnet implies the Availability Zone to be used. Currently the field must be populated,
        but it will be deprecated in the future.

    - **CreationTime** *(datetime) --*

      The time that this connection definition was created.

    - **LastUpdatedTime** *(datetime) --*

      The last time that this connection definition was updated.

    - **LastUpdatedBy** *(string) --*

      The user, group, or role that last updated this connection definition.
    """


_ClientGetConnectionsResponseTypeDef = TypedDict(
    "_ClientGetConnectionsResponseTypeDef",
    {
        "ConnectionList": List[ClientGetConnectionsResponseConnectionListTypeDef],
        "NextToken": str,
    },
    total=False,
)


class ClientGetConnectionsResponseTypeDef(_ClientGetConnectionsResponseTypeDef):
    """
    Type definition for `ClientGetConnections` `Response`

    - **ConnectionList** *(list) --*

      A list of requested connection definitions.

      - *(dict) --*

        Defines a connection to a data source.

        - **Name** *(string) --*

          The name of the connection definition.

        - **Description** *(string) --*

          The description of the connection.

        - **ConnectionType** *(string) --*

          The type of the connection. Currently, only JDBC is supported; SFTP is not supported.

        - **MatchCriteria** *(list) --*

          A list of criteria that can be used in selecting this connection.

          - *(string) --*

        - **ConnectionProperties** *(dict) --*

          These key-value pairs define parameters for the connection:

          * ``HOST`` - The host URI: either the fully qualified domain name (FQDN) or the IPv4
          address of the database host.

          * ``PORT`` - The port number, between 1024 and 65535, of the port on which the database
          host is listening for database connections.

          * ``USER_NAME`` - The name under which to log in to the database. The value string for
          ``USER_NAME`` is "``USERNAME`` ".

          * ``PASSWORD`` - A password, if one is used, for the user name.

          * ``ENCRYPTED_PASSWORD`` - When you enable connection password protection by setting
          ``ConnectionPasswordEncryption`` in the Data Catalog encryption settings, this field
          stores the encrypted password.

          * ``JDBC_DRIVER_JAR_URI`` - The Amazon Simple Storage Service (Amazon S3) path of the JAR
          file that contains the JDBC driver to use.

          * ``JDBC_DRIVER_CLASS_NAME`` - The class name of the JDBC driver to use.

          * ``JDBC_ENGINE`` - The name of the JDBC engine to use.

          * ``JDBC_ENGINE_VERSION`` - The version of the JDBC engine to use.

          * ``CONFIG_FILES`` - (Reserved for future use.)

          * ``INSTANCE_ID`` - The instance ID to use.

          * ``JDBC_CONNECTION_URL`` - The URL for the JDBC connection.

          * ``JDBC_ENFORCE_SSL`` - A Boolean string (true, false) specifying whether Secure Sockets
          Layer (SSL) with hostname matching is enforced for the JDBC connection on the client. The
          default is false.

          * ``CUSTOM_JDBC_CERT`` - An Amazon S3 location specifying the customer's root
          certificate. AWS Glue uses this root certificate to validate the customer’s certificate
          when connecting to the customer database. AWS Glue only handles X.509 certificates. The
          certificate provided must be DER-encoded and supplied in Base64 encoding PEM format.

          * ``SKIP_CUSTOM_JDBC_CERT_VALIDATION`` - By default, this is ``false`` . AWS Glue
          validates the Signature algorithm and Subject Public Key Algorithm for the customer
          certificate. The only permitted algorithms for the Signature algorithm are SHA256withRSA,
          SHA384withRSA or SHA512withRSA. For the Subject Public Key Algorithm, the key length must
          be at least 2048. You can set the value of this property to ``true`` to skip AWS Glue’s
          validation of the customer certificate.

          * ``CUSTOM_JDBC_CERT_STRING`` - A custom JDBC certificate string which is used for domain
          match or distinguished name match to prevent a man-in-the-middle attack. In Oracle
          database, this is used as the ``SSL_SERVER_CERT_DN`` ; in Microsoft SQL Server, this is
          used as the ``hostNameInCertificate`` .

          - *(string) --*

            - *(string) --*

        - **PhysicalConnectionRequirements** *(dict) --*

          A map of physical connection requirements, such as virtual private cloud (VPC) and
          ``SecurityGroup`` , that are needed to make this connection successfully.

          - **SubnetId** *(string) --*

            The subnet ID used by the connection.

          - **SecurityGroupIdList** *(list) --*

            The security group ID list used by the connection.

            - *(string) --*

          - **AvailabilityZone** *(string) --*

            The connection's Availability Zone. This field is redundant because the specified
            subnet implies the Availability Zone to be used. Currently the field must be populated,
            but it will be deprecated in the future.

        - **CreationTime** *(datetime) --*

          The time that this connection definition was created.

        - **LastUpdatedTime** *(datetime) --*

          The last time that this connection definition was updated.

        - **LastUpdatedBy** *(string) --*

          The user, group, or role that last updated this connection definition.

    - **NextToken** *(string) --*

      A continuation token, if the list of connections returned does not include the last of the
      filtered connections.
    """


_ClientGetCrawlerMetricsResponseCrawlerMetricsListTypeDef = TypedDict(
    "_ClientGetCrawlerMetricsResponseCrawlerMetricsListTypeDef",
    {
        "CrawlerName": str,
        "TimeLeftSeconds": float,
        "StillEstimating": bool,
        "LastRuntimeSeconds": float,
        "MedianRuntimeSeconds": float,
        "TablesCreated": int,
        "TablesUpdated": int,
        "TablesDeleted": int,
    },
    total=False,
)


class ClientGetCrawlerMetricsResponseCrawlerMetricsListTypeDef(
    _ClientGetCrawlerMetricsResponseCrawlerMetricsListTypeDef
):
    """
    Type definition for `ClientGetCrawlerMetricsResponse` `CrawlerMetricsList`

    Metrics for a specified crawler.

    - **CrawlerName** *(string) --*

      The name of the crawler.

    - **TimeLeftSeconds** *(float) --*

      The estimated time left to complete a running crawl.

    - **StillEstimating** *(boolean) --*

      True if the crawler is still estimating how long it will take to complete this run.

    - **LastRuntimeSeconds** *(float) --*

      The duration of the crawler's most recent run, in seconds.

    - **MedianRuntimeSeconds** *(float) --*

      The median duration of this crawler's runs, in seconds.

    - **TablesCreated** *(integer) --*

      The number of tables created by this crawler.

    - **TablesUpdated** *(integer) --*

      The number of tables updated by this crawler.

    - **TablesDeleted** *(integer) --*

      The number of tables deleted by this crawler.
    """


_ClientGetCrawlerMetricsResponseTypeDef = TypedDict(
    "_ClientGetCrawlerMetricsResponseTypeDef",
    {
        "CrawlerMetricsList": List[
            ClientGetCrawlerMetricsResponseCrawlerMetricsListTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)


class ClientGetCrawlerMetricsResponseTypeDef(_ClientGetCrawlerMetricsResponseTypeDef):
    """
    Type definition for `ClientGetCrawlerMetrics` `Response`

    - **CrawlerMetricsList** *(list) --*

      A list of metrics for the specified crawler.

      - *(dict) --*

        Metrics for a specified crawler.

        - **CrawlerName** *(string) --*

          The name of the crawler.

        - **TimeLeftSeconds** *(float) --*

          The estimated time left to complete a running crawl.

        - **StillEstimating** *(boolean) --*

          True if the crawler is still estimating how long it will take to complete this run.

        - **LastRuntimeSeconds** *(float) --*

          The duration of the crawler's most recent run, in seconds.

        - **MedianRuntimeSeconds** *(float) --*

          The median duration of this crawler's runs, in seconds.

        - **TablesCreated** *(integer) --*

          The number of tables created by this crawler.

        - **TablesUpdated** *(integer) --*

          The number of tables updated by this crawler.

        - **TablesDeleted** *(integer) --*

          The number of tables deleted by this crawler.

    - **NextToken** *(string) --*

      A continuation token, if the returned list does not contain the last metric available.
    """


_ClientGetCrawlerResponseCrawlerLastCrawlTypeDef = TypedDict(
    "_ClientGetCrawlerResponseCrawlerLastCrawlTypeDef",
    {
        "Status": str,
        "ErrorMessage": str,
        "LogGroup": str,
        "LogStream": str,
        "MessagePrefix": str,
        "StartTime": datetime,
    },
    total=False,
)


class ClientGetCrawlerResponseCrawlerLastCrawlTypeDef(
    _ClientGetCrawlerResponseCrawlerLastCrawlTypeDef
):
    """
    Type definition for `ClientGetCrawlerResponseCrawler` `LastCrawl`

    The status of the last crawl, and potentially error information if an error occurred.

    - **Status** *(string) --*

      Status of the last crawl.

    - **ErrorMessage** *(string) --*

      If an error occurred, the error information about the last crawl.

    - **LogGroup** *(string) --*

      The log group for the last crawl.

    - **LogStream** *(string) --*

      The log stream for the last crawl.

    - **MessagePrefix** *(string) --*

      The prefix for a message about this crawl.

    - **StartTime** *(datetime) --*

      The time at which the crawl started.
    """


_ClientGetCrawlerResponseCrawlerScheduleTypeDef = TypedDict(
    "_ClientGetCrawlerResponseCrawlerScheduleTypeDef",
    {"ScheduleExpression": str, "State": str},
    total=False,
)


class ClientGetCrawlerResponseCrawlerScheduleTypeDef(
    _ClientGetCrawlerResponseCrawlerScheduleTypeDef
):
    """
    Type definition for `ClientGetCrawlerResponseCrawler` `Schedule`

    For scheduled crawlers, the schedule when the crawler runs.

    - **ScheduleExpression** *(string) --*

      A ``cron`` expression used to specify the schedule. For more information, see `Time-Based
      Schedules for Jobs and Crawlers
      <http://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html>`__ . For
      example, to run something every day at 12:15 UTC, specify ``cron(15 12 * * ? *)`` .

    - **State** *(string) --*

      The state of the schedule.
    """


_ClientGetCrawlerResponseCrawlerSchemaChangePolicyTypeDef = TypedDict(
    "_ClientGetCrawlerResponseCrawlerSchemaChangePolicyTypeDef",
    {"UpdateBehavior": str, "DeleteBehavior": str},
    total=False,
)


class ClientGetCrawlerResponseCrawlerSchemaChangePolicyTypeDef(
    _ClientGetCrawlerResponseCrawlerSchemaChangePolicyTypeDef
):
    """
    Type definition for `ClientGetCrawlerResponseCrawler` `SchemaChangePolicy`

    The policy that specifies update and delete behaviors for the crawler.

    - **UpdateBehavior** *(string) --*

      The update behavior when the crawler finds a changed schema.

    - **DeleteBehavior** *(string) --*

      The deletion behavior when the crawler finds a deleted object.
    """


_ClientGetCrawlerResponseCrawlerTargetsCatalogTargetsTypeDef = TypedDict(
    "_ClientGetCrawlerResponseCrawlerTargetsCatalogTargetsTypeDef",
    {"DatabaseName": str, "Tables": List[str]},
    total=False,
)


class ClientGetCrawlerResponseCrawlerTargetsCatalogTargetsTypeDef(
    _ClientGetCrawlerResponseCrawlerTargetsCatalogTargetsTypeDef
):
    """
    Type definition for `ClientGetCrawlerResponseCrawlerTargets` `CatalogTargets`

    Specifies an AWS Glue Data Catalog target.

    - **DatabaseName** *(string) --*

      The name of the database to be synchronized.

    - **Tables** *(list) --*

      A list of the tables to be synchronized.

      - *(string) --*
    """


_ClientGetCrawlerResponseCrawlerTargetsDynamoDBTargetsTypeDef = TypedDict(
    "_ClientGetCrawlerResponseCrawlerTargetsDynamoDBTargetsTypeDef",
    {"Path": str},
    total=False,
)


class ClientGetCrawlerResponseCrawlerTargetsDynamoDBTargetsTypeDef(
    _ClientGetCrawlerResponseCrawlerTargetsDynamoDBTargetsTypeDef
):
    """
    Type definition for `ClientGetCrawlerResponseCrawlerTargets` `DynamoDBTargets`

    Specifies an Amazon DynamoDB table to crawl.

    - **Path** *(string) --*

      The name of the DynamoDB table to crawl.
    """


_ClientGetCrawlerResponseCrawlerTargetsJdbcTargetsTypeDef = TypedDict(
    "_ClientGetCrawlerResponseCrawlerTargetsJdbcTargetsTypeDef",
    {"ConnectionName": str, "Path": str, "Exclusions": List[str]},
    total=False,
)


class ClientGetCrawlerResponseCrawlerTargetsJdbcTargetsTypeDef(
    _ClientGetCrawlerResponseCrawlerTargetsJdbcTargetsTypeDef
):
    """
    Type definition for `ClientGetCrawlerResponseCrawlerTargets` `JdbcTargets`

    Specifies a JDBC data store to crawl.

    - **ConnectionName** *(string) --*

      The name of the connection to use to connect to the JDBC target.

    - **Path** *(string) --*

      The path of the JDBC target.

    - **Exclusions** *(list) --*

      A list of glob patterns used to exclude from the crawl. For more information, see
      `Catalog Tables with a Crawler
      <http://docs.aws.amazon.com/glue/latest/dg/add-crawler.html>`__ .

      - *(string) --*
    """


_ClientGetCrawlerResponseCrawlerTargetsS3TargetsTypeDef = TypedDict(
    "_ClientGetCrawlerResponseCrawlerTargetsS3TargetsTypeDef",
    {"Path": str, "Exclusions": List[str]},
    total=False,
)


class ClientGetCrawlerResponseCrawlerTargetsS3TargetsTypeDef(
    _ClientGetCrawlerResponseCrawlerTargetsS3TargetsTypeDef
):
    """
    Type definition for `ClientGetCrawlerResponseCrawlerTargets` `S3Targets`

    Specifies a data store in Amazon Simple Storage Service (Amazon S3).

    - **Path** *(string) --*

      The path to the Amazon S3 target.

    - **Exclusions** *(list) --*

      A list of glob patterns used to exclude from the crawl. For more information, see
      `Catalog Tables with a Crawler
      <http://docs.aws.amazon.com/glue/latest/dg/add-crawler.html>`__ .

      - *(string) --*
    """


_ClientGetCrawlerResponseCrawlerTargetsTypeDef = TypedDict(
    "_ClientGetCrawlerResponseCrawlerTargetsTypeDef",
    {
        "S3Targets": List[ClientGetCrawlerResponseCrawlerTargetsS3TargetsTypeDef],
        "JdbcTargets": List[ClientGetCrawlerResponseCrawlerTargetsJdbcTargetsTypeDef],
        "DynamoDBTargets": List[
            ClientGetCrawlerResponseCrawlerTargetsDynamoDBTargetsTypeDef
        ],
        "CatalogTargets": List[
            ClientGetCrawlerResponseCrawlerTargetsCatalogTargetsTypeDef
        ],
    },
    total=False,
)


class ClientGetCrawlerResponseCrawlerTargetsTypeDef(
    _ClientGetCrawlerResponseCrawlerTargetsTypeDef
):
    """
    Type definition for `ClientGetCrawlerResponseCrawler` `Targets`

    A collection of targets to crawl.

    - **S3Targets** *(list) --*

      Specifies Amazon Simple Storage Service (Amazon S3) targets.

      - *(dict) --*

        Specifies a data store in Amazon Simple Storage Service (Amazon S3).

        - **Path** *(string) --*

          The path to the Amazon S3 target.

        - **Exclusions** *(list) --*

          A list of glob patterns used to exclude from the crawl. For more information, see
          `Catalog Tables with a Crawler
          <http://docs.aws.amazon.com/glue/latest/dg/add-crawler.html>`__ .

          - *(string) --*

    - **JdbcTargets** *(list) --*

      Specifies JDBC targets.

      - *(dict) --*

        Specifies a JDBC data store to crawl.

        - **ConnectionName** *(string) --*

          The name of the connection to use to connect to the JDBC target.

        - **Path** *(string) --*

          The path of the JDBC target.

        - **Exclusions** *(list) --*

          A list of glob patterns used to exclude from the crawl. For more information, see
          `Catalog Tables with a Crawler
          <http://docs.aws.amazon.com/glue/latest/dg/add-crawler.html>`__ .

          - *(string) --*

    - **DynamoDBTargets** *(list) --*

      Specifies Amazon DynamoDB targets.

      - *(dict) --*

        Specifies an Amazon DynamoDB table to crawl.

        - **Path** *(string) --*

          The name of the DynamoDB table to crawl.

    - **CatalogTargets** *(list) --*

      Specifies AWS Glue Data Catalog targets.

      - *(dict) --*

        Specifies an AWS Glue Data Catalog target.

        - **DatabaseName** *(string) --*

          The name of the database to be synchronized.

        - **Tables** *(list) --*

          A list of the tables to be synchronized.

          - *(string) --*
    """


_ClientGetCrawlerResponseCrawlerTypeDef = TypedDict(
    "_ClientGetCrawlerResponseCrawlerTypeDef",
    {
        "Name": str,
        "Role": str,
        "Targets": ClientGetCrawlerResponseCrawlerTargetsTypeDef,
        "DatabaseName": str,
        "Description": str,
        "Classifiers": List[str],
        "SchemaChangePolicy": ClientGetCrawlerResponseCrawlerSchemaChangePolicyTypeDef,
        "State": str,
        "TablePrefix": str,
        "Schedule": ClientGetCrawlerResponseCrawlerScheduleTypeDef,
        "CrawlElapsedTime": int,
        "CreationTime": datetime,
        "LastUpdated": datetime,
        "LastCrawl": ClientGetCrawlerResponseCrawlerLastCrawlTypeDef,
        "Version": int,
        "Configuration": str,
        "CrawlerSecurityConfiguration": str,
    },
    total=False,
)


class ClientGetCrawlerResponseCrawlerTypeDef(_ClientGetCrawlerResponseCrawlerTypeDef):
    """
    Type definition for `ClientGetCrawlerResponse` `Crawler`

    The metadata for the specified crawler.

    - **Name** *(string) --*

      The name of the crawler.

    - **Role** *(string) --*

      The Amazon Resource Name (ARN) of an IAM role that's used to access customer resources,
      such as Amazon Simple Storage Service (Amazon S3) data.

    - **Targets** *(dict) --*

      A collection of targets to crawl.

      - **S3Targets** *(list) --*

        Specifies Amazon Simple Storage Service (Amazon S3) targets.

        - *(dict) --*

          Specifies a data store in Amazon Simple Storage Service (Amazon S3).

          - **Path** *(string) --*

            The path to the Amazon S3 target.

          - **Exclusions** *(list) --*

            A list of glob patterns used to exclude from the crawl. For more information, see
            `Catalog Tables with a Crawler
            <http://docs.aws.amazon.com/glue/latest/dg/add-crawler.html>`__ .

            - *(string) --*

      - **JdbcTargets** *(list) --*

        Specifies JDBC targets.

        - *(dict) --*

          Specifies a JDBC data store to crawl.

          - **ConnectionName** *(string) --*

            The name of the connection to use to connect to the JDBC target.

          - **Path** *(string) --*

            The path of the JDBC target.

          - **Exclusions** *(list) --*

            A list of glob patterns used to exclude from the crawl. For more information, see
            `Catalog Tables with a Crawler
            <http://docs.aws.amazon.com/glue/latest/dg/add-crawler.html>`__ .

            - *(string) --*

      - **DynamoDBTargets** *(list) --*

        Specifies Amazon DynamoDB targets.

        - *(dict) --*

          Specifies an Amazon DynamoDB table to crawl.

          - **Path** *(string) --*

            The name of the DynamoDB table to crawl.

      - **CatalogTargets** *(list) --*

        Specifies AWS Glue Data Catalog targets.

        - *(dict) --*

          Specifies an AWS Glue Data Catalog target.

          - **DatabaseName** *(string) --*

            The name of the database to be synchronized.

          - **Tables** *(list) --*

            A list of the tables to be synchronized.

            - *(string) --*

    - **DatabaseName** *(string) --*

      The name of the database in which the crawler's output is stored.

    - **Description** *(string) --*

      A description of the crawler.

    - **Classifiers** *(list) --*

      A list of UTF-8 strings that specify the custom classifiers that are associated with the
      crawler.

      - *(string) --*

    - **SchemaChangePolicy** *(dict) --*

      The policy that specifies update and delete behaviors for the crawler.

      - **UpdateBehavior** *(string) --*

        The update behavior when the crawler finds a changed schema.

      - **DeleteBehavior** *(string) --*

        The deletion behavior when the crawler finds a deleted object.

    - **State** *(string) --*

      Indicates whether the crawler is running, or whether a run is pending.

    - **TablePrefix** *(string) --*

      The prefix added to the names of tables that are created.

    - **Schedule** *(dict) --*

      For scheduled crawlers, the schedule when the crawler runs.

      - **ScheduleExpression** *(string) --*

        A ``cron`` expression used to specify the schedule. For more information, see `Time-Based
        Schedules for Jobs and Crawlers
        <http://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html>`__ . For
        example, to run something every day at 12:15 UTC, specify ``cron(15 12 * * ? *)`` .

      - **State** *(string) --*

        The state of the schedule.

    - **CrawlElapsedTime** *(integer) --*

      If the crawler is running, contains the total time elapsed since the last crawl began.

    - **CreationTime** *(datetime) --*

      The time that the crawler was created.

    - **LastUpdated** *(datetime) --*

      The time that the crawler was last updated.

    - **LastCrawl** *(dict) --*

      The status of the last crawl, and potentially error information if an error occurred.

      - **Status** *(string) --*

        Status of the last crawl.

      - **ErrorMessage** *(string) --*

        If an error occurred, the error information about the last crawl.

      - **LogGroup** *(string) --*

        The log group for the last crawl.

      - **LogStream** *(string) --*

        The log stream for the last crawl.

      - **MessagePrefix** *(string) --*

        The prefix for a message about this crawl.

      - **StartTime** *(datetime) --*

        The time at which the crawl started.

    - **Version** *(integer) --*

      The version of the crawler.

    - **Configuration** *(string) --*

      Crawler configuration information. This versioned JSON string allows users to specify
      aspects of a crawler's behavior. For more information, see `Configuring a Crawler
      <http://docs.aws.amazon.com/glue/latest/dg/crawler-configuration.html>`__ .

    - **CrawlerSecurityConfiguration** *(string) --*

      The name of the ``SecurityConfiguration`` structure to be used by this crawler.
    """


_ClientGetCrawlerResponseTypeDef = TypedDict(
    "_ClientGetCrawlerResponseTypeDef",
    {"Crawler": ClientGetCrawlerResponseCrawlerTypeDef},
    total=False,
)


class ClientGetCrawlerResponseTypeDef(_ClientGetCrawlerResponseTypeDef):
    """
    Type definition for `ClientGetCrawler` `Response`

    - **Crawler** *(dict) --*

      The metadata for the specified crawler.

      - **Name** *(string) --*

        The name of the crawler.

      - **Role** *(string) --*

        The Amazon Resource Name (ARN) of an IAM role that's used to access customer resources,
        such as Amazon Simple Storage Service (Amazon S3) data.

      - **Targets** *(dict) --*

        A collection of targets to crawl.

        - **S3Targets** *(list) --*

          Specifies Amazon Simple Storage Service (Amazon S3) targets.

          - *(dict) --*

            Specifies a data store in Amazon Simple Storage Service (Amazon S3).

            - **Path** *(string) --*

              The path to the Amazon S3 target.

            - **Exclusions** *(list) --*

              A list of glob patterns used to exclude from the crawl. For more information, see
              `Catalog Tables with a Crawler
              <http://docs.aws.amazon.com/glue/latest/dg/add-crawler.html>`__ .

              - *(string) --*

        - **JdbcTargets** *(list) --*

          Specifies JDBC targets.

          - *(dict) --*

            Specifies a JDBC data store to crawl.

            - **ConnectionName** *(string) --*

              The name of the connection to use to connect to the JDBC target.

            - **Path** *(string) --*

              The path of the JDBC target.

            - **Exclusions** *(list) --*

              A list of glob patterns used to exclude from the crawl. For more information, see
              `Catalog Tables with a Crawler
              <http://docs.aws.amazon.com/glue/latest/dg/add-crawler.html>`__ .

              - *(string) --*

        - **DynamoDBTargets** *(list) --*

          Specifies Amazon DynamoDB targets.

          - *(dict) --*

            Specifies an Amazon DynamoDB table to crawl.

            - **Path** *(string) --*

              The name of the DynamoDB table to crawl.

        - **CatalogTargets** *(list) --*

          Specifies AWS Glue Data Catalog targets.

          - *(dict) --*

            Specifies an AWS Glue Data Catalog target.

            - **DatabaseName** *(string) --*

              The name of the database to be synchronized.

            - **Tables** *(list) --*

              A list of the tables to be synchronized.

              - *(string) --*

      - **DatabaseName** *(string) --*

        The name of the database in which the crawler's output is stored.

      - **Description** *(string) --*

        A description of the crawler.

      - **Classifiers** *(list) --*

        A list of UTF-8 strings that specify the custom classifiers that are associated with the
        crawler.

        - *(string) --*

      - **SchemaChangePolicy** *(dict) --*

        The policy that specifies update and delete behaviors for the crawler.

        - **UpdateBehavior** *(string) --*

          The update behavior when the crawler finds a changed schema.

        - **DeleteBehavior** *(string) --*

          The deletion behavior when the crawler finds a deleted object.

      - **State** *(string) --*

        Indicates whether the crawler is running, or whether a run is pending.

      - **TablePrefix** *(string) --*

        The prefix added to the names of tables that are created.

      - **Schedule** *(dict) --*

        For scheduled crawlers, the schedule when the crawler runs.

        - **ScheduleExpression** *(string) --*

          A ``cron`` expression used to specify the schedule. For more information, see `Time-Based
          Schedules for Jobs and Crawlers
          <http://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html>`__ . For
          example, to run something every day at 12:15 UTC, specify ``cron(15 12 * * ? *)`` .

        - **State** *(string) --*

          The state of the schedule.

      - **CrawlElapsedTime** *(integer) --*

        If the crawler is running, contains the total time elapsed since the last crawl began.

      - **CreationTime** *(datetime) --*

        The time that the crawler was created.

      - **LastUpdated** *(datetime) --*

        The time that the crawler was last updated.

      - **LastCrawl** *(dict) --*

        The status of the last crawl, and potentially error information if an error occurred.

        - **Status** *(string) --*

          Status of the last crawl.

        - **ErrorMessage** *(string) --*

          If an error occurred, the error information about the last crawl.

        - **LogGroup** *(string) --*

          The log group for the last crawl.

        - **LogStream** *(string) --*

          The log stream for the last crawl.

        - **MessagePrefix** *(string) --*

          The prefix for a message about this crawl.

        - **StartTime** *(datetime) --*

          The time at which the crawl started.

      - **Version** *(integer) --*

        The version of the crawler.

      - **Configuration** *(string) --*

        Crawler configuration information. This versioned JSON string allows users to specify
        aspects of a crawler's behavior. For more information, see `Configuring a Crawler
        <http://docs.aws.amazon.com/glue/latest/dg/crawler-configuration.html>`__ .

      - **CrawlerSecurityConfiguration** *(string) --*

        The name of the ``SecurityConfiguration`` structure to be used by this crawler.
    """


_ClientGetCrawlersResponseCrawlersLastCrawlTypeDef = TypedDict(
    "_ClientGetCrawlersResponseCrawlersLastCrawlTypeDef",
    {
        "Status": str,
        "ErrorMessage": str,
        "LogGroup": str,
        "LogStream": str,
        "MessagePrefix": str,
        "StartTime": datetime,
    },
    total=False,
)


class ClientGetCrawlersResponseCrawlersLastCrawlTypeDef(
    _ClientGetCrawlersResponseCrawlersLastCrawlTypeDef
):
    """
    Type definition for `ClientGetCrawlersResponseCrawlers` `LastCrawl`

    The status of the last crawl, and potentially error information if an error occurred.

    - **Status** *(string) --*

      Status of the last crawl.

    - **ErrorMessage** *(string) --*

      If an error occurred, the error information about the last crawl.

    - **LogGroup** *(string) --*

      The log group for the last crawl.

    - **LogStream** *(string) --*

      The log stream for the last crawl.

    - **MessagePrefix** *(string) --*

      The prefix for a message about this crawl.

    - **StartTime** *(datetime) --*

      The time at which the crawl started.
    """


_ClientGetCrawlersResponseCrawlersScheduleTypeDef = TypedDict(
    "_ClientGetCrawlersResponseCrawlersScheduleTypeDef",
    {"ScheduleExpression": str, "State": str},
    total=False,
)


class ClientGetCrawlersResponseCrawlersScheduleTypeDef(
    _ClientGetCrawlersResponseCrawlersScheduleTypeDef
):
    """
    Type definition for `ClientGetCrawlersResponseCrawlers` `Schedule`

    For scheduled crawlers, the schedule when the crawler runs.

    - **ScheduleExpression** *(string) --*

      A ``cron`` expression used to specify the schedule. For more information, see
      `Time-Based Schedules for Jobs and Crawlers
      <http://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html>`__ .
      For example, to run something every day at 12:15 UTC, specify ``cron(15 12 * * ? *)`` .

    - **State** *(string) --*

      The state of the schedule.
    """


_ClientGetCrawlersResponseCrawlersSchemaChangePolicyTypeDef = TypedDict(
    "_ClientGetCrawlersResponseCrawlersSchemaChangePolicyTypeDef",
    {"UpdateBehavior": str, "DeleteBehavior": str},
    total=False,
)


class ClientGetCrawlersResponseCrawlersSchemaChangePolicyTypeDef(
    _ClientGetCrawlersResponseCrawlersSchemaChangePolicyTypeDef
):
    """
    Type definition for `ClientGetCrawlersResponseCrawlers` `SchemaChangePolicy`

    The policy that specifies update and delete behaviors for the crawler.

    - **UpdateBehavior** *(string) --*

      The update behavior when the crawler finds a changed schema.

    - **DeleteBehavior** *(string) --*

      The deletion behavior when the crawler finds a deleted object.
    """


_ClientGetCrawlersResponseCrawlersTargetsCatalogTargetsTypeDef = TypedDict(
    "_ClientGetCrawlersResponseCrawlersTargetsCatalogTargetsTypeDef",
    {"DatabaseName": str, "Tables": List[str]},
    total=False,
)


class ClientGetCrawlersResponseCrawlersTargetsCatalogTargetsTypeDef(
    _ClientGetCrawlersResponseCrawlersTargetsCatalogTargetsTypeDef
):
    """
    Type definition for `ClientGetCrawlersResponseCrawlersTargets` `CatalogTargets`

    Specifies an AWS Glue Data Catalog target.

    - **DatabaseName** *(string) --*

      The name of the database to be synchronized.

    - **Tables** *(list) --*

      A list of the tables to be synchronized.

      - *(string) --*
    """


_ClientGetCrawlersResponseCrawlersTargetsDynamoDBTargetsTypeDef = TypedDict(
    "_ClientGetCrawlersResponseCrawlersTargetsDynamoDBTargetsTypeDef",
    {"Path": str},
    total=False,
)


class ClientGetCrawlersResponseCrawlersTargetsDynamoDBTargetsTypeDef(
    _ClientGetCrawlersResponseCrawlersTargetsDynamoDBTargetsTypeDef
):
    """
    Type definition for `ClientGetCrawlersResponseCrawlersTargets` `DynamoDBTargets`

    Specifies an Amazon DynamoDB table to crawl.

    - **Path** *(string) --*

      The name of the DynamoDB table to crawl.
    """


_ClientGetCrawlersResponseCrawlersTargetsJdbcTargetsTypeDef = TypedDict(
    "_ClientGetCrawlersResponseCrawlersTargetsJdbcTargetsTypeDef",
    {"ConnectionName": str, "Path": str, "Exclusions": List[str]},
    total=False,
)


class ClientGetCrawlersResponseCrawlersTargetsJdbcTargetsTypeDef(
    _ClientGetCrawlersResponseCrawlersTargetsJdbcTargetsTypeDef
):
    """
    Type definition for `ClientGetCrawlersResponseCrawlersTargets` `JdbcTargets`

    Specifies a JDBC data store to crawl.

    - **ConnectionName** *(string) --*

      The name of the connection to use to connect to the JDBC target.

    - **Path** *(string) --*

      The path of the JDBC target.

    - **Exclusions** *(list) --*

      A list of glob patterns used to exclude from the crawl. For more information, see
      `Catalog Tables with a Crawler
      <http://docs.aws.amazon.com/glue/latest/dg/add-crawler.html>`__ .

      - *(string) --*
    """


_ClientGetCrawlersResponseCrawlersTargetsS3TargetsTypeDef = TypedDict(
    "_ClientGetCrawlersResponseCrawlersTargetsS3TargetsTypeDef",
    {"Path": str, "Exclusions": List[str]},
    total=False,
)


class ClientGetCrawlersResponseCrawlersTargetsS3TargetsTypeDef(
    _ClientGetCrawlersResponseCrawlersTargetsS3TargetsTypeDef
):
    """
    Type definition for `ClientGetCrawlersResponseCrawlersTargets` `S3Targets`

    Specifies a data store in Amazon Simple Storage Service (Amazon S3).

    - **Path** *(string) --*

      The path to the Amazon S3 target.

    - **Exclusions** *(list) --*

      A list of glob patterns used to exclude from the crawl. For more information, see
      `Catalog Tables with a Crawler
      <http://docs.aws.amazon.com/glue/latest/dg/add-crawler.html>`__ .

      - *(string) --*
    """


_ClientGetCrawlersResponseCrawlersTargetsTypeDef = TypedDict(
    "_ClientGetCrawlersResponseCrawlersTargetsTypeDef",
    {
        "S3Targets": List[ClientGetCrawlersResponseCrawlersTargetsS3TargetsTypeDef],
        "JdbcTargets": List[ClientGetCrawlersResponseCrawlersTargetsJdbcTargetsTypeDef],
        "DynamoDBTargets": List[
            ClientGetCrawlersResponseCrawlersTargetsDynamoDBTargetsTypeDef
        ],
        "CatalogTargets": List[
            ClientGetCrawlersResponseCrawlersTargetsCatalogTargetsTypeDef
        ],
    },
    total=False,
)


class ClientGetCrawlersResponseCrawlersTargetsTypeDef(
    _ClientGetCrawlersResponseCrawlersTargetsTypeDef
):
    """
    Type definition for `ClientGetCrawlersResponseCrawlers` `Targets`

    A collection of targets to crawl.

    - **S3Targets** *(list) --*

      Specifies Amazon Simple Storage Service (Amazon S3) targets.

      - *(dict) --*

        Specifies a data store in Amazon Simple Storage Service (Amazon S3).

        - **Path** *(string) --*

          The path to the Amazon S3 target.

        - **Exclusions** *(list) --*

          A list of glob patterns used to exclude from the crawl. For more information, see
          `Catalog Tables with a Crawler
          <http://docs.aws.amazon.com/glue/latest/dg/add-crawler.html>`__ .

          - *(string) --*

    - **JdbcTargets** *(list) --*

      Specifies JDBC targets.

      - *(dict) --*

        Specifies a JDBC data store to crawl.

        - **ConnectionName** *(string) --*

          The name of the connection to use to connect to the JDBC target.

        - **Path** *(string) --*

          The path of the JDBC target.

        - **Exclusions** *(list) --*

          A list of glob patterns used to exclude from the crawl. For more information, see
          `Catalog Tables with a Crawler
          <http://docs.aws.amazon.com/glue/latest/dg/add-crawler.html>`__ .

          - *(string) --*

    - **DynamoDBTargets** *(list) --*

      Specifies Amazon DynamoDB targets.

      - *(dict) --*

        Specifies an Amazon DynamoDB table to crawl.

        - **Path** *(string) --*

          The name of the DynamoDB table to crawl.

    - **CatalogTargets** *(list) --*

      Specifies AWS Glue Data Catalog targets.

      - *(dict) --*

        Specifies an AWS Glue Data Catalog target.

        - **DatabaseName** *(string) --*

          The name of the database to be synchronized.

        - **Tables** *(list) --*

          A list of the tables to be synchronized.

          - *(string) --*
    """


_ClientGetCrawlersResponseCrawlersTypeDef = TypedDict(
    "_ClientGetCrawlersResponseCrawlersTypeDef",
    {
        "Name": str,
        "Role": str,
        "Targets": ClientGetCrawlersResponseCrawlersTargetsTypeDef,
        "DatabaseName": str,
        "Description": str,
        "Classifiers": List[str],
        "SchemaChangePolicy": ClientGetCrawlersResponseCrawlersSchemaChangePolicyTypeDef,
        "State": str,
        "TablePrefix": str,
        "Schedule": ClientGetCrawlersResponseCrawlersScheduleTypeDef,
        "CrawlElapsedTime": int,
        "CreationTime": datetime,
        "LastUpdated": datetime,
        "LastCrawl": ClientGetCrawlersResponseCrawlersLastCrawlTypeDef,
        "Version": int,
        "Configuration": str,
        "CrawlerSecurityConfiguration": str,
    },
    total=False,
)


class ClientGetCrawlersResponseCrawlersTypeDef(
    _ClientGetCrawlersResponseCrawlersTypeDef
):
    """
    Type definition for `ClientGetCrawlersResponse` `Crawlers`

    Specifies a crawler program that examines a data source and uses classifiers to try to
    determine its schema. If successful, the crawler records metadata concerning the data
    source in the AWS Glue Data Catalog.

    - **Name** *(string) --*

      The name of the crawler.

    - **Role** *(string) --*

      The Amazon Resource Name (ARN) of an IAM role that's used to access customer resources,
      such as Amazon Simple Storage Service (Amazon S3) data.

    - **Targets** *(dict) --*

      A collection of targets to crawl.

      - **S3Targets** *(list) --*

        Specifies Amazon Simple Storage Service (Amazon S3) targets.

        - *(dict) --*

          Specifies a data store in Amazon Simple Storage Service (Amazon S3).

          - **Path** *(string) --*

            The path to the Amazon S3 target.

          - **Exclusions** *(list) --*

            A list of glob patterns used to exclude from the crawl. For more information, see
            `Catalog Tables with a Crawler
            <http://docs.aws.amazon.com/glue/latest/dg/add-crawler.html>`__ .

            - *(string) --*

      - **JdbcTargets** *(list) --*

        Specifies JDBC targets.

        - *(dict) --*

          Specifies a JDBC data store to crawl.

          - **ConnectionName** *(string) --*

            The name of the connection to use to connect to the JDBC target.

          - **Path** *(string) --*

            The path of the JDBC target.

          - **Exclusions** *(list) --*

            A list of glob patterns used to exclude from the crawl. For more information, see
            `Catalog Tables with a Crawler
            <http://docs.aws.amazon.com/glue/latest/dg/add-crawler.html>`__ .

            - *(string) --*

      - **DynamoDBTargets** *(list) --*

        Specifies Amazon DynamoDB targets.

        - *(dict) --*

          Specifies an Amazon DynamoDB table to crawl.

          - **Path** *(string) --*

            The name of the DynamoDB table to crawl.

      - **CatalogTargets** *(list) --*

        Specifies AWS Glue Data Catalog targets.

        - *(dict) --*

          Specifies an AWS Glue Data Catalog target.

          - **DatabaseName** *(string) --*

            The name of the database to be synchronized.

          - **Tables** *(list) --*

            A list of the tables to be synchronized.

            - *(string) --*

    - **DatabaseName** *(string) --*

      The name of the database in which the crawler's output is stored.

    - **Description** *(string) --*

      A description of the crawler.

    - **Classifiers** *(list) --*

      A list of UTF-8 strings that specify the custom classifiers that are associated with the
      crawler.

      - *(string) --*

    - **SchemaChangePolicy** *(dict) --*

      The policy that specifies update and delete behaviors for the crawler.

      - **UpdateBehavior** *(string) --*

        The update behavior when the crawler finds a changed schema.

      - **DeleteBehavior** *(string) --*

        The deletion behavior when the crawler finds a deleted object.

    - **State** *(string) --*

      Indicates whether the crawler is running, or whether a run is pending.

    - **TablePrefix** *(string) --*

      The prefix added to the names of tables that are created.

    - **Schedule** *(dict) --*

      For scheduled crawlers, the schedule when the crawler runs.

      - **ScheduleExpression** *(string) --*

        A ``cron`` expression used to specify the schedule. For more information, see
        `Time-Based Schedules for Jobs and Crawlers
        <http://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html>`__ .
        For example, to run something every day at 12:15 UTC, specify ``cron(15 12 * * ? *)`` .

      - **State** *(string) --*

        The state of the schedule.

    - **CrawlElapsedTime** *(integer) --*

      If the crawler is running, contains the total time elapsed since the last crawl began.

    - **CreationTime** *(datetime) --*

      The time that the crawler was created.

    - **LastUpdated** *(datetime) --*

      The time that the crawler was last updated.

    - **LastCrawl** *(dict) --*

      The status of the last crawl, and potentially error information if an error occurred.

      - **Status** *(string) --*

        Status of the last crawl.

      - **ErrorMessage** *(string) --*

        If an error occurred, the error information about the last crawl.

      - **LogGroup** *(string) --*

        The log group for the last crawl.

      - **LogStream** *(string) --*

        The log stream for the last crawl.

      - **MessagePrefix** *(string) --*

        The prefix for a message about this crawl.

      - **StartTime** *(datetime) --*

        The time at which the crawl started.

    - **Version** *(integer) --*

      The version of the crawler.

    - **Configuration** *(string) --*

      Crawler configuration information. This versioned JSON string allows users to specify
      aspects of a crawler's behavior. For more information, see `Configuring a Crawler
      <http://docs.aws.amazon.com/glue/latest/dg/crawler-configuration.html>`__ .

    - **CrawlerSecurityConfiguration** *(string) --*

      The name of the ``SecurityConfiguration`` structure to be used by this crawler.
    """


_ClientGetCrawlersResponseTypeDef = TypedDict(
    "_ClientGetCrawlersResponseTypeDef",
    {"Crawlers": List[ClientGetCrawlersResponseCrawlersTypeDef], "NextToken": str},
    total=False,
)


class ClientGetCrawlersResponseTypeDef(_ClientGetCrawlersResponseTypeDef):
    """
    Type definition for `ClientGetCrawlers` `Response`

    - **Crawlers** *(list) --*

      A list of crawler metadata.

      - *(dict) --*

        Specifies a crawler program that examines a data source and uses classifiers to try to
        determine its schema. If successful, the crawler records metadata concerning the data
        source in the AWS Glue Data Catalog.

        - **Name** *(string) --*

          The name of the crawler.

        - **Role** *(string) --*

          The Amazon Resource Name (ARN) of an IAM role that's used to access customer resources,
          such as Amazon Simple Storage Service (Amazon S3) data.

        - **Targets** *(dict) --*

          A collection of targets to crawl.

          - **S3Targets** *(list) --*

            Specifies Amazon Simple Storage Service (Amazon S3) targets.

            - *(dict) --*

              Specifies a data store in Amazon Simple Storage Service (Amazon S3).

              - **Path** *(string) --*

                The path to the Amazon S3 target.

              - **Exclusions** *(list) --*

                A list of glob patterns used to exclude from the crawl. For more information, see
                `Catalog Tables with a Crawler
                <http://docs.aws.amazon.com/glue/latest/dg/add-crawler.html>`__ .

                - *(string) --*

          - **JdbcTargets** *(list) --*

            Specifies JDBC targets.

            - *(dict) --*

              Specifies a JDBC data store to crawl.

              - **ConnectionName** *(string) --*

                The name of the connection to use to connect to the JDBC target.

              - **Path** *(string) --*

                The path of the JDBC target.

              - **Exclusions** *(list) --*

                A list of glob patterns used to exclude from the crawl. For more information, see
                `Catalog Tables with a Crawler
                <http://docs.aws.amazon.com/glue/latest/dg/add-crawler.html>`__ .

                - *(string) --*

          - **DynamoDBTargets** *(list) --*

            Specifies Amazon DynamoDB targets.

            - *(dict) --*

              Specifies an Amazon DynamoDB table to crawl.

              - **Path** *(string) --*

                The name of the DynamoDB table to crawl.

          - **CatalogTargets** *(list) --*

            Specifies AWS Glue Data Catalog targets.

            - *(dict) --*

              Specifies an AWS Glue Data Catalog target.

              - **DatabaseName** *(string) --*

                The name of the database to be synchronized.

              - **Tables** *(list) --*

                A list of the tables to be synchronized.

                - *(string) --*

        - **DatabaseName** *(string) --*

          The name of the database in which the crawler's output is stored.

        - **Description** *(string) --*

          A description of the crawler.

        - **Classifiers** *(list) --*

          A list of UTF-8 strings that specify the custom classifiers that are associated with the
          crawler.

          - *(string) --*

        - **SchemaChangePolicy** *(dict) --*

          The policy that specifies update and delete behaviors for the crawler.

          - **UpdateBehavior** *(string) --*

            The update behavior when the crawler finds a changed schema.

          - **DeleteBehavior** *(string) --*

            The deletion behavior when the crawler finds a deleted object.

        - **State** *(string) --*

          Indicates whether the crawler is running, or whether a run is pending.

        - **TablePrefix** *(string) --*

          The prefix added to the names of tables that are created.

        - **Schedule** *(dict) --*

          For scheduled crawlers, the schedule when the crawler runs.

          - **ScheduleExpression** *(string) --*

            A ``cron`` expression used to specify the schedule. For more information, see
            `Time-Based Schedules for Jobs and Crawlers
            <http://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html>`__ .
            For example, to run something every day at 12:15 UTC, specify ``cron(15 12 * * ? *)`` .

          - **State** *(string) --*

            The state of the schedule.

        - **CrawlElapsedTime** *(integer) --*

          If the crawler is running, contains the total time elapsed since the last crawl began.

        - **CreationTime** *(datetime) --*

          The time that the crawler was created.

        - **LastUpdated** *(datetime) --*

          The time that the crawler was last updated.

        - **LastCrawl** *(dict) --*

          The status of the last crawl, and potentially error information if an error occurred.

          - **Status** *(string) --*

            Status of the last crawl.

          - **ErrorMessage** *(string) --*

            If an error occurred, the error information about the last crawl.

          - **LogGroup** *(string) --*

            The log group for the last crawl.

          - **LogStream** *(string) --*

            The log stream for the last crawl.

          - **MessagePrefix** *(string) --*

            The prefix for a message about this crawl.

          - **StartTime** *(datetime) --*

            The time at which the crawl started.

        - **Version** *(integer) --*

          The version of the crawler.

        - **Configuration** *(string) --*

          Crawler configuration information. This versioned JSON string allows users to specify
          aspects of a crawler's behavior. For more information, see `Configuring a Crawler
          <http://docs.aws.amazon.com/glue/latest/dg/crawler-configuration.html>`__ .

        - **CrawlerSecurityConfiguration** *(string) --*

          The name of the ``SecurityConfiguration`` structure to be used by this crawler.

    - **NextToken** *(string) --*

      A continuation token, if the returned list has not reached the end of those defined in this
      customer account.
    """


_ClientGetDataCatalogEncryptionSettingsResponseDataCatalogEncryptionSettingsConnectionPasswordEncryptionTypeDef = TypedDict(
    "_ClientGetDataCatalogEncryptionSettingsResponseDataCatalogEncryptionSettingsConnectionPasswordEncryptionTypeDef",
    {"ReturnConnectionPasswordEncrypted": bool, "AwsKmsKeyId": str},
    total=False,
)


class ClientGetDataCatalogEncryptionSettingsResponseDataCatalogEncryptionSettingsConnectionPasswordEncryptionTypeDef(
    _ClientGetDataCatalogEncryptionSettingsResponseDataCatalogEncryptionSettingsConnectionPasswordEncryptionTypeDef
):
    """
    Type definition for `ClientGetDataCatalogEncryptionSettingsResponseDataCatalogEncryptionSettings` `ConnectionPasswordEncryption`

    When connection password protection is enabled, the Data Catalog uses a customer-provided
    key to encrypt the password as part of ``CreateConnection`` or ``UpdateConnection`` and
    store it in the ``ENCRYPTED_PASSWORD`` field in the connection properties. You can enable
    catalog encryption or only password encryption.

    - **ReturnConnectionPasswordEncrypted** *(boolean) --*

      When the ``ReturnConnectionPasswordEncrypted`` flag is set to "true", passwords remain
      encrypted in the responses of ``GetConnection`` and ``GetConnections`` . This encryption
      takes effect independently from catalog encryption.

    - **AwsKmsKeyId** *(string) --*

      An AWS KMS key that is used to encrypt the connection password.

      If connection password protection is enabled, the caller of ``CreateConnection`` and
      ``UpdateConnection`` needs at least ``kms:Encrypt`` permission on the specified AWS KMS
      key, to encrypt passwords before storing them in the Data Catalog.

      You can set the decrypt permission to enable or restrict access on the password key
      according to your security requirements.
    """


_ClientGetDataCatalogEncryptionSettingsResponseDataCatalogEncryptionSettingsEncryptionAtRestTypeDef = TypedDict(
    "_ClientGetDataCatalogEncryptionSettingsResponseDataCatalogEncryptionSettingsEncryptionAtRestTypeDef",
    {"CatalogEncryptionMode": str, "SseAwsKmsKeyId": str},
    total=False,
)


class ClientGetDataCatalogEncryptionSettingsResponseDataCatalogEncryptionSettingsEncryptionAtRestTypeDef(
    _ClientGetDataCatalogEncryptionSettingsResponseDataCatalogEncryptionSettingsEncryptionAtRestTypeDef
):
    """
    Type definition for `ClientGetDataCatalogEncryptionSettingsResponseDataCatalogEncryptionSettings` `EncryptionAtRest`

    Specifies the encryption-at-rest configuration for the Data Catalog.

    - **CatalogEncryptionMode** *(string) --*

      The encryption-at-rest mode for encrypting Data Catalog data.

    - **SseAwsKmsKeyId** *(string) --*

      The ID of the AWS KMS key to use for encryption at rest.
    """


_ClientGetDataCatalogEncryptionSettingsResponseDataCatalogEncryptionSettingsTypeDef = TypedDict(
    "_ClientGetDataCatalogEncryptionSettingsResponseDataCatalogEncryptionSettingsTypeDef",
    {
        "EncryptionAtRest": ClientGetDataCatalogEncryptionSettingsResponseDataCatalogEncryptionSettingsEncryptionAtRestTypeDef,
        "ConnectionPasswordEncryption": ClientGetDataCatalogEncryptionSettingsResponseDataCatalogEncryptionSettingsConnectionPasswordEncryptionTypeDef,
    },
    total=False,
)


class ClientGetDataCatalogEncryptionSettingsResponseDataCatalogEncryptionSettingsTypeDef(
    _ClientGetDataCatalogEncryptionSettingsResponseDataCatalogEncryptionSettingsTypeDef
):
    """
    Type definition for `ClientGetDataCatalogEncryptionSettingsResponse` `DataCatalogEncryptionSettings`

    The requested security configuration.

    - **EncryptionAtRest** *(dict) --*

      Specifies the encryption-at-rest configuration for the Data Catalog.

      - **CatalogEncryptionMode** *(string) --*

        The encryption-at-rest mode for encrypting Data Catalog data.

      - **SseAwsKmsKeyId** *(string) --*

        The ID of the AWS KMS key to use for encryption at rest.

    - **ConnectionPasswordEncryption** *(dict) --*

      When connection password protection is enabled, the Data Catalog uses a customer-provided
      key to encrypt the password as part of ``CreateConnection`` or ``UpdateConnection`` and
      store it in the ``ENCRYPTED_PASSWORD`` field in the connection properties. You can enable
      catalog encryption or only password encryption.

      - **ReturnConnectionPasswordEncrypted** *(boolean) --*

        When the ``ReturnConnectionPasswordEncrypted`` flag is set to "true", passwords remain
        encrypted in the responses of ``GetConnection`` and ``GetConnections`` . This encryption
        takes effect independently from catalog encryption.

      - **AwsKmsKeyId** *(string) --*

        An AWS KMS key that is used to encrypt the connection password.

        If connection password protection is enabled, the caller of ``CreateConnection`` and
        ``UpdateConnection`` needs at least ``kms:Encrypt`` permission on the specified AWS KMS
        key, to encrypt passwords before storing them in the Data Catalog.

        You can set the decrypt permission to enable or restrict access on the password key
        according to your security requirements.
    """


_ClientGetDataCatalogEncryptionSettingsResponseTypeDef = TypedDict(
    "_ClientGetDataCatalogEncryptionSettingsResponseTypeDef",
    {
        "DataCatalogEncryptionSettings": ClientGetDataCatalogEncryptionSettingsResponseDataCatalogEncryptionSettingsTypeDef
    },
    total=False,
)


class ClientGetDataCatalogEncryptionSettingsResponseTypeDef(
    _ClientGetDataCatalogEncryptionSettingsResponseTypeDef
):
    """
    Type definition for `ClientGetDataCatalogEncryptionSettings` `Response`

    - **DataCatalogEncryptionSettings** *(dict) --*

      The requested security configuration.

      - **EncryptionAtRest** *(dict) --*

        Specifies the encryption-at-rest configuration for the Data Catalog.

        - **CatalogEncryptionMode** *(string) --*

          The encryption-at-rest mode for encrypting Data Catalog data.

        - **SseAwsKmsKeyId** *(string) --*

          The ID of the AWS KMS key to use for encryption at rest.

      - **ConnectionPasswordEncryption** *(dict) --*

        When connection password protection is enabled, the Data Catalog uses a customer-provided
        key to encrypt the password as part of ``CreateConnection`` or ``UpdateConnection`` and
        store it in the ``ENCRYPTED_PASSWORD`` field in the connection properties. You can enable
        catalog encryption or only password encryption.

        - **ReturnConnectionPasswordEncrypted** *(boolean) --*

          When the ``ReturnConnectionPasswordEncrypted`` flag is set to "true", passwords remain
          encrypted in the responses of ``GetConnection`` and ``GetConnections`` . This encryption
          takes effect independently from catalog encryption.

        - **AwsKmsKeyId** *(string) --*

          An AWS KMS key that is used to encrypt the connection password.

          If connection password protection is enabled, the caller of ``CreateConnection`` and
          ``UpdateConnection`` needs at least ``kms:Encrypt`` permission on the specified AWS KMS
          key, to encrypt passwords before storing them in the Data Catalog.

          You can set the decrypt permission to enable or restrict access on the password key
          according to your security requirements.
    """


_ClientGetDatabaseResponseDatabaseCreateTableDefaultPermissionsPrincipalTypeDef = TypedDict(
    "_ClientGetDatabaseResponseDatabaseCreateTableDefaultPermissionsPrincipalTypeDef",
    {"DataLakePrincipalIdentifier": str},
    total=False,
)


class ClientGetDatabaseResponseDatabaseCreateTableDefaultPermissionsPrincipalTypeDef(
    _ClientGetDatabaseResponseDatabaseCreateTableDefaultPermissionsPrincipalTypeDef
):
    """
    Type definition for `ClientGetDatabaseResponseDatabaseCreateTableDefaultPermissions` `Principal`

    The principal who is granted permissions.

    - **DataLakePrincipalIdentifier** *(string) --*

      An identifier for the AWS Lake Formation principal.
    """


_ClientGetDatabaseResponseDatabaseCreateTableDefaultPermissionsTypeDef = TypedDict(
    "_ClientGetDatabaseResponseDatabaseCreateTableDefaultPermissionsTypeDef",
    {
        "Principal": ClientGetDatabaseResponseDatabaseCreateTableDefaultPermissionsPrincipalTypeDef,
        "Permissions": List[str],
    },
    total=False,
)


class ClientGetDatabaseResponseDatabaseCreateTableDefaultPermissionsTypeDef(
    _ClientGetDatabaseResponseDatabaseCreateTableDefaultPermissionsTypeDef
):
    """
    Type definition for `ClientGetDatabaseResponseDatabase` `CreateTableDefaultPermissions`

    Permissions granted to a principal.

    - **Principal** *(dict) --*

      The principal who is granted permissions.

      - **DataLakePrincipalIdentifier** *(string) --*

        An identifier for the AWS Lake Formation principal.

    - **Permissions** *(list) --*

      The permissions that are granted to the principal.

      - *(string) --*
    """


_ClientGetDatabaseResponseDatabaseTypeDef = TypedDict(
    "_ClientGetDatabaseResponseDatabaseTypeDef",
    {
        "Name": str,
        "Description": str,
        "LocationUri": str,
        "Parameters": Dict[str, str],
        "CreateTime": datetime,
        "CreateTableDefaultPermissions": List[
            ClientGetDatabaseResponseDatabaseCreateTableDefaultPermissionsTypeDef
        ],
    },
    total=False,
)


class ClientGetDatabaseResponseDatabaseTypeDef(
    _ClientGetDatabaseResponseDatabaseTypeDef
):
    """
    Type definition for `ClientGetDatabaseResponse` `Database`

    The definition of the specified database in the Data Catalog.

    - **Name** *(string) --*

      The name of the database. For Hive compatibility, this is folded to lowercase when it is
      stored.

    - **Description** *(string) --*

      A description of the database.

    - **LocationUri** *(string) --*

      The location of the database (for example, an HDFS path).

    - **Parameters** *(dict) --*

      These key-value pairs define parameters and properties of the database.

      - *(string) --*

        - *(string) --*

    - **CreateTime** *(datetime) --*

      The time at which the metadata database was created in the catalog.

    - **CreateTableDefaultPermissions** *(list) --*

      Creates a set of default permissions on the table for principals.

      - *(dict) --*

        Permissions granted to a principal.

        - **Principal** *(dict) --*

          The principal who is granted permissions.

          - **DataLakePrincipalIdentifier** *(string) --*

            An identifier for the AWS Lake Formation principal.

        - **Permissions** *(list) --*

          The permissions that are granted to the principal.

          - *(string) --*
    """


_ClientGetDatabaseResponseTypeDef = TypedDict(
    "_ClientGetDatabaseResponseTypeDef",
    {"Database": ClientGetDatabaseResponseDatabaseTypeDef},
    total=False,
)


class ClientGetDatabaseResponseTypeDef(_ClientGetDatabaseResponseTypeDef):
    """
    Type definition for `ClientGetDatabase` `Response`

    - **Database** *(dict) --*

      The definition of the specified database in the Data Catalog.

      - **Name** *(string) --*

        The name of the database. For Hive compatibility, this is folded to lowercase when it is
        stored.

      - **Description** *(string) --*

        A description of the database.

      - **LocationUri** *(string) --*

        The location of the database (for example, an HDFS path).

      - **Parameters** *(dict) --*

        These key-value pairs define parameters and properties of the database.

        - *(string) --*

          - *(string) --*

      - **CreateTime** *(datetime) --*

        The time at which the metadata database was created in the catalog.

      - **CreateTableDefaultPermissions** *(list) --*

        Creates a set of default permissions on the table for principals.

        - *(dict) --*

          Permissions granted to a principal.

          - **Principal** *(dict) --*

            The principal who is granted permissions.

            - **DataLakePrincipalIdentifier** *(string) --*

              An identifier for the AWS Lake Formation principal.

          - **Permissions** *(list) --*

            The permissions that are granted to the principal.

            - *(string) --*
    """


_ClientGetDatabasesResponseDatabaseListCreateTableDefaultPermissionsPrincipalTypeDef = TypedDict(
    "_ClientGetDatabasesResponseDatabaseListCreateTableDefaultPermissionsPrincipalTypeDef",
    {"DataLakePrincipalIdentifier": str},
    total=False,
)


class ClientGetDatabasesResponseDatabaseListCreateTableDefaultPermissionsPrincipalTypeDef(
    _ClientGetDatabasesResponseDatabaseListCreateTableDefaultPermissionsPrincipalTypeDef
):
    """
    Type definition for `ClientGetDatabasesResponseDatabaseListCreateTableDefaultPermissions` `Principal`

    The principal who is granted permissions.

    - **DataLakePrincipalIdentifier** *(string) --*

      An identifier for the AWS Lake Formation principal.
    """


_ClientGetDatabasesResponseDatabaseListCreateTableDefaultPermissionsTypeDef = TypedDict(
    "_ClientGetDatabasesResponseDatabaseListCreateTableDefaultPermissionsTypeDef",
    {
        "Principal": ClientGetDatabasesResponseDatabaseListCreateTableDefaultPermissionsPrincipalTypeDef,
        "Permissions": List[str],
    },
    total=False,
)


class ClientGetDatabasesResponseDatabaseListCreateTableDefaultPermissionsTypeDef(
    _ClientGetDatabasesResponseDatabaseListCreateTableDefaultPermissionsTypeDef
):
    """
    Type definition for `ClientGetDatabasesResponseDatabaseList` `CreateTableDefaultPermissions`

    Permissions granted to a principal.

    - **Principal** *(dict) --*

      The principal who is granted permissions.

      - **DataLakePrincipalIdentifier** *(string) --*

        An identifier for the AWS Lake Formation principal.

    - **Permissions** *(list) --*

      The permissions that are granted to the principal.

      - *(string) --*
    """


_ClientGetDatabasesResponseDatabaseListTypeDef = TypedDict(
    "_ClientGetDatabasesResponseDatabaseListTypeDef",
    {
        "Name": str,
        "Description": str,
        "LocationUri": str,
        "Parameters": Dict[str, str],
        "CreateTime": datetime,
        "CreateTableDefaultPermissions": List[
            ClientGetDatabasesResponseDatabaseListCreateTableDefaultPermissionsTypeDef
        ],
    },
    total=False,
)


class ClientGetDatabasesResponseDatabaseListTypeDef(
    _ClientGetDatabasesResponseDatabaseListTypeDef
):
    """
    Type definition for `ClientGetDatabasesResponse` `DatabaseList`

    The ``Database`` object represents a logical grouping of tables that might reside in a Hive
    metastore or an RDBMS.

    - **Name** *(string) --*

      The name of the database. For Hive compatibility, this is folded to lowercase when it is
      stored.

    - **Description** *(string) --*

      A description of the database.

    - **LocationUri** *(string) --*

      The location of the database (for example, an HDFS path).

    - **Parameters** *(dict) --*

      These key-value pairs define parameters and properties of the database.

      - *(string) --*

        - *(string) --*

    - **CreateTime** *(datetime) --*

      The time at which the metadata database was created in the catalog.

    - **CreateTableDefaultPermissions** *(list) --*

      Creates a set of default permissions on the table for principals.

      - *(dict) --*

        Permissions granted to a principal.

        - **Principal** *(dict) --*

          The principal who is granted permissions.

          - **DataLakePrincipalIdentifier** *(string) --*

            An identifier for the AWS Lake Formation principal.

        - **Permissions** *(list) --*

          The permissions that are granted to the principal.

          - *(string) --*
    """


_ClientGetDatabasesResponseTypeDef = TypedDict(
    "_ClientGetDatabasesResponseTypeDef",
    {
        "DatabaseList": List[ClientGetDatabasesResponseDatabaseListTypeDef],
        "NextToken": str,
    },
    total=False,
)


class ClientGetDatabasesResponseTypeDef(_ClientGetDatabasesResponseTypeDef):
    """
    Type definition for `ClientGetDatabases` `Response`

    - **DatabaseList** *(list) --*

      A list of ``Database`` objects from the specified catalog.

      - *(dict) --*

        The ``Database`` object represents a logical grouping of tables that might reside in a Hive
        metastore or an RDBMS.

        - **Name** *(string) --*

          The name of the database. For Hive compatibility, this is folded to lowercase when it is
          stored.

        - **Description** *(string) --*

          A description of the database.

        - **LocationUri** *(string) --*

          The location of the database (for example, an HDFS path).

        - **Parameters** *(dict) --*

          These key-value pairs define parameters and properties of the database.

          - *(string) --*

            - *(string) --*

        - **CreateTime** *(datetime) --*

          The time at which the metadata database was created in the catalog.

        - **CreateTableDefaultPermissions** *(list) --*

          Creates a set of default permissions on the table for principals.

          - *(dict) --*

            Permissions granted to a principal.

            - **Principal** *(dict) --*

              The principal who is granted permissions.

              - **DataLakePrincipalIdentifier** *(string) --*

                An identifier for the AWS Lake Formation principal.

            - **Permissions** *(list) --*

              The permissions that are granted to the principal.

              - *(string) --*

    - **NextToken** *(string) --*

      A continuation token for paginating the returned list of tokens, returned if the current
      segment of the list is not the last.
    """


_ClientGetDataflowGraphResponseDagEdgesTypeDef = TypedDict(
    "_ClientGetDataflowGraphResponseDagEdgesTypeDef",
    {"Source": str, "Target": str, "TargetParameter": str},
    total=False,
)


class ClientGetDataflowGraphResponseDagEdgesTypeDef(
    _ClientGetDataflowGraphResponseDagEdgesTypeDef
):
    """
    Type definition for `ClientGetDataflowGraphResponse` `DagEdges`

    Represents a directional edge in a directed acyclic graph (DAG).

    - **Source** *(string) --*

      The ID of the node at which the edge starts.

    - **Target** *(string) --*

      The ID of the node at which the edge ends.

    - **TargetParameter** *(string) --*

      The target of the edge.
    """


_ClientGetDataflowGraphResponseDagNodesArgsTypeDef = TypedDict(
    "_ClientGetDataflowGraphResponseDagNodesArgsTypeDef",
    {"Name": str, "Value": str, "Param": bool},
    total=False,
)


class ClientGetDataflowGraphResponseDagNodesArgsTypeDef(
    _ClientGetDataflowGraphResponseDagNodesArgsTypeDef
):
    """
    Type definition for `ClientGetDataflowGraphResponseDagNodes` `Args`

    An argument or property of a node.

    - **Name** *(string) --*

      The name of the argument or property.

    - **Value** *(string) --*

      The value of the argument or property.

    - **Param** *(boolean) --*

      True if the value is used as a parameter.
    """


_ClientGetDataflowGraphResponseDagNodesTypeDef = TypedDict(
    "_ClientGetDataflowGraphResponseDagNodesTypeDef",
    {
        "Id": str,
        "NodeType": str,
        "Args": List[ClientGetDataflowGraphResponseDagNodesArgsTypeDef],
        "LineNumber": int,
    },
    total=False,
)


class ClientGetDataflowGraphResponseDagNodesTypeDef(
    _ClientGetDataflowGraphResponseDagNodesTypeDef
):
    """
    Type definition for `ClientGetDataflowGraphResponse` `DagNodes`

    Represents a node in a directed acyclic graph (DAG)

    - **Id** *(string) --*

      A node identifier that is unique within the node's graph.

    - **NodeType** *(string) --*

      The type of node that this is.

    - **Args** *(list) --*

      Properties of the node, in the form of name-value pairs.

      - *(dict) --*

        An argument or property of a node.

        - **Name** *(string) --*

          The name of the argument or property.

        - **Value** *(string) --*

          The value of the argument or property.

        - **Param** *(boolean) --*

          True if the value is used as a parameter.

    - **LineNumber** *(integer) --*

      The line number of the node.
    """


_ClientGetDataflowGraphResponseTypeDef = TypedDict(
    "_ClientGetDataflowGraphResponseTypeDef",
    {
        "DagNodes": List[ClientGetDataflowGraphResponseDagNodesTypeDef],
        "DagEdges": List[ClientGetDataflowGraphResponseDagEdgesTypeDef],
    },
    total=False,
)


class ClientGetDataflowGraphResponseTypeDef(_ClientGetDataflowGraphResponseTypeDef):
    """
    Type definition for `ClientGetDataflowGraph` `Response`

    - **DagNodes** *(list) --*

      A list of the nodes in the resulting DAG.

      - *(dict) --*

        Represents a node in a directed acyclic graph (DAG)

        - **Id** *(string) --*

          A node identifier that is unique within the node's graph.

        - **NodeType** *(string) --*

          The type of node that this is.

        - **Args** *(list) --*

          Properties of the node, in the form of name-value pairs.

          - *(dict) --*

            An argument or property of a node.

            - **Name** *(string) --*

              The name of the argument or property.

            - **Value** *(string) --*

              The value of the argument or property.

            - **Param** *(boolean) --*

              True if the value is used as a parameter.

        - **LineNumber** *(integer) --*

          The line number of the node.

    - **DagEdges** *(list) --*

      A list of the edges in the resulting DAG.

      - *(dict) --*

        Represents a directional edge in a directed acyclic graph (DAG).

        - **Source** *(string) --*

          The ID of the node at which the edge starts.

        - **Target** *(string) --*

          The ID of the node at which the edge ends.

        - **TargetParameter** *(string) --*

          The target of the edge.
    """


_ClientGetDevEndpointResponseDevEndpointTypeDef = TypedDict(
    "_ClientGetDevEndpointResponseDevEndpointTypeDef",
    {
        "EndpointName": str,
        "RoleArn": str,
        "SecurityGroupIds": List[str],
        "SubnetId": str,
        "YarnEndpointAddress": str,
        "PrivateAddress": str,
        "ZeppelinRemoteSparkInterpreterPort": int,
        "PublicAddress": str,
        "Status": str,
        "WorkerType": str,
        "GlueVersion": str,
        "NumberOfWorkers": int,
        "NumberOfNodes": int,
        "AvailabilityZone": str,
        "VpcId": str,
        "ExtraPythonLibsS3Path": str,
        "ExtraJarsS3Path": str,
        "FailureReason": str,
        "LastUpdateStatus": str,
        "CreatedTimestamp": datetime,
        "LastModifiedTimestamp": datetime,
        "PublicKey": str,
        "PublicKeys": List[str],
        "SecurityConfiguration": str,
        "Arguments": Dict[str, str],
    },
    total=False,
)


class ClientGetDevEndpointResponseDevEndpointTypeDef(
    _ClientGetDevEndpointResponseDevEndpointTypeDef
):
    """
    Type definition for `ClientGetDevEndpointResponse` `DevEndpoint`

    A ``DevEndpoint`` definition.

    - **EndpointName** *(string) --*

      The name of the ``DevEndpoint`` .

    - **RoleArn** *(string) --*

      The Amazon Resource Name (ARN) of the IAM role used in this ``DevEndpoint`` .

    - **SecurityGroupIds** *(list) --*

      A list of security group identifiers used in this ``DevEndpoint`` .

      - *(string) --*

    - **SubnetId** *(string) --*

      The subnet ID for this ``DevEndpoint`` .

    - **YarnEndpointAddress** *(string) --*

      The YARN endpoint address used by this ``DevEndpoint`` .

    - **PrivateAddress** *(string) --*

      A private IP address to access the ``DevEndpoint`` within a VPC if the ``DevEndpoint`` is
      created within one. The ``PrivateAddress`` field is present only when you create the
      ``DevEndpoint`` within your VPC.

    - **ZeppelinRemoteSparkInterpreterPort** *(integer) --*

      The Apache Zeppelin port for the remote Apache Spark interpreter.

    - **PublicAddress** *(string) --*

      The public IP address used by this ``DevEndpoint`` . The ``PublicAddress`` field is present
      only when you create a non-virtual private cloud (VPC) ``DevEndpoint`` .

    - **Status** *(string) --*

      The current status of this ``DevEndpoint`` .

    - **WorkerType** *(string) --*

      The type of predefined worker that is allocated to the development endpoint. Accepts a
      value of Standard, G.1X, or G.2X.

      * For the ``Standard`` worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB
      disk, and 2 executors per worker.

      * For the ``G.1X`` worker type, each worker maps to 1 DPU (4 vCPU, 16 GB of memory, 64 GB
      disk), and provides 1 executor per worker. We recommend this worker type for
      memory-intensive jobs.

      * For the ``G.2X`` worker type, each worker maps to 2 DPU (8 vCPU, 32 GB of memory, 128 GB
      disk), and provides 1 executor per worker. We recommend this worker type for
      memory-intensive jobs.

      Known issue: when a development endpoint is created with the ``G.2X``  ``WorkerType``
      configuration, the Spark drivers for the development endpoint will run on 4 vCPU, 16 GB of
      memory, and a 64 GB disk.

    - **GlueVersion** *(string) --*

      Glue version determines the versions of Apache Spark and Python that AWS Glue supports. The
      Python version indicates the version supported for running your ETL scripts on development
      endpoints.

      For more information about the available AWS Glue versions and corresponding Spark and
      Python versions, see `Glue version
      <https://docs.aws.amazon.com/glue/latest/dg/add-job.html>`__ in the developer guide.

      Development endpoints that are created without specifying a Glue version default to Glue
      0.9.

      You can specify a version of Python support for development endpoints by using the
      ``Arguments`` parameter in the ``CreateDevEndpoint`` or ``UpdateDevEndpoint`` APIs. If no
      arguments are provided, the version defaults to Python 2.

    - **NumberOfWorkers** *(integer) --*

      The number of workers of a defined ``workerType`` that are allocated to the development
      endpoint.

      The maximum number of workers you can define are 299 for ``G.1X`` , and 149 for ``G.2X`` .

    - **NumberOfNodes** *(integer) --*

      The number of AWS Glue Data Processing Units (DPUs) allocated to this ``DevEndpoint`` .

    - **AvailabilityZone** *(string) --*

      The AWS Availability Zone where this ``DevEndpoint`` is located.

    - **VpcId** *(string) --*

      The ID of the virtual private cloud (VPC) used by this ``DevEndpoint`` .

    - **ExtraPythonLibsS3Path** *(string) --*

      The paths to one or more Python libraries in an Amazon S3 bucket that should be loaded in
      your ``DevEndpoint`` . Multiple values must be complete paths separated by a comma.

      .. note::

        You can only use pure Python libraries with a ``DevEndpoint`` . Libraries that rely on C
        extensions, such as the `pandas <http://pandas.pydata.org/>`__ Python data analysis
        library, are not currently supported.

    - **ExtraJarsS3Path** *(string) --*

      The path to one or more Java ``.jar`` files in an S3 bucket that should be loaded in your
      ``DevEndpoint`` .

      .. note::

        You can only use pure Java/Scala libraries with a ``DevEndpoint`` .

    - **FailureReason** *(string) --*

      The reason for a current failure in this ``DevEndpoint`` .

    - **LastUpdateStatus** *(string) --*

      The status of the last update.

    - **CreatedTimestamp** *(datetime) --*

      The point in time at which this DevEndpoint was created.

    - **LastModifiedTimestamp** *(datetime) --*

      The point in time at which this ``DevEndpoint`` was last modified.

    - **PublicKey** *(string) --*

      The public key to be used by this ``DevEndpoint`` for authentication. This attribute is
      provided for backward compatibility because the recommended attribute to use is public keys.

    - **PublicKeys** *(list) --*

      A list of public keys to be used by the ``DevEndpoints`` for authentication. Using this
      attribute is preferred over a single public key because the public keys allow you to have a
      different private key per client.

      .. note::

        If you previously created an endpoint with a public key, you must remove that key to be
        able to set a list of public keys. Call the ``UpdateDevEndpoint`` API operation with the
        public key content in the ``deletePublicKeys`` attribute, and the list of new keys in the
        ``addPublicKeys`` attribute.

      - *(string) --*

    - **SecurityConfiguration** *(string) --*

      The name of the ``SecurityConfiguration`` structure to be used with this ``DevEndpoint`` .

    - **Arguments** *(dict) --*

      A map of arguments used to configure the ``DevEndpoint`` .

      Valid arguments are:

      * ``"--enable-glue-datacatalog": ""``

      * ``"GLUE_PYTHON_VERSION": "3"``

      * ``"GLUE_PYTHON_VERSION": "2"``

      You can specify a version of Python support for development endpoints by using the
      ``Arguments`` parameter in the ``CreateDevEndpoint`` or ``UpdateDevEndpoint`` APIs. If no
      arguments are provided, the version defaults to Python 2.

      - *(string) --*

        - *(string) --*
    """


_ClientGetDevEndpointResponseTypeDef = TypedDict(
    "_ClientGetDevEndpointResponseTypeDef",
    {"DevEndpoint": ClientGetDevEndpointResponseDevEndpointTypeDef},
    total=False,
)


class ClientGetDevEndpointResponseTypeDef(_ClientGetDevEndpointResponseTypeDef):
    """
    Type definition for `ClientGetDevEndpoint` `Response`

    - **DevEndpoint** *(dict) --*

      A ``DevEndpoint`` definition.

      - **EndpointName** *(string) --*

        The name of the ``DevEndpoint`` .

      - **RoleArn** *(string) --*

        The Amazon Resource Name (ARN) of the IAM role used in this ``DevEndpoint`` .

      - **SecurityGroupIds** *(list) --*

        A list of security group identifiers used in this ``DevEndpoint`` .

        - *(string) --*

      - **SubnetId** *(string) --*

        The subnet ID for this ``DevEndpoint`` .

      - **YarnEndpointAddress** *(string) --*

        The YARN endpoint address used by this ``DevEndpoint`` .

      - **PrivateAddress** *(string) --*

        A private IP address to access the ``DevEndpoint`` within a VPC if the ``DevEndpoint`` is
        created within one. The ``PrivateAddress`` field is present only when you create the
        ``DevEndpoint`` within your VPC.

      - **ZeppelinRemoteSparkInterpreterPort** *(integer) --*

        The Apache Zeppelin port for the remote Apache Spark interpreter.

      - **PublicAddress** *(string) --*

        The public IP address used by this ``DevEndpoint`` . The ``PublicAddress`` field is present
        only when you create a non-virtual private cloud (VPC) ``DevEndpoint`` .

      - **Status** *(string) --*

        The current status of this ``DevEndpoint`` .

      - **WorkerType** *(string) --*

        The type of predefined worker that is allocated to the development endpoint. Accepts a
        value of Standard, G.1X, or G.2X.

        * For the ``Standard`` worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB
        disk, and 2 executors per worker.

        * For the ``G.1X`` worker type, each worker maps to 1 DPU (4 vCPU, 16 GB of memory, 64 GB
        disk), and provides 1 executor per worker. We recommend this worker type for
        memory-intensive jobs.

        * For the ``G.2X`` worker type, each worker maps to 2 DPU (8 vCPU, 32 GB of memory, 128 GB
        disk), and provides 1 executor per worker. We recommend this worker type for
        memory-intensive jobs.

        Known issue: when a development endpoint is created with the ``G.2X``  ``WorkerType``
        configuration, the Spark drivers for the development endpoint will run on 4 vCPU, 16 GB of
        memory, and a 64 GB disk.

      - **GlueVersion** *(string) --*

        Glue version determines the versions of Apache Spark and Python that AWS Glue supports. The
        Python version indicates the version supported for running your ETL scripts on development
        endpoints.

        For more information about the available AWS Glue versions and corresponding Spark and
        Python versions, see `Glue version
        <https://docs.aws.amazon.com/glue/latest/dg/add-job.html>`__ in the developer guide.

        Development endpoints that are created without specifying a Glue version default to Glue
        0.9.

        You can specify a version of Python support for development endpoints by using the
        ``Arguments`` parameter in the ``CreateDevEndpoint`` or ``UpdateDevEndpoint`` APIs. If no
        arguments are provided, the version defaults to Python 2.

      - **NumberOfWorkers** *(integer) --*

        The number of workers of a defined ``workerType`` that are allocated to the development
        endpoint.

        The maximum number of workers you can define are 299 for ``G.1X`` , and 149 for ``G.2X`` .

      - **NumberOfNodes** *(integer) --*

        The number of AWS Glue Data Processing Units (DPUs) allocated to this ``DevEndpoint`` .

      - **AvailabilityZone** *(string) --*

        The AWS Availability Zone where this ``DevEndpoint`` is located.

      - **VpcId** *(string) --*

        The ID of the virtual private cloud (VPC) used by this ``DevEndpoint`` .

      - **ExtraPythonLibsS3Path** *(string) --*

        The paths to one or more Python libraries in an Amazon S3 bucket that should be loaded in
        your ``DevEndpoint`` . Multiple values must be complete paths separated by a comma.

        .. note::

          You can only use pure Python libraries with a ``DevEndpoint`` . Libraries that rely on C
          extensions, such as the `pandas <http://pandas.pydata.org/>`__ Python data analysis
          library, are not currently supported.

      - **ExtraJarsS3Path** *(string) --*

        The path to one or more Java ``.jar`` files in an S3 bucket that should be loaded in your
        ``DevEndpoint`` .

        .. note::

          You can only use pure Java/Scala libraries with a ``DevEndpoint`` .

      - **FailureReason** *(string) --*

        The reason for a current failure in this ``DevEndpoint`` .

      - **LastUpdateStatus** *(string) --*

        The status of the last update.

      - **CreatedTimestamp** *(datetime) --*

        The point in time at which this DevEndpoint was created.

      - **LastModifiedTimestamp** *(datetime) --*

        The point in time at which this ``DevEndpoint`` was last modified.

      - **PublicKey** *(string) --*

        The public key to be used by this ``DevEndpoint`` for authentication. This attribute is
        provided for backward compatibility because the recommended attribute to use is public keys.

      - **PublicKeys** *(list) --*

        A list of public keys to be used by the ``DevEndpoints`` for authentication. Using this
        attribute is preferred over a single public key because the public keys allow you to have a
        different private key per client.

        .. note::

          If you previously created an endpoint with a public key, you must remove that key to be
          able to set a list of public keys. Call the ``UpdateDevEndpoint`` API operation with the
          public key content in the ``deletePublicKeys`` attribute, and the list of new keys in the
          ``addPublicKeys`` attribute.

        - *(string) --*

      - **SecurityConfiguration** *(string) --*

        The name of the ``SecurityConfiguration`` structure to be used with this ``DevEndpoint`` .

      - **Arguments** *(dict) --*

        A map of arguments used to configure the ``DevEndpoint`` .

        Valid arguments are:

        * ``"--enable-glue-datacatalog": ""``

        * ``"GLUE_PYTHON_VERSION": "3"``

        * ``"GLUE_PYTHON_VERSION": "2"``

        You can specify a version of Python support for development endpoints by using the
        ``Arguments`` parameter in the ``CreateDevEndpoint`` or ``UpdateDevEndpoint`` APIs. If no
        arguments are provided, the version defaults to Python 2.

        - *(string) --*

          - *(string) --*
    """


_ClientGetDevEndpointsResponseDevEndpointsTypeDef = TypedDict(
    "_ClientGetDevEndpointsResponseDevEndpointsTypeDef",
    {
        "EndpointName": str,
        "RoleArn": str,
        "SecurityGroupIds": List[str],
        "SubnetId": str,
        "YarnEndpointAddress": str,
        "PrivateAddress": str,
        "ZeppelinRemoteSparkInterpreterPort": int,
        "PublicAddress": str,
        "Status": str,
        "WorkerType": str,
        "GlueVersion": str,
        "NumberOfWorkers": int,
        "NumberOfNodes": int,
        "AvailabilityZone": str,
        "VpcId": str,
        "ExtraPythonLibsS3Path": str,
        "ExtraJarsS3Path": str,
        "FailureReason": str,
        "LastUpdateStatus": str,
        "CreatedTimestamp": datetime,
        "LastModifiedTimestamp": datetime,
        "PublicKey": str,
        "PublicKeys": List[str],
        "SecurityConfiguration": str,
        "Arguments": Dict[str, str],
    },
    total=False,
)


class ClientGetDevEndpointsResponseDevEndpointsTypeDef(
    _ClientGetDevEndpointsResponseDevEndpointsTypeDef
):
    """
    Type definition for `ClientGetDevEndpointsResponse` `DevEndpoints`

    A development endpoint where a developer can remotely debug extract, transform, and load
    (ETL) scripts.

    - **EndpointName** *(string) --*

      The name of the ``DevEndpoint`` .

    - **RoleArn** *(string) --*

      The Amazon Resource Name (ARN) of the IAM role used in this ``DevEndpoint`` .

    - **SecurityGroupIds** *(list) --*

      A list of security group identifiers used in this ``DevEndpoint`` .

      - *(string) --*

    - **SubnetId** *(string) --*

      The subnet ID for this ``DevEndpoint`` .

    - **YarnEndpointAddress** *(string) --*

      The YARN endpoint address used by this ``DevEndpoint`` .

    - **PrivateAddress** *(string) --*

      A private IP address to access the ``DevEndpoint`` within a VPC if the ``DevEndpoint`` is
      created within one. The ``PrivateAddress`` field is present only when you create the
      ``DevEndpoint`` within your VPC.

    - **ZeppelinRemoteSparkInterpreterPort** *(integer) --*

      The Apache Zeppelin port for the remote Apache Spark interpreter.

    - **PublicAddress** *(string) --*

      The public IP address used by this ``DevEndpoint`` . The ``PublicAddress`` field is
      present only when you create a non-virtual private cloud (VPC) ``DevEndpoint`` .

    - **Status** *(string) --*

      The current status of this ``DevEndpoint`` .

    - **WorkerType** *(string) --*

      The type of predefined worker that is allocated to the development endpoint. Accepts a
      value of Standard, G.1X, or G.2X.

      * For the ``Standard`` worker type, each worker provides 4 vCPU, 16 GB of memory and a
      50GB disk, and 2 executors per worker.

      * For the ``G.1X`` worker type, each worker maps to 1 DPU (4 vCPU, 16 GB of memory, 64 GB
      disk), and provides 1 executor per worker. We recommend this worker type for
      memory-intensive jobs.

      * For the ``G.2X`` worker type, each worker maps to 2 DPU (8 vCPU, 32 GB of memory, 128
      GB disk), and provides 1 executor per worker. We recommend this worker type for
      memory-intensive jobs.

      Known issue: when a development endpoint is created with the ``G.2X``  ``WorkerType``
      configuration, the Spark drivers for the development endpoint will run on 4 vCPU, 16 GB
      of memory, and a 64 GB disk.

    - **GlueVersion** *(string) --*

      Glue version determines the versions of Apache Spark and Python that AWS Glue supports.
      The Python version indicates the version supported for running your ETL scripts on
      development endpoints.

      For more information about the available AWS Glue versions and corresponding Spark and
      Python versions, see `Glue version
      <https://docs.aws.amazon.com/glue/latest/dg/add-job.html>`__ in the developer guide.

      Development endpoints that are created without specifying a Glue version default to Glue
      0.9.

      You can specify a version of Python support for development endpoints by using the
      ``Arguments`` parameter in the ``CreateDevEndpoint`` or ``UpdateDevEndpoint`` APIs. If no
      arguments are provided, the version defaults to Python 2.

    - **NumberOfWorkers** *(integer) --*

      The number of workers of a defined ``workerType`` that are allocated to the development
      endpoint.

      The maximum number of workers you can define are 299 for ``G.1X`` , and 149 for ``G.2X`` .

    - **NumberOfNodes** *(integer) --*

      The number of AWS Glue Data Processing Units (DPUs) allocated to this ``DevEndpoint`` .

    - **AvailabilityZone** *(string) --*

      The AWS Availability Zone where this ``DevEndpoint`` is located.

    - **VpcId** *(string) --*

      The ID of the virtual private cloud (VPC) used by this ``DevEndpoint`` .

    - **ExtraPythonLibsS3Path** *(string) --*

      The paths to one or more Python libraries in an Amazon S3 bucket that should be loaded in
      your ``DevEndpoint`` . Multiple values must be complete paths separated by a comma.

      .. note::

        You can only use pure Python libraries with a ``DevEndpoint`` . Libraries that rely on
        C extensions, such as the `pandas <http://pandas.pydata.org/>`__ Python data analysis
        library, are not currently supported.

    - **ExtraJarsS3Path** *(string) --*

      The path to one or more Java ``.jar`` files in an S3 bucket that should be loaded in your
      ``DevEndpoint`` .

      .. note::

        You can only use pure Java/Scala libraries with a ``DevEndpoint`` .

    - **FailureReason** *(string) --*

      The reason for a current failure in this ``DevEndpoint`` .

    - **LastUpdateStatus** *(string) --*

      The status of the last update.

    - **CreatedTimestamp** *(datetime) --*

      The point in time at which this DevEndpoint was created.

    - **LastModifiedTimestamp** *(datetime) --*

      The point in time at which this ``DevEndpoint`` was last modified.

    - **PublicKey** *(string) --*

      The public key to be used by this ``DevEndpoint`` for authentication. This attribute is
      provided for backward compatibility because the recommended attribute to use is public
      keys.

    - **PublicKeys** *(list) --*

      A list of public keys to be used by the ``DevEndpoints`` for authentication. Using this
      attribute is preferred over a single public key because the public keys allow you to have
      a different private key per client.

      .. note::

        If you previously created an endpoint with a public key, you must remove that key to be
        able to set a list of public keys. Call the ``UpdateDevEndpoint`` API operation with
        the public key content in the ``deletePublicKeys`` attribute, and the list of new keys
        in the ``addPublicKeys`` attribute.

      - *(string) --*

    - **SecurityConfiguration** *(string) --*

      The name of the ``SecurityConfiguration`` structure to be used with this ``DevEndpoint`` .

    - **Arguments** *(dict) --*

      A map of arguments used to configure the ``DevEndpoint`` .

      Valid arguments are:

      * ``"--enable-glue-datacatalog": ""``

      * ``"GLUE_PYTHON_VERSION": "3"``

      * ``"GLUE_PYTHON_VERSION": "2"``

      You can specify a version of Python support for development endpoints by using the
      ``Arguments`` parameter in the ``CreateDevEndpoint`` or ``UpdateDevEndpoint`` APIs. If no
      arguments are provided, the version defaults to Python 2.

      - *(string) --*

        - *(string) --*
    """


_ClientGetDevEndpointsResponseTypeDef = TypedDict(
    "_ClientGetDevEndpointsResponseTypeDef",
    {
        "DevEndpoints": List[ClientGetDevEndpointsResponseDevEndpointsTypeDef],
        "NextToken": str,
    },
    total=False,
)


class ClientGetDevEndpointsResponseTypeDef(_ClientGetDevEndpointsResponseTypeDef):
    """
    Type definition for `ClientGetDevEndpoints` `Response`

    - **DevEndpoints** *(list) --*

      A list of ``DevEndpoint`` definitions.

      - *(dict) --*

        A development endpoint where a developer can remotely debug extract, transform, and load
        (ETL) scripts.

        - **EndpointName** *(string) --*

          The name of the ``DevEndpoint`` .

        - **RoleArn** *(string) --*

          The Amazon Resource Name (ARN) of the IAM role used in this ``DevEndpoint`` .

        - **SecurityGroupIds** *(list) --*

          A list of security group identifiers used in this ``DevEndpoint`` .

          - *(string) --*

        - **SubnetId** *(string) --*

          The subnet ID for this ``DevEndpoint`` .

        - **YarnEndpointAddress** *(string) --*

          The YARN endpoint address used by this ``DevEndpoint`` .

        - **PrivateAddress** *(string) --*

          A private IP address to access the ``DevEndpoint`` within a VPC if the ``DevEndpoint`` is
          created within one. The ``PrivateAddress`` field is present only when you create the
          ``DevEndpoint`` within your VPC.

        - **ZeppelinRemoteSparkInterpreterPort** *(integer) --*

          The Apache Zeppelin port for the remote Apache Spark interpreter.

        - **PublicAddress** *(string) --*

          The public IP address used by this ``DevEndpoint`` . The ``PublicAddress`` field is
          present only when you create a non-virtual private cloud (VPC) ``DevEndpoint`` .

        - **Status** *(string) --*

          The current status of this ``DevEndpoint`` .

        - **WorkerType** *(string) --*

          The type of predefined worker that is allocated to the development endpoint. Accepts a
          value of Standard, G.1X, or G.2X.

          * For the ``Standard`` worker type, each worker provides 4 vCPU, 16 GB of memory and a
          50GB disk, and 2 executors per worker.

          * For the ``G.1X`` worker type, each worker maps to 1 DPU (4 vCPU, 16 GB of memory, 64 GB
          disk), and provides 1 executor per worker. We recommend this worker type for
          memory-intensive jobs.

          * For the ``G.2X`` worker type, each worker maps to 2 DPU (8 vCPU, 32 GB of memory, 128
          GB disk), and provides 1 executor per worker. We recommend this worker type for
          memory-intensive jobs.

          Known issue: when a development endpoint is created with the ``G.2X``  ``WorkerType``
          configuration, the Spark drivers for the development endpoint will run on 4 vCPU, 16 GB
          of memory, and a 64 GB disk.

        - **GlueVersion** *(string) --*

          Glue version determines the versions of Apache Spark and Python that AWS Glue supports.
          The Python version indicates the version supported for running your ETL scripts on
          development endpoints.

          For more information about the available AWS Glue versions and corresponding Spark and
          Python versions, see `Glue version
          <https://docs.aws.amazon.com/glue/latest/dg/add-job.html>`__ in the developer guide.

          Development endpoints that are created without specifying a Glue version default to Glue
          0.9.

          You can specify a version of Python support for development endpoints by using the
          ``Arguments`` parameter in the ``CreateDevEndpoint`` or ``UpdateDevEndpoint`` APIs. If no
          arguments are provided, the version defaults to Python 2.

        - **NumberOfWorkers** *(integer) --*

          The number of workers of a defined ``workerType`` that are allocated to the development
          endpoint.

          The maximum number of workers you can define are 299 for ``G.1X`` , and 149 for ``G.2X`` .

        - **NumberOfNodes** *(integer) --*

          The number of AWS Glue Data Processing Units (DPUs) allocated to this ``DevEndpoint`` .

        - **AvailabilityZone** *(string) --*

          The AWS Availability Zone where this ``DevEndpoint`` is located.

        - **VpcId** *(string) --*

          The ID of the virtual private cloud (VPC) used by this ``DevEndpoint`` .

        - **ExtraPythonLibsS3Path** *(string) --*

          The paths to one or more Python libraries in an Amazon S3 bucket that should be loaded in
          your ``DevEndpoint`` . Multiple values must be complete paths separated by a comma.

          .. note::

            You can only use pure Python libraries with a ``DevEndpoint`` . Libraries that rely on
            C extensions, such as the `pandas <http://pandas.pydata.org/>`__ Python data analysis
            library, are not currently supported.

        - **ExtraJarsS3Path** *(string) --*

          The path to one or more Java ``.jar`` files in an S3 bucket that should be loaded in your
          ``DevEndpoint`` .

          .. note::

            You can only use pure Java/Scala libraries with a ``DevEndpoint`` .

        - **FailureReason** *(string) --*

          The reason for a current failure in this ``DevEndpoint`` .

        - **LastUpdateStatus** *(string) --*

          The status of the last update.

        - **CreatedTimestamp** *(datetime) --*

          The point in time at which this DevEndpoint was created.

        - **LastModifiedTimestamp** *(datetime) --*

          The point in time at which this ``DevEndpoint`` was last modified.

        - **PublicKey** *(string) --*

          The public key to be used by this ``DevEndpoint`` for authentication. This attribute is
          provided for backward compatibility because the recommended attribute to use is public
          keys.

        - **PublicKeys** *(list) --*

          A list of public keys to be used by the ``DevEndpoints`` for authentication. Using this
          attribute is preferred over a single public key because the public keys allow you to have
          a different private key per client.

          .. note::

            If you previously created an endpoint with a public key, you must remove that key to be
            able to set a list of public keys. Call the ``UpdateDevEndpoint`` API operation with
            the public key content in the ``deletePublicKeys`` attribute, and the list of new keys
            in the ``addPublicKeys`` attribute.

          - *(string) --*

        - **SecurityConfiguration** *(string) --*

          The name of the ``SecurityConfiguration`` structure to be used with this ``DevEndpoint`` .

        - **Arguments** *(dict) --*

          A map of arguments used to configure the ``DevEndpoint`` .

          Valid arguments are:

          * ``"--enable-glue-datacatalog": ""``

          * ``"GLUE_PYTHON_VERSION": "3"``

          * ``"GLUE_PYTHON_VERSION": "2"``

          You can specify a version of Python support for development endpoints by using the
          ``Arguments`` parameter in the ``CreateDevEndpoint`` or ``UpdateDevEndpoint`` APIs. If no
          arguments are provided, the version defaults to Python 2.

          - *(string) --*

            - *(string) --*

    - **NextToken** *(string) --*

      A continuation token, if not all ``DevEndpoint`` definitions have yet been returned.
    """


_ClientGetJobBookmarkResponseJobBookmarkEntryTypeDef = TypedDict(
    "_ClientGetJobBookmarkResponseJobBookmarkEntryTypeDef",
    {
        "JobName": str,
        "Version": int,
        "Run": int,
        "Attempt": int,
        "PreviousRunId": str,
        "RunId": str,
        "JobBookmark": str,
    },
    total=False,
)


class ClientGetJobBookmarkResponseJobBookmarkEntryTypeDef(
    _ClientGetJobBookmarkResponseJobBookmarkEntryTypeDef
):
    """
    Type definition for `ClientGetJobBookmarkResponse` `JobBookmarkEntry`

    A structure that defines a point that a job can resume processing.

    - **JobName** *(string) --*

      The name of the job in question.

    - **Version** *(integer) --*

      The version of the job.

    - **Run** *(integer) --*

      The run ID number.

    - **Attempt** *(integer) --*

      The attempt ID number.

    - **PreviousRunId** *(string) --*

      The unique run identifier associated with the previous job run.

    - **RunId** *(string) --*

      The run ID number.

    - **JobBookmark** *(string) --*

      The bookmark itself.
    """


_ClientGetJobBookmarkResponseTypeDef = TypedDict(
    "_ClientGetJobBookmarkResponseTypeDef",
    {"JobBookmarkEntry": ClientGetJobBookmarkResponseJobBookmarkEntryTypeDef},
    total=False,
)


class ClientGetJobBookmarkResponseTypeDef(_ClientGetJobBookmarkResponseTypeDef):
    """
    Type definition for `ClientGetJobBookmark` `Response`

    - **JobBookmarkEntry** *(dict) --*

      A structure that defines a point that a job can resume processing.

      - **JobName** *(string) --*

        The name of the job in question.

      - **Version** *(integer) --*

        The version of the job.

      - **Run** *(integer) --*

        The run ID number.

      - **Attempt** *(integer) --*

        The attempt ID number.

      - **PreviousRunId** *(string) --*

        The unique run identifier associated with the previous job run.

      - **RunId** *(string) --*

        The run ID number.

      - **JobBookmark** *(string) --*

        The bookmark itself.
    """


_ClientGetJobResponseJobCommandTypeDef = TypedDict(
    "_ClientGetJobResponseJobCommandTypeDef",
    {"Name": str, "ScriptLocation": str, "PythonVersion": str},
    total=False,
)


class ClientGetJobResponseJobCommandTypeDef(_ClientGetJobResponseJobCommandTypeDef):
    """
    Type definition for `ClientGetJobResponseJob` `Command`

    The ``JobCommand`` that executes this job.

    - **Name** *(string) --*

      The name of the job command. For an Apache Spark ETL job, this must be ``glueetl`` . For
      a Python shell job, it must be ``pythonshell`` .

    - **ScriptLocation** *(string) --*

      Specifies the Amazon Simple Storage Service (Amazon S3) path to a script that executes a
      job.

    - **PythonVersion** *(string) --*

      The Python version being used to execute a Python shell job. Allowed values are 2 or 3.
    """


_ClientGetJobResponseJobConnectionsTypeDef = TypedDict(
    "_ClientGetJobResponseJobConnectionsTypeDef",
    {"Connections": List[str]},
    total=False,
)


class ClientGetJobResponseJobConnectionsTypeDef(
    _ClientGetJobResponseJobConnectionsTypeDef
):
    """
    Type definition for `ClientGetJobResponseJob` `Connections`

    The connections used for this job.

    - **Connections** *(list) --*

      A list of connections used by the job.

      - *(string) --*
    """


_ClientGetJobResponseJobExecutionPropertyTypeDef = TypedDict(
    "_ClientGetJobResponseJobExecutionPropertyTypeDef",
    {"MaxConcurrentRuns": int},
    total=False,
)


class ClientGetJobResponseJobExecutionPropertyTypeDef(
    _ClientGetJobResponseJobExecutionPropertyTypeDef
):
    """
    Type definition for `ClientGetJobResponseJob` `ExecutionProperty`

    An ``ExecutionProperty`` specifying the maximum number of concurrent runs allowed for this
    job.

    - **MaxConcurrentRuns** *(integer) --*

      The maximum number of concurrent runs allowed for the job. The default is 1. An error is
      returned when this threshold is reached. The maximum value you can specify is controlled
      by a service limit.
    """


_ClientGetJobResponseJobNotificationPropertyTypeDef = TypedDict(
    "_ClientGetJobResponseJobNotificationPropertyTypeDef",
    {"NotifyDelayAfter": int},
    total=False,
)


class ClientGetJobResponseJobNotificationPropertyTypeDef(
    _ClientGetJobResponseJobNotificationPropertyTypeDef
):
    """
    Type definition for `ClientGetJobResponseJob` `NotificationProperty`

    Specifies configuration properties of a job notification.

    - **NotifyDelayAfter** *(integer) --*

      After a job run starts, the number of minutes to wait before sending a job run delay
      notification.
    """


_ClientGetJobResponseJobTypeDef = TypedDict(
    "_ClientGetJobResponseJobTypeDef",
    {
        "Name": str,
        "Description": str,
        "LogUri": str,
        "Role": str,
        "CreatedOn": datetime,
        "LastModifiedOn": datetime,
        "ExecutionProperty": ClientGetJobResponseJobExecutionPropertyTypeDef,
        "Command": ClientGetJobResponseJobCommandTypeDef,
        "DefaultArguments": Dict[str, str],
        "Connections": ClientGetJobResponseJobConnectionsTypeDef,
        "MaxRetries": int,
        "AllocatedCapacity": int,
        "Timeout": int,
        "MaxCapacity": float,
        "WorkerType": str,
        "NumberOfWorkers": int,
        "SecurityConfiguration": str,
        "NotificationProperty": ClientGetJobResponseJobNotificationPropertyTypeDef,
        "GlueVersion": str,
    },
    total=False,
)


class ClientGetJobResponseJobTypeDef(_ClientGetJobResponseJobTypeDef):
    """
    Type definition for `ClientGetJobResponse` `Job`

    The requested job definition.

    - **Name** *(string) --*

      The name you assign to this job definition.

    - **Description** *(string) --*

      A description of the job.

    - **LogUri** *(string) --*

      This field is reserved for future use.

    - **Role** *(string) --*

      The name or Amazon Resource Name (ARN) of the IAM role associated with this job.

    - **CreatedOn** *(datetime) --*

      The time and date that this job definition was created.

    - **LastModifiedOn** *(datetime) --*

      The last point in time when this job definition was modified.

    - **ExecutionProperty** *(dict) --*

      An ``ExecutionProperty`` specifying the maximum number of concurrent runs allowed for this
      job.

      - **MaxConcurrentRuns** *(integer) --*

        The maximum number of concurrent runs allowed for the job. The default is 1. An error is
        returned when this threshold is reached. The maximum value you can specify is controlled
        by a service limit.

    - **Command** *(dict) --*

      The ``JobCommand`` that executes this job.

      - **Name** *(string) --*

        The name of the job command. For an Apache Spark ETL job, this must be ``glueetl`` . For
        a Python shell job, it must be ``pythonshell`` .

      - **ScriptLocation** *(string) --*

        Specifies the Amazon Simple Storage Service (Amazon S3) path to a script that executes a
        job.

      - **PythonVersion** *(string) --*

        The Python version being used to execute a Python shell job. Allowed values are 2 or 3.

    - **DefaultArguments** *(dict) --*

      The default arguments for this job, specified as name-value pairs.

      You can specify arguments here that your own job-execution script consumes, as well as
      arguments that AWS Glue itself consumes.

      For information about how to specify and consume your own Job arguments, see the `Calling
      AWS Glue APIs in Python
      <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
      topic in the developer guide.

      For information about the key-value pairs that AWS Glue consumes to set up your job, see
      the `Special Parameters Used by AWS Glue
      <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
      topic in the developer guide.

      - *(string) --*

        - *(string) --*

    - **Connections** *(dict) --*

      The connections used for this job.

      - **Connections** *(list) --*

        A list of connections used by the job.

        - *(string) --*

    - **MaxRetries** *(integer) --*

      The maximum number of times to retry this job after a JobRun fails.

    - **AllocatedCapacity** *(integer) --*

      This field is deprecated. Use ``MaxCapacity`` instead.

      The number of AWS Glue data processing units (DPUs) allocated to runs of this job. You can
      allocate from 2 to 100 DPUs; the default is 10. A DPU is a relative measure of processing
      power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more
      information, see the `AWS Glue pricing page <https://aws.amazon.com/glue/pricing/>`__ .

    - **Timeout** *(integer) --*

      The job timeout in minutes. This is the maximum time that a job run can consume resources
      before it is terminated and enters ``TIMEOUT`` status. The default is 2,880 minutes (48
      hours).

    - **MaxCapacity** *(float) --*

      The number of AWS Glue data processing units (DPUs) that can be allocated when this job
      runs. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute
      capacity and 16 GB of memory. For more information, see the `AWS Glue pricing page
      <https://aws.amazon.com/glue/pricing/>`__ .

      Do not set ``Max Capacity`` if using ``WorkerType`` and ``NumberOfWorkers`` .

      The value that can be allocated for ``MaxCapacity`` depends on whether you are running a
      Python shell job or an Apache Spark ETL job:

      * When you specify a Python shell job (``JobCommand.Name`` ="pythonshell"), you can
      allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.

      * When you specify an Apache Spark ETL job (``JobCommand.Name`` ="glueetl"), you can
      allocate from 2 to 100 DPUs. The default is 10 DPUs. This job type cannot have a fractional
      DPU allocation.

    - **WorkerType** *(string) --*

      The type of predefined worker that is allocated when a job runs. Accepts a value of
      Standard, G.1X, or G.2X.

      * For the ``Standard`` worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB
      disk, and 2 executors per worker.

      * For the ``G.1X`` worker type, each worker maps to 1 DPU (4 vCPU, 16 GB of memory, 64 GB
      disk), and provides 1 executor per worker. We recommend this worker type for
      memory-intensive jobs.

      * For the ``G.2X`` worker type, each worker maps to 2 DPU (8 vCPU, 32 GB of memory, 128 GB
      disk), and provides 1 executor per worker. We recommend this worker type for
      memory-intensive jobs.

    - **NumberOfWorkers** *(integer) --*

      The number of workers of a defined ``workerType`` that are allocated when a job runs.

      The maximum number of workers you can define are 299 for ``G.1X`` , and 149 for ``G.2X`` .

    - **SecurityConfiguration** *(string) --*

      The name of the ``SecurityConfiguration`` structure to be used with this job.

    - **NotificationProperty** *(dict) --*

      Specifies configuration properties of a job notification.

      - **NotifyDelayAfter** *(integer) --*

        After a job run starts, the number of minutes to wait before sending a job run delay
        notification.

    - **GlueVersion** *(string) --*

      Glue version determines the versions of Apache Spark and Python that AWS Glue supports. The
      Python version indicates the version supported for jobs of type Spark.

      For more information about the available AWS Glue versions and corresponding Spark and
      Python versions, see `Glue version
      <https://docs.aws.amazon.com/glue/latest/dg/add-job.html>`__ in the developer guide.

      Jobs that are created without specifying a Glue version default to Glue 0.9.
    """


_ClientGetJobResponseTypeDef = TypedDict(
    "_ClientGetJobResponseTypeDef", {"Job": ClientGetJobResponseJobTypeDef}, total=False
)


class ClientGetJobResponseTypeDef(_ClientGetJobResponseTypeDef):
    """
    Type definition for `ClientGetJob` `Response`

    - **Job** *(dict) --*

      The requested job definition.

      - **Name** *(string) --*

        The name you assign to this job definition.

      - **Description** *(string) --*

        A description of the job.

      - **LogUri** *(string) --*

        This field is reserved for future use.

      - **Role** *(string) --*

        The name or Amazon Resource Name (ARN) of the IAM role associated with this job.

      - **CreatedOn** *(datetime) --*

        The time and date that this job definition was created.

      - **LastModifiedOn** *(datetime) --*

        The last point in time when this job definition was modified.

      - **ExecutionProperty** *(dict) --*

        An ``ExecutionProperty`` specifying the maximum number of concurrent runs allowed for this
        job.

        - **MaxConcurrentRuns** *(integer) --*

          The maximum number of concurrent runs allowed for the job. The default is 1. An error is
          returned when this threshold is reached. The maximum value you can specify is controlled
          by a service limit.

      - **Command** *(dict) --*

        The ``JobCommand`` that executes this job.

        - **Name** *(string) --*

          The name of the job command. For an Apache Spark ETL job, this must be ``glueetl`` . For
          a Python shell job, it must be ``pythonshell`` .

        - **ScriptLocation** *(string) --*

          Specifies the Amazon Simple Storage Service (Amazon S3) path to a script that executes a
          job.

        - **PythonVersion** *(string) --*

          The Python version being used to execute a Python shell job. Allowed values are 2 or 3.

      - **DefaultArguments** *(dict) --*

        The default arguments for this job, specified as name-value pairs.

        You can specify arguments here that your own job-execution script consumes, as well as
        arguments that AWS Glue itself consumes.

        For information about how to specify and consume your own Job arguments, see the `Calling
        AWS Glue APIs in Python
        <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
        topic in the developer guide.

        For information about the key-value pairs that AWS Glue consumes to set up your job, see
        the `Special Parameters Used by AWS Glue
        <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
        topic in the developer guide.

        - *(string) --*

          - *(string) --*

      - **Connections** *(dict) --*

        The connections used for this job.

        - **Connections** *(list) --*

          A list of connections used by the job.

          - *(string) --*

      - **MaxRetries** *(integer) --*

        The maximum number of times to retry this job after a JobRun fails.

      - **AllocatedCapacity** *(integer) --*

        This field is deprecated. Use ``MaxCapacity`` instead.

        The number of AWS Glue data processing units (DPUs) allocated to runs of this job. You can
        allocate from 2 to 100 DPUs; the default is 10. A DPU is a relative measure of processing
        power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more
        information, see the `AWS Glue pricing page <https://aws.amazon.com/glue/pricing/>`__ .

      - **Timeout** *(integer) --*

        The job timeout in minutes. This is the maximum time that a job run can consume resources
        before it is terminated and enters ``TIMEOUT`` status. The default is 2,880 minutes (48
        hours).

      - **MaxCapacity** *(float) --*

        The number of AWS Glue data processing units (DPUs) that can be allocated when this job
        runs. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute
        capacity and 16 GB of memory. For more information, see the `AWS Glue pricing page
        <https://aws.amazon.com/glue/pricing/>`__ .

        Do not set ``Max Capacity`` if using ``WorkerType`` and ``NumberOfWorkers`` .

        The value that can be allocated for ``MaxCapacity`` depends on whether you are running a
        Python shell job or an Apache Spark ETL job:

        * When you specify a Python shell job (``JobCommand.Name`` ="pythonshell"), you can
        allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.

        * When you specify an Apache Spark ETL job (``JobCommand.Name`` ="glueetl"), you can
        allocate from 2 to 100 DPUs. The default is 10 DPUs. This job type cannot have a fractional
        DPU allocation.

      - **WorkerType** *(string) --*

        The type of predefined worker that is allocated when a job runs. Accepts a value of
        Standard, G.1X, or G.2X.

        * For the ``Standard`` worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB
        disk, and 2 executors per worker.

        * For the ``G.1X`` worker type, each worker maps to 1 DPU (4 vCPU, 16 GB of memory, 64 GB
        disk), and provides 1 executor per worker. We recommend this worker type for
        memory-intensive jobs.

        * For the ``G.2X`` worker type, each worker maps to 2 DPU (8 vCPU, 32 GB of memory, 128 GB
        disk), and provides 1 executor per worker. We recommend this worker type for
        memory-intensive jobs.

      - **NumberOfWorkers** *(integer) --*

        The number of workers of a defined ``workerType`` that are allocated when a job runs.

        The maximum number of workers you can define are 299 for ``G.1X`` , and 149 for ``G.2X`` .

      - **SecurityConfiguration** *(string) --*

        The name of the ``SecurityConfiguration`` structure to be used with this job.

      - **NotificationProperty** *(dict) --*

        Specifies configuration properties of a job notification.

        - **NotifyDelayAfter** *(integer) --*

          After a job run starts, the number of minutes to wait before sending a job run delay
          notification.

      - **GlueVersion** *(string) --*

        Glue version determines the versions of Apache Spark and Python that AWS Glue supports. The
        Python version indicates the version supported for jobs of type Spark.

        For more information about the available AWS Glue versions and corresponding Spark and
        Python versions, see `Glue version
        <https://docs.aws.amazon.com/glue/latest/dg/add-job.html>`__ in the developer guide.

        Jobs that are created without specifying a Glue version default to Glue 0.9.
    """


_ClientGetJobRunResponseJobRunNotificationPropertyTypeDef = TypedDict(
    "_ClientGetJobRunResponseJobRunNotificationPropertyTypeDef",
    {"NotifyDelayAfter": int},
    total=False,
)


class ClientGetJobRunResponseJobRunNotificationPropertyTypeDef(
    _ClientGetJobRunResponseJobRunNotificationPropertyTypeDef
):
    """
    Type definition for `ClientGetJobRunResponseJobRun` `NotificationProperty`

    Specifies configuration properties of a job run notification.

    - **NotifyDelayAfter** *(integer) --*

      After a job run starts, the number of minutes to wait before sending a job run delay
      notification.
    """


_ClientGetJobRunResponseJobRunPredecessorRunsTypeDef = TypedDict(
    "_ClientGetJobRunResponseJobRunPredecessorRunsTypeDef",
    {"JobName": str, "RunId": str},
    total=False,
)


class ClientGetJobRunResponseJobRunPredecessorRunsTypeDef(
    _ClientGetJobRunResponseJobRunPredecessorRunsTypeDef
):
    """
    Type definition for `ClientGetJobRunResponseJobRun` `PredecessorRuns`

    A job run that was used in the predicate of a conditional trigger that triggered this job
    run.

    - **JobName** *(string) --*

      The name of the job definition used by the predecessor job run.

    - **RunId** *(string) --*

      The job-run ID of the predecessor job run.
    """


_ClientGetJobRunResponseJobRunTypeDef = TypedDict(
    "_ClientGetJobRunResponseJobRunTypeDef",
    {
        "Id": str,
        "Attempt": int,
        "PreviousRunId": str,
        "TriggerName": str,
        "JobName": str,
        "StartedOn": datetime,
        "LastModifiedOn": datetime,
        "CompletedOn": datetime,
        "JobRunState": str,
        "Arguments": Dict[str, str],
        "ErrorMessage": str,
        "PredecessorRuns": List[ClientGetJobRunResponseJobRunPredecessorRunsTypeDef],
        "AllocatedCapacity": int,
        "ExecutionTime": int,
        "Timeout": int,
        "MaxCapacity": float,
        "WorkerType": str,
        "NumberOfWorkers": int,
        "SecurityConfiguration": str,
        "LogGroupName": str,
        "NotificationProperty": ClientGetJobRunResponseJobRunNotificationPropertyTypeDef,
        "GlueVersion": str,
    },
    total=False,
)


class ClientGetJobRunResponseJobRunTypeDef(_ClientGetJobRunResponseJobRunTypeDef):
    """
    Type definition for `ClientGetJobRunResponse` `JobRun`

    The requested job-run metadata.

    - **Id** *(string) --*

      The ID of this job run.

    - **Attempt** *(integer) --*

      The number of the attempt to run this job.

    - **PreviousRunId** *(string) --*

      The ID of the previous run of this job. For example, the ``JobRunId`` specified in the
      ``StartJobRun`` action.

    - **TriggerName** *(string) --*

      The name of the trigger that started this job run.

    - **JobName** *(string) --*

      The name of the job definition being used in this run.

    - **StartedOn** *(datetime) --*

      The date and time at which this job run was started.

    - **LastModifiedOn** *(datetime) --*

      The last time that this job run was modified.

    - **CompletedOn** *(datetime) --*

      The date and time that this job run completed.

    - **JobRunState** *(string) --*

      The current state of the job run.

    - **Arguments** *(dict) --*

      The job arguments associated with this run. For this job run, they replace the default
      arguments set in the job definition itself.

      You can specify arguments here that your own job-execution script consumes, as well as
      arguments that AWS Glue itself consumes.

      For information about how to specify and consume your own job arguments, see the `Calling
      AWS Glue APIs in Python
      <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
      topic in the developer guide.

      For information about the key-value pairs that AWS Glue consumes to set up your job, see
      the `Special Parameters Used by AWS Glue
      <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
      topic in the developer guide.

      - *(string) --*

        - *(string) --*

    - **ErrorMessage** *(string) --*

      An error message associated with this job run.

    - **PredecessorRuns** *(list) --*

      A list of predecessors to this job run.

      - *(dict) --*

        A job run that was used in the predicate of a conditional trigger that triggered this job
        run.

        - **JobName** *(string) --*

          The name of the job definition used by the predecessor job run.

        - **RunId** *(string) --*

          The job-run ID of the predecessor job run.

    - **AllocatedCapacity** *(integer) --*

      This field is deprecated. Use ``MaxCapacity`` instead.

      The number of AWS Glue data processing units (DPUs) allocated to this JobRun. From 2 to 100
      DPUs can be allocated; the default is 10. A DPU is a relative measure of processing power
      that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see
      the `AWS Glue pricing page <https://aws.amazon.com/glue/pricing/>`__ .

    - **ExecutionTime** *(integer) --*

      The amount of time (in seconds) that the job run consumed resources.

    - **Timeout** *(integer) --*

      The ``JobRun`` timeout in minutes. This is the maximum time that a job run can consume
      resources before it is terminated and enters ``TIMEOUT`` status. The default is 2,880
      minutes (48 hours). This overrides the timeout value set in the parent job.

    - **MaxCapacity** *(float) --*

      The number of AWS Glue data processing units (DPUs) that can be allocated when this job
      runs. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute
      capacity and 16 GB of memory. For more information, see the `AWS Glue pricing page
      <https://docs.aws.amazon.com/https:/aws.amazon.com/glue/pricing/>`__ .

      Do not set ``Max Capacity`` if using ``WorkerType`` and ``NumberOfWorkers`` .

      The value that can be allocated for ``MaxCapacity`` depends on whether you are running a
      Python shell job or an Apache Spark ETL job:

      * When you specify a Python shell job (``JobCommand.Name`` ="pythonshell"), you can
      allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.

      * When you specify an Apache Spark ETL job (``JobCommand.Name`` ="glueetl"), you can
      allocate from 2 to 100 DPUs. The default is 10 DPUs. This job type cannot have a fractional
      DPU allocation.

    - **WorkerType** *(string) --*

      The type of predefined worker that is allocated when a job runs. Accepts a value of
      Standard, G.1X, or G.2X.

      * For the ``Standard`` worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB
      disk, and 2 executors per worker.

      * For the ``G.1X`` worker type, each worker provides 4 vCPU, 16 GB of memory and a 64GB
      disk, and 1 executor per worker.

      * For the ``G.2X`` worker type, each worker provides 8 vCPU, 32 GB of memory and a 128GB
      disk, and 1 executor per worker.

    - **NumberOfWorkers** *(integer) --*

      The number of workers of a defined ``workerType`` that are allocated when a job runs.

      The maximum number of workers you can define are 299 for ``G.1X`` , and 149 for ``G.2X`` .

    - **SecurityConfiguration** *(string) --*

      The name of the ``SecurityConfiguration`` structure to be used with this job run.

    - **LogGroupName** *(string) --*

      The name of the log group for secure logging that can be server-side encrypted in Amazon
      CloudWatch using AWS KMS. This name can be ``/aws-glue/jobs/`` , in which case the default
      encryption is ``NONE`` . If you add a role name and ``SecurityConfiguration`` name (in
      other words, ``/aws-glue/jobs-yourRoleName-yourSecurityConfigurationName/`` ), then that
      security configuration is used to encrypt the log group.

    - **NotificationProperty** *(dict) --*

      Specifies configuration properties of a job run notification.

      - **NotifyDelayAfter** *(integer) --*

        After a job run starts, the number of minutes to wait before sending a job run delay
        notification.

    - **GlueVersion** *(string) --*

      Glue version determines the versions of Apache Spark and Python that AWS Glue supports. The
      Python version indicates the version supported for jobs of type Spark.

      For more information about the available AWS Glue versions and corresponding Spark and
      Python versions, see `Glue version
      <https://docs.aws.amazon.com/glue/latest/dg/add-job.html>`__ in the developer guide.

      Jobs that are created without specifying a Glue version default to Glue 0.9.
    """


_ClientGetJobRunResponseTypeDef = TypedDict(
    "_ClientGetJobRunResponseTypeDef",
    {"JobRun": ClientGetJobRunResponseJobRunTypeDef},
    total=False,
)


class ClientGetJobRunResponseTypeDef(_ClientGetJobRunResponseTypeDef):
    """
    Type definition for `ClientGetJobRun` `Response`

    - **JobRun** *(dict) --*

      The requested job-run metadata.

      - **Id** *(string) --*

        The ID of this job run.

      - **Attempt** *(integer) --*

        The number of the attempt to run this job.

      - **PreviousRunId** *(string) --*

        The ID of the previous run of this job. For example, the ``JobRunId`` specified in the
        ``StartJobRun`` action.

      - **TriggerName** *(string) --*

        The name of the trigger that started this job run.

      - **JobName** *(string) --*

        The name of the job definition being used in this run.

      - **StartedOn** *(datetime) --*

        The date and time at which this job run was started.

      - **LastModifiedOn** *(datetime) --*

        The last time that this job run was modified.

      - **CompletedOn** *(datetime) --*

        The date and time that this job run completed.

      - **JobRunState** *(string) --*

        The current state of the job run.

      - **Arguments** *(dict) --*

        The job arguments associated with this run. For this job run, they replace the default
        arguments set in the job definition itself.

        You can specify arguments here that your own job-execution script consumes, as well as
        arguments that AWS Glue itself consumes.

        For information about how to specify and consume your own job arguments, see the `Calling
        AWS Glue APIs in Python
        <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
        topic in the developer guide.

        For information about the key-value pairs that AWS Glue consumes to set up your job, see
        the `Special Parameters Used by AWS Glue
        <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
        topic in the developer guide.

        - *(string) --*

          - *(string) --*

      - **ErrorMessage** *(string) --*

        An error message associated with this job run.

      - **PredecessorRuns** *(list) --*

        A list of predecessors to this job run.

        - *(dict) --*

          A job run that was used in the predicate of a conditional trigger that triggered this job
          run.

          - **JobName** *(string) --*

            The name of the job definition used by the predecessor job run.

          - **RunId** *(string) --*

            The job-run ID of the predecessor job run.

      - **AllocatedCapacity** *(integer) --*

        This field is deprecated. Use ``MaxCapacity`` instead.

        The number of AWS Glue data processing units (DPUs) allocated to this JobRun. From 2 to 100
        DPUs can be allocated; the default is 10. A DPU is a relative measure of processing power
        that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see
        the `AWS Glue pricing page <https://aws.amazon.com/glue/pricing/>`__ .

      - **ExecutionTime** *(integer) --*

        The amount of time (in seconds) that the job run consumed resources.

      - **Timeout** *(integer) --*

        The ``JobRun`` timeout in minutes. This is the maximum time that a job run can consume
        resources before it is terminated and enters ``TIMEOUT`` status. The default is 2,880
        minutes (48 hours). This overrides the timeout value set in the parent job.

      - **MaxCapacity** *(float) --*

        The number of AWS Glue data processing units (DPUs) that can be allocated when this job
        runs. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute
        capacity and 16 GB of memory. For more information, see the `AWS Glue pricing page
        <https://docs.aws.amazon.com/https:/aws.amazon.com/glue/pricing/>`__ .

        Do not set ``Max Capacity`` if using ``WorkerType`` and ``NumberOfWorkers`` .

        The value that can be allocated for ``MaxCapacity`` depends on whether you are running a
        Python shell job or an Apache Spark ETL job:

        * When you specify a Python shell job (``JobCommand.Name`` ="pythonshell"), you can
        allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.

        * When you specify an Apache Spark ETL job (``JobCommand.Name`` ="glueetl"), you can
        allocate from 2 to 100 DPUs. The default is 10 DPUs. This job type cannot have a fractional
        DPU allocation.

      - **WorkerType** *(string) --*

        The type of predefined worker that is allocated when a job runs. Accepts a value of
        Standard, G.1X, or G.2X.

        * For the ``Standard`` worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB
        disk, and 2 executors per worker.

        * For the ``G.1X`` worker type, each worker provides 4 vCPU, 16 GB of memory and a 64GB
        disk, and 1 executor per worker.

        * For the ``G.2X`` worker type, each worker provides 8 vCPU, 32 GB of memory and a 128GB
        disk, and 1 executor per worker.

      - **NumberOfWorkers** *(integer) --*

        The number of workers of a defined ``workerType`` that are allocated when a job runs.

        The maximum number of workers you can define are 299 for ``G.1X`` , and 149 for ``G.2X`` .

      - **SecurityConfiguration** *(string) --*

        The name of the ``SecurityConfiguration`` structure to be used with this job run.

      - **LogGroupName** *(string) --*

        The name of the log group for secure logging that can be server-side encrypted in Amazon
        CloudWatch using AWS KMS. This name can be ``/aws-glue/jobs/`` , in which case the default
        encryption is ``NONE`` . If you add a role name and ``SecurityConfiguration`` name (in
        other words, ``/aws-glue/jobs-yourRoleName-yourSecurityConfigurationName/`` ), then that
        security configuration is used to encrypt the log group.

      - **NotificationProperty** *(dict) --*

        Specifies configuration properties of a job run notification.

        - **NotifyDelayAfter** *(integer) --*

          After a job run starts, the number of minutes to wait before sending a job run delay
          notification.

      - **GlueVersion** *(string) --*

        Glue version determines the versions of Apache Spark and Python that AWS Glue supports. The
        Python version indicates the version supported for jobs of type Spark.

        For more information about the available AWS Glue versions and corresponding Spark and
        Python versions, see `Glue version
        <https://docs.aws.amazon.com/glue/latest/dg/add-job.html>`__ in the developer guide.

        Jobs that are created without specifying a Glue version default to Glue 0.9.
    """


_ClientGetJobRunsResponseJobRunsNotificationPropertyTypeDef = TypedDict(
    "_ClientGetJobRunsResponseJobRunsNotificationPropertyTypeDef",
    {"NotifyDelayAfter": int},
    total=False,
)


class ClientGetJobRunsResponseJobRunsNotificationPropertyTypeDef(
    _ClientGetJobRunsResponseJobRunsNotificationPropertyTypeDef
):
    """
    Type definition for `ClientGetJobRunsResponseJobRuns` `NotificationProperty`

    Specifies configuration properties of a job run notification.

    - **NotifyDelayAfter** *(integer) --*

      After a job run starts, the number of minutes to wait before sending a job run delay
      notification.
    """


_ClientGetJobRunsResponseJobRunsPredecessorRunsTypeDef = TypedDict(
    "_ClientGetJobRunsResponseJobRunsPredecessorRunsTypeDef",
    {"JobName": str, "RunId": str},
    total=False,
)


class ClientGetJobRunsResponseJobRunsPredecessorRunsTypeDef(
    _ClientGetJobRunsResponseJobRunsPredecessorRunsTypeDef
):
    """
    Type definition for `ClientGetJobRunsResponseJobRuns` `PredecessorRuns`

    A job run that was used in the predicate of a conditional trigger that triggered this
    job run.

    - **JobName** *(string) --*

      The name of the job definition used by the predecessor job run.

    - **RunId** *(string) --*

      The job-run ID of the predecessor job run.
    """


_ClientGetJobRunsResponseJobRunsTypeDef = TypedDict(
    "_ClientGetJobRunsResponseJobRunsTypeDef",
    {
        "Id": str,
        "Attempt": int,
        "PreviousRunId": str,
        "TriggerName": str,
        "JobName": str,
        "StartedOn": datetime,
        "LastModifiedOn": datetime,
        "CompletedOn": datetime,
        "JobRunState": str,
        "Arguments": Dict[str, str],
        "ErrorMessage": str,
        "PredecessorRuns": List[ClientGetJobRunsResponseJobRunsPredecessorRunsTypeDef],
        "AllocatedCapacity": int,
        "ExecutionTime": int,
        "Timeout": int,
        "MaxCapacity": float,
        "WorkerType": str,
        "NumberOfWorkers": int,
        "SecurityConfiguration": str,
        "LogGroupName": str,
        "NotificationProperty": ClientGetJobRunsResponseJobRunsNotificationPropertyTypeDef,
        "GlueVersion": str,
    },
    total=False,
)


class ClientGetJobRunsResponseJobRunsTypeDef(_ClientGetJobRunsResponseJobRunsTypeDef):
    """
    Type definition for `ClientGetJobRunsResponse` `JobRuns`

    Contains information about a job run.

    - **Id** *(string) --*

      The ID of this job run.

    - **Attempt** *(integer) --*

      The number of the attempt to run this job.

    - **PreviousRunId** *(string) --*

      The ID of the previous run of this job. For example, the ``JobRunId`` specified in the
      ``StartJobRun`` action.

    - **TriggerName** *(string) --*

      The name of the trigger that started this job run.

    - **JobName** *(string) --*

      The name of the job definition being used in this run.

    - **StartedOn** *(datetime) --*

      The date and time at which this job run was started.

    - **LastModifiedOn** *(datetime) --*

      The last time that this job run was modified.

    - **CompletedOn** *(datetime) --*

      The date and time that this job run completed.

    - **JobRunState** *(string) --*

      The current state of the job run.

    - **Arguments** *(dict) --*

      The job arguments associated with this run. For this job run, they replace the default
      arguments set in the job definition itself.

      You can specify arguments here that your own job-execution script consumes, as well as
      arguments that AWS Glue itself consumes.

      For information about how to specify and consume your own job arguments, see the `Calling
      AWS Glue APIs in Python
      <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
      topic in the developer guide.

      For information about the key-value pairs that AWS Glue consumes to set up your job, see
      the `Special Parameters Used by AWS Glue
      <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
      topic in the developer guide.

      - *(string) --*

        - *(string) --*

    - **ErrorMessage** *(string) --*

      An error message associated with this job run.

    - **PredecessorRuns** *(list) --*

      A list of predecessors to this job run.

      - *(dict) --*

        A job run that was used in the predicate of a conditional trigger that triggered this
        job run.

        - **JobName** *(string) --*

          The name of the job definition used by the predecessor job run.

        - **RunId** *(string) --*

          The job-run ID of the predecessor job run.

    - **AllocatedCapacity** *(integer) --*

      This field is deprecated. Use ``MaxCapacity`` instead.

      The number of AWS Glue data processing units (DPUs) allocated to this JobRun. From 2 to
      100 DPUs can be allocated; the default is 10. A DPU is a relative measure of processing
      power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more
      information, see the `AWS Glue pricing page <https://aws.amazon.com/glue/pricing/>`__ .

    - **ExecutionTime** *(integer) --*

      The amount of time (in seconds) that the job run consumed resources.

    - **Timeout** *(integer) --*

      The ``JobRun`` timeout in minutes. This is the maximum time that a job run can consume
      resources before it is terminated and enters ``TIMEOUT`` status. The default is 2,880
      minutes (48 hours). This overrides the timeout value set in the parent job.

    - **MaxCapacity** *(float) --*

      The number of AWS Glue data processing units (DPUs) that can be allocated when this job
      runs. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute
      capacity and 16 GB of memory. For more information, see the `AWS Glue pricing page
      <https://docs.aws.amazon.com/https:/aws.amazon.com/glue/pricing/>`__ .

      Do not set ``Max Capacity`` if using ``WorkerType`` and ``NumberOfWorkers`` .

      The value that can be allocated for ``MaxCapacity`` depends on whether you are running a
      Python shell job or an Apache Spark ETL job:

      * When you specify a Python shell job (``JobCommand.Name`` ="pythonshell"), you can
      allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.

      * When you specify an Apache Spark ETL job (``JobCommand.Name`` ="glueetl"), you can
      allocate from 2 to 100 DPUs. The default is 10 DPUs. This job type cannot have a
      fractional DPU allocation.

    - **WorkerType** *(string) --*

      The type of predefined worker that is allocated when a job runs. Accepts a value of
      Standard, G.1X, or G.2X.

      * For the ``Standard`` worker type, each worker provides 4 vCPU, 16 GB of memory and a
      50GB disk, and 2 executors per worker.

      * For the ``G.1X`` worker type, each worker provides 4 vCPU, 16 GB of memory and a 64GB
      disk, and 1 executor per worker.

      * For the ``G.2X`` worker type, each worker provides 8 vCPU, 32 GB of memory and a 128GB
      disk, and 1 executor per worker.

    - **NumberOfWorkers** *(integer) --*

      The number of workers of a defined ``workerType`` that are allocated when a job runs.

      The maximum number of workers you can define are 299 for ``G.1X`` , and 149 for ``G.2X`` .

    - **SecurityConfiguration** *(string) --*

      The name of the ``SecurityConfiguration`` structure to be used with this job run.

    - **LogGroupName** *(string) --*

      The name of the log group for secure logging that can be server-side encrypted in Amazon
      CloudWatch using AWS KMS. This name can be ``/aws-glue/jobs/`` , in which case the
      default encryption is ``NONE`` . If you add a role name and ``SecurityConfiguration``
      name (in other words, ``/aws-glue/jobs-yourRoleName-yourSecurityConfigurationName/`` ),
      then that security configuration is used to encrypt the log group.

    - **NotificationProperty** *(dict) --*

      Specifies configuration properties of a job run notification.

      - **NotifyDelayAfter** *(integer) --*

        After a job run starts, the number of minutes to wait before sending a job run delay
        notification.

    - **GlueVersion** *(string) --*

      Glue version determines the versions of Apache Spark and Python that AWS Glue supports.
      The Python version indicates the version supported for jobs of type Spark.

      For more information about the available AWS Glue versions and corresponding Spark and
      Python versions, see `Glue version
      <https://docs.aws.amazon.com/glue/latest/dg/add-job.html>`__ in the developer guide.

      Jobs that are created without specifying a Glue version default to Glue 0.9.
    """


_ClientGetJobRunsResponseTypeDef = TypedDict(
    "_ClientGetJobRunsResponseTypeDef",
    {"JobRuns": List[ClientGetJobRunsResponseJobRunsTypeDef], "NextToken": str},
    total=False,
)


class ClientGetJobRunsResponseTypeDef(_ClientGetJobRunsResponseTypeDef):
    """
    Type definition for `ClientGetJobRuns` `Response`

    - **JobRuns** *(list) --*

      A list of job-run metadata objects.

      - *(dict) --*

        Contains information about a job run.

        - **Id** *(string) --*

          The ID of this job run.

        - **Attempt** *(integer) --*

          The number of the attempt to run this job.

        - **PreviousRunId** *(string) --*

          The ID of the previous run of this job. For example, the ``JobRunId`` specified in the
          ``StartJobRun`` action.

        - **TriggerName** *(string) --*

          The name of the trigger that started this job run.

        - **JobName** *(string) --*

          The name of the job definition being used in this run.

        - **StartedOn** *(datetime) --*

          The date and time at which this job run was started.

        - **LastModifiedOn** *(datetime) --*

          The last time that this job run was modified.

        - **CompletedOn** *(datetime) --*

          The date and time that this job run completed.

        - **JobRunState** *(string) --*

          The current state of the job run.

        - **Arguments** *(dict) --*

          The job arguments associated with this run. For this job run, they replace the default
          arguments set in the job definition itself.

          You can specify arguments here that your own job-execution script consumes, as well as
          arguments that AWS Glue itself consumes.

          For information about how to specify and consume your own job arguments, see the `Calling
          AWS Glue APIs in Python
          <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
          topic in the developer guide.

          For information about the key-value pairs that AWS Glue consumes to set up your job, see
          the `Special Parameters Used by AWS Glue
          <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
          topic in the developer guide.

          - *(string) --*

            - *(string) --*

        - **ErrorMessage** *(string) --*

          An error message associated with this job run.

        - **PredecessorRuns** *(list) --*

          A list of predecessors to this job run.

          - *(dict) --*

            A job run that was used in the predicate of a conditional trigger that triggered this
            job run.

            - **JobName** *(string) --*

              The name of the job definition used by the predecessor job run.

            - **RunId** *(string) --*

              The job-run ID of the predecessor job run.

        - **AllocatedCapacity** *(integer) --*

          This field is deprecated. Use ``MaxCapacity`` instead.

          The number of AWS Glue data processing units (DPUs) allocated to this JobRun. From 2 to
          100 DPUs can be allocated; the default is 10. A DPU is a relative measure of processing
          power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more
          information, see the `AWS Glue pricing page <https://aws.amazon.com/glue/pricing/>`__ .

        - **ExecutionTime** *(integer) --*

          The amount of time (in seconds) that the job run consumed resources.

        - **Timeout** *(integer) --*

          The ``JobRun`` timeout in minutes. This is the maximum time that a job run can consume
          resources before it is terminated and enters ``TIMEOUT`` status. The default is 2,880
          minutes (48 hours). This overrides the timeout value set in the parent job.

        - **MaxCapacity** *(float) --*

          The number of AWS Glue data processing units (DPUs) that can be allocated when this job
          runs. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute
          capacity and 16 GB of memory. For more information, see the `AWS Glue pricing page
          <https://docs.aws.amazon.com/https:/aws.amazon.com/glue/pricing/>`__ .

          Do not set ``Max Capacity`` if using ``WorkerType`` and ``NumberOfWorkers`` .

          The value that can be allocated for ``MaxCapacity`` depends on whether you are running a
          Python shell job or an Apache Spark ETL job:

          * When you specify a Python shell job (``JobCommand.Name`` ="pythonshell"), you can
          allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.

          * When you specify an Apache Spark ETL job (``JobCommand.Name`` ="glueetl"), you can
          allocate from 2 to 100 DPUs. The default is 10 DPUs. This job type cannot have a
          fractional DPU allocation.

        - **WorkerType** *(string) --*

          The type of predefined worker that is allocated when a job runs. Accepts a value of
          Standard, G.1X, or G.2X.

          * For the ``Standard`` worker type, each worker provides 4 vCPU, 16 GB of memory and a
          50GB disk, and 2 executors per worker.

          * For the ``G.1X`` worker type, each worker provides 4 vCPU, 16 GB of memory and a 64GB
          disk, and 1 executor per worker.

          * For the ``G.2X`` worker type, each worker provides 8 vCPU, 32 GB of memory and a 128GB
          disk, and 1 executor per worker.

        - **NumberOfWorkers** *(integer) --*

          The number of workers of a defined ``workerType`` that are allocated when a job runs.

          The maximum number of workers you can define are 299 for ``G.1X`` , and 149 for ``G.2X`` .

        - **SecurityConfiguration** *(string) --*

          The name of the ``SecurityConfiguration`` structure to be used with this job run.

        - **LogGroupName** *(string) --*

          The name of the log group for secure logging that can be server-side encrypted in Amazon
          CloudWatch using AWS KMS. This name can be ``/aws-glue/jobs/`` , in which case the
          default encryption is ``NONE`` . If you add a role name and ``SecurityConfiguration``
          name (in other words, ``/aws-glue/jobs-yourRoleName-yourSecurityConfigurationName/`` ),
          then that security configuration is used to encrypt the log group.

        - **NotificationProperty** *(dict) --*

          Specifies configuration properties of a job run notification.

          - **NotifyDelayAfter** *(integer) --*

            After a job run starts, the number of minutes to wait before sending a job run delay
            notification.

        - **GlueVersion** *(string) --*

          Glue version determines the versions of Apache Spark and Python that AWS Glue supports.
          The Python version indicates the version supported for jobs of type Spark.

          For more information about the available AWS Glue versions and corresponding Spark and
          Python versions, see `Glue version
          <https://docs.aws.amazon.com/glue/latest/dg/add-job.html>`__ in the developer guide.

          Jobs that are created without specifying a Glue version default to Glue 0.9.

    - **NextToken** *(string) --*

      A continuation token, if not all requested job runs have been returned.
    """


_ClientGetJobsResponseJobsCommandTypeDef = TypedDict(
    "_ClientGetJobsResponseJobsCommandTypeDef",
    {"Name": str, "ScriptLocation": str, "PythonVersion": str},
    total=False,
)


class ClientGetJobsResponseJobsCommandTypeDef(_ClientGetJobsResponseJobsCommandTypeDef):
    """
    Type definition for `ClientGetJobsResponseJobs` `Command`

    The ``JobCommand`` that executes this job.

    - **Name** *(string) --*

      The name of the job command. For an Apache Spark ETL job, this must be ``glueetl`` .
      For a Python shell job, it must be ``pythonshell`` .

    - **ScriptLocation** *(string) --*

      Specifies the Amazon Simple Storage Service (Amazon S3) path to a script that executes
      a job.

    - **PythonVersion** *(string) --*

      The Python version being used to execute a Python shell job. Allowed values are 2 or 3.
    """


_ClientGetJobsResponseJobsConnectionsTypeDef = TypedDict(
    "_ClientGetJobsResponseJobsConnectionsTypeDef",
    {"Connections": List[str]},
    total=False,
)


class ClientGetJobsResponseJobsConnectionsTypeDef(
    _ClientGetJobsResponseJobsConnectionsTypeDef
):
    """
    Type definition for `ClientGetJobsResponseJobs` `Connections`

    The connections used for this job.

    - **Connections** *(list) --*

      A list of connections used by the job.

      - *(string) --*
    """


_ClientGetJobsResponseJobsExecutionPropertyTypeDef = TypedDict(
    "_ClientGetJobsResponseJobsExecutionPropertyTypeDef",
    {"MaxConcurrentRuns": int},
    total=False,
)


class ClientGetJobsResponseJobsExecutionPropertyTypeDef(
    _ClientGetJobsResponseJobsExecutionPropertyTypeDef
):
    """
    Type definition for `ClientGetJobsResponseJobs` `ExecutionProperty`

    An ``ExecutionProperty`` specifying the maximum number of concurrent runs allowed for
    this job.

    - **MaxConcurrentRuns** *(integer) --*

      The maximum number of concurrent runs allowed for the job. The default is 1. An error
      is returned when this threshold is reached. The maximum value you can specify is
      controlled by a service limit.
    """


_ClientGetJobsResponseJobsNotificationPropertyTypeDef = TypedDict(
    "_ClientGetJobsResponseJobsNotificationPropertyTypeDef",
    {"NotifyDelayAfter": int},
    total=False,
)


class ClientGetJobsResponseJobsNotificationPropertyTypeDef(
    _ClientGetJobsResponseJobsNotificationPropertyTypeDef
):
    """
    Type definition for `ClientGetJobsResponseJobs` `NotificationProperty`

    Specifies configuration properties of a job notification.

    - **NotifyDelayAfter** *(integer) --*

      After a job run starts, the number of minutes to wait before sending a job run delay
      notification.
    """


_ClientGetJobsResponseJobsTypeDef = TypedDict(
    "_ClientGetJobsResponseJobsTypeDef",
    {
        "Name": str,
        "Description": str,
        "LogUri": str,
        "Role": str,
        "CreatedOn": datetime,
        "LastModifiedOn": datetime,
        "ExecutionProperty": ClientGetJobsResponseJobsExecutionPropertyTypeDef,
        "Command": ClientGetJobsResponseJobsCommandTypeDef,
        "DefaultArguments": Dict[str, str],
        "Connections": ClientGetJobsResponseJobsConnectionsTypeDef,
        "MaxRetries": int,
        "AllocatedCapacity": int,
        "Timeout": int,
        "MaxCapacity": float,
        "WorkerType": str,
        "NumberOfWorkers": int,
        "SecurityConfiguration": str,
        "NotificationProperty": ClientGetJobsResponseJobsNotificationPropertyTypeDef,
        "GlueVersion": str,
    },
    total=False,
)


class ClientGetJobsResponseJobsTypeDef(_ClientGetJobsResponseJobsTypeDef):
    """
    Type definition for `ClientGetJobsResponse` `Jobs`

    Specifies a job definition.

    - **Name** *(string) --*

      The name you assign to this job definition.

    - **Description** *(string) --*

      A description of the job.

    - **LogUri** *(string) --*

      This field is reserved for future use.

    - **Role** *(string) --*

      The name or Amazon Resource Name (ARN) of the IAM role associated with this job.

    - **CreatedOn** *(datetime) --*

      The time and date that this job definition was created.

    - **LastModifiedOn** *(datetime) --*

      The last point in time when this job definition was modified.

    - **ExecutionProperty** *(dict) --*

      An ``ExecutionProperty`` specifying the maximum number of concurrent runs allowed for
      this job.

      - **MaxConcurrentRuns** *(integer) --*

        The maximum number of concurrent runs allowed for the job. The default is 1. An error
        is returned when this threshold is reached. The maximum value you can specify is
        controlled by a service limit.

    - **Command** *(dict) --*

      The ``JobCommand`` that executes this job.

      - **Name** *(string) --*

        The name of the job command. For an Apache Spark ETL job, this must be ``glueetl`` .
        For a Python shell job, it must be ``pythonshell`` .

      - **ScriptLocation** *(string) --*

        Specifies the Amazon Simple Storage Service (Amazon S3) path to a script that executes
        a job.

      - **PythonVersion** *(string) --*

        The Python version being used to execute a Python shell job. Allowed values are 2 or 3.

    - **DefaultArguments** *(dict) --*

      The default arguments for this job, specified as name-value pairs.

      You can specify arguments here that your own job-execution script consumes, as well as
      arguments that AWS Glue itself consumes.

      For information about how to specify and consume your own Job arguments, see the `Calling
      AWS Glue APIs in Python
      <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
      topic in the developer guide.

      For information about the key-value pairs that AWS Glue consumes to set up your job, see
      the `Special Parameters Used by AWS Glue
      <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
      topic in the developer guide.

      - *(string) --*

        - *(string) --*

    - **Connections** *(dict) --*

      The connections used for this job.

      - **Connections** *(list) --*

        A list of connections used by the job.

        - *(string) --*

    - **MaxRetries** *(integer) --*

      The maximum number of times to retry this job after a JobRun fails.

    - **AllocatedCapacity** *(integer) --*

      This field is deprecated. Use ``MaxCapacity`` instead.

      The number of AWS Glue data processing units (DPUs) allocated to runs of this job. You
      can allocate from 2 to 100 DPUs; the default is 10. A DPU is a relative measure of
      processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For
      more information, see the `AWS Glue pricing page
      <https://aws.amazon.com/glue/pricing/>`__ .

    - **Timeout** *(integer) --*

      The job timeout in minutes. This is the maximum time that a job run can consume resources
      before it is terminated and enters ``TIMEOUT`` status. The default is 2,880 minutes (48
      hours).

    - **MaxCapacity** *(float) --*

      The number of AWS Glue data processing units (DPUs) that can be allocated when this job
      runs. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute
      capacity and 16 GB of memory. For more information, see the `AWS Glue pricing page
      <https://aws.amazon.com/glue/pricing/>`__ .

      Do not set ``Max Capacity`` if using ``WorkerType`` and ``NumberOfWorkers`` .

      The value that can be allocated for ``MaxCapacity`` depends on whether you are running a
      Python shell job or an Apache Spark ETL job:

      * When you specify a Python shell job (``JobCommand.Name`` ="pythonshell"), you can
      allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.

      * When you specify an Apache Spark ETL job (``JobCommand.Name`` ="glueetl"), you can
      allocate from 2 to 100 DPUs. The default is 10 DPUs. This job type cannot have a
      fractional DPU allocation.

    - **WorkerType** *(string) --*

      The type of predefined worker that is allocated when a job runs. Accepts a value of
      Standard, G.1X, or G.2X.

      * For the ``Standard`` worker type, each worker provides 4 vCPU, 16 GB of memory and a
      50GB disk, and 2 executors per worker.

      * For the ``G.1X`` worker type, each worker maps to 1 DPU (4 vCPU, 16 GB of memory, 64 GB
      disk), and provides 1 executor per worker. We recommend this worker type for
      memory-intensive jobs.

      * For the ``G.2X`` worker type, each worker maps to 2 DPU (8 vCPU, 32 GB of memory, 128
      GB disk), and provides 1 executor per worker. We recommend this worker type for
      memory-intensive jobs.

    - **NumberOfWorkers** *(integer) --*

      The number of workers of a defined ``workerType`` that are allocated when a job runs.

      The maximum number of workers you can define are 299 for ``G.1X`` , and 149 for ``G.2X`` .

    - **SecurityConfiguration** *(string) --*

      The name of the ``SecurityConfiguration`` structure to be used with this job.

    - **NotificationProperty** *(dict) --*

      Specifies configuration properties of a job notification.

      - **NotifyDelayAfter** *(integer) --*

        After a job run starts, the number of minutes to wait before sending a job run delay
        notification.

    - **GlueVersion** *(string) --*

      Glue version determines the versions of Apache Spark and Python that AWS Glue supports.
      The Python version indicates the version supported for jobs of type Spark.

      For more information about the available AWS Glue versions and corresponding Spark and
      Python versions, see `Glue version
      <https://docs.aws.amazon.com/glue/latest/dg/add-job.html>`__ in the developer guide.

      Jobs that are created without specifying a Glue version default to Glue 0.9.
    """


_ClientGetJobsResponseTypeDef = TypedDict(
    "_ClientGetJobsResponseTypeDef",
    {"Jobs": List[ClientGetJobsResponseJobsTypeDef], "NextToken": str},
    total=False,
)


class ClientGetJobsResponseTypeDef(_ClientGetJobsResponseTypeDef):
    """
    Type definition for `ClientGetJobs` `Response`

    - **Jobs** *(list) --*

      A list of job definitions.

      - *(dict) --*

        Specifies a job definition.

        - **Name** *(string) --*

          The name you assign to this job definition.

        - **Description** *(string) --*

          A description of the job.

        - **LogUri** *(string) --*

          This field is reserved for future use.

        - **Role** *(string) --*

          The name or Amazon Resource Name (ARN) of the IAM role associated with this job.

        - **CreatedOn** *(datetime) --*

          The time and date that this job definition was created.

        - **LastModifiedOn** *(datetime) --*

          The last point in time when this job definition was modified.

        - **ExecutionProperty** *(dict) --*

          An ``ExecutionProperty`` specifying the maximum number of concurrent runs allowed for
          this job.

          - **MaxConcurrentRuns** *(integer) --*

            The maximum number of concurrent runs allowed for the job. The default is 1. An error
            is returned when this threshold is reached. The maximum value you can specify is
            controlled by a service limit.

        - **Command** *(dict) --*

          The ``JobCommand`` that executes this job.

          - **Name** *(string) --*

            The name of the job command. For an Apache Spark ETL job, this must be ``glueetl`` .
            For a Python shell job, it must be ``pythonshell`` .

          - **ScriptLocation** *(string) --*

            Specifies the Amazon Simple Storage Service (Amazon S3) path to a script that executes
            a job.

          - **PythonVersion** *(string) --*

            The Python version being used to execute a Python shell job. Allowed values are 2 or 3.

        - **DefaultArguments** *(dict) --*

          The default arguments for this job, specified as name-value pairs.

          You can specify arguments here that your own job-execution script consumes, as well as
          arguments that AWS Glue itself consumes.

          For information about how to specify and consume your own Job arguments, see the `Calling
          AWS Glue APIs in Python
          <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
          topic in the developer guide.

          For information about the key-value pairs that AWS Glue consumes to set up your job, see
          the `Special Parameters Used by AWS Glue
          <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
          topic in the developer guide.

          - *(string) --*

            - *(string) --*

        - **Connections** *(dict) --*

          The connections used for this job.

          - **Connections** *(list) --*

            A list of connections used by the job.

            - *(string) --*

        - **MaxRetries** *(integer) --*

          The maximum number of times to retry this job after a JobRun fails.

        - **AllocatedCapacity** *(integer) --*

          This field is deprecated. Use ``MaxCapacity`` instead.

          The number of AWS Glue data processing units (DPUs) allocated to runs of this job. You
          can allocate from 2 to 100 DPUs; the default is 10. A DPU is a relative measure of
          processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For
          more information, see the `AWS Glue pricing page
          <https://aws.amazon.com/glue/pricing/>`__ .

        - **Timeout** *(integer) --*

          The job timeout in minutes. This is the maximum time that a job run can consume resources
          before it is terminated and enters ``TIMEOUT`` status. The default is 2,880 minutes (48
          hours).

        - **MaxCapacity** *(float) --*

          The number of AWS Glue data processing units (DPUs) that can be allocated when this job
          runs. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute
          capacity and 16 GB of memory. For more information, see the `AWS Glue pricing page
          <https://aws.amazon.com/glue/pricing/>`__ .

          Do not set ``Max Capacity`` if using ``WorkerType`` and ``NumberOfWorkers`` .

          The value that can be allocated for ``MaxCapacity`` depends on whether you are running a
          Python shell job or an Apache Spark ETL job:

          * When you specify a Python shell job (``JobCommand.Name`` ="pythonshell"), you can
          allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.

          * When you specify an Apache Spark ETL job (``JobCommand.Name`` ="glueetl"), you can
          allocate from 2 to 100 DPUs. The default is 10 DPUs. This job type cannot have a
          fractional DPU allocation.

        - **WorkerType** *(string) --*

          The type of predefined worker that is allocated when a job runs. Accepts a value of
          Standard, G.1X, or G.2X.

          * For the ``Standard`` worker type, each worker provides 4 vCPU, 16 GB of memory and a
          50GB disk, and 2 executors per worker.

          * For the ``G.1X`` worker type, each worker maps to 1 DPU (4 vCPU, 16 GB of memory, 64 GB
          disk), and provides 1 executor per worker. We recommend this worker type for
          memory-intensive jobs.

          * For the ``G.2X`` worker type, each worker maps to 2 DPU (8 vCPU, 32 GB of memory, 128
          GB disk), and provides 1 executor per worker. We recommend this worker type for
          memory-intensive jobs.

        - **NumberOfWorkers** *(integer) --*

          The number of workers of a defined ``workerType`` that are allocated when a job runs.

          The maximum number of workers you can define are 299 for ``G.1X`` , and 149 for ``G.2X`` .

        - **SecurityConfiguration** *(string) --*

          The name of the ``SecurityConfiguration`` structure to be used with this job.

        - **NotificationProperty** *(dict) --*

          Specifies configuration properties of a job notification.

          - **NotifyDelayAfter** *(integer) --*

            After a job run starts, the number of minutes to wait before sending a job run delay
            notification.

        - **GlueVersion** *(string) --*

          Glue version determines the versions of Apache Spark and Python that AWS Glue supports.
          The Python version indicates the version supported for jobs of type Spark.

          For more information about the available AWS Glue versions and corresponding Spark and
          Python versions, see `Glue version
          <https://docs.aws.amazon.com/glue/latest/dg/add-job.html>`__ in the developer guide.

          Jobs that are created without specifying a Glue version default to Glue 0.9.

    - **NextToken** *(string) --*

      A continuation token, if not all job definitions have yet been returned.
    """


_RequiredClientGetMappingLocationDynamoDBTypeDef = TypedDict(
    "_RequiredClientGetMappingLocationDynamoDBTypeDef", {"Name": str, "Value": str}
)
_OptionalClientGetMappingLocationDynamoDBTypeDef = TypedDict(
    "_OptionalClientGetMappingLocationDynamoDBTypeDef", {"Param": bool}, total=False
)


class ClientGetMappingLocationDynamoDBTypeDef(
    _RequiredClientGetMappingLocationDynamoDBTypeDef,
    _OptionalClientGetMappingLocationDynamoDBTypeDef,
):
    """
    Type definition for `ClientGetMappingLocation` `DynamoDB`

    An argument or property of a node.

    - **Name** *(string) --* **[REQUIRED]**

      The name of the argument or property.

    - **Value** *(string) --* **[REQUIRED]**

      The value of the argument or property.

    - **Param** *(boolean) --*

      True if the value is used as a parameter.
    """


_RequiredClientGetMappingLocationJdbcTypeDef = TypedDict(
    "_RequiredClientGetMappingLocationJdbcTypeDef", {"Name": str, "Value": str}
)
_OptionalClientGetMappingLocationJdbcTypeDef = TypedDict(
    "_OptionalClientGetMappingLocationJdbcTypeDef", {"Param": bool}, total=False
)


class ClientGetMappingLocationJdbcTypeDef(
    _RequiredClientGetMappingLocationJdbcTypeDef,
    _OptionalClientGetMappingLocationJdbcTypeDef,
):
    """
    Type definition for `ClientGetMappingLocation` `Jdbc`

    An argument or property of a node.

    - **Name** *(string) --* **[REQUIRED]**

      The name of the argument or property.

    - **Value** *(string) --* **[REQUIRED]**

      The value of the argument or property.

    - **Param** *(boolean) --*

      True if the value is used as a parameter.
    """


_RequiredClientGetMappingLocationS3TypeDef = TypedDict(
    "_RequiredClientGetMappingLocationS3TypeDef", {"Name": str, "Value": str}
)
_OptionalClientGetMappingLocationS3TypeDef = TypedDict(
    "_OptionalClientGetMappingLocationS3TypeDef", {"Param": bool}, total=False
)


class ClientGetMappingLocationS3TypeDef(
    _RequiredClientGetMappingLocationS3TypeDef,
    _OptionalClientGetMappingLocationS3TypeDef,
):
    """
    Type definition for `ClientGetMappingLocation` `S3`

    An argument or property of a node.

    - **Name** *(string) --* **[REQUIRED]**

      The name of the argument or property.

    - **Value** *(string) --* **[REQUIRED]**

      The value of the argument or property.

    - **Param** *(boolean) --*

      True if the value is used as a parameter.
    """


_ClientGetMappingLocationTypeDef = TypedDict(
    "_ClientGetMappingLocationTypeDef",
    {
        "Jdbc": List[ClientGetMappingLocationJdbcTypeDef],
        "S3": List[ClientGetMappingLocationS3TypeDef],
        "DynamoDB": List[ClientGetMappingLocationDynamoDBTypeDef],
    },
    total=False,
)


class ClientGetMappingLocationTypeDef(_ClientGetMappingLocationTypeDef):
    """
    Type definition for `ClientGetMapping` `Location`

    Parameters for the mapping.

    - **Jdbc** *(list) --*

      A JDBC location.

      - *(dict) --*

        An argument or property of a node.

        - **Name** *(string) --* **[REQUIRED]**

          The name of the argument or property.

        - **Value** *(string) --* **[REQUIRED]**

          The value of the argument or property.

        - **Param** *(boolean) --*

          True if the value is used as a parameter.

    - **S3** *(list) --*

      An Amazon Simple Storage Service (Amazon S3) location.

      - *(dict) --*

        An argument or property of a node.

        - **Name** *(string) --* **[REQUIRED]**

          The name of the argument or property.

        - **Value** *(string) --* **[REQUIRED]**

          The value of the argument or property.

        - **Param** *(boolean) --*

          True if the value is used as a parameter.

    - **DynamoDB** *(list) --*

      An Amazon DynamoDB table location.

      - *(dict) --*

        An argument or property of a node.

        - **Name** *(string) --* **[REQUIRED]**

          The name of the argument or property.

        - **Value** *(string) --* **[REQUIRED]**

          The value of the argument or property.

        - **Param** *(boolean) --*

          True if the value is used as a parameter.
    """


_ClientGetMappingResponseMappingTypeDef = TypedDict(
    "_ClientGetMappingResponseMappingTypeDef",
    {
        "SourceTable": str,
        "SourcePath": str,
        "SourceType": str,
        "TargetTable": str,
        "TargetPath": str,
        "TargetType": str,
    },
    total=False,
)


class ClientGetMappingResponseMappingTypeDef(_ClientGetMappingResponseMappingTypeDef):
    """
    Type definition for `ClientGetMappingResponse` `Mapping`

    Defines a mapping.

    - **SourceTable** *(string) --*

      The name of the source table.

    - **SourcePath** *(string) --*

      The source path.

    - **SourceType** *(string) --*

      The source type.

    - **TargetTable** *(string) --*

      The target table.

    - **TargetPath** *(string) --*

      The target path.

    - **TargetType** *(string) --*

      The target type.
    """


_ClientGetMappingResponseTypeDef = TypedDict(
    "_ClientGetMappingResponseTypeDef",
    {"Mapping": List[ClientGetMappingResponseMappingTypeDef]},
    total=False,
)


class ClientGetMappingResponseTypeDef(_ClientGetMappingResponseTypeDef):
    """
    Type definition for `ClientGetMapping` `Response`

    - **Mapping** *(list) --*

      A list of mappings to the specified targets.

      - *(dict) --*

        Defines a mapping.

        - **SourceTable** *(string) --*

          The name of the source table.

        - **SourcePath** *(string) --*

          The source path.

        - **SourceType** *(string) --*

          The source type.

        - **TargetTable** *(string) --*

          The target table.

        - **TargetPath** *(string) --*

          The target path.

        - **TargetType** *(string) --*

          The target type.
    """


_ClientGetMappingSinksTypeDef = TypedDict(
    "_ClientGetMappingSinksTypeDef", {"DatabaseName": str, "TableName": str}
)


class ClientGetMappingSinksTypeDef(_ClientGetMappingSinksTypeDef):
    """
    Type definition for `ClientGetMapping` `Sinks`

    Specifies a table definition in the AWS Glue Data Catalog.

    - **DatabaseName** *(string) --* **[REQUIRED]**

      The database in which the table metadata resides.

    - **TableName** *(string) --* **[REQUIRED]**

      The name of the table in question.
    """


_ClientGetMappingSourceTypeDef = TypedDict(
    "_ClientGetMappingSourceTypeDef", {"DatabaseName": str, "TableName": str}
)


class ClientGetMappingSourceTypeDef(_ClientGetMappingSourceTypeDef):
    """
    Type definition for `ClientGetMapping` `Source`

    Specifies the source table.

    - **DatabaseName** *(string) --* **[REQUIRED]**

      The database in which the table metadata resides.

    - **TableName** *(string) --* **[REQUIRED]**

      The name of the table in question.
    """


_ClientGetMlTaskRunResponsePropertiesExportLabelsTaskRunPropertiesTypeDef = TypedDict(
    "_ClientGetMlTaskRunResponsePropertiesExportLabelsTaskRunPropertiesTypeDef",
    {"OutputS3Path": str},
    total=False,
)


class ClientGetMlTaskRunResponsePropertiesExportLabelsTaskRunPropertiesTypeDef(
    _ClientGetMlTaskRunResponsePropertiesExportLabelsTaskRunPropertiesTypeDef
):
    """
    Type definition for `ClientGetMlTaskRunResponseProperties` `ExportLabelsTaskRunProperties`

    The configuration properties for an exporting labels task run.

    - **OutputS3Path** *(string) --*

      The Amazon Simple Storage Service (Amazon S3) path where you will export the labels.
    """


_ClientGetMlTaskRunResponsePropertiesFindMatchesTaskRunPropertiesTypeDef = TypedDict(
    "_ClientGetMlTaskRunResponsePropertiesFindMatchesTaskRunPropertiesTypeDef",
    {"JobId": str, "JobName": str, "JobRunId": str},
    total=False,
)


class ClientGetMlTaskRunResponsePropertiesFindMatchesTaskRunPropertiesTypeDef(
    _ClientGetMlTaskRunResponsePropertiesFindMatchesTaskRunPropertiesTypeDef
):
    """
    Type definition for `ClientGetMlTaskRunResponseProperties` `FindMatchesTaskRunProperties`

    The configuration properties for a find matches task run.

    - **JobId** *(string) --*

      The job ID for the Find Matches task run.

    - **JobName** *(string) --*

      The name assigned to the job for the Find Matches task run.

    - **JobRunId** *(string) --*

      The job run ID for the Find Matches task run.
    """


_ClientGetMlTaskRunResponsePropertiesImportLabelsTaskRunPropertiesTypeDef = TypedDict(
    "_ClientGetMlTaskRunResponsePropertiesImportLabelsTaskRunPropertiesTypeDef",
    {"InputS3Path": str, "Replace": bool},
    total=False,
)


class ClientGetMlTaskRunResponsePropertiesImportLabelsTaskRunPropertiesTypeDef(
    _ClientGetMlTaskRunResponsePropertiesImportLabelsTaskRunPropertiesTypeDef
):
    """
    Type definition for `ClientGetMlTaskRunResponseProperties` `ImportLabelsTaskRunProperties`

    The configuration properties for an importing labels task run.

    - **InputS3Path** *(string) --*

      The Amazon Simple Storage Service (Amazon S3) path from where you will import the labels.

    - **Replace** *(boolean) --*

      Indicates whether to overwrite your existing labels.
    """


_ClientGetMlTaskRunResponsePropertiesLabelingSetGenerationTaskRunPropertiesTypeDef = TypedDict(
    "_ClientGetMlTaskRunResponsePropertiesLabelingSetGenerationTaskRunPropertiesTypeDef",
    {"OutputS3Path": str},
    total=False,
)


class ClientGetMlTaskRunResponsePropertiesLabelingSetGenerationTaskRunPropertiesTypeDef(
    _ClientGetMlTaskRunResponsePropertiesLabelingSetGenerationTaskRunPropertiesTypeDef
):
    """
    Type definition for `ClientGetMlTaskRunResponseProperties` `LabelingSetGenerationTaskRunProperties`

    The configuration properties for a labeling set generation task run.

    - **OutputS3Path** *(string) --*

      The Amazon Simple Storage Service (Amazon S3) path where you will generate the labeling
      set.
    """


_ClientGetMlTaskRunResponsePropertiesTypeDef = TypedDict(
    "_ClientGetMlTaskRunResponsePropertiesTypeDef",
    {
        "TaskType": str,
        "ImportLabelsTaskRunProperties": ClientGetMlTaskRunResponsePropertiesImportLabelsTaskRunPropertiesTypeDef,
        "ExportLabelsTaskRunProperties": ClientGetMlTaskRunResponsePropertiesExportLabelsTaskRunPropertiesTypeDef,
        "LabelingSetGenerationTaskRunProperties": ClientGetMlTaskRunResponsePropertiesLabelingSetGenerationTaskRunPropertiesTypeDef,
        "FindMatchesTaskRunProperties": ClientGetMlTaskRunResponsePropertiesFindMatchesTaskRunPropertiesTypeDef,
    },
    total=False,
)


class ClientGetMlTaskRunResponsePropertiesTypeDef(
    _ClientGetMlTaskRunResponsePropertiesTypeDef
):
    """
    Type definition for `ClientGetMlTaskRunResponse` `Properties`

    The list of properties that are associated with the task run.

    - **TaskType** *(string) --*

      The type of task run.

    - **ImportLabelsTaskRunProperties** *(dict) --*

      The configuration properties for an importing labels task run.

      - **InputS3Path** *(string) --*

        The Amazon Simple Storage Service (Amazon S3) path from where you will import the labels.

      - **Replace** *(boolean) --*

        Indicates whether to overwrite your existing labels.

    - **ExportLabelsTaskRunProperties** *(dict) --*

      The configuration properties for an exporting labels task run.

      - **OutputS3Path** *(string) --*

        The Amazon Simple Storage Service (Amazon S3) path where you will export the labels.

    - **LabelingSetGenerationTaskRunProperties** *(dict) --*

      The configuration properties for a labeling set generation task run.

      - **OutputS3Path** *(string) --*

        The Amazon Simple Storage Service (Amazon S3) path where you will generate the labeling
        set.

    - **FindMatchesTaskRunProperties** *(dict) --*

      The configuration properties for a find matches task run.

      - **JobId** *(string) --*

        The job ID for the Find Matches task run.

      - **JobName** *(string) --*

        The name assigned to the job for the Find Matches task run.

      - **JobRunId** *(string) --*

        The job run ID for the Find Matches task run.
    """


_ClientGetMlTaskRunResponseTypeDef = TypedDict(
    "_ClientGetMlTaskRunResponseTypeDef",
    {
        "TransformId": str,
        "TaskRunId": str,
        "Status": str,
        "LogGroupName": str,
        "Properties": ClientGetMlTaskRunResponsePropertiesTypeDef,
        "ErrorString": str,
        "StartedOn": datetime,
        "LastModifiedOn": datetime,
        "CompletedOn": datetime,
        "ExecutionTime": int,
    },
    total=False,
)


class ClientGetMlTaskRunResponseTypeDef(_ClientGetMlTaskRunResponseTypeDef):
    """
    Type definition for `ClientGetMlTaskRun` `Response`

    - **TransformId** *(string) --*

      The unique identifier of the task run.

    - **TaskRunId** *(string) --*

      The unique run identifier associated with this run.

    - **Status** *(string) --*

      The status for this task run.

    - **LogGroupName** *(string) --*

      The names of the log groups that are associated with the task run.

    - **Properties** *(dict) --*

      The list of properties that are associated with the task run.

      - **TaskType** *(string) --*

        The type of task run.

      - **ImportLabelsTaskRunProperties** *(dict) --*

        The configuration properties for an importing labels task run.

        - **InputS3Path** *(string) --*

          The Amazon Simple Storage Service (Amazon S3) path from where you will import the labels.

        - **Replace** *(boolean) --*

          Indicates whether to overwrite your existing labels.

      - **ExportLabelsTaskRunProperties** *(dict) --*

        The configuration properties for an exporting labels task run.

        - **OutputS3Path** *(string) --*

          The Amazon Simple Storage Service (Amazon S3) path where you will export the labels.

      - **LabelingSetGenerationTaskRunProperties** *(dict) --*

        The configuration properties for a labeling set generation task run.

        - **OutputS3Path** *(string) --*

          The Amazon Simple Storage Service (Amazon S3) path where you will generate the labeling
          set.

      - **FindMatchesTaskRunProperties** *(dict) --*

        The configuration properties for a find matches task run.

        - **JobId** *(string) --*

          The job ID for the Find Matches task run.

        - **JobName** *(string) --*

          The name assigned to the job for the Find Matches task run.

        - **JobRunId** *(string) --*

          The job run ID for the Find Matches task run.

    - **ErrorString** *(string) --*

      The error strings that are associated with the task run.

    - **StartedOn** *(datetime) --*

      The date and time when this task run started.

    - **LastModifiedOn** *(datetime) --*

      The date and time when this task run was last modified.

    - **CompletedOn** *(datetime) --*

      The date and time when this task run was completed.

    - **ExecutionTime** *(integer) --*

      The amount of time (in seconds) that the task run consumed resources.
    """


_ClientGetMlTaskRunsFilterTypeDef = TypedDict(
    "_ClientGetMlTaskRunsFilterTypeDef",
    {
        "TaskRunType": str,
        "Status": str,
        "StartedBefore": datetime,
        "StartedAfter": datetime,
    },
    total=False,
)


class ClientGetMlTaskRunsFilterTypeDef(_ClientGetMlTaskRunsFilterTypeDef):
    """
    Type definition for `ClientGetMlTaskRuns` `Filter`

    The filter criteria, in the ``TaskRunFilterCriteria`` structure, for the task run.

    - **TaskRunType** *(string) --*

      The type of task run.

    - **Status** *(string) --*

      The current status of the task run.

    - **StartedBefore** *(datetime) --*

      Filter on task runs started before this date.

    - **StartedAfter** *(datetime) --*

      Filter on task runs started after this date.
    """


_ClientGetMlTaskRunsResponseTaskRunsPropertiesExportLabelsTaskRunPropertiesTypeDef = TypedDict(
    "_ClientGetMlTaskRunsResponseTaskRunsPropertiesExportLabelsTaskRunPropertiesTypeDef",
    {"OutputS3Path": str},
    total=False,
)


class ClientGetMlTaskRunsResponseTaskRunsPropertiesExportLabelsTaskRunPropertiesTypeDef(
    _ClientGetMlTaskRunsResponseTaskRunsPropertiesExportLabelsTaskRunPropertiesTypeDef
):
    """
    Type definition for `ClientGetMlTaskRunsResponseTaskRunsProperties` `ExportLabelsTaskRunProperties`

    The configuration properties for an exporting labels task run.

    - **OutputS3Path** *(string) --*

      The Amazon Simple Storage Service (Amazon S3) path where you will export the labels.
    """


_ClientGetMlTaskRunsResponseTaskRunsPropertiesFindMatchesTaskRunPropertiesTypeDef = TypedDict(
    "_ClientGetMlTaskRunsResponseTaskRunsPropertiesFindMatchesTaskRunPropertiesTypeDef",
    {"JobId": str, "JobName": str, "JobRunId": str},
    total=False,
)


class ClientGetMlTaskRunsResponseTaskRunsPropertiesFindMatchesTaskRunPropertiesTypeDef(
    _ClientGetMlTaskRunsResponseTaskRunsPropertiesFindMatchesTaskRunPropertiesTypeDef
):
    """
    Type definition for `ClientGetMlTaskRunsResponseTaskRunsProperties` `FindMatchesTaskRunProperties`

    The configuration properties for a find matches task run.

    - **JobId** *(string) --*

      The job ID for the Find Matches task run.

    - **JobName** *(string) --*

      The name assigned to the job for the Find Matches task run.

    - **JobRunId** *(string) --*

      The job run ID for the Find Matches task run.
    """


_ClientGetMlTaskRunsResponseTaskRunsPropertiesImportLabelsTaskRunPropertiesTypeDef = TypedDict(
    "_ClientGetMlTaskRunsResponseTaskRunsPropertiesImportLabelsTaskRunPropertiesTypeDef",
    {"InputS3Path": str, "Replace": bool},
    total=False,
)


class ClientGetMlTaskRunsResponseTaskRunsPropertiesImportLabelsTaskRunPropertiesTypeDef(
    _ClientGetMlTaskRunsResponseTaskRunsPropertiesImportLabelsTaskRunPropertiesTypeDef
):
    """
    Type definition for `ClientGetMlTaskRunsResponseTaskRunsProperties` `ImportLabelsTaskRunProperties`

    The configuration properties for an importing labels task run.

    - **InputS3Path** *(string) --*

      The Amazon Simple Storage Service (Amazon S3) path from where you will import the
      labels.

    - **Replace** *(boolean) --*

      Indicates whether to overwrite your existing labels.
    """


_ClientGetMlTaskRunsResponseTaskRunsPropertiesLabelingSetGenerationTaskRunPropertiesTypeDef = TypedDict(
    "_ClientGetMlTaskRunsResponseTaskRunsPropertiesLabelingSetGenerationTaskRunPropertiesTypeDef",
    {"OutputS3Path": str},
    total=False,
)


class ClientGetMlTaskRunsResponseTaskRunsPropertiesLabelingSetGenerationTaskRunPropertiesTypeDef(
    _ClientGetMlTaskRunsResponseTaskRunsPropertiesLabelingSetGenerationTaskRunPropertiesTypeDef
):
    """
    Type definition for `ClientGetMlTaskRunsResponseTaskRunsProperties` `LabelingSetGenerationTaskRunProperties`

    The configuration properties for a labeling set generation task run.

    - **OutputS3Path** *(string) --*

      The Amazon Simple Storage Service (Amazon S3) path where you will generate the
      labeling set.
    """


_ClientGetMlTaskRunsResponseTaskRunsPropertiesTypeDef = TypedDict(
    "_ClientGetMlTaskRunsResponseTaskRunsPropertiesTypeDef",
    {
        "TaskType": str,
        "ImportLabelsTaskRunProperties": ClientGetMlTaskRunsResponseTaskRunsPropertiesImportLabelsTaskRunPropertiesTypeDef,
        "ExportLabelsTaskRunProperties": ClientGetMlTaskRunsResponseTaskRunsPropertiesExportLabelsTaskRunPropertiesTypeDef,
        "LabelingSetGenerationTaskRunProperties": ClientGetMlTaskRunsResponseTaskRunsPropertiesLabelingSetGenerationTaskRunPropertiesTypeDef,
        "FindMatchesTaskRunProperties": ClientGetMlTaskRunsResponseTaskRunsPropertiesFindMatchesTaskRunPropertiesTypeDef,
    },
    total=False,
)


class ClientGetMlTaskRunsResponseTaskRunsPropertiesTypeDef(
    _ClientGetMlTaskRunsResponseTaskRunsPropertiesTypeDef
):
    """
    Type definition for `ClientGetMlTaskRunsResponseTaskRuns` `Properties`

    Specifies configuration properties associated with this task run.

    - **TaskType** *(string) --*

      The type of task run.

    - **ImportLabelsTaskRunProperties** *(dict) --*

      The configuration properties for an importing labels task run.

      - **InputS3Path** *(string) --*

        The Amazon Simple Storage Service (Amazon S3) path from where you will import the
        labels.

      - **Replace** *(boolean) --*

        Indicates whether to overwrite your existing labels.

    - **ExportLabelsTaskRunProperties** *(dict) --*

      The configuration properties for an exporting labels task run.

      - **OutputS3Path** *(string) --*

        The Amazon Simple Storage Service (Amazon S3) path where you will export the labels.

    - **LabelingSetGenerationTaskRunProperties** *(dict) --*

      The configuration properties for a labeling set generation task run.

      - **OutputS3Path** *(string) --*

        The Amazon Simple Storage Service (Amazon S3) path where you will generate the
        labeling set.

    - **FindMatchesTaskRunProperties** *(dict) --*

      The configuration properties for a find matches task run.

      - **JobId** *(string) --*

        The job ID for the Find Matches task run.

      - **JobName** *(string) --*

        The name assigned to the job for the Find Matches task run.

      - **JobRunId** *(string) --*

        The job run ID for the Find Matches task run.
    """


_ClientGetMlTaskRunsResponseTaskRunsTypeDef = TypedDict(
    "_ClientGetMlTaskRunsResponseTaskRunsTypeDef",
    {
        "TransformId": str,
        "TaskRunId": str,
        "Status": str,
        "LogGroupName": str,
        "Properties": ClientGetMlTaskRunsResponseTaskRunsPropertiesTypeDef,
        "ErrorString": str,
        "StartedOn": datetime,
        "LastModifiedOn": datetime,
        "CompletedOn": datetime,
        "ExecutionTime": int,
    },
    total=False,
)


class ClientGetMlTaskRunsResponseTaskRunsTypeDef(
    _ClientGetMlTaskRunsResponseTaskRunsTypeDef
):
    """
    Type definition for `ClientGetMlTaskRunsResponse` `TaskRuns`

    The sampling parameters that are associated with the machine learning transform.

    - **TransformId** *(string) --*

      The unique identifier for the transform.

    - **TaskRunId** *(string) --*

      The unique identifier for this task run.

    - **Status** *(string) --*

      The current status of the requested task run.

    - **LogGroupName** *(string) --*

      The names of the log group for secure logging, associated with this task run.

    - **Properties** *(dict) --*

      Specifies configuration properties associated with this task run.

      - **TaskType** *(string) --*

        The type of task run.

      - **ImportLabelsTaskRunProperties** *(dict) --*

        The configuration properties for an importing labels task run.

        - **InputS3Path** *(string) --*

          The Amazon Simple Storage Service (Amazon S3) path from where you will import the
          labels.

        - **Replace** *(boolean) --*

          Indicates whether to overwrite your existing labels.

      - **ExportLabelsTaskRunProperties** *(dict) --*

        The configuration properties for an exporting labels task run.

        - **OutputS3Path** *(string) --*

          The Amazon Simple Storage Service (Amazon S3) path where you will export the labels.

      - **LabelingSetGenerationTaskRunProperties** *(dict) --*

        The configuration properties for a labeling set generation task run.

        - **OutputS3Path** *(string) --*

          The Amazon Simple Storage Service (Amazon S3) path where you will generate the
          labeling set.

      - **FindMatchesTaskRunProperties** *(dict) --*

        The configuration properties for a find matches task run.

        - **JobId** *(string) --*

          The job ID for the Find Matches task run.

        - **JobName** *(string) --*

          The name assigned to the job for the Find Matches task run.

        - **JobRunId** *(string) --*

          The job run ID for the Find Matches task run.

    - **ErrorString** *(string) --*

      The list of error strings associated with this task run.

    - **StartedOn** *(datetime) --*

      The date and time that this task run started.

    - **LastModifiedOn** *(datetime) --*

      The last point in time that the requested task run was updated.

    - **CompletedOn** *(datetime) --*

      The last point in time that the requested task run was completed.

    - **ExecutionTime** *(integer) --*

      The amount of time (in seconds) that the task run consumed resources.
    """


_ClientGetMlTaskRunsResponseTypeDef = TypedDict(
    "_ClientGetMlTaskRunsResponseTypeDef",
    {"TaskRuns": List[ClientGetMlTaskRunsResponseTaskRunsTypeDef], "NextToken": str},
    total=False,
)


class ClientGetMlTaskRunsResponseTypeDef(_ClientGetMlTaskRunsResponseTypeDef):
    """
    Type definition for `ClientGetMlTaskRuns` `Response`

    - **TaskRuns** *(list) --*

      A list of task runs that are associated with the transform.

      - *(dict) --*

        The sampling parameters that are associated with the machine learning transform.

        - **TransformId** *(string) --*

          The unique identifier for the transform.

        - **TaskRunId** *(string) --*

          The unique identifier for this task run.

        - **Status** *(string) --*

          The current status of the requested task run.

        - **LogGroupName** *(string) --*

          The names of the log group for secure logging, associated with this task run.

        - **Properties** *(dict) --*

          Specifies configuration properties associated with this task run.

          - **TaskType** *(string) --*

            The type of task run.

          - **ImportLabelsTaskRunProperties** *(dict) --*

            The configuration properties for an importing labels task run.

            - **InputS3Path** *(string) --*

              The Amazon Simple Storage Service (Amazon S3) path from where you will import the
              labels.

            - **Replace** *(boolean) --*

              Indicates whether to overwrite your existing labels.

          - **ExportLabelsTaskRunProperties** *(dict) --*

            The configuration properties for an exporting labels task run.

            - **OutputS3Path** *(string) --*

              The Amazon Simple Storage Service (Amazon S3) path where you will export the labels.

          - **LabelingSetGenerationTaskRunProperties** *(dict) --*

            The configuration properties for a labeling set generation task run.

            - **OutputS3Path** *(string) --*

              The Amazon Simple Storage Service (Amazon S3) path where you will generate the
              labeling set.

          - **FindMatchesTaskRunProperties** *(dict) --*

            The configuration properties for a find matches task run.

            - **JobId** *(string) --*

              The job ID for the Find Matches task run.

            - **JobName** *(string) --*

              The name assigned to the job for the Find Matches task run.

            - **JobRunId** *(string) --*

              The job run ID for the Find Matches task run.

        - **ErrorString** *(string) --*

          The list of error strings associated with this task run.

        - **StartedOn** *(datetime) --*

          The date and time that this task run started.

        - **LastModifiedOn** *(datetime) --*

          The last point in time that the requested task run was updated.

        - **CompletedOn** *(datetime) --*

          The last point in time that the requested task run was completed.

        - **ExecutionTime** *(integer) --*

          The amount of time (in seconds) that the task run consumed resources.

    - **NextToken** *(string) --*

      A pagination token, if more results are available.
    """


_ClientGetMlTaskRunsSortTypeDef = TypedDict(
    "_ClientGetMlTaskRunsSortTypeDef", {"Column": str, "SortDirection": str}
)


class ClientGetMlTaskRunsSortTypeDef(_ClientGetMlTaskRunsSortTypeDef):
    """
    Type definition for `ClientGetMlTaskRuns` `Sort`

    The sorting criteria, in the ``TaskRunSortCriteria`` structure, for the task run.

    - **Column** *(string) --* **[REQUIRED]**

      The column to be used to sort the list of task runs for the machine learning transform.

    - **SortDirection** *(string) --* **[REQUIRED]**

      The sort direction to be used to sort the list of task runs for the machine learning transform.
    """


_ClientGetMlTransformResponseEvaluationMetricsFindMatchesMetricsConfusionMatrixTypeDef = TypedDict(
    "_ClientGetMlTransformResponseEvaluationMetricsFindMatchesMetricsConfusionMatrixTypeDef",
    {
        "NumTruePositives": int,
        "NumFalsePositives": int,
        "NumTrueNegatives": int,
        "NumFalseNegatives": int,
    },
    total=False,
)


class ClientGetMlTransformResponseEvaluationMetricsFindMatchesMetricsConfusionMatrixTypeDef(
    _ClientGetMlTransformResponseEvaluationMetricsFindMatchesMetricsConfusionMatrixTypeDef
):
    """
    Type definition for `ClientGetMlTransformResponseEvaluationMetricsFindMatchesMetrics` `ConfusionMatrix`

    The confusion matrix shows you what your transform is predicting accurately and what
    types of errors it is making.

    For more information, see `Confusion matrix
    <https://en.wikipedia.org/wiki/Confusion_matrix>`__ in Wikipedia.

    - **NumTruePositives** *(integer) --*

      The number of matches in the data that the transform correctly found, in the confusion
      matrix for your transform.

    - **NumFalsePositives** *(integer) --*

      The number of nonmatches in the data that the transform incorrectly classified as a
      match, in the confusion matrix for your transform.

    - **NumTrueNegatives** *(integer) --*

      The number of nonmatches in the data that the transform correctly rejected, in the
      confusion matrix for your transform.

    - **NumFalseNegatives** *(integer) --*

      The number of matches in the data that the transform didn't find, in the confusion
      matrix for your transform.
    """


_ClientGetMlTransformResponseEvaluationMetricsFindMatchesMetricsTypeDef = TypedDict(
    "_ClientGetMlTransformResponseEvaluationMetricsFindMatchesMetricsTypeDef",
    {
        "AreaUnderPRCurve": float,
        "Precision": float,
        "Recall": float,
        "F1": float,
        "ConfusionMatrix": ClientGetMlTransformResponseEvaluationMetricsFindMatchesMetricsConfusionMatrixTypeDef,
    },
    total=False,
)


class ClientGetMlTransformResponseEvaluationMetricsFindMatchesMetricsTypeDef(
    _ClientGetMlTransformResponseEvaluationMetricsFindMatchesMetricsTypeDef
):
    """
    Type definition for `ClientGetMlTransformResponseEvaluationMetrics` `FindMatchesMetrics`

    The evaluation metrics for the find matches algorithm.

    - **AreaUnderPRCurve** *(float) --*

      The area under the precision/recall curve (AUPRC) is a single number measuring the
      overall quality of the transform, that is independent of the choice made for precision
      vs. recall. Higher values indicate that you have a more attractive precision vs. recall
      tradeoff.

      For more information, see `Precision and recall
      <https://en.wikipedia.org/wiki/Precision_and_recall>`__ in Wikipedia.

    - **Precision** *(float) --*

      The precision metric indicates when often your transform is correct when it predicts a
      match. Specifically, it measures how well the transform finds true positives from the
      total true positives possible.

      For more information, see `Precision and recall
      <https://en.wikipedia.org/wiki/Precision_and_recall>`__ in Wikipedia.

    - **Recall** *(float) --*

      The recall metric indicates that for an actual match, how often your transform predicts
      the match. Specifically, it measures how well the transform finds true positives from the
      total records in the source data.

      For more information, see `Precision and recall
      <https://en.wikipedia.org/wiki/Precision_and_recall>`__ in Wikipedia.

    - **F1** *(float) --*

      The maximum F1 metric indicates the transform's accuracy between 0 and 1, where 1 is the
      best accuracy.

      For more information, see `F1 score <https://en.wikipedia.org/wiki/F1_score>`__ in
      Wikipedia.

    - **ConfusionMatrix** *(dict) --*

      The confusion matrix shows you what your transform is predicting accurately and what
      types of errors it is making.

      For more information, see `Confusion matrix
      <https://en.wikipedia.org/wiki/Confusion_matrix>`__ in Wikipedia.

      - **NumTruePositives** *(integer) --*

        The number of matches in the data that the transform correctly found, in the confusion
        matrix for your transform.

      - **NumFalsePositives** *(integer) --*

        The number of nonmatches in the data that the transform incorrectly classified as a
        match, in the confusion matrix for your transform.

      - **NumTrueNegatives** *(integer) --*

        The number of nonmatches in the data that the transform correctly rejected, in the
        confusion matrix for your transform.

      - **NumFalseNegatives** *(integer) --*

        The number of matches in the data that the transform didn't find, in the confusion
        matrix for your transform.
    """


_ClientGetMlTransformResponseEvaluationMetricsTypeDef = TypedDict(
    "_ClientGetMlTransformResponseEvaluationMetricsTypeDef",
    {
        "TransformType": str,
        "FindMatchesMetrics": ClientGetMlTransformResponseEvaluationMetricsFindMatchesMetricsTypeDef,
    },
    total=False,
)


class ClientGetMlTransformResponseEvaluationMetricsTypeDef(
    _ClientGetMlTransformResponseEvaluationMetricsTypeDef
):
    """
    Type definition for `ClientGetMlTransformResponse` `EvaluationMetrics`

    The latest evaluation metrics.

    - **TransformType** *(string) --*

      The type of machine learning transform.

    - **FindMatchesMetrics** *(dict) --*

      The evaluation metrics for the find matches algorithm.

      - **AreaUnderPRCurve** *(float) --*

        The area under the precision/recall curve (AUPRC) is a single number measuring the
        overall quality of the transform, that is independent of the choice made for precision
        vs. recall. Higher values indicate that you have a more attractive precision vs. recall
        tradeoff.

        For more information, see `Precision and recall
        <https://en.wikipedia.org/wiki/Precision_and_recall>`__ in Wikipedia.

      - **Precision** *(float) --*

        The precision metric indicates when often your transform is correct when it predicts a
        match. Specifically, it measures how well the transform finds true positives from the
        total true positives possible.

        For more information, see `Precision and recall
        <https://en.wikipedia.org/wiki/Precision_and_recall>`__ in Wikipedia.

      - **Recall** *(float) --*

        The recall metric indicates that for an actual match, how often your transform predicts
        the match. Specifically, it measures how well the transform finds true positives from the
        total records in the source data.

        For more information, see `Precision and recall
        <https://en.wikipedia.org/wiki/Precision_and_recall>`__ in Wikipedia.

      - **F1** *(float) --*

        The maximum F1 metric indicates the transform's accuracy between 0 and 1, where 1 is the
        best accuracy.

        For more information, see `F1 score <https://en.wikipedia.org/wiki/F1_score>`__ in
        Wikipedia.

      - **ConfusionMatrix** *(dict) --*

        The confusion matrix shows you what your transform is predicting accurately and what
        types of errors it is making.

        For more information, see `Confusion matrix
        <https://en.wikipedia.org/wiki/Confusion_matrix>`__ in Wikipedia.

        - **NumTruePositives** *(integer) --*

          The number of matches in the data that the transform correctly found, in the confusion
          matrix for your transform.

        - **NumFalsePositives** *(integer) --*

          The number of nonmatches in the data that the transform incorrectly classified as a
          match, in the confusion matrix for your transform.

        - **NumTrueNegatives** *(integer) --*

          The number of nonmatches in the data that the transform correctly rejected, in the
          confusion matrix for your transform.

        - **NumFalseNegatives** *(integer) --*

          The number of matches in the data that the transform didn't find, in the confusion
          matrix for your transform.
    """


_ClientGetMlTransformResponseInputRecordTablesTypeDef = TypedDict(
    "_ClientGetMlTransformResponseInputRecordTablesTypeDef",
    {"DatabaseName": str, "TableName": str, "CatalogId": str, "ConnectionName": str},
    total=False,
)


class ClientGetMlTransformResponseInputRecordTablesTypeDef(
    _ClientGetMlTransformResponseInputRecordTablesTypeDef
):
    """
    Type definition for `ClientGetMlTransformResponse` `InputRecordTables`

    The database and table in the AWS Glue Data Catalog that is used for input or output data.

    - **DatabaseName** *(string) --*

      A database name in the AWS Glue Data Catalog.

    - **TableName** *(string) --*

      A table name in the AWS Glue Data Catalog.

    - **CatalogId** *(string) --*

      A unique identifier for the AWS Glue Data Catalog.

    - **ConnectionName** *(string) --*

      The name of the connection to the AWS Glue Data Catalog.
    """


_ClientGetMlTransformResponseParametersFindMatchesParametersTypeDef = TypedDict(
    "_ClientGetMlTransformResponseParametersFindMatchesParametersTypeDef",
    {
        "PrimaryKeyColumnName": str,
        "PrecisionRecallTradeoff": float,
        "AccuracyCostTradeoff": float,
        "EnforceProvidedLabels": bool,
    },
    total=False,
)


class ClientGetMlTransformResponseParametersFindMatchesParametersTypeDef(
    _ClientGetMlTransformResponseParametersFindMatchesParametersTypeDef
):
    """
    Type definition for `ClientGetMlTransformResponseParameters` `FindMatchesParameters`

    The parameters for the find matches algorithm.

    - **PrimaryKeyColumnName** *(string) --*

      The name of a column that uniquely identifies rows in the source table. Used to help
      identify matching records.

    - **PrecisionRecallTradeoff** *(float) --*

      The value selected when tuning your transform for a balance between precision and recall.
      A value of 0.5 means no preference; a value of 1.0 means a bias purely for precision, and
      a value of 0.0 means a bias for recall. Because this is a tradeoff, choosing values close
      to 1.0 means very low recall, and choosing values close to 0.0 results in very low
      precision.

      The precision metric indicates how often your model is correct when it predicts a match.

      The recall metric indicates that for an actual match, how often your model predicts the
      match.

    - **AccuracyCostTradeoff** *(float) --*

      The value that is selected when tuning your transform for a balance between accuracy and
      cost. A value of 0.5 means that the system balances accuracy and cost concerns. A value
      of 1.0 means a bias purely for accuracy, which typically results in a higher cost,
      sometimes substantially higher. A value of 0.0 means a bias purely for cost, which
      results in a less accurate ``FindMatches`` transform, sometimes with unacceptable
      accuracy.

      Accuracy measures how well the transform finds true positives and true negatives.
      Increasing accuracy requires more machine resources and cost. But it also results in
      increased recall.

      Cost measures how many compute resources, and thus money, are consumed to run the
      transform.

    - **EnforceProvidedLabels** *(boolean) --*

      The value to switch on or off to force the output to match the provided labels from
      users. If the value is ``True`` , the ``find matches`` transform forces the output to
      match the provided labels. The results override the normal conflation results. If the
      value is ``False`` , the ``find matches`` transform does not ensure all the labels
      provided are respected, and the results rely on the trained model.

      Note that setting this value to true may increase the conflation execution time.
    """


_ClientGetMlTransformResponseParametersTypeDef = TypedDict(
    "_ClientGetMlTransformResponseParametersTypeDef",
    {
        "TransformType": str,
        "FindMatchesParameters": ClientGetMlTransformResponseParametersFindMatchesParametersTypeDef,
    },
    total=False,
)


class ClientGetMlTransformResponseParametersTypeDef(
    _ClientGetMlTransformResponseParametersTypeDef
):
    """
    Type definition for `ClientGetMlTransformResponse` `Parameters`

    The configuration parameters that are specific to the algorithm used.

    - **TransformType** *(string) --*

      The type of machine learning transform.

      For information about the types of machine learning transforms, see `Creating Machine
      Learning Transforms
      <http://docs.aws.amazon.com/glue/latest/dg/add-job-machine-learning-transform.html>`__ .

    - **FindMatchesParameters** *(dict) --*

      The parameters for the find matches algorithm.

      - **PrimaryKeyColumnName** *(string) --*

        The name of a column that uniquely identifies rows in the source table. Used to help
        identify matching records.

      - **PrecisionRecallTradeoff** *(float) --*

        The value selected when tuning your transform for a balance between precision and recall.
        A value of 0.5 means no preference; a value of 1.0 means a bias purely for precision, and
        a value of 0.0 means a bias for recall. Because this is a tradeoff, choosing values close
        to 1.0 means very low recall, and choosing values close to 0.0 results in very low
        precision.

        The precision metric indicates how often your model is correct when it predicts a match.

        The recall metric indicates that for an actual match, how often your model predicts the
        match.

      - **AccuracyCostTradeoff** *(float) --*

        The value that is selected when tuning your transform for a balance between accuracy and
        cost. A value of 0.5 means that the system balances accuracy and cost concerns. A value
        of 1.0 means a bias purely for accuracy, which typically results in a higher cost,
        sometimes substantially higher. A value of 0.0 means a bias purely for cost, which
        results in a less accurate ``FindMatches`` transform, sometimes with unacceptable
        accuracy.

        Accuracy measures how well the transform finds true positives and true negatives.
        Increasing accuracy requires more machine resources and cost. But it also results in
        increased recall.

        Cost measures how many compute resources, and thus money, are consumed to run the
        transform.

      - **EnforceProvidedLabels** *(boolean) --*

        The value to switch on or off to force the output to match the provided labels from
        users. If the value is ``True`` , the ``find matches`` transform forces the output to
        match the provided labels. The results override the normal conflation results. If the
        value is ``False`` , the ``find matches`` transform does not ensure all the labels
        provided are respected, and the results rely on the trained model.

        Note that setting this value to true may increase the conflation execution time.
    """


_ClientGetMlTransformResponseSchemaTypeDef = TypedDict(
    "_ClientGetMlTransformResponseSchemaTypeDef",
    {"Name": str, "DataType": str},
    total=False,
)


class ClientGetMlTransformResponseSchemaTypeDef(
    _ClientGetMlTransformResponseSchemaTypeDef
):
    """
    Type definition for `ClientGetMlTransformResponse` `Schema`

    A key-value pair representing a column and data type that this transform can run against.
    The ``Schema`` parameter of the ``MLTransform`` may contain up to 100 of these structures.

    - **Name** *(string) --*

      The name of the column.

    - **DataType** *(string) --*

      The type of data in the column.
    """


_ClientGetMlTransformResponseTypeDef = TypedDict(
    "_ClientGetMlTransformResponseTypeDef",
    {
        "TransformId": str,
        "Name": str,
        "Description": str,
        "Status": str,
        "CreatedOn": datetime,
        "LastModifiedOn": datetime,
        "InputRecordTables": List[ClientGetMlTransformResponseInputRecordTablesTypeDef],
        "Parameters": ClientGetMlTransformResponseParametersTypeDef,
        "EvaluationMetrics": ClientGetMlTransformResponseEvaluationMetricsTypeDef,
        "LabelCount": int,
        "Schema": List[ClientGetMlTransformResponseSchemaTypeDef],
        "Role": str,
        "GlueVersion": str,
        "MaxCapacity": float,
        "WorkerType": str,
        "NumberOfWorkers": int,
        "Timeout": int,
        "MaxRetries": int,
    },
    total=False,
)


class ClientGetMlTransformResponseTypeDef(_ClientGetMlTransformResponseTypeDef):
    """
    Type definition for `ClientGetMlTransform` `Response`

    - **TransformId** *(string) --*

      The unique identifier of the transform, generated at the time that the transform was created.

    - **Name** *(string) --*

      The unique name given to the transform when it was created.

    - **Description** *(string) --*

      A description of the transform.

    - **Status** *(string) --*

      The last known status of the transform (to indicate whether it can be used or not). One of
      "NOT_READY", "READY", or "DELETING".

    - **CreatedOn** *(datetime) --*

      The date and time when the transform was created.

    - **LastModifiedOn** *(datetime) --*

      The date and time when the transform was last modified.

    - **InputRecordTables** *(list) --*

      A list of AWS Glue table definitions used by the transform.

      - *(dict) --*

        The database and table in the AWS Glue Data Catalog that is used for input or output data.

        - **DatabaseName** *(string) --*

          A database name in the AWS Glue Data Catalog.

        - **TableName** *(string) --*

          A table name in the AWS Glue Data Catalog.

        - **CatalogId** *(string) --*

          A unique identifier for the AWS Glue Data Catalog.

        - **ConnectionName** *(string) --*

          The name of the connection to the AWS Glue Data Catalog.

    - **Parameters** *(dict) --*

      The configuration parameters that are specific to the algorithm used.

      - **TransformType** *(string) --*

        The type of machine learning transform.

        For information about the types of machine learning transforms, see `Creating Machine
        Learning Transforms
        <http://docs.aws.amazon.com/glue/latest/dg/add-job-machine-learning-transform.html>`__ .

      - **FindMatchesParameters** *(dict) --*

        The parameters for the find matches algorithm.

        - **PrimaryKeyColumnName** *(string) --*

          The name of a column that uniquely identifies rows in the source table. Used to help
          identify matching records.

        - **PrecisionRecallTradeoff** *(float) --*

          The value selected when tuning your transform for a balance between precision and recall.
          A value of 0.5 means no preference; a value of 1.0 means a bias purely for precision, and
          a value of 0.0 means a bias for recall. Because this is a tradeoff, choosing values close
          to 1.0 means very low recall, and choosing values close to 0.0 results in very low
          precision.

          The precision metric indicates how often your model is correct when it predicts a match.

          The recall metric indicates that for an actual match, how often your model predicts the
          match.

        - **AccuracyCostTradeoff** *(float) --*

          The value that is selected when tuning your transform for a balance between accuracy and
          cost. A value of 0.5 means that the system balances accuracy and cost concerns. A value
          of 1.0 means a bias purely for accuracy, which typically results in a higher cost,
          sometimes substantially higher. A value of 0.0 means a bias purely for cost, which
          results in a less accurate ``FindMatches`` transform, sometimes with unacceptable
          accuracy.

          Accuracy measures how well the transform finds true positives and true negatives.
          Increasing accuracy requires more machine resources and cost. But it also results in
          increased recall.

          Cost measures how many compute resources, and thus money, are consumed to run the
          transform.

        - **EnforceProvidedLabels** *(boolean) --*

          The value to switch on or off to force the output to match the provided labels from
          users. If the value is ``True`` , the ``find matches`` transform forces the output to
          match the provided labels. The results override the normal conflation results. If the
          value is ``False`` , the ``find matches`` transform does not ensure all the labels
          provided are respected, and the results rely on the trained model.

          Note that setting this value to true may increase the conflation execution time.

    - **EvaluationMetrics** *(dict) --*

      The latest evaluation metrics.

      - **TransformType** *(string) --*

        The type of machine learning transform.

      - **FindMatchesMetrics** *(dict) --*

        The evaluation metrics for the find matches algorithm.

        - **AreaUnderPRCurve** *(float) --*

          The area under the precision/recall curve (AUPRC) is a single number measuring the
          overall quality of the transform, that is independent of the choice made for precision
          vs. recall. Higher values indicate that you have a more attractive precision vs. recall
          tradeoff.

          For more information, see `Precision and recall
          <https://en.wikipedia.org/wiki/Precision_and_recall>`__ in Wikipedia.

        - **Precision** *(float) --*

          The precision metric indicates when often your transform is correct when it predicts a
          match. Specifically, it measures how well the transform finds true positives from the
          total true positives possible.

          For more information, see `Precision and recall
          <https://en.wikipedia.org/wiki/Precision_and_recall>`__ in Wikipedia.

        - **Recall** *(float) --*

          The recall metric indicates that for an actual match, how often your transform predicts
          the match. Specifically, it measures how well the transform finds true positives from the
          total records in the source data.

          For more information, see `Precision and recall
          <https://en.wikipedia.org/wiki/Precision_and_recall>`__ in Wikipedia.

        - **F1** *(float) --*

          The maximum F1 metric indicates the transform's accuracy between 0 and 1, where 1 is the
          best accuracy.

          For more information, see `F1 score <https://en.wikipedia.org/wiki/F1_score>`__ in
          Wikipedia.

        - **ConfusionMatrix** *(dict) --*

          The confusion matrix shows you what your transform is predicting accurately and what
          types of errors it is making.

          For more information, see `Confusion matrix
          <https://en.wikipedia.org/wiki/Confusion_matrix>`__ in Wikipedia.

          - **NumTruePositives** *(integer) --*

            The number of matches in the data that the transform correctly found, in the confusion
            matrix for your transform.

          - **NumFalsePositives** *(integer) --*

            The number of nonmatches in the data that the transform incorrectly classified as a
            match, in the confusion matrix for your transform.

          - **NumTrueNegatives** *(integer) --*

            The number of nonmatches in the data that the transform correctly rejected, in the
            confusion matrix for your transform.

          - **NumFalseNegatives** *(integer) --*

            The number of matches in the data that the transform didn't find, in the confusion
            matrix for your transform.

    - **LabelCount** *(integer) --*

      The number of labels available for this transform.

    - **Schema** *(list) --*

      The ``Map<Column, Type>`` object that represents the schema that this transform accepts. Has
      an upper bound of 100 columns.

      - *(dict) --*

        A key-value pair representing a column and data type that this transform can run against.
        The ``Schema`` parameter of the ``MLTransform`` may contain up to 100 of these structures.

        - **Name** *(string) --*

          The name of the column.

        - **DataType** *(string) --*

          The type of data in the column.

    - **Role** *(string) --*

      The name or Amazon Resource Name (ARN) of the IAM role with the required permissions.

    - **GlueVersion** *(string) --*

      This value determines which version of AWS Glue this machine learning transform is compatible
      with. Glue 1.0 is recommended for most customers. If the value is not set, the Glue
      compatibility defaults to Glue 0.9. For more information, see `AWS Glue Versions
      <https://docs.aws.amazon.com/glue/latest/dg/release-notes.html#release-notes-versions>`__ in
      the developer guide.

    - **MaxCapacity** *(float) --*

      The number of AWS Glue data processing units (DPUs) that are allocated to task runs for this
      transform. You can allocate from 2 to 100 DPUs; the default is 10. A DPU is a relative
      measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory.
      For more information, see the `AWS Glue pricing page
      <https://aws.amazon.com/glue/pricing/>`__ .

      When the ``WorkerType`` field is set to a value other than ``Standard`` , the ``MaxCapacity``
      field is set automatically and becomes read-only.

    - **WorkerType** *(string) --*

      The type of predefined worker that is allocated when this task runs. Accepts a value of
      Standard, G.1X, or G.2X.

      * For the ``Standard`` worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB
      disk, and 2 executors per worker.

      * For the ``G.1X`` worker type, each worker provides 4 vCPU, 16 GB of memory and a 64GB disk,
      and 1 executor per worker.

      * For the ``G.2X`` worker type, each worker provides 8 vCPU, 32 GB of memory and a 128GB
      disk, and 1 executor per worker.

    - **NumberOfWorkers** *(integer) --*

      The number of workers of a defined ``workerType`` that are allocated when this task runs.

    - **Timeout** *(integer) --*

      The timeout for a task run for this transform in minutes. This is the maximum time that a
      task run for this transform can consume resources before it is terminated and enters
      ``TIMEOUT`` status. The default is 2,880 minutes (48 hours).

    - **MaxRetries** *(integer) --*

      The maximum number of times to retry a task for this transform after a task run fails.
    """


_ClientGetMlTransformsFilterSchemaTypeDef = TypedDict(
    "_ClientGetMlTransformsFilterSchemaTypeDef",
    {"Name": str, "DataType": str},
    total=False,
)


class ClientGetMlTransformsFilterSchemaTypeDef(
    _ClientGetMlTransformsFilterSchemaTypeDef
):
    """
    Type definition for `ClientGetMlTransformsFilter` `Schema`

    A key-value pair representing a column and data type that this transform can run against. The
    ``Schema`` parameter of the ``MLTransform`` may contain up to 100 of these structures.

    - **Name** *(string) --*

      The name of the column.

    - **DataType** *(string) --*

      The type of data in the column.
    """


_ClientGetMlTransformsFilterTypeDef = TypedDict(
    "_ClientGetMlTransformsFilterTypeDef",
    {
        "Name": str,
        "TransformType": str,
        "Status": str,
        "GlueVersion": str,
        "CreatedBefore": datetime,
        "CreatedAfter": datetime,
        "LastModifiedBefore": datetime,
        "LastModifiedAfter": datetime,
        "Schema": List[ClientGetMlTransformsFilterSchemaTypeDef],
    },
    total=False,
)


class ClientGetMlTransformsFilterTypeDef(_ClientGetMlTransformsFilterTypeDef):
    """
    Type definition for `ClientGetMlTransforms` `Filter`

    The filter transformation criteria.

    - **Name** *(string) --*

      A unique transform name that is used to filter the machine learning transforms.

    - **TransformType** *(string) --*

      The type of machine learning transform that is used to filter the machine learning transforms.

    - **Status** *(string) --*

      Filters the list of machine learning transforms by the last known status of the transforms (to
      indicate whether a transform can be used or not). One of "NOT_READY", "READY", or "DELETING".

    - **GlueVersion** *(string) --*

      This value determines which version of AWS Glue this machine learning transform is compatible
      with. Glue 1.0 is recommended for most customers. If the value is not set, the Glue
      compatibility defaults to Glue 0.9. For more information, see `AWS Glue Versions
      <https://docs.aws.amazon.com/glue/latest/dg/release-notes.html#release-notes-versions>`__ in
      the developer guide.

    - **CreatedBefore** *(datetime) --*

      The time and date before which the transforms were created.

    - **CreatedAfter** *(datetime) --*

      The time and date after which the transforms were created.

    - **LastModifiedBefore** *(datetime) --*

      Filter on transforms last modified before this date.

    - **LastModifiedAfter** *(datetime) --*

      Filter on transforms last modified after this date.

    - **Schema** *(list) --*

      Filters on datasets with a specific schema. The ``Map<Column, Type>`` object is an array of
      key-value pairs representing the schema this transform accepts, where ``Column`` is the name of
      a column, and ``Type`` is the type of the data such as an integer or string. Has an upper bound
      of 100 columns.

      - *(dict) --*

        A key-value pair representing a column and data type that this transform can run against. The
        ``Schema`` parameter of the ``MLTransform`` may contain up to 100 of these structures.

        - **Name** *(string) --*

          The name of the column.

        - **DataType** *(string) --*

          The type of data in the column.
    """


_ClientGetMlTransformsResponseTransformsEvaluationMetricsFindMatchesMetricsConfusionMatrixTypeDef = TypedDict(
    "_ClientGetMlTransformsResponseTransformsEvaluationMetricsFindMatchesMetricsConfusionMatrixTypeDef",
    {
        "NumTruePositives": int,
        "NumFalsePositives": int,
        "NumTrueNegatives": int,
        "NumFalseNegatives": int,
    },
    total=False,
)


class ClientGetMlTransformsResponseTransformsEvaluationMetricsFindMatchesMetricsConfusionMatrixTypeDef(
    _ClientGetMlTransformsResponseTransformsEvaluationMetricsFindMatchesMetricsConfusionMatrixTypeDef
):
    """
    Type definition for `ClientGetMlTransformsResponseTransformsEvaluationMetricsFindMatchesMetrics` `ConfusionMatrix`

    The confusion matrix shows you what your transform is predicting accurately and what
    types of errors it is making.

    For more information, see `Confusion matrix
    <https://en.wikipedia.org/wiki/Confusion_matrix>`__ in Wikipedia.

    - **NumTruePositives** *(integer) --*

      The number of matches in the data that the transform correctly found, in the
      confusion matrix for your transform.

    - **NumFalsePositives** *(integer) --*

      The number of nonmatches in the data that the transform incorrectly classified as a
      match, in the confusion matrix for your transform.

    - **NumTrueNegatives** *(integer) --*

      The number of nonmatches in the data that the transform correctly rejected, in the
      confusion matrix for your transform.

    - **NumFalseNegatives** *(integer) --*

      The number of matches in the data that the transform didn't find, in the confusion
      matrix for your transform.
    """


_ClientGetMlTransformsResponseTransformsEvaluationMetricsFindMatchesMetricsTypeDef = TypedDict(
    "_ClientGetMlTransformsResponseTransformsEvaluationMetricsFindMatchesMetricsTypeDef",
    {
        "AreaUnderPRCurve": float,
        "Precision": float,
        "Recall": float,
        "F1": float,
        "ConfusionMatrix": ClientGetMlTransformsResponseTransformsEvaluationMetricsFindMatchesMetricsConfusionMatrixTypeDef,
    },
    total=False,
)


class ClientGetMlTransformsResponseTransformsEvaluationMetricsFindMatchesMetricsTypeDef(
    _ClientGetMlTransformsResponseTransformsEvaluationMetricsFindMatchesMetricsTypeDef
):
    """
    Type definition for `ClientGetMlTransformsResponseTransformsEvaluationMetrics` `FindMatchesMetrics`

    The evaluation metrics for the find matches algorithm.

    - **AreaUnderPRCurve** *(float) --*

      The area under the precision/recall curve (AUPRC) is a single number measuring the
      overall quality of the transform, that is independent of the choice made for
      precision vs. recall. Higher values indicate that you have a more attractive
      precision vs. recall tradeoff.

      For more information, see `Precision and recall
      <https://en.wikipedia.org/wiki/Precision_and_recall>`__ in Wikipedia.

    - **Precision** *(float) --*

      The precision metric indicates when often your transform is correct when it predicts
      a match. Specifically, it measures how well the transform finds true positives from
      the total true positives possible.

      For more information, see `Precision and recall
      <https://en.wikipedia.org/wiki/Precision_and_recall>`__ in Wikipedia.

    - **Recall** *(float) --*

      The recall metric indicates that for an actual match, how often your transform
      predicts the match. Specifically, it measures how well the transform finds true
      positives from the total records in the source data.

      For more information, see `Precision and recall
      <https://en.wikipedia.org/wiki/Precision_and_recall>`__ in Wikipedia.

    - **F1** *(float) --*

      The maximum F1 metric indicates the transform's accuracy between 0 and 1, where 1 is
      the best accuracy.

      For more information, see `F1 score <https://en.wikipedia.org/wiki/F1_score>`__ in
      Wikipedia.

    - **ConfusionMatrix** *(dict) --*

      The confusion matrix shows you what your transform is predicting accurately and what
      types of errors it is making.

      For more information, see `Confusion matrix
      <https://en.wikipedia.org/wiki/Confusion_matrix>`__ in Wikipedia.

      - **NumTruePositives** *(integer) --*

        The number of matches in the data that the transform correctly found, in the
        confusion matrix for your transform.

      - **NumFalsePositives** *(integer) --*

        The number of nonmatches in the data that the transform incorrectly classified as a
        match, in the confusion matrix for your transform.

      - **NumTrueNegatives** *(integer) --*

        The number of nonmatches in the data that the transform correctly rejected, in the
        confusion matrix for your transform.

      - **NumFalseNegatives** *(integer) --*

        The number of matches in the data that the transform didn't find, in the confusion
        matrix for your transform.
    """


_ClientGetMlTransformsResponseTransformsEvaluationMetricsTypeDef = TypedDict(
    "_ClientGetMlTransformsResponseTransformsEvaluationMetricsTypeDef",
    {
        "TransformType": str,
        "FindMatchesMetrics": ClientGetMlTransformsResponseTransformsEvaluationMetricsFindMatchesMetricsTypeDef,
    },
    total=False,
)


class ClientGetMlTransformsResponseTransformsEvaluationMetricsTypeDef(
    _ClientGetMlTransformsResponseTransformsEvaluationMetricsTypeDef
):
    """
    Type definition for `ClientGetMlTransformsResponseTransforms` `EvaluationMetrics`

    An ``EvaluationMetrics`` object. Evaluation metrics provide an estimate of the quality of
    your machine learning transform.

    - **TransformType** *(string) --*

      The type of machine learning transform.

    - **FindMatchesMetrics** *(dict) --*

      The evaluation metrics for the find matches algorithm.

      - **AreaUnderPRCurve** *(float) --*

        The area under the precision/recall curve (AUPRC) is a single number measuring the
        overall quality of the transform, that is independent of the choice made for
        precision vs. recall. Higher values indicate that you have a more attractive
        precision vs. recall tradeoff.

        For more information, see `Precision and recall
        <https://en.wikipedia.org/wiki/Precision_and_recall>`__ in Wikipedia.

      - **Precision** *(float) --*

        The precision metric indicates when often your transform is correct when it predicts
        a match. Specifically, it measures how well the transform finds true positives from
        the total true positives possible.

        For more information, see `Precision and recall
        <https://en.wikipedia.org/wiki/Precision_and_recall>`__ in Wikipedia.

      - **Recall** *(float) --*

        The recall metric indicates that for an actual match, how often your transform
        predicts the match. Specifically, it measures how well the transform finds true
        positives from the total records in the source data.

        For more information, see `Precision and recall
        <https://en.wikipedia.org/wiki/Precision_and_recall>`__ in Wikipedia.

      - **F1** *(float) --*

        The maximum F1 metric indicates the transform's accuracy between 0 and 1, where 1 is
        the best accuracy.

        For more information, see `F1 score <https://en.wikipedia.org/wiki/F1_score>`__ in
        Wikipedia.

      - **ConfusionMatrix** *(dict) --*

        The confusion matrix shows you what your transform is predicting accurately and what
        types of errors it is making.

        For more information, see `Confusion matrix
        <https://en.wikipedia.org/wiki/Confusion_matrix>`__ in Wikipedia.

        - **NumTruePositives** *(integer) --*

          The number of matches in the data that the transform correctly found, in the
          confusion matrix for your transform.

        - **NumFalsePositives** *(integer) --*

          The number of nonmatches in the data that the transform incorrectly classified as a
          match, in the confusion matrix for your transform.

        - **NumTrueNegatives** *(integer) --*

          The number of nonmatches in the data that the transform correctly rejected, in the
          confusion matrix for your transform.

        - **NumFalseNegatives** *(integer) --*

          The number of matches in the data that the transform didn't find, in the confusion
          matrix for your transform.
    """


_ClientGetMlTransformsResponseTransformsInputRecordTablesTypeDef = TypedDict(
    "_ClientGetMlTransformsResponseTransformsInputRecordTablesTypeDef",
    {"DatabaseName": str, "TableName": str, "CatalogId": str, "ConnectionName": str},
    total=False,
)


class ClientGetMlTransformsResponseTransformsInputRecordTablesTypeDef(
    _ClientGetMlTransformsResponseTransformsInputRecordTablesTypeDef
):
    """
    Type definition for `ClientGetMlTransformsResponseTransforms` `InputRecordTables`

    The database and table in the AWS Glue Data Catalog that is used for input or output
    data.

    - **DatabaseName** *(string) --*

      A database name in the AWS Glue Data Catalog.

    - **TableName** *(string) --*

      A table name in the AWS Glue Data Catalog.

    - **CatalogId** *(string) --*

      A unique identifier for the AWS Glue Data Catalog.

    - **ConnectionName** *(string) --*

      The name of the connection to the AWS Glue Data Catalog.
    """


_ClientGetMlTransformsResponseTransformsParametersFindMatchesParametersTypeDef = TypedDict(
    "_ClientGetMlTransformsResponseTransformsParametersFindMatchesParametersTypeDef",
    {
        "PrimaryKeyColumnName": str,
        "PrecisionRecallTradeoff": float,
        "AccuracyCostTradeoff": float,
        "EnforceProvidedLabels": bool,
    },
    total=False,
)


class ClientGetMlTransformsResponseTransformsParametersFindMatchesParametersTypeDef(
    _ClientGetMlTransformsResponseTransformsParametersFindMatchesParametersTypeDef
):
    """
    Type definition for `ClientGetMlTransformsResponseTransformsParameters` `FindMatchesParameters`

    The parameters for the find matches algorithm.

    - **PrimaryKeyColumnName** *(string) --*

      The name of a column that uniquely identifies rows in the source table. Used to help
      identify matching records.

    - **PrecisionRecallTradeoff** *(float) --*

      The value selected when tuning your transform for a balance between precision and
      recall. A value of 0.5 means no preference; a value of 1.0 means a bias purely for
      precision, and a value of 0.0 means a bias for recall. Because this is a tradeoff,
      choosing values close to 1.0 means very low recall, and choosing values close to 0.0
      results in very low precision.

      The precision metric indicates how often your model is correct when it predicts a
      match.

      The recall metric indicates that for an actual match, how often your model predicts
      the match.

    - **AccuracyCostTradeoff** *(float) --*

      The value that is selected when tuning your transform for a balance between accuracy
      and cost. A value of 0.5 means that the system balances accuracy and cost concerns. A
      value of 1.0 means a bias purely for accuracy, which typically results in a higher
      cost, sometimes substantially higher. A value of 0.0 means a bias purely for cost,
      which results in a less accurate ``FindMatches`` transform, sometimes with
      unacceptable accuracy.

      Accuracy measures how well the transform finds true positives and true negatives.
      Increasing accuracy requires more machine resources and cost. But it also results in
      increased recall.

      Cost measures how many compute resources, and thus money, are consumed to run the
      transform.

    - **EnforceProvidedLabels** *(boolean) --*

      The value to switch on or off to force the output to match the provided labels from
      users. If the value is ``True`` , the ``find matches`` transform forces the output to
      match the provided labels. The results override the normal conflation results. If the
      value is ``False`` , the ``find matches`` transform does not ensure all the labels
      provided are respected, and the results rely on the trained model.

      Note that setting this value to true may increase the conflation execution time.
    """


_ClientGetMlTransformsResponseTransformsParametersTypeDef = TypedDict(
    "_ClientGetMlTransformsResponseTransformsParametersTypeDef",
    {
        "TransformType": str,
        "FindMatchesParameters": ClientGetMlTransformsResponseTransformsParametersFindMatchesParametersTypeDef,
    },
    total=False,
)


class ClientGetMlTransformsResponseTransformsParametersTypeDef(
    _ClientGetMlTransformsResponseTransformsParametersTypeDef
):
    """
    Type definition for `ClientGetMlTransformsResponseTransforms` `Parameters`

    A ``TransformParameters`` object. You can use parameters to tune (customize) the behavior
    of the machine learning transform by specifying what data it learns from and your
    preference on various tradeoffs (such as precious vs. recall, or accuracy vs. cost).

    - **TransformType** *(string) --*

      The type of machine learning transform.

      For information about the types of machine learning transforms, see `Creating Machine
      Learning Transforms
      <http://docs.aws.amazon.com/glue/latest/dg/add-job-machine-learning-transform.html>`__ .

    - **FindMatchesParameters** *(dict) --*

      The parameters for the find matches algorithm.

      - **PrimaryKeyColumnName** *(string) --*

        The name of a column that uniquely identifies rows in the source table. Used to help
        identify matching records.

      - **PrecisionRecallTradeoff** *(float) --*

        The value selected when tuning your transform for a balance between precision and
        recall. A value of 0.5 means no preference; a value of 1.0 means a bias purely for
        precision, and a value of 0.0 means a bias for recall. Because this is a tradeoff,
        choosing values close to 1.0 means very low recall, and choosing values close to 0.0
        results in very low precision.

        The precision metric indicates how often your model is correct when it predicts a
        match.

        The recall metric indicates that for an actual match, how often your model predicts
        the match.

      - **AccuracyCostTradeoff** *(float) --*

        The value that is selected when tuning your transform for a balance between accuracy
        and cost. A value of 0.5 means that the system balances accuracy and cost concerns. A
        value of 1.0 means a bias purely for accuracy, which typically results in a higher
        cost, sometimes substantially higher. A value of 0.0 means a bias purely for cost,
        which results in a less accurate ``FindMatches`` transform, sometimes with
        unacceptable accuracy.

        Accuracy measures how well the transform finds true positives and true negatives.
        Increasing accuracy requires more machine resources and cost. But it also results in
        increased recall.

        Cost measures how many compute resources, and thus money, are consumed to run the
        transform.

      - **EnforceProvidedLabels** *(boolean) --*

        The value to switch on or off to force the output to match the provided labels from
        users. If the value is ``True`` , the ``find matches`` transform forces the output to
        match the provided labels. The results override the normal conflation results. If the
        value is ``False`` , the ``find matches`` transform does not ensure all the labels
        provided are respected, and the results rely on the trained model.

        Note that setting this value to true may increase the conflation execution time.
    """


_ClientGetMlTransformsResponseTransformsSchemaTypeDef = TypedDict(
    "_ClientGetMlTransformsResponseTransformsSchemaTypeDef",
    {"Name": str, "DataType": str},
    total=False,
)


class ClientGetMlTransformsResponseTransformsSchemaTypeDef(
    _ClientGetMlTransformsResponseTransformsSchemaTypeDef
):
    """
    Type definition for `ClientGetMlTransformsResponseTransforms` `Schema`

    A key-value pair representing a column and data type that this transform can run
    against. The ``Schema`` parameter of the ``MLTransform`` may contain up to 100 of these
    structures.

    - **Name** *(string) --*

      The name of the column.

    - **DataType** *(string) --*

      The type of data in the column.
    """


_ClientGetMlTransformsResponseTransformsTypeDef = TypedDict(
    "_ClientGetMlTransformsResponseTransformsTypeDef",
    {
        "TransformId": str,
        "Name": str,
        "Description": str,
        "Status": str,
        "CreatedOn": datetime,
        "LastModifiedOn": datetime,
        "InputRecordTables": List[
            ClientGetMlTransformsResponseTransformsInputRecordTablesTypeDef
        ],
        "Parameters": ClientGetMlTransformsResponseTransformsParametersTypeDef,
        "EvaluationMetrics": ClientGetMlTransformsResponseTransformsEvaluationMetricsTypeDef,
        "LabelCount": int,
        "Schema": List[ClientGetMlTransformsResponseTransformsSchemaTypeDef],
        "Role": str,
        "GlueVersion": str,
        "MaxCapacity": float,
        "WorkerType": str,
        "NumberOfWorkers": int,
        "Timeout": int,
        "MaxRetries": int,
    },
    total=False,
)


class ClientGetMlTransformsResponseTransformsTypeDef(
    _ClientGetMlTransformsResponseTransformsTypeDef
):
    """
    Type definition for `ClientGetMlTransformsResponse` `Transforms`

    A structure for a machine learning transform.

    - **TransformId** *(string) --*

      The unique transform ID that is generated for the machine learning transform. The ID is
      guaranteed to be unique and does not change.

    - **Name** *(string) --*

      A user-defined name for the machine learning transform. Names are not guaranteed unique
      and can be changed at any time.

    - **Description** *(string) --*

      A user-defined, long-form description text for the machine learning transform.
      Descriptions are not guaranteed to be unique and can be changed at any time.

    - **Status** *(string) --*

      The current status of the machine learning transform.

    - **CreatedOn** *(datetime) --*

      A timestamp. The time and date that this machine learning transform was created.

    - **LastModifiedOn** *(datetime) --*

      A timestamp. The last point in time when this machine learning transform was modified.

    - **InputRecordTables** *(list) --*

      A list of AWS Glue table definitions used by the transform.

      - *(dict) --*

        The database and table in the AWS Glue Data Catalog that is used for input or output
        data.

        - **DatabaseName** *(string) --*

          A database name in the AWS Glue Data Catalog.

        - **TableName** *(string) --*

          A table name in the AWS Glue Data Catalog.

        - **CatalogId** *(string) --*

          A unique identifier for the AWS Glue Data Catalog.

        - **ConnectionName** *(string) --*

          The name of the connection to the AWS Glue Data Catalog.

    - **Parameters** *(dict) --*

      A ``TransformParameters`` object. You can use parameters to tune (customize) the behavior
      of the machine learning transform by specifying what data it learns from and your
      preference on various tradeoffs (such as precious vs. recall, or accuracy vs. cost).

      - **TransformType** *(string) --*

        The type of machine learning transform.

        For information about the types of machine learning transforms, see `Creating Machine
        Learning Transforms
        <http://docs.aws.amazon.com/glue/latest/dg/add-job-machine-learning-transform.html>`__ .

      - **FindMatchesParameters** *(dict) --*

        The parameters for the find matches algorithm.

        - **PrimaryKeyColumnName** *(string) --*

          The name of a column that uniquely identifies rows in the source table. Used to help
          identify matching records.

        - **PrecisionRecallTradeoff** *(float) --*

          The value selected when tuning your transform for a balance between precision and
          recall. A value of 0.5 means no preference; a value of 1.0 means a bias purely for
          precision, and a value of 0.0 means a bias for recall. Because this is a tradeoff,
          choosing values close to 1.0 means very low recall, and choosing values close to 0.0
          results in very low precision.

          The precision metric indicates how often your model is correct when it predicts a
          match.

          The recall metric indicates that for an actual match, how often your model predicts
          the match.

        - **AccuracyCostTradeoff** *(float) --*

          The value that is selected when tuning your transform for a balance between accuracy
          and cost. A value of 0.5 means that the system balances accuracy and cost concerns. A
          value of 1.0 means a bias purely for accuracy, which typically results in a higher
          cost, sometimes substantially higher. A value of 0.0 means a bias purely for cost,
          which results in a less accurate ``FindMatches`` transform, sometimes with
          unacceptable accuracy.

          Accuracy measures how well the transform finds true positives and true negatives.
          Increasing accuracy requires more machine resources and cost. But it also results in
          increased recall.

          Cost measures how many compute resources, and thus money, are consumed to run the
          transform.

        - **EnforceProvidedLabels** *(boolean) --*

          The value to switch on or off to force the output to match the provided labels from
          users. If the value is ``True`` , the ``find matches`` transform forces the output to
          match the provided labels. The results override the normal conflation results. If the
          value is ``False`` , the ``find matches`` transform does not ensure all the labels
          provided are respected, and the results rely on the trained model.

          Note that setting this value to true may increase the conflation execution time.

    - **EvaluationMetrics** *(dict) --*

      An ``EvaluationMetrics`` object. Evaluation metrics provide an estimate of the quality of
      your machine learning transform.

      - **TransformType** *(string) --*

        The type of machine learning transform.

      - **FindMatchesMetrics** *(dict) --*

        The evaluation metrics for the find matches algorithm.

        - **AreaUnderPRCurve** *(float) --*

          The area under the precision/recall curve (AUPRC) is a single number measuring the
          overall quality of the transform, that is independent of the choice made for
          precision vs. recall. Higher values indicate that you have a more attractive
          precision vs. recall tradeoff.

          For more information, see `Precision and recall
          <https://en.wikipedia.org/wiki/Precision_and_recall>`__ in Wikipedia.

        - **Precision** *(float) --*

          The precision metric indicates when often your transform is correct when it predicts
          a match. Specifically, it measures how well the transform finds true positives from
          the total true positives possible.

          For more information, see `Precision and recall
          <https://en.wikipedia.org/wiki/Precision_and_recall>`__ in Wikipedia.

        - **Recall** *(float) --*

          The recall metric indicates that for an actual match, how often your transform
          predicts the match. Specifically, it measures how well the transform finds true
          positives from the total records in the source data.

          For more information, see `Precision and recall
          <https://en.wikipedia.org/wiki/Precision_and_recall>`__ in Wikipedia.

        - **F1** *(float) --*

          The maximum F1 metric indicates the transform's accuracy between 0 and 1, where 1 is
          the best accuracy.

          For more information, see `F1 score <https://en.wikipedia.org/wiki/F1_score>`__ in
          Wikipedia.

        - **ConfusionMatrix** *(dict) --*

          The confusion matrix shows you what your transform is predicting accurately and what
          types of errors it is making.

          For more information, see `Confusion matrix
          <https://en.wikipedia.org/wiki/Confusion_matrix>`__ in Wikipedia.

          - **NumTruePositives** *(integer) --*

            The number of matches in the data that the transform correctly found, in the
            confusion matrix for your transform.

          - **NumFalsePositives** *(integer) --*

            The number of nonmatches in the data that the transform incorrectly classified as a
            match, in the confusion matrix for your transform.

          - **NumTrueNegatives** *(integer) --*

            The number of nonmatches in the data that the transform correctly rejected, in the
            confusion matrix for your transform.

          - **NumFalseNegatives** *(integer) --*

            The number of matches in the data that the transform didn't find, in the confusion
            matrix for your transform.

    - **LabelCount** *(integer) --*

      A count identifier for the labeling files generated by AWS Glue for this transform. As
      you create a better transform, you can iteratively download, label, and upload the
      labeling file.

    - **Schema** *(list) --*

      A map of key-value pairs representing the columns and data types that this transform can
      run against. Has an upper bound of 100 columns.

      - *(dict) --*

        A key-value pair representing a column and data type that this transform can run
        against. The ``Schema`` parameter of the ``MLTransform`` may contain up to 100 of these
        structures.

        - **Name** *(string) --*

          The name of the column.

        - **DataType** *(string) --*

          The type of data in the column.

    - **Role** *(string) --*

      The name or Amazon Resource Name (ARN) of the IAM role with the required permissions. The
      required permissions include both AWS Glue service role permissions to AWS Glue
      resources, and Amazon S3 permissions required by the transform.

      * This role needs AWS Glue service role permissions to allow access to resources in AWS
      Glue. See `Attach a Policy to IAM Users That Access AWS Glue
      <https://docs.aws.amazon.com/glue/latest/dg/attach-policy-iam-user.html>`__ .

      * This role needs permission to your Amazon Simple Storage Service (Amazon S3) sources,
      targets, temporary directory, scripts, and any libraries used by the task run for this
      transform.

    - **GlueVersion** *(string) --*

      This value determines which version of AWS Glue this machine learning transform is
      compatible with. Glue 1.0 is recommended for most customers. If the value is not set, the
      Glue compatibility defaults to Glue 0.9. For more information, see `AWS Glue Versions
      <https://docs.aws.amazon.com/glue/latest/dg/release-notes.html#release-notes-versions>`__
      in the developer guide.

    - **MaxCapacity** *(float) --*

      The number of AWS Glue data processing units (DPUs) that are allocated to task runs for
      this transform. You can allocate from 2 to 100 DPUs; the default is 10. A DPU is a
      relative measure of processing power that consists of 4 vCPUs of compute capacity and 16
      GB of memory. For more information, see the `AWS Glue pricing page
      <http://aws.amazon.com/glue/pricing/>`__ .

       ``MaxCapacity`` is a mutually exclusive option with ``NumberOfWorkers`` and
       ``WorkerType`` .

      * If either ``NumberOfWorkers`` or ``WorkerType`` is set, then ``MaxCapacity`` cannot be
      set.

      * If ``MaxCapacity`` is set then neither ``NumberOfWorkers`` or ``WorkerType`` can be set.

      * If ``WorkerType`` is set, then ``NumberOfWorkers`` is required (and vice versa).

      * ``MaxCapacity`` and ``NumberOfWorkers`` must both be at least 1.

      When the ``WorkerType`` field is set to a value other than ``Standard`` , the
      ``MaxCapacity`` field is set automatically and becomes read-only.

    - **WorkerType** *(string) --*

      The type of predefined worker that is allocated when a task of this transform runs.
      Accepts a value of Standard, G.1X, or G.2X.

      * For the ``Standard`` worker type, each worker provides 4 vCPU, 16 GB of memory and a
      50GB disk, and 2 executors per worker.

      * For the ``G.1X`` worker type, each worker provides 4 vCPU, 16 GB of memory and a 64GB
      disk, and 1 executor per worker.

      * For the ``G.2X`` worker type, each worker provides 8 vCPU, 32 GB of memory and a 128GB
      disk, and 1 executor per worker.

       ``MaxCapacity`` is a mutually exclusive option with ``NumberOfWorkers`` and
       ``WorkerType`` .

      * If either ``NumberOfWorkers`` or ``WorkerType`` is set, then ``MaxCapacity`` cannot be
      set.

      * If ``MaxCapacity`` is set then neither ``NumberOfWorkers`` or ``WorkerType`` can be set.

      * If ``WorkerType`` is set, then ``NumberOfWorkers`` is required (and vice versa).

      * ``MaxCapacity`` and ``NumberOfWorkers`` must both be at least 1.

    - **NumberOfWorkers** *(integer) --*

      The number of workers of a defined ``workerType`` that are allocated when a task of the
      transform runs.

      If ``WorkerType`` is set, then ``NumberOfWorkers`` is required (and vice versa).

    - **Timeout** *(integer) --*

      The timeout in minutes of the machine learning transform.

    - **MaxRetries** *(integer) --*

      The maximum number of times to retry after an ``MLTaskRun`` of the machine learning
      transform fails.
    """


_ClientGetMlTransformsResponseTypeDef = TypedDict(
    "_ClientGetMlTransformsResponseTypeDef",
    {
        "Transforms": List[ClientGetMlTransformsResponseTransformsTypeDef],
        "NextToken": str,
    },
    total=False,
)


class ClientGetMlTransformsResponseTypeDef(_ClientGetMlTransformsResponseTypeDef):
    """
    Type definition for `ClientGetMlTransforms` `Response`

    - **Transforms** *(list) --*

      A list of machine learning transforms.

      - *(dict) --*

        A structure for a machine learning transform.

        - **TransformId** *(string) --*

          The unique transform ID that is generated for the machine learning transform. The ID is
          guaranteed to be unique and does not change.

        - **Name** *(string) --*

          A user-defined name for the machine learning transform. Names are not guaranteed unique
          and can be changed at any time.

        - **Description** *(string) --*

          A user-defined, long-form description text for the machine learning transform.
          Descriptions are not guaranteed to be unique and can be changed at any time.

        - **Status** *(string) --*

          The current status of the machine learning transform.

        - **CreatedOn** *(datetime) --*

          A timestamp. The time and date that this machine learning transform was created.

        - **LastModifiedOn** *(datetime) --*

          A timestamp. The last point in time when this machine learning transform was modified.

        - **InputRecordTables** *(list) --*

          A list of AWS Glue table definitions used by the transform.

          - *(dict) --*

            The database and table in the AWS Glue Data Catalog that is used for input or output
            data.

            - **DatabaseName** *(string) --*

              A database name in the AWS Glue Data Catalog.

            - **TableName** *(string) --*

              A table name in the AWS Glue Data Catalog.

            - **CatalogId** *(string) --*

              A unique identifier for the AWS Glue Data Catalog.

            - **ConnectionName** *(string) --*

              The name of the connection to the AWS Glue Data Catalog.

        - **Parameters** *(dict) --*

          A ``TransformParameters`` object. You can use parameters to tune (customize) the behavior
          of the machine learning transform by specifying what data it learns from and your
          preference on various tradeoffs (such as precious vs. recall, or accuracy vs. cost).

          - **TransformType** *(string) --*

            The type of machine learning transform.

            For information about the types of machine learning transforms, see `Creating Machine
            Learning Transforms
            <http://docs.aws.amazon.com/glue/latest/dg/add-job-machine-learning-transform.html>`__ .

          - **FindMatchesParameters** *(dict) --*

            The parameters for the find matches algorithm.

            - **PrimaryKeyColumnName** *(string) --*

              The name of a column that uniquely identifies rows in the source table. Used to help
              identify matching records.

            - **PrecisionRecallTradeoff** *(float) --*

              The value selected when tuning your transform for a balance between precision and
              recall. A value of 0.5 means no preference; a value of 1.0 means a bias purely for
              precision, and a value of 0.0 means a bias for recall. Because this is a tradeoff,
              choosing values close to 1.0 means very low recall, and choosing values close to 0.0
              results in very low precision.

              The precision metric indicates how often your model is correct when it predicts a
              match.

              The recall metric indicates that for an actual match, how often your model predicts
              the match.

            - **AccuracyCostTradeoff** *(float) --*

              The value that is selected when tuning your transform for a balance between accuracy
              and cost. A value of 0.5 means that the system balances accuracy and cost concerns. A
              value of 1.0 means a bias purely for accuracy, which typically results in a higher
              cost, sometimes substantially higher. A value of 0.0 means a bias purely for cost,
              which results in a less accurate ``FindMatches`` transform, sometimes with
              unacceptable accuracy.

              Accuracy measures how well the transform finds true positives and true negatives.
              Increasing accuracy requires more machine resources and cost. But it also results in
              increased recall.

              Cost measures how many compute resources, and thus money, are consumed to run the
              transform.

            - **EnforceProvidedLabels** *(boolean) --*

              The value to switch on or off to force the output to match the provided labels from
              users. If the value is ``True`` , the ``find matches`` transform forces the output to
              match the provided labels. The results override the normal conflation results. If the
              value is ``False`` , the ``find matches`` transform does not ensure all the labels
              provided are respected, and the results rely on the trained model.

              Note that setting this value to true may increase the conflation execution time.

        - **EvaluationMetrics** *(dict) --*

          An ``EvaluationMetrics`` object. Evaluation metrics provide an estimate of the quality of
          your machine learning transform.

          - **TransformType** *(string) --*

            The type of machine learning transform.

          - **FindMatchesMetrics** *(dict) --*

            The evaluation metrics for the find matches algorithm.

            - **AreaUnderPRCurve** *(float) --*

              The area under the precision/recall curve (AUPRC) is a single number measuring the
              overall quality of the transform, that is independent of the choice made for
              precision vs. recall. Higher values indicate that you have a more attractive
              precision vs. recall tradeoff.

              For more information, see `Precision and recall
              <https://en.wikipedia.org/wiki/Precision_and_recall>`__ in Wikipedia.

            - **Precision** *(float) --*

              The precision metric indicates when often your transform is correct when it predicts
              a match. Specifically, it measures how well the transform finds true positives from
              the total true positives possible.

              For more information, see `Precision and recall
              <https://en.wikipedia.org/wiki/Precision_and_recall>`__ in Wikipedia.

            - **Recall** *(float) --*

              The recall metric indicates that for an actual match, how often your transform
              predicts the match. Specifically, it measures how well the transform finds true
              positives from the total records in the source data.

              For more information, see `Precision and recall
              <https://en.wikipedia.org/wiki/Precision_and_recall>`__ in Wikipedia.

            - **F1** *(float) --*

              The maximum F1 metric indicates the transform's accuracy between 0 and 1, where 1 is
              the best accuracy.

              For more information, see `F1 score <https://en.wikipedia.org/wiki/F1_score>`__ in
              Wikipedia.

            - **ConfusionMatrix** *(dict) --*

              The confusion matrix shows you what your transform is predicting accurately and what
              types of errors it is making.

              For more information, see `Confusion matrix
              <https://en.wikipedia.org/wiki/Confusion_matrix>`__ in Wikipedia.

              - **NumTruePositives** *(integer) --*

                The number of matches in the data that the transform correctly found, in the
                confusion matrix for your transform.

              - **NumFalsePositives** *(integer) --*

                The number of nonmatches in the data that the transform incorrectly classified as a
                match, in the confusion matrix for your transform.

              - **NumTrueNegatives** *(integer) --*

                The number of nonmatches in the data that the transform correctly rejected, in the
                confusion matrix for your transform.

              - **NumFalseNegatives** *(integer) --*

                The number of matches in the data that the transform didn't find, in the confusion
                matrix for your transform.

        - **LabelCount** *(integer) --*

          A count identifier for the labeling files generated by AWS Glue for this transform. As
          you create a better transform, you can iteratively download, label, and upload the
          labeling file.

        - **Schema** *(list) --*

          A map of key-value pairs representing the columns and data types that this transform can
          run against. Has an upper bound of 100 columns.

          - *(dict) --*

            A key-value pair representing a column and data type that this transform can run
            against. The ``Schema`` parameter of the ``MLTransform`` may contain up to 100 of these
            structures.

            - **Name** *(string) --*

              The name of the column.

            - **DataType** *(string) --*

              The type of data in the column.

        - **Role** *(string) --*

          The name or Amazon Resource Name (ARN) of the IAM role with the required permissions. The
          required permissions include both AWS Glue service role permissions to AWS Glue
          resources, and Amazon S3 permissions required by the transform.

          * This role needs AWS Glue service role permissions to allow access to resources in AWS
          Glue. See `Attach a Policy to IAM Users That Access AWS Glue
          <https://docs.aws.amazon.com/glue/latest/dg/attach-policy-iam-user.html>`__ .

          * This role needs permission to your Amazon Simple Storage Service (Amazon S3) sources,
          targets, temporary directory, scripts, and any libraries used by the task run for this
          transform.

        - **GlueVersion** *(string) --*

          This value determines which version of AWS Glue this machine learning transform is
          compatible with. Glue 1.0 is recommended for most customers. If the value is not set, the
          Glue compatibility defaults to Glue 0.9. For more information, see `AWS Glue Versions
          <https://docs.aws.amazon.com/glue/latest/dg/release-notes.html#release-notes-versions>`__
          in the developer guide.

        - **MaxCapacity** *(float) --*

          The number of AWS Glue data processing units (DPUs) that are allocated to task runs for
          this transform. You can allocate from 2 to 100 DPUs; the default is 10. A DPU is a
          relative measure of processing power that consists of 4 vCPUs of compute capacity and 16
          GB of memory. For more information, see the `AWS Glue pricing page
          <http://aws.amazon.com/glue/pricing/>`__ .

           ``MaxCapacity`` is a mutually exclusive option with ``NumberOfWorkers`` and
           ``WorkerType`` .

          * If either ``NumberOfWorkers`` or ``WorkerType`` is set, then ``MaxCapacity`` cannot be
          set.

          * If ``MaxCapacity`` is set then neither ``NumberOfWorkers`` or ``WorkerType`` can be set.

          * If ``WorkerType`` is set, then ``NumberOfWorkers`` is required (and vice versa).

          * ``MaxCapacity`` and ``NumberOfWorkers`` must both be at least 1.

          When the ``WorkerType`` field is set to a value other than ``Standard`` , the
          ``MaxCapacity`` field is set automatically and becomes read-only.

        - **WorkerType** *(string) --*

          The type of predefined worker that is allocated when a task of this transform runs.
          Accepts a value of Standard, G.1X, or G.2X.

          * For the ``Standard`` worker type, each worker provides 4 vCPU, 16 GB of memory and a
          50GB disk, and 2 executors per worker.

          * For the ``G.1X`` worker type, each worker provides 4 vCPU, 16 GB of memory and a 64GB
          disk, and 1 executor per worker.

          * For the ``G.2X`` worker type, each worker provides 8 vCPU, 32 GB of memory and a 128GB
          disk, and 1 executor per worker.

           ``MaxCapacity`` is a mutually exclusive option with ``NumberOfWorkers`` and
           ``WorkerType`` .

          * If either ``NumberOfWorkers`` or ``WorkerType`` is set, then ``MaxCapacity`` cannot be
          set.

          * If ``MaxCapacity`` is set then neither ``NumberOfWorkers`` or ``WorkerType`` can be set.

          * If ``WorkerType`` is set, then ``NumberOfWorkers`` is required (and vice versa).

          * ``MaxCapacity`` and ``NumberOfWorkers`` must both be at least 1.

        - **NumberOfWorkers** *(integer) --*

          The number of workers of a defined ``workerType`` that are allocated when a task of the
          transform runs.

          If ``WorkerType`` is set, then ``NumberOfWorkers`` is required (and vice versa).

        - **Timeout** *(integer) --*

          The timeout in minutes of the machine learning transform.

        - **MaxRetries** *(integer) --*

          The maximum number of times to retry after an ``MLTaskRun`` of the machine learning
          transform fails.

    - **NextToken** *(string) --*

      A pagination token, if more results are available.
    """


_ClientGetMlTransformsSortTypeDef = TypedDict(
    "_ClientGetMlTransformsSortTypeDef", {"Column": str, "SortDirection": str}
)


class ClientGetMlTransformsSortTypeDef(_ClientGetMlTransformsSortTypeDef):
    """
    Type definition for `ClientGetMlTransforms` `Sort`

    The sorting criteria.

    - **Column** *(string) --* **[REQUIRED]**

      The column to be used in the sorting criteria that are associated with the machine learning
      transform.

    - **SortDirection** *(string) --* **[REQUIRED]**

      The sort direction to be used in the sorting criteria that are associated with the machine
      learning transform.
    """


_ClientGetPartitionResponsePartitionStorageDescriptorColumnsTypeDef = TypedDict(
    "_ClientGetPartitionResponsePartitionStorageDescriptorColumnsTypeDef",
    {"Name": str, "Type": str, "Comment": str, "Parameters": Dict[str, str]},
    total=False,
)


class ClientGetPartitionResponsePartitionStorageDescriptorColumnsTypeDef(
    _ClientGetPartitionResponsePartitionStorageDescriptorColumnsTypeDef
):
    """
    Type definition for `ClientGetPartitionResponsePartitionStorageDescriptor` `Columns`

    A column in a ``Table`` .

    - **Name** *(string) --*

      The name of the ``Column`` .

    - **Type** *(string) --*

      The data type of the ``Column`` .

    - **Comment** *(string) --*

      A free-form text comment.

    - **Parameters** *(dict) --*

      These key-value pairs define properties associated with the column.

      - *(string) --*

        - *(string) --*
    """


_ClientGetPartitionResponsePartitionStorageDescriptorSerdeInfoTypeDef = TypedDict(
    "_ClientGetPartitionResponsePartitionStorageDescriptorSerdeInfoTypeDef",
    {"Name": str, "SerializationLibrary": str, "Parameters": Dict[str, str]},
    total=False,
)


class ClientGetPartitionResponsePartitionStorageDescriptorSerdeInfoTypeDef(
    _ClientGetPartitionResponsePartitionStorageDescriptorSerdeInfoTypeDef
):
    """
    Type definition for `ClientGetPartitionResponsePartitionStorageDescriptor` `SerdeInfo`

    The serialization/deserialization (SerDe) information.

    - **Name** *(string) --*

      Name of the SerDe.

    - **SerializationLibrary** *(string) --*

      Usually the class that implements the SerDe. An example is
      ``org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`` .

    - **Parameters** *(dict) --*

      These key-value pairs define initialization parameters for the SerDe.

      - *(string) --*

        - *(string) --*
    """


_ClientGetPartitionResponsePartitionStorageDescriptorSkewedInfoTypeDef = TypedDict(
    "_ClientGetPartitionResponsePartitionStorageDescriptorSkewedInfoTypeDef",
    {
        "SkewedColumnNames": List[str],
        "SkewedColumnValues": List[str],
        "SkewedColumnValueLocationMaps": Dict[str, str],
    },
    total=False,
)


class ClientGetPartitionResponsePartitionStorageDescriptorSkewedInfoTypeDef(
    _ClientGetPartitionResponsePartitionStorageDescriptorSkewedInfoTypeDef
):
    """
    Type definition for `ClientGetPartitionResponsePartitionStorageDescriptor` `SkewedInfo`

    The information about values that appear frequently in a column (skewed values).

    - **SkewedColumnNames** *(list) --*

      A list of names of columns that contain skewed values.

      - *(string) --*

    - **SkewedColumnValues** *(list) --*

      A list of values that appear so frequently as to be considered skewed.

      - *(string) --*

    - **SkewedColumnValueLocationMaps** *(dict) --*

      A mapping of skewed values to the columns that contain them.

      - *(string) --*

        - *(string) --*
    """


_ClientGetPartitionResponsePartitionStorageDescriptorSortColumnsTypeDef = TypedDict(
    "_ClientGetPartitionResponsePartitionStorageDescriptorSortColumnsTypeDef",
    {"Column": str, "SortOrder": int},
    total=False,
)


class ClientGetPartitionResponsePartitionStorageDescriptorSortColumnsTypeDef(
    _ClientGetPartitionResponsePartitionStorageDescriptorSortColumnsTypeDef
):
    """
    Type definition for `ClientGetPartitionResponsePartitionStorageDescriptor` `SortColumns`

    Specifies the sort order of a sorted column.

    - **Column** *(string) --*

      The name of the column.

    - **SortOrder** *(integer) --*

      Indicates that the column is sorted in ascending order (``== 1`` ), or in descending
      order (``==0`` ).
    """


_ClientGetPartitionResponsePartitionStorageDescriptorTypeDef = TypedDict(
    "_ClientGetPartitionResponsePartitionStorageDescriptorTypeDef",
    {
        "Columns": List[
            ClientGetPartitionResponsePartitionStorageDescriptorColumnsTypeDef
        ],
        "Location": str,
        "InputFormat": str,
        "OutputFormat": str,
        "Compressed": bool,
        "NumberOfBuckets": int,
        "SerdeInfo": ClientGetPartitionResponsePartitionStorageDescriptorSerdeInfoTypeDef,
        "BucketColumns": List[str],
        "SortColumns": List[
            ClientGetPartitionResponsePartitionStorageDescriptorSortColumnsTypeDef
        ],
        "Parameters": Dict[str, str],
        "SkewedInfo": ClientGetPartitionResponsePartitionStorageDescriptorSkewedInfoTypeDef,
        "StoredAsSubDirectories": bool,
    },
    total=False,
)


class ClientGetPartitionResponsePartitionStorageDescriptorTypeDef(
    _ClientGetPartitionResponsePartitionStorageDescriptorTypeDef
):
    """
    Type definition for `ClientGetPartitionResponsePartition` `StorageDescriptor`

    Provides information about the physical location where the partition is stored.

    - **Columns** *(list) --*

      A list of the ``Columns`` in the table.

      - *(dict) --*

        A column in a ``Table`` .

        - **Name** *(string) --*

          The name of the ``Column`` .

        - **Type** *(string) --*

          The data type of the ``Column`` .

        - **Comment** *(string) --*

          A free-form text comment.

        - **Parameters** *(dict) --*

          These key-value pairs define properties associated with the column.

          - *(string) --*

            - *(string) --*

    - **Location** *(string) --*

      The physical location of the table. By default, this takes the form of the warehouse
      location, followed by the database location in the warehouse, followed by the table name.

    - **InputFormat** *(string) --*

      The input format: ``SequenceFileInputFormat`` (binary), or ``TextInputFormat`` , or a
      custom format.

    - **OutputFormat** *(string) --*

      The output format: ``SequenceFileOutputFormat`` (binary), or
      ``IgnoreKeyTextOutputFormat`` , or a custom format.

    - **Compressed** *(boolean) --*

       ``True`` if the data in the table is compressed, or ``False`` if not.

    - **NumberOfBuckets** *(integer) --*

      Must be specified if the table contains any dimension columns.

    - **SerdeInfo** *(dict) --*

      The serialization/deserialization (SerDe) information.

      - **Name** *(string) --*

        Name of the SerDe.

      - **SerializationLibrary** *(string) --*

        Usually the class that implements the SerDe. An example is
        ``org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`` .

      - **Parameters** *(dict) --*

        These key-value pairs define initialization parameters for the SerDe.

        - *(string) --*

          - *(string) --*

    - **BucketColumns** *(list) --*

      A list of reducer grouping columns, clustering columns, and bucketing columns in the
      table.

      - *(string) --*

    - **SortColumns** *(list) --*

      A list specifying the sort order of each bucket in the table.

      - *(dict) --*

        Specifies the sort order of a sorted column.

        - **Column** *(string) --*

          The name of the column.

        - **SortOrder** *(integer) --*

          Indicates that the column is sorted in ascending order (``== 1`` ), or in descending
          order (``==0`` ).

    - **Parameters** *(dict) --*

      The user-supplied properties in key-value form.

      - *(string) --*

        - *(string) --*

    - **SkewedInfo** *(dict) --*

      The information about values that appear frequently in a column (skewed values).

      - **SkewedColumnNames** *(list) --*

        A list of names of columns that contain skewed values.

        - *(string) --*

      - **SkewedColumnValues** *(list) --*

        A list of values that appear so frequently as to be considered skewed.

        - *(string) --*

      - **SkewedColumnValueLocationMaps** *(dict) --*

        A mapping of skewed values to the columns that contain them.

        - *(string) --*

          - *(string) --*

    - **StoredAsSubDirectories** *(boolean) --*

       ``True`` if the table data is stored in subdirectories, or ``False`` if not.
    """


_ClientGetPartitionResponsePartitionTypeDef = TypedDict(
    "_ClientGetPartitionResponsePartitionTypeDef",
    {
        "Values": List[str],
        "DatabaseName": str,
        "TableName": str,
        "CreationTime": datetime,
        "LastAccessTime": datetime,
        "StorageDescriptor": ClientGetPartitionResponsePartitionStorageDescriptorTypeDef,
        "Parameters": Dict[str, str],
        "LastAnalyzedTime": datetime,
    },
    total=False,
)


class ClientGetPartitionResponsePartitionTypeDef(
    _ClientGetPartitionResponsePartitionTypeDef
):
    """
    Type definition for `ClientGetPartitionResponse` `Partition`

    The requested information, in the form of a ``Partition`` object.

    - **Values** *(list) --*

      The values of the partition.

      - *(string) --*

    - **DatabaseName** *(string) --*

      The name of the catalog database in which to create the partition.

    - **TableName** *(string) --*

      The name of the database table in which to create the partition.

    - **CreationTime** *(datetime) --*

      The time at which the partition was created.

    - **LastAccessTime** *(datetime) --*

      The last time at which the partition was accessed.

    - **StorageDescriptor** *(dict) --*

      Provides information about the physical location where the partition is stored.

      - **Columns** *(list) --*

        A list of the ``Columns`` in the table.

        - *(dict) --*

          A column in a ``Table`` .

          - **Name** *(string) --*

            The name of the ``Column`` .

          - **Type** *(string) --*

            The data type of the ``Column`` .

          - **Comment** *(string) --*

            A free-form text comment.

          - **Parameters** *(dict) --*

            These key-value pairs define properties associated with the column.

            - *(string) --*

              - *(string) --*

      - **Location** *(string) --*

        The physical location of the table. By default, this takes the form of the warehouse
        location, followed by the database location in the warehouse, followed by the table name.

      - **InputFormat** *(string) --*

        The input format: ``SequenceFileInputFormat`` (binary), or ``TextInputFormat`` , or a
        custom format.

      - **OutputFormat** *(string) --*

        The output format: ``SequenceFileOutputFormat`` (binary), or
        ``IgnoreKeyTextOutputFormat`` , or a custom format.

      - **Compressed** *(boolean) --*

         ``True`` if the data in the table is compressed, or ``False`` if not.

      - **NumberOfBuckets** *(integer) --*

        Must be specified if the table contains any dimension columns.

      - **SerdeInfo** *(dict) --*

        The serialization/deserialization (SerDe) information.

        - **Name** *(string) --*

          Name of the SerDe.

        - **SerializationLibrary** *(string) --*

          Usually the class that implements the SerDe. An example is
          ``org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`` .

        - **Parameters** *(dict) --*

          These key-value pairs define initialization parameters for the SerDe.

          - *(string) --*

            - *(string) --*

      - **BucketColumns** *(list) --*

        A list of reducer grouping columns, clustering columns, and bucketing columns in the
        table.

        - *(string) --*

      - **SortColumns** *(list) --*

        A list specifying the sort order of each bucket in the table.

        - *(dict) --*

          Specifies the sort order of a sorted column.

          - **Column** *(string) --*

            The name of the column.

          - **SortOrder** *(integer) --*

            Indicates that the column is sorted in ascending order (``== 1`` ), or in descending
            order (``==0`` ).

      - **Parameters** *(dict) --*

        The user-supplied properties in key-value form.

        - *(string) --*

          - *(string) --*

      - **SkewedInfo** *(dict) --*

        The information about values that appear frequently in a column (skewed values).

        - **SkewedColumnNames** *(list) --*

          A list of names of columns that contain skewed values.

          - *(string) --*

        - **SkewedColumnValues** *(list) --*

          A list of values that appear so frequently as to be considered skewed.

          - *(string) --*

        - **SkewedColumnValueLocationMaps** *(dict) --*

          A mapping of skewed values to the columns that contain them.

          - *(string) --*

            - *(string) --*

      - **StoredAsSubDirectories** *(boolean) --*

         ``True`` if the table data is stored in subdirectories, or ``False`` if not.

    - **Parameters** *(dict) --*

      These key-value pairs define partition parameters.

      - *(string) --*

        - *(string) --*

    - **LastAnalyzedTime** *(datetime) --*

      The last time at which column statistics were computed for this partition.
    """


_ClientGetPartitionResponseTypeDef = TypedDict(
    "_ClientGetPartitionResponseTypeDef",
    {"Partition": ClientGetPartitionResponsePartitionTypeDef},
    total=False,
)


class ClientGetPartitionResponseTypeDef(_ClientGetPartitionResponseTypeDef):
    """
    Type definition for `ClientGetPartition` `Response`

    - **Partition** *(dict) --*

      The requested information, in the form of a ``Partition`` object.

      - **Values** *(list) --*

        The values of the partition.

        - *(string) --*

      - **DatabaseName** *(string) --*

        The name of the catalog database in which to create the partition.

      - **TableName** *(string) --*

        The name of the database table in which to create the partition.

      - **CreationTime** *(datetime) --*

        The time at which the partition was created.

      - **LastAccessTime** *(datetime) --*

        The last time at which the partition was accessed.

      - **StorageDescriptor** *(dict) --*

        Provides information about the physical location where the partition is stored.

        - **Columns** *(list) --*

          A list of the ``Columns`` in the table.

          - *(dict) --*

            A column in a ``Table`` .

            - **Name** *(string) --*

              The name of the ``Column`` .

            - **Type** *(string) --*

              The data type of the ``Column`` .

            - **Comment** *(string) --*

              A free-form text comment.

            - **Parameters** *(dict) --*

              These key-value pairs define properties associated with the column.

              - *(string) --*

                - *(string) --*

        - **Location** *(string) --*

          The physical location of the table. By default, this takes the form of the warehouse
          location, followed by the database location in the warehouse, followed by the table name.

        - **InputFormat** *(string) --*

          The input format: ``SequenceFileInputFormat`` (binary), or ``TextInputFormat`` , or a
          custom format.

        - **OutputFormat** *(string) --*

          The output format: ``SequenceFileOutputFormat`` (binary), or
          ``IgnoreKeyTextOutputFormat`` , or a custom format.

        - **Compressed** *(boolean) --*

           ``True`` if the data in the table is compressed, or ``False`` if not.

        - **NumberOfBuckets** *(integer) --*

          Must be specified if the table contains any dimension columns.

        - **SerdeInfo** *(dict) --*

          The serialization/deserialization (SerDe) information.

          - **Name** *(string) --*

            Name of the SerDe.

          - **SerializationLibrary** *(string) --*

            Usually the class that implements the SerDe. An example is
            ``org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`` .

          - **Parameters** *(dict) --*

            These key-value pairs define initialization parameters for the SerDe.

            - *(string) --*

              - *(string) --*

        - **BucketColumns** *(list) --*

          A list of reducer grouping columns, clustering columns, and bucketing columns in the
          table.

          - *(string) --*

        - **SortColumns** *(list) --*

          A list specifying the sort order of each bucket in the table.

          - *(dict) --*

            Specifies the sort order of a sorted column.

            - **Column** *(string) --*

              The name of the column.

            - **SortOrder** *(integer) --*

              Indicates that the column is sorted in ascending order (``== 1`` ), or in descending
              order (``==0`` ).

        - **Parameters** *(dict) --*

          The user-supplied properties in key-value form.

          - *(string) --*

            - *(string) --*

        - **SkewedInfo** *(dict) --*

          The information about values that appear frequently in a column (skewed values).

          - **SkewedColumnNames** *(list) --*

            A list of names of columns that contain skewed values.

            - *(string) --*

          - **SkewedColumnValues** *(list) --*

            A list of values that appear so frequently as to be considered skewed.

            - *(string) --*

          - **SkewedColumnValueLocationMaps** *(dict) --*

            A mapping of skewed values to the columns that contain them.

            - *(string) --*

              - *(string) --*

        - **StoredAsSubDirectories** *(boolean) --*

           ``True`` if the table data is stored in subdirectories, or ``False`` if not.

      - **Parameters** *(dict) --*

        These key-value pairs define partition parameters.

        - *(string) --*

          - *(string) --*

      - **LastAnalyzedTime** *(datetime) --*

        The last time at which column statistics were computed for this partition.
    """


_ClientGetPartitionsResponsePartitionsStorageDescriptorColumnsTypeDef = TypedDict(
    "_ClientGetPartitionsResponsePartitionsStorageDescriptorColumnsTypeDef",
    {"Name": str, "Type": str, "Comment": str, "Parameters": Dict[str, str]},
    total=False,
)


class ClientGetPartitionsResponsePartitionsStorageDescriptorColumnsTypeDef(
    _ClientGetPartitionsResponsePartitionsStorageDescriptorColumnsTypeDef
):
    """
    Type definition for `ClientGetPartitionsResponsePartitionsStorageDescriptor` `Columns`

    A column in a ``Table`` .

    - **Name** *(string) --*

      The name of the ``Column`` .

    - **Type** *(string) --*

      The data type of the ``Column`` .

    - **Comment** *(string) --*

      A free-form text comment.

    - **Parameters** *(dict) --*

      These key-value pairs define properties associated with the column.

      - *(string) --*

        - *(string) --*
    """


_ClientGetPartitionsResponsePartitionsStorageDescriptorSerdeInfoTypeDef = TypedDict(
    "_ClientGetPartitionsResponsePartitionsStorageDescriptorSerdeInfoTypeDef",
    {"Name": str, "SerializationLibrary": str, "Parameters": Dict[str, str]},
    total=False,
)


class ClientGetPartitionsResponsePartitionsStorageDescriptorSerdeInfoTypeDef(
    _ClientGetPartitionsResponsePartitionsStorageDescriptorSerdeInfoTypeDef
):
    """
    Type definition for `ClientGetPartitionsResponsePartitionsStorageDescriptor` `SerdeInfo`

    The serialization/deserialization (SerDe) information.

    - **Name** *(string) --*

      Name of the SerDe.

    - **SerializationLibrary** *(string) --*

      Usually the class that implements the SerDe. An example is
      ``org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`` .

    - **Parameters** *(dict) --*

      These key-value pairs define initialization parameters for the SerDe.

      - *(string) --*

        - *(string) --*
    """


_ClientGetPartitionsResponsePartitionsStorageDescriptorSkewedInfoTypeDef = TypedDict(
    "_ClientGetPartitionsResponsePartitionsStorageDescriptorSkewedInfoTypeDef",
    {
        "SkewedColumnNames": List[str],
        "SkewedColumnValues": List[str],
        "SkewedColumnValueLocationMaps": Dict[str, str],
    },
    total=False,
)


class ClientGetPartitionsResponsePartitionsStorageDescriptorSkewedInfoTypeDef(
    _ClientGetPartitionsResponsePartitionsStorageDescriptorSkewedInfoTypeDef
):
    """
    Type definition for `ClientGetPartitionsResponsePartitionsStorageDescriptor` `SkewedInfo`

    The information about values that appear frequently in a column (skewed values).

    - **SkewedColumnNames** *(list) --*

      A list of names of columns that contain skewed values.

      - *(string) --*

    - **SkewedColumnValues** *(list) --*

      A list of values that appear so frequently as to be considered skewed.

      - *(string) --*

    - **SkewedColumnValueLocationMaps** *(dict) --*

      A mapping of skewed values to the columns that contain them.

      - *(string) --*

        - *(string) --*
    """


_ClientGetPartitionsResponsePartitionsStorageDescriptorSortColumnsTypeDef = TypedDict(
    "_ClientGetPartitionsResponsePartitionsStorageDescriptorSortColumnsTypeDef",
    {"Column": str, "SortOrder": int},
    total=False,
)


class ClientGetPartitionsResponsePartitionsStorageDescriptorSortColumnsTypeDef(
    _ClientGetPartitionsResponsePartitionsStorageDescriptorSortColumnsTypeDef
):
    """
    Type definition for `ClientGetPartitionsResponsePartitionsStorageDescriptor` `SortColumns`

    Specifies the sort order of a sorted column.

    - **Column** *(string) --*

      The name of the column.

    - **SortOrder** *(integer) --*

      Indicates that the column is sorted in ascending order (``== 1`` ), or in
      descending order (``==0`` ).
    """


_ClientGetPartitionsResponsePartitionsStorageDescriptorTypeDef = TypedDict(
    "_ClientGetPartitionsResponsePartitionsStorageDescriptorTypeDef",
    {
        "Columns": List[
            ClientGetPartitionsResponsePartitionsStorageDescriptorColumnsTypeDef
        ],
        "Location": str,
        "InputFormat": str,
        "OutputFormat": str,
        "Compressed": bool,
        "NumberOfBuckets": int,
        "SerdeInfo": ClientGetPartitionsResponsePartitionsStorageDescriptorSerdeInfoTypeDef,
        "BucketColumns": List[str],
        "SortColumns": List[
            ClientGetPartitionsResponsePartitionsStorageDescriptorSortColumnsTypeDef
        ],
        "Parameters": Dict[str, str],
        "SkewedInfo": ClientGetPartitionsResponsePartitionsStorageDescriptorSkewedInfoTypeDef,
        "StoredAsSubDirectories": bool,
    },
    total=False,
)


class ClientGetPartitionsResponsePartitionsStorageDescriptorTypeDef(
    _ClientGetPartitionsResponsePartitionsStorageDescriptorTypeDef
):
    """
    Type definition for `ClientGetPartitionsResponsePartitions` `StorageDescriptor`

    Provides information about the physical location where the partition is stored.

    - **Columns** *(list) --*

      A list of the ``Columns`` in the table.

      - *(dict) --*

        A column in a ``Table`` .

        - **Name** *(string) --*

          The name of the ``Column`` .

        - **Type** *(string) --*

          The data type of the ``Column`` .

        - **Comment** *(string) --*

          A free-form text comment.

        - **Parameters** *(dict) --*

          These key-value pairs define properties associated with the column.

          - *(string) --*

            - *(string) --*

    - **Location** *(string) --*

      The physical location of the table. By default, this takes the form of the warehouse
      location, followed by the database location in the warehouse, followed by the table
      name.

    - **InputFormat** *(string) --*

      The input format: ``SequenceFileInputFormat`` (binary), or ``TextInputFormat`` , or a
      custom format.

    - **OutputFormat** *(string) --*

      The output format: ``SequenceFileOutputFormat`` (binary), or
      ``IgnoreKeyTextOutputFormat`` , or a custom format.

    - **Compressed** *(boolean) --*

       ``True`` if the data in the table is compressed, or ``False`` if not.

    - **NumberOfBuckets** *(integer) --*

      Must be specified if the table contains any dimension columns.

    - **SerdeInfo** *(dict) --*

      The serialization/deserialization (SerDe) information.

      - **Name** *(string) --*

        Name of the SerDe.

      - **SerializationLibrary** *(string) --*

        Usually the class that implements the SerDe. An example is
        ``org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`` .

      - **Parameters** *(dict) --*

        These key-value pairs define initialization parameters for the SerDe.

        - *(string) --*

          - *(string) --*

    - **BucketColumns** *(list) --*

      A list of reducer grouping columns, clustering columns, and bucketing columns in the
      table.

      - *(string) --*

    - **SortColumns** *(list) --*

      A list specifying the sort order of each bucket in the table.

      - *(dict) --*

        Specifies the sort order of a sorted column.

        - **Column** *(string) --*

          The name of the column.

        - **SortOrder** *(integer) --*

          Indicates that the column is sorted in ascending order (``== 1`` ), or in
          descending order (``==0`` ).

    - **Parameters** *(dict) --*

      The user-supplied properties in key-value form.

      - *(string) --*

        - *(string) --*

    - **SkewedInfo** *(dict) --*

      The information about values that appear frequently in a column (skewed values).

      - **SkewedColumnNames** *(list) --*

        A list of names of columns that contain skewed values.

        - *(string) --*

      - **SkewedColumnValues** *(list) --*

        A list of values that appear so frequently as to be considered skewed.

        - *(string) --*

      - **SkewedColumnValueLocationMaps** *(dict) --*

        A mapping of skewed values to the columns that contain them.

        - *(string) --*

          - *(string) --*

    - **StoredAsSubDirectories** *(boolean) --*

       ``True`` if the table data is stored in subdirectories, or ``False`` if not.
    """


_ClientGetPartitionsResponsePartitionsTypeDef = TypedDict(
    "_ClientGetPartitionsResponsePartitionsTypeDef",
    {
        "Values": List[str],
        "DatabaseName": str,
        "TableName": str,
        "CreationTime": datetime,
        "LastAccessTime": datetime,
        "StorageDescriptor": ClientGetPartitionsResponsePartitionsStorageDescriptorTypeDef,
        "Parameters": Dict[str, str],
        "LastAnalyzedTime": datetime,
    },
    total=False,
)


class ClientGetPartitionsResponsePartitionsTypeDef(
    _ClientGetPartitionsResponsePartitionsTypeDef
):
    """
    Type definition for `ClientGetPartitionsResponse` `Partitions`

    Represents a slice of table data.

    - **Values** *(list) --*

      The values of the partition.

      - *(string) --*

    - **DatabaseName** *(string) --*

      The name of the catalog database in which to create the partition.

    - **TableName** *(string) --*

      The name of the database table in which to create the partition.

    - **CreationTime** *(datetime) --*

      The time at which the partition was created.

    - **LastAccessTime** *(datetime) --*

      The last time at which the partition was accessed.

    - **StorageDescriptor** *(dict) --*

      Provides information about the physical location where the partition is stored.

      - **Columns** *(list) --*

        A list of the ``Columns`` in the table.

        - *(dict) --*

          A column in a ``Table`` .

          - **Name** *(string) --*

            The name of the ``Column`` .

          - **Type** *(string) --*

            The data type of the ``Column`` .

          - **Comment** *(string) --*

            A free-form text comment.

          - **Parameters** *(dict) --*

            These key-value pairs define properties associated with the column.

            - *(string) --*

              - *(string) --*

      - **Location** *(string) --*

        The physical location of the table. By default, this takes the form of the warehouse
        location, followed by the database location in the warehouse, followed by the table
        name.

      - **InputFormat** *(string) --*

        The input format: ``SequenceFileInputFormat`` (binary), or ``TextInputFormat`` , or a
        custom format.

      - **OutputFormat** *(string) --*

        The output format: ``SequenceFileOutputFormat`` (binary), or
        ``IgnoreKeyTextOutputFormat`` , or a custom format.

      - **Compressed** *(boolean) --*

         ``True`` if the data in the table is compressed, or ``False`` if not.

      - **NumberOfBuckets** *(integer) --*

        Must be specified if the table contains any dimension columns.

      - **SerdeInfo** *(dict) --*

        The serialization/deserialization (SerDe) information.

        - **Name** *(string) --*

          Name of the SerDe.

        - **SerializationLibrary** *(string) --*

          Usually the class that implements the SerDe. An example is
          ``org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`` .

        - **Parameters** *(dict) --*

          These key-value pairs define initialization parameters for the SerDe.

          - *(string) --*

            - *(string) --*

      - **BucketColumns** *(list) --*

        A list of reducer grouping columns, clustering columns, and bucketing columns in the
        table.

        - *(string) --*

      - **SortColumns** *(list) --*

        A list specifying the sort order of each bucket in the table.

        - *(dict) --*

          Specifies the sort order of a sorted column.

          - **Column** *(string) --*

            The name of the column.

          - **SortOrder** *(integer) --*

            Indicates that the column is sorted in ascending order (``== 1`` ), or in
            descending order (``==0`` ).

      - **Parameters** *(dict) --*

        The user-supplied properties in key-value form.

        - *(string) --*

          - *(string) --*

      - **SkewedInfo** *(dict) --*

        The information about values that appear frequently in a column (skewed values).

        - **SkewedColumnNames** *(list) --*

          A list of names of columns that contain skewed values.

          - *(string) --*

        - **SkewedColumnValues** *(list) --*

          A list of values that appear so frequently as to be considered skewed.

          - *(string) --*

        - **SkewedColumnValueLocationMaps** *(dict) --*

          A mapping of skewed values to the columns that contain them.

          - *(string) --*

            - *(string) --*

      - **StoredAsSubDirectories** *(boolean) --*

         ``True`` if the table data is stored in subdirectories, or ``False`` if not.

    - **Parameters** *(dict) --*

      These key-value pairs define partition parameters.

      - *(string) --*

        - *(string) --*

    - **LastAnalyzedTime** *(datetime) --*

      The last time at which column statistics were computed for this partition.
    """


_ClientGetPartitionsResponseTypeDef = TypedDict(
    "_ClientGetPartitionsResponseTypeDef",
    {
        "Partitions": List[ClientGetPartitionsResponsePartitionsTypeDef],
        "NextToken": str,
    },
    total=False,
)


class ClientGetPartitionsResponseTypeDef(_ClientGetPartitionsResponseTypeDef):
    """
    Type definition for `ClientGetPartitions` `Response`

    - **Partitions** *(list) --*

      A list of requested partitions.

      - *(dict) --*

        Represents a slice of table data.

        - **Values** *(list) --*

          The values of the partition.

          - *(string) --*

        - **DatabaseName** *(string) --*

          The name of the catalog database in which to create the partition.

        - **TableName** *(string) --*

          The name of the database table in which to create the partition.

        - **CreationTime** *(datetime) --*

          The time at which the partition was created.

        - **LastAccessTime** *(datetime) --*

          The last time at which the partition was accessed.

        - **StorageDescriptor** *(dict) --*

          Provides information about the physical location where the partition is stored.

          - **Columns** *(list) --*

            A list of the ``Columns`` in the table.

            - *(dict) --*

              A column in a ``Table`` .

              - **Name** *(string) --*

                The name of the ``Column`` .

              - **Type** *(string) --*

                The data type of the ``Column`` .

              - **Comment** *(string) --*

                A free-form text comment.

              - **Parameters** *(dict) --*

                These key-value pairs define properties associated with the column.

                - *(string) --*

                  - *(string) --*

          - **Location** *(string) --*

            The physical location of the table. By default, this takes the form of the warehouse
            location, followed by the database location in the warehouse, followed by the table
            name.

          - **InputFormat** *(string) --*

            The input format: ``SequenceFileInputFormat`` (binary), or ``TextInputFormat`` , or a
            custom format.

          - **OutputFormat** *(string) --*

            The output format: ``SequenceFileOutputFormat`` (binary), or
            ``IgnoreKeyTextOutputFormat`` , or a custom format.

          - **Compressed** *(boolean) --*

             ``True`` if the data in the table is compressed, or ``False`` if not.

          - **NumberOfBuckets** *(integer) --*

            Must be specified if the table contains any dimension columns.

          - **SerdeInfo** *(dict) --*

            The serialization/deserialization (SerDe) information.

            - **Name** *(string) --*

              Name of the SerDe.

            - **SerializationLibrary** *(string) --*

              Usually the class that implements the SerDe. An example is
              ``org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`` .

            - **Parameters** *(dict) --*

              These key-value pairs define initialization parameters for the SerDe.

              - *(string) --*

                - *(string) --*

          - **BucketColumns** *(list) --*

            A list of reducer grouping columns, clustering columns, and bucketing columns in the
            table.

            - *(string) --*

          - **SortColumns** *(list) --*

            A list specifying the sort order of each bucket in the table.

            - *(dict) --*

              Specifies the sort order of a sorted column.

              - **Column** *(string) --*

                The name of the column.

              - **SortOrder** *(integer) --*

                Indicates that the column is sorted in ascending order (``== 1`` ), or in
                descending order (``==0`` ).

          - **Parameters** *(dict) --*

            The user-supplied properties in key-value form.

            - *(string) --*

              - *(string) --*

          - **SkewedInfo** *(dict) --*

            The information about values that appear frequently in a column (skewed values).

            - **SkewedColumnNames** *(list) --*

              A list of names of columns that contain skewed values.

              - *(string) --*

            - **SkewedColumnValues** *(list) --*

              A list of values that appear so frequently as to be considered skewed.

              - *(string) --*

            - **SkewedColumnValueLocationMaps** *(dict) --*

              A mapping of skewed values to the columns that contain them.

              - *(string) --*

                - *(string) --*

          - **StoredAsSubDirectories** *(boolean) --*

             ``True`` if the table data is stored in subdirectories, or ``False`` if not.

        - **Parameters** *(dict) --*

          These key-value pairs define partition parameters.

          - *(string) --*

            - *(string) --*

        - **LastAnalyzedTime** *(datetime) --*

          The last time at which column statistics were computed for this partition.

    - **NextToken** *(string) --*

      A continuation token, if the returned list of partitions does not include the last one.
    """


_ClientGetPartitionsSegmentTypeDef = TypedDict(
    "_ClientGetPartitionsSegmentTypeDef", {"SegmentNumber": int, "TotalSegments": int}
)


class ClientGetPartitionsSegmentTypeDef(_ClientGetPartitionsSegmentTypeDef):
    """
    Type definition for `ClientGetPartitions` `Segment`

    The segment of the table's partitions to scan in this request.

    - **SegmentNumber** *(integer) --* **[REQUIRED]**

      The zero-based index number of the segment. For example, if the total number of segments is 4,
      ``SegmentNumber`` values range from 0 through 3.

    - **TotalSegments** *(integer) --* **[REQUIRED]**

      The total number of segments.
    """


_RequiredClientGetPlanLocationDynamoDBTypeDef = TypedDict(
    "_RequiredClientGetPlanLocationDynamoDBTypeDef", {"Name": str, "Value": str}
)
_OptionalClientGetPlanLocationDynamoDBTypeDef = TypedDict(
    "_OptionalClientGetPlanLocationDynamoDBTypeDef", {"Param": bool}, total=False
)


class ClientGetPlanLocationDynamoDBTypeDef(
    _RequiredClientGetPlanLocationDynamoDBTypeDef,
    _OptionalClientGetPlanLocationDynamoDBTypeDef,
):
    """
    Type definition for `ClientGetPlanLocation` `DynamoDB`

    An argument or property of a node.

    - **Name** *(string) --* **[REQUIRED]**

      The name of the argument or property.

    - **Value** *(string) --* **[REQUIRED]**

      The value of the argument or property.

    - **Param** *(boolean) --*

      True if the value is used as a parameter.
    """


_RequiredClientGetPlanLocationJdbcTypeDef = TypedDict(
    "_RequiredClientGetPlanLocationJdbcTypeDef", {"Name": str, "Value": str}
)
_OptionalClientGetPlanLocationJdbcTypeDef = TypedDict(
    "_OptionalClientGetPlanLocationJdbcTypeDef", {"Param": bool}, total=False
)


class ClientGetPlanLocationJdbcTypeDef(
    _RequiredClientGetPlanLocationJdbcTypeDef, _OptionalClientGetPlanLocationJdbcTypeDef
):
    """
    Type definition for `ClientGetPlanLocation` `Jdbc`

    An argument or property of a node.

    - **Name** *(string) --* **[REQUIRED]**

      The name of the argument or property.

    - **Value** *(string) --* **[REQUIRED]**

      The value of the argument or property.

    - **Param** *(boolean) --*

      True if the value is used as a parameter.
    """


_RequiredClientGetPlanLocationS3TypeDef = TypedDict(
    "_RequiredClientGetPlanLocationS3TypeDef", {"Name": str, "Value": str}
)
_OptionalClientGetPlanLocationS3TypeDef = TypedDict(
    "_OptionalClientGetPlanLocationS3TypeDef", {"Param": bool}, total=False
)


class ClientGetPlanLocationS3TypeDef(
    _RequiredClientGetPlanLocationS3TypeDef, _OptionalClientGetPlanLocationS3TypeDef
):
    """
    Type definition for `ClientGetPlanLocation` `S3`

    An argument or property of a node.

    - **Name** *(string) --* **[REQUIRED]**

      The name of the argument or property.

    - **Value** *(string) --* **[REQUIRED]**

      The value of the argument or property.

    - **Param** *(boolean) --*

      True if the value is used as a parameter.
    """


_ClientGetPlanLocationTypeDef = TypedDict(
    "_ClientGetPlanLocationTypeDef",
    {
        "Jdbc": List[ClientGetPlanLocationJdbcTypeDef],
        "S3": List[ClientGetPlanLocationS3TypeDef],
        "DynamoDB": List[ClientGetPlanLocationDynamoDBTypeDef],
    },
    total=False,
)


class ClientGetPlanLocationTypeDef(_ClientGetPlanLocationTypeDef):
    """
    Type definition for `ClientGetPlan` `Location`

    The parameters for the mapping.

    - **Jdbc** *(list) --*

      A JDBC location.

      - *(dict) --*

        An argument or property of a node.

        - **Name** *(string) --* **[REQUIRED]**

          The name of the argument or property.

        - **Value** *(string) --* **[REQUIRED]**

          The value of the argument or property.

        - **Param** *(boolean) --*

          True if the value is used as a parameter.

    - **S3** *(list) --*

      An Amazon Simple Storage Service (Amazon S3) location.

      - *(dict) --*

        An argument or property of a node.

        - **Name** *(string) --* **[REQUIRED]**

          The name of the argument or property.

        - **Value** *(string) --* **[REQUIRED]**

          The value of the argument or property.

        - **Param** *(boolean) --*

          True if the value is used as a parameter.

    - **DynamoDB** *(list) --*

      An Amazon DynamoDB table location.

      - *(dict) --*

        An argument or property of a node.

        - **Name** *(string) --* **[REQUIRED]**

          The name of the argument or property.

        - **Value** *(string) --* **[REQUIRED]**

          The value of the argument or property.

        - **Param** *(boolean) --*

          True if the value is used as a parameter.
    """


_ClientGetPlanMappingTypeDef = TypedDict(
    "_ClientGetPlanMappingTypeDef",
    {
        "SourceTable": str,
        "SourcePath": str,
        "SourceType": str,
        "TargetTable": str,
        "TargetPath": str,
        "TargetType": str,
    },
    total=False,
)


class ClientGetPlanMappingTypeDef(_ClientGetPlanMappingTypeDef):
    """
    Type definition for `ClientGetPlan` `Mapping`

    Defines a mapping.

    - **SourceTable** *(string) --*

      The name of the source table.

    - **SourcePath** *(string) --*

      The source path.

    - **SourceType** *(string) --*

      The source type.

    - **TargetTable** *(string) --*

      The target table.

    - **TargetPath** *(string) --*

      The target path.

    - **TargetType** *(string) --*

      The target type.
    """


_ClientGetPlanResponseTypeDef = TypedDict(
    "_ClientGetPlanResponseTypeDef",
    {"PythonScript": str, "ScalaCode": str},
    total=False,
)


class ClientGetPlanResponseTypeDef(_ClientGetPlanResponseTypeDef):
    """
    Type definition for `ClientGetPlan` `Response`

    - **PythonScript** *(string) --*

      A Python script to perform the mapping.

    - **ScalaCode** *(string) --*

      The Scala code to perform the mapping.
    """


_ClientGetPlanSinksTypeDef = TypedDict(
    "_ClientGetPlanSinksTypeDef", {"DatabaseName": str, "TableName": str}
)


class ClientGetPlanSinksTypeDef(_ClientGetPlanSinksTypeDef):
    """
    Type definition for `ClientGetPlan` `Sinks`

    Specifies a table definition in the AWS Glue Data Catalog.

    - **DatabaseName** *(string) --* **[REQUIRED]**

      The database in which the table metadata resides.

    - **TableName** *(string) --* **[REQUIRED]**

      The name of the table in question.
    """


_ClientGetPlanSourceTypeDef = TypedDict(
    "_ClientGetPlanSourceTypeDef", {"DatabaseName": str, "TableName": str}
)


class ClientGetPlanSourceTypeDef(_ClientGetPlanSourceTypeDef):
    """
    Type definition for `ClientGetPlan` `Source`

    The source table.

    - **DatabaseName** *(string) --* **[REQUIRED]**

      The database in which the table metadata resides.

    - **TableName** *(string) --* **[REQUIRED]**

      The name of the table in question.
    """


_ClientGetResourcePolicyResponseTypeDef = TypedDict(
    "_ClientGetResourcePolicyResponseTypeDef",
    {
        "PolicyInJson": str,
        "PolicyHash": str,
        "CreateTime": datetime,
        "UpdateTime": datetime,
    },
    total=False,
)


class ClientGetResourcePolicyResponseTypeDef(_ClientGetResourcePolicyResponseTypeDef):
    """
    Type definition for `ClientGetResourcePolicy` `Response`

    - **PolicyInJson** *(string) --*

      Contains the requested policy document, in JSON format.

    - **PolicyHash** *(string) --*

      Contains the hash value associated with this policy.

    - **CreateTime** *(datetime) --*

      The date and time at which the policy was created.

    - **UpdateTime** *(datetime) --*

      The date and time at which the policy was last updated.
    """


_ClientGetSecurityConfigurationResponseSecurityConfigurationEncryptionConfigurationCloudWatchEncryptionTypeDef = TypedDict(
    "_ClientGetSecurityConfigurationResponseSecurityConfigurationEncryptionConfigurationCloudWatchEncryptionTypeDef",
    {"CloudWatchEncryptionMode": str, "KmsKeyArn": str},
    total=False,
)


class ClientGetSecurityConfigurationResponseSecurityConfigurationEncryptionConfigurationCloudWatchEncryptionTypeDef(
    _ClientGetSecurityConfigurationResponseSecurityConfigurationEncryptionConfigurationCloudWatchEncryptionTypeDef
):
    """
    Type definition for `ClientGetSecurityConfigurationResponseSecurityConfigurationEncryptionConfiguration` `CloudWatchEncryption`

    The encryption configuration for Amazon CloudWatch.

    - **CloudWatchEncryptionMode** *(string) --*

      The encryption mode to use for CloudWatch data.

    - **KmsKeyArn** *(string) --*

      The Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
    """


_ClientGetSecurityConfigurationResponseSecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionTypeDef = TypedDict(
    "_ClientGetSecurityConfigurationResponseSecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionTypeDef",
    {"JobBookmarksEncryptionMode": str, "KmsKeyArn": str},
    total=False,
)


class ClientGetSecurityConfigurationResponseSecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionTypeDef(
    _ClientGetSecurityConfigurationResponseSecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionTypeDef
):
    """
    Type definition for `ClientGetSecurityConfigurationResponseSecurityConfigurationEncryptionConfiguration` `JobBookmarksEncryption`

    The encryption configuration for job bookmarks.

    - **JobBookmarksEncryptionMode** *(string) --*

      The encryption mode to use for job bookmarks data.

    - **KmsKeyArn** *(string) --*

      The Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
    """


_ClientGetSecurityConfigurationResponseSecurityConfigurationEncryptionConfigurationS3EncryptionTypeDef = TypedDict(
    "_ClientGetSecurityConfigurationResponseSecurityConfigurationEncryptionConfigurationS3EncryptionTypeDef",
    {"S3EncryptionMode": str, "KmsKeyArn": str},
    total=False,
)


class ClientGetSecurityConfigurationResponseSecurityConfigurationEncryptionConfigurationS3EncryptionTypeDef(
    _ClientGetSecurityConfigurationResponseSecurityConfigurationEncryptionConfigurationS3EncryptionTypeDef
):
    """
    Type definition for `ClientGetSecurityConfigurationResponseSecurityConfigurationEncryptionConfiguration` `S3Encryption`

    Specifies how Amazon Simple Storage Service (Amazon S3) data should be encrypted.

    - **S3EncryptionMode** *(string) --*

      The encryption mode to use for Amazon S3 data.

    - **KmsKeyArn** *(string) --*

      The Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
    """


_ClientGetSecurityConfigurationResponseSecurityConfigurationEncryptionConfigurationTypeDef = TypedDict(
    "_ClientGetSecurityConfigurationResponseSecurityConfigurationEncryptionConfigurationTypeDef",
    {
        "S3Encryption": List[
            ClientGetSecurityConfigurationResponseSecurityConfigurationEncryptionConfigurationS3EncryptionTypeDef
        ],
        "CloudWatchEncryption": ClientGetSecurityConfigurationResponseSecurityConfigurationEncryptionConfigurationCloudWatchEncryptionTypeDef,
        "JobBookmarksEncryption": ClientGetSecurityConfigurationResponseSecurityConfigurationEncryptionConfigurationJobBookmarksEncryptionTypeDef,
    },
    total=False,
)


class ClientGetSecurityConfigurationResponseSecurityConfigurationEncryptionConfigurationTypeDef(
    _ClientGetSecurityConfigurationResponseSecurityConfigurationEncryptionConfigurationTypeDef
):
    """
    Type definition for `ClientGetSecurityConfigurationResponseSecurityConfiguration` `EncryptionConfiguration`

    The encryption configuration associated with this security configuration.

    - **S3Encryption** *(list) --*

      The encryption configuration for Amazon Simple Storage Service (Amazon S3) data.

      - *(dict) --*

        Specifies how Amazon Simple Storage Service (Amazon S3) data should be encrypted.

        - **S3EncryptionMode** *(string) --*

          The encryption mode to use for Amazon S3 data.

        - **KmsKeyArn** *(string) --*

          The Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.

    - **CloudWatchEncryption** *(dict) --*

      The encryption configuration for Amazon CloudWatch.

      - **CloudWatchEncryptionMode** *(string) --*

        The encryption mode to use for CloudWatch data.

      - **KmsKeyArn** *(string) --*

        The Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.

    - **JobBookmarksEncryption** *(dict) --*

      The encryption configuration for job bookmarks.

      - **JobBookmarksEncryptionMode** *(string) --*

        The encryption mode to use for job bookmarks data.

      - **KmsKeyArn** *(string) --*

        The Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
    """


_ClientGetSecurityConfigurationResponseSecurityConfigurationTypeDef = TypedDict(
    "_ClientGetSecurityConfigurationResponseSecurityConfigurationTypeDef",
    {
        "Name": str,
        "CreatedTimeStamp": datetime,
        "EncryptionConfiguration": ClientGetSecurityConfigurationResponseSecurityConfigurationEncryptionConfigurationTypeDef,
    },
    total=False,
)


class ClientGetSecurityConfigurationResponseSecurityConfigurationTypeDef(
    _ClientGetSecurityConfigurationResponseSecurityConfigurationTypeDef
):
    """
    Type definition for `ClientGetSecurityConfigurationResponse` `SecurityConfiguration`

    The requested security configuration.

    - **Name** *(string) --*

      The name of the security configuration.

    - **CreatedTimeStamp** *(datetime) --*

      The time at which this security configuration was created.

    - **EncryptionConfiguration** *(dict) --*

      The encryption configuration associated with this security configuration.

      - **S3Encryption** *(list) --*

        The encryption configuration for Amazon Simple Storage Service (Amazon S3) data.

        - *(dict) --*

          Specifies how Amazon Simple Storage Service (Amazon S3) data should be encrypted.

          - **S3EncryptionMode** *(string) --*

            The encryption mode to use for Amazon S3 data.

          - **KmsKeyArn** *(string) --*

            The Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.

      - **CloudWatchEncryption** *(dict) --*

        The encryption configuration for Amazon CloudWatch.

        - **CloudWatchEncryptionMode** *(string) --*

          The encryption mode to use for CloudWatch data.

        - **KmsKeyArn** *(string) --*

          The Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.

      - **JobBookmarksEncryption** *(dict) --*

        The encryption configuration for job bookmarks.

        - **JobBookmarksEncryptionMode** *(string) --*

          The encryption mode to use for job bookmarks data.

        - **KmsKeyArn** *(string) --*

          The Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
    """


_ClientGetSecurityConfigurationResponseTypeDef = TypedDict(
    "_ClientGetSecurityConfigurationResponseTypeDef",
    {
        "SecurityConfiguration": ClientGetSecurityConfigurationResponseSecurityConfigurationTypeDef
    },
    total=False,
)


class ClientGetSecurityConfigurationResponseTypeDef(
    _ClientGetSecurityConfigurationResponseTypeDef
):
    """
    Type definition for `ClientGetSecurityConfiguration` `Response`

    - **SecurityConfiguration** *(dict) --*

      The requested security configuration.

      - **Name** *(string) --*

        The name of the security configuration.

      - **CreatedTimeStamp** *(datetime) --*

        The time at which this security configuration was created.

      - **EncryptionConfiguration** *(dict) --*

        The encryption configuration associated with this security configuration.

        - **S3Encryption** *(list) --*

          The encryption configuration for Amazon Simple Storage Service (Amazon S3) data.

          - *(dict) --*

            Specifies how Amazon Simple Storage Service (Amazon S3) data should be encrypted.

            - **S3EncryptionMode** *(string) --*

              The encryption mode to use for Amazon S3 data.

            - **KmsKeyArn** *(string) --*

              The Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.

        - **CloudWatchEncryption** *(dict) --*

          The encryption configuration for Amazon CloudWatch.

          - **CloudWatchEncryptionMode** *(string) --*

            The encryption mode to use for CloudWatch data.

          - **KmsKeyArn** *(string) --*

            The Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.

        - **JobBookmarksEncryption** *(dict) --*

          The encryption configuration for job bookmarks.

          - **JobBookmarksEncryptionMode** *(string) --*

            The encryption mode to use for job bookmarks data.

          - **KmsKeyArn** *(string) --*

            The Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
    """


_ClientGetSecurityConfigurationsResponseSecurityConfigurationsEncryptionConfigurationCloudWatchEncryptionTypeDef = TypedDict(
    "_ClientGetSecurityConfigurationsResponseSecurityConfigurationsEncryptionConfigurationCloudWatchEncryptionTypeDef",
    {"CloudWatchEncryptionMode": str, "KmsKeyArn": str},
    total=False,
)


class ClientGetSecurityConfigurationsResponseSecurityConfigurationsEncryptionConfigurationCloudWatchEncryptionTypeDef(
    _ClientGetSecurityConfigurationsResponseSecurityConfigurationsEncryptionConfigurationCloudWatchEncryptionTypeDef
):
    """
    Type definition for `ClientGetSecurityConfigurationsResponseSecurityConfigurationsEncryptionConfiguration` `CloudWatchEncryption`

    The encryption configuration for Amazon CloudWatch.

    - **CloudWatchEncryptionMode** *(string) --*

      The encryption mode to use for CloudWatch data.

    - **KmsKeyArn** *(string) --*

      The Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
    """


_ClientGetSecurityConfigurationsResponseSecurityConfigurationsEncryptionConfigurationJobBookmarksEncryptionTypeDef = TypedDict(
    "_ClientGetSecurityConfigurationsResponseSecurityConfigurationsEncryptionConfigurationJobBookmarksEncryptionTypeDef",
    {"JobBookmarksEncryptionMode": str, "KmsKeyArn": str},
    total=False,
)


class ClientGetSecurityConfigurationsResponseSecurityConfigurationsEncryptionConfigurationJobBookmarksEncryptionTypeDef(
    _ClientGetSecurityConfigurationsResponseSecurityConfigurationsEncryptionConfigurationJobBookmarksEncryptionTypeDef
):
    """
    Type definition for `ClientGetSecurityConfigurationsResponseSecurityConfigurationsEncryptionConfiguration` `JobBookmarksEncryption`

    The encryption configuration for job bookmarks.

    - **JobBookmarksEncryptionMode** *(string) --*

      The encryption mode to use for job bookmarks data.

    - **KmsKeyArn** *(string) --*

      The Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
    """


_ClientGetSecurityConfigurationsResponseSecurityConfigurationsEncryptionConfigurationS3EncryptionTypeDef = TypedDict(
    "_ClientGetSecurityConfigurationsResponseSecurityConfigurationsEncryptionConfigurationS3EncryptionTypeDef",
    {"S3EncryptionMode": str, "KmsKeyArn": str},
    total=False,
)


class ClientGetSecurityConfigurationsResponseSecurityConfigurationsEncryptionConfigurationS3EncryptionTypeDef(
    _ClientGetSecurityConfigurationsResponseSecurityConfigurationsEncryptionConfigurationS3EncryptionTypeDef
):
    """
    Type definition for `ClientGetSecurityConfigurationsResponseSecurityConfigurationsEncryptionConfiguration` `S3Encryption`

    Specifies how Amazon Simple Storage Service (Amazon S3) data should be encrypted.

    - **S3EncryptionMode** *(string) --*

      The encryption mode to use for Amazon S3 data.

    - **KmsKeyArn** *(string) --*

      The Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
    """


_ClientGetSecurityConfigurationsResponseSecurityConfigurationsEncryptionConfigurationTypeDef = TypedDict(
    "_ClientGetSecurityConfigurationsResponseSecurityConfigurationsEncryptionConfigurationTypeDef",
    {
        "S3Encryption": List[
            ClientGetSecurityConfigurationsResponseSecurityConfigurationsEncryptionConfigurationS3EncryptionTypeDef
        ],
        "CloudWatchEncryption": ClientGetSecurityConfigurationsResponseSecurityConfigurationsEncryptionConfigurationCloudWatchEncryptionTypeDef,
        "JobBookmarksEncryption": ClientGetSecurityConfigurationsResponseSecurityConfigurationsEncryptionConfigurationJobBookmarksEncryptionTypeDef,
    },
    total=False,
)


class ClientGetSecurityConfigurationsResponseSecurityConfigurationsEncryptionConfigurationTypeDef(
    _ClientGetSecurityConfigurationsResponseSecurityConfigurationsEncryptionConfigurationTypeDef
):
    """
    Type definition for `ClientGetSecurityConfigurationsResponseSecurityConfigurations` `EncryptionConfiguration`

    The encryption configuration associated with this security configuration.

    - **S3Encryption** *(list) --*

      The encryption configuration for Amazon Simple Storage Service (Amazon S3) data.

      - *(dict) --*

        Specifies how Amazon Simple Storage Service (Amazon S3) data should be encrypted.

        - **S3EncryptionMode** *(string) --*

          The encryption mode to use for Amazon S3 data.

        - **KmsKeyArn** *(string) --*

          The Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.

    - **CloudWatchEncryption** *(dict) --*

      The encryption configuration for Amazon CloudWatch.

      - **CloudWatchEncryptionMode** *(string) --*

        The encryption mode to use for CloudWatch data.

      - **KmsKeyArn** *(string) --*

        The Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.

    - **JobBookmarksEncryption** *(dict) --*

      The encryption configuration for job bookmarks.

      - **JobBookmarksEncryptionMode** *(string) --*

        The encryption mode to use for job bookmarks data.

      - **KmsKeyArn** *(string) --*

        The Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
    """


_ClientGetSecurityConfigurationsResponseSecurityConfigurationsTypeDef = TypedDict(
    "_ClientGetSecurityConfigurationsResponseSecurityConfigurationsTypeDef",
    {
        "Name": str,
        "CreatedTimeStamp": datetime,
        "EncryptionConfiguration": ClientGetSecurityConfigurationsResponseSecurityConfigurationsEncryptionConfigurationTypeDef,
    },
    total=False,
)


class ClientGetSecurityConfigurationsResponseSecurityConfigurationsTypeDef(
    _ClientGetSecurityConfigurationsResponseSecurityConfigurationsTypeDef
):
    """
    Type definition for `ClientGetSecurityConfigurationsResponse` `SecurityConfigurations`

    Specifies a security configuration.

    - **Name** *(string) --*

      The name of the security configuration.

    - **CreatedTimeStamp** *(datetime) --*

      The time at which this security configuration was created.

    - **EncryptionConfiguration** *(dict) --*

      The encryption configuration associated with this security configuration.

      - **S3Encryption** *(list) --*

        The encryption configuration for Amazon Simple Storage Service (Amazon S3) data.

        - *(dict) --*

          Specifies how Amazon Simple Storage Service (Amazon S3) data should be encrypted.

          - **S3EncryptionMode** *(string) --*

            The encryption mode to use for Amazon S3 data.

          - **KmsKeyArn** *(string) --*

            The Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.

      - **CloudWatchEncryption** *(dict) --*

        The encryption configuration for Amazon CloudWatch.

        - **CloudWatchEncryptionMode** *(string) --*

          The encryption mode to use for CloudWatch data.

        - **KmsKeyArn** *(string) --*

          The Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.

      - **JobBookmarksEncryption** *(dict) --*

        The encryption configuration for job bookmarks.

        - **JobBookmarksEncryptionMode** *(string) --*

          The encryption mode to use for job bookmarks data.

        - **KmsKeyArn** *(string) --*

          The Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
    """


_ClientGetSecurityConfigurationsResponseTypeDef = TypedDict(
    "_ClientGetSecurityConfigurationsResponseTypeDef",
    {
        "SecurityConfigurations": List[
            ClientGetSecurityConfigurationsResponseSecurityConfigurationsTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)


class ClientGetSecurityConfigurationsResponseTypeDef(
    _ClientGetSecurityConfigurationsResponseTypeDef
):
    """
    Type definition for `ClientGetSecurityConfigurations` `Response`

    - **SecurityConfigurations** *(list) --*

      A list of security configurations.

      - *(dict) --*

        Specifies a security configuration.

        - **Name** *(string) --*

          The name of the security configuration.

        - **CreatedTimeStamp** *(datetime) --*

          The time at which this security configuration was created.

        - **EncryptionConfiguration** *(dict) --*

          The encryption configuration associated with this security configuration.

          - **S3Encryption** *(list) --*

            The encryption configuration for Amazon Simple Storage Service (Amazon S3) data.

            - *(dict) --*

              Specifies how Amazon Simple Storage Service (Amazon S3) data should be encrypted.

              - **S3EncryptionMode** *(string) --*

                The encryption mode to use for Amazon S3 data.

              - **KmsKeyArn** *(string) --*

                The Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.

          - **CloudWatchEncryption** *(dict) --*

            The encryption configuration for Amazon CloudWatch.

            - **CloudWatchEncryptionMode** *(string) --*

              The encryption mode to use for CloudWatch data.

            - **KmsKeyArn** *(string) --*

              The Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.

          - **JobBookmarksEncryption** *(dict) --*

            The encryption configuration for job bookmarks.

            - **JobBookmarksEncryptionMode** *(string) --*

              The encryption mode to use for job bookmarks data.

            - **KmsKeyArn** *(string) --*

              The Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.

    - **NextToken** *(string) --*

      A continuation token, if there are more security configurations to return.
    """


_ClientGetTableResponseTablePartitionKeysTypeDef = TypedDict(
    "_ClientGetTableResponseTablePartitionKeysTypeDef",
    {"Name": str, "Type": str, "Comment": str, "Parameters": Dict[str, str]},
    total=False,
)


class ClientGetTableResponseTablePartitionKeysTypeDef(
    _ClientGetTableResponseTablePartitionKeysTypeDef
):
    """
    Type definition for `ClientGetTableResponseTable` `PartitionKeys`

    A column in a ``Table`` .

    - **Name** *(string) --*

      The name of the ``Column`` .

    - **Type** *(string) --*

      The data type of the ``Column`` .

    - **Comment** *(string) --*

      A free-form text comment.

    - **Parameters** *(dict) --*

      These key-value pairs define properties associated with the column.

      - *(string) --*

        - *(string) --*
    """


_ClientGetTableResponseTableStorageDescriptorColumnsTypeDef = TypedDict(
    "_ClientGetTableResponseTableStorageDescriptorColumnsTypeDef",
    {"Name": str, "Type": str, "Comment": str, "Parameters": Dict[str, str]},
    total=False,
)


class ClientGetTableResponseTableStorageDescriptorColumnsTypeDef(
    _ClientGetTableResponseTableStorageDescriptorColumnsTypeDef
):
    """
    Type definition for `ClientGetTableResponseTableStorageDescriptor` `Columns`

    A column in a ``Table`` .

    - **Name** *(string) --*

      The name of the ``Column`` .

    - **Type** *(string) --*

      The data type of the ``Column`` .

    - **Comment** *(string) --*

      A free-form text comment.

    - **Parameters** *(dict) --*

      These key-value pairs define properties associated with the column.

      - *(string) --*

        - *(string) --*
    """


_ClientGetTableResponseTableStorageDescriptorSerdeInfoTypeDef = TypedDict(
    "_ClientGetTableResponseTableStorageDescriptorSerdeInfoTypeDef",
    {"Name": str, "SerializationLibrary": str, "Parameters": Dict[str, str]},
    total=False,
)


class ClientGetTableResponseTableStorageDescriptorSerdeInfoTypeDef(
    _ClientGetTableResponseTableStorageDescriptorSerdeInfoTypeDef
):
    """
    Type definition for `ClientGetTableResponseTableStorageDescriptor` `SerdeInfo`

    The serialization/deserialization (SerDe) information.

    - **Name** *(string) --*

      Name of the SerDe.

    - **SerializationLibrary** *(string) --*

      Usually the class that implements the SerDe. An example is
      ``org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`` .

    - **Parameters** *(dict) --*

      These key-value pairs define initialization parameters for the SerDe.

      - *(string) --*

        - *(string) --*
    """


_ClientGetTableResponseTableStorageDescriptorSkewedInfoTypeDef = TypedDict(
    "_ClientGetTableResponseTableStorageDescriptorSkewedInfoTypeDef",
    {
        "SkewedColumnNames": List[str],
        "SkewedColumnValues": List[str],
        "SkewedColumnValueLocationMaps": Dict[str, str],
    },
    total=False,
)


class ClientGetTableResponseTableStorageDescriptorSkewedInfoTypeDef(
    _ClientGetTableResponseTableStorageDescriptorSkewedInfoTypeDef
):
    """
    Type definition for `ClientGetTableResponseTableStorageDescriptor` `SkewedInfo`

    The information about values that appear frequently in a column (skewed values).

    - **SkewedColumnNames** *(list) --*

      A list of names of columns that contain skewed values.

      - *(string) --*

    - **SkewedColumnValues** *(list) --*

      A list of values that appear so frequently as to be considered skewed.

      - *(string) --*

    - **SkewedColumnValueLocationMaps** *(dict) --*

      A mapping of skewed values to the columns that contain them.

      - *(string) --*

        - *(string) --*
    """


_ClientGetTableResponseTableStorageDescriptorSortColumnsTypeDef = TypedDict(
    "_ClientGetTableResponseTableStorageDescriptorSortColumnsTypeDef",
    {"Column": str, "SortOrder": int},
    total=False,
)


class ClientGetTableResponseTableStorageDescriptorSortColumnsTypeDef(
    _ClientGetTableResponseTableStorageDescriptorSortColumnsTypeDef
):
    """
    Type definition for `ClientGetTableResponseTableStorageDescriptor` `SortColumns`

    Specifies the sort order of a sorted column.

    - **Column** *(string) --*

      The name of the column.

    - **SortOrder** *(integer) --*

      Indicates that the column is sorted in ascending order (``== 1`` ), or in descending
      order (``==0`` ).
    """


_ClientGetTableResponseTableStorageDescriptorTypeDef = TypedDict(
    "_ClientGetTableResponseTableStorageDescriptorTypeDef",
    {
        "Columns": List[ClientGetTableResponseTableStorageDescriptorColumnsTypeDef],
        "Location": str,
        "InputFormat": str,
        "OutputFormat": str,
        "Compressed": bool,
        "NumberOfBuckets": int,
        "SerdeInfo": ClientGetTableResponseTableStorageDescriptorSerdeInfoTypeDef,
        "BucketColumns": List[str],
        "SortColumns": List[
            ClientGetTableResponseTableStorageDescriptorSortColumnsTypeDef
        ],
        "Parameters": Dict[str, str],
        "SkewedInfo": ClientGetTableResponseTableStorageDescriptorSkewedInfoTypeDef,
        "StoredAsSubDirectories": bool,
    },
    total=False,
)


class ClientGetTableResponseTableStorageDescriptorTypeDef(
    _ClientGetTableResponseTableStorageDescriptorTypeDef
):
    """
    Type definition for `ClientGetTableResponseTable` `StorageDescriptor`

    A storage descriptor containing information about the physical storage of this table.

    - **Columns** *(list) --*

      A list of the ``Columns`` in the table.

      - *(dict) --*

        A column in a ``Table`` .

        - **Name** *(string) --*

          The name of the ``Column`` .

        - **Type** *(string) --*

          The data type of the ``Column`` .

        - **Comment** *(string) --*

          A free-form text comment.

        - **Parameters** *(dict) --*

          These key-value pairs define properties associated with the column.

          - *(string) --*

            - *(string) --*

    - **Location** *(string) --*

      The physical location of the table. By default, this takes the form of the warehouse
      location, followed by the database location in the warehouse, followed by the table name.

    - **InputFormat** *(string) --*

      The input format: ``SequenceFileInputFormat`` (binary), or ``TextInputFormat`` , or a
      custom format.

    - **OutputFormat** *(string) --*

      The output format: ``SequenceFileOutputFormat`` (binary), or
      ``IgnoreKeyTextOutputFormat`` , or a custom format.

    - **Compressed** *(boolean) --*

       ``True`` if the data in the table is compressed, or ``False`` if not.

    - **NumberOfBuckets** *(integer) --*

      Must be specified if the table contains any dimension columns.

    - **SerdeInfo** *(dict) --*

      The serialization/deserialization (SerDe) information.

      - **Name** *(string) --*

        Name of the SerDe.

      - **SerializationLibrary** *(string) --*

        Usually the class that implements the SerDe. An example is
        ``org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`` .

      - **Parameters** *(dict) --*

        These key-value pairs define initialization parameters for the SerDe.

        - *(string) --*

          - *(string) --*

    - **BucketColumns** *(list) --*

      A list of reducer grouping columns, clustering columns, and bucketing columns in the
      table.

      - *(string) --*

    - **SortColumns** *(list) --*

      A list specifying the sort order of each bucket in the table.

      - *(dict) --*

        Specifies the sort order of a sorted column.

        - **Column** *(string) --*

          The name of the column.

        - **SortOrder** *(integer) --*

          Indicates that the column is sorted in ascending order (``== 1`` ), or in descending
          order (``==0`` ).

    - **Parameters** *(dict) --*

      The user-supplied properties in key-value form.

      - *(string) --*

        - *(string) --*

    - **SkewedInfo** *(dict) --*

      The information about values that appear frequently in a column (skewed values).

      - **SkewedColumnNames** *(list) --*

        A list of names of columns that contain skewed values.

        - *(string) --*

      - **SkewedColumnValues** *(list) --*

        A list of values that appear so frequently as to be considered skewed.

        - *(string) --*

      - **SkewedColumnValueLocationMaps** *(dict) --*

        A mapping of skewed values to the columns that contain them.

        - *(string) --*

          - *(string) --*

    - **StoredAsSubDirectories** *(boolean) --*

       ``True`` if the table data is stored in subdirectories, or ``False`` if not.
    """


_ClientGetTableResponseTableTypeDef = TypedDict(
    "_ClientGetTableResponseTableTypeDef",
    {
        "Name": str,
        "DatabaseName": str,
        "Description": str,
        "Owner": str,
        "CreateTime": datetime,
        "UpdateTime": datetime,
        "LastAccessTime": datetime,
        "LastAnalyzedTime": datetime,
        "Retention": int,
        "StorageDescriptor": ClientGetTableResponseTableStorageDescriptorTypeDef,
        "PartitionKeys": List[ClientGetTableResponseTablePartitionKeysTypeDef],
        "ViewOriginalText": str,
        "ViewExpandedText": str,
        "TableType": str,
        "Parameters": Dict[str, str],
        "CreatedBy": str,
        "IsRegisteredWithLakeFormation": bool,
    },
    total=False,
)


class ClientGetTableResponseTableTypeDef(_ClientGetTableResponseTableTypeDef):
    """
    Type definition for `ClientGetTableResponse` `Table`

    The ``Table`` object that defines the specified table.

    - **Name** *(string) --*

      The table name. For Hive compatibility, this must be entirely lowercase.

    - **DatabaseName** *(string) --*

      The name of the database where the table metadata resides. For Hive compatibility, this
      must be all lowercase.

    - **Description** *(string) --*

      A description of the table.

    - **Owner** *(string) --*

      The owner of the table.

    - **CreateTime** *(datetime) --*

      The time when the table definition was created in the Data Catalog.

    - **UpdateTime** *(datetime) --*

      The last time that the table was updated.

    - **LastAccessTime** *(datetime) --*

      The last time that the table was accessed. This is usually taken from HDFS, and might not
      be reliable.

    - **LastAnalyzedTime** *(datetime) --*

      The last time that column statistics were computed for this table.

    - **Retention** *(integer) --*

      The retention time for this table.

    - **StorageDescriptor** *(dict) --*

      A storage descriptor containing information about the physical storage of this table.

      - **Columns** *(list) --*

        A list of the ``Columns`` in the table.

        - *(dict) --*

          A column in a ``Table`` .

          - **Name** *(string) --*

            The name of the ``Column`` .

          - **Type** *(string) --*

            The data type of the ``Column`` .

          - **Comment** *(string) --*

            A free-form text comment.

          - **Parameters** *(dict) --*

            These key-value pairs define properties associated with the column.

            - *(string) --*

              - *(string) --*

      - **Location** *(string) --*

        The physical location of the table. By default, this takes the form of the warehouse
        location, followed by the database location in the warehouse, followed by the table name.

      - **InputFormat** *(string) --*

        The input format: ``SequenceFileInputFormat`` (binary), or ``TextInputFormat`` , or a
        custom format.

      - **OutputFormat** *(string) --*

        The output format: ``SequenceFileOutputFormat`` (binary), or
        ``IgnoreKeyTextOutputFormat`` , or a custom format.

      - **Compressed** *(boolean) --*

         ``True`` if the data in the table is compressed, or ``False`` if not.

      - **NumberOfBuckets** *(integer) --*

        Must be specified if the table contains any dimension columns.

      - **SerdeInfo** *(dict) --*

        The serialization/deserialization (SerDe) information.

        - **Name** *(string) --*

          Name of the SerDe.

        - **SerializationLibrary** *(string) --*

          Usually the class that implements the SerDe. An example is
          ``org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`` .

        - **Parameters** *(dict) --*

          These key-value pairs define initialization parameters for the SerDe.

          - *(string) --*

            - *(string) --*

      - **BucketColumns** *(list) --*

        A list of reducer grouping columns, clustering columns, and bucketing columns in the
        table.

        - *(string) --*

      - **SortColumns** *(list) --*

        A list specifying the sort order of each bucket in the table.

        - *(dict) --*

          Specifies the sort order of a sorted column.

          - **Column** *(string) --*

            The name of the column.

          - **SortOrder** *(integer) --*

            Indicates that the column is sorted in ascending order (``== 1`` ), or in descending
            order (``==0`` ).

      - **Parameters** *(dict) --*

        The user-supplied properties in key-value form.

        - *(string) --*

          - *(string) --*

      - **SkewedInfo** *(dict) --*

        The information about values that appear frequently in a column (skewed values).

        - **SkewedColumnNames** *(list) --*

          A list of names of columns that contain skewed values.

          - *(string) --*

        - **SkewedColumnValues** *(list) --*

          A list of values that appear so frequently as to be considered skewed.

          - *(string) --*

        - **SkewedColumnValueLocationMaps** *(dict) --*

          A mapping of skewed values to the columns that contain them.

          - *(string) --*

            - *(string) --*

      - **StoredAsSubDirectories** *(boolean) --*

         ``True`` if the table data is stored in subdirectories, or ``False`` if not.

    - **PartitionKeys** *(list) --*

      A list of columns by which the table is partitioned. Only primitive types are supported as
      partition keys.

      When you create a table used by Amazon Athena, and you do not specify any ``partitionKeys``
      , you must at least set the value of ``partitionKeys`` to an empty list. For example:

       ``"PartitionKeys": []``

      - *(dict) --*

        A column in a ``Table`` .

        - **Name** *(string) --*

          The name of the ``Column`` .

        - **Type** *(string) --*

          The data type of the ``Column`` .

        - **Comment** *(string) --*

          A free-form text comment.

        - **Parameters** *(dict) --*

          These key-value pairs define properties associated with the column.

          - *(string) --*

            - *(string) --*

    - **ViewOriginalText** *(string) --*

      If the table is a view, the original text of the view; otherwise ``null`` .

    - **ViewExpandedText** *(string) --*

      If the table is a view, the expanded text of the view; otherwise ``null`` .

    - **TableType** *(string) --*

      The type of this table (``EXTERNAL_TABLE`` , ``VIRTUAL_VIEW`` , etc.).

    - **Parameters** *(dict) --*

      These key-value pairs define properties associated with the table.

      - *(string) --*

        - *(string) --*

    - **CreatedBy** *(string) --*

      The person or entity who created the table.

    - **IsRegisteredWithLakeFormation** *(boolean) --*

      Indicates whether the table has been registered with AWS Lake Formation.
    """


_ClientGetTableResponseTypeDef = TypedDict(
    "_ClientGetTableResponseTypeDef",
    {"Table": ClientGetTableResponseTableTypeDef},
    total=False,
)


class ClientGetTableResponseTypeDef(_ClientGetTableResponseTypeDef):
    """
    Type definition for `ClientGetTable` `Response`

    - **Table** *(dict) --*

      The ``Table`` object that defines the specified table.

      - **Name** *(string) --*

        The table name. For Hive compatibility, this must be entirely lowercase.

      - **DatabaseName** *(string) --*

        The name of the database where the table metadata resides. For Hive compatibility, this
        must be all lowercase.

      - **Description** *(string) --*

        A description of the table.

      - **Owner** *(string) --*

        The owner of the table.

      - **CreateTime** *(datetime) --*

        The time when the table definition was created in the Data Catalog.

      - **UpdateTime** *(datetime) --*

        The last time that the table was updated.

      - **LastAccessTime** *(datetime) --*

        The last time that the table was accessed. This is usually taken from HDFS, and might not
        be reliable.

      - **LastAnalyzedTime** *(datetime) --*

        The last time that column statistics were computed for this table.

      - **Retention** *(integer) --*

        The retention time for this table.

      - **StorageDescriptor** *(dict) --*

        A storage descriptor containing information about the physical storage of this table.

        - **Columns** *(list) --*

          A list of the ``Columns`` in the table.

          - *(dict) --*

            A column in a ``Table`` .

            - **Name** *(string) --*

              The name of the ``Column`` .

            - **Type** *(string) --*

              The data type of the ``Column`` .

            - **Comment** *(string) --*

              A free-form text comment.

            - **Parameters** *(dict) --*

              These key-value pairs define properties associated with the column.

              - *(string) --*

                - *(string) --*

        - **Location** *(string) --*

          The physical location of the table. By default, this takes the form of the warehouse
          location, followed by the database location in the warehouse, followed by the table name.

        - **InputFormat** *(string) --*

          The input format: ``SequenceFileInputFormat`` (binary), or ``TextInputFormat`` , or a
          custom format.

        - **OutputFormat** *(string) --*

          The output format: ``SequenceFileOutputFormat`` (binary), or
          ``IgnoreKeyTextOutputFormat`` , or a custom format.

        - **Compressed** *(boolean) --*

           ``True`` if the data in the table is compressed, or ``False`` if not.

        - **NumberOfBuckets** *(integer) --*

          Must be specified if the table contains any dimension columns.

        - **SerdeInfo** *(dict) --*

          The serialization/deserialization (SerDe) information.

          - **Name** *(string) --*

            Name of the SerDe.

          - **SerializationLibrary** *(string) --*

            Usually the class that implements the SerDe. An example is
            ``org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`` .

          - **Parameters** *(dict) --*

            These key-value pairs define initialization parameters for the SerDe.

            - *(string) --*

              - *(string) --*

        - **BucketColumns** *(list) --*

          A list of reducer grouping columns, clustering columns, and bucketing columns in the
          table.

          - *(string) --*

        - **SortColumns** *(list) --*

          A list specifying the sort order of each bucket in the table.

          - *(dict) --*

            Specifies the sort order of a sorted column.

            - **Column** *(string) --*

              The name of the column.

            - **SortOrder** *(integer) --*

              Indicates that the column is sorted in ascending order (``== 1`` ), or in descending
              order (``==0`` ).

        - **Parameters** *(dict) --*

          The user-supplied properties in key-value form.

          - *(string) --*

            - *(string) --*

        - **SkewedInfo** *(dict) --*

          The information about values that appear frequently in a column (skewed values).

          - **SkewedColumnNames** *(list) --*

            A list of names of columns that contain skewed values.

            - *(string) --*

          - **SkewedColumnValues** *(list) --*

            A list of values that appear so frequently as to be considered skewed.

            - *(string) --*

          - **SkewedColumnValueLocationMaps** *(dict) --*

            A mapping of skewed values to the columns that contain them.

            - *(string) --*

              - *(string) --*

        - **StoredAsSubDirectories** *(boolean) --*

           ``True`` if the table data is stored in subdirectories, or ``False`` if not.

      - **PartitionKeys** *(list) --*

        A list of columns by which the table is partitioned. Only primitive types are supported as
        partition keys.

        When you create a table used by Amazon Athena, and you do not specify any ``partitionKeys``
        , you must at least set the value of ``partitionKeys`` to an empty list. For example:

         ``"PartitionKeys": []``

        - *(dict) --*

          A column in a ``Table`` .

          - **Name** *(string) --*

            The name of the ``Column`` .

          - **Type** *(string) --*

            The data type of the ``Column`` .

          - **Comment** *(string) --*

            A free-form text comment.

          - **Parameters** *(dict) --*

            These key-value pairs define properties associated with the column.

            - *(string) --*

              - *(string) --*

      - **ViewOriginalText** *(string) --*

        If the table is a view, the original text of the view; otherwise ``null`` .

      - **ViewExpandedText** *(string) --*

        If the table is a view, the expanded text of the view; otherwise ``null`` .

      - **TableType** *(string) --*

        The type of this table (``EXTERNAL_TABLE`` , ``VIRTUAL_VIEW`` , etc.).

      - **Parameters** *(dict) --*

        These key-value pairs define properties associated with the table.

        - *(string) --*

          - *(string) --*

      - **CreatedBy** *(string) --*

        The person or entity who created the table.

      - **IsRegisteredWithLakeFormation** *(boolean) --*

        Indicates whether the table has been registered with AWS Lake Formation.
    """


_ClientGetTableVersionResponseTableVersionTablePartitionKeysTypeDef = TypedDict(
    "_ClientGetTableVersionResponseTableVersionTablePartitionKeysTypeDef",
    {"Name": str, "Type": str, "Comment": str, "Parameters": Dict[str, str]},
    total=False,
)


class ClientGetTableVersionResponseTableVersionTablePartitionKeysTypeDef(
    _ClientGetTableVersionResponseTableVersionTablePartitionKeysTypeDef
):
    """
    Type definition for `ClientGetTableVersionResponseTableVersionTable` `PartitionKeys`

    A column in a ``Table`` .

    - **Name** *(string) --*

      The name of the ``Column`` .

    - **Type** *(string) --*

      The data type of the ``Column`` .

    - **Comment** *(string) --*

      A free-form text comment.

    - **Parameters** *(dict) --*

      These key-value pairs define properties associated with the column.

      - *(string) --*

        - *(string) --*
    """


_ClientGetTableVersionResponseTableVersionTableStorageDescriptorColumnsTypeDef = TypedDict(
    "_ClientGetTableVersionResponseTableVersionTableStorageDescriptorColumnsTypeDef",
    {"Name": str, "Type": str, "Comment": str, "Parameters": Dict[str, str]},
    total=False,
)


class ClientGetTableVersionResponseTableVersionTableStorageDescriptorColumnsTypeDef(
    _ClientGetTableVersionResponseTableVersionTableStorageDescriptorColumnsTypeDef
):
    """
    Type definition for `ClientGetTableVersionResponseTableVersionTableStorageDescriptor` `Columns`

    A column in a ``Table`` .

    - **Name** *(string) --*

      The name of the ``Column`` .

    - **Type** *(string) --*

      The data type of the ``Column`` .

    - **Comment** *(string) --*

      A free-form text comment.

    - **Parameters** *(dict) --*

      These key-value pairs define properties associated with the column.

      - *(string) --*

        - *(string) --*
    """


_ClientGetTableVersionResponseTableVersionTableStorageDescriptorSerdeInfoTypeDef = TypedDict(
    "_ClientGetTableVersionResponseTableVersionTableStorageDescriptorSerdeInfoTypeDef",
    {"Name": str, "SerializationLibrary": str, "Parameters": Dict[str, str]},
    total=False,
)


class ClientGetTableVersionResponseTableVersionTableStorageDescriptorSerdeInfoTypeDef(
    _ClientGetTableVersionResponseTableVersionTableStorageDescriptorSerdeInfoTypeDef
):
    """
    Type definition for `ClientGetTableVersionResponseTableVersionTableStorageDescriptor` `SerdeInfo`

    The serialization/deserialization (SerDe) information.

    - **Name** *(string) --*

      Name of the SerDe.

    - **SerializationLibrary** *(string) --*

      Usually the class that implements the SerDe. An example is
      ``org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`` .

    - **Parameters** *(dict) --*

      These key-value pairs define initialization parameters for the SerDe.

      - *(string) --*

        - *(string) --*
    """


_ClientGetTableVersionResponseTableVersionTableStorageDescriptorSkewedInfoTypeDef = TypedDict(
    "_ClientGetTableVersionResponseTableVersionTableStorageDescriptorSkewedInfoTypeDef",
    {
        "SkewedColumnNames": List[str],
        "SkewedColumnValues": List[str],
        "SkewedColumnValueLocationMaps": Dict[str, str],
    },
    total=False,
)


class ClientGetTableVersionResponseTableVersionTableStorageDescriptorSkewedInfoTypeDef(
    _ClientGetTableVersionResponseTableVersionTableStorageDescriptorSkewedInfoTypeDef
):
    """
    Type definition for `ClientGetTableVersionResponseTableVersionTableStorageDescriptor` `SkewedInfo`

    The information about values that appear frequently in a column (skewed values).

    - **SkewedColumnNames** *(list) --*

      A list of names of columns that contain skewed values.

      - *(string) --*

    - **SkewedColumnValues** *(list) --*

      A list of values that appear so frequently as to be considered skewed.

      - *(string) --*

    - **SkewedColumnValueLocationMaps** *(dict) --*

      A mapping of skewed values to the columns that contain them.

      - *(string) --*

        - *(string) --*
    """


_ClientGetTableVersionResponseTableVersionTableStorageDescriptorSortColumnsTypeDef = TypedDict(
    "_ClientGetTableVersionResponseTableVersionTableStorageDescriptorSortColumnsTypeDef",
    {"Column": str, "SortOrder": int},
    total=False,
)


class ClientGetTableVersionResponseTableVersionTableStorageDescriptorSortColumnsTypeDef(
    _ClientGetTableVersionResponseTableVersionTableStorageDescriptorSortColumnsTypeDef
):
    """
    Type definition for `ClientGetTableVersionResponseTableVersionTableStorageDescriptor` `SortColumns`

    Specifies the sort order of a sorted column.

    - **Column** *(string) --*

      The name of the column.

    - **SortOrder** *(integer) --*

      Indicates that the column is sorted in ascending order (``== 1`` ), or in
      descending order (``==0`` ).
    """


_ClientGetTableVersionResponseTableVersionTableStorageDescriptorTypeDef = TypedDict(
    "_ClientGetTableVersionResponseTableVersionTableStorageDescriptorTypeDef",
    {
        "Columns": List[
            ClientGetTableVersionResponseTableVersionTableStorageDescriptorColumnsTypeDef
        ],
        "Location": str,
        "InputFormat": str,
        "OutputFormat": str,
        "Compressed": bool,
        "NumberOfBuckets": int,
        "SerdeInfo": ClientGetTableVersionResponseTableVersionTableStorageDescriptorSerdeInfoTypeDef,
        "BucketColumns": List[str],
        "SortColumns": List[
            ClientGetTableVersionResponseTableVersionTableStorageDescriptorSortColumnsTypeDef
        ],
        "Parameters": Dict[str, str],
        "SkewedInfo": ClientGetTableVersionResponseTableVersionTableStorageDescriptorSkewedInfoTypeDef,
        "StoredAsSubDirectories": bool,
    },
    total=False,
)


class ClientGetTableVersionResponseTableVersionTableStorageDescriptorTypeDef(
    _ClientGetTableVersionResponseTableVersionTableStorageDescriptorTypeDef
):
    """
    Type definition for `ClientGetTableVersionResponseTableVersionTable` `StorageDescriptor`

    A storage descriptor containing information about the physical storage of this table.

    - **Columns** *(list) --*

      A list of the ``Columns`` in the table.

      - *(dict) --*

        A column in a ``Table`` .

        - **Name** *(string) --*

          The name of the ``Column`` .

        - **Type** *(string) --*

          The data type of the ``Column`` .

        - **Comment** *(string) --*

          A free-form text comment.

        - **Parameters** *(dict) --*

          These key-value pairs define properties associated with the column.

          - *(string) --*

            - *(string) --*

    - **Location** *(string) --*

      The physical location of the table. By default, this takes the form of the warehouse
      location, followed by the database location in the warehouse, followed by the table
      name.

    - **InputFormat** *(string) --*

      The input format: ``SequenceFileInputFormat`` (binary), or ``TextInputFormat`` , or a
      custom format.

    - **OutputFormat** *(string) --*

      The output format: ``SequenceFileOutputFormat`` (binary), or
      ``IgnoreKeyTextOutputFormat`` , or a custom format.

    - **Compressed** *(boolean) --*

       ``True`` if the data in the table is compressed, or ``False`` if not.

    - **NumberOfBuckets** *(integer) --*

      Must be specified if the table contains any dimension columns.

    - **SerdeInfo** *(dict) --*

      The serialization/deserialization (SerDe) information.

      - **Name** *(string) --*

        Name of the SerDe.

      - **SerializationLibrary** *(string) --*

        Usually the class that implements the SerDe. An example is
        ``org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`` .

      - **Parameters** *(dict) --*

        These key-value pairs define initialization parameters for the SerDe.

        - *(string) --*

          - *(string) --*

    - **BucketColumns** *(list) --*

      A list of reducer grouping columns, clustering columns, and bucketing columns in the
      table.

      - *(string) --*

    - **SortColumns** *(list) --*

      A list specifying the sort order of each bucket in the table.

      - *(dict) --*

        Specifies the sort order of a sorted column.

        - **Column** *(string) --*

          The name of the column.

        - **SortOrder** *(integer) --*

          Indicates that the column is sorted in ascending order (``== 1`` ), or in
          descending order (``==0`` ).

    - **Parameters** *(dict) --*

      The user-supplied properties in key-value form.

      - *(string) --*

        - *(string) --*

    - **SkewedInfo** *(dict) --*

      The information about values that appear frequently in a column (skewed values).

      - **SkewedColumnNames** *(list) --*

        A list of names of columns that contain skewed values.

        - *(string) --*

      - **SkewedColumnValues** *(list) --*

        A list of values that appear so frequently as to be considered skewed.

        - *(string) --*

      - **SkewedColumnValueLocationMaps** *(dict) --*

        A mapping of skewed values to the columns that contain them.

        - *(string) --*

          - *(string) --*

    - **StoredAsSubDirectories** *(boolean) --*

       ``True`` if the table data is stored in subdirectories, or ``False`` if not.
    """


_ClientGetTableVersionResponseTableVersionTableTypeDef = TypedDict(
    "_ClientGetTableVersionResponseTableVersionTableTypeDef",
    {
        "Name": str,
        "DatabaseName": str,
        "Description": str,
        "Owner": str,
        "CreateTime": datetime,
        "UpdateTime": datetime,
        "LastAccessTime": datetime,
        "LastAnalyzedTime": datetime,
        "Retention": int,
        "StorageDescriptor": ClientGetTableVersionResponseTableVersionTableStorageDescriptorTypeDef,
        "PartitionKeys": List[
            ClientGetTableVersionResponseTableVersionTablePartitionKeysTypeDef
        ],
        "ViewOriginalText": str,
        "ViewExpandedText": str,
        "TableType": str,
        "Parameters": Dict[str, str],
        "CreatedBy": str,
        "IsRegisteredWithLakeFormation": bool,
    },
    total=False,
)


class ClientGetTableVersionResponseTableVersionTableTypeDef(
    _ClientGetTableVersionResponseTableVersionTableTypeDef
):
    """
    Type definition for `ClientGetTableVersionResponseTableVersion` `Table`

    The table in question.

    - **Name** *(string) --*

      The table name. For Hive compatibility, this must be entirely lowercase.

    - **DatabaseName** *(string) --*

      The name of the database where the table metadata resides. For Hive compatibility, this
      must be all lowercase.

    - **Description** *(string) --*

      A description of the table.

    - **Owner** *(string) --*

      The owner of the table.

    - **CreateTime** *(datetime) --*

      The time when the table definition was created in the Data Catalog.

    - **UpdateTime** *(datetime) --*

      The last time that the table was updated.

    - **LastAccessTime** *(datetime) --*

      The last time that the table was accessed. This is usually taken from HDFS, and might not
      be reliable.

    - **LastAnalyzedTime** *(datetime) --*

      The last time that column statistics were computed for this table.

    - **Retention** *(integer) --*

      The retention time for this table.

    - **StorageDescriptor** *(dict) --*

      A storage descriptor containing information about the physical storage of this table.

      - **Columns** *(list) --*

        A list of the ``Columns`` in the table.

        - *(dict) --*

          A column in a ``Table`` .

          - **Name** *(string) --*

            The name of the ``Column`` .

          - **Type** *(string) --*

            The data type of the ``Column`` .

          - **Comment** *(string) --*

            A free-form text comment.

          - **Parameters** *(dict) --*

            These key-value pairs define properties associated with the column.

            - *(string) --*

              - *(string) --*

      - **Location** *(string) --*

        The physical location of the table. By default, this takes the form of the warehouse
        location, followed by the database location in the warehouse, followed by the table
        name.

      - **InputFormat** *(string) --*

        The input format: ``SequenceFileInputFormat`` (binary), or ``TextInputFormat`` , or a
        custom format.

      - **OutputFormat** *(string) --*

        The output format: ``SequenceFileOutputFormat`` (binary), or
        ``IgnoreKeyTextOutputFormat`` , or a custom format.

      - **Compressed** *(boolean) --*

         ``True`` if the data in the table is compressed, or ``False`` if not.

      - **NumberOfBuckets** *(integer) --*

        Must be specified if the table contains any dimension columns.

      - **SerdeInfo** *(dict) --*

        The serialization/deserialization (SerDe) information.

        - **Name** *(string) --*

          Name of the SerDe.

        - **SerializationLibrary** *(string) --*

          Usually the class that implements the SerDe. An example is
          ``org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`` .

        - **Parameters** *(dict) --*

          These key-value pairs define initialization parameters for the SerDe.

          - *(string) --*

            - *(string) --*

      - **BucketColumns** *(list) --*

        A list of reducer grouping columns, clustering columns, and bucketing columns in the
        table.

        - *(string) --*

      - **SortColumns** *(list) --*

        A list specifying the sort order of each bucket in the table.

        - *(dict) --*

          Specifies the sort order of a sorted column.

          - **Column** *(string) --*

            The name of the column.

          - **SortOrder** *(integer) --*

            Indicates that the column is sorted in ascending order (``== 1`` ), or in
            descending order (``==0`` ).

      - **Parameters** *(dict) --*

        The user-supplied properties in key-value form.

        - *(string) --*

          - *(string) --*

      - **SkewedInfo** *(dict) --*

        The information about values that appear frequently in a column (skewed values).

        - **SkewedColumnNames** *(list) --*

          A list of names of columns that contain skewed values.

          - *(string) --*

        - **SkewedColumnValues** *(list) --*

          A list of values that appear so frequently as to be considered skewed.

          - *(string) --*

        - **SkewedColumnValueLocationMaps** *(dict) --*

          A mapping of skewed values to the columns that contain them.

          - *(string) --*

            - *(string) --*

      - **StoredAsSubDirectories** *(boolean) --*

         ``True`` if the table data is stored in subdirectories, or ``False`` if not.

    - **PartitionKeys** *(list) --*

      A list of columns by which the table is partitioned. Only primitive types are supported
      as partition keys.

      When you create a table used by Amazon Athena, and you do not specify any
      ``partitionKeys`` , you must at least set the value of ``partitionKeys`` to an empty
      list. For example:

       ``"PartitionKeys": []``

      - *(dict) --*

        A column in a ``Table`` .

        - **Name** *(string) --*

          The name of the ``Column`` .

        - **Type** *(string) --*

          The data type of the ``Column`` .

        - **Comment** *(string) --*

          A free-form text comment.

        - **Parameters** *(dict) --*

          These key-value pairs define properties associated with the column.

          - *(string) --*

            - *(string) --*

    - **ViewOriginalText** *(string) --*

      If the table is a view, the original text of the view; otherwise ``null`` .

    - **ViewExpandedText** *(string) --*

      If the table is a view, the expanded text of the view; otherwise ``null`` .

    - **TableType** *(string) --*

      The type of this table (``EXTERNAL_TABLE`` , ``VIRTUAL_VIEW`` , etc.).

    - **Parameters** *(dict) --*

      These key-value pairs define properties associated with the table.

      - *(string) --*

        - *(string) --*

    - **CreatedBy** *(string) --*

      The person or entity who created the table.

    - **IsRegisteredWithLakeFormation** *(boolean) --*

      Indicates whether the table has been registered with AWS Lake Formation.
    """


_ClientGetTableVersionResponseTableVersionTypeDef = TypedDict(
    "_ClientGetTableVersionResponseTableVersionTypeDef",
    {"Table": ClientGetTableVersionResponseTableVersionTableTypeDef, "VersionId": str},
    total=False,
)


class ClientGetTableVersionResponseTableVersionTypeDef(
    _ClientGetTableVersionResponseTableVersionTypeDef
):
    """
    Type definition for `ClientGetTableVersionResponse` `TableVersion`

    The requested table version.

    - **Table** *(dict) --*

      The table in question.

      - **Name** *(string) --*

        The table name. For Hive compatibility, this must be entirely lowercase.

      - **DatabaseName** *(string) --*

        The name of the database where the table metadata resides. For Hive compatibility, this
        must be all lowercase.

      - **Description** *(string) --*

        A description of the table.

      - **Owner** *(string) --*

        The owner of the table.

      - **CreateTime** *(datetime) --*

        The time when the table definition was created in the Data Catalog.

      - **UpdateTime** *(datetime) --*

        The last time that the table was updated.

      - **LastAccessTime** *(datetime) --*

        The last time that the table was accessed. This is usually taken from HDFS, and might not
        be reliable.

      - **LastAnalyzedTime** *(datetime) --*

        The last time that column statistics were computed for this table.

      - **Retention** *(integer) --*

        The retention time for this table.

      - **StorageDescriptor** *(dict) --*

        A storage descriptor containing information about the physical storage of this table.

        - **Columns** *(list) --*

          A list of the ``Columns`` in the table.

          - *(dict) --*

            A column in a ``Table`` .

            - **Name** *(string) --*

              The name of the ``Column`` .

            - **Type** *(string) --*

              The data type of the ``Column`` .

            - **Comment** *(string) --*

              A free-form text comment.

            - **Parameters** *(dict) --*

              These key-value pairs define properties associated with the column.

              - *(string) --*

                - *(string) --*

        - **Location** *(string) --*

          The physical location of the table. By default, this takes the form of the warehouse
          location, followed by the database location in the warehouse, followed by the table
          name.

        - **InputFormat** *(string) --*

          The input format: ``SequenceFileInputFormat`` (binary), or ``TextInputFormat`` , or a
          custom format.

        - **OutputFormat** *(string) --*

          The output format: ``SequenceFileOutputFormat`` (binary), or
          ``IgnoreKeyTextOutputFormat`` , or a custom format.

        - **Compressed** *(boolean) --*

           ``True`` if the data in the table is compressed, or ``False`` if not.

        - **NumberOfBuckets** *(integer) --*

          Must be specified if the table contains any dimension columns.

        - **SerdeInfo** *(dict) --*

          The serialization/deserialization (SerDe) information.

          - **Name** *(string) --*

            Name of the SerDe.

          - **SerializationLibrary** *(string) --*

            Usually the class that implements the SerDe. An example is
            ``org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`` .

          - **Parameters** *(dict) --*

            These key-value pairs define initialization parameters for the SerDe.

            - *(string) --*

              - *(string) --*

        - **BucketColumns** *(list) --*

          A list of reducer grouping columns, clustering columns, and bucketing columns in the
          table.

          - *(string) --*

        - **SortColumns** *(list) --*

          A list specifying the sort order of each bucket in the table.

          - *(dict) --*

            Specifies the sort order of a sorted column.

            - **Column** *(string) --*

              The name of the column.

            - **SortOrder** *(integer) --*

              Indicates that the column is sorted in ascending order (``== 1`` ), or in
              descending order (``==0`` ).

        - **Parameters** *(dict) --*

          The user-supplied properties in key-value form.

          - *(string) --*

            - *(string) --*

        - **SkewedInfo** *(dict) --*

          The information about values that appear frequently in a column (skewed values).

          - **SkewedColumnNames** *(list) --*

            A list of names of columns that contain skewed values.

            - *(string) --*

          - **SkewedColumnValues** *(list) --*

            A list of values that appear so frequently as to be considered skewed.

            - *(string) --*

          - **SkewedColumnValueLocationMaps** *(dict) --*

            A mapping of skewed values to the columns that contain them.

            - *(string) --*

              - *(string) --*

        - **StoredAsSubDirectories** *(boolean) --*

           ``True`` if the table data is stored in subdirectories, or ``False`` if not.

      - **PartitionKeys** *(list) --*

        A list of columns by which the table is partitioned. Only primitive types are supported
        as partition keys.

        When you create a table used by Amazon Athena, and you do not specify any
        ``partitionKeys`` , you must at least set the value of ``partitionKeys`` to an empty
        list. For example:

         ``"PartitionKeys": []``

        - *(dict) --*

          A column in a ``Table`` .

          - **Name** *(string) --*

            The name of the ``Column`` .

          - **Type** *(string) --*

            The data type of the ``Column`` .

          - **Comment** *(string) --*

            A free-form text comment.

          - **Parameters** *(dict) --*

            These key-value pairs define properties associated with the column.

            - *(string) --*

              - *(string) --*

      - **ViewOriginalText** *(string) --*

        If the table is a view, the original text of the view; otherwise ``null`` .

      - **ViewExpandedText** *(string) --*

        If the table is a view, the expanded text of the view; otherwise ``null`` .

      - **TableType** *(string) --*

        The type of this table (``EXTERNAL_TABLE`` , ``VIRTUAL_VIEW`` , etc.).

      - **Parameters** *(dict) --*

        These key-value pairs define properties associated with the table.

        - *(string) --*

          - *(string) --*

      - **CreatedBy** *(string) --*

        The person or entity who created the table.

      - **IsRegisteredWithLakeFormation** *(boolean) --*

        Indicates whether the table has been registered with AWS Lake Formation.

    - **VersionId** *(string) --*

      The ID value that identifies this table version. A ``VersionId`` is a string representation
      of an integer. Each version is incremented by 1.
    """


_ClientGetTableVersionResponseTypeDef = TypedDict(
    "_ClientGetTableVersionResponseTypeDef",
    {"TableVersion": ClientGetTableVersionResponseTableVersionTypeDef},
    total=False,
)


class ClientGetTableVersionResponseTypeDef(_ClientGetTableVersionResponseTypeDef):
    """
    Type definition for `ClientGetTableVersion` `Response`

    - **TableVersion** *(dict) --*

      The requested table version.

      - **Table** *(dict) --*

        The table in question.

        - **Name** *(string) --*

          The table name. For Hive compatibility, this must be entirely lowercase.

        - **DatabaseName** *(string) --*

          The name of the database where the table metadata resides. For Hive compatibility, this
          must be all lowercase.

        - **Description** *(string) --*

          A description of the table.

        - **Owner** *(string) --*

          The owner of the table.

        - **CreateTime** *(datetime) --*

          The time when the table definition was created in the Data Catalog.

        - **UpdateTime** *(datetime) --*

          The last time that the table was updated.

        - **LastAccessTime** *(datetime) --*

          The last time that the table was accessed. This is usually taken from HDFS, and might not
          be reliable.

        - **LastAnalyzedTime** *(datetime) --*

          The last time that column statistics were computed for this table.

        - **Retention** *(integer) --*

          The retention time for this table.

        - **StorageDescriptor** *(dict) --*

          A storage descriptor containing information about the physical storage of this table.

          - **Columns** *(list) --*

            A list of the ``Columns`` in the table.

            - *(dict) --*

              A column in a ``Table`` .

              - **Name** *(string) --*

                The name of the ``Column`` .

              - **Type** *(string) --*

                The data type of the ``Column`` .

              - **Comment** *(string) --*

                A free-form text comment.

              - **Parameters** *(dict) --*

                These key-value pairs define properties associated with the column.

                - *(string) --*

                  - *(string) --*

          - **Location** *(string) --*

            The physical location of the table. By default, this takes the form of the warehouse
            location, followed by the database location in the warehouse, followed by the table
            name.

          - **InputFormat** *(string) --*

            The input format: ``SequenceFileInputFormat`` (binary), or ``TextInputFormat`` , or a
            custom format.

          - **OutputFormat** *(string) --*

            The output format: ``SequenceFileOutputFormat`` (binary), or
            ``IgnoreKeyTextOutputFormat`` , or a custom format.

          - **Compressed** *(boolean) --*

             ``True`` if the data in the table is compressed, or ``False`` if not.

          - **NumberOfBuckets** *(integer) --*

            Must be specified if the table contains any dimension columns.

          - **SerdeInfo** *(dict) --*

            The serialization/deserialization (SerDe) information.

            - **Name** *(string) --*

              Name of the SerDe.

            - **SerializationLibrary** *(string) --*

              Usually the class that implements the SerDe. An example is
              ``org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`` .

            - **Parameters** *(dict) --*

              These key-value pairs define initialization parameters for the SerDe.

              - *(string) --*

                - *(string) --*

          - **BucketColumns** *(list) --*

            A list of reducer grouping columns, clustering columns, and bucketing columns in the
            table.

            - *(string) --*

          - **SortColumns** *(list) --*

            A list specifying the sort order of each bucket in the table.

            - *(dict) --*

              Specifies the sort order of a sorted column.

              - **Column** *(string) --*

                The name of the column.

              - **SortOrder** *(integer) --*

                Indicates that the column is sorted in ascending order (``== 1`` ), or in
                descending order (``==0`` ).

          - **Parameters** *(dict) --*

            The user-supplied properties in key-value form.

            - *(string) --*

              - *(string) --*

          - **SkewedInfo** *(dict) --*

            The information about values that appear frequently in a column (skewed values).

            - **SkewedColumnNames** *(list) --*

              A list of names of columns that contain skewed values.

              - *(string) --*

            - **SkewedColumnValues** *(list) --*

              A list of values that appear so frequently as to be considered skewed.

              - *(string) --*

            - **SkewedColumnValueLocationMaps** *(dict) --*

              A mapping of skewed values to the columns that contain them.

              - *(string) --*

                - *(string) --*

          - **StoredAsSubDirectories** *(boolean) --*

             ``True`` if the table data is stored in subdirectories, or ``False`` if not.

        - **PartitionKeys** *(list) --*

          A list of columns by which the table is partitioned. Only primitive types are supported
          as partition keys.

          When you create a table used by Amazon Athena, and you do not specify any
          ``partitionKeys`` , you must at least set the value of ``partitionKeys`` to an empty
          list. For example:

           ``"PartitionKeys": []``

          - *(dict) --*

            A column in a ``Table`` .

            - **Name** *(string) --*

              The name of the ``Column`` .

            - **Type** *(string) --*

              The data type of the ``Column`` .

            - **Comment** *(string) --*

              A free-form text comment.

            - **Parameters** *(dict) --*

              These key-value pairs define properties associated with the column.

              - *(string) --*

                - *(string) --*

        - **ViewOriginalText** *(string) --*

          If the table is a view, the original text of the view; otherwise ``null`` .

        - **ViewExpandedText** *(string) --*

          If the table is a view, the expanded text of the view; otherwise ``null`` .

        - **TableType** *(string) --*

          The type of this table (``EXTERNAL_TABLE`` , ``VIRTUAL_VIEW`` , etc.).

        - **Parameters** *(dict) --*

          These key-value pairs define properties associated with the table.

          - *(string) --*

            - *(string) --*

        - **CreatedBy** *(string) --*

          The person or entity who created the table.

        - **IsRegisteredWithLakeFormation** *(boolean) --*

          Indicates whether the table has been registered with AWS Lake Formation.

      - **VersionId** *(string) --*

        The ID value that identifies this table version. A ``VersionId`` is a string representation
        of an integer. Each version is incremented by 1.
    """


_ClientGetTableVersionsResponseTableVersionsTablePartitionKeysTypeDef = TypedDict(
    "_ClientGetTableVersionsResponseTableVersionsTablePartitionKeysTypeDef",
    {"Name": str, "Type": str, "Comment": str, "Parameters": Dict[str, str]},
    total=False,
)


class ClientGetTableVersionsResponseTableVersionsTablePartitionKeysTypeDef(
    _ClientGetTableVersionsResponseTableVersionsTablePartitionKeysTypeDef
):
    """
    Type definition for `ClientGetTableVersionsResponseTableVersionsTable` `PartitionKeys`

    A column in a ``Table`` .

    - **Name** *(string) --*

      The name of the ``Column`` .

    - **Type** *(string) --*

      The data type of the ``Column`` .

    - **Comment** *(string) --*

      A free-form text comment.

    - **Parameters** *(dict) --*

      These key-value pairs define properties associated with the column.

      - *(string) --*

        - *(string) --*
    """


_ClientGetTableVersionsResponseTableVersionsTableStorageDescriptorColumnsTypeDef = TypedDict(
    "_ClientGetTableVersionsResponseTableVersionsTableStorageDescriptorColumnsTypeDef",
    {"Name": str, "Type": str, "Comment": str, "Parameters": Dict[str, str]},
    total=False,
)


class ClientGetTableVersionsResponseTableVersionsTableStorageDescriptorColumnsTypeDef(
    _ClientGetTableVersionsResponseTableVersionsTableStorageDescriptorColumnsTypeDef
):
    """
    Type definition for `ClientGetTableVersionsResponseTableVersionsTableStorageDescriptor` `Columns`

    A column in a ``Table`` .

    - **Name** *(string) --*

      The name of the ``Column`` .

    - **Type** *(string) --*

      The data type of the ``Column`` .

    - **Comment** *(string) --*

      A free-form text comment.

    - **Parameters** *(dict) --*

      These key-value pairs define properties associated with the column.

      - *(string) --*

        - *(string) --*
    """


_ClientGetTableVersionsResponseTableVersionsTableStorageDescriptorSerdeInfoTypeDef = TypedDict(
    "_ClientGetTableVersionsResponseTableVersionsTableStorageDescriptorSerdeInfoTypeDef",
    {"Name": str, "SerializationLibrary": str, "Parameters": Dict[str, str]},
    total=False,
)


class ClientGetTableVersionsResponseTableVersionsTableStorageDescriptorSerdeInfoTypeDef(
    _ClientGetTableVersionsResponseTableVersionsTableStorageDescriptorSerdeInfoTypeDef
):
    """
    Type definition for `ClientGetTableVersionsResponseTableVersionsTableStorageDescriptor` `SerdeInfo`

    The serialization/deserialization (SerDe) information.

    - **Name** *(string) --*

      Name of the SerDe.

    - **SerializationLibrary** *(string) --*

      Usually the class that implements the SerDe. An example is
      ``org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`` .

    - **Parameters** *(dict) --*

      These key-value pairs define initialization parameters for the SerDe.

      - *(string) --*

        - *(string) --*
    """


_ClientGetTableVersionsResponseTableVersionsTableStorageDescriptorSkewedInfoTypeDef = TypedDict(
    "_ClientGetTableVersionsResponseTableVersionsTableStorageDescriptorSkewedInfoTypeDef",
    {
        "SkewedColumnNames": List[str],
        "SkewedColumnValues": List[str],
        "SkewedColumnValueLocationMaps": Dict[str, str],
    },
    total=False,
)


class ClientGetTableVersionsResponseTableVersionsTableStorageDescriptorSkewedInfoTypeDef(
    _ClientGetTableVersionsResponseTableVersionsTableStorageDescriptorSkewedInfoTypeDef
):
    """
    Type definition for `ClientGetTableVersionsResponseTableVersionsTableStorageDescriptor` `SkewedInfo`

    The information about values that appear frequently in a column (skewed values).

    - **SkewedColumnNames** *(list) --*

      A list of names of columns that contain skewed values.

      - *(string) --*

    - **SkewedColumnValues** *(list) --*

      A list of values that appear so frequently as to be considered skewed.

      - *(string) --*

    - **SkewedColumnValueLocationMaps** *(dict) --*

      A mapping of skewed values to the columns that contain them.

      - *(string) --*

        - *(string) --*
    """


_ClientGetTableVersionsResponseTableVersionsTableStorageDescriptorSortColumnsTypeDef = TypedDict(
    "_ClientGetTableVersionsResponseTableVersionsTableStorageDescriptorSortColumnsTypeDef",
    {"Column": str, "SortOrder": int},
    total=False,
)


class ClientGetTableVersionsResponseTableVersionsTableStorageDescriptorSortColumnsTypeDef(
    _ClientGetTableVersionsResponseTableVersionsTableStorageDescriptorSortColumnsTypeDef
):
    """
    Type definition for `ClientGetTableVersionsResponseTableVersionsTableStorageDescriptor` `SortColumns`

    Specifies the sort order of a sorted column.

    - **Column** *(string) --*

      The name of the column.

    - **SortOrder** *(integer) --*

      Indicates that the column is sorted in ascending order (``== 1`` ), or in
      descending order (``==0`` ).
    """


_ClientGetTableVersionsResponseTableVersionsTableStorageDescriptorTypeDef = TypedDict(
    "_ClientGetTableVersionsResponseTableVersionsTableStorageDescriptorTypeDef",
    {
        "Columns": List[
            ClientGetTableVersionsResponseTableVersionsTableStorageDescriptorColumnsTypeDef
        ],
        "Location": str,
        "InputFormat": str,
        "OutputFormat": str,
        "Compressed": bool,
        "NumberOfBuckets": int,
        "SerdeInfo": ClientGetTableVersionsResponseTableVersionsTableStorageDescriptorSerdeInfoTypeDef,
        "BucketColumns": List[str],
        "SortColumns": List[
            ClientGetTableVersionsResponseTableVersionsTableStorageDescriptorSortColumnsTypeDef
        ],
        "Parameters": Dict[str, str],
        "SkewedInfo": ClientGetTableVersionsResponseTableVersionsTableStorageDescriptorSkewedInfoTypeDef,
        "StoredAsSubDirectories": bool,
    },
    total=False,
)


class ClientGetTableVersionsResponseTableVersionsTableStorageDescriptorTypeDef(
    _ClientGetTableVersionsResponseTableVersionsTableStorageDescriptorTypeDef
):
    """
    Type definition for `ClientGetTableVersionsResponseTableVersionsTable` `StorageDescriptor`

    A storage descriptor containing information about the physical storage of this table.

    - **Columns** *(list) --*

      A list of the ``Columns`` in the table.

      - *(dict) --*

        A column in a ``Table`` .

        - **Name** *(string) --*

          The name of the ``Column`` .

        - **Type** *(string) --*

          The data type of the ``Column`` .

        - **Comment** *(string) --*

          A free-form text comment.

        - **Parameters** *(dict) --*

          These key-value pairs define properties associated with the column.

          - *(string) --*

            - *(string) --*

    - **Location** *(string) --*

      The physical location of the table. By default, this takes the form of the warehouse
      location, followed by the database location in the warehouse, followed by the table
      name.

    - **InputFormat** *(string) --*

      The input format: ``SequenceFileInputFormat`` (binary), or ``TextInputFormat`` , or a
      custom format.

    - **OutputFormat** *(string) --*

      The output format: ``SequenceFileOutputFormat`` (binary), or
      ``IgnoreKeyTextOutputFormat`` , or a custom format.

    - **Compressed** *(boolean) --*

       ``True`` if the data in the table is compressed, or ``False`` if not.

    - **NumberOfBuckets** *(integer) --*

      Must be specified if the table contains any dimension columns.

    - **SerdeInfo** *(dict) --*

      The serialization/deserialization (SerDe) information.

      - **Name** *(string) --*

        Name of the SerDe.

      - **SerializationLibrary** *(string) --*

        Usually the class that implements the SerDe. An example is
        ``org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`` .

      - **Parameters** *(dict) --*

        These key-value pairs define initialization parameters for the SerDe.

        - *(string) --*

          - *(string) --*

    - **BucketColumns** *(list) --*

      A list of reducer grouping columns, clustering columns, and bucketing columns in the
      table.

      - *(string) --*

    - **SortColumns** *(list) --*

      A list specifying the sort order of each bucket in the table.

      - *(dict) --*

        Specifies the sort order of a sorted column.

        - **Column** *(string) --*

          The name of the column.

        - **SortOrder** *(integer) --*

          Indicates that the column is sorted in ascending order (``== 1`` ), or in
          descending order (``==0`` ).

    - **Parameters** *(dict) --*

      The user-supplied properties in key-value form.

      - *(string) --*

        - *(string) --*

    - **SkewedInfo** *(dict) --*

      The information about values that appear frequently in a column (skewed values).

      - **SkewedColumnNames** *(list) --*

        A list of names of columns that contain skewed values.

        - *(string) --*

      - **SkewedColumnValues** *(list) --*

        A list of values that appear so frequently as to be considered skewed.

        - *(string) --*

      - **SkewedColumnValueLocationMaps** *(dict) --*

        A mapping of skewed values to the columns that contain them.

        - *(string) --*

          - *(string) --*

    - **StoredAsSubDirectories** *(boolean) --*

       ``True`` if the table data is stored in subdirectories, or ``False`` if not.
    """


_ClientGetTableVersionsResponseTableVersionsTableTypeDef = TypedDict(
    "_ClientGetTableVersionsResponseTableVersionsTableTypeDef",
    {
        "Name": str,
        "DatabaseName": str,
        "Description": str,
        "Owner": str,
        "CreateTime": datetime,
        "UpdateTime": datetime,
        "LastAccessTime": datetime,
        "LastAnalyzedTime": datetime,
        "Retention": int,
        "StorageDescriptor": ClientGetTableVersionsResponseTableVersionsTableStorageDescriptorTypeDef,
        "PartitionKeys": List[
            ClientGetTableVersionsResponseTableVersionsTablePartitionKeysTypeDef
        ],
        "ViewOriginalText": str,
        "ViewExpandedText": str,
        "TableType": str,
        "Parameters": Dict[str, str],
        "CreatedBy": str,
        "IsRegisteredWithLakeFormation": bool,
    },
    total=False,
)


class ClientGetTableVersionsResponseTableVersionsTableTypeDef(
    _ClientGetTableVersionsResponseTableVersionsTableTypeDef
):
    """
    Type definition for `ClientGetTableVersionsResponseTableVersions` `Table`

    The table in question.

    - **Name** *(string) --*

      The table name. For Hive compatibility, this must be entirely lowercase.

    - **DatabaseName** *(string) --*

      The name of the database where the table metadata resides. For Hive compatibility, this
      must be all lowercase.

    - **Description** *(string) --*

      A description of the table.

    - **Owner** *(string) --*

      The owner of the table.

    - **CreateTime** *(datetime) --*

      The time when the table definition was created in the Data Catalog.

    - **UpdateTime** *(datetime) --*

      The last time that the table was updated.

    - **LastAccessTime** *(datetime) --*

      The last time that the table was accessed. This is usually taken from HDFS, and might
      not be reliable.

    - **LastAnalyzedTime** *(datetime) --*

      The last time that column statistics were computed for this table.

    - **Retention** *(integer) --*

      The retention time for this table.

    - **StorageDescriptor** *(dict) --*

      A storage descriptor containing information about the physical storage of this table.

      - **Columns** *(list) --*

        A list of the ``Columns`` in the table.

        - *(dict) --*

          A column in a ``Table`` .

          - **Name** *(string) --*

            The name of the ``Column`` .

          - **Type** *(string) --*

            The data type of the ``Column`` .

          - **Comment** *(string) --*

            A free-form text comment.

          - **Parameters** *(dict) --*

            These key-value pairs define properties associated with the column.

            - *(string) --*

              - *(string) --*

      - **Location** *(string) --*

        The physical location of the table. By default, this takes the form of the warehouse
        location, followed by the database location in the warehouse, followed by the table
        name.

      - **InputFormat** *(string) --*

        The input format: ``SequenceFileInputFormat`` (binary), or ``TextInputFormat`` , or a
        custom format.

      - **OutputFormat** *(string) --*

        The output format: ``SequenceFileOutputFormat`` (binary), or
        ``IgnoreKeyTextOutputFormat`` , or a custom format.

      - **Compressed** *(boolean) --*

         ``True`` if the data in the table is compressed, or ``False`` if not.

      - **NumberOfBuckets** *(integer) --*

        Must be specified if the table contains any dimension columns.

      - **SerdeInfo** *(dict) --*

        The serialization/deserialization (SerDe) information.

        - **Name** *(string) --*

          Name of the SerDe.

        - **SerializationLibrary** *(string) --*

          Usually the class that implements the SerDe. An example is
          ``org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`` .

        - **Parameters** *(dict) --*

          These key-value pairs define initialization parameters for the SerDe.

          - *(string) --*

            - *(string) --*

      - **BucketColumns** *(list) --*

        A list of reducer grouping columns, clustering columns, and bucketing columns in the
        table.

        - *(string) --*

      - **SortColumns** *(list) --*

        A list specifying the sort order of each bucket in the table.

        - *(dict) --*

          Specifies the sort order of a sorted column.

          - **Column** *(string) --*

            The name of the column.

          - **SortOrder** *(integer) --*

            Indicates that the column is sorted in ascending order (``== 1`` ), or in
            descending order (``==0`` ).

      - **Parameters** *(dict) --*

        The user-supplied properties in key-value form.

        - *(string) --*

          - *(string) --*

      - **SkewedInfo** *(dict) --*

        The information about values that appear frequently in a column (skewed values).

        - **SkewedColumnNames** *(list) --*

          A list of names of columns that contain skewed values.

          - *(string) --*

        - **SkewedColumnValues** *(list) --*

          A list of values that appear so frequently as to be considered skewed.

          - *(string) --*

        - **SkewedColumnValueLocationMaps** *(dict) --*

          A mapping of skewed values to the columns that contain them.

          - *(string) --*

            - *(string) --*

      - **StoredAsSubDirectories** *(boolean) --*

         ``True`` if the table data is stored in subdirectories, or ``False`` if not.

    - **PartitionKeys** *(list) --*

      A list of columns by which the table is partitioned. Only primitive types are supported
      as partition keys.

      When you create a table used by Amazon Athena, and you do not specify any
      ``partitionKeys`` , you must at least set the value of ``partitionKeys`` to an empty
      list. For example:

       ``"PartitionKeys": []``

      - *(dict) --*

        A column in a ``Table`` .

        - **Name** *(string) --*

          The name of the ``Column`` .

        - **Type** *(string) --*

          The data type of the ``Column`` .

        - **Comment** *(string) --*

          A free-form text comment.

        - **Parameters** *(dict) --*

          These key-value pairs define properties associated with the column.

          - *(string) --*

            - *(string) --*

    - **ViewOriginalText** *(string) --*

      If the table is a view, the original text of the view; otherwise ``null`` .

    - **ViewExpandedText** *(string) --*

      If the table is a view, the expanded text of the view; otherwise ``null`` .

    - **TableType** *(string) --*

      The type of this table (``EXTERNAL_TABLE`` , ``VIRTUAL_VIEW`` , etc.).

    - **Parameters** *(dict) --*

      These key-value pairs define properties associated with the table.

      - *(string) --*

        - *(string) --*

    - **CreatedBy** *(string) --*

      The person or entity who created the table.

    - **IsRegisteredWithLakeFormation** *(boolean) --*

      Indicates whether the table has been registered with AWS Lake Formation.
    """


_ClientGetTableVersionsResponseTableVersionsTypeDef = TypedDict(
    "_ClientGetTableVersionsResponseTableVersionsTypeDef",
    {
        "Table": ClientGetTableVersionsResponseTableVersionsTableTypeDef,
        "VersionId": str,
    },
    total=False,
)


class ClientGetTableVersionsResponseTableVersionsTypeDef(
    _ClientGetTableVersionsResponseTableVersionsTypeDef
):
    """
    Type definition for `ClientGetTableVersionsResponse` `TableVersions`

    Specifies a version of a table.

    - **Table** *(dict) --*

      The table in question.

      - **Name** *(string) --*

        The table name. For Hive compatibility, this must be entirely lowercase.

      - **DatabaseName** *(string) --*

        The name of the database where the table metadata resides. For Hive compatibility, this
        must be all lowercase.

      - **Description** *(string) --*

        A description of the table.

      - **Owner** *(string) --*

        The owner of the table.

      - **CreateTime** *(datetime) --*

        The time when the table definition was created in the Data Catalog.

      - **UpdateTime** *(datetime) --*

        The last time that the table was updated.

      - **LastAccessTime** *(datetime) --*

        The last time that the table was accessed. This is usually taken from HDFS, and might
        not be reliable.

      - **LastAnalyzedTime** *(datetime) --*

        The last time that column statistics were computed for this table.

      - **Retention** *(integer) --*

        The retention time for this table.

      - **StorageDescriptor** *(dict) --*

        A storage descriptor containing information about the physical storage of this table.

        - **Columns** *(list) --*

          A list of the ``Columns`` in the table.

          - *(dict) --*

            A column in a ``Table`` .

            - **Name** *(string) --*

              The name of the ``Column`` .

            - **Type** *(string) --*

              The data type of the ``Column`` .

            - **Comment** *(string) --*

              A free-form text comment.

            - **Parameters** *(dict) --*

              These key-value pairs define properties associated with the column.

              - *(string) --*

                - *(string) --*

        - **Location** *(string) --*

          The physical location of the table. By default, this takes the form of the warehouse
          location, followed by the database location in the warehouse, followed by the table
          name.

        - **InputFormat** *(string) --*

          The input format: ``SequenceFileInputFormat`` (binary), or ``TextInputFormat`` , or a
          custom format.

        - **OutputFormat** *(string) --*

          The output format: ``SequenceFileOutputFormat`` (binary), or
          ``IgnoreKeyTextOutputFormat`` , or a custom format.

        - **Compressed** *(boolean) --*

           ``True`` if the data in the table is compressed, or ``False`` if not.

        - **NumberOfBuckets** *(integer) --*

          Must be specified if the table contains any dimension columns.

        - **SerdeInfo** *(dict) --*

          The serialization/deserialization (SerDe) information.

          - **Name** *(string) --*

            Name of the SerDe.

          - **SerializationLibrary** *(string) --*

            Usually the class that implements the SerDe. An example is
            ``org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`` .

          - **Parameters** *(dict) --*

            These key-value pairs define initialization parameters for the SerDe.

            - *(string) --*

              - *(string) --*

        - **BucketColumns** *(list) --*

          A list of reducer grouping columns, clustering columns, and bucketing columns in the
          table.

          - *(string) --*

        - **SortColumns** *(list) --*

          A list specifying the sort order of each bucket in the table.

          - *(dict) --*

            Specifies the sort order of a sorted column.

            - **Column** *(string) --*

              The name of the column.

            - **SortOrder** *(integer) --*

              Indicates that the column is sorted in ascending order (``== 1`` ), or in
              descending order (``==0`` ).

        - **Parameters** *(dict) --*

          The user-supplied properties in key-value form.

          - *(string) --*

            - *(string) --*

        - **SkewedInfo** *(dict) --*

          The information about values that appear frequently in a column (skewed values).

          - **SkewedColumnNames** *(list) --*

            A list of names of columns that contain skewed values.

            - *(string) --*

          - **SkewedColumnValues** *(list) --*

            A list of values that appear so frequently as to be considered skewed.

            - *(string) --*

          - **SkewedColumnValueLocationMaps** *(dict) --*

            A mapping of skewed values to the columns that contain them.

            - *(string) --*

              - *(string) --*

        - **StoredAsSubDirectories** *(boolean) --*

           ``True`` if the table data is stored in subdirectories, or ``False`` if not.

      - **PartitionKeys** *(list) --*

        A list of columns by which the table is partitioned. Only primitive types are supported
        as partition keys.

        When you create a table used by Amazon Athena, and you do not specify any
        ``partitionKeys`` , you must at least set the value of ``partitionKeys`` to an empty
        list. For example:

         ``"PartitionKeys": []``

        - *(dict) --*

          A column in a ``Table`` .

          - **Name** *(string) --*

            The name of the ``Column`` .

          - **Type** *(string) --*

            The data type of the ``Column`` .

          - **Comment** *(string) --*

            A free-form text comment.

          - **Parameters** *(dict) --*

            These key-value pairs define properties associated with the column.

            - *(string) --*

              - *(string) --*

      - **ViewOriginalText** *(string) --*

        If the table is a view, the original text of the view; otherwise ``null`` .

      - **ViewExpandedText** *(string) --*

        If the table is a view, the expanded text of the view; otherwise ``null`` .

      - **TableType** *(string) --*

        The type of this table (``EXTERNAL_TABLE`` , ``VIRTUAL_VIEW`` , etc.).

      - **Parameters** *(dict) --*

        These key-value pairs define properties associated with the table.

        - *(string) --*

          - *(string) --*

      - **CreatedBy** *(string) --*

        The person or entity who created the table.

      - **IsRegisteredWithLakeFormation** *(boolean) --*

        Indicates whether the table has been registered with AWS Lake Formation.

    - **VersionId** *(string) --*

      The ID value that identifies this table version. A ``VersionId`` is a string
      representation of an integer. Each version is incremented by 1.
    """


_ClientGetTableVersionsResponseTypeDef = TypedDict(
    "_ClientGetTableVersionsResponseTypeDef",
    {
        "TableVersions": List[ClientGetTableVersionsResponseTableVersionsTypeDef],
        "NextToken": str,
    },
    total=False,
)


class ClientGetTableVersionsResponseTypeDef(_ClientGetTableVersionsResponseTypeDef):
    """
    Type definition for `ClientGetTableVersions` `Response`

    - **TableVersions** *(list) --*

      A list of strings identifying available versions of the specified table.

      - *(dict) --*

        Specifies a version of a table.

        - **Table** *(dict) --*

          The table in question.

          - **Name** *(string) --*

            The table name. For Hive compatibility, this must be entirely lowercase.

          - **DatabaseName** *(string) --*

            The name of the database where the table metadata resides. For Hive compatibility, this
            must be all lowercase.

          - **Description** *(string) --*

            A description of the table.

          - **Owner** *(string) --*

            The owner of the table.

          - **CreateTime** *(datetime) --*

            The time when the table definition was created in the Data Catalog.

          - **UpdateTime** *(datetime) --*

            The last time that the table was updated.

          - **LastAccessTime** *(datetime) --*

            The last time that the table was accessed. This is usually taken from HDFS, and might
            not be reliable.

          - **LastAnalyzedTime** *(datetime) --*

            The last time that column statistics were computed for this table.

          - **Retention** *(integer) --*

            The retention time for this table.

          - **StorageDescriptor** *(dict) --*

            A storage descriptor containing information about the physical storage of this table.

            - **Columns** *(list) --*

              A list of the ``Columns`` in the table.

              - *(dict) --*

                A column in a ``Table`` .

                - **Name** *(string) --*

                  The name of the ``Column`` .

                - **Type** *(string) --*

                  The data type of the ``Column`` .

                - **Comment** *(string) --*

                  A free-form text comment.

                - **Parameters** *(dict) --*

                  These key-value pairs define properties associated with the column.

                  - *(string) --*

                    - *(string) --*

            - **Location** *(string) --*

              The physical location of the table. By default, this takes the form of the warehouse
              location, followed by the database location in the warehouse, followed by the table
              name.

            - **InputFormat** *(string) --*

              The input format: ``SequenceFileInputFormat`` (binary), or ``TextInputFormat`` , or a
              custom format.

            - **OutputFormat** *(string) --*

              The output format: ``SequenceFileOutputFormat`` (binary), or
              ``IgnoreKeyTextOutputFormat`` , or a custom format.

            - **Compressed** *(boolean) --*

               ``True`` if the data in the table is compressed, or ``False`` if not.

            - **NumberOfBuckets** *(integer) --*

              Must be specified if the table contains any dimension columns.

            - **SerdeInfo** *(dict) --*

              The serialization/deserialization (SerDe) information.

              - **Name** *(string) --*

                Name of the SerDe.

              - **SerializationLibrary** *(string) --*

                Usually the class that implements the SerDe. An example is
                ``org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`` .

              - **Parameters** *(dict) --*

                These key-value pairs define initialization parameters for the SerDe.

                - *(string) --*

                  - *(string) --*

            - **BucketColumns** *(list) --*

              A list of reducer grouping columns, clustering columns, and bucketing columns in the
              table.

              - *(string) --*

            - **SortColumns** *(list) --*

              A list specifying the sort order of each bucket in the table.

              - *(dict) --*

                Specifies the sort order of a sorted column.

                - **Column** *(string) --*

                  The name of the column.

                - **SortOrder** *(integer) --*

                  Indicates that the column is sorted in ascending order (``== 1`` ), or in
                  descending order (``==0`` ).

            - **Parameters** *(dict) --*

              The user-supplied properties in key-value form.

              - *(string) --*

                - *(string) --*

            - **SkewedInfo** *(dict) --*

              The information about values that appear frequently in a column (skewed values).

              - **SkewedColumnNames** *(list) --*

                A list of names of columns that contain skewed values.

                - *(string) --*

              - **SkewedColumnValues** *(list) --*

                A list of values that appear so frequently as to be considered skewed.

                - *(string) --*

              - **SkewedColumnValueLocationMaps** *(dict) --*

                A mapping of skewed values to the columns that contain them.

                - *(string) --*

                  - *(string) --*

            - **StoredAsSubDirectories** *(boolean) --*

               ``True`` if the table data is stored in subdirectories, or ``False`` if not.

          - **PartitionKeys** *(list) --*

            A list of columns by which the table is partitioned. Only primitive types are supported
            as partition keys.

            When you create a table used by Amazon Athena, and you do not specify any
            ``partitionKeys`` , you must at least set the value of ``partitionKeys`` to an empty
            list. For example:

             ``"PartitionKeys": []``

            - *(dict) --*

              A column in a ``Table`` .

              - **Name** *(string) --*

                The name of the ``Column`` .

              - **Type** *(string) --*

                The data type of the ``Column`` .

              - **Comment** *(string) --*

                A free-form text comment.

              - **Parameters** *(dict) --*

                These key-value pairs define properties associated with the column.

                - *(string) --*

                  - *(string) --*

          - **ViewOriginalText** *(string) --*

            If the table is a view, the original text of the view; otherwise ``null`` .

          - **ViewExpandedText** *(string) --*

            If the table is a view, the expanded text of the view; otherwise ``null`` .

          - **TableType** *(string) --*

            The type of this table (``EXTERNAL_TABLE`` , ``VIRTUAL_VIEW`` , etc.).

          - **Parameters** *(dict) --*

            These key-value pairs define properties associated with the table.

            - *(string) --*

              - *(string) --*

          - **CreatedBy** *(string) --*

            The person or entity who created the table.

          - **IsRegisteredWithLakeFormation** *(boolean) --*

            Indicates whether the table has been registered with AWS Lake Formation.

        - **VersionId** *(string) --*

          The ID value that identifies this table version. A ``VersionId`` is a string
          representation of an integer. Each version is incremented by 1.

    - **NextToken** *(string) --*

      A continuation token, if the list of available versions does not include the last one.
    """


_ClientGetTablesResponseTableListPartitionKeysTypeDef = TypedDict(
    "_ClientGetTablesResponseTableListPartitionKeysTypeDef",
    {"Name": str, "Type": str, "Comment": str, "Parameters": Dict[str, str]},
    total=False,
)


class ClientGetTablesResponseTableListPartitionKeysTypeDef(
    _ClientGetTablesResponseTableListPartitionKeysTypeDef
):
    """
    Type definition for `ClientGetTablesResponseTableList` `PartitionKeys`

    A column in a ``Table`` .

    - **Name** *(string) --*

      The name of the ``Column`` .

    - **Type** *(string) --*

      The data type of the ``Column`` .

    - **Comment** *(string) --*

      A free-form text comment.

    - **Parameters** *(dict) --*

      These key-value pairs define properties associated with the column.

      - *(string) --*

        - *(string) --*
    """


_ClientGetTablesResponseTableListStorageDescriptorColumnsTypeDef = TypedDict(
    "_ClientGetTablesResponseTableListStorageDescriptorColumnsTypeDef",
    {"Name": str, "Type": str, "Comment": str, "Parameters": Dict[str, str]},
    total=False,
)


class ClientGetTablesResponseTableListStorageDescriptorColumnsTypeDef(
    _ClientGetTablesResponseTableListStorageDescriptorColumnsTypeDef
):
    """
    Type definition for `ClientGetTablesResponseTableListStorageDescriptor` `Columns`

    A column in a ``Table`` .

    - **Name** *(string) --*

      The name of the ``Column`` .

    - **Type** *(string) --*

      The data type of the ``Column`` .

    - **Comment** *(string) --*

      A free-form text comment.

    - **Parameters** *(dict) --*

      These key-value pairs define properties associated with the column.

      - *(string) --*

        - *(string) --*
    """


_ClientGetTablesResponseTableListStorageDescriptorSerdeInfoTypeDef = TypedDict(
    "_ClientGetTablesResponseTableListStorageDescriptorSerdeInfoTypeDef",
    {"Name": str, "SerializationLibrary": str, "Parameters": Dict[str, str]},
    total=False,
)


class ClientGetTablesResponseTableListStorageDescriptorSerdeInfoTypeDef(
    _ClientGetTablesResponseTableListStorageDescriptorSerdeInfoTypeDef
):
    """
    Type definition for `ClientGetTablesResponseTableListStorageDescriptor` `SerdeInfo`

    The serialization/deserialization (SerDe) information.

    - **Name** *(string) --*

      Name of the SerDe.

    - **SerializationLibrary** *(string) --*

      Usually the class that implements the SerDe. An example is
      ``org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`` .

    - **Parameters** *(dict) --*

      These key-value pairs define initialization parameters for the SerDe.

      - *(string) --*

        - *(string) --*
    """


_ClientGetTablesResponseTableListStorageDescriptorSkewedInfoTypeDef = TypedDict(
    "_ClientGetTablesResponseTableListStorageDescriptorSkewedInfoTypeDef",
    {
        "SkewedColumnNames": List[str],
        "SkewedColumnValues": List[str],
        "SkewedColumnValueLocationMaps": Dict[str, str],
    },
    total=False,
)


class ClientGetTablesResponseTableListStorageDescriptorSkewedInfoTypeDef(
    _ClientGetTablesResponseTableListStorageDescriptorSkewedInfoTypeDef
):
    """
    Type definition for `ClientGetTablesResponseTableListStorageDescriptor` `SkewedInfo`

    The information about values that appear frequently in a column (skewed values).

    - **SkewedColumnNames** *(list) --*

      A list of names of columns that contain skewed values.

      - *(string) --*

    - **SkewedColumnValues** *(list) --*

      A list of values that appear so frequently as to be considered skewed.

      - *(string) --*

    - **SkewedColumnValueLocationMaps** *(dict) --*

      A mapping of skewed values to the columns that contain them.

      - *(string) --*

        - *(string) --*
    """


_ClientGetTablesResponseTableListStorageDescriptorSortColumnsTypeDef = TypedDict(
    "_ClientGetTablesResponseTableListStorageDescriptorSortColumnsTypeDef",
    {"Column": str, "SortOrder": int},
    total=False,
)


class ClientGetTablesResponseTableListStorageDescriptorSortColumnsTypeDef(
    _ClientGetTablesResponseTableListStorageDescriptorSortColumnsTypeDef
):
    """
    Type definition for `ClientGetTablesResponseTableListStorageDescriptor` `SortColumns`

    Specifies the sort order of a sorted column.

    - **Column** *(string) --*

      The name of the column.

    - **SortOrder** *(integer) --*

      Indicates that the column is sorted in ascending order (``== 1`` ), or in
      descending order (``==0`` ).
    """


_ClientGetTablesResponseTableListStorageDescriptorTypeDef = TypedDict(
    "_ClientGetTablesResponseTableListStorageDescriptorTypeDef",
    {
        "Columns": List[
            ClientGetTablesResponseTableListStorageDescriptorColumnsTypeDef
        ],
        "Location": str,
        "InputFormat": str,
        "OutputFormat": str,
        "Compressed": bool,
        "NumberOfBuckets": int,
        "SerdeInfo": ClientGetTablesResponseTableListStorageDescriptorSerdeInfoTypeDef,
        "BucketColumns": List[str],
        "SortColumns": List[
            ClientGetTablesResponseTableListStorageDescriptorSortColumnsTypeDef
        ],
        "Parameters": Dict[str, str],
        "SkewedInfo": ClientGetTablesResponseTableListStorageDescriptorSkewedInfoTypeDef,
        "StoredAsSubDirectories": bool,
    },
    total=False,
)


class ClientGetTablesResponseTableListStorageDescriptorTypeDef(
    _ClientGetTablesResponseTableListStorageDescriptorTypeDef
):
    """
    Type definition for `ClientGetTablesResponseTableList` `StorageDescriptor`

    A storage descriptor containing information about the physical storage of this table.

    - **Columns** *(list) --*

      A list of the ``Columns`` in the table.

      - *(dict) --*

        A column in a ``Table`` .

        - **Name** *(string) --*

          The name of the ``Column`` .

        - **Type** *(string) --*

          The data type of the ``Column`` .

        - **Comment** *(string) --*

          A free-form text comment.

        - **Parameters** *(dict) --*

          These key-value pairs define properties associated with the column.

          - *(string) --*

            - *(string) --*

    - **Location** *(string) --*

      The physical location of the table. By default, this takes the form of the warehouse
      location, followed by the database location in the warehouse, followed by the table
      name.

    - **InputFormat** *(string) --*

      The input format: ``SequenceFileInputFormat`` (binary), or ``TextInputFormat`` , or a
      custom format.

    - **OutputFormat** *(string) --*

      The output format: ``SequenceFileOutputFormat`` (binary), or
      ``IgnoreKeyTextOutputFormat`` , or a custom format.

    - **Compressed** *(boolean) --*

       ``True`` if the data in the table is compressed, or ``False`` if not.

    - **NumberOfBuckets** *(integer) --*

      Must be specified if the table contains any dimension columns.

    - **SerdeInfo** *(dict) --*

      The serialization/deserialization (SerDe) information.

      - **Name** *(string) --*

        Name of the SerDe.

      - **SerializationLibrary** *(string) --*

        Usually the class that implements the SerDe. An example is
        ``org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`` .

      - **Parameters** *(dict) --*

        These key-value pairs define initialization parameters for the SerDe.

        - *(string) --*

          - *(string) --*

    - **BucketColumns** *(list) --*

      A list of reducer grouping columns, clustering columns, and bucketing columns in the
      table.

      - *(string) --*

    - **SortColumns** *(list) --*

      A list specifying the sort order of each bucket in the table.

      - *(dict) --*

        Specifies the sort order of a sorted column.

        - **Column** *(string) --*

          The name of the column.

        - **SortOrder** *(integer) --*

          Indicates that the column is sorted in ascending order (``== 1`` ), or in
          descending order (``==0`` ).

    - **Parameters** *(dict) --*

      The user-supplied properties in key-value form.

      - *(string) --*

        - *(string) --*

    - **SkewedInfo** *(dict) --*

      The information about values that appear frequently in a column (skewed values).

      - **SkewedColumnNames** *(list) --*

        A list of names of columns that contain skewed values.

        - *(string) --*

      - **SkewedColumnValues** *(list) --*

        A list of values that appear so frequently as to be considered skewed.

        - *(string) --*

      - **SkewedColumnValueLocationMaps** *(dict) --*

        A mapping of skewed values to the columns that contain them.

        - *(string) --*

          - *(string) --*

    - **StoredAsSubDirectories** *(boolean) --*

       ``True`` if the table data is stored in subdirectories, or ``False`` if not.
    """


_ClientGetTablesResponseTableListTypeDef = TypedDict(
    "_ClientGetTablesResponseTableListTypeDef",
    {
        "Name": str,
        "DatabaseName": str,
        "Description": str,
        "Owner": str,
        "CreateTime": datetime,
        "UpdateTime": datetime,
        "LastAccessTime": datetime,
        "LastAnalyzedTime": datetime,
        "Retention": int,
        "StorageDescriptor": ClientGetTablesResponseTableListStorageDescriptorTypeDef,
        "PartitionKeys": List[ClientGetTablesResponseTableListPartitionKeysTypeDef],
        "ViewOriginalText": str,
        "ViewExpandedText": str,
        "TableType": str,
        "Parameters": Dict[str, str],
        "CreatedBy": str,
        "IsRegisteredWithLakeFormation": bool,
    },
    total=False,
)


class ClientGetTablesResponseTableListTypeDef(_ClientGetTablesResponseTableListTypeDef):
    """
    Type definition for `ClientGetTablesResponse` `TableList`

    Represents a collection of related data organized in columns and rows.

    - **Name** *(string) --*

      The table name. For Hive compatibility, this must be entirely lowercase.

    - **DatabaseName** *(string) --*

      The name of the database where the table metadata resides. For Hive compatibility, this
      must be all lowercase.

    - **Description** *(string) --*

      A description of the table.

    - **Owner** *(string) --*

      The owner of the table.

    - **CreateTime** *(datetime) --*

      The time when the table definition was created in the Data Catalog.

    - **UpdateTime** *(datetime) --*

      The last time that the table was updated.

    - **LastAccessTime** *(datetime) --*

      The last time that the table was accessed. This is usually taken from HDFS, and might not
      be reliable.

    - **LastAnalyzedTime** *(datetime) --*

      The last time that column statistics were computed for this table.

    - **Retention** *(integer) --*

      The retention time for this table.

    - **StorageDescriptor** *(dict) --*

      A storage descriptor containing information about the physical storage of this table.

      - **Columns** *(list) --*

        A list of the ``Columns`` in the table.

        - *(dict) --*

          A column in a ``Table`` .

          - **Name** *(string) --*

            The name of the ``Column`` .

          - **Type** *(string) --*

            The data type of the ``Column`` .

          - **Comment** *(string) --*

            A free-form text comment.

          - **Parameters** *(dict) --*

            These key-value pairs define properties associated with the column.

            - *(string) --*

              - *(string) --*

      - **Location** *(string) --*

        The physical location of the table. By default, this takes the form of the warehouse
        location, followed by the database location in the warehouse, followed by the table
        name.

      - **InputFormat** *(string) --*

        The input format: ``SequenceFileInputFormat`` (binary), or ``TextInputFormat`` , or a
        custom format.

      - **OutputFormat** *(string) --*

        The output format: ``SequenceFileOutputFormat`` (binary), or
        ``IgnoreKeyTextOutputFormat`` , or a custom format.

      - **Compressed** *(boolean) --*

         ``True`` if the data in the table is compressed, or ``False`` if not.

      - **NumberOfBuckets** *(integer) --*

        Must be specified if the table contains any dimension columns.

      - **SerdeInfo** *(dict) --*

        The serialization/deserialization (SerDe) information.

        - **Name** *(string) --*

          Name of the SerDe.

        - **SerializationLibrary** *(string) --*

          Usually the class that implements the SerDe. An example is
          ``org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`` .

        - **Parameters** *(dict) --*

          These key-value pairs define initialization parameters for the SerDe.

          - *(string) --*

            - *(string) --*

      - **BucketColumns** *(list) --*

        A list of reducer grouping columns, clustering columns, and bucketing columns in the
        table.

        - *(string) --*

      - **SortColumns** *(list) --*

        A list specifying the sort order of each bucket in the table.

        - *(dict) --*

          Specifies the sort order of a sorted column.

          - **Column** *(string) --*

            The name of the column.

          - **SortOrder** *(integer) --*

            Indicates that the column is sorted in ascending order (``== 1`` ), or in
            descending order (``==0`` ).

      - **Parameters** *(dict) --*

        The user-supplied properties in key-value form.

        - *(string) --*

          - *(string) --*

      - **SkewedInfo** *(dict) --*

        The information about values that appear frequently in a column (skewed values).

        - **SkewedColumnNames** *(list) --*

          A list of names of columns that contain skewed values.

          - *(string) --*

        - **SkewedColumnValues** *(list) --*

          A list of values that appear so frequently as to be considered skewed.

          - *(string) --*

        - **SkewedColumnValueLocationMaps** *(dict) --*

          A mapping of skewed values to the columns that contain them.

          - *(string) --*

            - *(string) --*

      - **StoredAsSubDirectories** *(boolean) --*

         ``True`` if the table data is stored in subdirectories, or ``False`` if not.

    - **PartitionKeys** *(list) --*

      A list of columns by which the table is partitioned. Only primitive types are supported
      as partition keys.

      When you create a table used by Amazon Athena, and you do not specify any
      ``partitionKeys`` , you must at least set the value of ``partitionKeys`` to an empty
      list. For example:

       ``"PartitionKeys": []``

      - *(dict) --*

        A column in a ``Table`` .

        - **Name** *(string) --*

          The name of the ``Column`` .

        - **Type** *(string) --*

          The data type of the ``Column`` .

        - **Comment** *(string) --*

          A free-form text comment.

        - **Parameters** *(dict) --*

          These key-value pairs define properties associated with the column.

          - *(string) --*

            - *(string) --*

    - **ViewOriginalText** *(string) --*

      If the table is a view, the original text of the view; otherwise ``null`` .

    - **ViewExpandedText** *(string) --*

      If the table is a view, the expanded text of the view; otherwise ``null`` .

    - **TableType** *(string) --*

      The type of this table (``EXTERNAL_TABLE`` , ``VIRTUAL_VIEW`` , etc.).

    - **Parameters** *(dict) --*

      These key-value pairs define properties associated with the table.

      - *(string) --*

        - *(string) --*

    - **CreatedBy** *(string) --*

      The person or entity who created the table.

    - **IsRegisteredWithLakeFormation** *(boolean) --*

      Indicates whether the table has been registered with AWS Lake Formation.
    """


_ClientGetTablesResponseTypeDef = TypedDict(
    "_ClientGetTablesResponseTypeDef",
    {"TableList": List[ClientGetTablesResponseTableListTypeDef], "NextToken": str},
    total=False,
)


class ClientGetTablesResponseTypeDef(_ClientGetTablesResponseTypeDef):
    """
    Type definition for `ClientGetTables` `Response`

    - **TableList** *(list) --*

      A list of the requested ``Table`` objects.

      - *(dict) --*

        Represents a collection of related data organized in columns and rows.

        - **Name** *(string) --*

          The table name. For Hive compatibility, this must be entirely lowercase.

        - **DatabaseName** *(string) --*

          The name of the database where the table metadata resides. For Hive compatibility, this
          must be all lowercase.

        - **Description** *(string) --*

          A description of the table.

        - **Owner** *(string) --*

          The owner of the table.

        - **CreateTime** *(datetime) --*

          The time when the table definition was created in the Data Catalog.

        - **UpdateTime** *(datetime) --*

          The last time that the table was updated.

        - **LastAccessTime** *(datetime) --*

          The last time that the table was accessed. This is usually taken from HDFS, and might not
          be reliable.

        - **LastAnalyzedTime** *(datetime) --*

          The last time that column statistics were computed for this table.

        - **Retention** *(integer) --*

          The retention time for this table.

        - **StorageDescriptor** *(dict) --*

          A storage descriptor containing information about the physical storage of this table.

          - **Columns** *(list) --*

            A list of the ``Columns`` in the table.

            - *(dict) --*

              A column in a ``Table`` .

              - **Name** *(string) --*

                The name of the ``Column`` .

              - **Type** *(string) --*

                The data type of the ``Column`` .

              - **Comment** *(string) --*

                A free-form text comment.

              - **Parameters** *(dict) --*

                These key-value pairs define properties associated with the column.

                - *(string) --*

                  - *(string) --*

          - **Location** *(string) --*

            The physical location of the table. By default, this takes the form of the warehouse
            location, followed by the database location in the warehouse, followed by the table
            name.

          - **InputFormat** *(string) --*

            The input format: ``SequenceFileInputFormat`` (binary), or ``TextInputFormat`` , or a
            custom format.

          - **OutputFormat** *(string) --*

            The output format: ``SequenceFileOutputFormat`` (binary), or
            ``IgnoreKeyTextOutputFormat`` , or a custom format.

          - **Compressed** *(boolean) --*

             ``True`` if the data in the table is compressed, or ``False`` if not.

          - **NumberOfBuckets** *(integer) --*

            Must be specified if the table contains any dimension columns.

          - **SerdeInfo** *(dict) --*

            The serialization/deserialization (SerDe) information.

            - **Name** *(string) --*

              Name of the SerDe.

            - **SerializationLibrary** *(string) --*

              Usually the class that implements the SerDe. An example is
              ``org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`` .

            - **Parameters** *(dict) --*

              These key-value pairs define initialization parameters for the SerDe.

              - *(string) --*

                - *(string) --*

          - **BucketColumns** *(list) --*

            A list of reducer grouping columns, clustering columns, and bucketing columns in the
            table.

            - *(string) --*

          - **SortColumns** *(list) --*

            A list specifying the sort order of each bucket in the table.

            - *(dict) --*

              Specifies the sort order of a sorted column.

              - **Column** *(string) --*

                The name of the column.

              - **SortOrder** *(integer) --*

                Indicates that the column is sorted in ascending order (``== 1`` ), or in
                descending order (``==0`` ).

          - **Parameters** *(dict) --*

            The user-supplied properties in key-value form.

            - *(string) --*

              - *(string) --*

          - **SkewedInfo** *(dict) --*

            The information about values that appear frequently in a column (skewed values).

            - **SkewedColumnNames** *(list) --*

              A list of names of columns that contain skewed values.

              - *(string) --*

            - **SkewedColumnValues** *(list) --*

              A list of values that appear so frequently as to be considered skewed.

              - *(string) --*

            - **SkewedColumnValueLocationMaps** *(dict) --*

              A mapping of skewed values to the columns that contain them.

              - *(string) --*

                - *(string) --*

          - **StoredAsSubDirectories** *(boolean) --*

             ``True`` if the table data is stored in subdirectories, or ``False`` if not.

        - **PartitionKeys** *(list) --*

          A list of columns by which the table is partitioned. Only primitive types are supported
          as partition keys.

          When you create a table used by Amazon Athena, and you do not specify any
          ``partitionKeys`` , you must at least set the value of ``partitionKeys`` to an empty
          list. For example:

           ``"PartitionKeys": []``

          - *(dict) --*

            A column in a ``Table`` .

            - **Name** *(string) --*

              The name of the ``Column`` .

            - **Type** *(string) --*

              The data type of the ``Column`` .

            - **Comment** *(string) --*

              A free-form text comment.

            - **Parameters** *(dict) --*

              These key-value pairs define properties associated with the column.

              - *(string) --*

                - *(string) --*

        - **ViewOriginalText** *(string) --*

          If the table is a view, the original text of the view; otherwise ``null`` .

        - **ViewExpandedText** *(string) --*

          If the table is a view, the expanded text of the view; otherwise ``null`` .

        - **TableType** *(string) --*

          The type of this table (``EXTERNAL_TABLE`` , ``VIRTUAL_VIEW`` , etc.).

        - **Parameters** *(dict) --*

          These key-value pairs define properties associated with the table.

          - *(string) --*

            - *(string) --*

        - **CreatedBy** *(string) --*

          The person or entity who created the table.

        - **IsRegisteredWithLakeFormation** *(boolean) --*

          Indicates whether the table has been registered with AWS Lake Formation.

    - **NextToken** *(string) --*

      A continuation token, present if the current list segment is not the last.
    """


_ClientGetTagsResponseTypeDef = TypedDict(
    "_ClientGetTagsResponseTypeDef", {"Tags": Dict[str, str]}, total=False
)


class ClientGetTagsResponseTypeDef(_ClientGetTagsResponseTypeDef):
    """
    Type definition for `ClientGetTags` `Response`

    - **Tags** *(dict) --*

      The requested tags.

      - *(string) --*

        - *(string) --*
    """


_ClientGetTriggerResponseTriggerActionsNotificationPropertyTypeDef = TypedDict(
    "_ClientGetTriggerResponseTriggerActionsNotificationPropertyTypeDef",
    {"NotifyDelayAfter": int},
    total=False,
)


class ClientGetTriggerResponseTriggerActionsNotificationPropertyTypeDef(
    _ClientGetTriggerResponseTriggerActionsNotificationPropertyTypeDef
):
    """
    Type definition for `ClientGetTriggerResponseTriggerActions` `NotificationProperty`

    Specifies configuration properties of a job run notification.

    - **NotifyDelayAfter** *(integer) --*

      After a job run starts, the number of minutes to wait before sending a job run delay
      notification.
    """


_ClientGetTriggerResponseTriggerActionsTypeDef = TypedDict(
    "_ClientGetTriggerResponseTriggerActionsTypeDef",
    {
        "JobName": str,
        "Arguments": Dict[str, str],
        "Timeout": int,
        "SecurityConfiguration": str,
        "NotificationProperty": ClientGetTriggerResponseTriggerActionsNotificationPropertyTypeDef,
        "CrawlerName": str,
    },
    total=False,
)


class ClientGetTriggerResponseTriggerActionsTypeDef(
    _ClientGetTriggerResponseTriggerActionsTypeDef
):
    """
    Type definition for `ClientGetTriggerResponseTrigger` `Actions`

    Defines an action to be initiated by a trigger.

    - **JobName** *(string) --*

      The name of a job to be executed.

    - **Arguments** *(dict) --*

      The job arguments used when this trigger fires. For this job run, they replace the
      default arguments set in the job definition itself.

      You can specify arguments here that your own job-execution script consumes, as well as
      arguments that AWS Glue itself consumes.

      For information about how to specify and consume your own Job arguments, see the
      `Calling AWS Glue APIs in Python
      <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
      topic in the developer guide.

      For information about the key-value pairs that AWS Glue consumes to set up your job,
      see the `Special Parameters Used by AWS Glue
      <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
      topic in the developer guide.

      - *(string) --*

        - *(string) --*

    - **Timeout** *(integer) --*

      The ``JobRun`` timeout in minutes. This is the maximum time that a job run can consume
      resources before it is terminated and enters ``TIMEOUT`` status. The default is 2,880
      minutes (48 hours). This overrides the timeout value set in the parent job.

    - **SecurityConfiguration** *(string) --*

      The name of the ``SecurityConfiguration`` structure to be used with this action.

    - **NotificationProperty** *(dict) --*

      Specifies configuration properties of a job run notification.

      - **NotifyDelayAfter** *(integer) --*

        After a job run starts, the number of minutes to wait before sending a job run delay
        notification.

    - **CrawlerName** *(string) --*

      The name of the crawler to be used with this action.
    """


_ClientGetTriggerResponseTriggerPredicateConditionsTypeDef = TypedDict(
    "_ClientGetTriggerResponseTriggerPredicateConditionsTypeDef",
    {
        "LogicalOperator": str,
        "JobName": str,
        "State": str,
        "CrawlerName": str,
        "CrawlState": str,
    },
    total=False,
)


class ClientGetTriggerResponseTriggerPredicateConditionsTypeDef(
    _ClientGetTriggerResponseTriggerPredicateConditionsTypeDef
):
    """
    Type definition for `ClientGetTriggerResponseTriggerPredicate` `Conditions`

    Defines a condition under which a trigger fires.

    - **LogicalOperator** *(string) --*

      A logical operator.

    - **JobName** *(string) --*

      The name of the job whose ``JobRuns`` this condition applies to, and on which this
      trigger waits.

    - **State** *(string) --*

      The condition state. Currently, the values supported are ``SUCCEEDED`` , ``STOPPED``
      , ``TIMEOUT`` , and ``FAILED`` .

    - **CrawlerName** *(string) --*

      The name of the crawler to which this condition applies.

    - **CrawlState** *(string) --*

      The state of the crawler to which this condition applies.
    """


_ClientGetTriggerResponseTriggerPredicateTypeDef = TypedDict(
    "_ClientGetTriggerResponseTriggerPredicateTypeDef",
    {
        "Logical": str,
        "Conditions": List[ClientGetTriggerResponseTriggerPredicateConditionsTypeDef],
    },
    total=False,
)


class ClientGetTriggerResponseTriggerPredicateTypeDef(
    _ClientGetTriggerResponseTriggerPredicateTypeDef
):
    """
    Type definition for `ClientGetTriggerResponseTrigger` `Predicate`

    The predicate of this trigger, which defines when it will fire.

    - **Logical** *(string) --*

      An optional field if only one condition is listed. If multiple conditions are listed,
      then this field is required.

    - **Conditions** *(list) --*

      A list of the conditions that determine when the trigger will fire.

      - *(dict) --*

        Defines a condition under which a trigger fires.

        - **LogicalOperator** *(string) --*

          A logical operator.

        - **JobName** *(string) --*

          The name of the job whose ``JobRuns`` this condition applies to, and on which this
          trigger waits.

        - **State** *(string) --*

          The condition state. Currently, the values supported are ``SUCCEEDED`` , ``STOPPED``
          , ``TIMEOUT`` , and ``FAILED`` .

        - **CrawlerName** *(string) --*

          The name of the crawler to which this condition applies.

        - **CrawlState** *(string) --*

          The state of the crawler to which this condition applies.
    """


_ClientGetTriggerResponseTriggerTypeDef = TypedDict(
    "_ClientGetTriggerResponseTriggerTypeDef",
    {
        "Name": str,
        "WorkflowName": str,
        "Id": str,
        "Type": str,
        "State": str,
        "Description": str,
        "Schedule": str,
        "Actions": List[ClientGetTriggerResponseTriggerActionsTypeDef],
        "Predicate": ClientGetTriggerResponseTriggerPredicateTypeDef,
    },
    total=False,
)


class ClientGetTriggerResponseTriggerTypeDef(_ClientGetTriggerResponseTriggerTypeDef):
    """
    Type definition for `ClientGetTriggerResponse` `Trigger`

    The requested trigger definition.

    - **Name** *(string) --*

      The name of the trigger.

    - **WorkflowName** *(string) --*

      The name of the workflow associated with the trigger.

    - **Id** *(string) --*

      Reserved for future use.

    - **Type** *(string) --*

      The type of trigger that this is.

    - **State** *(string) --*

      The current state of the trigger.

    - **Description** *(string) --*

      A description of this trigger.

    - **Schedule** *(string) --*

      A ``cron`` expression used to specify the schedule (see `Time-Based Schedules for Jobs and
      Crawlers
      <https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html>`__ . For
      example, to run something every day at 12:15 UTC, you would specify: ``cron(15 12 * * ?
      *)`` .

    - **Actions** *(list) --*

      The actions initiated by this trigger.

      - *(dict) --*

        Defines an action to be initiated by a trigger.

        - **JobName** *(string) --*

          The name of a job to be executed.

        - **Arguments** *(dict) --*

          The job arguments used when this trigger fires. For this job run, they replace the
          default arguments set in the job definition itself.

          You can specify arguments here that your own job-execution script consumes, as well as
          arguments that AWS Glue itself consumes.

          For information about how to specify and consume your own Job arguments, see the
          `Calling AWS Glue APIs in Python
          <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
          topic in the developer guide.

          For information about the key-value pairs that AWS Glue consumes to set up your job,
          see the `Special Parameters Used by AWS Glue
          <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
          topic in the developer guide.

          - *(string) --*

            - *(string) --*

        - **Timeout** *(integer) --*

          The ``JobRun`` timeout in minutes. This is the maximum time that a job run can consume
          resources before it is terminated and enters ``TIMEOUT`` status. The default is 2,880
          minutes (48 hours). This overrides the timeout value set in the parent job.

        - **SecurityConfiguration** *(string) --*

          The name of the ``SecurityConfiguration`` structure to be used with this action.

        - **NotificationProperty** *(dict) --*

          Specifies configuration properties of a job run notification.

          - **NotifyDelayAfter** *(integer) --*

            After a job run starts, the number of minutes to wait before sending a job run delay
            notification.

        - **CrawlerName** *(string) --*

          The name of the crawler to be used with this action.

    - **Predicate** *(dict) --*

      The predicate of this trigger, which defines when it will fire.

      - **Logical** *(string) --*

        An optional field if only one condition is listed. If multiple conditions are listed,
        then this field is required.

      - **Conditions** *(list) --*

        A list of the conditions that determine when the trigger will fire.

        - *(dict) --*

          Defines a condition under which a trigger fires.

          - **LogicalOperator** *(string) --*

            A logical operator.

          - **JobName** *(string) --*

            The name of the job whose ``JobRuns`` this condition applies to, and on which this
            trigger waits.

          - **State** *(string) --*

            The condition state. Currently, the values supported are ``SUCCEEDED`` , ``STOPPED``
            , ``TIMEOUT`` , and ``FAILED`` .

          - **CrawlerName** *(string) --*

            The name of the crawler to which this condition applies.

          - **CrawlState** *(string) --*

            The state of the crawler to which this condition applies.
    """


_ClientGetTriggerResponseTypeDef = TypedDict(
    "_ClientGetTriggerResponseTypeDef",
    {"Trigger": ClientGetTriggerResponseTriggerTypeDef},
    total=False,
)


class ClientGetTriggerResponseTypeDef(_ClientGetTriggerResponseTypeDef):
    """
    Type definition for `ClientGetTrigger` `Response`

    - **Trigger** *(dict) --*

      The requested trigger definition.

      - **Name** *(string) --*

        The name of the trigger.

      - **WorkflowName** *(string) --*

        The name of the workflow associated with the trigger.

      - **Id** *(string) --*

        Reserved for future use.

      - **Type** *(string) --*

        The type of trigger that this is.

      - **State** *(string) --*

        The current state of the trigger.

      - **Description** *(string) --*

        A description of this trigger.

      - **Schedule** *(string) --*

        A ``cron`` expression used to specify the schedule (see `Time-Based Schedules for Jobs and
        Crawlers
        <https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html>`__ . For
        example, to run something every day at 12:15 UTC, you would specify: ``cron(15 12 * * ?
        *)`` .

      - **Actions** *(list) --*

        The actions initiated by this trigger.

        - *(dict) --*

          Defines an action to be initiated by a trigger.

          - **JobName** *(string) --*

            The name of a job to be executed.

          - **Arguments** *(dict) --*

            The job arguments used when this trigger fires. For this job run, they replace the
            default arguments set in the job definition itself.

            You can specify arguments here that your own job-execution script consumes, as well as
            arguments that AWS Glue itself consumes.

            For information about how to specify and consume your own Job arguments, see the
            `Calling AWS Glue APIs in Python
            <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
            topic in the developer guide.

            For information about the key-value pairs that AWS Glue consumes to set up your job,
            see the `Special Parameters Used by AWS Glue
            <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
            topic in the developer guide.

            - *(string) --*

              - *(string) --*

          - **Timeout** *(integer) --*

            The ``JobRun`` timeout in minutes. This is the maximum time that a job run can consume
            resources before it is terminated and enters ``TIMEOUT`` status. The default is 2,880
            minutes (48 hours). This overrides the timeout value set in the parent job.

          - **SecurityConfiguration** *(string) --*

            The name of the ``SecurityConfiguration`` structure to be used with this action.

          - **NotificationProperty** *(dict) --*

            Specifies configuration properties of a job run notification.

            - **NotifyDelayAfter** *(integer) --*

              After a job run starts, the number of minutes to wait before sending a job run delay
              notification.

          - **CrawlerName** *(string) --*

            The name of the crawler to be used with this action.

      - **Predicate** *(dict) --*

        The predicate of this trigger, which defines when it will fire.

        - **Logical** *(string) --*

          An optional field if only one condition is listed. If multiple conditions are listed,
          then this field is required.

        - **Conditions** *(list) --*

          A list of the conditions that determine when the trigger will fire.

          - *(dict) --*

            Defines a condition under which a trigger fires.

            - **LogicalOperator** *(string) --*

              A logical operator.

            - **JobName** *(string) --*

              The name of the job whose ``JobRuns`` this condition applies to, and on which this
              trigger waits.

            - **State** *(string) --*

              The condition state. Currently, the values supported are ``SUCCEEDED`` , ``STOPPED``
              , ``TIMEOUT`` , and ``FAILED`` .

            - **CrawlerName** *(string) --*

              The name of the crawler to which this condition applies.

            - **CrawlState** *(string) --*

              The state of the crawler to which this condition applies.
    """


_ClientGetTriggersResponseTriggersActionsNotificationPropertyTypeDef = TypedDict(
    "_ClientGetTriggersResponseTriggersActionsNotificationPropertyTypeDef",
    {"NotifyDelayAfter": int},
    total=False,
)


class ClientGetTriggersResponseTriggersActionsNotificationPropertyTypeDef(
    _ClientGetTriggersResponseTriggersActionsNotificationPropertyTypeDef
):
    """
    Type definition for `ClientGetTriggersResponseTriggersActions` `NotificationProperty`

    Specifies configuration properties of a job run notification.

    - **NotifyDelayAfter** *(integer) --*

      After a job run starts, the number of minutes to wait before sending a job run
      delay notification.
    """


_ClientGetTriggersResponseTriggersActionsTypeDef = TypedDict(
    "_ClientGetTriggersResponseTriggersActionsTypeDef",
    {
        "JobName": str,
        "Arguments": Dict[str, str],
        "Timeout": int,
        "SecurityConfiguration": str,
        "NotificationProperty": ClientGetTriggersResponseTriggersActionsNotificationPropertyTypeDef,
        "CrawlerName": str,
    },
    total=False,
)


class ClientGetTriggersResponseTriggersActionsTypeDef(
    _ClientGetTriggersResponseTriggersActionsTypeDef
):
    """
    Type definition for `ClientGetTriggersResponseTriggers` `Actions`

    Defines an action to be initiated by a trigger.

    - **JobName** *(string) --*

      The name of a job to be executed.

    - **Arguments** *(dict) --*

      The job arguments used when this trigger fires. For this job run, they replace the
      default arguments set in the job definition itself.

      You can specify arguments here that your own job-execution script consumes, as well
      as arguments that AWS Glue itself consumes.

      For information about how to specify and consume your own Job arguments, see the
      `Calling AWS Glue APIs in Python
      <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
      topic in the developer guide.

      For information about the key-value pairs that AWS Glue consumes to set up your job,
      see the `Special Parameters Used by AWS Glue
      <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
      topic in the developer guide.

      - *(string) --*

        - *(string) --*

    - **Timeout** *(integer) --*

      The ``JobRun`` timeout in minutes. This is the maximum time that a job run can
      consume resources before it is terminated and enters ``TIMEOUT`` status. The default
      is 2,880 minutes (48 hours). This overrides the timeout value set in the parent job.

    - **SecurityConfiguration** *(string) --*

      The name of the ``SecurityConfiguration`` structure to be used with this action.

    - **NotificationProperty** *(dict) --*

      Specifies configuration properties of a job run notification.

      - **NotifyDelayAfter** *(integer) --*

        After a job run starts, the number of minutes to wait before sending a job run
        delay notification.

    - **CrawlerName** *(string) --*

      The name of the crawler to be used with this action.
    """


_ClientGetTriggersResponseTriggersPredicateConditionsTypeDef = TypedDict(
    "_ClientGetTriggersResponseTriggersPredicateConditionsTypeDef",
    {
        "LogicalOperator": str,
        "JobName": str,
        "State": str,
        "CrawlerName": str,
        "CrawlState": str,
    },
    total=False,
)


class ClientGetTriggersResponseTriggersPredicateConditionsTypeDef(
    _ClientGetTriggersResponseTriggersPredicateConditionsTypeDef
):
    """
    Type definition for `ClientGetTriggersResponseTriggersPredicate` `Conditions`

    Defines a condition under which a trigger fires.

    - **LogicalOperator** *(string) --*

      A logical operator.

    - **JobName** *(string) --*

      The name of the job whose ``JobRuns`` this condition applies to, and on which this
      trigger waits.

    - **State** *(string) --*

      The condition state. Currently, the values supported are ``SUCCEEDED`` ,
      ``STOPPED`` , ``TIMEOUT`` , and ``FAILED`` .

    - **CrawlerName** *(string) --*

      The name of the crawler to which this condition applies.

    - **CrawlState** *(string) --*

      The state of the crawler to which this condition applies.
    """


_ClientGetTriggersResponseTriggersPredicateTypeDef = TypedDict(
    "_ClientGetTriggersResponseTriggersPredicateTypeDef",
    {
        "Logical": str,
        "Conditions": List[ClientGetTriggersResponseTriggersPredicateConditionsTypeDef],
    },
    total=False,
)


class ClientGetTriggersResponseTriggersPredicateTypeDef(
    _ClientGetTriggersResponseTriggersPredicateTypeDef
):
    """
    Type definition for `ClientGetTriggersResponseTriggers` `Predicate`

    The predicate of this trigger, which defines when it will fire.

    - **Logical** *(string) --*

      An optional field if only one condition is listed. If multiple conditions are listed,
      then this field is required.

    - **Conditions** *(list) --*

      A list of the conditions that determine when the trigger will fire.

      - *(dict) --*

        Defines a condition under which a trigger fires.

        - **LogicalOperator** *(string) --*

          A logical operator.

        - **JobName** *(string) --*

          The name of the job whose ``JobRuns`` this condition applies to, and on which this
          trigger waits.

        - **State** *(string) --*

          The condition state. Currently, the values supported are ``SUCCEEDED`` ,
          ``STOPPED`` , ``TIMEOUT`` , and ``FAILED`` .

        - **CrawlerName** *(string) --*

          The name of the crawler to which this condition applies.

        - **CrawlState** *(string) --*

          The state of the crawler to which this condition applies.
    """


_ClientGetTriggersResponseTriggersTypeDef = TypedDict(
    "_ClientGetTriggersResponseTriggersTypeDef",
    {
        "Name": str,
        "WorkflowName": str,
        "Id": str,
        "Type": str,
        "State": str,
        "Description": str,
        "Schedule": str,
        "Actions": List[ClientGetTriggersResponseTriggersActionsTypeDef],
        "Predicate": ClientGetTriggersResponseTriggersPredicateTypeDef,
    },
    total=False,
)


class ClientGetTriggersResponseTriggersTypeDef(
    _ClientGetTriggersResponseTriggersTypeDef
):
    """
    Type definition for `ClientGetTriggersResponse` `Triggers`

    Information about a specific trigger.

    - **Name** *(string) --*

      The name of the trigger.

    - **WorkflowName** *(string) --*

      The name of the workflow associated with the trigger.

    - **Id** *(string) --*

      Reserved for future use.

    - **Type** *(string) --*

      The type of trigger that this is.

    - **State** *(string) --*

      The current state of the trigger.

    - **Description** *(string) --*

      A description of this trigger.

    - **Schedule** *(string) --*

      A ``cron`` expression used to specify the schedule (see `Time-Based Schedules for Jobs
      and Crawlers
      <https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html>`__ .
      For example, to run something every day at 12:15 UTC, you would specify: ``cron(15 12 * *
      ? *)`` .

    - **Actions** *(list) --*

      The actions initiated by this trigger.

      - *(dict) --*

        Defines an action to be initiated by a trigger.

        - **JobName** *(string) --*

          The name of a job to be executed.

        - **Arguments** *(dict) --*

          The job arguments used when this trigger fires. For this job run, they replace the
          default arguments set in the job definition itself.

          You can specify arguments here that your own job-execution script consumes, as well
          as arguments that AWS Glue itself consumes.

          For information about how to specify and consume your own Job arguments, see the
          `Calling AWS Glue APIs in Python
          <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
          topic in the developer guide.

          For information about the key-value pairs that AWS Glue consumes to set up your job,
          see the `Special Parameters Used by AWS Glue
          <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
          topic in the developer guide.

          - *(string) --*

            - *(string) --*

        - **Timeout** *(integer) --*

          The ``JobRun`` timeout in minutes. This is the maximum time that a job run can
          consume resources before it is terminated and enters ``TIMEOUT`` status. The default
          is 2,880 minutes (48 hours). This overrides the timeout value set in the parent job.

        - **SecurityConfiguration** *(string) --*

          The name of the ``SecurityConfiguration`` structure to be used with this action.

        - **NotificationProperty** *(dict) --*

          Specifies configuration properties of a job run notification.

          - **NotifyDelayAfter** *(integer) --*

            After a job run starts, the number of minutes to wait before sending a job run
            delay notification.

        - **CrawlerName** *(string) --*

          The name of the crawler to be used with this action.

    - **Predicate** *(dict) --*

      The predicate of this trigger, which defines when it will fire.

      - **Logical** *(string) --*

        An optional field if only one condition is listed. If multiple conditions are listed,
        then this field is required.

      - **Conditions** *(list) --*

        A list of the conditions that determine when the trigger will fire.

        - *(dict) --*

          Defines a condition under which a trigger fires.

          - **LogicalOperator** *(string) --*

            A logical operator.

          - **JobName** *(string) --*

            The name of the job whose ``JobRuns`` this condition applies to, and on which this
            trigger waits.

          - **State** *(string) --*

            The condition state. Currently, the values supported are ``SUCCEEDED`` ,
            ``STOPPED`` , ``TIMEOUT`` , and ``FAILED`` .

          - **CrawlerName** *(string) --*

            The name of the crawler to which this condition applies.

          - **CrawlState** *(string) --*

            The state of the crawler to which this condition applies.
    """


_ClientGetTriggersResponseTypeDef = TypedDict(
    "_ClientGetTriggersResponseTypeDef",
    {"Triggers": List[ClientGetTriggersResponseTriggersTypeDef], "NextToken": str},
    total=False,
)


class ClientGetTriggersResponseTypeDef(_ClientGetTriggersResponseTypeDef):
    """
    Type definition for `ClientGetTriggers` `Response`

    - **Triggers** *(list) --*

      A list of triggers for the specified job.

      - *(dict) --*

        Information about a specific trigger.

        - **Name** *(string) --*

          The name of the trigger.

        - **WorkflowName** *(string) --*

          The name of the workflow associated with the trigger.

        - **Id** *(string) --*

          Reserved for future use.

        - **Type** *(string) --*

          The type of trigger that this is.

        - **State** *(string) --*

          The current state of the trigger.

        - **Description** *(string) --*

          A description of this trigger.

        - **Schedule** *(string) --*

          A ``cron`` expression used to specify the schedule (see `Time-Based Schedules for Jobs
          and Crawlers
          <https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html>`__ .
          For example, to run something every day at 12:15 UTC, you would specify: ``cron(15 12 * *
          ? *)`` .

        - **Actions** *(list) --*

          The actions initiated by this trigger.

          - *(dict) --*

            Defines an action to be initiated by a trigger.

            - **JobName** *(string) --*

              The name of a job to be executed.

            - **Arguments** *(dict) --*

              The job arguments used when this trigger fires. For this job run, they replace the
              default arguments set in the job definition itself.

              You can specify arguments here that your own job-execution script consumes, as well
              as arguments that AWS Glue itself consumes.

              For information about how to specify and consume your own Job arguments, see the
              `Calling AWS Glue APIs in Python
              <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
              topic in the developer guide.

              For information about the key-value pairs that AWS Glue consumes to set up your job,
              see the `Special Parameters Used by AWS Glue
              <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
              topic in the developer guide.

              - *(string) --*

                - *(string) --*

            - **Timeout** *(integer) --*

              The ``JobRun`` timeout in minutes. This is the maximum time that a job run can
              consume resources before it is terminated and enters ``TIMEOUT`` status. The default
              is 2,880 minutes (48 hours). This overrides the timeout value set in the parent job.

            - **SecurityConfiguration** *(string) --*

              The name of the ``SecurityConfiguration`` structure to be used with this action.

            - **NotificationProperty** *(dict) --*

              Specifies configuration properties of a job run notification.

              - **NotifyDelayAfter** *(integer) --*

                After a job run starts, the number of minutes to wait before sending a job run
                delay notification.

            - **CrawlerName** *(string) --*

              The name of the crawler to be used with this action.

        - **Predicate** *(dict) --*

          The predicate of this trigger, which defines when it will fire.

          - **Logical** *(string) --*

            An optional field if only one condition is listed. If multiple conditions are listed,
            then this field is required.

          - **Conditions** *(list) --*

            A list of the conditions that determine when the trigger will fire.

            - *(dict) --*

              Defines a condition under which a trigger fires.

              - **LogicalOperator** *(string) --*

                A logical operator.

              - **JobName** *(string) --*

                The name of the job whose ``JobRuns`` this condition applies to, and on which this
                trigger waits.

              - **State** *(string) --*

                The condition state. Currently, the values supported are ``SUCCEEDED`` ,
                ``STOPPED`` , ``TIMEOUT`` , and ``FAILED`` .

              - **CrawlerName** *(string) --*

                The name of the crawler to which this condition applies.

              - **CrawlState** *(string) --*

                The state of the crawler to which this condition applies.

    - **NextToken** *(string) --*

      A continuation token, if not all the requested triggers have yet been returned.
    """


_ClientGetUserDefinedFunctionResponseUserDefinedFunctionResourceUrisTypeDef = TypedDict(
    "_ClientGetUserDefinedFunctionResponseUserDefinedFunctionResourceUrisTypeDef",
    {"ResourceType": str, "Uri": str},
    total=False,
)


class ClientGetUserDefinedFunctionResponseUserDefinedFunctionResourceUrisTypeDef(
    _ClientGetUserDefinedFunctionResponseUserDefinedFunctionResourceUrisTypeDef
):
    """
    Type definition for `ClientGetUserDefinedFunctionResponseUserDefinedFunction` `ResourceUris`

    The URIs for function resources.

    - **ResourceType** *(string) --*

      The type of the resource.

    - **Uri** *(string) --*

      The URI for accessing the resource.
    """


_ClientGetUserDefinedFunctionResponseUserDefinedFunctionTypeDef = TypedDict(
    "_ClientGetUserDefinedFunctionResponseUserDefinedFunctionTypeDef",
    {
        "FunctionName": str,
        "ClassName": str,
        "OwnerName": str,
        "OwnerType": str,
        "CreateTime": datetime,
        "ResourceUris": List[
            ClientGetUserDefinedFunctionResponseUserDefinedFunctionResourceUrisTypeDef
        ],
    },
    total=False,
)


class ClientGetUserDefinedFunctionResponseUserDefinedFunctionTypeDef(
    _ClientGetUserDefinedFunctionResponseUserDefinedFunctionTypeDef
):
    """
    Type definition for `ClientGetUserDefinedFunctionResponse` `UserDefinedFunction`

    The requested function definition.

    - **FunctionName** *(string) --*

      The name of the function.

    - **ClassName** *(string) --*

      The Java class that contains the function code.

    - **OwnerName** *(string) --*

      The owner of the function.

    - **OwnerType** *(string) --*

      The owner type.

    - **CreateTime** *(datetime) --*

      The time at which the function was created.

    - **ResourceUris** *(list) --*

      The resource URIs for the function.

      - *(dict) --*

        The URIs for function resources.

        - **ResourceType** *(string) --*

          The type of the resource.

        - **Uri** *(string) --*

          The URI for accessing the resource.
    """


_ClientGetUserDefinedFunctionResponseTypeDef = TypedDict(
    "_ClientGetUserDefinedFunctionResponseTypeDef",
    {
        "UserDefinedFunction": ClientGetUserDefinedFunctionResponseUserDefinedFunctionTypeDef
    },
    total=False,
)


class ClientGetUserDefinedFunctionResponseTypeDef(
    _ClientGetUserDefinedFunctionResponseTypeDef
):
    """
    Type definition for `ClientGetUserDefinedFunction` `Response`

    - **UserDefinedFunction** *(dict) --*

      The requested function definition.

      - **FunctionName** *(string) --*

        The name of the function.

      - **ClassName** *(string) --*

        The Java class that contains the function code.

      - **OwnerName** *(string) --*

        The owner of the function.

      - **OwnerType** *(string) --*

        The owner type.

      - **CreateTime** *(datetime) --*

        The time at which the function was created.

      - **ResourceUris** *(list) --*

        The resource URIs for the function.

        - *(dict) --*

          The URIs for function resources.

          - **ResourceType** *(string) --*

            The type of the resource.

          - **Uri** *(string) --*

            The URI for accessing the resource.
    """


_ClientGetUserDefinedFunctionsResponseUserDefinedFunctionsResourceUrisTypeDef = TypedDict(
    "_ClientGetUserDefinedFunctionsResponseUserDefinedFunctionsResourceUrisTypeDef",
    {"ResourceType": str, "Uri": str},
    total=False,
)


class ClientGetUserDefinedFunctionsResponseUserDefinedFunctionsResourceUrisTypeDef(
    _ClientGetUserDefinedFunctionsResponseUserDefinedFunctionsResourceUrisTypeDef
):
    """
    Type definition for `ClientGetUserDefinedFunctionsResponseUserDefinedFunctions` `ResourceUris`

    The URIs for function resources.

    - **ResourceType** *(string) --*

      The type of the resource.

    - **Uri** *(string) --*

      The URI for accessing the resource.
    """


_ClientGetUserDefinedFunctionsResponseUserDefinedFunctionsTypeDef = TypedDict(
    "_ClientGetUserDefinedFunctionsResponseUserDefinedFunctionsTypeDef",
    {
        "FunctionName": str,
        "ClassName": str,
        "OwnerName": str,
        "OwnerType": str,
        "CreateTime": datetime,
        "ResourceUris": List[
            ClientGetUserDefinedFunctionsResponseUserDefinedFunctionsResourceUrisTypeDef
        ],
    },
    total=False,
)


class ClientGetUserDefinedFunctionsResponseUserDefinedFunctionsTypeDef(
    _ClientGetUserDefinedFunctionsResponseUserDefinedFunctionsTypeDef
):
    """
    Type definition for `ClientGetUserDefinedFunctionsResponse` `UserDefinedFunctions`

    Represents the equivalent of a Hive user-defined function (``UDF`` ) definition.

    - **FunctionName** *(string) --*

      The name of the function.

    - **ClassName** *(string) --*

      The Java class that contains the function code.

    - **OwnerName** *(string) --*

      The owner of the function.

    - **OwnerType** *(string) --*

      The owner type.

    - **CreateTime** *(datetime) --*

      The time at which the function was created.

    - **ResourceUris** *(list) --*

      The resource URIs for the function.

      - *(dict) --*

        The URIs for function resources.

        - **ResourceType** *(string) --*

          The type of the resource.

        - **Uri** *(string) --*

          The URI for accessing the resource.
    """


_ClientGetUserDefinedFunctionsResponseTypeDef = TypedDict(
    "_ClientGetUserDefinedFunctionsResponseTypeDef",
    {
        "UserDefinedFunctions": List[
            ClientGetUserDefinedFunctionsResponseUserDefinedFunctionsTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)


class ClientGetUserDefinedFunctionsResponseTypeDef(
    _ClientGetUserDefinedFunctionsResponseTypeDef
):
    """
    Type definition for `ClientGetUserDefinedFunctions` `Response`

    - **UserDefinedFunctions** *(list) --*

      A list of requested function definitions.

      - *(dict) --*

        Represents the equivalent of a Hive user-defined function (``UDF`` ) definition.

        - **FunctionName** *(string) --*

          The name of the function.

        - **ClassName** *(string) --*

          The Java class that contains the function code.

        - **OwnerName** *(string) --*

          The owner of the function.

        - **OwnerType** *(string) --*

          The owner type.

        - **CreateTime** *(datetime) --*

          The time at which the function was created.

        - **ResourceUris** *(list) --*

          The resource URIs for the function.

          - *(dict) --*

            The URIs for function resources.

            - **ResourceType** *(string) --*

              The type of the resource.

            - **Uri** *(string) --*

              The URI for accessing the resource.

    - **NextToken** *(string) --*

      A continuation token, if the list of functions returned does not include the last requested
      function.
    """


_ClientGetWorkflowResponseWorkflowGraphEdgesTypeDef = TypedDict(
    "_ClientGetWorkflowResponseWorkflowGraphEdgesTypeDef",
    {"SourceId": str, "DestinationId": str},
    total=False,
)


class ClientGetWorkflowResponseWorkflowGraphEdgesTypeDef(
    _ClientGetWorkflowResponseWorkflowGraphEdgesTypeDef
):
    """
    Type definition for `ClientGetWorkflowResponseWorkflowGraph` `Edges`

    An edge represents a directed connection between two AWS Glue components which are part
    of the workflow the edge belongs to.

    - **SourceId** *(string) --*

      The unique of the node within the workflow where the edge starts.

    - **DestinationId** *(string) --*

      The unique of the node within the workflow where the edge ends.
    """


_ClientGetWorkflowResponseWorkflowGraphNodesCrawlerDetailsCrawlsTypeDef = TypedDict(
    "_ClientGetWorkflowResponseWorkflowGraphNodesCrawlerDetailsCrawlsTypeDef",
    {
        "State": str,
        "StartedOn": datetime,
        "CompletedOn": datetime,
        "ErrorMessage": str,
        "LogGroup": str,
        "LogStream": str,
    },
    total=False,
)


class ClientGetWorkflowResponseWorkflowGraphNodesCrawlerDetailsCrawlsTypeDef(
    _ClientGetWorkflowResponseWorkflowGraphNodesCrawlerDetailsCrawlsTypeDef
):
    """
    Type definition for `ClientGetWorkflowResponseWorkflowGraphNodesCrawlerDetails` `Crawls`

    The details of a crawl in the workflow.

    - **State** *(string) --*

      The state of the crawler.

    - **StartedOn** *(datetime) --*

      The date and time on which the crawl started.

    - **CompletedOn** *(datetime) --*

      The date and time on which the crawl completed.

    - **ErrorMessage** *(string) --*

      The error message associated with the crawl.

    - **LogGroup** *(string) --*

      The log group associated with the crawl.

    - **LogStream** *(string) --*

      The log stream associated with the crawl.
    """


_ClientGetWorkflowResponseWorkflowGraphNodesCrawlerDetailsTypeDef = TypedDict(
    "_ClientGetWorkflowResponseWorkflowGraphNodesCrawlerDetailsTypeDef",
    {
        "Crawls": List[
            ClientGetWorkflowResponseWorkflowGraphNodesCrawlerDetailsCrawlsTypeDef
        ]
    },
    total=False,
)


class ClientGetWorkflowResponseWorkflowGraphNodesCrawlerDetailsTypeDef(
    _ClientGetWorkflowResponseWorkflowGraphNodesCrawlerDetailsTypeDef
):
    """
    Type definition for `ClientGetWorkflowResponseWorkflowGraphNodes` `CrawlerDetails`

    Details of the crawler when the node represents a crawler.

    - **Crawls** *(list) --*

      A list of crawls represented by the crawl node.

      - *(dict) --*

        The details of a crawl in the workflow.

        - **State** *(string) --*

          The state of the crawler.

        - **StartedOn** *(datetime) --*

          The date and time on which the crawl started.

        - **CompletedOn** *(datetime) --*

          The date and time on which the crawl completed.

        - **ErrorMessage** *(string) --*

          The error message associated with the crawl.

        - **LogGroup** *(string) --*

          The log group associated with the crawl.

        - **LogStream** *(string) --*

          The log stream associated with the crawl.
    """


_ClientGetWorkflowResponseWorkflowGraphNodesJobDetailsJobRunsNotificationPropertyTypeDef = TypedDict(
    "_ClientGetWorkflowResponseWorkflowGraphNodesJobDetailsJobRunsNotificationPropertyTypeDef",
    {"NotifyDelayAfter": int},
    total=False,
)


class ClientGetWorkflowResponseWorkflowGraphNodesJobDetailsJobRunsNotificationPropertyTypeDef(
    _ClientGetWorkflowResponseWorkflowGraphNodesJobDetailsJobRunsNotificationPropertyTypeDef
):
    """
    Type definition for `ClientGetWorkflowResponseWorkflowGraphNodesJobDetailsJobRuns` `NotificationProperty`

    Specifies configuration properties of a job run notification.

    - **NotifyDelayAfter** *(integer) --*

      After a job run starts, the number of minutes to wait before sending a job
      run delay notification.
    """


_ClientGetWorkflowResponseWorkflowGraphNodesJobDetailsJobRunsPredecessorRunsTypeDef = TypedDict(
    "_ClientGetWorkflowResponseWorkflowGraphNodesJobDetailsJobRunsPredecessorRunsTypeDef",
    {"JobName": str, "RunId": str},
    total=False,
)


class ClientGetWorkflowResponseWorkflowGraphNodesJobDetailsJobRunsPredecessorRunsTypeDef(
    _ClientGetWorkflowResponseWorkflowGraphNodesJobDetailsJobRunsPredecessorRunsTypeDef
):
    """
    Type definition for `ClientGetWorkflowResponseWorkflowGraphNodesJobDetailsJobRuns` `PredecessorRuns`

    A job run that was used in the predicate of a conditional trigger that
    triggered this job run.

    - **JobName** *(string) --*

      The name of the job definition used by the predecessor job run.

    - **RunId** *(string) --*

      The job-run ID of the predecessor job run.
    """


_ClientGetWorkflowResponseWorkflowGraphNodesJobDetailsJobRunsTypeDef = TypedDict(
    "_ClientGetWorkflowResponseWorkflowGraphNodesJobDetailsJobRunsTypeDef",
    {
        "Id": str,
        "Attempt": int,
        "PreviousRunId": str,
        "TriggerName": str,
        "JobName": str,
        "StartedOn": datetime,
        "LastModifiedOn": datetime,
        "CompletedOn": datetime,
        "JobRunState": str,
        "Arguments": Dict[str, str],
        "ErrorMessage": str,
        "PredecessorRuns": List[
            ClientGetWorkflowResponseWorkflowGraphNodesJobDetailsJobRunsPredecessorRunsTypeDef
        ],
        "AllocatedCapacity": int,
        "ExecutionTime": int,
        "Timeout": int,
        "MaxCapacity": float,
        "WorkerType": str,
        "NumberOfWorkers": int,
        "SecurityConfiguration": str,
        "LogGroupName": str,
        "NotificationProperty": ClientGetWorkflowResponseWorkflowGraphNodesJobDetailsJobRunsNotificationPropertyTypeDef,
        "GlueVersion": str,
    },
    total=False,
)


class ClientGetWorkflowResponseWorkflowGraphNodesJobDetailsJobRunsTypeDef(
    _ClientGetWorkflowResponseWorkflowGraphNodesJobDetailsJobRunsTypeDef
):
    """
    Type definition for `ClientGetWorkflowResponseWorkflowGraphNodesJobDetails` `JobRuns`

    Contains information about a job run.

    - **Id** *(string) --*

      The ID of this job run.

    - **Attempt** *(integer) --*

      The number of the attempt to run this job.

    - **PreviousRunId** *(string) --*

      The ID of the previous run of this job. For example, the ``JobRunId`` specified
      in the ``StartJobRun`` action.

    - **TriggerName** *(string) --*

      The name of the trigger that started this job run.

    - **JobName** *(string) --*

      The name of the job definition being used in this run.

    - **StartedOn** *(datetime) --*

      The date and time at which this job run was started.

    - **LastModifiedOn** *(datetime) --*

      The last time that this job run was modified.

    - **CompletedOn** *(datetime) --*

      The date and time that this job run completed.

    - **JobRunState** *(string) --*

      The current state of the job run.

    - **Arguments** *(dict) --*

      The job arguments associated with this run. For this job run, they replace the
      default arguments set in the job definition itself.

      You can specify arguments here that your own job-execution script consumes, as
      well as arguments that AWS Glue itself consumes.

      For information about how to specify and consume your own job arguments, see
      the `Calling AWS Glue APIs in Python
      <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
      topic in the developer guide.

      For information about the key-value pairs that AWS Glue consumes to set up your
      job, see the `Special Parameters Used by AWS Glue
      <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
      topic in the developer guide.

      - *(string) --*

        - *(string) --*

    - **ErrorMessage** *(string) --*

      An error message associated with this job run.

    - **PredecessorRuns** *(list) --*

      A list of predecessors to this job run.

      - *(dict) --*

        A job run that was used in the predicate of a conditional trigger that
        triggered this job run.

        - **JobName** *(string) --*

          The name of the job definition used by the predecessor job run.

        - **RunId** *(string) --*

          The job-run ID of the predecessor job run.

    - **AllocatedCapacity** *(integer) --*

      This field is deprecated. Use ``MaxCapacity`` instead.

      The number of AWS Glue data processing units (DPUs) allocated to this JobRun.
      From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a relative
      measure of processing power that consists of 4 vCPUs of compute capacity and 16
      GB of memory. For more information, see the `AWS Glue pricing page
      <https://aws.amazon.com/glue/pricing/>`__ .

    - **ExecutionTime** *(integer) --*

      The amount of time (in seconds) that the job run consumed resources.

    - **Timeout** *(integer) --*

      The ``JobRun`` timeout in minutes. This is the maximum time that a job run can
      consume resources before it is terminated and enters ``TIMEOUT`` status. The
      default is 2,880 minutes (48 hours). This overrides the timeout value set in
      the parent job.

    - **MaxCapacity** *(float) --*

      The number of AWS Glue data processing units (DPUs) that can be allocated when
      this job runs. A DPU is a relative measure of processing power that consists of
      4 vCPUs of compute capacity and 16 GB of memory. For more information, see the
      `AWS Glue pricing page
      <https://docs.aws.amazon.com/https:/aws.amazon.com/glue/pricing/>`__ .

      Do not set ``Max Capacity`` if using ``WorkerType`` and ``NumberOfWorkers`` .

      The value that can be allocated for ``MaxCapacity`` depends on whether you are
      running a Python shell job or an Apache Spark ETL job:

      * When you specify a Python shell job (``JobCommand.Name`` ="pythonshell"), you
      can allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.

      * When you specify an Apache Spark ETL job (``JobCommand.Name`` ="glueetl"),
      you can allocate from 2 to 100 DPUs. The default is 10 DPUs. This job type
      cannot have a fractional DPU allocation.

    - **WorkerType** *(string) --*

      The type of predefined worker that is allocated when a job runs. Accepts a
      value of Standard, G.1X, or G.2X.

      * For the ``Standard`` worker type, each worker provides 4 vCPU, 16 GB of
      memory and a 50GB disk, and 2 executors per worker.

      * For the ``G.1X`` worker type, each worker provides 4 vCPU, 16 GB of memory
      and a 64GB disk, and 1 executor per worker.

      * For the ``G.2X`` worker type, each worker provides 8 vCPU, 32 GB of memory
      and a 128GB disk, and 1 executor per worker.

    - **NumberOfWorkers** *(integer) --*

      The number of workers of a defined ``workerType`` that are allocated when a job
      runs.

      The maximum number of workers you can define are 299 for ``G.1X`` , and 149 for
      ``G.2X`` .

    - **SecurityConfiguration** *(string) --*

      The name of the ``SecurityConfiguration`` structure to be used with this job
      run.

    - **LogGroupName** *(string) --*

      The name of the log group for secure logging that can be server-side encrypted
      in Amazon CloudWatch using AWS KMS. This name can be ``/aws-glue/jobs/`` , in
      which case the default encryption is ``NONE`` . If you add a role name and
      ``SecurityConfiguration`` name (in other words,
      ``/aws-glue/jobs-yourRoleName-yourSecurityConfigurationName/`` ), then that
      security configuration is used to encrypt the log group.

    - **NotificationProperty** *(dict) --*

      Specifies configuration properties of a job run notification.

      - **NotifyDelayAfter** *(integer) --*

        After a job run starts, the number of minutes to wait before sending a job
        run delay notification.

    - **GlueVersion** *(string) --*

      Glue version determines the versions of Apache Spark and Python that AWS Glue
      supports. The Python version indicates the version supported for jobs of type
      Spark.

      For more information about the available AWS Glue versions and corresponding
      Spark and Python versions, see `Glue version
      <https://docs.aws.amazon.com/glue/latest/dg/add-job.html>`__ in the developer
      guide.

      Jobs that are created without specifying a Glue version default to Glue 0.9.
    """


_ClientGetWorkflowResponseWorkflowGraphNodesJobDetailsTypeDef = TypedDict(
    "_ClientGetWorkflowResponseWorkflowGraphNodesJobDetailsTypeDef",
    {
        "JobRuns": List[
            ClientGetWorkflowResponseWorkflowGraphNodesJobDetailsJobRunsTypeDef
        ]
    },
    total=False,
)


class ClientGetWorkflowResponseWorkflowGraphNodesJobDetailsTypeDef(
    _ClientGetWorkflowResponseWorkflowGraphNodesJobDetailsTypeDef
):
    """
    Type definition for `ClientGetWorkflowResponseWorkflowGraphNodes` `JobDetails`

    Details of the Job when the node represents a Job.

    - **JobRuns** *(list) --*

      The information for the job runs represented by the job node.

      - *(dict) --*

        Contains information about a job run.

        - **Id** *(string) --*

          The ID of this job run.

        - **Attempt** *(integer) --*

          The number of the attempt to run this job.

        - **PreviousRunId** *(string) --*

          The ID of the previous run of this job. For example, the ``JobRunId`` specified
          in the ``StartJobRun`` action.

        - **TriggerName** *(string) --*

          The name of the trigger that started this job run.

        - **JobName** *(string) --*

          The name of the job definition being used in this run.

        - **StartedOn** *(datetime) --*

          The date and time at which this job run was started.

        - **LastModifiedOn** *(datetime) --*

          The last time that this job run was modified.

        - **CompletedOn** *(datetime) --*

          The date and time that this job run completed.

        - **JobRunState** *(string) --*

          The current state of the job run.

        - **Arguments** *(dict) --*

          The job arguments associated with this run. For this job run, they replace the
          default arguments set in the job definition itself.

          You can specify arguments here that your own job-execution script consumes, as
          well as arguments that AWS Glue itself consumes.

          For information about how to specify and consume your own job arguments, see
          the `Calling AWS Glue APIs in Python
          <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
          topic in the developer guide.

          For information about the key-value pairs that AWS Glue consumes to set up your
          job, see the `Special Parameters Used by AWS Glue
          <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
          topic in the developer guide.

          - *(string) --*

            - *(string) --*

        - **ErrorMessage** *(string) --*

          An error message associated with this job run.

        - **PredecessorRuns** *(list) --*

          A list of predecessors to this job run.

          - *(dict) --*

            A job run that was used in the predicate of a conditional trigger that
            triggered this job run.

            - **JobName** *(string) --*

              The name of the job definition used by the predecessor job run.

            - **RunId** *(string) --*

              The job-run ID of the predecessor job run.

        - **AllocatedCapacity** *(integer) --*

          This field is deprecated. Use ``MaxCapacity`` instead.

          The number of AWS Glue data processing units (DPUs) allocated to this JobRun.
          From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a relative
          measure of processing power that consists of 4 vCPUs of compute capacity and 16
          GB of memory. For more information, see the `AWS Glue pricing page
          <https://aws.amazon.com/glue/pricing/>`__ .

        - **ExecutionTime** *(integer) --*

          The amount of time (in seconds) that the job run consumed resources.

        - **Timeout** *(integer) --*

          The ``JobRun`` timeout in minutes. This is the maximum time that a job run can
          consume resources before it is terminated and enters ``TIMEOUT`` status. The
          default is 2,880 minutes (48 hours). This overrides the timeout value set in
          the parent job.

        - **MaxCapacity** *(float) --*

          The number of AWS Glue data processing units (DPUs) that can be allocated when
          this job runs. A DPU is a relative measure of processing power that consists of
          4 vCPUs of compute capacity and 16 GB of memory. For more information, see the
          `AWS Glue pricing page
          <https://docs.aws.amazon.com/https:/aws.amazon.com/glue/pricing/>`__ .

          Do not set ``Max Capacity`` if using ``WorkerType`` and ``NumberOfWorkers`` .

          The value that can be allocated for ``MaxCapacity`` depends on whether you are
          running a Python shell job or an Apache Spark ETL job:

          * When you specify a Python shell job (``JobCommand.Name`` ="pythonshell"), you
          can allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.

          * When you specify an Apache Spark ETL job (``JobCommand.Name`` ="glueetl"),
          you can allocate from 2 to 100 DPUs. The default is 10 DPUs. This job type
          cannot have a fractional DPU allocation.

        - **WorkerType** *(string) --*

          The type of predefined worker that is allocated when a job runs. Accepts a
          value of Standard, G.1X, or G.2X.

          * For the ``Standard`` worker type, each worker provides 4 vCPU, 16 GB of
          memory and a 50GB disk, and 2 executors per worker.

          * For the ``G.1X`` worker type, each worker provides 4 vCPU, 16 GB of memory
          and a 64GB disk, and 1 executor per worker.

          * For the ``G.2X`` worker type, each worker provides 8 vCPU, 32 GB of memory
          and a 128GB disk, and 1 executor per worker.

        - **NumberOfWorkers** *(integer) --*

          The number of workers of a defined ``workerType`` that are allocated when a job
          runs.

          The maximum number of workers you can define are 299 for ``G.1X`` , and 149 for
          ``G.2X`` .

        - **SecurityConfiguration** *(string) --*

          The name of the ``SecurityConfiguration`` structure to be used with this job
          run.

        - **LogGroupName** *(string) --*

          The name of the log group for secure logging that can be server-side encrypted
          in Amazon CloudWatch using AWS KMS. This name can be ``/aws-glue/jobs/`` , in
          which case the default encryption is ``NONE`` . If you add a role name and
          ``SecurityConfiguration`` name (in other words,
          ``/aws-glue/jobs-yourRoleName-yourSecurityConfigurationName/`` ), then that
          security configuration is used to encrypt the log group.

        - **NotificationProperty** *(dict) --*

          Specifies configuration properties of a job run notification.

          - **NotifyDelayAfter** *(integer) --*

            After a job run starts, the number of minutes to wait before sending a job
            run delay notification.

        - **GlueVersion** *(string) --*

          Glue version determines the versions of Apache Spark and Python that AWS Glue
          supports. The Python version indicates the version supported for jobs of type
          Spark.

          For more information about the available AWS Glue versions and corresponding
          Spark and Python versions, see `Glue version
          <https://docs.aws.amazon.com/glue/latest/dg/add-job.html>`__ in the developer
          guide.

          Jobs that are created without specifying a Glue version default to Glue 0.9.
    """


_ClientGetWorkflowResponseWorkflowGraphNodesTriggerDetailsTriggerActionsNotificationPropertyTypeDef = TypedDict(
    "_ClientGetWorkflowResponseWorkflowGraphNodesTriggerDetailsTriggerActionsNotificationPropertyTypeDef",
    {"NotifyDelayAfter": int},
    total=False,
)


class ClientGetWorkflowResponseWorkflowGraphNodesTriggerDetailsTriggerActionsNotificationPropertyTypeDef(
    _ClientGetWorkflowResponseWorkflowGraphNodesTriggerDetailsTriggerActionsNotificationPropertyTypeDef
):
    """
    Type definition for `ClientGetWorkflowResponseWorkflowGraphNodesTriggerDetailsTriggerActions` `NotificationProperty`

    Specifies configuration properties of a job run notification.

    - **NotifyDelayAfter** *(integer) --*

      After a job run starts, the number of minutes to wait before sending a job
      run delay notification.
    """


_ClientGetWorkflowResponseWorkflowGraphNodesTriggerDetailsTriggerActionsTypeDef = TypedDict(
    "_ClientGetWorkflowResponseWorkflowGraphNodesTriggerDetailsTriggerActionsTypeDef",
    {
        "JobName": str,
        "Arguments": Dict[str, str],
        "Timeout": int,
        "SecurityConfiguration": str,
        "NotificationProperty": ClientGetWorkflowResponseWorkflowGraphNodesTriggerDetailsTriggerActionsNotificationPropertyTypeDef,
        "CrawlerName": str,
    },
    total=False,
)


class ClientGetWorkflowResponseWorkflowGraphNodesTriggerDetailsTriggerActionsTypeDef(
    _ClientGetWorkflowResponseWorkflowGraphNodesTriggerDetailsTriggerActionsTypeDef
):
    """
    Type definition for `ClientGetWorkflowResponseWorkflowGraphNodesTriggerDetailsTrigger` `Actions`

    Defines an action to be initiated by a trigger.

    - **JobName** *(string) --*

      The name of a job to be executed.

    - **Arguments** *(dict) --*

      The job arguments used when this trigger fires. For this job run, they
      replace the default arguments set in the job definition itself.

      You can specify arguments here that your own job-execution script consumes,
      as well as arguments that AWS Glue itself consumes.

      For information about how to specify and consume your own Job arguments, see
      the `Calling AWS Glue APIs in Python
      <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
      topic in the developer guide.

      For information about the key-value pairs that AWS Glue consumes to set up
      your job, see the `Special Parameters Used by AWS Glue
      <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
      topic in the developer guide.

      - *(string) --*

        - *(string) --*

    - **Timeout** *(integer) --*

      The ``JobRun`` timeout in minutes. This is the maximum time that a job run
      can consume resources before it is terminated and enters ``TIMEOUT`` status.
      The default is 2,880 minutes (48 hours). This overrides the timeout value set
      in the parent job.

    - **SecurityConfiguration** *(string) --*

      The name of the ``SecurityConfiguration`` structure to be used with this
      action.

    - **NotificationProperty** *(dict) --*

      Specifies configuration properties of a job run notification.

      - **NotifyDelayAfter** *(integer) --*

        After a job run starts, the number of minutes to wait before sending a job
        run delay notification.

    - **CrawlerName** *(string) --*

      The name of the crawler to be used with this action.
    """


_ClientGetWorkflowResponseWorkflowGraphNodesTriggerDetailsTriggerPredicateConditionsTypeDef = TypedDict(
    "_ClientGetWorkflowResponseWorkflowGraphNodesTriggerDetailsTriggerPredicateConditionsTypeDef",
    {
        "LogicalOperator": str,
        "JobName": str,
        "State": str,
        "CrawlerName": str,
        "CrawlState": str,
    },
    total=False,
)


class ClientGetWorkflowResponseWorkflowGraphNodesTriggerDetailsTriggerPredicateConditionsTypeDef(
    _ClientGetWorkflowResponseWorkflowGraphNodesTriggerDetailsTriggerPredicateConditionsTypeDef
):
    """
    Type definition for `ClientGetWorkflowResponseWorkflowGraphNodesTriggerDetailsTriggerPredicate` `Conditions`

    Defines a condition under which a trigger fires.

    - **LogicalOperator** *(string) --*

      A logical operator.

    - **JobName** *(string) --*

      The name of the job whose ``JobRuns`` this condition applies to, and on
      which this trigger waits.

    - **State** *(string) --*

      The condition state. Currently, the values supported are ``SUCCEEDED`` ,
      ``STOPPED`` , ``TIMEOUT`` , and ``FAILED`` .

    - **CrawlerName** *(string) --*

      The name of the crawler to which this condition applies.

    - **CrawlState** *(string) --*

      The state of the crawler to which this condition applies.
    """


_ClientGetWorkflowResponseWorkflowGraphNodesTriggerDetailsTriggerPredicateTypeDef = TypedDict(
    "_ClientGetWorkflowResponseWorkflowGraphNodesTriggerDetailsTriggerPredicateTypeDef",
    {
        "Logical": str,
        "Conditions": List[
            ClientGetWorkflowResponseWorkflowGraphNodesTriggerDetailsTriggerPredicateConditionsTypeDef
        ],
    },
    total=False,
)


class ClientGetWorkflowResponseWorkflowGraphNodesTriggerDetailsTriggerPredicateTypeDef(
    _ClientGetWorkflowResponseWorkflowGraphNodesTriggerDetailsTriggerPredicateTypeDef
):
    """
    Type definition for `ClientGetWorkflowResponseWorkflowGraphNodesTriggerDetailsTrigger` `Predicate`

    The predicate of this trigger, which defines when it will fire.

    - **Logical** *(string) --*

      An optional field if only one condition is listed. If multiple conditions are
      listed, then this field is required.

    - **Conditions** *(list) --*

      A list of the conditions that determine when the trigger will fire.

      - *(dict) --*

        Defines a condition under which a trigger fires.

        - **LogicalOperator** *(string) --*

          A logical operator.

        - **JobName** *(string) --*

          The name of the job whose ``JobRuns`` this condition applies to, and on
          which this trigger waits.

        - **State** *(string) --*

          The condition state. Currently, the values supported are ``SUCCEEDED`` ,
          ``STOPPED`` , ``TIMEOUT`` , and ``FAILED`` .

        - **CrawlerName** *(string) --*

          The name of the crawler to which this condition applies.

        - **CrawlState** *(string) --*

          The state of the crawler to which this condition applies.
    """


_ClientGetWorkflowResponseWorkflowGraphNodesTriggerDetailsTriggerTypeDef = TypedDict(
    "_ClientGetWorkflowResponseWorkflowGraphNodesTriggerDetailsTriggerTypeDef",
    {
        "Name": str,
        "WorkflowName": str,
        "Id": str,
        "Type": str,
        "State": str,
        "Description": str,
        "Schedule": str,
        "Actions": List[
            ClientGetWorkflowResponseWorkflowGraphNodesTriggerDetailsTriggerActionsTypeDef
        ],
        "Predicate": ClientGetWorkflowResponseWorkflowGraphNodesTriggerDetailsTriggerPredicateTypeDef,
    },
    total=False,
)


class ClientGetWorkflowResponseWorkflowGraphNodesTriggerDetailsTriggerTypeDef(
    _ClientGetWorkflowResponseWorkflowGraphNodesTriggerDetailsTriggerTypeDef
):
    """
    Type definition for `ClientGetWorkflowResponseWorkflowGraphNodesTriggerDetails` `Trigger`

    The information of the trigger represented by the trigger node.

    - **Name** *(string) --*

      The name of the trigger.

    - **WorkflowName** *(string) --*

      The name of the workflow associated with the trigger.

    - **Id** *(string) --*

      Reserved for future use.

    - **Type** *(string) --*

      The type of trigger that this is.

    - **State** *(string) --*

      The current state of the trigger.

    - **Description** *(string) --*

      A description of this trigger.

    - **Schedule** *(string) --*

      A ``cron`` expression used to specify the schedule (see `Time-Based Schedules for
      Jobs and Crawlers
      <https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html>`__
      . For example, to run something every day at 12:15 UTC, you would specify:
      ``cron(15 12 * * ? *)`` .

    - **Actions** *(list) --*

      The actions initiated by this trigger.

      - *(dict) --*

        Defines an action to be initiated by a trigger.

        - **JobName** *(string) --*

          The name of a job to be executed.

        - **Arguments** *(dict) --*

          The job arguments used when this trigger fires. For this job run, they
          replace the default arguments set in the job definition itself.

          You can specify arguments here that your own job-execution script consumes,
          as well as arguments that AWS Glue itself consumes.

          For information about how to specify and consume your own Job arguments, see
          the `Calling AWS Glue APIs in Python
          <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
          topic in the developer guide.

          For information about the key-value pairs that AWS Glue consumes to set up
          your job, see the `Special Parameters Used by AWS Glue
          <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
          topic in the developer guide.

          - *(string) --*

            - *(string) --*

        - **Timeout** *(integer) --*

          The ``JobRun`` timeout in minutes. This is the maximum time that a job run
          can consume resources before it is terminated and enters ``TIMEOUT`` status.
          The default is 2,880 minutes (48 hours). This overrides the timeout value set
          in the parent job.

        - **SecurityConfiguration** *(string) --*

          The name of the ``SecurityConfiguration`` structure to be used with this
          action.

        - **NotificationProperty** *(dict) --*

          Specifies configuration properties of a job run notification.

          - **NotifyDelayAfter** *(integer) --*

            After a job run starts, the number of minutes to wait before sending a job
            run delay notification.

        - **CrawlerName** *(string) --*

          The name of the crawler to be used with this action.

    - **Predicate** *(dict) --*

      The predicate of this trigger, which defines when it will fire.

      - **Logical** *(string) --*

        An optional field if only one condition is listed. If multiple conditions are
        listed, then this field is required.

      - **Conditions** *(list) --*

        A list of the conditions that determine when the trigger will fire.

        - *(dict) --*

          Defines a condition under which a trigger fires.

          - **LogicalOperator** *(string) --*

            A logical operator.

          - **JobName** *(string) --*

            The name of the job whose ``JobRuns`` this condition applies to, and on
            which this trigger waits.

          - **State** *(string) --*

            The condition state. Currently, the values supported are ``SUCCEEDED`` ,
            ``STOPPED`` , ``TIMEOUT`` , and ``FAILED`` .

          - **CrawlerName** *(string) --*

            The name of the crawler to which this condition applies.

          - **CrawlState** *(string) --*

            The state of the crawler to which this condition applies.
    """


_ClientGetWorkflowResponseWorkflowGraphNodesTriggerDetailsTypeDef = TypedDict(
    "_ClientGetWorkflowResponseWorkflowGraphNodesTriggerDetailsTypeDef",
    {
        "Trigger": ClientGetWorkflowResponseWorkflowGraphNodesTriggerDetailsTriggerTypeDef
    },
    total=False,
)


class ClientGetWorkflowResponseWorkflowGraphNodesTriggerDetailsTypeDef(
    _ClientGetWorkflowResponseWorkflowGraphNodesTriggerDetailsTypeDef
):
    """
    Type definition for `ClientGetWorkflowResponseWorkflowGraphNodes` `TriggerDetails`

    Details of the Trigger when the node represents a Trigger.

    - **Trigger** *(dict) --*

      The information of the trigger represented by the trigger node.

      - **Name** *(string) --*

        The name of the trigger.

      - **WorkflowName** *(string) --*

        The name of the workflow associated with the trigger.

      - **Id** *(string) --*

        Reserved for future use.

      - **Type** *(string) --*

        The type of trigger that this is.

      - **State** *(string) --*

        The current state of the trigger.

      - **Description** *(string) --*

        A description of this trigger.

      - **Schedule** *(string) --*

        A ``cron`` expression used to specify the schedule (see `Time-Based Schedules for
        Jobs and Crawlers
        <https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html>`__
        . For example, to run something every day at 12:15 UTC, you would specify:
        ``cron(15 12 * * ? *)`` .

      - **Actions** *(list) --*

        The actions initiated by this trigger.

        - *(dict) --*

          Defines an action to be initiated by a trigger.

          - **JobName** *(string) --*

            The name of a job to be executed.

          - **Arguments** *(dict) --*

            The job arguments used when this trigger fires. For this job run, they
            replace the default arguments set in the job definition itself.

            You can specify arguments here that your own job-execution script consumes,
            as well as arguments that AWS Glue itself consumes.

            For information about how to specify and consume your own Job arguments, see
            the `Calling AWS Glue APIs in Python
            <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
            topic in the developer guide.

            For information about the key-value pairs that AWS Glue consumes to set up
            your job, see the `Special Parameters Used by AWS Glue
            <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
            topic in the developer guide.

            - *(string) --*

              - *(string) --*

          - **Timeout** *(integer) --*

            The ``JobRun`` timeout in minutes. This is the maximum time that a job run
            can consume resources before it is terminated and enters ``TIMEOUT`` status.
            The default is 2,880 minutes (48 hours). This overrides the timeout value set
            in the parent job.

          - **SecurityConfiguration** *(string) --*

            The name of the ``SecurityConfiguration`` structure to be used with this
            action.

          - **NotificationProperty** *(dict) --*

            Specifies configuration properties of a job run notification.

            - **NotifyDelayAfter** *(integer) --*

              After a job run starts, the number of minutes to wait before sending a job
              run delay notification.

          - **CrawlerName** *(string) --*

            The name of the crawler to be used with this action.

      - **Predicate** *(dict) --*

        The predicate of this trigger, which defines when it will fire.

        - **Logical** *(string) --*

          An optional field if only one condition is listed. If multiple conditions are
          listed, then this field is required.

        - **Conditions** *(list) --*

          A list of the conditions that determine when the trigger will fire.

          - *(dict) --*

            Defines a condition under which a trigger fires.

            - **LogicalOperator** *(string) --*

              A logical operator.

            - **JobName** *(string) --*

              The name of the job whose ``JobRuns`` this condition applies to, and on
              which this trigger waits.

            - **State** *(string) --*

              The condition state. Currently, the values supported are ``SUCCEEDED`` ,
              ``STOPPED`` , ``TIMEOUT`` , and ``FAILED`` .

            - **CrawlerName** *(string) --*

              The name of the crawler to which this condition applies.

            - **CrawlState** *(string) --*

              The state of the crawler to which this condition applies.
    """


_ClientGetWorkflowResponseWorkflowGraphNodesTypeDef = TypedDict(
    "_ClientGetWorkflowResponseWorkflowGraphNodesTypeDef",
    {
        "Type": str,
        "Name": str,
        "UniqueId": str,
        "TriggerDetails": ClientGetWorkflowResponseWorkflowGraphNodesTriggerDetailsTypeDef,
        "JobDetails": ClientGetWorkflowResponseWorkflowGraphNodesJobDetailsTypeDef,
        "CrawlerDetails": ClientGetWorkflowResponseWorkflowGraphNodesCrawlerDetailsTypeDef,
    },
    total=False,
)


class ClientGetWorkflowResponseWorkflowGraphNodesTypeDef(
    _ClientGetWorkflowResponseWorkflowGraphNodesTypeDef
):
    """
    Type definition for `ClientGetWorkflowResponseWorkflowGraph` `Nodes`

    A node represents an AWS Glue component like Trigger, Job etc. which is part of a
    workflow.

    - **Type** *(string) --*

      The type of AWS Glue component represented by the node.

    - **Name** *(string) --*

      The name of the AWS Glue component represented by the node.

    - **UniqueId** *(string) --*

      The unique Id assigned to the node within the workflow.

    - **TriggerDetails** *(dict) --*

      Details of the Trigger when the node represents a Trigger.

      - **Trigger** *(dict) --*

        The information of the trigger represented by the trigger node.

        - **Name** *(string) --*

          The name of the trigger.

        - **WorkflowName** *(string) --*

          The name of the workflow associated with the trigger.

        - **Id** *(string) --*

          Reserved for future use.

        - **Type** *(string) --*

          The type of trigger that this is.

        - **State** *(string) --*

          The current state of the trigger.

        - **Description** *(string) --*

          A description of this trigger.

        - **Schedule** *(string) --*

          A ``cron`` expression used to specify the schedule (see `Time-Based Schedules for
          Jobs and Crawlers
          <https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html>`__
          . For example, to run something every day at 12:15 UTC, you would specify:
          ``cron(15 12 * * ? *)`` .

        - **Actions** *(list) --*

          The actions initiated by this trigger.

          - *(dict) --*

            Defines an action to be initiated by a trigger.

            - **JobName** *(string) --*

              The name of a job to be executed.

            - **Arguments** *(dict) --*

              The job arguments used when this trigger fires. For this job run, they
              replace the default arguments set in the job definition itself.

              You can specify arguments here that your own job-execution script consumes,
              as well as arguments that AWS Glue itself consumes.

              For information about how to specify and consume your own Job arguments, see
              the `Calling AWS Glue APIs in Python
              <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
              topic in the developer guide.

              For information about the key-value pairs that AWS Glue consumes to set up
              your job, see the `Special Parameters Used by AWS Glue
              <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
              topic in the developer guide.

              - *(string) --*

                - *(string) --*

            - **Timeout** *(integer) --*

              The ``JobRun`` timeout in minutes. This is the maximum time that a job run
              can consume resources before it is terminated and enters ``TIMEOUT`` status.
              The default is 2,880 minutes (48 hours). This overrides the timeout value set
              in the parent job.

            - **SecurityConfiguration** *(string) --*

              The name of the ``SecurityConfiguration`` structure to be used with this
              action.

            - **NotificationProperty** *(dict) --*

              Specifies configuration properties of a job run notification.

              - **NotifyDelayAfter** *(integer) --*

                After a job run starts, the number of minutes to wait before sending a job
                run delay notification.

            - **CrawlerName** *(string) --*

              The name of the crawler to be used with this action.

        - **Predicate** *(dict) --*

          The predicate of this trigger, which defines when it will fire.

          - **Logical** *(string) --*

            An optional field if only one condition is listed. If multiple conditions are
            listed, then this field is required.

          - **Conditions** *(list) --*

            A list of the conditions that determine when the trigger will fire.

            - *(dict) --*

              Defines a condition under which a trigger fires.

              - **LogicalOperator** *(string) --*

                A logical operator.

              - **JobName** *(string) --*

                The name of the job whose ``JobRuns`` this condition applies to, and on
                which this trigger waits.

              - **State** *(string) --*

                The condition state. Currently, the values supported are ``SUCCEEDED`` ,
                ``STOPPED`` , ``TIMEOUT`` , and ``FAILED`` .

              - **CrawlerName** *(string) --*

                The name of the crawler to which this condition applies.

              - **CrawlState** *(string) --*

                The state of the crawler to which this condition applies.

    - **JobDetails** *(dict) --*

      Details of the Job when the node represents a Job.

      - **JobRuns** *(list) --*

        The information for the job runs represented by the job node.

        - *(dict) --*

          Contains information about a job run.

          - **Id** *(string) --*

            The ID of this job run.

          - **Attempt** *(integer) --*

            The number of the attempt to run this job.

          - **PreviousRunId** *(string) --*

            The ID of the previous run of this job. For example, the ``JobRunId`` specified
            in the ``StartJobRun`` action.

          - **TriggerName** *(string) --*

            The name of the trigger that started this job run.

          - **JobName** *(string) --*

            The name of the job definition being used in this run.

          - **StartedOn** *(datetime) --*

            The date and time at which this job run was started.

          - **LastModifiedOn** *(datetime) --*

            The last time that this job run was modified.

          - **CompletedOn** *(datetime) --*

            The date and time that this job run completed.

          - **JobRunState** *(string) --*

            The current state of the job run.

          - **Arguments** *(dict) --*

            The job arguments associated with this run. For this job run, they replace the
            default arguments set in the job definition itself.

            You can specify arguments here that your own job-execution script consumes, as
            well as arguments that AWS Glue itself consumes.

            For information about how to specify and consume your own job arguments, see
            the `Calling AWS Glue APIs in Python
            <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
            topic in the developer guide.

            For information about the key-value pairs that AWS Glue consumes to set up your
            job, see the `Special Parameters Used by AWS Glue
            <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
            topic in the developer guide.

            - *(string) --*

              - *(string) --*

          - **ErrorMessage** *(string) --*

            An error message associated with this job run.

          - **PredecessorRuns** *(list) --*

            A list of predecessors to this job run.

            - *(dict) --*

              A job run that was used in the predicate of a conditional trigger that
              triggered this job run.

              - **JobName** *(string) --*

                The name of the job definition used by the predecessor job run.

              - **RunId** *(string) --*

                The job-run ID of the predecessor job run.

          - **AllocatedCapacity** *(integer) --*

            This field is deprecated. Use ``MaxCapacity`` instead.

            The number of AWS Glue data processing units (DPUs) allocated to this JobRun.
            From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a relative
            measure of processing power that consists of 4 vCPUs of compute capacity and 16
            GB of memory. For more information, see the `AWS Glue pricing page
            <https://aws.amazon.com/glue/pricing/>`__ .

          - **ExecutionTime** *(integer) --*

            The amount of time (in seconds) that the job run consumed resources.

          - **Timeout** *(integer) --*

            The ``JobRun`` timeout in minutes. This is the maximum time that a job run can
            consume resources before it is terminated and enters ``TIMEOUT`` status. The
            default is 2,880 minutes (48 hours). This overrides the timeout value set in
            the parent job.

          - **MaxCapacity** *(float) --*

            The number of AWS Glue data processing units (DPUs) that can be allocated when
            this job runs. A DPU is a relative measure of processing power that consists of
            4 vCPUs of compute capacity and 16 GB of memory. For more information, see the
            `AWS Glue pricing page
            <https://docs.aws.amazon.com/https:/aws.amazon.com/glue/pricing/>`__ .

            Do not set ``Max Capacity`` if using ``WorkerType`` and ``NumberOfWorkers`` .

            The value that can be allocated for ``MaxCapacity`` depends on whether you are
            running a Python shell job or an Apache Spark ETL job:

            * When you specify a Python shell job (``JobCommand.Name`` ="pythonshell"), you
            can allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.

            * When you specify an Apache Spark ETL job (``JobCommand.Name`` ="glueetl"),
            you can allocate from 2 to 100 DPUs. The default is 10 DPUs. This job type
            cannot have a fractional DPU allocation.

          - **WorkerType** *(string) --*

            The type of predefined worker that is allocated when a job runs. Accepts a
            value of Standard, G.1X, or G.2X.

            * For the ``Standard`` worker type, each worker provides 4 vCPU, 16 GB of
            memory and a 50GB disk, and 2 executors per worker.

            * For the ``G.1X`` worker type, each worker provides 4 vCPU, 16 GB of memory
            and a 64GB disk, and 1 executor per worker.

            * For the ``G.2X`` worker type, each worker provides 8 vCPU, 32 GB of memory
            and a 128GB disk, and 1 executor per worker.

          - **NumberOfWorkers** *(integer) --*

            The number of workers of a defined ``workerType`` that are allocated when a job
            runs.

            The maximum number of workers you can define are 299 for ``G.1X`` , and 149 for
            ``G.2X`` .

          - **SecurityConfiguration** *(string) --*

            The name of the ``SecurityConfiguration`` structure to be used with this job
            run.

          - **LogGroupName** *(string) --*

            The name of the log group for secure logging that can be server-side encrypted
            in Amazon CloudWatch using AWS KMS. This name can be ``/aws-glue/jobs/`` , in
            which case the default encryption is ``NONE`` . If you add a role name and
            ``SecurityConfiguration`` name (in other words,
            ``/aws-glue/jobs-yourRoleName-yourSecurityConfigurationName/`` ), then that
            security configuration is used to encrypt the log group.

          - **NotificationProperty** *(dict) --*

            Specifies configuration properties of a job run notification.

            - **NotifyDelayAfter** *(integer) --*

              After a job run starts, the number of minutes to wait before sending a job
              run delay notification.

          - **GlueVersion** *(string) --*

            Glue version determines the versions of Apache Spark and Python that AWS Glue
            supports. The Python version indicates the version supported for jobs of type
            Spark.

            For more information about the available AWS Glue versions and corresponding
            Spark and Python versions, see `Glue version
            <https://docs.aws.amazon.com/glue/latest/dg/add-job.html>`__ in the developer
            guide.

            Jobs that are created without specifying a Glue version default to Glue 0.9.

    - **CrawlerDetails** *(dict) --*

      Details of the crawler when the node represents a crawler.

      - **Crawls** *(list) --*

        A list of crawls represented by the crawl node.

        - *(dict) --*

          The details of a crawl in the workflow.

          - **State** *(string) --*

            The state of the crawler.

          - **StartedOn** *(datetime) --*

            The date and time on which the crawl started.

          - **CompletedOn** *(datetime) --*

            The date and time on which the crawl completed.

          - **ErrorMessage** *(string) --*

            The error message associated with the crawl.

          - **LogGroup** *(string) --*

            The log group associated with the crawl.

          - **LogStream** *(string) --*

            The log stream associated with the crawl.
    """


_ClientGetWorkflowResponseWorkflowGraphTypeDef = TypedDict(
    "_ClientGetWorkflowResponseWorkflowGraphTypeDef",
    {
        "Nodes": List[ClientGetWorkflowResponseWorkflowGraphNodesTypeDef],
        "Edges": List[ClientGetWorkflowResponseWorkflowGraphEdgesTypeDef],
    },
    total=False,
)


class ClientGetWorkflowResponseWorkflowGraphTypeDef(
    _ClientGetWorkflowResponseWorkflowGraphTypeDef
):
    """
    Type definition for `ClientGetWorkflowResponseWorkflow` `Graph`

    The graph representing all the AWS Glue components that belong to the workflow as nodes and
    directed connections between them as edges.

    - **Nodes** *(list) --*

      A list of the the AWS Glue components belong to the workflow represented as nodes.

      - *(dict) --*

        A node represents an AWS Glue component like Trigger, Job etc. which is part of a
        workflow.

        - **Type** *(string) --*

          The type of AWS Glue component represented by the node.

        - **Name** *(string) --*

          The name of the AWS Glue component represented by the node.

        - **UniqueId** *(string) --*

          The unique Id assigned to the node within the workflow.

        - **TriggerDetails** *(dict) --*

          Details of the Trigger when the node represents a Trigger.

          - **Trigger** *(dict) --*

            The information of the trigger represented by the trigger node.

            - **Name** *(string) --*

              The name of the trigger.

            - **WorkflowName** *(string) --*

              The name of the workflow associated with the trigger.

            - **Id** *(string) --*

              Reserved for future use.

            - **Type** *(string) --*

              The type of trigger that this is.

            - **State** *(string) --*

              The current state of the trigger.

            - **Description** *(string) --*

              A description of this trigger.

            - **Schedule** *(string) --*

              A ``cron`` expression used to specify the schedule (see `Time-Based Schedules for
              Jobs and Crawlers
              <https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html>`__
              . For example, to run something every day at 12:15 UTC, you would specify:
              ``cron(15 12 * * ? *)`` .

            - **Actions** *(list) --*

              The actions initiated by this trigger.

              - *(dict) --*

                Defines an action to be initiated by a trigger.

                - **JobName** *(string) --*

                  The name of a job to be executed.

                - **Arguments** *(dict) --*

                  The job arguments used when this trigger fires. For this job run, they
                  replace the default arguments set in the job definition itself.

                  You can specify arguments here that your own job-execution script consumes,
                  as well as arguments that AWS Glue itself consumes.

                  For information about how to specify and consume your own Job arguments, see
                  the `Calling AWS Glue APIs in Python
                  <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
                  topic in the developer guide.

                  For information about the key-value pairs that AWS Glue consumes to set up
                  your job, see the `Special Parameters Used by AWS Glue
                  <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
                  topic in the developer guide.

                  - *(string) --*

                    - *(string) --*

                - **Timeout** *(integer) --*

                  The ``JobRun`` timeout in minutes. This is the maximum time that a job run
                  can consume resources before it is terminated and enters ``TIMEOUT`` status.
                  The default is 2,880 minutes (48 hours). This overrides the timeout value set
                  in the parent job.

                - **SecurityConfiguration** *(string) --*

                  The name of the ``SecurityConfiguration`` structure to be used with this
                  action.

                - **NotificationProperty** *(dict) --*

                  Specifies configuration properties of a job run notification.

                  - **NotifyDelayAfter** *(integer) --*

                    After a job run starts, the number of minutes to wait before sending a job
                    run delay notification.

                - **CrawlerName** *(string) --*

                  The name of the crawler to be used with this action.

            - **Predicate** *(dict) --*

              The predicate of this trigger, which defines when it will fire.

              - **Logical** *(string) --*

                An optional field if only one condition is listed. If multiple conditions are
                listed, then this field is required.

              - **Conditions** *(list) --*

                A list of the conditions that determine when the trigger will fire.

                - *(dict) --*

                  Defines a condition under which a trigger fires.

                  - **LogicalOperator** *(string) --*

                    A logical operator.

                  - **JobName** *(string) --*

                    The name of the job whose ``JobRuns`` this condition applies to, and on
                    which this trigger waits.

                  - **State** *(string) --*

                    The condition state. Currently, the values supported are ``SUCCEEDED`` ,
                    ``STOPPED`` , ``TIMEOUT`` , and ``FAILED`` .

                  - **CrawlerName** *(string) --*

                    The name of the crawler to which this condition applies.

                  - **CrawlState** *(string) --*

                    The state of the crawler to which this condition applies.

        - **JobDetails** *(dict) --*

          Details of the Job when the node represents a Job.

          - **JobRuns** *(list) --*

            The information for the job runs represented by the job node.

            - *(dict) --*

              Contains information about a job run.

              - **Id** *(string) --*

                The ID of this job run.

              - **Attempt** *(integer) --*

                The number of the attempt to run this job.

              - **PreviousRunId** *(string) --*

                The ID of the previous run of this job. For example, the ``JobRunId`` specified
                in the ``StartJobRun`` action.

              - **TriggerName** *(string) --*

                The name of the trigger that started this job run.

              - **JobName** *(string) --*

                The name of the job definition being used in this run.

              - **StartedOn** *(datetime) --*

                The date and time at which this job run was started.

              - **LastModifiedOn** *(datetime) --*

                The last time that this job run was modified.

              - **CompletedOn** *(datetime) --*

                The date and time that this job run completed.

              - **JobRunState** *(string) --*

                The current state of the job run.

              - **Arguments** *(dict) --*

                The job arguments associated with this run. For this job run, they replace the
                default arguments set in the job definition itself.

                You can specify arguments here that your own job-execution script consumes, as
                well as arguments that AWS Glue itself consumes.

                For information about how to specify and consume your own job arguments, see
                the `Calling AWS Glue APIs in Python
                <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
                topic in the developer guide.

                For information about the key-value pairs that AWS Glue consumes to set up your
                job, see the `Special Parameters Used by AWS Glue
                <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
                topic in the developer guide.

                - *(string) --*

                  - *(string) --*

              - **ErrorMessage** *(string) --*

                An error message associated with this job run.

              - **PredecessorRuns** *(list) --*

                A list of predecessors to this job run.

                - *(dict) --*

                  A job run that was used in the predicate of a conditional trigger that
                  triggered this job run.

                  - **JobName** *(string) --*

                    The name of the job definition used by the predecessor job run.

                  - **RunId** *(string) --*

                    The job-run ID of the predecessor job run.

              - **AllocatedCapacity** *(integer) --*

                This field is deprecated. Use ``MaxCapacity`` instead.

                The number of AWS Glue data processing units (DPUs) allocated to this JobRun.
                From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a relative
                measure of processing power that consists of 4 vCPUs of compute capacity and 16
                GB of memory. For more information, see the `AWS Glue pricing page
                <https://aws.amazon.com/glue/pricing/>`__ .

              - **ExecutionTime** *(integer) --*

                The amount of time (in seconds) that the job run consumed resources.

              - **Timeout** *(integer) --*

                The ``JobRun`` timeout in minutes. This is the maximum time that a job run can
                consume resources before it is terminated and enters ``TIMEOUT`` status. The
                default is 2,880 minutes (48 hours). This overrides the timeout value set in
                the parent job.

              - **MaxCapacity** *(float) --*

                The number of AWS Glue data processing units (DPUs) that can be allocated when
                this job runs. A DPU is a relative measure of processing power that consists of
                4 vCPUs of compute capacity and 16 GB of memory. For more information, see the
                `AWS Glue pricing page
                <https://docs.aws.amazon.com/https:/aws.amazon.com/glue/pricing/>`__ .

                Do not set ``Max Capacity`` if using ``WorkerType`` and ``NumberOfWorkers`` .

                The value that can be allocated for ``MaxCapacity`` depends on whether you are
                running a Python shell job or an Apache Spark ETL job:

                * When you specify a Python shell job (``JobCommand.Name`` ="pythonshell"), you
                can allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.

                * When you specify an Apache Spark ETL job (``JobCommand.Name`` ="glueetl"),
                you can allocate from 2 to 100 DPUs. The default is 10 DPUs. This job type
                cannot have a fractional DPU allocation.

              - **WorkerType** *(string) --*

                The type of predefined worker that is allocated when a job runs. Accepts a
                value of Standard, G.1X, or G.2X.

                * For the ``Standard`` worker type, each worker provides 4 vCPU, 16 GB of
                memory and a 50GB disk, and 2 executors per worker.

                * For the ``G.1X`` worker type, each worker provides 4 vCPU, 16 GB of memory
                and a 64GB disk, and 1 executor per worker.

                * For the ``G.2X`` worker type, each worker provides 8 vCPU, 32 GB of memory
                and a 128GB disk, and 1 executor per worker.

              - **NumberOfWorkers** *(integer) --*

                The number of workers of a defined ``workerType`` that are allocated when a job
                runs.

                The maximum number of workers you can define are 299 for ``G.1X`` , and 149 for
                ``G.2X`` .

              - **SecurityConfiguration** *(string) --*

                The name of the ``SecurityConfiguration`` structure to be used with this job
                run.

              - **LogGroupName** *(string) --*

                The name of the log group for secure logging that can be server-side encrypted
                in Amazon CloudWatch using AWS KMS. This name can be ``/aws-glue/jobs/`` , in
                which case the default encryption is ``NONE`` . If you add a role name and
                ``SecurityConfiguration`` name (in other words,
                ``/aws-glue/jobs-yourRoleName-yourSecurityConfigurationName/`` ), then that
                security configuration is used to encrypt the log group.

              - **NotificationProperty** *(dict) --*

                Specifies configuration properties of a job run notification.

                - **NotifyDelayAfter** *(integer) --*

                  After a job run starts, the number of minutes to wait before sending a job
                  run delay notification.

              - **GlueVersion** *(string) --*

                Glue version determines the versions of Apache Spark and Python that AWS Glue
                supports. The Python version indicates the version supported for jobs of type
                Spark.

                For more information about the available AWS Glue versions and corresponding
                Spark and Python versions, see `Glue version
                <https://docs.aws.amazon.com/glue/latest/dg/add-job.html>`__ in the developer
                guide.

                Jobs that are created without specifying a Glue version default to Glue 0.9.

        - **CrawlerDetails** *(dict) --*

          Details of the crawler when the node represents a crawler.

          - **Crawls** *(list) --*

            A list of crawls represented by the crawl node.

            - *(dict) --*

              The details of a crawl in the workflow.

              - **State** *(string) --*

                The state of the crawler.

              - **StartedOn** *(datetime) --*

                The date and time on which the crawl started.

              - **CompletedOn** *(datetime) --*

                The date and time on which the crawl completed.

              - **ErrorMessage** *(string) --*

                The error message associated with the crawl.

              - **LogGroup** *(string) --*

                The log group associated with the crawl.

              - **LogStream** *(string) --*

                The log stream associated with the crawl.

    - **Edges** *(list) --*

      A list of all the directed connections between the nodes belonging to the workflow.

      - *(dict) --*

        An edge represents a directed connection between two AWS Glue components which are part
        of the workflow the edge belongs to.

        - **SourceId** *(string) --*

          The unique of the node within the workflow where the edge starts.

        - **DestinationId** *(string) --*

          The unique of the node within the workflow where the edge ends.
    """


_ClientGetWorkflowResponseWorkflowLastRunGraphEdgesTypeDef = TypedDict(
    "_ClientGetWorkflowResponseWorkflowLastRunGraphEdgesTypeDef",
    {"SourceId": str, "DestinationId": str},
    total=False,
)


class ClientGetWorkflowResponseWorkflowLastRunGraphEdgesTypeDef(
    _ClientGetWorkflowResponseWorkflowLastRunGraphEdgesTypeDef
):
    """
    Type definition for `ClientGetWorkflowResponseWorkflowLastRunGraph` `Edges`

    An edge represents a directed connection between two AWS Glue components which are
    part of the workflow the edge belongs to.

    - **SourceId** *(string) --*

      The unique of the node within the workflow where the edge starts.

    - **DestinationId** *(string) --*

      The unique of the node within the workflow where the edge ends.
    """


_ClientGetWorkflowResponseWorkflowLastRunGraphNodesCrawlerDetailsCrawlsTypeDef = TypedDict(
    "_ClientGetWorkflowResponseWorkflowLastRunGraphNodesCrawlerDetailsCrawlsTypeDef",
    {
        "State": str,
        "StartedOn": datetime,
        "CompletedOn": datetime,
        "ErrorMessage": str,
        "LogGroup": str,
        "LogStream": str,
    },
    total=False,
)


class ClientGetWorkflowResponseWorkflowLastRunGraphNodesCrawlerDetailsCrawlsTypeDef(
    _ClientGetWorkflowResponseWorkflowLastRunGraphNodesCrawlerDetailsCrawlsTypeDef
):
    """
    Type definition for `ClientGetWorkflowResponseWorkflowLastRunGraphNodesCrawlerDetails` `Crawls`

    The details of a crawl in the workflow.

    - **State** *(string) --*

      The state of the crawler.

    - **StartedOn** *(datetime) --*

      The date and time on which the crawl started.

    - **CompletedOn** *(datetime) --*

      The date and time on which the crawl completed.

    - **ErrorMessage** *(string) --*

      The error message associated with the crawl.

    - **LogGroup** *(string) --*

      The log group associated with the crawl.

    - **LogStream** *(string) --*

      The log stream associated with the crawl.
    """


_ClientGetWorkflowResponseWorkflowLastRunGraphNodesCrawlerDetailsTypeDef = TypedDict(
    "_ClientGetWorkflowResponseWorkflowLastRunGraphNodesCrawlerDetailsTypeDef",
    {
        "Crawls": List[
            ClientGetWorkflowResponseWorkflowLastRunGraphNodesCrawlerDetailsCrawlsTypeDef
        ]
    },
    total=False,
)


class ClientGetWorkflowResponseWorkflowLastRunGraphNodesCrawlerDetailsTypeDef(
    _ClientGetWorkflowResponseWorkflowLastRunGraphNodesCrawlerDetailsTypeDef
):
    """
    Type definition for `ClientGetWorkflowResponseWorkflowLastRunGraphNodes` `CrawlerDetails`

    Details of the crawler when the node represents a crawler.

    - **Crawls** *(list) --*

      A list of crawls represented by the crawl node.

      - *(dict) --*

        The details of a crawl in the workflow.

        - **State** *(string) --*

          The state of the crawler.

        - **StartedOn** *(datetime) --*

          The date and time on which the crawl started.

        - **CompletedOn** *(datetime) --*

          The date and time on which the crawl completed.

        - **ErrorMessage** *(string) --*

          The error message associated with the crawl.

        - **LogGroup** *(string) --*

          The log group associated with the crawl.

        - **LogStream** *(string) --*

          The log stream associated with the crawl.
    """


_ClientGetWorkflowResponseWorkflowLastRunGraphNodesJobDetailsJobRunsNotificationPropertyTypeDef = TypedDict(
    "_ClientGetWorkflowResponseWorkflowLastRunGraphNodesJobDetailsJobRunsNotificationPropertyTypeDef",
    {"NotifyDelayAfter": int},
    total=False,
)


class ClientGetWorkflowResponseWorkflowLastRunGraphNodesJobDetailsJobRunsNotificationPropertyTypeDef(
    _ClientGetWorkflowResponseWorkflowLastRunGraphNodesJobDetailsJobRunsNotificationPropertyTypeDef
):
    """
    Type definition for `ClientGetWorkflowResponseWorkflowLastRunGraphNodesJobDetailsJobRuns` `NotificationProperty`

    Specifies configuration properties of a job run notification.

    - **NotifyDelayAfter** *(integer) --*

      After a job run starts, the number of minutes to wait before sending a job
      run delay notification.
    """


_ClientGetWorkflowResponseWorkflowLastRunGraphNodesJobDetailsJobRunsPredecessorRunsTypeDef = TypedDict(
    "_ClientGetWorkflowResponseWorkflowLastRunGraphNodesJobDetailsJobRunsPredecessorRunsTypeDef",
    {"JobName": str, "RunId": str},
    total=False,
)


class ClientGetWorkflowResponseWorkflowLastRunGraphNodesJobDetailsJobRunsPredecessorRunsTypeDef(
    _ClientGetWorkflowResponseWorkflowLastRunGraphNodesJobDetailsJobRunsPredecessorRunsTypeDef
):
    """
    Type definition for `ClientGetWorkflowResponseWorkflowLastRunGraphNodesJobDetailsJobRuns` `PredecessorRuns`

    A job run that was used in the predicate of a conditional trigger that
    triggered this job run.

    - **JobName** *(string) --*

      The name of the job definition used by the predecessor job run.

    - **RunId** *(string) --*

      The job-run ID of the predecessor job run.
    """


_ClientGetWorkflowResponseWorkflowLastRunGraphNodesJobDetailsJobRunsTypeDef = TypedDict(
    "_ClientGetWorkflowResponseWorkflowLastRunGraphNodesJobDetailsJobRunsTypeDef",
    {
        "Id": str,
        "Attempt": int,
        "PreviousRunId": str,
        "TriggerName": str,
        "JobName": str,
        "StartedOn": datetime,
        "LastModifiedOn": datetime,
        "CompletedOn": datetime,
        "JobRunState": str,
        "Arguments": Dict[str, str],
        "ErrorMessage": str,
        "PredecessorRuns": List[
            ClientGetWorkflowResponseWorkflowLastRunGraphNodesJobDetailsJobRunsPredecessorRunsTypeDef
        ],
        "AllocatedCapacity": int,
        "ExecutionTime": int,
        "Timeout": int,
        "MaxCapacity": float,
        "WorkerType": str,
        "NumberOfWorkers": int,
        "SecurityConfiguration": str,
        "LogGroupName": str,
        "NotificationProperty": ClientGetWorkflowResponseWorkflowLastRunGraphNodesJobDetailsJobRunsNotificationPropertyTypeDef,
        "GlueVersion": str,
    },
    total=False,
)


class ClientGetWorkflowResponseWorkflowLastRunGraphNodesJobDetailsJobRunsTypeDef(
    _ClientGetWorkflowResponseWorkflowLastRunGraphNodesJobDetailsJobRunsTypeDef
):
    """
    Type definition for `ClientGetWorkflowResponseWorkflowLastRunGraphNodesJobDetails` `JobRuns`

    Contains information about a job run.

    - **Id** *(string) --*

      The ID of this job run.

    - **Attempt** *(integer) --*

      The number of the attempt to run this job.

    - **PreviousRunId** *(string) --*

      The ID of the previous run of this job. For example, the ``JobRunId``
      specified in the ``StartJobRun`` action.

    - **TriggerName** *(string) --*

      The name of the trigger that started this job run.

    - **JobName** *(string) --*

      The name of the job definition being used in this run.

    - **StartedOn** *(datetime) --*

      The date and time at which this job run was started.

    - **LastModifiedOn** *(datetime) --*

      The last time that this job run was modified.

    - **CompletedOn** *(datetime) --*

      The date and time that this job run completed.

    - **JobRunState** *(string) --*

      The current state of the job run.

    - **Arguments** *(dict) --*

      The job arguments associated with this run. For this job run, they replace
      the default arguments set in the job definition itself.

      You can specify arguments here that your own job-execution script consumes,
      as well as arguments that AWS Glue itself consumes.

      For information about how to specify and consume your own job arguments, see
      the `Calling AWS Glue APIs in Python
      <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
      topic in the developer guide.

      For information about the key-value pairs that AWS Glue consumes to set up
      your job, see the `Special Parameters Used by AWS Glue
      <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
      topic in the developer guide.

      - *(string) --*

        - *(string) --*

    - **ErrorMessage** *(string) --*

      An error message associated with this job run.

    - **PredecessorRuns** *(list) --*

      A list of predecessors to this job run.

      - *(dict) --*

        A job run that was used in the predicate of a conditional trigger that
        triggered this job run.

        - **JobName** *(string) --*

          The name of the job definition used by the predecessor job run.

        - **RunId** *(string) --*

          The job-run ID of the predecessor job run.

    - **AllocatedCapacity** *(integer) --*

      This field is deprecated. Use ``MaxCapacity`` instead.

      The number of AWS Glue data processing units (DPUs) allocated to this JobRun.
      From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a relative
      measure of processing power that consists of 4 vCPUs of compute capacity and
      16 GB of memory. For more information, see the `AWS Glue pricing page
      <https://aws.amazon.com/glue/pricing/>`__ .

    - **ExecutionTime** *(integer) --*

      The amount of time (in seconds) that the job run consumed resources.

    - **Timeout** *(integer) --*

      The ``JobRun`` timeout in minutes. This is the maximum time that a job run
      can consume resources before it is terminated and enters ``TIMEOUT`` status.
      The default is 2,880 minutes (48 hours). This overrides the timeout value set
      in the parent job.

    - **MaxCapacity** *(float) --*

      The number of AWS Glue data processing units (DPUs) that can be allocated
      when this job runs. A DPU is a relative measure of processing power that
      consists of 4 vCPUs of compute capacity and 16 GB of memory. For more
      information, see the `AWS Glue pricing page
      <https://docs.aws.amazon.com/https:/aws.amazon.com/glue/pricing/>`__ .

      Do not set ``Max Capacity`` if using ``WorkerType`` and ``NumberOfWorkers`` .

      The value that can be allocated for ``MaxCapacity`` depends on whether you
      are running a Python shell job or an Apache Spark ETL job:

      * When you specify a Python shell job (``JobCommand.Name`` ="pythonshell"),
      you can allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.

      * When you specify an Apache Spark ETL job (``JobCommand.Name`` ="glueetl"),
      you can allocate from 2 to 100 DPUs. The default is 10 DPUs. This job type
      cannot have a fractional DPU allocation.

    - **WorkerType** *(string) --*

      The type of predefined worker that is allocated when a job runs. Accepts a
      value of Standard, G.1X, or G.2X.

      * For the ``Standard`` worker type, each worker provides 4 vCPU, 16 GB of
      memory and a 50GB disk, and 2 executors per worker.

      * For the ``G.1X`` worker type, each worker provides 4 vCPU, 16 GB of memory
      and a 64GB disk, and 1 executor per worker.

      * For the ``G.2X`` worker type, each worker provides 8 vCPU, 32 GB of memory
      and a 128GB disk, and 1 executor per worker.

    - **NumberOfWorkers** *(integer) --*

      The number of workers of a defined ``workerType`` that are allocated when a
      job runs.

      The maximum number of workers you can define are 299 for ``G.1X`` , and 149
      for ``G.2X`` .

    - **SecurityConfiguration** *(string) --*

      The name of the ``SecurityConfiguration`` structure to be used with this job
      run.

    - **LogGroupName** *(string) --*

      The name of the log group for secure logging that can be server-side
      encrypted in Amazon CloudWatch using AWS KMS. This name can be
      ``/aws-glue/jobs/`` , in which case the default encryption is ``NONE`` . If
      you add a role name and ``SecurityConfiguration`` name (in other words,
      ``/aws-glue/jobs-yourRoleName-yourSecurityConfigurationName/`` ), then that
      security configuration is used to encrypt the log group.

    - **NotificationProperty** *(dict) --*

      Specifies configuration properties of a job run notification.

      - **NotifyDelayAfter** *(integer) --*

        After a job run starts, the number of minutes to wait before sending a job
        run delay notification.

    - **GlueVersion** *(string) --*

      Glue version determines the versions of Apache Spark and Python that AWS Glue
      supports. The Python version indicates the version supported for jobs of type
      Spark.

      For more information about the available AWS Glue versions and corresponding
      Spark and Python versions, see `Glue version
      <https://docs.aws.amazon.com/glue/latest/dg/add-job.html>`__ in the developer
      guide.

      Jobs that are created without specifying a Glue version default to Glue 0.9.
    """


_ClientGetWorkflowResponseWorkflowLastRunGraphNodesJobDetailsTypeDef = TypedDict(
    "_ClientGetWorkflowResponseWorkflowLastRunGraphNodesJobDetailsTypeDef",
    {
        "JobRuns": List[
            ClientGetWorkflowResponseWorkflowLastRunGraphNodesJobDetailsJobRunsTypeDef
        ]
    },
    total=False,
)


class ClientGetWorkflowResponseWorkflowLastRunGraphNodesJobDetailsTypeDef(
    _ClientGetWorkflowResponseWorkflowLastRunGraphNodesJobDetailsTypeDef
):
    """
    Type definition for `ClientGetWorkflowResponseWorkflowLastRunGraphNodes` `JobDetails`

    Details of the Job when the node represents a Job.

    - **JobRuns** *(list) --*

      The information for the job runs represented by the job node.

      - *(dict) --*

        Contains information about a job run.

        - **Id** *(string) --*

          The ID of this job run.

        - **Attempt** *(integer) --*

          The number of the attempt to run this job.

        - **PreviousRunId** *(string) --*

          The ID of the previous run of this job. For example, the ``JobRunId``
          specified in the ``StartJobRun`` action.

        - **TriggerName** *(string) --*

          The name of the trigger that started this job run.

        - **JobName** *(string) --*

          The name of the job definition being used in this run.

        - **StartedOn** *(datetime) --*

          The date and time at which this job run was started.

        - **LastModifiedOn** *(datetime) --*

          The last time that this job run was modified.

        - **CompletedOn** *(datetime) --*

          The date and time that this job run completed.

        - **JobRunState** *(string) --*

          The current state of the job run.

        - **Arguments** *(dict) --*

          The job arguments associated with this run. For this job run, they replace
          the default arguments set in the job definition itself.

          You can specify arguments here that your own job-execution script consumes,
          as well as arguments that AWS Glue itself consumes.

          For information about how to specify and consume your own job arguments, see
          the `Calling AWS Glue APIs in Python
          <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
          topic in the developer guide.

          For information about the key-value pairs that AWS Glue consumes to set up
          your job, see the `Special Parameters Used by AWS Glue
          <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
          topic in the developer guide.

          - *(string) --*

            - *(string) --*

        - **ErrorMessage** *(string) --*

          An error message associated with this job run.

        - **PredecessorRuns** *(list) --*

          A list of predecessors to this job run.

          - *(dict) --*

            A job run that was used in the predicate of a conditional trigger that
            triggered this job run.

            - **JobName** *(string) --*

              The name of the job definition used by the predecessor job run.

            - **RunId** *(string) --*

              The job-run ID of the predecessor job run.

        - **AllocatedCapacity** *(integer) --*

          This field is deprecated. Use ``MaxCapacity`` instead.

          The number of AWS Glue data processing units (DPUs) allocated to this JobRun.
          From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a relative
          measure of processing power that consists of 4 vCPUs of compute capacity and
          16 GB of memory. For more information, see the `AWS Glue pricing page
          <https://aws.amazon.com/glue/pricing/>`__ .

        - **ExecutionTime** *(integer) --*

          The amount of time (in seconds) that the job run consumed resources.

        - **Timeout** *(integer) --*

          The ``JobRun`` timeout in minutes. This is the maximum time that a job run
          can consume resources before it is terminated and enters ``TIMEOUT`` status.
          The default is 2,880 minutes (48 hours). This overrides the timeout value set
          in the parent job.

        - **MaxCapacity** *(float) --*

          The number of AWS Glue data processing units (DPUs) that can be allocated
          when this job runs. A DPU is a relative measure of processing power that
          consists of 4 vCPUs of compute capacity and 16 GB of memory. For more
          information, see the `AWS Glue pricing page
          <https://docs.aws.amazon.com/https:/aws.amazon.com/glue/pricing/>`__ .

          Do not set ``Max Capacity`` if using ``WorkerType`` and ``NumberOfWorkers`` .

          The value that can be allocated for ``MaxCapacity`` depends on whether you
          are running a Python shell job or an Apache Spark ETL job:

          * When you specify a Python shell job (``JobCommand.Name`` ="pythonshell"),
          you can allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.

          * When you specify an Apache Spark ETL job (``JobCommand.Name`` ="glueetl"),
          you can allocate from 2 to 100 DPUs. The default is 10 DPUs. This job type
          cannot have a fractional DPU allocation.

        - **WorkerType** *(string) --*

          The type of predefined worker that is allocated when a job runs. Accepts a
          value of Standard, G.1X, or G.2X.

          * For the ``Standard`` worker type, each worker provides 4 vCPU, 16 GB of
          memory and a 50GB disk, and 2 executors per worker.

          * For the ``G.1X`` worker type, each worker provides 4 vCPU, 16 GB of memory
          and a 64GB disk, and 1 executor per worker.

          * For the ``G.2X`` worker type, each worker provides 8 vCPU, 32 GB of memory
          and a 128GB disk, and 1 executor per worker.

        - **NumberOfWorkers** *(integer) --*

          The number of workers of a defined ``workerType`` that are allocated when a
          job runs.

          The maximum number of workers you can define are 299 for ``G.1X`` , and 149
          for ``G.2X`` .

        - **SecurityConfiguration** *(string) --*

          The name of the ``SecurityConfiguration`` structure to be used with this job
          run.

        - **LogGroupName** *(string) --*

          The name of the log group for secure logging that can be server-side
          encrypted in Amazon CloudWatch using AWS KMS. This name can be
          ``/aws-glue/jobs/`` , in which case the default encryption is ``NONE`` . If
          you add a role name and ``SecurityConfiguration`` name (in other words,
          ``/aws-glue/jobs-yourRoleName-yourSecurityConfigurationName/`` ), then that
          security configuration is used to encrypt the log group.

        - **NotificationProperty** *(dict) --*

          Specifies configuration properties of a job run notification.

          - **NotifyDelayAfter** *(integer) --*

            After a job run starts, the number of minutes to wait before sending a job
            run delay notification.

        - **GlueVersion** *(string) --*

          Glue version determines the versions of Apache Spark and Python that AWS Glue
          supports. The Python version indicates the version supported for jobs of type
          Spark.

          For more information about the available AWS Glue versions and corresponding
          Spark and Python versions, see `Glue version
          <https://docs.aws.amazon.com/glue/latest/dg/add-job.html>`__ in the developer
          guide.

          Jobs that are created without specifying a Glue version default to Glue 0.9.
    """


_ClientGetWorkflowResponseWorkflowLastRunGraphNodesTriggerDetailsTriggerActionsNotificationPropertyTypeDef = TypedDict(
    "_ClientGetWorkflowResponseWorkflowLastRunGraphNodesTriggerDetailsTriggerActionsNotificationPropertyTypeDef",
    {"NotifyDelayAfter": int},
    total=False,
)


class ClientGetWorkflowResponseWorkflowLastRunGraphNodesTriggerDetailsTriggerActionsNotificationPropertyTypeDef(
    _ClientGetWorkflowResponseWorkflowLastRunGraphNodesTriggerDetailsTriggerActionsNotificationPropertyTypeDef
):
    """
    Type definition for `ClientGetWorkflowResponseWorkflowLastRunGraphNodesTriggerDetailsTriggerActions` `NotificationProperty`

    Specifies configuration properties of a job run notification.

    - **NotifyDelayAfter** *(integer) --*

      After a job run starts, the number of minutes to wait before sending a
      job run delay notification.
    """


_ClientGetWorkflowResponseWorkflowLastRunGraphNodesTriggerDetailsTriggerActionsTypeDef = TypedDict(
    "_ClientGetWorkflowResponseWorkflowLastRunGraphNodesTriggerDetailsTriggerActionsTypeDef",
    {
        "JobName": str,
        "Arguments": Dict[str, str],
        "Timeout": int,
        "SecurityConfiguration": str,
        "NotificationProperty": ClientGetWorkflowResponseWorkflowLastRunGraphNodesTriggerDetailsTriggerActionsNotificationPropertyTypeDef,
        "CrawlerName": str,
    },
    total=False,
)


class ClientGetWorkflowResponseWorkflowLastRunGraphNodesTriggerDetailsTriggerActionsTypeDef(
    _ClientGetWorkflowResponseWorkflowLastRunGraphNodesTriggerDetailsTriggerActionsTypeDef
):
    """
    Type definition for `ClientGetWorkflowResponseWorkflowLastRunGraphNodesTriggerDetailsTrigger` `Actions`

    Defines an action to be initiated by a trigger.

    - **JobName** *(string) --*

      The name of a job to be executed.

    - **Arguments** *(dict) --*

      The job arguments used when this trigger fires. For this job run, they
      replace the default arguments set in the job definition itself.

      You can specify arguments here that your own job-execution script consumes,
      as well as arguments that AWS Glue itself consumes.

      For information about how to specify and consume your own Job arguments,
      see the `Calling AWS Glue APIs in Python
      <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
      topic in the developer guide.

      For information about the key-value pairs that AWS Glue consumes to set up
      your job, see the `Special Parameters Used by AWS Glue
      <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
      topic in the developer guide.

      - *(string) --*

        - *(string) --*

    - **Timeout** *(integer) --*

      The ``JobRun`` timeout in minutes. This is the maximum time that a job run
      can consume resources before it is terminated and enters ``TIMEOUT``
      status. The default is 2,880 minutes (48 hours). This overrides the timeout
      value set in the parent job.

    - **SecurityConfiguration** *(string) --*

      The name of the ``SecurityConfiguration`` structure to be used with this
      action.

    - **NotificationProperty** *(dict) --*

      Specifies configuration properties of a job run notification.

      - **NotifyDelayAfter** *(integer) --*

        After a job run starts, the number of minutes to wait before sending a
        job run delay notification.

    - **CrawlerName** *(string) --*

      The name of the crawler to be used with this action.
    """


_ClientGetWorkflowResponseWorkflowLastRunGraphNodesTriggerDetailsTriggerPredicateConditionsTypeDef = TypedDict(
    "_ClientGetWorkflowResponseWorkflowLastRunGraphNodesTriggerDetailsTriggerPredicateConditionsTypeDef",
    {
        "LogicalOperator": str,
        "JobName": str,
        "State": str,
        "CrawlerName": str,
        "CrawlState": str,
    },
    total=False,
)


class ClientGetWorkflowResponseWorkflowLastRunGraphNodesTriggerDetailsTriggerPredicateConditionsTypeDef(
    _ClientGetWorkflowResponseWorkflowLastRunGraphNodesTriggerDetailsTriggerPredicateConditionsTypeDef
):
    """
    Type definition for `ClientGetWorkflowResponseWorkflowLastRunGraphNodesTriggerDetailsTriggerPredicate` `Conditions`

    Defines a condition under which a trigger fires.

    - **LogicalOperator** *(string) --*

      A logical operator.

    - **JobName** *(string) --*

      The name of the job whose ``JobRuns`` this condition applies to, and on
      which this trigger waits.

    - **State** *(string) --*

      The condition state. Currently, the values supported are ``SUCCEEDED`` ,
      ``STOPPED`` , ``TIMEOUT`` , and ``FAILED`` .

    - **CrawlerName** *(string) --*

      The name of the crawler to which this condition applies.

    - **CrawlState** *(string) --*

      The state of the crawler to which this condition applies.
    """


_ClientGetWorkflowResponseWorkflowLastRunGraphNodesTriggerDetailsTriggerPredicateTypeDef = TypedDict(
    "_ClientGetWorkflowResponseWorkflowLastRunGraphNodesTriggerDetailsTriggerPredicateTypeDef",
    {
        "Logical": str,
        "Conditions": List[
            ClientGetWorkflowResponseWorkflowLastRunGraphNodesTriggerDetailsTriggerPredicateConditionsTypeDef
        ],
    },
    total=False,
)


class ClientGetWorkflowResponseWorkflowLastRunGraphNodesTriggerDetailsTriggerPredicateTypeDef(
    _ClientGetWorkflowResponseWorkflowLastRunGraphNodesTriggerDetailsTriggerPredicateTypeDef
):
    """
    Type definition for `ClientGetWorkflowResponseWorkflowLastRunGraphNodesTriggerDetailsTrigger` `Predicate`

    The predicate of this trigger, which defines when it will fire.

    - **Logical** *(string) --*

      An optional field if only one condition is listed. If multiple conditions are
      listed, then this field is required.

    - **Conditions** *(list) --*

      A list of the conditions that determine when the trigger will fire.

      - *(dict) --*

        Defines a condition under which a trigger fires.

        - **LogicalOperator** *(string) --*

          A logical operator.

        - **JobName** *(string) --*

          The name of the job whose ``JobRuns`` this condition applies to, and on
          which this trigger waits.

        - **State** *(string) --*

          The condition state. Currently, the values supported are ``SUCCEEDED`` ,
          ``STOPPED`` , ``TIMEOUT`` , and ``FAILED`` .

        - **CrawlerName** *(string) --*

          The name of the crawler to which this condition applies.

        - **CrawlState** *(string) --*

          The state of the crawler to which this condition applies.
    """


_ClientGetWorkflowResponseWorkflowLastRunGraphNodesTriggerDetailsTriggerTypeDef = TypedDict(
    "_ClientGetWorkflowResponseWorkflowLastRunGraphNodesTriggerDetailsTriggerTypeDef",
    {
        "Name": str,
        "WorkflowName": str,
        "Id": str,
        "Type": str,
        "State": str,
        "Description": str,
        "Schedule": str,
        "Actions": List[
            ClientGetWorkflowResponseWorkflowLastRunGraphNodesTriggerDetailsTriggerActionsTypeDef
        ],
        "Predicate": ClientGetWorkflowResponseWorkflowLastRunGraphNodesTriggerDetailsTriggerPredicateTypeDef,
    },
    total=False,
)


class ClientGetWorkflowResponseWorkflowLastRunGraphNodesTriggerDetailsTriggerTypeDef(
    _ClientGetWorkflowResponseWorkflowLastRunGraphNodesTriggerDetailsTriggerTypeDef
):
    """
    Type definition for `ClientGetWorkflowResponseWorkflowLastRunGraphNodesTriggerDetails` `Trigger`

    The information of the trigger represented by the trigger node.

    - **Name** *(string) --*

      The name of the trigger.

    - **WorkflowName** *(string) --*

      The name of the workflow associated with the trigger.

    - **Id** *(string) --*

      Reserved for future use.

    - **Type** *(string) --*

      The type of trigger that this is.

    - **State** *(string) --*

      The current state of the trigger.

    - **Description** *(string) --*

      A description of this trigger.

    - **Schedule** *(string) --*

      A ``cron`` expression used to specify the schedule (see `Time-Based Schedules
      for Jobs and Crawlers
      <https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html>`__
      . For example, to run something every day at 12:15 UTC, you would specify:
      ``cron(15 12 * * ? *)`` .

    - **Actions** *(list) --*

      The actions initiated by this trigger.

      - *(dict) --*

        Defines an action to be initiated by a trigger.

        - **JobName** *(string) --*

          The name of a job to be executed.

        - **Arguments** *(dict) --*

          The job arguments used when this trigger fires. For this job run, they
          replace the default arguments set in the job definition itself.

          You can specify arguments here that your own job-execution script consumes,
          as well as arguments that AWS Glue itself consumes.

          For information about how to specify and consume your own Job arguments,
          see the `Calling AWS Glue APIs in Python
          <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
          topic in the developer guide.

          For information about the key-value pairs that AWS Glue consumes to set up
          your job, see the `Special Parameters Used by AWS Glue
          <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
          topic in the developer guide.

          - *(string) --*

            - *(string) --*

        - **Timeout** *(integer) --*

          The ``JobRun`` timeout in minutes. This is the maximum time that a job run
          can consume resources before it is terminated and enters ``TIMEOUT``
          status. The default is 2,880 minutes (48 hours). This overrides the timeout
          value set in the parent job.

        - **SecurityConfiguration** *(string) --*

          The name of the ``SecurityConfiguration`` structure to be used with this
          action.

        - **NotificationProperty** *(dict) --*

          Specifies configuration properties of a job run notification.

          - **NotifyDelayAfter** *(integer) --*

            After a job run starts, the number of minutes to wait before sending a
            job run delay notification.

        - **CrawlerName** *(string) --*

          The name of the crawler to be used with this action.

    - **Predicate** *(dict) --*

      The predicate of this trigger, which defines when it will fire.

      - **Logical** *(string) --*

        An optional field if only one condition is listed. If multiple conditions are
        listed, then this field is required.

      - **Conditions** *(list) --*

        A list of the conditions that determine when the trigger will fire.

        - *(dict) --*

          Defines a condition under which a trigger fires.

          - **LogicalOperator** *(string) --*

            A logical operator.

          - **JobName** *(string) --*

            The name of the job whose ``JobRuns`` this condition applies to, and on
            which this trigger waits.

          - **State** *(string) --*

            The condition state. Currently, the values supported are ``SUCCEEDED`` ,
            ``STOPPED`` , ``TIMEOUT`` , and ``FAILED`` .

          - **CrawlerName** *(string) --*

            The name of the crawler to which this condition applies.

          - **CrawlState** *(string) --*

            The state of the crawler to which this condition applies.
    """


_ClientGetWorkflowResponseWorkflowLastRunGraphNodesTriggerDetailsTypeDef = TypedDict(
    "_ClientGetWorkflowResponseWorkflowLastRunGraphNodesTriggerDetailsTypeDef",
    {
        "Trigger": ClientGetWorkflowResponseWorkflowLastRunGraphNodesTriggerDetailsTriggerTypeDef
    },
    total=False,
)


class ClientGetWorkflowResponseWorkflowLastRunGraphNodesTriggerDetailsTypeDef(
    _ClientGetWorkflowResponseWorkflowLastRunGraphNodesTriggerDetailsTypeDef
):
    """
    Type definition for `ClientGetWorkflowResponseWorkflowLastRunGraphNodes` `TriggerDetails`

    Details of the Trigger when the node represents a Trigger.

    - **Trigger** *(dict) --*

      The information of the trigger represented by the trigger node.

      - **Name** *(string) --*

        The name of the trigger.

      - **WorkflowName** *(string) --*

        The name of the workflow associated with the trigger.

      - **Id** *(string) --*

        Reserved for future use.

      - **Type** *(string) --*

        The type of trigger that this is.

      - **State** *(string) --*

        The current state of the trigger.

      - **Description** *(string) --*

        A description of this trigger.

      - **Schedule** *(string) --*

        A ``cron`` expression used to specify the schedule (see `Time-Based Schedules
        for Jobs and Crawlers
        <https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html>`__
        . For example, to run something every day at 12:15 UTC, you would specify:
        ``cron(15 12 * * ? *)`` .

      - **Actions** *(list) --*

        The actions initiated by this trigger.

        - *(dict) --*

          Defines an action to be initiated by a trigger.

          - **JobName** *(string) --*

            The name of a job to be executed.

          - **Arguments** *(dict) --*

            The job arguments used when this trigger fires. For this job run, they
            replace the default arguments set in the job definition itself.

            You can specify arguments here that your own job-execution script consumes,
            as well as arguments that AWS Glue itself consumes.

            For information about how to specify and consume your own Job arguments,
            see the `Calling AWS Glue APIs in Python
            <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
            topic in the developer guide.

            For information about the key-value pairs that AWS Glue consumes to set up
            your job, see the `Special Parameters Used by AWS Glue
            <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
            topic in the developer guide.

            - *(string) --*

              - *(string) --*

          - **Timeout** *(integer) --*

            The ``JobRun`` timeout in minutes. This is the maximum time that a job run
            can consume resources before it is terminated and enters ``TIMEOUT``
            status. The default is 2,880 minutes (48 hours). This overrides the timeout
            value set in the parent job.

          - **SecurityConfiguration** *(string) --*

            The name of the ``SecurityConfiguration`` structure to be used with this
            action.

          - **NotificationProperty** *(dict) --*

            Specifies configuration properties of a job run notification.

            - **NotifyDelayAfter** *(integer) --*

              After a job run starts, the number of minutes to wait before sending a
              job run delay notification.

          - **CrawlerName** *(string) --*

            The name of the crawler to be used with this action.

      - **Predicate** *(dict) --*

        The predicate of this trigger, which defines when it will fire.

        - **Logical** *(string) --*

          An optional field if only one condition is listed. If multiple conditions are
          listed, then this field is required.

        - **Conditions** *(list) --*

          A list of the conditions that determine when the trigger will fire.

          - *(dict) --*

            Defines a condition under which a trigger fires.

            - **LogicalOperator** *(string) --*

              A logical operator.

            - **JobName** *(string) --*

              The name of the job whose ``JobRuns`` this condition applies to, and on
              which this trigger waits.

            - **State** *(string) --*

              The condition state. Currently, the values supported are ``SUCCEEDED`` ,
              ``STOPPED`` , ``TIMEOUT`` , and ``FAILED`` .

            - **CrawlerName** *(string) --*

              The name of the crawler to which this condition applies.

            - **CrawlState** *(string) --*

              The state of the crawler to which this condition applies.
    """


_ClientGetWorkflowResponseWorkflowLastRunGraphNodesTypeDef = TypedDict(
    "_ClientGetWorkflowResponseWorkflowLastRunGraphNodesTypeDef",
    {
        "Type": str,
        "Name": str,
        "UniqueId": str,
        "TriggerDetails": ClientGetWorkflowResponseWorkflowLastRunGraphNodesTriggerDetailsTypeDef,
        "JobDetails": ClientGetWorkflowResponseWorkflowLastRunGraphNodesJobDetailsTypeDef,
        "CrawlerDetails": ClientGetWorkflowResponseWorkflowLastRunGraphNodesCrawlerDetailsTypeDef,
    },
    total=False,
)


class ClientGetWorkflowResponseWorkflowLastRunGraphNodesTypeDef(
    _ClientGetWorkflowResponseWorkflowLastRunGraphNodesTypeDef
):
    """
    Type definition for `ClientGetWorkflowResponseWorkflowLastRunGraph` `Nodes`

    A node represents an AWS Glue component like Trigger, Job etc. which is part of a
    workflow.

    - **Type** *(string) --*

      The type of AWS Glue component represented by the node.

    - **Name** *(string) --*

      The name of the AWS Glue component represented by the node.

    - **UniqueId** *(string) --*

      The unique Id assigned to the node within the workflow.

    - **TriggerDetails** *(dict) --*

      Details of the Trigger when the node represents a Trigger.

      - **Trigger** *(dict) --*

        The information of the trigger represented by the trigger node.

        - **Name** *(string) --*

          The name of the trigger.

        - **WorkflowName** *(string) --*

          The name of the workflow associated with the trigger.

        - **Id** *(string) --*

          Reserved for future use.

        - **Type** *(string) --*

          The type of trigger that this is.

        - **State** *(string) --*

          The current state of the trigger.

        - **Description** *(string) --*

          A description of this trigger.

        - **Schedule** *(string) --*

          A ``cron`` expression used to specify the schedule (see `Time-Based Schedules
          for Jobs and Crawlers
          <https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html>`__
          . For example, to run something every day at 12:15 UTC, you would specify:
          ``cron(15 12 * * ? *)`` .

        - **Actions** *(list) --*

          The actions initiated by this trigger.

          - *(dict) --*

            Defines an action to be initiated by a trigger.

            - **JobName** *(string) --*

              The name of a job to be executed.

            - **Arguments** *(dict) --*

              The job arguments used when this trigger fires. For this job run, they
              replace the default arguments set in the job definition itself.

              You can specify arguments here that your own job-execution script consumes,
              as well as arguments that AWS Glue itself consumes.

              For information about how to specify and consume your own Job arguments,
              see the `Calling AWS Glue APIs in Python
              <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
              topic in the developer guide.

              For information about the key-value pairs that AWS Glue consumes to set up
              your job, see the `Special Parameters Used by AWS Glue
              <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
              topic in the developer guide.

              - *(string) --*

                - *(string) --*

            - **Timeout** *(integer) --*

              The ``JobRun`` timeout in minutes. This is the maximum time that a job run
              can consume resources before it is terminated and enters ``TIMEOUT``
              status. The default is 2,880 minutes (48 hours). This overrides the timeout
              value set in the parent job.

            - **SecurityConfiguration** *(string) --*

              The name of the ``SecurityConfiguration`` structure to be used with this
              action.

            - **NotificationProperty** *(dict) --*

              Specifies configuration properties of a job run notification.

              - **NotifyDelayAfter** *(integer) --*

                After a job run starts, the number of minutes to wait before sending a
                job run delay notification.

            - **CrawlerName** *(string) --*

              The name of the crawler to be used with this action.

        - **Predicate** *(dict) --*

          The predicate of this trigger, which defines when it will fire.

          - **Logical** *(string) --*

            An optional field if only one condition is listed. If multiple conditions are
            listed, then this field is required.

          - **Conditions** *(list) --*

            A list of the conditions that determine when the trigger will fire.

            - *(dict) --*

              Defines a condition under which a trigger fires.

              - **LogicalOperator** *(string) --*

                A logical operator.

              - **JobName** *(string) --*

                The name of the job whose ``JobRuns`` this condition applies to, and on
                which this trigger waits.

              - **State** *(string) --*

                The condition state. Currently, the values supported are ``SUCCEEDED`` ,
                ``STOPPED`` , ``TIMEOUT`` , and ``FAILED`` .

              - **CrawlerName** *(string) --*

                The name of the crawler to which this condition applies.

              - **CrawlState** *(string) --*

                The state of the crawler to which this condition applies.

    - **JobDetails** *(dict) --*

      Details of the Job when the node represents a Job.

      - **JobRuns** *(list) --*

        The information for the job runs represented by the job node.

        - *(dict) --*

          Contains information about a job run.

          - **Id** *(string) --*

            The ID of this job run.

          - **Attempt** *(integer) --*

            The number of the attempt to run this job.

          - **PreviousRunId** *(string) --*

            The ID of the previous run of this job. For example, the ``JobRunId``
            specified in the ``StartJobRun`` action.

          - **TriggerName** *(string) --*

            The name of the trigger that started this job run.

          - **JobName** *(string) --*

            The name of the job definition being used in this run.

          - **StartedOn** *(datetime) --*

            The date and time at which this job run was started.

          - **LastModifiedOn** *(datetime) --*

            The last time that this job run was modified.

          - **CompletedOn** *(datetime) --*

            The date and time that this job run completed.

          - **JobRunState** *(string) --*

            The current state of the job run.

          - **Arguments** *(dict) --*

            The job arguments associated with this run. For this job run, they replace
            the default arguments set in the job definition itself.

            You can specify arguments here that your own job-execution script consumes,
            as well as arguments that AWS Glue itself consumes.

            For information about how to specify and consume your own job arguments, see
            the `Calling AWS Glue APIs in Python
            <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
            topic in the developer guide.

            For information about the key-value pairs that AWS Glue consumes to set up
            your job, see the `Special Parameters Used by AWS Glue
            <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
            topic in the developer guide.

            - *(string) --*

              - *(string) --*

          - **ErrorMessage** *(string) --*

            An error message associated with this job run.

          - **PredecessorRuns** *(list) --*

            A list of predecessors to this job run.

            - *(dict) --*

              A job run that was used in the predicate of a conditional trigger that
              triggered this job run.

              - **JobName** *(string) --*

                The name of the job definition used by the predecessor job run.

              - **RunId** *(string) --*

                The job-run ID of the predecessor job run.

          - **AllocatedCapacity** *(integer) --*

            This field is deprecated. Use ``MaxCapacity`` instead.

            The number of AWS Glue data processing units (DPUs) allocated to this JobRun.
            From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a relative
            measure of processing power that consists of 4 vCPUs of compute capacity and
            16 GB of memory. For more information, see the `AWS Glue pricing page
            <https://aws.amazon.com/glue/pricing/>`__ .

          - **ExecutionTime** *(integer) --*

            The amount of time (in seconds) that the job run consumed resources.

          - **Timeout** *(integer) --*

            The ``JobRun`` timeout in minutes. This is the maximum time that a job run
            can consume resources before it is terminated and enters ``TIMEOUT`` status.
            The default is 2,880 minutes (48 hours). This overrides the timeout value set
            in the parent job.

          - **MaxCapacity** *(float) --*

            The number of AWS Glue data processing units (DPUs) that can be allocated
            when this job runs. A DPU is a relative measure of processing power that
            consists of 4 vCPUs of compute capacity and 16 GB of memory. For more
            information, see the `AWS Glue pricing page
            <https://docs.aws.amazon.com/https:/aws.amazon.com/glue/pricing/>`__ .

            Do not set ``Max Capacity`` if using ``WorkerType`` and ``NumberOfWorkers`` .

            The value that can be allocated for ``MaxCapacity`` depends on whether you
            are running a Python shell job or an Apache Spark ETL job:

            * When you specify a Python shell job (``JobCommand.Name`` ="pythonshell"),
            you can allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.

            * When you specify an Apache Spark ETL job (``JobCommand.Name`` ="glueetl"),
            you can allocate from 2 to 100 DPUs. The default is 10 DPUs. This job type
            cannot have a fractional DPU allocation.

          - **WorkerType** *(string) --*

            The type of predefined worker that is allocated when a job runs. Accepts a
            value of Standard, G.1X, or G.2X.

            * For the ``Standard`` worker type, each worker provides 4 vCPU, 16 GB of
            memory and a 50GB disk, and 2 executors per worker.

            * For the ``G.1X`` worker type, each worker provides 4 vCPU, 16 GB of memory
            and a 64GB disk, and 1 executor per worker.

            * For the ``G.2X`` worker type, each worker provides 8 vCPU, 32 GB of memory
            and a 128GB disk, and 1 executor per worker.

          - **NumberOfWorkers** *(integer) --*

            The number of workers of a defined ``workerType`` that are allocated when a
            job runs.

            The maximum number of workers you can define are 299 for ``G.1X`` , and 149
            for ``G.2X`` .

          - **SecurityConfiguration** *(string) --*

            The name of the ``SecurityConfiguration`` structure to be used with this job
            run.

          - **LogGroupName** *(string) --*

            The name of the log group for secure logging that can be server-side
            encrypted in Amazon CloudWatch using AWS KMS. This name can be
            ``/aws-glue/jobs/`` , in which case the default encryption is ``NONE`` . If
            you add a role name and ``SecurityConfiguration`` name (in other words,
            ``/aws-glue/jobs-yourRoleName-yourSecurityConfigurationName/`` ), then that
            security configuration is used to encrypt the log group.

          - **NotificationProperty** *(dict) --*

            Specifies configuration properties of a job run notification.

            - **NotifyDelayAfter** *(integer) --*

              After a job run starts, the number of minutes to wait before sending a job
              run delay notification.

          - **GlueVersion** *(string) --*

            Glue version determines the versions of Apache Spark and Python that AWS Glue
            supports. The Python version indicates the version supported for jobs of type
            Spark.

            For more information about the available AWS Glue versions and corresponding
            Spark and Python versions, see `Glue version
            <https://docs.aws.amazon.com/glue/latest/dg/add-job.html>`__ in the developer
            guide.

            Jobs that are created without specifying a Glue version default to Glue 0.9.

    - **CrawlerDetails** *(dict) --*

      Details of the crawler when the node represents a crawler.

      - **Crawls** *(list) --*

        A list of crawls represented by the crawl node.

        - *(dict) --*

          The details of a crawl in the workflow.

          - **State** *(string) --*

            The state of the crawler.

          - **StartedOn** *(datetime) --*

            The date and time on which the crawl started.

          - **CompletedOn** *(datetime) --*

            The date and time on which the crawl completed.

          - **ErrorMessage** *(string) --*

            The error message associated with the crawl.

          - **LogGroup** *(string) --*

            The log group associated with the crawl.

          - **LogStream** *(string) --*

            The log stream associated with the crawl.
    """


_ClientGetWorkflowResponseWorkflowLastRunGraphTypeDef = TypedDict(
    "_ClientGetWorkflowResponseWorkflowLastRunGraphTypeDef",
    {
        "Nodes": List[ClientGetWorkflowResponseWorkflowLastRunGraphNodesTypeDef],
        "Edges": List[ClientGetWorkflowResponseWorkflowLastRunGraphEdgesTypeDef],
    },
    total=False,
)


class ClientGetWorkflowResponseWorkflowLastRunGraphTypeDef(
    _ClientGetWorkflowResponseWorkflowLastRunGraphTypeDef
):
    """
    Type definition for `ClientGetWorkflowResponseWorkflowLastRun` `Graph`

    The graph representing all the AWS Glue components that belong to the workflow as nodes
    and directed connections between them as edges.

    - **Nodes** *(list) --*

      A list of the the AWS Glue components belong to the workflow represented as nodes.

      - *(dict) --*

        A node represents an AWS Glue component like Trigger, Job etc. which is part of a
        workflow.

        - **Type** *(string) --*

          The type of AWS Glue component represented by the node.

        - **Name** *(string) --*

          The name of the AWS Glue component represented by the node.

        - **UniqueId** *(string) --*

          The unique Id assigned to the node within the workflow.

        - **TriggerDetails** *(dict) --*

          Details of the Trigger when the node represents a Trigger.

          - **Trigger** *(dict) --*

            The information of the trigger represented by the trigger node.

            - **Name** *(string) --*

              The name of the trigger.

            - **WorkflowName** *(string) --*

              The name of the workflow associated with the trigger.

            - **Id** *(string) --*

              Reserved for future use.

            - **Type** *(string) --*

              The type of trigger that this is.

            - **State** *(string) --*

              The current state of the trigger.

            - **Description** *(string) --*

              A description of this trigger.

            - **Schedule** *(string) --*

              A ``cron`` expression used to specify the schedule (see `Time-Based Schedules
              for Jobs and Crawlers
              <https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html>`__
              . For example, to run something every day at 12:15 UTC, you would specify:
              ``cron(15 12 * * ? *)`` .

            - **Actions** *(list) --*

              The actions initiated by this trigger.

              - *(dict) --*

                Defines an action to be initiated by a trigger.

                - **JobName** *(string) --*

                  The name of a job to be executed.

                - **Arguments** *(dict) --*

                  The job arguments used when this trigger fires. For this job run, they
                  replace the default arguments set in the job definition itself.

                  You can specify arguments here that your own job-execution script consumes,
                  as well as arguments that AWS Glue itself consumes.

                  For information about how to specify and consume your own Job arguments,
                  see the `Calling AWS Glue APIs in Python
                  <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
                  topic in the developer guide.

                  For information about the key-value pairs that AWS Glue consumes to set up
                  your job, see the `Special Parameters Used by AWS Glue
                  <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
                  topic in the developer guide.

                  - *(string) --*

                    - *(string) --*

                - **Timeout** *(integer) --*

                  The ``JobRun`` timeout in minutes. This is the maximum time that a job run
                  can consume resources before it is terminated and enters ``TIMEOUT``
                  status. The default is 2,880 minutes (48 hours). This overrides the timeout
                  value set in the parent job.

                - **SecurityConfiguration** *(string) --*

                  The name of the ``SecurityConfiguration`` structure to be used with this
                  action.

                - **NotificationProperty** *(dict) --*

                  Specifies configuration properties of a job run notification.

                  - **NotifyDelayAfter** *(integer) --*

                    After a job run starts, the number of minutes to wait before sending a
                    job run delay notification.

                - **CrawlerName** *(string) --*

                  The name of the crawler to be used with this action.

            - **Predicate** *(dict) --*

              The predicate of this trigger, which defines when it will fire.

              - **Logical** *(string) --*

                An optional field if only one condition is listed. If multiple conditions are
                listed, then this field is required.

              - **Conditions** *(list) --*

                A list of the conditions that determine when the trigger will fire.

                - *(dict) --*

                  Defines a condition under which a trigger fires.

                  - **LogicalOperator** *(string) --*

                    A logical operator.

                  - **JobName** *(string) --*

                    The name of the job whose ``JobRuns`` this condition applies to, and on
                    which this trigger waits.

                  - **State** *(string) --*

                    The condition state. Currently, the values supported are ``SUCCEEDED`` ,
                    ``STOPPED`` , ``TIMEOUT`` , and ``FAILED`` .

                  - **CrawlerName** *(string) --*

                    The name of the crawler to which this condition applies.

                  - **CrawlState** *(string) --*

                    The state of the crawler to which this condition applies.

        - **JobDetails** *(dict) --*

          Details of the Job when the node represents a Job.

          - **JobRuns** *(list) --*

            The information for the job runs represented by the job node.

            - *(dict) --*

              Contains information about a job run.

              - **Id** *(string) --*

                The ID of this job run.

              - **Attempt** *(integer) --*

                The number of the attempt to run this job.

              - **PreviousRunId** *(string) --*

                The ID of the previous run of this job. For example, the ``JobRunId``
                specified in the ``StartJobRun`` action.

              - **TriggerName** *(string) --*

                The name of the trigger that started this job run.

              - **JobName** *(string) --*

                The name of the job definition being used in this run.

              - **StartedOn** *(datetime) --*

                The date and time at which this job run was started.

              - **LastModifiedOn** *(datetime) --*

                The last time that this job run was modified.

              - **CompletedOn** *(datetime) --*

                The date and time that this job run completed.

              - **JobRunState** *(string) --*

                The current state of the job run.

              - **Arguments** *(dict) --*

                The job arguments associated with this run. For this job run, they replace
                the default arguments set in the job definition itself.

                You can specify arguments here that your own job-execution script consumes,
                as well as arguments that AWS Glue itself consumes.

                For information about how to specify and consume your own job arguments, see
                the `Calling AWS Glue APIs in Python
                <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
                topic in the developer guide.

                For information about the key-value pairs that AWS Glue consumes to set up
                your job, see the `Special Parameters Used by AWS Glue
                <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
                topic in the developer guide.

                - *(string) --*

                  - *(string) --*

              - **ErrorMessage** *(string) --*

                An error message associated with this job run.

              - **PredecessorRuns** *(list) --*

                A list of predecessors to this job run.

                - *(dict) --*

                  A job run that was used in the predicate of a conditional trigger that
                  triggered this job run.

                  - **JobName** *(string) --*

                    The name of the job definition used by the predecessor job run.

                  - **RunId** *(string) --*

                    The job-run ID of the predecessor job run.

              - **AllocatedCapacity** *(integer) --*

                This field is deprecated. Use ``MaxCapacity`` instead.

                The number of AWS Glue data processing units (DPUs) allocated to this JobRun.
                From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a relative
                measure of processing power that consists of 4 vCPUs of compute capacity and
                16 GB of memory. For more information, see the `AWS Glue pricing page
                <https://aws.amazon.com/glue/pricing/>`__ .

              - **ExecutionTime** *(integer) --*

                The amount of time (in seconds) that the job run consumed resources.

              - **Timeout** *(integer) --*

                The ``JobRun`` timeout in minutes. This is the maximum time that a job run
                can consume resources before it is terminated and enters ``TIMEOUT`` status.
                The default is 2,880 minutes (48 hours). This overrides the timeout value set
                in the parent job.

              - **MaxCapacity** *(float) --*

                The number of AWS Glue data processing units (DPUs) that can be allocated
                when this job runs. A DPU is a relative measure of processing power that
                consists of 4 vCPUs of compute capacity and 16 GB of memory. For more
                information, see the `AWS Glue pricing page
                <https://docs.aws.amazon.com/https:/aws.amazon.com/glue/pricing/>`__ .

                Do not set ``Max Capacity`` if using ``WorkerType`` and ``NumberOfWorkers`` .

                The value that can be allocated for ``MaxCapacity`` depends on whether you
                are running a Python shell job or an Apache Spark ETL job:

                * When you specify a Python shell job (``JobCommand.Name`` ="pythonshell"),
                you can allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.

                * When you specify an Apache Spark ETL job (``JobCommand.Name`` ="glueetl"),
                you can allocate from 2 to 100 DPUs. The default is 10 DPUs. This job type
                cannot have a fractional DPU allocation.

              - **WorkerType** *(string) --*

                The type of predefined worker that is allocated when a job runs. Accepts a
                value of Standard, G.1X, or G.2X.

                * For the ``Standard`` worker type, each worker provides 4 vCPU, 16 GB of
                memory and a 50GB disk, and 2 executors per worker.

                * For the ``G.1X`` worker type, each worker provides 4 vCPU, 16 GB of memory
                and a 64GB disk, and 1 executor per worker.

                * For the ``G.2X`` worker type, each worker provides 8 vCPU, 32 GB of memory
                and a 128GB disk, and 1 executor per worker.

              - **NumberOfWorkers** *(integer) --*

                The number of workers of a defined ``workerType`` that are allocated when a
                job runs.

                The maximum number of workers you can define are 299 for ``G.1X`` , and 149
                for ``G.2X`` .

              - **SecurityConfiguration** *(string) --*

                The name of the ``SecurityConfiguration`` structure to be used with this job
                run.

              - **LogGroupName** *(string) --*

                The name of the log group for secure logging that can be server-side
                encrypted in Amazon CloudWatch using AWS KMS. This name can be
                ``/aws-glue/jobs/`` , in which case the default encryption is ``NONE`` . If
                you add a role name and ``SecurityConfiguration`` name (in other words,
                ``/aws-glue/jobs-yourRoleName-yourSecurityConfigurationName/`` ), then that
                security configuration is used to encrypt the log group.

              - **NotificationProperty** *(dict) --*

                Specifies configuration properties of a job run notification.

                - **NotifyDelayAfter** *(integer) --*

                  After a job run starts, the number of minutes to wait before sending a job
                  run delay notification.

              - **GlueVersion** *(string) --*

                Glue version determines the versions of Apache Spark and Python that AWS Glue
                supports. The Python version indicates the version supported for jobs of type
                Spark.

                For more information about the available AWS Glue versions and corresponding
                Spark and Python versions, see `Glue version
                <https://docs.aws.amazon.com/glue/latest/dg/add-job.html>`__ in the developer
                guide.

                Jobs that are created without specifying a Glue version default to Glue 0.9.

        - **CrawlerDetails** *(dict) --*

          Details of the crawler when the node represents a crawler.

          - **Crawls** *(list) --*

            A list of crawls represented by the crawl node.

            - *(dict) --*

              The details of a crawl in the workflow.

              - **State** *(string) --*

                The state of the crawler.

              - **StartedOn** *(datetime) --*

                The date and time on which the crawl started.

              - **CompletedOn** *(datetime) --*

                The date and time on which the crawl completed.

              - **ErrorMessage** *(string) --*

                The error message associated with the crawl.

              - **LogGroup** *(string) --*

                The log group associated with the crawl.

              - **LogStream** *(string) --*

                The log stream associated with the crawl.

    - **Edges** *(list) --*

      A list of all the directed connections between the nodes belonging to the workflow.

      - *(dict) --*

        An edge represents a directed connection between two AWS Glue components which are
        part of the workflow the edge belongs to.

        - **SourceId** *(string) --*

          The unique of the node within the workflow where the edge starts.

        - **DestinationId** *(string) --*

          The unique of the node within the workflow where the edge ends.
    """


_ClientGetWorkflowResponseWorkflowLastRunStatisticsTypeDef = TypedDict(
    "_ClientGetWorkflowResponseWorkflowLastRunStatisticsTypeDef",
    {
        "TotalActions": int,
        "TimeoutActions": int,
        "FailedActions": int,
        "StoppedActions": int,
        "SucceededActions": int,
        "RunningActions": int,
    },
    total=False,
)


class ClientGetWorkflowResponseWorkflowLastRunStatisticsTypeDef(
    _ClientGetWorkflowResponseWorkflowLastRunStatisticsTypeDef
):
    """
    Type definition for `ClientGetWorkflowResponseWorkflowLastRun` `Statistics`

    The statistics of the run.

    - **TotalActions** *(integer) --*

      Total number of Actions in the workflow run.

    - **TimeoutActions** *(integer) --*

      Total number of Actions which timed out.

    - **FailedActions** *(integer) --*

      Total number of Actions which have failed.

    - **StoppedActions** *(integer) --*

      Total number of Actions which have stopped.

    - **SucceededActions** *(integer) --*

      Total number of Actions which have succeeded.

    - **RunningActions** *(integer) --*

      Total number Actions in running state.
    """


_ClientGetWorkflowResponseWorkflowLastRunTypeDef = TypedDict(
    "_ClientGetWorkflowResponseWorkflowLastRunTypeDef",
    {
        "Name": str,
        "WorkflowRunId": str,
        "WorkflowRunProperties": Dict[str, str],
        "StartedOn": datetime,
        "CompletedOn": datetime,
        "Status": str,
        "Statistics": ClientGetWorkflowResponseWorkflowLastRunStatisticsTypeDef,
        "Graph": ClientGetWorkflowResponseWorkflowLastRunGraphTypeDef,
    },
    total=False,
)


class ClientGetWorkflowResponseWorkflowLastRunTypeDef(
    _ClientGetWorkflowResponseWorkflowLastRunTypeDef
):
    """
    Type definition for `ClientGetWorkflowResponseWorkflow` `LastRun`

    The information about the last execution of the workflow.

    - **Name** *(string) --*

      Name of the workflow which was executed.

    - **WorkflowRunId** *(string) --*

      The ID of this workflow run.

    - **WorkflowRunProperties** *(dict) --*

      The workflow run properties which were set during the run.

      - *(string) --*

        - *(string) --*

    - **StartedOn** *(datetime) --*

      The date and time when the workflow run was started.

    - **CompletedOn** *(datetime) --*

      The date and time when the workflow run completed.

    - **Status** *(string) --*

      The status of the workflow run.

    - **Statistics** *(dict) --*

      The statistics of the run.

      - **TotalActions** *(integer) --*

        Total number of Actions in the workflow run.

      - **TimeoutActions** *(integer) --*

        Total number of Actions which timed out.

      - **FailedActions** *(integer) --*

        Total number of Actions which have failed.

      - **StoppedActions** *(integer) --*

        Total number of Actions which have stopped.

      - **SucceededActions** *(integer) --*

        Total number of Actions which have succeeded.

      - **RunningActions** *(integer) --*

        Total number Actions in running state.

    - **Graph** *(dict) --*

      The graph representing all the AWS Glue components that belong to the workflow as nodes
      and directed connections between them as edges.

      - **Nodes** *(list) --*

        A list of the the AWS Glue components belong to the workflow represented as nodes.

        - *(dict) --*

          A node represents an AWS Glue component like Trigger, Job etc. which is part of a
          workflow.

          - **Type** *(string) --*

            The type of AWS Glue component represented by the node.

          - **Name** *(string) --*

            The name of the AWS Glue component represented by the node.

          - **UniqueId** *(string) --*

            The unique Id assigned to the node within the workflow.

          - **TriggerDetails** *(dict) --*

            Details of the Trigger when the node represents a Trigger.

            - **Trigger** *(dict) --*

              The information of the trigger represented by the trigger node.

              - **Name** *(string) --*

                The name of the trigger.

              - **WorkflowName** *(string) --*

                The name of the workflow associated with the trigger.

              - **Id** *(string) --*

                Reserved for future use.

              - **Type** *(string) --*

                The type of trigger that this is.

              - **State** *(string) --*

                The current state of the trigger.

              - **Description** *(string) --*

                A description of this trigger.

              - **Schedule** *(string) --*

                A ``cron`` expression used to specify the schedule (see `Time-Based Schedules
                for Jobs and Crawlers
                <https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html>`__
                . For example, to run something every day at 12:15 UTC, you would specify:
                ``cron(15 12 * * ? *)`` .

              - **Actions** *(list) --*

                The actions initiated by this trigger.

                - *(dict) --*

                  Defines an action to be initiated by a trigger.

                  - **JobName** *(string) --*

                    The name of a job to be executed.

                  - **Arguments** *(dict) --*

                    The job arguments used when this trigger fires. For this job run, they
                    replace the default arguments set in the job definition itself.

                    You can specify arguments here that your own job-execution script consumes,
                    as well as arguments that AWS Glue itself consumes.

                    For information about how to specify and consume your own Job arguments,
                    see the `Calling AWS Glue APIs in Python
                    <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
                    topic in the developer guide.

                    For information about the key-value pairs that AWS Glue consumes to set up
                    your job, see the `Special Parameters Used by AWS Glue
                    <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
                    topic in the developer guide.

                    - *(string) --*

                      - *(string) --*

                  - **Timeout** *(integer) --*

                    The ``JobRun`` timeout in minutes. This is the maximum time that a job run
                    can consume resources before it is terminated and enters ``TIMEOUT``
                    status. The default is 2,880 minutes (48 hours). This overrides the timeout
                    value set in the parent job.

                  - **SecurityConfiguration** *(string) --*

                    The name of the ``SecurityConfiguration`` structure to be used with this
                    action.

                  - **NotificationProperty** *(dict) --*

                    Specifies configuration properties of a job run notification.

                    - **NotifyDelayAfter** *(integer) --*

                      After a job run starts, the number of minutes to wait before sending a
                      job run delay notification.

                  - **CrawlerName** *(string) --*

                    The name of the crawler to be used with this action.

              - **Predicate** *(dict) --*

                The predicate of this trigger, which defines when it will fire.

                - **Logical** *(string) --*

                  An optional field if only one condition is listed. If multiple conditions are
                  listed, then this field is required.

                - **Conditions** *(list) --*

                  A list of the conditions that determine when the trigger will fire.

                  - *(dict) --*

                    Defines a condition under which a trigger fires.

                    - **LogicalOperator** *(string) --*

                      A logical operator.

                    - **JobName** *(string) --*

                      The name of the job whose ``JobRuns`` this condition applies to, and on
                      which this trigger waits.

                    - **State** *(string) --*

                      The condition state. Currently, the values supported are ``SUCCEEDED`` ,
                      ``STOPPED`` , ``TIMEOUT`` , and ``FAILED`` .

                    - **CrawlerName** *(string) --*

                      The name of the crawler to which this condition applies.

                    - **CrawlState** *(string) --*

                      The state of the crawler to which this condition applies.

          - **JobDetails** *(dict) --*

            Details of the Job when the node represents a Job.

            - **JobRuns** *(list) --*

              The information for the job runs represented by the job node.

              - *(dict) --*

                Contains information about a job run.

                - **Id** *(string) --*

                  The ID of this job run.

                - **Attempt** *(integer) --*

                  The number of the attempt to run this job.

                - **PreviousRunId** *(string) --*

                  The ID of the previous run of this job. For example, the ``JobRunId``
                  specified in the ``StartJobRun`` action.

                - **TriggerName** *(string) --*

                  The name of the trigger that started this job run.

                - **JobName** *(string) --*

                  The name of the job definition being used in this run.

                - **StartedOn** *(datetime) --*

                  The date and time at which this job run was started.

                - **LastModifiedOn** *(datetime) --*

                  The last time that this job run was modified.

                - **CompletedOn** *(datetime) --*

                  The date and time that this job run completed.

                - **JobRunState** *(string) --*

                  The current state of the job run.

                - **Arguments** *(dict) --*

                  The job arguments associated with this run. For this job run, they replace
                  the default arguments set in the job definition itself.

                  You can specify arguments here that your own job-execution script consumes,
                  as well as arguments that AWS Glue itself consumes.

                  For information about how to specify and consume your own job arguments, see
                  the `Calling AWS Glue APIs in Python
                  <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
                  topic in the developer guide.

                  For information about the key-value pairs that AWS Glue consumes to set up
                  your job, see the `Special Parameters Used by AWS Glue
                  <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
                  topic in the developer guide.

                  - *(string) --*

                    - *(string) --*

                - **ErrorMessage** *(string) --*

                  An error message associated with this job run.

                - **PredecessorRuns** *(list) --*

                  A list of predecessors to this job run.

                  - *(dict) --*

                    A job run that was used in the predicate of a conditional trigger that
                    triggered this job run.

                    - **JobName** *(string) --*

                      The name of the job definition used by the predecessor job run.

                    - **RunId** *(string) --*

                      The job-run ID of the predecessor job run.

                - **AllocatedCapacity** *(integer) --*

                  This field is deprecated. Use ``MaxCapacity`` instead.

                  The number of AWS Glue data processing units (DPUs) allocated to this JobRun.
                  From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a relative
                  measure of processing power that consists of 4 vCPUs of compute capacity and
                  16 GB of memory. For more information, see the `AWS Glue pricing page
                  <https://aws.amazon.com/glue/pricing/>`__ .

                - **ExecutionTime** *(integer) --*

                  The amount of time (in seconds) that the job run consumed resources.

                - **Timeout** *(integer) --*

                  The ``JobRun`` timeout in minutes. This is the maximum time that a job run
                  can consume resources before it is terminated and enters ``TIMEOUT`` status.
                  The default is 2,880 minutes (48 hours). This overrides the timeout value set
                  in the parent job.

                - **MaxCapacity** *(float) --*

                  The number of AWS Glue data processing units (DPUs) that can be allocated
                  when this job runs. A DPU is a relative measure of processing power that
                  consists of 4 vCPUs of compute capacity and 16 GB of memory. For more
                  information, see the `AWS Glue pricing page
                  <https://docs.aws.amazon.com/https:/aws.amazon.com/glue/pricing/>`__ .

                  Do not set ``Max Capacity`` if using ``WorkerType`` and ``NumberOfWorkers`` .

                  The value that can be allocated for ``MaxCapacity`` depends on whether you
                  are running a Python shell job or an Apache Spark ETL job:

                  * When you specify a Python shell job (``JobCommand.Name`` ="pythonshell"),
                  you can allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.

                  * When you specify an Apache Spark ETL job (``JobCommand.Name`` ="glueetl"),
                  you can allocate from 2 to 100 DPUs. The default is 10 DPUs. This job type
                  cannot have a fractional DPU allocation.

                - **WorkerType** *(string) --*

                  The type of predefined worker that is allocated when a job runs. Accepts a
                  value of Standard, G.1X, or G.2X.

                  * For the ``Standard`` worker type, each worker provides 4 vCPU, 16 GB of
                  memory and a 50GB disk, and 2 executors per worker.

                  * For the ``G.1X`` worker type, each worker provides 4 vCPU, 16 GB of memory
                  and a 64GB disk, and 1 executor per worker.

                  * For the ``G.2X`` worker type, each worker provides 8 vCPU, 32 GB of memory
                  and a 128GB disk, and 1 executor per worker.

                - **NumberOfWorkers** *(integer) --*

                  The number of workers of a defined ``workerType`` that are allocated when a
                  job runs.

                  The maximum number of workers you can define are 299 for ``G.1X`` , and 149
                  for ``G.2X`` .

                - **SecurityConfiguration** *(string) --*

                  The name of the ``SecurityConfiguration`` structure to be used with this job
                  run.

                - **LogGroupName** *(string) --*

                  The name of the log group for secure logging that can be server-side
                  encrypted in Amazon CloudWatch using AWS KMS. This name can be
                  ``/aws-glue/jobs/`` , in which case the default encryption is ``NONE`` . If
                  you add a role name and ``SecurityConfiguration`` name (in other words,
                  ``/aws-glue/jobs-yourRoleName-yourSecurityConfigurationName/`` ), then that
                  security configuration is used to encrypt the log group.

                - **NotificationProperty** *(dict) --*

                  Specifies configuration properties of a job run notification.

                  - **NotifyDelayAfter** *(integer) --*

                    After a job run starts, the number of minutes to wait before sending a job
                    run delay notification.

                - **GlueVersion** *(string) --*

                  Glue version determines the versions of Apache Spark and Python that AWS Glue
                  supports. The Python version indicates the version supported for jobs of type
                  Spark.

                  For more information about the available AWS Glue versions and corresponding
                  Spark and Python versions, see `Glue version
                  <https://docs.aws.amazon.com/glue/latest/dg/add-job.html>`__ in the developer
                  guide.

                  Jobs that are created without specifying a Glue version default to Glue 0.9.

          - **CrawlerDetails** *(dict) --*

            Details of the crawler when the node represents a crawler.

            - **Crawls** *(list) --*

              A list of crawls represented by the crawl node.

              - *(dict) --*

                The details of a crawl in the workflow.

                - **State** *(string) --*

                  The state of the crawler.

                - **StartedOn** *(datetime) --*

                  The date and time on which the crawl started.

                - **CompletedOn** *(datetime) --*

                  The date and time on which the crawl completed.

                - **ErrorMessage** *(string) --*

                  The error message associated with the crawl.

                - **LogGroup** *(string) --*

                  The log group associated with the crawl.

                - **LogStream** *(string) --*

                  The log stream associated with the crawl.

      - **Edges** *(list) --*

        A list of all the directed connections between the nodes belonging to the workflow.

        - *(dict) --*

          An edge represents a directed connection between two AWS Glue components which are
          part of the workflow the edge belongs to.

          - **SourceId** *(string) --*

            The unique of the node within the workflow where the edge starts.

          - **DestinationId** *(string) --*

            The unique of the node within the workflow where the edge ends.
    """


_ClientGetWorkflowResponseWorkflowTypeDef = TypedDict(
    "_ClientGetWorkflowResponseWorkflowTypeDef",
    {
        "Name": str,
        "Description": str,
        "DefaultRunProperties": Dict[str, str],
        "CreatedOn": datetime,
        "LastModifiedOn": datetime,
        "LastRun": ClientGetWorkflowResponseWorkflowLastRunTypeDef,
        "Graph": ClientGetWorkflowResponseWorkflowGraphTypeDef,
    },
    total=False,
)


class ClientGetWorkflowResponseWorkflowTypeDef(
    _ClientGetWorkflowResponseWorkflowTypeDef
):
    """
    Type definition for `ClientGetWorkflowResponse` `Workflow`

    The resource metadata for the workflow.

    - **Name** *(string) --*

      The name of the workflow representing the flow.

    - **Description** *(string) --*

      A description of the workflow.

    - **DefaultRunProperties** *(dict) --*

      A collection of properties to be used as part of each execution of the workflow.

      - *(string) --*

        - *(string) --*

    - **CreatedOn** *(datetime) --*

      The date and time when the workflow was created.

    - **LastModifiedOn** *(datetime) --*

      The date and time when the workflow was last modified.

    - **LastRun** *(dict) --*

      The information about the last execution of the workflow.

      - **Name** *(string) --*

        Name of the workflow which was executed.

      - **WorkflowRunId** *(string) --*

        The ID of this workflow run.

      - **WorkflowRunProperties** *(dict) --*

        The workflow run properties which were set during the run.

        - *(string) --*

          - *(string) --*

      - **StartedOn** *(datetime) --*

        The date and time when the workflow run was started.

      - **CompletedOn** *(datetime) --*

        The date and time when the workflow run completed.

      - **Status** *(string) --*

        The status of the workflow run.

      - **Statistics** *(dict) --*

        The statistics of the run.

        - **TotalActions** *(integer) --*

          Total number of Actions in the workflow run.

        - **TimeoutActions** *(integer) --*

          Total number of Actions which timed out.

        - **FailedActions** *(integer) --*

          Total number of Actions which have failed.

        - **StoppedActions** *(integer) --*

          Total number of Actions which have stopped.

        - **SucceededActions** *(integer) --*

          Total number of Actions which have succeeded.

        - **RunningActions** *(integer) --*

          Total number Actions in running state.

      - **Graph** *(dict) --*

        The graph representing all the AWS Glue components that belong to the workflow as nodes
        and directed connections between them as edges.

        - **Nodes** *(list) --*

          A list of the the AWS Glue components belong to the workflow represented as nodes.

          - *(dict) --*

            A node represents an AWS Glue component like Trigger, Job etc. which is part of a
            workflow.

            - **Type** *(string) --*

              The type of AWS Glue component represented by the node.

            - **Name** *(string) --*

              The name of the AWS Glue component represented by the node.

            - **UniqueId** *(string) --*

              The unique Id assigned to the node within the workflow.

            - **TriggerDetails** *(dict) --*

              Details of the Trigger when the node represents a Trigger.

              - **Trigger** *(dict) --*

                The information of the trigger represented by the trigger node.

                - **Name** *(string) --*

                  The name of the trigger.

                - **WorkflowName** *(string) --*

                  The name of the workflow associated with the trigger.

                - **Id** *(string) --*

                  Reserved for future use.

                - **Type** *(string) --*

                  The type of trigger that this is.

                - **State** *(string) --*

                  The current state of the trigger.

                - **Description** *(string) --*

                  A description of this trigger.

                - **Schedule** *(string) --*

                  A ``cron`` expression used to specify the schedule (see `Time-Based Schedules
                  for Jobs and Crawlers
                  <https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html>`__
                  . For example, to run something every day at 12:15 UTC, you would specify:
                  ``cron(15 12 * * ? *)`` .

                - **Actions** *(list) --*

                  The actions initiated by this trigger.

                  - *(dict) --*

                    Defines an action to be initiated by a trigger.

                    - **JobName** *(string) --*

                      The name of a job to be executed.

                    - **Arguments** *(dict) --*

                      The job arguments used when this trigger fires. For this job run, they
                      replace the default arguments set in the job definition itself.

                      You can specify arguments here that your own job-execution script consumes,
                      as well as arguments that AWS Glue itself consumes.

                      For information about how to specify and consume your own Job arguments,
                      see the `Calling AWS Glue APIs in Python
                      <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
                      topic in the developer guide.

                      For information about the key-value pairs that AWS Glue consumes to set up
                      your job, see the `Special Parameters Used by AWS Glue
                      <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
                      topic in the developer guide.

                      - *(string) --*

                        - *(string) --*

                    - **Timeout** *(integer) --*

                      The ``JobRun`` timeout in minutes. This is the maximum time that a job run
                      can consume resources before it is terminated and enters ``TIMEOUT``
                      status. The default is 2,880 minutes (48 hours). This overrides the timeout
                      value set in the parent job.

                    - **SecurityConfiguration** *(string) --*

                      The name of the ``SecurityConfiguration`` structure to be used with this
                      action.

                    - **NotificationProperty** *(dict) --*

                      Specifies configuration properties of a job run notification.

                      - **NotifyDelayAfter** *(integer) --*

                        After a job run starts, the number of minutes to wait before sending a
                        job run delay notification.

                    - **CrawlerName** *(string) --*

                      The name of the crawler to be used with this action.

                - **Predicate** *(dict) --*

                  The predicate of this trigger, which defines when it will fire.

                  - **Logical** *(string) --*

                    An optional field if only one condition is listed. If multiple conditions are
                    listed, then this field is required.

                  - **Conditions** *(list) --*

                    A list of the conditions that determine when the trigger will fire.

                    - *(dict) --*

                      Defines a condition under which a trigger fires.

                      - **LogicalOperator** *(string) --*

                        A logical operator.

                      - **JobName** *(string) --*

                        The name of the job whose ``JobRuns`` this condition applies to, and on
                        which this trigger waits.

                      - **State** *(string) --*

                        The condition state. Currently, the values supported are ``SUCCEEDED`` ,
                        ``STOPPED`` , ``TIMEOUT`` , and ``FAILED`` .

                      - **CrawlerName** *(string) --*

                        The name of the crawler to which this condition applies.

                      - **CrawlState** *(string) --*

                        The state of the crawler to which this condition applies.

            - **JobDetails** *(dict) --*

              Details of the Job when the node represents a Job.

              - **JobRuns** *(list) --*

                The information for the job runs represented by the job node.

                - *(dict) --*

                  Contains information about a job run.

                  - **Id** *(string) --*

                    The ID of this job run.

                  - **Attempt** *(integer) --*

                    The number of the attempt to run this job.

                  - **PreviousRunId** *(string) --*

                    The ID of the previous run of this job. For example, the ``JobRunId``
                    specified in the ``StartJobRun`` action.

                  - **TriggerName** *(string) --*

                    The name of the trigger that started this job run.

                  - **JobName** *(string) --*

                    The name of the job definition being used in this run.

                  - **StartedOn** *(datetime) --*

                    The date and time at which this job run was started.

                  - **LastModifiedOn** *(datetime) --*

                    The last time that this job run was modified.

                  - **CompletedOn** *(datetime) --*

                    The date and time that this job run completed.

                  - **JobRunState** *(string) --*

                    The current state of the job run.

                  - **Arguments** *(dict) --*

                    The job arguments associated with this run. For this job run, they replace
                    the default arguments set in the job definition itself.

                    You can specify arguments here that your own job-execution script consumes,
                    as well as arguments that AWS Glue itself consumes.

                    For information about how to specify and consume your own job arguments, see
                    the `Calling AWS Glue APIs in Python
                    <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
                    topic in the developer guide.

                    For information about the key-value pairs that AWS Glue consumes to set up
                    your job, see the `Special Parameters Used by AWS Glue
                    <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
                    topic in the developer guide.

                    - *(string) --*

                      - *(string) --*

                  - **ErrorMessage** *(string) --*

                    An error message associated with this job run.

                  - **PredecessorRuns** *(list) --*

                    A list of predecessors to this job run.

                    - *(dict) --*

                      A job run that was used in the predicate of a conditional trigger that
                      triggered this job run.

                      - **JobName** *(string) --*

                        The name of the job definition used by the predecessor job run.

                      - **RunId** *(string) --*

                        The job-run ID of the predecessor job run.

                  - **AllocatedCapacity** *(integer) --*

                    This field is deprecated. Use ``MaxCapacity`` instead.

                    The number of AWS Glue data processing units (DPUs) allocated to this JobRun.
                    From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a relative
                    measure of processing power that consists of 4 vCPUs of compute capacity and
                    16 GB of memory. For more information, see the `AWS Glue pricing page
                    <https://aws.amazon.com/glue/pricing/>`__ .

                  - **ExecutionTime** *(integer) --*

                    The amount of time (in seconds) that the job run consumed resources.

                  - **Timeout** *(integer) --*

                    The ``JobRun`` timeout in minutes. This is the maximum time that a job run
                    can consume resources before it is terminated and enters ``TIMEOUT`` status.
                    The default is 2,880 minutes (48 hours). This overrides the timeout value set
                    in the parent job.

                  - **MaxCapacity** *(float) --*

                    The number of AWS Glue data processing units (DPUs) that can be allocated
                    when this job runs. A DPU is a relative measure of processing power that
                    consists of 4 vCPUs of compute capacity and 16 GB of memory. For more
                    information, see the `AWS Glue pricing page
                    <https://docs.aws.amazon.com/https:/aws.amazon.com/glue/pricing/>`__ .

                    Do not set ``Max Capacity`` if using ``WorkerType`` and ``NumberOfWorkers`` .

                    The value that can be allocated for ``MaxCapacity`` depends on whether you
                    are running a Python shell job or an Apache Spark ETL job:

                    * When you specify a Python shell job (``JobCommand.Name`` ="pythonshell"),
                    you can allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.

                    * When you specify an Apache Spark ETL job (``JobCommand.Name`` ="glueetl"),
                    you can allocate from 2 to 100 DPUs. The default is 10 DPUs. This job type
                    cannot have a fractional DPU allocation.

                  - **WorkerType** *(string) --*

                    The type of predefined worker that is allocated when a job runs. Accepts a
                    value of Standard, G.1X, or G.2X.

                    * For the ``Standard`` worker type, each worker provides 4 vCPU, 16 GB of
                    memory and a 50GB disk, and 2 executors per worker.

                    * For the ``G.1X`` worker type, each worker provides 4 vCPU, 16 GB of memory
                    and a 64GB disk, and 1 executor per worker.

                    * For the ``G.2X`` worker type, each worker provides 8 vCPU, 32 GB of memory
                    and a 128GB disk, and 1 executor per worker.

                  - **NumberOfWorkers** *(integer) --*

                    The number of workers of a defined ``workerType`` that are allocated when a
                    job runs.

                    The maximum number of workers you can define are 299 for ``G.1X`` , and 149
                    for ``G.2X`` .

                  - **SecurityConfiguration** *(string) --*

                    The name of the ``SecurityConfiguration`` structure to be used with this job
                    run.

                  - **LogGroupName** *(string) --*

                    The name of the log group for secure logging that can be server-side
                    encrypted in Amazon CloudWatch using AWS KMS. This name can be
                    ``/aws-glue/jobs/`` , in which case the default encryption is ``NONE`` . If
                    you add a role name and ``SecurityConfiguration`` name (in other words,
                    ``/aws-glue/jobs-yourRoleName-yourSecurityConfigurationName/`` ), then that
                    security configuration is used to encrypt the log group.

                  - **NotificationProperty** *(dict) --*

                    Specifies configuration properties of a job run notification.

                    - **NotifyDelayAfter** *(integer) --*

                      After a job run starts, the number of minutes to wait before sending a job
                      run delay notification.

                  - **GlueVersion** *(string) --*

                    Glue version determines the versions of Apache Spark and Python that AWS Glue
                    supports. The Python version indicates the version supported for jobs of type
                    Spark.

                    For more information about the available AWS Glue versions and corresponding
                    Spark and Python versions, see `Glue version
                    <https://docs.aws.amazon.com/glue/latest/dg/add-job.html>`__ in the developer
                    guide.

                    Jobs that are created without specifying a Glue version default to Glue 0.9.

            - **CrawlerDetails** *(dict) --*

              Details of the crawler when the node represents a crawler.

              - **Crawls** *(list) --*

                A list of crawls represented by the crawl node.

                - *(dict) --*

                  The details of a crawl in the workflow.

                  - **State** *(string) --*

                    The state of the crawler.

                  - **StartedOn** *(datetime) --*

                    The date and time on which the crawl started.

                  - **CompletedOn** *(datetime) --*

                    The date and time on which the crawl completed.

                  - **ErrorMessage** *(string) --*

                    The error message associated with the crawl.

                  - **LogGroup** *(string) --*

                    The log group associated with the crawl.

                  - **LogStream** *(string) --*

                    The log stream associated with the crawl.

        - **Edges** *(list) --*

          A list of all the directed connections between the nodes belonging to the workflow.

          - *(dict) --*

            An edge represents a directed connection between two AWS Glue components which are
            part of the workflow the edge belongs to.

            - **SourceId** *(string) --*

              The unique of the node within the workflow where the edge starts.

            - **DestinationId** *(string) --*

              The unique of the node within the workflow where the edge ends.

    - **Graph** *(dict) --*

      The graph representing all the AWS Glue components that belong to the workflow as nodes and
      directed connections between them as edges.

      - **Nodes** *(list) --*

        A list of the the AWS Glue components belong to the workflow represented as nodes.

        - *(dict) --*

          A node represents an AWS Glue component like Trigger, Job etc. which is part of a
          workflow.

          - **Type** *(string) --*

            The type of AWS Glue component represented by the node.

          - **Name** *(string) --*

            The name of the AWS Glue component represented by the node.

          - **UniqueId** *(string) --*

            The unique Id assigned to the node within the workflow.

          - **TriggerDetails** *(dict) --*

            Details of the Trigger when the node represents a Trigger.

            - **Trigger** *(dict) --*

              The information of the trigger represented by the trigger node.

              - **Name** *(string) --*

                The name of the trigger.

              - **WorkflowName** *(string) --*

                The name of the workflow associated with the trigger.

              - **Id** *(string) --*

                Reserved for future use.

              - **Type** *(string) --*

                The type of trigger that this is.

              - **State** *(string) --*

                The current state of the trigger.

              - **Description** *(string) --*

                A description of this trigger.

              - **Schedule** *(string) --*

                A ``cron`` expression used to specify the schedule (see `Time-Based Schedules for
                Jobs and Crawlers
                <https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html>`__
                . For example, to run something every day at 12:15 UTC, you would specify:
                ``cron(15 12 * * ? *)`` .

              - **Actions** *(list) --*

                The actions initiated by this trigger.

                - *(dict) --*

                  Defines an action to be initiated by a trigger.

                  - **JobName** *(string) --*

                    The name of a job to be executed.

                  - **Arguments** *(dict) --*

                    The job arguments used when this trigger fires. For this job run, they
                    replace the default arguments set in the job definition itself.

                    You can specify arguments here that your own job-execution script consumes,
                    as well as arguments that AWS Glue itself consumes.

                    For information about how to specify and consume your own Job arguments, see
                    the `Calling AWS Glue APIs in Python
                    <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
                    topic in the developer guide.

                    For information about the key-value pairs that AWS Glue consumes to set up
                    your job, see the `Special Parameters Used by AWS Glue
                    <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
                    topic in the developer guide.

                    - *(string) --*

                      - *(string) --*

                  - **Timeout** *(integer) --*

                    The ``JobRun`` timeout in minutes. This is the maximum time that a job run
                    can consume resources before it is terminated and enters ``TIMEOUT`` status.
                    The default is 2,880 minutes (48 hours). This overrides the timeout value set
                    in the parent job.

                  - **SecurityConfiguration** *(string) --*

                    The name of the ``SecurityConfiguration`` structure to be used with this
                    action.

                  - **NotificationProperty** *(dict) --*

                    Specifies configuration properties of a job run notification.

                    - **NotifyDelayAfter** *(integer) --*

                      After a job run starts, the number of minutes to wait before sending a job
                      run delay notification.

                  - **CrawlerName** *(string) --*

                    The name of the crawler to be used with this action.

              - **Predicate** *(dict) --*

                The predicate of this trigger, which defines when it will fire.

                - **Logical** *(string) --*

                  An optional field if only one condition is listed. If multiple conditions are
                  listed, then this field is required.

                - **Conditions** *(list) --*

                  A list of the conditions that determine when the trigger will fire.

                  - *(dict) --*

                    Defines a condition under which a trigger fires.

                    - **LogicalOperator** *(string) --*

                      A logical operator.

                    - **JobName** *(string) --*

                      The name of the job whose ``JobRuns`` this condition applies to, and on
                      which this trigger waits.

                    - **State** *(string) --*

                      The condition state. Currently, the values supported are ``SUCCEEDED`` ,
                      ``STOPPED`` , ``TIMEOUT`` , and ``FAILED`` .

                    - **CrawlerName** *(string) --*

                      The name of the crawler to which this condition applies.

                    - **CrawlState** *(string) --*

                      The state of the crawler to which this condition applies.

          - **JobDetails** *(dict) --*

            Details of the Job when the node represents a Job.

            - **JobRuns** *(list) --*

              The information for the job runs represented by the job node.

              - *(dict) --*

                Contains information about a job run.

                - **Id** *(string) --*

                  The ID of this job run.

                - **Attempt** *(integer) --*

                  The number of the attempt to run this job.

                - **PreviousRunId** *(string) --*

                  The ID of the previous run of this job. For example, the ``JobRunId`` specified
                  in the ``StartJobRun`` action.

                - **TriggerName** *(string) --*

                  The name of the trigger that started this job run.

                - **JobName** *(string) --*

                  The name of the job definition being used in this run.

                - **StartedOn** *(datetime) --*

                  The date and time at which this job run was started.

                - **LastModifiedOn** *(datetime) --*

                  The last time that this job run was modified.

                - **CompletedOn** *(datetime) --*

                  The date and time that this job run completed.

                - **JobRunState** *(string) --*

                  The current state of the job run.

                - **Arguments** *(dict) --*

                  The job arguments associated with this run. For this job run, they replace the
                  default arguments set in the job definition itself.

                  You can specify arguments here that your own job-execution script consumes, as
                  well as arguments that AWS Glue itself consumes.

                  For information about how to specify and consume your own job arguments, see
                  the `Calling AWS Glue APIs in Python
                  <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
                  topic in the developer guide.

                  For information about the key-value pairs that AWS Glue consumes to set up your
                  job, see the `Special Parameters Used by AWS Glue
                  <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
                  topic in the developer guide.

                  - *(string) --*

                    - *(string) --*

                - **ErrorMessage** *(string) --*

                  An error message associated with this job run.

                - **PredecessorRuns** *(list) --*

                  A list of predecessors to this job run.

                  - *(dict) --*

                    A job run that was used in the predicate of a conditional trigger that
                    triggered this job run.

                    - **JobName** *(string) --*

                      The name of the job definition used by the predecessor job run.

                    - **RunId** *(string) --*

                      The job-run ID of the predecessor job run.

                - **AllocatedCapacity** *(integer) --*

                  This field is deprecated. Use ``MaxCapacity`` instead.

                  The number of AWS Glue data processing units (DPUs) allocated to this JobRun.
                  From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a relative
                  measure of processing power that consists of 4 vCPUs of compute capacity and 16
                  GB of memory. For more information, see the `AWS Glue pricing page
                  <https://aws.amazon.com/glue/pricing/>`__ .

                - **ExecutionTime** *(integer) --*

                  The amount of time (in seconds) that the job run consumed resources.

                - **Timeout** *(integer) --*

                  The ``JobRun`` timeout in minutes. This is the maximum time that a job run can
                  consume resources before it is terminated and enters ``TIMEOUT`` status. The
                  default is 2,880 minutes (48 hours). This overrides the timeout value set in
                  the parent job.

                - **MaxCapacity** *(float) --*

                  The number of AWS Glue data processing units (DPUs) that can be allocated when
                  this job runs. A DPU is a relative measure of processing power that consists of
                  4 vCPUs of compute capacity and 16 GB of memory. For more information, see the
                  `AWS Glue pricing page
                  <https://docs.aws.amazon.com/https:/aws.amazon.com/glue/pricing/>`__ .

                  Do not set ``Max Capacity`` if using ``WorkerType`` and ``NumberOfWorkers`` .

                  The value that can be allocated for ``MaxCapacity`` depends on whether you are
                  running a Python shell job or an Apache Spark ETL job:

                  * When you specify a Python shell job (``JobCommand.Name`` ="pythonshell"), you
                  can allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.

                  * When you specify an Apache Spark ETL job (``JobCommand.Name`` ="glueetl"),
                  you can allocate from 2 to 100 DPUs. The default is 10 DPUs. This job type
                  cannot have a fractional DPU allocation.

                - **WorkerType** *(string) --*

                  The type of predefined worker that is allocated when a job runs. Accepts a
                  value of Standard, G.1X, or G.2X.

                  * For the ``Standard`` worker type, each worker provides 4 vCPU, 16 GB of
                  memory and a 50GB disk, and 2 executors per worker.

                  * For the ``G.1X`` worker type, each worker provides 4 vCPU, 16 GB of memory
                  and a 64GB disk, and 1 executor per worker.

                  * For the ``G.2X`` worker type, each worker provides 8 vCPU, 32 GB of memory
                  and a 128GB disk, and 1 executor per worker.

                - **NumberOfWorkers** *(integer) --*

                  The number of workers of a defined ``workerType`` that are allocated when a job
                  runs.

                  The maximum number of workers you can define are 299 for ``G.1X`` , and 149 for
                  ``G.2X`` .

                - **SecurityConfiguration** *(string) --*

                  The name of the ``SecurityConfiguration`` structure to be used with this job
                  run.

                - **LogGroupName** *(string) --*

                  The name of the log group for secure logging that can be server-side encrypted
                  in Amazon CloudWatch using AWS KMS. This name can be ``/aws-glue/jobs/`` , in
                  which case the default encryption is ``NONE`` . If you add a role name and
                  ``SecurityConfiguration`` name (in other words,
                  ``/aws-glue/jobs-yourRoleName-yourSecurityConfigurationName/`` ), then that
                  security configuration is used to encrypt the log group.

                - **NotificationProperty** *(dict) --*

                  Specifies configuration properties of a job run notification.

                  - **NotifyDelayAfter** *(integer) --*

                    After a job run starts, the number of minutes to wait before sending a job
                    run delay notification.

                - **GlueVersion** *(string) --*

                  Glue version determines the versions of Apache Spark and Python that AWS Glue
                  supports. The Python version indicates the version supported for jobs of type
                  Spark.

                  For more information about the available AWS Glue versions and corresponding
                  Spark and Python versions, see `Glue version
                  <https://docs.aws.amazon.com/glue/latest/dg/add-job.html>`__ in the developer
                  guide.

                  Jobs that are created without specifying a Glue version default to Glue 0.9.

          - **CrawlerDetails** *(dict) --*

            Details of the crawler when the node represents a crawler.

            - **Crawls** *(list) --*

              A list of crawls represented by the crawl node.

              - *(dict) --*

                The details of a crawl in the workflow.

                - **State** *(string) --*

                  The state of the crawler.

                - **StartedOn** *(datetime) --*

                  The date and time on which the crawl started.

                - **CompletedOn** *(datetime) --*

                  The date and time on which the crawl completed.

                - **ErrorMessage** *(string) --*

                  The error message associated with the crawl.

                - **LogGroup** *(string) --*

                  The log group associated with the crawl.

                - **LogStream** *(string) --*

                  The log stream associated with the crawl.

      - **Edges** *(list) --*

        A list of all the directed connections between the nodes belonging to the workflow.

        - *(dict) --*

          An edge represents a directed connection between two AWS Glue components which are part
          of the workflow the edge belongs to.

          - **SourceId** *(string) --*

            The unique of the node within the workflow where the edge starts.

          - **DestinationId** *(string) --*

            The unique of the node within the workflow where the edge ends.
    """


_ClientGetWorkflowResponseTypeDef = TypedDict(
    "_ClientGetWorkflowResponseTypeDef",
    {"Workflow": ClientGetWorkflowResponseWorkflowTypeDef},
    total=False,
)


class ClientGetWorkflowResponseTypeDef(_ClientGetWorkflowResponseTypeDef):
    """
    Type definition for `ClientGetWorkflow` `Response`

    - **Workflow** *(dict) --*

      The resource metadata for the workflow.

      - **Name** *(string) --*

        The name of the workflow representing the flow.

      - **Description** *(string) --*

        A description of the workflow.

      - **DefaultRunProperties** *(dict) --*

        A collection of properties to be used as part of each execution of the workflow.

        - *(string) --*

          - *(string) --*

      - **CreatedOn** *(datetime) --*

        The date and time when the workflow was created.

      - **LastModifiedOn** *(datetime) --*

        The date and time when the workflow was last modified.

      - **LastRun** *(dict) --*

        The information about the last execution of the workflow.

        - **Name** *(string) --*

          Name of the workflow which was executed.

        - **WorkflowRunId** *(string) --*

          The ID of this workflow run.

        - **WorkflowRunProperties** *(dict) --*

          The workflow run properties which were set during the run.

          - *(string) --*

            - *(string) --*

        - **StartedOn** *(datetime) --*

          The date and time when the workflow run was started.

        - **CompletedOn** *(datetime) --*

          The date and time when the workflow run completed.

        - **Status** *(string) --*

          The status of the workflow run.

        - **Statistics** *(dict) --*

          The statistics of the run.

          - **TotalActions** *(integer) --*

            Total number of Actions in the workflow run.

          - **TimeoutActions** *(integer) --*

            Total number of Actions which timed out.

          - **FailedActions** *(integer) --*

            Total number of Actions which have failed.

          - **StoppedActions** *(integer) --*

            Total number of Actions which have stopped.

          - **SucceededActions** *(integer) --*

            Total number of Actions which have succeeded.

          - **RunningActions** *(integer) --*

            Total number Actions in running state.

        - **Graph** *(dict) --*

          The graph representing all the AWS Glue components that belong to the workflow as nodes
          and directed connections between them as edges.

          - **Nodes** *(list) --*

            A list of the the AWS Glue components belong to the workflow represented as nodes.

            - *(dict) --*

              A node represents an AWS Glue component like Trigger, Job etc. which is part of a
              workflow.

              - **Type** *(string) --*

                The type of AWS Glue component represented by the node.

              - **Name** *(string) --*

                The name of the AWS Glue component represented by the node.

              - **UniqueId** *(string) --*

                The unique Id assigned to the node within the workflow.

              - **TriggerDetails** *(dict) --*

                Details of the Trigger when the node represents a Trigger.

                - **Trigger** *(dict) --*

                  The information of the trigger represented by the trigger node.

                  - **Name** *(string) --*

                    The name of the trigger.

                  - **WorkflowName** *(string) --*

                    The name of the workflow associated with the trigger.

                  - **Id** *(string) --*

                    Reserved for future use.

                  - **Type** *(string) --*

                    The type of trigger that this is.

                  - **State** *(string) --*

                    The current state of the trigger.

                  - **Description** *(string) --*

                    A description of this trigger.

                  - **Schedule** *(string) --*

                    A ``cron`` expression used to specify the schedule (see `Time-Based Schedules
                    for Jobs and Crawlers
                    <https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html>`__
                    . For example, to run something every day at 12:15 UTC, you would specify:
                    ``cron(15 12 * * ? *)`` .

                  - **Actions** *(list) --*

                    The actions initiated by this trigger.

                    - *(dict) --*

                      Defines an action to be initiated by a trigger.

                      - **JobName** *(string) --*

                        The name of a job to be executed.

                      - **Arguments** *(dict) --*

                        The job arguments used when this trigger fires. For this job run, they
                        replace the default arguments set in the job definition itself.

                        You can specify arguments here that your own job-execution script consumes,
                        as well as arguments that AWS Glue itself consumes.

                        For information about how to specify and consume your own Job arguments,
                        see the `Calling AWS Glue APIs in Python
                        <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
                        topic in the developer guide.

                        For information about the key-value pairs that AWS Glue consumes to set up
                        your job, see the `Special Parameters Used by AWS Glue
                        <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
                        topic in the developer guide.

                        - *(string) --*

                          - *(string) --*

                      - **Timeout** *(integer) --*

                        The ``JobRun`` timeout in minutes. This is the maximum time that a job run
                        can consume resources before it is terminated and enters ``TIMEOUT``
                        status. The default is 2,880 minutes (48 hours). This overrides the timeout
                        value set in the parent job.

                      - **SecurityConfiguration** *(string) --*

                        The name of the ``SecurityConfiguration`` structure to be used with this
                        action.

                      - **NotificationProperty** *(dict) --*

                        Specifies configuration properties of a job run notification.

                        - **NotifyDelayAfter** *(integer) --*

                          After a job run starts, the number of minutes to wait before sending a
                          job run delay notification.

                      - **CrawlerName** *(string) --*

                        The name of the crawler to be used with this action.

                  - **Predicate** *(dict) --*

                    The predicate of this trigger, which defines when it will fire.

                    - **Logical** *(string) --*

                      An optional field if only one condition is listed. If multiple conditions are
                      listed, then this field is required.

                    - **Conditions** *(list) --*

                      A list of the conditions that determine when the trigger will fire.

                      - *(dict) --*

                        Defines a condition under which a trigger fires.

                        - **LogicalOperator** *(string) --*

                          A logical operator.

                        - **JobName** *(string) --*

                          The name of the job whose ``JobRuns`` this condition applies to, and on
                          which this trigger waits.

                        - **State** *(string) --*

                          The condition state. Currently, the values supported are ``SUCCEEDED`` ,
                          ``STOPPED`` , ``TIMEOUT`` , and ``FAILED`` .

                        - **CrawlerName** *(string) --*

                          The name of the crawler to which this condition applies.

                        - **CrawlState** *(string) --*

                          The state of the crawler to which this condition applies.

              - **JobDetails** *(dict) --*

                Details of the Job when the node represents a Job.

                - **JobRuns** *(list) --*

                  The information for the job runs represented by the job node.

                  - *(dict) --*

                    Contains information about a job run.

                    - **Id** *(string) --*

                      The ID of this job run.

                    - **Attempt** *(integer) --*

                      The number of the attempt to run this job.

                    - **PreviousRunId** *(string) --*

                      The ID of the previous run of this job. For example, the ``JobRunId``
                      specified in the ``StartJobRun`` action.

                    - **TriggerName** *(string) --*

                      The name of the trigger that started this job run.

                    - **JobName** *(string) --*

                      The name of the job definition being used in this run.

                    - **StartedOn** *(datetime) --*

                      The date and time at which this job run was started.

                    - **LastModifiedOn** *(datetime) --*

                      The last time that this job run was modified.

                    - **CompletedOn** *(datetime) --*

                      The date and time that this job run completed.

                    - **JobRunState** *(string) --*

                      The current state of the job run.

                    - **Arguments** *(dict) --*

                      The job arguments associated with this run. For this job run, they replace
                      the default arguments set in the job definition itself.

                      You can specify arguments here that your own job-execution script consumes,
                      as well as arguments that AWS Glue itself consumes.

                      For information about how to specify and consume your own job arguments, see
                      the `Calling AWS Glue APIs in Python
                      <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
                      topic in the developer guide.

                      For information about the key-value pairs that AWS Glue consumes to set up
                      your job, see the `Special Parameters Used by AWS Glue
                      <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
                      topic in the developer guide.

                      - *(string) --*

                        - *(string) --*

                    - **ErrorMessage** *(string) --*

                      An error message associated with this job run.

                    - **PredecessorRuns** *(list) --*

                      A list of predecessors to this job run.

                      - *(dict) --*

                        A job run that was used in the predicate of a conditional trigger that
                        triggered this job run.

                        - **JobName** *(string) --*

                          The name of the job definition used by the predecessor job run.

                        - **RunId** *(string) --*

                          The job-run ID of the predecessor job run.

                    - **AllocatedCapacity** *(integer) --*

                      This field is deprecated. Use ``MaxCapacity`` instead.

                      The number of AWS Glue data processing units (DPUs) allocated to this JobRun.
                      From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a relative
                      measure of processing power that consists of 4 vCPUs of compute capacity and
                      16 GB of memory. For more information, see the `AWS Glue pricing page
                      <https://aws.amazon.com/glue/pricing/>`__ .

                    - **ExecutionTime** *(integer) --*

                      The amount of time (in seconds) that the job run consumed resources.

                    - **Timeout** *(integer) --*

                      The ``JobRun`` timeout in minutes. This is the maximum time that a job run
                      can consume resources before it is terminated and enters ``TIMEOUT`` status.
                      The default is 2,880 minutes (48 hours). This overrides the timeout value set
                      in the parent job.

                    - **MaxCapacity** *(float) --*

                      The number of AWS Glue data processing units (DPUs) that can be allocated
                      when this job runs. A DPU is a relative measure of processing power that
                      consists of 4 vCPUs of compute capacity and 16 GB of memory. For more
                      information, see the `AWS Glue pricing page
                      <https://docs.aws.amazon.com/https:/aws.amazon.com/glue/pricing/>`__ .

                      Do not set ``Max Capacity`` if using ``WorkerType`` and ``NumberOfWorkers`` .

                      The value that can be allocated for ``MaxCapacity`` depends on whether you
                      are running a Python shell job or an Apache Spark ETL job:

                      * When you specify a Python shell job (``JobCommand.Name`` ="pythonshell"),
                      you can allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.

                      * When you specify an Apache Spark ETL job (``JobCommand.Name`` ="glueetl"),
                      you can allocate from 2 to 100 DPUs. The default is 10 DPUs. This job type
                      cannot have a fractional DPU allocation.

                    - **WorkerType** *(string) --*

                      The type of predefined worker that is allocated when a job runs. Accepts a
                      value of Standard, G.1X, or G.2X.

                      * For the ``Standard`` worker type, each worker provides 4 vCPU, 16 GB of
                      memory and a 50GB disk, and 2 executors per worker.

                      * For the ``G.1X`` worker type, each worker provides 4 vCPU, 16 GB of memory
                      and a 64GB disk, and 1 executor per worker.

                      * For the ``G.2X`` worker type, each worker provides 8 vCPU, 32 GB of memory
                      and a 128GB disk, and 1 executor per worker.

                    - **NumberOfWorkers** *(integer) --*

                      The number of workers of a defined ``workerType`` that are allocated when a
                      job runs.

                      The maximum number of workers you can define are 299 for ``G.1X`` , and 149
                      for ``G.2X`` .

                    - **SecurityConfiguration** *(string) --*

                      The name of the ``SecurityConfiguration`` structure to be used with this job
                      run.

                    - **LogGroupName** *(string) --*

                      The name of the log group for secure logging that can be server-side
                      encrypted in Amazon CloudWatch using AWS KMS. This name can be
                      ``/aws-glue/jobs/`` , in which case the default encryption is ``NONE`` . If
                      you add a role name and ``SecurityConfiguration`` name (in other words,
                      ``/aws-glue/jobs-yourRoleName-yourSecurityConfigurationName/`` ), then that
                      security configuration is used to encrypt the log group.

                    - **NotificationProperty** *(dict) --*

                      Specifies configuration properties of a job run notification.

                      - **NotifyDelayAfter** *(integer) --*

                        After a job run starts, the number of minutes to wait before sending a job
                        run delay notification.

                    - **GlueVersion** *(string) --*

                      Glue version determines the versions of Apache Spark and Python that AWS Glue
                      supports. The Python version indicates the version supported for jobs of type
                      Spark.

                      For more information about the available AWS Glue versions and corresponding
                      Spark and Python versions, see `Glue version
                      <https://docs.aws.amazon.com/glue/latest/dg/add-job.html>`__ in the developer
                      guide.

                      Jobs that are created without specifying a Glue version default to Glue 0.9.

              - **CrawlerDetails** *(dict) --*

                Details of the crawler when the node represents a crawler.

                - **Crawls** *(list) --*

                  A list of crawls represented by the crawl node.

                  - *(dict) --*

                    The details of a crawl in the workflow.

                    - **State** *(string) --*

                      The state of the crawler.

                    - **StartedOn** *(datetime) --*

                      The date and time on which the crawl started.

                    - **CompletedOn** *(datetime) --*

                      The date and time on which the crawl completed.

                    - **ErrorMessage** *(string) --*

                      The error message associated with the crawl.

                    - **LogGroup** *(string) --*

                      The log group associated with the crawl.

                    - **LogStream** *(string) --*

                      The log stream associated with the crawl.

          - **Edges** *(list) --*

            A list of all the directed connections between the nodes belonging to the workflow.

            - *(dict) --*

              An edge represents a directed connection between two AWS Glue components which are
              part of the workflow the edge belongs to.

              - **SourceId** *(string) --*

                The unique of the node within the workflow where the edge starts.

              - **DestinationId** *(string) --*

                The unique of the node within the workflow where the edge ends.

      - **Graph** *(dict) --*

        The graph representing all the AWS Glue components that belong to the workflow as nodes and
        directed connections between them as edges.

        - **Nodes** *(list) --*

          A list of the the AWS Glue components belong to the workflow represented as nodes.

          - *(dict) --*

            A node represents an AWS Glue component like Trigger, Job etc. which is part of a
            workflow.

            - **Type** *(string) --*

              The type of AWS Glue component represented by the node.

            - **Name** *(string) --*

              The name of the AWS Glue component represented by the node.

            - **UniqueId** *(string) --*

              The unique Id assigned to the node within the workflow.

            - **TriggerDetails** *(dict) --*

              Details of the Trigger when the node represents a Trigger.

              - **Trigger** *(dict) --*

                The information of the trigger represented by the trigger node.

                - **Name** *(string) --*

                  The name of the trigger.

                - **WorkflowName** *(string) --*

                  The name of the workflow associated with the trigger.

                - **Id** *(string) --*

                  Reserved for future use.

                - **Type** *(string) --*

                  The type of trigger that this is.

                - **State** *(string) --*

                  The current state of the trigger.

                - **Description** *(string) --*

                  A description of this trigger.

                - **Schedule** *(string) --*

                  A ``cron`` expression used to specify the schedule (see `Time-Based Schedules for
                  Jobs and Crawlers
                  <https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html>`__
                  . For example, to run something every day at 12:15 UTC, you would specify:
                  ``cron(15 12 * * ? *)`` .

                - **Actions** *(list) --*

                  The actions initiated by this trigger.

                  - *(dict) --*

                    Defines an action to be initiated by a trigger.

                    - **JobName** *(string) --*

                      The name of a job to be executed.

                    - **Arguments** *(dict) --*

                      The job arguments used when this trigger fires. For this job run, they
                      replace the default arguments set in the job definition itself.

                      You can specify arguments here that your own job-execution script consumes,
                      as well as arguments that AWS Glue itself consumes.

                      For information about how to specify and consume your own Job arguments, see
                      the `Calling AWS Glue APIs in Python
                      <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
                      topic in the developer guide.

                      For information about the key-value pairs that AWS Glue consumes to set up
                      your job, see the `Special Parameters Used by AWS Glue
                      <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
                      topic in the developer guide.

                      - *(string) --*

                        - *(string) --*

                    - **Timeout** *(integer) --*

                      The ``JobRun`` timeout in minutes. This is the maximum time that a job run
                      can consume resources before it is terminated and enters ``TIMEOUT`` status.
                      The default is 2,880 minutes (48 hours). This overrides the timeout value set
                      in the parent job.

                    - **SecurityConfiguration** *(string) --*

                      The name of the ``SecurityConfiguration`` structure to be used with this
                      action.

                    - **NotificationProperty** *(dict) --*

                      Specifies configuration properties of a job run notification.

                      - **NotifyDelayAfter** *(integer) --*

                        After a job run starts, the number of minutes to wait before sending a job
                        run delay notification.

                    - **CrawlerName** *(string) --*

                      The name of the crawler to be used with this action.

                - **Predicate** *(dict) --*

                  The predicate of this trigger, which defines when it will fire.

                  - **Logical** *(string) --*

                    An optional field if only one condition is listed. If multiple conditions are
                    listed, then this field is required.

                  - **Conditions** *(list) --*

                    A list of the conditions that determine when the trigger will fire.

                    - *(dict) --*

                      Defines a condition under which a trigger fires.

                      - **LogicalOperator** *(string) --*

                        A logical operator.

                      - **JobName** *(string) --*

                        The name of the job whose ``JobRuns`` this condition applies to, and on
                        which this trigger waits.

                      - **State** *(string) --*

                        The condition state. Currently, the values supported are ``SUCCEEDED`` ,
                        ``STOPPED`` , ``TIMEOUT`` , and ``FAILED`` .

                      - **CrawlerName** *(string) --*

                        The name of the crawler to which this condition applies.

                      - **CrawlState** *(string) --*

                        The state of the crawler to which this condition applies.

            - **JobDetails** *(dict) --*

              Details of the Job when the node represents a Job.

              - **JobRuns** *(list) --*

                The information for the job runs represented by the job node.

                - *(dict) --*

                  Contains information about a job run.

                  - **Id** *(string) --*

                    The ID of this job run.

                  - **Attempt** *(integer) --*

                    The number of the attempt to run this job.

                  - **PreviousRunId** *(string) --*

                    The ID of the previous run of this job. For example, the ``JobRunId`` specified
                    in the ``StartJobRun`` action.

                  - **TriggerName** *(string) --*

                    The name of the trigger that started this job run.

                  - **JobName** *(string) --*

                    The name of the job definition being used in this run.

                  - **StartedOn** *(datetime) --*

                    The date and time at which this job run was started.

                  - **LastModifiedOn** *(datetime) --*

                    The last time that this job run was modified.

                  - **CompletedOn** *(datetime) --*

                    The date and time that this job run completed.

                  - **JobRunState** *(string) --*

                    The current state of the job run.

                  - **Arguments** *(dict) --*

                    The job arguments associated with this run. For this job run, they replace the
                    default arguments set in the job definition itself.

                    You can specify arguments here that your own job-execution script consumes, as
                    well as arguments that AWS Glue itself consumes.

                    For information about how to specify and consume your own job arguments, see
                    the `Calling AWS Glue APIs in Python
                    <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
                    topic in the developer guide.

                    For information about the key-value pairs that AWS Glue consumes to set up your
                    job, see the `Special Parameters Used by AWS Glue
                    <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
                    topic in the developer guide.

                    - *(string) --*

                      - *(string) --*

                  - **ErrorMessage** *(string) --*

                    An error message associated with this job run.

                  - **PredecessorRuns** *(list) --*

                    A list of predecessors to this job run.

                    - *(dict) --*

                      A job run that was used in the predicate of a conditional trigger that
                      triggered this job run.

                      - **JobName** *(string) --*

                        The name of the job definition used by the predecessor job run.

                      - **RunId** *(string) --*

                        The job-run ID of the predecessor job run.

                  - **AllocatedCapacity** *(integer) --*

                    This field is deprecated. Use ``MaxCapacity`` instead.

                    The number of AWS Glue data processing units (DPUs) allocated to this JobRun.
                    From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a relative
                    measure of processing power that consists of 4 vCPUs of compute capacity and 16
                    GB of memory. For more information, see the `AWS Glue pricing page
                    <https://aws.amazon.com/glue/pricing/>`__ .

                  - **ExecutionTime** *(integer) --*

                    The amount of time (in seconds) that the job run consumed resources.

                  - **Timeout** *(integer) --*

                    The ``JobRun`` timeout in minutes. This is the maximum time that a job run can
                    consume resources before it is terminated and enters ``TIMEOUT`` status. The
                    default is 2,880 minutes (48 hours). This overrides the timeout value set in
                    the parent job.

                  - **MaxCapacity** *(float) --*

                    The number of AWS Glue data processing units (DPUs) that can be allocated when
                    this job runs. A DPU is a relative measure of processing power that consists of
                    4 vCPUs of compute capacity and 16 GB of memory. For more information, see the
                    `AWS Glue pricing page
                    <https://docs.aws.amazon.com/https:/aws.amazon.com/glue/pricing/>`__ .

                    Do not set ``Max Capacity`` if using ``WorkerType`` and ``NumberOfWorkers`` .

                    The value that can be allocated for ``MaxCapacity`` depends on whether you are
                    running a Python shell job or an Apache Spark ETL job:

                    * When you specify a Python shell job (``JobCommand.Name`` ="pythonshell"), you
                    can allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.

                    * When you specify an Apache Spark ETL job (``JobCommand.Name`` ="glueetl"),
                    you can allocate from 2 to 100 DPUs. The default is 10 DPUs. This job type
                    cannot have a fractional DPU allocation.

                  - **WorkerType** *(string) --*

                    The type of predefined worker that is allocated when a job runs. Accepts a
                    value of Standard, G.1X, or G.2X.

                    * For the ``Standard`` worker type, each worker provides 4 vCPU, 16 GB of
                    memory and a 50GB disk, and 2 executors per worker.

                    * For the ``G.1X`` worker type, each worker provides 4 vCPU, 16 GB of memory
                    and a 64GB disk, and 1 executor per worker.

                    * For the ``G.2X`` worker type, each worker provides 8 vCPU, 32 GB of memory
                    and a 128GB disk, and 1 executor per worker.

                  - **NumberOfWorkers** *(integer) --*

                    The number of workers of a defined ``workerType`` that are allocated when a job
                    runs.

                    The maximum number of workers you can define are 299 for ``G.1X`` , and 149 for
                    ``G.2X`` .

                  - **SecurityConfiguration** *(string) --*

                    The name of the ``SecurityConfiguration`` structure to be used with this job
                    run.

                  - **LogGroupName** *(string) --*

                    The name of the log group for secure logging that can be server-side encrypted
                    in Amazon CloudWatch using AWS KMS. This name can be ``/aws-glue/jobs/`` , in
                    which case the default encryption is ``NONE`` . If you add a role name and
                    ``SecurityConfiguration`` name (in other words,
                    ``/aws-glue/jobs-yourRoleName-yourSecurityConfigurationName/`` ), then that
                    security configuration is used to encrypt the log group.

                  - **NotificationProperty** *(dict) --*

                    Specifies configuration properties of a job run notification.

                    - **NotifyDelayAfter** *(integer) --*

                      After a job run starts, the number of minutes to wait before sending a job
                      run delay notification.

                  - **GlueVersion** *(string) --*

                    Glue version determines the versions of Apache Spark and Python that AWS Glue
                    supports. The Python version indicates the version supported for jobs of type
                    Spark.

                    For more information about the available AWS Glue versions and corresponding
                    Spark and Python versions, see `Glue version
                    <https://docs.aws.amazon.com/glue/latest/dg/add-job.html>`__ in the developer
                    guide.

                    Jobs that are created without specifying a Glue version default to Glue 0.9.

            - **CrawlerDetails** *(dict) --*

              Details of the crawler when the node represents a crawler.

              - **Crawls** *(list) --*

                A list of crawls represented by the crawl node.

                - *(dict) --*

                  The details of a crawl in the workflow.

                  - **State** *(string) --*

                    The state of the crawler.

                  - **StartedOn** *(datetime) --*

                    The date and time on which the crawl started.

                  - **CompletedOn** *(datetime) --*

                    The date and time on which the crawl completed.

                  - **ErrorMessage** *(string) --*

                    The error message associated with the crawl.

                  - **LogGroup** *(string) --*

                    The log group associated with the crawl.

                  - **LogStream** *(string) --*

                    The log stream associated with the crawl.

        - **Edges** *(list) --*

          A list of all the directed connections between the nodes belonging to the workflow.

          - *(dict) --*

            An edge represents a directed connection between two AWS Glue components which are part
            of the workflow the edge belongs to.

            - **SourceId** *(string) --*

              The unique of the node within the workflow where the edge starts.

            - **DestinationId** *(string) --*

              The unique of the node within the workflow where the edge ends.
    """


_ClientGetWorkflowRunPropertiesResponseTypeDef = TypedDict(
    "_ClientGetWorkflowRunPropertiesResponseTypeDef",
    {"RunProperties": Dict[str, str]},
    total=False,
)


class ClientGetWorkflowRunPropertiesResponseTypeDef(
    _ClientGetWorkflowRunPropertiesResponseTypeDef
):
    """
    Type definition for `ClientGetWorkflowRunProperties` `Response`

    - **RunProperties** *(dict) --*

      The workflow run properties which were set during the specified run.

      - *(string) --*

        - *(string) --*
    """


_ClientGetWorkflowRunResponseRunGraphEdgesTypeDef = TypedDict(
    "_ClientGetWorkflowRunResponseRunGraphEdgesTypeDef",
    {"SourceId": str, "DestinationId": str},
    total=False,
)


class ClientGetWorkflowRunResponseRunGraphEdgesTypeDef(
    _ClientGetWorkflowRunResponseRunGraphEdgesTypeDef
):
    """
    Type definition for `ClientGetWorkflowRunResponseRunGraph` `Edges`

    An edge represents a directed connection between two AWS Glue components which are part
    of the workflow the edge belongs to.

    - **SourceId** *(string) --*

      The unique of the node within the workflow where the edge starts.

    - **DestinationId** *(string) --*

      The unique of the node within the workflow where the edge ends.
    """


_ClientGetWorkflowRunResponseRunGraphNodesCrawlerDetailsCrawlsTypeDef = TypedDict(
    "_ClientGetWorkflowRunResponseRunGraphNodesCrawlerDetailsCrawlsTypeDef",
    {
        "State": str,
        "StartedOn": datetime,
        "CompletedOn": datetime,
        "ErrorMessage": str,
        "LogGroup": str,
        "LogStream": str,
    },
    total=False,
)


class ClientGetWorkflowRunResponseRunGraphNodesCrawlerDetailsCrawlsTypeDef(
    _ClientGetWorkflowRunResponseRunGraphNodesCrawlerDetailsCrawlsTypeDef
):
    """
    Type definition for `ClientGetWorkflowRunResponseRunGraphNodesCrawlerDetails` `Crawls`

    The details of a crawl in the workflow.

    - **State** *(string) --*

      The state of the crawler.

    - **StartedOn** *(datetime) --*

      The date and time on which the crawl started.

    - **CompletedOn** *(datetime) --*

      The date and time on which the crawl completed.

    - **ErrorMessage** *(string) --*

      The error message associated with the crawl.

    - **LogGroup** *(string) --*

      The log group associated with the crawl.

    - **LogStream** *(string) --*

      The log stream associated with the crawl.
    """


_ClientGetWorkflowRunResponseRunGraphNodesCrawlerDetailsTypeDef = TypedDict(
    "_ClientGetWorkflowRunResponseRunGraphNodesCrawlerDetailsTypeDef",
    {
        "Crawls": List[
            ClientGetWorkflowRunResponseRunGraphNodesCrawlerDetailsCrawlsTypeDef
        ]
    },
    total=False,
)


class ClientGetWorkflowRunResponseRunGraphNodesCrawlerDetailsTypeDef(
    _ClientGetWorkflowRunResponseRunGraphNodesCrawlerDetailsTypeDef
):
    """
    Type definition for `ClientGetWorkflowRunResponseRunGraphNodes` `CrawlerDetails`

    Details of the crawler when the node represents a crawler.

    - **Crawls** *(list) --*

      A list of crawls represented by the crawl node.

      - *(dict) --*

        The details of a crawl in the workflow.

        - **State** *(string) --*

          The state of the crawler.

        - **StartedOn** *(datetime) --*

          The date and time on which the crawl started.

        - **CompletedOn** *(datetime) --*

          The date and time on which the crawl completed.

        - **ErrorMessage** *(string) --*

          The error message associated with the crawl.

        - **LogGroup** *(string) --*

          The log group associated with the crawl.

        - **LogStream** *(string) --*

          The log stream associated with the crawl.
    """


_ClientGetWorkflowRunResponseRunGraphNodesJobDetailsJobRunsNotificationPropertyTypeDef = TypedDict(
    "_ClientGetWorkflowRunResponseRunGraphNodesJobDetailsJobRunsNotificationPropertyTypeDef",
    {"NotifyDelayAfter": int},
    total=False,
)


class ClientGetWorkflowRunResponseRunGraphNodesJobDetailsJobRunsNotificationPropertyTypeDef(
    _ClientGetWorkflowRunResponseRunGraphNodesJobDetailsJobRunsNotificationPropertyTypeDef
):
    """
    Type definition for `ClientGetWorkflowRunResponseRunGraphNodesJobDetailsJobRuns` `NotificationProperty`

    Specifies configuration properties of a job run notification.

    - **NotifyDelayAfter** *(integer) --*

      After a job run starts, the number of minutes to wait before sending a job
      run delay notification.
    """


_ClientGetWorkflowRunResponseRunGraphNodesJobDetailsJobRunsPredecessorRunsTypeDef = TypedDict(
    "_ClientGetWorkflowRunResponseRunGraphNodesJobDetailsJobRunsPredecessorRunsTypeDef",
    {"JobName": str, "RunId": str},
    total=False,
)


class ClientGetWorkflowRunResponseRunGraphNodesJobDetailsJobRunsPredecessorRunsTypeDef(
    _ClientGetWorkflowRunResponseRunGraphNodesJobDetailsJobRunsPredecessorRunsTypeDef
):
    """
    Type definition for `ClientGetWorkflowRunResponseRunGraphNodesJobDetailsJobRuns` `PredecessorRuns`

    A job run that was used in the predicate of a conditional trigger that
    triggered this job run.

    - **JobName** *(string) --*

      The name of the job definition used by the predecessor job run.

    - **RunId** *(string) --*

      The job-run ID of the predecessor job run.
    """


_ClientGetWorkflowRunResponseRunGraphNodesJobDetailsJobRunsTypeDef = TypedDict(
    "_ClientGetWorkflowRunResponseRunGraphNodesJobDetailsJobRunsTypeDef",
    {
        "Id": str,
        "Attempt": int,
        "PreviousRunId": str,
        "TriggerName": str,
        "JobName": str,
        "StartedOn": datetime,
        "LastModifiedOn": datetime,
        "CompletedOn": datetime,
        "JobRunState": str,
        "Arguments": Dict[str, str],
        "ErrorMessage": str,
        "PredecessorRuns": List[
            ClientGetWorkflowRunResponseRunGraphNodesJobDetailsJobRunsPredecessorRunsTypeDef
        ],
        "AllocatedCapacity": int,
        "ExecutionTime": int,
        "Timeout": int,
        "MaxCapacity": float,
        "WorkerType": str,
        "NumberOfWorkers": int,
        "SecurityConfiguration": str,
        "LogGroupName": str,
        "NotificationProperty": ClientGetWorkflowRunResponseRunGraphNodesJobDetailsJobRunsNotificationPropertyTypeDef,
        "GlueVersion": str,
    },
    total=False,
)


class ClientGetWorkflowRunResponseRunGraphNodesJobDetailsJobRunsTypeDef(
    _ClientGetWorkflowRunResponseRunGraphNodesJobDetailsJobRunsTypeDef
):
    """
    Type definition for `ClientGetWorkflowRunResponseRunGraphNodesJobDetails` `JobRuns`

    Contains information about a job run.

    - **Id** *(string) --*

      The ID of this job run.

    - **Attempt** *(integer) --*

      The number of the attempt to run this job.

    - **PreviousRunId** *(string) --*

      The ID of the previous run of this job. For example, the ``JobRunId`` specified
      in the ``StartJobRun`` action.

    - **TriggerName** *(string) --*

      The name of the trigger that started this job run.

    - **JobName** *(string) --*

      The name of the job definition being used in this run.

    - **StartedOn** *(datetime) --*

      The date and time at which this job run was started.

    - **LastModifiedOn** *(datetime) --*

      The last time that this job run was modified.

    - **CompletedOn** *(datetime) --*

      The date and time that this job run completed.

    - **JobRunState** *(string) --*

      The current state of the job run.

    - **Arguments** *(dict) --*

      The job arguments associated with this run. For this job run, they replace the
      default arguments set in the job definition itself.

      You can specify arguments here that your own job-execution script consumes, as
      well as arguments that AWS Glue itself consumes.

      For information about how to specify and consume your own job arguments, see
      the `Calling AWS Glue APIs in Python
      <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
      topic in the developer guide.

      For information about the key-value pairs that AWS Glue consumes to set up your
      job, see the `Special Parameters Used by AWS Glue
      <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
      topic in the developer guide.

      - *(string) --*

        - *(string) --*

    - **ErrorMessage** *(string) --*

      An error message associated with this job run.

    - **PredecessorRuns** *(list) --*

      A list of predecessors to this job run.

      - *(dict) --*

        A job run that was used in the predicate of a conditional trigger that
        triggered this job run.

        - **JobName** *(string) --*

          The name of the job definition used by the predecessor job run.

        - **RunId** *(string) --*

          The job-run ID of the predecessor job run.

    - **AllocatedCapacity** *(integer) --*

      This field is deprecated. Use ``MaxCapacity`` instead.

      The number of AWS Glue data processing units (DPUs) allocated to this JobRun.
      From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a relative
      measure of processing power that consists of 4 vCPUs of compute capacity and 16
      GB of memory. For more information, see the `AWS Glue pricing page
      <https://aws.amazon.com/glue/pricing/>`__ .

    - **ExecutionTime** *(integer) --*

      The amount of time (in seconds) that the job run consumed resources.

    - **Timeout** *(integer) --*

      The ``JobRun`` timeout in minutes. This is the maximum time that a job run can
      consume resources before it is terminated and enters ``TIMEOUT`` status. The
      default is 2,880 minutes (48 hours). This overrides the timeout value set in
      the parent job.

    - **MaxCapacity** *(float) --*

      The number of AWS Glue data processing units (DPUs) that can be allocated when
      this job runs. A DPU is a relative measure of processing power that consists of
      4 vCPUs of compute capacity and 16 GB of memory. For more information, see the
      `AWS Glue pricing page
      <https://docs.aws.amazon.com/https:/aws.amazon.com/glue/pricing/>`__ .

      Do not set ``Max Capacity`` if using ``WorkerType`` and ``NumberOfWorkers`` .

      The value that can be allocated for ``MaxCapacity`` depends on whether you are
      running a Python shell job or an Apache Spark ETL job:

      * When you specify a Python shell job (``JobCommand.Name`` ="pythonshell"), you
      can allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.

      * When you specify an Apache Spark ETL job (``JobCommand.Name`` ="glueetl"),
      you can allocate from 2 to 100 DPUs. The default is 10 DPUs. This job type
      cannot have a fractional DPU allocation.

    - **WorkerType** *(string) --*

      The type of predefined worker that is allocated when a job runs. Accepts a
      value of Standard, G.1X, or G.2X.

      * For the ``Standard`` worker type, each worker provides 4 vCPU, 16 GB of
      memory and a 50GB disk, and 2 executors per worker.

      * For the ``G.1X`` worker type, each worker provides 4 vCPU, 16 GB of memory
      and a 64GB disk, and 1 executor per worker.

      * For the ``G.2X`` worker type, each worker provides 8 vCPU, 32 GB of memory
      and a 128GB disk, and 1 executor per worker.

    - **NumberOfWorkers** *(integer) --*

      The number of workers of a defined ``workerType`` that are allocated when a job
      runs.

      The maximum number of workers you can define are 299 for ``G.1X`` , and 149 for
      ``G.2X`` .

    - **SecurityConfiguration** *(string) --*

      The name of the ``SecurityConfiguration`` structure to be used with this job
      run.

    - **LogGroupName** *(string) --*

      The name of the log group for secure logging that can be server-side encrypted
      in Amazon CloudWatch using AWS KMS. This name can be ``/aws-glue/jobs/`` , in
      which case the default encryption is ``NONE`` . If you add a role name and
      ``SecurityConfiguration`` name (in other words,
      ``/aws-glue/jobs-yourRoleName-yourSecurityConfigurationName/`` ), then that
      security configuration is used to encrypt the log group.

    - **NotificationProperty** *(dict) --*

      Specifies configuration properties of a job run notification.

      - **NotifyDelayAfter** *(integer) --*

        After a job run starts, the number of minutes to wait before sending a job
        run delay notification.

    - **GlueVersion** *(string) --*

      Glue version determines the versions of Apache Spark and Python that AWS Glue
      supports. The Python version indicates the version supported for jobs of type
      Spark.

      For more information about the available AWS Glue versions and corresponding
      Spark and Python versions, see `Glue version
      <https://docs.aws.amazon.com/glue/latest/dg/add-job.html>`__ in the developer
      guide.

      Jobs that are created without specifying a Glue version default to Glue 0.9.
    """


_ClientGetWorkflowRunResponseRunGraphNodesJobDetailsTypeDef = TypedDict(
    "_ClientGetWorkflowRunResponseRunGraphNodesJobDetailsTypeDef",
    {
        "JobRuns": List[
            ClientGetWorkflowRunResponseRunGraphNodesJobDetailsJobRunsTypeDef
        ]
    },
    total=False,
)


class ClientGetWorkflowRunResponseRunGraphNodesJobDetailsTypeDef(
    _ClientGetWorkflowRunResponseRunGraphNodesJobDetailsTypeDef
):
    """
    Type definition for `ClientGetWorkflowRunResponseRunGraphNodes` `JobDetails`

    Details of the Job when the node represents a Job.

    - **JobRuns** *(list) --*

      The information for the job runs represented by the job node.

      - *(dict) --*

        Contains information about a job run.

        - **Id** *(string) --*

          The ID of this job run.

        - **Attempt** *(integer) --*

          The number of the attempt to run this job.

        - **PreviousRunId** *(string) --*

          The ID of the previous run of this job. For example, the ``JobRunId`` specified
          in the ``StartJobRun`` action.

        - **TriggerName** *(string) --*

          The name of the trigger that started this job run.

        - **JobName** *(string) --*

          The name of the job definition being used in this run.

        - **StartedOn** *(datetime) --*

          The date and time at which this job run was started.

        - **LastModifiedOn** *(datetime) --*

          The last time that this job run was modified.

        - **CompletedOn** *(datetime) --*

          The date and time that this job run completed.

        - **JobRunState** *(string) --*

          The current state of the job run.

        - **Arguments** *(dict) --*

          The job arguments associated with this run. For this job run, they replace the
          default arguments set in the job definition itself.

          You can specify arguments here that your own job-execution script consumes, as
          well as arguments that AWS Glue itself consumes.

          For information about how to specify and consume your own job arguments, see
          the `Calling AWS Glue APIs in Python
          <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
          topic in the developer guide.

          For information about the key-value pairs that AWS Glue consumes to set up your
          job, see the `Special Parameters Used by AWS Glue
          <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
          topic in the developer guide.

          - *(string) --*

            - *(string) --*

        - **ErrorMessage** *(string) --*

          An error message associated with this job run.

        - **PredecessorRuns** *(list) --*

          A list of predecessors to this job run.

          - *(dict) --*

            A job run that was used in the predicate of a conditional trigger that
            triggered this job run.

            - **JobName** *(string) --*

              The name of the job definition used by the predecessor job run.

            - **RunId** *(string) --*

              The job-run ID of the predecessor job run.

        - **AllocatedCapacity** *(integer) --*

          This field is deprecated. Use ``MaxCapacity`` instead.

          The number of AWS Glue data processing units (DPUs) allocated to this JobRun.
          From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a relative
          measure of processing power that consists of 4 vCPUs of compute capacity and 16
          GB of memory. For more information, see the `AWS Glue pricing page
          <https://aws.amazon.com/glue/pricing/>`__ .

        - **ExecutionTime** *(integer) --*

          The amount of time (in seconds) that the job run consumed resources.

        - **Timeout** *(integer) --*

          The ``JobRun`` timeout in minutes. This is the maximum time that a job run can
          consume resources before it is terminated and enters ``TIMEOUT`` status. The
          default is 2,880 minutes (48 hours). This overrides the timeout value set in
          the parent job.

        - **MaxCapacity** *(float) --*

          The number of AWS Glue data processing units (DPUs) that can be allocated when
          this job runs. A DPU is a relative measure of processing power that consists of
          4 vCPUs of compute capacity and 16 GB of memory. For more information, see the
          `AWS Glue pricing page
          <https://docs.aws.amazon.com/https:/aws.amazon.com/glue/pricing/>`__ .

          Do not set ``Max Capacity`` if using ``WorkerType`` and ``NumberOfWorkers`` .

          The value that can be allocated for ``MaxCapacity`` depends on whether you are
          running a Python shell job or an Apache Spark ETL job:

          * When you specify a Python shell job (``JobCommand.Name`` ="pythonshell"), you
          can allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.

          * When you specify an Apache Spark ETL job (``JobCommand.Name`` ="glueetl"),
          you can allocate from 2 to 100 DPUs. The default is 10 DPUs. This job type
          cannot have a fractional DPU allocation.

        - **WorkerType** *(string) --*

          The type of predefined worker that is allocated when a job runs. Accepts a
          value of Standard, G.1X, or G.2X.

          * For the ``Standard`` worker type, each worker provides 4 vCPU, 16 GB of
          memory and a 50GB disk, and 2 executors per worker.

          * For the ``G.1X`` worker type, each worker provides 4 vCPU, 16 GB of memory
          and a 64GB disk, and 1 executor per worker.

          * For the ``G.2X`` worker type, each worker provides 8 vCPU, 32 GB of memory
          and a 128GB disk, and 1 executor per worker.

        - **NumberOfWorkers** *(integer) --*

          The number of workers of a defined ``workerType`` that are allocated when a job
          runs.

          The maximum number of workers you can define are 299 for ``G.1X`` , and 149 for
          ``G.2X`` .

        - **SecurityConfiguration** *(string) --*

          The name of the ``SecurityConfiguration`` structure to be used with this job
          run.

        - **LogGroupName** *(string) --*

          The name of the log group for secure logging that can be server-side encrypted
          in Amazon CloudWatch using AWS KMS. This name can be ``/aws-glue/jobs/`` , in
          which case the default encryption is ``NONE`` . If you add a role name and
          ``SecurityConfiguration`` name (in other words,
          ``/aws-glue/jobs-yourRoleName-yourSecurityConfigurationName/`` ), then that
          security configuration is used to encrypt the log group.

        - **NotificationProperty** *(dict) --*

          Specifies configuration properties of a job run notification.

          - **NotifyDelayAfter** *(integer) --*

            After a job run starts, the number of minutes to wait before sending a job
            run delay notification.

        - **GlueVersion** *(string) --*

          Glue version determines the versions of Apache Spark and Python that AWS Glue
          supports. The Python version indicates the version supported for jobs of type
          Spark.

          For more information about the available AWS Glue versions and corresponding
          Spark and Python versions, see `Glue version
          <https://docs.aws.amazon.com/glue/latest/dg/add-job.html>`__ in the developer
          guide.

          Jobs that are created without specifying a Glue version default to Glue 0.9.
    """


_ClientGetWorkflowRunResponseRunGraphNodesTriggerDetailsTriggerActionsNotificationPropertyTypeDef = TypedDict(
    "_ClientGetWorkflowRunResponseRunGraphNodesTriggerDetailsTriggerActionsNotificationPropertyTypeDef",
    {"NotifyDelayAfter": int},
    total=False,
)


class ClientGetWorkflowRunResponseRunGraphNodesTriggerDetailsTriggerActionsNotificationPropertyTypeDef(
    _ClientGetWorkflowRunResponseRunGraphNodesTriggerDetailsTriggerActionsNotificationPropertyTypeDef
):
    """
    Type definition for `ClientGetWorkflowRunResponseRunGraphNodesTriggerDetailsTriggerActions` `NotificationProperty`

    Specifies configuration properties of a job run notification.

    - **NotifyDelayAfter** *(integer) --*

      After a job run starts, the number of minutes to wait before sending a job
      run delay notification.
    """


_ClientGetWorkflowRunResponseRunGraphNodesTriggerDetailsTriggerActionsTypeDef = TypedDict(
    "_ClientGetWorkflowRunResponseRunGraphNodesTriggerDetailsTriggerActionsTypeDef",
    {
        "JobName": str,
        "Arguments": Dict[str, str],
        "Timeout": int,
        "SecurityConfiguration": str,
        "NotificationProperty": ClientGetWorkflowRunResponseRunGraphNodesTriggerDetailsTriggerActionsNotificationPropertyTypeDef,
        "CrawlerName": str,
    },
    total=False,
)


class ClientGetWorkflowRunResponseRunGraphNodesTriggerDetailsTriggerActionsTypeDef(
    _ClientGetWorkflowRunResponseRunGraphNodesTriggerDetailsTriggerActionsTypeDef
):
    """
    Type definition for `ClientGetWorkflowRunResponseRunGraphNodesTriggerDetailsTrigger` `Actions`

    Defines an action to be initiated by a trigger.

    - **JobName** *(string) --*

      The name of a job to be executed.

    - **Arguments** *(dict) --*

      The job arguments used when this trigger fires. For this job run, they
      replace the default arguments set in the job definition itself.

      You can specify arguments here that your own job-execution script consumes,
      as well as arguments that AWS Glue itself consumes.

      For information about how to specify and consume your own Job arguments, see
      the `Calling AWS Glue APIs in Python
      <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
      topic in the developer guide.

      For information about the key-value pairs that AWS Glue consumes to set up
      your job, see the `Special Parameters Used by AWS Glue
      <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
      topic in the developer guide.

      - *(string) --*

        - *(string) --*

    - **Timeout** *(integer) --*

      The ``JobRun`` timeout in minutes. This is the maximum time that a job run
      can consume resources before it is terminated and enters ``TIMEOUT`` status.
      The default is 2,880 minutes (48 hours). This overrides the timeout value set
      in the parent job.

    - **SecurityConfiguration** *(string) --*

      The name of the ``SecurityConfiguration`` structure to be used with this
      action.

    - **NotificationProperty** *(dict) --*

      Specifies configuration properties of a job run notification.

      - **NotifyDelayAfter** *(integer) --*

        After a job run starts, the number of minutes to wait before sending a job
        run delay notification.

    - **CrawlerName** *(string) --*

      The name of the crawler to be used with this action.
    """


_ClientGetWorkflowRunResponseRunGraphNodesTriggerDetailsTriggerPredicateConditionsTypeDef = TypedDict(
    "_ClientGetWorkflowRunResponseRunGraphNodesTriggerDetailsTriggerPredicateConditionsTypeDef",
    {
        "LogicalOperator": str,
        "JobName": str,
        "State": str,
        "CrawlerName": str,
        "CrawlState": str,
    },
    total=False,
)


class ClientGetWorkflowRunResponseRunGraphNodesTriggerDetailsTriggerPredicateConditionsTypeDef(
    _ClientGetWorkflowRunResponseRunGraphNodesTriggerDetailsTriggerPredicateConditionsTypeDef
):
    """
    Type definition for `ClientGetWorkflowRunResponseRunGraphNodesTriggerDetailsTriggerPredicate` `Conditions`

    Defines a condition under which a trigger fires.

    - **LogicalOperator** *(string) --*

      A logical operator.

    - **JobName** *(string) --*

      The name of the job whose ``JobRuns`` this condition applies to, and on
      which this trigger waits.

    - **State** *(string) --*

      The condition state. Currently, the values supported are ``SUCCEEDED`` ,
      ``STOPPED`` , ``TIMEOUT`` , and ``FAILED`` .

    - **CrawlerName** *(string) --*

      The name of the crawler to which this condition applies.

    - **CrawlState** *(string) --*

      The state of the crawler to which this condition applies.
    """


_ClientGetWorkflowRunResponseRunGraphNodesTriggerDetailsTriggerPredicateTypeDef = TypedDict(
    "_ClientGetWorkflowRunResponseRunGraphNodesTriggerDetailsTriggerPredicateTypeDef",
    {
        "Logical": str,
        "Conditions": List[
            ClientGetWorkflowRunResponseRunGraphNodesTriggerDetailsTriggerPredicateConditionsTypeDef
        ],
    },
    total=False,
)


class ClientGetWorkflowRunResponseRunGraphNodesTriggerDetailsTriggerPredicateTypeDef(
    _ClientGetWorkflowRunResponseRunGraphNodesTriggerDetailsTriggerPredicateTypeDef
):
    """
    Type definition for `ClientGetWorkflowRunResponseRunGraphNodesTriggerDetailsTrigger` `Predicate`

    The predicate of this trigger, which defines when it will fire.

    - **Logical** *(string) --*

      An optional field if only one condition is listed. If multiple conditions are
      listed, then this field is required.

    - **Conditions** *(list) --*

      A list of the conditions that determine when the trigger will fire.

      - *(dict) --*

        Defines a condition under which a trigger fires.

        - **LogicalOperator** *(string) --*

          A logical operator.

        - **JobName** *(string) --*

          The name of the job whose ``JobRuns`` this condition applies to, and on
          which this trigger waits.

        - **State** *(string) --*

          The condition state. Currently, the values supported are ``SUCCEEDED`` ,
          ``STOPPED`` , ``TIMEOUT`` , and ``FAILED`` .

        - **CrawlerName** *(string) --*

          The name of the crawler to which this condition applies.

        - **CrawlState** *(string) --*

          The state of the crawler to which this condition applies.
    """


_ClientGetWorkflowRunResponseRunGraphNodesTriggerDetailsTriggerTypeDef = TypedDict(
    "_ClientGetWorkflowRunResponseRunGraphNodesTriggerDetailsTriggerTypeDef",
    {
        "Name": str,
        "WorkflowName": str,
        "Id": str,
        "Type": str,
        "State": str,
        "Description": str,
        "Schedule": str,
        "Actions": List[
            ClientGetWorkflowRunResponseRunGraphNodesTriggerDetailsTriggerActionsTypeDef
        ],
        "Predicate": ClientGetWorkflowRunResponseRunGraphNodesTriggerDetailsTriggerPredicateTypeDef,
    },
    total=False,
)


class ClientGetWorkflowRunResponseRunGraphNodesTriggerDetailsTriggerTypeDef(
    _ClientGetWorkflowRunResponseRunGraphNodesTriggerDetailsTriggerTypeDef
):
    """
    Type definition for `ClientGetWorkflowRunResponseRunGraphNodesTriggerDetails` `Trigger`

    The information of the trigger represented by the trigger node.

    - **Name** *(string) --*

      The name of the trigger.

    - **WorkflowName** *(string) --*

      The name of the workflow associated with the trigger.

    - **Id** *(string) --*

      Reserved for future use.

    - **Type** *(string) --*

      The type of trigger that this is.

    - **State** *(string) --*

      The current state of the trigger.

    - **Description** *(string) --*

      A description of this trigger.

    - **Schedule** *(string) --*

      A ``cron`` expression used to specify the schedule (see `Time-Based Schedules for
      Jobs and Crawlers
      <https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html>`__
      . For example, to run something every day at 12:15 UTC, you would specify:
      ``cron(15 12 * * ? *)`` .

    - **Actions** *(list) --*

      The actions initiated by this trigger.

      - *(dict) --*

        Defines an action to be initiated by a trigger.

        - **JobName** *(string) --*

          The name of a job to be executed.

        - **Arguments** *(dict) --*

          The job arguments used when this trigger fires. For this job run, they
          replace the default arguments set in the job definition itself.

          You can specify arguments here that your own job-execution script consumes,
          as well as arguments that AWS Glue itself consumes.

          For information about how to specify and consume your own Job arguments, see
          the `Calling AWS Glue APIs in Python
          <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
          topic in the developer guide.

          For information about the key-value pairs that AWS Glue consumes to set up
          your job, see the `Special Parameters Used by AWS Glue
          <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
          topic in the developer guide.

          - *(string) --*

            - *(string) --*

        - **Timeout** *(integer) --*

          The ``JobRun`` timeout in minutes. This is the maximum time that a job run
          can consume resources before it is terminated and enters ``TIMEOUT`` status.
          The default is 2,880 minutes (48 hours). This overrides the timeout value set
          in the parent job.

        - **SecurityConfiguration** *(string) --*

          The name of the ``SecurityConfiguration`` structure to be used with this
          action.

        - **NotificationProperty** *(dict) --*

          Specifies configuration properties of a job run notification.

          - **NotifyDelayAfter** *(integer) --*

            After a job run starts, the number of minutes to wait before sending a job
            run delay notification.

        - **CrawlerName** *(string) --*

          The name of the crawler to be used with this action.

    - **Predicate** *(dict) --*

      The predicate of this trigger, which defines when it will fire.

      - **Logical** *(string) --*

        An optional field if only one condition is listed. If multiple conditions are
        listed, then this field is required.

      - **Conditions** *(list) --*

        A list of the conditions that determine when the trigger will fire.

        - *(dict) --*

          Defines a condition under which a trigger fires.

          - **LogicalOperator** *(string) --*

            A logical operator.

          - **JobName** *(string) --*

            The name of the job whose ``JobRuns`` this condition applies to, and on
            which this trigger waits.

          - **State** *(string) --*

            The condition state. Currently, the values supported are ``SUCCEEDED`` ,
            ``STOPPED`` , ``TIMEOUT`` , and ``FAILED`` .

          - **CrawlerName** *(string) --*

            The name of the crawler to which this condition applies.

          - **CrawlState** *(string) --*

            The state of the crawler to which this condition applies.
    """


_ClientGetWorkflowRunResponseRunGraphNodesTriggerDetailsTypeDef = TypedDict(
    "_ClientGetWorkflowRunResponseRunGraphNodesTriggerDetailsTypeDef",
    {"Trigger": ClientGetWorkflowRunResponseRunGraphNodesTriggerDetailsTriggerTypeDef},
    total=False,
)


class ClientGetWorkflowRunResponseRunGraphNodesTriggerDetailsTypeDef(
    _ClientGetWorkflowRunResponseRunGraphNodesTriggerDetailsTypeDef
):
    """
    Type definition for `ClientGetWorkflowRunResponseRunGraphNodes` `TriggerDetails`

    Details of the Trigger when the node represents a Trigger.

    - **Trigger** *(dict) --*

      The information of the trigger represented by the trigger node.

      - **Name** *(string) --*

        The name of the trigger.

      - **WorkflowName** *(string) --*

        The name of the workflow associated with the trigger.

      - **Id** *(string) --*

        Reserved for future use.

      - **Type** *(string) --*

        The type of trigger that this is.

      - **State** *(string) --*

        The current state of the trigger.

      - **Description** *(string) --*

        A description of this trigger.

      - **Schedule** *(string) --*

        A ``cron`` expression used to specify the schedule (see `Time-Based Schedules for
        Jobs and Crawlers
        <https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html>`__
        . For example, to run something every day at 12:15 UTC, you would specify:
        ``cron(15 12 * * ? *)`` .

      - **Actions** *(list) --*

        The actions initiated by this trigger.

        - *(dict) --*

          Defines an action to be initiated by a trigger.

          - **JobName** *(string) --*

            The name of a job to be executed.

          - **Arguments** *(dict) --*

            The job arguments used when this trigger fires. For this job run, they
            replace the default arguments set in the job definition itself.

            You can specify arguments here that your own job-execution script consumes,
            as well as arguments that AWS Glue itself consumes.

            For information about how to specify and consume your own Job arguments, see
            the `Calling AWS Glue APIs in Python
            <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
            topic in the developer guide.

            For information about the key-value pairs that AWS Glue consumes to set up
            your job, see the `Special Parameters Used by AWS Glue
            <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
            topic in the developer guide.

            - *(string) --*

              - *(string) --*

          - **Timeout** *(integer) --*

            The ``JobRun`` timeout in minutes. This is the maximum time that a job run
            can consume resources before it is terminated and enters ``TIMEOUT`` status.
            The default is 2,880 minutes (48 hours). This overrides the timeout value set
            in the parent job.

          - **SecurityConfiguration** *(string) --*

            The name of the ``SecurityConfiguration`` structure to be used with this
            action.

          - **NotificationProperty** *(dict) --*

            Specifies configuration properties of a job run notification.

            - **NotifyDelayAfter** *(integer) --*

              After a job run starts, the number of minutes to wait before sending a job
              run delay notification.

          - **CrawlerName** *(string) --*

            The name of the crawler to be used with this action.

      - **Predicate** *(dict) --*

        The predicate of this trigger, which defines when it will fire.

        - **Logical** *(string) --*

          An optional field if only one condition is listed. If multiple conditions are
          listed, then this field is required.

        - **Conditions** *(list) --*

          A list of the conditions that determine when the trigger will fire.

          - *(dict) --*

            Defines a condition under which a trigger fires.

            - **LogicalOperator** *(string) --*

              A logical operator.

            - **JobName** *(string) --*

              The name of the job whose ``JobRuns`` this condition applies to, and on
              which this trigger waits.

            - **State** *(string) --*

              The condition state. Currently, the values supported are ``SUCCEEDED`` ,
              ``STOPPED`` , ``TIMEOUT`` , and ``FAILED`` .

            - **CrawlerName** *(string) --*

              The name of the crawler to which this condition applies.

            - **CrawlState** *(string) --*

              The state of the crawler to which this condition applies.
    """


_ClientGetWorkflowRunResponseRunGraphNodesTypeDef = TypedDict(
    "_ClientGetWorkflowRunResponseRunGraphNodesTypeDef",
    {
        "Type": str,
        "Name": str,
        "UniqueId": str,
        "TriggerDetails": ClientGetWorkflowRunResponseRunGraphNodesTriggerDetailsTypeDef,
        "JobDetails": ClientGetWorkflowRunResponseRunGraphNodesJobDetailsTypeDef,
        "CrawlerDetails": ClientGetWorkflowRunResponseRunGraphNodesCrawlerDetailsTypeDef,
    },
    total=False,
)


class ClientGetWorkflowRunResponseRunGraphNodesTypeDef(
    _ClientGetWorkflowRunResponseRunGraphNodesTypeDef
):
    """
    Type definition for `ClientGetWorkflowRunResponseRunGraph` `Nodes`

    A node represents an AWS Glue component like Trigger, Job etc. which is part of a
    workflow.

    - **Type** *(string) --*

      The type of AWS Glue component represented by the node.

    - **Name** *(string) --*

      The name of the AWS Glue component represented by the node.

    - **UniqueId** *(string) --*

      The unique Id assigned to the node within the workflow.

    - **TriggerDetails** *(dict) --*

      Details of the Trigger when the node represents a Trigger.

      - **Trigger** *(dict) --*

        The information of the trigger represented by the trigger node.

        - **Name** *(string) --*

          The name of the trigger.

        - **WorkflowName** *(string) --*

          The name of the workflow associated with the trigger.

        - **Id** *(string) --*

          Reserved for future use.

        - **Type** *(string) --*

          The type of trigger that this is.

        - **State** *(string) --*

          The current state of the trigger.

        - **Description** *(string) --*

          A description of this trigger.

        - **Schedule** *(string) --*

          A ``cron`` expression used to specify the schedule (see `Time-Based Schedules for
          Jobs and Crawlers
          <https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html>`__
          . For example, to run something every day at 12:15 UTC, you would specify:
          ``cron(15 12 * * ? *)`` .

        - **Actions** *(list) --*

          The actions initiated by this trigger.

          - *(dict) --*

            Defines an action to be initiated by a trigger.

            - **JobName** *(string) --*

              The name of a job to be executed.

            - **Arguments** *(dict) --*

              The job arguments used when this trigger fires. For this job run, they
              replace the default arguments set in the job definition itself.

              You can specify arguments here that your own job-execution script consumes,
              as well as arguments that AWS Glue itself consumes.

              For information about how to specify and consume your own Job arguments, see
              the `Calling AWS Glue APIs in Python
              <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
              topic in the developer guide.

              For information about the key-value pairs that AWS Glue consumes to set up
              your job, see the `Special Parameters Used by AWS Glue
              <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
              topic in the developer guide.

              - *(string) --*

                - *(string) --*

            - **Timeout** *(integer) --*

              The ``JobRun`` timeout in minutes. This is the maximum time that a job run
              can consume resources before it is terminated and enters ``TIMEOUT`` status.
              The default is 2,880 minutes (48 hours). This overrides the timeout value set
              in the parent job.

            - **SecurityConfiguration** *(string) --*

              The name of the ``SecurityConfiguration`` structure to be used with this
              action.

            - **NotificationProperty** *(dict) --*

              Specifies configuration properties of a job run notification.

              - **NotifyDelayAfter** *(integer) --*

                After a job run starts, the number of minutes to wait before sending a job
                run delay notification.

            - **CrawlerName** *(string) --*

              The name of the crawler to be used with this action.

        - **Predicate** *(dict) --*

          The predicate of this trigger, which defines when it will fire.

          - **Logical** *(string) --*

            An optional field if only one condition is listed. If multiple conditions are
            listed, then this field is required.

          - **Conditions** *(list) --*

            A list of the conditions that determine when the trigger will fire.

            - *(dict) --*

              Defines a condition under which a trigger fires.

              - **LogicalOperator** *(string) --*

                A logical operator.

              - **JobName** *(string) --*

                The name of the job whose ``JobRuns`` this condition applies to, and on
                which this trigger waits.

              - **State** *(string) --*

                The condition state. Currently, the values supported are ``SUCCEEDED`` ,
                ``STOPPED`` , ``TIMEOUT`` , and ``FAILED`` .

              - **CrawlerName** *(string) --*

                The name of the crawler to which this condition applies.

              - **CrawlState** *(string) --*

                The state of the crawler to which this condition applies.

    - **JobDetails** *(dict) --*

      Details of the Job when the node represents a Job.

      - **JobRuns** *(list) --*

        The information for the job runs represented by the job node.

        - *(dict) --*

          Contains information about a job run.

          - **Id** *(string) --*

            The ID of this job run.

          - **Attempt** *(integer) --*

            The number of the attempt to run this job.

          - **PreviousRunId** *(string) --*

            The ID of the previous run of this job. For example, the ``JobRunId`` specified
            in the ``StartJobRun`` action.

          - **TriggerName** *(string) --*

            The name of the trigger that started this job run.

          - **JobName** *(string) --*

            The name of the job definition being used in this run.

          - **StartedOn** *(datetime) --*

            The date and time at which this job run was started.

          - **LastModifiedOn** *(datetime) --*

            The last time that this job run was modified.

          - **CompletedOn** *(datetime) --*

            The date and time that this job run completed.

          - **JobRunState** *(string) --*

            The current state of the job run.

          - **Arguments** *(dict) --*

            The job arguments associated with this run. For this job run, they replace the
            default arguments set in the job definition itself.

            You can specify arguments here that your own job-execution script consumes, as
            well as arguments that AWS Glue itself consumes.

            For information about how to specify and consume your own job arguments, see
            the `Calling AWS Glue APIs in Python
            <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
            topic in the developer guide.

            For information about the key-value pairs that AWS Glue consumes to set up your
            job, see the `Special Parameters Used by AWS Glue
            <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
            topic in the developer guide.

            - *(string) --*

              - *(string) --*

          - **ErrorMessage** *(string) --*

            An error message associated with this job run.

          - **PredecessorRuns** *(list) --*

            A list of predecessors to this job run.

            - *(dict) --*

              A job run that was used in the predicate of a conditional trigger that
              triggered this job run.

              - **JobName** *(string) --*

                The name of the job definition used by the predecessor job run.

              - **RunId** *(string) --*

                The job-run ID of the predecessor job run.

          - **AllocatedCapacity** *(integer) --*

            This field is deprecated. Use ``MaxCapacity`` instead.

            The number of AWS Glue data processing units (DPUs) allocated to this JobRun.
            From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a relative
            measure of processing power that consists of 4 vCPUs of compute capacity and 16
            GB of memory. For more information, see the `AWS Glue pricing page
            <https://aws.amazon.com/glue/pricing/>`__ .

          - **ExecutionTime** *(integer) --*

            The amount of time (in seconds) that the job run consumed resources.

          - **Timeout** *(integer) --*

            The ``JobRun`` timeout in minutes. This is the maximum time that a job run can
            consume resources before it is terminated and enters ``TIMEOUT`` status. The
            default is 2,880 minutes (48 hours). This overrides the timeout value set in
            the parent job.

          - **MaxCapacity** *(float) --*

            The number of AWS Glue data processing units (DPUs) that can be allocated when
            this job runs. A DPU is a relative measure of processing power that consists of
            4 vCPUs of compute capacity and 16 GB of memory. For more information, see the
            `AWS Glue pricing page
            <https://docs.aws.amazon.com/https:/aws.amazon.com/glue/pricing/>`__ .

            Do not set ``Max Capacity`` if using ``WorkerType`` and ``NumberOfWorkers`` .

            The value that can be allocated for ``MaxCapacity`` depends on whether you are
            running a Python shell job or an Apache Spark ETL job:

            * When you specify a Python shell job (``JobCommand.Name`` ="pythonshell"), you
            can allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.

            * When you specify an Apache Spark ETL job (``JobCommand.Name`` ="glueetl"),
            you can allocate from 2 to 100 DPUs. The default is 10 DPUs. This job type
            cannot have a fractional DPU allocation.

          - **WorkerType** *(string) --*

            The type of predefined worker that is allocated when a job runs. Accepts a
            value of Standard, G.1X, or G.2X.

            * For the ``Standard`` worker type, each worker provides 4 vCPU, 16 GB of
            memory and a 50GB disk, and 2 executors per worker.

            * For the ``G.1X`` worker type, each worker provides 4 vCPU, 16 GB of memory
            and a 64GB disk, and 1 executor per worker.

            * For the ``G.2X`` worker type, each worker provides 8 vCPU, 32 GB of memory
            and a 128GB disk, and 1 executor per worker.

          - **NumberOfWorkers** *(integer) --*

            The number of workers of a defined ``workerType`` that are allocated when a job
            runs.

            The maximum number of workers you can define are 299 for ``G.1X`` , and 149 for
            ``G.2X`` .

          - **SecurityConfiguration** *(string) --*

            The name of the ``SecurityConfiguration`` structure to be used with this job
            run.

          - **LogGroupName** *(string) --*

            The name of the log group for secure logging that can be server-side encrypted
            in Amazon CloudWatch using AWS KMS. This name can be ``/aws-glue/jobs/`` , in
            which case the default encryption is ``NONE`` . If you add a role name and
            ``SecurityConfiguration`` name (in other words,
            ``/aws-glue/jobs-yourRoleName-yourSecurityConfigurationName/`` ), then that
            security configuration is used to encrypt the log group.

          - **NotificationProperty** *(dict) --*

            Specifies configuration properties of a job run notification.

            - **NotifyDelayAfter** *(integer) --*

              After a job run starts, the number of minutes to wait before sending a job
              run delay notification.

          - **GlueVersion** *(string) --*

            Glue version determines the versions of Apache Spark and Python that AWS Glue
            supports. The Python version indicates the version supported for jobs of type
            Spark.

            For more information about the available AWS Glue versions and corresponding
            Spark and Python versions, see `Glue version
            <https://docs.aws.amazon.com/glue/latest/dg/add-job.html>`__ in the developer
            guide.

            Jobs that are created without specifying a Glue version default to Glue 0.9.

    - **CrawlerDetails** *(dict) --*

      Details of the crawler when the node represents a crawler.

      - **Crawls** *(list) --*

        A list of crawls represented by the crawl node.

        - *(dict) --*

          The details of a crawl in the workflow.

          - **State** *(string) --*

            The state of the crawler.

          - **StartedOn** *(datetime) --*

            The date and time on which the crawl started.

          - **CompletedOn** *(datetime) --*

            The date and time on which the crawl completed.

          - **ErrorMessage** *(string) --*

            The error message associated with the crawl.

          - **LogGroup** *(string) --*

            The log group associated with the crawl.

          - **LogStream** *(string) --*

            The log stream associated with the crawl.
    """


_ClientGetWorkflowRunResponseRunGraphTypeDef = TypedDict(
    "_ClientGetWorkflowRunResponseRunGraphTypeDef",
    {
        "Nodes": List[ClientGetWorkflowRunResponseRunGraphNodesTypeDef],
        "Edges": List[ClientGetWorkflowRunResponseRunGraphEdgesTypeDef],
    },
    total=False,
)


class ClientGetWorkflowRunResponseRunGraphTypeDef(
    _ClientGetWorkflowRunResponseRunGraphTypeDef
):
    """
    Type definition for `ClientGetWorkflowRunResponseRun` `Graph`

    The graph representing all the AWS Glue components that belong to the workflow as nodes and
    directed connections between them as edges.

    - **Nodes** *(list) --*

      A list of the the AWS Glue components belong to the workflow represented as nodes.

      - *(dict) --*

        A node represents an AWS Glue component like Trigger, Job etc. which is part of a
        workflow.

        - **Type** *(string) --*

          The type of AWS Glue component represented by the node.

        - **Name** *(string) --*

          The name of the AWS Glue component represented by the node.

        - **UniqueId** *(string) --*

          The unique Id assigned to the node within the workflow.

        - **TriggerDetails** *(dict) --*

          Details of the Trigger when the node represents a Trigger.

          - **Trigger** *(dict) --*

            The information of the trigger represented by the trigger node.

            - **Name** *(string) --*

              The name of the trigger.

            - **WorkflowName** *(string) --*

              The name of the workflow associated with the trigger.

            - **Id** *(string) --*

              Reserved for future use.

            - **Type** *(string) --*

              The type of trigger that this is.

            - **State** *(string) --*

              The current state of the trigger.

            - **Description** *(string) --*

              A description of this trigger.

            - **Schedule** *(string) --*

              A ``cron`` expression used to specify the schedule (see `Time-Based Schedules for
              Jobs and Crawlers
              <https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html>`__
              . For example, to run something every day at 12:15 UTC, you would specify:
              ``cron(15 12 * * ? *)`` .

            - **Actions** *(list) --*

              The actions initiated by this trigger.

              - *(dict) --*

                Defines an action to be initiated by a trigger.

                - **JobName** *(string) --*

                  The name of a job to be executed.

                - **Arguments** *(dict) --*

                  The job arguments used when this trigger fires. For this job run, they
                  replace the default arguments set in the job definition itself.

                  You can specify arguments here that your own job-execution script consumes,
                  as well as arguments that AWS Glue itself consumes.

                  For information about how to specify and consume your own Job arguments, see
                  the `Calling AWS Glue APIs in Python
                  <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
                  topic in the developer guide.

                  For information about the key-value pairs that AWS Glue consumes to set up
                  your job, see the `Special Parameters Used by AWS Glue
                  <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
                  topic in the developer guide.

                  - *(string) --*

                    - *(string) --*

                - **Timeout** *(integer) --*

                  The ``JobRun`` timeout in minutes. This is the maximum time that a job run
                  can consume resources before it is terminated and enters ``TIMEOUT`` status.
                  The default is 2,880 minutes (48 hours). This overrides the timeout value set
                  in the parent job.

                - **SecurityConfiguration** *(string) --*

                  The name of the ``SecurityConfiguration`` structure to be used with this
                  action.

                - **NotificationProperty** *(dict) --*

                  Specifies configuration properties of a job run notification.

                  - **NotifyDelayAfter** *(integer) --*

                    After a job run starts, the number of minutes to wait before sending a job
                    run delay notification.

                - **CrawlerName** *(string) --*

                  The name of the crawler to be used with this action.

            - **Predicate** *(dict) --*

              The predicate of this trigger, which defines when it will fire.

              - **Logical** *(string) --*

                An optional field if only one condition is listed. If multiple conditions are
                listed, then this field is required.

              - **Conditions** *(list) --*

                A list of the conditions that determine when the trigger will fire.

                - *(dict) --*

                  Defines a condition under which a trigger fires.

                  - **LogicalOperator** *(string) --*

                    A logical operator.

                  - **JobName** *(string) --*

                    The name of the job whose ``JobRuns`` this condition applies to, and on
                    which this trigger waits.

                  - **State** *(string) --*

                    The condition state. Currently, the values supported are ``SUCCEEDED`` ,
                    ``STOPPED`` , ``TIMEOUT`` , and ``FAILED`` .

                  - **CrawlerName** *(string) --*

                    The name of the crawler to which this condition applies.

                  - **CrawlState** *(string) --*

                    The state of the crawler to which this condition applies.

        - **JobDetails** *(dict) --*

          Details of the Job when the node represents a Job.

          - **JobRuns** *(list) --*

            The information for the job runs represented by the job node.

            - *(dict) --*

              Contains information about a job run.

              - **Id** *(string) --*

                The ID of this job run.

              - **Attempt** *(integer) --*

                The number of the attempt to run this job.

              - **PreviousRunId** *(string) --*

                The ID of the previous run of this job. For example, the ``JobRunId`` specified
                in the ``StartJobRun`` action.

              - **TriggerName** *(string) --*

                The name of the trigger that started this job run.

              - **JobName** *(string) --*

                The name of the job definition being used in this run.

              - **StartedOn** *(datetime) --*

                The date and time at which this job run was started.

              - **LastModifiedOn** *(datetime) --*

                The last time that this job run was modified.

              - **CompletedOn** *(datetime) --*

                The date and time that this job run completed.

              - **JobRunState** *(string) --*

                The current state of the job run.

              - **Arguments** *(dict) --*

                The job arguments associated with this run. For this job run, they replace the
                default arguments set in the job definition itself.

                You can specify arguments here that your own job-execution script consumes, as
                well as arguments that AWS Glue itself consumes.

                For information about how to specify and consume your own job arguments, see
                the `Calling AWS Glue APIs in Python
                <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
                topic in the developer guide.

                For information about the key-value pairs that AWS Glue consumes to set up your
                job, see the `Special Parameters Used by AWS Glue
                <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
                topic in the developer guide.

                - *(string) --*

                  - *(string) --*

              - **ErrorMessage** *(string) --*

                An error message associated with this job run.

              - **PredecessorRuns** *(list) --*

                A list of predecessors to this job run.

                - *(dict) --*

                  A job run that was used in the predicate of a conditional trigger that
                  triggered this job run.

                  - **JobName** *(string) --*

                    The name of the job definition used by the predecessor job run.

                  - **RunId** *(string) --*

                    The job-run ID of the predecessor job run.

              - **AllocatedCapacity** *(integer) --*

                This field is deprecated. Use ``MaxCapacity`` instead.

                The number of AWS Glue data processing units (DPUs) allocated to this JobRun.
                From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a relative
                measure of processing power that consists of 4 vCPUs of compute capacity and 16
                GB of memory. For more information, see the `AWS Glue pricing page
                <https://aws.amazon.com/glue/pricing/>`__ .

              - **ExecutionTime** *(integer) --*

                The amount of time (in seconds) that the job run consumed resources.

              - **Timeout** *(integer) --*

                The ``JobRun`` timeout in minutes. This is the maximum time that a job run can
                consume resources before it is terminated and enters ``TIMEOUT`` status. The
                default is 2,880 minutes (48 hours). This overrides the timeout value set in
                the parent job.

              - **MaxCapacity** *(float) --*

                The number of AWS Glue data processing units (DPUs) that can be allocated when
                this job runs. A DPU is a relative measure of processing power that consists of
                4 vCPUs of compute capacity and 16 GB of memory. For more information, see the
                `AWS Glue pricing page
                <https://docs.aws.amazon.com/https:/aws.amazon.com/glue/pricing/>`__ .

                Do not set ``Max Capacity`` if using ``WorkerType`` and ``NumberOfWorkers`` .

                The value that can be allocated for ``MaxCapacity`` depends on whether you are
                running a Python shell job or an Apache Spark ETL job:

                * When you specify a Python shell job (``JobCommand.Name`` ="pythonshell"), you
                can allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.

                * When you specify an Apache Spark ETL job (``JobCommand.Name`` ="glueetl"),
                you can allocate from 2 to 100 DPUs. The default is 10 DPUs. This job type
                cannot have a fractional DPU allocation.

              - **WorkerType** *(string) --*

                The type of predefined worker that is allocated when a job runs. Accepts a
                value of Standard, G.1X, or G.2X.

                * For the ``Standard`` worker type, each worker provides 4 vCPU, 16 GB of
                memory and a 50GB disk, and 2 executors per worker.

                * For the ``G.1X`` worker type, each worker provides 4 vCPU, 16 GB of memory
                and a 64GB disk, and 1 executor per worker.

                * For the ``G.2X`` worker type, each worker provides 8 vCPU, 32 GB of memory
                and a 128GB disk, and 1 executor per worker.

              - **NumberOfWorkers** *(integer) --*

                The number of workers of a defined ``workerType`` that are allocated when a job
                runs.

                The maximum number of workers you can define are 299 for ``G.1X`` , and 149 for
                ``G.2X`` .

              - **SecurityConfiguration** *(string) --*

                The name of the ``SecurityConfiguration`` structure to be used with this job
                run.

              - **LogGroupName** *(string) --*

                The name of the log group for secure logging that can be server-side encrypted
                in Amazon CloudWatch using AWS KMS. This name can be ``/aws-glue/jobs/`` , in
                which case the default encryption is ``NONE`` . If you add a role name and
                ``SecurityConfiguration`` name (in other words,
                ``/aws-glue/jobs-yourRoleName-yourSecurityConfigurationName/`` ), then that
                security configuration is used to encrypt the log group.

              - **NotificationProperty** *(dict) --*

                Specifies configuration properties of a job run notification.

                - **NotifyDelayAfter** *(integer) --*

                  After a job run starts, the number of minutes to wait before sending a job
                  run delay notification.

              - **GlueVersion** *(string) --*

                Glue version determines the versions of Apache Spark and Python that AWS Glue
                supports. The Python version indicates the version supported for jobs of type
                Spark.

                For more information about the available AWS Glue versions and corresponding
                Spark and Python versions, see `Glue version
                <https://docs.aws.amazon.com/glue/latest/dg/add-job.html>`__ in the developer
                guide.

                Jobs that are created without specifying a Glue version default to Glue 0.9.

        - **CrawlerDetails** *(dict) --*

          Details of the crawler when the node represents a crawler.

          - **Crawls** *(list) --*

            A list of crawls represented by the crawl node.

            - *(dict) --*

              The details of a crawl in the workflow.

              - **State** *(string) --*

                The state of the crawler.

              - **StartedOn** *(datetime) --*

                The date and time on which the crawl started.

              - **CompletedOn** *(datetime) --*

                The date and time on which the crawl completed.

              - **ErrorMessage** *(string) --*

                The error message associated with the crawl.

              - **LogGroup** *(string) --*

                The log group associated with the crawl.

              - **LogStream** *(string) --*

                The log stream associated with the crawl.

    - **Edges** *(list) --*

      A list of all the directed connections between the nodes belonging to the workflow.

      - *(dict) --*

        An edge represents a directed connection between two AWS Glue components which are part
        of the workflow the edge belongs to.

        - **SourceId** *(string) --*

          The unique of the node within the workflow where the edge starts.

        - **DestinationId** *(string) --*

          The unique of the node within the workflow where the edge ends.
    """


_ClientGetWorkflowRunResponseRunStatisticsTypeDef = TypedDict(
    "_ClientGetWorkflowRunResponseRunStatisticsTypeDef",
    {
        "TotalActions": int,
        "TimeoutActions": int,
        "FailedActions": int,
        "StoppedActions": int,
        "SucceededActions": int,
        "RunningActions": int,
    },
    total=False,
)


class ClientGetWorkflowRunResponseRunStatisticsTypeDef(
    _ClientGetWorkflowRunResponseRunStatisticsTypeDef
):
    """
    Type definition for `ClientGetWorkflowRunResponseRun` `Statistics`

    The statistics of the run.

    - **TotalActions** *(integer) --*

      Total number of Actions in the workflow run.

    - **TimeoutActions** *(integer) --*

      Total number of Actions which timed out.

    - **FailedActions** *(integer) --*

      Total number of Actions which have failed.

    - **StoppedActions** *(integer) --*

      Total number of Actions which have stopped.

    - **SucceededActions** *(integer) --*

      Total number of Actions which have succeeded.

    - **RunningActions** *(integer) --*

      Total number Actions in running state.
    """


_ClientGetWorkflowRunResponseRunTypeDef = TypedDict(
    "_ClientGetWorkflowRunResponseRunTypeDef",
    {
        "Name": str,
        "WorkflowRunId": str,
        "WorkflowRunProperties": Dict[str, str],
        "StartedOn": datetime,
        "CompletedOn": datetime,
        "Status": str,
        "Statistics": ClientGetWorkflowRunResponseRunStatisticsTypeDef,
        "Graph": ClientGetWorkflowRunResponseRunGraphTypeDef,
    },
    total=False,
)


class ClientGetWorkflowRunResponseRunTypeDef(_ClientGetWorkflowRunResponseRunTypeDef):
    """
    Type definition for `ClientGetWorkflowRunResponse` `Run`

    The requested workflow run metadata.

    - **Name** *(string) --*

      Name of the workflow which was executed.

    - **WorkflowRunId** *(string) --*

      The ID of this workflow run.

    - **WorkflowRunProperties** *(dict) --*

      The workflow run properties which were set during the run.

      - *(string) --*

        - *(string) --*

    - **StartedOn** *(datetime) --*

      The date and time when the workflow run was started.

    - **CompletedOn** *(datetime) --*

      The date and time when the workflow run completed.

    - **Status** *(string) --*

      The status of the workflow run.

    - **Statistics** *(dict) --*

      The statistics of the run.

      - **TotalActions** *(integer) --*

        Total number of Actions in the workflow run.

      - **TimeoutActions** *(integer) --*

        Total number of Actions which timed out.

      - **FailedActions** *(integer) --*

        Total number of Actions which have failed.

      - **StoppedActions** *(integer) --*

        Total number of Actions which have stopped.

      - **SucceededActions** *(integer) --*

        Total number of Actions which have succeeded.

      - **RunningActions** *(integer) --*

        Total number Actions in running state.

    - **Graph** *(dict) --*

      The graph representing all the AWS Glue components that belong to the workflow as nodes and
      directed connections between them as edges.

      - **Nodes** *(list) --*

        A list of the the AWS Glue components belong to the workflow represented as nodes.

        - *(dict) --*

          A node represents an AWS Glue component like Trigger, Job etc. which is part of a
          workflow.

          - **Type** *(string) --*

            The type of AWS Glue component represented by the node.

          - **Name** *(string) --*

            The name of the AWS Glue component represented by the node.

          - **UniqueId** *(string) --*

            The unique Id assigned to the node within the workflow.

          - **TriggerDetails** *(dict) --*

            Details of the Trigger when the node represents a Trigger.

            - **Trigger** *(dict) --*

              The information of the trigger represented by the trigger node.

              - **Name** *(string) --*

                The name of the trigger.

              - **WorkflowName** *(string) --*

                The name of the workflow associated with the trigger.

              - **Id** *(string) --*

                Reserved for future use.

              - **Type** *(string) --*

                The type of trigger that this is.

              - **State** *(string) --*

                The current state of the trigger.

              - **Description** *(string) --*

                A description of this trigger.

              - **Schedule** *(string) --*

                A ``cron`` expression used to specify the schedule (see `Time-Based Schedules for
                Jobs and Crawlers
                <https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html>`__
                . For example, to run something every day at 12:15 UTC, you would specify:
                ``cron(15 12 * * ? *)`` .

              - **Actions** *(list) --*

                The actions initiated by this trigger.

                - *(dict) --*

                  Defines an action to be initiated by a trigger.

                  - **JobName** *(string) --*

                    The name of a job to be executed.

                  - **Arguments** *(dict) --*

                    The job arguments used when this trigger fires. For this job run, they
                    replace the default arguments set in the job definition itself.

                    You can specify arguments here that your own job-execution script consumes,
                    as well as arguments that AWS Glue itself consumes.

                    For information about how to specify and consume your own Job arguments, see
                    the `Calling AWS Glue APIs in Python
                    <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
                    topic in the developer guide.

                    For information about the key-value pairs that AWS Glue consumes to set up
                    your job, see the `Special Parameters Used by AWS Glue
                    <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
                    topic in the developer guide.

                    - *(string) --*

                      - *(string) --*

                  - **Timeout** *(integer) --*

                    The ``JobRun`` timeout in minutes. This is the maximum time that a job run
                    can consume resources before it is terminated and enters ``TIMEOUT`` status.
                    The default is 2,880 minutes (48 hours). This overrides the timeout value set
                    in the parent job.

                  - **SecurityConfiguration** *(string) --*

                    The name of the ``SecurityConfiguration`` structure to be used with this
                    action.

                  - **NotificationProperty** *(dict) --*

                    Specifies configuration properties of a job run notification.

                    - **NotifyDelayAfter** *(integer) --*

                      After a job run starts, the number of minutes to wait before sending a job
                      run delay notification.

                  - **CrawlerName** *(string) --*

                    The name of the crawler to be used with this action.

              - **Predicate** *(dict) --*

                The predicate of this trigger, which defines when it will fire.

                - **Logical** *(string) --*

                  An optional field if only one condition is listed. If multiple conditions are
                  listed, then this field is required.

                - **Conditions** *(list) --*

                  A list of the conditions that determine when the trigger will fire.

                  - *(dict) --*

                    Defines a condition under which a trigger fires.

                    - **LogicalOperator** *(string) --*

                      A logical operator.

                    - **JobName** *(string) --*

                      The name of the job whose ``JobRuns`` this condition applies to, and on
                      which this trigger waits.

                    - **State** *(string) --*

                      The condition state. Currently, the values supported are ``SUCCEEDED`` ,
                      ``STOPPED`` , ``TIMEOUT`` , and ``FAILED`` .

                    - **CrawlerName** *(string) --*

                      The name of the crawler to which this condition applies.

                    - **CrawlState** *(string) --*

                      The state of the crawler to which this condition applies.

          - **JobDetails** *(dict) --*

            Details of the Job when the node represents a Job.

            - **JobRuns** *(list) --*

              The information for the job runs represented by the job node.

              - *(dict) --*

                Contains information about a job run.

                - **Id** *(string) --*

                  The ID of this job run.

                - **Attempt** *(integer) --*

                  The number of the attempt to run this job.

                - **PreviousRunId** *(string) --*

                  The ID of the previous run of this job. For example, the ``JobRunId`` specified
                  in the ``StartJobRun`` action.

                - **TriggerName** *(string) --*

                  The name of the trigger that started this job run.

                - **JobName** *(string) --*

                  The name of the job definition being used in this run.

                - **StartedOn** *(datetime) --*

                  The date and time at which this job run was started.

                - **LastModifiedOn** *(datetime) --*

                  The last time that this job run was modified.

                - **CompletedOn** *(datetime) --*

                  The date and time that this job run completed.

                - **JobRunState** *(string) --*

                  The current state of the job run.

                - **Arguments** *(dict) --*

                  The job arguments associated with this run. For this job run, they replace the
                  default arguments set in the job definition itself.

                  You can specify arguments here that your own job-execution script consumes, as
                  well as arguments that AWS Glue itself consumes.

                  For information about how to specify and consume your own job arguments, see
                  the `Calling AWS Glue APIs in Python
                  <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
                  topic in the developer guide.

                  For information about the key-value pairs that AWS Glue consumes to set up your
                  job, see the `Special Parameters Used by AWS Glue
                  <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
                  topic in the developer guide.

                  - *(string) --*

                    - *(string) --*

                - **ErrorMessage** *(string) --*

                  An error message associated with this job run.

                - **PredecessorRuns** *(list) --*

                  A list of predecessors to this job run.

                  - *(dict) --*

                    A job run that was used in the predicate of a conditional trigger that
                    triggered this job run.

                    - **JobName** *(string) --*

                      The name of the job definition used by the predecessor job run.

                    - **RunId** *(string) --*

                      The job-run ID of the predecessor job run.

                - **AllocatedCapacity** *(integer) --*

                  This field is deprecated. Use ``MaxCapacity`` instead.

                  The number of AWS Glue data processing units (DPUs) allocated to this JobRun.
                  From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a relative
                  measure of processing power that consists of 4 vCPUs of compute capacity and 16
                  GB of memory. For more information, see the `AWS Glue pricing page
                  <https://aws.amazon.com/glue/pricing/>`__ .

                - **ExecutionTime** *(integer) --*

                  The amount of time (in seconds) that the job run consumed resources.

                - **Timeout** *(integer) --*

                  The ``JobRun`` timeout in minutes. This is the maximum time that a job run can
                  consume resources before it is terminated and enters ``TIMEOUT`` status. The
                  default is 2,880 minutes (48 hours). This overrides the timeout value set in
                  the parent job.

                - **MaxCapacity** *(float) --*

                  The number of AWS Glue data processing units (DPUs) that can be allocated when
                  this job runs. A DPU is a relative measure of processing power that consists of
                  4 vCPUs of compute capacity and 16 GB of memory. For more information, see the
                  `AWS Glue pricing page
                  <https://docs.aws.amazon.com/https:/aws.amazon.com/glue/pricing/>`__ .

                  Do not set ``Max Capacity`` if using ``WorkerType`` and ``NumberOfWorkers`` .

                  The value that can be allocated for ``MaxCapacity`` depends on whether you are
                  running a Python shell job or an Apache Spark ETL job:

                  * When you specify a Python shell job (``JobCommand.Name`` ="pythonshell"), you
                  can allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.

                  * When you specify an Apache Spark ETL job (``JobCommand.Name`` ="glueetl"),
                  you can allocate from 2 to 100 DPUs. The default is 10 DPUs. This job type
                  cannot have a fractional DPU allocation.

                - **WorkerType** *(string) --*

                  The type of predefined worker that is allocated when a job runs. Accepts a
                  value of Standard, G.1X, or G.2X.

                  * For the ``Standard`` worker type, each worker provides 4 vCPU, 16 GB of
                  memory and a 50GB disk, and 2 executors per worker.

                  * For the ``G.1X`` worker type, each worker provides 4 vCPU, 16 GB of memory
                  and a 64GB disk, and 1 executor per worker.

                  * For the ``G.2X`` worker type, each worker provides 8 vCPU, 32 GB of memory
                  and a 128GB disk, and 1 executor per worker.

                - **NumberOfWorkers** *(integer) --*

                  The number of workers of a defined ``workerType`` that are allocated when a job
                  runs.

                  The maximum number of workers you can define are 299 for ``G.1X`` , and 149 for
                  ``G.2X`` .

                - **SecurityConfiguration** *(string) --*

                  The name of the ``SecurityConfiguration`` structure to be used with this job
                  run.

                - **LogGroupName** *(string) --*

                  The name of the log group for secure logging that can be server-side encrypted
                  in Amazon CloudWatch using AWS KMS. This name can be ``/aws-glue/jobs/`` , in
                  which case the default encryption is ``NONE`` . If you add a role name and
                  ``SecurityConfiguration`` name (in other words,
                  ``/aws-glue/jobs-yourRoleName-yourSecurityConfigurationName/`` ), then that
                  security configuration is used to encrypt the log group.

                - **NotificationProperty** *(dict) --*

                  Specifies configuration properties of a job run notification.

                  - **NotifyDelayAfter** *(integer) --*

                    After a job run starts, the number of minutes to wait before sending a job
                    run delay notification.

                - **GlueVersion** *(string) --*

                  Glue version determines the versions of Apache Spark and Python that AWS Glue
                  supports. The Python version indicates the version supported for jobs of type
                  Spark.

                  For more information about the available AWS Glue versions and corresponding
                  Spark and Python versions, see `Glue version
                  <https://docs.aws.amazon.com/glue/latest/dg/add-job.html>`__ in the developer
                  guide.

                  Jobs that are created without specifying a Glue version default to Glue 0.9.

          - **CrawlerDetails** *(dict) --*

            Details of the crawler when the node represents a crawler.

            - **Crawls** *(list) --*

              A list of crawls represented by the crawl node.

              - *(dict) --*

                The details of a crawl in the workflow.

                - **State** *(string) --*

                  The state of the crawler.

                - **StartedOn** *(datetime) --*

                  The date and time on which the crawl started.

                - **CompletedOn** *(datetime) --*

                  The date and time on which the crawl completed.

                - **ErrorMessage** *(string) --*

                  The error message associated with the crawl.

                - **LogGroup** *(string) --*

                  The log group associated with the crawl.

                - **LogStream** *(string) --*

                  The log stream associated with the crawl.

      - **Edges** *(list) --*

        A list of all the directed connections between the nodes belonging to the workflow.

        - *(dict) --*

          An edge represents a directed connection between two AWS Glue components which are part
          of the workflow the edge belongs to.

          - **SourceId** *(string) --*

            The unique of the node within the workflow where the edge starts.

          - **DestinationId** *(string) --*

            The unique of the node within the workflow where the edge ends.
    """


_ClientGetWorkflowRunResponseTypeDef = TypedDict(
    "_ClientGetWorkflowRunResponseTypeDef",
    {"Run": ClientGetWorkflowRunResponseRunTypeDef},
    total=False,
)


class ClientGetWorkflowRunResponseTypeDef(_ClientGetWorkflowRunResponseTypeDef):
    """
    Type definition for `ClientGetWorkflowRun` `Response`

    - **Run** *(dict) --*

      The requested workflow run metadata.

      - **Name** *(string) --*

        Name of the workflow which was executed.

      - **WorkflowRunId** *(string) --*

        The ID of this workflow run.

      - **WorkflowRunProperties** *(dict) --*

        The workflow run properties which were set during the run.

        - *(string) --*

          - *(string) --*

      - **StartedOn** *(datetime) --*

        The date and time when the workflow run was started.

      - **CompletedOn** *(datetime) --*

        The date and time when the workflow run completed.

      - **Status** *(string) --*

        The status of the workflow run.

      - **Statistics** *(dict) --*

        The statistics of the run.

        - **TotalActions** *(integer) --*

          Total number of Actions in the workflow run.

        - **TimeoutActions** *(integer) --*

          Total number of Actions which timed out.

        - **FailedActions** *(integer) --*

          Total number of Actions which have failed.

        - **StoppedActions** *(integer) --*

          Total number of Actions which have stopped.

        - **SucceededActions** *(integer) --*

          Total number of Actions which have succeeded.

        - **RunningActions** *(integer) --*

          Total number Actions in running state.

      - **Graph** *(dict) --*

        The graph representing all the AWS Glue components that belong to the workflow as nodes and
        directed connections between them as edges.

        - **Nodes** *(list) --*

          A list of the the AWS Glue components belong to the workflow represented as nodes.

          - *(dict) --*

            A node represents an AWS Glue component like Trigger, Job etc. which is part of a
            workflow.

            - **Type** *(string) --*

              The type of AWS Glue component represented by the node.

            - **Name** *(string) --*

              The name of the AWS Glue component represented by the node.

            - **UniqueId** *(string) --*

              The unique Id assigned to the node within the workflow.

            - **TriggerDetails** *(dict) --*

              Details of the Trigger when the node represents a Trigger.

              - **Trigger** *(dict) --*

                The information of the trigger represented by the trigger node.

                - **Name** *(string) --*

                  The name of the trigger.

                - **WorkflowName** *(string) --*

                  The name of the workflow associated with the trigger.

                - **Id** *(string) --*

                  Reserved for future use.

                - **Type** *(string) --*

                  The type of trigger that this is.

                - **State** *(string) --*

                  The current state of the trigger.

                - **Description** *(string) --*

                  A description of this trigger.

                - **Schedule** *(string) --*

                  A ``cron`` expression used to specify the schedule (see `Time-Based Schedules for
                  Jobs and Crawlers
                  <https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html>`__
                  . For example, to run something every day at 12:15 UTC, you would specify:
                  ``cron(15 12 * * ? *)`` .

                - **Actions** *(list) --*

                  The actions initiated by this trigger.

                  - *(dict) --*

                    Defines an action to be initiated by a trigger.

                    - **JobName** *(string) --*

                      The name of a job to be executed.

                    - **Arguments** *(dict) --*

                      The job arguments used when this trigger fires. For this job run, they
                      replace the default arguments set in the job definition itself.

                      You can specify arguments here that your own job-execution script consumes,
                      as well as arguments that AWS Glue itself consumes.

                      For information about how to specify and consume your own Job arguments, see
                      the `Calling AWS Glue APIs in Python
                      <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
                      topic in the developer guide.

                      For information about the key-value pairs that AWS Glue consumes to set up
                      your job, see the `Special Parameters Used by AWS Glue
                      <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
                      topic in the developer guide.

                      - *(string) --*

                        - *(string) --*

                    - **Timeout** *(integer) --*

                      The ``JobRun`` timeout in minutes. This is the maximum time that a job run
                      can consume resources before it is terminated and enters ``TIMEOUT`` status.
                      The default is 2,880 minutes (48 hours). This overrides the timeout value set
                      in the parent job.

                    - **SecurityConfiguration** *(string) --*

                      The name of the ``SecurityConfiguration`` structure to be used with this
                      action.

                    - **NotificationProperty** *(dict) --*

                      Specifies configuration properties of a job run notification.

                      - **NotifyDelayAfter** *(integer) --*

                        After a job run starts, the number of minutes to wait before sending a job
                        run delay notification.

                    - **CrawlerName** *(string) --*

                      The name of the crawler to be used with this action.

                - **Predicate** *(dict) --*

                  The predicate of this trigger, which defines when it will fire.

                  - **Logical** *(string) --*

                    An optional field if only one condition is listed. If multiple conditions are
                    listed, then this field is required.

                  - **Conditions** *(list) --*

                    A list of the conditions that determine when the trigger will fire.

                    - *(dict) --*

                      Defines a condition under which a trigger fires.

                      - **LogicalOperator** *(string) --*

                        A logical operator.

                      - **JobName** *(string) --*

                        The name of the job whose ``JobRuns`` this condition applies to, and on
                        which this trigger waits.

                      - **State** *(string) --*

                        The condition state. Currently, the values supported are ``SUCCEEDED`` ,
                        ``STOPPED`` , ``TIMEOUT`` , and ``FAILED`` .

                      - **CrawlerName** *(string) --*

                        The name of the crawler to which this condition applies.

                      - **CrawlState** *(string) --*

                        The state of the crawler to which this condition applies.

            - **JobDetails** *(dict) --*

              Details of the Job when the node represents a Job.

              - **JobRuns** *(list) --*

                The information for the job runs represented by the job node.

                - *(dict) --*

                  Contains information about a job run.

                  - **Id** *(string) --*

                    The ID of this job run.

                  - **Attempt** *(integer) --*

                    The number of the attempt to run this job.

                  - **PreviousRunId** *(string) --*

                    The ID of the previous run of this job. For example, the ``JobRunId`` specified
                    in the ``StartJobRun`` action.

                  - **TriggerName** *(string) --*

                    The name of the trigger that started this job run.

                  - **JobName** *(string) --*

                    The name of the job definition being used in this run.

                  - **StartedOn** *(datetime) --*

                    The date and time at which this job run was started.

                  - **LastModifiedOn** *(datetime) --*

                    The last time that this job run was modified.

                  - **CompletedOn** *(datetime) --*

                    The date and time that this job run completed.

                  - **JobRunState** *(string) --*

                    The current state of the job run.

                  - **Arguments** *(dict) --*

                    The job arguments associated with this run. For this job run, they replace the
                    default arguments set in the job definition itself.

                    You can specify arguments here that your own job-execution script consumes, as
                    well as arguments that AWS Glue itself consumes.

                    For information about how to specify and consume your own job arguments, see
                    the `Calling AWS Glue APIs in Python
                    <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
                    topic in the developer guide.

                    For information about the key-value pairs that AWS Glue consumes to set up your
                    job, see the `Special Parameters Used by AWS Glue
                    <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
                    topic in the developer guide.

                    - *(string) --*

                      - *(string) --*

                  - **ErrorMessage** *(string) --*

                    An error message associated with this job run.

                  - **PredecessorRuns** *(list) --*

                    A list of predecessors to this job run.

                    - *(dict) --*

                      A job run that was used in the predicate of a conditional trigger that
                      triggered this job run.

                      - **JobName** *(string) --*

                        The name of the job definition used by the predecessor job run.

                      - **RunId** *(string) --*

                        The job-run ID of the predecessor job run.

                  - **AllocatedCapacity** *(integer) --*

                    This field is deprecated. Use ``MaxCapacity`` instead.

                    The number of AWS Glue data processing units (DPUs) allocated to this JobRun.
                    From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a relative
                    measure of processing power that consists of 4 vCPUs of compute capacity and 16
                    GB of memory. For more information, see the `AWS Glue pricing page
                    <https://aws.amazon.com/glue/pricing/>`__ .

                  - **ExecutionTime** *(integer) --*

                    The amount of time (in seconds) that the job run consumed resources.

                  - **Timeout** *(integer) --*

                    The ``JobRun`` timeout in minutes. This is the maximum time that a job run can
                    consume resources before it is terminated and enters ``TIMEOUT`` status. The
                    default is 2,880 minutes (48 hours). This overrides the timeout value set in
                    the parent job.

                  - **MaxCapacity** *(float) --*

                    The number of AWS Glue data processing units (DPUs) that can be allocated when
                    this job runs. A DPU is a relative measure of processing power that consists of
                    4 vCPUs of compute capacity and 16 GB of memory. For more information, see the
                    `AWS Glue pricing page
                    <https://docs.aws.amazon.com/https:/aws.amazon.com/glue/pricing/>`__ .

                    Do not set ``Max Capacity`` if using ``WorkerType`` and ``NumberOfWorkers`` .

                    The value that can be allocated for ``MaxCapacity`` depends on whether you are
                    running a Python shell job or an Apache Spark ETL job:

                    * When you specify a Python shell job (``JobCommand.Name`` ="pythonshell"), you
                    can allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.

                    * When you specify an Apache Spark ETL job (``JobCommand.Name`` ="glueetl"),
                    you can allocate from 2 to 100 DPUs. The default is 10 DPUs. This job type
                    cannot have a fractional DPU allocation.

                  - **WorkerType** *(string) --*

                    The type of predefined worker that is allocated when a job runs. Accepts a
                    value of Standard, G.1X, or G.2X.

                    * For the ``Standard`` worker type, each worker provides 4 vCPU, 16 GB of
                    memory and a 50GB disk, and 2 executors per worker.

                    * For the ``G.1X`` worker type, each worker provides 4 vCPU, 16 GB of memory
                    and a 64GB disk, and 1 executor per worker.

                    * For the ``G.2X`` worker type, each worker provides 8 vCPU, 32 GB of memory
                    and a 128GB disk, and 1 executor per worker.

                  - **NumberOfWorkers** *(integer) --*

                    The number of workers of a defined ``workerType`` that are allocated when a job
                    runs.

                    The maximum number of workers you can define are 299 for ``G.1X`` , and 149 for
                    ``G.2X`` .

                  - **SecurityConfiguration** *(string) --*

                    The name of the ``SecurityConfiguration`` structure to be used with this job
                    run.

                  - **LogGroupName** *(string) --*

                    The name of the log group for secure logging that can be server-side encrypted
                    in Amazon CloudWatch using AWS KMS. This name can be ``/aws-glue/jobs/`` , in
                    which case the default encryption is ``NONE`` . If you add a role name and
                    ``SecurityConfiguration`` name (in other words,
                    ``/aws-glue/jobs-yourRoleName-yourSecurityConfigurationName/`` ), then that
                    security configuration is used to encrypt the log group.

                  - **NotificationProperty** *(dict) --*

                    Specifies configuration properties of a job run notification.

                    - **NotifyDelayAfter** *(integer) --*

                      After a job run starts, the number of minutes to wait before sending a job
                      run delay notification.

                  - **GlueVersion** *(string) --*

                    Glue version determines the versions of Apache Spark and Python that AWS Glue
                    supports. The Python version indicates the version supported for jobs of type
                    Spark.

                    For more information about the available AWS Glue versions and corresponding
                    Spark and Python versions, see `Glue version
                    <https://docs.aws.amazon.com/glue/latest/dg/add-job.html>`__ in the developer
                    guide.

                    Jobs that are created without specifying a Glue version default to Glue 0.9.

            - **CrawlerDetails** *(dict) --*

              Details of the crawler when the node represents a crawler.

              - **Crawls** *(list) --*

                A list of crawls represented by the crawl node.

                - *(dict) --*

                  The details of a crawl in the workflow.

                  - **State** *(string) --*

                    The state of the crawler.

                  - **StartedOn** *(datetime) --*

                    The date and time on which the crawl started.

                  - **CompletedOn** *(datetime) --*

                    The date and time on which the crawl completed.

                  - **ErrorMessage** *(string) --*

                    The error message associated with the crawl.

                  - **LogGroup** *(string) --*

                    The log group associated with the crawl.

                  - **LogStream** *(string) --*

                    The log stream associated with the crawl.

        - **Edges** *(list) --*

          A list of all the directed connections between the nodes belonging to the workflow.

          - *(dict) --*

            An edge represents a directed connection between two AWS Glue components which are part
            of the workflow the edge belongs to.

            - **SourceId** *(string) --*

              The unique of the node within the workflow where the edge starts.

            - **DestinationId** *(string) --*

              The unique of the node within the workflow where the edge ends.
    """


_ClientGetWorkflowRunsResponseRunsGraphEdgesTypeDef = TypedDict(
    "_ClientGetWorkflowRunsResponseRunsGraphEdgesTypeDef",
    {"SourceId": str, "DestinationId": str},
    total=False,
)


class ClientGetWorkflowRunsResponseRunsGraphEdgesTypeDef(
    _ClientGetWorkflowRunsResponseRunsGraphEdgesTypeDef
):
    """
    Type definition for `ClientGetWorkflowRunsResponseRunsGraph` `Edges`

    An edge represents a directed connection between two AWS Glue components which are
    part of the workflow the edge belongs to.

    - **SourceId** *(string) --*

      The unique of the node within the workflow where the edge starts.

    - **DestinationId** *(string) --*

      The unique of the node within the workflow where the edge ends.
    """


_ClientGetWorkflowRunsResponseRunsGraphNodesCrawlerDetailsCrawlsTypeDef = TypedDict(
    "_ClientGetWorkflowRunsResponseRunsGraphNodesCrawlerDetailsCrawlsTypeDef",
    {
        "State": str,
        "StartedOn": datetime,
        "CompletedOn": datetime,
        "ErrorMessage": str,
        "LogGroup": str,
        "LogStream": str,
    },
    total=False,
)


class ClientGetWorkflowRunsResponseRunsGraphNodesCrawlerDetailsCrawlsTypeDef(
    _ClientGetWorkflowRunsResponseRunsGraphNodesCrawlerDetailsCrawlsTypeDef
):
    """
    Type definition for `ClientGetWorkflowRunsResponseRunsGraphNodesCrawlerDetails` `Crawls`

    The details of a crawl in the workflow.

    - **State** *(string) --*

      The state of the crawler.

    - **StartedOn** *(datetime) --*

      The date and time on which the crawl started.

    - **CompletedOn** *(datetime) --*

      The date and time on which the crawl completed.

    - **ErrorMessage** *(string) --*

      The error message associated with the crawl.

    - **LogGroup** *(string) --*

      The log group associated with the crawl.

    - **LogStream** *(string) --*

      The log stream associated with the crawl.
    """


_ClientGetWorkflowRunsResponseRunsGraphNodesCrawlerDetailsTypeDef = TypedDict(
    "_ClientGetWorkflowRunsResponseRunsGraphNodesCrawlerDetailsTypeDef",
    {
        "Crawls": List[
            ClientGetWorkflowRunsResponseRunsGraphNodesCrawlerDetailsCrawlsTypeDef
        ]
    },
    total=False,
)


class ClientGetWorkflowRunsResponseRunsGraphNodesCrawlerDetailsTypeDef(
    _ClientGetWorkflowRunsResponseRunsGraphNodesCrawlerDetailsTypeDef
):
    """
    Type definition for `ClientGetWorkflowRunsResponseRunsGraphNodes` `CrawlerDetails`

    Details of the crawler when the node represents a crawler.

    - **Crawls** *(list) --*

      A list of crawls represented by the crawl node.

      - *(dict) --*

        The details of a crawl in the workflow.

        - **State** *(string) --*

          The state of the crawler.

        - **StartedOn** *(datetime) --*

          The date and time on which the crawl started.

        - **CompletedOn** *(datetime) --*

          The date and time on which the crawl completed.

        - **ErrorMessage** *(string) --*

          The error message associated with the crawl.

        - **LogGroup** *(string) --*

          The log group associated with the crawl.

        - **LogStream** *(string) --*

          The log stream associated with the crawl.
    """


_ClientGetWorkflowRunsResponseRunsGraphNodesJobDetailsJobRunsNotificationPropertyTypeDef = TypedDict(
    "_ClientGetWorkflowRunsResponseRunsGraphNodesJobDetailsJobRunsNotificationPropertyTypeDef",
    {"NotifyDelayAfter": int},
    total=False,
)


class ClientGetWorkflowRunsResponseRunsGraphNodesJobDetailsJobRunsNotificationPropertyTypeDef(
    _ClientGetWorkflowRunsResponseRunsGraphNodesJobDetailsJobRunsNotificationPropertyTypeDef
):
    """
    Type definition for `ClientGetWorkflowRunsResponseRunsGraphNodesJobDetailsJobRuns` `NotificationProperty`

    Specifies configuration properties of a job run notification.

    - **NotifyDelayAfter** *(integer) --*

      After a job run starts, the number of minutes to wait before sending a job
      run delay notification.
    """


_ClientGetWorkflowRunsResponseRunsGraphNodesJobDetailsJobRunsPredecessorRunsTypeDef = TypedDict(
    "_ClientGetWorkflowRunsResponseRunsGraphNodesJobDetailsJobRunsPredecessorRunsTypeDef",
    {"JobName": str, "RunId": str},
    total=False,
)


class ClientGetWorkflowRunsResponseRunsGraphNodesJobDetailsJobRunsPredecessorRunsTypeDef(
    _ClientGetWorkflowRunsResponseRunsGraphNodesJobDetailsJobRunsPredecessorRunsTypeDef
):
    """
    Type definition for `ClientGetWorkflowRunsResponseRunsGraphNodesJobDetailsJobRuns` `PredecessorRuns`

    A job run that was used in the predicate of a conditional trigger that
    triggered this job run.

    - **JobName** *(string) --*

      The name of the job definition used by the predecessor job run.

    - **RunId** *(string) --*

      The job-run ID of the predecessor job run.
    """


_ClientGetWorkflowRunsResponseRunsGraphNodesJobDetailsJobRunsTypeDef = TypedDict(
    "_ClientGetWorkflowRunsResponseRunsGraphNodesJobDetailsJobRunsTypeDef",
    {
        "Id": str,
        "Attempt": int,
        "PreviousRunId": str,
        "TriggerName": str,
        "JobName": str,
        "StartedOn": datetime,
        "LastModifiedOn": datetime,
        "CompletedOn": datetime,
        "JobRunState": str,
        "Arguments": Dict[str, str],
        "ErrorMessage": str,
        "PredecessorRuns": List[
            ClientGetWorkflowRunsResponseRunsGraphNodesJobDetailsJobRunsPredecessorRunsTypeDef
        ],
        "AllocatedCapacity": int,
        "ExecutionTime": int,
        "Timeout": int,
        "MaxCapacity": float,
        "WorkerType": str,
        "NumberOfWorkers": int,
        "SecurityConfiguration": str,
        "LogGroupName": str,
        "NotificationProperty": ClientGetWorkflowRunsResponseRunsGraphNodesJobDetailsJobRunsNotificationPropertyTypeDef,
        "GlueVersion": str,
    },
    total=False,
)


class ClientGetWorkflowRunsResponseRunsGraphNodesJobDetailsJobRunsTypeDef(
    _ClientGetWorkflowRunsResponseRunsGraphNodesJobDetailsJobRunsTypeDef
):
    """
    Type definition for `ClientGetWorkflowRunsResponseRunsGraphNodesJobDetails` `JobRuns`

    Contains information about a job run.

    - **Id** *(string) --*

      The ID of this job run.

    - **Attempt** *(integer) --*

      The number of the attempt to run this job.

    - **PreviousRunId** *(string) --*

      The ID of the previous run of this job. For example, the ``JobRunId``
      specified in the ``StartJobRun`` action.

    - **TriggerName** *(string) --*

      The name of the trigger that started this job run.

    - **JobName** *(string) --*

      The name of the job definition being used in this run.

    - **StartedOn** *(datetime) --*

      The date and time at which this job run was started.

    - **LastModifiedOn** *(datetime) --*

      The last time that this job run was modified.

    - **CompletedOn** *(datetime) --*

      The date and time that this job run completed.

    - **JobRunState** *(string) --*

      The current state of the job run.

    - **Arguments** *(dict) --*

      The job arguments associated with this run. For this job run, they replace
      the default arguments set in the job definition itself.

      You can specify arguments here that your own job-execution script consumes,
      as well as arguments that AWS Glue itself consumes.

      For information about how to specify and consume your own job arguments, see
      the `Calling AWS Glue APIs in Python
      <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
      topic in the developer guide.

      For information about the key-value pairs that AWS Glue consumes to set up
      your job, see the `Special Parameters Used by AWS Glue
      <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
      topic in the developer guide.

      - *(string) --*

        - *(string) --*

    - **ErrorMessage** *(string) --*

      An error message associated with this job run.

    - **PredecessorRuns** *(list) --*

      A list of predecessors to this job run.

      - *(dict) --*

        A job run that was used in the predicate of a conditional trigger that
        triggered this job run.

        - **JobName** *(string) --*

          The name of the job definition used by the predecessor job run.

        - **RunId** *(string) --*

          The job-run ID of the predecessor job run.

    - **AllocatedCapacity** *(integer) --*

      This field is deprecated. Use ``MaxCapacity`` instead.

      The number of AWS Glue data processing units (DPUs) allocated to this JobRun.
      From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a relative
      measure of processing power that consists of 4 vCPUs of compute capacity and
      16 GB of memory. For more information, see the `AWS Glue pricing page
      <https://aws.amazon.com/glue/pricing/>`__ .

    - **ExecutionTime** *(integer) --*

      The amount of time (in seconds) that the job run consumed resources.

    - **Timeout** *(integer) --*

      The ``JobRun`` timeout in minutes. This is the maximum time that a job run
      can consume resources before it is terminated and enters ``TIMEOUT`` status.
      The default is 2,880 minutes (48 hours). This overrides the timeout value set
      in the parent job.

    - **MaxCapacity** *(float) --*

      The number of AWS Glue data processing units (DPUs) that can be allocated
      when this job runs. A DPU is a relative measure of processing power that
      consists of 4 vCPUs of compute capacity and 16 GB of memory. For more
      information, see the `AWS Glue pricing page
      <https://docs.aws.amazon.com/https:/aws.amazon.com/glue/pricing/>`__ .

      Do not set ``Max Capacity`` if using ``WorkerType`` and ``NumberOfWorkers`` .

      The value that can be allocated for ``MaxCapacity`` depends on whether you
      are running a Python shell job or an Apache Spark ETL job:

      * When you specify a Python shell job (``JobCommand.Name`` ="pythonshell"),
      you can allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.

      * When you specify an Apache Spark ETL job (``JobCommand.Name`` ="glueetl"),
      you can allocate from 2 to 100 DPUs. The default is 10 DPUs. This job type
      cannot have a fractional DPU allocation.

    - **WorkerType** *(string) --*

      The type of predefined worker that is allocated when a job runs. Accepts a
      value of Standard, G.1X, or G.2X.

      * For the ``Standard`` worker type, each worker provides 4 vCPU, 16 GB of
      memory and a 50GB disk, and 2 executors per worker.

      * For the ``G.1X`` worker type, each worker provides 4 vCPU, 16 GB of memory
      and a 64GB disk, and 1 executor per worker.

      * For the ``G.2X`` worker type, each worker provides 8 vCPU, 32 GB of memory
      and a 128GB disk, and 1 executor per worker.

    - **NumberOfWorkers** *(integer) --*

      The number of workers of a defined ``workerType`` that are allocated when a
      job runs.

      The maximum number of workers you can define are 299 for ``G.1X`` , and 149
      for ``G.2X`` .

    - **SecurityConfiguration** *(string) --*

      The name of the ``SecurityConfiguration`` structure to be used with this job
      run.

    - **LogGroupName** *(string) --*

      The name of the log group for secure logging that can be server-side
      encrypted in Amazon CloudWatch using AWS KMS. This name can be
      ``/aws-glue/jobs/`` , in which case the default encryption is ``NONE`` . If
      you add a role name and ``SecurityConfiguration`` name (in other words,
      ``/aws-glue/jobs-yourRoleName-yourSecurityConfigurationName/`` ), then that
      security configuration is used to encrypt the log group.

    - **NotificationProperty** *(dict) --*

      Specifies configuration properties of a job run notification.

      - **NotifyDelayAfter** *(integer) --*

        After a job run starts, the number of minutes to wait before sending a job
        run delay notification.

    - **GlueVersion** *(string) --*

      Glue version determines the versions of Apache Spark and Python that AWS Glue
      supports. The Python version indicates the version supported for jobs of type
      Spark.

      For more information about the available AWS Glue versions and corresponding
      Spark and Python versions, see `Glue version
      <https://docs.aws.amazon.com/glue/latest/dg/add-job.html>`__ in the developer
      guide.

      Jobs that are created without specifying a Glue version default to Glue 0.9.
    """


_ClientGetWorkflowRunsResponseRunsGraphNodesJobDetailsTypeDef = TypedDict(
    "_ClientGetWorkflowRunsResponseRunsGraphNodesJobDetailsTypeDef",
    {
        "JobRuns": List[
            ClientGetWorkflowRunsResponseRunsGraphNodesJobDetailsJobRunsTypeDef
        ]
    },
    total=False,
)


class ClientGetWorkflowRunsResponseRunsGraphNodesJobDetailsTypeDef(
    _ClientGetWorkflowRunsResponseRunsGraphNodesJobDetailsTypeDef
):
    """
    Type definition for `ClientGetWorkflowRunsResponseRunsGraphNodes` `JobDetails`

    Details of the Job when the node represents a Job.

    - **JobRuns** *(list) --*

      The information for the job runs represented by the job node.

      - *(dict) --*

        Contains information about a job run.

        - **Id** *(string) --*

          The ID of this job run.

        - **Attempt** *(integer) --*

          The number of the attempt to run this job.

        - **PreviousRunId** *(string) --*

          The ID of the previous run of this job. For example, the ``JobRunId``
          specified in the ``StartJobRun`` action.

        - **TriggerName** *(string) --*

          The name of the trigger that started this job run.

        - **JobName** *(string) --*

          The name of the job definition being used in this run.

        - **StartedOn** *(datetime) --*

          The date and time at which this job run was started.

        - **LastModifiedOn** *(datetime) --*

          The last time that this job run was modified.

        - **CompletedOn** *(datetime) --*

          The date and time that this job run completed.

        - **JobRunState** *(string) --*

          The current state of the job run.

        - **Arguments** *(dict) --*

          The job arguments associated with this run. For this job run, they replace
          the default arguments set in the job definition itself.

          You can specify arguments here that your own job-execution script consumes,
          as well as arguments that AWS Glue itself consumes.

          For information about how to specify and consume your own job arguments, see
          the `Calling AWS Glue APIs in Python
          <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
          topic in the developer guide.

          For information about the key-value pairs that AWS Glue consumes to set up
          your job, see the `Special Parameters Used by AWS Glue
          <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
          topic in the developer guide.

          - *(string) --*

            - *(string) --*

        - **ErrorMessage** *(string) --*

          An error message associated with this job run.

        - **PredecessorRuns** *(list) --*

          A list of predecessors to this job run.

          - *(dict) --*

            A job run that was used in the predicate of a conditional trigger that
            triggered this job run.

            - **JobName** *(string) --*

              The name of the job definition used by the predecessor job run.

            - **RunId** *(string) --*

              The job-run ID of the predecessor job run.

        - **AllocatedCapacity** *(integer) --*

          This field is deprecated. Use ``MaxCapacity`` instead.

          The number of AWS Glue data processing units (DPUs) allocated to this JobRun.
          From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a relative
          measure of processing power that consists of 4 vCPUs of compute capacity and
          16 GB of memory. For more information, see the `AWS Glue pricing page
          <https://aws.amazon.com/glue/pricing/>`__ .

        - **ExecutionTime** *(integer) --*

          The amount of time (in seconds) that the job run consumed resources.

        - **Timeout** *(integer) --*

          The ``JobRun`` timeout in minutes. This is the maximum time that a job run
          can consume resources before it is terminated and enters ``TIMEOUT`` status.
          The default is 2,880 minutes (48 hours). This overrides the timeout value set
          in the parent job.

        - **MaxCapacity** *(float) --*

          The number of AWS Glue data processing units (DPUs) that can be allocated
          when this job runs. A DPU is a relative measure of processing power that
          consists of 4 vCPUs of compute capacity and 16 GB of memory. For more
          information, see the `AWS Glue pricing page
          <https://docs.aws.amazon.com/https:/aws.amazon.com/glue/pricing/>`__ .

          Do not set ``Max Capacity`` if using ``WorkerType`` and ``NumberOfWorkers`` .

          The value that can be allocated for ``MaxCapacity`` depends on whether you
          are running a Python shell job or an Apache Spark ETL job:

          * When you specify a Python shell job (``JobCommand.Name`` ="pythonshell"),
          you can allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.

          * When you specify an Apache Spark ETL job (``JobCommand.Name`` ="glueetl"),
          you can allocate from 2 to 100 DPUs. The default is 10 DPUs. This job type
          cannot have a fractional DPU allocation.

        - **WorkerType** *(string) --*

          The type of predefined worker that is allocated when a job runs. Accepts a
          value of Standard, G.1X, or G.2X.

          * For the ``Standard`` worker type, each worker provides 4 vCPU, 16 GB of
          memory and a 50GB disk, and 2 executors per worker.

          * For the ``G.1X`` worker type, each worker provides 4 vCPU, 16 GB of memory
          and a 64GB disk, and 1 executor per worker.

          * For the ``G.2X`` worker type, each worker provides 8 vCPU, 32 GB of memory
          and a 128GB disk, and 1 executor per worker.

        - **NumberOfWorkers** *(integer) --*

          The number of workers of a defined ``workerType`` that are allocated when a
          job runs.

          The maximum number of workers you can define are 299 for ``G.1X`` , and 149
          for ``G.2X`` .

        - **SecurityConfiguration** *(string) --*

          The name of the ``SecurityConfiguration`` structure to be used with this job
          run.

        - **LogGroupName** *(string) --*

          The name of the log group for secure logging that can be server-side
          encrypted in Amazon CloudWatch using AWS KMS. This name can be
          ``/aws-glue/jobs/`` , in which case the default encryption is ``NONE`` . If
          you add a role name and ``SecurityConfiguration`` name (in other words,
          ``/aws-glue/jobs-yourRoleName-yourSecurityConfigurationName/`` ), then that
          security configuration is used to encrypt the log group.

        - **NotificationProperty** *(dict) --*

          Specifies configuration properties of a job run notification.

          - **NotifyDelayAfter** *(integer) --*

            After a job run starts, the number of minutes to wait before sending a job
            run delay notification.

        - **GlueVersion** *(string) --*

          Glue version determines the versions of Apache Spark and Python that AWS Glue
          supports. The Python version indicates the version supported for jobs of type
          Spark.

          For more information about the available AWS Glue versions and corresponding
          Spark and Python versions, see `Glue version
          <https://docs.aws.amazon.com/glue/latest/dg/add-job.html>`__ in the developer
          guide.

          Jobs that are created without specifying a Glue version default to Glue 0.9.
    """


_ClientGetWorkflowRunsResponseRunsGraphNodesTriggerDetailsTriggerActionsNotificationPropertyTypeDef = TypedDict(
    "_ClientGetWorkflowRunsResponseRunsGraphNodesTriggerDetailsTriggerActionsNotificationPropertyTypeDef",
    {"NotifyDelayAfter": int},
    total=False,
)


class ClientGetWorkflowRunsResponseRunsGraphNodesTriggerDetailsTriggerActionsNotificationPropertyTypeDef(
    _ClientGetWorkflowRunsResponseRunsGraphNodesTriggerDetailsTriggerActionsNotificationPropertyTypeDef
):
    """
    Type definition for `ClientGetWorkflowRunsResponseRunsGraphNodesTriggerDetailsTriggerActions` `NotificationProperty`

    Specifies configuration properties of a job run notification.

    - **NotifyDelayAfter** *(integer) --*

      After a job run starts, the number of minutes to wait before sending a
      job run delay notification.
    """


_ClientGetWorkflowRunsResponseRunsGraphNodesTriggerDetailsTriggerActionsTypeDef = TypedDict(
    "_ClientGetWorkflowRunsResponseRunsGraphNodesTriggerDetailsTriggerActionsTypeDef",
    {
        "JobName": str,
        "Arguments": Dict[str, str],
        "Timeout": int,
        "SecurityConfiguration": str,
        "NotificationProperty": ClientGetWorkflowRunsResponseRunsGraphNodesTriggerDetailsTriggerActionsNotificationPropertyTypeDef,
        "CrawlerName": str,
    },
    total=False,
)


class ClientGetWorkflowRunsResponseRunsGraphNodesTriggerDetailsTriggerActionsTypeDef(
    _ClientGetWorkflowRunsResponseRunsGraphNodesTriggerDetailsTriggerActionsTypeDef
):
    """
    Type definition for `ClientGetWorkflowRunsResponseRunsGraphNodesTriggerDetailsTrigger` `Actions`

    Defines an action to be initiated by a trigger.

    - **JobName** *(string) --*

      The name of a job to be executed.

    - **Arguments** *(dict) --*

      The job arguments used when this trigger fires. For this job run, they
      replace the default arguments set in the job definition itself.

      You can specify arguments here that your own job-execution script consumes,
      as well as arguments that AWS Glue itself consumes.

      For information about how to specify and consume your own Job arguments,
      see the `Calling AWS Glue APIs in Python
      <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
      topic in the developer guide.

      For information about the key-value pairs that AWS Glue consumes to set up
      your job, see the `Special Parameters Used by AWS Glue
      <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
      topic in the developer guide.

      - *(string) --*

        - *(string) --*

    - **Timeout** *(integer) --*

      The ``JobRun`` timeout in minutes. This is the maximum time that a job run
      can consume resources before it is terminated and enters ``TIMEOUT``
      status. The default is 2,880 minutes (48 hours). This overrides the timeout
      value set in the parent job.

    - **SecurityConfiguration** *(string) --*

      The name of the ``SecurityConfiguration`` structure to be used with this
      action.

    - **NotificationProperty** *(dict) --*

      Specifies configuration properties of a job run notification.

      - **NotifyDelayAfter** *(integer) --*

        After a job run starts, the number of minutes to wait before sending a
        job run delay notification.

    - **CrawlerName** *(string) --*

      The name of the crawler to be used with this action.
    """


_ClientGetWorkflowRunsResponseRunsGraphNodesTriggerDetailsTriggerPredicateConditionsTypeDef = TypedDict(
    "_ClientGetWorkflowRunsResponseRunsGraphNodesTriggerDetailsTriggerPredicateConditionsTypeDef",
    {
        "LogicalOperator": str,
        "JobName": str,
        "State": str,
        "CrawlerName": str,
        "CrawlState": str,
    },
    total=False,
)


class ClientGetWorkflowRunsResponseRunsGraphNodesTriggerDetailsTriggerPredicateConditionsTypeDef(
    _ClientGetWorkflowRunsResponseRunsGraphNodesTriggerDetailsTriggerPredicateConditionsTypeDef
):
    """
    Type definition for `ClientGetWorkflowRunsResponseRunsGraphNodesTriggerDetailsTriggerPredicate` `Conditions`

    Defines a condition under which a trigger fires.

    - **LogicalOperator** *(string) --*

      A logical operator.

    - **JobName** *(string) --*

      The name of the job whose ``JobRuns`` this condition applies to, and on
      which this trigger waits.

    - **State** *(string) --*

      The condition state. Currently, the values supported are ``SUCCEEDED`` ,
      ``STOPPED`` , ``TIMEOUT`` , and ``FAILED`` .

    - **CrawlerName** *(string) --*

      The name of the crawler to which this condition applies.

    - **CrawlState** *(string) --*

      The state of the crawler to which this condition applies.
    """


_ClientGetWorkflowRunsResponseRunsGraphNodesTriggerDetailsTriggerPredicateTypeDef = TypedDict(
    "_ClientGetWorkflowRunsResponseRunsGraphNodesTriggerDetailsTriggerPredicateTypeDef",
    {
        "Logical": str,
        "Conditions": List[
            ClientGetWorkflowRunsResponseRunsGraphNodesTriggerDetailsTriggerPredicateConditionsTypeDef
        ],
    },
    total=False,
)


class ClientGetWorkflowRunsResponseRunsGraphNodesTriggerDetailsTriggerPredicateTypeDef(
    _ClientGetWorkflowRunsResponseRunsGraphNodesTriggerDetailsTriggerPredicateTypeDef
):
    """
    Type definition for `ClientGetWorkflowRunsResponseRunsGraphNodesTriggerDetailsTrigger` `Predicate`

    The predicate of this trigger, which defines when it will fire.

    - **Logical** *(string) --*

      An optional field if only one condition is listed. If multiple conditions are
      listed, then this field is required.

    - **Conditions** *(list) --*

      A list of the conditions that determine when the trigger will fire.

      - *(dict) --*

        Defines a condition under which a trigger fires.

        - **LogicalOperator** *(string) --*

          A logical operator.

        - **JobName** *(string) --*

          The name of the job whose ``JobRuns`` this condition applies to, and on
          which this trigger waits.

        - **State** *(string) --*

          The condition state. Currently, the values supported are ``SUCCEEDED`` ,
          ``STOPPED`` , ``TIMEOUT`` , and ``FAILED`` .

        - **CrawlerName** *(string) --*

          The name of the crawler to which this condition applies.

        - **CrawlState** *(string) --*

          The state of the crawler to which this condition applies.
    """


_ClientGetWorkflowRunsResponseRunsGraphNodesTriggerDetailsTriggerTypeDef = TypedDict(
    "_ClientGetWorkflowRunsResponseRunsGraphNodesTriggerDetailsTriggerTypeDef",
    {
        "Name": str,
        "WorkflowName": str,
        "Id": str,
        "Type": str,
        "State": str,
        "Description": str,
        "Schedule": str,
        "Actions": List[
            ClientGetWorkflowRunsResponseRunsGraphNodesTriggerDetailsTriggerActionsTypeDef
        ],
        "Predicate": ClientGetWorkflowRunsResponseRunsGraphNodesTriggerDetailsTriggerPredicateTypeDef,
    },
    total=False,
)


class ClientGetWorkflowRunsResponseRunsGraphNodesTriggerDetailsTriggerTypeDef(
    _ClientGetWorkflowRunsResponseRunsGraphNodesTriggerDetailsTriggerTypeDef
):
    """
    Type definition for `ClientGetWorkflowRunsResponseRunsGraphNodesTriggerDetails` `Trigger`

    The information of the trigger represented by the trigger node.

    - **Name** *(string) --*

      The name of the trigger.

    - **WorkflowName** *(string) --*

      The name of the workflow associated with the trigger.

    - **Id** *(string) --*

      Reserved for future use.

    - **Type** *(string) --*

      The type of trigger that this is.

    - **State** *(string) --*

      The current state of the trigger.

    - **Description** *(string) --*

      A description of this trigger.

    - **Schedule** *(string) --*

      A ``cron`` expression used to specify the schedule (see `Time-Based Schedules
      for Jobs and Crawlers
      <https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html>`__
      . For example, to run something every day at 12:15 UTC, you would specify:
      ``cron(15 12 * * ? *)`` .

    - **Actions** *(list) --*

      The actions initiated by this trigger.

      - *(dict) --*

        Defines an action to be initiated by a trigger.

        - **JobName** *(string) --*

          The name of a job to be executed.

        - **Arguments** *(dict) --*

          The job arguments used when this trigger fires. For this job run, they
          replace the default arguments set in the job definition itself.

          You can specify arguments here that your own job-execution script consumes,
          as well as arguments that AWS Glue itself consumes.

          For information about how to specify and consume your own Job arguments,
          see the `Calling AWS Glue APIs in Python
          <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
          topic in the developer guide.

          For information about the key-value pairs that AWS Glue consumes to set up
          your job, see the `Special Parameters Used by AWS Glue
          <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
          topic in the developer guide.

          - *(string) --*

            - *(string) --*

        - **Timeout** *(integer) --*

          The ``JobRun`` timeout in minutes. This is the maximum time that a job run
          can consume resources before it is terminated and enters ``TIMEOUT``
          status. The default is 2,880 minutes (48 hours). This overrides the timeout
          value set in the parent job.

        - **SecurityConfiguration** *(string) --*

          The name of the ``SecurityConfiguration`` structure to be used with this
          action.

        - **NotificationProperty** *(dict) --*

          Specifies configuration properties of a job run notification.

          - **NotifyDelayAfter** *(integer) --*

            After a job run starts, the number of minutes to wait before sending a
            job run delay notification.

        - **CrawlerName** *(string) --*

          The name of the crawler to be used with this action.

    - **Predicate** *(dict) --*

      The predicate of this trigger, which defines when it will fire.

      - **Logical** *(string) --*

        An optional field if only one condition is listed. If multiple conditions are
        listed, then this field is required.

      - **Conditions** *(list) --*

        A list of the conditions that determine when the trigger will fire.

        - *(dict) --*

          Defines a condition under which a trigger fires.

          - **LogicalOperator** *(string) --*

            A logical operator.

          - **JobName** *(string) --*

            The name of the job whose ``JobRuns`` this condition applies to, and on
            which this trigger waits.

          - **State** *(string) --*

            The condition state. Currently, the values supported are ``SUCCEEDED`` ,
            ``STOPPED`` , ``TIMEOUT`` , and ``FAILED`` .

          - **CrawlerName** *(string) --*

            The name of the crawler to which this condition applies.

          - **CrawlState** *(string) --*

            The state of the crawler to which this condition applies.
    """


_ClientGetWorkflowRunsResponseRunsGraphNodesTriggerDetailsTypeDef = TypedDict(
    "_ClientGetWorkflowRunsResponseRunsGraphNodesTriggerDetailsTypeDef",
    {
        "Trigger": ClientGetWorkflowRunsResponseRunsGraphNodesTriggerDetailsTriggerTypeDef
    },
    total=False,
)


class ClientGetWorkflowRunsResponseRunsGraphNodesTriggerDetailsTypeDef(
    _ClientGetWorkflowRunsResponseRunsGraphNodesTriggerDetailsTypeDef
):
    """
    Type definition for `ClientGetWorkflowRunsResponseRunsGraphNodes` `TriggerDetails`

    Details of the Trigger when the node represents a Trigger.

    - **Trigger** *(dict) --*

      The information of the trigger represented by the trigger node.

      - **Name** *(string) --*

        The name of the trigger.

      - **WorkflowName** *(string) --*

        The name of the workflow associated with the trigger.

      - **Id** *(string) --*

        Reserved for future use.

      - **Type** *(string) --*

        The type of trigger that this is.

      - **State** *(string) --*

        The current state of the trigger.

      - **Description** *(string) --*

        A description of this trigger.

      - **Schedule** *(string) --*

        A ``cron`` expression used to specify the schedule (see `Time-Based Schedules
        for Jobs and Crawlers
        <https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html>`__
        . For example, to run something every day at 12:15 UTC, you would specify:
        ``cron(15 12 * * ? *)`` .

      - **Actions** *(list) --*

        The actions initiated by this trigger.

        - *(dict) --*

          Defines an action to be initiated by a trigger.

          - **JobName** *(string) --*

            The name of a job to be executed.

          - **Arguments** *(dict) --*

            The job arguments used when this trigger fires. For this job run, they
            replace the default arguments set in the job definition itself.

            You can specify arguments here that your own job-execution script consumes,
            as well as arguments that AWS Glue itself consumes.

            For information about how to specify and consume your own Job arguments,
            see the `Calling AWS Glue APIs in Python
            <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
            topic in the developer guide.

            For information about the key-value pairs that AWS Glue consumes to set up
            your job, see the `Special Parameters Used by AWS Glue
            <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
            topic in the developer guide.

            - *(string) --*

              - *(string) --*

          - **Timeout** *(integer) --*

            The ``JobRun`` timeout in minutes. This is the maximum time that a job run
            can consume resources before it is terminated and enters ``TIMEOUT``
            status. The default is 2,880 minutes (48 hours). This overrides the timeout
            value set in the parent job.

          - **SecurityConfiguration** *(string) --*

            The name of the ``SecurityConfiguration`` structure to be used with this
            action.

          - **NotificationProperty** *(dict) --*

            Specifies configuration properties of a job run notification.

            - **NotifyDelayAfter** *(integer) --*

              After a job run starts, the number of minutes to wait before sending a
              job run delay notification.

          - **CrawlerName** *(string) --*

            The name of the crawler to be used with this action.

      - **Predicate** *(dict) --*

        The predicate of this trigger, which defines when it will fire.

        - **Logical** *(string) --*

          An optional field if only one condition is listed. If multiple conditions are
          listed, then this field is required.

        - **Conditions** *(list) --*

          A list of the conditions that determine when the trigger will fire.

          - *(dict) --*

            Defines a condition under which a trigger fires.

            - **LogicalOperator** *(string) --*

              A logical operator.

            - **JobName** *(string) --*

              The name of the job whose ``JobRuns`` this condition applies to, and on
              which this trigger waits.

            - **State** *(string) --*

              The condition state. Currently, the values supported are ``SUCCEEDED`` ,
              ``STOPPED`` , ``TIMEOUT`` , and ``FAILED`` .

            - **CrawlerName** *(string) --*

              The name of the crawler to which this condition applies.

            - **CrawlState** *(string) --*

              The state of the crawler to which this condition applies.
    """


_ClientGetWorkflowRunsResponseRunsGraphNodesTypeDef = TypedDict(
    "_ClientGetWorkflowRunsResponseRunsGraphNodesTypeDef",
    {
        "Type": str,
        "Name": str,
        "UniqueId": str,
        "TriggerDetails": ClientGetWorkflowRunsResponseRunsGraphNodesTriggerDetailsTypeDef,
        "JobDetails": ClientGetWorkflowRunsResponseRunsGraphNodesJobDetailsTypeDef,
        "CrawlerDetails": ClientGetWorkflowRunsResponseRunsGraphNodesCrawlerDetailsTypeDef,
    },
    total=False,
)


class ClientGetWorkflowRunsResponseRunsGraphNodesTypeDef(
    _ClientGetWorkflowRunsResponseRunsGraphNodesTypeDef
):
    """
    Type definition for `ClientGetWorkflowRunsResponseRunsGraph` `Nodes`

    A node represents an AWS Glue component like Trigger, Job etc. which is part of a
    workflow.

    - **Type** *(string) --*

      The type of AWS Glue component represented by the node.

    - **Name** *(string) --*

      The name of the AWS Glue component represented by the node.

    - **UniqueId** *(string) --*

      The unique Id assigned to the node within the workflow.

    - **TriggerDetails** *(dict) --*

      Details of the Trigger when the node represents a Trigger.

      - **Trigger** *(dict) --*

        The information of the trigger represented by the trigger node.

        - **Name** *(string) --*

          The name of the trigger.

        - **WorkflowName** *(string) --*

          The name of the workflow associated with the trigger.

        - **Id** *(string) --*

          Reserved for future use.

        - **Type** *(string) --*

          The type of trigger that this is.

        - **State** *(string) --*

          The current state of the trigger.

        - **Description** *(string) --*

          A description of this trigger.

        - **Schedule** *(string) --*

          A ``cron`` expression used to specify the schedule (see `Time-Based Schedules
          for Jobs and Crawlers
          <https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html>`__
          . For example, to run something every day at 12:15 UTC, you would specify:
          ``cron(15 12 * * ? *)`` .

        - **Actions** *(list) --*

          The actions initiated by this trigger.

          - *(dict) --*

            Defines an action to be initiated by a trigger.

            - **JobName** *(string) --*

              The name of a job to be executed.

            - **Arguments** *(dict) --*

              The job arguments used when this trigger fires. For this job run, they
              replace the default arguments set in the job definition itself.

              You can specify arguments here that your own job-execution script consumes,
              as well as arguments that AWS Glue itself consumes.

              For information about how to specify and consume your own Job arguments,
              see the `Calling AWS Glue APIs in Python
              <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
              topic in the developer guide.

              For information about the key-value pairs that AWS Glue consumes to set up
              your job, see the `Special Parameters Used by AWS Glue
              <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
              topic in the developer guide.

              - *(string) --*

                - *(string) --*

            - **Timeout** *(integer) --*

              The ``JobRun`` timeout in minutes. This is the maximum time that a job run
              can consume resources before it is terminated and enters ``TIMEOUT``
              status. The default is 2,880 minutes (48 hours). This overrides the timeout
              value set in the parent job.

            - **SecurityConfiguration** *(string) --*

              The name of the ``SecurityConfiguration`` structure to be used with this
              action.

            - **NotificationProperty** *(dict) --*

              Specifies configuration properties of a job run notification.

              - **NotifyDelayAfter** *(integer) --*

                After a job run starts, the number of minutes to wait before sending a
                job run delay notification.

            - **CrawlerName** *(string) --*

              The name of the crawler to be used with this action.

        - **Predicate** *(dict) --*

          The predicate of this trigger, which defines when it will fire.

          - **Logical** *(string) --*

            An optional field if only one condition is listed. If multiple conditions are
            listed, then this field is required.

          - **Conditions** *(list) --*

            A list of the conditions that determine when the trigger will fire.

            - *(dict) --*

              Defines a condition under which a trigger fires.

              - **LogicalOperator** *(string) --*

                A logical operator.

              - **JobName** *(string) --*

                The name of the job whose ``JobRuns`` this condition applies to, and on
                which this trigger waits.

              - **State** *(string) --*

                The condition state. Currently, the values supported are ``SUCCEEDED`` ,
                ``STOPPED`` , ``TIMEOUT`` , and ``FAILED`` .

              - **CrawlerName** *(string) --*

                The name of the crawler to which this condition applies.

              - **CrawlState** *(string) --*

                The state of the crawler to which this condition applies.

    - **JobDetails** *(dict) --*

      Details of the Job when the node represents a Job.

      - **JobRuns** *(list) --*

        The information for the job runs represented by the job node.

        - *(dict) --*

          Contains information about a job run.

          - **Id** *(string) --*

            The ID of this job run.

          - **Attempt** *(integer) --*

            The number of the attempt to run this job.

          - **PreviousRunId** *(string) --*

            The ID of the previous run of this job. For example, the ``JobRunId``
            specified in the ``StartJobRun`` action.

          - **TriggerName** *(string) --*

            The name of the trigger that started this job run.

          - **JobName** *(string) --*

            The name of the job definition being used in this run.

          - **StartedOn** *(datetime) --*

            The date and time at which this job run was started.

          - **LastModifiedOn** *(datetime) --*

            The last time that this job run was modified.

          - **CompletedOn** *(datetime) --*

            The date and time that this job run completed.

          - **JobRunState** *(string) --*

            The current state of the job run.

          - **Arguments** *(dict) --*

            The job arguments associated with this run. For this job run, they replace
            the default arguments set in the job definition itself.

            You can specify arguments here that your own job-execution script consumes,
            as well as arguments that AWS Glue itself consumes.

            For information about how to specify and consume your own job arguments, see
            the `Calling AWS Glue APIs in Python
            <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
            topic in the developer guide.

            For information about the key-value pairs that AWS Glue consumes to set up
            your job, see the `Special Parameters Used by AWS Glue
            <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
            topic in the developer guide.

            - *(string) --*

              - *(string) --*

          - **ErrorMessage** *(string) --*

            An error message associated with this job run.

          - **PredecessorRuns** *(list) --*

            A list of predecessors to this job run.

            - *(dict) --*

              A job run that was used in the predicate of a conditional trigger that
              triggered this job run.

              - **JobName** *(string) --*

                The name of the job definition used by the predecessor job run.

              - **RunId** *(string) --*

                The job-run ID of the predecessor job run.

          - **AllocatedCapacity** *(integer) --*

            This field is deprecated. Use ``MaxCapacity`` instead.

            The number of AWS Glue data processing units (DPUs) allocated to this JobRun.
            From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a relative
            measure of processing power that consists of 4 vCPUs of compute capacity and
            16 GB of memory. For more information, see the `AWS Glue pricing page
            <https://aws.amazon.com/glue/pricing/>`__ .

          - **ExecutionTime** *(integer) --*

            The amount of time (in seconds) that the job run consumed resources.

          - **Timeout** *(integer) --*

            The ``JobRun`` timeout in minutes. This is the maximum time that a job run
            can consume resources before it is terminated and enters ``TIMEOUT`` status.
            The default is 2,880 minutes (48 hours). This overrides the timeout value set
            in the parent job.

          - **MaxCapacity** *(float) --*

            The number of AWS Glue data processing units (DPUs) that can be allocated
            when this job runs. A DPU is a relative measure of processing power that
            consists of 4 vCPUs of compute capacity and 16 GB of memory. For more
            information, see the `AWS Glue pricing page
            <https://docs.aws.amazon.com/https:/aws.amazon.com/glue/pricing/>`__ .

            Do not set ``Max Capacity`` if using ``WorkerType`` and ``NumberOfWorkers`` .

            The value that can be allocated for ``MaxCapacity`` depends on whether you
            are running a Python shell job or an Apache Spark ETL job:

            * When you specify a Python shell job (``JobCommand.Name`` ="pythonshell"),
            you can allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.

            * When you specify an Apache Spark ETL job (``JobCommand.Name`` ="glueetl"),
            you can allocate from 2 to 100 DPUs. The default is 10 DPUs. This job type
            cannot have a fractional DPU allocation.

          - **WorkerType** *(string) --*

            The type of predefined worker that is allocated when a job runs. Accepts a
            value of Standard, G.1X, or G.2X.

            * For the ``Standard`` worker type, each worker provides 4 vCPU, 16 GB of
            memory and a 50GB disk, and 2 executors per worker.

            * For the ``G.1X`` worker type, each worker provides 4 vCPU, 16 GB of memory
            and a 64GB disk, and 1 executor per worker.

            * For the ``G.2X`` worker type, each worker provides 8 vCPU, 32 GB of memory
            and a 128GB disk, and 1 executor per worker.

          - **NumberOfWorkers** *(integer) --*

            The number of workers of a defined ``workerType`` that are allocated when a
            job runs.

            The maximum number of workers you can define are 299 for ``G.1X`` , and 149
            for ``G.2X`` .

          - **SecurityConfiguration** *(string) --*

            The name of the ``SecurityConfiguration`` structure to be used with this job
            run.

          - **LogGroupName** *(string) --*

            The name of the log group for secure logging that can be server-side
            encrypted in Amazon CloudWatch using AWS KMS. This name can be
            ``/aws-glue/jobs/`` , in which case the default encryption is ``NONE`` . If
            you add a role name and ``SecurityConfiguration`` name (in other words,
            ``/aws-glue/jobs-yourRoleName-yourSecurityConfigurationName/`` ), then that
            security configuration is used to encrypt the log group.

          - **NotificationProperty** *(dict) --*

            Specifies configuration properties of a job run notification.

            - **NotifyDelayAfter** *(integer) --*

              After a job run starts, the number of minutes to wait before sending a job
              run delay notification.

          - **GlueVersion** *(string) --*

            Glue version determines the versions of Apache Spark and Python that AWS Glue
            supports. The Python version indicates the version supported for jobs of type
            Spark.

            For more information about the available AWS Glue versions and corresponding
            Spark and Python versions, see `Glue version
            <https://docs.aws.amazon.com/glue/latest/dg/add-job.html>`__ in the developer
            guide.

            Jobs that are created without specifying a Glue version default to Glue 0.9.

    - **CrawlerDetails** *(dict) --*

      Details of the crawler when the node represents a crawler.

      - **Crawls** *(list) --*

        A list of crawls represented by the crawl node.

        - *(dict) --*

          The details of a crawl in the workflow.

          - **State** *(string) --*

            The state of the crawler.

          - **StartedOn** *(datetime) --*

            The date and time on which the crawl started.

          - **CompletedOn** *(datetime) --*

            The date and time on which the crawl completed.

          - **ErrorMessage** *(string) --*

            The error message associated with the crawl.

          - **LogGroup** *(string) --*

            The log group associated with the crawl.

          - **LogStream** *(string) --*

            The log stream associated with the crawl.
    """


_ClientGetWorkflowRunsResponseRunsGraphTypeDef = TypedDict(
    "_ClientGetWorkflowRunsResponseRunsGraphTypeDef",
    {
        "Nodes": List[ClientGetWorkflowRunsResponseRunsGraphNodesTypeDef],
        "Edges": List[ClientGetWorkflowRunsResponseRunsGraphEdgesTypeDef],
    },
    total=False,
)


class ClientGetWorkflowRunsResponseRunsGraphTypeDef(
    _ClientGetWorkflowRunsResponseRunsGraphTypeDef
):
    """
    Type definition for `ClientGetWorkflowRunsResponseRuns` `Graph`

    The graph representing all the AWS Glue components that belong to the workflow as nodes
    and directed connections between them as edges.

    - **Nodes** *(list) --*

      A list of the the AWS Glue components belong to the workflow represented as nodes.

      - *(dict) --*

        A node represents an AWS Glue component like Trigger, Job etc. which is part of a
        workflow.

        - **Type** *(string) --*

          The type of AWS Glue component represented by the node.

        - **Name** *(string) --*

          The name of the AWS Glue component represented by the node.

        - **UniqueId** *(string) --*

          The unique Id assigned to the node within the workflow.

        - **TriggerDetails** *(dict) --*

          Details of the Trigger when the node represents a Trigger.

          - **Trigger** *(dict) --*

            The information of the trigger represented by the trigger node.

            - **Name** *(string) --*

              The name of the trigger.

            - **WorkflowName** *(string) --*

              The name of the workflow associated with the trigger.

            - **Id** *(string) --*

              Reserved for future use.

            - **Type** *(string) --*

              The type of trigger that this is.

            - **State** *(string) --*

              The current state of the trigger.

            - **Description** *(string) --*

              A description of this trigger.

            - **Schedule** *(string) --*

              A ``cron`` expression used to specify the schedule (see `Time-Based Schedules
              for Jobs and Crawlers
              <https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html>`__
              . For example, to run something every day at 12:15 UTC, you would specify:
              ``cron(15 12 * * ? *)`` .

            - **Actions** *(list) --*

              The actions initiated by this trigger.

              - *(dict) --*

                Defines an action to be initiated by a trigger.

                - **JobName** *(string) --*

                  The name of a job to be executed.

                - **Arguments** *(dict) --*

                  The job arguments used when this trigger fires. For this job run, they
                  replace the default arguments set in the job definition itself.

                  You can specify arguments here that your own job-execution script consumes,
                  as well as arguments that AWS Glue itself consumes.

                  For information about how to specify and consume your own Job arguments,
                  see the `Calling AWS Glue APIs in Python
                  <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
                  topic in the developer guide.

                  For information about the key-value pairs that AWS Glue consumes to set up
                  your job, see the `Special Parameters Used by AWS Glue
                  <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
                  topic in the developer guide.

                  - *(string) --*

                    - *(string) --*

                - **Timeout** *(integer) --*

                  The ``JobRun`` timeout in minutes. This is the maximum time that a job run
                  can consume resources before it is terminated and enters ``TIMEOUT``
                  status. The default is 2,880 minutes (48 hours). This overrides the timeout
                  value set in the parent job.

                - **SecurityConfiguration** *(string) --*

                  The name of the ``SecurityConfiguration`` structure to be used with this
                  action.

                - **NotificationProperty** *(dict) --*

                  Specifies configuration properties of a job run notification.

                  - **NotifyDelayAfter** *(integer) --*

                    After a job run starts, the number of minutes to wait before sending a
                    job run delay notification.

                - **CrawlerName** *(string) --*

                  The name of the crawler to be used with this action.

            - **Predicate** *(dict) --*

              The predicate of this trigger, which defines when it will fire.

              - **Logical** *(string) --*

                An optional field if only one condition is listed. If multiple conditions are
                listed, then this field is required.

              - **Conditions** *(list) --*

                A list of the conditions that determine when the trigger will fire.

                - *(dict) --*

                  Defines a condition under which a trigger fires.

                  - **LogicalOperator** *(string) --*

                    A logical operator.

                  - **JobName** *(string) --*

                    The name of the job whose ``JobRuns`` this condition applies to, and on
                    which this trigger waits.

                  - **State** *(string) --*

                    The condition state. Currently, the values supported are ``SUCCEEDED`` ,
                    ``STOPPED`` , ``TIMEOUT`` , and ``FAILED`` .

                  - **CrawlerName** *(string) --*

                    The name of the crawler to which this condition applies.

                  - **CrawlState** *(string) --*

                    The state of the crawler to which this condition applies.

        - **JobDetails** *(dict) --*

          Details of the Job when the node represents a Job.

          - **JobRuns** *(list) --*

            The information for the job runs represented by the job node.

            - *(dict) --*

              Contains information about a job run.

              - **Id** *(string) --*

                The ID of this job run.

              - **Attempt** *(integer) --*

                The number of the attempt to run this job.

              - **PreviousRunId** *(string) --*

                The ID of the previous run of this job. For example, the ``JobRunId``
                specified in the ``StartJobRun`` action.

              - **TriggerName** *(string) --*

                The name of the trigger that started this job run.

              - **JobName** *(string) --*

                The name of the job definition being used in this run.

              - **StartedOn** *(datetime) --*

                The date and time at which this job run was started.

              - **LastModifiedOn** *(datetime) --*

                The last time that this job run was modified.

              - **CompletedOn** *(datetime) --*

                The date and time that this job run completed.

              - **JobRunState** *(string) --*

                The current state of the job run.

              - **Arguments** *(dict) --*

                The job arguments associated with this run. For this job run, they replace
                the default arguments set in the job definition itself.

                You can specify arguments here that your own job-execution script consumes,
                as well as arguments that AWS Glue itself consumes.

                For information about how to specify and consume your own job arguments, see
                the `Calling AWS Glue APIs in Python
                <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
                topic in the developer guide.

                For information about the key-value pairs that AWS Glue consumes to set up
                your job, see the `Special Parameters Used by AWS Glue
                <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
                topic in the developer guide.

                - *(string) --*

                  - *(string) --*

              - **ErrorMessage** *(string) --*

                An error message associated with this job run.

              - **PredecessorRuns** *(list) --*

                A list of predecessors to this job run.

                - *(dict) --*

                  A job run that was used in the predicate of a conditional trigger that
                  triggered this job run.

                  - **JobName** *(string) --*

                    The name of the job definition used by the predecessor job run.

                  - **RunId** *(string) --*

                    The job-run ID of the predecessor job run.

              - **AllocatedCapacity** *(integer) --*

                This field is deprecated. Use ``MaxCapacity`` instead.

                The number of AWS Glue data processing units (DPUs) allocated to this JobRun.
                From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a relative
                measure of processing power that consists of 4 vCPUs of compute capacity and
                16 GB of memory. For more information, see the `AWS Glue pricing page
                <https://aws.amazon.com/glue/pricing/>`__ .

              - **ExecutionTime** *(integer) --*

                The amount of time (in seconds) that the job run consumed resources.

              - **Timeout** *(integer) --*

                The ``JobRun`` timeout in minutes. This is the maximum time that a job run
                can consume resources before it is terminated and enters ``TIMEOUT`` status.
                The default is 2,880 minutes (48 hours). This overrides the timeout value set
                in the parent job.

              - **MaxCapacity** *(float) --*

                The number of AWS Glue data processing units (DPUs) that can be allocated
                when this job runs. A DPU is a relative measure of processing power that
                consists of 4 vCPUs of compute capacity and 16 GB of memory. For more
                information, see the `AWS Glue pricing page
                <https://docs.aws.amazon.com/https:/aws.amazon.com/glue/pricing/>`__ .

                Do not set ``Max Capacity`` if using ``WorkerType`` and ``NumberOfWorkers`` .

                The value that can be allocated for ``MaxCapacity`` depends on whether you
                are running a Python shell job or an Apache Spark ETL job:

                * When you specify a Python shell job (``JobCommand.Name`` ="pythonshell"),
                you can allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.

                * When you specify an Apache Spark ETL job (``JobCommand.Name`` ="glueetl"),
                you can allocate from 2 to 100 DPUs. The default is 10 DPUs. This job type
                cannot have a fractional DPU allocation.

              - **WorkerType** *(string) --*

                The type of predefined worker that is allocated when a job runs. Accepts a
                value of Standard, G.1X, or G.2X.

                * For the ``Standard`` worker type, each worker provides 4 vCPU, 16 GB of
                memory and a 50GB disk, and 2 executors per worker.

                * For the ``G.1X`` worker type, each worker provides 4 vCPU, 16 GB of memory
                and a 64GB disk, and 1 executor per worker.

                * For the ``G.2X`` worker type, each worker provides 8 vCPU, 32 GB of memory
                and a 128GB disk, and 1 executor per worker.

              - **NumberOfWorkers** *(integer) --*

                The number of workers of a defined ``workerType`` that are allocated when a
                job runs.

                The maximum number of workers you can define are 299 for ``G.1X`` , and 149
                for ``G.2X`` .

              - **SecurityConfiguration** *(string) --*

                The name of the ``SecurityConfiguration`` structure to be used with this job
                run.

              - **LogGroupName** *(string) --*

                The name of the log group for secure logging that can be server-side
                encrypted in Amazon CloudWatch using AWS KMS. This name can be
                ``/aws-glue/jobs/`` , in which case the default encryption is ``NONE`` . If
                you add a role name and ``SecurityConfiguration`` name (in other words,
                ``/aws-glue/jobs-yourRoleName-yourSecurityConfigurationName/`` ), then that
                security configuration is used to encrypt the log group.

              - **NotificationProperty** *(dict) --*

                Specifies configuration properties of a job run notification.

                - **NotifyDelayAfter** *(integer) --*

                  After a job run starts, the number of minutes to wait before sending a job
                  run delay notification.

              - **GlueVersion** *(string) --*

                Glue version determines the versions of Apache Spark and Python that AWS Glue
                supports. The Python version indicates the version supported for jobs of type
                Spark.

                For more information about the available AWS Glue versions and corresponding
                Spark and Python versions, see `Glue version
                <https://docs.aws.amazon.com/glue/latest/dg/add-job.html>`__ in the developer
                guide.

                Jobs that are created without specifying a Glue version default to Glue 0.9.

        - **CrawlerDetails** *(dict) --*

          Details of the crawler when the node represents a crawler.

          - **Crawls** *(list) --*

            A list of crawls represented by the crawl node.

            - *(dict) --*

              The details of a crawl in the workflow.

              - **State** *(string) --*

                The state of the crawler.

              - **StartedOn** *(datetime) --*

                The date and time on which the crawl started.

              - **CompletedOn** *(datetime) --*

                The date and time on which the crawl completed.

              - **ErrorMessage** *(string) --*

                The error message associated with the crawl.

              - **LogGroup** *(string) --*

                The log group associated with the crawl.

              - **LogStream** *(string) --*

                The log stream associated with the crawl.

    - **Edges** *(list) --*

      A list of all the directed connections between the nodes belonging to the workflow.

      - *(dict) --*

        An edge represents a directed connection between two AWS Glue components which are
        part of the workflow the edge belongs to.

        - **SourceId** *(string) --*

          The unique of the node within the workflow where the edge starts.

        - **DestinationId** *(string) --*

          The unique of the node within the workflow where the edge ends.
    """


_ClientGetWorkflowRunsResponseRunsStatisticsTypeDef = TypedDict(
    "_ClientGetWorkflowRunsResponseRunsStatisticsTypeDef",
    {
        "TotalActions": int,
        "TimeoutActions": int,
        "FailedActions": int,
        "StoppedActions": int,
        "SucceededActions": int,
        "RunningActions": int,
    },
    total=False,
)


class ClientGetWorkflowRunsResponseRunsStatisticsTypeDef(
    _ClientGetWorkflowRunsResponseRunsStatisticsTypeDef
):
    """
    Type definition for `ClientGetWorkflowRunsResponseRuns` `Statistics`

    The statistics of the run.

    - **TotalActions** *(integer) --*

      Total number of Actions in the workflow run.

    - **TimeoutActions** *(integer) --*

      Total number of Actions which timed out.

    - **FailedActions** *(integer) --*

      Total number of Actions which have failed.

    - **StoppedActions** *(integer) --*

      Total number of Actions which have stopped.

    - **SucceededActions** *(integer) --*

      Total number of Actions which have succeeded.

    - **RunningActions** *(integer) --*

      Total number Actions in running state.
    """


_ClientGetWorkflowRunsResponseRunsTypeDef = TypedDict(
    "_ClientGetWorkflowRunsResponseRunsTypeDef",
    {
        "Name": str,
        "WorkflowRunId": str,
        "WorkflowRunProperties": Dict[str, str],
        "StartedOn": datetime,
        "CompletedOn": datetime,
        "Status": str,
        "Statistics": ClientGetWorkflowRunsResponseRunsStatisticsTypeDef,
        "Graph": ClientGetWorkflowRunsResponseRunsGraphTypeDef,
    },
    total=False,
)


class ClientGetWorkflowRunsResponseRunsTypeDef(
    _ClientGetWorkflowRunsResponseRunsTypeDef
):
    """
    Type definition for `ClientGetWorkflowRunsResponse` `Runs`

    A workflow run is an execution of a workflow providing all the runtime information.

    - **Name** *(string) --*

      Name of the workflow which was executed.

    - **WorkflowRunId** *(string) --*

      The ID of this workflow run.

    - **WorkflowRunProperties** *(dict) --*

      The workflow run properties which were set during the run.

      - *(string) --*

        - *(string) --*

    - **StartedOn** *(datetime) --*

      The date and time when the workflow run was started.

    - **CompletedOn** *(datetime) --*

      The date and time when the workflow run completed.

    - **Status** *(string) --*

      The status of the workflow run.

    - **Statistics** *(dict) --*

      The statistics of the run.

      - **TotalActions** *(integer) --*

        Total number of Actions in the workflow run.

      - **TimeoutActions** *(integer) --*

        Total number of Actions which timed out.

      - **FailedActions** *(integer) --*

        Total number of Actions which have failed.

      - **StoppedActions** *(integer) --*

        Total number of Actions which have stopped.

      - **SucceededActions** *(integer) --*

        Total number of Actions which have succeeded.

      - **RunningActions** *(integer) --*

        Total number Actions in running state.

    - **Graph** *(dict) --*

      The graph representing all the AWS Glue components that belong to the workflow as nodes
      and directed connections between them as edges.

      - **Nodes** *(list) --*

        A list of the the AWS Glue components belong to the workflow represented as nodes.

        - *(dict) --*

          A node represents an AWS Glue component like Trigger, Job etc. which is part of a
          workflow.

          - **Type** *(string) --*

            The type of AWS Glue component represented by the node.

          - **Name** *(string) --*

            The name of the AWS Glue component represented by the node.

          - **UniqueId** *(string) --*

            The unique Id assigned to the node within the workflow.

          - **TriggerDetails** *(dict) --*

            Details of the Trigger when the node represents a Trigger.

            - **Trigger** *(dict) --*

              The information of the trigger represented by the trigger node.

              - **Name** *(string) --*

                The name of the trigger.

              - **WorkflowName** *(string) --*

                The name of the workflow associated with the trigger.

              - **Id** *(string) --*

                Reserved for future use.

              - **Type** *(string) --*

                The type of trigger that this is.

              - **State** *(string) --*

                The current state of the trigger.

              - **Description** *(string) --*

                A description of this trigger.

              - **Schedule** *(string) --*

                A ``cron`` expression used to specify the schedule (see `Time-Based Schedules
                for Jobs and Crawlers
                <https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html>`__
                . For example, to run something every day at 12:15 UTC, you would specify:
                ``cron(15 12 * * ? *)`` .

              - **Actions** *(list) --*

                The actions initiated by this trigger.

                - *(dict) --*

                  Defines an action to be initiated by a trigger.

                  - **JobName** *(string) --*

                    The name of a job to be executed.

                  - **Arguments** *(dict) --*

                    The job arguments used when this trigger fires. For this job run, they
                    replace the default arguments set in the job definition itself.

                    You can specify arguments here that your own job-execution script consumes,
                    as well as arguments that AWS Glue itself consumes.

                    For information about how to specify and consume your own Job arguments,
                    see the `Calling AWS Glue APIs in Python
                    <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
                    topic in the developer guide.

                    For information about the key-value pairs that AWS Glue consumes to set up
                    your job, see the `Special Parameters Used by AWS Glue
                    <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
                    topic in the developer guide.

                    - *(string) --*

                      - *(string) --*

                  - **Timeout** *(integer) --*

                    The ``JobRun`` timeout in minutes. This is the maximum time that a job run
                    can consume resources before it is terminated and enters ``TIMEOUT``
                    status. The default is 2,880 minutes (48 hours). This overrides the timeout
                    value set in the parent job.

                  - **SecurityConfiguration** *(string) --*

                    The name of the ``SecurityConfiguration`` structure to be used with this
                    action.

                  - **NotificationProperty** *(dict) --*

                    Specifies configuration properties of a job run notification.

                    - **NotifyDelayAfter** *(integer) --*

                      After a job run starts, the number of minutes to wait before sending a
                      job run delay notification.

                  - **CrawlerName** *(string) --*

                    The name of the crawler to be used with this action.

              - **Predicate** *(dict) --*

                The predicate of this trigger, which defines when it will fire.

                - **Logical** *(string) --*

                  An optional field if only one condition is listed. If multiple conditions are
                  listed, then this field is required.

                - **Conditions** *(list) --*

                  A list of the conditions that determine when the trigger will fire.

                  - *(dict) --*

                    Defines a condition under which a trigger fires.

                    - **LogicalOperator** *(string) --*

                      A logical operator.

                    - **JobName** *(string) --*

                      The name of the job whose ``JobRuns`` this condition applies to, and on
                      which this trigger waits.

                    - **State** *(string) --*

                      The condition state. Currently, the values supported are ``SUCCEEDED`` ,
                      ``STOPPED`` , ``TIMEOUT`` , and ``FAILED`` .

                    - **CrawlerName** *(string) --*

                      The name of the crawler to which this condition applies.

                    - **CrawlState** *(string) --*

                      The state of the crawler to which this condition applies.

          - **JobDetails** *(dict) --*

            Details of the Job when the node represents a Job.

            - **JobRuns** *(list) --*

              The information for the job runs represented by the job node.

              - *(dict) --*

                Contains information about a job run.

                - **Id** *(string) --*

                  The ID of this job run.

                - **Attempt** *(integer) --*

                  The number of the attempt to run this job.

                - **PreviousRunId** *(string) --*

                  The ID of the previous run of this job. For example, the ``JobRunId``
                  specified in the ``StartJobRun`` action.

                - **TriggerName** *(string) --*

                  The name of the trigger that started this job run.

                - **JobName** *(string) --*

                  The name of the job definition being used in this run.

                - **StartedOn** *(datetime) --*

                  The date and time at which this job run was started.

                - **LastModifiedOn** *(datetime) --*

                  The last time that this job run was modified.

                - **CompletedOn** *(datetime) --*

                  The date and time that this job run completed.

                - **JobRunState** *(string) --*

                  The current state of the job run.

                - **Arguments** *(dict) --*

                  The job arguments associated with this run. For this job run, they replace
                  the default arguments set in the job definition itself.

                  You can specify arguments here that your own job-execution script consumes,
                  as well as arguments that AWS Glue itself consumes.

                  For information about how to specify and consume your own job arguments, see
                  the `Calling AWS Glue APIs in Python
                  <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
                  topic in the developer guide.

                  For information about the key-value pairs that AWS Glue consumes to set up
                  your job, see the `Special Parameters Used by AWS Glue
                  <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
                  topic in the developer guide.

                  - *(string) --*

                    - *(string) --*

                - **ErrorMessage** *(string) --*

                  An error message associated with this job run.

                - **PredecessorRuns** *(list) --*

                  A list of predecessors to this job run.

                  - *(dict) --*

                    A job run that was used in the predicate of a conditional trigger that
                    triggered this job run.

                    - **JobName** *(string) --*

                      The name of the job definition used by the predecessor job run.

                    - **RunId** *(string) --*

                      The job-run ID of the predecessor job run.

                - **AllocatedCapacity** *(integer) --*

                  This field is deprecated. Use ``MaxCapacity`` instead.

                  The number of AWS Glue data processing units (DPUs) allocated to this JobRun.
                  From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a relative
                  measure of processing power that consists of 4 vCPUs of compute capacity and
                  16 GB of memory. For more information, see the `AWS Glue pricing page
                  <https://aws.amazon.com/glue/pricing/>`__ .

                - **ExecutionTime** *(integer) --*

                  The amount of time (in seconds) that the job run consumed resources.

                - **Timeout** *(integer) --*

                  The ``JobRun`` timeout in minutes. This is the maximum time that a job run
                  can consume resources before it is terminated and enters ``TIMEOUT`` status.
                  The default is 2,880 minutes (48 hours). This overrides the timeout value set
                  in the parent job.

                - **MaxCapacity** *(float) --*

                  The number of AWS Glue data processing units (DPUs) that can be allocated
                  when this job runs. A DPU is a relative measure of processing power that
                  consists of 4 vCPUs of compute capacity and 16 GB of memory. For more
                  information, see the `AWS Glue pricing page
                  <https://docs.aws.amazon.com/https:/aws.amazon.com/glue/pricing/>`__ .

                  Do not set ``Max Capacity`` if using ``WorkerType`` and ``NumberOfWorkers`` .

                  The value that can be allocated for ``MaxCapacity`` depends on whether you
                  are running a Python shell job or an Apache Spark ETL job:

                  * When you specify a Python shell job (``JobCommand.Name`` ="pythonshell"),
                  you can allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.

                  * When you specify an Apache Spark ETL job (``JobCommand.Name`` ="glueetl"),
                  you can allocate from 2 to 100 DPUs. The default is 10 DPUs. This job type
                  cannot have a fractional DPU allocation.

                - **WorkerType** *(string) --*

                  The type of predefined worker that is allocated when a job runs. Accepts a
                  value of Standard, G.1X, or G.2X.

                  * For the ``Standard`` worker type, each worker provides 4 vCPU, 16 GB of
                  memory and a 50GB disk, and 2 executors per worker.

                  * For the ``G.1X`` worker type, each worker provides 4 vCPU, 16 GB of memory
                  and a 64GB disk, and 1 executor per worker.

                  * For the ``G.2X`` worker type, each worker provides 8 vCPU, 32 GB of memory
                  and a 128GB disk, and 1 executor per worker.

                - **NumberOfWorkers** *(integer) --*

                  The number of workers of a defined ``workerType`` that are allocated when a
                  job runs.

                  The maximum number of workers you can define are 299 for ``G.1X`` , and 149
                  for ``G.2X`` .

                - **SecurityConfiguration** *(string) --*

                  The name of the ``SecurityConfiguration`` structure to be used with this job
                  run.

                - **LogGroupName** *(string) --*

                  The name of the log group for secure logging that can be server-side
                  encrypted in Amazon CloudWatch using AWS KMS. This name can be
                  ``/aws-glue/jobs/`` , in which case the default encryption is ``NONE`` . If
                  you add a role name and ``SecurityConfiguration`` name (in other words,
                  ``/aws-glue/jobs-yourRoleName-yourSecurityConfigurationName/`` ), then that
                  security configuration is used to encrypt the log group.

                - **NotificationProperty** *(dict) --*

                  Specifies configuration properties of a job run notification.

                  - **NotifyDelayAfter** *(integer) --*

                    After a job run starts, the number of minutes to wait before sending a job
                    run delay notification.

                - **GlueVersion** *(string) --*

                  Glue version determines the versions of Apache Spark and Python that AWS Glue
                  supports. The Python version indicates the version supported for jobs of type
                  Spark.

                  For more information about the available AWS Glue versions and corresponding
                  Spark and Python versions, see `Glue version
                  <https://docs.aws.amazon.com/glue/latest/dg/add-job.html>`__ in the developer
                  guide.

                  Jobs that are created without specifying a Glue version default to Glue 0.9.

          - **CrawlerDetails** *(dict) --*

            Details of the crawler when the node represents a crawler.

            - **Crawls** *(list) --*

              A list of crawls represented by the crawl node.

              - *(dict) --*

                The details of a crawl in the workflow.

                - **State** *(string) --*

                  The state of the crawler.

                - **StartedOn** *(datetime) --*

                  The date and time on which the crawl started.

                - **CompletedOn** *(datetime) --*

                  The date and time on which the crawl completed.

                - **ErrorMessage** *(string) --*

                  The error message associated with the crawl.

                - **LogGroup** *(string) --*

                  The log group associated with the crawl.

                - **LogStream** *(string) --*

                  The log stream associated with the crawl.

      - **Edges** *(list) --*

        A list of all the directed connections between the nodes belonging to the workflow.

        - *(dict) --*

          An edge represents a directed connection between two AWS Glue components which are
          part of the workflow the edge belongs to.

          - **SourceId** *(string) --*

            The unique of the node within the workflow where the edge starts.

          - **DestinationId** *(string) --*

            The unique of the node within the workflow where the edge ends.
    """


_ClientGetWorkflowRunsResponseTypeDef = TypedDict(
    "_ClientGetWorkflowRunsResponseTypeDef",
    {"Runs": List[ClientGetWorkflowRunsResponseRunsTypeDef], "NextToken": str},
    total=False,
)


class ClientGetWorkflowRunsResponseTypeDef(_ClientGetWorkflowRunsResponseTypeDef):
    """
    Type definition for `ClientGetWorkflowRuns` `Response`

    - **Runs** *(list) --*

      A list of workflow run metadata objects.

      - *(dict) --*

        A workflow run is an execution of a workflow providing all the runtime information.

        - **Name** *(string) --*

          Name of the workflow which was executed.

        - **WorkflowRunId** *(string) --*

          The ID of this workflow run.

        - **WorkflowRunProperties** *(dict) --*

          The workflow run properties which were set during the run.

          - *(string) --*

            - *(string) --*

        - **StartedOn** *(datetime) --*

          The date and time when the workflow run was started.

        - **CompletedOn** *(datetime) --*

          The date and time when the workflow run completed.

        - **Status** *(string) --*

          The status of the workflow run.

        - **Statistics** *(dict) --*

          The statistics of the run.

          - **TotalActions** *(integer) --*

            Total number of Actions in the workflow run.

          - **TimeoutActions** *(integer) --*

            Total number of Actions which timed out.

          - **FailedActions** *(integer) --*

            Total number of Actions which have failed.

          - **StoppedActions** *(integer) --*

            Total number of Actions which have stopped.

          - **SucceededActions** *(integer) --*

            Total number of Actions which have succeeded.

          - **RunningActions** *(integer) --*

            Total number Actions in running state.

        - **Graph** *(dict) --*

          The graph representing all the AWS Glue components that belong to the workflow as nodes
          and directed connections between them as edges.

          - **Nodes** *(list) --*

            A list of the the AWS Glue components belong to the workflow represented as nodes.

            - *(dict) --*

              A node represents an AWS Glue component like Trigger, Job etc. which is part of a
              workflow.

              - **Type** *(string) --*

                The type of AWS Glue component represented by the node.

              - **Name** *(string) --*

                The name of the AWS Glue component represented by the node.

              - **UniqueId** *(string) --*

                The unique Id assigned to the node within the workflow.

              - **TriggerDetails** *(dict) --*

                Details of the Trigger when the node represents a Trigger.

                - **Trigger** *(dict) --*

                  The information of the trigger represented by the trigger node.

                  - **Name** *(string) --*

                    The name of the trigger.

                  - **WorkflowName** *(string) --*

                    The name of the workflow associated with the trigger.

                  - **Id** *(string) --*

                    Reserved for future use.

                  - **Type** *(string) --*

                    The type of trigger that this is.

                  - **State** *(string) --*

                    The current state of the trigger.

                  - **Description** *(string) --*

                    A description of this trigger.

                  - **Schedule** *(string) --*

                    A ``cron`` expression used to specify the schedule (see `Time-Based Schedules
                    for Jobs and Crawlers
                    <https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html>`__
                    . For example, to run something every day at 12:15 UTC, you would specify:
                    ``cron(15 12 * * ? *)`` .

                  - **Actions** *(list) --*

                    The actions initiated by this trigger.

                    - *(dict) --*

                      Defines an action to be initiated by a trigger.

                      - **JobName** *(string) --*

                        The name of a job to be executed.

                      - **Arguments** *(dict) --*

                        The job arguments used when this trigger fires. For this job run, they
                        replace the default arguments set in the job definition itself.

                        You can specify arguments here that your own job-execution script consumes,
                        as well as arguments that AWS Glue itself consumes.

                        For information about how to specify and consume your own Job arguments,
                        see the `Calling AWS Glue APIs in Python
                        <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
                        topic in the developer guide.

                        For information about the key-value pairs that AWS Glue consumes to set up
                        your job, see the `Special Parameters Used by AWS Glue
                        <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
                        topic in the developer guide.

                        - *(string) --*

                          - *(string) --*

                      - **Timeout** *(integer) --*

                        The ``JobRun`` timeout in minutes. This is the maximum time that a job run
                        can consume resources before it is terminated and enters ``TIMEOUT``
                        status. The default is 2,880 minutes (48 hours). This overrides the timeout
                        value set in the parent job.

                      - **SecurityConfiguration** *(string) --*

                        The name of the ``SecurityConfiguration`` structure to be used with this
                        action.

                      - **NotificationProperty** *(dict) --*

                        Specifies configuration properties of a job run notification.

                        - **NotifyDelayAfter** *(integer) --*

                          After a job run starts, the number of minutes to wait before sending a
                          job run delay notification.

                      - **CrawlerName** *(string) --*

                        The name of the crawler to be used with this action.

                  - **Predicate** *(dict) --*

                    The predicate of this trigger, which defines when it will fire.

                    - **Logical** *(string) --*

                      An optional field if only one condition is listed. If multiple conditions are
                      listed, then this field is required.

                    - **Conditions** *(list) --*

                      A list of the conditions that determine when the trigger will fire.

                      - *(dict) --*

                        Defines a condition under which a trigger fires.

                        - **LogicalOperator** *(string) --*

                          A logical operator.

                        - **JobName** *(string) --*

                          The name of the job whose ``JobRuns`` this condition applies to, and on
                          which this trigger waits.

                        - **State** *(string) --*

                          The condition state. Currently, the values supported are ``SUCCEEDED`` ,
                          ``STOPPED`` , ``TIMEOUT`` , and ``FAILED`` .

                        - **CrawlerName** *(string) --*

                          The name of the crawler to which this condition applies.

                        - **CrawlState** *(string) --*

                          The state of the crawler to which this condition applies.

              - **JobDetails** *(dict) --*

                Details of the Job when the node represents a Job.

                - **JobRuns** *(list) --*

                  The information for the job runs represented by the job node.

                  - *(dict) --*

                    Contains information about a job run.

                    - **Id** *(string) --*

                      The ID of this job run.

                    - **Attempt** *(integer) --*

                      The number of the attempt to run this job.

                    - **PreviousRunId** *(string) --*

                      The ID of the previous run of this job. For example, the ``JobRunId``
                      specified in the ``StartJobRun`` action.

                    - **TriggerName** *(string) --*

                      The name of the trigger that started this job run.

                    - **JobName** *(string) --*

                      The name of the job definition being used in this run.

                    - **StartedOn** *(datetime) --*

                      The date and time at which this job run was started.

                    - **LastModifiedOn** *(datetime) --*

                      The last time that this job run was modified.

                    - **CompletedOn** *(datetime) --*

                      The date and time that this job run completed.

                    - **JobRunState** *(string) --*

                      The current state of the job run.

                    - **Arguments** *(dict) --*

                      The job arguments associated with this run. For this job run, they replace
                      the default arguments set in the job definition itself.

                      You can specify arguments here that your own job-execution script consumes,
                      as well as arguments that AWS Glue itself consumes.

                      For information about how to specify and consume your own job arguments, see
                      the `Calling AWS Glue APIs in Python
                      <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
                      topic in the developer guide.

                      For information about the key-value pairs that AWS Glue consumes to set up
                      your job, see the `Special Parameters Used by AWS Glue
                      <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
                      topic in the developer guide.

                      - *(string) --*

                        - *(string) --*

                    - **ErrorMessage** *(string) --*

                      An error message associated with this job run.

                    - **PredecessorRuns** *(list) --*

                      A list of predecessors to this job run.

                      - *(dict) --*

                        A job run that was used in the predicate of a conditional trigger that
                        triggered this job run.

                        - **JobName** *(string) --*

                          The name of the job definition used by the predecessor job run.

                        - **RunId** *(string) --*

                          The job-run ID of the predecessor job run.

                    - **AllocatedCapacity** *(integer) --*

                      This field is deprecated. Use ``MaxCapacity`` instead.

                      The number of AWS Glue data processing units (DPUs) allocated to this JobRun.
                      From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a relative
                      measure of processing power that consists of 4 vCPUs of compute capacity and
                      16 GB of memory. For more information, see the `AWS Glue pricing page
                      <https://aws.amazon.com/glue/pricing/>`__ .

                    - **ExecutionTime** *(integer) --*

                      The amount of time (in seconds) that the job run consumed resources.

                    - **Timeout** *(integer) --*

                      The ``JobRun`` timeout in minutes. This is the maximum time that a job run
                      can consume resources before it is terminated and enters ``TIMEOUT`` status.
                      The default is 2,880 minutes (48 hours). This overrides the timeout value set
                      in the parent job.

                    - **MaxCapacity** *(float) --*

                      The number of AWS Glue data processing units (DPUs) that can be allocated
                      when this job runs. A DPU is a relative measure of processing power that
                      consists of 4 vCPUs of compute capacity and 16 GB of memory. For more
                      information, see the `AWS Glue pricing page
                      <https://docs.aws.amazon.com/https:/aws.amazon.com/glue/pricing/>`__ .

                      Do not set ``Max Capacity`` if using ``WorkerType`` and ``NumberOfWorkers`` .

                      The value that can be allocated for ``MaxCapacity`` depends on whether you
                      are running a Python shell job or an Apache Spark ETL job:

                      * When you specify a Python shell job (``JobCommand.Name`` ="pythonshell"),
                      you can allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.

                      * When you specify an Apache Spark ETL job (``JobCommand.Name`` ="glueetl"),
                      you can allocate from 2 to 100 DPUs. The default is 10 DPUs. This job type
                      cannot have a fractional DPU allocation.

                    - **WorkerType** *(string) --*

                      The type of predefined worker that is allocated when a job runs. Accepts a
                      value of Standard, G.1X, or G.2X.

                      * For the ``Standard`` worker type, each worker provides 4 vCPU, 16 GB of
                      memory and a 50GB disk, and 2 executors per worker.

                      * For the ``G.1X`` worker type, each worker provides 4 vCPU, 16 GB of memory
                      and a 64GB disk, and 1 executor per worker.

                      * For the ``G.2X`` worker type, each worker provides 8 vCPU, 32 GB of memory
                      and a 128GB disk, and 1 executor per worker.

                    - **NumberOfWorkers** *(integer) --*

                      The number of workers of a defined ``workerType`` that are allocated when a
                      job runs.

                      The maximum number of workers you can define are 299 for ``G.1X`` , and 149
                      for ``G.2X`` .

                    - **SecurityConfiguration** *(string) --*

                      The name of the ``SecurityConfiguration`` structure to be used with this job
                      run.

                    - **LogGroupName** *(string) --*

                      The name of the log group for secure logging that can be server-side
                      encrypted in Amazon CloudWatch using AWS KMS. This name can be
                      ``/aws-glue/jobs/`` , in which case the default encryption is ``NONE`` . If
                      you add a role name and ``SecurityConfiguration`` name (in other words,
                      ``/aws-glue/jobs-yourRoleName-yourSecurityConfigurationName/`` ), then that
                      security configuration is used to encrypt the log group.

                    - **NotificationProperty** *(dict) --*

                      Specifies configuration properties of a job run notification.

                      - **NotifyDelayAfter** *(integer) --*

                        After a job run starts, the number of minutes to wait before sending a job
                        run delay notification.

                    - **GlueVersion** *(string) --*

                      Glue version determines the versions of Apache Spark and Python that AWS Glue
                      supports. The Python version indicates the version supported for jobs of type
                      Spark.

                      For more information about the available AWS Glue versions and corresponding
                      Spark and Python versions, see `Glue version
                      <https://docs.aws.amazon.com/glue/latest/dg/add-job.html>`__ in the developer
                      guide.

                      Jobs that are created without specifying a Glue version default to Glue 0.9.

              - **CrawlerDetails** *(dict) --*

                Details of the crawler when the node represents a crawler.

                - **Crawls** *(list) --*

                  A list of crawls represented by the crawl node.

                  - *(dict) --*

                    The details of a crawl in the workflow.

                    - **State** *(string) --*

                      The state of the crawler.

                    - **StartedOn** *(datetime) --*

                      The date and time on which the crawl started.

                    - **CompletedOn** *(datetime) --*

                      The date and time on which the crawl completed.

                    - **ErrorMessage** *(string) --*

                      The error message associated with the crawl.

                    - **LogGroup** *(string) --*

                      The log group associated with the crawl.

                    - **LogStream** *(string) --*

                      The log stream associated with the crawl.

          - **Edges** *(list) --*

            A list of all the directed connections between the nodes belonging to the workflow.

            - *(dict) --*

              An edge represents a directed connection between two AWS Glue components which are
              part of the workflow the edge belongs to.

              - **SourceId** *(string) --*

                The unique of the node within the workflow where the edge starts.

              - **DestinationId** *(string) --*

                The unique of the node within the workflow where the edge ends.

    - **NextToken** *(string) --*

      A continuation token, if not all requested workflow runs have been returned.
    """


_ClientListCrawlersResponseTypeDef = TypedDict(
    "_ClientListCrawlersResponseTypeDef",
    {"CrawlerNames": List[str], "NextToken": str},
    total=False,
)


class ClientListCrawlersResponseTypeDef(_ClientListCrawlersResponseTypeDef):
    """
    Type definition for `ClientListCrawlers` `Response`

    - **CrawlerNames** *(list) --*

      The names of all crawlers in the account, or the crawlers with the specified tags.

      - *(string) --*

    - **NextToken** *(string) --*

      A continuation token, if the returned list does not contain the last metric available.
    """


_ClientListDevEndpointsResponseTypeDef = TypedDict(
    "_ClientListDevEndpointsResponseTypeDef",
    {"DevEndpointNames": List[str], "NextToken": str},
    total=False,
)


class ClientListDevEndpointsResponseTypeDef(_ClientListDevEndpointsResponseTypeDef):
    """
    Type definition for `ClientListDevEndpoints` `Response`

    - **DevEndpointNames** *(list) --*

      The names of all the ``DevEndpoint`` s in the account, or the ``DevEndpoint`` s with the
      specified tags.

      - *(string) --*

    - **NextToken** *(string) --*

      A continuation token, if the returned list does not contain the last metric available.
    """


_ClientListJobsResponseTypeDef = TypedDict(
    "_ClientListJobsResponseTypeDef",
    {"JobNames": List[str], "NextToken": str},
    total=False,
)


class ClientListJobsResponseTypeDef(_ClientListJobsResponseTypeDef):
    """
    Type definition for `ClientListJobs` `Response`

    - **JobNames** *(list) --*

      The names of all jobs in the account, or the jobs with the specified tags.

      - *(string) --*

    - **NextToken** *(string) --*

      A continuation token, if the returned list does not contain the last metric available.
    """


_ClientListTriggersResponseTypeDef = TypedDict(
    "_ClientListTriggersResponseTypeDef",
    {"TriggerNames": List[str], "NextToken": str},
    total=False,
)


class ClientListTriggersResponseTypeDef(_ClientListTriggersResponseTypeDef):
    """
    Type definition for `ClientListTriggers` `Response`

    - **TriggerNames** *(list) --*

      The names of all triggers in the account, or the triggers with the specified tags.

      - *(string) --*

    - **NextToken** *(string) --*

      A continuation token, if the returned list does not contain the last metric available.
    """


_ClientListWorkflowsResponseTypeDef = TypedDict(
    "_ClientListWorkflowsResponseTypeDef",
    {"Workflows": List[str], "NextToken": str},
    total=False,
)


class ClientListWorkflowsResponseTypeDef(_ClientListWorkflowsResponseTypeDef):
    """
    Type definition for `ClientListWorkflows` `Response`

    - **Workflows** *(list) --*

      List of names of workflows in the account.

      - *(string) --*

    - **NextToken** *(string) --*

      A continuation token, if not all workflow names have been returned.
    """


_RequiredClientPutDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionTypeDef = TypedDict(
    "_RequiredClientPutDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionTypeDef",
    {"ReturnConnectionPasswordEncrypted": bool},
)
_OptionalClientPutDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionTypeDef = TypedDict(
    "_OptionalClientPutDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionTypeDef",
    {"AwsKmsKeyId": str},
    total=False,
)


class ClientPutDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionTypeDef(
    _RequiredClientPutDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionTypeDef,
    _OptionalClientPutDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionTypeDef,
):
    """
    Type definition for `ClientPutDataCatalogEncryptionSettingsDataCatalogEncryptionSettings` `ConnectionPasswordEncryption`

    When connection password protection is enabled, the Data Catalog uses a customer-provided key
    to encrypt the password as part of ``CreateConnection`` or ``UpdateConnection`` and store it in
    the ``ENCRYPTED_PASSWORD`` field in the connection properties. You can enable catalog
    encryption or only password encryption.

    - **ReturnConnectionPasswordEncrypted** *(boolean) --* **[REQUIRED]**

      When the ``ReturnConnectionPasswordEncrypted`` flag is set to "true", passwords remain
      encrypted in the responses of ``GetConnection`` and ``GetConnections`` . This encryption
      takes effect independently from catalog encryption.

    - **AwsKmsKeyId** *(string) --*

      An AWS KMS key that is used to encrypt the connection password.

      If connection password protection is enabled, the caller of ``CreateConnection`` and
      ``UpdateConnection`` needs at least ``kms:Encrypt`` permission on the specified AWS KMS key,
      to encrypt passwords before storing them in the Data Catalog.

      You can set the decrypt permission to enable or restrict access on the password key according
      to your security requirements.
    """


_RequiredClientPutDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestTypeDef = TypedDict(
    "_RequiredClientPutDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestTypeDef",
    {"CatalogEncryptionMode": str},
)
_OptionalClientPutDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestTypeDef = TypedDict(
    "_OptionalClientPutDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestTypeDef",
    {"SseAwsKmsKeyId": str},
    total=False,
)


class ClientPutDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestTypeDef(
    _RequiredClientPutDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestTypeDef,
    _OptionalClientPutDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestTypeDef,
):
    """
    Type definition for `ClientPutDataCatalogEncryptionSettingsDataCatalogEncryptionSettings` `EncryptionAtRest`

    Specifies the encryption-at-rest configuration for the Data Catalog.

    - **CatalogEncryptionMode** *(string) --* **[REQUIRED]**

      The encryption-at-rest mode for encrypting Data Catalog data.

    - **SseAwsKmsKeyId** *(string) --*

      The ID of the AWS KMS key to use for encryption at rest.
    """


_ClientPutDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsTypeDef = TypedDict(
    "_ClientPutDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsTypeDef",
    {
        "EncryptionAtRest": ClientPutDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRestTypeDef,
        "ConnectionPasswordEncryption": ClientPutDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryptionTypeDef,
    },
    total=False,
)


class ClientPutDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsTypeDef(
    _ClientPutDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsTypeDef
):
    """
    Type definition for `ClientPutDataCatalogEncryptionSettings` `DataCatalogEncryptionSettings`

    The security configuration to set.

    - **EncryptionAtRest** *(dict) --*

      Specifies the encryption-at-rest configuration for the Data Catalog.

      - **CatalogEncryptionMode** *(string) --* **[REQUIRED]**

        The encryption-at-rest mode for encrypting Data Catalog data.

      - **SseAwsKmsKeyId** *(string) --*

        The ID of the AWS KMS key to use for encryption at rest.

    - **ConnectionPasswordEncryption** *(dict) --*

      When connection password protection is enabled, the Data Catalog uses a customer-provided key
      to encrypt the password as part of ``CreateConnection`` or ``UpdateConnection`` and store it in
      the ``ENCRYPTED_PASSWORD`` field in the connection properties. You can enable catalog
      encryption or only password encryption.

      - **ReturnConnectionPasswordEncrypted** *(boolean) --* **[REQUIRED]**

        When the ``ReturnConnectionPasswordEncrypted`` flag is set to "true", passwords remain
        encrypted in the responses of ``GetConnection`` and ``GetConnections`` . This encryption
        takes effect independently from catalog encryption.

      - **AwsKmsKeyId** *(string) --*

        An AWS KMS key that is used to encrypt the connection password.

        If connection password protection is enabled, the caller of ``CreateConnection`` and
        ``UpdateConnection`` needs at least ``kms:Encrypt`` permission on the specified AWS KMS key,
        to encrypt passwords before storing them in the Data Catalog.

        You can set the decrypt permission to enable or restrict access on the password key according
        to your security requirements.
    """


_ClientPutResourcePolicyResponseTypeDef = TypedDict(
    "_ClientPutResourcePolicyResponseTypeDef", {"PolicyHash": str}, total=False
)


class ClientPutResourcePolicyResponseTypeDef(_ClientPutResourcePolicyResponseTypeDef):
    """
    Type definition for `ClientPutResourcePolicy` `Response`

    - **PolicyHash** *(string) --*

      A hash of the policy that has just been set. This must be included in a subsequent call that
      overwrites or updates this policy.
    """


_ClientResetJobBookmarkResponseJobBookmarkEntryTypeDef = TypedDict(
    "_ClientResetJobBookmarkResponseJobBookmarkEntryTypeDef",
    {
        "JobName": str,
        "Version": int,
        "Run": int,
        "Attempt": int,
        "PreviousRunId": str,
        "RunId": str,
        "JobBookmark": str,
    },
    total=False,
)


class ClientResetJobBookmarkResponseJobBookmarkEntryTypeDef(
    _ClientResetJobBookmarkResponseJobBookmarkEntryTypeDef
):
    """
    Type definition for `ClientResetJobBookmarkResponse` `JobBookmarkEntry`

    The reset bookmark entry.

    - **JobName** *(string) --*

      The name of the job in question.

    - **Version** *(integer) --*

      The version of the job.

    - **Run** *(integer) --*

      The run ID number.

    - **Attempt** *(integer) --*

      The attempt ID number.

    - **PreviousRunId** *(string) --*

      The unique run identifier associated with the previous job run.

    - **RunId** *(string) --*

      The run ID number.

    - **JobBookmark** *(string) --*

      The bookmark itself.
    """


_ClientResetJobBookmarkResponseTypeDef = TypedDict(
    "_ClientResetJobBookmarkResponseTypeDef",
    {"JobBookmarkEntry": ClientResetJobBookmarkResponseJobBookmarkEntryTypeDef},
    total=False,
)


class ClientResetJobBookmarkResponseTypeDef(_ClientResetJobBookmarkResponseTypeDef):
    """
    Type definition for `ClientResetJobBookmark` `Response`

    - **JobBookmarkEntry** *(dict) --*

      The reset bookmark entry.

      - **JobName** *(string) --*

        The name of the job in question.

      - **Version** *(integer) --*

        The version of the job.

      - **Run** *(integer) --*

        The run ID number.

      - **Attempt** *(integer) --*

        The attempt ID number.

      - **PreviousRunId** *(string) --*

        The unique run identifier associated with the previous job run.

      - **RunId** *(string) --*

        The run ID number.

      - **JobBookmark** *(string) --*

        The bookmark itself.
    """


_ClientSearchTablesFiltersTypeDef = TypedDict(
    "_ClientSearchTablesFiltersTypeDef",
    {"Key": str, "Value": str, "Comparator": str},
    total=False,
)


class ClientSearchTablesFiltersTypeDef(_ClientSearchTablesFiltersTypeDef):
    """
    Type definition for `ClientSearchTables` `Filters`

    Defines a property predicate.

    - **Key** *(string) --*

      The key of the property.

    - **Value** *(string) --*

      The value of the property.

    - **Comparator** *(string) --*

      The comparator used to compare this property to others.
    """


_ClientSearchTablesResponseTableListPartitionKeysTypeDef = TypedDict(
    "_ClientSearchTablesResponseTableListPartitionKeysTypeDef",
    {"Name": str, "Type": str, "Comment": str, "Parameters": Dict[str, str]},
    total=False,
)


class ClientSearchTablesResponseTableListPartitionKeysTypeDef(
    _ClientSearchTablesResponseTableListPartitionKeysTypeDef
):
    """
    Type definition for `ClientSearchTablesResponseTableList` `PartitionKeys`

    A column in a ``Table`` .

    - **Name** *(string) --*

      The name of the ``Column`` .

    - **Type** *(string) --*

      The data type of the ``Column`` .

    - **Comment** *(string) --*

      A free-form text comment.

    - **Parameters** *(dict) --*

      These key-value pairs define properties associated with the column.

      - *(string) --*

        - *(string) --*
    """


_ClientSearchTablesResponseTableListStorageDescriptorColumnsTypeDef = TypedDict(
    "_ClientSearchTablesResponseTableListStorageDescriptorColumnsTypeDef",
    {"Name": str, "Type": str, "Comment": str, "Parameters": Dict[str, str]},
    total=False,
)


class ClientSearchTablesResponseTableListStorageDescriptorColumnsTypeDef(
    _ClientSearchTablesResponseTableListStorageDescriptorColumnsTypeDef
):
    """
    Type definition for `ClientSearchTablesResponseTableListStorageDescriptor` `Columns`

    A column in a ``Table`` .

    - **Name** *(string) --*

      The name of the ``Column`` .

    - **Type** *(string) --*

      The data type of the ``Column`` .

    - **Comment** *(string) --*

      A free-form text comment.

    - **Parameters** *(dict) --*

      These key-value pairs define properties associated with the column.

      - *(string) --*

        - *(string) --*
    """


_ClientSearchTablesResponseTableListStorageDescriptorSerdeInfoTypeDef = TypedDict(
    "_ClientSearchTablesResponseTableListStorageDescriptorSerdeInfoTypeDef",
    {"Name": str, "SerializationLibrary": str, "Parameters": Dict[str, str]},
    total=False,
)


class ClientSearchTablesResponseTableListStorageDescriptorSerdeInfoTypeDef(
    _ClientSearchTablesResponseTableListStorageDescriptorSerdeInfoTypeDef
):
    """
    Type definition for `ClientSearchTablesResponseTableListStorageDescriptor` `SerdeInfo`

    The serialization/deserialization (SerDe) information.

    - **Name** *(string) --*

      Name of the SerDe.

    - **SerializationLibrary** *(string) --*

      Usually the class that implements the SerDe. An example is
      ``org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`` .

    - **Parameters** *(dict) --*

      These key-value pairs define initialization parameters for the SerDe.

      - *(string) --*

        - *(string) --*
    """


_ClientSearchTablesResponseTableListStorageDescriptorSkewedInfoTypeDef = TypedDict(
    "_ClientSearchTablesResponseTableListStorageDescriptorSkewedInfoTypeDef",
    {
        "SkewedColumnNames": List[str],
        "SkewedColumnValues": List[str],
        "SkewedColumnValueLocationMaps": Dict[str, str],
    },
    total=False,
)


class ClientSearchTablesResponseTableListStorageDescriptorSkewedInfoTypeDef(
    _ClientSearchTablesResponseTableListStorageDescriptorSkewedInfoTypeDef
):
    """
    Type definition for `ClientSearchTablesResponseTableListStorageDescriptor` `SkewedInfo`

    The information about values that appear frequently in a column (skewed values).

    - **SkewedColumnNames** *(list) --*

      A list of names of columns that contain skewed values.

      - *(string) --*

    - **SkewedColumnValues** *(list) --*

      A list of values that appear so frequently as to be considered skewed.

      - *(string) --*

    - **SkewedColumnValueLocationMaps** *(dict) --*

      A mapping of skewed values to the columns that contain them.

      - *(string) --*

        - *(string) --*
    """


_ClientSearchTablesResponseTableListStorageDescriptorSortColumnsTypeDef = TypedDict(
    "_ClientSearchTablesResponseTableListStorageDescriptorSortColumnsTypeDef",
    {"Column": str, "SortOrder": int},
    total=False,
)


class ClientSearchTablesResponseTableListStorageDescriptorSortColumnsTypeDef(
    _ClientSearchTablesResponseTableListStorageDescriptorSortColumnsTypeDef
):
    """
    Type definition for `ClientSearchTablesResponseTableListStorageDescriptor` `SortColumns`

    Specifies the sort order of a sorted column.

    - **Column** *(string) --*

      The name of the column.

    - **SortOrder** *(integer) --*

      Indicates that the column is sorted in ascending order (``== 1`` ), or in
      descending order (``==0`` ).
    """


_ClientSearchTablesResponseTableListStorageDescriptorTypeDef = TypedDict(
    "_ClientSearchTablesResponseTableListStorageDescriptorTypeDef",
    {
        "Columns": List[
            ClientSearchTablesResponseTableListStorageDescriptorColumnsTypeDef
        ],
        "Location": str,
        "InputFormat": str,
        "OutputFormat": str,
        "Compressed": bool,
        "NumberOfBuckets": int,
        "SerdeInfo": ClientSearchTablesResponseTableListStorageDescriptorSerdeInfoTypeDef,
        "BucketColumns": List[str],
        "SortColumns": List[
            ClientSearchTablesResponseTableListStorageDescriptorSortColumnsTypeDef
        ],
        "Parameters": Dict[str, str],
        "SkewedInfo": ClientSearchTablesResponseTableListStorageDescriptorSkewedInfoTypeDef,
        "StoredAsSubDirectories": bool,
    },
    total=False,
)


class ClientSearchTablesResponseTableListStorageDescriptorTypeDef(
    _ClientSearchTablesResponseTableListStorageDescriptorTypeDef
):
    """
    Type definition for `ClientSearchTablesResponseTableList` `StorageDescriptor`

    A storage descriptor containing information about the physical storage of this table.

    - **Columns** *(list) --*

      A list of the ``Columns`` in the table.

      - *(dict) --*

        A column in a ``Table`` .

        - **Name** *(string) --*

          The name of the ``Column`` .

        - **Type** *(string) --*

          The data type of the ``Column`` .

        - **Comment** *(string) --*

          A free-form text comment.

        - **Parameters** *(dict) --*

          These key-value pairs define properties associated with the column.

          - *(string) --*

            - *(string) --*

    - **Location** *(string) --*

      The physical location of the table. By default, this takes the form of the warehouse
      location, followed by the database location in the warehouse, followed by the table
      name.

    - **InputFormat** *(string) --*

      The input format: ``SequenceFileInputFormat`` (binary), or ``TextInputFormat`` , or a
      custom format.

    - **OutputFormat** *(string) --*

      The output format: ``SequenceFileOutputFormat`` (binary), or
      ``IgnoreKeyTextOutputFormat`` , or a custom format.

    - **Compressed** *(boolean) --*

       ``True`` if the data in the table is compressed, or ``False`` if not.

    - **NumberOfBuckets** *(integer) --*

      Must be specified if the table contains any dimension columns.

    - **SerdeInfo** *(dict) --*

      The serialization/deserialization (SerDe) information.

      - **Name** *(string) --*

        Name of the SerDe.

      - **SerializationLibrary** *(string) --*

        Usually the class that implements the SerDe. An example is
        ``org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`` .

      - **Parameters** *(dict) --*

        These key-value pairs define initialization parameters for the SerDe.

        - *(string) --*

          - *(string) --*

    - **BucketColumns** *(list) --*

      A list of reducer grouping columns, clustering columns, and bucketing columns in the
      table.

      - *(string) --*

    - **SortColumns** *(list) --*

      A list specifying the sort order of each bucket in the table.

      - *(dict) --*

        Specifies the sort order of a sorted column.

        - **Column** *(string) --*

          The name of the column.

        - **SortOrder** *(integer) --*

          Indicates that the column is sorted in ascending order (``== 1`` ), or in
          descending order (``==0`` ).

    - **Parameters** *(dict) --*

      The user-supplied properties in key-value form.

      - *(string) --*

        - *(string) --*

    - **SkewedInfo** *(dict) --*

      The information about values that appear frequently in a column (skewed values).

      - **SkewedColumnNames** *(list) --*

        A list of names of columns that contain skewed values.

        - *(string) --*

      - **SkewedColumnValues** *(list) --*

        A list of values that appear so frequently as to be considered skewed.

        - *(string) --*

      - **SkewedColumnValueLocationMaps** *(dict) --*

        A mapping of skewed values to the columns that contain them.

        - *(string) --*

          - *(string) --*

    - **StoredAsSubDirectories** *(boolean) --*

       ``True`` if the table data is stored in subdirectories, or ``False`` if not.
    """


_ClientSearchTablesResponseTableListTypeDef = TypedDict(
    "_ClientSearchTablesResponseTableListTypeDef",
    {
        "Name": str,
        "DatabaseName": str,
        "Description": str,
        "Owner": str,
        "CreateTime": datetime,
        "UpdateTime": datetime,
        "LastAccessTime": datetime,
        "LastAnalyzedTime": datetime,
        "Retention": int,
        "StorageDescriptor": ClientSearchTablesResponseTableListStorageDescriptorTypeDef,
        "PartitionKeys": List[ClientSearchTablesResponseTableListPartitionKeysTypeDef],
        "ViewOriginalText": str,
        "ViewExpandedText": str,
        "TableType": str,
        "Parameters": Dict[str, str],
        "CreatedBy": str,
        "IsRegisteredWithLakeFormation": bool,
    },
    total=False,
)


class ClientSearchTablesResponseTableListTypeDef(
    _ClientSearchTablesResponseTableListTypeDef
):
    """
    Type definition for `ClientSearchTablesResponse` `TableList`

    Represents a collection of related data organized in columns and rows.

    - **Name** *(string) --*

      The table name. For Hive compatibility, this must be entirely lowercase.

    - **DatabaseName** *(string) --*

      The name of the database where the table metadata resides. For Hive compatibility, this
      must be all lowercase.

    - **Description** *(string) --*

      A description of the table.

    - **Owner** *(string) --*

      The owner of the table.

    - **CreateTime** *(datetime) --*

      The time when the table definition was created in the Data Catalog.

    - **UpdateTime** *(datetime) --*

      The last time that the table was updated.

    - **LastAccessTime** *(datetime) --*

      The last time that the table was accessed. This is usually taken from HDFS, and might not
      be reliable.

    - **LastAnalyzedTime** *(datetime) --*

      The last time that column statistics were computed for this table.

    - **Retention** *(integer) --*

      The retention time for this table.

    - **StorageDescriptor** *(dict) --*

      A storage descriptor containing information about the physical storage of this table.

      - **Columns** *(list) --*

        A list of the ``Columns`` in the table.

        - *(dict) --*

          A column in a ``Table`` .

          - **Name** *(string) --*

            The name of the ``Column`` .

          - **Type** *(string) --*

            The data type of the ``Column`` .

          - **Comment** *(string) --*

            A free-form text comment.

          - **Parameters** *(dict) --*

            These key-value pairs define properties associated with the column.

            - *(string) --*

              - *(string) --*

      - **Location** *(string) --*

        The physical location of the table. By default, this takes the form of the warehouse
        location, followed by the database location in the warehouse, followed by the table
        name.

      - **InputFormat** *(string) --*

        The input format: ``SequenceFileInputFormat`` (binary), or ``TextInputFormat`` , or a
        custom format.

      - **OutputFormat** *(string) --*

        The output format: ``SequenceFileOutputFormat`` (binary), or
        ``IgnoreKeyTextOutputFormat`` , or a custom format.

      - **Compressed** *(boolean) --*

         ``True`` if the data in the table is compressed, or ``False`` if not.

      - **NumberOfBuckets** *(integer) --*

        Must be specified if the table contains any dimension columns.

      - **SerdeInfo** *(dict) --*

        The serialization/deserialization (SerDe) information.

        - **Name** *(string) --*

          Name of the SerDe.

        - **SerializationLibrary** *(string) --*

          Usually the class that implements the SerDe. An example is
          ``org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`` .

        - **Parameters** *(dict) --*

          These key-value pairs define initialization parameters for the SerDe.

          - *(string) --*

            - *(string) --*

      - **BucketColumns** *(list) --*

        A list of reducer grouping columns, clustering columns, and bucketing columns in the
        table.

        - *(string) --*

      - **SortColumns** *(list) --*

        A list specifying the sort order of each bucket in the table.

        - *(dict) --*

          Specifies the sort order of a sorted column.

          - **Column** *(string) --*

            The name of the column.

          - **SortOrder** *(integer) --*

            Indicates that the column is sorted in ascending order (``== 1`` ), or in
            descending order (``==0`` ).

      - **Parameters** *(dict) --*

        The user-supplied properties in key-value form.

        - *(string) --*

          - *(string) --*

      - **SkewedInfo** *(dict) --*

        The information about values that appear frequently in a column (skewed values).

        - **SkewedColumnNames** *(list) --*

          A list of names of columns that contain skewed values.

          - *(string) --*

        - **SkewedColumnValues** *(list) --*

          A list of values that appear so frequently as to be considered skewed.

          - *(string) --*

        - **SkewedColumnValueLocationMaps** *(dict) --*

          A mapping of skewed values to the columns that contain them.

          - *(string) --*

            - *(string) --*

      - **StoredAsSubDirectories** *(boolean) --*

         ``True`` if the table data is stored in subdirectories, or ``False`` if not.

    - **PartitionKeys** *(list) --*

      A list of columns by which the table is partitioned. Only primitive types are supported
      as partition keys.

      When you create a table used by Amazon Athena, and you do not specify any
      ``partitionKeys`` , you must at least set the value of ``partitionKeys`` to an empty
      list. For example:

       ``"PartitionKeys": []``

      - *(dict) --*

        A column in a ``Table`` .

        - **Name** *(string) --*

          The name of the ``Column`` .

        - **Type** *(string) --*

          The data type of the ``Column`` .

        - **Comment** *(string) --*

          A free-form text comment.

        - **Parameters** *(dict) --*

          These key-value pairs define properties associated with the column.

          - *(string) --*

            - *(string) --*

    - **ViewOriginalText** *(string) --*

      If the table is a view, the original text of the view; otherwise ``null`` .

    - **ViewExpandedText** *(string) --*

      If the table is a view, the expanded text of the view; otherwise ``null`` .

    - **TableType** *(string) --*

      The type of this table (``EXTERNAL_TABLE`` , ``VIRTUAL_VIEW`` , etc.).

    - **Parameters** *(dict) --*

      These key-value pairs define properties associated with the table.

      - *(string) --*

        - *(string) --*

    - **CreatedBy** *(string) --*

      The person or entity who created the table.

    - **IsRegisteredWithLakeFormation** *(boolean) --*

      Indicates whether the table has been registered with AWS Lake Formation.
    """


_ClientSearchTablesResponseTypeDef = TypedDict(
    "_ClientSearchTablesResponseTypeDef",
    {"NextToken": str, "TableList": List[ClientSearchTablesResponseTableListTypeDef]},
    total=False,
)


class ClientSearchTablesResponseTypeDef(_ClientSearchTablesResponseTypeDef):
    """
    Type definition for `ClientSearchTables` `Response`

    - **NextToken** *(string) --*

      A continuation token, present if the current list segment is not the last.

    - **TableList** *(list) --*

      A list of the requested ``Table`` objects. The ``SearchTables`` response returns only the
      tables that you have access to.

      - *(dict) --*

        Represents a collection of related data organized in columns and rows.

        - **Name** *(string) --*

          The table name. For Hive compatibility, this must be entirely lowercase.

        - **DatabaseName** *(string) --*

          The name of the database where the table metadata resides. For Hive compatibility, this
          must be all lowercase.

        - **Description** *(string) --*

          A description of the table.

        - **Owner** *(string) --*

          The owner of the table.

        - **CreateTime** *(datetime) --*

          The time when the table definition was created in the Data Catalog.

        - **UpdateTime** *(datetime) --*

          The last time that the table was updated.

        - **LastAccessTime** *(datetime) --*

          The last time that the table was accessed. This is usually taken from HDFS, and might not
          be reliable.

        - **LastAnalyzedTime** *(datetime) --*

          The last time that column statistics were computed for this table.

        - **Retention** *(integer) --*

          The retention time for this table.

        - **StorageDescriptor** *(dict) --*

          A storage descriptor containing information about the physical storage of this table.

          - **Columns** *(list) --*

            A list of the ``Columns`` in the table.

            - *(dict) --*

              A column in a ``Table`` .

              - **Name** *(string) --*

                The name of the ``Column`` .

              - **Type** *(string) --*

                The data type of the ``Column`` .

              - **Comment** *(string) --*

                A free-form text comment.

              - **Parameters** *(dict) --*

                These key-value pairs define properties associated with the column.

                - *(string) --*

                  - *(string) --*

          - **Location** *(string) --*

            The physical location of the table. By default, this takes the form of the warehouse
            location, followed by the database location in the warehouse, followed by the table
            name.

          - **InputFormat** *(string) --*

            The input format: ``SequenceFileInputFormat`` (binary), or ``TextInputFormat`` , or a
            custom format.

          - **OutputFormat** *(string) --*

            The output format: ``SequenceFileOutputFormat`` (binary), or
            ``IgnoreKeyTextOutputFormat`` , or a custom format.

          - **Compressed** *(boolean) --*

             ``True`` if the data in the table is compressed, or ``False`` if not.

          - **NumberOfBuckets** *(integer) --*

            Must be specified if the table contains any dimension columns.

          - **SerdeInfo** *(dict) --*

            The serialization/deserialization (SerDe) information.

            - **Name** *(string) --*

              Name of the SerDe.

            - **SerializationLibrary** *(string) --*

              Usually the class that implements the SerDe. An example is
              ``org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`` .

            - **Parameters** *(dict) --*

              These key-value pairs define initialization parameters for the SerDe.

              - *(string) --*

                - *(string) --*

          - **BucketColumns** *(list) --*

            A list of reducer grouping columns, clustering columns, and bucketing columns in the
            table.

            - *(string) --*

          - **SortColumns** *(list) --*

            A list specifying the sort order of each bucket in the table.

            - *(dict) --*

              Specifies the sort order of a sorted column.

              - **Column** *(string) --*

                The name of the column.

              - **SortOrder** *(integer) --*

                Indicates that the column is sorted in ascending order (``== 1`` ), or in
                descending order (``==0`` ).

          - **Parameters** *(dict) --*

            The user-supplied properties in key-value form.

            - *(string) --*

              - *(string) --*

          - **SkewedInfo** *(dict) --*

            The information about values that appear frequently in a column (skewed values).

            - **SkewedColumnNames** *(list) --*

              A list of names of columns that contain skewed values.

              - *(string) --*

            - **SkewedColumnValues** *(list) --*

              A list of values that appear so frequently as to be considered skewed.

              - *(string) --*

            - **SkewedColumnValueLocationMaps** *(dict) --*

              A mapping of skewed values to the columns that contain them.

              - *(string) --*

                - *(string) --*

          - **StoredAsSubDirectories** *(boolean) --*

             ``True`` if the table data is stored in subdirectories, or ``False`` if not.

        - **PartitionKeys** *(list) --*

          A list of columns by which the table is partitioned. Only primitive types are supported
          as partition keys.

          When you create a table used by Amazon Athena, and you do not specify any
          ``partitionKeys`` , you must at least set the value of ``partitionKeys`` to an empty
          list. For example:

           ``"PartitionKeys": []``

          - *(dict) --*

            A column in a ``Table`` .

            - **Name** *(string) --*

              The name of the ``Column`` .

            - **Type** *(string) --*

              The data type of the ``Column`` .

            - **Comment** *(string) --*

              A free-form text comment.

            - **Parameters** *(dict) --*

              These key-value pairs define properties associated with the column.

              - *(string) --*

                - *(string) --*

        - **ViewOriginalText** *(string) --*

          If the table is a view, the original text of the view; otherwise ``null`` .

        - **ViewExpandedText** *(string) --*

          If the table is a view, the expanded text of the view; otherwise ``null`` .

        - **TableType** *(string) --*

          The type of this table (``EXTERNAL_TABLE`` , ``VIRTUAL_VIEW`` , etc.).

        - **Parameters** *(dict) --*

          These key-value pairs define properties associated with the table.

          - *(string) --*

            - *(string) --*

        - **CreatedBy** *(string) --*

          The person or entity who created the table.

        - **IsRegisteredWithLakeFormation** *(boolean) --*

          Indicates whether the table has been registered with AWS Lake Formation.
    """


_ClientSearchTablesSortCriteriaTypeDef = TypedDict(
    "_ClientSearchTablesSortCriteriaTypeDef",
    {"FieldName": str, "Sort": str},
    total=False,
)


class ClientSearchTablesSortCriteriaTypeDef(_ClientSearchTablesSortCriteriaTypeDef):
    """
    Type definition for `ClientSearchTables` `SortCriteria`

    Specifies a field to sort by and a sort order.

    - **FieldName** *(string) --*

      The name of the field on which to sort.

    - **Sort** *(string) --*

      An ascending or descending sort.
    """


_ClientStartExportLabelsTaskRunResponseTypeDef = TypedDict(
    "_ClientStartExportLabelsTaskRunResponseTypeDef", {"TaskRunId": str}, total=False
)


class ClientStartExportLabelsTaskRunResponseTypeDef(
    _ClientStartExportLabelsTaskRunResponseTypeDef
):
    """
    Type definition for `ClientStartExportLabelsTaskRun` `Response`

    - **TaskRunId** *(string) --*

      The unique identifier for the task run.
    """


_ClientStartImportLabelsTaskRunResponseTypeDef = TypedDict(
    "_ClientStartImportLabelsTaskRunResponseTypeDef", {"TaskRunId": str}, total=False
)


class ClientStartImportLabelsTaskRunResponseTypeDef(
    _ClientStartImportLabelsTaskRunResponseTypeDef
):
    """
    Type definition for `ClientStartImportLabelsTaskRun` `Response`

    - **TaskRunId** *(string) --*

      The unique identifier for the task run.
    """


_ClientStartJobRunNotificationPropertyTypeDef = TypedDict(
    "_ClientStartJobRunNotificationPropertyTypeDef",
    {"NotifyDelayAfter": int},
    total=False,
)


class ClientStartJobRunNotificationPropertyTypeDef(
    _ClientStartJobRunNotificationPropertyTypeDef
):
    """
    Type definition for `ClientStartJobRun` `NotificationProperty`

    Specifies configuration properties of a job run notification.

    - **NotifyDelayAfter** *(integer) --*

      After a job run starts, the number of minutes to wait before sending a job run delay
      notification.
    """


_ClientStartJobRunResponseTypeDef = TypedDict(
    "_ClientStartJobRunResponseTypeDef", {"JobRunId": str}, total=False
)


class ClientStartJobRunResponseTypeDef(_ClientStartJobRunResponseTypeDef):
    """
    Type definition for `ClientStartJobRun` `Response`

    - **JobRunId** *(string) --*

      The ID assigned to this job run.
    """


_ClientStartMlEvaluationTaskRunResponseTypeDef = TypedDict(
    "_ClientStartMlEvaluationTaskRunResponseTypeDef", {"TaskRunId": str}, total=False
)


class ClientStartMlEvaluationTaskRunResponseTypeDef(
    _ClientStartMlEvaluationTaskRunResponseTypeDef
):
    """
    Type definition for `ClientStartMlEvaluationTaskRun` `Response`

    - **TaskRunId** *(string) --*

      The unique identifier associated with this run.
    """


_ClientStartMlLabelingSetGenerationTaskRunResponseTypeDef = TypedDict(
    "_ClientStartMlLabelingSetGenerationTaskRunResponseTypeDef",
    {"TaskRunId": str},
    total=False,
)


class ClientStartMlLabelingSetGenerationTaskRunResponseTypeDef(
    _ClientStartMlLabelingSetGenerationTaskRunResponseTypeDef
):
    """
    Type definition for `ClientStartMlLabelingSetGenerationTaskRun` `Response`

    - **TaskRunId** *(string) --*

      The unique run identifier that is associated with this task run.
    """


_ClientStartTriggerResponseTypeDef = TypedDict(
    "_ClientStartTriggerResponseTypeDef", {"Name": str}, total=False
)


class ClientStartTriggerResponseTypeDef(_ClientStartTriggerResponseTypeDef):
    """
    Type definition for `ClientStartTrigger` `Response`

    - **Name** *(string) --*

      The name of the trigger that was started.
    """


_ClientStartWorkflowRunResponseTypeDef = TypedDict(
    "_ClientStartWorkflowRunResponseTypeDef", {"RunId": str}, total=False
)


class ClientStartWorkflowRunResponseTypeDef(_ClientStartWorkflowRunResponseTypeDef):
    """
    Type definition for `ClientStartWorkflowRun` `Response`

    - **RunId** *(string) --*

      An Id for the new run.
    """


_ClientStopTriggerResponseTypeDef = TypedDict(
    "_ClientStopTriggerResponseTypeDef", {"Name": str}, total=False
)


class ClientStopTriggerResponseTypeDef(_ClientStopTriggerResponseTypeDef):
    """
    Type definition for `ClientStopTrigger` `Response`

    - **Name** *(string) --*

      The name of the trigger that was stopped.
    """


_RequiredClientUpdateClassifierCsvClassifierTypeDef = TypedDict(
    "_RequiredClientUpdateClassifierCsvClassifierTypeDef", {"Name": str}
)
_OptionalClientUpdateClassifierCsvClassifierTypeDef = TypedDict(
    "_OptionalClientUpdateClassifierCsvClassifierTypeDef",
    {
        "Delimiter": str,
        "QuoteSymbol": str,
        "ContainsHeader": str,
        "Header": List[str],
        "DisableValueTrimming": bool,
        "AllowSingleColumn": bool,
    },
    total=False,
)


class ClientUpdateClassifierCsvClassifierTypeDef(
    _RequiredClientUpdateClassifierCsvClassifierTypeDef,
    _OptionalClientUpdateClassifierCsvClassifierTypeDef,
):
    """
    Type definition for `ClientUpdateClassifier` `CsvClassifier`

    A ``CsvClassifier`` object with updated fields.

    - **Name** *(string) --* **[REQUIRED]**

      The name of the classifier.

    - **Delimiter** *(string) --*

      A custom symbol to denote what separates each column entry in the row.

    - **QuoteSymbol** *(string) --*

      A custom symbol to denote what combines content into a single column value. It must be
      different from the column delimiter.

    - **ContainsHeader** *(string) --*

      Indicates whether the CSV file contains a header.

    - **Header** *(list) --*

      A list of strings representing column names.

      - *(string) --*

    - **DisableValueTrimming** *(boolean) --*

      Specifies not to trim values before identifying the type of column values. The default value is
      true.

    - **AllowSingleColumn** *(boolean) --*

      Enables the processing of files that contain only one column.
    """


_RequiredClientUpdateClassifierGrokClassifierTypeDef = TypedDict(
    "_RequiredClientUpdateClassifierGrokClassifierTypeDef", {"Name": str}
)
_OptionalClientUpdateClassifierGrokClassifierTypeDef = TypedDict(
    "_OptionalClientUpdateClassifierGrokClassifierTypeDef",
    {"Classification": str, "GrokPattern": str, "CustomPatterns": str},
    total=False,
)


class ClientUpdateClassifierGrokClassifierTypeDef(
    _RequiredClientUpdateClassifierGrokClassifierTypeDef,
    _OptionalClientUpdateClassifierGrokClassifierTypeDef,
):
    """
    Type definition for `ClientUpdateClassifier` `GrokClassifier`

    A ``GrokClassifier`` object with updated fields.

    - **Name** *(string) --* **[REQUIRED]**

      The name of the ``GrokClassifier`` .

    - **Classification** *(string) --*

      An identifier of the data format that the classifier matches, such as Twitter, JSON, Omniture
      logs, Amazon CloudWatch Logs, and so on.

    - **GrokPattern** *(string) --*

      The grok pattern used by this classifier.

    - **CustomPatterns** *(string) --*

      Optional custom grok patterns used by this classifier.
    """


_RequiredClientUpdateClassifierJsonClassifierTypeDef = TypedDict(
    "_RequiredClientUpdateClassifierJsonClassifierTypeDef", {"Name": str}
)
_OptionalClientUpdateClassifierJsonClassifierTypeDef = TypedDict(
    "_OptionalClientUpdateClassifierJsonClassifierTypeDef",
    {"JsonPath": str},
    total=False,
)


class ClientUpdateClassifierJsonClassifierTypeDef(
    _RequiredClientUpdateClassifierJsonClassifierTypeDef,
    _OptionalClientUpdateClassifierJsonClassifierTypeDef,
):
    """
    Type definition for `ClientUpdateClassifier` `JsonClassifier`

    A ``JsonClassifier`` object with updated fields.

    - **Name** *(string) --* **[REQUIRED]**

      The name of the classifier.

    - **JsonPath** *(string) --*

      A ``JsonPath`` string defining the JSON data for the classifier to classify. AWS Glue supports
      a subset of ``JsonPath`` , as described in `Writing JsonPath Custom Classifiers
      <https://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html#custom-classifier-json>`__ .
    """


_RequiredClientUpdateClassifierXMLClassifierTypeDef = TypedDict(
    "_RequiredClientUpdateClassifierXMLClassifierTypeDef", {"Name": str}
)
_OptionalClientUpdateClassifierXMLClassifierTypeDef = TypedDict(
    "_OptionalClientUpdateClassifierXMLClassifierTypeDef",
    {"Classification": str, "RowTag": str},
    total=False,
)


class ClientUpdateClassifierXMLClassifierTypeDef(
    _RequiredClientUpdateClassifierXMLClassifierTypeDef,
    _OptionalClientUpdateClassifierXMLClassifierTypeDef,
):
    """
    Type definition for `ClientUpdateClassifier` `XMLClassifier`

    An ``XMLClassifier`` object with updated fields.

    - **Name** *(string) --* **[REQUIRED]**

      The name of the classifier.

    - **Classification** *(string) --*

      An identifier of the data format that the classifier matches.

    - **RowTag** *(string) --*

      The XML tag designating the element that contains each record in an XML document being parsed.
      This cannot identify a self-closing element (closed by ``/>`` ). An empty row element that
      contains only attributes can be parsed as long as it ends with a closing tag (for example,
      ``<row item_a="A" item_b="B"></row>`` is okay, but ``<row item_a="A" item_b="B" />`` is not).
    """


_ClientUpdateConnectionConnectionInputPhysicalConnectionRequirementsTypeDef = TypedDict(
    "_ClientUpdateConnectionConnectionInputPhysicalConnectionRequirementsTypeDef",
    {"SubnetId": str, "SecurityGroupIdList": List[str], "AvailabilityZone": str},
    total=False,
)


class ClientUpdateConnectionConnectionInputPhysicalConnectionRequirementsTypeDef(
    _ClientUpdateConnectionConnectionInputPhysicalConnectionRequirementsTypeDef
):
    """
    Type definition for `ClientUpdateConnectionConnectionInput` `PhysicalConnectionRequirements`

    A map of physical connection requirements, such as virtual private cloud (VPC) and
    ``SecurityGroup`` , that are needed to successfully make this connection.

    - **SubnetId** *(string) --*

      The subnet ID used by the connection.

    - **SecurityGroupIdList** *(list) --*

      The security group ID list used by the connection.

      - *(string) --*

    - **AvailabilityZone** *(string) --*

      The connection's Availability Zone. This field is redundant because the specified subnet
      implies the Availability Zone to be used. Currently the field must be populated, but it will
      be deprecated in the future.
    """


_RequiredClientUpdateConnectionConnectionInputTypeDef = TypedDict(
    "_RequiredClientUpdateConnectionConnectionInputTypeDef",
    {"Name": str, "ConnectionType": str, "ConnectionProperties": Dict[str, str]},
)
_OptionalClientUpdateConnectionConnectionInputTypeDef = TypedDict(
    "_OptionalClientUpdateConnectionConnectionInputTypeDef",
    {
        "Description": str,
        "MatchCriteria": List[str],
        "PhysicalConnectionRequirements": ClientUpdateConnectionConnectionInputPhysicalConnectionRequirementsTypeDef,
    },
    total=False,
)


class ClientUpdateConnectionConnectionInputTypeDef(
    _RequiredClientUpdateConnectionConnectionInputTypeDef,
    _OptionalClientUpdateConnectionConnectionInputTypeDef,
):
    """
    Type definition for `ClientUpdateConnection` `ConnectionInput`

    A ``ConnectionInput`` object that redefines the connection in question.

    - **Name** *(string) --* **[REQUIRED]**

      The name of the connection.

    - **Description** *(string) --*

      The description of the connection.

    - **ConnectionType** *(string) --* **[REQUIRED]**

      The type of the connection. Currently, only JDBC is supported; SFTP is not supported.

    - **MatchCriteria** *(list) --*

      A list of criteria that can be used in selecting this connection.

      - *(string) --*

    - **ConnectionProperties** *(dict) --* **[REQUIRED]**

      These key-value pairs define parameters for the connection.

      - *(string) --*

        - *(string) --*

    - **PhysicalConnectionRequirements** *(dict) --*

      A map of physical connection requirements, such as virtual private cloud (VPC) and
      ``SecurityGroup`` , that are needed to successfully make this connection.

      - **SubnetId** *(string) --*

        The subnet ID used by the connection.

      - **SecurityGroupIdList** *(list) --*

        The security group ID list used by the connection.

        - *(string) --*

      - **AvailabilityZone** *(string) --*

        The connection's Availability Zone. This field is redundant because the specified subnet
        implies the Availability Zone to be used. Currently the field must be populated, but it will
        be deprecated in the future.
    """


_ClientUpdateCrawlerSchemaChangePolicyTypeDef = TypedDict(
    "_ClientUpdateCrawlerSchemaChangePolicyTypeDef",
    {"UpdateBehavior": str, "DeleteBehavior": str},
    total=False,
)


class ClientUpdateCrawlerSchemaChangePolicyTypeDef(
    _ClientUpdateCrawlerSchemaChangePolicyTypeDef
):
    """
    Type definition for `ClientUpdateCrawler` `SchemaChangePolicy`

    The policy for the crawler's update and deletion behavior.

    - **UpdateBehavior** *(string) --*

      The update behavior when the crawler finds a changed schema.

    - **DeleteBehavior** *(string) --*

      The deletion behavior when the crawler finds a deleted object.
    """


_ClientUpdateCrawlerTargetsCatalogTargetsTypeDef = TypedDict(
    "_ClientUpdateCrawlerTargetsCatalogTargetsTypeDef",
    {"DatabaseName": str, "Tables": List[str]},
)


class ClientUpdateCrawlerTargetsCatalogTargetsTypeDef(
    _ClientUpdateCrawlerTargetsCatalogTargetsTypeDef
):
    """
    Type definition for `ClientUpdateCrawlerTargets` `CatalogTargets`

    Specifies an AWS Glue Data Catalog target.

    - **DatabaseName** *(string) --* **[REQUIRED]**

      The name of the database to be synchronized.

    - **Tables** *(list) --* **[REQUIRED]**

      A list of the tables to be synchronized.

      - *(string) --*
    """


_ClientUpdateCrawlerTargetsDynamoDBTargetsTypeDef = TypedDict(
    "_ClientUpdateCrawlerTargetsDynamoDBTargetsTypeDef", {"Path": str}, total=False
)


class ClientUpdateCrawlerTargetsDynamoDBTargetsTypeDef(
    _ClientUpdateCrawlerTargetsDynamoDBTargetsTypeDef
):
    """
    Type definition for `ClientUpdateCrawlerTargets` `DynamoDBTargets`

    Specifies an Amazon DynamoDB table to crawl.

    - **Path** *(string) --*

      The name of the DynamoDB table to crawl.
    """


_ClientUpdateCrawlerTargetsJdbcTargetsTypeDef = TypedDict(
    "_ClientUpdateCrawlerTargetsJdbcTargetsTypeDef",
    {"ConnectionName": str, "Path": str, "Exclusions": List[str]},
    total=False,
)


class ClientUpdateCrawlerTargetsJdbcTargetsTypeDef(
    _ClientUpdateCrawlerTargetsJdbcTargetsTypeDef
):
    """
    Type definition for `ClientUpdateCrawlerTargets` `JdbcTargets`

    Specifies a JDBC data store to crawl.

    - **ConnectionName** *(string) --*

      The name of the connection to use to connect to the JDBC target.

    - **Path** *(string) --*

      The path of the JDBC target.

    - **Exclusions** *(list) --*

      A list of glob patterns used to exclude from the crawl. For more information, see `Catalog
      Tables with a Crawler <http://docs.aws.amazon.com/glue/latest/dg/add-crawler.html>`__ .

      - *(string) --*
    """


_ClientUpdateCrawlerTargetsS3TargetsTypeDef = TypedDict(
    "_ClientUpdateCrawlerTargetsS3TargetsTypeDef",
    {"Path": str, "Exclusions": List[str]},
    total=False,
)


class ClientUpdateCrawlerTargetsS3TargetsTypeDef(
    _ClientUpdateCrawlerTargetsS3TargetsTypeDef
):
    """
    Type definition for `ClientUpdateCrawlerTargets` `S3Targets`

    Specifies a data store in Amazon Simple Storage Service (Amazon S3).

    - **Path** *(string) --*

      The path to the Amazon S3 target.

    - **Exclusions** *(list) --*

      A list of glob patterns used to exclude from the crawl. For more information, see `Catalog
      Tables with a Crawler <http://docs.aws.amazon.com/glue/latest/dg/add-crawler.html>`__ .

      - *(string) --*
    """


_ClientUpdateCrawlerTargetsTypeDef = TypedDict(
    "_ClientUpdateCrawlerTargetsTypeDef",
    {
        "S3Targets": List[ClientUpdateCrawlerTargetsS3TargetsTypeDef],
        "JdbcTargets": List[ClientUpdateCrawlerTargetsJdbcTargetsTypeDef],
        "DynamoDBTargets": List[ClientUpdateCrawlerTargetsDynamoDBTargetsTypeDef],
        "CatalogTargets": List[ClientUpdateCrawlerTargetsCatalogTargetsTypeDef],
    },
    total=False,
)


class ClientUpdateCrawlerTargetsTypeDef(_ClientUpdateCrawlerTargetsTypeDef):
    """
    Type definition for `ClientUpdateCrawler` `Targets`

    A list of targets to crawl.

    - **S3Targets** *(list) --*

      Specifies Amazon Simple Storage Service (Amazon S3) targets.

      - *(dict) --*

        Specifies a data store in Amazon Simple Storage Service (Amazon S3).

        - **Path** *(string) --*

          The path to the Amazon S3 target.

        - **Exclusions** *(list) --*

          A list of glob patterns used to exclude from the crawl. For more information, see `Catalog
          Tables with a Crawler <http://docs.aws.amazon.com/glue/latest/dg/add-crawler.html>`__ .

          - *(string) --*

    - **JdbcTargets** *(list) --*

      Specifies JDBC targets.

      - *(dict) --*

        Specifies a JDBC data store to crawl.

        - **ConnectionName** *(string) --*

          The name of the connection to use to connect to the JDBC target.

        - **Path** *(string) --*

          The path of the JDBC target.

        - **Exclusions** *(list) --*

          A list of glob patterns used to exclude from the crawl. For more information, see `Catalog
          Tables with a Crawler <http://docs.aws.amazon.com/glue/latest/dg/add-crawler.html>`__ .

          - *(string) --*

    - **DynamoDBTargets** *(list) --*

      Specifies Amazon DynamoDB targets.

      - *(dict) --*

        Specifies an Amazon DynamoDB table to crawl.

        - **Path** *(string) --*

          The name of the DynamoDB table to crawl.

    - **CatalogTargets** *(list) --*

      Specifies AWS Glue Data Catalog targets.

      - *(dict) --*

        Specifies an AWS Glue Data Catalog target.

        - **DatabaseName** *(string) --* **[REQUIRED]**

          The name of the database to be synchronized.

        - **Tables** *(list) --* **[REQUIRED]**

          A list of the tables to be synchronized.

          - *(string) --*
    """


_ClientUpdateDatabaseDatabaseInputCreateTableDefaultPermissionsPrincipalTypeDef = TypedDict(
    "_ClientUpdateDatabaseDatabaseInputCreateTableDefaultPermissionsPrincipalTypeDef",
    {"DataLakePrincipalIdentifier": str},
    total=False,
)


class ClientUpdateDatabaseDatabaseInputCreateTableDefaultPermissionsPrincipalTypeDef(
    _ClientUpdateDatabaseDatabaseInputCreateTableDefaultPermissionsPrincipalTypeDef
):
    """
    Type definition for `ClientUpdateDatabaseDatabaseInputCreateTableDefaultPermissions` `Principal`

    The principal who is granted permissions.

    - **DataLakePrincipalIdentifier** *(string) --*

      An identifier for the AWS Lake Formation principal.
    """


_ClientUpdateDatabaseDatabaseInputCreateTableDefaultPermissionsTypeDef = TypedDict(
    "_ClientUpdateDatabaseDatabaseInputCreateTableDefaultPermissionsTypeDef",
    {
        "Principal": ClientUpdateDatabaseDatabaseInputCreateTableDefaultPermissionsPrincipalTypeDef,
        "Permissions": List[str],
    },
    total=False,
)


class ClientUpdateDatabaseDatabaseInputCreateTableDefaultPermissionsTypeDef(
    _ClientUpdateDatabaseDatabaseInputCreateTableDefaultPermissionsTypeDef
):
    """
    Type definition for `ClientUpdateDatabaseDatabaseInput` `CreateTableDefaultPermissions`

    Permissions granted to a principal.

    - **Principal** *(dict) --*

      The principal who is granted permissions.

      - **DataLakePrincipalIdentifier** *(string) --*

        An identifier for the AWS Lake Formation principal.

    - **Permissions** *(list) --*

      The permissions that are granted to the principal.

      - *(string) --*
    """


_RequiredClientUpdateDatabaseDatabaseInputTypeDef = TypedDict(
    "_RequiredClientUpdateDatabaseDatabaseInputTypeDef", {"Name": str}
)
_OptionalClientUpdateDatabaseDatabaseInputTypeDef = TypedDict(
    "_OptionalClientUpdateDatabaseDatabaseInputTypeDef",
    {
        "Description": str,
        "LocationUri": str,
        "Parameters": Dict[str, str],
        "CreateTableDefaultPermissions": List[
            ClientUpdateDatabaseDatabaseInputCreateTableDefaultPermissionsTypeDef
        ],
    },
    total=False,
)


class ClientUpdateDatabaseDatabaseInputTypeDef(
    _RequiredClientUpdateDatabaseDatabaseInputTypeDef,
    _OptionalClientUpdateDatabaseDatabaseInputTypeDef,
):
    """
    Type definition for `ClientUpdateDatabase` `DatabaseInput`

    A ``DatabaseInput`` object specifying the new definition of the metadata database in the catalog.

    - **Name** *(string) --* **[REQUIRED]**

      The name of the database. For Hive compatibility, this is folded to lowercase when it is stored.

    - **Description** *(string) --*

      A description of the database.

    - **LocationUri** *(string) --*

      The location of the database (for example, an HDFS path).

    - **Parameters** *(dict) --*

      These key-value pairs define parameters and properties of the database.

      These key-value pairs define parameters and properties of the database.

      - *(string) --*

        - *(string) --*

    - **CreateTableDefaultPermissions** *(list) --*

      Creates a set of default permissions on the table for principals.

      - *(dict) --*

        Permissions granted to a principal.

        - **Principal** *(dict) --*

          The principal who is granted permissions.

          - **DataLakePrincipalIdentifier** *(string) --*

            An identifier for the AWS Lake Formation principal.

        - **Permissions** *(list) --*

          The permissions that are granted to the principal.

          - *(string) --*
    """


_ClientUpdateDevEndpointCustomLibrariesTypeDef = TypedDict(
    "_ClientUpdateDevEndpointCustomLibrariesTypeDef",
    {"ExtraPythonLibsS3Path": str, "ExtraJarsS3Path": str},
    total=False,
)


class ClientUpdateDevEndpointCustomLibrariesTypeDef(
    _ClientUpdateDevEndpointCustomLibrariesTypeDef
):
    """
    Type definition for `ClientUpdateDevEndpoint` `CustomLibraries`

    Custom Python or Java libraries to be loaded in the ``DevEndpoint`` .

    - **ExtraPythonLibsS3Path** *(string) --*

      The paths to one or more Python libraries in an Amazon Simple Storage Service (Amazon S3)
      bucket that should be loaded in your ``DevEndpoint`` . Multiple values must be complete paths
      separated by a comma.

      .. note::

        You can only use pure Python libraries with a ``DevEndpoint`` . Libraries that rely on C
        extensions, such as the `pandas <http://pandas.pydata.org/>`__ Python data analysis library,
        are not currently supported.

    - **ExtraJarsS3Path** *(string) --*

      The path to one or more Java ``.jar`` files in an S3 bucket that should be loaded in your
      ``DevEndpoint`` .

      .. note::

        You can only use pure Java/Scala libraries with a ``DevEndpoint`` .
    """


_ClientUpdateJobJobUpdateCommandTypeDef = TypedDict(
    "_ClientUpdateJobJobUpdateCommandTypeDef",
    {"Name": str, "ScriptLocation": str, "PythonVersion": str},
    total=False,
)


class ClientUpdateJobJobUpdateCommandTypeDef(_ClientUpdateJobJobUpdateCommandTypeDef):
    """
    Type definition for `ClientUpdateJobJobUpdate` `Command`

    The ``JobCommand`` that executes this job (required).

    - **Name** *(string) --*

      The name of the job command. For an Apache Spark ETL job, this must be ``glueetl`` . For a
      Python shell job, it must be ``pythonshell`` .

    - **ScriptLocation** *(string) --*

      Specifies the Amazon Simple Storage Service (Amazon S3) path to a script that executes a job.

    - **PythonVersion** *(string) --*

      The Python version being used to execute a Python shell job. Allowed values are 2 or 3.
    """


_ClientUpdateJobJobUpdateConnectionsTypeDef = TypedDict(
    "_ClientUpdateJobJobUpdateConnectionsTypeDef",
    {"Connections": List[str]},
    total=False,
)


class ClientUpdateJobJobUpdateConnectionsTypeDef(
    _ClientUpdateJobJobUpdateConnectionsTypeDef
):
    """
    Type definition for `ClientUpdateJobJobUpdate` `Connections`

    The connections used for this job.

    - **Connections** *(list) --*

      A list of connections used by the job.

      - *(string) --*
    """


_ClientUpdateJobJobUpdateExecutionPropertyTypeDef = TypedDict(
    "_ClientUpdateJobJobUpdateExecutionPropertyTypeDef",
    {"MaxConcurrentRuns": int},
    total=False,
)


class ClientUpdateJobJobUpdateExecutionPropertyTypeDef(
    _ClientUpdateJobJobUpdateExecutionPropertyTypeDef
):
    """
    Type definition for `ClientUpdateJobJobUpdate` `ExecutionProperty`

    An ``ExecutionProperty`` specifying the maximum number of concurrent runs allowed for this job.

    - **MaxConcurrentRuns** *(integer) --*

      The maximum number of concurrent runs allowed for the job. The default is 1. An error is
      returned when this threshold is reached. The maximum value you can specify is controlled by a
      service limit.
    """


_ClientUpdateJobJobUpdateNotificationPropertyTypeDef = TypedDict(
    "_ClientUpdateJobJobUpdateNotificationPropertyTypeDef",
    {"NotifyDelayAfter": int},
    total=False,
)


class ClientUpdateJobJobUpdateNotificationPropertyTypeDef(
    _ClientUpdateJobJobUpdateNotificationPropertyTypeDef
):
    """
    Type definition for `ClientUpdateJobJobUpdate` `NotificationProperty`

    Specifies the configuration properties of a job notification.

    - **NotifyDelayAfter** *(integer) --*

      After a job run starts, the number of minutes to wait before sending a job run delay
      notification.
    """


_ClientUpdateJobJobUpdateTypeDef = TypedDict(
    "_ClientUpdateJobJobUpdateTypeDef",
    {
        "Description": str,
        "LogUri": str,
        "Role": str,
        "ExecutionProperty": ClientUpdateJobJobUpdateExecutionPropertyTypeDef,
        "Command": ClientUpdateJobJobUpdateCommandTypeDef,
        "DefaultArguments": Dict[str, str],
        "Connections": ClientUpdateJobJobUpdateConnectionsTypeDef,
        "MaxRetries": int,
        "AllocatedCapacity": int,
        "Timeout": int,
        "MaxCapacity": float,
        "WorkerType": str,
        "NumberOfWorkers": int,
        "SecurityConfiguration": str,
        "NotificationProperty": ClientUpdateJobJobUpdateNotificationPropertyTypeDef,
        "GlueVersion": str,
    },
    total=False,
)


class ClientUpdateJobJobUpdateTypeDef(_ClientUpdateJobJobUpdateTypeDef):
    """
    Type definition for `ClientUpdateJob` `JobUpdate`

    Specifies the values with which to update the job definition.

    - **Description** *(string) --*

      Description of the job being defined.

    - **LogUri** *(string) --*

      This field is reserved for future use.

    - **Role** *(string) --*

      The name or Amazon Resource Name (ARN) of the IAM role associated with this job (required).

    - **ExecutionProperty** *(dict) --*

      An ``ExecutionProperty`` specifying the maximum number of concurrent runs allowed for this job.

      - **MaxConcurrentRuns** *(integer) --*

        The maximum number of concurrent runs allowed for the job. The default is 1. An error is
        returned when this threshold is reached. The maximum value you can specify is controlled by a
        service limit.

    - **Command** *(dict) --*

      The ``JobCommand`` that executes this job (required).

      - **Name** *(string) --*

        The name of the job command. For an Apache Spark ETL job, this must be ``glueetl`` . For a
        Python shell job, it must be ``pythonshell`` .

      - **ScriptLocation** *(string) --*

        Specifies the Amazon Simple Storage Service (Amazon S3) path to a script that executes a job.

      - **PythonVersion** *(string) --*

        The Python version being used to execute a Python shell job. Allowed values are 2 or 3.

    - **DefaultArguments** *(dict) --*

      The default arguments for this job.

      You can specify arguments here that your own job-execution script consumes, as well as
      arguments that AWS Glue itself consumes.

      For information about how to specify and consume your own Job arguments, see the `Calling AWS
      Glue APIs in Python
      <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__ topic
      in the developer guide.

      For information about the key-value pairs that AWS Glue consumes to set up your job, see the
      `Special Parameters Used by AWS Glue
      <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
      topic in the developer guide.

      - *(string) --*

        - *(string) --*

    - **Connections** *(dict) --*

      The connections used for this job.

      - **Connections** *(list) --*

        A list of connections used by the job.

        - *(string) --*

    - **MaxRetries** *(integer) --*

      The maximum number of times to retry this job if it fails.

    - **AllocatedCapacity** *(integer) --*

      This field is deprecated. Use ``MaxCapacity`` instead.

      The number of AWS Glue data processing units (DPUs) to allocate to this job. You can allocate
      from 2 to 100 DPUs; the default is 10. A DPU is a relative measure of processing power that
      consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the `AWS
      Glue pricing page <https://aws.amazon.com/glue/pricing/>`__ .

    - **Timeout** *(integer) --*

      The job timeout in minutes. This is the maximum time that a job run can consume resources
      before it is terminated and enters ``TIMEOUT`` status. The default is 2,880 minutes (48 hours).

    - **MaxCapacity** *(float) --*

      The number of AWS Glue data processing units (DPUs) that can be allocated when this job runs. A
      DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and
      16 GB of memory. For more information, see the `AWS Glue pricing page
      <https://aws.amazon.com/glue/pricing/>`__ .

      Do not set ``Max Capacity`` if using ``WorkerType`` and ``NumberOfWorkers`` .

      The value that can be allocated for ``MaxCapacity`` depends on whether you are running a Python
      shell job or an Apache Spark ETL job:

      * When you specify a Python shell job (``JobCommand.Name`` ="pythonshell"), you can allocate
      either 0.0625 or 1 DPU. The default is 0.0625 DPU.

      * When you specify an Apache Spark ETL job (``JobCommand.Name`` ="glueetl"), you can allocate
      from 2 to 100 DPUs. The default is 10 DPUs. This job type cannot have a fractional DPU
      allocation.

    - **WorkerType** *(string) --*

      The type of predefined worker that is allocated when a job runs. Accepts a value of Standard,
      G.1X, or G.2X.

      * For the ``Standard`` worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB
      disk, and 2 executors per worker.

      * For the ``G.1X`` worker type, each worker maps to 1 DPU (4 vCPU, 16 GB of memory, 64 GB
      disk), and provides 1 executor per worker. We recommend this worker type for memory-intensive
      jobs.

      * For the ``G.2X`` worker type, each worker maps to 2 DPU (8 vCPU, 32 GB of memory, 128 GB
      disk), and provides 1 executor per worker. We recommend this worker type for memory-intensive
      jobs.

    - **NumberOfWorkers** *(integer) --*

      The number of workers of a defined ``workerType`` that are allocated when a job runs.

      The maximum number of workers you can define are 299 for ``G.1X`` , and 149 for ``G.2X`` .

    - **SecurityConfiguration** *(string) --*

      The name of the ``SecurityConfiguration`` structure to be used with this job.

    - **NotificationProperty** *(dict) --*

      Specifies the configuration properties of a job notification.

      - **NotifyDelayAfter** *(integer) --*

        After a job run starts, the number of minutes to wait before sending a job run delay
        notification.

    - **GlueVersion** *(string) --*

      Glue version determines the versions of Apache Spark and Python that AWS Glue supports. The
      Python version indicates the version supported for jobs of type Spark.

      For more information about the available AWS Glue versions and corresponding Spark and Python
      versions, see `Glue version <https://docs.aws.amazon.com/glue/latest/dg/add-job.html>`__ in the
      developer guide.
    """


_ClientUpdateJobResponseTypeDef = TypedDict(
    "_ClientUpdateJobResponseTypeDef", {"JobName": str}, total=False
)


class ClientUpdateJobResponseTypeDef(_ClientUpdateJobResponseTypeDef):
    """
    Type definition for `ClientUpdateJob` `Response`

    - **JobName** *(string) --*

      Returns the name of the updated job definition.
    """


_ClientUpdateMlTransformParametersFindMatchesParametersTypeDef = TypedDict(
    "_ClientUpdateMlTransformParametersFindMatchesParametersTypeDef",
    {
        "PrimaryKeyColumnName": str,
        "PrecisionRecallTradeoff": float,
        "AccuracyCostTradeoff": float,
        "EnforceProvidedLabels": bool,
    },
    total=False,
)


class ClientUpdateMlTransformParametersFindMatchesParametersTypeDef(
    _ClientUpdateMlTransformParametersFindMatchesParametersTypeDef
):
    """
    Type definition for `ClientUpdateMlTransformParameters` `FindMatchesParameters`

    The parameters for the find matches algorithm.

    - **PrimaryKeyColumnName** *(string) --*

      The name of a column that uniquely identifies rows in the source table. Used to help identify
      matching records.

    - **PrecisionRecallTradeoff** *(float) --*

      The value selected when tuning your transform for a balance between precision and recall. A
      value of 0.5 means no preference; a value of 1.0 means a bias purely for precision, and a
      value of 0.0 means a bias for recall. Because this is a tradeoff, choosing values close to
      1.0 means very low recall, and choosing values close to 0.0 results in very low precision.

      The precision metric indicates how often your model is correct when it predicts a match.

      The recall metric indicates that for an actual match, how often your model predicts the match.

    - **AccuracyCostTradeoff** *(float) --*

      The value that is selected when tuning your transform for a balance between accuracy and
      cost. A value of 0.5 means that the system balances accuracy and cost concerns. A value of
      1.0 means a bias purely for accuracy, which typically results in a higher cost, sometimes
      substantially higher. A value of 0.0 means a bias purely for cost, which results in a less
      accurate ``FindMatches`` transform, sometimes with unacceptable accuracy.

      Accuracy measures how well the transform finds true positives and true negatives. Increasing
      accuracy requires more machine resources and cost. But it also results in increased recall.

      Cost measures how many compute resources, and thus money, are consumed to run the transform.

    - **EnforceProvidedLabels** *(boolean) --*

      The value to switch on or off to force the output to match the provided labels from users. If
      the value is ``True`` , the ``find matches`` transform forces the output to match the
      provided labels. The results override the normal conflation results. If the value is
      ``False`` , the ``find matches`` transform does not ensure all the labels provided are
      respected, and the results rely on the trained model.

      Note that setting this value to true may increase the conflation execution time.
    """


_RequiredClientUpdateMlTransformParametersTypeDef = TypedDict(
    "_RequiredClientUpdateMlTransformParametersTypeDef", {"TransformType": str}
)
_OptionalClientUpdateMlTransformParametersTypeDef = TypedDict(
    "_OptionalClientUpdateMlTransformParametersTypeDef",
    {
        "FindMatchesParameters": ClientUpdateMlTransformParametersFindMatchesParametersTypeDef
    },
    total=False,
)


class ClientUpdateMlTransformParametersTypeDef(
    _RequiredClientUpdateMlTransformParametersTypeDef,
    _OptionalClientUpdateMlTransformParametersTypeDef,
):
    """
    Type definition for `ClientUpdateMlTransform` `Parameters`

    The configuration parameters that are specific to the transform type (algorithm) used.
    Conditionally dependent on the transform type.

    - **TransformType** *(string) --* **[REQUIRED]**

      The type of machine learning transform.

      For information about the types of machine learning transforms, see `Creating Machine Learning
      Transforms
      <http://docs.aws.amazon.com/glue/latest/dg/add-job-machine-learning-transform.html>`__ .

    - **FindMatchesParameters** *(dict) --*

      The parameters for the find matches algorithm.

      - **PrimaryKeyColumnName** *(string) --*

        The name of a column that uniquely identifies rows in the source table. Used to help identify
        matching records.

      - **PrecisionRecallTradeoff** *(float) --*

        The value selected when tuning your transform for a balance between precision and recall. A
        value of 0.5 means no preference; a value of 1.0 means a bias purely for precision, and a
        value of 0.0 means a bias for recall. Because this is a tradeoff, choosing values close to
        1.0 means very low recall, and choosing values close to 0.0 results in very low precision.

        The precision metric indicates how often your model is correct when it predicts a match.

        The recall metric indicates that for an actual match, how often your model predicts the match.

      - **AccuracyCostTradeoff** *(float) --*

        The value that is selected when tuning your transform for a balance between accuracy and
        cost. A value of 0.5 means that the system balances accuracy and cost concerns. A value of
        1.0 means a bias purely for accuracy, which typically results in a higher cost, sometimes
        substantially higher. A value of 0.0 means a bias purely for cost, which results in a less
        accurate ``FindMatches`` transform, sometimes with unacceptable accuracy.

        Accuracy measures how well the transform finds true positives and true negatives. Increasing
        accuracy requires more machine resources and cost. But it also results in increased recall.

        Cost measures how many compute resources, and thus money, are consumed to run the transform.

      - **EnforceProvidedLabels** *(boolean) --*

        The value to switch on or off to force the output to match the provided labels from users. If
        the value is ``True`` , the ``find matches`` transform forces the output to match the
        provided labels. The results override the normal conflation results. If the value is
        ``False`` , the ``find matches`` transform does not ensure all the labels provided are
        respected, and the results rely on the trained model.

        Note that setting this value to true may increase the conflation execution time.
    """


_ClientUpdateMlTransformResponseTypeDef = TypedDict(
    "_ClientUpdateMlTransformResponseTypeDef", {"TransformId": str}, total=False
)


class ClientUpdateMlTransformResponseTypeDef(_ClientUpdateMlTransformResponseTypeDef):
    """
    Type definition for `ClientUpdateMlTransform` `Response`

    - **TransformId** *(string) --*

      The unique identifier for the transform that was updated.
    """


_RequiredClientUpdatePartitionPartitionInputStorageDescriptorColumnsTypeDef = TypedDict(
    "_RequiredClientUpdatePartitionPartitionInputStorageDescriptorColumnsTypeDef",
    {"Name": str},
)
_OptionalClientUpdatePartitionPartitionInputStorageDescriptorColumnsTypeDef = TypedDict(
    "_OptionalClientUpdatePartitionPartitionInputStorageDescriptorColumnsTypeDef",
    {"Type": str, "Comment": str, "Parameters": Dict[str, str]},
    total=False,
)


class ClientUpdatePartitionPartitionInputStorageDescriptorColumnsTypeDef(
    _RequiredClientUpdatePartitionPartitionInputStorageDescriptorColumnsTypeDef,
    _OptionalClientUpdatePartitionPartitionInputStorageDescriptorColumnsTypeDef,
):
    """
    Type definition for `ClientUpdatePartitionPartitionInputStorageDescriptor` `Columns`

    A column in a ``Table`` .

    - **Name** *(string) --* **[REQUIRED]**

      The name of the ``Column`` .

    - **Type** *(string) --*

      The data type of the ``Column`` .

    - **Comment** *(string) --*

      A free-form text comment.

    - **Parameters** *(dict) --*

      These key-value pairs define properties associated with the column.

      - *(string) --*

        - *(string) --*
    """


_ClientUpdatePartitionPartitionInputStorageDescriptorSerdeInfoTypeDef = TypedDict(
    "_ClientUpdatePartitionPartitionInputStorageDescriptorSerdeInfoTypeDef",
    {"Name": str, "SerializationLibrary": str, "Parameters": Dict[str, str]},
    total=False,
)


class ClientUpdatePartitionPartitionInputStorageDescriptorSerdeInfoTypeDef(
    _ClientUpdatePartitionPartitionInputStorageDescriptorSerdeInfoTypeDef
):
    """
    Type definition for `ClientUpdatePartitionPartitionInputStorageDescriptor` `SerdeInfo`

    The serialization/deserialization (SerDe) information.

    - **Name** *(string) --*

      Name of the SerDe.

    - **SerializationLibrary** *(string) --*

      Usually the class that implements the SerDe. An example is
      ``org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`` .

    - **Parameters** *(dict) --*

      These key-value pairs define initialization parameters for the SerDe.

      - *(string) --*

        - *(string) --*
    """


_ClientUpdatePartitionPartitionInputStorageDescriptorSkewedInfoTypeDef = TypedDict(
    "_ClientUpdatePartitionPartitionInputStorageDescriptorSkewedInfoTypeDef",
    {
        "SkewedColumnNames": List[str],
        "SkewedColumnValues": List[str],
        "SkewedColumnValueLocationMaps": Dict[str, str],
    },
    total=False,
)


class ClientUpdatePartitionPartitionInputStorageDescriptorSkewedInfoTypeDef(
    _ClientUpdatePartitionPartitionInputStorageDescriptorSkewedInfoTypeDef
):
    """
    Type definition for `ClientUpdatePartitionPartitionInputStorageDescriptor` `SkewedInfo`

    The information about values that appear frequently in a column (skewed values).

    - **SkewedColumnNames** *(list) --*

      A list of names of columns that contain skewed values.

      - *(string) --*

    - **SkewedColumnValues** *(list) --*

      A list of values that appear so frequently as to be considered skewed.

      - *(string) --*

    - **SkewedColumnValueLocationMaps** *(dict) --*

      A mapping of skewed values to the columns that contain them.

      - *(string) --*

        - *(string) --*
    """


_ClientUpdatePartitionPartitionInputStorageDescriptorSortColumnsTypeDef = TypedDict(
    "_ClientUpdatePartitionPartitionInputStorageDescriptorSortColumnsTypeDef",
    {"Column": str, "SortOrder": int},
)


class ClientUpdatePartitionPartitionInputStorageDescriptorSortColumnsTypeDef(
    _ClientUpdatePartitionPartitionInputStorageDescriptorSortColumnsTypeDef
):
    """
    Type definition for `ClientUpdatePartitionPartitionInputStorageDescriptor` `SortColumns`

    Specifies the sort order of a sorted column.

    - **Column** *(string) --* **[REQUIRED]**

      The name of the column.

    - **SortOrder** *(integer) --* **[REQUIRED]**

      Indicates that the column is sorted in ascending order (``== 1`` ), or in descending
      order (``==0`` ).
    """


_ClientUpdatePartitionPartitionInputStorageDescriptorTypeDef = TypedDict(
    "_ClientUpdatePartitionPartitionInputStorageDescriptorTypeDef",
    {
        "Columns": List[
            ClientUpdatePartitionPartitionInputStorageDescriptorColumnsTypeDef
        ],
        "Location": str,
        "InputFormat": str,
        "OutputFormat": str,
        "Compressed": bool,
        "NumberOfBuckets": int,
        "SerdeInfo": ClientUpdatePartitionPartitionInputStorageDescriptorSerdeInfoTypeDef,
        "BucketColumns": List[str],
        "SortColumns": List[
            ClientUpdatePartitionPartitionInputStorageDescriptorSortColumnsTypeDef
        ],
        "Parameters": Dict[str, str],
        "SkewedInfo": ClientUpdatePartitionPartitionInputStorageDescriptorSkewedInfoTypeDef,
        "StoredAsSubDirectories": bool,
    },
    total=False,
)


class ClientUpdatePartitionPartitionInputStorageDescriptorTypeDef(
    _ClientUpdatePartitionPartitionInputStorageDescriptorTypeDef
):
    """
    Type definition for `ClientUpdatePartitionPartitionInput` `StorageDescriptor`

    Provides information about the physical location where the partition is stored.

    - **Columns** *(list) --*

      A list of the ``Columns`` in the table.

      - *(dict) --*

        A column in a ``Table`` .

        - **Name** *(string) --* **[REQUIRED]**

          The name of the ``Column`` .

        - **Type** *(string) --*

          The data type of the ``Column`` .

        - **Comment** *(string) --*

          A free-form text comment.

        - **Parameters** *(dict) --*

          These key-value pairs define properties associated with the column.

          - *(string) --*

            - *(string) --*

    - **Location** *(string) --*

      The physical location of the table. By default, this takes the form of the warehouse
      location, followed by the database location in the warehouse, followed by the table name.

    - **InputFormat** *(string) --*

      The input format: ``SequenceFileInputFormat`` (binary), or ``TextInputFormat`` , or a custom
      format.

    - **OutputFormat** *(string) --*

      The output format: ``SequenceFileOutputFormat`` (binary), or ``IgnoreKeyTextOutputFormat`` ,
      or a custom format.

    - **Compressed** *(boolean) --*

       ``True`` if the data in the table is compressed, or ``False`` if not.

    - **NumberOfBuckets** *(integer) --*

      Must be specified if the table contains any dimension columns.

    - **SerdeInfo** *(dict) --*

      The serialization/deserialization (SerDe) information.

      - **Name** *(string) --*

        Name of the SerDe.

      - **SerializationLibrary** *(string) --*

        Usually the class that implements the SerDe. An example is
        ``org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`` .

      - **Parameters** *(dict) --*

        These key-value pairs define initialization parameters for the SerDe.

        - *(string) --*

          - *(string) --*

    - **BucketColumns** *(list) --*

      A list of reducer grouping columns, clustering columns, and bucketing columns in the table.

      - *(string) --*

    - **SortColumns** *(list) --*

      A list specifying the sort order of each bucket in the table.

      - *(dict) --*

        Specifies the sort order of a sorted column.

        - **Column** *(string) --* **[REQUIRED]**

          The name of the column.

        - **SortOrder** *(integer) --* **[REQUIRED]**

          Indicates that the column is sorted in ascending order (``== 1`` ), or in descending
          order (``==0`` ).

    - **Parameters** *(dict) --*

      The user-supplied properties in key-value form.

      - *(string) --*

        - *(string) --*

    - **SkewedInfo** *(dict) --*

      The information about values that appear frequently in a column (skewed values).

      - **SkewedColumnNames** *(list) --*

        A list of names of columns that contain skewed values.

        - *(string) --*

      - **SkewedColumnValues** *(list) --*

        A list of values that appear so frequently as to be considered skewed.

        - *(string) --*

      - **SkewedColumnValueLocationMaps** *(dict) --*

        A mapping of skewed values to the columns that contain them.

        - *(string) --*

          - *(string) --*

    - **StoredAsSubDirectories** *(boolean) --*

       ``True`` if the table data is stored in subdirectories, or ``False`` if not.
    """


_ClientUpdatePartitionPartitionInputTypeDef = TypedDict(
    "_ClientUpdatePartitionPartitionInputTypeDef",
    {
        "Values": List[str],
        "LastAccessTime": datetime,
        "StorageDescriptor": ClientUpdatePartitionPartitionInputStorageDescriptorTypeDef,
        "Parameters": Dict[str, str],
        "LastAnalyzedTime": datetime,
    },
    total=False,
)


class ClientUpdatePartitionPartitionInputTypeDef(
    _ClientUpdatePartitionPartitionInputTypeDef
):
    """
    Type definition for `ClientUpdatePartition` `PartitionInput`

    The new partition object to update the partition to.

    - **Values** *(list) --*

      The values of the partition. Although this parameter is not required by the SDK, you must
      specify this parameter for a valid input.

      The values for the keys for the new partition must be passed as an array of String objects that
      must be ordered in the same order as the partition keys appearing in the Amazon S3 prefix.
      Otherwise AWS Glue will add the values to the wrong keys.

      - *(string) --*

    - **LastAccessTime** *(datetime) --*

      The last time at which the partition was accessed.

    - **StorageDescriptor** *(dict) --*

      Provides information about the physical location where the partition is stored.

      - **Columns** *(list) --*

        A list of the ``Columns`` in the table.

        - *(dict) --*

          A column in a ``Table`` .

          - **Name** *(string) --* **[REQUIRED]**

            The name of the ``Column`` .

          - **Type** *(string) --*

            The data type of the ``Column`` .

          - **Comment** *(string) --*

            A free-form text comment.

          - **Parameters** *(dict) --*

            These key-value pairs define properties associated with the column.

            - *(string) --*

              - *(string) --*

      - **Location** *(string) --*

        The physical location of the table. By default, this takes the form of the warehouse
        location, followed by the database location in the warehouse, followed by the table name.

      - **InputFormat** *(string) --*

        The input format: ``SequenceFileInputFormat`` (binary), or ``TextInputFormat`` , or a custom
        format.

      - **OutputFormat** *(string) --*

        The output format: ``SequenceFileOutputFormat`` (binary), or ``IgnoreKeyTextOutputFormat`` ,
        or a custom format.

      - **Compressed** *(boolean) --*

         ``True`` if the data in the table is compressed, or ``False`` if not.

      - **NumberOfBuckets** *(integer) --*

        Must be specified if the table contains any dimension columns.

      - **SerdeInfo** *(dict) --*

        The serialization/deserialization (SerDe) information.

        - **Name** *(string) --*

          Name of the SerDe.

        - **SerializationLibrary** *(string) --*

          Usually the class that implements the SerDe. An example is
          ``org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`` .

        - **Parameters** *(dict) --*

          These key-value pairs define initialization parameters for the SerDe.

          - *(string) --*

            - *(string) --*

      - **BucketColumns** *(list) --*

        A list of reducer grouping columns, clustering columns, and bucketing columns in the table.

        - *(string) --*

      - **SortColumns** *(list) --*

        A list specifying the sort order of each bucket in the table.

        - *(dict) --*

          Specifies the sort order of a sorted column.

          - **Column** *(string) --* **[REQUIRED]**

            The name of the column.

          - **SortOrder** *(integer) --* **[REQUIRED]**

            Indicates that the column is sorted in ascending order (``== 1`` ), or in descending
            order (``==0`` ).

      - **Parameters** *(dict) --*

        The user-supplied properties in key-value form.

        - *(string) --*

          - *(string) --*

      - **SkewedInfo** *(dict) --*

        The information about values that appear frequently in a column (skewed values).

        - **SkewedColumnNames** *(list) --*

          A list of names of columns that contain skewed values.

          - *(string) --*

        - **SkewedColumnValues** *(list) --*

          A list of values that appear so frequently as to be considered skewed.

          - *(string) --*

        - **SkewedColumnValueLocationMaps** *(dict) --*

          A mapping of skewed values to the columns that contain them.

          - *(string) --*

            - *(string) --*

      - **StoredAsSubDirectories** *(boolean) --*

         ``True`` if the table data is stored in subdirectories, or ``False`` if not.

    - **Parameters** *(dict) --*

      These key-value pairs define partition parameters.

      - *(string) --*

        - *(string) --*

    - **LastAnalyzedTime** *(datetime) --*

      The last time at which column statistics were computed for this partition.
    """


_RequiredClientUpdateTableTableInputPartitionKeysTypeDef = TypedDict(
    "_RequiredClientUpdateTableTableInputPartitionKeysTypeDef", {"Name": str}
)
_OptionalClientUpdateTableTableInputPartitionKeysTypeDef = TypedDict(
    "_OptionalClientUpdateTableTableInputPartitionKeysTypeDef",
    {"Type": str, "Comment": str, "Parameters": Dict[str, str]},
    total=False,
)


class ClientUpdateTableTableInputPartitionKeysTypeDef(
    _RequiredClientUpdateTableTableInputPartitionKeysTypeDef,
    _OptionalClientUpdateTableTableInputPartitionKeysTypeDef,
):
    """
    Type definition for `ClientUpdateTableTableInput` `PartitionKeys`

    A column in a ``Table`` .

    - **Name** *(string) --* **[REQUIRED]**

      The name of the ``Column`` .

    - **Type** *(string) --*

      The data type of the ``Column`` .

    - **Comment** *(string) --*

      A free-form text comment.

    - **Parameters** *(dict) --*

      These key-value pairs define properties associated with the column.

      - *(string) --*

        - *(string) --*
    """


_RequiredClientUpdateTableTableInputStorageDescriptorColumnsTypeDef = TypedDict(
    "_RequiredClientUpdateTableTableInputStorageDescriptorColumnsTypeDef", {"Name": str}
)
_OptionalClientUpdateTableTableInputStorageDescriptorColumnsTypeDef = TypedDict(
    "_OptionalClientUpdateTableTableInputStorageDescriptorColumnsTypeDef",
    {"Type": str, "Comment": str, "Parameters": Dict[str, str]},
    total=False,
)


class ClientUpdateTableTableInputStorageDescriptorColumnsTypeDef(
    _RequiredClientUpdateTableTableInputStorageDescriptorColumnsTypeDef,
    _OptionalClientUpdateTableTableInputStorageDescriptorColumnsTypeDef,
):
    """
    Type definition for `ClientUpdateTableTableInputStorageDescriptor` `Columns`

    A column in a ``Table`` .

    - **Name** *(string) --* **[REQUIRED]**

      The name of the ``Column`` .

    - **Type** *(string) --*

      The data type of the ``Column`` .

    - **Comment** *(string) --*

      A free-form text comment.

    - **Parameters** *(dict) --*

      These key-value pairs define properties associated with the column.

      - *(string) --*

        - *(string) --*
    """


_ClientUpdateTableTableInputStorageDescriptorSerdeInfoTypeDef = TypedDict(
    "_ClientUpdateTableTableInputStorageDescriptorSerdeInfoTypeDef",
    {"Name": str, "SerializationLibrary": str, "Parameters": Dict[str, str]},
    total=False,
)


class ClientUpdateTableTableInputStorageDescriptorSerdeInfoTypeDef(
    _ClientUpdateTableTableInputStorageDescriptorSerdeInfoTypeDef
):
    """
    Type definition for `ClientUpdateTableTableInputStorageDescriptor` `SerdeInfo`

    The serialization/deserialization (SerDe) information.

    - **Name** *(string) --*

      Name of the SerDe.

    - **SerializationLibrary** *(string) --*

      Usually the class that implements the SerDe. An example is
      ``org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`` .

    - **Parameters** *(dict) --*

      These key-value pairs define initialization parameters for the SerDe.

      - *(string) --*

        - *(string) --*
    """


_ClientUpdateTableTableInputStorageDescriptorSkewedInfoTypeDef = TypedDict(
    "_ClientUpdateTableTableInputStorageDescriptorSkewedInfoTypeDef",
    {
        "SkewedColumnNames": List[str],
        "SkewedColumnValues": List[str],
        "SkewedColumnValueLocationMaps": Dict[str, str],
    },
    total=False,
)


class ClientUpdateTableTableInputStorageDescriptorSkewedInfoTypeDef(
    _ClientUpdateTableTableInputStorageDescriptorSkewedInfoTypeDef
):
    """
    Type definition for `ClientUpdateTableTableInputStorageDescriptor` `SkewedInfo`

    The information about values that appear frequently in a column (skewed values).

    - **SkewedColumnNames** *(list) --*

      A list of names of columns that contain skewed values.

      - *(string) --*

    - **SkewedColumnValues** *(list) --*

      A list of values that appear so frequently as to be considered skewed.

      - *(string) --*

    - **SkewedColumnValueLocationMaps** *(dict) --*

      A mapping of skewed values to the columns that contain them.

      - *(string) --*

        - *(string) --*
    """


_ClientUpdateTableTableInputStorageDescriptorSortColumnsTypeDef = TypedDict(
    "_ClientUpdateTableTableInputStorageDescriptorSortColumnsTypeDef",
    {"Column": str, "SortOrder": int},
)


class ClientUpdateTableTableInputStorageDescriptorSortColumnsTypeDef(
    _ClientUpdateTableTableInputStorageDescriptorSortColumnsTypeDef
):
    """
    Type definition for `ClientUpdateTableTableInputStorageDescriptor` `SortColumns`

    Specifies the sort order of a sorted column.

    - **Column** *(string) --* **[REQUIRED]**

      The name of the column.

    - **SortOrder** *(integer) --* **[REQUIRED]**

      Indicates that the column is sorted in ascending order (``== 1`` ), or in descending
      order (``==0`` ).
    """


_ClientUpdateTableTableInputStorageDescriptorTypeDef = TypedDict(
    "_ClientUpdateTableTableInputStorageDescriptorTypeDef",
    {
        "Columns": List[ClientUpdateTableTableInputStorageDescriptorColumnsTypeDef],
        "Location": str,
        "InputFormat": str,
        "OutputFormat": str,
        "Compressed": bool,
        "NumberOfBuckets": int,
        "SerdeInfo": ClientUpdateTableTableInputStorageDescriptorSerdeInfoTypeDef,
        "BucketColumns": List[str],
        "SortColumns": List[
            ClientUpdateTableTableInputStorageDescriptorSortColumnsTypeDef
        ],
        "Parameters": Dict[str, str],
        "SkewedInfo": ClientUpdateTableTableInputStorageDescriptorSkewedInfoTypeDef,
        "StoredAsSubDirectories": bool,
    },
    total=False,
)


class ClientUpdateTableTableInputStorageDescriptorTypeDef(
    _ClientUpdateTableTableInputStorageDescriptorTypeDef
):
    """
    Type definition for `ClientUpdateTableTableInput` `StorageDescriptor`

    A storage descriptor containing information about the physical storage of this table.

    - **Columns** *(list) --*

      A list of the ``Columns`` in the table.

      - *(dict) --*

        A column in a ``Table`` .

        - **Name** *(string) --* **[REQUIRED]**

          The name of the ``Column`` .

        - **Type** *(string) --*

          The data type of the ``Column`` .

        - **Comment** *(string) --*

          A free-form text comment.

        - **Parameters** *(dict) --*

          These key-value pairs define properties associated with the column.

          - *(string) --*

            - *(string) --*

    - **Location** *(string) --*

      The physical location of the table. By default, this takes the form of the warehouse
      location, followed by the database location in the warehouse, followed by the table name.

    - **InputFormat** *(string) --*

      The input format: ``SequenceFileInputFormat`` (binary), or ``TextInputFormat`` , or a custom
      format.

    - **OutputFormat** *(string) --*

      The output format: ``SequenceFileOutputFormat`` (binary), or ``IgnoreKeyTextOutputFormat`` ,
      or a custom format.

    - **Compressed** *(boolean) --*

       ``True`` if the data in the table is compressed, or ``False`` if not.

    - **NumberOfBuckets** *(integer) --*

      Must be specified if the table contains any dimension columns.

    - **SerdeInfo** *(dict) --*

      The serialization/deserialization (SerDe) information.

      - **Name** *(string) --*

        Name of the SerDe.

      - **SerializationLibrary** *(string) --*

        Usually the class that implements the SerDe. An example is
        ``org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`` .

      - **Parameters** *(dict) --*

        These key-value pairs define initialization parameters for the SerDe.

        - *(string) --*

          - *(string) --*

    - **BucketColumns** *(list) --*

      A list of reducer grouping columns, clustering columns, and bucketing columns in the table.

      - *(string) --*

    - **SortColumns** *(list) --*

      A list specifying the sort order of each bucket in the table.

      - *(dict) --*

        Specifies the sort order of a sorted column.

        - **Column** *(string) --* **[REQUIRED]**

          The name of the column.

        - **SortOrder** *(integer) --* **[REQUIRED]**

          Indicates that the column is sorted in ascending order (``== 1`` ), or in descending
          order (``==0`` ).

    - **Parameters** *(dict) --*

      The user-supplied properties in key-value form.

      - *(string) --*

        - *(string) --*

    - **SkewedInfo** *(dict) --*

      The information about values that appear frequently in a column (skewed values).

      - **SkewedColumnNames** *(list) --*

        A list of names of columns that contain skewed values.

        - *(string) --*

      - **SkewedColumnValues** *(list) --*

        A list of values that appear so frequently as to be considered skewed.

        - *(string) --*

      - **SkewedColumnValueLocationMaps** *(dict) --*

        A mapping of skewed values to the columns that contain them.

        - *(string) --*

          - *(string) --*

    - **StoredAsSubDirectories** *(boolean) --*

       ``True`` if the table data is stored in subdirectories, or ``False`` if not.
    """


_RequiredClientUpdateTableTableInputTypeDef = TypedDict(
    "_RequiredClientUpdateTableTableInputTypeDef", {"Name": str}
)
_OptionalClientUpdateTableTableInputTypeDef = TypedDict(
    "_OptionalClientUpdateTableTableInputTypeDef",
    {
        "Description": str,
        "Owner": str,
        "LastAccessTime": datetime,
        "LastAnalyzedTime": datetime,
        "Retention": int,
        "StorageDescriptor": ClientUpdateTableTableInputStorageDescriptorTypeDef,
        "PartitionKeys": List[ClientUpdateTableTableInputPartitionKeysTypeDef],
        "ViewOriginalText": str,
        "ViewExpandedText": str,
        "TableType": str,
        "Parameters": Dict[str, str],
    },
    total=False,
)


class ClientUpdateTableTableInputTypeDef(
    _RequiredClientUpdateTableTableInputTypeDef,
    _OptionalClientUpdateTableTableInputTypeDef,
):
    """
    Type definition for `ClientUpdateTable` `TableInput`

    An updated ``TableInput`` object to define the metadata table in the catalog.

    - **Name** *(string) --* **[REQUIRED]**

      The table name. For Hive compatibility, this is folded to lowercase when it is stored.

    - **Description** *(string) --*

      A description of the table.

    - **Owner** *(string) --*

      The table owner.

    - **LastAccessTime** *(datetime) --*

      The last time that the table was accessed.

    - **LastAnalyzedTime** *(datetime) --*

      The last time that column statistics were computed for this table.

    - **Retention** *(integer) --*

      The retention time for this table.

    - **StorageDescriptor** *(dict) --*

      A storage descriptor containing information about the physical storage of this table.

      - **Columns** *(list) --*

        A list of the ``Columns`` in the table.

        - *(dict) --*

          A column in a ``Table`` .

          - **Name** *(string) --* **[REQUIRED]**

            The name of the ``Column`` .

          - **Type** *(string) --*

            The data type of the ``Column`` .

          - **Comment** *(string) --*

            A free-form text comment.

          - **Parameters** *(dict) --*

            These key-value pairs define properties associated with the column.

            - *(string) --*

              - *(string) --*

      - **Location** *(string) --*

        The physical location of the table. By default, this takes the form of the warehouse
        location, followed by the database location in the warehouse, followed by the table name.

      - **InputFormat** *(string) --*

        The input format: ``SequenceFileInputFormat`` (binary), or ``TextInputFormat`` , or a custom
        format.

      - **OutputFormat** *(string) --*

        The output format: ``SequenceFileOutputFormat`` (binary), or ``IgnoreKeyTextOutputFormat`` ,
        or a custom format.

      - **Compressed** *(boolean) --*

         ``True`` if the data in the table is compressed, or ``False`` if not.

      - **NumberOfBuckets** *(integer) --*

        Must be specified if the table contains any dimension columns.

      - **SerdeInfo** *(dict) --*

        The serialization/deserialization (SerDe) information.

        - **Name** *(string) --*

          Name of the SerDe.

        - **SerializationLibrary** *(string) --*

          Usually the class that implements the SerDe. An example is
          ``org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`` .

        - **Parameters** *(dict) --*

          These key-value pairs define initialization parameters for the SerDe.

          - *(string) --*

            - *(string) --*

      - **BucketColumns** *(list) --*

        A list of reducer grouping columns, clustering columns, and bucketing columns in the table.

        - *(string) --*

      - **SortColumns** *(list) --*

        A list specifying the sort order of each bucket in the table.

        - *(dict) --*

          Specifies the sort order of a sorted column.

          - **Column** *(string) --* **[REQUIRED]**

            The name of the column.

          - **SortOrder** *(integer) --* **[REQUIRED]**

            Indicates that the column is sorted in ascending order (``== 1`` ), or in descending
            order (``==0`` ).

      - **Parameters** *(dict) --*

        The user-supplied properties in key-value form.

        - *(string) --*

          - *(string) --*

      - **SkewedInfo** *(dict) --*

        The information about values that appear frequently in a column (skewed values).

        - **SkewedColumnNames** *(list) --*

          A list of names of columns that contain skewed values.

          - *(string) --*

        - **SkewedColumnValues** *(list) --*

          A list of values that appear so frequently as to be considered skewed.

          - *(string) --*

        - **SkewedColumnValueLocationMaps** *(dict) --*

          A mapping of skewed values to the columns that contain them.

          - *(string) --*

            - *(string) --*

      - **StoredAsSubDirectories** *(boolean) --*

         ``True`` if the table data is stored in subdirectories, or ``False`` if not.

    - **PartitionKeys** *(list) --*

      A list of columns by which the table is partitioned. Only primitive types are supported as
      partition keys.

      When you create a table used by Amazon Athena, and you do not specify any ``partitionKeys`` ,
      you must at least set the value of ``partitionKeys`` to an empty list. For example:

       ``"PartitionKeys": []``

      - *(dict) --*

        A column in a ``Table`` .

        - **Name** *(string) --* **[REQUIRED]**

          The name of the ``Column`` .

        - **Type** *(string) --*

          The data type of the ``Column`` .

        - **Comment** *(string) --*

          A free-form text comment.

        - **Parameters** *(dict) --*

          These key-value pairs define properties associated with the column.

          - *(string) --*

            - *(string) --*

    - **ViewOriginalText** *(string) --*

      If the table is a view, the original text of the view; otherwise ``null`` .

    - **ViewExpandedText** *(string) --*

      If the table is a view, the expanded text of the view; otherwise ``null`` .

    - **TableType** *(string) --*

      The type of this table (``EXTERNAL_TABLE`` , ``VIRTUAL_VIEW`` , etc.).

    - **Parameters** *(dict) --*

      These key-value pairs define properties associated with the table.

      - *(string) --*

        - *(string) --*
    """


_ClientUpdateTriggerResponseTriggerActionsNotificationPropertyTypeDef = TypedDict(
    "_ClientUpdateTriggerResponseTriggerActionsNotificationPropertyTypeDef",
    {"NotifyDelayAfter": int},
    total=False,
)


class ClientUpdateTriggerResponseTriggerActionsNotificationPropertyTypeDef(
    _ClientUpdateTriggerResponseTriggerActionsNotificationPropertyTypeDef
):
    """
    Type definition for `ClientUpdateTriggerResponseTriggerActions` `NotificationProperty`

    Specifies configuration properties of a job run notification.

    - **NotifyDelayAfter** *(integer) --*

      After a job run starts, the number of minutes to wait before sending a job run delay
      notification.
    """


_ClientUpdateTriggerResponseTriggerActionsTypeDef = TypedDict(
    "_ClientUpdateTriggerResponseTriggerActionsTypeDef",
    {
        "JobName": str,
        "Arguments": Dict[str, str],
        "Timeout": int,
        "SecurityConfiguration": str,
        "NotificationProperty": ClientUpdateTriggerResponseTriggerActionsNotificationPropertyTypeDef,
        "CrawlerName": str,
    },
    total=False,
)


class ClientUpdateTriggerResponseTriggerActionsTypeDef(
    _ClientUpdateTriggerResponseTriggerActionsTypeDef
):
    """
    Type definition for `ClientUpdateTriggerResponseTrigger` `Actions`

    Defines an action to be initiated by a trigger.

    - **JobName** *(string) --*

      The name of a job to be executed.

    - **Arguments** *(dict) --*

      The job arguments used when this trigger fires. For this job run, they replace the
      default arguments set in the job definition itself.

      You can specify arguments here that your own job-execution script consumes, as well as
      arguments that AWS Glue itself consumes.

      For information about how to specify and consume your own Job arguments, see the
      `Calling AWS Glue APIs in Python
      <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
      topic in the developer guide.

      For information about the key-value pairs that AWS Glue consumes to set up your job,
      see the `Special Parameters Used by AWS Glue
      <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
      topic in the developer guide.

      - *(string) --*

        - *(string) --*

    - **Timeout** *(integer) --*

      The ``JobRun`` timeout in minutes. This is the maximum time that a job run can consume
      resources before it is terminated and enters ``TIMEOUT`` status. The default is 2,880
      minutes (48 hours). This overrides the timeout value set in the parent job.

    - **SecurityConfiguration** *(string) --*

      The name of the ``SecurityConfiguration`` structure to be used with this action.

    - **NotificationProperty** *(dict) --*

      Specifies configuration properties of a job run notification.

      - **NotifyDelayAfter** *(integer) --*

        After a job run starts, the number of minutes to wait before sending a job run delay
        notification.

    - **CrawlerName** *(string) --*

      The name of the crawler to be used with this action.
    """


_ClientUpdateTriggerResponseTriggerPredicateConditionsTypeDef = TypedDict(
    "_ClientUpdateTriggerResponseTriggerPredicateConditionsTypeDef",
    {
        "LogicalOperator": str,
        "JobName": str,
        "State": str,
        "CrawlerName": str,
        "CrawlState": str,
    },
    total=False,
)


class ClientUpdateTriggerResponseTriggerPredicateConditionsTypeDef(
    _ClientUpdateTriggerResponseTriggerPredicateConditionsTypeDef
):
    """
    Type definition for `ClientUpdateTriggerResponseTriggerPredicate` `Conditions`

    Defines a condition under which a trigger fires.

    - **LogicalOperator** *(string) --*

      A logical operator.

    - **JobName** *(string) --*

      The name of the job whose ``JobRuns`` this condition applies to, and on which this
      trigger waits.

    - **State** *(string) --*

      The condition state. Currently, the values supported are ``SUCCEEDED`` , ``STOPPED``
      , ``TIMEOUT`` , and ``FAILED`` .

    - **CrawlerName** *(string) --*

      The name of the crawler to which this condition applies.

    - **CrawlState** *(string) --*

      The state of the crawler to which this condition applies.
    """


_ClientUpdateTriggerResponseTriggerPredicateTypeDef = TypedDict(
    "_ClientUpdateTriggerResponseTriggerPredicateTypeDef",
    {
        "Logical": str,
        "Conditions": List[
            ClientUpdateTriggerResponseTriggerPredicateConditionsTypeDef
        ],
    },
    total=False,
)


class ClientUpdateTriggerResponseTriggerPredicateTypeDef(
    _ClientUpdateTriggerResponseTriggerPredicateTypeDef
):
    """
    Type definition for `ClientUpdateTriggerResponseTrigger` `Predicate`

    The predicate of this trigger, which defines when it will fire.

    - **Logical** *(string) --*

      An optional field if only one condition is listed. If multiple conditions are listed,
      then this field is required.

    - **Conditions** *(list) --*

      A list of the conditions that determine when the trigger will fire.

      - *(dict) --*

        Defines a condition under which a trigger fires.

        - **LogicalOperator** *(string) --*

          A logical operator.

        - **JobName** *(string) --*

          The name of the job whose ``JobRuns`` this condition applies to, and on which this
          trigger waits.

        - **State** *(string) --*

          The condition state. Currently, the values supported are ``SUCCEEDED`` , ``STOPPED``
          , ``TIMEOUT`` , and ``FAILED`` .

        - **CrawlerName** *(string) --*

          The name of the crawler to which this condition applies.

        - **CrawlState** *(string) --*

          The state of the crawler to which this condition applies.
    """


_ClientUpdateTriggerResponseTriggerTypeDef = TypedDict(
    "_ClientUpdateTriggerResponseTriggerTypeDef",
    {
        "Name": str,
        "WorkflowName": str,
        "Id": str,
        "Type": str,
        "State": str,
        "Description": str,
        "Schedule": str,
        "Actions": List[ClientUpdateTriggerResponseTriggerActionsTypeDef],
        "Predicate": ClientUpdateTriggerResponseTriggerPredicateTypeDef,
    },
    total=False,
)


class ClientUpdateTriggerResponseTriggerTypeDef(
    _ClientUpdateTriggerResponseTriggerTypeDef
):
    """
    Type definition for `ClientUpdateTriggerResponse` `Trigger`

    The resulting trigger definition.

    - **Name** *(string) --*

      The name of the trigger.

    - **WorkflowName** *(string) --*

      The name of the workflow associated with the trigger.

    - **Id** *(string) --*

      Reserved for future use.

    - **Type** *(string) --*

      The type of trigger that this is.

    - **State** *(string) --*

      The current state of the trigger.

    - **Description** *(string) --*

      A description of this trigger.

    - **Schedule** *(string) --*

      A ``cron`` expression used to specify the schedule (see `Time-Based Schedules for Jobs and
      Crawlers
      <https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html>`__ . For
      example, to run something every day at 12:15 UTC, you would specify: ``cron(15 12 * * ?
      *)`` .

    - **Actions** *(list) --*

      The actions initiated by this trigger.

      - *(dict) --*

        Defines an action to be initiated by a trigger.

        - **JobName** *(string) --*

          The name of a job to be executed.

        - **Arguments** *(dict) --*

          The job arguments used when this trigger fires. For this job run, they replace the
          default arguments set in the job definition itself.

          You can specify arguments here that your own job-execution script consumes, as well as
          arguments that AWS Glue itself consumes.

          For information about how to specify and consume your own Job arguments, see the
          `Calling AWS Glue APIs in Python
          <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
          topic in the developer guide.

          For information about the key-value pairs that AWS Glue consumes to set up your job,
          see the `Special Parameters Used by AWS Glue
          <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
          topic in the developer guide.

          - *(string) --*

            - *(string) --*

        - **Timeout** *(integer) --*

          The ``JobRun`` timeout in minutes. This is the maximum time that a job run can consume
          resources before it is terminated and enters ``TIMEOUT`` status. The default is 2,880
          minutes (48 hours). This overrides the timeout value set in the parent job.

        - **SecurityConfiguration** *(string) --*

          The name of the ``SecurityConfiguration`` structure to be used with this action.

        - **NotificationProperty** *(dict) --*

          Specifies configuration properties of a job run notification.

          - **NotifyDelayAfter** *(integer) --*

            After a job run starts, the number of minutes to wait before sending a job run delay
            notification.

        - **CrawlerName** *(string) --*

          The name of the crawler to be used with this action.

    - **Predicate** *(dict) --*

      The predicate of this trigger, which defines when it will fire.

      - **Logical** *(string) --*

        An optional field if only one condition is listed. If multiple conditions are listed,
        then this field is required.

      - **Conditions** *(list) --*

        A list of the conditions that determine when the trigger will fire.

        - *(dict) --*

          Defines a condition under which a trigger fires.

          - **LogicalOperator** *(string) --*

            A logical operator.

          - **JobName** *(string) --*

            The name of the job whose ``JobRuns`` this condition applies to, and on which this
            trigger waits.

          - **State** *(string) --*

            The condition state. Currently, the values supported are ``SUCCEEDED`` , ``STOPPED``
            , ``TIMEOUT`` , and ``FAILED`` .

          - **CrawlerName** *(string) --*

            The name of the crawler to which this condition applies.

          - **CrawlState** *(string) --*

            The state of the crawler to which this condition applies.
    """


_ClientUpdateTriggerResponseTypeDef = TypedDict(
    "_ClientUpdateTriggerResponseTypeDef",
    {"Trigger": ClientUpdateTriggerResponseTriggerTypeDef},
    total=False,
)


class ClientUpdateTriggerResponseTypeDef(_ClientUpdateTriggerResponseTypeDef):
    """
    Type definition for `ClientUpdateTrigger` `Response`

    - **Trigger** *(dict) --*

      The resulting trigger definition.

      - **Name** *(string) --*

        The name of the trigger.

      - **WorkflowName** *(string) --*

        The name of the workflow associated with the trigger.

      - **Id** *(string) --*

        Reserved for future use.

      - **Type** *(string) --*

        The type of trigger that this is.

      - **State** *(string) --*

        The current state of the trigger.

      - **Description** *(string) --*

        A description of this trigger.

      - **Schedule** *(string) --*

        A ``cron`` expression used to specify the schedule (see `Time-Based Schedules for Jobs and
        Crawlers
        <https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html>`__ . For
        example, to run something every day at 12:15 UTC, you would specify: ``cron(15 12 * * ?
        *)`` .

      - **Actions** *(list) --*

        The actions initiated by this trigger.

        - *(dict) --*

          Defines an action to be initiated by a trigger.

          - **JobName** *(string) --*

            The name of a job to be executed.

          - **Arguments** *(dict) --*

            The job arguments used when this trigger fires. For this job run, they replace the
            default arguments set in the job definition itself.

            You can specify arguments here that your own job-execution script consumes, as well as
            arguments that AWS Glue itself consumes.

            For information about how to specify and consume your own Job arguments, see the
            `Calling AWS Glue APIs in Python
            <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
            topic in the developer guide.

            For information about the key-value pairs that AWS Glue consumes to set up your job,
            see the `Special Parameters Used by AWS Glue
            <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
            topic in the developer guide.

            - *(string) --*

              - *(string) --*

          - **Timeout** *(integer) --*

            The ``JobRun`` timeout in minutes. This is the maximum time that a job run can consume
            resources before it is terminated and enters ``TIMEOUT`` status. The default is 2,880
            minutes (48 hours). This overrides the timeout value set in the parent job.

          - **SecurityConfiguration** *(string) --*

            The name of the ``SecurityConfiguration`` structure to be used with this action.

          - **NotificationProperty** *(dict) --*

            Specifies configuration properties of a job run notification.

            - **NotifyDelayAfter** *(integer) --*

              After a job run starts, the number of minutes to wait before sending a job run delay
              notification.

          - **CrawlerName** *(string) --*

            The name of the crawler to be used with this action.

      - **Predicate** *(dict) --*

        The predicate of this trigger, which defines when it will fire.

        - **Logical** *(string) --*

          An optional field if only one condition is listed. If multiple conditions are listed,
          then this field is required.

        - **Conditions** *(list) --*

          A list of the conditions that determine when the trigger will fire.

          - *(dict) --*

            Defines a condition under which a trigger fires.

            - **LogicalOperator** *(string) --*

              A logical operator.

            - **JobName** *(string) --*

              The name of the job whose ``JobRuns`` this condition applies to, and on which this
              trigger waits.

            - **State** *(string) --*

              The condition state. Currently, the values supported are ``SUCCEEDED`` , ``STOPPED``
              , ``TIMEOUT`` , and ``FAILED`` .

            - **CrawlerName** *(string) --*

              The name of the crawler to which this condition applies.

            - **CrawlState** *(string) --*

              The state of the crawler to which this condition applies.
    """


_ClientUpdateTriggerTriggerUpdateActionsNotificationPropertyTypeDef = TypedDict(
    "_ClientUpdateTriggerTriggerUpdateActionsNotificationPropertyTypeDef",
    {"NotifyDelayAfter": int},
    total=False,
)


class ClientUpdateTriggerTriggerUpdateActionsNotificationPropertyTypeDef(
    _ClientUpdateTriggerTriggerUpdateActionsNotificationPropertyTypeDef
):
    """
    Type definition for `ClientUpdateTriggerTriggerUpdateActions` `NotificationProperty`

    Specifies configuration properties of a job run notification.

    - **NotifyDelayAfter** *(integer) --*

      After a job run starts, the number of minutes to wait before sending a job run delay
      notification.
    """


_ClientUpdateTriggerTriggerUpdateActionsTypeDef = TypedDict(
    "_ClientUpdateTriggerTriggerUpdateActionsTypeDef",
    {
        "JobName": str,
        "Arguments": Dict[str, str],
        "Timeout": int,
        "SecurityConfiguration": str,
        "NotificationProperty": ClientUpdateTriggerTriggerUpdateActionsNotificationPropertyTypeDef,
        "CrawlerName": str,
    },
    total=False,
)


class ClientUpdateTriggerTriggerUpdateActionsTypeDef(
    _ClientUpdateTriggerTriggerUpdateActionsTypeDef
):
    """
    Type definition for `ClientUpdateTriggerTriggerUpdate` `Actions`

    Defines an action to be initiated by a trigger.

    - **JobName** *(string) --*

      The name of a job to be executed.

    - **Arguments** *(dict) --*

      The job arguments used when this trigger fires. For this job run, they replace the default
      arguments set in the job definition itself.

      You can specify arguments here that your own job-execution script consumes, as well as
      arguments that AWS Glue itself consumes.

      For information about how to specify and consume your own Job arguments, see the `Calling
      AWS Glue APIs in Python
      <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
      topic in the developer guide.

      For information about the key-value pairs that AWS Glue consumes to set up your job, see
      the `Special Parameters Used by AWS Glue
      <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
      topic in the developer guide.

      - *(string) --*

        - *(string) --*

    - **Timeout** *(integer) --*

      The ``JobRun`` timeout in minutes. This is the maximum time that a job run can consume
      resources before it is terminated and enters ``TIMEOUT`` status. The default is 2,880
      minutes (48 hours). This overrides the timeout value set in the parent job.

    - **SecurityConfiguration** *(string) --*

      The name of the ``SecurityConfiguration`` structure to be used with this action.

    - **NotificationProperty** *(dict) --*

      Specifies configuration properties of a job run notification.

      - **NotifyDelayAfter** *(integer) --*

        After a job run starts, the number of minutes to wait before sending a job run delay
        notification.

    - **CrawlerName** *(string) --*

      The name of the crawler to be used with this action.
    """


_ClientUpdateTriggerTriggerUpdatePredicateConditionsTypeDef = TypedDict(
    "_ClientUpdateTriggerTriggerUpdatePredicateConditionsTypeDef",
    {
        "LogicalOperator": str,
        "JobName": str,
        "State": str,
        "CrawlerName": str,
        "CrawlState": str,
    },
    total=False,
)


class ClientUpdateTriggerTriggerUpdatePredicateConditionsTypeDef(
    _ClientUpdateTriggerTriggerUpdatePredicateConditionsTypeDef
):
    """
    Type definition for `ClientUpdateTriggerTriggerUpdatePredicate` `Conditions`

    Defines a condition under which a trigger fires.

    - **LogicalOperator** *(string) --*

      A logical operator.

    - **JobName** *(string) --*

      The name of the job whose ``JobRuns`` this condition applies to, and on which this
      trigger waits.

    - **State** *(string) --*

      The condition state. Currently, the values supported are ``SUCCEEDED`` , ``STOPPED`` ,
      ``TIMEOUT`` , and ``FAILED`` .

    - **CrawlerName** *(string) --*

      The name of the crawler to which this condition applies.

    - **CrawlState** *(string) --*

      The state of the crawler to which this condition applies.
    """


_ClientUpdateTriggerTriggerUpdatePredicateTypeDef = TypedDict(
    "_ClientUpdateTriggerTriggerUpdatePredicateTypeDef",
    {
        "Logical": str,
        "Conditions": List[ClientUpdateTriggerTriggerUpdatePredicateConditionsTypeDef],
    },
    total=False,
)


class ClientUpdateTriggerTriggerUpdatePredicateTypeDef(
    _ClientUpdateTriggerTriggerUpdatePredicateTypeDef
):
    """
    Type definition for `ClientUpdateTriggerTriggerUpdate` `Predicate`

    The predicate of this trigger, which defines when it will fire.

    - **Logical** *(string) --*

      An optional field if only one condition is listed. If multiple conditions are listed, then
      this field is required.

    - **Conditions** *(list) --*

      A list of the conditions that determine when the trigger will fire.

      - *(dict) --*

        Defines a condition under which a trigger fires.

        - **LogicalOperator** *(string) --*

          A logical operator.

        - **JobName** *(string) --*

          The name of the job whose ``JobRuns`` this condition applies to, and on which this
          trigger waits.

        - **State** *(string) --*

          The condition state. Currently, the values supported are ``SUCCEEDED`` , ``STOPPED`` ,
          ``TIMEOUT`` , and ``FAILED`` .

        - **CrawlerName** *(string) --*

          The name of the crawler to which this condition applies.

        - **CrawlState** *(string) --*

          The state of the crawler to which this condition applies.
    """


_ClientUpdateTriggerTriggerUpdateTypeDef = TypedDict(
    "_ClientUpdateTriggerTriggerUpdateTypeDef",
    {
        "Name": str,
        "Description": str,
        "Schedule": str,
        "Actions": List[ClientUpdateTriggerTriggerUpdateActionsTypeDef],
        "Predicate": ClientUpdateTriggerTriggerUpdatePredicateTypeDef,
    },
    total=False,
)


class ClientUpdateTriggerTriggerUpdateTypeDef(_ClientUpdateTriggerTriggerUpdateTypeDef):
    """
    Type definition for `ClientUpdateTrigger` `TriggerUpdate`

    The new values with which to update the trigger.

    - **Name** *(string) --*

      Reserved for future use.

    - **Description** *(string) --*

      A description of this trigger.

    - **Schedule** *(string) --*

      A ``cron`` expression used to specify the schedule (see `Time-Based Schedules for Jobs and
      Crawlers <https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html>`__ .
      For example, to run something every day at 12:15 UTC, you would specify: ``cron(15 12 * * ?
      *)`` .

    - **Actions** *(list) --*

      The actions initiated by this trigger.

      - *(dict) --*

        Defines an action to be initiated by a trigger.

        - **JobName** *(string) --*

          The name of a job to be executed.

        - **Arguments** *(dict) --*

          The job arguments used when this trigger fires. For this job run, they replace the default
          arguments set in the job definition itself.

          You can specify arguments here that your own job-execution script consumes, as well as
          arguments that AWS Glue itself consumes.

          For information about how to specify and consume your own Job arguments, see the `Calling
          AWS Glue APIs in Python
          <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
          topic in the developer guide.

          For information about the key-value pairs that AWS Glue consumes to set up your job, see
          the `Special Parameters Used by AWS Glue
          <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
          topic in the developer guide.

          - *(string) --*

            - *(string) --*

        - **Timeout** *(integer) --*

          The ``JobRun`` timeout in minutes. This is the maximum time that a job run can consume
          resources before it is terminated and enters ``TIMEOUT`` status. The default is 2,880
          minutes (48 hours). This overrides the timeout value set in the parent job.

        - **SecurityConfiguration** *(string) --*

          The name of the ``SecurityConfiguration`` structure to be used with this action.

        - **NotificationProperty** *(dict) --*

          Specifies configuration properties of a job run notification.

          - **NotifyDelayAfter** *(integer) --*

            After a job run starts, the number of minutes to wait before sending a job run delay
            notification.

        - **CrawlerName** *(string) --*

          The name of the crawler to be used with this action.

    - **Predicate** *(dict) --*

      The predicate of this trigger, which defines when it will fire.

      - **Logical** *(string) --*

        An optional field if only one condition is listed. If multiple conditions are listed, then
        this field is required.

      - **Conditions** *(list) --*

        A list of the conditions that determine when the trigger will fire.

        - *(dict) --*

          Defines a condition under which a trigger fires.

          - **LogicalOperator** *(string) --*

            A logical operator.

          - **JobName** *(string) --*

            The name of the job whose ``JobRuns`` this condition applies to, and on which this
            trigger waits.

          - **State** *(string) --*

            The condition state. Currently, the values supported are ``SUCCEEDED`` , ``STOPPED`` ,
            ``TIMEOUT`` , and ``FAILED`` .

          - **CrawlerName** *(string) --*

            The name of the crawler to which this condition applies.

          - **CrawlState** *(string) --*

            The state of the crawler to which this condition applies.
    """


_ClientUpdateUserDefinedFunctionFunctionInputResourceUrisTypeDef = TypedDict(
    "_ClientUpdateUserDefinedFunctionFunctionInputResourceUrisTypeDef",
    {"ResourceType": str, "Uri": str},
    total=False,
)


class ClientUpdateUserDefinedFunctionFunctionInputResourceUrisTypeDef(
    _ClientUpdateUserDefinedFunctionFunctionInputResourceUrisTypeDef
):
    """
    Type definition for `ClientUpdateUserDefinedFunctionFunctionInput` `ResourceUris`

    The URIs for function resources.

    - **ResourceType** *(string) --*

      The type of the resource.

    - **Uri** *(string) --*

      The URI for accessing the resource.
    """


_ClientUpdateUserDefinedFunctionFunctionInputTypeDef = TypedDict(
    "_ClientUpdateUserDefinedFunctionFunctionInputTypeDef",
    {
        "FunctionName": str,
        "ClassName": str,
        "OwnerName": str,
        "OwnerType": str,
        "ResourceUris": List[
            ClientUpdateUserDefinedFunctionFunctionInputResourceUrisTypeDef
        ],
    },
    total=False,
)


class ClientUpdateUserDefinedFunctionFunctionInputTypeDef(
    _ClientUpdateUserDefinedFunctionFunctionInputTypeDef
):
    """
    Type definition for `ClientUpdateUserDefinedFunction` `FunctionInput`

    A ``FunctionInput`` object that redefines the function in the Data Catalog.

    - **FunctionName** *(string) --*

      The name of the function.

    - **ClassName** *(string) --*

      The Java class that contains the function code.

    - **OwnerName** *(string) --*

      The owner of the function.

    - **OwnerType** *(string) --*

      The owner type.

    - **ResourceUris** *(list) --*

      The resource URIs for the function.

      - *(dict) --*

        The URIs for function resources.

        - **ResourceType** *(string) --*

          The type of the resource.

        - **Uri** *(string) --*

          The URI for accessing the resource.
    """


_ClientUpdateWorkflowResponseTypeDef = TypedDict(
    "_ClientUpdateWorkflowResponseTypeDef", {"Name": str}, total=False
)


class ClientUpdateWorkflowResponseTypeDef(_ClientUpdateWorkflowResponseTypeDef):
    """
    Type definition for `ClientUpdateWorkflow` `Response`

    - **Name** *(string) --*

      The name of the workflow which was specified in input.
    """


_GetClassifiersPaginatePaginationConfigTypeDef = TypedDict(
    "_GetClassifiersPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class GetClassifiersPaginatePaginationConfigTypeDef(
    _GetClassifiersPaginatePaginationConfigTypeDef
):
    """
    Type definition for `GetClassifiersPaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_GetClassifiersPaginateResponseClassifiersCsvClassifierTypeDef = TypedDict(
    "_GetClassifiersPaginateResponseClassifiersCsvClassifierTypeDef",
    {
        "Name": str,
        "CreationTime": datetime,
        "LastUpdated": datetime,
        "Version": int,
        "Delimiter": str,
        "QuoteSymbol": str,
        "ContainsHeader": str,
        "Header": List[str],
        "DisableValueTrimming": bool,
        "AllowSingleColumn": bool,
    },
    total=False,
)


class GetClassifiersPaginateResponseClassifiersCsvClassifierTypeDef(
    _GetClassifiersPaginateResponseClassifiersCsvClassifierTypeDef
):
    """
    Type definition for `GetClassifiersPaginateResponseClassifiers` `CsvClassifier`

    A classifier for comma-separated values (CSV).

    - **Name** *(string) --*

      The name of the classifier.

    - **CreationTime** *(datetime) --*

      The time that this classifier was registered.

    - **LastUpdated** *(datetime) --*

      The time that this classifier was last updated.

    - **Version** *(integer) --*

      The version of this classifier.

    - **Delimiter** *(string) --*

      A custom symbol to denote what separates each column entry in the row.

    - **QuoteSymbol** *(string) --*

      A custom symbol to denote what combines content into a single column value. It must be
      different from the column delimiter.

    - **ContainsHeader** *(string) --*

      Indicates whether the CSV file contains a header.

    - **Header** *(list) --*

      A list of strings representing column names.

      - *(string) --*

    - **DisableValueTrimming** *(boolean) --*

      Specifies not to trim values before identifying the type of column values. The default
      value is ``true`` .

    - **AllowSingleColumn** *(boolean) --*

      Enables the processing of files that contain only one column.
    """


_GetClassifiersPaginateResponseClassifiersGrokClassifierTypeDef = TypedDict(
    "_GetClassifiersPaginateResponseClassifiersGrokClassifierTypeDef",
    {
        "Name": str,
        "Classification": str,
        "CreationTime": datetime,
        "LastUpdated": datetime,
        "Version": int,
        "GrokPattern": str,
        "CustomPatterns": str,
    },
    total=False,
)


class GetClassifiersPaginateResponseClassifiersGrokClassifierTypeDef(
    _GetClassifiersPaginateResponseClassifiersGrokClassifierTypeDef
):
    """
    Type definition for `GetClassifiersPaginateResponseClassifiers` `GrokClassifier`

    A classifier that uses ``grok`` .

    - **Name** *(string) --*

      The name of the classifier.

    - **Classification** *(string) --*

      An identifier of the data format that the classifier matches, such as Twitter, JSON,
      Omniture logs, and so on.

    - **CreationTime** *(datetime) --*

      The time that this classifier was registered.

    - **LastUpdated** *(datetime) --*

      The time that this classifier was last updated.

    - **Version** *(integer) --*

      The version of this classifier.

    - **GrokPattern** *(string) --*

      The grok pattern applied to a data store by this classifier. For more information, see
      built-in patterns in `Writing Custom Classifiers
      <http://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html>`__ .

    - **CustomPatterns** *(string) --*

      Optional custom grok patterns defined by this classifier. For more information, see
      custom patterns in `Writing Custom Classifiers
      <http://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html>`__ .
    """


_GetClassifiersPaginateResponseClassifiersJsonClassifierTypeDef = TypedDict(
    "_GetClassifiersPaginateResponseClassifiersJsonClassifierTypeDef",
    {
        "Name": str,
        "CreationTime": datetime,
        "LastUpdated": datetime,
        "Version": int,
        "JsonPath": str,
    },
    total=False,
)


class GetClassifiersPaginateResponseClassifiersJsonClassifierTypeDef(
    _GetClassifiersPaginateResponseClassifiersJsonClassifierTypeDef
):
    """
    Type definition for `GetClassifiersPaginateResponseClassifiers` `JsonClassifier`

    A classifier for JSON content.

    - **Name** *(string) --*

      The name of the classifier.

    - **CreationTime** *(datetime) --*

      The time that this classifier was registered.

    - **LastUpdated** *(datetime) --*

      The time that this classifier was last updated.

    - **Version** *(integer) --*

      The version of this classifier.

    - **JsonPath** *(string) --*

      A ``JsonPath`` string defining the JSON data for the classifier to classify. AWS Glue
      supports a subset of ``JsonPath`` , as described in `Writing JsonPath Custom
      Classifiers
      <https://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html#custom-classifier-json>`__
      .
    """


_GetClassifiersPaginateResponseClassifiersXMLClassifierTypeDef = TypedDict(
    "_GetClassifiersPaginateResponseClassifiersXMLClassifierTypeDef",
    {
        "Name": str,
        "Classification": str,
        "CreationTime": datetime,
        "LastUpdated": datetime,
        "Version": int,
        "RowTag": str,
    },
    total=False,
)


class GetClassifiersPaginateResponseClassifiersXMLClassifierTypeDef(
    _GetClassifiersPaginateResponseClassifiersXMLClassifierTypeDef
):
    """
    Type definition for `GetClassifiersPaginateResponseClassifiers` `XMLClassifier`

    A classifier for XML content.

    - **Name** *(string) --*

      The name of the classifier.

    - **Classification** *(string) --*

      An identifier of the data format that the classifier matches.

    - **CreationTime** *(datetime) --*

      The time that this classifier was registered.

    - **LastUpdated** *(datetime) --*

      The time that this classifier was last updated.

    - **Version** *(integer) --*

      The version of this classifier.

    - **RowTag** *(string) --*

      The XML tag designating the element that contains each record in an XML document being
      parsed. This can't identify a self-closing element (closed by ``/>`` ). An empty row
      element that contains only attributes can be parsed as long as it ends with a closing
      tag (for example, ``<row item_a="A" item_b="B"></row>`` is okay, but ``<row item_a="A"
      item_b="B" />`` is not).
    """


_GetClassifiersPaginateResponseClassifiersTypeDef = TypedDict(
    "_GetClassifiersPaginateResponseClassifiersTypeDef",
    {
        "GrokClassifier": GetClassifiersPaginateResponseClassifiersGrokClassifierTypeDef,
        "XMLClassifier": GetClassifiersPaginateResponseClassifiersXMLClassifierTypeDef,
        "JsonClassifier": GetClassifiersPaginateResponseClassifiersJsonClassifierTypeDef,
        "CsvClassifier": GetClassifiersPaginateResponseClassifiersCsvClassifierTypeDef,
    },
    total=False,
)


class GetClassifiersPaginateResponseClassifiersTypeDef(
    _GetClassifiersPaginateResponseClassifiersTypeDef
):
    """
    Type definition for `GetClassifiersPaginateResponse` `Classifiers`

    Classifiers are triggered during a crawl task. A classifier checks whether a given file is
    in a format it can handle. If it is, the classifier creates a schema in the form of a
    ``StructType`` object that matches that data format.

    You can use the standard classifiers that AWS Glue provides, or you can write your own
    classifiers to best categorize your data sources and specify the appropriate schemas to use
    for them. A classifier can be a ``grok`` classifier, an ``XML`` classifier, a ``JSON``
    classifier, or a custom ``CSV`` classifier, as specified in one of the fields in the
    ``Classifier`` object.

    - **GrokClassifier** *(dict) --*

      A classifier that uses ``grok`` .

      - **Name** *(string) --*

        The name of the classifier.

      - **Classification** *(string) --*

        An identifier of the data format that the classifier matches, such as Twitter, JSON,
        Omniture logs, and so on.

      - **CreationTime** *(datetime) --*

        The time that this classifier was registered.

      - **LastUpdated** *(datetime) --*

        The time that this classifier was last updated.

      - **Version** *(integer) --*

        The version of this classifier.

      - **GrokPattern** *(string) --*

        The grok pattern applied to a data store by this classifier. For more information, see
        built-in patterns in `Writing Custom Classifiers
        <http://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html>`__ .

      - **CustomPatterns** *(string) --*

        Optional custom grok patterns defined by this classifier. For more information, see
        custom patterns in `Writing Custom Classifiers
        <http://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html>`__ .

    - **XMLClassifier** *(dict) --*

      A classifier for XML content.

      - **Name** *(string) --*

        The name of the classifier.

      - **Classification** *(string) --*

        An identifier of the data format that the classifier matches.

      - **CreationTime** *(datetime) --*

        The time that this classifier was registered.

      - **LastUpdated** *(datetime) --*

        The time that this classifier was last updated.

      - **Version** *(integer) --*

        The version of this classifier.

      - **RowTag** *(string) --*

        The XML tag designating the element that contains each record in an XML document being
        parsed. This can't identify a self-closing element (closed by ``/>`` ). An empty row
        element that contains only attributes can be parsed as long as it ends with a closing
        tag (for example, ``<row item_a="A" item_b="B"></row>`` is okay, but ``<row item_a="A"
        item_b="B" />`` is not).

    - **JsonClassifier** *(dict) --*

      A classifier for JSON content.

      - **Name** *(string) --*

        The name of the classifier.

      - **CreationTime** *(datetime) --*

        The time that this classifier was registered.

      - **LastUpdated** *(datetime) --*

        The time that this classifier was last updated.

      - **Version** *(integer) --*

        The version of this classifier.

      - **JsonPath** *(string) --*

        A ``JsonPath`` string defining the JSON data for the classifier to classify. AWS Glue
        supports a subset of ``JsonPath`` , as described in `Writing JsonPath Custom
        Classifiers
        <https://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html#custom-classifier-json>`__
        .

    - **CsvClassifier** *(dict) --*

      A classifier for comma-separated values (CSV).

      - **Name** *(string) --*

        The name of the classifier.

      - **CreationTime** *(datetime) --*

        The time that this classifier was registered.

      - **LastUpdated** *(datetime) --*

        The time that this classifier was last updated.

      - **Version** *(integer) --*

        The version of this classifier.

      - **Delimiter** *(string) --*

        A custom symbol to denote what separates each column entry in the row.

      - **QuoteSymbol** *(string) --*

        A custom symbol to denote what combines content into a single column value. It must be
        different from the column delimiter.

      - **ContainsHeader** *(string) --*

        Indicates whether the CSV file contains a header.

      - **Header** *(list) --*

        A list of strings representing column names.

        - *(string) --*

      - **DisableValueTrimming** *(boolean) --*

        Specifies not to trim values before identifying the type of column values. The default
        value is ``true`` .

      - **AllowSingleColumn** *(boolean) --*

        Enables the processing of files that contain only one column.
    """


_GetClassifiersPaginateResponseTypeDef = TypedDict(
    "_GetClassifiersPaginateResponseTypeDef",
    {"Classifiers": List[GetClassifiersPaginateResponseClassifiersTypeDef]},
    total=False,
)


class GetClassifiersPaginateResponseTypeDef(_GetClassifiersPaginateResponseTypeDef):
    """
    Type definition for `GetClassifiersPaginate` `Response`

    - **Classifiers** *(list) --*

      The requested list of classifier objects.

      - *(dict) --*

        Classifiers are triggered during a crawl task. A classifier checks whether a given file is
        in a format it can handle. If it is, the classifier creates a schema in the form of a
        ``StructType`` object that matches that data format.

        You can use the standard classifiers that AWS Glue provides, or you can write your own
        classifiers to best categorize your data sources and specify the appropriate schemas to use
        for them. A classifier can be a ``grok`` classifier, an ``XML`` classifier, a ``JSON``
        classifier, or a custom ``CSV`` classifier, as specified in one of the fields in the
        ``Classifier`` object.

        - **GrokClassifier** *(dict) --*

          A classifier that uses ``grok`` .

          - **Name** *(string) --*

            The name of the classifier.

          - **Classification** *(string) --*

            An identifier of the data format that the classifier matches, such as Twitter, JSON,
            Omniture logs, and so on.

          - **CreationTime** *(datetime) --*

            The time that this classifier was registered.

          - **LastUpdated** *(datetime) --*

            The time that this classifier was last updated.

          - **Version** *(integer) --*

            The version of this classifier.

          - **GrokPattern** *(string) --*

            The grok pattern applied to a data store by this classifier. For more information, see
            built-in patterns in `Writing Custom Classifiers
            <http://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html>`__ .

          - **CustomPatterns** *(string) --*

            Optional custom grok patterns defined by this classifier. For more information, see
            custom patterns in `Writing Custom Classifiers
            <http://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html>`__ .

        - **XMLClassifier** *(dict) --*

          A classifier for XML content.

          - **Name** *(string) --*

            The name of the classifier.

          - **Classification** *(string) --*

            An identifier of the data format that the classifier matches.

          - **CreationTime** *(datetime) --*

            The time that this classifier was registered.

          - **LastUpdated** *(datetime) --*

            The time that this classifier was last updated.

          - **Version** *(integer) --*

            The version of this classifier.

          - **RowTag** *(string) --*

            The XML tag designating the element that contains each record in an XML document being
            parsed. This can't identify a self-closing element (closed by ``/>`` ). An empty row
            element that contains only attributes can be parsed as long as it ends with a closing
            tag (for example, ``<row item_a="A" item_b="B"></row>`` is okay, but ``<row item_a="A"
            item_b="B" />`` is not).

        - **JsonClassifier** *(dict) --*

          A classifier for JSON content.

          - **Name** *(string) --*

            The name of the classifier.

          - **CreationTime** *(datetime) --*

            The time that this classifier was registered.

          - **LastUpdated** *(datetime) --*

            The time that this classifier was last updated.

          - **Version** *(integer) --*

            The version of this classifier.

          - **JsonPath** *(string) --*

            A ``JsonPath`` string defining the JSON data for the classifier to classify. AWS Glue
            supports a subset of ``JsonPath`` , as described in `Writing JsonPath Custom
            Classifiers
            <https://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html#custom-classifier-json>`__
            .

        - **CsvClassifier** *(dict) --*

          A classifier for comma-separated values (CSV).

          - **Name** *(string) --*

            The name of the classifier.

          - **CreationTime** *(datetime) --*

            The time that this classifier was registered.

          - **LastUpdated** *(datetime) --*

            The time that this classifier was last updated.

          - **Version** *(integer) --*

            The version of this classifier.

          - **Delimiter** *(string) --*

            A custom symbol to denote what separates each column entry in the row.

          - **QuoteSymbol** *(string) --*

            A custom symbol to denote what combines content into a single column value. It must be
            different from the column delimiter.

          - **ContainsHeader** *(string) --*

            Indicates whether the CSV file contains a header.

          - **Header** *(list) --*

            A list of strings representing column names.

            - *(string) --*

          - **DisableValueTrimming** *(boolean) --*

            Specifies not to trim values before identifying the type of column values. The default
            value is ``true`` .

          - **AllowSingleColumn** *(boolean) --*

            Enables the processing of files that contain only one column.
    """


_GetConnectionsPaginateFilterTypeDef = TypedDict(
    "_GetConnectionsPaginateFilterTypeDef",
    {"MatchCriteria": List[str], "ConnectionType": str},
    total=False,
)


class GetConnectionsPaginateFilterTypeDef(_GetConnectionsPaginateFilterTypeDef):
    """
    Type definition for `GetConnectionsPaginate` `Filter`

    A filter that controls which connections are returned.

    - **MatchCriteria** *(list) --*

      A criteria string that must match the criteria recorded in the connection definition for that
      connection definition to be returned.

      - *(string) --*

    - **ConnectionType** *(string) --*

      The type of connections to return. Currently, only JDBC is supported; SFTP is not supported.
    """


_GetConnectionsPaginatePaginationConfigTypeDef = TypedDict(
    "_GetConnectionsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class GetConnectionsPaginatePaginationConfigTypeDef(
    _GetConnectionsPaginatePaginationConfigTypeDef
):
    """
    Type definition for `GetConnectionsPaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_GetConnectionsPaginateResponseConnectionListPhysicalConnectionRequirementsTypeDef = TypedDict(
    "_GetConnectionsPaginateResponseConnectionListPhysicalConnectionRequirementsTypeDef",
    {"SubnetId": str, "SecurityGroupIdList": List[str], "AvailabilityZone": str},
    total=False,
)


class GetConnectionsPaginateResponseConnectionListPhysicalConnectionRequirementsTypeDef(
    _GetConnectionsPaginateResponseConnectionListPhysicalConnectionRequirementsTypeDef
):
    """
    Type definition for `GetConnectionsPaginateResponseConnectionList` `PhysicalConnectionRequirements`

    A map of physical connection requirements, such as virtual private cloud (VPC) and
    ``SecurityGroup`` , that are needed to make this connection successfully.

    - **SubnetId** *(string) --*

      The subnet ID used by the connection.

    - **SecurityGroupIdList** *(list) --*

      The security group ID list used by the connection.

      - *(string) --*

    - **AvailabilityZone** *(string) --*

      The connection's Availability Zone. This field is redundant because the specified
      subnet implies the Availability Zone to be used. Currently the field must be populated,
      but it will be deprecated in the future.
    """


_GetConnectionsPaginateResponseConnectionListTypeDef = TypedDict(
    "_GetConnectionsPaginateResponseConnectionListTypeDef",
    {
        "Name": str,
        "Description": str,
        "ConnectionType": str,
        "MatchCriteria": List[str],
        "ConnectionProperties": Dict[str, str],
        "PhysicalConnectionRequirements": GetConnectionsPaginateResponseConnectionListPhysicalConnectionRequirementsTypeDef,
        "CreationTime": datetime,
        "LastUpdatedTime": datetime,
        "LastUpdatedBy": str,
    },
    total=False,
)


class GetConnectionsPaginateResponseConnectionListTypeDef(
    _GetConnectionsPaginateResponseConnectionListTypeDef
):
    """
    Type definition for `GetConnectionsPaginateResponse` `ConnectionList`

    Defines a connection to a data source.

    - **Name** *(string) --*

      The name of the connection definition.

    - **Description** *(string) --*

      The description of the connection.

    - **ConnectionType** *(string) --*

      The type of the connection. Currently, only JDBC is supported; SFTP is not supported.

    - **MatchCriteria** *(list) --*

      A list of criteria that can be used in selecting this connection.

      - *(string) --*

    - **ConnectionProperties** *(dict) --*

      These key-value pairs define parameters for the connection:

      * ``HOST`` - The host URI: either the fully qualified domain name (FQDN) or the IPv4
      address of the database host.

      * ``PORT`` - The port number, between 1024 and 65535, of the port on which the database
      host is listening for database connections.

      * ``USER_NAME`` - The name under which to log in to the database. The value string for
      ``USER_NAME`` is "``USERNAME`` ".

      * ``PASSWORD`` - A password, if one is used, for the user name.

      * ``ENCRYPTED_PASSWORD`` - When you enable connection password protection by setting
      ``ConnectionPasswordEncryption`` in the Data Catalog encryption settings, this field
      stores the encrypted password.

      * ``JDBC_DRIVER_JAR_URI`` - The Amazon Simple Storage Service (Amazon S3) path of the JAR
      file that contains the JDBC driver to use.

      * ``JDBC_DRIVER_CLASS_NAME`` - The class name of the JDBC driver to use.

      * ``JDBC_ENGINE`` - The name of the JDBC engine to use.

      * ``JDBC_ENGINE_VERSION`` - The version of the JDBC engine to use.

      * ``CONFIG_FILES`` - (Reserved for future use.)

      * ``INSTANCE_ID`` - The instance ID to use.

      * ``JDBC_CONNECTION_URL`` - The URL for the JDBC connection.

      * ``JDBC_ENFORCE_SSL`` - A Boolean string (true, false) specifying whether Secure Sockets
      Layer (SSL) with hostname matching is enforced for the JDBC connection on the client. The
      default is false.

      * ``CUSTOM_JDBC_CERT`` - An Amazon S3 location specifying the customer's root
      certificate. AWS Glue uses this root certificate to validate the customer’s certificate
      when connecting to the customer database. AWS Glue only handles X.509 certificates. The
      certificate provided must be DER-encoded and supplied in Base64 encoding PEM format.

      * ``SKIP_CUSTOM_JDBC_CERT_VALIDATION`` - By default, this is ``false`` . AWS Glue
      validates the Signature algorithm and Subject Public Key Algorithm for the customer
      certificate. The only permitted algorithms for the Signature algorithm are SHA256withRSA,
      SHA384withRSA or SHA512withRSA. For the Subject Public Key Algorithm, the key length must
      be at least 2048. You can set the value of this property to ``true`` to skip AWS Glue’s
      validation of the customer certificate.

      * ``CUSTOM_JDBC_CERT_STRING`` - A custom JDBC certificate string which is used for domain
      match or distinguished name match to prevent a man-in-the-middle attack. In Oracle
      database, this is used as the ``SSL_SERVER_CERT_DN`` ; in Microsoft SQL Server, this is
      used as the ``hostNameInCertificate`` .

      - *(string) --*

        - *(string) --*

    - **PhysicalConnectionRequirements** *(dict) --*

      A map of physical connection requirements, such as virtual private cloud (VPC) and
      ``SecurityGroup`` , that are needed to make this connection successfully.

      - **SubnetId** *(string) --*

        The subnet ID used by the connection.

      - **SecurityGroupIdList** *(list) --*

        The security group ID list used by the connection.

        - *(string) --*

      - **AvailabilityZone** *(string) --*

        The connection's Availability Zone. This field is redundant because the specified
        subnet implies the Availability Zone to be used. Currently the field must be populated,
        but it will be deprecated in the future.

    - **CreationTime** *(datetime) --*

      The time that this connection definition was created.

    - **LastUpdatedTime** *(datetime) --*

      The last time that this connection definition was updated.

    - **LastUpdatedBy** *(string) --*

      The user, group, or role that last updated this connection definition.
    """


_GetConnectionsPaginateResponseTypeDef = TypedDict(
    "_GetConnectionsPaginateResponseTypeDef",
    {"ConnectionList": List[GetConnectionsPaginateResponseConnectionListTypeDef]},
    total=False,
)


class GetConnectionsPaginateResponseTypeDef(_GetConnectionsPaginateResponseTypeDef):
    """
    Type definition for `GetConnectionsPaginate` `Response`

    - **ConnectionList** *(list) --*

      A list of requested connection definitions.

      - *(dict) --*

        Defines a connection to a data source.

        - **Name** *(string) --*

          The name of the connection definition.

        - **Description** *(string) --*

          The description of the connection.

        - **ConnectionType** *(string) --*

          The type of the connection. Currently, only JDBC is supported; SFTP is not supported.

        - **MatchCriteria** *(list) --*

          A list of criteria that can be used in selecting this connection.

          - *(string) --*

        - **ConnectionProperties** *(dict) --*

          These key-value pairs define parameters for the connection:

          * ``HOST`` - The host URI: either the fully qualified domain name (FQDN) or the IPv4
          address of the database host.

          * ``PORT`` - The port number, between 1024 and 65535, of the port on which the database
          host is listening for database connections.

          * ``USER_NAME`` - The name under which to log in to the database. The value string for
          ``USER_NAME`` is "``USERNAME`` ".

          * ``PASSWORD`` - A password, if one is used, for the user name.

          * ``ENCRYPTED_PASSWORD`` - When you enable connection password protection by setting
          ``ConnectionPasswordEncryption`` in the Data Catalog encryption settings, this field
          stores the encrypted password.

          * ``JDBC_DRIVER_JAR_URI`` - The Amazon Simple Storage Service (Amazon S3) path of the JAR
          file that contains the JDBC driver to use.

          * ``JDBC_DRIVER_CLASS_NAME`` - The class name of the JDBC driver to use.

          * ``JDBC_ENGINE`` - The name of the JDBC engine to use.

          * ``JDBC_ENGINE_VERSION`` - The version of the JDBC engine to use.

          * ``CONFIG_FILES`` - (Reserved for future use.)

          * ``INSTANCE_ID`` - The instance ID to use.

          * ``JDBC_CONNECTION_URL`` - The URL for the JDBC connection.

          * ``JDBC_ENFORCE_SSL`` - A Boolean string (true, false) specifying whether Secure Sockets
          Layer (SSL) with hostname matching is enforced for the JDBC connection on the client. The
          default is false.

          * ``CUSTOM_JDBC_CERT`` - An Amazon S3 location specifying the customer's root
          certificate. AWS Glue uses this root certificate to validate the customer’s certificate
          when connecting to the customer database. AWS Glue only handles X.509 certificates. The
          certificate provided must be DER-encoded and supplied in Base64 encoding PEM format.

          * ``SKIP_CUSTOM_JDBC_CERT_VALIDATION`` - By default, this is ``false`` . AWS Glue
          validates the Signature algorithm and Subject Public Key Algorithm for the customer
          certificate. The only permitted algorithms for the Signature algorithm are SHA256withRSA,
          SHA384withRSA or SHA512withRSA. For the Subject Public Key Algorithm, the key length must
          be at least 2048. You can set the value of this property to ``true`` to skip AWS Glue’s
          validation of the customer certificate.

          * ``CUSTOM_JDBC_CERT_STRING`` - A custom JDBC certificate string which is used for domain
          match or distinguished name match to prevent a man-in-the-middle attack. In Oracle
          database, this is used as the ``SSL_SERVER_CERT_DN`` ; in Microsoft SQL Server, this is
          used as the ``hostNameInCertificate`` .

          - *(string) --*

            - *(string) --*

        - **PhysicalConnectionRequirements** *(dict) --*

          A map of physical connection requirements, such as virtual private cloud (VPC) and
          ``SecurityGroup`` , that are needed to make this connection successfully.

          - **SubnetId** *(string) --*

            The subnet ID used by the connection.

          - **SecurityGroupIdList** *(list) --*

            The security group ID list used by the connection.

            - *(string) --*

          - **AvailabilityZone** *(string) --*

            The connection's Availability Zone. This field is redundant because the specified
            subnet implies the Availability Zone to be used. Currently the field must be populated,
            but it will be deprecated in the future.

        - **CreationTime** *(datetime) --*

          The time that this connection definition was created.

        - **LastUpdatedTime** *(datetime) --*

          The last time that this connection definition was updated.

        - **LastUpdatedBy** *(string) --*

          The user, group, or role that last updated this connection definition.
    """


_GetCrawlerMetricsPaginatePaginationConfigTypeDef = TypedDict(
    "_GetCrawlerMetricsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class GetCrawlerMetricsPaginatePaginationConfigTypeDef(
    _GetCrawlerMetricsPaginatePaginationConfigTypeDef
):
    """
    Type definition for `GetCrawlerMetricsPaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_GetCrawlerMetricsPaginateResponseCrawlerMetricsListTypeDef = TypedDict(
    "_GetCrawlerMetricsPaginateResponseCrawlerMetricsListTypeDef",
    {
        "CrawlerName": str,
        "TimeLeftSeconds": float,
        "StillEstimating": bool,
        "LastRuntimeSeconds": float,
        "MedianRuntimeSeconds": float,
        "TablesCreated": int,
        "TablesUpdated": int,
        "TablesDeleted": int,
    },
    total=False,
)


class GetCrawlerMetricsPaginateResponseCrawlerMetricsListTypeDef(
    _GetCrawlerMetricsPaginateResponseCrawlerMetricsListTypeDef
):
    """
    Type definition for `GetCrawlerMetricsPaginateResponse` `CrawlerMetricsList`

    Metrics for a specified crawler.

    - **CrawlerName** *(string) --*

      The name of the crawler.

    - **TimeLeftSeconds** *(float) --*

      The estimated time left to complete a running crawl.

    - **StillEstimating** *(boolean) --*

      True if the crawler is still estimating how long it will take to complete this run.

    - **LastRuntimeSeconds** *(float) --*

      The duration of the crawler's most recent run, in seconds.

    - **MedianRuntimeSeconds** *(float) --*

      The median duration of this crawler's runs, in seconds.

    - **TablesCreated** *(integer) --*

      The number of tables created by this crawler.

    - **TablesUpdated** *(integer) --*

      The number of tables updated by this crawler.

    - **TablesDeleted** *(integer) --*

      The number of tables deleted by this crawler.
    """


_GetCrawlerMetricsPaginateResponseTypeDef = TypedDict(
    "_GetCrawlerMetricsPaginateResponseTypeDef",
    {
        "CrawlerMetricsList": List[
            GetCrawlerMetricsPaginateResponseCrawlerMetricsListTypeDef
        ]
    },
    total=False,
)


class GetCrawlerMetricsPaginateResponseTypeDef(
    _GetCrawlerMetricsPaginateResponseTypeDef
):
    """
    Type definition for `GetCrawlerMetricsPaginate` `Response`

    - **CrawlerMetricsList** *(list) --*

      A list of metrics for the specified crawler.

      - *(dict) --*

        Metrics for a specified crawler.

        - **CrawlerName** *(string) --*

          The name of the crawler.

        - **TimeLeftSeconds** *(float) --*

          The estimated time left to complete a running crawl.

        - **StillEstimating** *(boolean) --*

          True if the crawler is still estimating how long it will take to complete this run.

        - **LastRuntimeSeconds** *(float) --*

          The duration of the crawler's most recent run, in seconds.

        - **MedianRuntimeSeconds** *(float) --*

          The median duration of this crawler's runs, in seconds.

        - **TablesCreated** *(integer) --*

          The number of tables created by this crawler.

        - **TablesUpdated** *(integer) --*

          The number of tables updated by this crawler.

        - **TablesDeleted** *(integer) --*

          The number of tables deleted by this crawler.
    """


_GetCrawlersPaginatePaginationConfigTypeDef = TypedDict(
    "_GetCrawlersPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class GetCrawlersPaginatePaginationConfigTypeDef(
    _GetCrawlersPaginatePaginationConfigTypeDef
):
    """
    Type definition for `GetCrawlersPaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_GetCrawlersPaginateResponseCrawlersLastCrawlTypeDef = TypedDict(
    "_GetCrawlersPaginateResponseCrawlersLastCrawlTypeDef",
    {
        "Status": str,
        "ErrorMessage": str,
        "LogGroup": str,
        "LogStream": str,
        "MessagePrefix": str,
        "StartTime": datetime,
    },
    total=False,
)


class GetCrawlersPaginateResponseCrawlersLastCrawlTypeDef(
    _GetCrawlersPaginateResponseCrawlersLastCrawlTypeDef
):
    """
    Type definition for `GetCrawlersPaginateResponseCrawlers` `LastCrawl`

    The status of the last crawl, and potentially error information if an error occurred.

    - **Status** *(string) --*

      Status of the last crawl.

    - **ErrorMessage** *(string) --*

      If an error occurred, the error information about the last crawl.

    - **LogGroup** *(string) --*

      The log group for the last crawl.

    - **LogStream** *(string) --*

      The log stream for the last crawl.

    - **MessagePrefix** *(string) --*

      The prefix for a message about this crawl.

    - **StartTime** *(datetime) --*

      The time at which the crawl started.
    """


_GetCrawlersPaginateResponseCrawlersScheduleTypeDef = TypedDict(
    "_GetCrawlersPaginateResponseCrawlersScheduleTypeDef",
    {"ScheduleExpression": str, "State": str},
    total=False,
)


class GetCrawlersPaginateResponseCrawlersScheduleTypeDef(
    _GetCrawlersPaginateResponseCrawlersScheduleTypeDef
):
    """
    Type definition for `GetCrawlersPaginateResponseCrawlers` `Schedule`

    For scheduled crawlers, the schedule when the crawler runs.

    - **ScheduleExpression** *(string) --*

      A ``cron`` expression used to specify the schedule. For more information, see
      `Time-Based Schedules for Jobs and Crawlers
      <http://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html>`__ .
      For example, to run something every day at 12:15 UTC, specify ``cron(15 12 * * ? *)`` .

    - **State** *(string) --*

      The state of the schedule.
    """


_GetCrawlersPaginateResponseCrawlersSchemaChangePolicyTypeDef = TypedDict(
    "_GetCrawlersPaginateResponseCrawlersSchemaChangePolicyTypeDef",
    {"UpdateBehavior": str, "DeleteBehavior": str},
    total=False,
)


class GetCrawlersPaginateResponseCrawlersSchemaChangePolicyTypeDef(
    _GetCrawlersPaginateResponseCrawlersSchemaChangePolicyTypeDef
):
    """
    Type definition for `GetCrawlersPaginateResponseCrawlers` `SchemaChangePolicy`

    The policy that specifies update and delete behaviors for the crawler.

    - **UpdateBehavior** *(string) --*

      The update behavior when the crawler finds a changed schema.

    - **DeleteBehavior** *(string) --*

      The deletion behavior when the crawler finds a deleted object.
    """


_GetCrawlersPaginateResponseCrawlersTargetsCatalogTargetsTypeDef = TypedDict(
    "_GetCrawlersPaginateResponseCrawlersTargetsCatalogTargetsTypeDef",
    {"DatabaseName": str, "Tables": List[str]},
    total=False,
)


class GetCrawlersPaginateResponseCrawlersTargetsCatalogTargetsTypeDef(
    _GetCrawlersPaginateResponseCrawlersTargetsCatalogTargetsTypeDef
):
    """
    Type definition for `GetCrawlersPaginateResponseCrawlersTargets` `CatalogTargets`

    Specifies an AWS Glue Data Catalog target.

    - **DatabaseName** *(string) --*

      The name of the database to be synchronized.

    - **Tables** *(list) --*

      A list of the tables to be synchronized.

      - *(string) --*
    """


_GetCrawlersPaginateResponseCrawlersTargetsDynamoDBTargetsTypeDef = TypedDict(
    "_GetCrawlersPaginateResponseCrawlersTargetsDynamoDBTargetsTypeDef",
    {"Path": str},
    total=False,
)


class GetCrawlersPaginateResponseCrawlersTargetsDynamoDBTargetsTypeDef(
    _GetCrawlersPaginateResponseCrawlersTargetsDynamoDBTargetsTypeDef
):
    """
    Type definition for `GetCrawlersPaginateResponseCrawlersTargets` `DynamoDBTargets`

    Specifies an Amazon DynamoDB table to crawl.

    - **Path** *(string) --*

      The name of the DynamoDB table to crawl.
    """


_GetCrawlersPaginateResponseCrawlersTargetsJdbcTargetsTypeDef = TypedDict(
    "_GetCrawlersPaginateResponseCrawlersTargetsJdbcTargetsTypeDef",
    {"ConnectionName": str, "Path": str, "Exclusions": List[str]},
    total=False,
)


class GetCrawlersPaginateResponseCrawlersTargetsJdbcTargetsTypeDef(
    _GetCrawlersPaginateResponseCrawlersTargetsJdbcTargetsTypeDef
):
    """
    Type definition for `GetCrawlersPaginateResponseCrawlersTargets` `JdbcTargets`

    Specifies a JDBC data store to crawl.

    - **ConnectionName** *(string) --*

      The name of the connection to use to connect to the JDBC target.

    - **Path** *(string) --*

      The path of the JDBC target.

    - **Exclusions** *(list) --*

      A list of glob patterns used to exclude from the crawl. For more information, see
      `Catalog Tables with a Crawler
      <http://docs.aws.amazon.com/glue/latest/dg/add-crawler.html>`__ .

      - *(string) --*
    """


_GetCrawlersPaginateResponseCrawlersTargetsS3TargetsTypeDef = TypedDict(
    "_GetCrawlersPaginateResponseCrawlersTargetsS3TargetsTypeDef",
    {"Path": str, "Exclusions": List[str]},
    total=False,
)


class GetCrawlersPaginateResponseCrawlersTargetsS3TargetsTypeDef(
    _GetCrawlersPaginateResponseCrawlersTargetsS3TargetsTypeDef
):
    """
    Type definition for `GetCrawlersPaginateResponseCrawlersTargets` `S3Targets`

    Specifies a data store in Amazon Simple Storage Service (Amazon S3).

    - **Path** *(string) --*

      The path to the Amazon S3 target.

    - **Exclusions** *(list) --*

      A list of glob patterns used to exclude from the crawl. For more information, see
      `Catalog Tables with a Crawler
      <http://docs.aws.amazon.com/glue/latest/dg/add-crawler.html>`__ .

      - *(string) --*
    """


_GetCrawlersPaginateResponseCrawlersTargetsTypeDef = TypedDict(
    "_GetCrawlersPaginateResponseCrawlersTargetsTypeDef",
    {
        "S3Targets": List[GetCrawlersPaginateResponseCrawlersTargetsS3TargetsTypeDef],
        "JdbcTargets": List[
            GetCrawlersPaginateResponseCrawlersTargetsJdbcTargetsTypeDef
        ],
        "DynamoDBTargets": List[
            GetCrawlersPaginateResponseCrawlersTargetsDynamoDBTargetsTypeDef
        ],
        "CatalogTargets": List[
            GetCrawlersPaginateResponseCrawlersTargetsCatalogTargetsTypeDef
        ],
    },
    total=False,
)


class GetCrawlersPaginateResponseCrawlersTargetsTypeDef(
    _GetCrawlersPaginateResponseCrawlersTargetsTypeDef
):
    """
    Type definition for `GetCrawlersPaginateResponseCrawlers` `Targets`

    A collection of targets to crawl.

    - **S3Targets** *(list) --*

      Specifies Amazon Simple Storage Service (Amazon S3) targets.

      - *(dict) --*

        Specifies a data store in Amazon Simple Storage Service (Amazon S3).

        - **Path** *(string) --*

          The path to the Amazon S3 target.

        - **Exclusions** *(list) --*

          A list of glob patterns used to exclude from the crawl. For more information, see
          `Catalog Tables with a Crawler
          <http://docs.aws.amazon.com/glue/latest/dg/add-crawler.html>`__ .

          - *(string) --*

    - **JdbcTargets** *(list) --*

      Specifies JDBC targets.

      - *(dict) --*

        Specifies a JDBC data store to crawl.

        - **ConnectionName** *(string) --*

          The name of the connection to use to connect to the JDBC target.

        - **Path** *(string) --*

          The path of the JDBC target.

        - **Exclusions** *(list) --*

          A list of glob patterns used to exclude from the crawl. For more information, see
          `Catalog Tables with a Crawler
          <http://docs.aws.amazon.com/glue/latest/dg/add-crawler.html>`__ .

          - *(string) --*

    - **DynamoDBTargets** *(list) --*

      Specifies Amazon DynamoDB targets.

      - *(dict) --*

        Specifies an Amazon DynamoDB table to crawl.

        - **Path** *(string) --*

          The name of the DynamoDB table to crawl.

    - **CatalogTargets** *(list) --*

      Specifies AWS Glue Data Catalog targets.

      - *(dict) --*

        Specifies an AWS Glue Data Catalog target.

        - **DatabaseName** *(string) --*

          The name of the database to be synchronized.

        - **Tables** *(list) --*

          A list of the tables to be synchronized.

          - *(string) --*
    """


_GetCrawlersPaginateResponseCrawlersTypeDef = TypedDict(
    "_GetCrawlersPaginateResponseCrawlersTypeDef",
    {
        "Name": str,
        "Role": str,
        "Targets": GetCrawlersPaginateResponseCrawlersTargetsTypeDef,
        "DatabaseName": str,
        "Description": str,
        "Classifiers": List[str],
        "SchemaChangePolicy": GetCrawlersPaginateResponseCrawlersSchemaChangePolicyTypeDef,
        "State": str,
        "TablePrefix": str,
        "Schedule": GetCrawlersPaginateResponseCrawlersScheduleTypeDef,
        "CrawlElapsedTime": int,
        "CreationTime": datetime,
        "LastUpdated": datetime,
        "LastCrawl": GetCrawlersPaginateResponseCrawlersLastCrawlTypeDef,
        "Version": int,
        "Configuration": str,
        "CrawlerSecurityConfiguration": str,
    },
    total=False,
)


class GetCrawlersPaginateResponseCrawlersTypeDef(
    _GetCrawlersPaginateResponseCrawlersTypeDef
):
    """
    Type definition for `GetCrawlersPaginateResponse` `Crawlers`

    Specifies a crawler program that examines a data source and uses classifiers to try to
    determine its schema. If successful, the crawler records metadata concerning the data
    source in the AWS Glue Data Catalog.

    - **Name** *(string) --*

      The name of the crawler.

    - **Role** *(string) --*

      The Amazon Resource Name (ARN) of an IAM role that's used to access customer resources,
      such as Amazon Simple Storage Service (Amazon S3) data.

    - **Targets** *(dict) --*

      A collection of targets to crawl.

      - **S3Targets** *(list) --*

        Specifies Amazon Simple Storage Service (Amazon S3) targets.

        - *(dict) --*

          Specifies a data store in Amazon Simple Storage Service (Amazon S3).

          - **Path** *(string) --*

            The path to the Amazon S3 target.

          - **Exclusions** *(list) --*

            A list of glob patterns used to exclude from the crawl. For more information, see
            `Catalog Tables with a Crawler
            <http://docs.aws.amazon.com/glue/latest/dg/add-crawler.html>`__ .

            - *(string) --*

      - **JdbcTargets** *(list) --*

        Specifies JDBC targets.

        - *(dict) --*

          Specifies a JDBC data store to crawl.

          - **ConnectionName** *(string) --*

            The name of the connection to use to connect to the JDBC target.

          - **Path** *(string) --*

            The path of the JDBC target.

          - **Exclusions** *(list) --*

            A list of glob patterns used to exclude from the crawl. For more information, see
            `Catalog Tables with a Crawler
            <http://docs.aws.amazon.com/glue/latest/dg/add-crawler.html>`__ .

            - *(string) --*

      - **DynamoDBTargets** *(list) --*

        Specifies Amazon DynamoDB targets.

        - *(dict) --*

          Specifies an Amazon DynamoDB table to crawl.

          - **Path** *(string) --*

            The name of the DynamoDB table to crawl.

      - **CatalogTargets** *(list) --*

        Specifies AWS Glue Data Catalog targets.

        - *(dict) --*

          Specifies an AWS Glue Data Catalog target.

          - **DatabaseName** *(string) --*

            The name of the database to be synchronized.

          - **Tables** *(list) --*

            A list of the tables to be synchronized.

            - *(string) --*

    - **DatabaseName** *(string) --*

      The name of the database in which the crawler's output is stored.

    - **Description** *(string) --*

      A description of the crawler.

    - **Classifiers** *(list) --*

      A list of UTF-8 strings that specify the custom classifiers that are associated with the
      crawler.

      - *(string) --*

    - **SchemaChangePolicy** *(dict) --*

      The policy that specifies update and delete behaviors for the crawler.

      - **UpdateBehavior** *(string) --*

        The update behavior when the crawler finds a changed schema.

      - **DeleteBehavior** *(string) --*

        The deletion behavior when the crawler finds a deleted object.

    - **State** *(string) --*

      Indicates whether the crawler is running, or whether a run is pending.

    - **TablePrefix** *(string) --*

      The prefix added to the names of tables that are created.

    - **Schedule** *(dict) --*

      For scheduled crawlers, the schedule when the crawler runs.

      - **ScheduleExpression** *(string) --*

        A ``cron`` expression used to specify the schedule. For more information, see
        `Time-Based Schedules for Jobs and Crawlers
        <http://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html>`__ .
        For example, to run something every day at 12:15 UTC, specify ``cron(15 12 * * ? *)`` .

      - **State** *(string) --*

        The state of the schedule.

    - **CrawlElapsedTime** *(integer) --*

      If the crawler is running, contains the total time elapsed since the last crawl began.

    - **CreationTime** *(datetime) --*

      The time that the crawler was created.

    - **LastUpdated** *(datetime) --*

      The time that the crawler was last updated.

    - **LastCrawl** *(dict) --*

      The status of the last crawl, and potentially error information if an error occurred.

      - **Status** *(string) --*

        Status of the last crawl.

      - **ErrorMessage** *(string) --*

        If an error occurred, the error information about the last crawl.

      - **LogGroup** *(string) --*

        The log group for the last crawl.

      - **LogStream** *(string) --*

        The log stream for the last crawl.

      - **MessagePrefix** *(string) --*

        The prefix for a message about this crawl.

      - **StartTime** *(datetime) --*

        The time at which the crawl started.

    - **Version** *(integer) --*

      The version of the crawler.

    - **Configuration** *(string) --*

      Crawler configuration information. This versioned JSON string allows users to specify
      aspects of a crawler's behavior. For more information, see `Configuring a Crawler
      <http://docs.aws.amazon.com/glue/latest/dg/crawler-configuration.html>`__ .

    - **CrawlerSecurityConfiguration** *(string) --*

      The name of the ``SecurityConfiguration`` structure to be used by this crawler.
    """


_GetCrawlersPaginateResponseTypeDef = TypedDict(
    "_GetCrawlersPaginateResponseTypeDef",
    {"Crawlers": List[GetCrawlersPaginateResponseCrawlersTypeDef]},
    total=False,
)


class GetCrawlersPaginateResponseTypeDef(_GetCrawlersPaginateResponseTypeDef):
    """
    Type definition for `GetCrawlersPaginate` `Response`

    - **Crawlers** *(list) --*

      A list of crawler metadata.

      - *(dict) --*

        Specifies a crawler program that examines a data source and uses classifiers to try to
        determine its schema. If successful, the crawler records metadata concerning the data
        source in the AWS Glue Data Catalog.

        - **Name** *(string) --*

          The name of the crawler.

        - **Role** *(string) --*

          The Amazon Resource Name (ARN) of an IAM role that's used to access customer resources,
          such as Amazon Simple Storage Service (Amazon S3) data.

        - **Targets** *(dict) --*

          A collection of targets to crawl.

          - **S3Targets** *(list) --*

            Specifies Amazon Simple Storage Service (Amazon S3) targets.

            - *(dict) --*

              Specifies a data store in Amazon Simple Storage Service (Amazon S3).

              - **Path** *(string) --*

                The path to the Amazon S3 target.

              - **Exclusions** *(list) --*

                A list of glob patterns used to exclude from the crawl. For more information, see
                `Catalog Tables with a Crawler
                <http://docs.aws.amazon.com/glue/latest/dg/add-crawler.html>`__ .

                - *(string) --*

          - **JdbcTargets** *(list) --*

            Specifies JDBC targets.

            - *(dict) --*

              Specifies a JDBC data store to crawl.

              - **ConnectionName** *(string) --*

                The name of the connection to use to connect to the JDBC target.

              - **Path** *(string) --*

                The path of the JDBC target.

              - **Exclusions** *(list) --*

                A list of glob patterns used to exclude from the crawl. For more information, see
                `Catalog Tables with a Crawler
                <http://docs.aws.amazon.com/glue/latest/dg/add-crawler.html>`__ .

                - *(string) --*

          - **DynamoDBTargets** *(list) --*

            Specifies Amazon DynamoDB targets.

            - *(dict) --*

              Specifies an Amazon DynamoDB table to crawl.

              - **Path** *(string) --*

                The name of the DynamoDB table to crawl.

          - **CatalogTargets** *(list) --*

            Specifies AWS Glue Data Catalog targets.

            - *(dict) --*

              Specifies an AWS Glue Data Catalog target.

              - **DatabaseName** *(string) --*

                The name of the database to be synchronized.

              - **Tables** *(list) --*

                A list of the tables to be synchronized.

                - *(string) --*

        - **DatabaseName** *(string) --*

          The name of the database in which the crawler's output is stored.

        - **Description** *(string) --*

          A description of the crawler.

        - **Classifiers** *(list) --*

          A list of UTF-8 strings that specify the custom classifiers that are associated with the
          crawler.

          - *(string) --*

        - **SchemaChangePolicy** *(dict) --*

          The policy that specifies update and delete behaviors for the crawler.

          - **UpdateBehavior** *(string) --*

            The update behavior when the crawler finds a changed schema.

          - **DeleteBehavior** *(string) --*

            The deletion behavior when the crawler finds a deleted object.

        - **State** *(string) --*

          Indicates whether the crawler is running, or whether a run is pending.

        - **TablePrefix** *(string) --*

          The prefix added to the names of tables that are created.

        - **Schedule** *(dict) --*

          For scheduled crawlers, the schedule when the crawler runs.

          - **ScheduleExpression** *(string) --*

            A ``cron`` expression used to specify the schedule. For more information, see
            `Time-Based Schedules for Jobs and Crawlers
            <http://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html>`__ .
            For example, to run something every day at 12:15 UTC, specify ``cron(15 12 * * ? *)`` .

          - **State** *(string) --*

            The state of the schedule.

        - **CrawlElapsedTime** *(integer) --*

          If the crawler is running, contains the total time elapsed since the last crawl began.

        - **CreationTime** *(datetime) --*

          The time that the crawler was created.

        - **LastUpdated** *(datetime) --*

          The time that the crawler was last updated.

        - **LastCrawl** *(dict) --*

          The status of the last crawl, and potentially error information if an error occurred.

          - **Status** *(string) --*

            Status of the last crawl.

          - **ErrorMessage** *(string) --*

            If an error occurred, the error information about the last crawl.

          - **LogGroup** *(string) --*

            The log group for the last crawl.

          - **LogStream** *(string) --*

            The log stream for the last crawl.

          - **MessagePrefix** *(string) --*

            The prefix for a message about this crawl.

          - **StartTime** *(datetime) --*

            The time at which the crawl started.

        - **Version** *(integer) --*

          The version of the crawler.

        - **Configuration** *(string) --*

          Crawler configuration information. This versioned JSON string allows users to specify
          aspects of a crawler's behavior. For more information, see `Configuring a Crawler
          <http://docs.aws.amazon.com/glue/latest/dg/crawler-configuration.html>`__ .

        - **CrawlerSecurityConfiguration** *(string) --*

          The name of the ``SecurityConfiguration`` structure to be used by this crawler.
    """


_GetDatabasesPaginatePaginationConfigTypeDef = TypedDict(
    "_GetDatabasesPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class GetDatabasesPaginatePaginationConfigTypeDef(
    _GetDatabasesPaginatePaginationConfigTypeDef
):
    """
    Type definition for `GetDatabasesPaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_GetDatabasesPaginateResponseDatabaseListCreateTableDefaultPermissionsPrincipalTypeDef = TypedDict(
    "_GetDatabasesPaginateResponseDatabaseListCreateTableDefaultPermissionsPrincipalTypeDef",
    {"DataLakePrincipalIdentifier": str},
    total=False,
)


class GetDatabasesPaginateResponseDatabaseListCreateTableDefaultPermissionsPrincipalTypeDef(
    _GetDatabasesPaginateResponseDatabaseListCreateTableDefaultPermissionsPrincipalTypeDef
):
    """
    Type definition for `GetDatabasesPaginateResponseDatabaseListCreateTableDefaultPermissions` `Principal`

    The principal who is granted permissions.

    - **DataLakePrincipalIdentifier** *(string) --*

      An identifier for the AWS Lake Formation principal.
    """


_GetDatabasesPaginateResponseDatabaseListCreateTableDefaultPermissionsTypeDef = TypedDict(
    "_GetDatabasesPaginateResponseDatabaseListCreateTableDefaultPermissionsTypeDef",
    {
        "Principal": GetDatabasesPaginateResponseDatabaseListCreateTableDefaultPermissionsPrincipalTypeDef,
        "Permissions": List[str],
    },
    total=False,
)


class GetDatabasesPaginateResponseDatabaseListCreateTableDefaultPermissionsTypeDef(
    _GetDatabasesPaginateResponseDatabaseListCreateTableDefaultPermissionsTypeDef
):
    """
    Type definition for `GetDatabasesPaginateResponseDatabaseList` `CreateTableDefaultPermissions`

    Permissions granted to a principal.

    - **Principal** *(dict) --*

      The principal who is granted permissions.

      - **DataLakePrincipalIdentifier** *(string) --*

        An identifier for the AWS Lake Formation principal.

    - **Permissions** *(list) --*

      The permissions that are granted to the principal.

      - *(string) --*
    """


_GetDatabasesPaginateResponseDatabaseListTypeDef = TypedDict(
    "_GetDatabasesPaginateResponseDatabaseListTypeDef",
    {
        "Name": str,
        "Description": str,
        "LocationUri": str,
        "Parameters": Dict[str, str],
        "CreateTime": datetime,
        "CreateTableDefaultPermissions": List[
            GetDatabasesPaginateResponseDatabaseListCreateTableDefaultPermissionsTypeDef
        ],
    },
    total=False,
)


class GetDatabasesPaginateResponseDatabaseListTypeDef(
    _GetDatabasesPaginateResponseDatabaseListTypeDef
):
    """
    Type definition for `GetDatabasesPaginateResponse` `DatabaseList`

    The ``Database`` object represents a logical grouping of tables that might reside in a Hive
    metastore or an RDBMS.

    - **Name** *(string) --*

      The name of the database. For Hive compatibility, this is folded to lowercase when it is
      stored.

    - **Description** *(string) --*

      A description of the database.

    - **LocationUri** *(string) --*

      The location of the database (for example, an HDFS path).

    - **Parameters** *(dict) --*

      These key-value pairs define parameters and properties of the database.

      - *(string) --*

        - *(string) --*

    - **CreateTime** *(datetime) --*

      The time at which the metadata database was created in the catalog.

    - **CreateTableDefaultPermissions** *(list) --*

      Creates a set of default permissions on the table for principals.

      - *(dict) --*

        Permissions granted to a principal.

        - **Principal** *(dict) --*

          The principal who is granted permissions.

          - **DataLakePrincipalIdentifier** *(string) --*

            An identifier for the AWS Lake Formation principal.

        - **Permissions** *(list) --*

          The permissions that are granted to the principal.

          - *(string) --*
    """


_GetDatabasesPaginateResponseTypeDef = TypedDict(
    "_GetDatabasesPaginateResponseTypeDef",
    {"DatabaseList": List[GetDatabasesPaginateResponseDatabaseListTypeDef]},
    total=False,
)


class GetDatabasesPaginateResponseTypeDef(_GetDatabasesPaginateResponseTypeDef):
    """
    Type definition for `GetDatabasesPaginate` `Response`

    - **DatabaseList** *(list) --*

      A list of ``Database`` objects from the specified catalog.

      - *(dict) --*

        The ``Database`` object represents a logical grouping of tables that might reside in a Hive
        metastore or an RDBMS.

        - **Name** *(string) --*

          The name of the database. For Hive compatibility, this is folded to lowercase when it is
          stored.

        - **Description** *(string) --*

          A description of the database.

        - **LocationUri** *(string) --*

          The location of the database (for example, an HDFS path).

        - **Parameters** *(dict) --*

          These key-value pairs define parameters and properties of the database.

          - *(string) --*

            - *(string) --*

        - **CreateTime** *(datetime) --*

          The time at which the metadata database was created in the catalog.

        - **CreateTableDefaultPermissions** *(list) --*

          Creates a set of default permissions on the table for principals.

          - *(dict) --*

            Permissions granted to a principal.

            - **Principal** *(dict) --*

              The principal who is granted permissions.

              - **DataLakePrincipalIdentifier** *(string) --*

                An identifier for the AWS Lake Formation principal.

            - **Permissions** *(list) --*

              The permissions that are granted to the principal.

              - *(string) --*
    """


_GetDevEndpointsPaginatePaginationConfigTypeDef = TypedDict(
    "_GetDevEndpointsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class GetDevEndpointsPaginatePaginationConfigTypeDef(
    _GetDevEndpointsPaginatePaginationConfigTypeDef
):
    """
    Type definition for `GetDevEndpointsPaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_GetDevEndpointsPaginateResponseDevEndpointsTypeDef = TypedDict(
    "_GetDevEndpointsPaginateResponseDevEndpointsTypeDef",
    {
        "EndpointName": str,
        "RoleArn": str,
        "SecurityGroupIds": List[str],
        "SubnetId": str,
        "YarnEndpointAddress": str,
        "PrivateAddress": str,
        "ZeppelinRemoteSparkInterpreterPort": int,
        "PublicAddress": str,
        "Status": str,
        "WorkerType": str,
        "GlueVersion": str,
        "NumberOfWorkers": int,
        "NumberOfNodes": int,
        "AvailabilityZone": str,
        "VpcId": str,
        "ExtraPythonLibsS3Path": str,
        "ExtraJarsS3Path": str,
        "FailureReason": str,
        "LastUpdateStatus": str,
        "CreatedTimestamp": datetime,
        "LastModifiedTimestamp": datetime,
        "PublicKey": str,
        "PublicKeys": List[str],
        "SecurityConfiguration": str,
        "Arguments": Dict[str, str],
    },
    total=False,
)


class GetDevEndpointsPaginateResponseDevEndpointsTypeDef(
    _GetDevEndpointsPaginateResponseDevEndpointsTypeDef
):
    """
    Type definition for `GetDevEndpointsPaginateResponse` `DevEndpoints`

    A development endpoint where a developer can remotely debug extract, transform, and load
    (ETL) scripts.

    - **EndpointName** *(string) --*

      The name of the ``DevEndpoint`` .

    - **RoleArn** *(string) --*

      The Amazon Resource Name (ARN) of the IAM role used in this ``DevEndpoint`` .

    - **SecurityGroupIds** *(list) --*

      A list of security group identifiers used in this ``DevEndpoint`` .

      - *(string) --*

    - **SubnetId** *(string) --*

      The subnet ID for this ``DevEndpoint`` .

    - **YarnEndpointAddress** *(string) --*

      The YARN endpoint address used by this ``DevEndpoint`` .

    - **PrivateAddress** *(string) --*

      A private IP address to access the ``DevEndpoint`` within a VPC if the ``DevEndpoint`` is
      created within one. The ``PrivateAddress`` field is present only when you create the
      ``DevEndpoint`` within your VPC.

    - **ZeppelinRemoteSparkInterpreterPort** *(integer) --*

      The Apache Zeppelin port for the remote Apache Spark interpreter.

    - **PublicAddress** *(string) --*

      The public IP address used by this ``DevEndpoint`` . The ``PublicAddress`` field is
      present only when you create a non-virtual private cloud (VPC) ``DevEndpoint`` .

    - **Status** *(string) --*

      The current status of this ``DevEndpoint`` .

    - **WorkerType** *(string) --*

      The type of predefined worker that is allocated to the development endpoint. Accepts a
      value of Standard, G.1X, or G.2X.

      * For the ``Standard`` worker type, each worker provides 4 vCPU, 16 GB of memory and a
      50GB disk, and 2 executors per worker.

      * For the ``G.1X`` worker type, each worker maps to 1 DPU (4 vCPU, 16 GB of memory, 64 GB
      disk), and provides 1 executor per worker. We recommend this worker type for
      memory-intensive jobs.

      * For the ``G.2X`` worker type, each worker maps to 2 DPU (8 vCPU, 32 GB of memory, 128
      GB disk), and provides 1 executor per worker. We recommend this worker type for
      memory-intensive jobs.

      Known issue: when a development endpoint is created with the ``G.2X``  ``WorkerType``
      configuration, the Spark drivers for the development endpoint will run on 4 vCPU, 16 GB
      of memory, and a 64 GB disk.

    - **GlueVersion** *(string) --*

      Glue version determines the versions of Apache Spark and Python that AWS Glue supports.
      The Python version indicates the version supported for running your ETL scripts on
      development endpoints.

      For more information about the available AWS Glue versions and corresponding Spark and
      Python versions, see `Glue version
      <https://docs.aws.amazon.com/glue/latest/dg/add-job.html>`__ in the developer guide.

      Development endpoints that are created without specifying a Glue version default to Glue
      0.9.

      You can specify a version of Python support for development endpoints by using the
      ``Arguments`` parameter in the ``CreateDevEndpoint`` or ``UpdateDevEndpoint`` APIs. If no
      arguments are provided, the version defaults to Python 2.

    - **NumberOfWorkers** *(integer) --*

      The number of workers of a defined ``workerType`` that are allocated to the development
      endpoint.

      The maximum number of workers you can define are 299 for ``G.1X`` , and 149 for ``G.2X`` .

    - **NumberOfNodes** *(integer) --*

      The number of AWS Glue Data Processing Units (DPUs) allocated to this ``DevEndpoint`` .

    - **AvailabilityZone** *(string) --*

      The AWS Availability Zone where this ``DevEndpoint`` is located.

    - **VpcId** *(string) --*

      The ID of the virtual private cloud (VPC) used by this ``DevEndpoint`` .

    - **ExtraPythonLibsS3Path** *(string) --*

      The paths to one or more Python libraries in an Amazon S3 bucket that should be loaded in
      your ``DevEndpoint`` . Multiple values must be complete paths separated by a comma.

      .. note::

        You can only use pure Python libraries with a ``DevEndpoint`` . Libraries that rely on
        C extensions, such as the `pandas <http://pandas.pydata.org/>`__ Python data analysis
        library, are not currently supported.

    - **ExtraJarsS3Path** *(string) --*

      The path to one or more Java ``.jar`` files in an S3 bucket that should be loaded in your
      ``DevEndpoint`` .

      .. note::

        You can only use pure Java/Scala libraries with a ``DevEndpoint`` .

    - **FailureReason** *(string) --*

      The reason for a current failure in this ``DevEndpoint`` .

    - **LastUpdateStatus** *(string) --*

      The status of the last update.

    - **CreatedTimestamp** *(datetime) --*

      The point in time at which this DevEndpoint was created.

    - **LastModifiedTimestamp** *(datetime) --*

      The point in time at which this ``DevEndpoint`` was last modified.

    - **PublicKey** *(string) --*

      The public key to be used by this ``DevEndpoint`` for authentication. This attribute is
      provided for backward compatibility because the recommended attribute to use is public
      keys.

    - **PublicKeys** *(list) --*

      A list of public keys to be used by the ``DevEndpoints`` for authentication. Using this
      attribute is preferred over a single public key because the public keys allow you to have
      a different private key per client.

      .. note::

        If you previously created an endpoint with a public key, you must remove that key to be
        able to set a list of public keys. Call the ``UpdateDevEndpoint`` API operation with
        the public key content in the ``deletePublicKeys`` attribute, and the list of new keys
        in the ``addPublicKeys`` attribute.

      - *(string) --*

    - **SecurityConfiguration** *(string) --*

      The name of the ``SecurityConfiguration`` structure to be used with this ``DevEndpoint`` .

    - **Arguments** *(dict) --*

      A map of arguments used to configure the ``DevEndpoint`` .

      Valid arguments are:

      * ``"--enable-glue-datacatalog": ""``

      * ``"GLUE_PYTHON_VERSION": "3"``

      * ``"GLUE_PYTHON_VERSION": "2"``

      You can specify a version of Python support for development endpoints by using the
      ``Arguments`` parameter in the ``CreateDevEndpoint`` or ``UpdateDevEndpoint`` APIs. If no
      arguments are provided, the version defaults to Python 2.

      - *(string) --*

        - *(string) --*
    """


_GetDevEndpointsPaginateResponseTypeDef = TypedDict(
    "_GetDevEndpointsPaginateResponseTypeDef",
    {"DevEndpoints": List[GetDevEndpointsPaginateResponseDevEndpointsTypeDef]},
    total=False,
)


class GetDevEndpointsPaginateResponseTypeDef(_GetDevEndpointsPaginateResponseTypeDef):
    """
    Type definition for `GetDevEndpointsPaginate` `Response`

    - **DevEndpoints** *(list) --*

      A list of ``DevEndpoint`` definitions.

      - *(dict) --*

        A development endpoint where a developer can remotely debug extract, transform, and load
        (ETL) scripts.

        - **EndpointName** *(string) --*

          The name of the ``DevEndpoint`` .

        - **RoleArn** *(string) --*

          The Amazon Resource Name (ARN) of the IAM role used in this ``DevEndpoint`` .

        - **SecurityGroupIds** *(list) --*

          A list of security group identifiers used in this ``DevEndpoint`` .

          - *(string) --*

        - **SubnetId** *(string) --*

          The subnet ID for this ``DevEndpoint`` .

        - **YarnEndpointAddress** *(string) --*

          The YARN endpoint address used by this ``DevEndpoint`` .

        - **PrivateAddress** *(string) --*

          A private IP address to access the ``DevEndpoint`` within a VPC if the ``DevEndpoint`` is
          created within one. The ``PrivateAddress`` field is present only when you create the
          ``DevEndpoint`` within your VPC.

        - **ZeppelinRemoteSparkInterpreterPort** *(integer) --*

          The Apache Zeppelin port for the remote Apache Spark interpreter.

        - **PublicAddress** *(string) --*

          The public IP address used by this ``DevEndpoint`` . The ``PublicAddress`` field is
          present only when you create a non-virtual private cloud (VPC) ``DevEndpoint`` .

        - **Status** *(string) --*

          The current status of this ``DevEndpoint`` .

        - **WorkerType** *(string) --*

          The type of predefined worker that is allocated to the development endpoint. Accepts a
          value of Standard, G.1X, or G.2X.

          * For the ``Standard`` worker type, each worker provides 4 vCPU, 16 GB of memory and a
          50GB disk, and 2 executors per worker.

          * For the ``G.1X`` worker type, each worker maps to 1 DPU (4 vCPU, 16 GB of memory, 64 GB
          disk), and provides 1 executor per worker. We recommend this worker type for
          memory-intensive jobs.

          * For the ``G.2X`` worker type, each worker maps to 2 DPU (8 vCPU, 32 GB of memory, 128
          GB disk), and provides 1 executor per worker. We recommend this worker type for
          memory-intensive jobs.

          Known issue: when a development endpoint is created with the ``G.2X``  ``WorkerType``
          configuration, the Spark drivers for the development endpoint will run on 4 vCPU, 16 GB
          of memory, and a 64 GB disk.

        - **GlueVersion** *(string) --*

          Glue version determines the versions of Apache Spark and Python that AWS Glue supports.
          The Python version indicates the version supported for running your ETL scripts on
          development endpoints.

          For more information about the available AWS Glue versions and corresponding Spark and
          Python versions, see `Glue version
          <https://docs.aws.amazon.com/glue/latest/dg/add-job.html>`__ in the developer guide.

          Development endpoints that are created without specifying a Glue version default to Glue
          0.9.

          You can specify a version of Python support for development endpoints by using the
          ``Arguments`` parameter in the ``CreateDevEndpoint`` or ``UpdateDevEndpoint`` APIs. If no
          arguments are provided, the version defaults to Python 2.

        - **NumberOfWorkers** *(integer) --*

          The number of workers of a defined ``workerType`` that are allocated to the development
          endpoint.

          The maximum number of workers you can define are 299 for ``G.1X`` , and 149 for ``G.2X`` .

        - **NumberOfNodes** *(integer) --*

          The number of AWS Glue Data Processing Units (DPUs) allocated to this ``DevEndpoint`` .

        - **AvailabilityZone** *(string) --*

          The AWS Availability Zone where this ``DevEndpoint`` is located.

        - **VpcId** *(string) --*

          The ID of the virtual private cloud (VPC) used by this ``DevEndpoint`` .

        - **ExtraPythonLibsS3Path** *(string) --*

          The paths to one or more Python libraries in an Amazon S3 bucket that should be loaded in
          your ``DevEndpoint`` . Multiple values must be complete paths separated by a comma.

          .. note::

            You can only use pure Python libraries with a ``DevEndpoint`` . Libraries that rely on
            C extensions, such as the `pandas <http://pandas.pydata.org/>`__ Python data analysis
            library, are not currently supported.

        - **ExtraJarsS3Path** *(string) --*

          The path to one or more Java ``.jar`` files in an S3 bucket that should be loaded in your
          ``DevEndpoint`` .

          .. note::

            You can only use pure Java/Scala libraries with a ``DevEndpoint`` .

        - **FailureReason** *(string) --*

          The reason for a current failure in this ``DevEndpoint`` .

        - **LastUpdateStatus** *(string) --*

          The status of the last update.

        - **CreatedTimestamp** *(datetime) --*

          The point in time at which this DevEndpoint was created.

        - **LastModifiedTimestamp** *(datetime) --*

          The point in time at which this ``DevEndpoint`` was last modified.

        - **PublicKey** *(string) --*

          The public key to be used by this ``DevEndpoint`` for authentication. This attribute is
          provided for backward compatibility because the recommended attribute to use is public
          keys.

        - **PublicKeys** *(list) --*

          A list of public keys to be used by the ``DevEndpoints`` for authentication. Using this
          attribute is preferred over a single public key because the public keys allow you to have
          a different private key per client.

          .. note::

            If you previously created an endpoint with a public key, you must remove that key to be
            able to set a list of public keys. Call the ``UpdateDevEndpoint`` API operation with
            the public key content in the ``deletePublicKeys`` attribute, and the list of new keys
            in the ``addPublicKeys`` attribute.

          - *(string) --*

        - **SecurityConfiguration** *(string) --*

          The name of the ``SecurityConfiguration`` structure to be used with this ``DevEndpoint`` .

        - **Arguments** *(dict) --*

          A map of arguments used to configure the ``DevEndpoint`` .

          Valid arguments are:

          * ``"--enable-glue-datacatalog": ""``

          * ``"GLUE_PYTHON_VERSION": "3"``

          * ``"GLUE_PYTHON_VERSION": "2"``

          You can specify a version of Python support for development endpoints by using the
          ``Arguments`` parameter in the ``CreateDevEndpoint`` or ``UpdateDevEndpoint`` APIs. If no
          arguments are provided, the version defaults to Python 2.

          - *(string) --*

            - *(string) --*
    """


_GetJobRunsPaginatePaginationConfigTypeDef = TypedDict(
    "_GetJobRunsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class GetJobRunsPaginatePaginationConfigTypeDef(
    _GetJobRunsPaginatePaginationConfigTypeDef
):
    """
    Type definition for `GetJobRunsPaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_GetJobRunsPaginateResponseJobRunsNotificationPropertyTypeDef = TypedDict(
    "_GetJobRunsPaginateResponseJobRunsNotificationPropertyTypeDef",
    {"NotifyDelayAfter": int},
    total=False,
)


class GetJobRunsPaginateResponseJobRunsNotificationPropertyTypeDef(
    _GetJobRunsPaginateResponseJobRunsNotificationPropertyTypeDef
):
    """
    Type definition for `GetJobRunsPaginateResponseJobRuns` `NotificationProperty`

    Specifies configuration properties of a job run notification.

    - **NotifyDelayAfter** *(integer) --*

      After a job run starts, the number of minutes to wait before sending a job run delay
      notification.
    """


_GetJobRunsPaginateResponseJobRunsPredecessorRunsTypeDef = TypedDict(
    "_GetJobRunsPaginateResponseJobRunsPredecessorRunsTypeDef",
    {"JobName": str, "RunId": str},
    total=False,
)


class GetJobRunsPaginateResponseJobRunsPredecessorRunsTypeDef(
    _GetJobRunsPaginateResponseJobRunsPredecessorRunsTypeDef
):
    """
    Type definition for `GetJobRunsPaginateResponseJobRuns` `PredecessorRuns`

    A job run that was used in the predicate of a conditional trigger that triggered this
    job run.

    - **JobName** *(string) --*

      The name of the job definition used by the predecessor job run.

    - **RunId** *(string) --*

      The job-run ID of the predecessor job run.
    """


_GetJobRunsPaginateResponseJobRunsTypeDef = TypedDict(
    "_GetJobRunsPaginateResponseJobRunsTypeDef",
    {
        "Id": str,
        "Attempt": int,
        "PreviousRunId": str,
        "TriggerName": str,
        "JobName": str,
        "StartedOn": datetime,
        "LastModifiedOn": datetime,
        "CompletedOn": datetime,
        "JobRunState": str,
        "Arguments": Dict[str, str],
        "ErrorMessage": str,
        "PredecessorRuns": List[
            GetJobRunsPaginateResponseJobRunsPredecessorRunsTypeDef
        ],
        "AllocatedCapacity": int,
        "ExecutionTime": int,
        "Timeout": int,
        "MaxCapacity": float,
        "WorkerType": str,
        "NumberOfWorkers": int,
        "SecurityConfiguration": str,
        "LogGroupName": str,
        "NotificationProperty": GetJobRunsPaginateResponseJobRunsNotificationPropertyTypeDef,
        "GlueVersion": str,
    },
    total=False,
)


class GetJobRunsPaginateResponseJobRunsTypeDef(
    _GetJobRunsPaginateResponseJobRunsTypeDef
):
    """
    Type definition for `GetJobRunsPaginateResponse` `JobRuns`

    Contains information about a job run.

    - **Id** *(string) --*

      The ID of this job run.

    - **Attempt** *(integer) --*

      The number of the attempt to run this job.

    - **PreviousRunId** *(string) --*

      The ID of the previous run of this job. For example, the ``JobRunId`` specified in the
      ``StartJobRun`` action.

    - **TriggerName** *(string) --*

      The name of the trigger that started this job run.

    - **JobName** *(string) --*

      The name of the job definition being used in this run.

    - **StartedOn** *(datetime) --*

      The date and time at which this job run was started.

    - **LastModifiedOn** *(datetime) --*

      The last time that this job run was modified.

    - **CompletedOn** *(datetime) --*

      The date and time that this job run completed.

    - **JobRunState** *(string) --*

      The current state of the job run.

    - **Arguments** *(dict) --*

      The job arguments associated with this run. For this job run, they replace the default
      arguments set in the job definition itself.

      You can specify arguments here that your own job-execution script consumes, as well as
      arguments that AWS Glue itself consumes.

      For information about how to specify and consume your own job arguments, see the `Calling
      AWS Glue APIs in Python
      <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
      topic in the developer guide.

      For information about the key-value pairs that AWS Glue consumes to set up your job, see
      the `Special Parameters Used by AWS Glue
      <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
      topic in the developer guide.

      - *(string) --*

        - *(string) --*

    - **ErrorMessage** *(string) --*

      An error message associated with this job run.

    - **PredecessorRuns** *(list) --*

      A list of predecessors to this job run.

      - *(dict) --*

        A job run that was used in the predicate of a conditional trigger that triggered this
        job run.

        - **JobName** *(string) --*

          The name of the job definition used by the predecessor job run.

        - **RunId** *(string) --*

          The job-run ID of the predecessor job run.

    - **AllocatedCapacity** *(integer) --*

      This field is deprecated. Use ``MaxCapacity`` instead.

      The number of AWS Glue data processing units (DPUs) allocated to this JobRun. From 2 to
      100 DPUs can be allocated; the default is 10. A DPU is a relative measure of processing
      power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more
      information, see the `AWS Glue pricing page <https://aws.amazon.com/glue/pricing/>`__ .

    - **ExecutionTime** *(integer) --*

      The amount of time (in seconds) that the job run consumed resources.

    - **Timeout** *(integer) --*

      The ``JobRun`` timeout in minutes. This is the maximum time that a job run can consume
      resources before it is terminated and enters ``TIMEOUT`` status. The default is 2,880
      minutes (48 hours). This overrides the timeout value set in the parent job.

    - **MaxCapacity** *(float) --*

      The number of AWS Glue data processing units (DPUs) that can be allocated when this job
      runs. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute
      capacity and 16 GB of memory. For more information, see the `AWS Glue pricing page
      <https://docs.aws.amazon.com/https:/aws.amazon.com/glue/pricing/>`__ .

      Do not set ``Max Capacity`` if using ``WorkerType`` and ``NumberOfWorkers`` .

      The value that can be allocated for ``MaxCapacity`` depends on whether you are running a
      Python shell job or an Apache Spark ETL job:

      * When you specify a Python shell job (``JobCommand.Name`` ="pythonshell"), you can
      allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.

      * When you specify an Apache Spark ETL job (``JobCommand.Name`` ="glueetl"), you can
      allocate from 2 to 100 DPUs. The default is 10 DPUs. This job type cannot have a
      fractional DPU allocation.

    - **WorkerType** *(string) --*

      The type of predefined worker that is allocated when a job runs. Accepts a value of
      Standard, G.1X, or G.2X.

      * For the ``Standard`` worker type, each worker provides 4 vCPU, 16 GB of memory and a
      50GB disk, and 2 executors per worker.

      * For the ``G.1X`` worker type, each worker provides 4 vCPU, 16 GB of memory and a 64GB
      disk, and 1 executor per worker.

      * For the ``G.2X`` worker type, each worker provides 8 vCPU, 32 GB of memory and a 128GB
      disk, and 1 executor per worker.

    - **NumberOfWorkers** *(integer) --*

      The number of workers of a defined ``workerType`` that are allocated when a job runs.

      The maximum number of workers you can define are 299 for ``G.1X`` , and 149 for ``G.2X`` .

    - **SecurityConfiguration** *(string) --*

      The name of the ``SecurityConfiguration`` structure to be used with this job run.

    - **LogGroupName** *(string) --*

      The name of the log group for secure logging that can be server-side encrypted in Amazon
      CloudWatch using AWS KMS. This name can be ``/aws-glue/jobs/`` , in which case the
      default encryption is ``NONE`` . If you add a role name and ``SecurityConfiguration``
      name (in other words, ``/aws-glue/jobs-yourRoleName-yourSecurityConfigurationName/`` ),
      then that security configuration is used to encrypt the log group.

    - **NotificationProperty** *(dict) --*

      Specifies configuration properties of a job run notification.

      - **NotifyDelayAfter** *(integer) --*

        After a job run starts, the number of minutes to wait before sending a job run delay
        notification.

    - **GlueVersion** *(string) --*

      Glue version determines the versions of Apache Spark and Python that AWS Glue supports.
      The Python version indicates the version supported for jobs of type Spark.

      For more information about the available AWS Glue versions and corresponding Spark and
      Python versions, see `Glue version
      <https://docs.aws.amazon.com/glue/latest/dg/add-job.html>`__ in the developer guide.

      Jobs that are created without specifying a Glue version default to Glue 0.9.
    """


_GetJobRunsPaginateResponseTypeDef = TypedDict(
    "_GetJobRunsPaginateResponseTypeDef",
    {"JobRuns": List[GetJobRunsPaginateResponseJobRunsTypeDef]},
    total=False,
)


class GetJobRunsPaginateResponseTypeDef(_GetJobRunsPaginateResponseTypeDef):
    """
    Type definition for `GetJobRunsPaginate` `Response`

    - **JobRuns** *(list) --*

      A list of job-run metadata objects.

      - *(dict) --*

        Contains information about a job run.

        - **Id** *(string) --*

          The ID of this job run.

        - **Attempt** *(integer) --*

          The number of the attempt to run this job.

        - **PreviousRunId** *(string) --*

          The ID of the previous run of this job. For example, the ``JobRunId`` specified in the
          ``StartJobRun`` action.

        - **TriggerName** *(string) --*

          The name of the trigger that started this job run.

        - **JobName** *(string) --*

          The name of the job definition being used in this run.

        - **StartedOn** *(datetime) --*

          The date and time at which this job run was started.

        - **LastModifiedOn** *(datetime) --*

          The last time that this job run was modified.

        - **CompletedOn** *(datetime) --*

          The date and time that this job run completed.

        - **JobRunState** *(string) --*

          The current state of the job run.

        - **Arguments** *(dict) --*

          The job arguments associated with this run. For this job run, they replace the default
          arguments set in the job definition itself.

          You can specify arguments here that your own job-execution script consumes, as well as
          arguments that AWS Glue itself consumes.

          For information about how to specify and consume your own job arguments, see the `Calling
          AWS Glue APIs in Python
          <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
          topic in the developer guide.

          For information about the key-value pairs that AWS Glue consumes to set up your job, see
          the `Special Parameters Used by AWS Glue
          <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
          topic in the developer guide.

          - *(string) --*

            - *(string) --*

        - **ErrorMessage** *(string) --*

          An error message associated with this job run.

        - **PredecessorRuns** *(list) --*

          A list of predecessors to this job run.

          - *(dict) --*

            A job run that was used in the predicate of a conditional trigger that triggered this
            job run.

            - **JobName** *(string) --*

              The name of the job definition used by the predecessor job run.

            - **RunId** *(string) --*

              The job-run ID of the predecessor job run.

        - **AllocatedCapacity** *(integer) --*

          This field is deprecated. Use ``MaxCapacity`` instead.

          The number of AWS Glue data processing units (DPUs) allocated to this JobRun. From 2 to
          100 DPUs can be allocated; the default is 10. A DPU is a relative measure of processing
          power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more
          information, see the `AWS Glue pricing page <https://aws.amazon.com/glue/pricing/>`__ .

        - **ExecutionTime** *(integer) --*

          The amount of time (in seconds) that the job run consumed resources.

        - **Timeout** *(integer) --*

          The ``JobRun`` timeout in minutes. This is the maximum time that a job run can consume
          resources before it is terminated and enters ``TIMEOUT`` status. The default is 2,880
          minutes (48 hours). This overrides the timeout value set in the parent job.

        - **MaxCapacity** *(float) --*

          The number of AWS Glue data processing units (DPUs) that can be allocated when this job
          runs. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute
          capacity and 16 GB of memory. For more information, see the `AWS Glue pricing page
          <https://docs.aws.amazon.com/https:/aws.amazon.com/glue/pricing/>`__ .

          Do not set ``Max Capacity`` if using ``WorkerType`` and ``NumberOfWorkers`` .

          The value that can be allocated for ``MaxCapacity`` depends on whether you are running a
          Python shell job or an Apache Spark ETL job:

          * When you specify a Python shell job (``JobCommand.Name`` ="pythonshell"), you can
          allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.

          * When you specify an Apache Spark ETL job (``JobCommand.Name`` ="glueetl"), you can
          allocate from 2 to 100 DPUs. The default is 10 DPUs. This job type cannot have a
          fractional DPU allocation.

        - **WorkerType** *(string) --*

          The type of predefined worker that is allocated when a job runs. Accepts a value of
          Standard, G.1X, or G.2X.

          * For the ``Standard`` worker type, each worker provides 4 vCPU, 16 GB of memory and a
          50GB disk, and 2 executors per worker.

          * For the ``G.1X`` worker type, each worker provides 4 vCPU, 16 GB of memory and a 64GB
          disk, and 1 executor per worker.

          * For the ``G.2X`` worker type, each worker provides 8 vCPU, 32 GB of memory and a 128GB
          disk, and 1 executor per worker.

        - **NumberOfWorkers** *(integer) --*

          The number of workers of a defined ``workerType`` that are allocated when a job runs.

          The maximum number of workers you can define are 299 for ``G.1X`` , and 149 for ``G.2X`` .

        - **SecurityConfiguration** *(string) --*

          The name of the ``SecurityConfiguration`` structure to be used with this job run.

        - **LogGroupName** *(string) --*

          The name of the log group for secure logging that can be server-side encrypted in Amazon
          CloudWatch using AWS KMS. This name can be ``/aws-glue/jobs/`` , in which case the
          default encryption is ``NONE`` . If you add a role name and ``SecurityConfiguration``
          name (in other words, ``/aws-glue/jobs-yourRoleName-yourSecurityConfigurationName/`` ),
          then that security configuration is used to encrypt the log group.

        - **NotificationProperty** *(dict) --*

          Specifies configuration properties of a job run notification.

          - **NotifyDelayAfter** *(integer) --*

            After a job run starts, the number of minutes to wait before sending a job run delay
            notification.

        - **GlueVersion** *(string) --*

          Glue version determines the versions of Apache Spark and Python that AWS Glue supports.
          The Python version indicates the version supported for jobs of type Spark.

          For more information about the available AWS Glue versions and corresponding Spark and
          Python versions, see `Glue version
          <https://docs.aws.amazon.com/glue/latest/dg/add-job.html>`__ in the developer guide.

          Jobs that are created without specifying a Glue version default to Glue 0.9.
    """


_GetJobsPaginatePaginationConfigTypeDef = TypedDict(
    "_GetJobsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class GetJobsPaginatePaginationConfigTypeDef(_GetJobsPaginatePaginationConfigTypeDef):
    """
    Type definition for `GetJobsPaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_GetJobsPaginateResponseJobsCommandTypeDef = TypedDict(
    "_GetJobsPaginateResponseJobsCommandTypeDef",
    {"Name": str, "ScriptLocation": str, "PythonVersion": str},
    total=False,
)


class GetJobsPaginateResponseJobsCommandTypeDef(
    _GetJobsPaginateResponseJobsCommandTypeDef
):
    """
    Type definition for `GetJobsPaginateResponseJobs` `Command`

    The ``JobCommand`` that executes this job.

    - **Name** *(string) --*

      The name of the job command. For an Apache Spark ETL job, this must be ``glueetl`` .
      For a Python shell job, it must be ``pythonshell`` .

    - **ScriptLocation** *(string) --*

      Specifies the Amazon Simple Storage Service (Amazon S3) path to a script that executes
      a job.

    - **PythonVersion** *(string) --*

      The Python version being used to execute a Python shell job. Allowed values are 2 or 3.
    """


_GetJobsPaginateResponseJobsConnectionsTypeDef = TypedDict(
    "_GetJobsPaginateResponseJobsConnectionsTypeDef",
    {"Connections": List[str]},
    total=False,
)


class GetJobsPaginateResponseJobsConnectionsTypeDef(
    _GetJobsPaginateResponseJobsConnectionsTypeDef
):
    """
    Type definition for `GetJobsPaginateResponseJobs` `Connections`

    The connections used for this job.

    - **Connections** *(list) --*

      A list of connections used by the job.

      - *(string) --*
    """


_GetJobsPaginateResponseJobsExecutionPropertyTypeDef = TypedDict(
    "_GetJobsPaginateResponseJobsExecutionPropertyTypeDef",
    {"MaxConcurrentRuns": int},
    total=False,
)


class GetJobsPaginateResponseJobsExecutionPropertyTypeDef(
    _GetJobsPaginateResponseJobsExecutionPropertyTypeDef
):
    """
    Type definition for `GetJobsPaginateResponseJobs` `ExecutionProperty`

    An ``ExecutionProperty`` specifying the maximum number of concurrent runs allowed for
    this job.

    - **MaxConcurrentRuns** *(integer) --*

      The maximum number of concurrent runs allowed for the job. The default is 1. An error
      is returned when this threshold is reached. The maximum value you can specify is
      controlled by a service limit.
    """


_GetJobsPaginateResponseJobsNotificationPropertyTypeDef = TypedDict(
    "_GetJobsPaginateResponseJobsNotificationPropertyTypeDef",
    {"NotifyDelayAfter": int},
    total=False,
)


class GetJobsPaginateResponseJobsNotificationPropertyTypeDef(
    _GetJobsPaginateResponseJobsNotificationPropertyTypeDef
):
    """
    Type definition for `GetJobsPaginateResponseJobs` `NotificationProperty`

    Specifies configuration properties of a job notification.

    - **NotifyDelayAfter** *(integer) --*

      After a job run starts, the number of minutes to wait before sending a job run delay
      notification.
    """


_GetJobsPaginateResponseJobsTypeDef = TypedDict(
    "_GetJobsPaginateResponseJobsTypeDef",
    {
        "Name": str,
        "Description": str,
        "LogUri": str,
        "Role": str,
        "CreatedOn": datetime,
        "LastModifiedOn": datetime,
        "ExecutionProperty": GetJobsPaginateResponseJobsExecutionPropertyTypeDef,
        "Command": GetJobsPaginateResponseJobsCommandTypeDef,
        "DefaultArguments": Dict[str, str],
        "Connections": GetJobsPaginateResponseJobsConnectionsTypeDef,
        "MaxRetries": int,
        "AllocatedCapacity": int,
        "Timeout": int,
        "MaxCapacity": float,
        "WorkerType": str,
        "NumberOfWorkers": int,
        "SecurityConfiguration": str,
        "NotificationProperty": GetJobsPaginateResponseJobsNotificationPropertyTypeDef,
        "GlueVersion": str,
    },
    total=False,
)


class GetJobsPaginateResponseJobsTypeDef(_GetJobsPaginateResponseJobsTypeDef):
    """
    Type definition for `GetJobsPaginateResponse` `Jobs`

    Specifies a job definition.

    - **Name** *(string) --*

      The name you assign to this job definition.

    - **Description** *(string) --*

      A description of the job.

    - **LogUri** *(string) --*

      This field is reserved for future use.

    - **Role** *(string) --*

      The name or Amazon Resource Name (ARN) of the IAM role associated with this job.

    - **CreatedOn** *(datetime) --*

      The time and date that this job definition was created.

    - **LastModifiedOn** *(datetime) --*

      The last point in time when this job definition was modified.

    - **ExecutionProperty** *(dict) --*

      An ``ExecutionProperty`` specifying the maximum number of concurrent runs allowed for
      this job.

      - **MaxConcurrentRuns** *(integer) --*

        The maximum number of concurrent runs allowed for the job. The default is 1. An error
        is returned when this threshold is reached. The maximum value you can specify is
        controlled by a service limit.

    - **Command** *(dict) --*

      The ``JobCommand`` that executes this job.

      - **Name** *(string) --*

        The name of the job command. For an Apache Spark ETL job, this must be ``glueetl`` .
        For a Python shell job, it must be ``pythonshell`` .

      - **ScriptLocation** *(string) --*

        Specifies the Amazon Simple Storage Service (Amazon S3) path to a script that executes
        a job.

      - **PythonVersion** *(string) --*

        The Python version being used to execute a Python shell job. Allowed values are 2 or 3.

    - **DefaultArguments** *(dict) --*

      The default arguments for this job, specified as name-value pairs.

      You can specify arguments here that your own job-execution script consumes, as well as
      arguments that AWS Glue itself consumes.

      For information about how to specify and consume your own Job arguments, see the `Calling
      AWS Glue APIs in Python
      <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
      topic in the developer guide.

      For information about the key-value pairs that AWS Glue consumes to set up your job, see
      the `Special Parameters Used by AWS Glue
      <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
      topic in the developer guide.

      - *(string) --*

        - *(string) --*

    - **Connections** *(dict) --*

      The connections used for this job.

      - **Connections** *(list) --*

        A list of connections used by the job.

        - *(string) --*

    - **MaxRetries** *(integer) --*

      The maximum number of times to retry this job after a JobRun fails.

    - **AllocatedCapacity** *(integer) --*

      This field is deprecated. Use ``MaxCapacity`` instead.

      The number of AWS Glue data processing units (DPUs) allocated to runs of this job. You
      can allocate from 2 to 100 DPUs; the default is 10. A DPU is a relative measure of
      processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For
      more information, see the `AWS Glue pricing page
      <https://aws.amazon.com/glue/pricing/>`__ .

    - **Timeout** *(integer) --*

      The job timeout in minutes. This is the maximum time that a job run can consume resources
      before it is terminated and enters ``TIMEOUT`` status. The default is 2,880 minutes (48
      hours).

    - **MaxCapacity** *(float) --*

      The number of AWS Glue data processing units (DPUs) that can be allocated when this job
      runs. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute
      capacity and 16 GB of memory. For more information, see the `AWS Glue pricing page
      <https://aws.amazon.com/glue/pricing/>`__ .

      Do not set ``Max Capacity`` if using ``WorkerType`` and ``NumberOfWorkers`` .

      The value that can be allocated for ``MaxCapacity`` depends on whether you are running a
      Python shell job or an Apache Spark ETL job:

      * When you specify a Python shell job (``JobCommand.Name`` ="pythonshell"), you can
      allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.

      * When you specify an Apache Spark ETL job (``JobCommand.Name`` ="glueetl"), you can
      allocate from 2 to 100 DPUs. The default is 10 DPUs. This job type cannot have a
      fractional DPU allocation.

    - **WorkerType** *(string) --*

      The type of predefined worker that is allocated when a job runs. Accepts a value of
      Standard, G.1X, or G.2X.

      * For the ``Standard`` worker type, each worker provides 4 vCPU, 16 GB of memory and a
      50GB disk, and 2 executors per worker.

      * For the ``G.1X`` worker type, each worker maps to 1 DPU (4 vCPU, 16 GB of memory, 64 GB
      disk), and provides 1 executor per worker. We recommend this worker type for
      memory-intensive jobs.

      * For the ``G.2X`` worker type, each worker maps to 2 DPU (8 vCPU, 32 GB of memory, 128
      GB disk), and provides 1 executor per worker. We recommend this worker type for
      memory-intensive jobs.

    - **NumberOfWorkers** *(integer) --*

      The number of workers of a defined ``workerType`` that are allocated when a job runs.

      The maximum number of workers you can define are 299 for ``G.1X`` , and 149 for ``G.2X`` .

    - **SecurityConfiguration** *(string) --*

      The name of the ``SecurityConfiguration`` structure to be used with this job.

    - **NotificationProperty** *(dict) --*

      Specifies configuration properties of a job notification.

      - **NotifyDelayAfter** *(integer) --*

        After a job run starts, the number of minutes to wait before sending a job run delay
        notification.

    - **GlueVersion** *(string) --*

      Glue version determines the versions of Apache Spark and Python that AWS Glue supports.
      The Python version indicates the version supported for jobs of type Spark.

      For more information about the available AWS Glue versions and corresponding Spark and
      Python versions, see `Glue version
      <https://docs.aws.amazon.com/glue/latest/dg/add-job.html>`__ in the developer guide.

      Jobs that are created without specifying a Glue version default to Glue 0.9.
    """


_GetJobsPaginateResponseTypeDef = TypedDict(
    "_GetJobsPaginateResponseTypeDef",
    {"Jobs": List[GetJobsPaginateResponseJobsTypeDef]},
    total=False,
)


class GetJobsPaginateResponseTypeDef(_GetJobsPaginateResponseTypeDef):
    """
    Type definition for `GetJobsPaginate` `Response`

    - **Jobs** *(list) --*

      A list of job definitions.

      - *(dict) --*

        Specifies a job definition.

        - **Name** *(string) --*

          The name you assign to this job definition.

        - **Description** *(string) --*

          A description of the job.

        - **LogUri** *(string) --*

          This field is reserved for future use.

        - **Role** *(string) --*

          The name or Amazon Resource Name (ARN) of the IAM role associated with this job.

        - **CreatedOn** *(datetime) --*

          The time and date that this job definition was created.

        - **LastModifiedOn** *(datetime) --*

          The last point in time when this job definition was modified.

        - **ExecutionProperty** *(dict) --*

          An ``ExecutionProperty`` specifying the maximum number of concurrent runs allowed for
          this job.

          - **MaxConcurrentRuns** *(integer) --*

            The maximum number of concurrent runs allowed for the job. The default is 1. An error
            is returned when this threshold is reached. The maximum value you can specify is
            controlled by a service limit.

        - **Command** *(dict) --*

          The ``JobCommand`` that executes this job.

          - **Name** *(string) --*

            The name of the job command. For an Apache Spark ETL job, this must be ``glueetl`` .
            For a Python shell job, it must be ``pythonshell`` .

          - **ScriptLocation** *(string) --*

            Specifies the Amazon Simple Storage Service (Amazon S3) path to a script that executes
            a job.

          - **PythonVersion** *(string) --*

            The Python version being used to execute a Python shell job. Allowed values are 2 or 3.

        - **DefaultArguments** *(dict) --*

          The default arguments for this job, specified as name-value pairs.

          You can specify arguments here that your own job-execution script consumes, as well as
          arguments that AWS Glue itself consumes.

          For information about how to specify and consume your own Job arguments, see the `Calling
          AWS Glue APIs in Python
          <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
          topic in the developer guide.

          For information about the key-value pairs that AWS Glue consumes to set up your job, see
          the `Special Parameters Used by AWS Glue
          <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
          topic in the developer guide.

          - *(string) --*

            - *(string) --*

        - **Connections** *(dict) --*

          The connections used for this job.

          - **Connections** *(list) --*

            A list of connections used by the job.

            - *(string) --*

        - **MaxRetries** *(integer) --*

          The maximum number of times to retry this job after a JobRun fails.

        - **AllocatedCapacity** *(integer) --*

          This field is deprecated. Use ``MaxCapacity`` instead.

          The number of AWS Glue data processing units (DPUs) allocated to runs of this job. You
          can allocate from 2 to 100 DPUs; the default is 10. A DPU is a relative measure of
          processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For
          more information, see the `AWS Glue pricing page
          <https://aws.amazon.com/glue/pricing/>`__ .

        - **Timeout** *(integer) --*

          The job timeout in minutes. This is the maximum time that a job run can consume resources
          before it is terminated and enters ``TIMEOUT`` status. The default is 2,880 minutes (48
          hours).

        - **MaxCapacity** *(float) --*

          The number of AWS Glue data processing units (DPUs) that can be allocated when this job
          runs. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute
          capacity and 16 GB of memory. For more information, see the `AWS Glue pricing page
          <https://aws.amazon.com/glue/pricing/>`__ .

          Do not set ``Max Capacity`` if using ``WorkerType`` and ``NumberOfWorkers`` .

          The value that can be allocated for ``MaxCapacity`` depends on whether you are running a
          Python shell job or an Apache Spark ETL job:

          * When you specify a Python shell job (``JobCommand.Name`` ="pythonshell"), you can
          allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.

          * When you specify an Apache Spark ETL job (``JobCommand.Name`` ="glueetl"), you can
          allocate from 2 to 100 DPUs. The default is 10 DPUs. This job type cannot have a
          fractional DPU allocation.

        - **WorkerType** *(string) --*

          The type of predefined worker that is allocated when a job runs. Accepts a value of
          Standard, G.1X, or G.2X.

          * For the ``Standard`` worker type, each worker provides 4 vCPU, 16 GB of memory and a
          50GB disk, and 2 executors per worker.

          * For the ``G.1X`` worker type, each worker maps to 1 DPU (4 vCPU, 16 GB of memory, 64 GB
          disk), and provides 1 executor per worker. We recommend this worker type for
          memory-intensive jobs.

          * For the ``G.2X`` worker type, each worker maps to 2 DPU (8 vCPU, 32 GB of memory, 128
          GB disk), and provides 1 executor per worker. We recommend this worker type for
          memory-intensive jobs.

        - **NumberOfWorkers** *(integer) --*

          The number of workers of a defined ``workerType`` that are allocated when a job runs.

          The maximum number of workers you can define are 299 for ``G.1X`` , and 149 for ``G.2X`` .

        - **SecurityConfiguration** *(string) --*

          The name of the ``SecurityConfiguration`` structure to be used with this job.

        - **NotificationProperty** *(dict) --*

          Specifies configuration properties of a job notification.

          - **NotifyDelayAfter** *(integer) --*

            After a job run starts, the number of minutes to wait before sending a job run delay
            notification.

        - **GlueVersion** *(string) --*

          Glue version determines the versions of Apache Spark and Python that AWS Glue supports.
          The Python version indicates the version supported for jobs of type Spark.

          For more information about the available AWS Glue versions and corresponding Spark and
          Python versions, see `Glue version
          <https://docs.aws.amazon.com/glue/latest/dg/add-job.html>`__ in the developer guide.

          Jobs that are created without specifying a Glue version default to Glue 0.9.
    """


_GetPartitionsPaginatePaginationConfigTypeDef = TypedDict(
    "_GetPartitionsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class GetPartitionsPaginatePaginationConfigTypeDef(
    _GetPartitionsPaginatePaginationConfigTypeDef
):
    """
    Type definition for `GetPartitionsPaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_GetPartitionsPaginateResponsePartitionsStorageDescriptorColumnsTypeDef = TypedDict(
    "_GetPartitionsPaginateResponsePartitionsStorageDescriptorColumnsTypeDef",
    {"Name": str, "Type": str, "Comment": str, "Parameters": Dict[str, str]},
    total=False,
)


class GetPartitionsPaginateResponsePartitionsStorageDescriptorColumnsTypeDef(
    _GetPartitionsPaginateResponsePartitionsStorageDescriptorColumnsTypeDef
):
    """
    Type definition for `GetPartitionsPaginateResponsePartitionsStorageDescriptor` `Columns`

    A column in a ``Table`` .

    - **Name** *(string) --*

      The name of the ``Column`` .

    - **Type** *(string) --*

      The data type of the ``Column`` .

    - **Comment** *(string) --*

      A free-form text comment.

    - **Parameters** *(dict) --*

      These key-value pairs define properties associated with the column.

      - *(string) --*

        - *(string) --*
    """


_GetPartitionsPaginateResponsePartitionsStorageDescriptorSerdeInfoTypeDef = TypedDict(
    "_GetPartitionsPaginateResponsePartitionsStorageDescriptorSerdeInfoTypeDef",
    {"Name": str, "SerializationLibrary": str, "Parameters": Dict[str, str]},
    total=False,
)


class GetPartitionsPaginateResponsePartitionsStorageDescriptorSerdeInfoTypeDef(
    _GetPartitionsPaginateResponsePartitionsStorageDescriptorSerdeInfoTypeDef
):
    """
    Type definition for `GetPartitionsPaginateResponsePartitionsStorageDescriptor` `SerdeInfo`

    The serialization/deserialization (SerDe) information.

    - **Name** *(string) --*

      Name of the SerDe.

    - **SerializationLibrary** *(string) --*

      Usually the class that implements the SerDe. An example is
      ``org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`` .

    - **Parameters** *(dict) --*

      These key-value pairs define initialization parameters for the SerDe.

      - *(string) --*

        - *(string) --*
    """


_GetPartitionsPaginateResponsePartitionsStorageDescriptorSkewedInfoTypeDef = TypedDict(
    "_GetPartitionsPaginateResponsePartitionsStorageDescriptorSkewedInfoTypeDef",
    {
        "SkewedColumnNames": List[str],
        "SkewedColumnValues": List[str],
        "SkewedColumnValueLocationMaps": Dict[str, str],
    },
    total=False,
)


class GetPartitionsPaginateResponsePartitionsStorageDescriptorSkewedInfoTypeDef(
    _GetPartitionsPaginateResponsePartitionsStorageDescriptorSkewedInfoTypeDef
):
    """
    Type definition for `GetPartitionsPaginateResponsePartitionsStorageDescriptor` `SkewedInfo`

    The information about values that appear frequently in a column (skewed values).

    - **SkewedColumnNames** *(list) --*

      A list of names of columns that contain skewed values.

      - *(string) --*

    - **SkewedColumnValues** *(list) --*

      A list of values that appear so frequently as to be considered skewed.

      - *(string) --*

    - **SkewedColumnValueLocationMaps** *(dict) --*

      A mapping of skewed values to the columns that contain them.

      - *(string) --*

        - *(string) --*
    """


_GetPartitionsPaginateResponsePartitionsStorageDescriptorSortColumnsTypeDef = TypedDict(
    "_GetPartitionsPaginateResponsePartitionsStorageDescriptorSortColumnsTypeDef",
    {"Column": str, "SortOrder": int},
    total=False,
)


class GetPartitionsPaginateResponsePartitionsStorageDescriptorSortColumnsTypeDef(
    _GetPartitionsPaginateResponsePartitionsStorageDescriptorSortColumnsTypeDef
):
    """
    Type definition for `GetPartitionsPaginateResponsePartitionsStorageDescriptor` `SortColumns`

    Specifies the sort order of a sorted column.

    - **Column** *(string) --*

      The name of the column.

    - **SortOrder** *(integer) --*

      Indicates that the column is sorted in ascending order (``== 1`` ), or in
      descending order (``==0`` ).
    """


_GetPartitionsPaginateResponsePartitionsStorageDescriptorTypeDef = TypedDict(
    "_GetPartitionsPaginateResponsePartitionsStorageDescriptorTypeDef",
    {
        "Columns": List[
            GetPartitionsPaginateResponsePartitionsStorageDescriptorColumnsTypeDef
        ],
        "Location": str,
        "InputFormat": str,
        "OutputFormat": str,
        "Compressed": bool,
        "NumberOfBuckets": int,
        "SerdeInfo": GetPartitionsPaginateResponsePartitionsStorageDescriptorSerdeInfoTypeDef,
        "BucketColumns": List[str],
        "SortColumns": List[
            GetPartitionsPaginateResponsePartitionsStorageDescriptorSortColumnsTypeDef
        ],
        "Parameters": Dict[str, str],
        "SkewedInfo": GetPartitionsPaginateResponsePartitionsStorageDescriptorSkewedInfoTypeDef,
        "StoredAsSubDirectories": bool,
    },
    total=False,
)


class GetPartitionsPaginateResponsePartitionsStorageDescriptorTypeDef(
    _GetPartitionsPaginateResponsePartitionsStorageDescriptorTypeDef
):
    """
    Type definition for `GetPartitionsPaginateResponsePartitions` `StorageDescriptor`

    Provides information about the physical location where the partition is stored.

    - **Columns** *(list) --*

      A list of the ``Columns`` in the table.

      - *(dict) --*

        A column in a ``Table`` .

        - **Name** *(string) --*

          The name of the ``Column`` .

        - **Type** *(string) --*

          The data type of the ``Column`` .

        - **Comment** *(string) --*

          A free-form text comment.

        - **Parameters** *(dict) --*

          These key-value pairs define properties associated with the column.

          - *(string) --*

            - *(string) --*

    - **Location** *(string) --*

      The physical location of the table. By default, this takes the form of the warehouse
      location, followed by the database location in the warehouse, followed by the table
      name.

    - **InputFormat** *(string) --*

      The input format: ``SequenceFileInputFormat`` (binary), or ``TextInputFormat`` , or a
      custom format.

    - **OutputFormat** *(string) --*

      The output format: ``SequenceFileOutputFormat`` (binary), or
      ``IgnoreKeyTextOutputFormat`` , or a custom format.

    - **Compressed** *(boolean) --*

       ``True`` if the data in the table is compressed, or ``False`` if not.

    - **NumberOfBuckets** *(integer) --*

      Must be specified if the table contains any dimension columns.

    - **SerdeInfo** *(dict) --*

      The serialization/deserialization (SerDe) information.

      - **Name** *(string) --*

        Name of the SerDe.

      - **SerializationLibrary** *(string) --*

        Usually the class that implements the SerDe. An example is
        ``org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`` .

      - **Parameters** *(dict) --*

        These key-value pairs define initialization parameters for the SerDe.

        - *(string) --*

          - *(string) --*

    - **BucketColumns** *(list) --*

      A list of reducer grouping columns, clustering columns, and bucketing columns in the
      table.

      - *(string) --*

    - **SortColumns** *(list) --*

      A list specifying the sort order of each bucket in the table.

      - *(dict) --*

        Specifies the sort order of a sorted column.

        - **Column** *(string) --*

          The name of the column.

        - **SortOrder** *(integer) --*

          Indicates that the column is sorted in ascending order (``== 1`` ), or in
          descending order (``==0`` ).

    - **Parameters** *(dict) --*

      The user-supplied properties in key-value form.

      - *(string) --*

        - *(string) --*

    - **SkewedInfo** *(dict) --*

      The information about values that appear frequently in a column (skewed values).

      - **SkewedColumnNames** *(list) --*

        A list of names of columns that contain skewed values.

        - *(string) --*

      - **SkewedColumnValues** *(list) --*

        A list of values that appear so frequently as to be considered skewed.

        - *(string) --*

      - **SkewedColumnValueLocationMaps** *(dict) --*

        A mapping of skewed values to the columns that contain them.

        - *(string) --*

          - *(string) --*

    - **StoredAsSubDirectories** *(boolean) --*

       ``True`` if the table data is stored in subdirectories, or ``False`` if not.
    """


_GetPartitionsPaginateResponsePartitionsTypeDef = TypedDict(
    "_GetPartitionsPaginateResponsePartitionsTypeDef",
    {
        "Values": List[str],
        "DatabaseName": str,
        "TableName": str,
        "CreationTime": datetime,
        "LastAccessTime": datetime,
        "StorageDescriptor": GetPartitionsPaginateResponsePartitionsStorageDescriptorTypeDef,
        "Parameters": Dict[str, str],
        "LastAnalyzedTime": datetime,
    },
    total=False,
)


class GetPartitionsPaginateResponsePartitionsTypeDef(
    _GetPartitionsPaginateResponsePartitionsTypeDef
):
    """
    Type definition for `GetPartitionsPaginateResponse` `Partitions`

    Represents a slice of table data.

    - **Values** *(list) --*

      The values of the partition.

      - *(string) --*

    - **DatabaseName** *(string) --*

      The name of the catalog database in which to create the partition.

    - **TableName** *(string) --*

      The name of the database table in which to create the partition.

    - **CreationTime** *(datetime) --*

      The time at which the partition was created.

    - **LastAccessTime** *(datetime) --*

      The last time at which the partition was accessed.

    - **StorageDescriptor** *(dict) --*

      Provides information about the physical location where the partition is stored.

      - **Columns** *(list) --*

        A list of the ``Columns`` in the table.

        - *(dict) --*

          A column in a ``Table`` .

          - **Name** *(string) --*

            The name of the ``Column`` .

          - **Type** *(string) --*

            The data type of the ``Column`` .

          - **Comment** *(string) --*

            A free-form text comment.

          - **Parameters** *(dict) --*

            These key-value pairs define properties associated with the column.

            - *(string) --*

              - *(string) --*

      - **Location** *(string) --*

        The physical location of the table. By default, this takes the form of the warehouse
        location, followed by the database location in the warehouse, followed by the table
        name.

      - **InputFormat** *(string) --*

        The input format: ``SequenceFileInputFormat`` (binary), or ``TextInputFormat`` , or a
        custom format.

      - **OutputFormat** *(string) --*

        The output format: ``SequenceFileOutputFormat`` (binary), or
        ``IgnoreKeyTextOutputFormat`` , or a custom format.

      - **Compressed** *(boolean) --*

         ``True`` if the data in the table is compressed, or ``False`` if not.

      - **NumberOfBuckets** *(integer) --*

        Must be specified if the table contains any dimension columns.

      - **SerdeInfo** *(dict) --*

        The serialization/deserialization (SerDe) information.

        - **Name** *(string) --*

          Name of the SerDe.

        - **SerializationLibrary** *(string) --*

          Usually the class that implements the SerDe. An example is
          ``org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`` .

        - **Parameters** *(dict) --*

          These key-value pairs define initialization parameters for the SerDe.

          - *(string) --*

            - *(string) --*

      - **BucketColumns** *(list) --*

        A list of reducer grouping columns, clustering columns, and bucketing columns in the
        table.

        - *(string) --*

      - **SortColumns** *(list) --*

        A list specifying the sort order of each bucket in the table.

        - *(dict) --*

          Specifies the sort order of a sorted column.

          - **Column** *(string) --*

            The name of the column.

          - **SortOrder** *(integer) --*

            Indicates that the column is sorted in ascending order (``== 1`` ), or in
            descending order (``==0`` ).

      - **Parameters** *(dict) --*

        The user-supplied properties in key-value form.

        - *(string) --*

          - *(string) --*

      - **SkewedInfo** *(dict) --*

        The information about values that appear frequently in a column (skewed values).

        - **SkewedColumnNames** *(list) --*

          A list of names of columns that contain skewed values.

          - *(string) --*

        - **SkewedColumnValues** *(list) --*

          A list of values that appear so frequently as to be considered skewed.

          - *(string) --*

        - **SkewedColumnValueLocationMaps** *(dict) --*

          A mapping of skewed values to the columns that contain them.

          - *(string) --*

            - *(string) --*

      - **StoredAsSubDirectories** *(boolean) --*

         ``True`` if the table data is stored in subdirectories, or ``False`` if not.

    - **Parameters** *(dict) --*

      These key-value pairs define partition parameters.

      - *(string) --*

        - *(string) --*

    - **LastAnalyzedTime** *(datetime) --*

      The last time at which column statistics were computed for this partition.
    """


_GetPartitionsPaginateResponseTypeDef = TypedDict(
    "_GetPartitionsPaginateResponseTypeDef",
    {"Partitions": List[GetPartitionsPaginateResponsePartitionsTypeDef]},
    total=False,
)


class GetPartitionsPaginateResponseTypeDef(_GetPartitionsPaginateResponseTypeDef):
    """
    Type definition for `GetPartitionsPaginate` `Response`

    - **Partitions** *(list) --*

      A list of requested partitions.

      - *(dict) --*

        Represents a slice of table data.

        - **Values** *(list) --*

          The values of the partition.

          - *(string) --*

        - **DatabaseName** *(string) --*

          The name of the catalog database in which to create the partition.

        - **TableName** *(string) --*

          The name of the database table in which to create the partition.

        - **CreationTime** *(datetime) --*

          The time at which the partition was created.

        - **LastAccessTime** *(datetime) --*

          The last time at which the partition was accessed.

        - **StorageDescriptor** *(dict) --*

          Provides information about the physical location where the partition is stored.

          - **Columns** *(list) --*

            A list of the ``Columns`` in the table.

            - *(dict) --*

              A column in a ``Table`` .

              - **Name** *(string) --*

                The name of the ``Column`` .

              - **Type** *(string) --*

                The data type of the ``Column`` .

              - **Comment** *(string) --*

                A free-form text comment.

              - **Parameters** *(dict) --*

                These key-value pairs define properties associated with the column.

                - *(string) --*

                  - *(string) --*

          - **Location** *(string) --*

            The physical location of the table. By default, this takes the form of the warehouse
            location, followed by the database location in the warehouse, followed by the table
            name.

          - **InputFormat** *(string) --*

            The input format: ``SequenceFileInputFormat`` (binary), or ``TextInputFormat`` , or a
            custom format.

          - **OutputFormat** *(string) --*

            The output format: ``SequenceFileOutputFormat`` (binary), or
            ``IgnoreKeyTextOutputFormat`` , or a custom format.

          - **Compressed** *(boolean) --*

             ``True`` if the data in the table is compressed, or ``False`` if not.

          - **NumberOfBuckets** *(integer) --*

            Must be specified if the table contains any dimension columns.

          - **SerdeInfo** *(dict) --*

            The serialization/deserialization (SerDe) information.

            - **Name** *(string) --*

              Name of the SerDe.

            - **SerializationLibrary** *(string) --*

              Usually the class that implements the SerDe. An example is
              ``org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`` .

            - **Parameters** *(dict) --*

              These key-value pairs define initialization parameters for the SerDe.

              - *(string) --*

                - *(string) --*

          - **BucketColumns** *(list) --*

            A list of reducer grouping columns, clustering columns, and bucketing columns in the
            table.

            - *(string) --*

          - **SortColumns** *(list) --*

            A list specifying the sort order of each bucket in the table.

            - *(dict) --*

              Specifies the sort order of a sorted column.

              - **Column** *(string) --*

                The name of the column.

              - **SortOrder** *(integer) --*

                Indicates that the column is sorted in ascending order (``== 1`` ), or in
                descending order (``==0`` ).

          - **Parameters** *(dict) --*

            The user-supplied properties in key-value form.

            - *(string) --*

              - *(string) --*

          - **SkewedInfo** *(dict) --*

            The information about values that appear frequently in a column (skewed values).

            - **SkewedColumnNames** *(list) --*

              A list of names of columns that contain skewed values.

              - *(string) --*

            - **SkewedColumnValues** *(list) --*

              A list of values that appear so frequently as to be considered skewed.

              - *(string) --*

            - **SkewedColumnValueLocationMaps** *(dict) --*

              A mapping of skewed values to the columns that contain them.

              - *(string) --*

                - *(string) --*

          - **StoredAsSubDirectories** *(boolean) --*

             ``True`` if the table data is stored in subdirectories, or ``False`` if not.

        - **Parameters** *(dict) --*

          These key-value pairs define partition parameters.

          - *(string) --*

            - *(string) --*

        - **LastAnalyzedTime** *(datetime) --*

          The last time at which column statistics were computed for this partition.
    """


_GetPartitionsPaginateSegmentTypeDef = TypedDict(
    "_GetPartitionsPaginateSegmentTypeDef", {"SegmentNumber": int, "TotalSegments": int}
)


class GetPartitionsPaginateSegmentTypeDef(_GetPartitionsPaginateSegmentTypeDef):
    """
    Type definition for `GetPartitionsPaginate` `Segment`

    The segment of the table's partitions to scan in this request.

    - **SegmentNumber** *(integer) --* **[REQUIRED]**

      The zero-based index number of the segment. For example, if the total number of segments is 4,
      ``SegmentNumber`` values range from 0 through 3.

    - **TotalSegments** *(integer) --* **[REQUIRED]**

      The total number of segments.
    """


_GetSecurityConfigurationsPaginatePaginationConfigTypeDef = TypedDict(
    "_GetSecurityConfigurationsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class GetSecurityConfigurationsPaginatePaginationConfigTypeDef(
    _GetSecurityConfigurationsPaginatePaginationConfigTypeDef
):
    """
    Type definition for `GetSecurityConfigurationsPaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_GetSecurityConfigurationsPaginateResponseSecurityConfigurationsEncryptionConfigurationCloudWatchEncryptionTypeDef = TypedDict(
    "_GetSecurityConfigurationsPaginateResponseSecurityConfigurationsEncryptionConfigurationCloudWatchEncryptionTypeDef",
    {"CloudWatchEncryptionMode": str, "KmsKeyArn": str},
    total=False,
)


class GetSecurityConfigurationsPaginateResponseSecurityConfigurationsEncryptionConfigurationCloudWatchEncryptionTypeDef(
    _GetSecurityConfigurationsPaginateResponseSecurityConfigurationsEncryptionConfigurationCloudWatchEncryptionTypeDef
):
    """
    Type definition for `GetSecurityConfigurationsPaginateResponseSecurityConfigurationsEncryptionConfiguration` `CloudWatchEncryption`

    The encryption configuration for Amazon CloudWatch.

    - **CloudWatchEncryptionMode** *(string) --*

      The encryption mode to use for CloudWatch data.

    - **KmsKeyArn** *(string) --*

      The Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
    """


_GetSecurityConfigurationsPaginateResponseSecurityConfigurationsEncryptionConfigurationJobBookmarksEncryptionTypeDef = TypedDict(
    "_GetSecurityConfigurationsPaginateResponseSecurityConfigurationsEncryptionConfigurationJobBookmarksEncryptionTypeDef",
    {"JobBookmarksEncryptionMode": str, "KmsKeyArn": str},
    total=False,
)


class GetSecurityConfigurationsPaginateResponseSecurityConfigurationsEncryptionConfigurationJobBookmarksEncryptionTypeDef(
    _GetSecurityConfigurationsPaginateResponseSecurityConfigurationsEncryptionConfigurationJobBookmarksEncryptionTypeDef
):
    """
    Type definition for `GetSecurityConfigurationsPaginateResponseSecurityConfigurationsEncryptionConfiguration` `JobBookmarksEncryption`

    The encryption configuration for job bookmarks.

    - **JobBookmarksEncryptionMode** *(string) --*

      The encryption mode to use for job bookmarks data.

    - **KmsKeyArn** *(string) --*

      The Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
    """


_GetSecurityConfigurationsPaginateResponseSecurityConfigurationsEncryptionConfigurationS3EncryptionTypeDef = TypedDict(
    "_GetSecurityConfigurationsPaginateResponseSecurityConfigurationsEncryptionConfigurationS3EncryptionTypeDef",
    {"S3EncryptionMode": str, "KmsKeyArn": str},
    total=False,
)


class GetSecurityConfigurationsPaginateResponseSecurityConfigurationsEncryptionConfigurationS3EncryptionTypeDef(
    _GetSecurityConfigurationsPaginateResponseSecurityConfigurationsEncryptionConfigurationS3EncryptionTypeDef
):
    """
    Type definition for `GetSecurityConfigurationsPaginateResponseSecurityConfigurationsEncryptionConfiguration` `S3Encryption`

    Specifies how Amazon Simple Storage Service (Amazon S3) data should be encrypted.

    - **S3EncryptionMode** *(string) --*

      The encryption mode to use for Amazon S3 data.

    - **KmsKeyArn** *(string) --*

      The Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
    """


_GetSecurityConfigurationsPaginateResponseSecurityConfigurationsEncryptionConfigurationTypeDef = TypedDict(
    "_GetSecurityConfigurationsPaginateResponseSecurityConfigurationsEncryptionConfigurationTypeDef",
    {
        "S3Encryption": List[
            GetSecurityConfigurationsPaginateResponseSecurityConfigurationsEncryptionConfigurationS3EncryptionTypeDef
        ],
        "CloudWatchEncryption": GetSecurityConfigurationsPaginateResponseSecurityConfigurationsEncryptionConfigurationCloudWatchEncryptionTypeDef,
        "JobBookmarksEncryption": GetSecurityConfigurationsPaginateResponseSecurityConfigurationsEncryptionConfigurationJobBookmarksEncryptionTypeDef,
    },
    total=False,
)


class GetSecurityConfigurationsPaginateResponseSecurityConfigurationsEncryptionConfigurationTypeDef(
    _GetSecurityConfigurationsPaginateResponseSecurityConfigurationsEncryptionConfigurationTypeDef
):
    """
    Type definition for `GetSecurityConfigurationsPaginateResponseSecurityConfigurations` `EncryptionConfiguration`

    The encryption configuration associated with this security configuration.

    - **S3Encryption** *(list) --*

      The encryption configuration for Amazon Simple Storage Service (Amazon S3) data.

      - *(dict) --*

        Specifies how Amazon Simple Storage Service (Amazon S3) data should be encrypted.

        - **S3EncryptionMode** *(string) --*

          The encryption mode to use for Amazon S3 data.

        - **KmsKeyArn** *(string) --*

          The Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.

    - **CloudWatchEncryption** *(dict) --*

      The encryption configuration for Amazon CloudWatch.

      - **CloudWatchEncryptionMode** *(string) --*

        The encryption mode to use for CloudWatch data.

      - **KmsKeyArn** *(string) --*

        The Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.

    - **JobBookmarksEncryption** *(dict) --*

      The encryption configuration for job bookmarks.

      - **JobBookmarksEncryptionMode** *(string) --*

        The encryption mode to use for job bookmarks data.

      - **KmsKeyArn** *(string) --*

        The Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
    """


_GetSecurityConfigurationsPaginateResponseSecurityConfigurationsTypeDef = TypedDict(
    "_GetSecurityConfigurationsPaginateResponseSecurityConfigurationsTypeDef",
    {
        "Name": str,
        "CreatedTimeStamp": datetime,
        "EncryptionConfiguration": GetSecurityConfigurationsPaginateResponseSecurityConfigurationsEncryptionConfigurationTypeDef,
    },
    total=False,
)


class GetSecurityConfigurationsPaginateResponseSecurityConfigurationsTypeDef(
    _GetSecurityConfigurationsPaginateResponseSecurityConfigurationsTypeDef
):
    """
    Type definition for `GetSecurityConfigurationsPaginateResponse` `SecurityConfigurations`

    Specifies a security configuration.

    - **Name** *(string) --*

      The name of the security configuration.

    - **CreatedTimeStamp** *(datetime) --*

      The time at which this security configuration was created.

    - **EncryptionConfiguration** *(dict) --*

      The encryption configuration associated with this security configuration.

      - **S3Encryption** *(list) --*

        The encryption configuration for Amazon Simple Storage Service (Amazon S3) data.

        - *(dict) --*

          Specifies how Amazon Simple Storage Service (Amazon S3) data should be encrypted.

          - **S3EncryptionMode** *(string) --*

            The encryption mode to use for Amazon S3 data.

          - **KmsKeyArn** *(string) --*

            The Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.

      - **CloudWatchEncryption** *(dict) --*

        The encryption configuration for Amazon CloudWatch.

        - **CloudWatchEncryptionMode** *(string) --*

          The encryption mode to use for CloudWatch data.

        - **KmsKeyArn** *(string) --*

          The Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.

      - **JobBookmarksEncryption** *(dict) --*

        The encryption configuration for job bookmarks.

        - **JobBookmarksEncryptionMode** *(string) --*

          The encryption mode to use for job bookmarks data.

        - **KmsKeyArn** *(string) --*

          The Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
    """


_GetSecurityConfigurationsPaginateResponseTypeDef = TypedDict(
    "_GetSecurityConfigurationsPaginateResponseTypeDef",
    {
        "SecurityConfigurations": List[
            GetSecurityConfigurationsPaginateResponseSecurityConfigurationsTypeDef
        ]
    },
    total=False,
)


class GetSecurityConfigurationsPaginateResponseTypeDef(
    _GetSecurityConfigurationsPaginateResponseTypeDef
):
    """
    Type definition for `GetSecurityConfigurationsPaginate` `Response`

    - **SecurityConfigurations** *(list) --*

      A list of security configurations.

      - *(dict) --*

        Specifies a security configuration.

        - **Name** *(string) --*

          The name of the security configuration.

        - **CreatedTimeStamp** *(datetime) --*

          The time at which this security configuration was created.

        - **EncryptionConfiguration** *(dict) --*

          The encryption configuration associated with this security configuration.

          - **S3Encryption** *(list) --*

            The encryption configuration for Amazon Simple Storage Service (Amazon S3) data.

            - *(dict) --*

              Specifies how Amazon Simple Storage Service (Amazon S3) data should be encrypted.

              - **S3EncryptionMode** *(string) --*

                The encryption mode to use for Amazon S3 data.

              - **KmsKeyArn** *(string) --*

                The Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.

          - **CloudWatchEncryption** *(dict) --*

            The encryption configuration for Amazon CloudWatch.

            - **CloudWatchEncryptionMode** *(string) --*

              The encryption mode to use for CloudWatch data.

            - **KmsKeyArn** *(string) --*

              The Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.

          - **JobBookmarksEncryption** *(dict) --*

            The encryption configuration for job bookmarks.

            - **JobBookmarksEncryptionMode** *(string) --*

              The encryption mode to use for job bookmarks data.

            - **KmsKeyArn** *(string) --*

              The Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
    """


_GetTableVersionsPaginatePaginationConfigTypeDef = TypedDict(
    "_GetTableVersionsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class GetTableVersionsPaginatePaginationConfigTypeDef(
    _GetTableVersionsPaginatePaginationConfigTypeDef
):
    """
    Type definition for `GetTableVersionsPaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_GetTableVersionsPaginateResponseTableVersionsTablePartitionKeysTypeDef = TypedDict(
    "_GetTableVersionsPaginateResponseTableVersionsTablePartitionKeysTypeDef",
    {"Name": str, "Type": str, "Comment": str, "Parameters": Dict[str, str]},
    total=False,
)


class GetTableVersionsPaginateResponseTableVersionsTablePartitionKeysTypeDef(
    _GetTableVersionsPaginateResponseTableVersionsTablePartitionKeysTypeDef
):
    """
    Type definition for `GetTableVersionsPaginateResponseTableVersionsTable` `PartitionKeys`

    A column in a ``Table`` .

    - **Name** *(string) --*

      The name of the ``Column`` .

    - **Type** *(string) --*

      The data type of the ``Column`` .

    - **Comment** *(string) --*

      A free-form text comment.

    - **Parameters** *(dict) --*

      These key-value pairs define properties associated with the column.

      - *(string) --*

        - *(string) --*
    """


_GetTableVersionsPaginateResponseTableVersionsTableStorageDescriptorColumnsTypeDef = TypedDict(
    "_GetTableVersionsPaginateResponseTableVersionsTableStorageDescriptorColumnsTypeDef",
    {"Name": str, "Type": str, "Comment": str, "Parameters": Dict[str, str]},
    total=False,
)


class GetTableVersionsPaginateResponseTableVersionsTableStorageDescriptorColumnsTypeDef(
    _GetTableVersionsPaginateResponseTableVersionsTableStorageDescriptorColumnsTypeDef
):
    """
    Type definition for `GetTableVersionsPaginateResponseTableVersionsTableStorageDescriptor` `Columns`

    A column in a ``Table`` .

    - **Name** *(string) --*

      The name of the ``Column`` .

    - **Type** *(string) --*

      The data type of the ``Column`` .

    - **Comment** *(string) --*

      A free-form text comment.

    - **Parameters** *(dict) --*

      These key-value pairs define properties associated with the column.

      - *(string) --*

        - *(string) --*
    """


_GetTableVersionsPaginateResponseTableVersionsTableStorageDescriptorSerdeInfoTypeDef = TypedDict(
    "_GetTableVersionsPaginateResponseTableVersionsTableStorageDescriptorSerdeInfoTypeDef",
    {"Name": str, "SerializationLibrary": str, "Parameters": Dict[str, str]},
    total=False,
)


class GetTableVersionsPaginateResponseTableVersionsTableStorageDescriptorSerdeInfoTypeDef(
    _GetTableVersionsPaginateResponseTableVersionsTableStorageDescriptorSerdeInfoTypeDef
):
    """
    Type definition for `GetTableVersionsPaginateResponseTableVersionsTableStorageDescriptor` `SerdeInfo`

    The serialization/deserialization (SerDe) information.

    - **Name** *(string) --*

      Name of the SerDe.

    - **SerializationLibrary** *(string) --*

      Usually the class that implements the SerDe. An example is
      ``org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`` .

    - **Parameters** *(dict) --*

      These key-value pairs define initialization parameters for the SerDe.

      - *(string) --*

        - *(string) --*
    """


_GetTableVersionsPaginateResponseTableVersionsTableStorageDescriptorSkewedInfoTypeDef = TypedDict(
    "_GetTableVersionsPaginateResponseTableVersionsTableStorageDescriptorSkewedInfoTypeDef",
    {
        "SkewedColumnNames": List[str],
        "SkewedColumnValues": List[str],
        "SkewedColumnValueLocationMaps": Dict[str, str],
    },
    total=False,
)


class GetTableVersionsPaginateResponseTableVersionsTableStorageDescriptorSkewedInfoTypeDef(
    _GetTableVersionsPaginateResponseTableVersionsTableStorageDescriptorSkewedInfoTypeDef
):
    """
    Type definition for `GetTableVersionsPaginateResponseTableVersionsTableStorageDescriptor` `SkewedInfo`

    The information about values that appear frequently in a column (skewed values).

    - **SkewedColumnNames** *(list) --*

      A list of names of columns that contain skewed values.

      - *(string) --*

    - **SkewedColumnValues** *(list) --*

      A list of values that appear so frequently as to be considered skewed.

      - *(string) --*

    - **SkewedColumnValueLocationMaps** *(dict) --*

      A mapping of skewed values to the columns that contain them.

      - *(string) --*

        - *(string) --*
    """


_GetTableVersionsPaginateResponseTableVersionsTableStorageDescriptorSortColumnsTypeDef = TypedDict(
    "_GetTableVersionsPaginateResponseTableVersionsTableStorageDescriptorSortColumnsTypeDef",
    {"Column": str, "SortOrder": int},
    total=False,
)


class GetTableVersionsPaginateResponseTableVersionsTableStorageDescriptorSortColumnsTypeDef(
    _GetTableVersionsPaginateResponseTableVersionsTableStorageDescriptorSortColumnsTypeDef
):
    """
    Type definition for `GetTableVersionsPaginateResponseTableVersionsTableStorageDescriptor` `SortColumns`

    Specifies the sort order of a sorted column.

    - **Column** *(string) --*

      The name of the column.

    - **SortOrder** *(integer) --*

      Indicates that the column is sorted in ascending order (``== 1`` ), or in
      descending order (``==0`` ).
    """


_GetTableVersionsPaginateResponseTableVersionsTableStorageDescriptorTypeDef = TypedDict(
    "_GetTableVersionsPaginateResponseTableVersionsTableStorageDescriptorTypeDef",
    {
        "Columns": List[
            GetTableVersionsPaginateResponseTableVersionsTableStorageDescriptorColumnsTypeDef
        ],
        "Location": str,
        "InputFormat": str,
        "OutputFormat": str,
        "Compressed": bool,
        "NumberOfBuckets": int,
        "SerdeInfo": GetTableVersionsPaginateResponseTableVersionsTableStorageDescriptorSerdeInfoTypeDef,
        "BucketColumns": List[str],
        "SortColumns": List[
            GetTableVersionsPaginateResponseTableVersionsTableStorageDescriptorSortColumnsTypeDef
        ],
        "Parameters": Dict[str, str],
        "SkewedInfo": GetTableVersionsPaginateResponseTableVersionsTableStorageDescriptorSkewedInfoTypeDef,
        "StoredAsSubDirectories": bool,
    },
    total=False,
)


class GetTableVersionsPaginateResponseTableVersionsTableStorageDescriptorTypeDef(
    _GetTableVersionsPaginateResponseTableVersionsTableStorageDescriptorTypeDef
):
    """
    Type definition for `GetTableVersionsPaginateResponseTableVersionsTable` `StorageDescriptor`

    A storage descriptor containing information about the physical storage of this table.

    - **Columns** *(list) --*

      A list of the ``Columns`` in the table.

      - *(dict) --*

        A column in a ``Table`` .

        - **Name** *(string) --*

          The name of the ``Column`` .

        - **Type** *(string) --*

          The data type of the ``Column`` .

        - **Comment** *(string) --*

          A free-form text comment.

        - **Parameters** *(dict) --*

          These key-value pairs define properties associated with the column.

          - *(string) --*

            - *(string) --*

    - **Location** *(string) --*

      The physical location of the table. By default, this takes the form of the warehouse
      location, followed by the database location in the warehouse, followed by the table
      name.

    - **InputFormat** *(string) --*

      The input format: ``SequenceFileInputFormat`` (binary), or ``TextInputFormat`` , or a
      custom format.

    - **OutputFormat** *(string) --*

      The output format: ``SequenceFileOutputFormat`` (binary), or
      ``IgnoreKeyTextOutputFormat`` , or a custom format.

    - **Compressed** *(boolean) --*

       ``True`` if the data in the table is compressed, or ``False`` if not.

    - **NumberOfBuckets** *(integer) --*

      Must be specified if the table contains any dimension columns.

    - **SerdeInfo** *(dict) --*

      The serialization/deserialization (SerDe) information.

      - **Name** *(string) --*

        Name of the SerDe.

      - **SerializationLibrary** *(string) --*

        Usually the class that implements the SerDe. An example is
        ``org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`` .

      - **Parameters** *(dict) --*

        These key-value pairs define initialization parameters for the SerDe.

        - *(string) --*

          - *(string) --*

    - **BucketColumns** *(list) --*

      A list of reducer grouping columns, clustering columns, and bucketing columns in the
      table.

      - *(string) --*

    - **SortColumns** *(list) --*

      A list specifying the sort order of each bucket in the table.

      - *(dict) --*

        Specifies the sort order of a sorted column.

        - **Column** *(string) --*

          The name of the column.

        - **SortOrder** *(integer) --*

          Indicates that the column is sorted in ascending order (``== 1`` ), or in
          descending order (``==0`` ).

    - **Parameters** *(dict) --*

      The user-supplied properties in key-value form.

      - *(string) --*

        - *(string) --*

    - **SkewedInfo** *(dict) --*

      The information about values that appear frequently in a column (skewed values).

      - **SkewedColumnNames** *(list) --*

        A list of names of columns that contain skewed values.

        - *(string) --*

      - **SkewedColumnValues** *(list) --*

        A list of values that appear so frequently as to be considered skewed.

        - *(string) --*

      - **SkewedColumnValueLocationMaps** *(dict) --*

        A mapping of skewed values to the columns that contain them.

        - *(string) --*

          - *(string) --*

    - **StoredAsSubDirectories** *(boolean) --*

       ``True`` if the table data is stored in subdirectories, or ``False`` if not.
    """


_GetTableVersionsPaginateResponseTableVersionsTableTypeDef = TypedDict(
    "_GetTableVersionsPaginateResponseTableVersionsTableTypeDef",
    {
        "Name": str,
        "DatabaseName": str,
        "Description": str,
        "Owner": str,
        "CreateTime": datetime,
        "UpdateTime": datetime,
        "LastAccessTime": datetime,
        "LastAnalyzedTime": datetime,
        "Retention": int,
        "StorageDescriptor": GetTableVersionsPaginateResponseTableVersionsTableStorageDescriptorTypeDef,
        "PartitionKeys": List[
            GetTableVersionsPaginateResponseTableVersionsTablePartitionKeysTypeDef
        ],
        "ViewOriginalText": str,
        "ViewExpandedText": str,
        "TableType": str,
        "Parameters": Dict[str, str],
        "CreatedBy": str,
        "IsRegisteredWithLakeFormation": bool,
    },
    total=False,
)


class GetTableVersionsPaginateResponseTableVersionsTableTypeDef(
    _GetTableVersionsPaginateResponseTableVersionsTableTypeDef
):
    """
    Type definition for `GetTableVersionsPaginateResponseTableVersions` `Table`

    The table in question.

    - **Name** *(string) --*

      The table name. For Hive compatibility, this must be entirely lowercase.

    - **DatabaseName** *(string) --*

      The name of the database where the table metadata resides. For Hive compatibility, this
      must be all lowercase.

    - **Description** *(string) --*

      A description of the table.

    - **Owner** *(string) --*

      The owner of the table.

    - **CreateTime** *(datetime) --*

      The time when the table definition was created in the Data Catalog.

    - **UpdateTime** *(datetime) --*

      The last time that the table was updated.

    - **LastAccessTime** *(datetime) --*

      The last time that the table was accessed. This is usually taken from HDFS, and might
      not be reliable.

    - **LastAnalyzedTime** *(datetime) --*

      The last time that column statistics were computed for this table.

    - **Retention** *(integer) --*

      The retention time for this table.

    - **StorageDescriptor** *(dict) --*

      A storage descriptor containing information about the physical storage of this table.

      - **Columns** *(list) --*

        A list of the ``Columns`` in the table.

        - *(dict) --*

          A column in a ``Table`` .

          - **Name** *(string) --*

            The name of the ``Column`` .

          - **Type** *(string) --*

            The data type of the ``Column`` .

          - **Comment** *(string) --*

            A free-form text comment.

          - **Parameters** *(dict) --*

            These key-value pairs define properties associated with the column.

            - *(string) --*

              - *(string) --*

      - **Location** *(string) --*

        The physical location of the table. By default, this takes the form of the warehouse
        location, followed by the database location in the warehouse, followed by the table
        name.

      - **InputFormat** *(string) --*

        The input format: ``SequenceFileInputFormat`` (binary), or ``TextInputFormat`` , or a
        custom format.

      - **OutputFormat** *(string) --*

        The output format: ``SequenceFileOutputFormat`` (binary), or
        ``IgnoreKeyTextOutputFormat`` , or a custom format.

      - **Compressed** *(boolean) --*

         ``True`` if the data in the table is compressed, or ``False`` if not.

      - **NumberOfBuckets** *(integer) --*

        Must be specified if the table contains any dimension columns.

      - **SerdeInfo** *(dict) --*

        The serialization/deserialization (SerDe) information.

        - **Name** *(string) --*

          Name of the SerDe.

        - **SerializationLibrary** *(string) --*

          Usually the class that implements the SerDe. An example is
          ``org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`` .

        - **Parameters** *(dict) --*

          These key-value pairs define initialization parameters for the SerDe.

          - *(string) --*

            - *(string) --*

      - **BucketColumns** *(list) --*

        A list of reducer grouping columns, clustering columns, and bucketing columns in the
        table.

        - *(string) --*

      - **SortColumns** *(list) --*

        A list specifying the sort order of each bucket in the table.

        - *(dict) --*

          Specifies the sort order of a sorted column.

          - **Column** *(string) --*

            The name of the column.

          - **SortOrder** *(integer) --*

            Indicates that the column is sorted in ascending order (``== 1`` ), or in
            descending order (``==0`` ).

      - **Parameters** *(dict) --*

        The user-supplied properties in key-value form.

        - *(string) --*

          - *(string) --*

      - **SkewedInfo** *(dict) --*

        The information about values that appear frequently in a column (skewed values).

        - **SkewedColumnNames** *(list) --*

          A list of names of columns that contain skewed values.

          - *(string) --*

        - **SkewedColumnValues** *(list) --*

          A list of values that appear so frequently as to be considered skewed.

          - *(string) --*

        - **SkewedColumnValueLocationMaps** *(dict) --*

          A mapping of skewed values to the columns that contain them.

          - *(string) --*

            - *(string) --*

      - **StoredAsSubDirectories** *(boolean) --*

         ``True`` if the table data is stored in subdirectories, or ``False`` if not.

    - **PartitionKeys** *(list) --*

      A list of columns by which the table is partitioned. Only primitive types are supported
      as partition keys.

      When you create a table used by Amazon Athena, and you do not specify any
      ``partitionKeys`` , you must at least set the value of ``partitionKeys`` to an empty
      list. For example:

       ``"PartitionKeys": []``

      - *(dict) --*

        A column in a ``Table`` .

        - **Name** *(string) --*

          The name of the ``Column`` .

        - **Type** *(string) --*

          The data type of the ``Column`` .

        - **Comment** *(string) --*

          A free-form text comment.

        - **Parameters** *(dict) --*

          These key-value pairs define properties associated with the column.

          - *(string) --*

            - *(string) --*

    - **ViewOriginalText** *(string) --*

      If the table is a view, the original text of the view; otherwise ``null`` .

    - **ViewExpandedText** *(string) --*

      If the table is a view, the expanded text of the view; otherwise ``null`` .

    - **TableType** *(string) --*

      The type of this table (``EXTERNAL_TABLE`` , ``VIRTUAL_VIEW`` , etc.).

    - **Parameters** *(dict) --*

      These key-value pairs define properties associated with the table.

      - *(string) --*

        - *(string) --*

    - **CreatedBy** *(string) --*

      The person or entity who created the table.

    - **IsRegisteredWithLakeFormation** *(boolean) --*

      Indicates whether the table has been registered with AWS Lake Formation.
    """


_GetTableVersionsPaginateResponseTableVersionsTypeDef = TypedDict(
    "_GetTableVersionsPaginateResponseTableVersionsTypeDef",
    {
        "Table": GetTableVersionsPaginateResponseTableVersionsTableTypeDef,
        "VersionId": str,
    },
    total=False,
)


class GetTableVersionsPaginateResponseTableVersionsTypeDef(
    _GetTableVersionsPaginateResponseTableVersionsTypeDef
):
    """
    Type definition for `GetTableVersionsPaginateResponse` `TableVersions`

    Specifies a version of a table.

    - **Table** *(dict) --*

      The table in question.

      - **Name** *(string) --*

        The table name. For Hive compatibility, this must be entirely lowercase.

      - **DatabaseName** *(string) --*

        The name of the database where the table metadata resides. For Hive compatibility, this
        must be all lowercase.

      - **Description** *(string) --*

        A description of the table.

      - **Owner** *(string) --*

        The owner of the table.

      - **CreateTime** *(datetime) --*

        The time when the table definition was created in the Data Catalog.

      - **UpdateTime** *(datetime) --*

        The last time that the table was updated.

      - **LastAccessTime** *(datetime) --*

        The last time that the table was accessed. This is usually taken from HDFS, and might
        not be reliable.

      - **LastAnalyzedTime** *(datetime) --*

        The last time that column statistics were computed for this table.

      - **Retention** *(integer) --*

        The retention time for this table.

      - **StorageDescriptor** *(dict) --*

        A storage descriptor containing information about the physical storage of this table.

        - **Columns** *(list) --*

          A list of the ``Columns`` in the table.

          - *(dict) --*

            A column in a ``Table`` .

            - **Name** *(string) --*

              The name of the ``Column`` .

            - **Type** *(string) --*

              The data type of the ``Column`` .

            - **Comment** *(string) --*

              A free-form text comment.

            - **Parameters** *(dict) --*

              These key-value pairs define properties associated with the column.

              - *(string) --*

                - *(string) --*

        - **Location** *(string) --*

          The physical location of the table. By default, this takes the form of the warehouse
          location, followed by the database location in the warehouse, followed by the table
          name.

        - **InputFormat** *(string) --*

          The input format: ``SequenceFileInputFormat`` (binary), or ``TextInputFormat`` , or a
          custom format.

        - **OutputFormat** *(string) --*

          The output format: ``SequenceFileOutputFormat`` (binary), or
          ``IgnoreKeyTextOutputFormat`` , or a custom format.

        - **Compressed** *(boolean) --*

           ``True`` if the data in the table is compressed, or ``False`` if not.

        - **NumberOfBuckets** *(integer) --*

          Must be specified if the table contains any dimension columns.

        - **SerdeInfo** *(dict) --*

          The serialization/deserialization (SerDe) information.

          - **Name** *(string) --*

            Name of the SerDe.

          - **SerializationLibrary** *(string) --*

            Usually the class that implements the SerDe. An example is
            ``org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`` .

          - **Parameters** *(dict) --*

            These key-value pairs define initialization parameters for the SerDe.

            - *(string) --*

              - *(string) --*

        - **BucketColumns** *(list) --*

          A list of reducer grouping columns, clustering columns, and bucketing columns in the
          table.

          - *(string) --*

        - **SortColumns** *(list) --*

          A list specifying the sort order of each bucket in the table.

          - *(dict) --*

            Specifies the sort order of a sorted column.

            - **Column** *(string) --*

              The name of the column.

            - **SortOrder** *(integer) --*

              Indicates that the column is sorted in ascending order (``== 1`` ), or in
              descending order (``==0`` ).

        - **Parameters** *(dict) --*

          The user-supplied properties in key-value form.

          - *(string) --*

            - *(string) --*

        - **SkewedInfo** *(dict) --*

          The information about values that appear frequently in a column (skewed values).

          - **SkewedColumnNames** *(list) --*

            A list of names of columns that contain skewed values.

            - *(string) --*

          - **SkewedColumnValues** *(list) --*

            A list of values that appear so frequently as to be considered skewed.

            - *(string) --*

          - **SkewedColumnValueLocationMaps** *(dict) --*

            A mapping of skewed values to the columns that contain them.

            - *(string) --*

              - *(string) --*

        - **StoredAsSubDirectories** *(boolean) --*

           ``True`` if the table data is stored in subdirectories, or ``False`` if not.

      - **PartitionKeys** *(list) --*

        A list of columns by which the table is partitioned. Only primitive types are supported
        as partition keys.

        When you create a table used by Amazon Athena, and you do not specify any
        ``partitionKeys`` , you must at least set the value of ``partitionKeys`` to an empty
        list. For example:

         ``"PartitionKeys": []``

        - *(dict) --*

          A column in a ``Table`` .

          - **Name** *(string) --*

            The name of the ``Column`` .

          - **Type** *(string) --*

            The data type of the ``Column`` .

          - **Comment** *(string) --*

            A free-form text comment.

          - **Parameters** *(dict) --*

            These key-value pairs define properties associated with the column.

            - *(string) --*

              - *(string) --*

      - **ViewOriginalText** *(string) --*

        If the table is a view, the original text of the view; otherwise ``null`` .

      - **ViewExpandedText** *(string) --*

        If the table is a view, the expanded text of the view; otherwise ``null`` .

      - **TableType** *(string) --*

        The type of this table (``EXTERNAL_TABLE`` , ``VIRTUAL_VIEW`` , etc.).

      - **Parameters** *(dict) --*

        These key-value pairs define properties associated with the table.

        - *(string) --*

          - *(string) --*

      - **CreatedBy** *(string) --*

        The person or entity who created the table.

      - **IsRegisteredWithLakeFormation** *(boolean) --*

        Indicates whether the table has been registered with AWS Lake Formation.

    - **VersionId** *(string) --*

      The ID value that identifies this table version. A ``VersionId`` is a string
      representation of an integer. Each version is incremented by 1.
    """


_GetTableVersionsPaginateResponseTypeDef = TypedDict(
    "_GetTableVersionsPaginateResponseTypeDef",
    {"TableVersions": List[GetTableVersionsPaginateResponseTableVersionsTypeDef]},
    total=False,
)


class GetTableVersionsPaginateResponseTypeDef(_GetTableVersionsPaginateResponseTypeDef):
    """
    Type definition for `GetTableVersionsPaginate` `Response`

    - **TableVersions** *(list) --*

      A list of strings identifying available versions of the specified table.

      - *(dict) --*

        Specifies a version of a table.

        - **Table** *(dict) --*

          The table in question.

          - **Name** *(string) --*

            The table name. For Hive compatibility, this must be entirely lowercase.

          - **DatabaseName** *(string) --*

            The name of the database where the table metadata resides. For Hive compatibility, this
            must be all lowercase.

          - **Description** *(string) --*

            A description of the table.

          - **Owner** *(string) --*

            The owner of the table.

          - **CreateTime** *(datetime) --*

            The time when the table definition was created in the Data Catalog.

          - **UpdateTime** *(datetime) --*

            The last time that the table was updated.

          - **LastAccessTime** *(datetime) --*

            The last time that the table was accessed. This is usually taken from HDFS, and might
            not be reliable.

          - **LastAnalyzedTime** *(datetime) --*

            The last time that column statistics were computed for this table.

          - **Retention** *(integer) --*

            The retention time for this table.

          - **StorageDescriptor** *(dict) --*

            A storage descriptor containing information about the physical storage of this table.

            - **Columns** *(list) --*

              A list of the ``Columns`` in the table.

              - *(dict) --*

                A column in a ``Table`` .

                - **Name** *(string) --*

                  The name of the ``Column`` .

                - **Type** *(string) --*

                  The data type of the ``Column`` .

                - **Comment** *(string) --*

                  A free-form text comment.

                - **Parameters** *(dict) --*

                  These key-value pairs define properties associated with the column.

                  - *(string) --*

                    - *(string) --*

            - **Location** *(string) --*

              The physical location of the table. By default, this takes the form of the warehouse
              location, followed by the database location in the warehouse, followed by the table
              name.

            - **InputFormat** *(string) --*

              The input format: ``SequenceFileInputFormat`` (binary), or ``TextInputFormat`` , or a
              custom format.

            - **OutputFormat** *(string) --*

              The output format: ``SequenceFileOutputFormat`` (binary), or
              ``IgnoreKeyTextOutputFormat`` , or a custom format.

            - **Compressed** *(boolean) --*

               ``True`` if the data in the table is compressed, or ``False`` if not.

            - **NumberOfBuckets** *(integer) --*

              Must be specified if the table contains any dimension columns.

            - **SerdeInfo** *(dict) --*

              The serialization/deserialization (SerDe) information.

              - **Name** *(string) --*

                Name of the SerDe.

              - **SerializationLibrary** *(string) --*

                Usually the class that implements the SerDe. An example is
                ``org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`` .

              - **Parameters** *(dict) --*

                These key-value pairs define initialization parameters for the SerDe.

                - *(string) --*

                  - *(string) --*

            - **BucketColumns** *(list) --*

              A list of reducer grouping columns, clustering columns, and bucketing columns in the
              table.

              - *(string) --*

            - **SortColumns** *(list) --*

              A list specifying the sort order of each bucket in the table.

              - *(dict) --*

                Specifies the sort order of a sorted column.

                - **Column** *(string) --*

                  The name of the column.

                - **SortOrder** *(integer) --*

                  Indicates that the column is sorted in ascending order (``== 1`` ), or in
                  descending order (``==0`` ).

            - **Parameters** *(dict) --*

              The user-supplied properties in key-value form.

              - *(string) --*

                - *(string) --*

            - **SkewedInfo** *(dict) --*

              The information about values that appear frequently in a column (skewed values).

              - **SkewedColumnNames** *(list) --*

                A list of names of columns that contain skewed values.

                - *(string) --*

              - **SkewedColumnValues** *(list) --*

                A list of values that appear so frequently as to be considered skewed.

                - *(string) --*

              - **SkewedColumnValueLocationMaps** *(dict) --*

                A mapping of skewed values to the columns that contain them.

                - *(string) --*

                  - *(string) --*

            - **StoredAsSubDirectories** *(boolean) --*

               ``True`` if the table data is stored in subdirectories, or ``False`` if not.

          - **PartitionKeys** *(list) --*

            A list of columns by which the table is partitioned. Only primitive types are supported
            as partition keys.

            When you create a table used by Amazon Athena, and you do not specify any
            ``partitionKeys`` , you must at least set the value of ``partitionKeys`` to an empty
            list. For example:

             ``"PartitionKeys": []``

            - *(dict) --*

              A column in a ``Table`` .

              - **Name** *(string) --*

                The name of the ``Column`` .

              - **Type** *(string) --*

                The data type of the ``Column`` .

              - **Comment** *(string) --*

                A free-form text comment.

              - **Parameters** *(dict) --*

                These key-value pairs define properties associated with the column.

                - *(string) --*

                  - *(string) --*

          - **ViewOriginalText** *(string) --*

            If the table is a view, the original text of the view; otherwise ``null`` .

          - **ViewExpandedText** *(string) --*

            If the table is a view, the expanded text of the view; otherwise ``null`` .

          - **TableType** *(string) --*

            The type of this table (``EXTERNAL_TABLE`` , ``VIRTUAL_VIEW`` , etc.).

          - **Parameters** *(dict) --*

            These key-value pairs define properties associated with the table.

            - *(string) --*

              - *(string) --*

          - **CreatedBy** *(string) --*

            The person or entity who created the table.

          - **IsRegisteredWithLakeFormation** *(boolean) --*

            Indicates whether the table has been registered with AWS Lake Formation.

        - **VersionId** *(string) --*

          The ID value that identifies this table version. A ``VersionId`` is a string
          representation of an integer. Each version is incremented by 1.
    """


_GetTablesPaginatePaginationConfigTypeDef = TypedDict(
    "_GetTablesPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class GetTablesPaginatePaginationConfigTypeDef(
    _GetTablesPaginatePaginationConfigTypeDef
):
    """
    Type definition for `GetTablesPaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_GetTablesPaginateResponseTableListPartitionKeysTypeDef = TypedDict(
    "_GetTablesPaginateResponseTableListPartitionKeysTypeDef",
    {"Name": str, "Type": str, "Comment": str, "Parameters": Dict[str, str]},
    total=False,
)


class GetTablesPaginateResponseTableListPartitionKeysTypeDef(
    _GetTablesPaginateResponseTableListPartitionKeysTypeDef
):
    """
    Type definition for `GetTablesPaginateResponseTableList` `PartitionKeys`

    A column in a ``Table`` .

    - **Name** *(string) --*

      The name of the ``Column`` .

    - **Type** *(string) --*

      The data type of the ``Column`` .

    - **Comment** *(string) --*

      A free-form text comment.

    - **Parameters** *(dict) --*

      These key-value pairs define properties associated with the column.

      - *(string) --*

        - *(string) --*
    """


_GetTablesPaginateResponseTableListStorageDescriptorColumnsTypeDef = TypedDict(
    "_GetTablesPaginateResponseTableListStorageDescriptorColumnsTypeDef",
    {"Name": str, "Type": str, "Comment": str, "Parameters": Dict[str, str]},
    total=False,
)


class GetTablesPaginateResponseTableListStorageDescriptorColumnsTypeDef(
    _GetTablesPaginateResponseTableListStorageDescriptorColumnsTypeDef
):
    """
    Type definition for `GetTablesPaginateResponseTableListStorageDescriptor` `Columns`

    A column in a ``Table`` .

    - **Name** *(string) --*

      The name of the ``Column`` .

    - **Type** *(string) --*

      The data type of the ``Column`` .

    - **Comment** *(string) --*

      A free-form text comment.

    - **Parameters** *(dict) --*

      These key-value pairs define properties associated with the column.

      - *(string) --*

        - *(string) --*
    """


_GetTablesPaginateResponseTableListStorageDescriptorSerdeInfoTypeDef = TypedDict(
    "_GetTablesPaginateResponseTableListStorageDescriptorSerdeInfoTypeDef",
    {"Name": str, "SerializationLibrary": str, "Parameters": Dict[str, str]},
    total=False,
)


class GetTablesPaginateResponseTableListStorageDescriptorSerdeInfoTypeDef(
    _GetTablesPaginateResponseTableListStorageDescriptorSerdeInfoTypeDef
):
    """
    Type definition for `GetTablesPaginateResponseTableListStorageDescriptor` `SerdeInfo`

    The serialization/deserialization (SerDe) information.

    - **Name** *(string) --*

      Name of the SerDe.

    - **SerializationLibrary** *(string) --*

      Usually the class that implements the SerDe. An example is
      ``org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`` .

    - **Parameters** *(dict) --*

      These key-value pairs define initialization parameters for the SerDe.

      - *(string) --*

        - *(string) --*
    """


_GetTablesPaginateResponseTableListStorageDescriptorSkewedInfoTypeDef = TypedDict(
    "_GetTablesPaginateResponseTableListStorageDescriptorSkewedInfoTypeDef",
    {
        "SkewedColumnNames": List[str],
        "SkewedColumnValues": List[str],
        "SkewedColumnValueLocationMaps": Dict[str, str],
    },
    total=False,
)


class GetTablesPaginateResponseTableListStorageDescriptorSkewedInfoTypeDef(
    _GetTablesPaginateResponseTableListStorageDescriptorSkewedInfoTypeDef
):
    """
    Type definition for `GetTablesPaginateResponseTableListStorageDescriptor` `SkewedInfo`

    The information about values that appear frequently in a column (skewed values).

    - **SkewedColumnNames** *(list) --*

      A list of names of columns that contain skewed values.

      - *(string) --*

    - **SkewedColumnValues** *(list) --*

      A list of values that appear so frequently as to be considered skewed.

      - *(string) --*

    - **SkewedColumnValueLocationMaps** *(dict) --*

      A mapping of skewed values to the columns that contain them.

      - *(string) --*

        - *(string) --*
    """


_GetTablesPaginateResponseTableListStorageDescriptorSortColumnsTypeDef = TypedDict(
    "_GetTablesPaginateResponseTableListStorageDescriptorSortColumnsTypeDef",
    {"Column": str, "SortOrder": int},
    total=False,
)


class GetTablesPaginateResponseTableListStorageDescriptorSortColumnsTypeDef(
    _GetTablesPaginateResponseTableListStorageDescriptorSortColumnsTypeDef
):
    """
    Type definition for `GetTablesPaginateResponseTableListStorageDescriptor` `SortColumns`

    Specifies the sort order of a sorted column.

    - **Column** *(string) --*

      The name of the column.

    - **SortOrder** *(integer) --*

      Indicates that the column is sorted in ascending order (``== 1`` ), or in
      descending order (``==0`` ).
    """


_GetTablesPaginateResponseTableListStorageDescriptorTypeDef = TypedDict(
    "_GetTablesPaginateResponseTableListStorageDescriptorTypeDef",
    {
        "Columns": List[
            GetTablesPaginateResponseTableListStorageDescriptorColumnsTypeDef
        ],
        "Location": str,
        "InputFormat": str,
        "OutputFormat": str,
        "Compressed": bool,
        "NumberOfBuckets": int,
        "SerdeInfo": GetTablesPaginateResponseTableListStorageDescriptorSerdeInfoTypeDef,
        "BucketColumns": List[str],
        "SortColumns": List[
            GetTablesPaginateResponseTableListStorageDescriptorSortColumnsTypeDef
        ],
        "Parameters": Dict[str, str],
        "SkewedInfo": GetTablesPaginateResponseTableListStorageDescriptorSkewedInfoTypeDef,
        "StoredAsSubDirectories": bool,
    },
    total=False,
)


class GetTablesPaginateResponseTableListStorageDescriptorTypeDef(
    _GetTablesPaginateResponseTableListStorageDescriptorTypeDef
):
    """
    Type definition for `GetTablesPaginateResponseTableList` `StorageDescriptor`

    A storage descriptor containing information about the physical storage of this table.

    - **Columns** *(list) --*

      A list of the ``Columns`` in the table.

      - *(dict) --*

        A column in a ``Table`` .

        - **Name** *(string) --*

          The name of the ``Column`` .

        - **Type** *(string) --*

          The data type of the ``Column`` .

        - **Comment** *(string) --*

          A free-form text comment.

        - **Parameters** *(dict) --*

          These key-value pairs define properties associated with the column.

          - *(string) --*

            - *(string) --*

    - **Location** *(string) --*

      The physical location of the table. By default, this takes the form of the warehouse
      location, followed by the database location in the warehouse, followed by the table
      name.

    - **InputFormat** *(string) --*

      The input format: ``SequenceFileInputFormat`` (binary), or ``TextInputFormat`` , or a
      custom format.

    - **OutputFormat** *(string) --*

      The output format: ``SequenceFileOutputFormat`` (binary), or
      ``IgnoreKeyTextOutputFormat`` , or a custom format.

    - **Compressed** *(boolean) --*

       ``True`` if the data in the table is compressed, or ``False`` if not.

    - **NumberOfBuckets** *(integer) --*

      Must be specified if the table contains any dimension columns.

    - **SerdeInfo** *(dict) --*

      The serialization/deserialization (SerDe) information.

      - **Name** *(string) --*

        Name of the SerDe.

      - **SerializationLibrary** *(string) --*

        Usually the class that implements the SerDe. An example is
        ``org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`` .

      - **Parameters** *(dict) --*

        These key-value pairs define initialization parameters for the SerDe.

        - *(string) --*

          - *(string) --*

    - **BucketColumns** *(list) --*

      A list of reducer grouping columns, clustering columns, and bucketing columns in the
      table.

      - *(string) --*

    - **SortColumns** *(list) --*

      A list specifying the sort order of each bucket in the table.

      - *(dict) --*

        Specifies the sort order of a sorted column.

        - **Column** *(string) --*

          The name of the column.

        - **SortOrder** *(integer) --*

          Indicates that the column is sorted in ascending order (``== 1`` ), or in
          descending order (``==0`` ).

    - **Parameters** *(dict) --*

      The user-supplied properties in key-value form.

      - *(string) --*

        - *(string) --*

    - **SkewedInfo** *(dict) --*

      The information about values that appear frequently in a column (skewed values).

      - **SkewedColumnNames** *(list) --*

        A list of names of columns that contain skewed values.

        - *(string) --*

      - **SkewedColumnValues** *(list) --*

        A list of values that appear so frequently as to be considered skewed.

        - *(string) --*

      - **SkewedColumnValueLocationMaps** *(dict) --*

        A mapping of skewed values to the columns that contain them.

        - *(string) --*

          - *(string) --*

    - **StoredAsSubDirectories** *(boolean) --*

       ``True`` if the table data is stored in subdirectories, or ``False`` if not.
    """


_GetTablesPaginateResponseTableListTypeDef = TypedDict(
    "_GetTablesPaginateResponseTableListTypeDef",
    {
        "Name": str,
        "DatabaseName": str,
        "Description": str,
        "Owner": str,
        "CreateTime": datetime,
        "UpdateTime": datetime,
        "LastAccessTime": datetime,
        "LastAnalyzedTime": datetime,
        "Retention": int,
        "StorageDescriptor": GetTablesPaginateResponseTableListStorageDescriptorTypeDef,
        "PartitionKeys": List[GetTablesPaginateResponseTableListPartitionKeysTypeDef],
        "ViewOriginalText": str,
        "ViewExpandedText": str,
        "TableType": str,
        "Parameters": Dict[str, str],
        "CreatedBy": str,
        "IsRegisteredWithLakeFormation": bool,
    },
    total=False,
)


class GetTablesPaginateResponseTableListTypeDef(
    _GetTablesPaginateResponseTableListTypeDef
):
    """
    Type definition for `GetTablesPaginateResponse` `TableList`

    Represents a collection of related data organized in columns and rows.

    - **Name** *(string) --*

      The table name. For Hive compatibility, this must be entirely lowercase.

    - **DatabaseName** *(string) --*

      The name of the database where the table metadata resides. For Hive compatibility, this
      must be all lowercase.

    - **Description** *(string) --*

      A description of the table.

    - **Owner** *(string) --*

      The owner of the table.

    - **CreateTime** *(datetime) --*

      The time when the table definition was created in the Data Catalog.

    - **UpdateTime** *(datetime) --*

      The last time that the table was updated.

    - **LastAccessTime** *(datetime) --*

      The last time that the table was accessed. This is usually taken from HDFS, and might not
      be reliable.

    - **LastAnalyzedTime** *(datetime) --*

      The last time that column statistics were computed for this table.

    - **Retention** *(integer) --*

      The retention time for this table.

    - **StorageDescriptor** *(dict) --*

      A storage descriptor containing information about the physical storage of this table.

      - **Columns** *(list) --*

        A list of the ``Columns`` in the table.

        - *(dict) --*

          A column in a ``Table`` .

          - **Name** *(string) --*

            The name of the ``Column`` .

          - **Type** *(string) --*

            The data type of the ``Column`` .

          - **Comment** *(string) --*

            A free-form text comment.

          - **Parameters** *(dict) --*

            These key-value pairs define properties associated with the column.

            - *(string) --*

              - *(string) --*

      - **Location** *(string) --*

        The physical location of the table. By default, this takes the form of the warehouse
        location, followed by the database location in the warehouse, followed by the table
        name.

      - **InputFormat** *(string) --*

        The input format: ``SequenceFileInputFormat`` (binary), or ``TextInputFormat`` , or a
        custom format.

      - **OutputFormat** *(string) --*

        The output format: ``SequenceFileOutputFormat`` (binary), or
        ``IgnoreKeyTextOutputFormat`` , or a custom format.

      - **Compressed** *(boolean) --*

         ``True`` if the data in the table is compressed, or ``False`` if not.

      - **NumberOfBuckets** *(integer) --*

        Must be specified if the table contains any dimension columns.

      - **SerdeInfo** *(dict) --*

        The serialization/deserialization (SerDe) information.

        - **Name** *(string) --*

          Name of the SerDe.

        - **SerializationLibrary** *(string) --*

          Usually the class that implements the SerDe. An example is
          ``org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`` .

        - **Parameters** *(dict) --*

          These key-value pairs define initialization parameters for the SerDe.

          - *(string) --*

            - *(string) --*

      - **BucketColumns** *(list) --*

        A list of reducer grouping columns, clustering columns, and bucketing columns in the
        table.

        - *(string) --*

      - **SortColumns** *(list) --*

        A list specifying the sort order of each bucket in the table.

        - *(dict) --*

          Specifies the sort order of a sorted column.

          - **Column** *(string) --*

            The name of the column.

          - **SortOrder** *(integer) --*

            Indicates that the column is sorted in ascending order (``== 1`` ), or in
            descending order (``==0`` ).

      - **Parameters** *(dict) --*

        The user-supplied properties in key-value form.

        - *(string) --*

          - *(string) --*

      - **SkewedInfo** *(dict) --*

        The information about values that appear frequently in a column (skewed values).

        - **SkewedColumnNames** *(list) --*

          A list of names of columns that contain skewed values.

          - *(string) --*

        - **SkewedColumnValues** *(list) --*

          A list of values that appear so frequently as to be considered skewed.

          - *(string) --*

        - **SkewedColumnValueLocationMaps** *(dict) --*

          A mapping of skewed values to the columns that contain them.

          - *(string) --*

            - *(string) --*

      - **StoredAsSubDirectories** *(boolean) --*

         ``True`` if the table data is stored in subdirectories, or ``False`` if not.

    - **PartitionKeys** *(list) --*

      A list of columns by which the table is partitioned. Only primitive types are supported
      as partition keys.

      When you create a table used by Amazon Athena, and you do not specify any
      ``partitionKeys`` , you must at least set the value of ``partitionKeys`` to an empty
      list. For example:

       ``"PartitionKeys": []``

      - *(dict) --*

        A column in a ``Table`` .

        - **Name** *(string) --*

          The name of the ``Column`` .

        - **Type** *(string) --*

          The data type of the ``Column`` .

        - **Comment** *(string) --*

          A free-form text comment.

        - **Parameters** *(dict) --*

          These key-value pairs define properties associated with the column.

          - *(string) --*

            - *(string) --*

    - **ViewOriginalText** *(string) --*

      If the table is a view, the original text of the view; otherwise ``null`` .

    - **ViewExpandedText** *(string) --*

      If the table is a view, the expanded text of the view; otherwise ``null`` .

    - **TableType** *(string) --*

      The type of this table (``EXTERNAL_TABLE`` , ``VIRTUAL_VIEW`` , etc.).

    - **Parameters** *(dict) --*

      These key-value pairs define properties associated with the table.

      - *(string) --*

        - *(string) --*

    - **CreatedBy** *(string) --*

      The person or entity who created the table.

    - **IsRegisteredWithLakeFormation** *(boolean) --*

      Indicates whether the table has been registered with AWS Lake Formation.
    """


_GetTablesPaginateResponseTypeDef = TypedDict(
    "_GetTablesPaginateResponseTypeDef",
    {"TableList": List[GetTablesPaginateResponseTableListTypeDef]},
    total=False,
)


class GetTablesPaginateResponseTypeDef(_GetTablesPaginateResponseTypeDef):
    """
    Type definition for `GetTablesPaginate` `Response`

    - **TableList** *(list) --*

      A list of the requested ``Table`` objects.

      - *(dict) --*

        Represents a collection of related data organized in columns and rows.

        - **Name** *(string) --*

          The table name. For Hive compatibility, this must be entirely lowercase.

        - **DatabaseName** *(string) --*

          The name of the database where the table metadata resides. For Hive compatibility, this
          must be all lowercase.

        - **Description** *(string) --*

          A description of the table.

        - **Owner** *(string) --*

          The owner of the table.

        - **CreateTime** *(datetime) --*

          The time when the table definition was created in the Data Catalog.

        - **UpdateTime** *(datetime) --*

          The last time that the table was updated.

        - **LastAccessTime** *(datetime) --*

          The last time that the table was accessed. This is usually taken from HDFS, and might not
          be reliable.

        - **LastAnalyzedTime** *(datetime) --*

          The last time that column statistics were computed for this table.

        - **Retention** *(integer) --*

          The retention time for this table.

        - **StorageDescriptor** *(dict) --*

          A storage descriptor containing information about the physical storage of this table.

          - **Columns** *(list) --*

            A list of the ``Columns`` in the table.

            - *(dict) --*

              A column in a ``Table`` .

              - **Name** *(string) --*

                The name of the ``Column`` .

              - **Type** *(string) --*

                The data type of the ``Column`` .

              - **Comment** *(string) --*

                A free-form text comment.

              - **Parameters** *(dict) --*

                These key-value pairs define properties associated with the column.

                - *(string) --*

                  - *(string) --*

          - **Location** *(string) --*

            The physical location of the table. By default, this takes the form of the warehouse
            location, followed by the database location in the warehouse, followed by the table
            name.

          - **InputFormat** *(string) --*

            The input format: ``SequenceFileInputFormat`` (binary), or ``TextInputFormat`` , or a
            custom format.

          - **OutputFormat** *(string) --*

            The output format: ``SequenceFileOutputFormat`` (binary), or
            ``IgnoreKeyTextOutputFormat`` , or a custom format.

          - **Compressed** *(boolean) --*

             ``True`` if the data in the table is compressed, or ``False`` if not.

          - **NumberOfBuckets** *(integer) --*

            Must be specified if the table contains any dimension columns.

          - **SerdeInfo** *(dict) --*

            The serialization/deserialization (SerDe) information.

            - **Name** *(string) --*

              Name of the SerDe.

            - **SerializationLibrary** *(string) --*

              Usually the class that implements the SerDe. An example is
              ``org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`` .

            - **Parameters** *(dict) --*

              These key-value pairs define initialization parameters for the SerDe.

              - *(string) --*

                - *(string) --*

          - **BucketColumns** *(list) --*

            A list of reducer grouping columns, clustering columns, and bucketing columns in the
            table.

            - *(string) --*

          - **SortColumns** *(list) --*

            A list specifying the sort order of each bucket in the table.

            - *(dict) --*

              Specifies the sort order of a sorted column.

              - **Column** *(string) --*

                The name of the column.

              - **SortOrder** *(integer) --*

                Indicates that the column is sorted in ascending order (``== 1`` ), or in
                descending order (``==0`` ).

          - **Parameters** *(dict) --*

            The user-supplied properties in key-value form.

            - *(string) --*

              - *(string) --*

          - **SkewedInfo** *(dict) --*

            The information about values that appear frequently in a column (skewed values).

            - **SkewedColumnNames** *(list) --*

              A list of names of columns that contain skewed values.

              - *(string) --*

            - **SkewedColumnValues** *(list) --*

              A list of values that appear so frequently as to be considered skewed.

              - *(string) --*

            - **SkewedColumnValueLocationMaps** *(dict) --*

              A mapping of skewed values to the columns that contain them.

              - *(string) --*

                - *(string) --*

          - **StoredAsSubDirectories** *(boolean) --*

             ``True`` if the table data is stored in subdirectories, or ``False`` if not.

        - **PartitionKeys** *(list) --*

          A list of columns by which the table is partitioned. Only primitive types are supported
          as partition keys.

          When you create a table used by Amazon Athena, and you do not specify any
          ``partitionKeys`` , you must at least set the value of ``partitionKeys`` to an empty
          list. For example:

           ``"PartitionKeys": []``

          - *(dict) --*

            A column in a ``Table`` .

            - **Name** *(string) --*

              The name of the ``Column`` .

            - **Type** *(string) --*

              The data type of the ``Column`` .

            - **Comment** *(string) --*

              A free-form text comment.

            - **Parameters** *(dict) --*

              These key-value pairs define properties associated with the column.

              - *(string) --*

                - *(string) --*

        - **ViewOriginalText** *(string) --*

          If the table is a view, the original text of the view; otherwise ``null`` .

        - **ViewExpandedText** *(string) --*

          If the table is a view, the expanded text of the view; otherwise ``null`` .

        - **TableType** *(string) --*

          The type of this table (``EXTERNAL_TABLE`` , ``VIRTUAL_VIEW`` , etc.).

        - **Parameters** *(dict) --*

          These key-value pairs define properties associated with the table.

          - *(string) --*

            - *(string) --*

        - **CreatedBy** *(string) --*

          The person or entity who created the table.

        - **IsRegisteredWithLakeFormation** *(boolean) --*

          Indicates whether the table has been registered with AWS Lake Formation.
    """


_GetTriggersPaginatePaginationConfigTypeDef = TypedDict(
    "_GetTriggersPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class GetTriggersPaginatePaginationConfigTypeDef(
    _GetTriggersPaginatePaginationConfigTypeDef
):
    """
    Type definition for `GetTriggersPaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_GetTriggersPaginateResponseTriggersActionsNotificationPropertyTypeDef = TypedDict(
    "_GetTriggersPaginateResponseTriggersActionsNotificationPropertyTypeDef",
    {"NotifyDelayAfter": int},
    total=False,
)


class GetTriggersPaginateResponseTriggersActionsNotificationPropertyTypeDef(
    _GetTriggersPaginateResponseTriggersActionsNotificationPropertyTypeDef
):
    """
    Type definition for `GetTriggersPaginateResponseTriggersActions` `NotificationProperty`

    Specifies configuration properties of a job run notification.

    - **NotifyDelayAfter** *(integer) --*

      After a job run starts, the number of minutes to wait before sending a job run
      delay notification.
    """


_GetTriggersPaginateResponseTriggersActionsTypeDef = TypedDict(
    "_GetTriggersPaginateResponseTriggersActionsTypeDef",
    {
        "JobName": str,
        "Arguments": Dict[str, str],
        "Timeout": int,
        "SecurityConfiguration": str,
        "NotificationProperty": GetTriggersPaginateResponseTriggersActionsNotificationPropertyTypeDef,
        "CrawlerName": str,
    },
    total=False,
)


class GetTriggersPaginateResponseTriggersActionsTypeDef(
    _GetTriggersPaginateResponseTriggersActionsTypeDef
):
    """
    Type definition for `GetTriggersPaginateResponseTriggers` `Actions`

    Defines an action to be initiated by a trigger.

    - **JobName** *(string) --*

      The name of a job to be executed.

    - **Arguments** *(dict) --*

      The job arguments used when this trigger fires. For this job run, they replace the
      default arguments set in the job definition itself.

      You can specify arguments here that your own job-execution script consumes, as well
      as arguments that AWS Glue itself consumes.

      For information about how to specify and consume your own Job arguments, see the
      `Calling AWS Glue APIs in Python
      <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
      topic in the developer guide.

      For information about the key-value pairs that AWS Glue consumes to set up your job,
      see the `Special Parameters Used by AWS Glue
      <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
      topic in the developer guide.

      - *(string) --*

        - *(string) --*

    - **Timeout** *(integer) --*

      The ``JobRun`` timeout in minutes. This is the maximum time that a job run can
      consume resources before it is terminated and enters ``TIMEOUT`` status. The default
      is 2,880 minutes (48 hours). This overrides the timeout value set in the parent job.

    - **SecurityConfiguration** *(string) --*

      The name of the ``SecurityConfiguration`` structure to be used with this action.

    - **NotificationProperty** *(dict) --*

      Specifies configuration properties of a job run notification.

      - **NotifyDelayAfter** *(integer) --*

        After a job run starts, the number of minutes to wait before sending a job run
        delay notification.

    - **CrawlerName** *(string) --*

      The name of the crawler to be used with this action.
    """


_GetTriggersPaginateResponseTriggersPredicateConditionsTypeDef = TypedDict(
    "_GetTriggersPaginateResponseTriggersPredicateConditionsTypeDef",
    {
        "LogicalOperator": str,
        "JobName": str,
        "State": str,
        "CrawlerName": str,
        "CrawlState": str,
    },
    total=False,
)


class GetTriggersPaginateResponseTriggersPredicateConditionsTypeDef(
    _GetTriggersPaginateResponseTriggersPredicateConditionsTypeDef
):
    """
    Type definition for `GetTriggersPaginateResponseTriggersPredicate` `Conditions`

    Defines a condition under which a trigger fires.

    - **LogicalOperator** *(string) --*

      A logical operator.

    - **JobName** *(string) --*

      The name of the job whose ``JobRuns`` this condition applies to, and on which this
      trigger waits.

    - **State** *(string) --*

      The condition state. Currently, the values supported are ``SUCCEEDED`` ,
      ``STOPPED`` , ``TIMEOUT`` , and ``FAILED`` .

    - **CrawlerName** *(string) --*

      The name of the crawler to which this condition applies.

    - **CrawlState** *(string) --*

      The state of the crawler to which this condition applies.
    """


_GetTriggersPaginateResponseTriggersPredicateTypeDef = TypedDict(
    "_GetTriggersPaginateResponseTriggersPredicateTypeDef",
    {
        "Logical": str,
        "Conditions": List[
            GetTriggersPaginateResponseTriggersPredicateConditionsTypeDef
        ],
    },
    total=False,
)


class GetTriggersPaginateResponseTriggersPredicateTypeDef(
    _GetTriggersPaginateResponseTriggersPredicateTypeDef
):
    """
    Type definition for `GetTriggersPaginateResponseTriggers` `Predicate`

    The predicate of this trigger, which defines when it will fire.

    - **Logical** *(string) --*

      An optional field if only one condition is listed. If multiple conditions are listed,
      then this field is required.

    - **Conditions** *(list) --*

      A list of the conditions that determine when the trigger will fire.

      - *(dict) --*

        Defines a condition under which a trigger fires.

        - **LogicalOperator** *(string) --*

          A logical operator.

        - **JobName** *(string) --*

          The name of the job whose ``JobRuns`` this condition applies to, and on which this
          trigger waits.

        - **State** *(string) --*

          The condition state. Currently, the values supported are ``SUCCEEDED`` ,
          ``STOPPED`` , ``TIMEOUT`` , and ``FAILED`` .

        - **CrawlerName** *(string) --*

          The name of the crawler to which this condition applies.

        - **CrawlState** *(string) --*

          The state of the crawler to which this condition applies.
    """


_GetTriggersPaginateResponseTriggersTypeDef = TypedDict(
    "_GetTriggersPaginateResponseTriggersTypeDef",
    {
        "Name": str,
        "WorkflowName": str,
        "Id": str,
        "Type": str,
        "State": str,
        "Description": str,
        "Schedule": str,
        "Actions": List[GetTriggersPaginateResponseTriggersActionsTypeDef],
        "Predicate": GetTriggersPaginateResponseTriggersPredicateTypeDef,
    },
    total=False,
)


class GetTriggersPaginateResponseTriggersTypeDef(
    _GetTriggersPaginateResponseTriggersTypeDef
):
    """
    Type definition for `GetTriggersPaginateResponse` `Triggers`

    Information about a specific trigger.

    - **Name** *(string) --*

      The name of the trigger.

    - **WorkflowName** *(string) --*

      The name of the workflow associated with the trigger.

    - **Id** *(string) --*

      Reserved for future use.

    - **Type** *(string) --*

      The type of trigger that this is.

    - **State** *(string) --*

      The current state of the trigger.

    - **Description** *(string) --*

      A description of this trigger.

    - **Schedule** *(string) --*

      A ``cron`` expression used to specify the schedule (see `Time-Based Schedules for Jobs
      and Crawlers
      <https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html>`__ .
      For example, to run something every day at 12:15 UTC, you would specify: ``cron(15 12 * *
      ? *)`` .

    - **Actions** *(list) --*

      The actions initiated by this trigger.

      - *(dict) --*

        Defines an action to be initiated by a trigger.

        - **JobName** *(string) --*

          The name of a job to be executed.

        - **Arguments** *(dict) --*

          The job arguments used when this trigger fires. For this job run, they replace the
          default arguments set in the job definition itself.

          You can specify arguments here that your own job-execution script consumes, as well
          as arguments that AWS Glue itself consumes.

          For information about how to specify and consume your own Job arguments, see the
          `Calling AWS Glue APIs in Python
          <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
          topic in the developer guide.

          For information about the key-value pairs that AWS Glue consumes to set up your job,
          see the `Special Parameters Used by AWS Glue
          <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
          topic in the developer guide.

          - *(string) --*

            - *(string) --*

        - **Timeout** *(integer) --*

          The ``JobRun`` timeout in minutes. This is the maximum time that a job run can
          consume resources before it is terminated and enters ``TIMEOUT`` status. The default
          is 2,880 minutes (48 hours). This overrides the timeout value set in the parent job.

        - **SecurityConfiguration** *(string) --*

          The name of the ``SecurityConfiguration`` structure to be used with this action.

        - **NotificationProperty** *(dict) --*

          Specifies configuration properties of a job run notification.

          - **NotifyDelayAfter** *(integer) --*

            After a job run starts, the number of minutes to wait before sending a job run
            delay notification.

        - **CrawlerName** *(string) --*

          The name of the crawler to be used with this action.

    - **Predicate** *(dict) --*

      The predicate of this trigger, which defines when it will fire.

      - **Logical** *(string) --*

        An optional field if only one condition is listed. If multiple conditions are listed,
        then this field is required.

      - **Conditions** *(list) --*

        A list of the conditions that determine when the trigger will fire.

        - *(dict) --*

          Defines a condition under which a trigger fires.

          - **LogicalOperator** *(string) --*

            A logical operator.

          - **JobName** *(string) --*

            The name of the job whose ``JobRuns`` this condition applies to, and on which this
            trigger waits.

          - **State** *(string) --*

            The condition state. Currently, the values supported are ``SUCCEEDED`` ,
            ``STOPPED`` , ``TIMEOUT`` , and ``FAILED`` .

          - **CrawlerName** *(string) --*

            The name of the crawler to which this condition applies.

          - **CrawlState** *(string) --*

            The state of the crawler to which this condition applies.
    """


_GetTriggersPaginateResponseTypeDef = TypedDict(
    "_GetTriggersPaginateResponseTypeDef",
    {"Triggers": List[GetTriggersPaginateResponseTriggersTypeDef]},
    total=False,
)


class GetTriggersPaginateResponseTypeDef(_GetTriggersPaginateResponseTypeDef):
    """
    Type definition for `GetTriggersPaginate` `Response`

    - **Triggers** *(list) --*

      A list of triggers for the specified job.

      - *(dict) --*

        Information about a specific trigger.

        - **Name** *(string) --*

          The name of the trigger.

        - **WorkflowName** *(string) --*

          The name of the workflow associated with the trigger.

        - **Id** *(string) --*

          Reserved for future use.

        - **Type** *(string) --*

          The type of trigger that this is.

        - **State** *(string) --*

          The current state of the trigger.

        - **Description** *(string) --*

          A description of this trigger.

        - **Schedule** *(string) --*

          A ``cron`` expression used to specify the schedule (see `Time-Based Schedules for Jobs
          and Crawlers
          <https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html>`__ .
          For example, to run something every day at 12:15 UTC, you would specify: ``cron(15 12 * *
          ? *)`` .

        - **Actions** *(list) --*

          The actions initiated by this trigger.

          - *(dict) --*

            Defines an action to be initiated by a trigger.

            - **JobName** *(string) --*

              The name of a job to be executed.

            - **Arguments** *(dict) --*

              The job arguments used when this trigger fires. For this job run, they replace the
              default arguments set in the job definition itself.

              You can specify arguments here that your own job-execution script consumes, as well
              as arguments that AWS Glue itself consumes.

              For information about how to specify and consume your own Job arguments, see the
              `Calling AWS Glue APIs in Python
              <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html>`__
              topic in the developer guide.

              For information about the key-value pairs that AWS Glue consumes to set up your job,
              see the `Special Parameters Used by AWS Glue
              <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html>`__
              topic in the developer guide.

              - *(string) --*

                - *(string) --*

            - **Timeout** *(integer) --*

              The ``JobRun`` timeout in minutes. This is the maximum time that a job run can
              consume resources before it is terminated and enters ``TIMEOUT`` status. The default
              is 2,880 minutes (48 hours). This overrides the timeout value set in the parent job.

            - **SecurityConfiguration** *(string) --*

              The name of the ``SecurityConfiguration`` structure to be used with this action.

            - **NotificationProperty** *(dict) --*

              Specifies configuration properties of a job run notification.

              - **NotifyDelayAfter** *(integer) --*

                After a job run starts, the number of minutes to wait before sending a job run
                delay notification.

            - **CrawlerName** *(string) --*

              The name of the crawler to be used with this action.

        - **Predicate** *(dict) --*

          The predicate of this trigger, which defines when it will fire.

          - **Logical** *(string) --*

            An optional field if only one condition is listed. If multiple conditions are listed,
            then this field is required.

          - **Conditions** *(list) --*

            A list of the conditions that determine when the trigger will fire.

            - *(dict) --*

              Defines a condition under which a trigger fires.

              - **LogicalOperator** *(string) --*

                A logical operator.

              - **JobName** *(string) --*

                The name of the job whose ``JobRuns`` this condition applies to, and on which this
                trigger waits.

              - **State** *(string) --*

                The condition state. Currently, the values supported are ``SUCCEEDED`` ,
                ``STOPPED`` , ``TIMEOUT`` , and ``FAILED`` .

              - **CrawlerName** *(string) --*

                The name of the crawler to which this condition applies.

              - **CrawlState** *(string) --*

                The state of the crawler to which this condition applies.
    """


_GetUserDefinedFunctionsPaginatePaginationConfigTypeDef = TypedDict(
    "_GetUserDefinedFunctionsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class GetUserDefinedFunctionsPaginatePaginationConfigTypeDef(
    _GetUserDefinedFunctionsPaginatePaginationConfigTypeDef
):
    """
    Type definition for `GetUserDefinedFunctionsPaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_GetUserDefinedFunctionsPaginateResponseUserDefinedFunctionsResourceUrisTypeDef = TypedDict(
    "_GetUserDefinedFunctionsPaginateResponseUserDefinedFunctionsResourceUrisTypeDef",
    {"ResourceType": str, "Uri": str},
    total=False,
)


class GetUserDefinedFunctionsPaginateResponseUserDefinedFunctionsResourceUrisTypeDef(
    _GetUserDefinedFunctionsPaginateResponseUserDefinedFunctionsResourceUrisTypeDef
):
    """
    Type definition for `GetUserDefinedFunctionsPaginateResponseUserDefinedFunctions` `ResourceUris`

    The URIs for function resources.

    - **ResourceType** *(string) --*

      The type of the resource.

    - **Uri** *(string) --*

      The URI for accessing the resource.
    """


_GetUserDefinedFunctionsPaginateResponseUserDefinedFunctionsTypeDef = TypedDict(
    "_GetUserDefinedFunctionsPaginateResponseUserDefinedFunctionsTypeDef",
    {
        "FunctionName": str,
        "ClassName": str,
        "OwnerName": str,
        "OwnerType": str,
        "CreateTime": datetime,
        "ResourceUris": List[
            GetUserDefinedFunctionsPaginateResponseUserDefinedFunctionsResourceUrisTypeDef
        ],
    },
    total=False,
)


class GetUserDefinedFunctionsPaginateResponseUserDefinedFunctionsTypeDef(
    _GetUserDefinedFunctionsPaginateResponseUserDefinedFunctionsTypeDef
):
    """
    Type definition for `GetUserDefinedFunctionsPaginateResponse` `UserDefinedFunctions`

    Represents the equivalent of a Hive user-defined function (``UDF`` ) definition.

    - **FunctionName** *(string) --*

      The name of the function.

    - **ClassName** *(string) --*

      The Java class that contains the function code.

    - **OwnerName** *(string) --*

      The owner of the function.

    - **OwnerType** *(string) --*

      The owner type.

    - **CreateTime** *(datetime) --*

      The time at which the function was created.

    - **ResourceUris** *(list) --*

      The resource URIs for the function.

      - *(dict) --*

        The URIs for function resources.

        - **ResourceType** *(string) --*

          The type of the resource.

        - **Uri** *(string) --*

          The URI for accessing the resource.
    """


_GetUserDefinedFunctionsPaginateResponseTypeDef = TypedDict(
    "_GetUserDefinedFunctionsPaginateResponseTypeDef",
    {
        "UserDefinedFunctions": List[
            GetUserDefinedFunctionsPaginateResponseUserDefinedFunctionsTypeDef
        ]
    },
    total=False,
)


class GetUserDefinedFunctionsPaginateResponseTypeDef(
    _GetUserDefinedFunctionsPaginateResponseTypeDef
):
    """
    Type definition for `GetUserDefinedFunctionsPaginate` `Response`

    - **UserDefinedFunctions** *(list) --*

      A list of requested function definitions.

      - *(dict) --*

        Represents the equivalent of a Hive user-defined function (``UDF`` ) definition.

        - **FunctionName** *(string) --*

          The name of the function.

        - **ClassName** *(string) --*

          The Java class that contains the function code.

        - **OwnerName** *(string) --*

          The owner of the function.

        - **OwnerType** *(string) --*

          The owner type.

        - **CreateTime** *(datetime) --*

          The time at which the function was created.

        - **ResourceUris** *(list) --*

          The resource URIs for the function.

          - *(dict) --*

            The URIs for function resources.

            - **ResourceType** *(string) --*

              The type of the resource.

            - **Uri** *(string) --*

              The URI for accessing the resource.
    """
