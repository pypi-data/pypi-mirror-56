# coding: utf-8

"""
    A title for your API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ProductDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'merchant_id': 'int',
        'api_key': 'str',
        'url': 'str',
        'version': 'str',
        'card_no': 'str',
        'total': 'int',
        'ip_address': 'str',
        'email': 'str',
        'session_id': 'str',
        'mack': 'str',
        'product_type': 'str',
        'product_item': 'str',
        'product_description': 'str',
        'product_quantity': 'int',
        'product_price': 'int'
    }

    attribute_map = {
        'merchant_id': 'merchantId',
        'api_key': 'apiKey',
        'url': 'url',
        'version': 'version',
        'card_no': 'cardNo',
        'total': 'total',
        'ip_address': 'ipAddress',
        'email': 'email',
        'session_id': 'sessionId',
        'mack': 'mack',
        'product_type': 'productType',
        'product_item': 'productItem',
        'product_description': 'productDescription',
        'product_quantity': 'productQuantity',
        'product_price': 'productPrice'
    }

    def __init__(self, merchant_id=None, api_key=None, url=None, version=None, card_no=None, total=None, ip_address=None, email=None, session_id=None, mack=None, product_type=None, product_item=None, product_description=None, product_quantity=None, product_price=None):  # noqa: E501
        """ProductDetails - a model defined in Swagger"""  # noqa: E501

        self._merchant_id = None
        self._api_key = None
        self._url = None
        self._version = None
        self._card_no = None
        self._total = None
        self._ip_address = None
        self._email = None
        self._session_id = None
        self._mack = None
        self._product_type = None
        self._product_item = None
        self._product_description = None
        self._product_quantity = None
        self._product_price = None
        self.discriminator = None

        if merchant_id is not None:
            self.merchant_id = merchant_id
        if api_key is not None:
            self.api_key = api_key
        if url is not None:
            self.url = url
        if version is not None:
            self.version = version
        if card_no is not None:
            self.card_no = card_no
        if total is not None:
            self.total = total
        if ip_address is not None:
            self.ip_address = ip_address
        if email is not None:
            self.email = email
        if session_id is not None:
            self.session_id = session_id
        if mack is not None:
            self.mack = mack
        if product_type is not None:
            self.product_type = product_type
        if product_item is not None:
            self.product_item = product_item
        if product_description is not None:
            self.product_description = product_description
        if product_quantity is not None:
            self.product_quantity = product_quantity
        if product_price is not None:
            self.product_price = product_price

    @property
    def merchant_id(self):
        """Gets the merchant_id of this ProductDetails.  # noqa: E501


        :return: The merchant_id of this ProductDetails.  # noqa: E501
        :rtype: int
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this ProductDetails.


        :param merchant_id: The merchant_id of this ProductDetails.  # noqa: E501
        :type: int
        """

        self._merchant_id = merchant_id

    @property
    def api_key(self):
        """Gets the api_key of this ProductDetails.  # noqa: E501


        :return: The api_key of this ProductDetails.  # noqa: E501
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this ProductDetails.


        :param api_key: The api_key of this ProductDetails.  # noqa: E501
        :type: str
        """

        self._api_key = api_key

    @property
    def url(self):
        """Gets the url of this ProductDetails.  # noqa: E501


        :return: The url of this ProductDetails.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ProductDetails.


        :param url: The url of this ProductDetails.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def version(self):
        """Gets the version of this ProductDetails.  # noqa: E501


        :return: The version of this ProductDetails.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ProductDetails.


        :param version: The version of this ProductDetails.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def card_no(self):
        """Gets the card_no of this ProductDetails.  # noqa: E501


        :return: The card_no of this ProductDetails.  # noqa: E501
        :rtype: str
        """
        return self._card_no

    @card_no.setter
    def card_no(self, card_no):
        """Sets the card_no of this ProductDetails.


        :param card_no: The card_no of this ProductDetails.  # noqa: E501
        :type: str
        """

        self._card_no = card_no

    @property
    def total(self):
        """Gets the total of this ProductDetails.  # noqa: E501


        :return: The total of this ProductDetails.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this ProductDetails.


        :param total: The total of this ProductDetails.  # noqa: E501
        :type: int
        """

        self._total = total

    @property
    def ip_address(self):
        """Gets the ip_address of this ProductDetails.  # noqa: E501


        :return: The ip_address of this ProductDetails.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this ProductDetails.


        :param ip_address: The ip_address of this ProductDetails.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def email(self):
        """Gets the email of this ProductDetails.  # noqa: E501


        :return: The email of this ProductDetails.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ProductDetails.


        :param email: The email of this ProductDetails.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def session_id(self):
        """Gets the session_id of this ProductDetails.  # noqa: E501


        :return: The session_id of this ProductDetails.  # noqa: E501
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this ProductDetails.


        :param session_id: The session_id of this ProductDetails.  # noqa: E501
        :type: str
        """

        self._session_id = session_id

    @property
    def mack(self):
        """Gets the mack of this ProductDetails.  # noqa: E501


        :return: The mack of this ProductDetails.  # noqa: E501
        :rtype: str
        """
        return self._mack

    @mack.setter
    def mack(self, mack):
        """Sets the mack of this ProductDetails.


        :param mack: The mack of this ProductDetails.  # noqa: E501
        :type: str
        """

        self._mack = mack

    @property
    def product_type(self):
        """Gets the product_type of this ProductDetails.  # noqa: E501


        :return: The product_type of this ProductDetails.  # noqa: E501
        :rtype: str
        """
        return self._product_type

    @product_type.setter
    def product_type(self, product_type):
        """Sets the product_type of this ProductDetails.


        :param product_type: The product_type of this ProductDetails.  # noqa: E501
        :type: str
        """

        self._product_type = product_type

    @property
    def product_item(self):
        """Gets the product_item of this ProductDetails.  # noqa: E501


        :return: The product_item of this ProductDetails.  # noqa: E501
        :rtype: str
        """
        return self._product_item

    @product_item.setter
    def product_item(self, product_item):
        """Sets the product_item of this ProductDetails.


        :param product_item: The product_item of this ProductDetails.  # noqa: E501
        :type: str
        """

        self._product_item = product_item

    @property
    def product_description(self):
        """Gets the product_description of this ProductDetails.  # noqa: E501


        :return: The product_description of this ProductDetails.  # noqa: E501
        :rtype: str
        """
        return self._product_description

    @product_description.setter
    def product_description(self, product_description):
        """Sets the product_description of this ProductDetails.


        :param product_description: The product_description of this ProductDetails.  # noqa: E501
        :type: str
        """

        self._product_description = product_description

    @property
    def product_quantity(self):
        """Gets the product_quantity of this ProductDetails.  # noqa: E501


        :return: The product_quantity of this ProductDetails.  # noqa: E501
        :rtype: int
        """
        return self._product_quantity

    @product_quantity.setter
    def product_quantity(self, product_quantity):
        """Sets the product_quantity of this ProductDetails.


        :param product_quantity: The product_quantity of this ProductDetails.  # noqa: E501
        :type: int
        """

        self._product_quantity = product_quantity

    @property
    def product_price(self):
        """Gets the product_price of this ProductDetails.  # noqa: E501


        :return: The product_price of this ProductDetails.  # noqa: E501
        :rtype: int
        """
        return self._product_price

    @product_price.setter
    def product_price(self, product_price):
        """Sets the product_price of this ProductDetails.


        :param product_price: The product_price of this ProductDetails.  # noqa: E501
        :type: int
        """

        self._product_price = product_price

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
