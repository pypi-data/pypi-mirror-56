{"version":3,"sources":["webpack:///./rijkshuisstijl/js/components/tabs/tabs.js"],"names":["Tabs","node","this","listItems","BEM","getChildBEMNodes","BLOCK_TABS","ELEMENT_LIST_ITEM","links","ELEMENT_LINK","track","getChildBEMNode","ELEMENT_TRACK","tabs","ELEMENT_TAB","bindEvents","activateHashLinkTab","activateCurrentTab","forEach","link","bindLink","window","addEventListener","bind","onClick","id","getActiveTabId","activateTab","location","hash","replace","document","getElementById","classList","contains","getBEMClassName","tabId","dataset","e","preventDefault","target","attributes","href","value","history","pushState","title","find","listItem","getListItemByLink","tabIndex","findIndex","tab","removeModifier","MODIFIER_ACTIVE","addModifier","listItemClassName","parentElement","TABS"],"mappings":"8nBAeMA,E,WAKF,WAAYC,I,4FAAO,CAAD,QAEdC,KAAKD,KAAOA,EAGZC,KAAKC,UAAYC,IAAIC,iBAAiBH,KAAKD,KAAMK,IAAYC,KAG7DL,KAAKM,MAAQJ,IAAIC,iBAAiBH,KAAKD,KAAMK,IAAYG,KAGzDP,KAAKQ,MAAQN,IAAIO,gBAAgBT,KAAKD,KAAMK,IAAYM,KAGxDV,KAAKW,KAAOT,IAAIC,iBAAiBH,KAAKD,KAAMK,IAAYQ,KAExDZ,KAAKa,aACAb,KAAKc,uBACNd,KAAKe,qB,4DAQC,IAAD,OACT,EAAIf,KAAKM,OAAOU,QAAQ,SAAAC,GAAI,OAAI,EAAKC,SAASD,KAC9CE,OAAOC,iBAAiB,WAAYpB,KAAKc,oBAAoBO,KAAKrB,OAClEmB,OAAOC,iBAAiB,SAAUpB,KAAKe,mBAAmBM,KAAKrB,S,+BAO1DiB,GACLA,EAAKG,iBAAiB,QAASpB,KAAKsB,QAAQD,KAAKrB,S,2CAOjD,IAAIuB,EAAKvB,KAAKwB,iBACVD,GACAvB,KAAKyB,YAAYF,K,4CAQrB,IAAMA,EAAKJ,OAAOO,SAASC,KAAKC,QAAQ,IAAK,IAEvC7B,EAAO8B,SAASC,eAAeP,GACrC,GAAIxB,GAAQA,EAAKgC,UAAUC,SAAS9B,IAAI+B,gBAAgB7B,IAAYQ,MAEhE,OADAZ,KAAKyB,YAAYF,IACV,I,uCASX,IAAIW,EAAQlC,KAAKD,KAAKoC,QAAQD,MAE9B,GAAIA,EACA,OAAOA,EAEP,IACI,OAAOlC,KAAKW,KAAK,GAAGY,GACtB,MAAOa,O,8BAUTA,GACJA,EAAEC,iBACF,IAAIpB,EAAOmB,EAAEE,OACTf,EAAKN,EAAKsB,WAAWC,KAAKC,MAAMb,QAAQ,IAAK,IACjDc,QAAQC,UAAU,GAAId,SAASe,MAAO3B,GACtCjB,KAAKyB,YAAYF,K,kCAQTA,GACR,IAAIN,EAAO,EAAIjB,KAAKM,OAAOuC,KAAK,SAAA5B,GAAI,OAAIA,EAAKsB,WAAWC,KAAKC,QAAU,IAAMlB,IACzEuB,EAAW9C,KAAK+C,kBAAkB9B,GAClC+B,EAAW,EAAIhD,KAAKW,MAAMsC,UAAU,SAAAC,GAAG,OAAIA,EAAI3B,KAAOA,IACtD2B,EAAMlD,KAAKW,KAAKqC,GAEpB,YAAIhD,KAAKC,WAAT,EAAuBD,KAAKW,OAAMK,QAAQ,SAAAjB,GAAI,OAAIG,IAAIiD,eAAepD,EAAMqD,OAC3E,CAACN,EAAUI,GAAKlC,QAAQ,SAAAjB,GAAI,OAAIG,IAAImD,YAAYtD,EAAMqD,OACtDpD,KAAKD,KAAKoC,QAAQD,MAAQX,I,wCAOZN,GAId,IAHA,IAAIqC,EAAoBpD,IAAI+B,gBAAgB7B,IAAYC,MAGhDY,EAAKc,UAAUC,SAASsB,IAC5BrC,EAAOA,EAAKsC,cAOhB,OAAOtC,O,gCAMf,EAAIuC,KAAMxC,QAAQ,SAAAL,GAAI,OAAI,IAAIb,EAAKa","file":"tabs.bundle.js","sourcesContent":["import BEM from 'bem.js';\nimport {\n    BLOCK_TABS,\n    ELEMENT_LINK,\n    ELEMENT_LIST_ITEM,\n    ELEMENT_TAB,\n    ELEMENT_TRACK,\n    MODIFIER_ACTIVE,\n    TABS\n} from './constants';\n\n/**\n * Contains logic for tabs.\n * @class\n */\nclass Tabs {\n    /**\n     * Constructor method.\n     * @param {HTMLElement} node\n     */\n    constructor(node) {\n        /** @type {HTMLElement} */\n        this.node = node;\n\n        /** @type {NodeList} */\n        this.listItems = BEM.getChildBEMNodes(this.node, BLOCK_TABS, ELEMENT_LIST_ITEM);\n\n        /** @type {NodeList} */\n        this.links = BEM.getChildBEMNodes(this.node, BLOCK_TABS, ELEMENT_LINK);\n\n        /** @type {NodeList} */\n        this.track = BEM.getChildBEMNode(this.node, BLOCK_TABS, ELEMENT_TRACK);\n\n        /** @type {NodeList} */\n        this.tabs = BEM.getChildBEMNodes(this.node, BLOCK_TABS, ELEMENT_TAB);\n\n        this.bindEvents();\n        if (!this.activateHashLinkTab()) {\n            this.activateCurrentTab();\n        }\n\n    }\n\n    /**\n     * Binds events to callbacks.\n     */\n    bindEvents() {\n        [...this.links].forEach(link => this.bindLink(link));\n        window.addEventListener('popstate', this.activateHashLinkTab.bind(this));\n        window.addEventListener('resize', this.activateCurrentTab.bind(this));\n    }\n\n    /**\n     * Binds link click to callback.\n     * @param {HTMLAnchorElement} link\n     */\n    bindLink(link) {\n        link.addEventListener('click', this.onClick.bind(this));\n    }\n\n    /**\n     * (Re)activates the active tab, or the first tab.\n     */\n    activateCurrentTab() {\n        let id = this.getActiveTabId();\n        if (id) {\n            this.activateTab(id);\n        }\n    }\n\n    /**\n     * (Re)activates the active tab, or the first tab.\n     */\n    activateHashLinkTab() {\n        const id = window.location.hash.replace('#', '');\n\n        const node = document.getElementById(id);\n        if (node && node.classList.contains(BEM.getBEMClassName(BLOCK_TABS, ELEMENT_TAB))) {\n            this.activateTab(id);\n            return true;\n        }\n    }\n\n    /**\n     * Returns the active tab id (this.node.dataset.tabId) or the first tab's id.\n     * @returns {(string|void)}\n     */\n    getActiveTabId() {\n        let tabId = this.node.dataset.tabId;\n\n        if (tabId) {\n            return tabId;\n        } else {\n            try {\n                return this.tabs[0].id;\n            } catch (e) {\n            }\n        }\n\n    }\n\n    /**\n     * Handles link click event.\n     * @param {MouseEvent} e\n     */\n    onClick(e) {\n        e.preventDefault();\n        let link = e.target;\n        let id = link.attributes.href.value.replace('#', '');\n        history.pushState({}, document.title, link);\n        this.activateTab(id);\n    }\n\n    /**\n     * Activates tab with id.\n     * @param {string} id The id of the tab.\n     * @return {HTMLElement}\n     */\n    activateTab(id) {\n        let link = [...this.links].find(link => link.attributes.href.value === '#' + id);\n        let listItem = this.getListItemByLink(link);\n        let tabIndex = [...this.tabs].findIndex(tab => tab.id === id);\n        let tab = this.tabs[tabIndex];\n\n        [...this.listItems, ...this.tabs].forEach(node => BEM.removeModifier(node, MODIFIER_ACTIVE));\n        [listItem, tab].forEach(node => BEM.addModifier(node, MODIFIER_ACTIVE));\n        this.node.dataset.tabId = id;\n    }\n\n    /**\n     * Finds the list item containing link up the DOM tree.\n     * @param {HTMLAnchorElement} link\n     */\n    getListItemByLink(link) {\n        let listItemClassName = BEM.getBEMClassName(BLOCK_TABS, ELEMENT_LIST_ITEM);\n        let i = 0;\n\n        while (!link.classList.contains(listItemClassName)) {\n            link = link.parentElement;\n\n            if (i > 100) {\n                console.error('Failed to find list item');\n                break;\n            }\n        }\n        return link;\n    }\n}\n\n\n// Start!\n[...TABS].forEach(tabs => new Tabs(tabs));\n\n"],"sourceRoot":""}