{"version":3,"sources":["webpack:///./rijkshuisstijl/js/components/datagrid/datagrid-filter.js"],"names":["DataGridFilter","node","this","form","getForm","input","getInput","bindEvents","addEventListener","onSubmit","bind","formId","getAttribute","document","getElementById","BEM","getChildBEMNode","BLOCK_INPUT","select","BLOCK_SELECT","id","querySelectorAll","forEach","newNode","createElement","name","type","value","appendChild","submit","DATAGRID_FILTERS"],"mappings":"qoBAOMA,E,WAKF,WAAYC,I,4FAAO,CAAD,QAEdC,KAAKD,KAAOA,EAGZC,KAAKC,KAAOD,KAAKE,UAGjBF,KAAKG,MAAQH,KAAKI,WAElBJ,KAAKK,a,4DAODL,KAAKG,OACLH,KAAKG,MAAMG,iBAAiB,SAAUN,KAAKO,SAASC,KAAKR,S,gCAS7D,IAAMG,EAAQH,KAAKI,WACnB,GAAID,EAAO,CACP,IAAKA,EAAMF,KAAM,CACb,IAAMQ,EAASN,EAAMO,aAAa,QAClC,OAAOC,SAASC,eAAeH,GAEnC,OAAON,EAAMF,Q,iCASjB,IAAME,EAAQU,IAAIC,gBAAgBd,KAAKD,KAAMgB,KACvCC,EAASH,IAAIC,gBAAgBd,KAAKD,KAAMkB,KAC9C,OAAOd,GAASa,I,iCAOR,IAAD,OACDP,EAAST,KAAKC,KAAKiB,GAGzB,EAFeP,SAASQ,iBAAT,iBAAoCV,EAApC,QAEHW,QAAQ,SAAArB,GAChB,IAAMsB,EAAUV,SAASW,cAAc,SAEnCvB,EAAKE,OAIToB,EAAQE,KAAOxB,EAAKwB,KACpBF,EAAQG,KAAO,SACfH,EAAQI,MAAQ1B,EAAK0B,MAErB,EAAKxB,KAAKyB,YAAYL,MAG1BrB,KAAKC,KAAK0B,c,gCAMlB,EAAIC,KAAkBR,QAAQ,SAAArB,GAAI,OAAI,IAAID,EAAeC","file":"datagrid-filter.bundle.js","sourcesContent":["import BEM from 'bem.js';\nimport {DATAGRID_FILTERS} from './constants';\nimport {BLOCK_INPUT, BLOCK_SELECT} from '../form/constants';\n\n/**\n * Polyfills form association from datagrid filter.\n */\nclass DataGridFilter {\n    /**\n     * Constructor method.\n     * @param {HTMLElement} node\n     */\n    constructor(node) {\n        /** @type {HTMLElement} */\n        this.node = node;\n\n        /** @type {(HTMLFormElement|null)} */\n        this.form = this.getForm();\n\n        /** @type {(HTMLInputElement|HTMLSelectElement|null)} */\n        this.input = this.getInput();\n\n        this.bindEvents();\n    }\n\n    /**\n     * Binds events to callbacks.\n     */\n    bindEvents() {\n        if (this.input) {\n            this.input.addEventListener('change', this.onSubmit.bind(this));\n        }\n    }\n\n    /**\n     * Finds the form associated with the filter.\n     * @return {(HTMLFormElement|null)}\n     */\n    getForm() {\n        const input = this.getInput();\n        if (input) {\n            if (!input.form) {\n                const formId = input.getAttribute('form');\n                return document.getElementById(formId);\n            }\n            return input.form\n        }\n    }\n\n    /**\n     * Finds the first input or select as child of this.node.\n     * @return {(HTMLInputElement|HTMLSelectElement|null)}\n     */\n    getInput() {\n        const input = BEM.getChildBEMNode(this.node, BLOCK_INPUT);\n        const select = BEM.getChildBEMNode(this.node, BLOCK_SELECT);\n        return input || select;\n    }\n\n    /**\n     * Appends clone of inputs pointing to this.form before submitting it when browser does not support input form\n     * attribute.\n     */\n    onSubmit() {\n        const formId = this.form.id;\n        const inputs = document.querySelectorAll(`[form=\"${formId}\"]`);\n\n        [...inputs].forEach(node => {\n            const newNode = document.createElement('input');\n\n            if (node.form) {  // Browser support input form attribute.\n                return\n            }\n\n            newNode.name = node.name;\n            newNode.type = 'hidden';\n            newNode.value = node.value;\n\n            this.form.appendChild(newNode)\n        });\n\n        this.form.submit();\n    }\n}\n\n\n// Start!\n[...DATAGRID_FILTERS].forEach(node => new DataGridFilter(node));\n\n\n\n"],"sourceRoot":""}