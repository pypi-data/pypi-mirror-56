{"version":3,"sources":["webpack:///./rijkshuisstijl/js/components/button/constants.js","webpack:///./rijkshuisstijl/js/components/search/search.js"],"names":["BLOCK_BUTTON","MODIFIER_PRIMARY","MODIFIER_SECONDARY","Search","node","this","input","BEM","getChildBEMNode","BLOCK_SEARCH","ELEMENT_INPUT","buttonPrimary","buttonSecondary","bindEvents","addEventListener","onClickButtonPrimary","bind","onClickButtonSecondary","onBlur","onPressEnter","e","keyCode","preventDefault","value","form","submit","hasModifier","MODIFIER_OPEN","focus","blur","relatedTarget","close","removeModifier","SEARCHES","forEach","search"],"mappings":"qHACaA,EAAe,SAGfC,EAAmB,UAGnBC,EAAqB,Y,oNCG3B,I,EAAMC,EAAb,WAKI,WAAYC,I,4FAAO,CAAD,QAEdC,KAAKD,KAAOA,EAGZC,KAAKC,MAAQC,IAAIC,gBAAgBH,KAAKD,KAAMK,IAAcC,KAG1DL,KAAKM,cAAgBJ,IAAIC,gBAAgBH,KAAKD,KAAMJ,GAAc,EAAOC,GAGzEI,KAAKO,gBAAkBL,IAAIC,gBAAgBH,KAAKD,KAAMJ,GAAc,EAAOE,GAE3EG,KAAKQ,a,UAlBb,O,EAAA,G,EAAA,oCAyBQR,KAAKM,cAAcG,iBAAiB,QAAST,KAAKU,qBAAqBC,KAAKX,OAC5EA,KAAKO,gBAAgBE,iBAAiB,QAAST,KAAKY,uBAAuBD,KAAKX,OAChFA,KAAKC,MAAMQ,iBAAiB,OAAQT,KAAKa,OAAOF,KAAKX,OACrDA,KAAKC,MAAMQ,iBAAiB,WAAYT,KAAKc,aAAaH,KAAKX,SA5BvE,mCAmCiBe,GAEO,KADAA,EAAEC,UAEdD,EAAEE,iBACEjB,KAAKC,MAAMiB,OACXlB,KAAKC,MAAMkB,KAAKC,YAxChC,6CAoDYlB,IAAImB,YAAYrB,KAAKD,KAAMuB,MACvBtB,KAAKC,MAAMiB,OACXlB,KAAKC,MAAMkB,KAAKC,SAEpBpB,KAAKC,MAAMsB,SAEXvB,KAAKC,MAAMuB,SA1DvB,+CAmEQxB,KAAKC,MAAMsB,UAnEnB,6BA2EWR,GACEf,KAAKC,MAAMiB,OAAUH,EAAEU,eACxBzB,KAAK0B,UA7EjB,8BAsFQxB,IAAIyB,eAAe3B,KAAKD,KAAMuB,U,2BAtFtC,M,EA4FIM,I,iUAAUC,QAAQ,SAAAC,GAAM,OAAI,IAAIhC,EAAOgC","file":"search.bundle.js","sourcesContent":["/** @const {string} */\nexport const BLOCK_BUTTON = 'button';\n\n/** @const {string} Modifier indicating a primary button. */\nexport const MODIFIER_PRIMARY = 'primary';\n\n/** @const {string} Modifier indicating a secondary button. */\nexport const MODIFIER_SECONDARY = 'secondary';\n","import BEM from 'bem.js';\nimport {BLOCK_BUTTON, MODIFIER_PRIMARY, MODIFIER_SECONDARY} from '../button/constants';\nimport {SEARCHES, BLOCK_SEARCH, ELEMENT_INPUT, MODIFIER_OPEN} from './constants';\n\n\n/**\n * Contains additional logic controlling search widget.\n * NOTE: Open/close behaviour controlled by button (ToggleButton).\n * @class\n */\nexport class Search {\n    /**\n     * Constructor method.\n     * @param {HTMLFormElement} node\n     */\n    constructor(node) {\n        /** @type {HTMLFormElement} */\n        this.node = node;\n\n        /** @type {HTMLInputElement} */\n        this.input = BEM.getChildBEMNode(this.node, BLOCK_SEARCH, ELEMENT_INPUT);\n\n        /** @type {HTMLButtonElement} */\n        this.buttonPrimary = BEM.getChildBEMNode(this.node, BLOCK_BUTTON, false, MODIFIER_PRIMARY);\n\n        /** @type {HTMLButtonElement} */\n        this.buttonSecondary = BEM.getChildBEMNode(this.node, BLOCK_BUTTON, false, MODIFIER_SECONDARY);\n\n        this.bindEvents();\n    }\n\n    /**\n     * Binds events to callbacks.\n     */\n    bindEvents() {\n        this.buttonPrimary.addEventListener('click', this.onClickButtonPrimary.bind(this));\n        this.buttonSecondary.addEventListener('click', this.onClickButtonSecondary.bind(this));\n        this.input.addEventListener('blur', this.onBlur.bind(this));\n        this.input.addEventListener('keypress', this.onPressEnter.bind(this));\n    }\n\n    /**\n     * Callback for keypress event on focused input.\n     * Submits for if the user pressed enter and there is an input value.\n     */\n    onPressEnter(e) {\n        const keyCode = e.keyCode;\n        if (keyCode === 13) {\n            e.preventDefault();\n            if (this.input.value) {\n                this.input.form.submit();\n            }\n        }\n    }\n\n    /**\n     * Callback for click event on this.buttonPrimary.\n     * Submits form if input has value.\n     * Focuses this.input if MODIFIER_OPEN is set on this.node.\n     * Blurs this.input otherwise.\n     */\n    onClickButtonPrimary() {\n        if (BEM.hasModifier(this.node, MODIFIER_OPEN)) {\n            if (this.input.value) {\n                this.input.form.submit();\n            }\n            this.input.focus();\n        } else {\n            this.input.blur();\n        }\n    }\n\n    /**\n     * Callback for click event on this.buttonSecondary.\n     * Focuses this.input.\n     */\n    onClickButtonSecondary() {\n        this.input.focus();\n    }\n\n    /**\n     * Callback for blur event on this.input.\n     * Calls this.close() if input does not have value.\n     * @param {Event} e\n     */\n    onBlur(e) {\n        if (!this.input.value && !e.relatedTarget) {\n            this.close();\n        }\n    }\n\n    /**\n     * Additional control for removing MODIFIER_OPEN for this.node.\n     * NOTE: Open/close behaviour controlled by button (ToggleButton).\n     */\n    close() {\n        BEM.removeModifier(this.node, MODIFIER_OPEN);\n    }\n}\n\n\n// Start!\n[...SEARCHES].forEach(search => new Search(search));\n"],"sourceRoot":""}