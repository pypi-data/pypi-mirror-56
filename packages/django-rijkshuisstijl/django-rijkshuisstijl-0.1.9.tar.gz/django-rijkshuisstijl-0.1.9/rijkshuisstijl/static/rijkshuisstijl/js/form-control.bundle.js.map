{"version":3,"sources":["webpack:///./rijkshuisstijl/js/components/form/form-control.js"],"names":["FormControl","node","this","bindEvents","update","querySelectorAll","getInputs","filter","input","name","addEventListener","bind","setTimeout","_update","namedInputs","getNamedInputs","namedInputNames","Set","map","namedInput","length","dataset","inputNames","forEach","datasetItem","value","type","checked","multiple","options","values","option","selected","selectedOption","textContent","checkedInput","e","str","id","console","warn","FORM_CONTROLS"],"mappings":"4mBAMMA,E,WAKF,WAAYC,I,4FAAO,CAAD,QAEdC,KAAKD,KAAOA,EAEZC,KAAKC,aACLD,KAAKE,S,2DAQL,OAAO,EAAIF,KAAKD,KAAKI,iBAAiB,8B,uCAQtC,OAAOH,KAAKI,YACPC,OAAO,SAAAC,GAAK,OAAIA,EAAMC,S,mCAO3BP,KAAKD,KAAKS,iBAAiB,SAAUR,KAAKE,OAAOO,KAAKT,OACtDA,KAAKD,KAAKS,iBAAiB,QAASR,KAAKE,OAAOO,KAAKT,OACrDA,KAAKD,KAAKS,iBAAiB,QAASR,KAAKE,OAAOO,KAAKT,OACrDA,KAAKD,KAAKS,iBAAiB,WAAYR,KAAKE,OAAOO,KAAKT,OACxDA,KAAKD,KAAKS,iBAAiB,QAASR,KAAKE,OAAOO,KAAKT,S,+BAOrDU,WAAWV,KAAKW,QAAQF,KAAKT,S,gCAMtB,IAAD,OACN,IACI,IAAMY,EAAcZ,KAAKa,iBAGnBC,EAAe,EAAO,IAAIC,IAAIH,EAAYI,IAAI,SAAAC,GAAU,OAAIA,EAAWV,SAEzEO,EAAgBI,OAChBlB,KAAKD,KAAKoB,QAAQC,WAAaN,SAExBd,KAAKD,KAAKoB,QAAQC,WAK7BR,EAAYS,QAAQ,SAAAJ,GAChB,IAAMK,EAAW,UAAML,EAAWV,KAAjB,SACbgB,EAAQN,EAAWM,MAGvB,IAAwB,aAApBN,EAAWO,MAAwBP,EAAWQ,WAK1B,UAApBR,EAAWO,MAAqBP,EAAWQ,SAA/C,CAKA,GAAIR,EAAWS,UAAYT,EAAWU,QAAS,CAC3C,IAAMC,EAAS,EAAIX,EAAWU,SACzBtB,OAAO,SAAAwB,GAAM,OAAIA,EAAOC,WACxBd,IAAI,SAAAe,GAAc,OAAIA,EAAeR,OAASQ,EAAeC,cAG9DT,IADAK,EAAOV,QACCU,EAMZL,EACA,EAAKxB,KAAKoB,QAAQG,GAAeC,SAE1B,EAAKxB,KAAKoB,QAAQG,MAMjCV,EAAYP,OAAO,SAAAY,GAAU,OAAIA,EAAWQ,SAAWR,EAAWM,QAC7DF,QAAQ,SAAAY,GACL,IAAMX,EAAW,UAAMW,EAAa1B,KAAnB,SACjB,EAAKR,KAAKoB,QAAQG,GAAeW,EAAaV,QAExD,MAAOW,GACL,IAAMC,EAAMnC,KAAKD,KAAKoB,QAAQC,YAAcpB,KAAKD,KAAKqC,IAAMpC,KAAKD,KACjEsC,QAAQC,KAAR,0CAAgDH,EAAhD,yBAAoED,EAApE,Y,gCAQZ,EAAIK,KAAelB,QAAQ,SAAAtB,GAAI,OAAI,IAAID,EAAYC","file":"form-control.bundle.js","sourcesContent":["import {FORM_CONTROLS} from './constants';\n\n/**\n * Keeps track of inputs and their values and copies those to data attributes of node.\n * @class\n */\nclass FormControl {\n    /**\n     * Constructor method.\n     * @param {HTMLElement} node\n     */\n    constructor(node) {\n        /** @type {HTMLElement} */\n        this.node = node;\n\n        this.bindEvents();\n        this.update();\n    }\n\n    /**\n     * Returns all inputs, selects and textareas within this.node.\n     * @return {HTMLElement[]}\n     */\n    getInputs() {\n        return [...this.node.querySelectorAll('input, select, textarea')];\n    }\n\n    /**\n     * Returns all inputs, selects and textareas within this.node with a name attribute set.\n     * @return {HTMLElement[]}\n     */\n    getNamedInputs() {\n        return this.getInputs()\n            .filter(input => input.name);\n    }\n\n    /**\n     * Binds events to callbacks.\n     */\n    bindEvents() {\n        this.node.addEventListener('change', this.update.bind(this));\n        this.node.addEventListener('input', this.update.bind(this));\n        this.node.addEventListener('click', this.update.bind(this));\n        this.node.addEventListener('touchend', this.update.bind(this));\n        this.node.addEventListener('keyup', this.update.bind(this));\n    }\n\n    /**\n     * Copies inputs select and textreas name and values to data attributes of this.node.\n     */\n    update() {\n        setTimeout(this._update.bind(this));\n    }\n\n    /**\n     * @private\n     */\n    _update() {\n        try {\n            const namedInputs = this.getNamedInputs();\n\n            // Set names (data-input-names=\"foo,bar\").\n            const namedInputNames = [...new Set(namedInputs.map(namedInput => namedInput.name))];\n\n            if (namedInputNames.length) {\n                this.node.dataset.inputNames = namedInputNames;\n            } else {\n                delete this.node.dataset.inputNames;\n            }\n\n\n            // Set values (data-foo-value=\"bar\").\n            namedInputs.forEach(namedInput => {\n                const datasetItem = `${namedInput.name}Value`;\n                let value = namedInput.value;\n\n                // Checkbox\n                if (namedInput.type === 'checkbox' && !namedInput.checked) {\n                    return;\n                }\n\n                // Radio\n                if (namedInput.type === 'radio' && !namedInput.checked) {\n                    return;\n                }\n\n                // Select multiple\n                if (namedInput.multiple && namedInput.options) {\n                    const values = [...namedInput.options]\n                        .filter(option => option.selected)\n                        .map(selectedOption => selectedOption.value || selectedOption.textContent);\n\n                    if (values.length) {\n                        value = values;\n                    } else {\n                        value = false;\n                    }\n                }\n\n                if (value) {\n                    this.node.dataset[datasetItem] = value;\n                } else {\n                    delete this.node.dataset[datasetItem];\n                }\n            });\n\n\n            // Checked\n            namedInputs.filter(namedInput => namedInput.checked && namedInput.value)\n                .forEach(checkedInput => {\n                    const datasetItem = `${checkedInput.name}Value`;\n                    this.node.dataset[datasetItem] = checkedInput.value;\n                });\n        } catch (e) {\n            const str = this.node.dataset.inputNames || this.node.id || this.node;\n            console.warn(`Unable to inspect form control (${str}), got error: ${e}.`);\n        }\n\n    }\n}\n\n\n// Start!\n[...FORM_CONTROLS].forEach(node => new FormControl(node));\n"],"sourceRoot":""}