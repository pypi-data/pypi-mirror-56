# {{ project_name }} Documentation

## Running the test environment
To test your model's integration with Leo, we provide a simple test command. This command starts the API on the server
you selected{% if use_flask %} or Flask's internal Werkzeug server{% endif %}, but not any other services such as
logging or monitoring. To see the available options, simply run ```python {{ module_name }}cli.py test --help```.

## Available Commands
 - ```train``` Trains an instance of the model (using the data and training methods defined in data.py and train.py) and persists it to disk.
 - ```test``` Start the test environment as described above
 - ```deploy docker``` Attempts to build a Docker image and start the generated container(s). This will fail if there is no docker-compose.yml file available.
 - ```undeploy docker``` Attempts to stop the containers which were created ans started with ```deploy docker```.
 - ```deploy kubernetes``` Attempts to deploy the project using Kubernetes. This will fail if there is no Kubernetes/Docker configuration available.
 - ```undeploy kubernetes``` Attempts to stop the Pods generated by ```deploy kubernetes```.

Disclaimer: Generated by leo