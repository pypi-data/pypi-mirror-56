{% if use_prometheus %}
from prometheus_client import CollectorRegistry, multiprocess, generate_latest, CONTENT_TYPE_LATEST, REGISTRY


class _Metrics:
     """
    Exposes APM metrics as an api endpoint to be consumed by Prometheus.
    It handles multiprocess deployment of the api
    """

    def __init__(self):
        for collector, names in tuple(REGISTRY._collector_to_names.items()):
            REGISTRY.unregister(collector)

    @_blp.response(headers={"Content-Type": "text/plain"})
    def on_get(self, req, resp):
        """
        Invoked by a GET request to the metrics endpoint.
        ---
        """
        registry = CollectorRegistry()
        multiprocess.MultiProcessCollector(registry)
        resp.body = generate_latest(registry)
        resp.append_header('Content-Type', CONTENT_TYPE_LATEST)


Metrics = _Metrics()
{% elif use_graphite %}
{% include 'metrics/graphite-metrics.jinja2' %}
{% endif %}
