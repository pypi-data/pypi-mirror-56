import mleap.pyspark
from mleap.pyspark.spark_support import SimpleSparkSerializer

from .basemodel import BaseModel, ModelException
from .config import *
from abc import ABCMeta


class MLeapSparkModel(BaseModel, metaclass=ABCMeta):

    def __init__(self):
        super().__init__()
        self._serializer = SimpleSparkSerializer()

    def load_model(self, force_reload: bool = False) -> None:
        """
        Loads the model (which is assumed to be a pyspark.ml.PipelineModel) from the models directory.
        If self._loaded_model is already initialized, nothing will be done unless force_reload is True.

        :param force_reload Reload the model even if _loaded_model is not None

        :exception ModelException: If the model cannot be loaded.

        """
        if force_reload or self._loaded_model is None:
            with self._lock:
                try:
                    self._loaded_model = PipelineModel.load(self._model_path)
                except Exception as ex:
                    raise ModelException(f'Unable to load model: {ex}', 500)

    def save_model(self) -> None:
        """
        Save changes made to the model.
        This method expects self._loaded_model to be initialized, and will raise an error if it is not.

        :exception ModelException: If the model has not yet been initialized, or if an error occurred while
        saving the model.

        """
        with self._lock:
            if self._loaded_model is None:
                raise ModelException('The model has not yet been loaded.', 409)
            try:
                self._loaded_model.write().overwrite().save(self._model_path)
            except Exception as ex:
                raise ModelException(f'Unable to save model: {ex}', 500)