<<<header->>>
/*
 * Node name: {{parameters.node.name}}
 *
 * Generated on: {{"%d %B, %Y"|todaysDate}}
 *       Author: {{parameters.Information.user.name}}
 *      Licence: {{parameters.Information.software.license}}
 *    Copyright: {{parameters.Information.software.copyright}}
 *
 *    THIS FILE WAS AUTOMATICALLY GENERATED USING THE ROBOTICS LANGUAGE
 *
 */

#include "{{parameters.node.name|underscore}}/{{parameters.node.name|underscore}}.hpp"

/***************************************************************************************
*       {{parameters.node.name|camelCase}}Class Definition
****************************************************************************************/
namespace {{parameters.node.name|underscore}}
{

  /******************************* constructor *****************************************/
  {{parameters.node.name|camelCase}}Class::{{parameters.node.name|camelCase}}Class():
    nh_("~")
    <<<'classInitialisation'|group>>>
  {
  }


  /******************************* initialise ********************************************/
  void {{parameters.node.name|camelCase}}Class::initialise()
  {
    <<<'initialise'|group>>>

    /* initialisation */
    {{code|xpath('/node')|option('initialise')|serializedCode}};
  }

  /******************************* finalise ********************************************/
  void {{parameters.node.name|camelCase}}Class::finalise()
  {
    <<<'finalise'|group>>>

    {{code|xpath('/node')|option('finalise')|serializedCode}};
  }

  /******************************* spin ************************************************/
  void {{parameters.node.name|camelCase}}Class::spin()
  {
    // Sets the spin rate
    ros::Rate r({{code|xpath('/node')|option('rate')|serializedCode}});
    while(ros::ok())
    {
      <<<'beforeSpin'|group>>>

      ros::spinOnce();

      <<<'afterSpin'|group>>>

      r.sleep();
    }
  }

  <<<'functions'|group>>>

}

/****************************************************************************************
* The Main
*****************************************************************************************/
int main(int argc, char **argv)
{
  // Initialize the node
  ros::init(argc, argv, "{{parameters.node.name|underscore}}");

  // Create the node object
  {{parameters.node.name|underscore}}::{{parameters.node.name|camelCase}}Class instance;

  // initialise
  instance.initialise();

  // Spin the node
  instance.spin();

  // finalise
  instance.finalise();

  return 0;
}
