# coding: utf-8

"""
    Sigfox API

     # API overview Sigfox API is used to integrate with the Sigfox platform.  The API uses the HTTP protocol, following the REST principles (POST, GET, DELETE, PUT requests). The API endpoints accept and return data in the JSON format, with the corresponding \"application/json\" content type header.  The Sigfox API access differs for every API User based on their profile. If you already have a Sigfox account, you can retrieve the API Documentation customized for your API User directly in json or yaml format. The “how to” procedure is detailed in the [API Documentation](https://support.sigfox.com/docs/api-documentation) article.  The PUT request is the only request used to edit an existing entity. You don't need to specify each value. If a property is not present in the request, it won't be processed and updated. To remove an optional property, it must be filled in the request with the explicit value NULL. If a property has no value, it won't appear in the result of a GET request.  # Authentication and security Sigfox API is only accessible using HTTPS, and all API endpoints require authentication credentials (API user login and password). An API User is associated to a group with given profiles. You can view and manage your API User in the [Sigfox Portal](https://backend.sigfox.com/auth/login).  If you need an API User, follow the [API credential creation](https://support.sigfox.com/docs/api-credential-creation) procedure.  Your API User must remain private. Should the API credentials be compromised, new ones can be generated at any moment, invalidating the previous ones. CORS and JSONP are intentionally unsupported. CORS and JSONP JavaScript techniques tends to expose your credentials to your users. If you really need to call Sigfox API from JavaScript in the browser, you must set a reverse proxy on your website. Be careful not to use proxy for all requests to Sigfox OSS but to only select the relevant ones.  <!-- ReDoc-Inject: <security-definitions> -->  # Usage limits All Sigfox API endpoints are using the same underlying technology that powers the core Sigfox Platform. For Cloud efficiency and security reasons, Sigfox is moving a step forward on API rate limiting, by setting upper bounds for some API endpoints. Please note that a new HTTP response will be returned in case of rate exceeded : “HTTP 429: too many requests”.  For more information check [API Rate limiting](https://support.sigfox.com/docs/api-rate-limiting) policy. Sigfox reserves the right to modify these limits without notice.  # Versioning  Sigfox API supports versioning of its endpoints through a version suffix in the endpoint URL. This suffix has the following format: \"vX\", where X is the version number. For example: v2/device.  All requests must include the version suffix in the endpoint URL.  Any new backwards-incompatible change will be released in a new version.   Read the [API versioning management](https://storage.sbg1.cloud.ovh.net/v1/AUTH_669d7dfced0b44518cb186841d7cbd75/prod_docs/55746591-API_Versioning_management.pdf) to learn more about it.  # Paging  Some API requests will return a list of data. If the list is longer than the set limit, the items will be retrieved via multiple requests. The paging section in the response will specify a URL for the next request.  Keep in mind rate limiting policy to manage your requests.  You can use the limit parameter to limit the number of items to be returned, between 1 and 100 (default). The offset parameter is used to specify a number of items to skip.  # Errors  Sigfox API uses conventional HTTP response codes to indicate the success or failure of an API request.  Codes in the 2xx range indicate success.  Codes in the 4xx range indicate an error that failed given the information provided (e.g. a required parameter missing, a resource was not found, etc.). Often the response will also include a message explaining the error.  Codes in the 5xx range indicate an error with servers.   For more information please refer to the [Response code article](https://support.sigfox.com/docs/api-response-code-references).   # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import unittest

import sigfox_api_client
from api.device_types_api import DeviceTypesApi  # noqa: E501
from sigfox_api_client.rest import ApiException


class TestDeviceTypesApi(unittest.TestCase):
    """DeviceTypesApi unit test stubs"""

    def setUp(self):
        self.api = api.device_types_api.DeviceTypesApi()  # noqa: E501

    def tearDown(self):
        pass

    def test_create_callback(self):
        """Test case for create_callback

        Create a callback  # noqa: E501
        """
        pass

    def test_create_device_type(self):
        """Test case for create_device_type

        Create a device type  # noqa: E501
        """
        pass

    def test_delete_callback(self):
        """Test case for delete_callback

        Delete a callback  # noqa: E501
        """
        pass

    def test_device_type_bulk_restart(self):
        """Test case for device_type_bulk_restart

        Restart the devices of a device type  # noqa: E501
        """
        pass

    def test_device_types_delete(self):
        """Test case for device_types_delete

        Delete a device type  # noqa: E501
        """
        pass

    def test_device_types_seq_number_disengage(self):
        """Test case for device_types_seq_number_disengage

        Disengage sequence number check for the next message  # noqa: E501
        """
        pass

    def test_enable_callback(self):
        """Test case for enable_callback

        Enable or disable a callback  # noqa: E501
        """
        pass

    def test_enable_downlink_callback(self):
        """Test case for enable_downlink_callback

        Selects a downlink callback  # noqa: E501
        """
        pass

    def test_get_callback_messages_error_list_for_device_type(self):
        """Test case for get_callback_messages_error_list_for_device_type

        Retrieve a list of callback errors  # noqa: E501
        """
        pass

    def test_get_device_messages_list_for_device_type(self):
        """Test case for get_device_messages_list_for_device_type

        Retrieve a list of messages  # noqa: E501
        """
        pass

    def test_get_device_type(self):
        """Test case for get_device_type

        Retrieve information about a device type  # noqa: E501
        """
        pass

    def test_get_device_type_bulk_restart_job(self):
        """Test case for get_device_type_bulk_restart_job

        Retrieve the device type async job status for restart action  # noqa: E501
        """
        pass

    def test_list_callbacks(self):
        """Test case for list_callbacks

        Retrieve a list of callbacks  # noqa: E501
        """
        pass

    def test_list_device_types(self):
        """Test case for list_device_types

        Retrieve a list of device types  # noqa: E501
        """
        pass

    def test_update_callback(self):
        """Test case for update_callback

        Update a callback  # noqa: E501
        """
        pass

    def test_update_device_type(self):
        """Test case for update_device_type

        Update a device type  # noqa: E501
        """
        pass


if __name__ == '__main__':
    unittest.main()
