# coding: utf-8

"""
    Sigfox API

     # API overview Sigfox API is used to integrate with the Sigfox platform.  The API uses the HTTP protocol, following the REST principles (POST, GET, DELETE, PUT requests). The API endpoints accept and return data in the JSON format, with the corresponding \"application/json\" content type header.  The Sigfox API access differs for every API User based on their profile. If you already have a Sigfox account, you can retrieve the API Documentation customized for your API User directly in json or yaml format. The “how to” procedure is detailed in the [API Documentation](https://support.sigfox.com/docs/api-documentation) article.  The PUT request is the only request used to edit an existing entity. You don't need to specify each value. If a property is not present in the request, it won't be processed and updated. To remove an optional property, it must be filled in the request with the explicit value NULL. If a property has no value, it won't appear in the result of a GET request.  # Authentication and security Sigfox API is only accessible using HTTPS, and all API endpoints require authentication credentials (API user login and password). An API User is associated to a group with given profiles. You can view and manage your API User in the [Sigfox Portal](https://backend.sigfox.com/auth/login).  If you need an API User, follow the [API credential creation](https://support.sigfox.com/docs/api-credential-creation) procedure.  Your API User must remain private. Should the API credentials be compromised, new ones can be generated at any moment, invalidating the previous ones. CORS and JSONP are intentionally unsupported. CORS and JSONP JavaScript techniques tends to expose your credentials to your users. If you really need to call Sigfox API from JavaScript in the browser, you must set a reverse proxy on your website. Be careful not to use proxy for all requests to Sigfox OSS but to only select the relevant ones.  <!-- ReDoc-Inject: <security-definitions> -->  # Usage limits All Sigfox API endpoints are using the same underlying technology that powers the core Sigfox Platform. For Cloud efficiency and security reasons, Sigfox is moving a step forward on API rate limiting, by setting upper bounds for some API endpoints. Please note that a new HTTP response will be returned in case of rate exceeded : “HTTP 429: too many requests”.  For more information check [API Rate limiting](https://support.sigfox.com/docs/api-rate-limiting) policy. Sigfox reserves the right to modify these limits without notice.  # Versioning  Sigfox API supports versioning of its endpoints through a version suffix in the endpoint URL. This suffix has the following format: \"vX\", where X is the version number. For example: v2/device.  All requests must include the version suffix in the endpoint URL.  Any new backwards-incompatible change will be released in a new version.   Read the [API versioning management](https://storage.sbg1.cloud.ovh.net/v1/AUTH_669d7dfced0b44518cb186841d7cbd75/prod_docs/55746591-API_Versioning_management.pdf) to learn more about it.  # Paging  Some API requests will return a list of data. If the list is longer than the set limit, the items will be retrieved via multiple requests. The paging section in the response will specify a URL for the next request.  Keep in mind rate limiting policy to manage your requests.  You can use the limit parameter to limit the number of items to be returned, between 1 and 100 (default). The offset parameter is used to specify a number of items to skip.  # Errors  Sigfox API uses conventional HTTP response codes to indicate the success or failure of an API request.  Codes in the 2xx range indicate success.  Codes in the 4xx range indicate an error that failed given the information provided (e.g. a required parameter missing, a resource was not found, etc.). Often the response will also include a message explaining the error.  Codes in the 5xx range indicate an error with servers.   For more information please refer to the [Response code article](https://support.sigfox.com/docs/api-response-code-references).   # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from sigfox_api_client.api_client import ApiClient


class ContractInfosApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def contract_bulk_restart(self, id, **kwargs):  # noqa: E501
        """Create a job to restart the devices associated to a contract  # noqa: E501

        Create an async job to restart the devices associated to a contract.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.contract_bulk_restart(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The Contract identifier (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.contract_bulk_restart_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.contract_bulk_restart_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def contract_bulk_restart_with_http_info(self, id, **kwargs):  # noqa: E501
        """Create a job to restart the devices associated to a contract  # noqa: E501

        Create an async job to restart the devices associated to a contract.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.contract_bulk_restart_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The Contract identifier (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method contract_bulk_restart" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `contract_bulk_restart`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/contract-infos/{id}/bulk/restart', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_list(self, id, **kwargs):  # noqa: E501
        """Retrieve the list of devices having a token on the specified contract  # noqa: E501

        Retrieve a list of devices according to visibility permissions and request filters.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_list(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The contract info ID (required)
        :param str device_type_id: Returns only devices of the given device type
        :param str fields: Defines the other available fields to be returned in the response. 
        :param int limit: The maximum number of items to return
        :param str page_id: Token representing the page to retrieve
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.device_list_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_list_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def device_list_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieve the list of devices having a token on the specified contract  # noqa: E501

        Retrieve a list of devices according to visibility permissions and request filters.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_list_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The contract info ID (required)
        :param str device_type_id: Returns only devices of the given device type
        :param str fields: Defines the other available fields to be returned in the response. 
        :param int limit: The maximum number of items to return
        :param str page_id: Token representing the page to retrieve
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'device_type_id', 'fields', 'limit', 'page_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `device_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'device_type_id' in params:
            query_params.append(('deviceTypeId', params['device_type_id']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'page_id' in params:
            query_params.append(('pageId', params['page_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/contract-infos/{id}/devices', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_contract_bulk_restart_job(self, job_id, **kwargs):  # noqa: E501
        """Retrieve a contract async job status for restart action  # noqa: E501

        Retrieve a contract async job status for restart action.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_contract_bulk_restart_job(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_id: The job identidier (hexademical format) (required)
        :return: ActionJob
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_contract_bulk_restart_job_with_http_info(job_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_contract_bulk_restart_job_with_http_info(job_id, **kwargs)  # noqa: E501
            return data

    def get_contract_bulk_restart_job_with_http_info(self, job_id, **kwargs):  # noqa: E501
        """Retrieve a contract async job status for restart action  # noqa: E501

        Retrieve a contract async job status for restart action.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_contract_bulk_restart_job_with_http_info(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_id: The job identidier (hexademical format) (required)
        :return: ActionJob
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['job_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_contract_bulk_restart_job" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'job_id' is set
        if ('job_id' not in params or
                params['job_id'] is None):
            raise ValueError("Missing the required parameter `job_id` when calling `get_contract_bulk_restart_job`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/contract-infos/bulk/restart/{jobId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ActionJob',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_contract_info(self, id, **kwargs):  # noqa: E501
        """Retrieve information about a contract  # noqa: E501

        Retrieve information about a given contract.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_contract_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The Contract identifier (required)
        :param str fields: Defines the other available fields to be returned in the response. 
        :return: ContractInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_contract_info_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_contract_info_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_contract_info_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieve information about a contract  # noqa: E501

        Retrieve information about a given contract.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_contract_info_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The Contract identifier (required)
        :param str fields: Defines the other available fields to be returned in the response. 
        :return: ContractInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_contract_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_contract_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/contract-infos/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ContractInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_contract_infos(self, **kwargs):  # noqa: E501
        """Retrieve a list of contracts  # noqa: E501

        Retrieve a list of contracts according to visibility permissions and request filters.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_contract_infos(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Searches for contracts containing the given text in their name
        :param str group_id: Searches for contracts who are attached to the given group
        :param int group_type: Searches for contracts that are attached to a specific group type. - 2 -> BASIC - 9 -> CHANNEL 
        :param bool deep: Searches for contracts that are attached to the given group and its descendants
        :param str order_ids: Searches for contracts with the listed orderIds. The elements of the list are separated by comma.
        :param str contract_ids: Searches for contracts IDs that have the listed external (BSS) contractId. The elements of the list are separated by comma.
        :param int from_time: Searches for contracts starting after the given time (in milliseconds since Unix Epoch).
        :param int to_time: Searches for contracts ending before the given time (in milliseconds since Unix Epoch).
        :param int token_duration: Searches for contracts with the given token duration in months.
        :param int pricing_model: Searches for contracts with a given pricing model  1 -> Pricing model v1 2 -> Pricing model v2 3 -> Pricing model v3 
        :param int subscription_plan: Searches for contracts with the given subscription plan: 0 -> Free order 1 -> Pay As You Grow (PAYG) 2 -> Committed Volume Plan (CVP) 3 -> Flexible Committed Volume Plan (CVP Flex) 4 -> PACK 5 -> DevKit 6 -> Activate 
        :param int geolocation_mode: Searches for contracts with the given geolocation mode (level) 1 (ATLAS) 2 (ATLAS_WIFI) 3 (N/A) 4 (ATLAS_POV) 5 (ATLAS_BUBBLE) 
        :param str fields: Defines the other available fields to be returned in the response. 
        :param int limit: The maximum number of items to return
        :param int offset: The number of items to skip
        :param str page_id: Token representing the page to retrieve
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_contract_infos_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_contract_infos_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_contract_infos_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve a list of contracts  # noqa: E501

        Retrieve a list of contracts according to visibility permissions and request filters.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_contract_infos_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Searches for contracts containing the given text in their name
        :param str group_id: Searches for contracts who are attached to the given group
        :param int group_type: Searches for contracts that are attached to a specific group type. - 2 -> BASIC - 9 -> CHANNEL 
        :param bool deep: Searches for contracts that are attached to the given group and its descendants
        :param str order_ids: Searches for contracts with the listed orderIds. The elements of the list are separated by comma.
        :param str contract_ids: Searches for contracts IDs that have the listed external (BSS) contractId. The elements of the list are separated by comma.
        :param int from_time: Searches for contracts starting after the given time (in milliseconds since Unix Epoch).
        :param int to_time: Searches for contracts ending before the given time (in milliseconds since Unix Epoch).
        :param int token_duration: Searches for contracts with the given token duration in months.
        :param int pricing_model: Searches for contracts with a given pricing model  1 -> Pricing model v1 2 -> Pricing model v2 3 -> Pricing model v3 
        :param int subscription_plan: Searches for contracts with the given subscription plan: 0 -> Free order 1 -> Pay As You Grow (PAYG) 2 -> Committed Volume Plan (CVP) 3 -> Flexible Committed Volume Plan (CVP Flex) 4 -> PACK 5 -> DevKit 6 -> Activate 
        :param int geolocation_mode: Searches for contracts with the given geolocation mode (level) 1 (ATLAS) 2 (ATLAS_WIFI) 3 (N/A) 4 (ATLAS_POV) 5 (ATLAS_BUBBLE) 
        :param str fields: Defines the other available fields to be returned in the response. 
        :param int limit: The maximum number of items to return
        :param int offset: The number of items to skip
        :param str page_id: Token representing the page to retrieve
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'group_id', 'group_type', 'deep', 'order_ids', 'contract_ids', 'from_time', 'to_time', 'token_duration', 'pricing_model', 'subscription_plan', 'geolocation_mode', 'fields', 'limit', 'offset', 'page_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_contract_infos" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'group_id' in params:
            query_params.append(('groupId', params['group_id']))  # noqa: E501
        if 'group_type' in params:
            query_params.append(('groupType', params['group_type']))  # noqa: E501
        if 'deep' in params:
            query_params.append(('deep', params['deep']))  # noqa: E501
        if 'order_ids' in params:
            query_params.append(('orderIds', params['order_ids']))  # noqa: E501
        if 'contract_ids' in params:
            query_params.append(('contractIds', params['contract_ids']))  # noqa: E501
        if 'from_time' in params:
            query_params.append(('fromTime', params['from_time']))  # noqa: E501
        if 'to_time' in params:
            query_params.append(('toTime', params['to_time']))  # noqa: E501
        if 'token_duration' in params:
            query_params.append(('tokenDuration', params['token_duration']))  # noqa: E501
        if 'pricing_model' in params:
            query_params.append(('pricingModel', params['pricing_model']))  # noqa: E501
        if 'subscription_plan' in params:
            query_params.append(('subscriptionPlan', params['subscription_plan']))  # noqa: E501
        if 'geolocation_mode' in params:
            query_params.append(('geolocationMode', params['geolocation_mode']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'page_id' in params:
            query_params.append(('pageId', params['page_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/contract-infos/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
