# coding: utf-8

"""
    Sigfox API

     # API overview Sigfox API is used to integrate with the Sigfox platform.  The API uses the HTTP protocol, following the REST principles (POST, GET, DELETE, PUT requests). The API endpoints accept and return data in the JSON format, with the corresponding \"application/json\" content type header.  The Sigfox API access differs for every API User based on their profile. If you already have a Sigfox account, you can retrieve the API Documentation customized for your API User directly in json or yaml format. The “how to” procedure is detailed in the [API Documentation](https://support.sigfox.com/docs/api-documentation) article.  The PUT request is the only request used to edit an existing entity. You don't need to specify each value. If a property is not present in the request, it won't be processed and updated. To remove an optional property, it must be filled in the request with the explicit value NULL. If a property has no value, it won't appear in the result of a GET request.  # Authentication and security Sigfox API is only accessible using HTTPS, and all API endpoints require authentication credentials (API user login and password). An API User is associated to a group with given profiles. You can view and manage your API User in the [Sigfox Portal](https://backend.sigfox.com/auth/login).  If you need an API User, follow the [API credential creation](https://support.sigfox.com/docs/api-credential-creation) procedure.  Your API User must remain private. Should the API credentials be compromised, new ones can be generated at any moment, invalidating the previous ones. CORS and JSONP are intentionally unsupported. CORS and JSONP JavaScript techniques tends to expose your credentials to your users. If you really need to call Sigfox API from JavaScript in the browser, you must set a reverse proxy on your website. Be careful not to use proxy for all requests to Sigfox OSS but to only select the relevant ones.  <!-- ReDoc-Inject: <security-definitions> -->  # Usage limits All Sigfox API endpoints are using the same underlying technology that powers the core Sigfox Platform. For Cloud efficiency and security reasons, Sigfox is moving a step forward on API rate limiting, by setting upper bounds for some API endpoints. Please note that a new HTTP response will be returned in case of rate exceeded : “HTTP 429: too many requests”.  For more information check [API Rate limiting](https://support.sigfox.com/docs/api-rate-limiting) policy. Sigfox reserves the right to modify these limits without notice.  # Versioning  Sigfox API supports versioning of its endpoints through a version suffix in the endpoint URL. This suffix has the following format: \"vX\", where X is the version number. For example: v2/device.  All requests must include the version suffix in the endpoint URL.  Any new backwards-incompatible change will be released in a new version.   Read the [API versioning management](https://storage.sbg1.cloud.ovh.net/v1/AUTH_669d7dfced0b44518cb186841d7cbd75/prod_docs/55746591-API_Versioning_management.pdf) to learn more about it.  # Paging  Some API requests will return a list of data. If the list is longer than the set limit, the items will be retrieved via multiple requests. The paging section in the response will specify a URL for the next request.  Keep in mind rate limiting policy to manage your requests.  You can use the limit parameter to limit the number of items to be returned, between 1 and 100 (default). The offset parameter is used to specify a number of items to skip.  # Errors  Sigfox API uses conventional HTTP response codes to indicate the success or failure of an API request.  Codes in the 2xx range indicate success.  Codes in the 4xx range indicate an error that failed given the information provided (e.g. a required parameter missing, a resource was not found, etc.). Often the response will also include a message explaining the error.  Codes in the 5xx range indicate an error with servers.   For more information please refer to the [Response code article](https://support.sigfox.com/docs/api-response-code-references).   # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from sigfox_api_client.api_client import ApiClient


class CoveragesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def coverages_global_predictions_get(self, lat, lng, **kwargs):  # noqa: E501
        """Retrieve coverage predictions for any location.  # noqa: E501

        Get coverage margins for a selected latitude and longitude, for each redundancy level.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.coverages_global_predictions_get(lat, lng, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float lat: the latitude (required)
        :param float lng: the longitude (required)
        :param int radius: The radius of the area in which the coverage results are averaged and returned for a selected location, in meters.
        :param str group_id: the id of a group to include its operator in the global coverage
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.coverages_global_predictions_get_with_http_info(lat, lng, **kwargs)  # noqa: E501
        else:
            (data) = self.coverages_global_predictions_get_with_http_info(lat, lng, **kwargs)  # noqa: E501
            return data

    def coverages_global_predictions_get_with_http_info(self, lat, lng, **kwargs):  # noqa: E501
        """Retrieve coverage predictions for any location.  # noqa: E501

        Get coverage margins for a selected latitude and longitude, for each redundancy level.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.coverages_global_predictions_get_with_http_info(lat, lng, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float lat: the latitude (required)
        :param float lng: the longitude (required)
        :param int radius: The radius of the area in which the coverage results are averaged and returned for a selected location, in meters.
        :param str group_id: the id of a group to include its operator in the global coverage
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['lat', 'lng', 'radius', 'group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method coverages_global_predictions_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'lat' is set
        if ('lat' not in params or
                params['lat'] is None):
            raise ValueError("Missing the required parameter `lat` when calling `coverages_global_predictions_get`")  # noqa: E501
        # verify the required parameter 'lng' is set
        if ('lng' not in params or
                params['lng'] is None):
            raise ValueError("Missing the required parameter `lng` when calling `coverages_global_predictions_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'lat' in params:
            query_params.append(('lat', params['lat']))  # noqa: E501
        if 'lng' in params:
            query_params.append(('lng', params['lng']))  # noqa: E501
        if 'radius' in params:
            query_params.append(('radius', params['radius']))  # noqa: E501
        if 'group_id' in params:
            query_params.append(('groupId', params['group_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/coverages/global/predictions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def coverages_global_predictions_post(self, body, **kwargs):  # noqa: E501
        """Retrieve coverage predictions for any batch of locations  # noqa: E501

        Get the coverage margins for multiple points, for each redundancy level.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.coverages_global_predictions_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GlobalCoverageRequest body: (required)
        :return: GlobalCoverageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.coverages_global_predictions_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.coverages_global_predictions_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def coverages_global_predictions_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Retrieve coverage predictions for any batch of locations  # noqa: E501

        Get the coverage margins for multiple points, for each redundancy level.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.coverages_global_predictions_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GlobalCoverageRequest body: (required)
        :return: GlobalCoverageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method coverages_global_predictions_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `coverages_global_predictions_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/coverages/global/predictions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GlobalCoverageResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def coverages_operators_redundancy_get(self, lat, lng, **kwargs):  # noqa: E501
        """Retrieve coverage redundancy for an operator.  # noqa: E501

        Get operator coverage redundancy for a selected latitude and longitude, for specific device situation   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.coverages_operators_redundancy_get(lat, lng, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float lat: the latitude (required)
        :param float lng: the longitude (required)
        :param str operator_id: The group id related to the operator to get its coverage result. Is required for root sigfox users. 
        :param str device_situation: The coverage mode. - OUTDOOR, max link budget - INDOOR, link budget with 20dB margin - UNDERGROUND, link budget with 30dB margin 
        :param int device_class_id: The product uplink class from 0 to 3 (0U to 3U).
        :return: RedundancyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.coverages_operators_redundancy_get_with_http_info(lat, lng, **kwargs)  # noqa: E501
        else:
            (data) = self.coverages_operators_redundancy_get_with_http_info(lat, lng, **kwargs)  # noqa: E501
            return data

    def coverages_operators_redundancy_get_with_http_info(self, lat, lng, **kwargs):  # noqa: E501
        """Retrieve coverage redundancy for an operator.  # noqa: E501

        Get operator coverage redundancy for a selected latitude and longitude, for specific device situation   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.coverages_operators_redundancy_get_with_http_info(lat, lng, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float lat: the latitude (required)
        :param float lng: the longitude (required)
        :param str operator_id: The group id related to the operator to get its coverage result. Is required for root sigfox users. 
        :param str device_situation: The coverage mode. - OUTDOOR, max link budget - INDOOR, link budget with 20dB margin - UNDERGROUND, link budget with 30dB margin 
        :param int device_class_id: The product uplink class from 0 to 3 (0U to 3U).
        :return: RedundancyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['lat', 'lng', 'operator_id', 'device_situation', 'device_class_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method coverages_operators_redundancy_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'lat' is set
        if ('lat' not in params or
                params['lat'] is None):
            raise ValueError("Missing the required parameter `lat` when calling `coverages_operators_redundancy_get`")  # noqa: E501
        # verify the required parameter 'lng' is set
        if ('lng' not in params or
                params['lng'] is None):
            raise ValueError("Missing the required parameter `lng` when calling `coverages_operators_redundancy_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'lat' in params:
            query_params.append(('lat', params['lat']))  # noqa: E501
        if 'lng' in params:
            query_params.append(('lng', params['lng']))  # noqa: E501
        if 'operator_id' in params:
            query_params.append(('operatorId', params['operator_id']))  # noqa: E501
        if 'device_situation' in params:
            query_params.append(('deviceSituation', params['device_situation']))  # noqa: E501
        if 'device_class_id' in params:
            query_params.append(('deviceClassId', params['device_class_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/coverages/operators/redundancy', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RedundancyResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
