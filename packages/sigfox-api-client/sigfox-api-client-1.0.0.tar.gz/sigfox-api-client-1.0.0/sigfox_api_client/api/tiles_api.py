# coding: utf-8

"""
    Sigfox API

     # API overview Sigfox API is used to integrate with the Sigfox platform.  The API uses the HTTP protocol, following the REST principles (POST, GET, DELETE, PUT requests). The API endpoints accept and return data in the JSON format, with the corresponding \"application/json\" content type header.  The Sigfox API access differs for every API User based on their profile. If you already have a Sigfox account, you can retrieve the API Documentation customized for your API User directly in json or yaml format. The “how to” procedure is detailed in the [API Documentation](https://support.sigfox.com/docs/api-documentation) article.  The PUT request is the only request used to edit an existing entity. You don't need to specify each value. If a property is not present in the request, it won't be processed and updated. To remove an optional property, it must be filled in the request with the explicit value NULL. If a property has no value, it won't appear in the result of a GET request.  # Authentication and security Sigfox API is only accessible using HTTPS, and all API endpoints require authentication credentials (API user login and password). An API User is associated to a group with given profiles. You can view and manage your API User in the [Sigfox Portal](https://backend.sigfox.com/auth/login).  If you need an API User, follow the [API credential creation](https://support.sigfox.com/docs/api-credential-creation) procedure.  Your API User must remain private. Should the API credentials be compromised, new ones can be generated at any moment, invalidating the previous ones. CORS and JSONP are intentionally unsupported. CORS and JSONP JavaScript techniques tends to expose your credentials to your users. If you really need to call Sigfox API from JavaScript in the browser, you must set a reverse proxy on your website. Be careful not to use proxy for all requests to Sigfox OSS but to only select the relevant ones.  <!-- ReDoc-Inject: <security-definitions> -->  # Usage limits All Sigfox API endpoints are using the same underlying technology that powers the core Sigfox Platform. For Cloud efficiency and security reasons, Sigfox is moving a step forward on API rate limiting, by setting upper bounds for some API endpoints. Please note that a new HTTP response will be returned in case of rate exceeded : “HTTP 429: too many requests”.  For more information check [API Rate limiting](https://support.sigfox.com/docs/api-rate-limiting) policy. Sigfox reserves the right to modify these limits without notice.  # Versioning  Sigfox API supports versioning of its endpoints through a version suffix in the endpoint URL. This suffix has the following format: \"vX\", where X is the version number. For example: v2/device.  All requests must include the version suffix in the endpoint URL.  Any new backwards-incompatible change will be released in a new version.   Read the [API versioning management](https://storage.sbg1.cloud.ovh.net/v1/AUTH_669d7dfced0b44518cb186841d7cbd75/prod_docs/55746591-API_Versioning_management.pdf) to learn more about it.  # Paging  Some API requests will return a list of data. If the list is longer than the set limit, the items will be retrieved via multiple requests. The paging section in the response will specify a URL for the next request.  Keep in mind rate limiting policy to manage your requests.  You can use the limit parameter to limit the number of items to be returned, between 1 and 100 (default). The offset parameter is used to specify a number of items to skip.  # Errors  Sigfox API uses conventional HTTP response codes to indicate the success or failure of an API request.  Codes in the 2xx range indicate success.  Codes in the 4xx range indicate an error that failed given the information provided (e.g. a required parameter missing, a resource was not found, etc.). Often the response will also include a message explaining the error.  Codes in the 5xx range indicate an error with servers.   For more information please refer to the [Response code article](https://support.sigfox.com/docs/api-response-code-references).   # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from sigfox_api_client.api_client import ApiClient


class TilesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def kmz_create_monarch(self, body, **kwargs):  # noqa: E501
        """Compute Sigfox Monarch coverage in order to allow export as kmz file  # noqa: E501

        Starting the computation of Sigfox Monarch coverage view for a specific coverage mode. A new computation starts if no other computation, run in the last 24 hours, is available. Otherwise, the existing jobId is returned.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kmz_create_monarch(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param KmzCreatePublicRequest body: The computation will be performed with the specified coverage mode (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.kmz_create_monarch_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.kmz_create_monarch_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def kmz_create_monarch_with_http_info(self, body, **kwargs):  # noqa: E501
        """Compute Sigfox Monarch coverage in order to allow export as kmz file  # noqa: E501

        Starting the computation of Sigfox Monarch coverage view for a specific coverage mode. A new computation starts if no other computation, run in the last 24 hours, is available. Otherwise, the existing jobId is returned.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kmz_create_monarch_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param KmzCreatePublicRequest body: The computation will be performed with the specified coverage mode (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method kmz_create_monarch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `kmz_create_monarch`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tiles/monarch/kmz', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def kmz_create_public_operator(self, body, group_id, **kwargs):  # noqa: E501
        """Compute Sigfox Public operator public coverage in order to allow export as kmz file  # noqa: E501

        Starting the computation of Sigfox public operator coverage view for a specific coverage mode. A new computation starts if no other computation, run in the last 24 hours, is available. Otherwise, the existing jobId is returned.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kmz_create_public_operator(body, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param KmzCreatePublicRequest body: The computation will be performed with the specified coverage mode (required)
        :param str group_id: The operator's group identifier (hexadecimal format) (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.kmz_create_public_operator_with_http_info(body, group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.kmz_create_public_operator_with_http_info(body, group_id, **kwargs)  # noqa: E501
            return data

    def kmz_create_public_operator_with_http_info(self, body, group_id, **kwargs):  # noqa: E501
        """Compute Sigfox Public operator public coverage in order to allow export as kmz file  # noqa: E501

        Starting the computation of Sigfox public operator coverage view for a specific coverage mode. A new computation starts if no other computation, run in the last 24 hours, is available. Otherwise, the existing jobId is returned.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kmz_create_public_operator_with_http_info(body, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param KmzCreatePublicRequest body: The computation will be performed with the specified coverage mode (required)
        :param str group_id: The operator's group identifier (hexadecimal format) (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method kmz_create_public_operator" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `kmz_create_public_operator`")  # noqa: E501
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `kmz_create_public_operator`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['groupId'] = params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tiles/public-operator/{groupId}/kmz', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def kmz_file_monarch(self, job_id, zoom, north, south, west, east, **kwargs):  # noqa: E501
        """Retrieve Sigfox Monarch coverage kmz file  # noqa: E501

        Retrieve Sigfox Monarch coverage kmz from a job   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kmz_file_monarch(job_id, zoom, north, south, west, east, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_id: The job's identifier (hexademical format) (required)
        :param int zoom: The zoom level used to generate kmz file (required)
        :param float north: The north boundary to extract coverage (required)
        :param float south: The south boundary to extract coverage (required)
        :param float west: The west boundary to extract coverage (required)
        :param float east: The east boundary to extract coverage (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.kmz_file_monarch_with_http_info(job_id, zoom, north, south, west, east, **kwargs)  # noqa: E501
        else:
            (data) = self.kmz_file_monarch_with_http_info(job_id, zoom, north, south, west, east, **kwargs)  # noqa: E501
            return data

    def kmz_file_monarch_with_http_info(self, job_id, zoom, north, south, west, east, **kwargs):  # noqa: E501
        """Retrieve Sigfox Monarch coverage kmz file  # noqa: E501

        Retrieve Sigfox Monarch coverage kmz from a job   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kmz_file_monarch_with_http_info(job_id, zoom, north, south, west, east, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_id: The job's identifier (hexademical format) (required)
        :param int zoom: The zoom level used to generate kmz file (required)
        :param float north: The north boundary to extract coverage (required)
        :param float south: The south boundary to extract coverage (required)
        :param float west: The west boundary to extract coverage (required)
        :param float east: The east boundary to extract coverage (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['job_id', 'zoom', 'north', 'south', 'west', 'east']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method kmz_file_monarch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'job_id' is set
        if ('job_id' not in params or
                params['job_id'] is None):
            raise ValueError("Missing the required parameter `job_id` when calling `kmz_file_monarch`")  # noqa: E501
        # verify the required parameter 'zoom' is set
        if ('zoom' not in params or
                params['zoom'] is None):
            raise ValueError("Missing the required parameter `zoom` when calling `kmz_file_monarch`")  # noqa: E501
        # verify the required parameter 'north' is set
        if ('north' not in params or
                params['north'] is None):
            raise ValueError("Missing the required parameter `north` when calling `kmz_file_monarch`")  # noqa: E501
        # verify the required parameter 'south' is set
        if ('south' not in params or
                params['south'] is None):
            raise ValueError("Missing the required parameter `south` when calling `kmz_file_monarch`")  # noqa: E501
        # verify the required parameter 'west' is set
        if ('west' not in params or
                params['west'] is None):
            raise ValueError("Missing the required parameter `west` when calling `kmz_file_monarch`")  # noqa: E501
        # verify the required parameter 'east' is set
        if ('east' not in params or
                params['east'] is None):
            raise ValueError("Missing the required parameter `east` when calling `kmz_file_monarch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501

        query_params = []
        if 'zoom' in params:
            query_params.append(('zoom', params['zoom']))  # noqa: E501
        if 'north' in params:
            query_params.append(('north', params['north']))  # noqa: E501
        if 'south' in params:
            query_params.append(('south', params['south']))  # noqa: E501
        if 'west' in params:
            query_params.append(('west', params['west']))  # noqa: E501
        if 'east' in params:
            query_params.append(('east', params['east']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.google-earth.kmz'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tiles/monarch/kmz/{jobId}/tiles.kmz', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def kmz_file_public_coverage(self, zoom, north, south, west, east, **kwargs):  # noqa: E501
        """Retrieve Sigfox public coverage kmz file  # noqa: E501

        Retrieve Sigfox public coverage kmz file from a job. The public coverage is always available and does not require a previous calculation   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kmz_file_public_coverage(zoom, north, south, west, east, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int zoom: The zoom level used to generate kmz file (required)
        :param float north: The north boundary to extract coverage (required)
        :param float south: The south boundary to extract coverage (required)
        :param float west: The west boundary to extract coverage (required)
        :param float east: The east boundary to extract coverage (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.kmz_file_public_coverage_with_http_info(zoom, north, south, west, east, **kwargs)  # noqa: E501
        else:
            (data) = self.kmz_file_public_coverage_with_http_info(zoom, north, south, west, east, **kwargs)  # noqa: E501
            return data

    def kmz_file_public_coverage_with_http_info(self, zoom, north, south, west, east, **kwargs):  # noqa: E501
        """Retrieve Sigfox public coverage kmz file  # noqa: E501

        Retrieve Sigfox public coverage kmz file from a job. The public coverage is always available and does not require a previous calculation   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kmz_file_public_coverage_with_http_info(zoom, north, south, west, east, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int zoom: The zoom level used to generate kmz file (required)
        :param float north: The north boundary to extract coverage (required)
        :param float south: The south boundary to extract coverage (required)
        :param float west: The west boundary to extract coverage (required)
        :param float east: The east boundary to extract coverage (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['zoom', 'north', 'south', 'west', 'east']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method kmz_file_public_coverage" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'zoom' is set
        if ('zoom' not in params or
                params['zoom'] is None):
            raise ValueError("Missing the required parameter `zoom` when calling `kmz_file_public_coverage`")  # noqa: E501
        # verify the required parameter 'north' is set
        if ('north' not in params or
                params['north'] is None):
            raise ValueError("Missing the required parameter `north` when calling `kmz_file_public_coverage`")  # noqa: E501
        # verify the required parameter 'south' is set
        if ('south' not in params or
                params['south'] is None):
            raise ValueError("Missing the required parameter `south` when calling `kmz_file_public_coverage`")  # noqa: E501
        # verify the required parameter 'west' is set
        if ('west' not in params or
                params['west'] is None):
            raise ValueError("Missing the required parameter `west` when calling `kmz_file_public_coverage`")  # noqa: E501
        # verify the required parameter 'east' is set
        if ('east' not in params or
                params['east'] is None):
            raise ValueError("Missing the required parameter `east` when calling `kmz_file_public_coverage`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'zoom' in params:
            query_params.append(('zoom', params['zoom']))  # noqa: E501
        if 'north' in params:
            query_params.append(('north', params['north']))  # noqa: E501
        if 'south' in params:
            query_params.append(('south', params['south']))  # noqa: E501
        if 'west' in params:
            query_params.append(('west', params['west']))  # noqa: E501
        if 'east' in params:
            query_params.append(('east', params['east']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.google-earth.kmz'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tiles/public-coverage/kmz/tiles.kmz', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def kmz_file_public_operator(self, group_id, job_id, zoom, north, south, west, east, **kwargs):  # noqa: E501
        """Retrieve Sigfox public Operator coverage kmz file  # noqa: E501

        Retrieve Sigfox public Operator coverage kmz from a job   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kmz_file_public_operator(group_id, job_id, zoom, north, south, west, east, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: The operator's group identifier (hexadecimal format) (required)
        :param str job_id: The job's identifier (hexademical format) (required)
        :param int zoom: The zoom level used to generate kmz file (required)
        :param float north: The north boundary to extract coverage (required)
        :param float south: The south boundary to extract coverage (required)
        :param float west: The west boundary to extract coverage (required)
        :param float east: The east boundary to extract coverage (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.kmz_file_public_operator_with_http_info(group_id, job_id, zoom, north, south, west, east, **kwargs)  # noqa: E501
        else:
            (data) = self.kmz_file_public_operator_with_http_info(group_id, job_id, zoom, north, south, west, east, **kwargs)  # noqa: E501
            return data

    def kmz_file_public_operator_with_http_info(self, group_id, job_id, zoom, north, south, west, east, **kwargs):  # noqa: E501
        """Retrieve Sigfox public Operator coverage kmz file  # noqa: E501

        Retrieve Sigfox public Operator coverage kmz from a job   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kmz_file_public_operator_with_http_info(group_id, job_id, zoom, north, south, west, east, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: The operator's group identifier (hexadecimal format) (required)
        :param str job_id: The job's identifier (hexademical format) (required)
        :param int zoom: The zoom level used to generate kmz file (required)
        :param float north: The north boundary to extract coverage (required)
        :param float south: The south boundary to extract coverage (required)
        :param float west: The west boundary to extract coverage (required)
        :param float east: The east boundary to extract coverage (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'job_id', 'zoom', 'north', 'south', 'west', 'east']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method kmz_file_public_operator" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `kmz_file_public_operator`")  # noqa: E501
        # verify the required parameter 'job_id' is set
        if ('job_id' not in params or
                params['job_id'] is None):
            raise ValueError("Missing the required parameter `job_id` when calling `kmz_file_public_operator`")  # noqa: E501
        # verify the required parameter 'zoom' is set
        if ('zoom' not in params or
                params['zoom'] is None):
            raise ValueError("Missing the required parameter `zoom` when calling `kmz_file_public_operator`")  # noqa: E501
        # verify the required parameter 'north' is set
        if ('north' not in params or
                params['north'] is None):
            raise ValueError("Missing the required parameter `north` when calling `kmz_file_public_operator`")  # noqa: E501
        # verify the required parameter 'south' is set
        if ('south' not in params or
                params['south'] is None):
            raise ValueError("Missing the required parameter `south` when calling `kmz_file_public_operator`")  # noqa: E501
        # verify the required parameter 'west' is set
        if ('west' not in params or
                params['west'] is None):
            raise ValueError("Missing the required parameter `west` when calling `kmz_file_public_operator`")  # noqa: E501
        # verify the required parameter 'east' is set
        if ('east' not in params or
                params['east'] is None):
            raise ValueError("Missing the required parameter `east` when calling `kmz_file_public_operator`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['groupId'] = params['group_id']  # noqa: E501
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501

        query_params = []
        if 'zoom' in params:
            query_params.append(('zoom', params['zoom']))  # noqa: E501
        if 'north' in params:
            query_params.append(('north', params['north']))  # noqa: E501
        if 'south' in params:
            query_params.append(('south', params['south']))  # noqa: E501
        if 'west' in params:
            query_params.append(('west', params['west']))  # noqa: E501
        if 'east' in params:
            query_params.append(('east', params['east']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.google-earth.kmz'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tiles/public-operator/{groupId}/kmz/{jobId}/tiles.kmz', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def kmz_status_monarch(self, job_id, **kwargs):  # noqa: E501
        """Retrieve Sigfox Monarch coverage kmz computed job results  # noqa: E501

        Retrieve Sigfox Monarch coverage kmz computation from asynchronous job status   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kmz_status_monarch(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_id: The job's identifier (hexademical format) (required)
        :return: KmzStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.kmz_status_monarch_with_http_info(job_id, **kwargs)  # noqa: E501
        else:
            (data) = self.kmz_status_monarch_with_http_info(job_id, **kwargs)  # noqa: E501
            return data

    def kmz_status_monarch_with_http_info(self, job_id, **kwargs):  # noqa: E501
        """Retrieve Sigfox Monarch coverage kmz computed job results  # noqa: E501

        Retrieve Sigfox Monarch coverage kmz computation from asynchronous job status   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kmz_status_monarch_with_http_info(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_id: The job's identifier (hexademical format) (required)
        :return: KmzStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['job_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method kmz_status_monarch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'job_id' is set
        if ('job_id' not in params or
                params['job_id'] is None):
            raise ValueError("Missing the required parameter `job_id` when calling `kmz_status_monarch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tiles/monarch/kmz/{jobId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='KmzStatusResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def kmz_status_public_operator(self, group_id, job_id, **kwargs):  # noqa: E501
        """Retrieve Sigfox public Operator coverage kmz computed job results  # noqa: E501

        Retrieve Sigfox Sigfox public Operator coverage kmz computation from asynchronous job status   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kmz_status_public_operator(group_id, job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: The operator's group identifier (hexadecimal format) (required)
        :param str job_id: The job's identifier (hexademical format) (required)
        :return: KmzStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.kmz_status_public_operator_with_http_info(group_id, job_id, **kwargs)  # noqa: E501
        else:
            (data) = self.kmz_status_public_operator_with_http_info(group_id, job_id, **kwargs)  # noqa: E501
            return data

    def kmz_status_public_operator_with_http_info(self, group_id, job_id, **kwargs):  # noqa: E501
        """Retrieve Sigfox public Operator coverage kmz computed job results  # noqa: E501

        Retrieve Sigfox Sigfox public Operator coverage kmz computation from asynchronous job status   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kmz_status_public_operator_with_http_info(group_id, job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: The operator's group identifier (hexadecimal format) (required)
        :param str job_id: The job's identifier (hexademical format) (required)
        :return: KmzStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'job_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method kmz_status_public_operator" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `kmz_status_public_operator`")  # noqa: E501
        # verify the required parameter 'job_id' is set
        if ('job_id' not in params or
                params['job_id'] is None):
            raise ValueError("Missing the required parameter `job_id` when calling `kmz_status_public_operator`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['groupId'] = params['group_id']  # noqa: E501
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tiles/public-operator/{groupId}/kmz/{jobId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='KmzStatusResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tiles_monarch_get(self, **kwargs):  # noqa: E501
        """Retrieve the information needed to display Sigfox Monarch service coverage.  # noqa: E501

        Retrieve the information needed to display Sigfox Monarch service coverage.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tiles_monarch_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: TilesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tiles_monarch_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.tiles_monarch_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def tiles_monarch_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve the information needed to display Sigfox Monarch service coverage.  # noqa: E501

        Retrieve the information needed to display Sigfox Monarch service coverage.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tiles_monarch_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: TilesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tiles_monarch_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tiles/monarch', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TilesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tiles_public_coverage_get(self, **kwargs):  # noqa: E501
        """Retrieve the information needed to display Sigfox public coverage.  # noqa: E501

        Retrieve the information needed to display Sigfox public coverage.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tiles_public_coverage_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: TilesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tiles_public_coverage_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.tiles_public_coverage_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def tiles_public_coverage_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve the information needed to display Sigfox public coverage.  # noqa: E501

        Retrieve the information needed to display Sigfox public coverage.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tiles_public_coverage_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: TilesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tiles_public_coverage_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tiles/public-coverage', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TilesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
