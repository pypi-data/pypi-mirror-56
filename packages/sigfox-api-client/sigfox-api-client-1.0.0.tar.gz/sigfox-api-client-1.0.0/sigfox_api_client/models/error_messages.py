# coding: utf-8

"""
    Sigfox API

     # API overview Sigfox API is used to integrate with the Sigfox platform.  The API uses the HTTP protocol, following the REST principles (POST, GET, DELETE, PUT requests). The API endpoints accept and return data in the JSON format, with the corresponding \"application/json\" content type header.  The Sigfox API access differs for every API User based on their profile. If you already have a Sigfox account, you can retrieve the API Documentation customized for your API User directly in json or yaml format. The “how to” procedure is detailed in the [API Documentation](https://support.sigfox.com/docs/api-documentation) article.  The PUT request is the only request used to edit an existing entity. You don't need to specify each value. If a property is not present in the request, it won't be processed and updated. To remove an optional property, it must be filled in the request with the explicit value NULL. If a property has no value, it won't appear in the result of a GET request.  # Authentication and security Sigfox API is only accessible using HTTPS, and all API endpoints require authentication credentials (API user login and password). An API User is associated to a group with given profiles. You can view and manage your API User in the [Sigfox Portal](https://backend.sigfox.com/auth/login).  If you need an API User, follow the [API credential creation](https://support.sigfox.com/docs/api-credential-creation) procedure.  Your API User must remain private. Should the API credentials be compromised, new ones can be generated at any moment, invalidating the previous ones. CORS and JSONP are intentionally unsupported. CORS and JSONP JavaScript techniques tends to expose your credentials to your users. If you really need to call Sigfox API from JavaScript in the browser, you must set a reverse proxy on your website. Be careful not to use proxy for all requests to Sigfox OSS but to only select the relevant ones.  <!-- ReDoc-Inject: <security-definitions> -->  # Usage limits All Sigfox API endpoints are using the same underlying technology that powers the core Sigfox Platform. For Cloud efficiency and security reasons, Sigfox is moving a step forward on API rate limiting, by setting upper bounds for some API endpoints. Please note that a new HTTP response will be returned in case of rate exceeded : “HTTP 429: too many requests”.  For more information check [API Rate limiting](https://support.sigfox.com/docs/api-rate-limiting) policy. Sigfox reserves the right to modify these limits without notice.  # Versioning  Sigfox API supports versioning of its endpoints through a version suffix in the endpoint URL. This suffix has the following format: \"vX\", where X is the version number. For example: v2/device.  All requests must include the version suffix in the endpoint URL.  Any new backwards-incompatible change will be released in a new version.   Read the [API versioning management](https://storage.sbg1.cloud.ovh.net/v1/AUTH_669d7dfced0b44518cb186841d7cbd75/prod_docs/55746591-API_Versioning_management.pdf) to learn more about it.  # Paging  Some API requests will return a list of data. If the list is longer than the set limit, the items will be retrieved via multiple requests. The paging section in the response will specify a URL for the next request.  Keep in mind rate limiting policy to manage your requests.  You can use the limit parameter to limit the number of items to be returned, between 1 and 100 (default). The offset parameter is used to specify a number of items to skip.  # Errors  Sigfox API uses conventional HTTP response codes to indicate the success or failure of an API request.  Codes in the 2xx range indicate success.  Codes in the 4xx range indicate an error that failed given the information provided (e.g. a required parameter missing, a resource was not found, etc.). Often the response will also include a message explaining the error.  Codes in the 5xx range indicate an error with servers.   For more information please refer to the [Response code article](https://support.sigfox.com/docs/api-response-code-references).   # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ErrorMessages(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device': 'str',
        'device_url': 'str',
        'device_type': 'str',
        'time': 'int',
        'data': 'str',
        'snr': 'str',
        'status': 'str',
        'message': 'str',
        'callback': 'CallbackMedium',
        'parameters': 'object'
    }

    attribute_map = {
        'device': 'device',
        'device_url': 'deviceUrl',
        'device_type': 'deviceType',
        'time': 'time',
        'data': 'data',
        'snr': 'snr',
        'status': 'status',
        'message': 'message',
        'callback': 'callback',
        'parameters': 'parameters'
    }

    def __init__(self, device=None, device_url=None, device_type=None, time=None, data=None, snr=None, status=None, message=None, callback=None, parameters=None):  # noqa: E501
        """ErrorMessages - a model defined in Swagger"""  # noqa: E501
        self._device = None
        self._device_url = None
        self._device_type = None
        self._time = None
        self._data = None
        self._snr = None
        self._status = None
        self._message = None
        self._callback = None
        self._parameters = None
        self.discriminator = None
        if device is not None:
            self.device = device
        if device_url is not None:
            self.device_url = device_url
        if device_type is not None:
            self.device_type = device_type
        if time is not None:
            self.time = time
        if data is not None:
            self.data = data
        if snr is not None:
            self.snr = snr
        if status is not None:
            self.status = status
        if message is not None:
            self.message = message
        if callback is not None:
            self.callback = callback
        if parameters is not None:
            self.parameters = parameters

    @property
    def device(self):
        """Gets the device of this ErrorMessages.  # noqa: E501

        Device identifier  # noqa: E501

        :return: The device of this ErrorMessages.  # noqa: E501
        :rtype: str
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this ErrorMessages.

        Device identifier  # noqa: E501

        :param device: The device of this ErrorMessages.  # noqa: E501
        :type: str
        """

        self._device = device

    @property
    def device_url(self):
        """Gets the device_url of this ErrorMessages.  # noqa: E501

        Url to the device  # noqa: E501

        :return: The device_url of this ErrorMessages.  # noqa: E501
        :rtype: str
        """
        return self._device_url

    @device_url.setter
    def device_url(self, device_url):
        """Sets the device_url of this ErrorMessages.

        Url to the device  # noqa: E501

        :param device_url: The device_url of this ErrorMessages.  # noqa: E501
        :type: str
        """

        self._device_url = device_url

    @property
    def device_type(self):
        """Gets the device_type of this ErrorMessages.  # noqa: E501

        Device type identifier  # noqa: E501

        :return: The device_type of this ErrorMessages.  # noqa: E501
        :rtype: str
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this ErrorMessages.

        Device type identifier  # noqa: E501

        :param device_type: The device_type of this ErrorMessages.  # noqa: E501
        :type: str
        """

        self._device_type = device_type

    @property
    def time(self):
        """Gets the time of this ErrorMessages.  # noqa: E501

        Timestamp of the message (posix format)  # noqa: E501

        :return: The time of this ErrorMessages.  # noqa: E501
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this ErrorMessages.

        Timestamp of the message (posix format)  # noqa: E501

        :param time: The time of this ErrorMessages.  # noqa: E501
        :type: int
        """

        self._time = time

    @property
    def data(self):
        """Gets the data of this ErrorMessages.  # noqa: E501

        Data message  # noqa: E501

        :return: The data of this ErrorMessages.  # noqa: E501
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this ErrorMessages.

        Data message  # noqa: E501

        :param data: The data of this ErrorMessages.  # noqa: E501
        :type: str
        """

        self._data = data

    @property
    def snr(self):
        """Gets the snr of this ErrorMessages.  # noqa: E501

        The SNR of the messages received by the network so far  # noqa: E501

        :return: The snr of this ErrorMessages.  # noqa: E501
        :rtype: str
        """
        return self._snr

    @snr.setter
    def snr(self, snr):
        """Sets the snr of this ErrorMessages.

        The SNR of the messages received by the network so far  # noqa: E501

        :param snr: The snr of this ErrorMessages.  # noqa: E501
        :type: str
        """

        self._snr = snr

    @property
    def status(self):
        """Gets the status of this ErrorMessages.  # noqa: E501

        Contains the callback response status.  # noqa: E501

        :return: The status of this ErrorMessages.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ErrorMessages.

        Contains the callback response status.  # noqa: E501

        :param status: The status of this ErrorMessages.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def message(self):
        """Gets the message of this ErrorMessages.  # noqa: E501

        Contains additional information on the response.  # noqa: E501

        :return: The message of this ErrorMessages.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ErrorMessages.

        Contains additional information on the response.  # noqa: E501

        :param message: The message of this ErrorMessages.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def callback(self):
        """Gets the callback of this ErrorMessages.  # noqa: E501


        :return: The callback of this ErrorMessages.  # noqa: E501
        :rtype: CallbackMedium
        """
        return self._callback

    @callback.setter
    def callback(self, callback):
        """Sets the callback of this ErrorMessages.


        :param callback: The callback of this ErrorMessages.  # noqa: E501
        :type: CallbackMedium
        """

        self._callback = callback

    @property
    def parameters(self):
        """Gets the parameters of this ErrorMessages.  # noqa: E501

        All the parameters which have served to build the callback, see callback doc for an exhaustive list.  # noqa: E501

        :return: The parameters of this ErrorMessages.  # noqa: E501
        :rtype: object
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this ErrorMessages.

        All the parameters which have served to build the callback, see callback doc for an exhaustive list.  # noqa: E501

        :param parameters: The parameters of this ErrorMessages.  # noqa: E501
        :type: object
        """

        self._parameters = parameters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ErrorMessages, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ErrorMessages):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
