# coding: utf-8

"""
    Sigfox API

     # API overview Sigfox API is used to integrate with the Sigfox platform.  The API uses the HTTP protocol, following the REST principles (POST, GET, DELETE, PUT requests). The API endpoints accept and return data in the JSON format, with the corresponding \"application/json\" content type header.  The Sigfox API access differs for every API User based on their profile. If you already have a Sigfox account, you can retrieve the API Documentation customized for your API User directly in json or yaml format. The “how to” procedure is detailed in the [API Documentation](https://support.sigfox.com/docs/api-documentation) article.  The PUT request is the only request used to edit an existing entity. You don't need to specify each value. If a property is not present in the request, it won't be processed and updated. To remove an optional property, it must be filled in the request with the explicit value NULL. If a property has no value, it won't appear in the result of a GET request.  # Authentication and security Sigfox API is only accessible using HTTPS, and all API endpoints require authentication credentials (API user login and password). An API User is associated to a group with given profiles. You can view and manage your API User in the [Sigfox Portal](https://backend.sigfox.com/auth/login).  If you need an API User, follow the [API credential creation](https://support.sigfox.com/docs/api-credential-creation) procedure.  Your API User must remain private. Should the API credentials be compromised, new ones can be generated at any moment, invalidating the previous ones. CORS and JSONP are intentionally unsupported. CORS and JSONP JavaScript techniques tends to expose your credentials to your users. If you really need to call Sigfox API from JavaScript in the browser, you must set a reverse proxy on your website. Be careful not to use proxy for all requests to Sigfox OSS but to only select the relevant ones.  <!-- ReDoc-Inject: <security-definitions> -->  # Usage limits All Sigfox API endpoints are using the same underlying technology that powers the core Sigfox Platform. For Cloud efficiency and security reasons, Sigfox is moving a step forward on API rate limiting, by setting upper bounds for some API endpoints. Please note that a new HTTP response will be returned in case of rate exceeded : “HTTP 429: too many requests”.  For more information check [API Rate limiting](https://support.sigfox.com/docs/api-rate-limiting) policy. Sigfox reserves the right to modify these limits without notice.  # Versioning  Sigfox API supports versioning of its endpoints through a version suffix in the endpoint URL. This suffix has the following format: \"vX\", where X is the version number. For example: v2/device.  All requests must include the version suffix in the endpoint URL.  Any new backwards-incompatible change will be released in a new version.   Read the [API versioning management](https://storage.sbg1.cloud.ovh.net/v1/AUTH_669d7dfced0b44518cb186841d7cbd75/prod_docs/55746591-API_Versioning_management.pdf) to learn more about it.  # Paging  Some API requests will return a list of data. If the list is longer than the set limit, the items will be retrieved via multiple requests. The paging section in the response will specify a URL for the next request.  Keep in mind rate limiting policy to manage your requests.  You can use the limit parameter to limit the number of items to be returned, between 1 and 100 (default). The offset parameter is used to specify a number of items to skip.  # Errors  Sigfox API uses conventional HTTP response codes to indicate the success or failure of an API request.  Codes in the 2xx range indicate success.  Codes in the 4xx range indicate an error that failed given the information provided (e.g. a required parameter missing, a resource was not found, etc.). Often the response will also include a message explaining the error.  Codes in the 5xx range indicate an error with servers.   For more information please refer to the [Response code article](https://support.sigfox.com/docs/api-response-code-references).   # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from sigfox_api_client.models.common_certificate import CommonCertificate


class ProductCertificateWithPacResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'external_id': 'str',
        'certificate_code': 'int',
        'certificate_index': 'int',
        'qualification_time': 'int',
        'report_number': 'str',
        'input_sensitivity': 'int',
        'encryption_payload': 'bool',
        'dev_kit': 'bool',
        'modes': 'list[int]',
        'standards': 'list[RadioConfiguration]',
        'standard_cfgs': 'list[ProductCertificateRadioConfiguration]'
    }
    if hasattr(CommonCertificate, "swagger_types"):
        swagger_types.update(CommonCertificate.swagger_types)

    attribute_map = {
        'external_id': 'externalId',
        'certificate_code': 'certificateCode',
        'certificate_index': 'certificateIndex',
        'qualification_time': 'qualificationTime',
        'report_number': 'reportNumber',
        'input_sensitivity': 'inputSensitivity',
        'encryption_payload': 'encryptionPayload',
        'dev_kit': 'devKit',
        'modes': 'modes',
        'standards': 'standards',
        'standard_cfgs': 'standardCfgs'
    }
    if hasattr(CommonCertificate, "attribute_map"):
        attribute_map.update(CommonCertificate.attribute_map)

    def __init__(self, external_id=None, certificate_code=None, certificate_index=None, qualification_time=None, report_number=None, input_sensitivity=None, encryption_payload=None, dev_kit=None, modes=None, standards=None, standard_cfgs=None, *args, **kwargs):  # noqa: E501
        """ProductCertificateWithPacResponse - a model defined in Swagger"""  # noqa: E501
        self._external_id = None
        self._certificate_code = None
        self._certificate_index = None
        self._qualification_time = None
        self._report_number = None
        self._input_sensitivity = None
        self._encryption_payload = None
        self._dev_kit = None
        self._modes = None
        self._standards = None
        self._standard_cfgs = None
        self.discriminator = None
        if external_id is not None:
            self.external_id = external_id
        if certificate_code is not None:
            self.certificate_code = certificate_code
        if certificate_index is not None:
            self.certificate_index = certificate_index
        if qualification_time is not None:
            self.qualification_time = qualification_time
        if report_number is not None:
            self.report_number = report_number
        if input_sensitivity is not None:
            self.input_sensitivity = input_sensitivity
        if encryption_payload is not None:
            self.encryption_payload = encryption_payload
        if dev_kit is not None:
            self.dev_kit = dev_kit
        if modes is not None:
            self.modes = modes
        if standards is not None:
            self.standards = standards
        if standard_cfgs is not None:
            self.standard_cfgs = standard_cfgs
        CommonCertificate.__init__(self, *args, **kwargs)

    @property
    def external_id(self):
        """Gets the external_id of this ProductCertificateWithPacResponse.  # noqa: E501

        External Id of the certificate  # noqa: E501

        :return: The external_id of this ProductCertificateWithPacResponse.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this ProductCertificateWithPacResponse.

        External Id of the certificate  # noqa: E501

        :param external_id: The external_id of this ProductCertificateWithPacResponse.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def certificate_code(self):
        """Gets the certificate_code of this ProductCertificateWithPacResponse.  # noqa: E501

        Certificate's code  # noqa: E501

        :return: The certificate_code of this ProductCertificateWithPacResponse.  # noqa: E501
        :rtype: int
        """
        return self._certificate_code

    @certificate_code.setter
    def certificate_code(self, certificate_code):
        """Sets the certificate_code of this ProductCertificateWithPacResponse.

        Certificate's code  # noqa: E501

        :param certificate_code: The certificate_code of this ProductCertificateWithPacResponse.  # noqa: E501
        :type: int
        """

        self._certificate_code = certificate_code

    @property
    def certificate_index(self):
        """Gets the certificate_index of this ProductCertificateWithPacResponse.  # noqa: E501

        Certificate's index  # noqa: E501

        :return: The certificate_index of this ProductCertificateWithPacResponse.  # noqa: E501
        :rtype: int
        """
        return self._certificate_index

    @certificate_index.setter
    def certificate_index(self, certificate_index):
        """Sets the certificate_index of this ProductCertificateWithPacResponse.

        Certificate's index  # noqa: E501

        :param certificate_index: The certificate_index of this ProductCertificateWithPacResponse.  # noqa: E501
        :type: int
        """

        self._certificate_index = certificate_index

    @property
    def qualification_time(self):
        """Gets the qualification_time of this ProductCertificateWithPacResponse.  # noqa: E501

        Date of qualification (in milliseconds since the Unix Epoch)  # noqa: E501

        :return: The qualification_time of this ProductCertificateWithPacResponse.  # noqa: E501
        :rtype: int
        """
        return self._qualification_time

    @qualification_time.setter
    def qualification_time(self, qualification_time):
        """Sets the qualification_time of this ProductCertificateWithPacResponse.

        Date of qualification (in milliseconds since the Unix Epoch)  # noqa: E501

        :param qualification_time: The qualification_time of this ProductCertificateWithPacResponse.  # noqa: E501
        :type: int
        """

        self._qualification_time = qualification_time

    @property
    def report_number(self):
        """Gets the report_number of this ProductCertificateWithPacResponse.  # noqa: E501

        Report number  # noqa: E501

        :return: The report_number of this ProductCertificateWithPacResponse.  # noqa: E501
        :rtype: str
        """
        return self._report_number

    @report_number.setter
    def report_number(self, report_number):
        """Sets the report_number of this ProductCertificateWithPacResponse.

        Report number  # noqa: E501

        :param report_number: The report_number of this ProductCertificateWithPacResponse.  # noqa: E501
        :type: str
        """

        self._report_number = report_number

    @property
    def input_sensitivity(self):
        """Gets the input_sensitivity of this ProductCertificateWithPacResponse.  # noqa: E501

        Input sensitivity  # noqa: E501

        :return: The input_sensitivity of this ProductCertificateWithPacResponse.  # noqa: E501
        :rtype: int
        """
        return self._input_sensitivity

    @input_sensitivity.setter
    def input_sensitivity(self, input_sensitivity):
        """Sets the input_sensitivity of this ProductCertificateWithPacResponse.

        Input sensitivity  # noqa: E501

        :param input_sensitivity: The input_sensitivity of this ProductCertificateWithPacResponse.  # noqa: E501
        :type: int
        """

        self._input_sensitivity = input_sensitivity

    @property
    def encryption_payload(self):
        """Gets the encryption_payload of this ProductCertificateWithPacResponse.  # noqa: E501

        true if the payload will be encrypted  # noqa: E501

        :return: The encryption_payload of this ProductCertificateWithPacResponse.  # noqa: E501
        :rtype: bool
        """
        return self._encryption_payload

    @encryption_payload.setter
    def encryption_payload(self, encryption_payload):
        """Sets the encryption_payload of this ProductCertificateWithPacResponse.

        true if the payload will be encrypted  # noqa: E501

        :param encryption_payload: The encryption_payload of this ProductCertificateWithPacResponse.  # noqa: E501
        :type: bool
        """

        self._encryption_payload = encryption_payload

    @property
    def dev_kit(self):
        """Gets the dev_kit of this ProductCertificateWithPacResponse.  # noqa: E501

        DevKit Flag  # noqa: E501

        :return: The dev_kit of this ProductCertificateWithPacResponse.  # noqa: E501
        :rtype: bool
        """
        return self._dev_kit

    @dev_kit.setter
    def dev_kit(self, dev_kit):
        """Sets the dev_kit of this ProductCertificateWithPacResponse.

        DevKit Flag  # noqa: E501

        :param dev_kit: The dev_kit of this ProductCertificateWithPacResponse.  # noqa: E501
        :type: bool
        """

        self._dev_kit = dev_kit

    @property
    def modes(self):
        """Gets the modes of this ProductCertificateWithPacResponse.  # noqa: E501

        List of modes of the certificate [1=DOWNLINK, 2=MONARCH]  # noqa: E501

        :return: The modes of this ProductCertificateWithPacResponse.  # noqa: E501
        :rtype: list[int]
        """
        return self._modes

    @modes.setter
    def modes(self, modes):
        """Sets the modes of this ProductCertificateWithPacResponse.

        List of modes of the certificate [1=DOWNLINK, 2=MONARCH]  # noqa: E501

        :param modes: The modes of this ProductCertificateWithPacResponse.  # noqa: E501
        :type: list[int]
        """

        self._modes = modes

    @property
    def standards(self):
        """Gets the standards of this ProductCertificateWithPacResponse.  # noqa: E501


        :return: The standards of this ProductCertificateWithPacResponse.  # noqa: E501
        :rtype: list[RadioConfiguration]
        """
        return self._standards

    @standards.setter
    def standards(self, standards):
        """Sets the standards of this ProductCertificateWithPacResponse.


        :param standards: The standards of this ProductCertificateWithPacResponse.  # noqa: E501
        :type: list[RadioConfiguration]
        """

        self._standards = standards

    @property
    def standard_cfgs(self):
        """Gets the standard_cfgs of this ProductCertificateWithPacResponse.  # noqa: E501


        :return: The standard_cfgs of this ProductCertificateWithPacResponse.  # noqa: E501
        :rtype: list[ProductCertificateRadioConfiguration]
        """
        return self._standard_cfgs

    @standard_cfgs.setter
    def standard_cfgs(self, standard_cfgs):
        """Sets the standard_cfgs of this ProductCertificateWithPacResponse.


        :param standard_cfgs: The standard_cfgs of this ProductCertificateWithPacResponse.  # noqa: E501
        :type: list[ProductCertificateRadioConfiguration]
        """

        self._standard_cfgs = standard_cfgs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductCertificateWithPacResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductCertificateWithPacResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
