# coding: utf-8

"""
    Sigfox API

     # API overview Sigfox API is used to integrate with the Sigfox platform.  The API uses the HTTP protocol, following the REST principles (POST, GET, DELETE, PUT requests). The API endpoints accept and return data in the JSON format, with the corresponding \"application/json\" content type header.  The Sigfox API access differs for every API User based on their profile. If you already have a Sigfox account, you can retrieve the API Documentation customized for your API User directly in json or yaml format. The “how to” procedure is detailed in the [API Documentation](https://support.sigfox.com/docs/api-documentation) article.  The PUT request is the only request used to edit an existing entity. You don't need to specify each value. If a property is not present in the request, it won't be processed and updated. To remove an optional property, it must be filled in the request with the explicit value NULL. If a property has no value, it won't appear in the result of a GET request.  # Authentication and security Sigfox API is only accessible using HTTPS, and all API endpoints require authentication credentials (API user login and password). An API User is associated to a group with given profiles. You can view and manage your API User in the [Sigfox Portal](https://backend.sigfox.com/auth/login).  If you need an API User, follow the [API credential creation](https://support.sigfox.com/docs/api-credential-creation) procedure.  Your API User must remain private. Should the API credentials be compromised, new ones can be generated at any moment, invalidating the previous ones. CORS and JSONP are intentionally unsupported. CORS and JSONP JavaScript techniques tends to expose your credentials to your users. If you really need to call Sigfox API from JavaScript in the browser, you must set a reverse proxy on your website. Be careful not to use proxy for all requests to Sigfox OSS but to only select the relevant ones.  <!-- ReDoc-Inject: <security-definitions> -->  # Usage limits All Sigfox API endpoints are using the same underlying technology that powers the core Sigfox Platform. For Cloud efficiency and security reasons, Sigfox is moving a step forward on API rate limiting, by setting upper bounds for some API endpoints. Please note that a new HTTP response will be returned in case of rate exceeded : “HTTP 429: too many requests”.  For more information check [API Rate limiting](https://support.sigfox.com/docs/api-rate-limiting) policy. Sigfox reserves the right to modify these limits without notice.  # Versioning  Sigfox API supports versioning of its endpoints through a version suffix in the endpoint URL. This suffix has the following format: \"vX\", where X is the version number. For example: v2/device.  All requests must include the version suffix in the endpoint URL.  Any new backwards-incompatible change will be released in a new version.   Read the [API versioning management](https://storage.sbg1.cloud.ovh.net/v1/AUTH_669d7dfced0b44518cb186841d7cbd75/prod_docs/55746591-API_Versioning_management.pdf) to learn more about it.  # Paging  Some API requests will return a list of data. If the list is longer than the set limit, the items will be retrieved via multiple requests. The paging section in the response will specify a URL for the next request.  Keep in mind rate limiting policy to manage your requests.  You can use the limit parameter to limit the number of items to be returned, between 1 and 100 (default). The offset parameter is used to specify a number of items to skip.  # Errors  Sigfox API uses conventional HTTP response codes to indicate the success or failure of an API request.  Codes in the 2xx range indicate success.  Codes in the 4xx range indicate an error that failed given the information provided (e.g. a required parameter missing, a resource was not found, etc.). Often the response will also include a message explaining the error.  Codes in the 5xx range indicate an error with servers.   For more information please refer to the [Response code article](https://support.sigfox.com/docs/api-response-code-references).   # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class BaseStation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'version_current': 'str',
        'hw_version': 'str',
        'group': 'object',
        'first_commissioning_time': 'int',
        'commissioning_time': 'int',
        'decommissioning_time': 'int',
        'operating_days': 'int',
        'manufacturer_delivery_time': 'int',
        'warranty_time': 'int',
        'last_communication_time': 'int',
        'last_ping_time': 'int',
        'restart_time': 'int',
        'connection_type': 'int',
        'description': 'str',
        'location': 'list[object]',
        'hw_family': 'object',
        'keep_alive': 'int',
        'lat': 'float',
        'lng': 'float',
        'communication_state': 'int',
        'state': 'int',
        'lifecycle_status': 'int',
        'queue': 'object',
        'muted': 'bool',
        'transmission_authorized': 'bool',
        'downlink_enabled': 'bool',
        'installer': 'str',
        'creation_time': 'int',
        'created_by': 'str',
        'last_edition_time': 'int',
        'last_edited_by': 'str',
        'base_frequency': 'int',
        'downlink_center_frequency': 'int',
        'macro_channel': 'int',
        'tx_power_amplification': 'int',
        'protocol': 'int',
        'pre_amp1': 'int',
        'pre_amp2': 'int',
        'ram_log': 'int',
        'wwan_mode': 'int',
        'bit_rate': 'int',
        'global_coverage_enable': 'bool',
        'elevation': 'int',
        'splat_radius': 'int',
        'mast_equipment': 'int',
        'mast_equipment_description': 'str',
        'lna_by_pass': 'bool',
        'cavity_filter_version': 'int',
        'cavity_filter_version_description': 'str',
        'environment_loss': 'float',
        'cable_loss': 'float',
        'antenna_gain': 'float',
        'antenna_noise_figure': 'float',
        'antenna_insertion_loss': 'float',
        'antenna_max_admissible_power': 'float',
        'gain_flag': 'bool',
        'mast_equipment_gain': 'float',
        'mast_equipment_noise_figure': 'float',
        'lna_insertion_loss': 'float',
        'cavity_filter_insertion_loss': 'float',
        'tx_power_margin': 'float',
        'power_capability': 'float',
        'antenna_location_code': 'int',
        'service_coverage': 'int',
        'geoloc_computation': 'int',
        'antenna': 'object',
        'available_connections': 'list[int]',
        'maker_code': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'version_current': 'versionCurrent',
        'hw_version': 'hwVersion',
        'group': 'group',
        'first_commissioning_time': 'firstCommissioningTime',
        'commissioning_time': 'commissioningTime',
        'decommissioning_time': 'decommissioningTime',
        'operating_days': 'operatingDays',
        'manufacturer_delivery_time': 'manufacturerDeliveryTime',
        'warranty_time': 'warrantyTime',
        'last_communication_time': 'lastCommunicationTime',
        'last_ping_time': 'lastPingTime',
        'restart_time': 'restartTime',
        'connection_type': 'connectionType',
        'description': 'description',
        'location': 'location',
        'hw_family': 'hwFamily',
        'keep_alive': 'keepAlive',
        'lat': 'lat',
        'lng': 'lng',
        'communication_state': 'communicationState',
        'state': 'state',
        'lifecycle_status': 'lifecycleStatus',
        'queue': 'queue',
        'muted': 'muted',
        'transmission_authorized': 'transmissionAuthorized',
        'downlink_enabled': 'downlinkEnabled',
        'installer': 'installer',
        'creation_time': 'creationTime',
        'created_by': 'createdBy',
        'last_edition_time': 'lastEditionTime',
        'last_edited_by': 'lastEditedBy',
        'base_frequency': 'baseFrequency',
        'downlink_center_frequency': 'downlinkCenterFrequency',
        'macro_channel': 'macroChannel',
        'tx_power_amplification': 'txPowerAmplification',
        'protocol': 'protocol',
        'pre_amp1': 'preAmp1',
        'pre_amp2': 'preAmp2',
        'ram_log': 'RAMLog',
        'wwan_mode': 'wwanMode',
        'bit_rate': 'bitRate',
        'global_coverage_enable': 'globalCoverageEnable',
        'elevation': 'elevation',
        'splat_radius': 'splatRadius',
        'mast_equipment': 'mastEquipment',
        'mast_equipment_description': 'mastEquipmentDescription',
        'lna_by_pass': 'lnaByPass',
        'cavity_filter_version': 'cavityFilterVersion',
        'cavity_filter_version_description': 'cavityFilterVersionDescription',
        'environment_loss': 'environmentLoss',
        'cable_loss': 'cableLoss',
        'antenna_gain': 'antennaGain',
        'antenna_noise_figure': 'antennaNoiseFigure',
        'antenna_insertion_loss': 'antennaInsertionLoss',
        'antenna_max_admissible_power': 'antennaMaxAdmissiblePower',
        'gain_flag': 'gainFlag',
        'mast_equipment_gain': 'mastEquipmentGain',
        'mast_equipment_noise_figure': 'mastEquipmentNoiseFigure',
        'lna_insertion_loss': 'lnaInsertionLoss',
        'cavity_filter_insertion_loss': 'cavityFilterInsertionLoss',
        'tx_power_margin': 'txPowerMargin',
        'power_capability': 'powerCapability',
        'antenna_location_code': 'antennaLocationCode',
        'service_coverage': 'serviceCoverage',
        'geoloc_computation': 'geolocComputation',
        'antenna': 'antenna',
        'available_connections': 'availableConnections',
        'maker_code': 'makerCode'
    }

    def __init__(self, id=None, name=None, version_current=None, hw_version=None, group=None, first_commissioning_time=None, commissioning_time=None, decommissioning_time=None, operating_days=None, manufacturer_delivery_time=None, warranty_time=None, last_communication_time=None, last_ping_time=None, restart_time=None, connection_type=None, description=None, location=None, hw_family=None, keep_alive=None, lat=None, lng=None, communication_state=None, state=None, lifecycle_status=None, queue=None, muted=None, transmission_authorized=None, downlink_enabled=None, installer=None, creation_time=None, created_by=None, last_edition_time=None, last_edited_by=None, base_frequency=None, downlink_center_frequency=None, macro_channel=None, tx_power_amplification=None, protocol=None, pre_amp1=None, pre_amp2=None, ram_log=None, wwan_mode=None, bit_rate=None, global_coverage_enable=None, elevation=None, splat_radius=None, mast_equipment=None, mast_equipment_description=None, lna_by_pass=None, cavity_filter_version=None, cavity_filter_version_description=None, environment_loss=None, cable_loss=None, antenna_gain=None, antenna_noise_figure=None, antenna_insertion_loss=None, antenna_max_admissible_power=None, gain_flag=None, mast_equipment_gain=None, mast_equipment_noise_figure=None, lna_insertion_loss=None, cavity_filter_insertion_loss=None, tx_power_margin=None, power_capability=None, antenna_location_code=None, service_coverage=None, geoloc_computation=None, antenna=None, available_connections=None, maker_code=None):  # noqa: E501
        """BaseStation - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._version_current = None
        self._hw_version = None
        self._group = None
        self._first_commissioning_time = None
        self._commissioning_time = None
        self._decommissioning_time = None
        self._operating_days = None
        self._manufacturer_delivery_time = None
        self._warranty_time = None
        self._last_communication_time = None
        self._last_ping_time = None
        self._restart_time = None
        self._connection_type = None
        self._description = None
        self._location = None
        self._hw_family = None
        self._keep_alive = None
        self._lat = None
        self._lng = None
        self._communication_state = None
        self._state = None
        self._lifecycle_status = None
        self._queue = None
        self._muted = None
        self._transmission_authorized = None
        self._downlink_enabled = None
        self._installer = None
        self._creation_time = None
        self._created_by = None
        self._last_edition_time = None
        self._last_edited_by = None
        self._base_frequency = None
        self._downlink_center_frequency = None
        self._macro_channel = None
        self._tx_power_amplification = None
        self._protocol = None
        self._pre_amp1 = None
        self._pre_amp2 = None
        self._ram_log = None
        self._wwan_mode = None
        self._bit_rate = None
        self._global_coverage_enable = None
        self._elevation = None
        self._splat_radius = None
        self._mast_equipment = None
        self._mast_equipment_description = None
        self._lna_by_pass = None
        self._cavity_filter_version = None
        self._cavity_filter_version_description = None
        self._environment_loss = None
        self._cable_loss = None
        self._antenna_gain = None
        self._antenna_noise_figure = None
        self._antenna_insertion_loss = None
        self._antenna_max_admissible_power = None
        self._gain_flag = None
        self._mast_equipment_gain = None
        self._mast_equipment_noise_figure = None
        self._lna_insertion_loss = None
        self._cavity_filter_insertion_loss = None
        self._tx_power_margin = None
        self._power_capability = None
        self._antenna_location_code = None
        self._service_coverage = None
        self._geoloc_computation = None
        self._antenna = None
        self._available_connections = None
        self._maker_code = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if version_current is not None:
            self.version_current = version_current
        if hw_version is not None:
            self.hw_version = hw_version
        if group is not None:
            self.group = group
        if first_commissioning_time is not None:
            self.first_commissioning_time = first_commissioning_time
        if commissioning_time is not None:
            self.commissioning_time = commissioning_time
        if decommissioning_time is not None:
            self.decommissioning_time = decommissioning_time
        if operating_days is not None:
            self.operating_days = operating_days
        if manufacturer_delivery_time is not None:
            self.manufacturer_delivery_time = manufacturer_delivery_time
        if warranty_time is not None:
            self.warranty_time = warranty_time
        if last_communication_time is not None:
            self.last_communication_time = last_communication_time
        if last_ping_time is not None:
            self.last_ping_time = last_ping_time
        if restart_time is not None:
            self.restart_time = restart_time
        if connection_type is not None:
            self.connection_type = connection_type
        if description is not None:
            self.description = description
        if location is not None:
            self.location = location
        if hw_family is not None:
            self.hw_family = hw_family
        if keep_alive is not None:
            self.keep_alive = keep_alive
        if lat is not None:
            self.lat = lat
        if lng is not None:
            self.lng = lng
        if communication_state is not None:
            self.communication_state = communication_state
        if state is not None:
            self.state = state
        if lifecycle_status is not None:
            self.lifecycle_status = lifecycle_status
        if queue is not None:
            self.queue = queue
        if muted is not None:
            self.muted = muted
        if transmission_authorized is not None:
            self.transmission_authorized = transmission_authorized
        if downlink_enabled is not None:
            self.downlink_enabled = downlink_enabled
        if installer is not None:
            self.installer = installer
        if creation_time is not None:
            self.creation_time = creation_time
        if created_by is not None:
            self.created_by = created_by
        if last_edition_time is not None:
            self.last_edition_time = last_edition_time
        if last_edited_by is not None:
            self.last_edited_by = last_edited_by
        if base_frequency is not None:
            self.base_frequency = base_frequency
        if downlink_center_frequency is not None:
            self.downlink_center_frequency = downlink_center_frequency
        if macro_channel is not None:
            self.macro_channel = macro_channel
        if tx_power_amplification is not None:
            self.tx_power_amplification = tx_power_amplification
        if protocol is not None:
            self.protocol = protocol
        if pre_amp1 is not None:
            self.pre_amp1 = pre_amp1
        if pre_amp2 is not None:
            self.pre_amp2 = pre_amp2
        if ram_log is not None:
            self.ram_log = ram_log
        if wwan_mode is not None:
            self.wwan_mode = wwan_mode
        if bit_rate is not None:
            self.bit_rate = bit_rate
        if global_coverage_enable is not None:
            self.global_coverage_enable = global_coverage_enable
        if elevation is not None:
            self.elevation = elevation
        if splat_radius is not None:
            self.splat_radius = splat_radius
        if mast_equipment is not None:
            self.mast_equipment = mast_equipment
        if mast_equipment_description is not None:
            self.mast_equipment_description = mast_equipment_description
        if lna_by_pass is not None:
            self.lna_by_pass = lna_by_pass
        if cavity_filter_version is not None:
            self.cavity_filter_version = cavity_filter_version
        if cavity_filter_version_description is not None:
            self.cavity_filter_version_description = cavity_filter_version_description
        if environment_loss is not None:
            self.environment_loss = environment_loss
        if cable_loss is not None:
            self.cable_loss = cable_loss
        if antenna_gain is not None:
            self.antenna_gain = antenna_gain
        if antenna_noise_figure is not None:
            self.antenna_noise_figure = antenna_noise_figure
        if antenna_insertion_loss is not None:
            self.antenna_insertion_loss = antenna_insertion_loss
        if antenna_max_admissible_power is not None:
            self.antenna_max_admissible_power = antenna_max_admissible_power
        if gain_flag is not None:
            self.gain_flag = gain_flag
        if mast_equipment_gain is not None:
            self.mast_equipment_gain = mast_equipment_gain
        if mast_equipment_noise_figure is not None:
            self.mast_equipment_noise_figure = mast_equipment_noise_figure
        if lna_insertion_loss is not None:
            self.lna_insertion_loss = lna_insertion_loss
        if cavity_filter_insertion_loss is not None:
            self.cavity_filter_insertion_loss = cavity_filter_insertion_loss
        if tx_power_margin is not None:
            self.tx_power_margin = tx_power_margin
        if power_capability is not None:
            self.power_capability = power_capability
        if antenna_location_code is not None:
            self.antenna_location_code = antenna_location_code
        if service_coverage is not None:
            self.service_coverage = service_coverage
        if geoloc_computation is not None:
            self.geoloc_computation = geoloc_computation
        if antenna is not None:
            self.antenna = antenna
        if available_connections is not None:
            self.available_connections = available_connections
        if maker_code is not None:
            self.maker_code = maker_code

    @property
    def id(self):
        """Gets the id of this BaseStation.  # noqa: E501

        The base station's identifier (hexadecimal format)  # noqa: E501

        :return: The id of this BaseStation.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BaseStation.

        The base station's identifier (hexadecimal format)  # noqa: E501

        :param id: The id of this BaseStation.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this BaseStation.  # noqa: E501

        The base station's name  # noqa: E501

        :return: The name of this BaseStation.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BaseStation.

        The base station's name  # noqa: E501

        :param name: The name of this BaseStation.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def version_current(self):
        """Gets the version_current of this BaseStation.  # noqa: E501

        The current version of the software installed on this base station  # noqa: E501

        :return: The version_current of this BaseStation.  # noqa: E501
        :rtype: str
        """
        return self._version_current

    @version_current.setter
    def version_current(self, version_current):
        """Sets the version_current of this BaseStation.

        The current version of the software installed on this base station  # noqa: E501

        :param version_current: The version_current of this BaseStation.  # noqa: E501
        :type: str
        """

        self._version_current = version_current

    @property
    def hw_version(self):
        """Gets the hw_version of this BaseStation.  # noqa: E501

        The current version of the hardware of this base station  # noqa: E501

        :return: The hw_version of this BaseStation.  # noqa: E501
        :rtype: str
        """
        return self._hw_version

    @hw_version.setter
    def hw_version(self, hw_version):
        """Sets the hw_version of this BaseStation.

        The current version of the hardware of this base station  # noqa: E501

        :param hw_version: The hw_version of this BaseStation.  # noqa: E501
        :type: str
        """

        self._hw_version = hw_version

    @property
    def group(self):
        """Gets the group of this BaseStation.  # noqa: E501


        :return: The group of this BaseStation.  # noqa: E501
        :rtype: object
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this BaseStation.


        :param group: The group of this BaseStation.  # noqa: E501
        :type: object
        """

        self._group = group

    @property
    def first_commissioning_time(self):
        """Gets the first_commissioning_time of this BaseStation.  # noqa: E501

        The first commissioning time of the station (in milliseconds)  # noqa: E501

        :return: The first_commissioning_time of this BaseStation.  # noqa: E501
        :rtype: int
        """
        return self._first_commissioning_time

    @first_commissioning_time.setter
    def first_commissioning_time(self, first_commissioning_time):
        """Sets the first_commissioning_time of this BaseStation.

        The first commissioning time of the station (in milliseconds)  # noqa: E501

        :param first_commissioning_time: The first_commissioning_time of this BaseStation.  # noqa: E501
        :type: int
        """

        self._first_commissioning_time = first_commissioning_time

    @property
    def commissioning_time(self):
        """Gets the commissioning_time of this BaseStation.  # noqa: E501

        The commissioning time of the station (in milliseconds)  # noqa: E501

        :return: The commissioning_time of this BaseStation.  # noqa: E501
        :rtype: int
        """
        return self._commissioning_time

    @commissioning_time.setter
    def commissioning_time(self, commissioning_time):
        """Sets the commissioning_time of this BaseStation.

        The commissioning time of the station (in milliseconds)  # noqa: E501

        :param commissioning_time: The commissioning_time of this BaseStation.  # noqa: E501
        :type: int
        """

        self._commissioning_time = commissioning_time

    @property
    def decommissioning_time(self):
        """Gets the decommissioning_time of this BaseStation.  # noqa: E501

        The decommissioning time of the station (in milliseconds)  # noqa: E501

        :return: The decommissioning_time of this BaseStation.  # noqa: E501
        :rtype: int
        """
        return self._decommissioning_time

    @decommissioning_time.setter
    def decommissioning_time(self, decommissioning_time):
        """Sets the decommissioning_time of this BaseStation.

        The decommissioning time of the station (in milliseconds)  # noqa: E501

        :param decommissioning_time: The decommissioning_time of this BaseStation.  # noqa: E501
        :type: int
        """

        self._decommissioning_time = decommissioning_time

    @property
    def operating_days(self):
        """Gets the operating_days of this BaseStation.  # noqa: E501

        The number of operating days of the station. To present if the station was not decommissioned, or to decommisioning time otherwise  # noqa: E501

        :return: The operating_days of this BaseStation.  # noqa: E501
        :rtype: int
        """
        return self._operating_days

    @operating_days.setter
    def operating_days(self, operating_days):
        """Sets the operating_days of this BaseStation.

        The number of operating days of the station. To present if the station was not decommissioned, or to decommisioning time otherwise  # noqa: E501

        :param operating_days: The operating_days of this BaseStation.  # noqa: E501
        :type: int
        """

        self._operating_days = operating_days

    @property
    def manufacturer_delivery_time(self):
        """Gets the manufacturer_delivery_time of this BaseStation.  # noqa: E501

        Date of the delivery made by the manufacturer for this base station  # noqa: E501

        :return: The manufacturer_delivery_time of this BaseStation.  # noqa: E501
        :rtype: int
        """
        return self._manufacturer_delivery_time

    @manufacturer_delivery_time.setter
    def manufacturer_delivery_time(self, manufacturer_delivery_time):
        """Sets the manufacturer_delivery_time of this BaseStation.

        Date of the delivery made by the manufacturer for this base station  # noqa: E501

        :param manufacturer_delivery_time: The manufacturer_delivery_time of this BaseStation.  # noqa: E501
        :type: int
        """

        self._manufacturer_delivery_time = manufacturer_delivery_time

    @property
    def warranty_time(self):
        """Gets the warranty_time of this BaseStation.  # noqa: E501

        Date of the beginning of the warranty for this base station  # noqa: E501

        :return: The warranty_time of this BaseStation.  # noqa: E501
        :rtype: int
        """
        return self._warranty_time

    @warranty_time.setter
    def warranty_time(self, warranty_time):
        """Sets the warranty_time of this BaseStation.

        Date of the beginning of the warranty for this base station  # noqa: E501

        :param warranty_time: The warranty_time of this BaseStation.  # noqa: E501
        :type: int
        """

        self._warranty_time = warranty_time

    @property
    def last_communication_time(self):
        """Gets the last_communication_time of this BaseStation.  # noqa: E501

        Date of the last communication made with this base station  # noqa: E501

        :return: The last_communication_time of this BaseStation.  # noqa: E501
        :rtype: int
        """
        return self._last_communication_time

    @last_communication_time.setter
    def last_communication_time(self, last_communication_time):
        """Sets the last_communication_time of this BaseStation.

        Date of the last communication made with this base station  # noqa: E501

        :param last_communication_time: The last_communication_time of this BaseStation.  # noqa: E501
        :type: int
        """

        self._last_communication_time = last_communication_time

    @property
    def last_ping_time(self):
        """Gets the last_ping_time of this BaseStation.  # noqa: E501

        Date of the last PING received from this base station  # noqa: E501

        :return: The last_ping_time of this BaseStation.  # noqa: E501
        :rtype: int
        """
        return self._last_ping_time

    @last_ping_time.setter
    def last_ping_time(self, last_ping_time):
        """Sets the last_ping_time of this BaseStation.

        Date of the last PING received from this base station  # noqa: E501

        :param last_ping_time: The last_ping_time of this BaseStation.  # noqa: E501
        :type: int
        """

        self._last_ping_time = last_ping_time

    @property
    def restart_time(self):
        """Gets the restart_time of this BaseStation.  # noqa: E501

        Date of the last restart of this base station  # noqa: E501

        :return: The restart_time of this BaseStation.  # noqa: E501
        :rtype: int
        """
        return self._restart_time

    @restart_time.setter
    def restart_time(self, restart_time):
        """Sets the restart_time of this BaseStation.

        Date of the last restart of this base station  # noqa: E501

        :param restart_time: The restart_time of this BaseStation.  # noqa: E501
        :type: int
        """

        self._restart_time = restart_time

    @property
    def connection_type(self):
        """Gets the connection_type of this BaseStation.  # noqa: E501

        Base station connection type. 0 -> ETH 1 -> GSM   # noqa: E501

        :return: The connection_type of this BaseStation.  # noqa: E501
        :rtype: int
        """
        return self._connection_type

    @connection_type.setter
    def connection_type(self, connection_type):
        """Sets the connection_type of this BaseStation.

        Base station connection type. 0 -> ETH 1 -> GSM   # noqa: E501

        :param connection_type: The connection_type of this BaseStation.  # noqa: E501
        :type: int
        """

        self._connection_type = connection_type

    @property
    def description(self):
        """Gets the description of this BaseStation.  # noqa: E501

        Description of the base station  # noqa: E501

        :return: The description of this BaseStation.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BaseStation.

        Description of the base station  # noqa: E501

        :param description: The description of this BaseStation.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def location(self):
        """Gets the location of this BaseStation.  # noqa: E501

        ISO 3166-1 UN M.49 country code of the site location. The first code is the country (region and department available for some countries).  # noqa: E501

        :return: The location of this BaseStation.  # noqa: E501
        :rtype: list[object]
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this BaseStation.

        ISO 3166-1 UN M.49 country code of the site location. The first code is the country (region and department available for some countries).  # noqa: E501

        :param location: The location of this BaseStation.  # noqa: E501
        :type: list[object]
        """

        self._location = location

    @property
    def hw_family(self):
        """Gets the hw_family of this BaseStation.  # noqa: E501


        :return: The hw_family of this BaseStation.  # noqa: E501
        :rtype: object
        """
        return self._hw_family

    @hw_family.setter
    def hw_family(self, hw_family):
        """Sets the hw_family of this BaseStation.


        :param hw_family: The hw_family of this BaseStation.  # noqa: E501
        :type: object
        """

        self._hw_family = hw_family

    @property
    def keep_alive(self):
        """Gets the keep_alive of this BaseStation.  # noqa: E501

        Number of seconds the base station keep alive  # noqa: E501

        :return: The keep_alive of this BaseStation.  # noqa: E501
        :rtype: int
        """
        return self._keep_alive

    @keep_alive.setter
    def keep_alive(self, keep_alive):
        """Sets the keep_alive of this BaseStation.

        Number of seconds the base station keep alive  # noqa: E501

        :param keep_alive: The keep_alive of this BaseStation.  # noqa: E501
        :type: int
        """

        self._keep_alive = keep_alive

    @property
    def lat(self):
        """Gets the lat of this BaseStation.  # noqa: E501

        The base station's latitude  # noqa: E501

        :return: The lat of this BaseStation.  # noqa: E501
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this BaseStation.

        The base station's latitude  # noqa: E501

        :param lat: The lat of this BaseStation.  # noqa: E501
        :type: float
        """

        self._lat = lat

    @property
    def lng(self):
        """Gets the lng of this BaseStation.  # noqa: E501

        The base station's longitude  # noqa: E501

        :return: The lng of this BaseStation.  # noqa: E501
        :rtype: float
        """
        return self._lng

    @lng.setter
    def lng(self, lng):
        """Sets the lng of this BaseStation.

        The base station's longitude  # noqa: E501

        :param lng: The lng of this BaseStation.  # noqa: E501
        :type: float
        """

        self._lng = lng

    @property
    def communication_state(self):
        """Gets the communication_state of this BaseStation.  # noqa: E501

        Base station communication state. 0 -> NO 1 -> OK 2 -> WARN 3 -> KO 4 -> OK KO   # noqa: E501

        :return: The communication_state of this BaseStation.  # noqa: E501
        :rtype: int
        """
        return self._communication_state

    @communication_state.setter
    def communication_state(self, communication_state):
        """Sets the communication_state of this BaseStation.

        Base station communication state. 0 -> NO 1 -> OK 2 -> WARN 3 -> KO 4 -> OK KO   # noqa: E501

        :param communication_state: The communication_state of this BaseStation.  # noqa: E501
        :type: int
        """

        self._communication_state = communication_state

    @property
    def state(self):
        """Gets the state of this BaseStation.  # noqa: E501

        Base station state. 0 -> NO 1 -> OK 2 -> WARN 3 -> KO 4 -> OK KO   # noqa: E501

        :return: The state of this BaseStation.  # noqa: E501
        :rtype: int
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this BaseStation.

        Base station state. 0 -> NO 1 -> OK 2 -> WARN 3 -> KO 4 -> OK KO   # noqa: E501

        :param state: The state of this BaseStation.  # noqa: E501
        :type: int
        """

        self._state = state

    @property
    def lifecycle_status(self):
        """Gets the lifecycle_status of this BaseStation.  # noqa: E501

        Base station lifecycle status 0 -> STOCK 1 -> PROD 2 -> MAINTENANCE 3 -> DEAD   # noqa: E501

        :return: The lifecycle_status of this BaseStation.  # noqa: E501
        :rtype: int
        """
        return self._lifecycle_status

    @lifecycle_status.setter
    def lifecycle_status(self, lifecycle_status):
        """Sets the lifecycle_status of this BaseStation.

        Base station lifecycle status 0 -> STOCK 1 -> PROD 2 -> MAINTENANCE 3 -> DEAD   # noqa: E501

        :param lifecycle_status: The lifecycle_status of this BaseStation.  # noqa: E501
        :type: int
        """

        self._lifecycle_status = lifecycle_status

    @property
    def queue(self):
        """Gets the queue of this BaseStation.  # noqa: E501


        :return: The queue of this BaseStation.  # noqa: E501
        :rtype: object
        """
        return self._queue

    @queue.setter
    def queue(self, queue):
        """Sets the queue of this BaseStation.


        :param queue: The queue of this BaseStation.  # noqa: E501
        :type: object
        """

        self._queue = queue

    @property
    def muted(self):
        """Gets the muted of this BaseStation.  # noqa: E501

        true if the base station is muted  # noqa: E501

        :return: The muted of this BaseStation.  # noqa: E501
        :rtype: bool
        """
        return self._muted

    @muted.setter
    def muted(self, muted):
        """Sets the muted of this BaseStation.

        true if the base station is muted  # noqa: E501

        :param muted: The muted of this BaseStation.  # noqa: E501
        :type: bool
        """

        self._muted = muted

    @property
    def transmission_authorized(self):
        """Gets the transmission_authorized of this BaseStation.  # noqa: E501

        true if the transmission is authorized on this base station  # noqa: E501

        :return: The transmission_authorized of this BaseStation.  # noqa: E501
        :rtype: bool
        """
        return self._transmission_authorized

    @transmission_authorized.setter
    def transmission_authorized(self, transmission_authorized):
        """Sets the transmission_authorized of this BaseStation.

        true if the transmission is authorized on this base station  # noqa: E501

        :param transmission_authorized: The transmission_authorized of this BaseStation.  # noqa: E501
        :type: bool
        """

        self._transmission_authorized = transmission_authorized

    @property
    def downlink_enabled(self):
        """Gets the downlink_enabled of this BaseStation.  # noqa: E501

        true if the downlink is enabled on this base station  # noqa: E501

        :return: The downlink_enabled of this BaseStation.  # noqa: E501
        :rtype: bool
        """
        return self._downlink_enabled

    @downlink_enabled.setter
    def downlink_enabled(self, downlink_enabled):
        """Sets the downlink_enabled of this BaseStation.

        true if the downlink is enabled on this base station  # noqa: E501

        :param downlink_enabled: The downlink_enabled of this BaseStation.  # noqa: E501
        :type: bool
        """

        self._downlink_enabled = downlink_enabled

    @property
    def installer(self):
        """Gets the installer of this BaseStation.  # noqa: E501

        Name if the installer of this base station  # noqa: E501

        :return: The installer of this BaseStation.  # noqa: E501
        :rtype: str
        """
        return self._installer

    @installer.setter
    def installer(self, installer):
        """Sets the installer of this BaseStation.

        Name if the installer of this base station  # noqa: E501

        :param installer: The installer of this BaseStation.  # noqa: E501
        :type: str
        """

        self._installer = installer

    @property
    def creation_time(self):
        """Gets the creation_time of this BaseStation.  # noqa: E501

        Date of the creation of the base station (in milliseconds since Unix Epoch)  # noqa: E501

        :return: The creation_time of this BaseStation.  # noqa: E501
        :rtype: int
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this BaseStation.

        Date of the creation of the base station (in milliseconds since Unix Epoch)  # noqa: E501

        :param creation_time: The creation_time of this BaseStation.  # noqa: E501
        :type: int
        """

        self._creation_time = creation_time

    @property
    def created_by(self):
        """Gets the created_by of this BaseStation.  # noqa: E501

        Id of the user who created this base station  # noqa: E501

        :return: The created_by of this BaseStation.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this BaseStation.

        Id of the user who created this base station  # noqa: E501

        :param created_by: The created_by of this BaseStation.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def last_edition_time(self):
        """Gets the last_edition_time of this BaseStation.  # noqa: E501

        Date of the last modification made on this base station (in milliseconds since Unix Epoch)  # noqa: E501

        :return: The last_edition_time of this BaseStation.  # noqa: E501
        :rtype: int
        """
        return self._last_edition_time

    @last_edition_time.setter
    def last_edition_time(self, last_edition_time):
        """Sets the last_edition_time of this BaseStation.

        Date of the last modification made on this base station (in milliseconds since Unix Epoch)  # noqa: E501

        :param last_edition_time: The last_edition_time of this BaseStation.  # noqa: E501
        :type: int
        """

        self._last_edition_time = last_edition_time

    @property
    def last_edited_by(self):
        """Gets the last_edited_by of this BaseStation.  # noqa: E501

        Id of the user who edited this base station for the last time  # noqa: E501

        :return: The last_edited_by of this BaseStation.  # noqa: E501
        :rtype: str
        """
        return self._last_edited_by

    @last_edited_by.setter
    def last_edited_by(self, last_edited_by):
        """Sets the last_edited_by of this BaseStation.

        Id of the user who edited this base station for the last time  # noqa: E501

        :param last_edited_by: The last_edited_by of this BaseStation.  # noqa: E501
        :type: str
        """

        self._last_edited_by = last_edited_by

    @property
    def base_frequency(self):
        """Gets the base_frequency of this BaseStation.  # noqa: E501

        Uplink base frequency of this base station (in Hz)  # noqa: E501

        :return: The base_frequency of this BaseStation.  # noqa: E501
        :rtype: int
        """
        return self._base_frequency

    @base_frequency.setter
    def base_frequency(self, base_frequency):
        """Sets the base_frequency of this BaseStation.

        Uplink base frequency of this base station (in Hz)  # noqa: E501

        :param base_frequency: The base_frequency of this BaseStation.  # noqa: E501
        :type: int
        """

        self._base_frequency = base_frequency

    @property
    def downlink_center_frequency(self):
        """Gets the downlink_center_frequency of this BaseStation.  # noqa: E501

        Downlink center frequency of this base station (in Hz)  # noqa: E501

        :return: The downlink_center_frequency of this BaseStation.  # noqa: E501
        :rtype: int
        """
        return self._downlink_center_frequency

    @downlink_center_frequency.setter
    def downlink_center_frequency(self, downlink_center_frequency):
        """Sets the downlink_center_frequency of this BaseStation.

        Downlink center frequency of this base station (in Hz)  # noqa: E501

        :param downlink_center_frequency: The downlink_center_frequency of this BaseStation.  # noqa: E501
        :type: int
        """

        self._downlink_center_frequency = downlink_center_frequency

    @property
    def macro_channel(self):
        """Gets the macro_channel of this BaseStation.  # noqa: E501

        Macro channel of this base station (in Hz)  # noqa: E501

        :return: The macro_channel of this BaseStation.  # noqa: E501
        :rtype: int
        """
        return self._macro_channel

    @macro_channel.setter
    def macro_channel(self, macro_channel):
        """Sets the macro_channel of this BaseStation.

        Macro channel of this base station (in Hz)  # noqa: E501

        :param macro_channel: The macro_channel of this BaseStation.  # noqa: E501
        :type: int
        """

        self._macro_channel = macro_channel

    @property
    def tx_power_amplification(self):
        """Gets the tx_power_amplification of this BaseStation.  # noqa: E501

        TX power amplification of this base station (in %)  # noqa: E501

        :return: The tx_power_amplification of this BaseStation.  # noqa: E501
        :rtype: int
        """
        return self._tx_power_amplification

    @tx_power_amplification.setter
    def tx_power_amplification(self, tx_power_amplification):
        """Sets the tx_power_amplification of this BaseStation.

        TX power amplification of this base station (in %)  # noqa: E501

        :param tx_power_amplification: The tx_power_amplification of this BaseStation.  # noqa: E501
        :type: int
        """

        self._tx_power_amplification = tx_power_amplification

    @property
    def protocol(self):
        """Gets the protocol of this BaseStation.  # noqa: E501

        Base station protocol. 1 -> V0 2 -> V1 3 -> BOTH   # noqa: E501

        :return: The protocol of this BaseStation.  # noqa: E501
        :rtype: int
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this BaseStation.

        Base station protocol. 1 -> V0 2 -> V1 3 -> BOTH   # noqa: E501

        :param protocol: The protocol of this BaseStation.  # noqa: E501
        :type: int
        """

        self._protocol = protocol

    @property
    def pre_amp1(self):
        """Gets the pre_amp1 of this BaseStation.  # noqa: E501

        Base station pre amp 1. 0 -> LNA 1 -> BYPASS 2 -> ATTEND   # noqa: E501

        :return: The pre_amp1 of this BaseStation.  # noqa: E501
        :rtype: int
        """
        return self._pre_amp1

    @pre_amp1.setter
    def pre_amp1(self, pre_amp1):
        """Sets the pre_amp1 of this BaseStation.

        Base station pre amp 1. 0 -> LNA 1 -> BYPASS 2 -> ATTEND   # noqa: E501

        :param pre_amp1: The pre_amp1 of this BaseStation.  # noqa: E501
        :type: int
        """

        self._pre_amp1 = pre_amp1

    @property
    def pre_amp2(self):
        """Gets the pre_amp2 of this BaseStation.  # noqa: E501

        Base station pre amp 2. 0 -> LNA 1 -> BYPASS 2 -> ATTEND   # noqa: E501

        :return: The pre_amp2 of this BaseStation.  # noqa: E501
        :rtype: int
        """
        return self._pre_amp2

    @pre_amp2.setter
    def pre_amp2(self, pre_amp2):
        """Sets the pre_amp2 of this BaseStation.

        Base station pre amp 2. 0 -> LNA 1 -> BYPASS 2 -> ATTEND   # noqa: E501

        :param pre_amp2: The pre_amp2 of this BaseStation.  # noqa: E501
        :type: int
        """

        self._pre_amp2 = pre_amp2

    @property
    def ram_log(self):
        """Gets the ram_log of this BaseStation.  # noqa: E501

        Base station RAM log. 0 -> YES 1 -> NO 2 -> AUTO 3 -> DROP   # noqa: E501

        :return: The ram_log of this BaseStation.  # noqa: E501
        :rtype: int
        """
        return self._ram_log

    @ram_log.setter
    def ram_log(self, ram_log):
        """Sets the ram_log of this BaseStation.

        Base station RAM log. 0 -> YES 1 -> NO 2 -> AUTO 3 -> DROP   # noqa: E501

        :param ram_log: The ram_log of this BaseStation.  # noqa: E501
        :type: int
        """

        self._ram_log = ram_log

    @property
    def wwan_mode(self):
        """Gets the wwan_mode of this BaseStation.  # noqa: E501

        Base station WWAN mode. 0 -> NONE 1 -> AUTO 2 -> WCDMA 3 -> WCDMA_PREF 4 -> GPRS_PREF 5 -> GPRS   # noqa: E501

        :return: The wwan_mode of this BaseStation.  # noqa: E501
        :rtype: int
        """
        return self._wwan_mode

    @wwan_mode.setter
    def wwan_mode(self, wwan_mode):
        """Sets the wwan_mode of this BaseStation.

        Base station WWAN mode. 0 -> NONE 1 -> AUTO 2 -> WCDMA 3 -> WCDMA_PREF 4 -> GPRS_PREF 5 -> GPRS   # noqa: E501

        :param wwan_mode: The wwan_mode of this BaseStation.  # noqa: E501
        :type: int
        """

        self._wwan_mode = wwan_mode

    @property
    def bit_rate(self):
        """Gets the bit_rate of this BaseStation.  # noqa: E501

        Base station bit rate. 0 -> bit rate 100 b/s 1 -> bit rate 600 b/s   # noqa: E501

        :return: The bit_rate of this BaseStation.  # noqa: E501
        :rtype: int
        """
        return self._bit_rate

    @bit_rate.setter
    def bit_rate(self, bit_rate):
        """Sets the bit_rate of this BaseStation.

        Base station bit rate. 0 -> bit rate 100 b/s 1 -> bit rate 600 b/s   # noqa: E501

        :param bit_rate: The bit_rate of this BaseStation.  # noqa: E501
        :type: int
        """

        self._bit_rate = bit_rate

    @property
    def global_coverage_enable(self):
        """Gets the global_coverage_enable of this BaseStation.  # noqa: E501

        true if the base station is available for the global coverage computation  # noqa: E501

        :return: The global_coverage_enable of this BaseStation.  # noqa: E501
        :rtype: bool
        """
        return self._global_coverage_enable

    @global_coverage_enable.setter
    def global_coverage_enable(self, global_coverage_enable):
        """Sets the global_coverage_enable of this BaseStation.

        true if the base station is available for the global coverage computation  # noqa: E501

        :param global_coverage_enable: The global_coverage_enable of this BaseStation.  # noqa: E501
        :type: bool
        """

        self._global_coverage_enable = global_coverage_enable

    @property
    def elevation(self):
        """Gets the elevation of this BaseStation.  # noqa: E501

        Antenna height of the base station (in m)  # noqa: E501

        :return: The elevation of this BaseStation.  # noqa: E501
        :rtype: int
        """
        return self._elevation

    @elevation.setter
    def elevation(self, elevation):
        """Sets the elevation of this BaseStation.

        Antenna height of the base station (in m)  # noqa: E501

        :param elevation: The elevation of this BaseStation.  # noqa: E501
        :type: int
        """

        self._elevation = elevation

    @property
    def splat_radius(self):
        """Gets the splat_radius of this BaseStation.  # noqa: E501

        Radius of the base station (in km)  # noqa: E501

        :return: The splat_radius of this BaseStation.  # noqa: E501
        :rtype: int
        """
        return self._splat_radius

    @splat_radius.setter
    def splat_radius(self, splat_radius):
        """Sets the splat_radius of this BaseStation.

        Radius of the base station (in km)  # noqa: E501

        :param splat_radius: The splat_radius of this BaseStation.  # noqa: E501
        :type: int
        """

        self._splat_radius = splat_radius

    @property
    def mast_equipment(self):
        """Gets the mast_equipment of this BaseStation.  # noqa: E501

        LNA version of the base station. Mini stations have type 7 -> MINI. Mini Access Stations have type 21. 0 -> OTHER 1 -> LNA_V2_SBS_868_P 2 -> LNA_V2_SBS_902_P 3 -> LNA_V2_NB_SBS_868_P 4 -> LNA_V1_SBS_868_P 5 -> LNA_V2_SBS_920_P 6 -> LNA_V2_SBS_923_P 7 -> MINI 8 -> LNA_V4_867 9 -> LNA_V4_915 10 -> LNAC_867 11 -> LNAC_868 12 -> LNAC_902 13 -> LNAC_916_TX 14 -> LNAC_921 15 -> LNAC_921_TX 16 -> LNAC_922_TX 17 -> LNA_V3_SBS_868_P 18 -> LNA_V3_SBS_902_P 19 -> LNA_V3_SBS_920_P 20 -> LNA_V3_SBS_923_P 21 -> NONE 22 -> LNAC_868_TX   # noqa: E501

        :return: The mast_equipment of this BaseStation.  # noqa: E501
        :rtype: int
        """
        return self._mast_equipment

    @mast_equipment.setter
    def mast_equipment(self, mast_equipment):
        """Sets the mast_equipment of this BaseStation.

        LNA version of the base station. Mini stations have type 7 -> MINI. Mini Access Stations have type 21. 0 -> OTHER 1 -> LNA_V2_SBS_868_P 2 -> LNA_V2_SBS_902_P 3 -> LNA_V2_NB_SBS_868_P 4 -> LNA_V1_SBS_868_P 5 -> LNA_V2_SBS_920_P 6 -> LNA_V2_SBS_923_P 7 -> MINI 8 -> LNA_V4_867 9 -> LNA_V4_915 10 -> LNAC_867 11 -> LNAC_868 12 -> LNAC_902 13 -> LNAC_916_TX 14 -> LNAC_921 15 -> LNAC_921_TX 16 -> LNAC_922_TX 17 -> LNA_V3_SBS_868_P 18 -> LNA_V3_SBS_902_P 19 -> LNA_V3_SBS_920_P 20 -> LNA_V3_SBS_923_P 21 -> NONE 22 -> LNAC_868_TX   # noqa: E501

        :param mast_equipment: The mast_equipment of this BaseStation.  # noqa: E501
        :type: int
        """

        self._mast_equipment = mast_equipment

    @property
    def mast_equipment_description(self):
        """Gets the mast_equipment_description of this BaseStation.  # noqa: E501

        The base station's mast equipment description  # noqa: E501

        :return: The mast_equipment_description of this BaseStation.  # noqa: E501
        :rtype: str
        """
        return self._mast_equipment_description

    @mast_equipment_description.setter
    def mast_equipment_description(self, mast_equipment_description):
        """Sets the mast_equipment_description of this BaseStation.

        The base station's mast equipment description  # noqa: E501

        :param mast_equipment_description: The mast_equipment_description of this BaseStation.  # noqa: E501
        :type: str
        """

        self._mast_equipment_description = mast_equipment_description

    @property
    def lna_by_pass(self):
        """Gets the lna_by_pass of this BaseStation.  # noqa: E501

        true if the LNA is by-passed  # noqa: E501

        :return: The lna_by_pass of this BaseStation.  # noqa: E501
        :rtype: bool
        """
        return self._lna_by_pass

    @lna_by_pass.setter
    def lna_by_pass(self, lna_by_pass):
        """Sets the lna_by_pass of this BaseStation.

        true if the LNA is by-passed  # noqa: E501

        :param lna_by_pass: The lna_by_pass of this BaseStation.  # noqa: E501
        :type: bool
        """

        self._lna_by_pass = lna_by_pass

    @property
    def cavity_filter_version(self):
        """Gets the cavity_filter_version of this BaseStation.  # noqa: E501

        Cavity filter version of the base station. -1 -> None 0 -> Other 1 -> ETSI 868MHz (Matech) 2 -> ETSI 868MHz (Elhyte) 3 -> FCC 905MHz (Matech) 4 -> FCC 905MHz (Elhyte) 5 -> FCC 920MHz 6 -> FCC 923MHz 7 -> FCC 922.5MHz 8 -> ETSI 867MHz (Matech) 9 -> ETSI 867MHz (Techniwave)   # noqa: E501

        :return: The cavity_filter_version of this BaseStation.  # noqa: E501
        :rtype: int
        """
        return self._cavity_filter_version

    @cavity_filter_version.setter
    def cavity_filter_version(self, cavity_filter_version):
        """Sets the cavity_filter_version of this BaseStation.

        Cavity filter version of the base station. -1 -> None 0 -> Other 1 -> ETSI 868MHz (Matech) 2 -> ETSI 868MHz (Elhyte) 3 -> FCC 905MHz (Matech) 4 -> FCC 905MHz (Elhyte) 5 -> FCC 920MHz 6 -> FCC 923MHz 7 -> FCC 922.5MHz 8 -> ETSI 867MHz (Matech) 9 -> ETSI 867MHz (Techniwave)   # noqa: E501

        :param cavity_filter_version: The cavity_filter_version of this BaseStation.  # noqa: E501
        :type: int
        """

        self._cavity_filter_version = cavity_filter_version

    @property
    def cavity_filter_version_description(self):
        """Gets the cavity_filter_version_description of this BaseStation.  # noqa: E501

        The base station's cavity filter version description  # noqa: E501

        :return: The cavity_filter_version_description of this BaseStation.  # noqa: E501
        :rtype: str
        """
        return self._cavity_filter_version_description

    @cavity_filter_version_description.setter
    def cavity_filter_version_description(self, cavity_filter_version_description):
        """Sets the cavity_filter_version_description of this BaseStation.

        The base station's cavity filter version description  # noqa: E501

        :param cavity_filter_version_description: The cavity_filter_version_description of this BaseStation.  # noqa: E501
        :type: str
        """

        self._cavity_filter_version_description = cavity_filter_version_description

    @property
    def environment_loss(self):
        """Gets the environment_loss of this BaseStation.  # noqa: E501

        Environment loss of this base station (in dB)  # noqa: E501

        :return: The environment_loss of this BaseStation.  # noqa: E501
        :rtype: float
        """
        return self._environment_loss

    @environment_loss.setter
    def environment_loss(self, environment_loss):
        """Sets the environment_loss of this BaseStation.

        Environment loss of this base station (in dB)  # noqa: E501

        :param environment_loss: The environment_loss of this BaseStation.  # noqa: E501
        :type: float
        """

        self._environment_loss = environment_loss

    @property
    def cable_loss(self):
        """Gets the cable_loss of this BaseStation.  # noqa: E501

        Cable loss of this base station (in dB)  # noqa: E501

        :return: The cable_loss of this BaseStation.  # noqa: E501
        :rtype: float
        """
        return self._cable_loss

    @cable_loss.setter
    def cable_loss(self, cable_loss):
        """Sets the cable_loss of this BaseStation.

        Cable loss of this base station (in dB)  # noqa: E501

        :param cable_loss: The cable_loss of this BaseStation.  # noqa: E501
        :type: float
        """

        self._cable_loss = cable_loss

    @property
    def antenna_gain(self):
        """Gets the antenna_gain of this BaseStation.  # noqa: E501

        Antenna gain of this base station (in dB).  # noqa: E501

        :return: The antenna_gain of this BaseStation.  # noqa: E501
        :rtype: float
        """
        return self._antenna_gain

    @antenna_gain.setter
    def antenna_gain(self, antenna_gain):
        """Sets the antenna_gain of this BaseStation.

        Antenna gain of this base station (in dB).  # noqa: E501

        :param antenna_gain: The antenna_gain of this BaseStation.  # noqa: E501
        :type: float
        """

        self._antenna_gain = antenna_gain

    @property
    def antenna_noise_figure(self):
        """Gets the antenna_noise_figure of this BaseStation.  # noqa: E501

        Antenna noise figure of this base station (in dB). This setting is only relevant when an antenna with a filter is installed.  # noqa: E501

        :return: The antenna_noise_figure of this BaseStation.  # noqa: E501
        :rtype: float
        """
        return self._antenna_noise_figure

    @antenna_noise_figure.setter
    def antenna_noise_figure(self, antenna_noise_figure):
        """Sets the antenna_noise_figure of this BaseStation.

        Antenna noise figure of this base station (in dB). This setting is only relevant when an antenna with a filter is installed.  # noqa: E501

        :param antenna_noise_figure: The antenna_noise_figure of this BaseStation.  # noqa: E501
        :type: float
        """

        self._antenna_noise_figure = antenna_noise_figure

    @property
    def antenna_insertion_loss(self):
        """Gets the antenna_insertion_loss of this BaseStation.  # noqa: E501

        Antenna insertion loss of this base station (in dB). This setting is only relevant when an antenna with a filter is installed.  # noqa: E501

        :return: The antenna_insertion_loss of this BaseStation.  # noqa: E501
        :rtype: float
        """
        return self._antenna_insertion_loss

    @antenna_insertion_loss.setter
    def antenna_insertion_loss(self, antenna_insertion_loss):
        """Sets the antenna_insertion_loss of this BaseStation.

        Antenna insertion loss of this base station (in dB). This setting is only relevant when an antenna with a filter is installed.  # noqa: E501

        :param antenna_insertion_loss: The antenna_insertion_loss of this BaseStation.  # noqa: E501
        :type: float
        """

        self._antenna_insertion_loss = antenna_insertion_loss

    @property
    def antenna_max_admissible_power(self):
        """Gets the antenna_max_admissible_power of this BaseStation.  # noqa: E501

        Antenna max admissible power of this base station (in dBm). This setting is only relevant when an antenna with a filter is installed.  # noqa: E501

        :return: The antenna_max_admissible_power of this BaseStation.  # noqa: E501
        :rtype: float
        """
        return self._antenna_max_admissible_power

    @antenna_max_admissible_power.setter
    def antenna_max_admissible_power(self, antenna_max_admissible_power):
        """Sets the antenna_max_admissible_power of this BaseStation.

        Antenna max admissible power of this base station (in dBm). This setting is only relevant when an antenna with a filter is installed.  # noqa: E501

        :param antenna_max_admissible_power: The antenna_max_admissible_power of this BaseStation.  # noqa: E501
        :type: float
        """

        self._antenna_max_admissible_power = antenna_max_admissible_power

    @property
    def gain_flag(self):
        """Gets the gain_flag of this BaseStation.  # noqa: E501

        true if the base station has a gain flag  # noqa: E501

        :return: The gain_flag of this BaseStation.  # noqa: E501
        :rtype: bool
        """
        return self._gain_flag

    @gain_flag.setter
    def gain_flag(self, gain_flag):
        """Sets the gain_flag of this BaseStation.

        true if the base station has a gain flag  # noqa: E501

        :param gain_flag: The gain_flag of this BaseStation.  # noqa: E501
        :type: bool
        """

        self._gain_flag = gain_flag

    @property
    def mast_equipment_gain(self):
        """Gets the mast_equipment_gain of this BaseStation.  # noqa: E501

        Mast equipment gain of this base station (in dB)  # noqa: E501

        :return: The mast_equipment_gain of this BaseStation.  # noqa: E501
        :rtype: float
        """
        return self._mast_equipment_gain

    @mast_equipment_gain.setter
    def mast_equipment_gain(self, mast_equipment_gain):
        """Sets the mast_equipment_gain of this BaseStation.

        Mast equipment gain of this base station (in dB)  # noqa: E501

        :param mast_equipment_gain: The mast_equipment_gain of this BaseStation.  # noqa: E501
        :type: float
        """

        self._mast_equipment_gain = mast_equipment_gain

    @property
    def mast_equipment_noise_figure(self):
        """Gets the mast_equipment_noise_figure of this BaseStation.  # noqa: E501

        Mast equipment noise figure of this base station (in dB)  # noqa: E501

        :return: The mast_equipment_noise_figure of this BaseStation.  # noqa: E501
        :rtype: float
        """
        return self._mast_equipment_noise_figure

    @mast_equipment_noise_figure.setter
    def mast_equipment_noise_figure(self, mast_equipment_noise_figure):
        """Sets the mast_equipment_noise_figure of this BaseStation.

        Mast equipment noise figure of this base station (in dB)  # noqa: E501

        :param mast_equipment_noise_figure: The mast_equipment_noise_figure of this BaseStation.  # noqa: E501
        :type: float
        """

        self._mast_equipment_noise_figure = mast_equipment_noise_figure

    @property
    def lna_insertion_loss(self):
        """Gets the lna_insertion_loss of this BaseStation.  # noqa: E501

        LNA insertion loss of this base station (in dB)  # noqa: E501

        :return: The lna_insertion_loss of this BaseStation.  # noqa: E501
        :rtype: float
        """
        return self._lna_insertion_loss

    @lna_insertion_loss.setter
    def lna_insertion_loss(self, lna_insertion_loss):
        """Sets the lna_insertion_loss of this BaseStation.

        LNA insertion loss of this base station (in dB)  # noqa: E501

        :param lna_insertion_loss: The lna_insertion_loss of this BaseStation.  # noqa: E501
        :type: float
        """

        self._lna_insertion_loss = lna_insertion_loss

    @property
    def cavity_filter_insertion_loss(self):
        """Gets the cavity_filter_insertion_loss of this BaseStation.  # noqa: E501

        Cavity filter insertion loss of this base station (in dB)  # noqa: E501

        :return: The cavity_filter_insertion_loss of this BaseStation.  # noqa: E501
        :rtype: float
        """
        return self._cavity_filter_insertion_loss

    @cavity_filter_insertion_loss.setter
    def cavity_filter_insertion_loss(self, cavity_filter_insertion_loss):
        """Sets the cavity_filter_insertion_loss of this BaseStation.

        Cavity filter insertion loss of this base station (in dB)  # noqa: E501

        :param cavity_filter_insertion_loss: The cavity_filter_insertion_loss of this BaseStation.  # noqa: E501
        :type: float
        """

        self._cavity_filter_insertion_loss = cavity_filter_insertion_loss

    @property
    def tx_power_margin(self):
        """Gets the tx_power_margin of this BaseStation.  # noqa: E501

        TX power margin of this base station (in dBm)  # noqa: E501

        :return: The tx_power_margin of this BaseStation.  # noqa: E501
        :rtype: float
        """
        return self._tx_power_margin

    @tx_power_margin.setter
    def tx_power_margin(self, tx_power_margin):
        """Sets the tx_power_margin of this BaseStation.

        TX power margin of this base station (in dBm)  # noqa: E501

        :param tx_power_margin: The tx_power_margin of this BaseStation.  # noqa: E501
        :type: float
        """

        self._tx_power_margin = tx_power_margin

    @property
    def power_capability(self):
        """Gets the power_capability of this BaseStation.  # noqa: E501

        power capability of this base station (in dBm)  # noqa: E501

        :return: The power_capability of this BaseStation.  # noqa: E501
        :rtype: float
        """
        return self._power_capability

    @power_capability.setter
    def power_capability(self, power_capability):
        """Sets the power_capability of this BaseStation.

        power capability of this base station (in dBm)  # noqa: E501

        :param power_capability: The power_capability of this BaseStation.  # noqa: E501
        :type: float
        """

        self._power_capability = power_capability

    @property
    def antenna_location_code(self):
        """Gets the antenna_location_code of this BaseStation.  # noqa: E501

        Antenna location. 0 -> OUTDOOR 1 -> INDOOR   # noqa: E501

        :return: The antenna_location_code of this BaseStation.  # noqa: E501
        :rtype: int
        """
        return self._antenna_location_code

    @antenna_location_code.setter
    def antenna_location_code(self, antenna_location_code):
        """Sets the antenna_location_code of this BaseStation.

        Antenna location. 0 -> OUTDOOR 1 -> INDOOR   # noqa: E501

        :param antenna_location_code: The antenna_location_code of this BaseStation.  # noqa: E501
        :type: int
        """

        self._antenna_location_code = antenna_location_code

    @property
    def service_coverage(self):
        """Gets the service_coverage of this BaseStation.  # noqa: E501

        Service coverage (for Mini base station) 0 -> GLOBAL 1 -> CUSTOMER   # noqa: E501

        :return: The service_coverage of this BaseStation.  # noqa: E501
        :rtype: int
        """
        return self._service_coverage

    @service_coverage.setter
    def service_coverage(self, service_coverage):
        """Sets the service_coverage of this BaseStation.

        Service coverage (for Mini base station) 0 -> GLOBAL 1 -> CUSTOMER   # noqa: E501

        :param service_coverage: The service_coverage of this BaseStation.  # noqa: E501
        :type: int
        """

        self._service_coverage = service_coverage

    @property
    def geoloc_computation(self):
        """Gets the geoloc_computation of this BaseStation.  # noqa: E501

        The contribution to geolocation services  0 -> DEFAULT 1 -> ENABLED 2 -> DISABLED   # noqa: E501

        :return: The geoloc_computation of this BaseStation.  # noqa: E501
        :rtype: int
        """
        return self._geoloc_computation

    @geoloc_computation.setter
    def geoloc_computation(self, geoloc_computation):
        """Sets the geoloc_computation of this BaseStation.

        The contribution to geolocation services  0 -> DEFAULT 1 -> ENABLED 2 -> DISABLED   # noqa: E501

        :param geoloc_computation: The geoloc_computation of this BaseStation.  # noqa: E501
        :type: int
        """

        self._geoloc_computation = geoloc_computation

    @property
    def antenna(self):
        """Gets the antenna of this BaseStation.  # noqa: E501


        :return: The antenna of this BaseStation.  # noqa: E501
        :rtype: object
        """
        return self._antenna

    @antenna.setter
    def antenna(self, antenna):
        """Sets the antenna of this BaseStation.


        :param antenna: The antenna of this BaseStation.  # noqa: E501
        :type: object
        """

        self._antenna = antenna

    @property
    def available_connections(self):
        """Gets the available_connections of this BaseStation.  # noqa: E501


        :return: The available_connections of this BaseStation.  # noqa: E501
        :rtype: list[int]
        """
        return self._available_connections

    @available_connections.setter
    def available_connections(self, available_connections):
        """Sets the available_connections of this BaseStation.


        :param available_connections: The available_connections of this BaseStation.  # noqa: E501
        :type: list[int]
        """

        self._available_connections = available_connections

    @property
    def maker_code(self):
        """Gets the maker_code of this BaseStation.  # noqa: E501

        the base station’s marker code  # noqa: E501

        :return: The maker_code of this BaseStation.  # noqa: E501
        :rtype: str
        """
        return self._maker_code

    @maker_code.setter
    def maker_code(self, maker_code):
        """Sets the maker_code of this BaseStation.

        the base station’s marker code  # noqa: E501

        :param maker_code: The maker_code of this BaseStation.  # noqa: E501
        :type: str
        """

        self._maker_code = maker_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseStation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseStation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
