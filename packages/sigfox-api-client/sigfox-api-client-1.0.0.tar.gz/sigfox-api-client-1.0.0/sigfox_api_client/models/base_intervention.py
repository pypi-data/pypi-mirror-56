# coding: utf-8

"""
    Sigfox API

     # API overview Sigfox API is used to integrate with the Sigfox platform.  The API uses the HTTP protocol, following the REST principles (POST, GET, DELETE, PUT requests). The API endpoints accept and return data in the JSON format, with the corresponding \"application/json\" content type header.  The Sigfox API access differs for every API User based on their profile. If you already have a Sigfox account, you can retrieve the API Documentation customized for your API User directly in json or yaml format. The “how to” procedure is detailed in the [API Documentation](https://support.sigfox.com/docs/api-documentation) article.  The PUT request is the only request used to edit an existing entity. You don't need to specify each value. If a property is not present in the request, it won't be processed and updated. To remove an optional property, it must be filled in the request with the explicit value NULL. If a property has no value, it won't appear in the result of a GET request.  # Authentication and security Sigfox API is only accessible using HTTPS, and all API endpoints require authentication credentials (API user login and password). An API User is associated to a group with given profiles. You can view and manage your API User in the [Sigfox Portal](https://backend.sigfox.com/auth/login).  If you need an API User, follow the [API credential creation](https://support.sigfox.com/docs/api-credential-creation) procedure.  Your API User must remain private. Should the API credentials be compromised, new ones can be generated at any moment, invalidating the previous ones. CORS and JSONP are intentionally unsupported. CORS and JSONP JavaScript techniques tends to expose your credentials to your users. If you really need to call Sigfox API from JavaScript in the browser, you must set a reverse proxy on your website. Be careful not to use proxy for all requests to Sigfox OSS but to only select the relevant ones.  <!-- ReDoc-Inject: <security-definitions> -->  # Usage limits All Sigfox API endpoints are using the same underlying technology that powers the core Sigfox Platform. For Cloud efficiency and security reasons, Sigfox is moving a step forward on API rate limiting, by setting upper bounds for some API endpoints. Please note that a new HTTP response will be returned in case of rate exceeded : “HTTP 429: too many requests”.  For more information check [API Rate limiting](https://support.sigfox.com/docs/api-rate-limiting) policy. Sigfox reserves the right to modify these limits without notice.  # Versioning  Sigfox API supports versioning of its endpoints through a version suffix in the endpoint URL. This suffix has the following format: \"vX\", where X is the version number. For example: v2/device.  All requests must include the version suffix in the endpoint URL.  Any new backwards-incompatible change will be released in a new version.   Read the [API versioning management](https://storage.sbg1.cloud.ovh.net/v1/AUTH_669d7dfced0b44518cb186841d7cbd75/prod_docs/55746591-API_Versioning_management.pdf) to learn more about it.  # Paging  Some API requests will return a list of data. If the list is longer than the set limit, the items will be retrieved via multiple requests. The paging section in the response will specify a URL for the next request.  Keep in mind rate limiting policy to manage your requests.  You can use the limit parameter to limit the number of items to be returned, between 1 and 100 (default). The offset parameter is used to specify a number of items to skip.  # Errors  Sigfox API uses conventional HTTP response codes to indicate the success or failure of an API request.  Codes in the 2xx range indicate success.  Codes in the 4xx range indicate an error that failed given the information provided (e.g. a required parameter missing, a resource was not found, etc.). Often the response will also include a message explaining the error.  Codes in the 5xx range indicate an error with servers.   For more information please refer to the [Response code article](https://support.sigfox.com/docs/api-response-code-references).   # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class BaseIntervention(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'author': 'str',
        'comment': 'str',
        'equipments_to_change': 'list[int]',
        'planned_time': 'int',
        'intervention_time': 'int',
        'end_time': 'int',
        'bill_code': 'str',
        'rt_id': 'str',
        'closed': 'bool',
        'costs': 'float',
        'type': 'int'
    }

    attribute_map = {
        'author': 'author',
        'comment': 'comment',
        'equipments_to_change': 'equipmentsToChange',
        'planned_time': 'plannedTime',
        'intervention_time': 'interventionTime',
        'end_time': 'endTime',
        'bill_code': 'billCode',
        'rt_id': 'rtId',
        'closed': 'closed',
        'costs': 'costs',
        'type': 'type'
    }

    def __init__(self, author=None, comment=None, equipments_to_change=None, planned_time=None, intervention_time=None, end_time=None, bill_code=None, rt_id=None, closed=None, costs=None, type=None):  # noqa: E501
        """BaseIntervention - a model defined in Swagger"""  # noqa: E501
        self._author = None
        self._comment = None
        self._equipments_to_change = None
        self._planned_time = None
        self._intervention_time = None
        self._end_time = None
        self._bill_code = None
        self._rt_id = None
        self._closed = None
        self._costs = None
        self._type = None
        self.discriminator = None
        if author is not None:
            self.author = author
        if comment is not None:
            self.comment = comment
        if equipments_to_change is not None:
            self.equipments_to_change = equipments_to_change
        if planned_time is not None:
            self.planned_time = planned_time
        if intervention_time is not None:
            self.intervention_time = intervention_time
        if end_time is not None:
            self.end_time = end_time
        if bill_code is not None:
            self.bill_code = bill_code
        if rt_id is not None:
            self.rt_id = rt_id
        if closed is not None:
            self.closed = closed
        if costs is not None:
            self.costs = costs
        if type is not None:
            self.type = type

    @property
    def author(self):
        """Gets the author of this BaseIntervention.  # noqa: E501

        The author of this intervention  # noqa: E501

        :return: The author of this BaseIntervention.  # noqa: E501
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this BaseIntervention.

        The author of this intervention  # noqa: E501

        :param author: The author of this BaseIntervention.  # noqa: E501
        :type: str
        """

        self._author = author

    @property
    def comment(self):
        """Gets the comment of this BaseIntervention.  # noqa: E501

        The comment about this intervention  # noqa: E501

        :return: The comment of this BaseIntervention.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this BaseIntervention.

        The comment about this intervention  # noqa: E501

        :param comment: The comment of this BaseIntervention.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def equipments_to_change(self):
        """Gets the equipments_to_change of this BaseIntervention.  # noqa: E501

        List of equipment to change for this intervention - 0 -> ANTENNA - 1 -> BASE STATION - 2 -> LNA - 3 -> FEEDER - 4 -> ADSL MODEM - 5 -> NETWORK CABLE - 6 -> SURGE - 7 -> WATERPROOFNESS - 8 -> SAT DEMOD - 9 -> SAT LNB - 10 -> SAT DISH - 11 -> SAT POWER SUPPLY - 12 -> INVERTER - 13 -> KEY 3G - 14 -> CIRCUIT BREAKER - 15 -> ROUTER 3G   # noqa: E501

        :return: The equipments_to_change of this BaseIntervention.  # noqa: E501
        :rtype: list[int]
        """
        return self._equipments_to_change

    @equipments_to_change.setter
    def equipments_to_change(self, equipments_to_change):
        """Sets the equipments_to_change of this BaseIntervention.

        List of equipment to change for this intervention - 0 -> ANTENNA - 1 -> BASE STATION - 2 -> LNA - 3 -> FEEDER - 4 -> ADSL MODEM - 5 -> NETWORK CABLE - 6 -> SURGE - 7 -> WATERPROOFNESS - 8 -> SAT DEMOD - 9 -> SAT LNB - 10 -> SAT DISH - 11 -> SAT POWER SUPPLY - 12 -> INVERTER - 13 -> KEY 3G - 14 -> CIRCUIT BREAKER - 15 -> ROUTER 3G   # noqa: E501

        :param equipments_to_change: The equipments_to_change of this BaseIntervention.  # noqa: E501
        :type: list[int]
        """

        self._equipments_to_change = equipments_to_change

    @property
    def planned_time(self):
        """Gets the planned_time of this BaseIntervention.  # noqa: E501

        The planned time of this intervention  # noqa: E501

        :return: The planned_time of this BaseIntervention.  # noqa: E501
        :rtype: int
        """
        return self._planned_time

    @planned_time.setter
    def planned_time(self, planned_time):
        """Sets the planned_time of this BaseIntervention.

        The planned time of this intervention  # noqa: E501

        :param planned_time: The planned_time of this BaseIntervention.  # noqa: E501
        :type: int
        """

        self._planned_time = planned_time

    @property
    def intervention_time(self):
        """Gets the intervention_time of this BaseIntervention.  # noqa: E501

        The time of this intervention  # noqa: E501

        :return: The intervention_time of this BaseIntervention.  # noqa: E501
        :rtype: int
        """
        return self._intervention_time

    @intervention_time.setter
    def intervention_time(self, intervention_time):
        """Sets the intervention_time of this BaseIntervention.

        The time of this intervention  # noqa: E501

        :param intervention_time: The intervention_time of this BaseIntervention.  # noqa: E501
        :type: int
        """

        self._intervention_time = intervention_time

    @property
    def end_time(self):
        """Gets the end_time of this BaseIntervention.  # noqa: E501

        The end time of this intervention  # noqa: E501

        :return: The end_time of this BaseIntervention.  # noqa: E501
        :rtype: int
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this BaseIntervention.

        The end time of this intervention  # noqa: E501

        :param end_time: The end_time of this BaseIntervention.  # noqa: E501
        :type: int
        """

        self._end_time = end_time

    @property
    def bill_code(self):
        """Gets the bill_code of this BaseIntervention.  # noqa: E501

        The bill code of this intervention  # noqa: E501

        :return: The bill_code of this BaseIntervention.  # noqa: E501
        :rtype: str
        """
        return self._bill_code

    @bill_code.setter
    def bill_code(self, bill_code):
        """Sets the bill_code of this BaseIntervention.

        The bill code of this intervention  # noqa: E501

        :param bill_code: The bill_code of this BaseIntervention.  # noqa: E501
        :type: str
        """

        self._bill_code = bill_code

    @property
    def rt_id(self):
        """Gets the rt_id of this BaseIntervention.  # noqa: E501

        The request tracker identifier of this intervention  # noqa: E501

        :return: The rt_id of this BaseIntervention.  # noqa: E501
        :rtype: str
        """
        return self._rt_id

    @rt_id.setter
    def rt_id(self, rt_id):
        """Sets the rt_id of this BaseIntervention.

        The request tracker identifier of this intervention  # noqa: E501

        :param rt_id: The rt_id of this BaseIntervention.  # noqa: E501
        :type: str
        """

        self._rt_id = rt_id

    @property
    def closed(self):
        """Gets the closed of this BaseIntervention.  # noqa: E501

        is this intervention closed  # noqa: E501

        :return: The closed of this BaseIntervention.  # noqa: E501
        :rtype: bool
        """
        return self._closed

    @closed.setter
    def closed(self, closed):
        """Sets the closed of this BaseIntervention.

        is this intervention closed  # noqa: E501

        :param closed: The closed of this BaseIntervention.  # noqa: E501
        :type: bool
        """

        self._closed = closed

    @property
    def costs(self):
        """Gets the costs of this BaseIntervention.  # noqa: E501

        The costs of this intervention  # noqa: E501

        :return: The costs of this BaseIntervention.  # noqa: E501
        :rtype: float
        """
        return self._costs

    @costs.setter
    def costs(self, costs):
        """Sets the costs of this BaseIntervention.

        The costs of this intervention  # noqa: E501

        :param costs: The costs of this BaseIntervention.  # noqa: E501
        :type: float
        """

        self._costs = costs

    @property
    def type(self):
        """Gets the type of this BaseIntervention.  # noqa: E501

        Convention status. - 0 -> OTHER - 1 -> PRE VISIT - 2 -> ANTENNA INSTALLATION - 3 -> TELECOM LINE INSTALLATION - 4 -> SITE SEARCH - 5 -> SAT INSTALLATION - 6 -> ELECTRICAL - 7 -> DISMANTLING   # noqa: E501

        :return: The type of this BaseIntervention.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BaseIntervention.

        Convention status. - 0 -> OTHER - 1 -> PRE VISIT - 2 -> ANTENNA INSTALLATION - 3 -> TELECOM LINE INSTALLATION - 4 -> SITE SEARCH - 5 -> SAT INSTALLATION - 6 -> ELECTRICAL - 7 -> DISMANTLING   # noqa: E501

        :param type: The type of this BaseIntervention.  # noqa: E501
        :type: int
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseIntervention, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseIntervention):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
