# coding: utf-8

"""
    Sigfox API

     # API overview Sigfox API is used to integrate with the Sigfox platform.  The API uses the HTTP protocol, following the REST principles (POST, GET, DELETE, PUT requests). The API endpoints accept and return data in the JSON format, with the corresponding \"application/json\" content type header.  The Sigfox API access differs for every API User based on their profile. If you already have a Sigfox account, you can retrieve the API Documentation customized for your API User directly in json or yaml format. The “how to” procedure is detailed in the [API Documentation](https://support.sigfox.com/docs/api-documentation) article.  The PUT request is the only request used to edit an existing entity. You don't need to specify each value. If a property is not present in the request, it won't be processed and updated. To remove an optional property, it must be filled in the request with the explicit value NULL. If a property has no value, it won't appear in the result of a GET request.  # Authentication and security Sigfox API is only accessible using HTTPS, and all API endpoints require authentication credentials (API user login and password). An API User is associated to a group with given profiles. You can view and manage your API User in the [Sigfox Portal](https://backend.sigfox.com/auth/login).  If you need an API User, follow the [API credential creation](https://support.sigfox.com/docs/api-credential-creation) procedure.  Your API User must remain private. Should the API credentials be compromised, new ones can be generated at any moment, invalidating the previous ones. CORS and JSONP are intentionally unsupported. CORS and JSONP JavaScript techniques tends to expose your credentials to your users. If you really need to call Sigfox API from JavaScript in the browser, you must set a reverse proxy on your website. Be careful not to use proxy for all requests to Sigfox OSS but to only select the relevant ones.  <!-- ReDoc-Inject: <security-definitions> -->  # Usage limits All Sigfox API endpoints are using the same underlying technology that powers the core Sigfox Platform. For Cloud efficiency and security reasons, Sigfox is moving a step forward on API rate limiting, by setting upper bounds for some API endpoints. Please note that a new HTTP response will be returned in case of rate exceeded : “HTTP 429: too many requests”.  For more information check [API Rate limiting](https://support.sigfox.com/docs/api-rate-limiting) policy. Sigfox reserves the right to modify these limits without notice.  # Versioning  Sigfox API supports versioning of its endpoints through a version suffix in the endpoint URL. This suffix has the following format: \"vX\", where X is the version number. For example: v2/device.  All requests must include the version suffix in the endpoint URL.  Any new backwards-incompatible change will be released in a new version.   Read the [API versioning management](https://storage.sbg1.cloud.ovh.net/v1/AUTH_669d7dfced0b44518cb186841d7cbd75/prod_docs/55746591-API_Versioning_management.pdf) to learn more about it.  # Paging  Some API requests will return a list of data. If the list is longer than the set limit, the items will be retrieved via multiple requests. The paging section in the response will specify a URL for the next request.  Keep in mind rate limiting policy to manage your requests.  You can use the limit parameter to limit the number of items to be returned, between 1 and 100 (default). The offset parameter is used to specify a number of items to skip.  # Errors  Sigfox API uses conventional HTTP response codes to indicate the success or failure of an API request.  Codes in the 2xx range indicate success.  Codes in the 4xx range indicate an error that failed given the information provided (e.g. a required parameter missing, a resource was not found, etc.). Often the response will also include a message explaining the error.  Codes in the 5xx range indicate an error with servers.   For more information please refer to the [Response code article](https://support.sigfox.com/docs/api-response-code-references).   # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CommonContractInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'activation_end_time': 'int',
        'communication_end_time': 'int',
        'bidir': 'bool',
        'high_priority_downlink': 'bool',
        'max_uplink_frames': 'int',
        'max_downlink_frames': 'int',
        'max_tokens': 'int',
        'automatic_renewal': 'bool',
        'renewal_duration': 'int',
        'options': 'list[object]'
    }

    attribute_map = {
        'name': 'name',
        'activation_end_time': 'activationEndTime',
        'communication_end_time': 'communicationEndTime',
        'bidir': 'bidir',
        'high_priority_downlink': 'highPriorityDownlink',
        'max_uplink_frames': 'maxUplinkFrames',
        'max_downlink_frames': 'maxDownlinkFrames',
        'max_tokens': 'maxTokens',
        'automatic_renewal': 'automaticRenewal',
        'renewal_duration': 'renewalDuration',
        'options': 'options'
    }

    def __init__(self, name=None, activation_end_time=None, communication_end_time=None, bidir=None, high_priority_downlink=None, max_uplink_frames=None, max_downlink_frames=None, max_tokens=None, automatic_renewal=None, renewal_duration=None, options=None):  # noqa: E501
        """CommonContractInfo - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._activation_end_time = None
        self._communication_end_time = None
        self._bidir = None
        self._high_priority_downlink = None
        self._max_uplink_frames = None
        self._max_downlink_frames = None
        self._max_tokens = None
        self._automatic_renewal = None
        self._renewal_duration = None
        self._options = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if activation_end_time is not None:
            self.activation_end_time = activation_end_time
        if communication_end_time is not None:
            self.communication_end_time = communication_end_time
        if bidir is not None:
            self.bidir = bidir
        if high_priority_downlink is not None:
            self.high_priority_downlink = high_priority_downlink
        if max_uplink_frames is not None:
            self.max_uplink_frames = max_uplink_frames
        if max_downlink_frames is not None:
            self.max_downlink_frames = max_downlink_frames
        if max_tokens is not None:
            self.max_tokens = max_tokens
        if automatic_renewal is not None:
            self.automatic_renewal = automatic_renewal
        if renewal_duration is not None:
            self.renewal_duration = renewal_duration
        if options is not None:
            self.options = options

    @property
    def name(self):
        """Gets the name of this CommonContractInfo.  # noqa: E501

        The contract name  # noqa: E501

        :return: The name of this CommonContractInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CommonContractInfo.

        The contract name  # noqa: E501

        :param name: The name of this CommonContractInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def activation_end_time(self):
        """Gets the activation_end_time of this CommonContractInfo.  # noqa: E501

        The activation end time (in milliseconds) of the contract. 0 means no activation time limit.  # noqa: E501

        :return: The activation_end_time of this CommonContractInfo.  # noqa: E501
        :rtype: int
        """
        return self._activation_end_time

    @activation_end_time.setter
    def activation_end_time(self, activation_end_time):
        """Sets the activation_end_time of this CommonContractInfo.

        The activation end time (in milliseconds) of the contract. 0 means no activation time limit.  # noqa: E501

        :param activation_end_time: The activation_end_time of this CommonContractInfo.  # noqa: E501
        :type: int
        """

        self._activation_end_time = activation_end_time

    @property
    def communication_end_time(self):
        """Gets the communication_end_time of this CommonContractInfo.  # noqa: E501

        The end time (in milliseconds) of the communication. 0 means no communication time limit.  # noqa: E501

        :return: The communication_end_time of this CommonContractInfo.  # noqa: E501
        :rtype: int
        """
        return self._communication_end_time

    @communication_end_time.setter
    def communication_end_time(self, communication_end_time):
        """Sets the communication_end_time of this CommonContractInfo.

        The end time (in milliseconds) of the communication. 0 means no communication time limit.  # noqa: E501

        :param communication_end_time: The communication_end_time of this CommonContractInfo.  # noqa: E501
        :type: int
        """

        self._communication_end_time = communication_end_time

    @property
    def bidir(self):
        """Gets the bidir of this CommonContractInfo.  # noqa: E501

        True if the contract info is bidirectional.  # noqa: E501

        :return: The bidir of this CommonContractInfo.  # noqa: E501
        :rtype: bool
        """
        return self._bidir

    @bidir.setter
    def bidir(self, bidir):
        """Sets the bidir of this CommonContractInfo.

        True if the contract info is bidirectional.  # noqa: E501

        :param bidir: The bidir of this CommonContractInfo.  # noqa: E501
        :type: bool
        """

        self._bidir = bidir

    @property
    def high_priority_downlink(self):
        """Gets the high_priority_downlink of this CommonContractInfo.  # noqa: E501

        True if all downlinks are high priority.  # noqa: E501

        :return: The high_priority_downlink of this CommonContractInfo.  # noqa: E501
        :rtype: bool
        """
        return self._high_priority_downlink

    @high_priority_downlink.setter
    def high_priority_downlink(self, high_priority_downlink):
        """Sets the high_priority_downlink of this CommonContractInfo.

        True if all downlinks are high priority.  # noqa: E501

        :param high_priority_downlink: The high_priority_downlink of this CommonContractInfo.  # noqa: E501
        :type: bool
        """

        self._high_priority_downlink = high_priority_downlink

    @property
    def max_uplink_frames(self):
        """Gets the max_uplink_frames of this CommonContractInfo.  # noqa: E501

        The maximum number of uplink frames.  # noqa: E501

        :return: The max_uplink_frames of this CommonContractInfo.  # noqa: E501
        :rtype: int
        """
        return self._max_uplink_frames

    @max_uplink_frames.setter
    def max_uplink_frames(self, max_uplink_frames):
        """Sets the max_uplink_frames of this CommonContractInfo.

        The maximum number of uplink frames.  # noqa: E501

        :param max_uplink_frames: The max_uplink_frames of this CommonContractInfo.  # noqa: E501
        :type: int
        """

        self._max_uplink_frames = max_uplink_frames

    @property
    def max_downlink_frames(self):
        """Gets the max_downlink_frames of this CommonContractInfo.  # noqa: E501

        The maximum number of downlink frames.  # noqa: E501

        :return: The max_downlink_frames of this CommonContractInfo.  # noqa: E501
        :rtype: int
        """
        return self._max_downlink_frames

    @max_downlink_frames.setter
    def max_downlink_frames(self, max_downlink_frames):
        """Sets the max_downlink_frames of this CommonContractInfo.

        The maximum number of downlink frames.  # noqa: E501

        :param max_downlink_frames: The max_downlink_frames of this CommonContractInfo.  # noqa: E501
        :type: int
        """

        self._max_downlink_frames = max_downlink_frames

    @property
    def max_tokens(self):
        """Gets the max_tokens of this CommonContractInfo.  # noqa: E501

        The maximum number of tokens for this contract. Either 0 (unlimited) or a positive number.  # noqa: E501

        :return: The max_tokens of this CommonContractInfo.  # noqa: E501
        :rtype: int
        """
        return self._max_tokens

    @max_tokens.setter
    def max_tokens(self, max_tokens):
        """Sets the max_tokens of this CommonContractInfo.

        The maximum number of tokens for this contract. Either 0 (unlimited) or a positive number.  # noqa: E501

        :param max_tokens: The max_tokens of this CommonContractInfo.  # noqa: E501
        :type: int
        """

        self._max_tokens = max_tokens

    @property
    def automatic_renewal(self):
        """Gets the automatic_renewal of this CommonContractInfo.  # noqa: E501

        True if automatic renewal is allowed.  # noqa: E501

        :return: The automatic_renewal of this CommonContractInfo.  # noqa: E501
        :rtype: bool
        """
        return self._automatic_renewal

    @automatic_renewal.setter
    def automatic_renewal(self, automatic_renewal):
        """Sets the automatic_renewal of this CommonContractInfo.

        True if automatic renewal is allowed.  # noqa: E501

        :param automatic_renewal: The automatic_renewal of this CommonContractInfo.  # noqa: E501
        :type: bool
        """

        self._automatic_renewal = automatic_renewal

    @property
    def renewal_duration(self):
        """Gets the renewal_duration of this CommonContractInfo.  # noqa: E501

        The renewal duration in months.  # noqa: E501

        :return: The renewal_duration of this CommonContractInfo.  # noqa: E501
        :rtype: int
        """
        return self._renewal_duration

    @renewal_duration.setter
    def renewal_duration(self, renewal_duration):
        """Sets the renewal_duration of this CommonContractInfo.

        The renewal duration in months.  # noqa: E501

        :param renewal_duration: The renewal_duration of this CommonContractInfo.  # noqa: E501
        :type: int
        """

        self._renewal_duration = renewal_duration

    @property
    def options(self):
        """Gets the options of this CommonContractInfo.  # noqa: E501

        The activated premium options. Given options will be merged with existing options in contract. In order to delete a single option use \"/{id}/options\" API.  # noqa: E501

        :return: The options of this CommonContractInfo.  # noqa: E501
        :rtype: list[object]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this CommonContractInfo.

        The activated premium options. Given options will be merged with existing options in contract. In order to delete a single option use \"/{id}/options\" API.  # noqa: E501

        :param options: The options of this CommonContractInfo.  # noqa: E501
        :type: list[object]
        """

        self._options = options

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CommonContractInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommonContractInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
