""" Implement the hello command.

"""
import csv
import sys

# from datetime import datetime
from uuid import uuid4
from shutil import copy
from pathlib import Path
from guano import GuanoFile, parse_timestamp
from ..core.logger import logger


def main(wav_dir, input_file) -> str:
    """ Execute the command.

    :param wav_dir: the directory where wav files are stored
    :param input_file: the full path of the csv input file generated by 'readwav'
    """
    logger.debug("executing hello command")

    try:
        backup_dir = Path(wav_dir[0]).joinpath('guanoctl_out')
    except FileNotFoundError:
        logger.error('The wav directory does not exist!')
        sys.exit()

    try:
        backup_dir.mkdir()
    except FileExistsError:
        logger.error('The working directory already exists.')
        sys.exit()

    for file in Path(wav_dir[0]).glob('*.[Ww][Aa][Vv]'):
        copy(file.as_posix(), backup_dir.as_posix())

    with open(input_file, 'r', newline='') as metadata_file:
        reader = csv.DictReader(metadata_file)

        for row in reader:
            gf = GuanoFile(backup_dir.joinpath(row['Original Filename']).as_posix())
            # gf.register('ABCD', 'uuid', coerce_abcd)
            # gf.register('ABCD', 'test', coerce_abcd)

            # gf['ABCD|uuid'] = str(uuid4())
            # gf['Length'] = float(15.9)
            # gf['WA|Kaleidoscope|Version'] = '5.1.9h'

            for key, value in row.items():
                print(key + ' ' + value)
                gf[key] = set_value(key, value)
            #     if key == 'WA|Kaleidoscope|Version':
            #         print(type(value))
            #     gf[key] = set_value(key, value)
                #  gf[key] = value

            try:
                gf.write()
            except ValueError:
                logger.error('Column: ' + key + ' Value: ' + value + ' is wrong data type!')
            except AttributeError:
                logger.error('Column: ' + key + ' Value: ' + value + ' is wrong data type!')

    return "Hello"  # TODO: use f-string for Python 3.6+


def coerce_abcd(value):

    try:
        str(value)
    except ValueError:
        logger.error(value + ' is not a string')

    return value


def set_value(key, value):
    if key in ('Filter HP', 'Length', 'Loc Elevation') and value:
        try:
            return float(value)
        except ValueError:
            logger.error(value + ' is not a float!')
    elif key in ('Loc Accuracy', 'Samplerate', 'TE') and value:
        try:
            return int(value)
        except ValueError:
            logger.error(value + ' is not an int!')
    elif key == 'Loc Position' and value:
        value_stripped = value.strip('()')
        value_list = value_stripped.split(',')
        try:
            blah = tuple(float(i) for i in value_list)
            return blah  # tuple(float(i) for i in value_list)
        except ValueError:
            logger.error(value + ' is not a float!')
    elif key == 'Timestamp':
        try:
            return parse_timestamp(value)
        except ValueError:
            logger.error(type(value))
    else:
        return value
