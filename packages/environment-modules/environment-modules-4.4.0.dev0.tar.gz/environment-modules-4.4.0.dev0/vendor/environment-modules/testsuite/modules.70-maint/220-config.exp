##############################################################################
#   Modules Revision 3.0
#   Providing a flexible user environment
#
#   File:		modules.50-cmds/%M%
#   Revision:		%I%
#   First Edition:	2019/05/19
#   Last Mod.:		%U%, %G%
#
#   Authors:		Xavier Delaruelle, xavier.delaruelle@cea.fr
#
#   Description:	Testuite testsequence
#   Command:        config
#   Modulefiles:
#   Sub-Command:
#
#   Comment:	%C{
#           Test of the 'config' command
#		}C%
#
##############################################################################

# set default configuration
unsetenv_var MODULES_VERBOSITY
unsetenv_var MODULES_EXTENDED_DEFAULT
unsetenv_var MODULES_COLOR
unsetenv_var MODULERCFILE

set version_report "Modules Release \[0-9a-zA-Z\.\+\\-\]+ \\(\[0-9\-\]{10}\\)"
set config_header "- Config. name $modlin.- Value \\(set by if default overridden\\) $modlin"
set state_header "- State name $modlin.- Value $modlin"
set envvar_header "- Env. variable $modlin.- Value $modlin"

set valid_darkbgcolors [expr {([llength [split $install_darkbgcolors {:=}]] % 2) == 0 ? $install_darkbgcolors : {}}]
set valid_lightbgcolors [expr {([llength [split $install_lightbgcolors {:=}]] % 2) == 0 ? $install_lightbgcolors : {}}]

array set configdfl [list\
    advanced_version_spec     [expr {$install_advversspec eq {y}}]\
    auto_handling             [expr {$install_autohandling eq {y}}]\
    avail_indepth             [expr {$install_availindepth eq {y}}]\
    avail_report_dir_sym      1\
    avail_report_mfile_sym    1\
    collection_pin_version    0\
    collection_target         <undef>\
    color                     never\
    colors                    [expr {$install_termbg eq {dark} ? $valid_darkbgcolors : $valid_lightbgcolors}]\
    contact                   root@localhost\
    extended_default          [expr {$install_extendeddefault eq {y}}]\
    extra_siteconfig          <undef>\
    home                      [regsub -all "\(\[.+?\]\)" $install_moduleshome {\\\1}]\
    icase                     $install_icase\
    ignored_dirs              {CVS RCS SCCS .svn .git .SYNC .sos}\
    implicit_default          [expr {$install_implicitdefault eq {y}}]\
    locked_configs            $install_lockedconfigs\
    pager                     "$install_pagercmd"\
    rcfile                    <undef>\
    run_quarantine            <undef>\
    search_match              $install_searchmatch\
    set_shell_startup         [expr {$install_setshellstartup eq {y}}]\
    silent_shell_debug        <undef>\
    siteconfig                $siteconfig_filere\
    tcl_ext_lib               lib/libtclenvmodules$install_shlib_suffix\
    term_background           $install_termbg\
    unload_match_order        $install_unloadmatchorder\
    verbosity                 $install_verbosity\
    wa_277                    [expr {$install_wa277 eq {y}}]\
]

array set configvar [list\
    advanced_version_spec     MODULES_ADVANCED_VERSION_SPEC\
    auto_handling             MODULES_AUTO_HANDLING\
    avail_indepth             MODULES_AVAIL_INDEPTH\
    collection_pin_version    MODULES_COLLECTION_PIN_VERSION\
    collection_target         MODULES_COLLECTION_TARGET\
    color                     MODULES_COLOR\
    colors                    MODULES_COLORS\
    contact                   MODULECONTACT\
    extended_default          MODULES_EXTENDED_DEFAULT\
    extra_siteconfig          MODULES_SITECONFIG\
    home                      MODULESHOME\
    icase                     MODULES_ICASE\
    implicit_default          MODULES_IMPLICIT_DEFAULT\
    pager                     MODULES_PAGER\
    rcfile                    MODULERCFILE\
    run_quarantine            MODULES_RUN_QUARANTINE\
    search_match              MODULES_SEARCH_MATCH\
    set_shell_startup         MODULES_SET_SHELL_STARTUP\
    silent_shell_debug        MODULES_SILENT_SHELL_DEBUG\
    term_background           MODULES_TERM_BACKGROUND\
    unload_match_order        MODULES_UNLOAD_MATCH_ORDER\
    verbosity                 MODULES_VERBOSITY\
    wa_277                    MODULES_WA_277\
]

array set configvalid [list\
    advanced_version_spec     {0 1}\
    auto_handling             {0 1}\
    avail_indepth             {0 1}\
    collection_pin_version    {0 1}\
    color                     {never auto always}\
    extended_default          {0 1}\
    icase                     {never search always}\
    implicit_default          {0 1}\
    search_match              {starts_with contains}\
    set_shell_startup         {0 1}\
    silent_shell_debug        {0 1}\
    term_background           {dark light}\
    unload_match_order        {returnlast returnfirst}\
    verbosity                 {silent concise normal verbose debug}\
    wa_277                    {0 1}\
]

array set configlockable [list\
    extra_siteconfig          1\
    implicit_default          1\
]

set statelist [list cmdline extra_siteconfig_loaded force is_stderr_tty is_win machine os pager_started paginate path_separator rc_loaded siteconfig_loaded shell shelltype subcmd subcmd_args tcl_ext_lib_loaded tcl_version term_columns]


# single config parameter report
foreach param [array names configdfl] {
    testouterr_cmd_re sh "config $param" OK "$version_report\n\n$config_header\n$param\\s+$configdfl($param)[if_configlocked $param { \(locked\)}]"
}

# test full config report
set tserr "$version_report\n\n$config_header"
foreach param [lsort [array names configdfl]] {
    append tserr "\n$param\\s+$configdfl($param)[if_configlocked $param { \(locked\)}]"
}
testouterr_cmd_re ALL config OK $tserr

# unknown parameter report
testouterr_cmd_re sh {config foo} ERR "$error_msgs: Configuration option 'foo' does not exist"

# try set unknown parameter
testouterr_cmd_re sh {config foo bar} ERR "$error_msgs: Configuration option 'foo' does not exist"

# try set parameter that could not be altered
foreach param [array names configdfl] {
    if {![info exists configvar($param)]} {
        testouterr_cmd_re sh "config $param foo" ERR "$error_msgs: Configuration option '$param' cannot be altered"
        testouterr_cmd_re sh "config --reset $param" ERR "$error_msgs: Configuration option '$param' cannot be altered"
    }
}

# set parameter that could be altered and whose value is checked
foreach param [array names configvalid] {
    # valid value tests
    foreach val $configvalid($param) {
        set ans [list [list set $configvar($param) $val]]
        testouterr_cmd_re sh "config $param $val" [if_configlocked $param ERR $ans] [if_configlocked $param [err_conflocked $param] {}]
    }
    # invalid value test
    testouterr_cmd_re sh "config $param foo" ERR [if_configlocked $param [err_conflocked $param] "$error_msgs: Valid values for configuration option '$param' are: $configvalid($param)"]
    # reset to default
    set ans [list [list unset $configvar($param)]]
    testouterr_cmd_re sh "config --reset $param" [if_configlocked $param ERR $ans] [if_configlocked $param [err_conflocked $param] {}]
}

# set parameter that could be altered and whose value is not checked
foreach param [array names configvar] {
    if {![info exists configvalid($param)]} {
        set ans [list [list set $configvar($param) foo]]
        testouterr_cmd_re sh "config $param foo" [if_configlocked $param ERR $ans] [if_configlocked $param [err_conflocked $param] {}]
        # reset to default
        set ans [list [list unset $configvar($param)]]
        testouterr_cmd_re sh "config --reset $param" [if_configlocked $param ERR $ans] [if_configlocked $param [err_conflocked $param] {}]
    }
}

# set parameter with an empty value
set ans [list [list set $configvar(rcfile) {}]]
testouterr_cmd_re sh "config rcfile " $ans {}
# report parameter set with an empty value
setenv_var $configvar(rcfile) {}
testouterr_cmd_re sh "config rcfile" OK "$version_report\n\n$config_header\nrcfile\\s+ \\(env-var\\)"


# check full config report when all parameters have been changed
array set configset [array get configdfl]
foreach param [array names configvar] {
    # ensure valid value is set for colors and pager
    if {$param eq {colors}} {
        set val err=31
    } elseif {$param eq {pager}} {
        set val $configdfl(pager)
    } elseif {[info exists configvalid($param)]} {
        if {$param eq {verbosity}} {
            set val [lindex $configvalid($param) 1]
        } else {
            set val [lindex $configvalid($param) 0]
        }
    } else {
        set val foo
    }
    set configset($param) $val
    setenv_var $configvar($param) $val
}
# also set volatile config option
set configset(runenv_foo) foo
setenv_var MODULES_RUNENV_FOO foo

set tserr "$version_report\n\n$config_header"
foreach param [lsort [array names configset]] {
    if {[info exists configlockable($param)] && [is_config_locked $param]} {
        append tserr "\n$param\\s+$configdfl($param) \\(locked\\)"
    } else {
        append tserr "\n$param\\s+$configset($param)"
        if {[info exists configvar($param)] || $param eq {runenv_foo}} {
            append tserr " \\(env-var\\)"
        }
    }
}
testouterr_cmd_re sh config OK $tserr

# check full config report when all parameters have been changed, by cmd-line when possible
set tserr "$version_report\n\n$config_header"
foreach param [lsort [array names configset]] {
    if {[info exists configlockable($param)] && [is_config_locked $param]} {
        append tserr "\n$param\\s+$configdfl($param) \\(locked\\)"
    } else {
        if {$param eq {verbosity}} {
            append tserr "\n$param\\s+silent \\(cmd-line\\)"
        } else {
            append tserr "\n$param\\s+$configset($param)"
            if {[lsearch -exact [list auto_handling color] $param] != -1} {
                append tserr " \\(cmd-line\\)"
            } elseif {[info exists configvar($param)] || $param eq {runenv_foo}} {
                append tserr " \\(env-var\\)"
            }
        }
    }
}
testouterr_cmd_re sh {config --silent --no-auto --color=never} OK $tserr


# report current state
set tserr "$version_report\n\n$config_header"
foreach param [lsort [array names configset]] {
    if {[info exists configlockable($param)] && [is_config_locked $param]} {
        append tserr "\n$param\\s+$configdfl($param) \\(locked\\)"
    } else {
        append tserr "\n$param\\s+$configset($param)"
        if {[info exists configvar($param)] || $param eq {runenv_foo}} {
            append tserr " \\(env-var\\)"
        }
    }
}
append tserr "\n\n$state_header"
foreach param $statelist {
    append tserr "\n$param\\s+.*"
}
append tserr "\n\n$envvar_header"
set envvar_list [list]
foreach var [list LOADEDMODULES _LMFILES_ MODULE* *_modshare *_modquar *_module*] {
    set envvar_list [concat $envvar_list [array names env -glob $var]]
}
foreach envvar [lsort -unique $envvar_list] {
    append tserr "\n[regsub -all {([\\${}*?()+\[\]])} $envvar {\\\1}]\\s+[regsub -all {([\\${}*?()+\[\]])} $env($envvar) {\\\1}]"
}
testouterr_cmd_re sh {config --dump-state} OK $tserr

# report current state with some module loaded
setenv_loaded_module [list trace/all_on prereq/full] [list $modpath/trace/all_on $modpath/prereq/full] [list trace/all_on]
setenv_path_var MODULES_LMPREREQ prereq/full&trace/all_on
set tserr "$version_report\n\n$config_header"
foreach param [lsort [array names configset]] {
    if {[info exists configlockable($param)] && [is_config_locked $param]} {
        append tserr "\n$param\\s+$configdfl($param) \\(locked\\)"
    } else {
        append tserr "\n$param\\s+$configset($param)"
        if {[info exists configvar($param)] || $param eq {runenv_foo}} {
            append tserr " \\(env-var\\)"
        }
    }
}
append tserr "\n\n$state_header"
foreach param $statelist {
    append tserr "\n$param\\s+.*"
}
append tserr "\n\n$envvar_header"
set envvar_list [list]
foreach var [list LOADEDMODULES _LMFILES_ MODULE* *_modshare *_modquar *_module*] {
    set envvar_list [concat $envvar_list [array names env -glob $var]]
}
foreach envvar [lsort -unique $envvar_list] {
    append tserr "\n[regsub -all {([\\${}*?()+\[\]])} $envvar {\\\1}]\\s+[regsub -all {([\\${}*?()+\[\]])} $env($envvar) {\\\1}]"
}
testouterr_cmd_re sh {config --dump-state} OK $tserr

# bad argument number
testouterr_cmd_re sh "config --reset auto_handling 0" ERR "$error_msgs: Unexpected number of args for 'config' command\n$err_typehelp"
testouterr_cmd_re sh "config --dump-state --reset auto_handling 0" ERR "$error_msgs: Unexpected number of args for 'config' command\n$err_typehelp"

# --dump-state ignored in some cases
set ans [list [list unset $configvar(auto_handling)]]
testouterr_cmd_re sh "config --dump-state --reset auto_handling" $ans {}
set ans [list [list set $configvar(auto_handling) 0]]
testouterr_cmd_re sh "config --dump-state auto_handling 0" $ans {}


#
#  Cleanup
#

# restore environment
unsetenv_loaded_module
unsetenv_path_var MODULES_LMPREREQ
foreach param [array names configvar] {
    unsetenv_var $configvar($param)
}
unsetenv_var MODULES_RUNENV_FOO
setenv_var MODULES_VERBOSITY normal
setenv_var MODULES_EXTENDED_DEFAULT 0
setenv_var MODULES_COLOR never
setenv_var MODULERCFILE $env(TESTSUITEDIR)/etc/empty

unset version_report
unset config_header
unset state_header
unset envvar_header
unset configdfl
unset configvar
unset configvalid
unset configlockable
unset statelist

unset valid_darkbgcolors
unset valid_lightbgcolors

unset tserr
unset param
unset envvar
unset envvar_list
unset val
unset ans
