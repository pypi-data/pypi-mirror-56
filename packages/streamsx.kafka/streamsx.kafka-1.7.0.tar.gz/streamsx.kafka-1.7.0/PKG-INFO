Metadata-Version: 1.1
Name: streamsx.kafka
Version: 1.7.0
Summary: IBM Streams Kafka integration
Home-page: https://github.com/IBMStreams/pypi.streamsx.kafka
Author: IBM Streams @ github.com
Author-email: rolef.heinrich@de.ibm.com
License: Apache License - Version 2.0
Description: Overview
        ========
        
        Provides functions to read messages from a Kafka broker as a stream
        and submit tuples to a Kafka broker as messages.
        
        The broker configuration must be done with properties in an application configuration or by
        using a dictionary variable.
        The minimum set of properties must contain the `bootstrap.servers` configuration, which is valid
        for both consumers and producers, i.e. for the `subscribe` and `publish` functions.
        
        It is also possible to use different application configurations for subscribe and publish
        when special consumer or producer configs must be used.
        
        Sample
        ======
        
        A simple hello world example of a Streams application publishing to
        a topic and the same application consuming the same topic::
        
            from streamsx.topology.topology import Topology
            from streamsx.topology.schema import CommonSchema
            from streamsx.topology.context import submit, ContextTypes
            import streamsx.kafka as kafka
            import time
        
            def delay(v):
                time.sleep(5.0)
                return True
        
            topology = Topology('KafkaHelloWorld')
        
            to_kafka = topology.source(['Hello', 'World!'])
            to_kafka = to_kafka.as_string()
            # delay tuple by tuple
            to_kafka = to_kafka.filter(delay)
        
            # Publish a stream to Kafka using TEST topic, the Kafka servers
            # assuming, the broker is running on localhost, port 9092
            kafka_props = {}
            kafka_props['bootstrap.servers'] = 'localhost:9092'
            kafka.publish(to_kafka, 'TEST', kafka_props)
        
            # Subscribe to same topic as a stream
            from_kafka = kafka.subscribe(topology, 'TEST', kafka_props, CommonSchema.String)
        
            # You'll find the Hello World! in stdout log file:
            from_kafka.print()
        
            submit(ContextTypes.DISTRIBUTED, topology)
            # The Streams job is kept running.
        
        Documentation
        =============
        
        * `streamsx.kafka package documentation <http://streamsxkafka.readthedocs.io/>`_
        
Keywords: streams,ibmstreams,streaming,analytics,streaming-analytics,messaging,kafka
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
